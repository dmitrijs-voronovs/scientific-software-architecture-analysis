quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Availability,"ject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidEnableTimer(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TSessionDescription*GetActDesc() const; virtual Pixel_tTGFrame::GetBackground() const; const TGPicture*GetBasePict() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGPopupMenu*GetCascadeMenu() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; TGHProgressBar*GetConnectProg() const; TContextMenu*GetContextMenu() const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSessionViewer.html:4639,error,error,4639,root/html528/TSessionViewer.html,https://root.cern,https://root.cern/root/html528/TSessionViewer.html,4,['error'],['error']
Availability,"ject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidEnable(Bool_t on = kTRUE)TOGGLE GETTER ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; Int_tTGTextButton::GetBottomMargin() const; TGClient*TGObject::GetClient() const; Pixel_tGetColor() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static FontStruct_tTGCheckButton::GetDefaultFontStruct(); static Pixel_tTGFrame::GetDefaultFrameBackground(); static const TGGC&TGCheckButton::GetDefaultGC(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionGetDefaultSize() const; virtual UInt_tTGFrame::GetD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGColorSelect.html:4979,error,error,4979,root/html528/TGColorSelect.html,https://root.cern,https://root.cern/root/html528/TGColorSelect.html,4,['error'],['error']
Availability,"ject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidEnableAlign(Bool_t on = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFontSelected(char* font)SIGNAL ; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompos",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGFontDialog.html:4588,error,error,4588,root/html602/TGFontDialog.html,https://root.cern,https://root.cern/root/html602/TGFontDialog.html,2,['error'],['error']
Availability,"ject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidTGTextEntry::End(Bool_t mark = kFALSE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; ETextJustificationTGTextEntry::GetAlignment() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGTextBuffer*TGTextEntry::GetBuffer() const; virtual Int_tGetCharWidth(const char* text = ""0"") const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); Int_tTGTextEntry::GetCursorPosition() const; virtual voidGetDate(Int_t& year, Int_t& month, Int_t& day) const; static FontStruct_tTGTextEntry::GetDefaultFontStruct(); static Pixel_tTGFrame::GetDefaultFrameBackground(); static const TGGC&TGTextEntr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGNumberEntryField.html:7231,error,error,7231,root/html602/TGNumberEntryField.html,https://root.cern,https://root.cern/root/html602/TGNumberEntryField.html,2,['error'],['error']
Availability,"ject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidEnableEntry(Int_t id); virtual Int_tEndMenu(void*& userData); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); virtual TGMenuEntry*GetCurrent() const; static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGFrame::GetDefaultSize() const; virtual UInt_tTGFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGPopupMenu.html:6667,error,error,6667,root/html602/TGPopupMenu.html,https://root.cern,https://root.cern/root/html602/TGPopupMenu.html,2,['error'],['error']
Availability,"ject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidEnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static voidErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static voidFilterLocalroot(TString& path, const char* url = ""root://dum/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFlushLogFile(); TObject*Get(const char* namecycle); Int_tGetActSessions() const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; TProofLockPath*GetCacheLock(); const char*GetConfDir() const; const char*GetConfFile() const; Float_tGetCpuTime() const; const char*GetDataDir() const; const char*GetDataDirOpts() const; static TMap*GetDataSetNodeMap(TFileCollection* fc, TString& emsg); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Float_tGetE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofServ.html:4460,error,error,4460,root/html534/TProofServ.html,https://root.cern,https://root.cern/root/html534/TProofServ.html,1,['error'],['error']
Availability,"ject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidEnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static voidErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFlushLogFile(); TObject*Get(const char* namecycle); Int_tGetActSessions() const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; TProofLockPath*GetCacheLock(); const char*GetConfDir() const; const char*GetConfFile() const; Float_tGetCpuTime() const; const char*GetDataDir() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Float_tGetEffSessions() const; TList*GetEnabledPackages() const; const char*GetGroup() const; Int_tGetGroupId() const; Int_tGetGroupSize() const; virtual const char*TObject::GetIconName() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofServ.html:4460,error,error,4460,root/html528/TProofServ.html,https://root.cern,https://root.cern/root/html528/TProofServ.html,3,['error'],['error']
Availability,"ject::ExecuteEventvirtual void ExecuteEvent(Int_t event, Int_t px, Int_t py)Execute action corresponding to an event at (px,py).Definition TObject.cxx:398; TObject::Executevirtual void Execute(const char *method, const char *params, Int_t *error=nullptr)Execute method on this object with the given parameter string, e.g.Definition TObject.cxx:364; TObject::GetObjectInfovirtual char * GetObjectInfo(Int_t px, Int_t py) constReturns string containing info about the object at position (px,py).Definition TObject.cxx:473; TObject::Deletevirtual void Delete(Option_t *option="""")Delete this object.Definition TObject.cxx:254; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::GetTitlevirtual const char * GetTitle() constReturns title of object.Definition TObject.cxx:488; TObject::Popvirtual void Pop()Pop on object drawn in a pad to the top of the display list.Definition TObject.cxx:621; TObject::kNoContextMenu@ kNoContextMenuif object does not want context menuDefinition TObject.h:69; TObject::kMustCleanup@ kMustCleanupif object destructor must call RecursiveRemove()Definition TObject.h:64; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TPadPainterImplement TVirtualPadPainter which abstracts painting operations.Definition TPadPainter.h:26; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::GetBorderModeShort_t GetBorderMode() const overrideDefinition TPad.h:199; TPad::SetBorderSizevoid SetBorderSize(Short_t bordersize) overrideDefinition TPad.h:326; TPad::GetTickyInt_t GetTicky() const overrideDe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:121783,error,error,121783,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['error'],['error']
Availability,"ject::FillImpl ; (; ROOT::Internal::TBranchIMTHelper * ; imtHelper). overrideprivatevirtual . Loop on all leaves of this branch to fill Basket buffer. ; Reimplemented from TBranch.; Definition at line 172 of file TBranchObject.cxx. ◆ GetClassName(). const char * TBranchObject::GetClassName ; (; ); const. inlineoverridevirtual . Return the name of the user class whose content is stored in this branch, if any. ; If this branch was created using the 'leaflist' technique, this function returns an empty string. ; Reimplemented from TBranch.; Definition at line 54 of file TBranchObject.h. ◆ GetEntry(). Int_t TBranchObject::GetEntry ; (; Long64_t ; entry = 0, . Int_t ; getall = 0 . ). overridevirtual . Read all branches of a BranchObject and return total number of bytes. . If entry = 0 take current entry number + 1; If entry < 0 reset entry number to 0. The function returns the number of bytes read from the input buffer. If entry does not exist the function returns 0.; If an I/O error occurs, the function returns -1. . Reimplemented from TBranch.; Definition at line 206 of file TBranchObject.cxx. ◆ GetExpectedType(). Int_t TBranchObject::GetExpectedType ; (; TClass *& ; clptr, . EDataType & ; type . ). overridevirtual . Fill expectedClass and expectedType with information on the data type of the object/values contained in this branch (and thus the type of pointers expected to be passed to Set[Branch]Address return 0 in case of success and > 0 in case of failure. ; Reimplemented from TBranch.; Definition at line 242 of file TBranchObject.cxx. ◆ GetObjClassName(). virtual const char * TBranchObject::GetObjClassName ; (; ). inlinevirtual . Definition at line 55 of file TBranchObject.h. ◆ Init(). void TBranchObject::Init ; (; TTree * ; tree, . TBranch * ; parent, . const char * ; name, . const char * ; classname, . void * ; addobj, . Int_t ; basketsize, . Int_t ; splitlevel, . Int_t ; compress, . bool ; isptrptr . ). protected . Initialization routine (run from the constructor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchObject.html:31531,error,error,31531,doc/master/classTBranchObject.html,https://root.cern,https://root.cern/doc/master/classTBranchObject.html,1,['error'],['error']
Availability,"ject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidios_base::register_callback(ios_base::event_callback fn, int index); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); basic_ostream<char,char_traits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::seekp(basic_ostream<char,char_traits<char> >::pos_type pos); basic_ostream<char,char_traits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::seekp(basic_ostream<char,char_traits<char> >::off_type, ios_base::seekdir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); ios_base::fmtflagsios_base::setf(ios_base::fmtflags fmtfl); ios_base::fmtflagsios_base::setf(ios_base::fmtflags fmtfl, ios_base::fmtflags mask); voidSetMinType(TMVA::EMsgType minType); static voidTObject::SetObjectStat(Bool_t stat); voidSetSource(const string& source); voidbasic_ios<char,char_traits<char> >::setstate(ios_base::iostate state); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); basic_ostringstream<char,char_traits<char>,allocator<char> >::__string_typebasic_ostringstream<char,char_traits<char>,allocator<char> >::str() const; voidbasic_ostringstream<char,char_traits<char>,allocator<char> >::str(const basic_ostringstream<char,char_traits<char>,allocator<char> >::__string_type& str); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); boolios_base::sync_with_stdio(bool sync = true); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; basic_ostream<char,char_traits<char> >::pos_typebasic_ostream<char,char_traits<char> >::tellp(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; basic_ostream<char,ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MsgLogger.html:6992,mask,mask,6992,root/html530/TMVA__MsgLogger.html,https://root.cern,https://root.cern/root/html530/TMVA__MsgLogger.html,2,['mask'],['mask']
Availability,"ject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidios_base::register_callback(ios_base::event_callback fn, int index); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); basic_ostream<char,char_traits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::seekp(basic_ostream<char,char_traits<char> >::pos_type pos); basic_ostream<char,char_traits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::seekp(basic_ostream<char,char_traits<char> >::off_type, ios_base::seekdir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); ios_base::fmtflagsios_base::setf(ios_base::fmtflags fmtfl); ios_base::fmtflagsios_base::setf(ios_base::fmtflags fmtfl, ios_base::fmtflags mask); voidSetMinType(TMVA::EMsgType minType); static voidTObject::SetObjectStat(Bool_t stat); voidSetSource(const string& source); voidbasic_ios<char,char_traits<char> >::setstate(ios_base::iostate state); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); basic_ostringstream<char,char_traits<char>,allocator<char> >::__string_typebasic_ostringstream<char,char_traits<char>,allocator<char> >::str() const; voidbasic_ostringstream<char,char_traits<char>,allocator<char> >::str(const basic_ostringstream<char,char_traits<char>,allocator<char> >::__string_type& str); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); boolios_base::sync_with_stdio(bool sync = true); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; basic_ostream<char,char_traits<char> >::pos_typebasic_ostream<char,char_traits<char> >::tellp(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; ba",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MsgLogger.html:6992,mask,mask,6992,root/html534/TMVA__MsgLogger.html,https://root.cern,https://root.cern/root/html534/TMVA__MsgLogger.html,1,['mask'],['mask']
Availability,"ject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t Run(TThread* th); Create a pthread. Returns 0 on success, otherwise an error number will; be returned. Int_t Join(TThread* th, void** ret); Join suspends the execution of the calling thread until the; thread identified by th terminates, either by calling pthread_exit; or by being cancelled. Returns 0 on success, otherwise an error number will; be returned. Int_t Exit(void* ret); Terminates the execution of the calling thread. Return 0. Int_t Kill(TThread* th); Cancellation is the mechanism by which a thread can terminate the; execution of another thread. Returns 0 on success, otherwise an error; number will be returned. Int_t SetCancelOff(); Turn off the cancellation state of the calling thread. Returns 0 on; success, otherwise an error number will be returned. Int_t SetCancelOn(); Turn on the cancellation state of the calling thread. Returns 0 on; success, otherwise an error number will be returned. Int_t SetCancelAsynchronous(); Set the cancellation response type of the calling thread to; asynchronous, i.e. cancel as soon as the cancellation request; is received. Int_t SetCancelDeferred(); Set the cancellation response type of the calling thread to; deferred, i.e. cancel only at next cancellation point.; Returns 0 on success, otherwise an error number will be returned. Int_t CancelPoint(); Introduce an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPosixThread.html:6041,error,error,6041,root/html530/TPosixThread.html,https://root.cern,https://root.cern/root/html530/TPosixThread.html,3,['error'],['error']
Availability,"ject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTGedFrame::fAvoidSignalflag for executing slots; Pixel_tTGFrame::fBackgroundframe background color; Int_tTGFrame::fBorderWidthframe border width; TGClient*TGObject::fClientConnection to display server; TEveGValuator*fConeL; TEveGValuator*fConeR; Int_tTGFrame::fDNDStateEDNDFlags; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TList*TGedFrame::fExtraTabsaddtional tabs in ged editor; TGFrameElement*TGFrame::fFEpointer to frame element; TGedEditor*TGedFrame::fGedEditormanager of this frame; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; Bool_tTGedFrame::fInitinit flag for setting signals/slots; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TEveArrow*fMModel object.; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TClass*TGedFrame::fModelClassclass corresponding to instantiated GedFrame; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveArrowEditor.html:18233,mask,mask,18233,root/html602/TEveArrowEditor.html,https://root.cern,https://root.cern/root/html602/TEveArrowEditor.html,2,['mask'],['mask']
Availability,"ject::kOverwrite; static TClass::ENewTypekRealNew; static TClass::ECheckSumkReflex; static TClass::ECheckSumkReflexNoComment; static TDictionary::ESTLTypeTDictionary::kSet; static TObject::(anonymous)TObject::kSingleKey; static TClass::(anonymous)kStartWithTObject; static TClass::(anonymous)kUnloaded; static TDictionary::ESTLTypeTDictionary::kUnorderedMap; static TDictionary::ESTLTypeTDictionary::kUnorderedMultimap; static TDictionary::ESTLTypeTDictionary::kUnorderedMultiset; static TDictionary::ESTLTypeTDictionary::kUnorderedSet; static TDictionary::ESTLTypeTDictionary::kVector; static TClass::(anonymous)kWarned; static TClass::ECheckSumkWithTypeDef; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TViewPubDataMembers*fAllPubDataall public data members (including from base classes); TViewPubFunctions*fAllPubMethodall public methods (including from base classes); TList*fBaselinked list for base classes; atomic<Bool_t>fCanLoadClassInfo!Indicates whether the ClassInfo is supposed to be available.; Int_tfCanSplit!Indicates whether this class can be split or not.; UInt_tfCheckSumchecksum of data members and base classes; ClassInfo_t*fClassInfopointer to CINT class info class; TList*fClassMenuListlist of class menu items; Long_tfClassProperty!C++ Property of the class (is abstract, has virtual table, etc.); Version_tfClassVersionClass version Identifier; TVirtualCollectionProxy*fCollectionProxyCollection interface; TStringfContextMenuTitlecontext menu title; ClassConvStreamerFunc_tfConvStreamerFuncWrapper around this class custom conversion Streamer member function.; TClass::ConvSIMap_tfConversionStreamerInfoArray of the streamer infos derived from another class.; atomic<TVirtualStreamerInfo*>fCurrentInfo!cached current streamer info.; TListOfDataMembers*fDatalinked list for data members; Short_tfDeclFileLineline of class declaratio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TClass.html:20808,avail,available,20808,root/html604/TClass.html,https://root.cern,https://root.cern/root/html604/TClass.html,1,['avail'],['available']
Availability,"ject; Fill in events; Statistic options; Coverage probabilities for different methods; Merging and combining TEfficiency objects. When should I use merging?; When should I use combining?. Further operations. Information about the internal histograms; Fitting; Draw a TEfficiency object. TEfficiency class. I. Overview; This class handles the calculation of efficiencies and their uncertainties. It; provides several statistical methods for calculating frequentist and bayesian; confidence intervals as well as a function for combining several efficiencies.; ; Efficiencies have a lot of applications and meanings but in principle they can; be described by the fraction of good/passed events k out of sample containing; N events. One is usually interested in the dependency of the efficiency on other; (binned) variables. The number of passed and total events is therefore stored; internally in two histograms (fTotalHistogram and; fPassedHistogram). Then the; efficiency as well as its upper and lower error an be calculated for each bin; individually.; As the efficiency can be regarded as a parameter of a binomial distribution, the; number of pass ed and total events must always be integer numbers. Therefore a; filling with weights is not possible however you can assign a global weight to each; TEfficiency object (SetWeight). It is necessary to create one TEfficiency object; for each weight if you investigate a process involving different weights. This; procedure needs more effort but enables you to re-use the filled object in cases; where you want to change one or more weights. This would not be possible if all; events with different weights were filled in the same histogram.; ; II. Creating a TEfficiency object; If you start a new analysis, it is highly recommended to use the TEfficiency class; from the beginning. You can then use one of the constructors for fixed or; variable bin size and your desired dimension. These constructors append the; created TEfficiency object to the cu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEfficiency.html:1439,error,error,1439,root/html528/TEfficiency.html,https://root.cern,https://root.cern/root/html528/TEfficiency.html,3,['error'],['error']
Availability,"ject; Fill in events; Statistic options; Coverage probabilities for different methods; Merging and combining TEfficiency objects. When should I use merging?; When should I use combining?. Further operations. Information about the internal histograms; Fitting; Draw a TEfficiency object. TEfficiency class. I. Overview; This class handles the calculation of efficiencies and their uncertainties. It; provides several statistical methods for calculating frequentist and bayesian; confidence intervals as well as a function for combining several efficiencies.; ; Efficiencies have a lot of applications and meanings but in principle they can; be described by the fraction of good/passed events k out of sample containing; N events. One is usually interested in the dependency of the efficiency on other; (binned) variables. The number of passed and total events is therefore stored; internally in two histograms (fTotalHistogram and; fPassedHistogram). Then the; efficiency as well as its upper and lower error an be calculated for each bin; individually.; As the efficiency can be regarded as a parameter of a binomial distribution, the; number of pass ed and total events must always be integer numbers. Therefore a; filling with weights is not possible however you can assign a global weight to each; TEfficiency object (SetWeight). It is necessary to create one TEfficiency object; for each weight if you investigate a process involving different weights. This; procedure needs more effort but enables you to re-use the filled object in cases; where you want to change one or more weights. This would not be possible if all; events with different weights were filled in the same histogram.; II. Creating a TEfficiency object; If you start a new analysis, it is highly recommended to use the TEfficiency class; from the beginning. You can then use one of the constructors for fixed or; variable bin size and your desired dimension. These constructors append the; created TEfficiency object to the curr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEfficiency.html:1439,error,error,1439,root/html534/TEfficiency.html,https://root.cern,https://root.cern/root/html534/TEfficiency.html,3,['error'],['error']
Availability,"ject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TRint &)=deleteTRintprivate; TObject::operator=(const TObject &rhs)TObjectinline; Paint(Option_t *option="""")TObjectvirtual; ParseRemoteLine(const char *ln, TString &hostdir, TString &user, Int_t &dbg, TString &script)TApplicationprotectedstatic; Pop()TObjectvirtual; Print(Option_t *option="""") constTObjectvirtual; PrintLogo(Bool_t lite=kFALSE)TRintvirtual; ProcessFile(const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE)TApplicationvirtual; ProcessLine(const char *line, Bool_t sync=kFALSE, Int_t *error=nullptr)TApplicationvirtual; ProcessLineNr(const char *filestem, const char *line, Int_t *error=nullptr)TRintprivate; ProcessRemote(const char *line, Int_t *error=nullptr) overrideTRintprivatevirtual; QuitOpt() constTApplicationinline; Raise()TApplicationinlinevirtual; Read(const char *name)TObjectvirtual; RecursiveRemove(TObject *obj)TObjectvirtual; RemoveIdleTimer()TApplicationvirtual; ResetBit(UInt_t f)TObjectinline; ReturnFromRun() constTApplicationinline; ReturnPressed(char *text)TApplicationvirtual; Run(Bool_t retrn=kFALSE) overrideTRintvirtual; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetEchoMode(Bool_t mode) overrideTRintvirtual; SetIdleTimer(UInt_t idleTimeInSec, const char *command)TApplicationvirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetPrompt(const char *newPrompt)TRintvirtual; SetReturnFromRun(Bool_t ret)TApplicationinline; SetSignalHandler(TSignalHandler *sh)TApplicati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRint-members.html:10080,error,error,10080,doc/master/classTRint-members.html,https://root.cern,https://root.cern/doc/master/classTRint-members.html,1,['error'],['error']
Availability,"jectAny(). void * TKeySQL::ReadObjectAny ; (; const TClass * ; expectedClass). finalvirtual . Read object of any type from SQL database. ; Reimplemented from TKey.; Definition at line 252 of file TKeySQL.cxx. ◆ ReadObjWithBuffer(). TObject * TKeySQL::ReadObjWithBuffer ; (; char * ; bufferRead). finalvirtual . Read object derived from TObject class If it is not TObject or in case of error, return 0. ; Reimplemented from TKey.; Definition at line 228 of file TKeySQL.cxx. ◆ SetBuffer(). void TKeySQL::SetBuffer ; (; ). inlinefinalvirtual . Reimplemented from TKey.; Definition at line 65 of file TKeySQL.h. ◆ StoreKeyObject(). void TKeySQL::StoreKeyObject ; (; const void * ; obj, . const TClass * ; cl . ). protected . Stores object, associated with key, into data tables. ; Definition at line 155 of file TKeySQL.cxx. ◆ Streamer(). void TKeySQL::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TKey. ◆ StreamerNVirtual(). void TKeySQL::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 68 of file TKeySQL.h. ◆ WriteFile(). Int_t TKeySQL::WriteFile ; (; Int_t ; cycle = 1, . TFile * ; f = nullptr . ). inlinefinalvirtual . Write the encoded object supported by this key. ; The function returns the number of bytes committed to the file. If a write error occurs, the number of bytes returned is -1. ; Reimplemented from TKey.; Definition at line 66 of file TKeySQL.h. Member Data Documentation. ◆ fKeyId. Long64_t TKeySQL::fKeyId {-1}. protected . ! key identifier in KeysTables ; Definition at line 33 of file TKeySQL.h. ◆ fObjId. Long64_t TKeySQL::fObjId {-1}. protected . ! stored object identifier ; Definition at line 34 of file TKeySQL.h. Libraries for TKeySQL:. [legend]; The documentation for this class was generated from the following files:; io/sql/inc/TKeySQL.h; io/sql/src/TKeySQL.cxx. TKeySQL. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKeySQL.html:25306,error,error,25306,doc/master/classTKeySQL.html,https://root.cern,https://root.cern/doc/master/classTKeySQL.html,1,['error'],['error']
Availability,"jection is always of the type TH2D. if option ""E"" is specified the errors of the projected histogram are computed and set; to be equal to the errors of the profile.; Option ""E"" is defined as the default one in the header file.; if option """" is specified the histogram errors are simply the sqrt of its content; if option ""B"" is specified, the content of bin of the returned histogram; will be equal to the GetBinEntries(bin) of the profile,; if option ""C=E"" the bin contents of the projection are set to the; bin errors of the profile; if option ""W"" is specified the bin content of the projected histogram is set to the; product of the bin content of the profile and the entries.; With this option the returned histogram will be equivalent to the one obtained by; filling directly a TH2D using the 3-rd value as a weight.; This option makes sense only for profile filled with all weights =1.; When the profile is weighted (filled with weights different than 1) the; bin error of the projected histogram (obtained using this option ""W"") cannot be; correctly computed from the information stored in the profile. In that case the; obtained histogram contains as bin error square the weighted sum of the square of the; profiled observable (TProfile2D::fSumw2[bin] ). TProfile * ProfileX(const char* name = ""_pfx"", Int_t firstybin = 0, Int_t lastybin = -1, Option_t* option = """") const; *-*-*-*-*Project a 2-D histogram into a profile histogram along X*-*-*-*-*-*; *-* ========================================================. The projection is made from the channels along the Y axis; ranging from firstybin to lastybin included.; The result is a 1D profile which contains the combination of all the considered bins along Y; By default, bins 1 to ny are included; When all bins are included, the number of entries in the projection; is set to the number of entries of the 2-D histogram, otherwise; the number of entries is incremented by 1 for all non empty cells. The option can also be used to specify ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProfile2D.html:41198,error,error,41198,root/html534/TProfile2D.html,https://root.cern,https://root.cern/root/html534/TProfile2D.html,3,['error'],['error']
Availability,"jection is always of the type TH2D. if option ""E"" is specified the errors of the projected histogram are computed and set; to be equal to the errors of the profile.; Option ""E"" is defined as the default one in the header file.; if option """" is specified the histogram errors are simply the sqrt of its content; if option ""B"" is specified, the content of bin of the returned histogram; will be equal to the GetBinEntries(bin) of the profile,; if option ""C=E"" the bin contents of the projection are set to the; bin errors of the profile; if option ""W"" is specified the bin content of the projected histogram is set to the; product of the bin content of the profile and the entries.; With this option the returned histogram will be equivalent to the one obtained by; filling directly a TH2D using the 3-rd value as a weight.; This option makes sense only for profile filled with all weights =1.; When the profile is weighted (filled with weights different than 1) the; bin error of the projected histogram (obtained using this option ""W"") cannot be; correctly computed from the information stored in the profile. void PutStats(Double_t* stats); Replace current statistics with the values in array stats. void Reset(Option_t* option = """"); -*-*Reset contents of a Profile2D histogram; *-* =======================================. void RebinAxis(Double_t x, TAxis* axis); Profile histogram is resized along axis such that x is in the axis range.; The new axis limits are recomputed by doubling iteratively; the current axis range until the specified value x is within the limits.; The algorithm makes a copy of the histogram, then loops on all bins; of the old histogram to fill the rebinned histogram.; Takes into account errors (Sumw2) if any.; The bit kCanRebin must be set before invoking this function.; Ex: h->SetBit(TH1::kCanRebin);. TProfile2D * Rebin2D(Int_t nxgroup = 2, Int_t nygroup = 2, const char* newname = """"); -*-*-*Rebin this histogram grouping nxgroup/nygroup bins along the xaxis/yaxis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile2D.html:40818,error,error,40818,root/html528/TProfile2D.html,https://root.cern,https://root.cern/root/html528/TProfile2D.html,3,['error'],['error']
Availability,"jection::fScaleRscale factor to keep projected radius at fFixR fixed; Float_tTEveProjection::fScaleZscale factor to keep projected z-coordinate at fFixZ fixed; TEveProjection::EPType_eTEveProjection::fTypetype; TEveVectorTEveProjection::fUpLimitconvergence of point -infinity; Bool_tTEveProjection::fUsePreScaleuse pre-scaling; TEveVectorTEveProjection::fZeroPosValprojected origin (0, 0, 0). private:. TEveVectorfProjectedCenterprojected center of distortion. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveRhoZProjection(); Constructor. void ProjectPoint(Float_t& x, Float_t& y, Float_t& z, Float_t d, TEveProjection::EPProc_e proc = kPP_Full); Project point. void SetCenter(TEveVector& center); Set center of distortion (virtual method). void UpdateLimit(); Update convergence in +inf and -inf. void SetDirectionalVector(Int_t screenAxis, TEveVector& vec); Get direction in the unprojected space for axis index in the; projected space.; This is virtual method from base-class TEveProjection. Bool_t AcceptSegment(TEveVector& v1, TEveVector& v2, Float_t tolerance) const; Check if segment of two projected points is valid. Move slightly one of the points if by shifting it by no more than; tolearance the segment can become acceptable. Int_t SubSpaceId(const TEveVector& v) const; Return sub-space id for the point.; 0 - upper half-space; 1 - lowwer half-space. Bool_t IsOnSubSpaceBoundrary(const TEveVector& v) const; Checks if point is on sub-space boundrary. Bool_t Is2D() const. Bool_t Is3D() const. Float_t* GetProjectedCenter(); { return fCenter.Arr(); }. Bool_t HasSeveralSubSpaces() const; { return kFALSE; }. TEveRhoZProjection(). virtual ~TEveRhoZProjection(); {}. » Last changed: root/eve:$Id: TEveProjections.h 35221 2010-09-10 11:46:37Z matevz $ » Last generated: 2010-09-23 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveRhoZProjection.html:6050,toler,tolerance,6050,root/html528/TEveRhoZProjection.html,https://root.cern,https://root.cern/root/html528/TEveRhoZProjection.html,1,['toler'],['tolerance']
Availability,"jects; 175 if (fEX) delete [] fEX;; 176 if (fEY) delete [] fEY;; 177 if (fEZ) delete [] fEZ;; 178 ; 179 fEX = (fSize > 0) ? new Double_t[fSize] : nullptr;; 180 fEY = (fSize > 0) ? new Double_t[fSize] : nullptr;; 181 fEZ = (fSize > 0) ? new Double_t[fSize] : nullptr;; 182 ; 183 ; 184 // copy error arrays; 185 for (Int_t n = 0; n < fSize; n++) {; 186 fEX[n] = g.fEX[n];; 187 fEY[n] = g.fEY[n];; 188 fEZ[n] = g.fEZ[n];; 189 }; 190 return *this;; 191}; 192 ; 193////////////////////////////////////////////////////////////////////////////////; 194/// Add a point with errorbars to the graph.; 195 ; 196void TGraph2DErrors::AddPointError(Double_t x, Double_t y, Double_t z, Double_t ex, Double_t ey, Double_t ez); 197{; 198 AddPoint(x, y, z); // this will increase fNpoints by one; 199 SetPointError(fNpoints - 1, ex, ey, ez);; 200}; 201 ; 202////////////////////////////////////////////////////////////////////////////////; 203/// This function is called by Graph2DFitChisquare.; 204/// It returns the error along X at point i.; 205 ; 206Double_t TGraph2DErrors::GetErrorX(Int_t i) const; 207{; 208 if (i < 0 || i >= fNpoints) return -1;; 209 if (fEX) return fEX[i];; 210 return -1;; 211}; 212 ; 213 ; 214////////////////////////////////////////////////////////////////////////////////; 215/// This function is called by Graph2DFitChisquare.; 216/// It returns the error along Y at point i.; 217 ; 218Double_t TGraph2DErrors::GetErrorY(Int_t i) const; 219{; 220 if (i < 0 || i >= fNpoints) return -1;; 221 if (fEY) return fEY[i];; 222 return -1;; 223}; 224 ; 225 ; 226////////////////////////////////////////////////////////////////////////////////; 227/// This function is called by Graph2DFitChisquare.; 228/// It returns the error along Z at point i.; 229 ; 230Double_t TGraph2DErrors::GetErrorZ(Int_t i) const; 231{; 232 if (i < 0 || i >= fNpoints) return -1;; 233 if (fEZ) return fEZ[i];; 234 return -1;; 235}; 236 ; 237 ; 238////////////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph2DErrors_8cxx_source.html:5941,error,error,5941,doc/master/TGraph2DErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph2DErrors_8cxx_source.html,1,['error'],['error']
Availability,"jitting argument of type short; [#6802] - Allow to pass Bearer token authentication header to Davix client; [#7345] - Issue building built-in libafterimage; [#6812] - root REPL problem with unsigned num assigned to a not declared item; [#7292] - compilation fails on xrootd: _STAT_VER was not declared; [#7481] - String parse error in RooSimPdfBuilder.cxx; [#7433] - Segmentation fault after quitting Cling in CUDA mode; [#7239] - [RF] Use integral of PDF curves for pull plots and residuals; [#7390] - Must not forward declare template specialization with enumerator as template arg; [#7454] - [RF][Docs] Breaking changes of batch computation interface not documented in release notes; [#7558] - AfterImage compilation broken with binutils 2.36; [#7507] - [tree] Possible error in TLeaf::GetLeafCounter; [#7361] - RooFit backend library: force to specific architecture; [#7362] - Incremental build problems; [#7319] - [Hist] Wrong computation in TH3::GetCovariance for diagonal elements; [#7206] - Unable to build with builtin_cling=OFF for LLVM 9; [#7157] - RooFFTConvPdf doesn’t work with RooProdPdf; [#7076] - RNTuple, parallel unzip tear down race condition; [#7021] - cling depends on exact macOS SDK headers; [#6953] - Missing documentation for ROOT.RDF.MakeNumpyDataFrame; [#6421] - Proposal to unify logging in Minuit2; [#7302] - TGraph copy constructor error; [#7212] - TMathText does not display with high value coordinates; [#6997] - Fill attribute is not fully reflected in THStack; [#6360] - [Docs] Missing figures in RDF tutorials 10[5,6,7] on doxygen; [#7093] - Race condition affecting (at least) TEnum::GetEnum; [#7054] - sporadic roottest-python-cmdLineUtils failures; [#6939] - Problems when TFile object is opened and closed on different threads.; [#6715] - [bug] Type overflow in TMessageHandler; [#7281] - Trailing dot dropped in top level branch name. Release 6.24/02; Published on June 28, 2021; RDataFrame. Scaling behavior at high core counts (32+ cores) has been improved ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:45944,error,error,45944,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,2,"['down', 'error']","['down', 'error']"
Availability,"jsroot.js""></script>; <script>; // getting json string from somewhere; let obj = JSROOT.parse(root_json);; JSROOT.draw('plain', obj, 'colz');; </script>; 1.11.2 Use of JSON; It is strongly recommended to use JSON when communicating with ROOT application. THttpServer provides a JSON representation for every registered object with an url address like:; http://your_root_server:8080/Canvases/c1/root.json; Such JSON representation generated using the TBufferJSON class. One could create JSON file for any ROOT object directly, just writing in the code:; obj->SaveAs(""file.json"");; To access data from a remote web server, it is recommended to use the httpRequest method. For instance to receive object from a THttpServer server one could do:; import { httpRequest } from 'https://root.cern/js/latest/modules/main.mjs';; let obj = await httpRequest(""http://your_root_server:8080/Canvases/c1/root.json"", ""object""); console.log('Read object of type', obj._typename);; Function returns Promise, which provides parsed object (or Error in case of failure).; If JSON string was obtained by different method, it could be parsed with parse function:; import { parse } from 'https://root.cern/js/latest/modules/main.mjs';; let obj = parse(json_string);; 1.11.3 Objects drawing; After an object has been created, one can directly draw it. If HTML page has <div> element:; <div id=""drawing""></div>; One could use the draw function:; import { draw } from 'https://root.cern/js/latest/modules/main.mjs';; draw(""drawing"", obj, ""colz"");; The first argument is the id of the HTML div element, where drawing will be performed. The second argument is the object to draw and the third one is the drawing option.; Here is complete running example ans source code:; import { httpRequest, draw, redraw, resize, cleanup } from 'https://root.cern/js/latest/modules/main.mjs';; let filename = ""https://root.cern/js/files/th2ul.json.gz"";; let obj = await httpRequest(filename, 'object');; draw(""drawing"", obj, ""lego"");; In very ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html:26030,failure,failure,26030,root/htmldoc/guides/JSROOT/JSROOT.html,https://root.cern,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html,1,['failure'],['failure']
Availability,"just add while-loops into the equality-case handling to; perform the tally:. } else {; double x = a[ia-1];; while(a[ia-1] == x && ia <= na) {; rdiff -= sa;; ia++;; }; while(b[ib-1] == x && ib <= nb) {; rdiff += sb;; ib++;; }; if (ia > na) {ok = kTRUE; break;}; if (ib > nb) {ok = kTRUE; break;}; }. NOTE1; A good description of the Kolmogorov test can be seen at:; http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm. Double_t Voigt(Double_t x, Double_t sigma, Double_t lg, Int_t R = 4); Computation of Voigt function (normalised).; Voigt is a convolution of; gauss(xx) = 1/(sqrt(2*pi)*sigma) * exp(xx*xx/(2*sigma*sigma); and; lorentz(xx) = (1/pi) * (lg/2) / (xx*xx + lg*lg/4); functions. The Voigt function is known to be the real part of Faddeeva function also; called complex error function [2]. The algoritm was developed by J. Humlicek [1].; This code is based on fortran code presented by R. J. Wells [2].; Translated and adapted by Miha D. Puc. To calculate the Faddeeva function with relative error less than 10^(-r).; r can be set by the the user subject to the constraints 2 <= r <= 5. [1] J. Humlicek, JQSRT, 21, 437 (1982).; [2] R.J. Wells ""Rapid Approximation to the Voigt/Faddeeva Function and its; Derivatives"" JQSRT 62 (1999), pp 29-48.; http://www-atm.physics.ox.ac.uk/user/wells/voigt.html. Bool_t RootsCubic(const Double_t* coef, Double_t& a, Double_t& b, Double_t& c); Calculates roots of polynomial of 3rd order a*x^3 + b*x^2 + c*x + d, where; a == coef[3], b == coef[2], c == coef[1], d == coef[0]; coef[3] must be different from 0; If the boolean returned by the method is false:; ==> there are 3 real roots a,b,c; If the boolean returned by the method is true:; ==> there is one real root a and 2 complex conjugates roots (b+i*c,b-i*c); Author: Francois-Xavier Gentit. void Quantiles(Int_t n, Int_t nprob, Double_t* x, Double_t* quantiles, Double_t* prob, Bool_t isSorted = kTRUE, Int_t* index = 0, Int_t type = 7); Computes sample quantiles, corresponding to the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMath.html:21093,error,error,21093,root/html528/TMath.html,https://root.cern,https://root.cern/root/html528/TMath.html,2,['error'],['error']
Availability,"just add while-loops into the equality-case handling to; perform the tally:. } else {; double x = a[ia-1];; while(a[ia-1] == x && ia <= na) {; rdiff -= sa;; ia++;; }; while(b[ib-1] == x && ib <= nb) {; rdiff += sb;; ib++;; }; if (ia > na) {ok = kTRUE; break;}; if (ib > nb) {ok = kTRUE; break;}; }. NOTE1; A good description of the Kolmogorov test can be seen at:; http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm. Double_t Voigt(Double_t x, Double_t sigma, Double_t lg, Int_t r = 4); Computation of Voigt function (normalised).; Voigt is a convolution of; gauss(xx) = 1/(sqrt(2*pi)*sigma) * exp(xx*xx/(2*sigma*sigma); and; lorentz(xx) = (1/pi) * (lg/2) / (xx*xx + lg*lg/4); functions. The Voigt function is known to be the real part of Faddeeva function also; called complex error function [2]. The algoritm was developed by J. Humlicek [1].; This code is based on fortran code presented by R. J. Wells [2].; Translated and adapted by Miha D. Puc. To calculate the Faddeeva function with relative error less than 10^(-r).; r can be set by the the user subject to the constraints 2 <= r <= 5. [1] J. Humlicek, JQSRT, 21, 437 (1982).; [2] R.J. Wells ""Rapid Approximation to the Voigt/Faddeeva Function and its; Derivatives"" JQSRT 62 (1999), pp 29-48.; http://www-atm.physics.ox.ac.uk/user/wells/voigt.html. Bool_t RootsCubic(const Double_t* coef, Double_t& a, Double_t& b, Double_t& c); Calculates roots of polynomial of 3rd order a*x^3 + b*x^2 + c*x + d, where; a == coef[3], b == coef[2], c == coef[1], d == coef[0]; coef[3] must be different from 0; If the boolean returned by the method is false:; ==> there are 3 real roots a,b,c; If the boolean returned by the method is true:; ==> there is one real root a and 2 complex conjugates roots (b+i*c,b-i*c); Author: Francois-Xavier Gentit. void Quantiles(Int_t n, Int_t nprob, Double_t* x, Double_t* quantiles, Double_t* prob, Bool_t isSorted = kTRUE, Int_t* index = 0, Int_t type = 7); Computes sample quantiles, corresponding to the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMath.html:21193,error,error,21193,root/html532/TMath.html,https://root.cern,https://root.cern/root/html532/TMath.html,2,['error'],['error']
Availability,"just add while-loops into the equality-case handling to; perform the tally:. } else {; double x = a[ia-1];; while(a[ia-1] == x && ia <= na) {; rdiff -= sa;; ia++;; }; while(b[ib-1] == x && ib <= nb) {; rdiff += sb;; ib++;; }; if (ia > na) {ok = kTRUE; break;}; if (ib > nb) {ok = kTRUE; break;}; }. NOTE1; A good description of the Kolmogorov test can be seen at:; http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm. Double_t Voigt(Double_t x, Double_t sigma, Double_t lg, Int_t r = 4); Computation of Voigt function (normalised).; Voigt is a convolution of; gauss(xx) = 1/(sqrt(2*pi)*sigma) * exp(xx*xx/(2*sigma*sigma); and; lorentz(xx) = (1/pi) * (lg/2) / (xx*xx + lg*lg/4); functions. The Voigt function is known to be the real part of Faddeeva function also; called complex error function [2]. The algoritm was developed by J. Humlicek [1].; This code is based on fortran code presented by R. J. Wells [2].; Translated and adapted by Miha D. Puc. To calculate the Faddeeva function with relative error less than 10^(-r).; r can be set by the the user subject to the constraints 2 <= r <= 5. [1] J. Humlicek, JQSRT, 21, 437 (1982).; [2] R.J. Wells ""Rapid Approximation to the Voigt/Faddeeva Function and its; Derivatives"" JQSRT 62 (1999), pp 29-48.; http://www-atm.physics.ox.ac.uk/user/wells/voigt.html. Bool_t RootsCubic(const Double_t[4] coef, Double_t& a, Double_t& b, Double_t& c); Calculates roots of polynomial of 3rd order a*x^3 + b*x^2 + c*x + d, where; a == coef[3], b == coef[2], c == coef[1], d == coef[0]; coef[3] must be different from 0; If the boolean returned by the method is false:; ==> there are 3 real roots a,b,c; If the boolean returned by the method is true:; ==> there is one real root a and 2 complex conjugates roots (b+i*c,b-i*c); Author: Francois-Xavier Gentit. void Quantiles(Int_t n, Int_t nprob, Double_t* x, Double_t* quantiles, Double_t* prob, Bool_t isSorted = kTRUE, Int_t* index = 0, Int_t type = 7); Computes sample quantiles, corresponding to th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMath.html:15901,error,error,15901,root/html602/TMath.html,https://root.cern,https://root.cern/root/html602/TMath.html,2,['error'],['error']
Availability,"just forward to the child and the default method.; 3648 virtual void clear() override; 3649 {; 3650 fChild->clear();; 3651 DiagnosticConsumer::clear();; 3652 }; 3653 ; 3654 virtual void BeginSourceFile(const clang::LangOptions &LangOpts, const clang::Preprocessor *PP) override; 3655 {; 3656 fChild->BeginSourceFile(LangOpts, PP);; 3657 DiagnosticConsumer::BeginSourceFile(LangOpts, PP);; 3658 }; 3659 ; 3660 virtual void EndSourceFile() override; 3661 {; 3662 fChild->EndSourceFile();; 3663 DiagnosticConsumer::EndSourceFile();; 3664 }; 3665 ; 3666 virtual void finish() override; 3667 {; 3668 fChild->finish();; 3669 DiagnosticConsumer::finish();; 3670 }; 3671 ; 3672 virtual bool IncludeInDiagnosticCounts() const override { return fChild->IncludeInDiagnosticCounts(); }; 3673};; 3674 ; 3675static void MaybeSuppressWin32CrashDialogs() {; 3676#if defined(_WIN32) && defined(_MSC_VER); 3677 // Suppress error dialogs to avoid hangs on build nodes.; 3678 // One can use an environment variable (Cling_GuiOnAssert) to enable; 3679 // the error dialogs.; 3680 const char *EnablePopups = getenv(""Cling_GuiOnAssert"");; 3681 if (EnablePopups == nullptr || EnablePopups[0] == '0') {; 3682 ::_set_error_mode(_OUT_TO_STDERR);; 3683 _CrtSetReportMode(_CRT_WARN, _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);; 3684 _CrtSetReportFile(_CRT_WARN, _CRTDBG_FILE_STDERR);; 3685 _CrtSetReportMode(_CRT_ERROR, _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);; 3686 _CrtSetReportFile(_CRT_ERROR, _CRTDBG_FILE_STDERR);; 3687 _CrtSetReportMode(_CRT_ASSERT, _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);; 3688 _CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);; 3689 }; 3690#endif; 3691}; 3692 ; 3693static llvm::cl::opt<bool> gOptForce(""f"", llvm::cl::desc(""Overwrite <file>s.""),; 3694 llvm::cl::cat(gRootclingOptions));; 3695static llvm::cl::opt<bool> gOptRootBuild(""rootbuild"", llvm::cl::desc(""If we are building ROOT.""),; 3696 llvm::cl::Hidden,; 3697 llvm::cl::cat(gRootclingOptions));; 3698enum VerboseLevel {; 3699 v = ROOT::TMetaUti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:146835,error,error,146835,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['error'],['error']
Availability,"jvar<<"")="" <<(*covMat)(jvar, jvar); 352 << Endl;; 353 ; 354 }; 355 }; 356 else (*corrMat)(ivar, ivar) = 1.0;; 357 }; 358 }; 359 Log() << Endl;; 360 return corrMat;; 361}; 362 ; 363////////////////////////////////////////////////////////////////////////////////; 364/// projects variable from tree into normalised histogram; 365 ; 366TH1* TMVA::Tools::projNormTH1F( TTree* theTree, const TString& theVarName,; 367 const TString& name, Int_t nbins,; 368 Double_t xmin, Double_t xmax, const TString& cut ); 369{; 370 // needed because of ROOT bug (feature) that excludes events that have value == xmax; 371 xmax += 0.00001;; 372 ; 373 TH1* hist = new TH1F( name, name, nbins, xmin, xmax );; 374 hist->Sumw2(); // enable quadratic errors; 375 theTree->Project( name, theVarName, cut );; 376 NormHist( hist );; 377 return hist;; 378}; 379 ; 380////////////////////////////////////////////////////////////////////////////////; 381/// normalises histogram; 382 ; 383Double_t TMVA::Tools::NormHist( TH1* theHist, Double_t norm ); 384{; 385 if (!theHist) return 0;; 386 ; 387 if (theHist->GetSumw2N() == 0) theHist->Sumw2();; 388 if (theHist->GetSumOfWeights() != 0) {; 389 Double_t w = ( theHist->GetSumOfWeights(); 390 *(theHist->GetXaxis()->GetXmax() - theHist->GetXaxis()->GetXmin())/theHist->GetNbinsX() );; 391 if (w > 0) theHist->Scale( norm/w );; 392 return w;; 393 }; 394 ; 395 return 1.0;; 396}; 397 ; 398////////////////////////////////////////////////////////////////////////////////; 399/// Parse the string and cut into labels separated by "":""; 400 ; 401TList* TMVA::Tools::ParseFormatLine( TString formatString, const char* sep ); 402{; 403 TList* labelList = new TList();; 404 labelList->SetOwner();; 405 while (formatString.First(sep)==0) formatString.Remove(0,1); // remove initial separators; 406 ; 407 while (formatString.Length()>0) {; 408 if (formatString.First(sep) == -1) { // no more separator; 409 labelList->Add(new TObjString(formatString.Data()));; 410 formatString="""";; 411 break;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:12875,error,errors,12875,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['error'],['errors']
Availability,"k 'opt' is an or of ESendFileOpt: kCpBin (0x8) Retrieve from the cache the binaries associated with the file kCp (0x10) Retrieve the files from the cache Return -1 in case of error, 0 otherwise. ; Definition at line 1593 of file TProofLite.cxx. ◆ CreateSandbox(). Int_t TProofLite::CreateSandbox ; (; ). private . Create the sandbox for this session. ; Definition at line 880 of file TProofLite.cxx. ◆ DeclFileName(). static const char * TProofLite::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 170 of file TProofLite.h. ◆ DrawSelect(). Long64_t TProofLite::DrawSelect ; (; TDSet * ; dset, . const char * ; varexp, . const char * ; selection = """", . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; first = 0 . ). overridevirtual . Execute the specified drawing action on a data set (TDSet). ; Event- or Entry-lists should be set in the data set object using TDSet::SetEntryList. Returns -1 in case of error or number of selected events otherwise. ; Reimplemented from TProof.; Definition at line 1053 of file TProofLite.cxx. ◆ ExistsDataSet(). Bool_t TProofLite::ExistsDataSet ; (; const char * ; uri). overridevirtual . Returns kTRUE if 'dataset' described by 'uri' exists, kFALSE otherwise. ; Reimplemented from TProof.; Definition at line 2031 of file TProofLite.cxx. ◆ FindUniqueSlaves(). void TProofLite::FindUniqueSlaves ; (; ). overrideprivatevirtual . Add to the fUniqueSlave list the active slaves that have a unique (user) file system image. ; This information is used to transfer files only once to nodes that share a file system (an image). Submasters which are not in fUniqueSlaves are put in the fNonUniqueMasters list. That list is used to trigger the transferring of files to the submaster's unique slaves without the need to transfer the file to the submaster. ; Reimplemented from TProof.; Definition at line 2450 of file TProofLite.cxx. ◆ GetDataSet(). TFileCollection * TProofLite::GetDataSet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:50884,error,error,50884,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['error'],['error']
Availability,"k Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::ScanMinimizer. class ROOT::Minuit2::ScanMinimizer: public ROOT::Minuit2::ModularFunctionMinimizer. Class implementing the required methods for a minimization using SCAN; API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. Function Members (Methods); public:. virtual~ScanMinimizer(); virtual const ROOT::Minuit2::MinimumBuilder&Builder() const; virtual ROOT::Minuit2::MinimumBuilder&Builder(); virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__ScanMinimizer.html:1153,toler,toler,1153,root/html534/ROOT__Minuit2__ScanMinimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__ScanMinimizer.html,1,['toler'],['toler']
Availability,"k RDataFrame object; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; ; # Setup the connection to Spark; # First create a dictionary with keys representing Spark specific configuration; # parameters. In this tutorial we use the following configuration parameters:; #; # 1. spark.app.name: The name of the Spark application; # 2. spark.master: The Spark endpoint responsible for running the; # application. With the syntax ""local[2]"" we signal Spark we want to run; # locally on the same machine with 2 cores, each running a separate; # process. The default behaviour of a Spark application would run; # locally on the same machine with as many concurrent processes as; # available cores, that could be also written as ""local[*]"".; #; # If you have access to a remote cluster you should substitute the endpoint URL; # of your Spark master in the form ""spark://HOST:PORT"" in the value of; # `spark.master`. Depending on the availability of your cluster you may request; # more computing nodes or cores per node with a similar configuration:; #; # sparkconf = pyspark.SparkConf().setAll(; # {""spark.master"": ""spark://HOST:PORT"",; # ""spark.executor.instances"": <number_of_nodes>,; # ""spark.executor.cores"" <cores_per_node>,}.items()); #; # You can find all configuration options and more details in the official Spark; # documentation at https://spark.apache.org/docs/latest/configuration.html .; ; # Create a SparkConf object with all the desired Spark configuration parameters; sparkconf = pyspark.SparkConf().setAll(; {""spark.app.name"": ""distrdf001_spark_connection"",; ""spark.master"": ""local[2]"",; ""spark.driver.memory"": ""4g""}.items()); # Create a SparkContext with the configuration stored in `sparkconf`; sparkcontext = pyspark.SparkContext(conf=sparkconf); ; # Create an RDataFrame that will use Spark as a backend for computations; df = RDataFrame(1000, sparkcontext=sparkcontext); ; # Set the random seed and define two columns of the dataset with random numbers.; ROOT.gRandom.Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/distrdf001__spark__connection_8py.html:1755,avail,availability,1755,doc/master/distrdf001__spark__connection_8py.html,https://root.cern,https://root.cern/doc/master/distrdf001__spark__connection_8py.html,1,['avail'],['availability']
Availability,"k for ebuf */; 15946 ebuf,; 15947 ebuf_len,; 15948 ""%s: cannot load %s"",; 15949 __func__,; 15950 dll_name);; 15951 return NULL;; 15952 }; 15953 ; 15954 ok = 1;; 15955 for (fp = sw; fp->name != NULL; fp++) {; 15956#if defined(_WIN32); 15957 /* GetProcAddress() returns pointer to function */; 15958 u.fp = (void (*)(void))dlsym(dll_handle, fp->name);; 15959#else; 15960 /* dlsym() on UNIX returns void *. ISO C forbids casts of data; 15961 * pointers to function pointers. We need to use a union to make a; 15962 * cast. */; 15963 u.p = dlsym(dll_handle, fp->name);; 15964#endif /* _WIN32 */; 15965 ; 15966 /* Set pointer (might be NULL) */; 15967 fp->ptr = u.fp;; 15968 ; 15969 if (u.fp == NULL) {; 15970 DEBUG_TRACE(""Missing function: %s\n"", fp->name);; 15971 if (feature_missing) {; 15972 feature_missing[fp->required]++;; 15973 }; 15974 if (fp->required == TLS_Mandatory) {; 15975 /* Mandatory function is missing */; 15976 if (ok) {; 15977 /* This is the first missing function.; 15978 * Create a new error message. */; 15979 mg_snprintf(NULL,; 15980 &truncated,; 15981 ebuf,; 15982 ebuf_len,; 15983 ""%s: %s: cannot find %s"",; 15984 __func__,; 15985 dll_name,; 15986 fp->name);; 15987 ok = 0;; 15988 } else {; 15989 /* This is yet anothermissing function.; 15990 * Append existing error message. */; 15991 size_t cur_len = strlen(ebuf);; 15992 if (!truncated && ((ebuf_len - cur_len) > 3)) {; 15993 mg_snprintf(NULL,; 15994 &truncated,; 15995 ebuf + cur_len,; 15996 ebuf_len - cur_len - 3,; 15997 "", %s"",; 15998 fp->name);; 15999 if (truncated) {; 16000 /* If truncated, add ""..."" */; 16001 strcat(ebuf, ""..."");; 16002 }; 16003 }; 16004 }; 16005 }; 16006 }; 16007 }; 16008 ; 16009 if (!ok) {; 16010 (void)dlclose(dll_handle);; 16011 return NULL;; 16012 }; 16013 ; 16014 return dll_handle;; 16015}; 16016 ; 16017 ; 16018static void *ssllib_dll_handle; /* Store the ssl library handle. */; 16019static void *cryptolib_dll_handle; /* Store the crypto library handle. */; 16020 ; 16021#endif /* NO_SSL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:472197,error,error,472197,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"k for ebuf */; 15947 ebuf,; 15948 ebuf_len,; 15949 ""%s: cannot load %s"",; 15950 __func__,; 15951 dll_name);; 15952 return NULL;; 15953 }; 15954 ; 15955 ok = 1;; 15956 for (fp = sw; fp->name != NULL; fp++) {; 15957#if defined(_WIN32); 15958 /* GetProcAddress() returns pointer to function */; 15959 u.fp = (void (*)(void))dlsym(dll_handle, fp->name);; 15960#else; 15961 /* dlsym() on UNIX returns void *. ISO C forbids casts of data; 15962 * pointers to function pointers. We need to use a union to make a; 15963 * cast. */; 15964 u.p = dlsym(dll_handle, fp->name);; 15965#endif /* _WIN32 */; 15966 ; 15967 /* Set pointer (might be NULL) */; 15968 fp->ptr = u.fp;; 15969 ; 15970 if (u.fp == NULL) {; 15971 DEBUG_TRACE(""Missing function: %s\n"", fp->name);; 15972 if (feature_missing) {; 15973 feature_missing[fp->required]++;; 15974 }; 15975 if (fp->required == TLS_Mandatory) {; 15976 /* Mandatory function is missing */; 15977 if (ok) {; 15978 /* This is the first missing function.; 15979 * Create a new error message. */; 15980 mg_snprintf(NULL,; 15981 &truncated,; 15982 ebuf,; 15983 ebuf_len,; 15984 ""%s: %s: cannot find %s"",; 15985 __func__,; 15986 dll_name,; 15987 fp->name);; 15988 ok = 0;; 15989 } else {; 15990 /* This is yet anothermissing function.; 15991 * Append existing error message. */; 15992 size_t cur_len = strlen(ebuf);; 15993 if (!truncated && ((ebuf_len - cur_len) > 3)) {; 15994 mg_snprintf(NULL,; 15995 &truncated,; 15996 ebuf + cur_len,; 15997 ebuf_len - cur_len - 3,; 15998 "", %s"",; 15999 fp->name);; 16000 if (truncated) {; 16001 /* If truncated, add ""..."" */; 16002 strcat(ebuf, ""..."");; 16003 }; 16004 }; 16005 }; 16006 }; 16007 }; 16008 }; 16009 ; 16010 if (!ok) {; 16011 (void)dlclose(dll_handle);; 16012 return NULL;; 16013 }; 16014 ; 16015 return dll_handle;; 16016}; 16017 ; 16018 ; 16019static void *ssllib_dll_handle; /* Store the ssl library handle. */; 16020static void *cryptolib_dll_handle; /* Store the crypto library handle. */; 16021 ; 16022#endif /* NO_SSL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:472230,error,error,472230,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"k for error buffers */; 20321 error->text,; 20322 error->text_buffer_size,; 20323 ""%s"",; 20324 ""Invalid parameters"");; 20325 }; 20326 return -1;; 20327 }; 20328 ; 20329 if (!STOP_FLAG_IS_ZERO(&ctx->stop_flag)) {; 20330 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20331 mg_snprintf(NULL,; 20332 NULL, /* No truncation check for error buffers */; 20333 error->text,; 20334 error->text_buffer_size,; 20335 ""%s"",; 20336 ""Server already stopped"");; 20337 }; 20338 return -1;; 20339 }; 20340 ; 20341 new_dom = (struct mg_domain_context *); 20342 mg_calloc_ctx(1, sizeof(struct mg_domain_context), ctx);; 20343 ; 20344 if (!new_dom) {; 20345 /* Out of memory */; 20346 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20347 mg_snprintf(NULL,; 20348 NULL, /* No truncation check for error buffers */; 20349 error->text,; 20350 error->text_buffer_size,; 20351 ""%s"",; 20352 ""Out or memory"");; 20353 }; 20354 return -6;; 20355 }; 20356 ; 20357 /* Store options - TODO: unite duplicate code */; 20358 while (options && (name = *options++) != NULL) {; 20359 if ((idx = get_option_index(name)) == -1) {; 20360 mg_cry_ctx_internal(ctx, ""Invalid option: %s"", name);; 20361 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20362 mg_snprintf(NULL,; 20363 NULL, /* No truncation check for error buffers */; 20364 error->text,; 20365 error->text_buffer_size,; 20366 ""Invalid option: %s"",; 20367 name);; 20368 }; 20369 mg_free(new_dom);; 20370 return -2;; 20371 } else if ((value = *options++) == NULL) {; 20372 mg_cry_ctx_internal(ctx, ""%s: option value cannot be NULL"", name);; 20373 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20374 mg_snprintf(NULL,; 20375 NULL, /* No truncation check for error buffers */; 20376 error->text,; 20377 error->text_buffer_size,; 20378 ""Invalid option value: %s"",; 20379 name);; 20380 }; 20381 mg_free(new_dom);; 20382 return -2;; 20383 }; 20384 if (new_dom->config[idx] != NULL) {; 20385 /* Duplicate option: Later values overwrite earlier ones.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:608616,error,error,608616,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,10,['error'],['error']
Availability,"k for error buffers */; 20322 error->text,; 20323 error->text_buffer_size,; 20324 ""%s"",; 20325 ""Invalid parameters"");; 20326 }; 20327 return -1;; 20328 }; 20329 ; 20330 if (!STOP_FLAG_IS_ZERO(&ctx->stop_flag)) {; 20331 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20332 mg_snprintf(NULL,; 20333 NULL, /* No truncation check for error buffers */; 20334 error->text,; 20335 error->text_buffer_size,; 20336 ""%s"",; 20337 ""Server already stopped"");; 20338 }; 20339 return -1;; 20340 }; 20341 ; 20342 new_dom = (struct mg_domain_context *); 20343 mg_calloc_ctx(1, sizeof(struct mg_domain_context), ctx);; 20344 ; 20345 if (!new_dom) {; 20346 /* Out of memory */; 20347 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20348 mg_snprintf(NULL,; 20349 NULL, /* No truncation check for error buffers */; 20350 error->text,; 20351 error->text_buffer_size,; 20352 ""%s"",; 20353 ""Out or memory"");; 20354 }; 20355 return -6;; 20356 }; 20357 ; 20358 /* Store options - TODO: unite duplicate code */; 20359 while (options && (name = *options++) != NULL) {; 20360 if ((idx = get_option_index(name)) == -1) {; 20361 mg_cry_ctx_internal(ctx, ""Invalid option: %s"", name);; 20362 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20363 mg_snprintf(NULL,; 20364 NULL, /* No truncation check for error buffers */; 20365 error->text,; 20366 error->text_buffer_size,; 20367 ""Invalid option: %s"",; 20368 name);; 20369 }; 20370 mg_free(new_dom);; 20371 return -2;; 20372 } else if ((value = *options++) == NULL) {; 20373 mg_cry_ctx_internal(ctx, ""%s: option value cannot be NULL"", name);; 20374 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20375 mg_snprintf(NULL,; 20376 NULL, /* No truncation check for error buffers */; 20377 error->text,; 20378 error->text_buffer_size,; 20379 ""Invalid option value: %s"",; 20380 name);; 20381 }; 20382 mg_free(new_dom);; 20383 return -2;; 20384 }; 20385 if (new_dom->config[idx] != NULL) {; 20386 /* Duplicate option: Later values overwrite earlier ones.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:608649,error,error,608649,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,10,['error'],['error']
Availability,"k to the RooFit object at the end of each call (updated parameter; values, their (asymmetric errors) etc. The default MINUIT error level; for HESSE and MINOS error analysis is taken from the defaultErrorLevel(); value of the input function. ~RooMinuit(); Destructor. void setStrategy(Int_t strat); Change MINUIT strategy to istrat. Accepted codes; are 0,1,2 and represent MINUIT strategies for dealing; most efficiently with fast FCNs (0), expensive FCNs (2); and 'intermediate' FCNs (1). void setErrorLevel(Double_t level); Set the level for MINUIT error analysis to the given; value. This function overrides the default value; that is taken in the RooMinuit constructor from; the defaultErrorLevel() method of the input function. void setEps(Double_t eps); Change MINUIT epsilon. RooFitResult* fit(const char* options); Parse traditional RooAbsPdf::fitTo driver options. s - Run Hesse first to estimate initial step size; m - Run Migrad only; h - Run Hesse to estimate errors; v - Verbose mode; l - Log parameters after each Minuit steps to file; t - Activate profile timer; r - Save fit result; 0 - Run Migrad with strategy 0. Int_t migrad(); Execute MIGRAD. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t hesse(); Execute HESSE. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(); Execute MINOS. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(const RooArgSet& minosParamList); Execute MINOS for given list of parameters. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t seek(); Execute SEEK. C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMinuit.html:9509,error,errors,9509,root/html526/RooMinuit.html,https://root.cern,https://root.cern/root/html526/RooMinuit.html,4,['error'],['errors']
Availability,"k(TGFrame* frame, TGLayoutHints* lh = 0, Float_t weight = 1); ~TGFrameElementPack(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGFrameElementPack.html:1345,error,error,1345,root/html528/TGFrameElementPack.html,https://root.cern,https://root.cern/root/html528/TGFrameElementPack.html,4,['error'],['error']
Availability,"k); virtual~TEntryListBlock(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Int_tContains(Int_t entry); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; Bool_tEnter(Int_t entry); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetEntry(Int_t entry); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; Int_tGetNPassed(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; Int_tGetType(); virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEntryListBlock.html:10472,error,error,10472,root/html528/TEntryListBlock.html,https://root.cern,https://root.cern/root/html528/TEntryListBlock.html,4,['error'],['error']
Availability,"k2; ++kk) {; 2557 ctemp += TString::Format(""%10.3e "",emat[i + kk*emat_dim1]);; 2558 }; 2559 Printf(""%s"",(const char*)ctemp);; 2560 }; 2561 }; 2562 }; 2563}; 2564 ; 2565////////////////////////////////////////////////////////////////////////////////; 2566/// Utility routine to get MINOS errors; 2567///; 2568/// Called by user.; 2569///; 2570/// NUMBER is the parameter number; 2571///; 2572/// values returned by MNERRS:; 2573/// - EPLUS, EMINUS are MINOS errors of parameter NUMBER,; 2574/// - EPARAB is 'parabolic' error (from error matrix).; 2575/// (Errors not calculated are set = 0); 2576/// - GCC is global correlation coefficient from error matrix; 2577 ; 2578void TMinuit::mnerrs(Int_t number, Double_t &eplus, Double_t &eminus, Double_t &eparab, Double_t &gcc); 2579{; 2580 Double_t dxdi;; 2581 Int_t ndiag, iin, iex;; 2582 ; 2583 iex = number+1;; 2584 ; 2585 if (iex > fNu || iex <= 0) goto L900;; 2586 iin = fNiofex[iex-1];; 2587 if (iin <= 0) goto L900;; 2588 ; 2589// IEX is external number, IIN is internal number; 2590 eplus = fErp[iin-1];; 2591 if (eplus == fUndefi) eplus = 0;; 2592 eminus = fErn[iin-1];; 2593 if (eminus == fUndefi) eminus = 0;; 2594 mndxdi(fX[iin-1], iin-1, dxdi);; 2595 ndiag = iin*(iin + 1) / 2;; 2596 eparab = TMath::Abs(dxdi*TMath::Sqrt(TMath::Abs(fUp*fVhmat[ndiag- 1])));; 2597// global correlation coefficient; 2598 gcc = 0;; 2599 if (fISW[1] < 2) return;; 2600 gcc = fGlobcc[iin-1];; 2601 return;; 2602// ERROR. parameter number not valid; 2603L900:; 2604 eplus = 0;; 2605 eminus = 0;; 2606 eparab = 0;; 2607 gcc = 0;; 2608}; 2609 ; 2610////////////////////////////////////////////////////////////////////////////////; 2611/// Evaluates the function being analysed by MNCROS; 2612///; 2613/// Evaluates the function being analysed by MNCROS, which is; 2614/// generally the minimum of FCN with respect to all remaining; 2615/// variable parameters. The class data members contains the; 2616/// data necessary to know the values of U(KE1CR) and U(KE2CR); 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:84261,error,error,84261,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['error'],['error']
Availability,"k;; 1364 case TMetaUtils::NOT_DEF:; 1365 errorstring = ""has not been defined before the array"";; 1366 break;; 1367 case TMetaUtils::IS_PRIVATE:; 1368 errorstring = ""is a private member of a parent class"";; 1369 break;; 1370 case TMetaUtils::UNKNOWN:; 1371 errorstring = ""is not known"";; 1372 break;; 1373 default:; 1374 errorstring = ""UNKNOWN ERROR!!!!"";; 1375 }; 1376 ; 1377 if (where.size() == 0) {; 1378 ROOT::TMetaUtils::Error(nullptr, ""*** Datamember %s::%s: no size indication!\n"",; 1379 member.getParent()->getName().str().c_str(), member.getName().str().c_str());; 1380 } else {; 1381 ROOT::TMetaUtils::Error(nullptr, ""*** Datamember %s::%s: size of array (%s) %s!\n"",; 1382 member.getParent()->getName().str().c_str(), member.getName().str().c_str(), where.str().c_str(), errorstring);; 1383 }; 1384 }; 1385 return index;; 1386}; 1387 ; 1388////////////////////////////////////////////////////////////////////////////////; 1389 ; 1390void WriteStreamer(const ROOT::TMetaUtils::AnnotatedRecordDecl &cl,; 1391 const cling::Interpreter &interp,; 1392 const ROOT::TMetaUtils::TNormalizedCtxt &normCtxt,; 1393 std::ostream &dictStream); 1394{; 1395 const clang::CXXRecordDecl *clxx = llvm::dyn_cast<clang::CXXRecordDecl>(cl.GetRecordDecl());; 1396 if (clxx == nullptr) return;; 1397 ; 1398 bool add_template_keyword = ROOT::TMetaUtils::NeedTemplateKeyword(clxx);; 1399 ; 1400 string fullname;; 1401 string clsname;; 1402 string nsname;; 1403 int enclSpaceNesting = 0;; 1404 ; 1405 if (ROOT::TMetaUtils::GetNameWithinNamespace(fullname, clsname, nsname, clxx)) {; 1406 enclSpaceNesting = ROOT::TMetaUtils::WriteNamespaceHeader(dictStream, cl);; 1407 }; 1408 ; 1409 dictStream << ""//_______________________________________""; 1410 << ""_______________________________________"" << std::endl;; 1411 if (add_template_keyword) dictStream << ""template <> "";; 1412 dictStream << ""void "" << clsname << ""::Streamer(TBuffer &R__b)"" << std::endl << ""{"" << std::endl; 1413 << "" // Stream an object of class "" <<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:52240,error,errorstring,52240,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['error'],['errorstring']
Availability,"k;}; 4143 case 17: {b.ReadFastArray((ULong64_t*)fAddress, n); break;}; 4144 case 18: {b.ReadFastArray((bool*) fAddress, n); break;}; 4145 case 9: {; 4146 TVirtualStreamerInfo* si = GetInfoImp();; 4147 TStreamerElement* se = (TStreamerElement*) si->GetElement(fID);; 4148 Double_t *xx = (Double_t*) fAddress;; 4149 for (Int_t ii=0;ii<n;ii++) {; 4150 b.ReadDouble32(&(xx[ii]),se);; 4151 }; 4152 break;; 4153 }; 4154 case 19: {; 4155 TVirtualStreamerInfo* si = GetInfoImp();; 4156 TStreamerElement* se = (TStreamerElement*) si->GetElement(fID);; 4157 Float_t *xx = (Float_t*) fAddress;; 4158 for (Int_t ii=0;ii<n;ii++) {; 4159 b.ReadFloat16(&(xx[ii]),se);; 4160 }; 4161 break;; 4162 }; 4163 }; 4164 return;; 4165 } else if (fType <= 2) { // branch in split mode; 4166 // FIXME: This should probably be < 60 instead.; 4167 if (fStreamerType > 40 && fStreamerType < 55) {; 4168 Int_t atype = fStreamerType - 40;; 4169 Int_t n;; 4170 if (fBranchCount==nullptr) {; 4171 // Missing fBranchCount. let's attempts to recover.; 4172 ; 4173 TString countname( GetName() );; 4174 Ssiz_t dot = countname.Last('.');; 4175 if (dot>=0) {; 4176 countname.Remove(dot+1);; 4177 } else {; 4178 countname = """";; 4179 }; 4180 TString counter( GetTitle() );; 4181 Ssiz_t loc = counter.Last('[');; 4182 if (loc>=0) {; 4183 counter.Remove(0,loc+1);; 4184 }; 4185 loc = counter.Last(']');; 4186 if (loc>=0) {; 4187 counter.Remove(loc);; 4188 }; 4189 countname += counter;; 4190 SetBranchCount((TBranchElement *)fTree->GetBranch(countname));; 4191 }; 4192 if (fBranchCount) {; 4193 n = (Int_t)fBranchCount->GetValue(0,0);; 4194 } else {; 4195 Warning(""ReadLeaves"",""Missing fBranchCount for %s. Data will not be read correctly by the MakeClass mode."",GetName());; 4196 n = 0;; 4197 }; 4198 fNdata = n;; 4199 Char_t isArray;; 4200 b >> isArray;; 4201 switch (atype) {; 4202 case 1: {b.ReadFastArray((Char_t*) fAddress, n); break;}; 4203 case 2: {b.ReadFastArray((Short_t*) fAddress, n); break;}; 4204 case 3: {b.ReadFastArray((Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:154555,recover,recover,154555,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['recover'],['recover']
Availability,"k< MutexT, RecurseCountsT >::StateDelta = TVirtualRWMutex::StateDelta. Definition at line 300 of file TReentrantRWLock.hxx. Constructor & Destructor Documentation. ◆ TReentrantRWLock(). template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::TReentrantRWLock ; (; ). inline . Regular constructor. ; Definition at line 304 of file TReentrantRWLock.hxx. Member Function Documentation. ◆ Apply(). template<typename MutexT , typename RecurseCountsT > . void TReentrantRWLock::Apply ; (; std::unique_ptr< StateDelta > && ; delta). Re-apply a delta. ; Definition at line 358 of file TReentrantRWLock.cxx. ◆ AssertReadCountLocIsFromCurrentThread(). template<typename MutexT , typename RecurseCountsT > . void TReentrantRWLock::AssertReadCountLocIsFromCurrentThread ; (; const size_t * ; presumedLocalReadersCount). private . Assert that presumedLocalReadersCount really matches the local read count. ; Print an error message if not. ; Definition at line 394 of file TReentrantRWLock.cxx. ◆ GetStateBefore(). template<typename MutexT , typename RecurseCountsT > . std::unique_ptr< TVirtualRWMutex::State > TReentrantRWLock::GetStateBefore. Get the lock state before the most recent write lock was taken. ; Definition at line 260 of file TReentrantRWLock.cxx. ◆ ReadLock(). template<typename MutexT , typename RecurseCountsT > . TVirtualRWMutex::Hint_t * TReentrantRWLock::ReadLock. Acquire the lock in read mode. ; Definition at line 70 of file TReentrantRWLock.cxx. ◆ ReadUnLock(). template<typename MutexT , typename RecurseCountsT > . void TReentrantRWLock::ReadUnLock ; (; TVirtualRWMutex::Hint_t * ; hint). Release the lock in read mode. ; Definition at line 137 of file TReentrantRWLock.cxx. ◆ Rewind(). template<typename MutexT , typename RecurseCountsT > . std::unique_ptr< TVirtualRWMutex::StateDelta > TReentrantRWLock::Rewind ; (; const State & ; earlierState). Rewind to an earlier mutex state, returning ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html:3624,error,error,3624,doc/v632/classROOT_1_1TReentrantRWLock.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html,2,['error'],['error']
Availability,"kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL) Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6) lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 123 of file Integrator.h. ◆ IntegratorOneDim() [2/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IGenFunction & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator passing a function interface. ; Parameters. fintegration function (1D interface). It is copied inside ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 142 of file Integrator.h. ◆ IntegratorOneDim() [3/4]. template<class Function > . ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; Function & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Template Constructor of one dimensional Integrator passing a generic function object. ; Parameters. fintegration function (any C++ callable object implementing operator()(double x) ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The alg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:9233,toler,tolerance,9233,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,1,['toler'],['tolerance']
Availability,"kAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidCreate(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = NULL); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFillBinarySearchTree(const TMVA::Event* ev); virtual voidFillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidFinalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual vector<Float_t>GetCellValue(const map<Int_t,Float_t>& xvec, TMVA::ECellValue cv); virtual Float_tGetCellValue(const TMVA::PDEFoamCell* cell, TMVA::ECellValue cv); virtual Float_tGetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringGetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tGetMaxDepth() const; UInt_tGetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tGetNCells() const; UInt_tGetNInActiveCells",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoam.html:2897,error,error,2897,root/html530/TMVA__PDEFoam.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoam.html,3,['error'],['error']
Availability,kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. _xmlParserCtxt*fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfParseCodeto keep track of the errorcodes; Bool_tfReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tfStopErrorstop when parse error occurs; Bool_tfValidateto validate the parse context; TStringfValidateErrorparse error; TStringfValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TXMLParser. ←. TDOMParser. TSAXParser. Function documentation; TXMLParser(); Initializes parser variables. ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse e,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXMLParser.html:10310,error,errorcodes,10310,root/html602/TXMLParser.html,https://root.cern,https://root.cern/root/html602/TXMLParser.html,6,['error'],"['error', 'errorcodes']"
Availability,"kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TGLLockable; enum  ELock { kUnlocked; , kDrawLock; , kSelectLock; , kModifyLock; };  . Public Member Functions;  TGLSAViewer (const TGWindow *parent, TVirtualPad *pad, TGedEditor *ged=nullptr, TGLFormat *format=nullptr);  Construct an embedded standalone viewer, bound to supplied 'pad'. ;  ;  TGLSAViewer (TVirtualPad *pad, TGLFormat *format=nullptr);  Construct a standalone viewer, bound to supplied 'pad'. ;  ;  ~TGLSAViewer () override;  Destroy standalone viewer object. ;  ; void Close ();  Close the viewer - destructed. ;  ; void CreateGLWidget () override;  Create a GLwidget, it is an error if it is already created. ;  ; void DeleteMenuBar ();  Delete the menu bar. ;  ; void DestroyGLWidget () override;  Destroy the GLwidget, it is an error if it does not exist. ;  ; void DisableCloseMenuEntries ();  Deactivate menu entries for closing the GL window and exiting ROOT. ;  ; void DisableMenuBarHiding ();  Disable hiding of menu bar. ;  ; void EnableMenuBarHiding ();  Enable hiding of menu bar. ;  ; TGLFormat * GetFormat () const;  ; TGCompositeFrame * GetFrame () const;  Return the main-frame. ;  ; TGCompositeFrame * GetLeftVerticalFrame () const;  ; const char * GetName () const override;  Returns name of object. ;  ; void HandleMenuBarHiding (Event_t *ev);  Maybe switch menu-bar / menu-button. ;  ; TClass * IsA () const override;  ; void MenuHidingTimeout ();  Action for menu-hiding timeout. ;  ; Bool_t ProcessFrameMessage (Long_t msg, Long_t parm1, Long_t);  Process GUI message capture by the main GUI frame (TGLSAFrame). ;  ; void SelectionChanged () override;  Update GUI components for embedded viewer selection change. ;  ; void Show ();  Show the viewer. ;  ; void Streamer (TBuffer &) overrid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLSAViewer.html:2885,error,error,2885,doc/master/classTGLSAViewer.html,https://root.cern,https://root.cern/doc/master/classTGLSAViewer.html,1,['error'],['error']
Availability,"kCoordError) { // case use error in coordinates (x and y); 944 ex[0] = std::max(gr->GetErrorX(i), 0.);; 945 ex[1] = std::max(gr->GetErrorY(i), 0.);; 946 dv.Add( x, gz[i], ex, errorZ );; 947 }; 948 else; 949 assert(0); // should not go here; 950 ; 951#ifdef DEBUG; 952 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorZ << std::endl;; 953#endif; 954 ; 955 }; 956 ; 957#ifdef DEBUG; 958 std::cout << ""THFitInterface::FillData Graph2D FitData size is "" << dv.Size() << std::endl;; 959#endif; 960 ; 961}; 962 ; 963 ; 964// confidence intervals; 965bool GetConfidenceIntervals(const TH1 * h1, const ROOT::Fit::FitResult & result, TGraphErrors * gr, double cl ) {; 966 if (h1->GetDimension() != 1) {; 967 Error(""GetConfidenceIntervals"",""Invalid object used for storing confidence intervals"");; 968 return false;; 969 }; 970 // fill fit data sets with points to estimate cl.; 971 BinData d;; 972 FillData(d,h1,nullptr);; 973 gr->Set(d.NPoints() );; 974 double * ci = gr->GetEY(); // make CL values error of the graph; 975 result.GetConfidenceIntervals(d,ci,cl);; 976 // put function value as abscissa of the graph; 977 for (unsigned int ipoint = 0; ipoint < d.NPoints(); ++ipoint) {; 978 const double * x = d.Coords(ipoint);; 979 const ROOT::Math::IParamMultiFunction * func = result.FittedFunction();; 980 gr->SetPoint(ipoint, x[0], (*func)(x) );; 981 }; 982 return true;; 983}; 984 ; 985 ; 986} // end namespace Fit; 987 ; 988} // end namespace ROOT; BinData.h; FitResult.h; HFitInterface.h; IParamFunction.h; d#define d(i)Definition RSha256.hxx:102; s1#define s1(x)Definition RSha256.hxx:91; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; SparseData.h; TClass.h; kIterBackwardconst Bool_t kIterBackwardDefinition TCollection.h:43; TError.h; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; Warningvoid Warning(const char *location, const char *msgfmt,...)Use this function in wa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitInterface_8cxx_source.html:31704,error,error,31704,doc/master/HFitInterface_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html,1,['error'],['error']
Availability,kEConstraintNone; kEConstraintArea; };; enum TUnfold::ERegMode { kRegModeNone; kRegModeSize; kRegModeDerivative; kRegModeCurvature; kRegModeMixed; };; enum TUnfold::EHistMap { kHistMapOutputHoriz; kHistMapOutputVert; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TMatrixDSparse*TUnfold::fAInput: matrix; TMatrixD*fAoutsideInput: underflow/overflow bins; TMap*fBgrErrCorrInInput: background sources correlated error; TMap*fBgrErrUncorrInInput: uncorrelated error from bgr sources; TMap*fBgrInInput: size of background sources; Double_tTUnfold::fBiasScaleInput: scale factor for the bias; TUnfold::EConstraintTUnfold::fConstraintInput: type of constraint to use; TMatrixD*fDAinColRelSqInput: normalized column err.sq. (inp.matr.); TMatrixDSparse*fDAinRelSqInput: normalized errors from input matrix; TMap*fDeltaCorrAxResult: syst.shift from fSysIn on fAx; TMap*fDeltaCorrXResult: syst.shift from fSysIn on fX; TMatrixDSparse*fDeltaSysTauResult: systematic shift from tau; Double_tfDtauInput: error on tau; TMatrixDSparse*fEmatUncorrAxResult: syst.error from fDA2 on fAx; TMatrixDSparse*fEmatUncorrXResult: syst.error from fDA2 on fX; TArrayITUnfold::fHistToXInput: histogram bins -> matrix indices; TMatrixDSparse*TUnfold::fLsquaredInput: regularisation conditions squared; TUnfold::ERegModeTUnfold::fRegModeInput: type of regularisation; TArrayDTUnfold::fSumOverYInput: sum of all columns; TMap*fSysInInput: correlated errors; Double_tTUnfold::fTauSquaredInput: regularisation parameter; TMatrixDSparse*TUnfold::fVyyInput: covariance matrix for y; TMatrixDSparse*fVyyDataInput: error on fY prior to bgr subtraction; TMatrixD*TUnfold::fX0Input: x0; TArrayITUnfold::fXToHistInput: matrix indices -> histogram bins; TMatrixD*TUnfold::fYInput: y; TMatrixD*fYDataInput: fY prior to b,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:17073,error,errors,17073,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,3,['error'],['errors']
Availability,"kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Bool_tTGedFrame::fAvoidSignalflag for executing slots; Pixel_tTGFrame::fBackgroundframe background color; Int_tTGFrame::fBorderWidthframe border width; TGClient*TGObject::fClientConnection to display server; Int_tTGFrame::fDNDStateEDNDFlags; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TList*TGedFrame::fExtraTabsaddtional tabs in ged editor; TGFrameElement*TGFrame::fFEpointer to frame element; TGedEditor*TGedFrame::fGedEditormanager of this frame; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; Bool_tTGedFrame::fInitinit flag for setting signals/slots; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TClass*TGedFrame::fModelClassclass corresponding to instantiated GedFrame; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TGTextButton*fNCButtonName/Class button.; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; Int_tTGedFrame::fPrioritylocation in GedEditor; Bool_tTQObject::fSignalsBl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveGedNameFrame.html:17390,mask,mask,17390,root/html528/TEveGedNameFrame.html,https://root.cern,https://root.cern/root/html528/TEveGedNameFrame.html,4,['mask'],['mask']
Availability,"kFALSE if the Add operation failed. Bool_t Add(const TH1* h, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1); -*-*-*Replace contents of this histogram by the addition of h1 and h2*-*-*. this = c1*h1 + c2*h2; if errors are defined (see TH1::Sumw2), errors are also recalculated; Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; if not already set.; Note also that adding histogram with labels is not supported, histogram will be; added merging them by bin number independently of the labels.; For adding histogram ith labels one should use TH1::Merge. SPECIAL CASE (Average/Efficiency histograms); For histograms representing averages or efficiencies, one should compute the average; of the two histograms and not the sum. One can mark a histogram to be an average; histogram by setting its bit kIsAverage with; myhist.SetBit(TH1::kIsAverage);; Note that the two histograms must have their kIsAverage bit set. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Add. ANOTHER SPECIAL CASE : h1 = h2 and c2 < 0; do a scaling this = c1 * h1 / (bin Volume). The function returns kFALSE if the Add operation failed. void AddBinContent(Int_t bin); -*-*-*-*-*-*-*-*Increment bin content by 1*-*-*-*-*-*-*-*-*-*-*-*-*-*. void AddBinContent(Int_t bin, Double_t w); -*-*-*-*-*-*-*-*Increment bin content by a weight w*-*-*-*-*-*-*-*-*-*-*. void AddDirectory(Bool_t add = kTRUE); Sets the flag controlling the automatic add of histograms in memory. By default (fAddDirectory = kTRUE), histograms are automatically added; to the list of objects in memory.; Note that one histogram can be removed from its support directory; by calling h->SetDirectory(0) or h->SetDirectory(dir) to add it; to the list of objects in the directory dir. NOTE that this is a static function. To call it, use;; TH1::AddDirectory. Int_t BufferEmpty(Int_t action = 0)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:43992,error,errors,43992,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,1,['error'],['errors']
Availability,"kFALSE); TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDraw(Option_t* = """"); voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum TRefCnt::EReferenceFlag { kStaticInit; };. protected:. PictureAttributes_tfAttributespicture attributes; Pixmap_tfMaskpicture mask pixmap; TStringfNamename of picture; Pixmap_tfPicpicture pixmap; UInt_tTRefCnt::fRefs(1 less than) number of references; Bool_tfScaledkTRUE if picture is scaled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); ctor. Important: both pixmaps pxmap and mask must be unique (not shared). void Draw(Handle_t id, GContext_t gc, Int_t x, Int_t y) const; Draw a picture. ~TGPicture(); Delete picture object. const char * HashName(const char* name, Int_t width, Int_t height); Static function returning a unique name used to look up a picture.; The unique name has the form ""name__widthxheight"". void Print(Option_t* option = """") const; Print picture info. TGPicture(const char* name, Bool_t scaled = kFALSE). TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0). void Draw(Option_t* = """"); override default of TObject. { MayNotUse(""Draw(Option_t*)""); }. const char * GetName() const; { return fName; }. UInt_t GetWidth() const; { return fAttributes.fWidth; }. UInt_t GetHeight() const; { return fAttributes.fHeight; }. Pixmap_t GetPicture() const; { return fPic; }. Pixmap_t GetMask() const; { return fMask; }. Bool_t IsScaled() const; { return fScaled; }. ULong_t Hash() const; { return fName.Hash(); }. TGSelectedPicture& operator=(const TGPictu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGPicture.html:6196,mask,mask,6196,root/html528/TGPicture.html,https://root.cern,https://root.cern/root/html528/TGPicture.html,4,['mask'],['mask']
Availability,"kFALSE); static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0); voidTXSocket::CtrlC(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTXSocket::DisableTimeout(); voidTXSocket::DisconnectSession(Int_t id, Option_t* opt = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTXSocket::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidTXSocket::EnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTXSocket::Flush(); UInt_tTSocket::GetBytesRecv() const; UInt_tTSocket::GetBytesSent() const; virtual Int_tGetClientID() const; virtual Int_tGetClientIDSize() const; static Int_tTSocket::GetClientProtocol(); Int_tTSocket::GetCompressionLevel() const; virtual Int_tTSocket::GetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tTSocket::GetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressTSocket::GetInetAddress() const; Int_tTXSocket::GetInterrupt(Bool_t& forward); TTimeStampTSocket::GetLastUsage(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXUnixSocket.html:2106,error,error,2106,root/html528/TXUnixSocket.html,https://root.cern,https://root.cern/root/html528/TXUnixSocket.html,1,['error'],['error']
Availability,"kFALSE);  Install package from par (unpack the file in the directory); par can be an URL for remote retrieval. ;  ; TClass * IsA () const override;  ; Bool_t IsInDir (const char *path);  Method to check if 'path' is in the managed directory Return kTRUE or kFALSE. ;  ; Bool_t IsPackageEnabled (const char *pack);  ; Int_t Load (const char *pack, const char *opts);  Method to load a package taking an option const char * Return -1 on error, 0 otherwise. ;  ; Int_t Load (const char *pack, TList *optls=0);  Method to load a package taking an option list Return -1 on error, 0 otherwise. ;  ; TMD5 * ReadMD5 (const char *pack);  Read MD5 checksum of the PAR file from the PROOF-INF/md5.txt file. ;  ; Int_t Remove (const char *pack=0, Bool_t dolock=kTRUE);  Remove package 'pack' If 'pack' is null or empty all packages are cleared. ;  ; void SetLogger (TPackMgrLog_t logger);  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetPrefix (const char *pfx);  ; void Show (const char *title=0);  Show available packages. ;  ; void ShowEnabled (const char *title=0);  Show enabled packages. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Unload (const char *pack);  Method to unload a package. ;  ; Int_t Unpack (const char *pack, TMD5 *sum=0);  Read MD5 checksum of the PAR file from the PROOF-INF/md5.txt file. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TName",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPackMgr.html:4048,avail,available,4048,doc/master/classTPackMgr.html,https://root.cern,https://root.cern/doc/master/classTPackMgr.html,1,['avail'],['available']
Availability,"kFALSE;; 3003 ; 3004 if (build_loc.Length()==0) {; 3005 build_loc = lib_location;; 3006 } else {; 3007 // Removes an existing disk specification from the names; 3008 TRegexp disk_finder (""[A-z]:"");; 3009 Int_t pos = library.Index( disk_finder );; 3010 if (pos==0) library.Remove(pos,3);; 3011 pos = lib_location.Index( disk_finder );; 3012 if (pos==0) lib_location.Remove(pos,3);; 3013 ; 3014 if (flatBuildDir) {; 3015 AssignAndDelete( library, ConcatFileName( build_loc, libname_ext) );; 3016 } else {; 3017 AssignAndDelete( library, ConcatFileName( build_loc, library) );; 3018 }; 3019 ; 3020 Bool_t canWriteBuild_loc = !gSystem->AccessPathName(build_loc,kWritePermission);; 3021 TString build_loc_store( build_loc );; 3022 if (!flatBuildDir) {; 3023 AssignAndDelete( build_loc, ConcatFileName( build_loc, lib_location) );; 3024 }; 3025 ; 3026 if (gSystem->AccessPathName(build_loc,kFileExists)) {; 3027 mkdirFailed = (0 != mkdir(build_loc, true));; 3028 if (mkdirFailed && !canWriteBuild_loc) {; 3029 // The mkdir failed __and__ we can not write to the target directory,; 3030 // let make sure the error message will be about the target directory; 3031 build_loc = build_loc_store;; 3032 mkdirFailed = kFALSE;; 3033 } else if (!mkdirFailed && dirmode!=0) {; 3034 Chmod(build_loc,dirmode);; 3035 }; 3036 }; 3037 }; 3038 library = gSystem->UnixPathName(library);; 3039 ; 3040 // ======= Check if the library need to loaded or compiled; 3041 if (!gInterpreter->IsLibraryLoaded(library) && gInterpreter->IsLoaded(expFileName)) {; 3042 // the script has already been loaded in interpreted mode; 3043 // Let's warn the user and unload it.; 3044 ; 3045 if (withInfo) {; 3046 ::Info(""ACLiC"",""script has already been loaded in interpreted mode"");; 3047 ::Info(""ACLiC"",""unloading %s and compiling it"", filename);; 3048 }; 3049 ; 3050 if ( gInterpreter->UnloadFile( expFileName ) != 0 ) {; 3051 // We can not unload it.; 3052 return kFALSE;; 3053 }; 3054 }; 3055 ; 3056 // Calculate the -I lines; 3057 TStrin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:101698,error,error,101698,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['error'],['error']
Availability,"kFALSE . ). Returns kFALSE if one can access a file using the specified access mode. ; Mode is the same as for the Unix access(2) function. Attention, bizarre convention of return value!! ; Definition at line 1111 of file TFTP.cxx. ◆ Ascii(). void TFTP::Ascii ; (; ). inline . Definition at line 107 of file TFTP.h. ◆ ascii(). void TFTP::ascii ; (; ). inline . Definition at line 123 of file TFTP.h. ◆ bin(). void TFTP::bin ; (; ). inline . Definition at line 122 of file TFTP.h. ◆ Binary(). void TFTP::Binary ; (; ). inline . Definition at line 106 of file TFTP.h. ◆ bye(). void TFTP::bye ; (; ). inline . Definition at line 121 of file TFTP.h. ◆ cd(). void TFTP::cd ; (; const char * ; dir); const. inline . Definition at line 113 of file TFTP.h. ◆ ChangeDirectory(). Int_t TFTP::ChangeDirectory ; (; const char * ; dir); const. Change the remote directory. ; If the remote directory contains a .message file and it is < 1024 characters then the contents is echoed back. Returns 0 in case of success and -1 in case of failure. ; Definition at line 628 of file TFTP.cxx. ◆ ChangePermission(). Int_t TFTP::ChangePermission ; (; const char * ; file, . Int_t ; mode . ); const. Change permissions of a remote file. ; Anonymous users may not chnage permissions. Returns 0 in case of success and -1 in case of failure. ; Definition at line 853 of file TFTP.cxx. ◆ chmod(). void TFTP::chmod ; (; const char * ; file, . Int_t ; mode . ); const. inline . Definition at line 120 of file TFTP.h. ◆ Class(). static TClass * TFTP::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TFTP::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TFTP::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 125 of file TFTP.h. ◆ Close(). Int_t TFTP::Close ; (; ). Close ftp connection. ; Returns 0 in case of success and -1 in case of failure. ; Definition at line 884 of file TFT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFTP.html:15697,failure,failure,15697,doc/master/classTFTP.html,https://root.cern,https://root.cern/doc/master/classTFTP.html,1,['failure'],['failure']
Availability,"kFooterSize () const;  ; std::uint64_t GetOnDiskHeaderSize () const;  ; std::uint64_t GetOnDiskHeaderXxHash3 () const;  ; std::string GetQualifiedFieldName (DescriptorId_t fieldId) const;  Walks up the parents of the field ID and returns a field name of the form a.b.c.d In case of invalid field ID, an empty string is returned. ;  ; RFieldDescriptorIterable GetTopLevelFields () const;  ; RFieldDescriptorIterable GetTopLevelFields (const std::function< bool(DescriptorId_t, DescriptorId_t)> &comparator) const;  ; bool HasFeature (unsigned int flag) const;  ; void IncGeneration ();  ; RNTupleDescriptor & operator= (const RNTupleDescriptor &other)=delete;  ; RNTupleDescriptor & operator= (RNTupleDescriptor &&other)=default;  ; bool operator== (const RNTupleDescriptor &other) const;  ; void PrintInfo (std::ostream &output) const;  . Static Public Attributes; static constexpr unsigned int kFeatureFlagTest = 137;  . Private Attributes; std::unordered_map< DescriptorId_t, RClusterDescriptor > fClusterDescriptors;  May contain only a subset of all the available clusters, e.g. ;  ; std::unordered_map< DescriptorId_t, RClusterGroupDescriptor > fClusterGroupDescriptors;  ; std::unordered_map< DescriptorId_t, RColumnDescriptor > fColumnDescriptors;  ; std::string fDescription;  Free text from the user. ;  ; std::vector< RExtraTypeInfoDescriptor > fExtraTypeInfoDescriptors;  ; std::set< unsigned int > fFeatureFlags;  ; std::unordered_map< DescriptorId_t, RFieldDescriptor > fFieldDescriptors;  ; DescriptorId_t fFieldZeroId = kInvalidDescriptorId;  Set by the descriptor builder. ;  ; std::uint64_t fGeneration = 0;  Once constructed by an RNTupleDescriptorBuilder, the descriptor is mostly immutable except for set of active the page locations. ;  ; std::unique_ptr< RHeaderExtension > fHeaderExtension;  ; std::string fName;  The ntuple name needs to be unique in a given storage location (file) ;  ; std::uint64_t fNClusters = 0;  Updated by the descriptor builder when the cluster groups ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html:6969,avail,available,6969,doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html,1,['avail'],['available']
Availability,"kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTGedFrame::fAvoidSignalflag for executing slots; Pixel_tTGFrame::fBackgroundframe background color; Int_tTGFrame::fBorderWidthframe border width; TEveGValuator*fBrightness; TGClient*TGObject::fClientConnection to display server; TGTextButton*fColorSet; Int_tTGFrame::fDNDStateEDNDFlags; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TList*TGedFrame::fExtraTabsaddtional tabs in ged editor; TGFrameElement*TGFrame::fFEpointer to frame element; TGedEditor*TGedFrame::fGedEditormanager of this frame; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; Bool_tTGedFrame::fInitinit flag for setting signals/slots; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TEveViewerList*fMModel object.; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TClass*TGedFrame::fModelClassclass corresponding to instantiated GedFrame; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveViewerListEditor.html:18271,mask,mask,18271,root/html602/TEveViewerListEditor.html,https://root.cern,https://root.cern/root/html602/TEveViewerListEditor.html,2,['mask'],['mask']
Availability,"kKey(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THbookKey.html:1416,error,error,1416,root/html528/THbookKey.html,https://root.cern,https://root.cern/root/html528/THbookKey.html,6,['error'],['error']
Availability,"kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TWbox; Short_t fBorderMode {0};  Bordermode (-1=down, 0 = no border, 1=up) ;  ; Short_t fBorderSize {0};  window box bordersize in pixels ;  ;  Protected Attributes inherited from TBox; Bool_t fResizing;  ! True if box is being resized ;  ; Double_t fX1;  X of 1st point. ;  ; Double_t fX2;  X of 2nd point. ;  ; Double_t fY1;  Y of 1st point. ;  ; Double_t fY2;  Y of 2nd point. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . #include <TFrame.h>. Inheritance diagram for TFrame:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFrame() [1/3]. TFrame::TFrame ; (; ). Frame default constructor. ; Definition at line 29 of file TFrame.cxx. ◆ TFrame() [2/3]. TFrame::TFrame ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2 . ). Frame normal c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFrame.html:18086,down,down,18086,doc/master/classTFrame.html,https://root.cern,https://root.cern/doc/master/classTFrame.html,1,['down'],['down']
Availability,"kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_tfA0Calccalculated value of background a0 parameter; Double_tfA0Errerror value of background a0 parameter; Double_tfA0Initinitial value of background a0 parameter(backgroud is estimated as a0+a1*x+a2*x*x); Double_tfA1Calccalculated value of background a1 parameter; Double_tfA1Errerror value of background a1 parameter; Double_tfA1Initinitial value of background a1 parameter(backgroud is estimated as a0+a1*x+a2*x*x); Double_tfA2Calccalculated value of background a2 parameter; Double_tfA2Errerror value of background a2 parameter; Double_tfA2Initinitial value of background a2 parameter(backgroud is estimated as a0+a1*x+a2*x*x); Double_tfAlphaconvergence coefficient, input parameter, it should be positive number and <=1, for details see references; Int_tfAlphaOptimoptimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal; Double_t*fAmpCalc[fNPeaks] array of calculated values of fitted amplitudes, output parameters; Double_t*fAmpErr[fNPeaks] array of amplitude errors; Double_t*fAmpInit[fNPeaks] array of initial values of peaks amplitudes, input parameters; Double_t*fArea[fNPeaks] array of calculated areas of peaks; Double_t*fAreaErr[fNPeaks] array of errors of peak areas; Double_tfBCalccalculated value of b parameter; Double_tfBErrerror value of b parameter; Double_tfBInitinitial value of b parameter (slope), for details see html manual and references; Double_tfChihere the fitting functions return resulting chi square ; Int_tfFitTaylororder of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function.; Bool_tfFixA0logical value of a0 parameter, which allows to fix the parameter (not to fit).; Bool_tfFixA1logical value of a1 parameter, which allows to fix the parame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrumFit.html:9941,error,errors,9941,root/html528/TSpectrumFit.html,https://root.cern,https://root.cern/root/html528/TSpectrumFit.html,8,['error'],['errors']
Availability,"kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TOrdCollection*fDirsInBrowser; TOrdCollection*fFilesInBrowser; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSystemDirectory(); Create a system directory object. TSystemDirectory(const char* dirname, const char* path); Create a system directory object. TSystemDirectory(const TSystemDirectory& ); copy constructor. TSystemDirectory& operator=(const TSystemDirectory& ); assignment operator. ~TSystemDirectory(); Delete system directory object. TList * GetListOfFiles() const; Returns a TList of TSystemFile objects representing the contents; of the directory. It's the responsibility of the user to delete; the list (the list owns the contained objects).; Returns 0 in case of errors. void SetDirectory(const char* name); Create a system directory object. Bool_t IsItDirectory(const char* name) const; Check if name is a directory. void Browse(TBrowser* b); Browse OS system directories. TSystemDirectory * FindDirObj(const char* name); Method that returns system directory object if it; exists in list, 0 otherwise. TSystemFile * FindFileObj(const char* name, const char* dir); Method that returns system file object if it exists in; list, 0 otherwise. Bool_t IsFolder() const; { return kTRUE; }. Bool_t IsDirectory(const char* = 0) const; { return kTRUE; }. void Edit(); { }. void Delete(); {}. void Copy(const char* ); {}. void Move(const char* ); {}. void DrawClass() const; dummy methods from TObject. { }. TObject * DrawClone(Option_t* ) const; { return 0; }. void SetDrawOption(Option_t* ); { }. void SetName(const char* name); { TSystemFile::SetName(name); }. void SetTitle(const char* title); { TSystemFile::SetTitle(title); }. void Delete(Option_t* ); { }. vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSystemDirectory.html:6678,error,errors,6678,root/html528/TSystemDirectory.html,https://root.cern,https://root.cern/root/html528/TSystemDirectory.html,4,['error'],['errors']
Availability,"kPointvoid CheckPoint(Double_t x=0, Double_t y=0, Double_t z=0, Option_t *option="""", Double_t safety=0.)Draw point (x,y,z) over the picture of the daughters of the volume containing this point.Definition TGeoChecker.cxx:1692; TGeoChecker::WeightDouble_t Weight(Double_t precision=0.01, Option_t *option=""v"")Estimate weight of top level volume with a precision SIGMA(W)/W better than PRECISION.Definition TGeoChecker.cxx:2890; TGeoChecker::OpProgressvoid OpProgress(const char *opname, Long64_t current, Long64_t size, TStopwatch *watch=nullptr, Bool_t last=kFALSE, Bool_t refresh=kFALSE, const char *msg="""")Print current operation progress.Definition TGeoChecker.cxx:151; TGeoChecker::CheckGeometryvoid CheckGeometry(Int_t nrays, Double_t startx, Double_t starty, Double_t startz) constShoot nrays with random directions from starting point (startx, starty, startz) in the reference fram...Definition TGeoChecker.cxx:809; TGeoChecker::CheckBoundaryReferencevirtual void CheckBoundaryReference(Int_t icheck=-1)Check the boundary errors reference file created by CheckBoundaryErrors method.Definition TGeoChecker.cxx:406; TGeoChecker::SetNmeshPointsvoid SetNmeshPoints(Int_t npoints=1000)Set number of points to be generated on the shape outline when checking for overlaps.Definition TGeoChecker.cxx:728; TGeoChecker::PrintOverlapsvoid PrintOverlaps() constPrint the current list of overlaps held by the manager class.Definition TGeoChecker.cxx:1678; TGeoChecker::Testvoid Test(Int_t npoints, Option_t *option)Check time of finding ""Where am I"" for n points.Definition TGeoChecker.cxx:2709; TGeoChecker::TestVoxelsBool_t TestVoxels(TGeoVolume *vol, Int_t npoints=1000000)Returns optimal voxelization type for volume vol.Definition TGeoChecker.cxx:3008; TGeoChecker::RandomRaysvoid RandomRays(Int_t nrays, Double_t startx, Double_t starty, Double_t startz, const char *target_vol=nullptr, Bool_t check_norm=kFALSE)Randomly shoot nrays from point (startx,starty,startz) and plot intersections with surface",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:83531,error,errors,83531,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,1,['error'],['errors']
Availability,kReal32 ; kReal16 ; kInt64 ; kUInt64 ; kInt32 ; kUInt32 ; kInt16 ; kUInt16 ; kInt8 ; kUInt8 ; kSplitIndex64 ; kSplitIndex32 ; kSplitReal64 ; kSplitReal32 ; kSplitInt64 ; kSplitUInt64 ; kSplitInt32 ; kSplitUInt32 ; kSplitInt16 ; kSplitUInt16 ; kReal32Trunc ; kReal32Quant ; kMax . Definition at line 72 of file RNTupleUtil.hxx. ◆ EExtraTypeInfoIds. enum class ROOT::Experimental::EExtraTypeInfoIds. strong . Used in RExtraTypeInfoDescriptor. . EnumeratorkInvalid ; kStreamerInfo . Definition at line 467 of file RNTupleDescriptor.hxx. ◆ EIOFeatures. enum class ROOT::Experimental::EIOFeatures. strong . EnumeratorkGenerateOffsetMap ; kSupported . Definition at line 52 of file TIOFeatures.hxx. ◆ EIOUnsupportedFeatures. enum class ROOT::Experimental::EIOUnsupportedFeatures. strong . EnumeratorkUnsupported . Definition at line 61 of file TIOFeatures.hxx. ◆ ELogLevel. enum class ROOT::Experimental::ELogLevel : unsigned char. strong . Kinds of diagnostics. . EnumeratorkUnset ; kFatal An error which causes further processing to be unreliable. . kError An error. . kWarning Warnings about likely unexpected behavior. . kInfo Informational messages; used for instance for tracing. . kDebug Debug information; only useful for developers; can have added verbosity up to 255-kDebug. . Definition at line 36 of file RLogger.hxx. ◆ ENTupleInfo. enum class ROOT::Experimental::ENTupleInfo. strong . Listing of the different options that can be printed by RNTupleReader::GetInfo() . EnumeratorkSummary ; kStorageDetails ; kMetrics . Definition at line 43 of file RNTupleReader.hxx. ◆ ENTupleInspectorHist. enum class ROOT::Experimental::ENTupleInspectorHist. strong . EnumeratorkCount ; kNElems ; kCompressedSize ; kUncompressedSize . Definition at line 43 of file RNTupleInspector.hxx. ◆ ENTupleInspectorPrintFormat. enum class ROOT::Experimental::ENTupleInspectorPrintFormat. strong . EnumeratorkTable ; kCSV . Definition at line 42 of file RNTupleInspector.hxx. ◆ ENTupleStructure. enum ROOT::Experimental:,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:41980,error,error,41980,doc/master/namespaceROOT_1_1Experimental.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html,1,['error'],['error']
Availability,"kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooRealVar**fAxesarray of pointers to RooRealVars representing; RooStats::MarkovChain*fChainthe markov chain; Double_tfConfidenceLevelRequested confidence level (eg. 0.95 for 95% CL); RooRealVar*fCutoffVarcutoff variable to use for integrating keys pdf; RooDataHist*fDataHistthe binned Markov Chain data; Double_tfDeltatopCutoff (a) considered == bottomCutoff (b) iff; Int_tfDimensionnumber of variables; Double_tfEpsilonacceptable error for Keys interval determination; Double_tfFullValue of intergral of fProduct; RooStats::Heaviside*fHeavisidethe Heaviside function; TH1*fHistthe binned Markov Chain data; Double_tfHistConfLevelthe actual conf level determined by hist; Double_tfHistCutoffcutoff bin size to be in interval; RooStats::MCMCInterval::IntervalTypefIntervalType; Bool_tfIsHistStrictwhether the specified confidence level is a; Double_tfKeysConfLevelthe actual conf level determined by keys; Double_tfKeysCutoffcutoff keys pdf value to be in interval; RooDataHist*fKeysDataHistdata hist representing product; RooNDKeysPdf*fKeysPdfthe kernel estimation pdf; Double_tfLeftSideTFleft side tail-fraction for interval; TStringTNamed::fNameobject identifier; Int_tfNumBurnInStepsnumber of steps to discard as burn in, starting; RooArgSetfParametersparameters of interest for this interval; RooProduct*fProductthe (keysPdf * heaviside) product; THnSparse*fSparseHistthe binned Markov Chain data; Double_tfTFConfLevelthe actual conf level of tail-fraction interval; Double_tfTFLowerlower limit of the tail-fraction interval; Double_tfTFUpperupper limit of the tail-fraction interval; TStringTNamed::fTitleobject title; Bool_tfUseKeyswhether to use kernel estimation; Bool_tfUseSparseHistwhether to use sparse hist (vs. RooDataHist); Double_tfVecWeightsum of weights of all entries in fVector; vector<Int_t>fVectorvector containing the Markov chain data. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__MCMCInterval.html:11286,error,error,11286,root/html530/RooStats__MCMCInterval.html,https://root.cern,https://root.cern/root/html530/RooStats__MCMCInterval.html,3,['error'],['error']
Availability,"kTRUE if parameter ipar is fixed, kFALSE othersise). void PrintResults(Int_t level, Double_t amin) const; Print fit results. void ReleaseParameter(Int_t ipar); Release parameter ipar. void SetFCN(void* fcn); Specify the address of the fitting algorithm (from the interpreter). void SetFCN(void(*)(Int_t&,Double_t*,Double_t&,Double_t*,Int_t) fcn); Specify the address of the fitting algorithm. void SetFitMethod(const char* name); ret fit method (chisquare or loglikelihood). Int_t SetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh); set initial values for a parameter; ipar : parameter number; parname : parameter name; value : initial parameter value; verr : initial error for this parameter; vlow : lower value for the parameter; vhigh : upper value for the parameter. void FitChisquare(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Chisquare method; Default method (function evaluated at center of bin); for each point the cache contains the following info; -1D : bc,e, xc (bin content, error, x of center of bin); -2D : bc,e, xc,yc; -3D : bc,e, xc,yc,zc. void FitChisquareI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Chisquare method; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e, xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e, xc,xw,yc,yw; -3D : bc,e, xc,xw,yc,yw,zc,zw. void FitLikelihood(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; Default method (function evaluated at center of bin); for eac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFitter.html:16113,error,error,16113,root/html602/TFitter.html,https://root.cern,https://root.cern/root/html602/TFitter.html,2,['error'],['error']
Availability,"kTRUE save-per-query/save-per-packet. The function CheckMemUsage sets fSavePartialResults = 1 if fSaveMemThreshold > 0 and; ProcInfo_t::fMemResident >= fSaveMemThreshold: from that point on partial results; are always saved and expensive calls to TSystem::GetProcInfo saved.; The switch fSaveResultsPerPacket is instead controlled by the user or admin; who can also force saving in all cases; parameter PROOF_SavePartialResults or; RC env ProofPlayer.SavePartialResults .; However, if 'force' is kTRUE, fSavePartialResults and fSaveResultsPerPacket; are ignored.; Return -1 in case of problems, 0 otherwise. Int_t AssertSelector(const char* selector_file); Make sure that a valid selector object; Return -1 in case of problems, 0 otherwise. void UpdateProgressInfo(); Update fProgressStatus. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF worker.; The return value is -1 in case of error and TSelector::GetStatus(); in case of success. Long64_t Process(TDSet* set, TSelector* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF worker with TSelector object; The return value is -1 in case of error and TSelector::GetStatus(); in case of success. Bool_t JoinProcess(TList* workers); Not implemented: meaningful only in the remote player. Returns kFALSE. Bool_t CheckMemUsage(Long64_t& mfreq, Bool_t& w80r, Bool_t& w80v, TString& wmsg); Check the memory usage, if requested.; Return kTRUE if OK, kFALSE if above 95% of at least one between virtual or; resident limits are depassed. Long64_t Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); Finalize query (may not be used in this class). Long64_t Finalize(TQueryResult* qr); Finalize query (may not be used in this class). void MergeOutput(); Merge output (may not be used in this class). void MapOutputListToDataMembers() const. void UpdateAutoBin(const char* name, Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofPlayer.html:20286,error,error,20286,root/html602/TProofPlayer.html,https://root.cern,https://root.cern/root/html602/TProofPlayer.html,1,['error'],['error']
Availability,"kTRUE save-per-query/save-per-packet. The function CheckMemUsage sets fSavePartialResults = 1 if fSaveMemThreshold > 0 and; ProcInfo_t::fMemResident >= fSaveMemThreshold: from that point on partial results; are always saved and expensive calls to TSystem::GetProcInfo saved.; The switch fSaveResultsPerPacket is instead controlled by the user or admin; who can also force saving in all cases; parameter PROOF_SavePartialResults or; RC env ProofPlayer.SavePartialResults .; However, if 'force' is kTRUE, fSavePartialResults and fSaveResultsPerPacket; are ignored.; Return -1 in case of problems, 0 otherwise. Int_t AssertSelector(const char* selector_file); Make sure that a valid selector object; Return -1 in case of problems, 0 otherwise. void UpdateProgressInfo(); Update fProgressStatus. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF worker.; The return value is -1 in case of error and TSelector::GetStatus(); in case of success. Long64_t Process(TDSet* set, TSelector* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF worker with TSelector object; The return value is -1 in case of error and TSelector::GetStatus(); in case of success. Bool_t JoinProcess(TList* workers); Not implemented: meaningful only in the remote player. Returns kFALSE. Bool_t CheckMemUsage(Long64_t& mfreq, Bool_t& w80r, Bool_t& w80v, TString& wmsg); Check the memory usage, if requested.; Return kTRUE if OK, kFALSE if above 95% of at least one between virtual or; resident limits are depassed. Long64_t Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); Finalize query (may not be used in this class). Long64_t Finalize(TQueryResult* qr); Finalize query (may not be used in this class). void MergeOutput(Bool_t savememvalues = kFALSE); Merge output (may not be used in this class). void MapOutputListToDataMembers() const. void UpdateAut",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofPlayer.html:19579,error,error,19579,root/html534/TProofPlayer.html,https://root.cern,https://root.cern/root/html534/TProofPlayer.html,2,['error'],['error']
Availability,"kTRUE); virtual Bool_tAddFile(const char* url, Bool_t cpProgress = kTRUE); virtual Bool_tAddFile(TFile* source, Bool_t cpProgress = kTRUE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetCWD(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetMaxOpenedFies() const; TList*GetMergeList() const; const char*GetMsgPrefix() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TFile*GetOutputFile() const; const char*GetOutputFileName() const; Int_tGetPrintLevel() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TFileMerger.html:1930,error,error,1930,root/html532/TFileMerger.html,https://root.cern,https://root.cern/root/html532/TFileMerger.html,1,['error'],['error']
Availability,"kTRUE;; 2498 }; 2499 if (siz != len) {; 2500 SetBit(kWriteError);; 2501 Error(""WriteBuffer"", ""error writing all requested bytes to file %s, wrote %ld of %d"",; 2502 GetName(), (Long_t)siz, len);; 2503 return kTRUE;; 2504 }; 2505 fBytesWrite += siz;; 2506 fgBytesWrite += siz;; 2507 ; 2508 if (gMonitoringWriter); 2509 gMonitoringWriter->SendFileWriteProgress(this);; 2510 ; 2511 return kFALSE;; 2512 }; 2513 return kTRUE;; 2514}; 2515 ; 2516////////////////////////////////////////////////////////////////////////////////; 2517/// Write buffer via cache. Returns 0 if cache is not active, 1 in case; 2518/// write via cache was successful, 2 in case write via cache failed.; 2519 ; 2520Int_t TFile::WriteBufferViaCache(const char *buf, Int_t len); 2521{; 2522 if (!fCacheWrite) return 0;; 2523 ; 2524 Int_t st;; 2525 Long64_t off = GetRelOffset();; 2526 if ((st = fCacheWrite->WriteBuffer(buf, off, len)) < 0) {; 2527 SetBit(kWriteError);; 2528 Error(""WriteBuffer"", ""error writing to cache"");; 2529 return 2;; 2530 }; 2531 if (st > 0) {; 2532 // fOffset might have been changed via TFileCacheWrite::WriteBuffer(), reset it; 2533 Seek(off + len);; 2534 return 1;; 2535 }; 2536 return 0;; 2537}; 2538 ; 2539////////////////////////////////////////////////////////////////////////////////; 2540/// Write FREE linked list on the file.; 2541/// The linked list of FREE segments (fFree) is written as a single data; 2542/// record.; 2543 ; 2544void TFile::WriteFree(); 2545{; 2546 //*-* Delete old record if it exists; 2547 if (fSeekFree != 0) {; 2548 MakeFree(fSeekFree, fSeekFree + fNbytesFree -1);; 2549 }; 2550 ; 2551 Bool_t largeFile = (fEND > TFile::kStartBigFile);; 2552 ; 2553 auto createKey = [this]() {; 2554 Int_t nbytes = 0;; 2555 TFree *afree;; 2556 TIter next (fFree);; 2557 while ((afree = (TFree*) next())) {; 2558 nbytes += afree->Sizeof();; 2559 }; 2560 if (!nbytes) return (TKey*)nullptr;; 2561 ; 2562 TKey *key = new TKey(fName,fTitle,IsA(),nbytes,this);; 2563 ; 2564 if (key->GetSeekKey(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:89705,error,error,89705,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['error'],['error']
Availability,"kTo save dutinr the grabbing the selectInput; UInt_tfSelectEventMaskinput mask for SelectInput; ushortQPaintDevice::paintersrefcount; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQtClientWidget(TQtClientGuard* guard, QWidget* parent = 0, const char* name = 0, Qt::WFlags f = 0). ~TQtClientWidget(); fprintf(stderr, ""TQtClientWidget::~TQtClientWidget dtor %p\n"", this);; remove the event filter. void closeEvent(QCloseEvent* ev); This Qt QCloseEvent event handler. void setEraseColor(const QColor& color); Color to paint widget background with our PainEvent. void setErasePixmap(const QPixmap& pixmap); pixmap to paint widget background with our PainEvent. bool IsGrabbed(Event_t& ev); - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -; XGrabButton(3X11) XLIB FUNCTIONS XGrabButton(3X11); * The pointer is not grabbed, and the specified button is logically; pressed when the specified modifier keys are logically down,; and no other buttons or modifier keys are logically down.; * The grab_window contains the pointer.; * The confine_to window (if any) is viewable.; * A passive grab on the same button/key combination does not exist; on any ancestor of grab_window.; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -. TQtClientWidget * IsKeyGrabbed(const Event_t& ev); Check ROOT Event_t ev structure for the KeyGrab mask. void GrabEvent(Event_t& ev, bool own = true); replace the original Windows_t with the grabbing id and; re-caclulate the mouse coordinate; to respect the new Windows_t id if any. void SelectInput(UInt_t evmask); Select input and chech whether qwe nat mouse tracking. void SetButtonMask(UInt_t modifier = kAnyModifier, EMouseButton button = kAnyButton); Set the Button mask. void UnSetButtonMask(bool dtor = false); Unset the Button mask. Bool_t SetK",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TQtClientWidget.html:22221,down,down,22221,root/html604/TQtClientWidget.html,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html,2,['down'],['down']
Availability,"kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TRefCnt; enum  EReferenceFlag { kStaticInit; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGPicture.h>. Inheritance diagram for TGPicture:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGPicture() [1/2]. TGPicture::TGPicture ; (; const char * ; name, . Bool_t ; scaled = kFALSE . ). inlineprotected . Definition at line 36 of file TGPicture.h. ◆ TGPicture() [2/2]. TGPicture::TGPicture ; (; const char * ; name, . Pixmap_t ; pxmap, . Pixmap_t ; mask = 0 . ). protected . ctor. Important: both pixmaps pxmap and mask must be unique (not shared) ; Definition at line 318 of file TGPicture.cxx. ◆ ~TGPicture(). TGPicture::~TGPicture ; (; ). override . Delete picture object. ; Definition at line 361 of file TGPicture.cxx. Member Function Documentation. ◆ Class(). static TClass * TGPicture::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGPicture::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGPicture::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 63 of file TGPicture.h. ◆ DeclFileName(). static const char * TGPicture::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 63 of file TGPicture.h. ◆ Draw() [1/2]. void TGPicture::Draw ; (; Handle_t ; id, . GContext_t ; gc, . Int_t ; x, . Int_t ; y . ); const. virtual . Draw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGPicture.html:11814,mask,mask,11814,doc/master/classTGPicture.html,https://root.cern,https://root.cern/doc/master/classTGPicture.html,1,['mask'],['mask']
Availability,"kWriteDelete; };. private:. TGDMLWrite::StructLst*fAccPattlist of accepted patterns for division; UInt_tfActNameErrcount of name errors; XMLNodePointer_tfDefineNodemain <define> node...; TGDMLWrite::StructLst*fElementListlist of elements; TXMLEngine*fGdmlE; XMLDocPointer_tfGdmlFile; TGDMLWrite::StructLst*fIsotopeListlist of isotopes; TGDMLWrite::StructLst*fMaterialListlist of materials; XMLNodePointer_tfMaterialsNodemain <materials> node...; TGDMLWrite::NameLst*fNameListlist of names (pointer mapped); Int_tfPhysVolCntcount of physical volumes; TGDMLWrite::StructLst*fRejShapelist of rejected shapes; TGDMLWrite::StructLst*fShapeListlist of solids; UInt_tfSolCntcount of name solids; XMLNodePointer_tfSolidsNodemain <solids> node...; XMLNodePointer_tfStructureNodemain <structure> node...; TStringfTopVolumeName; Int_tfVolCntcount of volumes; TGDMLWrite::StructLst*fVolumeListlist of volumes; Bool_tfgG4Compatibility; static TGDMLWrite*fgGDMLWritepointer to gdml writer; Int_tfgNamingSpeed; static const UInt_tfgkMaxNameErrmaximum number of errors for naming; static const UInt_tfgkProcBit14th bit is set when solid is processed; static const UInt_tfgkProcBitVol19th bit is set when volume is processed. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGDMLWrite(); Default constructor. ~TGDMLWrite(); Destructor. void SetNamingSpeed(TGDMLWrite::ENamingType naming). void WriteGDMLfile(TGeoManager* geomanager, const char* filename = ""test.gdml"", TString option = """"); Wrapper of all exporting methods; Creates blank GDML file and fills it with gGeoManager structure converted; to GDML structure xml nodes. XMLNodePointer_t ExtractMaterials(TList* materialsLst). void ExtractSolids(TObjArray* shapesLst). void ExtractVolumes(TGeoVolume* volume). XMLNodePointer_t CreateAtomN(Double_t atom, const char* unit = ""g/mole""); Creates ""atom"" node for GDML. XMLNodePointer_t CreateDN(Double_t density, const char* unit = ""g/cm3""); Creates ""D"" density node for G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGDMLWrite.html:9426,error,errors,9426,root/html532/TGDMLWrite.html,https://root.cern,https://root.cern/root/html532/TGDMLWrite.html,1,['error'],['errors']
Availability,"kWriteDelete; };. private:. TStopwatch_cumulTimer; TMatrixDSym*_extV; RooMinimizerFcn*_fcn; RooAbsReal*_func; string_minimizerType; Bool_t_optConst; Int_t_printLevel; Bool_t_profile; Int_t_status; vector<std::pair<std::string,int> >_statusHistory; static ROOT::Fit::Fitter*_theFitter; TStopwatch_timer; Bool_t_verbose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup method called by atexit handler installed by RooSentinel; to delete all global heap objects when the program is terminated. RooMinimizer(RooAbsReal& function); Construct MINUIT interface to given function. Function can be anything,; but is typically a -log(likelihood) implemented by RooNLLVar or a chi^2; (implemented by RooChi2Var). Other frequent use cases are a RooAddition; of a RooNLLVar plus a penalty or constraint term. This class propagates; all RooFit information (floating parameters, their values and errors); to MINUIT before each MINUIT call and propagates all MINUIT information; back to the RooFit object at the end of each call (updated parameter; values, their (asymmetric errors) etc. The default MINUIT error level; for HESSE and MINOS error analysis is taken from the defaultErrorLevel(); value of the input function. ~RooMinimizer(); Destructor. void setStrategy(Int_t strat); Change MINUIT strategy to istrat. Accepted codes; are 0,1,2 and represent MINUIT strategies for dealing; most efficiently with fast FCNs (0), expensive FCNs (2); and 'intermediate' FCNs (1). void setErrorLevel(Double_t level); Set the level for MINUIT error analysis to the given; value. This function overrides the default value; that is taken in the RooMinimizer constructor from; the defaultErrorLevel() method of the input function. void setEps(Double_t eps); Change MINUIT epsilon. void setMinimizerType(const char* type); Choose the minimzer algorithm. RooFitResult* fit(const char* options); Parse traditional RooAbsPdf::fitTo driver options. m - Run Migrad o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMinimizer.html:8215,error,errors,8215,root/html532/RooMinimizer.html,https://root.cern,https://root.cern/root/html532/RooMinimizer.html,2,['error'],['errors']
Availability,"kWriteDelete; };. protected:. TSignalHandler*TProofMgr::fIntHandlerInterrupt signal handler (ctrl-c); TStringTNamed::fNameobject identifier; Int_tTProofMgr::fRemoteProtocolProtocol number run by the daemon server; TProofMgr::EServTypeTProofMgr::fServTypeType of server: old-proofd, XrdProofd; TList*TProofMgr::fSessionsPROOF session managed by this server; TStringTNamed::fTitleobject title; TUrlTProofMgr::fUrlServer URL; static TListTProofMgr::fgListOfManagersSub-list of TROOT::ListOfProofs for managers. private:. TXSocket*fSocketConnection to XRD. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofMgr(const char* url, Int_t loglevel = -1, const char* alias = """"); Create a PROOF manager for the standard (old) environment. Int_t Init(Int_t loglevel = -1); Do real initialization: open the connection and set the relevant; variables.; Login and authentication are dealt with at this level, if required.; Return 0 in case of success, 1 if the remote server is a 'proofd',; -1 in case of error. ~TXProofMgr(); Destructor: close the connection. void SetInvalid(); Invalidate this manager by closing the connection. TProof * AttachSession(TProofDesc* d, Bool_t gui = kFALSE); Dummy version provided for completeness. Just returns a pointer to; existing session 'id' (as shown by TProof::QuerySessions) or 0 if 'id' is; not valid. The boolena 'gui' should be kTRUE when invoked from the GUI. void DetachSession(Int_t , Option_t* = """"); Detach session with 'id' from its proofserv. The 'id' is the number; shown by QuerySessions. The correspondent TProof object is deleted.; If id == 0 all the known sessions are detached.; Option opt=""S"" or ""s"" forces session shutdown. void DetachSession(TProof* , Option_t* = """"); Detach session 'p' from its proofserv. The instance 'p' is invalidated; and should be deleted by the caller. Bool_t MatchUrl(const char* url); Checks if 'url' refers to the same 'user@host:port' entity as the URL; in memory. TProofMgr::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXProofMgr.html:9519,error,error,9519,root/html528/TXProofMgr.html,https://root.cern,https://root.cern/root/html528/TXProofMgr.html,3,['error'],['error']
Availability,"kZombie. protected:. Int_t_arrSizeSize of the weight array; Bool_t*_binValid! Valid bins with current range definition; vector<vector<Double_t> >_binbounds! list of bin bounds per dimension; Double_t*_binv[_arrSize] Bin volume array; TIterator*RooAbsData::_cacheIter! Iterator over cached variables; Double_t_cache_sum! Cache for sum of entries ;; Int_t_cache_sum_valid! Is cache sum valid; RooArgSetRooAbsData::_cachedVars! External variables cached with this data set; Int_t_curIndexCurrent index; Double_t_curSumW2Current sum of weights^2; Double_t_curVolumeVolume of bin enclosing current coordinate; Double_t_curWeightWeight associated with the current coordinate; Double_t_curWgtErrHiError on weight associated with the current coordinate; Double_t_curWgtErrLoError on weight associated with the current coordinate; TDirectory*RooDirItem::_dir! Associated directory; RooAbsDataStore*RooAbsData::_dstoreData storage implementation; Double_t*_errHi[_arrSize] High-side error on weight array; Double_t*_errLo[_arrSize] Low-side error on weight array; vector<Int_t>_idxMultMultiplier jump table for index calculation; TIterator*RooAbsData::_iterator! Iterator over dimension variables; vector<const RooAbsBinning*>_lvbins! List of used binnings associated with lvalues; vector<RooAbsLValue*>_lvvars! List of observables casted as RooAbsLValue; static Int_tRooPrintable::_nameLength; map<string,RooAbsData*>RooAbsData::_ownedComponentsOwned external components; vector<Double_t>*_pbinv! Partial bin volume array; RooCacheManager<vector<Double_t> >_pbinvCacheMgr! Cache manager for arrays of partial bin volumes; TIterator*_realIter! Iterator over realVars; RooArgSet_realVarsReal dimensions of the dataset; Double_t*_sumw2[_arrSize] Sum of weights^2; RooArgSetRooAbsData::_varsDimensions of this data set; Double_t*_wgt[_arrSize] Weight array; static RooAbsData::StorageTypeRooAbsData::defaultStorageType; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inher",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooDataHist.html:19960,error,error,19960,root/html602/RooDataHist.html,https://root.cern,https://root.cern/root/html602/RooDataHist.html,4,['error'],['error']
Availability,"ke box, trd1, trd2, trap, gtra or para - 1,2,3 means X,Y,Z; for; tube, tubs, cone, cons - 1 means Rxy, 2 means phi and 3 means Z; for pcon and; pgon - 2 means phi and 3 means Z; for spheres 1 means R and 2 means phi.; In fact, the division operation has the same effect as positioning volumes; in a given order inside the divided container - the advantage being that the; navigation in such a structure is much faster. When a volume is divided, a; volume family corresponding to the slices is created. In case all slices can; be represented by a single shape, only one volume is added to the family and; positioned N times inside the divided volume, otherwise, each slice will be; represented by a distinct volume in the family.; Divisions can be also performed in a given range of one axis. For that, one; have to specify also the starting coordinate value and the step:. TGeoVolume *slicex = box->Divide(""SLICEX"", 1, N, start, step);. A check is always done on the resulting division range : if not fitting into; the container limits, an error message is posted. If we will browse the divided; volume we will notice that it will contain N nodes starting with index 1 upto; N. The first one has the lower X limit at START position, while the last one; will have the upper X limit at START+N*STEP. The resulting slices cannot; be positioned inside an other volume (they are by default positioned inside the; divided one) but can be further divided and may contain other volumes:. TGeoVolume *slicey = slicex->Divide(""SLICEY"", 2, N1);; slicey->AddNode(other_vol, index, some_matrix);. When doing that, we have to remember that SLICEY represents a family, therefore; all members of the family will be divided on Y and the other volume will be; added as node inside all.; In the example above all the resulting slices had the same shape as the; divided volume (box). This is not always the case. For instance, dividing a; volume with TUBE shape on PHI axis will create equal slices having TUBESEG; shape",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoVolume.html:14593,error,error,14593,root/html534/TGeoVolume.html,https://root.cern,https://root.cern/root/html534/TGeoVolume.html,9,['error'],['error']
Availability,"keZombie(). Data Members; public:. enum EState { kFree; kSuspended; kActive; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TList*fClaimslist of claims we manage; TStringfPoolthe condor pool to be accessed; TCondor::EStatefStateour claim state; Bool_tfValidaccess to Condor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondor(const char *pool); Create Condor interface object. Uses Condor apps since there is no; API yet. ~TCondor(); Cleanup Condor interface. void Print(Option_t* option = """") const; Print master status. TCondorSlave * ClaimVM(const char* vm, const char* cmd); Claim a VirtualMachine for PROOF usage. TList * GetVirtualMachines() const; Get the names of the virtual machines in the pool.; Return a TList of TObjString or 0 in case of failure. TList * Claim(Int_t n, const char *cmd); Claim n virtual machines; This function figures out the image and performance index before returning; the list of condor slaves. TCondorSlave * Claim(const char *vmname, const char *cmd); Claim virtual machine with name vmname; This function does not figure out the image and performance index before; returning the condor slave. Bool_t SetState(TCondor::EState state); Set the state of workers. Bool_t Suspend(); Suspend worker. Bool_t Resume(); Resume worker. Bool_t Release(); Release worker. Bool_t GetVmInfo(const char* vm, TString& image, Int_t& perfidx) const; Get info about worker status. TString GetImage(const char* host) const; Get image of the worker. TCondor(const char *pool = """"). Bool_t IsValid() const; { return fValid; }. EState GetState() const; {return fState;}. » Author: Maarten Ballintijn 06/12/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TCondor.h 20882 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCondor.html:6349,failure,failure,6349,root/html526/TCondor.html,https://root.cern,https://root.cern/root/html526/TCondor.html,1,['failure'],['failure']
Availability,"keeping track of the bin content and the total number of calls to Fill(). More...;  ; class  RHistStatRuntime;  Interface implementing a pure virtual functions DoFill(), DoFillN(). More...;  ; class  RHistStatTotalSumOfSquaredWeights;  Keeps track of the histogram's total sum of squared weights. More...;  ; class  RHistStatTotalSumOfWeights;  Keeps track of the histogram's total sum of weights. More...;  ; class  RHistStatUncertainty;  Histogram statistics to keep track of the Poisson uncertainty per bin. More...;  ; class  RHistView;  A view on a histogram, selecting a range on a subset of dimensions. More...;  ; struct  RHistViewOutOfRange;  ; class  RIndirectDisplayItem;  Extract (reference) only basic attributes from drawable, but not drawable itself. More...;  ; class  RIntegralField;  ; class  RIntegralField< std::int16_t >;  ; class  RIntegralField< std::int32_t >;  ; class  RIntegralField< std::int64_t >;  ; class  RIntegralField< std::int8_t >;  ; class  RIntegralField< std::uint16_t >;  ; class  RIntegralField< std::uint32_t >;  ; class  RIntegralField< std::uint64_t >;  ; class  RIntegralField< std::uint8_t >;  ; class  RInvalidField;  Used in RFieldBase::Check() to record field creation failures. More...;  ; class  RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  RLogScopedVerbosity;  Change the verbosity lev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:16503,failure,failures,16503,doc/master/namespaceROOT_1_1Experimental.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html,1,['failure'],['failures']
Availability,"kelihood functions.; 64 /// - Linear Linear minimizer (fitter) working only for linear functions (see TLinearFitter and TLinearMinimizer); 65 /// - GSLMultiMin Minimizer from GSL based on the ROOT::Math::GSLMinimizer. Available algorithms are:; 66 /// - BFGS2 (default); 67 /// - BFGS; 68 /// - ConjugateFR; 69 /// - ConjugatePR; 70 /// - SteepestDescent; 71 /// - GSLMultiFit Minimizer based on GSL for minimizing only non linear least-squared functions (using an approximation similar to Fumili). See ROOT::Math::GSLMultiFit.; 72 /// - GSLSimAn Simulated annealing minimizer from GSL (see ROOT::Math::GSLSimAnMinimizer). It is a stochastic minimization algorithm using only function values and not the gradient.; 73 /// - Genetic Genetic minimization algorithms (see TMVA::Genetic); 74 ///; 75 static void SetDefaultMinimizer(const char *type, const char *algo = nullptr);; 76 ; 77 /// Set the default level for computing the parameter errors.; 78 /// For example for 1-sigma parameter errors; 79 /// - up = 1 for a chi-squared function; 80 /// - up = 0.5 for a negative log-likelihood function; 81 ///; 82 /// The value will be used also by Minos when computing the confidence interval; 83 static void SetDefaultErrorDef(double up);; 84 ; 85 /// Set the Minimization tolerance.; 86 /// The Default value for Minuit and Minuit2 is 0.01; 87 static void SetDefaultTolerance(double tol);; 88 ; 89 /// Set the default Minimizer precision.; 90 /// (used only by MInuit and Minuit2); 91 /// It is used to specify the numerical precision used for computing the; 92 /// objective function. It should be left to the default value found by the Minimizer; 93 /// (typically double precision); 94 static void SetDefaultPrecision(double prec);; 95 ; 96 /// Set the maximum number of function calls.; 97 static void SetDefaultMaxFunctionCalls(int maxcall);; 98 ; 99 /// Set the maximum number of iterations.; 100 /// Used by the GSL minimizers and Genetic. Not used by Minuit,Minuit2.; 101 static void SetDefaultM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MinimizerOptions_8h_source.html:3362,error,errors,3362,doc/master/MinimizerOptions_8h_source.html,https://root.cern,https://root.cern/doc/master/MinimizerOptions_8h_source.html,1,['error'],['errors']
Availability,"ken from 'config'. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Return clone of this generator operating on given function with given configuration; Needed to support RooNumIntFactory. ~RooMCIntegrator(); Destructor. Bool_t checkLimits() const; Check if we can integrate over the current domain. If return value; is kTRUE we cannot handle the current limits (e.g. where the domain; of one or more observables is open ended. Double_t integral(const Double_t* yvec = 0); Evaluate the integral using a fixed number of calls to evaluate the integrand; equal to about 10k per dimension. Use the first 5k calls to refine the grid; over 5 iterations of 1k calls each, and the remaining 5k calls for a single; high statistics integration. Double_t vegas(RooMCIntegrator::Stage stage, UInt_t calls, UInt_t iterations, Double_t* absError = 0); Perform one step of Monte Carlo integration using the specified number of iterations; with (approximately) the specified number of integrand evaluation calls per iteration.; Use the VEGAS algorithm, starting from the specified stage. Returns the best estimate; of the integral. Also sets *absError to the estimated absolute error of the integral; estimate if absError is non-zero. RooMCIntegrator(). Double_t getAlpha() const; { return _alpha; }. void setAlpha(Double_t alpha); { _alpha= alpha; }. GeneratorType getGenType() const; { return _genType; }. void setGenType(RooMCIntegrator::GeneratorType type); { _genType= type; }. const RooGrid & grid() const; { return _grid; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Mon Dec 7 13:48:10 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMCIntegrator.html:10108,error,error,10108,root/html526/RooMCIntegrator.html,https://root.cern,https://root.cern/root/html526/RooMCIntegrator.html,1,['error'],['error']
Availability,"ken from 'config'. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Return clone of this generator operating on given function with given configuration; Needed to support RooNumIntFactory. ~RooMCIntegrator(); Destructor. Bool_t checkLimits() const; Check if we can integrate over the current domain. If return value; is kTRUE we cannot handle the current limits (e.g. where the domain; of one or more observables is open ended. Double_t integral(const Double_t* yvec = 0); Evaluate the integral using a fixed number of calls to evaluate the integrand; equal to about 10k per dimension. Use the first 5k calls to refine the grid; over 5 iterations of 1k calls each, and the remaining 5k calls for a single; high statistics integration. Double_t vegas(RooMCIntegrator::Stage stage, UInt_t calls, UInt_t iterations, Double_t* absError = 0); Perform one step of Monte Carlo integration using the specified number of iterations; with (approximately) the specified number of integrand evaluation calls per iteration.; Use the VEGAS algorithm, starting from the specified stage. Returns the best estimate; of the integral. Also sets *absError to the estimated absolute error of the integral; estimate if absError is non-zero. RooMCIntegrator(). Double_t getAlpha() const; { return _alpha; }. void setAlpha(Double_t alpha); { _alpha= alpha; }. GeneratorType getGenType() const; { return _genType; }. void setGenType(RooMCIntegrator::GeneratorType type); { _genType= type; }. const RooGrid & grid() const; { return _grid; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Mon Jul 4 15:23:17 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooMCIntegrator.html:10186,error,error,10186,root/html530/RooMCIntegrator.html,https://root.cern,https://root.cern/root/html530/RooMCIntegrator.html,1,['error'],['error']
Availability,"ken from 'config'. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Return clone of this generator operating on given function with given configuration; Needed to support RooNumIntFactory. ~RooMCIntegrator(); Destructor. Bool_t checkLimits() const; Check if we can integrate over the current domain. If return value; is kTRUE we cannot handle the current limits (e.g. where the domain; of one or more observables is open ended. Double_t integral(const Double_t* yvec = 0); Evaluate the integral using a fixed number of calls to evaluate the integrand; equal to about 10k per dimension. Use the first 5k calls to refine the grid; over 5 iterations of 1k calls each, and the remaining 5k calls for a single; high statistics integration. Double_t vegas(RooMCIntegrator::Stage stage, UInt_t calls, UInt_t iterations, Double_t* absError = 0); Perform one step of Monte Carlo integration using the specified number of iterations; with (approximately) the specified number of integrand evaluation calls per iteration.; Use the VEGAS algorithm, starting from the specified stage. Returns the best estimate; of the integral. Also sets *absError to the estimated absolute error of the integral; estimate if absError is non-zero. RooMCIntegrator(). Double_t getAlpha() const; { return _alpha; }. void setAlpha(Double_t alpha); { _alpha= alpha; }. GeneratorType getGenType() const; { return _genType; }. void setGenType(RooMCIntegrator::GeneratorType type); { _genType= type; }. const RooGrid & grid() const; { return _grid; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Sat Oct 9 06:58:33 2010 » Last generated: 2010-10-09 06:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMCIntegrator.html:10117,error,error,10117,root/html528/RooMCIntegrator.html,https://root.cern,https://root.cern/root/html528/RooMCIntegrator.html,1,['error'],['error']
Availability,"ken from 'config'. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Return clone of this generator operating on given function with given configuration; Needed to support RooNumIntFactory. ~RooMCIntegrator(); Destructor. Bool_t checkLimits() const; Check if we can integrate over the current domain. If return value; is kTRUE we cannot handle the current limits (e.g. where the domain; of one or more observables is open ended. Double_t integral(const Double_t* yvec = 0); Evaluate the integral using a fixed number of calls to evaluate the integrand; equal to about 10k per dimension. Use the first 5k calls to refine the grid; over 5 iterations of 1k calls each, and the remaining 5k calls for a single; high statistics integration. Double_t vegas(RooMCIntegrator::Stage stage, UInt_t calls, UInt_t iterations, Double_t* absError = 0); Perform one step of Monte Carlo integration using the specified number of iterations; with (approximately) the specified number of integrand evaluation calls per iteration.; Use the VEGAS algorithm, starting from the specified stage. Returns the best estimate; of the integral. Also sets *absError to the estimated absolute error of the integral; estimate if absError is non-zero. RooMCIntegrator(). Double_t getAlpha() const; { return _alpha; }. void setAlpha(Double_t alpha); { _alpha= alpha; }. GeneratorType getGenType() const; { return _genType; }. void setGenType(RooMCIntegrator::GeneratorType type); { _genType= type; }. const RooGrid & grid() const; { return _grid; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Thu Nov 3 20:08:34 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMCIntegrator.html:10186,error,error,10186,root/html532/RooMCIntegrator.html,https://root.cern,https://root.cern/root/html532/RooMCIntegrator.html,1,['error'],['error']
Availability,"ken from 'config'. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Return clone of this generator operating on given function with given configuration; Needed to support RooNumIntFactory. ~RooMCIntegrator(); Destructor. Bool_t checkLimits() const; Check if we can integrate over the current domain. If return value; is kTRUE we cannot handle the current limits (e.g. where the domain; of one or more observables is open ended. Double_t integral(const Double_t* yvec = 0); Evaluate the integral using a fixed number of calls to evaluate the integrand; equal to about 10k per dimension. Use the first 5k calls to refine the grid; over 5 iterations of 1k calls each, and the remaining 5k calls for a single; high statistics integration. Double_t vegas(RooMCIntegrator::Stage stage, UInt_t calls, UInt_t iterations, Double_t* absError = 0); Perform one step of Monte Carlo integration using the specified number of iterations; with (approximately) the specified number of integrand evaluation calls per iteration.; Use the VEGAS algorithm, starting from the specified stage. Returns the best estimate; of the integral. Also sets *absError to the estimated absolute error of the integral; estimate if absError is non-zero. RooMCIntegrator(). Double_t getAlpha() const; { return _alpha; }. void setAlpha(Double_t alpha); { _alpha= alpha; }. GeneratorType getGenType() const; { return _genType; }. void setGenType(RooMCIntegrator::GeneratorType type); { _genType= type; }. const RooGrid & grid() const; { return _grid; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Tue Jun 2 15:31:58 2015 » Last generated: 2015-06-02 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooMCIntegrator.html:11368,error,error,11368,root/html604/RooMCIntegrator.html,https://root.cern,https://root.cern/root/html604/RooMCIntegrator.html,1,['error'],['error']
Availability,"ken from them; 4. Roldan Pozo of TNT (http://math.nist.gov/tnt/); He converted the EISPACK routines for the eigen-vector analysis to; C++ . We started with his implementation; 5. Siegmund Brandt (http://siux00.physik.uni-siegen.de/~brandt/datan; We adapted his (very-well) documented SVD routines. How to efficiently use this package. 1. Never return complex objects (matrices or vectors); Danger: For example, when the following snippet:; TMatrixD foo(int n); {; TMatrixD foom(n,n); fill_in(foom); return foom;; }; TMatrixD m = foo(5);; runs, it constructs matrix foo:foom, copies it onto stack as a; return value and destroys foo:foom. Return value (a matrix); from foo() is then copied over to m (via a copy constructor),; and the return value is destroyed. So, the matrix constructor is; called 3 times and the destructor 2 times. For big matrices,; the cost of multiple constructing/copying/destroying of objects; may be very large. *Some* optimized compilers can cut down on 1; copying/destroying, but still it leaves at least two calls to; the constructor. Note, TMatrixDLazy (see below) can construct; TMatrixD m ""inplace"", with only a _single_ call to the; constructor. 2. Use ""two-address instructions""; ""void TMatrixD::operator += (const TMatrixD &B);""; as much as possible.; That is, to add two matrices, it's much more efficient to write; A += B;; than; TMatrixD C = A + B;; (if both operand should be preserved,; TMatrixD C = A; C += B;; is still better). 3. Use glorified constructors when returning of an object seems; inevitable:; ""TMatrixD A(TMatrixD::kTransposed,B);""; ""TMatrixD C(A,TMatrixD::kTransposeMult,B);"". like in the following snippet (from $ROOTSYS/test/vmatrix.cxx); that verifies that for an orthogonal matrix T, T'T = TT' = E. TMatrixD haar = THaarMatrixD(5);; TMatrixD unit(TMatrixD::kUnit,haar);; TMatrixD haar_t(TMatrixD::kTransposed,haar);; TMatrixD hth(haar,TMatrixD::kTransposeMult,haar);; TMatrixD hht(haar,TMatrixD::kMult,haar_t);; TMatrixD hht1 = haar; hht1 *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixTBase_double_.html:3983,down,down,3983,root/html528/TMatrixTBase_double_.html,https://root.cern,https://root.cern/root/html528/TMatrixTBase_double_.html,12,['down'],['down']
Availability,"ker event array"";; 20130 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20131 mg_free(ctx->worker_threadids);; 20132 ; 20133 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20134 mg_snprintf(NULL,; 20135 NULL, /* No truncation check for error buffers */; 20136 error->text,; 20137 error->text_buffer_size,; 20138 ""%s"",; 20139 err_msg);; 20140 }; 20141 free_context(ctx);; 20142 pthread_setspecific(sTlsKey, NULL);; 20143 return NULL;; 20144 }; 20145 ; 20146 ctx->client_socks =; 20147 (struct socket *)mg_calloc_ctx(ctx->cfg_worker_threads,; 20148 sizeof(ctx->client_socks[0]),; 20149 ctx);; 20150 if (ctx->client_socks == NULL) {; 20151 const char *err_msg = ""Not enough memory for worker socket array"";; 20152 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20153 mg_free(ctx->client_wait_events);; 20154 mg_free(ctx->worker_threadids);; 20155 ; 20156 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20157 mg_snprintf(NULL,; 20158 NULL, /* No truncation check for error buffers */; 20159 error->text,; 20160 error->text_buffer_size,; 20161 ""%s"",; 20162 err_msg);; 20163 }; 20164 free_context(ctx);; 20165 pthread_setspecific(sTlsKey, NULL);; 20166 return NULL;; 20167 }; 20168 ; 20169 for (i = 0; (unsigned)i < ctx->cfg_worker_threads; i++) {; 20170 ctx->client_wait_events[i] = event_create();; 20171 if (ctx->client_wait_events[i] == 0) {; 20172 const char *err_msg = ""Error creating worker event %i"";; 20173 mg_cry_ctx_internal(ctx, err_msg, i);; 20174 while (i > 0) {; 20175 i--;; 20176 event_destroy(ctx->client_wait_events[i]);; 20177 }; 20178 mg_free(ctx->client_socks);; 20179 mg_free(ctx->client_wait_events);; 20180 mg_free(ctx->worker_threadids);; 20181 ; 20182 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20183 mg_snprintf(NULL,; 20184 NULL, /* No truncation check for error buffers */; 20185 error->text,; 20186 error->text_buffer_size,; 20187 err_msg,; 20188 i);; 20189 }; 20190 free_context(ctx);; 20191 pthread_setspecific(sTlsKey, NULL);; 20192 return NULL;; 20",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:602642,error,error,602642,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"ker event array"";; 20131 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20132 mg_free(ctx->worker_threadids);; 20133 ; 20134 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20135 mg_snprintf(NULL,; 20136 NULL, /* No truncation check for error buffers */; 20137 error->text,; 20138 error->text_buffer_size,; 20139 ""%s"",; 20140 err_msg);; 20141 }; 20142 free_context(ctx);; 20143 pthread_setspecific(sTlsKey, NULL);; 20144 return NULL;; 20145 }; 20146 ; 20147 ctx->client_socks =; 20148 (struct socket *)mg_calloc_ctx(ctx->cfg_worker_threads,; 20149 sizeof(ctx->client_socks[0]),; 20150 ctx);; 20151 if (ctx->client_socks == NULL) {; 20152 const char *err_msg = ""Not enough memory for worker socket array"";; 20153 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20154 mg_free(ctx->client_wait_events);; 20155 mg_free(ctx->worker_threadids);; 20156 ; 20157 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20158 mg_snprintf(NULL,; 20159 NULL, /* No truncation check for error buffers */; 20160 error->text,; 20161 error->text_buffer_size,; 20162 ""%s"",; 20163 err_msg);; 20164 }; 20165 free_context(ctx);; 20166 pthread_setspecific(sTlsKey, NULL);; 20167 return NULL;; 20168 }; 20169 ; 20170 for (i = 0; (unsigned)i < ctx->cfg_worker_threads; i++) {; 20171 ctx->client_wait_events[i] = event_create();; 20172 if (ctx->client_wait_events[i] == 0) {; 20173 const char *err_msg = ""Error creating worker event %i"";; 20174 mg_cry_ctx_internal(ctx, err_msg, i);; 20175 while (i > 0) {; 20176 i--;; 20177 event_destroy(ctx->client_wait_events[i]);; 20178 }; 20179 mg_free(ctx->client_socks);; 20180 mg_free(ctx->client_wait_events);; 20181 mg_free(ctx->worker_threadids);; 20182 ; 20183 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20184 mg_snprintf(NULL,; 20185 NULL, /* No truncation check for error buffers */; 20186 error->text,; 20187 error->text_buffer_size,; 20188 err_msg,; 20189 i);; 20190 }; 20191 free_context(ctx);; 20192 pthread_setspecific(sTlsKey, NULL);; 20193 return NULL;; 20",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:602675,error,error,602675,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"kerStyle(23);; pm->SetMarkerColor(kRed);; pm->SetMarkerSize(1);; }; TSpectrumFit::FitStiefelvoid FitStiefel(Double_t *source)This function fits the source spectrum.Definition TSpectrumFit.cxx:1859. Definition at line 1859 of file TSpectrumFit.cxx. ◆ GetAmplitudes(). Double_t * TSpectrumFit::GetAmplitudes ; (; ); const. inline . Definition at line 116 of file TSpectrumFit.h. ◆ GetAmplitudesErrors(). Double_t * TSpectrumFit::GetAmplitudesErrors ; (; ); const. inline . Definition at line 117 of file TSpectrumFit.h. ◆ GetAreas(). Double_t * TSpectrumFit::GetAreas ; (; ); const. inline . Definition at line 118 of file TSpectrumFit.h. ◆ GetAreasErrors(). Double_t * TSpectrumFit::GetAreasErrors ; (; ); const. inline . Definition at line 119 of file TSpectrumFit.h. ◆ GetBackgroundParameters(). void TSpectrumFit::GetBackgroundParameters ; (; Double_t & ; a0, . Double_t & ; a0Err, . Double_t & ; a1, . Double_t & ; a1Err, . Double_t & ; a2, . Double_t & ; a2Err . ). This function gets the background parameters and their errors. . a0 - gets the fitted value of a0 parameter; a0Err - gets error value of a0 parameter; a1 - gets the fitted value of a1 parameter; a1Err - gets error value of a1 parameter; a2 - gets the fitted value of a2 parameter; a2Err - gets error value of a2 parameter . Definition at line 2742 of file TSpectrumFit.cxx. ◆ GetChi(). Double_t TSpectrumFit::GetChi ; (; ); const. inline . Definition at line 121 of file TSpectrumFit.h. ◆ GetPositions(). Double_t * TSpectrumFit::GetPositions ; (; ); const. inline . Definition at line 122 of file TSpectrumFit.h. ◆ GetPositionsErrors(). Double_t * TSpectrumFit::GetPositionsErrors ; (; ); const. inline . Definition at line 123 of file TSpectrumFit.h. ◆ GetSigma(). void TSpectrumFit::GetSigma ; (; Double_t & ; sigma, . Double_t & ; sigmaErr . ). This function gets the sigma parameter and its error. . sigma - gets the fitted value of sigma parameter; sigmaErr - gets error value of sigma parameter . Definition at line 2727 of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrumFit.html:42632,error,errors,42632,doc/master/classTSpectrumFit.html,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html,1,['error'],['errors']
Availability,"kers); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tAssignWork(TDSet*, Long64_t, Long64_t num); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tGetActiveWorkers(); Long64_tTVirtualPacketizer::GetBytesRead() const; TList*TVirtualPacketizer::GetConfigParams(Bool_t steal = kFALSE); Double_tTVirtualPacketizer::GetCumProcTime() const; virtual Float_tGetCurrentRate(Bool_t& all); Double_tGetCurrentTime(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tTVirtualPacketizer::GetEntriesProcessed() const; virtual Int_tTVirtualPacketizer::GetEstEntriesProcessed(Float_t, Long64_t& ent, Long64_t& bytes, Long64_t& calls); TList*TVirtualPacketizer::GetFailedPackets(); virtual const char*TObject::GetIconName() const; Float_tTVirtualPacketizer::GetInitTime() const; virtual const char*TObject::GetName() const; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPacketizerUnit.html:2079,error,error,2079,root/html534/TPacketizerUnit.html,https://root.cern,https://root.cern/root/html534/TPacketizerUnit.html,1,['error'],['error']
Availability,"kes less than 8 bytes, the size of a Long64_t. This hash is used to lookup the linear index in the TExMap member fBins; the coordinates of the entry fBins points to is compared to the coordinates passed to GetBin(). If they do not match, these two coordinates have the same hash - which is extremely unlikely but (for the case where the compact bin coordinates are larger than 4 bytes) possible. In this case, fBinsContinued contains a chain of linear indexes with the same hash. Iterating through this chain and comparing each bin coordinates with the one passed to GetBin() will retrieve the matching bin. ; Definition at line 37 of file THnSparse.h. Public Member Functions;  ~THnSparse () override;  Destruct a THnSparse. ;  ; void AddBinContent (const Int_t *idx, Double_t v=1.);  Forwards to THnBase::AddBinContent(). ;  ; void AddBinContent (Long64_t bin, Double_t v=1.) override;  Add ""v"" to the content of bin with index ""bin"". ;  ; void AddBinError2 (Long64_t bin, Double_t e2) override;  Add ""e"" to error of bin with index ""bin"", enable errors if needed. ;  ; ROOT::Internal::THnBaseBinIter * CreateIter (Bool_t respectAxisRange) const override;  Create an iterator over all filled bins of a THnSparse. ;  ; Long64_t GetBin (const char *name[]) const override;  ; Long64_t GetBin (const char *name[], Bool_t allocate=kTRUE) override;  Get the bin index for the n dimensional tuple addressed by ""name"", allocate one if it doesn't exist yet and ""allocate"" is true. ;  ; Long64_t GetBin (const Double_t *x) const override;  ; Long64_t GetBin (const Double_t *x, Bool_t allocate=kTRUE) override;  Get the bin index for the n dimensional tuple x, allocate one if it doesn't exist yet and ""allocate"" is true. ;  ; Long64_t GetBin (const Int_t *idx) const override;  ; Long64_t GetBin (const Int_t *idx, Bool_t allocate=kTRUE) override;  Get the bin index for the n dimensional coordinates coord, allocate one if it doesn't exist yet and ""allocate"" is true. ;  ; Double_t GetBinContent (const Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparse.html:5214,error,error,5214,doc/master/classTHnSparse.html,https://root.cern,https://root.cern/doc/master/classTHnSparse.html,2,['error'],"['error', 'errors']"
Availability,"kes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn through the end points of the vertical error bars. . ""4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""5"" Error rectangles are drawn like option ""2"". In addition the contour line around the boxes is drawn. This can be useful when boxes' fill colors are very light or in gray scale mode. . gStyle->SetErrorX(dx) controls the size of the error along x. dx = 0 removes the error along x.; gStyle->SetEndErrorSize(np) controls the size of the lines at the end of the error bars (when option 1 is used). By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are defined along X and Y and are symmetric: The left and right errors are the same along X and the bottom and up errors are the same along Y.; {; auto c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""A graph with errors"");; ge->Draw(""ap"");; }; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; eyDouble_t ey[n]Definition legend1.C:17; exDouble_t ex[n]Definition legend1.C:17. The option ""0"" shows the error bars for data points outside range.; {; auto c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] = {1,2,3};; float err_x[] = {0,0,0};; float err_y[] = {5,5,5};; float y[] = {1,4,9};; auto tg = new TGraphErrors(3,x,y,err_x,err_y);; c48->Divide(2,1);; c48->cd(1); gPad->DrawFrame(0,0,4,8); tg->Draw(""PC"");; c48->cd(2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:10100,error,error,10100,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,1,['error'],['error']
Availability,"ket = basket;; 1420 }; 1421 return fReadBasket;; 1422 }; 1423}; 1424 ; 1425////////////////////////////////////////////////////////////////////////////////; 1426/// Returns true if this branch supports bulk IO, false otherwise.; 1427///; 1428/// This will return true if all the various preconditions necessary hold true; 1429/// to perform bulk IO (reasonable type, single TLeaf, etc); the bulk IO may; 1430/// still fail, depending on the contents of the individual TBaskets loaded.; 1431bool TBranch::SupportsBulkRead() const {; 1432 return (fNleaves == 1) &&; 1433 (static_cast<TLeaf*>(fLeaves.UncheckedAt(0))->GetDeserializeType() != TLeaf::DeserializeType::kExternal);; 1434}; 1435 ; 1436////////////////////////////////////////////////////////////////////////////////; 1437/// \brief Read a basket of events into the given buffer with byte swapping.; 1438///; 1439/// \return On success, the number of events of the type held by this branch; 1440/// that have been read into the buffer. -1 on failure.; 1441///; 1442/// On success, the caller should be able to access the contents of buf as they; 1443/// are with:; 1444///; 1445/// ~~~{.cpp}; 1446/// static_cast<T*>(buf.GetCurrent()); 1447/// ~~~; 1448///; 1449/// where T is the type stored on this branch.; 1450///; 1451/// When `count_buf` points to a valid TBuffer and the branch has a branch count,; 1452/// `count_buf` will be filled (via a call to GetEntriesSerialized) with the data; 1453/// from the branchCount. After deserialization those value can be used to calculate; 1454/// the number of elements corresponding to each entries.; 1455///; 1456/// For each entry the number of elements is the multiplication of; 1457/// ; 1458/// ~~~{.cpp}; 1459/// TLeaf *leaf = static_cast<TLeaf*>(branch->GetListOfLeaves()->At(0));; 1460/// auto len = leaf->GetLen();; 1461/// ~~~; 1462///; 1463/// and the value in the BranchCount corresponding to that entry (can be obtained; 1464/// from `branch->GetBranchCount()`).; 1465///; 1466/// \not",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranch_8cxx_source.html:51542,failure,failure,51542,doc/master/TBranch_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranch_8cxx_source.html,1,['failure'],['failure']
Availability,"ket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. TPServerSocket(const char* service, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a parallel server socket object for a named service. Set reuse; to true to force reuse of the server socket (i.e. do not wait for the; time out to pass). Using backlog one can set the desirable queue length; for pending connections.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. TSocket * Accept(UChar_t Opt = kSrvNoAuth); Accept a connection on a parallel server socket. Returns a full-duplex; parallel communication TPSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. TPServerSocket(const TPServerSocket& ). void operator=(const TPServerSocket& ). virtual ~TPServerSocket(); { }. » Author: Fons Rademakers 19/1/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPServerSocket.html:12162,error,error,12162,root/html528/TPServerSocket.html,https://root.cern,https://root.cern/root/html528/TPServerSocket.html,6,['error'],['error']
Availability,"ket. Every socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TUDPSocket(Int_t descriptor); Create a socket. The socket will adopt previously opened TCP socket with; descriptor desc. TUDPSocket(Int_t descriptor, const char* sockpath); Create a socket. The socket will adopt previously opened Unix socket with; descriptor desc. The sockpath arg is for info purposes only. Use; this method to adopt e.g. a socket created via socketpair(). TUDPSocket(const TUDPSocket& s); TUDPSocket copy ctor. void Close(Option_t* opt = """"); Close the socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitely Close(""force"") if this is desired). TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TUDPSocket.html:12704,error,error,12704,root/html532/TUDPSocket.html,https://root.cern,https://root.cern/root/html532/TUDPSocket.html,1,['error'],['error']
Availability,"ket.h. ◆ IsA(). TClass * TUDPSocket::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 151 of file TUDPSocket.h. ◆ IsValid(). virtual Bool_t TUDPSocket::IsValid ; (; ); const. inlinevirtual . Definition at line 119 of file TUDPSocket.h. ◆ NetError(). void TUDPSocket::NetError ; (; const char * ; where, . Int_t ; error . ). static . Print error string depending on error code. ; Definition at line 1077 of file TUDPSocket.cxx. ◆ operator=(). TUDPSocket & TUDPSocket::operator= ; (; const TUDPSocket & ; ). privatedelete . ◆ Reconnect(). virtual Int_t TUDPSocket::Reconnect ; (; ). inlinevirtual . Definition at line 125 of file TUDPSocket.h. ◆ Recv() [1/4]. Int_t TUDPSocket::Recv ; (; char * ; str, . Int_t ; max . ). virtual . Receive a character string message of maximum max length. ; The expected message must be of type kMESS_STRING. Returns length of received string (can be 0 if otherside of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Definition at line 694 of file TUDPSocket.cxx. ◆ Recv() [2/4]. Int_t TUDPSocket::Recv ; (; char * ; str, . Int_t ; max, . Int_t & ; kind . ). virtual . Receive a character string message of maximum max length. ; Returns in kind the message type. Returns length of received string+4 (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Definition at line 722 of file TUDPSocket.cxx. ◆ Recv() [3/4]. Int_t TUDPSocket::Recv ; (; Int_t & ; status, . Int_t & ; kind . ). virtual . Receives a status and a message type. ; Returns length of received integers, 2*sizeof(Int_t) (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Definition at line 755 of file TUDPSocket.cxx. ◆ Recv()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUDPSocket.html:26106,error,error,26106,doc/master/classTUDPSocket.html,https://root.cern,https://root.cern/doc/master/classTUDPSocket.html,1,['error'],['error']
Availability,"ket.h. ◆ IsValid(). Bool_t TPSocket::IsValid ; (; ); const. inlineoverridevirtual . Reimplemented from TSocket.; Definition at line 79 of file TPSocket.h. ◆ operator=(). void TPSocket::operator= ; (; const TPSocket & ; ). privatedelete . ◆ Recv() [1/4]. Int_t TPSocket::Recv ; (; char * ; str, . Int_t ; max . ). inlineoverridevirtual . Receive a character string message of maximum max length. ; The expected message must be of type kMESS_STRING. Returns length of received string (can be 0 if otherside of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 75 of file TPSocket.h. ◆ Recv() [2/4]. Int_t TPSocket::Recv ; (; char * ; str, . Int_t ; max, . Int_t & ; kind . ). inlineoverridevirtual . Receive a character string message of maximum max length. ; Returns in kind the message type. Returns length of received string+4 (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 76 of file TPSocket.h. ◆ Recv() [3/4]. Int_t TPSocket::Recv ; (; Int_t & ; status, . Int_t & ; kind . ). inlineoverridevirtual . Receives a status and a message type. ; Returns length of received integers, 2*sizeof(Int_t) (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 74 of file TPSocket.h. ◆ Recv() [4/4]. Int_t TPSocket::Recv ; (; TMessage *& ; mess). overridevirtual . Receive a TMessage object. ; The user must delete the TMessage object. Returns length of message in bytes (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). In those case mess == 0. ; Reimplemented fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPSocket.html:26745,error,error,26745,doc/master/classTPSocket.html,https://root.cern,https://root.cern/doc/master/classTPSocket.html,1,['error'],['error']
Availability,ket::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 151 of file TUDPSocket.h. ◆ GetBytesRecv(). UInt_t TUDPSocket::GetBytesRecv ; (; ); const. inline . Definition at line 107 of file TUDPSocket.h. ◆ GetBytesSent(). UInt_t TUDPSocket::GetBytesSent ; (; ); const. inline . Definition at line 106 of file TUDPSocket.h. ◆ GetCompressionAlgorithm(). Int_t TUDPSocket::GetCompressionAlgorithm ; (; ); const. inline . Definition at line 155 of file TUDPSocket.h. ◆ GetCompressionLevel(). Int_t TUDPSocket::GetCompressionLevel ; (; ); const. inline . Definition at line 161 of file TUDPSocket.h. ◆ GetCompressionSettings(). Int_t TUDPSocket::GetCompressionSettings ; (; ); const. inline . Definition at line 167 of file TUDPSocket.h. ◆ GetDescriptor(). virtual Int_t TUDPSocket::GetDescriptor ; (; ); const. inlinevirtual . Definition at line 99 of file TUDPSocket.h. ◆ GetErrorCode(). Int_t TUDPSocket::GetErrorCode ; (; ); const. Returns error code. ; Meaning depends on context where it is called. If no error condition returns 0 else a value < 0. For example see TServerSocket ctor. ; Definition at line 1005 of file TUDPSocket.cxx. ◆ GetInetAddress(). TInetAddress TUDPSocket::GetInetAddress ; (; ); const. inline . Definition at line 100 of file TUDPSocket.h. ◆ GetLastUsage(). TTimeStamp TUDPSocket::GetLastUsage ; (; ). inline . Definition at line 116 of file TUDPSocket.h. ◆ GetLocalInetAddress(). TInetAddress TUDPSocket::GetLocalInetAddress ; (; ). virtual . Return internet address of local host to which the socket is bound. ; In case of error TInetAddress::IsValid() returns kFALSE. ; Definition at line 373 of file TUDPSocket.cxx. ◆ GetLocalPort(). Int_t TUDPSocket::GetLocalPort ; (; ). virtual . Return the local port # to which the socket is bound. ; In case of error return -1. ; Definition at line 387 of file TUDPSocket.cxx. ◆ GetOption() [1/2]. Option_t * TUDPSocket::GetOption ; (; ); const. inlineoverrideprivatevirtu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUDPSocket.html:22731,error,error,22731,doc/master/classTUDPSocket.html,https://root.cern,https://root.cern/doc/master/classTUDPSocket.html,1,['error'],['error']
Availability,"ketpair(). ; Definition at line 314 of file TSocket.cxx. ◆ TSocket() [9/9]. TSocket::TSocket ; (; const TSocket & ; s). TSocket copy ctor. ; Definition at line 347 of file TSocket.cxx. ◆ ~TSocket(). virtual TSocket::~TSocket ; (; ). inlinevirtual . Definition at line 109 of file TSocket.h. Member Function Documentation. ◆ Authenticate(). Bool_t TSocket::Authenticate ; (; const char * ; user). protected . Authenticated the socket with specified user. ; Definition at line 1106 of file TSocket.cxx. ◆ Class(). static TClass * TSocket::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSocket::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSocket::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 171 of file TSocket.h. ◆ Close(). void TSocket::Close ; (; Option_t * ; option = """"). virtual . Close the socket. ; If option is ""force"", calls shutdown(id,2) to shut down the connection. This will close the connection also for the parent of this process. Also called via the dtor (without option ""force"", call explicitly Close(""force"") if this is desired). ; Reimplemented in TPSocket, and TSSLSocket.; Definition at line 389 of file TSocket.cxx. ◆ CreateAuthSocket() [1/2]. TSocket * TSocket::CreateAuthSocket ; (; const char * ; url, . Int_t ; size = 0, . Int_t ; tcpwindowsize = -1, . TSocket * ; opensock = nullptr, . Int_t * ; err = nullptr . ). static . Creates a socket or a parallel socket and authenticates to the remote server. ; url: [[proto][p][auth]://][user@]host[:port][/service][?options]; where proto = ""sockd"", ""rootd"", ""proofd"" indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates any remote server session using TServerSocket) [p] = for parallel sockets (forced internally for rootd; ignored for proofd) [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication [port] = is the remote port numb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSocket.html:22812,down,down,22812,doc/master/classTSocket.html,https://root.cern,https://root.cern/doc/master/classTSocket.html,1,['down'],['down']
Availability,"kground color; TGCheckButton*fBestErrorsswitch on/off option 'improve errors'; TList*TGMainFrame::fBindListlist with key bindings; Int_tTGFrame::fBorderWidthframe border width; TStringTGMainFrame::fClassNameWM class name; TGClient*TGObject::fClientConnection to display server; TGTextButton*fCloseButtonclose the fit panel; TGRadioButton*fConvset convolution mode; TF1Convolution*fConvFunc! TF1Convolution object; Int_tTGFrame::fDNDStateEDNDFlags; Atom_t*TGMainFrame::fDNDTypeListhandles DND types; TGComboBox*fDataSetcontains list of data set to be fitted; Int_tfDimobject dimension; TGTextButton*fDrawAdvancedopens a dialog for advanced draw options; TGCheckButton*fDrawSameswitch on/off fit function drawing; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; TGCheckButton*fEmptyBinsWghts1switch on/off option 'include empry bins'; TGCheckButton*fEnableRobustswitch on/off robust option; TGTextEntry*fEnteredFunccontains user function file name; TGNumberEntryField*fErrorScalecontains error scale set for minimization; UInt_tTGFrame::fEventMaskcurrenty active event mask; TGFrameElement*TGFrame::fFEpointer to frame element; TGTextButton*fFitButtonperforms fitting; TObject*fFitObjectselected object to fit; TGComboBox*fFuncListcontains function list; vector<TFitEditor::FuncParamData_t>fFuncParsfunction parameters (value + limits); TGCompositeFrame*fGeneralgeneral tab; UInt_tTGFrame::fHeightframe height; TStringTGMainFrame::fIconNameicon name; TStringTGMainFrame::fIconPixmapicon pixmap name; Handle_tTGObject::fIdX11/Win32 Window identifier; TGCheckButton*fImproveResultsswitch on/off option 'improve fit results'; TGCheckButton*fIntegralswitch on/off option 'integral'; TGNumberEntryField*fIterationscontains maximum number of iterations; TGLayoutHints*fLayoutAddlayout hints of fAdd radio button; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutHints*fLayoutConvlayout hints of fConv radio button; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout mana",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TFitEditor.html:26177,error,error,26177,root/html604/TFitEditor.html,https://root.cern,https://root.cern/root/html604/TFitEditor.html,1,['error'],['error']
Availability,"kground; scaleError: error on scale factor (correlated error). Data members modified:; fBgrIn,fBgrErrUncorrIn,fBgrErrCorrIn; and those modified by DoBackgroundSubtraction(); save background source. void InitTUnfoldSys(void); initialize pointers and TMaps. ~TUnfoldSys(void); delete all data members. void ClearResults(void); clear all data members which depend on the unfolding results. void PrepareSysError(void); calculations required for syst.error; data members modified; fEmatUncorrX, fEmatUncorrAx, fDeltaCorrX, fDeltaCorrAx. void GetEmatrixSysUncorr(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); get output error contribution from statistical fluctuations in A; ematrix: output error matrix histogram; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors; data members modified:; fVYAx, fESparse, fEAtV, fErrorAStat. TMatrixDSparse * PrepareUncorrEmat(const TMatrixDSparse* m1, const TMatrixDSparse* m2); propagate uncorrelated systematic errors to a covariance matrix; m0,m1 : coefficients (matrices) for propagating the errors. the error matrix is calculated by standard error propagation, where the; derivative of the result vector X wrt the matrix A is given by. dX_k / dA_ij = M0_kj * Z0_i - M1_ki * Z1_j. where:; the matrices M0 and M1 are arguments to this function; the vectors Z0, Z1 : GetDXDAZ(). The matrix A is calculated from a matrix B as. A_ij = B_ij / sum_k B_kj. where k runs over additional indices of B, not present in A.; (underflow and overflow bins, used for efficiency corrections). define: Norm_j = sum_k B_kj (data member fSumOverY). the derivative of A wrt this input matrix B is given by:. dA_ij / dB_kj = ( delta_ik - A_ij ) * 1/Norm_j. The covariance matrix Vxx is:. Vxx_mn = sum_ijlk [ (dX_m / dA_ij) * (dA_ij / dB_kj) * DB_kj; * (dX_n / dA_lj) * (dA_lj / dB_kj) ]. where DB_kj is the error on B_kj squared; Simplify the sum over k:. sum_k [ (dA_ij / dB_kj) * DB_kj * (dA_lj / dB_kj) ]; = sum_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:21418,error,errors,21418,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,6,['error'],['errors']
Availability,"king object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Double_tfAdaBoostBetabeta parameter for AdaBoost algorithm; TStringfAdaBoostR2Lossloss type used in AdaBoostR2 (Linear,Quadratic or Exponential); Bool_tfAutomaticuse user given prune strength or automatically determined one using a validation sample; Bool_tfBaggedGradBoostturn bagging in combination with grad boost on/off; TStringfBoostTypestring specifying the boost type; Double_tfBoostWeightntuple var: boost weight; vector<double>fBoostWeightsthe weights applied in the individual boosts; Double_tfErrorFractionntuple var: misclassification error fraction; vector<TMVA::Event*>fEventSamplethe training events; Double_tfFValidationEventsfraction of events to use for pruning; vector<TMVA::DecisionTree*,allocator<TMVA::DecisionTree*> >fForestthe collection of decision trees; Int_tfITreentuple var: ith tree; UInt_tfMaxDepthmax depth; Double_tfMinLinCorrForFisherthe minimum linear correlation between two variables demanded for use in fisher criterium in node splitting; TTree*fMonitorNtuplemonitoring ntuple; Int_tfNCutsgrid used in cut applied in node splitting; UInt_tfNNodesMaxmax # of nodes; Int_tfNTreesnumber of decision trees requested; Bool_tfNoNegWeightsInTrainingignore negative event weights in the training; Int_tfNodeMinEventsmin number of events in node; Double_tfNodePurityLimitpurity limit for sig/bkg nodes; Bool_tfPruneBeforeBoostflag to prune before boosting; TMVA::DecisionTree::EPruneMethodfPruneMethodmethod used for prunig; TStringfPruneMethodSprune method option String; Double_tfPruneStrengtha parameter to set the ""amount"" of pruning..needs to be adjusted; Bool_tfRandomisedTreeschoose a random subset of possible cut variables at each node during training; Bool_tfRenormByClassindividually re-normalize each event class to the original size after bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodBDT.html:20915,error,error,20915,root/html528/TMVA__MethodBDT.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodBDT.html,1,['error'],['error']
Availability,"king of objects in the TObjectTable. ;  . Private Types; typedef ROOT::Math::IBaseFunctionOneDim * KernelFunction_Ptr;  . Private Member Functions;  TKDE (TKDE &kde);  ; Double_t ApproximateBias (const Double_t *x, const Double_t *) const;  ; void AssureOptions ();  ; Double_t BiweightKernel (Double_t x) const;  Returns the kernel evaluation at x. ;  ; void CheckKernelValidity ();  ; void CheckOptions (Bool_t isUserDefinedKernel=kFALSE);  ; void ComputeDataStats ();  Internal function to compute statistics (mean,stddev) using always all the provided data (i.e. no binning) ;  ; Double_t ComputeKernelIntegral () const;  ; Double_t ComputeKernelL2Norm () const;  ; Double_t ComputeKernelMu () const;  ; Double_t ComputeKernelSigma2 () const;  ; Double_t ComputeMidspread ();  ; Double_t CosineArchKernel (Double_t x) const;  Returns the kernel evaluation at x. ;  ; void DrawConfidenceInterval (TString &drawOpt, double cl=0.95);  // Draws the KDE and its confidence interval ;  ; void DrawErrors (TString &drawOpt);  Draws a TGraphErrors with KDE values and errors. ;  ; Double_t EpanechnikovKernel (Double_t x) const;  ; Double_t GaussianKernel (Double_t x) const;  Returns the kernel evaluation at x. ;  ; TF1 * GetKDEApproximateBias (UInt_t npx=100, Double_t xMin=1.0, Double_t xMax=0.0);  ; TF1 * GetKDEFunction (UInt_t npx=100, Double_t xMin=1.0, Double_t xMax=0.0);  ; void GetOptions (std::string optionType, std::string option);  ; TF1 * GetPDFLowerConfidenceInterval (Double_t confidenceLevel=0.95, UInt_t npx=100, Double_t xMin=1.0, Double_t xMax=0.0);  ; TF1 * GetPDFUpperConfidenceInterval (Double_t confidenceLevel=0.95, UInt_t npx=100, Double_t xMin=1.0, Double_t xMax=0.0);  ; UInt_t Index (Double_t x) const;  compute the bin index given a data point x ;  ; void InitFromNewData ();  ; void Instantiate (KernelFunction_Ptr kernfunc, UInt_t events, const Double_t *data, const Double_t *weight, Double_t xMin, Double_t xMax, const Option_t *option, Double_t rho);  ; Double_t Lowe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKDE.html:16431,error,errors,16431,doc/master/classTKDE.html,https://root.cern,https://root.cern/doc/master/classTKDE.html,1,['error'],['errors']
Availability,"ks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer; This function is overloaded by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure. Int_t GetFromWeb(char* buf, Int_t len, const TString& msg); Read request from web server. Returns -1 in case of error,; 0 in case of success. Int_t GetFromWeb10(char* buf, Int_t len, const TString& msg); Read multiple byte range request from web server.; Uses HTTP 1.0 daemon wihtout mod-root.; Returns -2 in case file does not exist, -1 in case; of error and 0 in case of success. void Seek(Long64_t offset, TFile::ERelativeTo pos = kBeg); Set position from where to start reading. Long64_t GetSize() const; Return maximum file size. Int_t GetHead(); Get the HTTP header. Depending on the return code we can see if; the file exists and if the server uses mod_root.; Returns -1 in case of an error, -2 in case the file does not exists,; -3 in case HEAD is not supported (dCache HTTP door) and; 0 in case of success. Int_t GetLine(TSocket* s, char* line, Int_t maxsize); Read a line from the socket. Reads at most one less than the number of; characters specified by maxsize. Reading stops when a newline character; is found, The newline (\n) and cr (\r), if any, are removed.; Returns -1 in case of error, or the number of characters read (>= 0); otherwise. Int_t GetHunk(TSocket* s, char* hunk, Int_t maxsize); Read a hunk of data from the socket, up until a terminator. The hunk is; limited by whatever the TERMINATOR callback chooses as its; terminator. For example, if terminator stops at newline, the hunk; will consist of a line of data; if terminator stops at two; newlines, it can be used to read the head of an HTTP response.; Upon determining the boundary, the function returns the data (up to; the terminator) in hunk. In case of read error, -1 is returned. In case of having read some; data, but encountering EOF before seeing t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TWebFile.html:27762,error,error,27762,root/html528/TWebFile.html,https://root.cern,https://root.cern/root/html528/TWebFile.html,6,['error'],['error']
Availability,"l . Receive a raw buffer of specified length bytes. ; Using option kPeek one can peek at incoming data. Returns number of received bytes. Returns -1 in case of error. In case of opt == kOob: -2 means EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock) -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 898 of file TSocket.cxx. ◆ RecvStreamerInfos(). Bool_t TSocket::RecvStreamerInfos ; (; TMessage * ; mess). protected . Receive a message containing streamer infos. ; In case the message contains streamer infos they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 928 of file TSocket.cxx. ◆ Select(). Int_t TSocket::Select ; (; Int_t ; interest = kRead, . Long_t ; timeout = -1 . ). virtual . Waits for this socket to change status. ; If interest=kRead, the socket will be watched to see if characters become available for reading; if interest=kWrite the socket will be watched to see if a write will not block. The argument 'timeout' specifies a maximum time to wait in millisec. Default no timeout. Returns 1 if a change of status of interest has been detected within timeout; 0 in case of timeout; < 0 if an error occured. ; Definition at line 443 of file TSocket.cxx. ◆ Send() [1/4]. Int_t TSocket::Send ; (; const char * ; str, . Int_t ; kind = kMESS_STRING . ). virtual . Send a character string buffer. ; Use kind to set the TMessage ""what"" field. Returns the number of bytes in the string str that were sent and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 500 of file TSocket.cxx. ◆ Send() [2/4]. Int_t TSocket::Send ; (; const TMessage & ; mess). virtual . Send a TMessage object. ; Returns the numbe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSocket.html:34405,avail,available,34405,doc/master/classTSocket.html,https://root.cern,https://root.cern/doc/master/classTSocket.html,1,['avail'],['available']
Availability,"l . Reduce the number of bins for the axis passed in the option to the number of bins having a label. ; The method will remove only the extra bins existing after the last ""labeled"" bin. Note that if there are ""un-labeled"" bins present between ""labeled"" bins they will not be removed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 5245 of file TH1.cxx. ◆ LabelsInflate(). void TH1::LabelsInflate ; (; Option_t * ; ax = ""X""). virtual . Double the number of bins for axis. ; Refill histogram. This function is called by TAxis::FindBin(const char *label) ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 5315 of file TH1.cxx. ◆ LabelsOption(). void TH1::LabelsOption ; (; Option_t * ; option = ""h"", . Option_t * ; ax = ""X"" . ). virtual . Sort bins with labels or set option(s) to draw axis with labels. ; Parameters. [in]option; ""a"" sort by alphabetic order; "">"" sort by decreasing values; ""<"" sort by increasing values; ""h"" draw labels horizontal; ""v"" draw labels vertical; ""u"" draw labels up (end of label right adjusted); ""d"" draw labels down (start of label left adjusted). In case not all bins have labels sorting will work only in the case the first n consecutive bins have all labels and sorting will be performed on those label bins.; Parameters. [in]axaxis . Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 5382 of file TH1.cxx. ◆ LoggedInconsistency(). int TH1::LoggedInconsistency ; (; const char * ; name, . const TH1 * ; h1, . const TH1 * ; h2, . bool ; useMerge = false . ); const. protected . Definition at line 883 of file TH1.cxx. ◆ Merge() [1/2]. virtual Long64_t TH1::Merge ; (; TCollection * ; list). inlinevirtual . Reimplemented in TH2Poly, TProfile2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 345 of file TH1.h. ◆ Merge() [2/2]. Long64_t TH1::Merge ; (; TCollection * ; li, . Option_t * ; opt . ). Add all histograms in the collection to this histogram. ; This function compute",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:188058,down,down,188058,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['down'],['down']
Availability,"l : TRangeStaticCast<TBaseClass>( tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; a#define a(i)Definition RSha256.hxx:99; ROOT::Detail::TRangeCastDefinition TCollection.h:311; TBaseClassEach class (see TClass) has a linked list of its base class(es).Definition TBaseClass.h:33; Template Parameters. TThe new type to convert to. . Definition at line 337 of file TCollection.h. Function Documentation. ◆ HasBeenDeleted(). R__ALWAYS_INLINE bool ROOT::Detail::HasBeenDeleted ; (; const TObject * ; obj). Check if the TObject's memory has been deleted. ; WarningThis should be only used for error mitigation as the answer is only sometimes correct. It actually just checks whether the object has been deleted, so this will falsely return true for an object that has been destructed but its memory has not been deleted. This will return an undefined value if the memory is re-used between the deletion and the check. i.e. This is useful to prevent a segmentation fault in case where the problem can be detected when the deletion and the usage are 'close-by' . In enviroment where delete taints (changes) the memory, this function always returns false as the marker left by ~TObject will be overwritten. ; Parameters. objThe memory to check . Returnstrue if the object has been destructed and it can be inferred that it has been deleted ; Definition at line 402 of file TObject.h. ◆ HasCallOp() [1/2]. template<typename T > . constexpr bool ROOT::Detail::HasCallOp ; (; char ; ). constexpr . Definition at line 32 of file TypeTraits.hxx. ◆ HasCallOp() [2/2]. template<typename T > . constexpr auto ROOT::Detail::HasCallOp ; (; int ; ); -> decltype(&T::operator(), true) . constexpr . Definition at line 31 of file TypeTraits.hxx. ◆ operator_equal_impl(). template<class ArrayL , class ArrayR > . bool ROOT::Detail::operator_equal_impl ; (; ArrayL const & ; lhs, . size_t const ; lhs_size, . ArrayR const & ; rhs, . size_t const ; rhs_size . ). inline . Definition at line 456 of file span.hx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Detail.html:4773,fault,fault,4773,doc/master/namespaceROOT_1_1Detail.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail.html,2,['fault'],['fault']
Availability,"l = """"); TNetXNGFileStager(const TNetXNGFileStager&); virtual~TNetXNGFileStager(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static TStringTFileStager::GetPathName(TObject* o); virtual TList*TFileStager::GetStaged(TCollection* pathlist); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNetXNGFileStager.html:1521,error,error,1521,root/html534/TNetXNGFileStager.html,https://root.cern,https://root.cern/root/html534/TNetXNGFileStager.html,1,['error'],['error']
Availability,"l = 1E-6, unsigned int size = 100000). construct given optionally tolerance (absolute and relative) and maximum size of working array; The size of working array represents the number of sub-division used for calculating the integral.; Higher the dimension, larger sizes are required for getting the same accuracy. AdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.E-9, double relTol = 1E-6, unsigned int size = 100000). construct with a reference to the integrand function and given optionally; tolerance (absolute and relative) and maximum size of working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. unsigned int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id: AdaptiveIntegratorMultiDim.h 30749 2009-10-15 16:33:04Z brun $ » Last generated: 2009-12-07 13:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__AdaptiveIntegratorMultiDim.html:3732,error,error,3732,root/html526/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__AdaptiveIntegratorMultiDim.html,4,"['error', 'toler']","['error', 'tolerance']"
Availability,"l Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TXProofServ&operator=(const TXProofServ&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTProofServ::Print(Option_t* option = """") const; virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); Int_tTProofServ::ReceiveFile(const char* file, Bool_t bin, Long64_t size); virtual voidTObject::RecursiveRemove(TObject* obj); static Int_tTProofServ::RegisterDataSets(TList* in, TList* out, TDataSetManager* dsm, TString& e); virtual voidReleaseWorker(const char* ord); virtual voidTApplication::RemoveIdleTimer(); voidTProofServ::Reset(const char* dir); voidTObject::ResetBit(UInt_t f); static voidTProofServ::ResolveKeywords(TString& fname, const char* path = 0); voidTProofServ::RestartComputeTime(); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTProofServ::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTProofServ::SendAsynMessage(const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXProofServ.html:10798,error,error,10798,root/html602/TXProofServ.html,https://root.cern,https://root.cern/root/html602/TXProofServ.html,2,['error'],['error']
Availability,"l Bool_tTVirtualViewer3D::CanLoopOnPrimitives() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseComposite(); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTVirtualViewer3D::DrawViewer(); virtual voidTObject::Dump() constMENU ; virtual voidEndScene(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TViewer3DPad.html:1945,error,error,1945,root/html528/TViewer3DPad.html,https://root.cern,https://root.cern/root/html528/TViewer3DPad.html,6,['error'],['error']
Availability,"l Float_t*Cormx2Master(const Float_t* localCorr, Float_t* masterCorr) const; virtual TDataSet*DefineSet(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* depth = ""3"")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual Float_t*Errmx2Local(const Float_t* masterError, Float_t* localError) const; virtual Double_t*Errmx2Local(const Double_t* masterError, Double_t* localError) const; virtual Float_t*Errmx2Master(const Float_t* localError, Float_t* masterError) const; virtual Double_t*Errmx2Master(const Double_t* localError, Double_t* masterError) const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual UInt_tGetId() const; const TRotMatrix*GetMatrix() const; TRotMatrix*GetMatrix(); virtual const Char_t*GetName() const; virtual TVolume*GetNode() const; virtual char*GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tGetVisibility() const; virtual Double_tGetX(Int_t indx = 0) const; virtual const Double_t*GetXYZ() const; virtual Double_tGetY() const; virtual Double_tGetZ() const; virtual Bool_tTObject::HandleTimer(TTimer* timer)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVolumePosition.html:2886,error,error,2886,root/html528/TVolumePosition.html,https://root.cern,https://root.cern/root/html528/TVolumePosition.html,4,['error'],['error']
Availability,"l Float_t*Cormx2Master(const Float_t* localCorr, Float_t* masterCorr) const; virtual TDataSet*DefineSet(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* depth = ""3"")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual Float_t*Errmx2Local(const Float_t* masterError, Float_t* localError) const; virtual Double_t*Errmx2Local(const Double_t* masterError, Double_t* localError) const; virtual Float_t*Errmx2Master(const Float_t* localError, Float_t* masterError) const; virtual Double_t*Errmx2Master(const Double_t* localError, Double_t* masterError) const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual UInt_tGetId() const; const TRotMatrix*GetMatrix() const; TRotMatrix*GetMatrix(); virtual const Char_t*GetName() const; virtual TVolume*GetNode() const; virtual char*GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const Option_t*GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tGetVisibility() const; virtual Double_tGetX(Int_t indx = 0) const; virtual const Double_t*GetXYZ() const; virtual Double_tGetY() const; virtual Double_tGetZ() const; virtual Bool_tTObject::HandleTimer(TTimer* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVolumePosition.html:2576,error,error,2576,root/html602/TVolumePosition.html,https://root.cern,https://root.cern/root/html602/TVolumePosition.html,2,['error'],['error']
Availability,"l F}{\partial Pext}\right) = 0; \]; 5.9.3.2 Getting the Right Parameter Errors with Limits; In the best case, where the minimum is far from any limits, Minuit will correctly transform the error matrix, and the parameter errors it reports should be accurate and very close to those you would have got without limits. In other cases (which should be more common, since otherwise you would not need limits), the very meaning of parameter errors becomes problematic. Mathematically, since the limit is an absolute constraint on the parameter, a parameter at its limit has no error, at least in one direction. The error matrix, which can assign only symmetric errors, then becomes essentially meaningless.; 5.9.3.3 Interpretation of Parameter Errors; There are two kinds of problems that can arise: the reliability of Minuit’s error estimates, and their statistical interpretation, assuming they are accurate.; 5.9.3.4 Statistical Interpretation; For discussion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels see the articles:. F.James. Determining the statistical Significance of experimental Results. Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet. Statistical Methods in Experimental Physics. North-Holland, 1971. 5.9.4 Reliability of Minuit Error Estimates; Minuit always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step sizes as specified by the user. After a HESSE step, the errors are usually quite accurate, unless there has been a problem. Minuit, when it prints out error values, also gives some indication of how reliable it thinks they are. For example, those marked CURRENT GUESS ERROR are only working values not to be believed, and APPROXIMATE ERROR means tha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:220805,error,error,220805,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['error'],['error']
Availability,"l Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Int_tTChair::CopyRows(const TChair* srcChair, Int_t srcRow = 0, Int_t dstRow = 0, Int_t nRows = 0, Bool_t expand = kFALSE); virtual voidTChair::CopySet(TChair& chair); virtual voidTDataSet::Delete(Option_t* opt = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTChair::Draw(Option_t* opt); virtual TH1*TChair::Draw(TCut varexp, TCut selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); virtual TH1*TChair::Draw(const char* varexp, const char* selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataSet*TDataSet::Find(const char* path) const; virtual TDataSet*TDataSet::FindByName(const char* name, const char* path = """", Option_t* opt = """") const; virtual TDataSet*TDataSet::FindByPath(const char* path) const; virtual TDataSet*TDataSet::FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const; virtual TObject*TDataSet::FindObject(const char* name) const; virtual TObject*TDataSet::FindObject(const TObject* o) const; virtual TDataSet*TDataSet::First() const; virtual voidTChair::Fit(const char* formula, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Int_t nentries = 1000000000, Int_t firstentry = 0); virtual Char_t*TChair::Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TColumnView.html:2264,error,error,2264,root/html526/TColumnView.html,https://root.cern,https://root.cern/root/html526/TColumnView.html,7,['error'],['error']
Availability,"l Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual TTree*CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Long64_tDrawScript(const char* wrapperPrefix, const char* macrofilename, const char* cutfilename, Option_t* option, Long64_t nentries, Long64_t firstentry); virtual Long64_tDrawSelect(const char* varexp, const char* selection, Option_t* option, Long64_t nentries, Long64_t firstentry); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tFit(const char* formula, const char* varexp, const char* selection, Option_t* option, Option_t* goption, Long64_t nentries, Long64_t firstentry); static TVirtualTreePlayer*GetCurrentPlayer(); virtual Int_tGetDimension() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tGetEntries(const char*); virtual TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual Int_tGetNfill() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Optio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualTreePlayer.html:2139,error,error,2139,root/html528/TVirtualTreePlayer.html,https://root.cern,https://root.cern/root/html528/TVirtualTreePlayer.html,6,['error'],['error']
Availability,"l Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Bool_tGetInput(const TMVA::Event* event, vector<Float_t>& input, vector<Char_t>& mask, Bool_t backTransform = kFALSE) const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TStringGetShortName() const; virtual const char*TObject::GetTitle() const; virtual vector<TString>*GetTransformationStrings(Int_t cls) const; virtual UInt_tTObject::GetUniqueID() const; TMVA::Types::EVariableTransformGetVariableTransform() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInitialize(); virtual voidTObject::Inspect() constMENU ; virtual const TMVA::Event*InverseTransform(const TMVA::Event *const, Int_t cls) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsCreated() cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__VariableTransformBase.html:2156,mask,mask,2156,root/html530/TMVA__VariableTransformBase.html,https://root.cern,https://root.cern/root/html530/TMVA__VariableTransformBase.html,3,['mask'],['mask']
Availability,"l Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Bool_tGetInput(const TMVA::Event* event, vector<Float_t>& input, vector<Char_t>& mask, Bool_t backTransform = kFALSE) const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TStringGetShortName() const; virtual const char*TObject::GetTitle() const; virtual vector<TString>*GetTransformationStrings(Int_t cls) const; virtual UInt_tTObject::GetUniqueID() const; TMVA::Types::EVariableTransformGetVariableTransform() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInitialize(); virtual voidTObject::Inspect() constMENU ; virtual const TMVA::Event*InverseTransform(const TMVA::Event*const, Int_t cls) const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsCreated() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__VariableTransformBase.html:2156,mask,mask,2156,root/html602/TMVA__VariableTransformBase.html,https://root.cern,https://root.cern/root/html602/TMVA__VariableTransformBase.html,2,['mask'],['mask']
Availability,"l Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTProofServ::Print(Option_t* option = """") const; virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); Int_tTProofServ::ReceiveFile(const char* file, Bool_t bin, Long64_t size); virtual voidTObject::RecursiveRemove(TObject* obj); static Int_tTProofServ::RegisterDataSets(TList* in, TList* out, TDataSetManager* dsm, TString& e); virtual voidReleaseWorker(const char* ord); virtual voidTApplication::RemoveIdleTimer(); voidTProofServ::Reset(const char* dir); voidTObject::ResetBit(UInt_t f); static voidTProofServ::ResolveKeywords(TString& fname, const char* path = 0); voidTProofServ::RestartComputeTime(); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTProofServ::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTProofServ::SendAsynMessage(const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXProofServ.html:10942,error,error,10942,root/html534/TXProofServ.html,https://root.cern,https://root.cern/root/html534/TXProofServ.html,1,['error'],['error']
Availability,"l Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTProofServ::Print(Option_t* option = """") const; virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); Int_tTProofServ::ReceiveFile(const char* file, Bool_t bin, Long64_t size); virtual voidTObject::RecursiveRemove(TObject* obj); static Int_tTProofServ::RegisterDataSets(TList* in, TList* out, TDataSetManager* dsm, TString& e); virtual voidTProofServ::ReleaseWorker(const char*); virtual voidTApplication::RemoveIdleTimer(); voidTProofServ::Reset(const char* dir); voidTObject::ResetBit(UInt_t f); static voidTProofServ::ResolveKeywords(TString& fname, const char* path = 0); voidTProofServ::RestartComputeTime(); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTProofServ::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTProofServ::SendAsynMessage(co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofServLite.html:11058,error,error,11058,root/html534/TProofServLite.html,https://root.cern,https://root.cern/root/html534/TProofServLite.html,1,['error'],['error']
Availability,"l Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTProofServ::Print(Option_t* option = """") const; virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); Int_tTProofServ::ReceiveFile(const char* file, Bool_t bin, Long64_t size); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReleaseWorker(const char* ord); virtual voidTApplication::RemoveIdleTimer(); voidTProofServ::Reset(const char* dir); voidTObject::ResetBit(UInt_t f); static voidTProofServ::ResolveKeywords(TString& fname, const char* path = 0); voidTProofServ::RestartComputeTime(); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTProofServ::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTProofServ::SendAsynMessage(const char* msg, Bool_t lf = kTRUE); virtual voidTProofServ::SendLogFile(Int_t status = 0, Int_t start = -1, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXProofServ.html:10625,error,error,10625,root/html530/TXProofServ.html,https://root.cern,https://root.cern/root/html530/TXProofServ.html,2,['error'],['error']
Availability,"l Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTProofServ::Print(Option_t* option = """") const; virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); Int_tTProofServ::ReceiveFile(const char* file, Bool_t bin, Long64_t size); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTProofServ::ReleaseWorker(const char*); virtual voidTApplication::RemoveIdleTimer(); voidTProofServ::Reset(const char* dir); voidTObject::ResetBit(UInt_t f); static voidTProofServ::ResolveKeywords(TString& fname, const char* path = 0); voidTProofServ::RestartComputeTime(); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTProofServ::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTProofServ::SendAsynMessage(const char* msg, Bool_t lf = kTRUE); virtual voidTProofServ::SendLogFile(Int_t status = 0, Int_t star",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofServLite.html:10741,error,error,10741,root/html530/TProofServLite.html,https://root.cern,https://root.cern/root/html530/TProofServLite.html,2,['error'],['error']
Availability,"l Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Protected Member Functions; double evaluatePartition (std::size_t firstEvent, std::size_t lastEvent, std::size_t stepSize) const override;  Calculate chi^2 in partition from firstEvent to lastEvent using given stepSize Throughout the calculation, we use Kahan's algorithm for summing to prevent loss of precision - this is a factor four more expensive than straight addition, but since evaluating the PDF is usually much more expensive than that, we tolerate the additional cost... ;  ;  Protected Member Functions inherited from RooAbsOptTestStatistic; virtual bool allowFunctionCache ();  ; void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true) override;  Driver function to propagate constant term optimizations in test statistic. ;  ; void initSlave (RooAbsReal &real, RooAbsData &indata, const RooArgSet &projDeps, const char *rangeName, const char *addCoefRangeName);  ; void optimizeCaching ();  This method changes the value caching logic for all nodes that depends on any of the observables as defined by the given dataset. ;  ; void optimizeConstantTerms (bool, bool=true);  Driver function to activate global constant term optimization. ;  ; void printCompactTreeHook (std::ostream &os, const char *i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChi2Var.html:50210,toler,tolerate,50210,doc/master/classRooChi2Var.html,https://root.cern,https://root.cern/doc/master/classRooChi2Var.html,1,['toler'],['tolerate']
Availability,"l ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; ROOT::Minuit2::ModularFunctionMinimizer&operator=(const ROOT::Minuit2::ModularFunctionMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~ModularFunctionMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>&, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1); inherited interface. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>&, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const std::vector<double>&, unsigned int, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>&, unsigned int, const std::vector<double>&, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameters&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1); extension. FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameters&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase&, const MnUserParameters&, const MnUserCovariance&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameters&, const MnUserCovariance&, const MnStra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__ModularFunctionMinimizer.html:3870,toler,toler,3870,root/html526/ROOT__Minuit2__ModularFunctionMinimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__ModularFunctionMinimizer.html,5,['toler'],['toler']
Availability,"l SQL statements in specified file ; Definition at line 447 of file TSQLFile.cxx. ◆ StartTransaction(). Bool_t TSQLFile::StartTransaction ; (; ). Start user transaction. ; This can be usesful, when big number of objects should be stored in data base and commitment required only if all operations were successful. In that case in the end of all operations method Commit() should be called. If operation on user-level is looks like not successful, method Rollback() will return database data and TSQLFile instance to previous state. In MySQL not all tables types support transaction mode of operation. See SetTablesType() method for details . ; Definition at line 565 of file TSQLFile.cxx. ◆ StopLogFile(). void TSQLFile::StopLogFile ; (; ). close logging file ; Definition at line 456 of file TSQLFile.cxx. ◆ StoreObjectInTables(). Long64_t TSQLFile::StoreObjectInTables ; (; Long64_t ; keyid, . const void * ; obj, . const TClass * ; cl . ). protected . Store object in database. Return stored object id or -1 if error. ; Definition at line 2511 of file TSQLFile.cxx. ◆ Streamer(). void TSQLFile::Streamer ; (; TBuffer & ; b). overridevirtual . Streamer for TSQLFile class. ; Stores only data for TDirectory. ; Reimplemented from TFile.; Definition at line 2668 of file TSQLFile.cxx. ◆ StreamerNVirtual(). void TSQLFile::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 254 of file TSQLFile.h. ◆ StreamKeysForDirectory(). Int_t TSQLFile::StreamKeysForDirectory ; (; TDirectory * ; dir, . Bool_t ; doupdate, . Long64_t ; specialkeyid = -1, . TKeySQL ** ; specialkey = nullptr . ). protected . read keys for specified directory (when update == kFALSE) or update value for modified keys when update == kTRUE Returns number of successfully read keys or -1 if error ; Definition at line 920 of file TSQLFile.cxx. ◆ SysClose(). Int_t TSQLFile::SysClose ; (; Int_t ; fd). inlinefinalprotectedvirtual . Interface to system close. All arguments like in POSIX close(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:97165,error,error,97165,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,1,['error'],['error']
Availability,"l TGeoVolume*CloneVolume() const; virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; Int_tCountNodes(Int_t nlevels = 1000, Int_t option = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual TGeoVolume*Divide(const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step, Int_t numed = 0, Option_t* option = """"); virtual voidDraw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawOnly(Option_t* option = """")MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); Int_tExport(const char* filename, const char* name = """", Option_t* option = """"); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); Bool_tFindMatrixOfDaughterVolume(TGeoVolume* vol) const; TGeoNode*FindNode(const char* name) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFindOverlaps() const; virtual Int_tGetByteCount() const; virtual Int_tGetCurrentNodeIndex() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TObject*GetField() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; TGeoPatternFinder*GetFinder() const; TGeoManager*GetGeoManager() const; virtual const char*GetIconName() const; I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoVolume.html:10450,error,error,10450,root/html528/TGeoVolume.html,https://root.cern,https://root.cern/root/html528/TGeoVolume.html,3,['error'],['error']
Availability,"l TKey*CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); static TStringTXMLSetup::DefaultXmlSetup(); virtual voidTFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTFile::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawMap(const char* = ""*"", Option_t* = """"); virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBuffer(char*&); virtual TKey*TDirectoryFile::FindKey(const char* keyname) const; virtual TKey*TDirectoryFile::FindKeyAny(const char* keyname) const; virtual TObject*TDirectory::FindObject(const char* name) const; virtual TObject*TDirectory::FindObject(const TObject* obj) const; virtual TObject*TDirectoryFile::FindObjectAny(const char* name) const; virtual TObject*TDirectoryFile::FindObjectAnyFile(const char* name) const; virtual voidFlush(); virtual TObject*TDirectoryFile::Get(const char* namecycle); TArchiveFile*TFile::GetArchive() const; static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(const char* name); static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(TFileOpenHandle* handle); Int_tTFile::GetBestBuffer() const; virtual Int_tTDirectoryFile::GetBufferSize() const; virtual Long64_tTFile::GetBytesRead() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLFile.html:5279,error,error,5279,root/html528/TXMLFile.html,https://root.cern,https://root.cern/root/html528/TXMLFile.html,2,['error'],['error']
Availability,"l TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; char*CompBuffer() const; Int_tCompLength() const; Int_tCompress(); virtual voidTObject::Copy(TObject& object) const; virtual voidTBufferFile::DecrementLevel(TVirtualStreamerInfo*); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTBuffer::DetachBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEnableSchemaEvolution(Bool_t enable = kTRUE); static voidEnableSchemaEvolutionForAll(Bool_t enable = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidTBuffer::Expand(Int_t newsize); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceWriteInfo(TVirtualStreamerInfo* info, Bool_t force); virtual voidTBufferFile::ForceWriteInfoClones(TClonesArray* a); voidForward(); virtual Int_tTBufferFile::GetBufferDisplacement() const; Int_tTBuffer::GetBufferVersion() const; TClass*GetClass() const; Int_tGetCompressionLevel() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); static Int_tTBufferFile::GetGlobalReadParam(); static Int_tTBufferFile::GetGlobalWriteParam(); virtual const char*TObject::GetIconName() const; virtual TVirtualStreamerInfo*TBufferFile::GetInfo(); virtual TProcessID*TBufferFile::GetLastProcessID(TRefTable* reftable) const; virtual Int_tTBufferFile",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMessage.html:2442,error,error,2442,root/html528/TMessage.html,https://root.cern,https://root.cern/root/html528/TMessage.html,1,['error'],['error']
Availability,"l TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; char*CompBuffer() const; Int_tCompLength() const; Int_tCompress(); virtual voidTObject::Copy(TObject& object) const; virtual voidTBufferFile::DecrementLevel(TVirtualStreamerInfo*); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTBuffer::DetachBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEnableSchemaEvolution(Bool_t enable = kTRUE); static voidEnableSchemaEvolutionForAll(Bool_t enable = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidTBuffer::Expand(Int_t newsize, Bool_t copy = kTRUE); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceWriteInfo(TVirtualStreamerInfo* info, Bool_t force); virtual voidTBufferFile::ForceWriteInfoClones(TClonesArray* a); voidForward(); virtual Int_tTBufferFile::GetBufferDisplacement() const; Int_tTBuffer::GetBufferVersion() const; TClass*GetClass() const; Int_tGetCompressionAlgorithm() const; Int_tGetCompressionLevel() const; Int_tGetCompressionSettings() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); static Int_tTBufferFile::GetGlobalReadParam(); static Int_tTBufferFile::GetGlobalWriteParam(); virtual const char*TObject::GetIconName() const; virtual TVirtualStreamerInfo*TBufferFile::GetInfo(); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMessage.html:2486,error,error,2486,root/html530/TMessage.html,https://root.cern,https://root.cern/root/html530/TMessage.html,5,['error'],['error']
Availability,"l TObject*TObject::Clone(const char* newname = """") const; virtual voidCmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCTransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Double_tDataNorm(); virtual voidDataRandom(TVectorD& x, TVectorD& y, TVectorD& z, TVectorD& s); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TVectorD&GetBa(); virtual voidGetDiagonalOfQ(TVectorD& dQ); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TVectorD&GetG(); virtual const char*TObject::GetIconName() const; virtual TVectorD&GetiSlowerBound(); virtual TVectorD&GetiSupperBound(); virtual TVectorD&GetiXlowerBound(); virtual TVectorD&GetiXupperBound(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TVectorD&GetSlowerBound(); virtual TVectorD&GetSupperBound(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQpDataBase.html:2410,error,error,2410,root/html528/TQpDataBase.html,https://root.cern,https://root.cern/root/html528/TQpDataBase.html,6,['error'],['error']
Availability,"l TObject*TObject::Clone(const char* newname = """") const; virtual voidCmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCTransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Double_tDataNorm(); virtual voidDataRandom(TVectorD& x, TVectorD& y, TVectorD& z, TVectorD& s); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TVectorD&TQpDataBase::GetBa(); virtual voidGetDiagonalOfQ(TVectorD& dQ); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TVectorD&TQpDataBase::GetG(); virtual const char*TObject::GetIconName() const; virtual TVectorD&TQpDataBase::GetiSlowerBound(); virtual TVectorD&TQpDataBase::GetiSupperBound(); virtual TVectorD&TQpDataBase::GetiXlowerBound(); virtual TVectorD&TQpDataBase::GetiXupperBound(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TVectorD&TQpDataBase::GetSlowerBound(); virtual TVectorD&TQpDataBase::GetSu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQpDataDens.html:2158,error,error,2158,root/html528/TQpDataDens.html,https://root.cern,https://root.cern/root/html528/TQpDataDens.html,12,['error'],['error']
Availability,"l Y’s are experimental quantities measured with the same instrument with precision Sigma. The next figure shows the graphic output of this simple example of a profile histogram.; {; // Create a canvas giving the coordinates and the size; TCanvas *c1 = new TCanvas(""c1"", ""Profile example"",200,10,700,500);. // Create a profile with the name, title, the number of bins,; // the low and high limit of the x-axis and the low and high; // limit of the y-axis.; // No option is given so the default is used.; hprof = new TProfile(""hprof"",; ""Profile of pz versus px"",100,-4,4,0,20);. // Fill the profile 25000 times with random numbers; Float_t px, py, pz;; for ( Int_t i=0; i<25000; i++) {; // Use the random number generator to get two numbers following; // a gaussian distribution with mean=0 and sigma=1; gRandom->Rannor(px,py);; pz = px*px + py*py;; hprof->Fill(px,pz,1);; }; hprof->Draw();; }. A profile histogram example. 3.17.2 Drawing a Profile without Error Bars; To draw a profile histogram and not show the error bars use the “HIST” option in the TProfile::Draw method. This will draw the outline of the TProfile.; 3.17.3 Create a Profile from a 2D Histogram; You can make a profile from a histogram using the methods TH2::ProfileX and TH2::ProfileY.; 3.17.4 Create a Histogram from a Profile; To create a regular histogram from a profile histogram, use the method TProfile::ProjectionX .This example instantiates a TH1D object by copying the TH1D piece of TProfile.; TH1D *sum = myProfile.ProjectionX();; You can do the same with a 2D profile using the method TProfile2D::ProjectionXY .; 3.17.5 Generating a Profile from a TTree; The 'prof' and 'profs' options in the TTree::Draw method generate a profile histogram ( TProfile ), given a two dimensional expression in the tree, or a TProfile2D given a three dimensional expression. See “Trees”. Note that you can specify 'prof' or 'profs' : 'prof' generates a TProfile with error on the mean, 'profs' generates a TProfile with error on the sprea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:130812,error,error,130812,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['error'],['error']
Availability,"l be added as new columns to the generated dataset. RooDataSet * generate(RooAbsPdf::GenSpec& ) const; Generate data according to a pre-configured specification created by; RooAbsPdf::prepareMultiGen(). If many identical generation requests; are needed, e.g. in toy MC studies, it is more efficient to use the prepareMultiGen()/generate(); combination than calling the standard generate() multiple times as; initialization overhead is only incurred once. RooDataSet * generate(const RooArgSet& whatVars, Double_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t autoBinned = kTRUE, const char* binnedTag = """", Bool_t expectedData = kFALSE, Bool_t extended = kFALSE) const; Generate a new dataset containing the specified variables with; events sampled from our distribution. Generate the specified; number of events or else try to use expectedEvents() if nEvents <= 0.; Any variables of this PDF that are not in whatVars will use their; current values and be treated as fixed parameters. Returns zero; in case of an error. The caller takes ownership of the returned; dataset. RooDataSet * generate(RooAbsGenContext& context, const RooArgSet& whatVars, const RooDataSet* prototype, Double_t nEvents, Bool_t verbose, Bool_t randProtoOrder, Bool_t resampleProto, Bool_t skipInit = kFALSE, Bool_t extended = kFALSE) const; Internal method. RooDataSet * generate(const RooArgSet& whatVars, const RooDataSet& prototype, Int_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t randProtoOrder = kFALSE, Bool_t resampleProto = kFALSE) const; Generate a new dataset with values of the whatVars variables; sampled from our distribution. Use the specified existing dataset; as a prototype: the new dataset will contain the same number of; events as the prototype (by default), and any prototype variables not in; whatVars will be copied into the new dataset for each generated; event and also used to set our PDF parameters. The user can specify a; number of events to generate that will override the default. The result i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsPdf.html:68464,error,error,68464,root/html534/RooAbsPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsPdf.html,3,['error'],['error']
Availability,"l be ignored. calling the function with a negative argument; (e.g., ""NoMsg( -1 )""); resets gErrorIgnoreLevel to its previous value. Int_t Complete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char* dest, const char* localName, const char* appendage = 0, const char* fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char* defaultPath) const; [private]. TString ExtendPath(const char* originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc, ostream& out); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const char* className) const; [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a class.; user must delete.; returns 0 in case of error. TClass * TryMakeClassFromClassName(const char* className) const; Same as above but does not print the error message. TClass * MakeClassFromVarName(const char* varName, TTabCom::EContext_t& context, int iter = 0); [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a variable.; user must delete.; returns 0 in case of error.; if user has operator.() or operator->() backwards, will modify: context, *fpLoc and fBuf.; context sensitive behavior. void SetPattern(TTabCom::EContext_t handle, const char* regexp); [private]. int ParseReverse(const char* var_str, int start). Returns the place in the string where to put the \0, starting the search; from ""start"". TTabCom(). TTabCom& operator=(const TTabCom& ). EContext_t DetermineContext() const. » Author: Christian Lacunza 27/04/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/rint:$Id$ » Last generated: 2015-03-14 16:50; This page has been automatically generated. For comments or ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTabCom.html:12090,error,error,12090,root/html534/TTabCom.html,https://root.cern,https://root.cern/root/html534/TTabCom.html,1,['error'],['error']
Availability,"l be ignored. calling the function with a negative argument; (e.g., ""NoMsg( -1 )""); resets gErrorIgnoreLevel to its previous value. Int_t Complete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char* dest, const char* localName, const char* appendage = 0, const char* fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char* defaultPath) const; [private]. TString ExtendPath(const char* originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc, ostream& out); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const char* className) const; [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a class.; user must delete.; returns 0 in case of error. TClass * TryMakeClassFromClassName(const char* className) const; Same as above but does not print the error message. TClass * MakeClassFromVarName(const char* varName, TTabCom::EContext_t& context, int iter = 0); [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a variable.; user must delete.; returns 0 in case of error.; if user has operator.() or operator->() backwards, will modify: context, *fpLoc and fBuf.; context sensitive behavior. void SetPattern(TTabCom::EContext_t handle, const char* regexp); [private]. int ParseReverse(const char* var_str, int start). Returns the place in the string where to put the \0, starting the search; from ""start"". TTabCom(). TTabCom& operator=(const TTabCom& ). EContext_t DetermineContext() const. » Author: Christian Lacunza 27/04/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/rint:$Id: TTabCom.h 39402 2011-05-26 12:56:31Z axel $ » Last generated: 2011-07-04 15:38; This page has be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTabCom.html:12078,error,error,12078,root/html530/TTabCom.html,https://root.cern,https://root.cern/root/html530/TTabCom.html,1,['error'],['error']
Availability,"l be ignored. calling the function with a negative argument; (e.g., ""NoMsg( -1 )""); resets gErrorIgnoreLevel to its previous value. Int_t Complete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char* dest, const char* localName, const char* appendage = 0, const char* fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char* defaultPath) const; [private]. TString ExtendPath(const char* originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc, ostream& out); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const char* className) const; [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a class.; user must delete.; returns 0 in case of error. TClass * TryMakeClassFromClassName(const char* className) const; Same as above but does not print the error message. TClass * MakeClassFromVarName(const char* varName, TTabCom::EContext_t& context, int iter = 0); [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a variable.; user must delete.; returns 0 in case of error.; if user has operator.() or operator->() backwards, will modify: context, *fpLoc and fBuf.; context sensitive behavior. void SetPattern(TTabCom::EContext_t handle, const char* regexp); [private]. int ParseReverse(const char* var_str, int start). Returns the place in the string where to put the \0, starting the search; from ""start"". TTabCom(). TTabCom& operator=(const TTabCom& ). EContext_t DetermineContext() const. » Author: Christian Lacunza 27/04/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/rint:$Id: TTabCom.h 39402 2011-05-26 12:56:31Z axel $ » Last generated: 2011-12-02 14:28; This page has be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTabCom.html:12078,error,error,12078,root/html532/TTabCom.html,https://root.cern,https://root.cern/root/html532/TTabCom.html,1,['error'],['error']
Availability,"l be returned. ; Definition at line 676 of file TThread.cxx. ◆ Class(). static TClass * TThread::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TThread::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TThread::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 180 of file TThread.h. ◆ CleanUp(). Int_t TThread::CleanUp ; (; ). static . Static method to cleanup the calling thread. ; Definition at line 708 of file TThread.cxx. ◆ CleanUpPop(). Int_t TThread::CleanUpPop ; (; Int_t ; exe = 0). static . Static method which pops thread cleanup method off stack. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 697 of file TThread.cxx. ◆ CleanUpPush(). Int_t TThread::CleanUpPush ; (; void * ; free, . void * ; arg = nullptr . ). static . Static method which pushes thread cleanup method on stack. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 685 of file TThread.cxx. ◆ Constructor(). void TThread::Constructor ; (; ). private . Common thread constructor. ; Definition at line 364 of file TThread.cxx. ◆ DeclFileName(). static const char * TThread::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 180 of file TThread.h. ◆ Delete() [1/2]. void TThread::Delete ; (; Option_t * ; option = """"). inlineoverridevirtual . Delete this object. ; Typically called as a command via the interpreter. Normally use ""delete"" operator when object has been allocated on the heap. ; Reimplemented from TObject.; Definition at line 127 of file TThread.h. ◆ Delete() [2/2]. Int_t TThread::Delete ; (; TThread *& ; th). static . Static method to delete the specified thread. ; Returns -1 in case the thread was running and has been killed. Returns 0 in case the thread has been Delete and Cleaned up. The th pointer is not valid anymore in that cas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTThread.html:21554,error,error,21554,doc/master/classTThread.html,https://root.cern,https://root.cern/doc/master/classTThread.html,1,['error'],['error']
Availability,"l bool Scan(unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0)scan function minimum for variable i.Definition Minimizer.cxx:195; ROOT::Math::Minimizer::MaxIterationsunsigned int MaxIterations() constmax iterationsDefinition Minimizer.h:297; ROOT::Math::Minimizer::SetDefaultOptionsvoid SetDefaultOptions()reset the default options (defined in MinimizerOptions)Definition Minimizer.h:361; ROOT::Math::Minimizer::fValidErrorbool fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit)Definition Minimizer.h:369; ROOT::Math::Minimizer::MinosStatusvirtual int MinosStatus() conststatus code of Minos (to be re-implemented by the minimizers supporting Minos)Definition Minimizer.h:313; ROOT::Math::Minimizer::SetVariableLimitsvirtual bool SetVariableLimits(unsigned int ivar, double lower, double upper)set the limits of an already existing variableDefinition Minimizer.h:199; ROOT::Math::Minimizer::SetTolerancevoid SetTolerance(double tol)set the toleranceDefinition Minimizer.h:337; ROOT::Math::Minimizer::MinimizerMinimizer(Minimizer const &)=delete; ROOT::Math::Minimizer::CovMatrixStatusvirtual int CovMatrixStatus() constreturn status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made po...Definition Minimizer.h:256; ROOT::Math::Minimizer::Minimizevirtual bool Minimize()=0method to perform the minimization; ROOT::Math::Minimizer::Statusint Status() conststatus code of minimizerDefinition Minimizer.h:310; ROOT::Math::Minimizer::SetVariableUpperLimitvirtual bool SetVariableUpperLimit(unsigned int ivar, double upper)set the upper-limit of an already existing variableDefinition Minimizer.cxx:78; ROOT::Math::Minimizer::SetCovariancevirtual bool SetCovariance(std::span< const double > cov, unsigned int nrow)set initial covariance matrixDefinition Minimizer.cxx:25; ROOT::Math::Minimizer::MinimizerMinimizer()Default constructor.Definition Minimizer.h:124; ROOT::Math::Minimizer:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Minimizer_8h_source.html:25448,toler,toleranceDefinition,25448,doc/master/Minimizer_8h_source.html,https://root.cern,https://root.cern/doc/master/Minimizer_8h_source.html,1,['toler'],['toleranceDefinition']
Availability,"l boolSetVariable(unsigned int ivar, const string& name, double val, double step); virtual boolSetVariableInitialRange(unsigned int, double, double); virtual boolSetVariableLimits(unsigned int ivar, double lower, double upper); virtual boolSetVariableLowerLimit(unsigned int ivar, double lower); virtual boolSetVariableStepSize(unsigned int ivar, double value); virtual boolSetVariableUpperLimit(unsigned int ivar, double upper); virtual boolSetVariableValue(unsigned int ivar, double value); virtual boolSetVariableValues(const double* x); intStatus() const; intStrategy() const; doubleTolerance() const; virtual intVariableIndex(const string& name) const; virtual stringVariableName(unsigned int ivar) const; virtual const double*X() const. private:. ROOT::Math::MinimizerMinimizer(const ROOT::Math::Minimizer&); ROOT::Math::Minimizer&operator=(const ROOT::Math::Minimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsfOptionsminimizer options; intfStatusstatus of minimizer; boolfValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Minimizer(). Default constructor. {}. virtual ~Minimizer(). Destructor (no operations). {}. Minimizer(const ROOT::Math::Minimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void Clear(); reset for consecutive minimizations - implement if needed. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set a function to minimize using gradient. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set a new free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set a new lower limit variable (override if minimizer supports them ). return SetLimitedVariable(unsigned int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__Minimizer.html:5078,error,errors,5078,root/html602/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html,2,['error'],['errors']
Availability,"l boolSetVariable(unsigned int ivar, const string& name, double val, double step); virtual boolSetVariableValue(unsigned int ivar, double val); virtual boolSetVariableValues(const double* x); intROOT::Math::Minimizer::Status() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; virtual intROOT::Math::Minimizer::VariableIndex(const string&) const; virtual stringROOT::Math::Minimizer::VariableName(unsigned int) const; virtual const double*X() const. private:. ROOT::Math::GSLSimAnMinimizerGSLSimAnMinimizer(const ROOT::Math::GSLSimAnMinimizer&); ROOT::Math::GSLSimAnMinimizer&operator=(const ROOT::Math::GSLSimAnMinimizer& rhs). Data Members; protected:. intROOT::Math::Minimizer::fDebugprint level; unsigned intROOT::Math::Minimizer::fMaxCallsmax number of function calls ; unsigned intROOT::Math::Minimizer::fMaxItermax number or iterations used to find the minimum; doubleROOT::Math::Minimizer::fPrecprecision; intROOT::Math::Minimizer::fStatusstatus of minimizer ; intROOT::Math::Minimizer::fStrategyminimizer strategy; doubleROOT::Math::Minimizer::fToltolerance (absolute); doubleROOT::Math::Minimizer::fUperror scale ; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. map<unsigned int,std::pair<double,double> >fBoundsmap specifying the bound using as key the parameter index; unsigned intfDimdimension of the function to be minimized ; doublefMinValminimum values ; vector<std::string>fNames; const ROOT::Math::IMultiGenFunction*fObjFunc; boolfOwnFuncflag to indicate if objective function is managed ; ROOT::Math::GSLSimAnnealingfSolver; vector<double>fSteps; vector<double>fValues; vector<ROOT::Math::EMinimVariableType>fVarTypesvector specifyng the type of variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLSimAnMinimizer(int type = 0). Default constructor. ~GSLSimAnMinimizer(). Destructor (no operat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__GSLSimAnMinimizer.html:4381,error,errors,4381,root/html526/ROOT__Math__GSLSimAnMinimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__GSLSimAnMinimizer.html,4,['error'],['errors']
Availability,"l clone the histogram and allow to change; and delete the original one without affecting the clone.; Histograms' plotting options; Most options can be concatenated with or without spaces or commas, for example:. h->Draw(""E1 SAME"");. The options are not case sensitive:. h->Draw(""e1 same"");. The default drawing option can be set with TH1::SetOption and retrieve; using TH1::GetOption:. root [0] h->Draw(); // Draw ""h"" using the standard histogram representation.; root [1] h->Draw(""E""); // Draw ""h"" using error bars; root [3] h->SetOption(""E""); // Change the default drawing option for ""h""; root [4] h->Draw(); // Draw ""h"" using error bars; root [5] h->GetOption(); // Retrieve the default drawing option for ""h""; (const Option_t* 0xa3ff948)""E"". Options supported for 1D and 2D histograms. ""AXIS""; Draw only axis. ""AXIG""; Draw only grid (if the grid is requested). ""HIST""; When an histogram has errors it is visualized by default with error bars. To; visualize it without errors use the option ""HIST"" together with the required; option (eg ""hist same c""). The ""HIST"" option can also be used to plot only the; histogram and not the associated function(s). ""FUNC""; When an histogram has a fitted function, this option allows to draw the fit; result only. ""SAME""; Superimpose on previous picture in the same pad. ""LEGO""; Draw a lego plot with hidden line removal. ""LEGO1""; Draw a lego plot with hidden surface removal. ""LEGO2""; Draw a lego plot using colors to show the cell contents When the option ""0"" is; used with any LEGO option, the empty bins are not drawn. ""TEXT""; Draw bin contents as text (format set via gStyle->SetPaintTextFormat). ""TEXTnn""; Draw bin contents as text at angle nn (0 < nn < 90). ""X+""; The X-axis is drawn on the top side of the plot. ""Y+""; The Y-axis is drawn on the right side of the plot. Options supported for 1D histograms. "" ""; Default. ""AH""; Draw histogram without axis. ""A"" can be combined with any drawing option. For; instance, ""AC"" draws the histogram as a smooth Cu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THistPainter.html:4980,error,errors,4980,root/html528/THistPainter.html,https://root.cern,https://root.cern/root/html528/THistPainter.html,3,['error'],['errors']
Availability,"l data structure see convention for numbering bins in TH1::Get...Definition TH1.h:526; TH1S::operator=TH1S & operator=(const TH1S &h1)Operator =.Definition TH1.cxx:9773; TH1S::Copyvoid Copy(TObject &hnew) const overrideCopy this to newth1.Definition TH1.cxx:9745; TH1S::TH1STH1S()Constructor.Definition TH1.cxx:9659; TH1S::SetBinsLengthvoid SetBinsLength(Int_t n=-1) overrideSet total number of bins including under/overflow Reallocate bin contents array.Definition TH1.cxx:9763; TH1S::~TH1S~TH1S() overrideDestructor.Definition TH1.cxx:9707; TH1S::AddBinContentvoid AddBinContent(Int_t bin) overrideIncrement bin content by 1.Definition TH1.cxx:9724; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::~TH1~TH1() overrideHistogram default destructor.Definition TH1.cxx:643; TH1::SetLabelFontvirtual void SetLabelFont(Style_t font=62, Option_t *axis=""X"")Set font number used to draw axis labels.Definition Haxis.cxx:249; TH1::SetErrorvirtual void SetError(const Double_t *error)Replace bin errors by values in array error.Definition TH1.cxx:8951; TH1::SetDirectoryvirtual void SetDirectory(TDirectory *dir)By default, when a histogram is created, it is added to the list of histogram objects in the current ...Definition TH1.cxx:8937; TH1::FitPanelvirtual void FitPanel()Display a panel with all histogram fit options.Definition TH1.cxx:4284; TH1::fBufferDouble_t * fBuffer[fBufferSize] entry bufferDefinition TH1.h:108; TH1::AutoP2FindLimitsvirtual Int_t AutoP2FindLimits(Double_t min, Double_t max)Buffer-based estimate of the histogram range using the power of 2 algorithm.Definition TH1.cxx:1343; TH1::SetStatOverflowsvoid SetStatOverflows(EStatOverflows statOverflows)See GetStatOverflows for more information.Definition TH1.h:417; TH1::GetEffectiveEntriesvirtual Double_t GetEffectiveEntries() constNumber of effective entries of the histogram.Definition TH1.cxx:4448; TH1::GetObjectInfochar * GetObjectInfo(Int_t px, Int_t py) const overrideRedefines TObject::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8h_source.html:51125,error,error,51125,doc/master/TH1_8h_source.html,https://root.cern,https://root.cern/doc/master/TH1_8h_source.html,3,['error'],"['error', 'errors']"
Availability,"l datasets that match given uri. void ShowDataSets(const char* uri = """", const char* = 0); Shows datasets in locations that match the uri; By default shows the user's datasets and global ones. TFileCollection * GetDataSet(const char* uri, const char* = 0); Get a list of TFileInfo objects describing the files of the specified; dataset. Int_t RemoveDataSet(const char* uri, const char* = 0); Remove the specified dataset from the PROOF cluster.; Files are not deleted. Int_t VerifyDataSet(const char* uri, const char* = 0); Verify if all files in the specified dataset are available.; Print a list and return the number of missing files. void ClearDataSetCache(const char* dataset = 0); Clear the content of the dataset cache, if any (matching 'dataset', if defined). void ShowDataSetCache(const char* dataset = 0); Display the content of the dataset cache, if any (matching 'dataset', if defined). void SendInputDataFile(); Make sure that the input data objects are available to the workers in a; dedicated file in the cache; the objects are taken from the dedicated list; and / or the specified file.; If the fInputData is empty the specified file is sent over.; If there is no specified file, a file named ""inputdata.root"" is created locally; with the content of fInputData and sent over to the master.; If both fInputData and the specified file are not empty, a copy of the file; is made locally and augmented with the content of fInputData. Int_t Remove(const char* ref, Bool_t all); Handle remove request. TTree * GetTreeHeader(TDSet* tdset); Creates a tree header (a tree with nonexisting files) object for; the DataSet. TProofLite(const TProofLite& ). void operator=(const TProofLite& ). TProofLite(); { }. Long64_t Process(TDSet* dset, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0); { return TProof::Process(fc, sel, o, nent, fst); }. Long64_t Process(const char* dsname, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0, TObject* enl = 0); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLite.html:31476,avail,available,31476,root/html528/TProofLite.html,https://root.cern,https://root.cern/root/html528/TProofLite.html,1,['avail'],['available']
Availability,"l datasets that match given uri. void ShowDataSets(const char* uri = """", const char* = 0); Shows datasets in locations that match the uri; By default shows the user's datasets and global ones. TFileCollection * GetDataSet(const char* uri, const char* = 0); Get a list of TFileInfo objects describing the files of the specified; dataset. Int_t RemoveDataSet(const char* uri, const char* = 0); Remove the specified dataset from the PROOF cluster.; Files are not deleted. Int_t VerifyDataSet(const char* uri, const char* = 0); Verify if all files in the specified dataset are available.; Print a list and return the number of missing files. void ClearDataSetCache(const char* dataset = 0); Clear the content of the dataset cache, if any (matching 'dataset', if defined). void ShowDataSetCache(const char* dataset = 0); Display the content of the dataset cache, if any (matching 'dataset', if defined). void SendInputDataFile(); Make sure that the input data objects are available to the workers in a; dedicated file in the cache; the objects are taken from the dedicated list; and / or the specified file.; If the fInputData is empty the specified file is sent over.; If there is no specified file, a file named ""inputdata.root"" is created locally; with the content of fInputData and sent over to the master.; If both fInputData and the specified file are not empty, a copy of the file; is made locally and augmented with the content of fInputData. Int_t Remove(const char* ref, Bool_t all); Handle remove request. TTree * GetTreeHeader(TDSet* tdset); Creates a tree header (a tree with nonexisting files) object for; the DataSet. void FindUniqueSlaves(); Add to the fUniqueSlave list the active slaves that have a unique; (user) file system image. This information is used to transfer files; only once to nodes that share a file system (an image). Submasters; which are not in fUniqueSlaves are put in the fNonUniqueMasters; list. That list is used to trigger the transferring of files to; the submaste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofLite.html:31939,avail,available,31939,root/html530/TProofLite.html,https://root.cern,https://root.cern/root/html530/TProofLite.html,2,['avail'],['available']
Availability,"l difference formulas; 1083/// \f[; 1084/// D(h) = \frac{f(x+h) - f(x-h)}{2h}; 1085/// \f]; 1086/// the final estimate; 1087/// \f[; 1088/// D = \frac{4D(h/2) - D(h)}{3}; 1089/// \f]; 1090/// ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; 1091///; 1092/// if the argument params is null, the current function parameters are used,; 1093/// otherwise the parameters in params are used.; 1094///; 1095/// the argument eps may be specified to control the step size (precision).; 1096/// the step size is taken as eps*(xmax-xmin).; 1097/// the default value (0.001) should be good enough for the vast majority; 1098/// of functions. Give a smaller value if your function has many changes; 1099/// of the second derivative in the function range.; 1100///; 1101/// Getting the error via TF1::DerivativeError:; 1102/// (total error = roundoff error + interpolation error); 1103/// the estimate of the roundoff error is taken as follows:; 1104/// \f[; 1105/// err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; 1106/// \f]; 1107/// where k is the double precision, ai are coefficients used in; 1108/// central difference formulas; 1109/// interpolation error is decreased by making the step size h smaller.; 1110///; 1111/// \author Anna Kreshuk; 1112 ; 1113Double_t TF1::Derivative(Double_t x, Double_t *params, Double_t eps) const; 1114{; 1115 if (GetNdim() > 1) {; 1116 Warning(""Derivative"", ""Function dimension is larger than one"");; 1117 }; 1118 ; 1119 ROOT::Math::RichardsonDerivator rd;; 1120 double xmin, xmax;; 1121 GetRange(xmin, xmax);; 1122 // this is not optimal (should be used the average x instead of the range); 1123 double h = eps * std::abs(xmax - xmin);; 1124 if (h <= 0) h = 0.001;; 1125 double der = 0;; 1126 if (params) {; 1127 ROOT::Math::WrappedTF1 wtf(*(const_cast<TF1 *>(this)));; 1128 wtf.SetParameters(params);; 1129 der = rd.Derivative1(wtf, x, h);; 1130 } else {; 1131 // no need to set parameters used a non-parametric wrapper to avoid alloc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:39164,error,error,39164,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,6,['error'],['error']
Availability,"l evaluation and root solvers. The mathematical functions are implemented as a set of free functions in the namespace ROOT::Math. The naming used for the special functions is the same proposed for the C++ standard (see C++ standard extension proposal document).The MathMore library is implemented wrapping in C++ the GNU Scientific Library ( ). Building MathMore requires a version of GSL larger or equal 1.8. The source code of MathMore is distributed under the GNU General Public License.; MathMore (and its ROOT Cling dictionary) can be built within ROOT whenever a GSL library is found in the system. The GSL library and header file location can be specified in the ROOT configure script, by doing:; ./configure --with-gsl-incdir=... --with-gsl-libdir=...; MathMore can be built also a stand-alone library (without requiring ROOT) downloding the tar file from the Web at this link. In this case the library will not contain the dictionary information and therefore cannot be used interactively; More information on the classes and functions present in MathMore is available in the online reference documentation.; 13.3 TMath; In the namespace, TMath, a collection of free functions is provided for the following functionality:. numerical constants (like pi, e, h, etc.);; trigonometric and elementary mathematical functions;; functions to work with arrays and collections (e.g. functions to find min and max of arrays);; statistic functions to work on array of data (e.g. mean and RMS of arrays);; algorithms for binary search/hashing sorting;; special mathematical functions like Bessel, Erf, Gamma, etc.;; statistical functions, like common probability and cumulative (quantile) distributions; geometrical functions. For more details, see the reference documentation of TMath at <http://root.cern.ch/root/htmldoc/TMath.html>.; 13.3.1 Numerical Constants; TMath offers a wide range of constants in the form of inline functions. Notice that they are not defined as C/C++ preprocessor macros. This ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:660615,avail,available,660615,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avail'],['available']
Availability,"l file access mode; param title: title of the file (shown by ROOT browser); param compress: compression level and algorithm; param netopt: TCP window size in bytes (unused); param parallelopen: open asynchronously. ~TNetXNGFile(); Destructor. void Init(Bool_t create); Initialize the file. Makes sure that the file is really open before; calling TFile::Init. It may block. Long64_t GetSize() const; Get the file size. Returns -1 in the case that the file could not be; stat'ed. Bool_t IsOpen() const; Check if the file is open. void SetAsyncOpenStatus(TFile::EAsyncOpenStatus status); Set the status of an asynchronous file open. void Close(const Option_t* option = """"); Close the file. param option: if == ""R"", all TProcessIDs referenced by this file are; deleted (is this valid in xrootd context?). Int_t ReOpen(Option_t* modestr); Reopen the file with the new access mode. param mode: the new access mode; returns: 0 in case the mode was successfully modified, 1 in case; the mode did not change (was already as requested or wrong; input arguments) and -1 in case of failure, in which case; the file cannot be used anymore. Bool_t ReadBuffer(char* buffer, Int_t length); Read a data chunk of the given size. param buffer: a pointer to a buffer big enough to hold the data; param length: number of bytes to be read; returns: kTRUE in case of failure. Bool_t ReadBuffer(char* buffer, Long64_t position, Int_t length); Read a data chunk of the given size, starting from the given offset. param buffer: a pointer to a buffer big enough to hold the data; param position: offset from the beginning of the file; param length: number of bytes to be read; returns: kTRUE in case of failure. Bool_t ReadBuffers(char* buffer, Long64_t* position, Int_t* length, Int_t nbuffs); Read scattered data chunks in one operation. param buffer: a pointer to a buffer big enough to hold all of the; requested data; param position: position[i] is the seek position of chunk i of len; length[i]; param length: length[i] is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TNetXNGFile.html:25521,failure,failure,25521,root/html602/TNetXNGFile.html,https://root.cern,https://root.cern/root/html602/TNetXNGFile.html,2,['failure'],['failure']
Availability,"l functions, Mathematical functions used in statistics such as probability density functions, cumulative distributions functions and their inverse (quantiles).; Numerical algorithms:; Numerical Integration; Numerical Monte Carlo Integration Classes; Numerical Differentiation; One-dimensional Root-Finding; One-dimensional Minimization; Multi-dimensional Minimization. Interpolation Classes; Function Approximation (ChebyshevApprox), based on Chebyshev polynomials; Interface classes for Random number generation. The mathematical functions are implemented as a set of free functions in the namespace ROOT::Math. The naming used for the special functions is the same proposed for the C++ standard (see C++ standard extension proposal document). The MathMore library is implemented wrapping in C++ the GNU Scientific Library (GSL). To build MathMore you need to have first GSL installed somewhere in your system. A version of GSL larger or equal 1.8 is required. A tar file of GSL can be downloaded from the GSL Web site, or (for version 1.8) from here. Windows binaries, compiled using Visual Studio 7.1 can be downloaded from this location.; MathMore (and its ROOT CINT dictionary) can be built within ROOT whenever a GSL library is found in the system. Optionally the GSL library and header file location can be specified in the ROOT configure script with configure –with-gsl-incdir=... –with-gsl-libdir=... MathMore links with the GSL static libraries. On some platform (like Linux x86-64) GSL needs to be compiled with the option –with-pic. The source code of MathMore is distributed under the GNU General Public License . Modules;  Numerical Algorithms;  Numerical Algorithm classes from the MathCore and MathMore libraries. ;  ;  Statistical functions;  Probability density functions, cumulative distribution functions and their inverses (quantiles) for various statistical distributions (continuous and discrete). ;  ;  Special functions;  Special mathematical functions. ;  ;  QuasiRandom num",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__MathMore.html:1521,down,downloaded,1521,doc/master/group__MathMore.html,https://root.cern,https://root.cern/doc/master/group__MathMore.html,2,['down'],['downloaded']
Availability,"l horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. . "">"" An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""|>"" A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn through the end points of the vertical error bars. . ""4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""5"" Error rectangles are drawn like option ""2"". In addition the contour line around the boxes is drawn. This can be useful when boxes' fill colors are very light or in gray scale mode. . gStyle->SetErrorX(dx) controls the size of the error along x. dx = 0 removes the error along x.; gStyle->SetEndErrorSize(np) controls the size of the lines at the end of the error bars (when option 1 is used). By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are defined along X and Y and are symmetric: The left and right errors are the same along X an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:9247,error,error,9247,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,1,['error'],['error']
Availability,"l implementation detail.; 6578 TList *tlb = ((TClass*)this)->GetListOfBases();; 6579 if (tlb && !GetCollectionProxy() && !TClassEdit::IsStdPair(GetName())) {; 6580 // Loop over bases if not a proxied collection or a pair; 6581 ; 6582 TIter nextBase(tlb);; 6583 ; 6584 TBaseClass *tbc=nullptr;; 6585 while((tbc=(TBaseClass*)nextBase())) {; 6586 name = tbc->GetName();; 6587 Bool_t isSTL = TClassEdit::IsSTLCont(name);; 6588 if (isSTL); 6589 name = TClassEdit::ShortType( name, TClassEdit::kDropStlDefault );; 6590 il = name.Length();; 6591 for (int i=0; i<il; i++) id = id*3+name[i];; 6592 if (code > kNoBaseCheckSum && !isSTL) {; 6593 if (tbc->GetClassPointer() == nullptr) {; 6594 Error(""GetCheckSum"",""Calculating the checksum for (%s) requires the base class (%s) meta information to be available!"",; 6595 GetName(),tbc->GetName());; 6596 isvalid = kFALSE;; 6597 return 0;; 6598 } else; 6599 id = id*3 + tbc->GetClassPointer()->GetCheckSum();; 6600 }; 6601 }/*EndBaseLoop*/; 6602 }; 6603 TList *tlm = ((TClass*)this)->GetListOfDataMembers();; 6604 if (tlm) { // Loop over members; 6605 TIter nextMemb(tlm);; 6606 TDataMember *tdm=nullptr;; 6607 Long_t prop = 0;; 6608 while((tdm=(TDataMember*)nextMemb())) {; 6609 if (!tdm->IsPersistent()) continue;; 6610 // combine properties; 6611 prop = (tdm->Property());; 6612 TDataType* tdt = tdm->GetDataType();; 6613 if (tdt) prop |= tdt->Property();; 6614 ; 6615 if ( prop&kIsStatic) continue;; 6616 name = tdm->GetName(); il = name.Length();; 6617 if ( (code > kNoEnum) && code != kReflex && code != kReflexNoComment && prop&kIsEnum); 6618 id = id*3 + 1;; 6619 ; 6620 int i;; 6621 for (i=0; i<il; i++) id = id*3+name[i];; 6622 ; 6623 if (code > kWithTypeDef || code == kReflexNoComment) {; 6624 type = tdm->GetTrueTypeName();; 6625 // GetTrueTypeName uses GetFullyQualifiedName which already drops; 6626 // the default template parameter, so we no longer need to do this.; 6627 //if (TClassEdit::IsSTLCont(type)); 6628 // type = TClassEdit::ShortType( typ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:253499,avail,available,253499,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['avail'],['available']
Availability,"l implementation detail.; 6645 TList *tlb = ((TClass*)this)->GetListOfBases();; 6646 if (tlb && !GetCollectionProxy() && !TClassEdit::IsStdPair(GetName())) {; 6647 // Loop over bases if not a proxied collection or a pair; 6648 ; 6649 TIter nextBase(tlb);; 6650 ; 6651 TBaseClass *tbc=nullptr;; 6652 while((tbc=(TBaseClass*)nextBase())) {; 6653 name = tbc->GetName();; 6654 Bool_t isSTL = TClassEdit::IsSTLCont(name);; 6655 if (isSTL); 6656 name = TClassEdit::ShortType( name, TClassEdit::kDropStlDefault );; 6657 il = name.Length();; 6658 for (int i=0; i<il; i++) id = id*3+name[i];; 6659 if (code > kNoBaseCheckSum && !isSTL) {; 6660 if (tbc->GetClassPointer() == nullptr) {; 6661 Error(""GetCheckSum"",""Calculating the checksum for (%s) requires the base class (%s) meta information to be available!"",; 6662 GetName(),tbc->GetName());; 6663 isvalid = kFALSE;; 6664 return 0;; 6665 } else; 6666 id = id*3 + tbc->GetClassPointer()->GetCheckSum();; 6667 }; 6668 }/*EndBaseLoop*/; 6669 }; 6670 TList *tlm = ((TClass*)this)->GetListOfDataMembers();; 6671 if (tlm) { // Loop over members; 6672 TIter nextMemb(tlm);; 6673 TDataMember *tdm=nullptr;; 6674 Long_t prop = 0;; 6675 while((tdm=(TDataMember*)nextMemb())) {; 6676 if (!tdm->IsPersistent()) continue;; 6677 // combine properties; 6678 prop = (tdm->Property());; 6679 TDataType* tdt = tdm->GetDataType();; 6680 if (tdt) prop |= tdt->Property();; 6681 ; 6682 if ( prop&kIsStatic) continue;; 6683 name = tdm->GetName(); il = name.Length();; 6684 if ( (code > kNoEnum) && code != kReflex && code != kReflexNoComment && prop&kIsEnum); 6685 id = id*3 + 1;; 6686 ; 6687 int i;; 6688 for (i=0; i<il; i++) id = id*3+name[i];; 6689 ; 6690 if (code > kWithTypeDef || code == kReflexNoComment) {; 6691 type = tdm->GetTrueTypeName();; 6692 // GetTrueTypeName uses GetFullyQualifiedName which already drops; 6693 // the default template parameter, so we no longer need to do this.; 6694 //if (TClassEdit::IsSTLCont(type)); 6695 // type = TClassEdit::ShortType( typ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:256250,avail,available,256250,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['avail'],['available']
Availability,"l in /usr/lib sometimes take priority); [#13041] - TVirtualFitter::GetFitter() unexpectedly returns NULL on macOS 12 and 13 with Xcode 14; [#13019] - LLVM assertion failure in HandleUnionActiveMemberChange; [#12993] - std::source_location not working in the interpreter; [#12959] - [ntuple] Distinguish between connecting a page sink and a page source in RColumn; [#12783] - [IO] Writing HistFactory model file twice gives strange results since ROOT 6.26.02; [#12770] - tmva/sofie_parsers does not build with latest Protobuf (22.x); [#12744] - wrong Python version found during build; [#12718] - A crash when trying to initialise a vector from a >1D numpy array in PyROOT; [#12685] - TEnum::GetEnum does NOT process typedefs; [#12644] - Can’t find cxxabi.h and build module ‘ROOT_Foundation_Stage1_NoRTTI’ when building from source on Macos; [#12631] - Unable to build master with external XROOTD; [#12621] - [I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; [#12592] - [doc] TProfile bin error documentation is not correct; [#12591] - Allow partial enablement of modules; [#12527] - MacOS build fails if configured without cocoa; [#12492] - The problem with building ROOT v6-26-10 in debug mode on ubuntu 20.04; [#12230] - Wrong conversion from Numpy Array to std.vector when using the wrong type; [#12091] - TSpline SaveAs not using equidistant and loss of precision; [#11924] - PyROOT: wrong overload resolution for C++ functions from python; [#11901] - Binary distribution for Ubutu 22.04 is broken (on WSL2); [#11750] - FindXROOTD adds libraries to link against irrespective of xrootd version used; [#11746] - TH2::Fill(const char namex, const char namey, Double_t w) doesn’t update fTsumwxy; [#11743] - CMake >= 3.24 fails to build LZMA: WARNING: ‘aclocal-1.15’ is missing on your system.; [#11673] - [ntuple] Consider making REntry::AddValue() publicly accessible; [#11667] - [cling] GetClassSharedLibs fails to find several classes; [#11653] - TFile plugin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:33856,error,error,33856,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['error'],['error']
Availability,"l index (needed by MINUIT). Double_t getPdfParamErr(Int_t index); Access PDF parameter error by ordinal index (needed by MINUIT). Bool_t setPdfParamVal(Int_t index, Double_t value, Bool_t verbose = kFALSE); Modify PDF parameter value by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t value); Modify PDF parameter error by ordinal index (needed by MINUIT). void clearPdfParamAsymErr(Int_t index); Modify PDF parameter error by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); Modify PDF parameter error by ordinal index (needed by MINUIT). void profileStart(); Start profiling timer. void profileStop(); Stop profiling timer and report results of last session. void backProp(); Transfer MINUIT fit results back into RooFit objects. void updateFloatVec(). void applyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. RooMinuit(RooAbsReal& function). void setEvalErrorWall(Bool_t flag); { _doEvalErrorWall = flag ; }. void setPrintEvalErrors(Int_t numEvalErrors); { _printEvalErrors = numEvalErrors ; }. void setVerbose(Bool_t flag = kTRUE); { _verbose = flag ; }. void setProfile(Bool_t flag = kTRUE); { _profile = flag ; }. void setMaxEvalMultiplier(Int_t n); { _maxEvalMult = n ; }. Int_t evalCounter() const; { return _evalCounter ; }. void zeroEvalCount(); { _evalCounter = 0 ; }. Int_t getNPar() const; { return _nPar ; }. std::ofstream* logfile() const; { return _logfile ; }. Double_t& maxFCN(); { return _maxFCN ; }. void saveStatus(const char* label, Int_t status); { _statusHistory.push_back(std::pair<std::string,int>(label,status)) ; }. » Last changed: Tue Jun 2 15:32:08 2015 » Last generated: 2015-06-02 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general pleas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooMinuit.html:14680,error,errors,14680,root/html604/RooMinuit.html,https://root.cern,https://root.cern/root/html604/RooMinuit.html,1,['error'],['errors']
Availability,"l index (needed by MINUIT). Double_t getPdfParamErr(Int_t index); Access PDF parameter error by ordinal index (needed by MINUIT). Bool_t setPdfParamVal(Int_t index, Double_t value, Bool_t verbose = kFALSE); Modify PDF parameter value by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t value); Modify PDF parameter error by ordinal index (needed by MINUIT). void clearPdfParamAsymErr(Int_t index); Modify PDF parameter error by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); Modify PDF parameter error by ordinal index (needed by MINUIT). void profileStart(); Start profiling timer. void profileStop(); Stop profiling timer and report results of last session. void backProp(); Transfer MINUIT fit results back into RooFit objects. void updateFloatVec(). void applyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. RooMinuit(RooAbsReal& function). void setEvalErrorWall(Bool_t flag); { _doEvalErrorWall = flag ; }. void setPrintEvalErrors(Int_t numEvalErrors); { _printEvalErrors = numEvalErrors ; }. void setVerbose(Bool_t flag = kTRUE); { _verbose = flag ; }. void setProfile(Bool_t flag = kTRUE); { _profile = flag ; }. void setMaxEvalMultiplier(Int_t n); { _maxEvalMult = n ; }. Int_t evalCounter() const; { return _evalCounter ; }. void zeroEvalCount(); { _evalCounter = 0 ; }. Int_t getNPar() const; { return _nPar ; }. std::ofstream* logfile() const; { return _logfile ; }. Double_t& maxFCN(); { return _maxFCN ; }. void saveStatus(const char* label, Int_t status); { _statusHistory.push_back(std::pair<std::string,int>(label,status)) ; }. » Last changed: Tue Jun 30 14:34:01 2015 » Last generated: 2015-06-30 14:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general plea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMinuit.html:14680,error,errors,14680,root/html602/RooMinuit.html,https://root.cern,https://root.cern/root/html602/RooMinuit.html,1,['error'],['errors']
Availability,"l index (needed by MINUIT). Double_t getPdfParamErr(Int_t index); Access PDF parameter error by ordinal index (needed by MINUIT). Bool_t setPdfParamVal(Int_t index, Double_t value, Bool_t verbose = kFALSE); Modify PDF parameter value by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t value); Modify PDF parameter error by ordinal index (needed by MINUIT). void clearPdfParamAsymErr(Int_t index); Modify PDF parameter error by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); Modify PDF parameter error by ordinal index (needed by MINUIT). void profileStart(); Start profiling timer. void profileStop(); Stop profiling timer and report results of last session. void backProp(); Transfer MINUIT fit results back into RooFit objects. void updateFloatVec(). void applyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. RooMinuit(RooAbsReal& function). void setEvalErrorWall(Bool_t flag); { _doEvalErrorWall = flag ; }. void setPrintEvalErrors(Int_t numEvalErrors); { _printEvalErrors = numEvalErrors ; }. void setVerbose(Bool_t flag = kTRUE); { _verbose = flag ; }. void setProfile(Bool_t flag = kTRUE); { _profile = flag ; }. void setMaxEvalMultiplier(Int_t n); { _maxEvalMult = n ; }. Int_t evalCounter() const; { return _evalCounter ; }. void zeroEvalCount(); { _evalCounter = 0 ; }. Int_t getNPar() const; { return _nPar ; }. std::ofstream* logfile() const; { return _logfile ; }. Double_t& maxFCN(); { return _maxFCN ; }. void saveStatus(const char* label, Int_t status); { _statusHistory.push_back(std::pair<std::string,int>(label,status)) ; }. » Last changed: Tue Mar 10 17:17:50 2015 » Last generated: 2015-03-10 17:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general plea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMinuit.html:14053,error,errors,14053,root/html534/RooMinuit.html,https://root.cern,https://root.cern/root/html534/RooMinuit.html,1,['error'],['errors']
Availability,"l intIterate(); virtual intIterations() const; virtual const char*Name() const; ROOT::Math::IRootFinderMethod&operator=(const ROOT::Math::IRootFinderMethod&); virtual doubleRoot() const; virtual intSetFunction(const ROOT::Math::IGradFunction&, double); virtual intSetFunction(const ROOT::Math::IGenFunction&, double, double); virtual intSolve(int maxIter = 100, double absTol = 1E-3, double relTol = 1E-6). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IRootFinderMethod(); Default Destructor. . {}. int SetFunction(const ROOT::Math::IGradFunction& , double ); Common functionality; Sets the function for algorithms using derivatives. . int SetFunction(const ROOT::Math::IGenFunction& , double , double ); Sets the function for the rest of the algorithms.; The parameters set the interval where the root has to be calculated. . double Root() const; Returns the previously calculated root. . int Solve(int maxIter = 100, double absTol = 1E-3, double relTol = 1E-6); Methods to be Implemented in the derived classes; Stimates the root for the function.; \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. const char* Name() const; Return name of root finder algorithm . int Iterate(); This method is not implemented. They are here to accomplish with the GSLRootFinder; and GSLRootFinderDeriv classes and will return an error if it's not one of them. . int Iterations() const; This method is not implemented. They are here to accomplish with the GSLRootFinder; and GSLRootFinderDeriv classes and will return an error if it's not one of them. . » Last changed: root/mathcore:$Id: IRootFinderMethod.h 24477 2008-06-23 12:58:47Z moneta $ » Last generated: 2009-12-07 13:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__IRootFinderMethod.html:1787,error,error,1787,root/html526/ROOT__Math__IRootFinderMethod.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__IRootFinderMethod.html,4,['error'],['error']
Availability,"l interval (done by default if mode is NOT set); - e0 : plot (in Bayesian case) efficiency and interval for bins where total=0; (default is to skip them). Note:; Unfortunately there is no straightforward approach for determining a confidence; interval for a given confidence level. The actual coverage probability of the; confidence interval oscillates significantly according to the total number of; events and the true efficiency. In order to decrease the impact of this; oscillation on the actual coverage probability a couple of approximations and; methodes has been developped. For a detailed discussion, please have a look at; this statistical paper:. http://www-stat.wharton.upenn.edu/~tcai/paper/Binomial-StatSci.pdf. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute Range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t i) const; Get high error on X. Double_t GetErrorXlow(Int_t i) const; Get low error on X. Double_t GetErrorYhigh(Int_t i) const; Get high error on Y. Double_t GetErrorYlow(Int_t i) const; Get low error on Y. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphAsymmErrors.html:21016,error,errors,21016,root/html528/TGraphAsymmErrors.html,https://root.cern,https://root.cern/root/html528/TGraphAsymmErrors.html,2,['error'],['errors']
Availability,"l members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Private Attributes |; List of all members ; TMultiDimFit Class ReferenceHistogram Library. ; Multidimensional Fits in ROOT. . Overview; A common problem encountered in different fields of applied science is to find an expression for one physical quantity in terms of several others, which are directly measurable.; An example in high energy physics is the evaluation of the momentum of a charged particle from the observation of its trajectory in a magnetic field. The problem is to relate the momentum of the particle to the observations, which may consists of positional measurements at intervals along the particle trajectory.; The exact functional relationship between the measured quantities (e.g., the space-points) and the dependent quantity (e.g., the momentum) is in general not known, but one possible way of solving the problem, is to find an expression which reliably approximates the dependence of the momentum on the observations.; This explicit function of the observations can be obtained by a least squares fitting procedure applied to a representative sample of the data, for which the dependent quantity (e.g., momentum) and the independent observations are known. The function can then be used to compute the quantity of interest for new observations of the independent variables.; This class TMultiDimFit implements such a procedure in ROOT. It is largely based on the CERNLIB MUDIFI package 2. Though the basic concepts are still sound, and therefore kept, a few implementation details have changed, and this class can take advantage of MINUIT 4 to improve the errors of the fitting, thanks to the class TMinuit.; In 5 and 6 H. Wind demonstrates the utility of this procedure in the context of tracking, magnetic field parameterisation, and so on. The outline of the method used in this class is based on Winds discussion, and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:1151,reliab,reliably,1151,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['reliab'],['reliably']
Availability,"l name is not compressed. Bool_t HasConnection(const char* signal_name) const; Return true if there is any object connected to this signal.; Only checks for object signals. Int_t NumberOfSignals() const; Return number of signals for this object.; Only checks for object signals. Int_t NumberOfConnections() const; Return number of connections for this object. void Emit(const char* signal); Acitvate signal without args.; Example:; theButton->Emit(""Clicked()"");. void Emit(const char* signal, Long_t param); Activate signal with single parameter.; Example:; theButton->Emit(""Clicked(int)"",id). void Emit(const char* signal, Long64_t param); Activate signal with single parameter.; Example:; theButton->Emit(""Progress(Long64_t)"",processed). void Emit(const char* signal, Double_t param); Activate signal with single parameter.; Example:; theButton->Emit(""Scale(float)"",factor). void Emit(const char* signal, const char* params); Activate signal with parameter text string.; Example:; myObject->Emit(""Error(char*)"",""Fatal error"");. void Emit(const char* signal, Long_t* paramArr); Emit a signal with a varying number of arguments,; paramArr is an array of the parameters.; Note: any parameter should be converted to long type.; Example:; TQObject *processor; // data processor; TH1F *hist; // filled with processor results. processor->Connect(""Evaluated(Float_t,Float_t)"",; ""TH1F"",hist,""Fill12(Axis_t,Axis_t)"");. Long_t args[2];; args[0] = (Long_t)processor->GetValue(1);; args[1] = (Long_t)processor->GetValue(2);. processor->Emit(""Evaluated(Float_t,Float_t)"",args);. Bool_t ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); Create connection between sender and receiver.; Receiver class needs to have a dictionary. Bool_t ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); This method allows to make connection from any object; of the same class to the receiver object.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQObject.html:7959,error,error,7959,root/html602/TQObject.html,https://root.cern,https://root.cern/root/html602/TQObject.html,2,['error'],['error']
Availability,"l path to the; package to be passed in the next call; If opt == 2, only the building phase is run using *path .; Returns 0 in case of success and -1 in case of error.; The code is equivalent to the one in TProofServ.cxx (TProof::kBuildPackage; case). Keep in sync in case of changes. Int_t LoadPackage(const char* package, Bool_t notOnClient = kFALSE, TList* loadopts = 0); Load specified package. Executes the PROOF-INF/SETUP.C script; on all active nodes. If notOnClient = true, don't load package; on the client. The default is to load the package also on the client.; The argument 'loadopts' specify a list of objects to be passed to the SETUP.; The objects in the list must be streamable; the SETUP macro will be executed; like this: SETUP.C(loadopts).; Returns 0 in case of success and -1 in case of error. Int_t LoadPackageOnClient(const char* package, TList* loadopts = 0); Load specified package in the client. Executes the PROOF-INF/SETUP.C; script on the client. Returns 0 in case of success and -1 in case of error.; The code is equivalent to the one in TProofServ.cxx (TProof::kLoadPackage; case). Keep in sync in case of changes.; The argument 'loadopts' specify a list of objects to be passed to the SETUP.; The objects in the list must be streamable; the SETUP macro will be executed; like this: SETUP.C(loadopts).; Returns 0 in case of success and -1 in case of error. Int_t UnloadPackage(const char* package); Unload specified package.; Returns 0 in case of success and -1 in case of error. Int_t UnloadPackageOnClient(const char* package); Unload a specific package on the client.; Returns 0 in case of success and -1 in case of error.; The code is equivalent to the one in TProofServ.cxx (TProof::UnloadPackage; case). Keep in sync in case of changes. Int_t UnloadPackages(); Unload all packages.; Returns 0 in case of success and -1 in case of error. Int_t EnablePackage(const char* package, Bool_t notOnClient = kFALSE); Enable specified package. Executes the PROOF-INF/BUILD.sh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:63134,error,error,63134,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,3,['error'],['error']
Availability,"l platforms when the flagOpenGL.CanvasPreferGL is set to 1; in $ROOTSYS/etc/system.rootrc, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG ... but not PostScript.; Marker style; The Marker style defines the markers' shape.; The marker style of any class inheriting from TAttMarker can; be changed using the method SetMarkerStyle and retrieved using the; method GetMarkerStyle.; The following list gives the currently supported markers (screen; and PostScript) style. Each marker style is identified by an integer number; (first column) corresponding to a marker shape (second column) and can be also; accessed via a global name (third column). Marker number Marker shape Marker name; 1 dot kDot; 2 + kPlus; 3 * kStar; 4 o kCircle; 5 x kMultiply; 6 small dot kFullDotSmall; 7 medium dot kFullDotMedium; 8 large scalable dot kFullDotLarge; 9 -->19 large scalable dot; 20 full circle kFullCircle; 21 full square kFullSquare; 22 full triangle up kFullTriangleUp; 23 full triangle down kFullTriangleDown; 24 open circle kOpenCircle; 25 open square kOpenSquare; 26 open triangle up kOpenTriangleUp; 27 open diamond kOpenDiamond; 28 open cross kOpenCross; 29 full star kFullStar; 30 open star kOpenStar; 31 *; 32 open triangle down; 33 full diamond; 34 full cross. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Marker types"",0,0,500,200);; TMarker marker;; marker.DisplayMarkerTypes();; return c;; }. Marker size; Various marker sizes are shown in the figure below. The default marker size=1; is shown in the top left corner. Marker sizes smaller than 1 can be; specified. The marker size does not refer to any coordinate systems, it is an; absolute value. Therefore the marker size is not affected by any change; in TPad's scale. A marker size equl to 1 correspond to 8 pixels.; That is, a square marker with size 1 will be drawn with a side equal to 8; pixels on the screen.; The marker size of any class inheriting from TAttMarker can; be changed usi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TAttMarker.html:2292,down,down,2292,root/html534/TAttMarker.html,https://root.cern,https://root.cern/root/html534/TAttMarker.html,6,['down'],['down']
Availability,"l rectangular regions called ""cells"". Each cell stores the pointers of the bins intersecting it. When a coordinate is to be filled, the method finds which cell the coordinate falls into. Since the cells are rectangular, this can be done very quickly. It then only loops over the bins associated with that cell and calls IsInside() only on that bins. This reduces considerably the number of bins on which IsInside() is called and therefore speed up by a huge factor the filling compare to the brute force approach where IsInside() is called for all bins.; The addition of bins to the appropriate cells is done when the bin is added to the histogram. To do this, AddBin() calls the AddBinToPartition() method. This method adds the input bin to the partitioning matrix.; The number of partition cells per axis can be specified in the constructor. If it is not specified, the default value of 25 along each axis will be assigned. This value was chosen because it is small enough to avoid slowing down AddBin(), while being large enough to enhance Fill() by a considerable amount. Regardless of how it is initialized at construction time, it can be changed later with the ChangePartition() method. ChangePartition() deletes the old partition matrix and generates a new one with the specified number of cells on each axis.; The optimum number of partition cells per axis changes with the number of times Fill() will be called. Although partitioning greatly speeds up filling, it also adds a constant time delay into the code. When Fill() is to be called many times, it is more efficient to divide the histogram into a large number cells. However, if the histogram is to be filled only a few times, it is better to divide into a small number of cells. ; Definition at line 66 of file TH2Poly.h. Public Member Functions;  TH2Poly ();  Default Constructor. No boundaries specified. ;  ;  TH2Poly (const char *name, const char *title, Double_t xlow, Double_t xup, Double_t ylow, Double_t yup);  Constructor wit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2Poly.html:5331,down,down,5331,doc/master/classTH2Poly.html,https://root.cern,https://root.cern/doc/master/classTH2Poly.html,1,['down'],['down']
Availability,"l rotate the view;; Some keys can be pressed when the view canvas is selected: J/K zoom/un-zoom, U/I move up/down, L/H move left/right. The coordinate axes display as well as changing top or side viewpoints can be activated from the **TView** context menu: right-click on the picture when no object is selected;. Q: ""Every line is black! I cannot figure out what is what...""; A: Volumes can have different colors (those known by ROOT of course). Think at using them after each volume creation: myvolume->SetLineColor(Int_t color); otherwise everything is by default black.; Q: ""The top volume of my geometry is a box but I see only its content.""; A: By default the drawn volume is not displayed just because we do not want to hide its content when changing the view to HLR or solid mode. In order to see it in the default wire frame picture one has to call TGeoManager::SetTopVisible().; Q: ""I do not see all volumes in my tree but just something inside.""; A: By default, TGeoVolume::Draw() paints the content of a given volume three levels down. You can change this by using: gGeoManager::SetVisLevel(n);; Not only that, but none of the volumes at intermediate levels (0-2) are visible on the drawing unless they are final ‘leaves' on their branch (e.g. have no other volumes positioned inside). This behavior is the default one and corresponds to ‘leaves' global visualization mode (TGeoManager::fVisOption = 1). In order to see on the screen the intermediate containers, one can change this mode: gGeoManager->SetVisOption(0).; Q: ""Volumes are highlighted when moving the mouse over their vertices. What does it mean?""; A: Indeed, moving the mouse close to some volume vertices selects it. By checking the Event Status entry in the root canvas Options menu, you will see exactly which is the selected node in the bottom right. Right-clicking when a volume is selected will open its context menu where several actions can be performed (e.g. drawing it).; Q: ""OK, but now I do not want to see all th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:108734,down,down,108734,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['down'],['down']
Availability,"l shared_ptr_type currentDirectory =; 424 std::make_shared<shared_ptr_type::element_type>(ROOT::Internal::gROOTLocal);; 425 ; 426 return currentDirectory;; 427}; 428 ; 429////////////////////////////////////////////////////////////////////////////////; 430/// Return the current directory for the current thread.; 431 ; 432std::atomic<TDirectory*> &TDirectory::CurrentDirectory(); 433{; 434 return *GetSharedLocalCurrentDirectory().get();; 435}; 436 ; 437////////////////////////////////////////////////////////////////////////////////; 438/// Find a directory using apath.; 439/// It apath is null or empty, returns ""this"" directory.; 440/// Otherwise use apath to find a directory.; 441/// The absolute path syntax is: `file.root:/dir1/dir2`; 442///; 443/// where file.root is the file and /dir1/dir2 the desired subdirectory; 444/// in the file. Relative syntax is relative to ""this"" directory. E.g: `../aa`.; 445/// Returns 0 in case path does not exist.; 446/// If printError is true, use Error with 'funcname' to issue an error message.; 447 ; 448TDirectory *TDirectory::GetDirectory(const char *apath,; 449 Bool_t printError, const char *funcname); 450{; 451 Int_t nch = 0;; 452 if (apath) nch = strlen(apath);; 453 if (!nch) {; 454 return this;; 455 }; 456 ; 457 if (funcname==nullptr || strlen(funcname)==0) funcname = ""GetDirectory"";; 458 ; 459 TDirectory *result = this;; 460 ; 461 char *path = new char[nch+1]; path[0] = 0;; 462 if (nch) strlcpy(path,apath,nch+1);; 463 char *s = (char*)strrchr(path, ':');; 464 if (s) {; 465 *s = '\0';; 466 R__LOCKGUARD(gROOTMutex);; 467 TDirectory *f = (TDirectory *)gROOT->GetListOfFiles()->FindObject(path);; 468 if (!f && !strcmp(gROOT->GetName(), path)) f = gROOT;; 469 if (s) *s = ':';; 470 if (f) {; 471 result = f;; 472 if (s && *(s+1)) result = f->GetDirectory(s+1,printError,funcname);; 473 delete [] path; return result;; 474 } else {; 475 if (printError) Error(funcname, ""No such file %s"", path);; 476 delete [] path; return nullptr;; 477 };",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectory_8cxx_source.html:15972,error,error,15972,doc/master/TDirectory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectory_8cxx_source.html,1,['error'],['error']
Availability,"l slaves. TList * GetListOfQueries(Option_t* opt = """"); Ask the master for the list of queries. Int_t GetNumberOfQueries(); Number of queries processed by this session. void SetMaxDrawQueries(Int_t max); Set max number of draw queries whose results are saved. void GetMaxQueries(); Get max number of queries whose full results are kept in the; remote sandbox. TList * GetQueryResults(); Return pointer to the list of query results in the player. TQueryResult * GetQueryResult(const char* ref = 0); Return pointer to the full TQueryResult instance owned by the player; and referenced by 'ref'. If ref = 0 or """", return the last query result. void ShowQueries(Option_t* opt = """"); Ask the master for the list of queries.; Options:; ""A"" show information about all the queries known to the; server, i.e. even those processed by other sessions; ""L"" show only information about queries locally available; i.e. already retrieved. If ""L"" is specified, ""A"" is; ignored.; ""F"" show all details available about queries; ""H"" print help menu; Default """". Bool_t IsDataReady(Long64_t& totalbytes, Long64_t& bytesready); See if the data is ready to be analyzed. void Interrupt(TProof::EUrgent type, TProof::ESlaves list = kActive); Send interrupt to master or slave servers. Int_t GetParallel() const; Returns number of slaves active in parallel mode. Returns 0 in case; there are no active slaves. Returns -1 in case of error. TList * GetListOfSlaveInfos(); Returns list of TSlaveInfo's. In case of error return 0. void Activate(TList* slaves = 0); Activate slave server list. void SetMonitor(TMonitor* mon = 0, Bool_t on = kTRUE); Activate (on == TRUE) or deactivate (on == FALSE) all sockets; monitored by 'mon'. Int_t BroadcastGroupPriority(const char* grp, Int_t priority, TList* workers); Broadcast the group priority to all workers in the specified list. Returns; the number of workers the message was successfully sent to.; Returns -1 in case of error. Int_t BroadcastGroupPriority(const char* grp, Int_t pri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:37610,avail,available,37610,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,6,['avail'],['available']
Availability,"l stringROOT::Math::Minimizer::VariableName(unsigned int ivar) const; virtual const double*X() const. private:. TLinearMinimizer&operator=(const TLinearMinimizer& rhs); TLinearMinimizer(const TLinearMinimizer&). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. vector<double>fCovar; unsigned intfDim; vector<double>fErrors; TLinearFitter*fFitter; doublefMinVal; unsigned intfNFree; const ROOT::Math::IMultiGradFunction*fObjFunc; vector<double>fParams; boolfRobust. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLinearMinimizer(int type = 0); Default constructor implementation.; type is not used - needed for consistency with other minimizer plug-ins. TLinearMinimizer(const char* type); constructor passing a type of algorithm, (supported now robust via LTS regression). ~TLinearMinimizer(); Destructor implementation. TLinearMinimizer(const TLinearMinimizer& ); Implementation of copy constructor. void SetFunction(const ROOT::Math::IMultiGenFunction & ); Set function to be minimized. Flag an error since only support Gradient objective functions. void SetFunction(const ROOT::Math::IMultiGradFunction & objfunc); Set the function to be minimized. The function must be a Chi2 gradient function; When performing a linear fit we need the basis functions, which are the partial derivatives with respect to the parameters of the model function. bool SetFixedVariable(unsigned int , const string& , double ); set a fixed variable. bool Minimize(); find directly the minimum of the chi2 function; solving the linear equation. Use TVirtualFitter::Eval. bool SetVariable(unsigned int , const string& , double , double ); set free variable (dummy impl. ). { return false; }. double MinValue() const; return minimum fu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLinearMinimizer.html:6330,robust,robust,6330,root/html602/TLinearMinimizer.html,https://root.cern,https://root.cern/root/html602/TLinearMinimizer.html,2,['robust'],['robust']
Availability,"l the static function TH1::StatOverflows(kTRUE) before filling; the histogram.; Also note, that although the definition of standard error doesn't include the; assumption of normality, many uses of this feature implicitly assume it. Double_t GetStdDev(Int_t axis = 1) const; Returns the Standard Deviation (Sigma).; The Sigma estimate is computed as Sqrt((1/N)*(Sum(x_i-x_mean)^2)). For axis = 1,2 or 3 returns the Sigma value of the histogram along; X, Y or Z axis; For axis = 11, 12 or 13 returns the error of StdDev estimation along; X, Y or Z axis for Normal distribution. Note that the mean value/sigma is computed using the bins in the currently; defined range (see TAxis::SetRange). By default the range includes; all bins from 1 to nbins included, excluding underflows and overflows.; To force the underflows and overflows in the computation, one must; call the static function TH1::StatOverflows(kTRUE) before filling; the histogram. Double_t GetStdDevError(Int_t axis = 1) const; Return error of standard deviation estimation for Normal distribution. Note that the mean value/StdDev is computed using the bins in the currently; defined range (see TAxis::SetRange). By default the range includes; all bins from 1 to nbins included, excluding underflows and overflows.; To force the underflows and overflows in the computation, one must; call the static function TH1::StatOverflows(kTRUE) before filling; the histogram.; Value returned is standard deviation of sample standard deviation.; Note that it is an approximated value which is valid only in the case that the; original data distribution is Normal. The correct one would require; the 4-th momentum value, which cannot be accurately estimated from an histogram since; the x-information for all entries is not kept. Double_t GetSkewness(Int_t axis = 1) const; For axis = 1, 2 or 3 returns skewness of the histogram along x, y or z axis.; For axis = 11, 12 or 13 returns the approximate standard error of skewness; of the histogram along ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TH1.html:112474,error,error,112474,root/html604/TH1.html,https://root.cern,https://root.cern/root/html604/TH1.html,1,['error'],['error']
Availability,"l the thread by id. Returns 0 on success, otherwise; an error number will be returned. Int_t Kill(const char* name); Static method to kill thread by name. Returns 0 on success, otherwise; an error number will be returned. Int_t SetCancelOff(); Static method to turn off thread cancellation. Returns 0 on success,; otherwise an error number will be returned. Int_t SetCancelOn(); Static method to turn on thread cancellation. Returns 0 on success,; otherwise an error number will be returned. Int_t SetCancelAsynchronous(); Static method to set the cancellation response type of the calling thread; to asynchronous, i.e. cancel as soon as the cancellation request; is received. Int_t SetCancelDeferred(); Static method to set the cancellation response type of the calling thread; to deferred, i.e. cancel only at next cancellation point.; Returns 0 on success, otherwise an error number will be returned. Int_t CancelPoint(); Static method to set a cancellation point. Returns 0 on success, otherwise; an error number will be returned. Int_t CleanUpPush(void* free, void* arg = 0); Static method which pushes thread cleanup method on stack.; Returns 0 in case of success and -1 in case of error. Int_t CleanUpPop(Int_t exe = 0); Static method which pops thread cleanup method off stack.; Returns 0 in case of success and -1 in case of error. Int_t CleanUp(); Static method to cleanup the calling thread. void AfterCancel(TThread* th); Static method which is called after the thread has been canceled. Int_t Exit(void* ret = 0); Static method which terminates the execution of the calling thread. Int_t Sleep(ULong_t secs, ULong_t nanos = 0); Static method to sleep the calling thread. Int_t GetTime(ULong_t* absSec, ULong_t* absNanoSec); Static method to get the current time. Returns; the number of seconds. Int_t Lock(); Static method to lock the main thread mutex. Int_t TryLock(); Static method to try to lock the main thread mutex. Int_t UnLock(); Static method to unlock the main thread mutex. vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TThread.html:12697,error,error,12697,root/html530/TThread.html,https://root.cern,https://root.cern/root/html530/TThread.html,5,['error'],['error']
Availability,"l to MultiSolve with as input argument; the unit matrix . Note that for a matrix a(m,n) with m > n a; pseudo-inverse is calculated . Tolerances and Scaling. The tolerance parameter (which is a member of this base class) plays; a crucial role in all operations of the decomposition classes . It; gives the user a powerful tool to monitor and steer the operations; Its default value is sqrt(epsilon) where 1+epsilon = 1. If you do not want to be bothered by the following considerations,; like in most other linear algebra packages, just set the tolerance; with SetTol to an arbitrary small number . The tolerance number is used by each decomposition method to decide; whether the matrix is near singular, except of course SVD which can; handle singular matrices .; For each decomposition this will be checked in a different way; in LU; the matrix is considered singular when, at some point in the; decomposition, a diagonal element < fTol . Therefore, we had to set in; the example above of the (10x10) Hilbert, which is near singular, the; tolerance on 10e-12 . (The fact that we have to set the tolerance <; sqrt(epsilon) is a clear indication that we are losing precision .). If the matrix is flagged as being singular, operations with the; decomposition will fail and will return matrices/vectors that are; invalid . The observant reader will notice that by scaling the complete matrix; by some small number the decomposition will detect a singular matrix .; In this case the user will have to reduce the tolerance number by this; factor . (For CPU time saving we decided not to make this an automatic; procedure) . Code for this could look as follows:; const Double_t max_abs = Abs(a).Max();; const Double_t scale = TMath::Min(max_abs,1.);; a.SetTol(a.GetTol()*scale);. For usage examples see $ROOTSYS/test/stressLinear.cxx. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDecompBase.html:3293,toler,tolerance,3293,root/html528/TDecompBase.html,https://root.cern,https://root.cern/root/html528/TDecompBase.html,6,['toler'],['tolerance']
Availability,"l to its previous value. Int_t Complete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char[] appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char[] dest, const char[] localName, const char[] appendage = 0, const char[] fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char[] defaultPath) const; [private]. TString ExtendPath(const char[] originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc, ostream& out); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const char[] className) const; [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a class.; user must delete.; returns 0 in case of error. TClass * TryMakeClassFromClassName(const char[] className) const; Same as above but does not print the error message. TClass * MakeClassFromVarName(const char[] varName, TTabCom::EContext_t& context, int iter = 0); [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a variable.; user must delete.; returns 0 in case of error.; if user has operator.() or operator->() backwards, will modify: context, *fpLoc and fBuf.; context sensitive behavior. void SetPattern(TTabCom::EContext_t handle, const char[] regexp); [private]. int ParseReverse(const char* var_str, int start). Returns the place in the string where to put the \0, starting the search; from ""start"". TTabCom(). TTabCom& operator=(const TTabCom& ). EContext_t DetermineContext() const. » Author: Christian Lacunza 27/04/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/rint:$Id$ » Last generated: 2015-06-02 16:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTabCom.html:12996,error,error,12996,root/html604/TTabCom.html,https://root.cern,https://root.cern/root/html604/TTabCom.html,2,['error'],['error']
Availability,"l to its previous value. Int_t Complete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char[] appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char[] dest, const char[] localName, const char[] appendage = 0, const char[] fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char[] defaultPath) const; [private]. TString ExtendPath(const char[] originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc, ostream& out); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const char[] className) const; [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a class.; user must delete.; returns 0 in case of error. TClass * TryMakeClassFromClassName(const char[] className) const; Same as above but does not print the error message. TClass * MakeClassFromVarName(const char[] varName, TTabCom::EContext_t& context, int iter = 0); [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a variable.; user must delete.; returns 0 in case of error.; if user has operator.() or operator->() backwards, will modify: context, *fpLoc and fBuf.; context sensitive behavior. void SetPattern(TTabCom::EContext_t handle, const char[] regexp); [private]. int ParseReverse(const char* var_str, int start). Returns the place in the string where to put the \0, starting the search; from ""start"". TTabCom(). TTabCom& operator=(const TTabCom& ). EContext_t DetermineContext() const. » Author: Christian Lacunza 27/04/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/rint:$Id$ » Last generated: 2015-06-30 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTabCom.html:12996,error,error,12996,root/html602/TTabCom.html,https://root.cern,https://root.cern/root/html602/TTabCom.html,2,['error'],['error']
Availability,"l value, kFALSE otherwise. ; Definition at line 395 of file TGClient.cxx. ◆ GetDefaultColormap(). Colormap_t TGClient::GetDefaultColormap ; (; ); const. inline . Definition at line 145 of file TGClient.h. ◆ GetDefaultRoot(). const TGWindow * TGClient::GetDefaultRoot ; (; ); const. Returns the root (i.e. ; desktop) window. Should only be used as parent for frames that will never be embedded, like popups, message boxes, etc. (like TGToolTips, TGMessageBox, etc.). ; Definition at line 234 of file TGClient.cxx. ◆ GetDisplayHeight(). UInt_t TGClient::GetDisplayHeight ; (; ); const. Get display height. ; Definition at line 275 of file TGClient.cxx. ◆ GetDisplayWidth(). UInt_t TGClient::GetDisplayWidth ; (; ); const. Get display width. ; Definition at line 262 of file TGClient.cxx. ◆ GetFont() [1/2]. TGFont * TGClient::GetFont ; (; const char * ; font, . Bool_t ; fixedDefault = kTRUE . ). Get a font from the font pool. ; Fonts must be freed via TGClient::FreeFont(). Returns 0 in case of error or if font does not exist. If fixedDefault is false the ""fixed"" font will not be substituted as fallback when the asked for font does not exist. ; Definition at line 348 of file TGClient.cxx. ◆ GetFont() [2/2]. TGFont * TGClient::GetFont ; (; const TGFont * ; font). Get again specified font. Will increase its usage count. ; Definition at line 356 of file TGClient.cxx. ◆ GetFontByName(). FontStruct_t TGClient::GetFontByName ; (; const char * ; name, . Bool_t ; fixedDefault = kTRUE . ); const. Get a font by name. ; If font is not found, fixed font is returned, if fixed font also does not exist return 0 and print error. The loaded font needs to be freed using TVirtualX::DeleteFont(). If fixedDefault is false the ""fixed"" font will not be substituted as fallback when the asked for font does not exist. ; Definition at line 425 of file TGClient.cxx. ◆ GetFontPool(). TGFontPool * TGClient::GetFontPool ; (; ); const. inline . Definition at line 136 of file TGClient.h. ◆ GetGC(). TGGC * TGClien",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGClient.html:25189,error,error,25189,doc/master/classTGClient.html,https://root.cern,https://root.cern/doc/master/classTGClient.html,1,['error'],['error']
Availability,"l values would be; destroyed. UInt_t GetWidth() const; Return width of original image not of the displayed image.; (Number of image pixels). UInt_t GetHeight() const; Return height of original image not of the displayed image.; (Number of image pixels). UInt_t GetScaledWidth() const; Return width of the displayed image not of the original image.; (Number of screen pixels). UInt_t GetScaledHeight() const; Return height of the displayed image not of the original image.; (Number of screen pixels). void GetZoomPosition(UInt_t& x, UInt_t& y, UInt_t& w, UInt_t& h) const; Return the zoom parameters.; This is useful when the zoom has been done interactively using the mouse. Bool_t InitVisual(); Static function to initialize the ASVisual. void StartPaletteEditor(); Start palette editor. Pixmap_t GetPixmap(); Returns image pixmap.; The pixmap must deleted by user. Pixmap_t GetMask(); Returns image mask pixmap (alpha channel).; The pixmap must deleted by user. void SetImage(Pixmap_t pxm, Pixmap_t mask = 0); Create image from pixmap. TArrayL * GetPixels(Int_t x = 0, Int_t y = 0, UInt_t w = 0, UInt_t h = 0); Return 2D array of machine dependent pixel values. Double_t * GetVecArray(); Return a pointer to internal array[width x height] of double values [0,1].; This array is directly accessible. That allows to manipulate/change the; image. TArrayD * GetArray(UInt_t w = 0, UInt_t h = 0, TImagePalette* pal = gWebImagePalette); In case of vectorized image return an associated array of doubles; otherwise this method creates and returns a 2D array of doubles corresponding to palette.; If palette is ZERO a color converted to double value [0, 1] according to formula; Double_t((r << 16) + (g << 8) + b)/0xFFFFFF; The returned array must be deleted after usage. void DrawText(Int_t x = 0, Int_t y = 0, const char* text = """", Int_t size = 12, const char* color = 0, const char* font = ""fixed"", TImage::EText3DType type = TImage::kPlain, const char* fore_file = 0, Float_t angle = 0); Draw text of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TASImage.html:29848,mask,mask,29848,root/html526/TASImage.html,https://root.cern,https://root.cern/root/html526/TASImage.html,7,['mask'],['mask']
Availability,"l version.; Returns -1 in case of error. Bool_t Open(Option_t* option, Bool_t parallelopen); The real creation work is done here. Bool_t ReadBuffer(char* buf, Int_t len); Override TNetFile::ReadBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Pass through to TNetFile implementation which will call back eventually; to our ReadBuffer with 2 arguments to deal with xrootd errors. Bool_t ReadBufferAsync(Long64_t offs, Int_t len); Implementation dealing with the xrootd server.; Returns kTRUE in case of errors.; This is the same as TXNetFile::ReadBuffer but using the async; call from xrootd. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReadBuffer; This function is overloaded by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure.; Note: This is the overloading made in TXNetFile. If ReadBuffers; is supported by xrootd it will try to get the whole list from one single; call avoiding the latency of multiple calls. Bool_t WriteBuffer(const char* buffer, Int_t BufferLength); Override TNetFile::WriteBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. void Init(Bool_t create); Initialize the file. Makes sure that the file is really open before; calling TFile::Init. It may block. Bool_t IsOpen() const; Return kTRUE if the file is open, kFALSE otherwise. TFile::EAsyncOpenStatus GetAsyncOpenStatus(); Return status of asynchronous request. Int_t ReOpen(const Option_t* mode); Re-open the file (see TNetFile::ReOpen() or TFile::ReOpen(); for more details). void Close(const Option_t* opt = """"); Close the file (see TNetFile::Close() or TFile::Close(); for more details). void Flush(); Flushes un-written data. Int_t SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXNetFile.html:29358,failure,failure,29358,root/html602/TXNetFile.html,https://root.cern,https://root.cern/root/html602/TXNetFile.html,2,['failure'],['failure']
Availability,"l version.; Returns -1 in case of error. Bool_t Open(Option_t* option, Bool_t parallelopen); The real creation work is done here. Bool_t ReadBuffer(char* buf, Int_t len); Override TNetFile::ReadBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Pass through to TNetFile implementation which will call back eventually; to our ReadBuffer with 2 arguments to deal with xrootd errors. Bool_t ReadBufferAsync(Long64_t offs, Int_t len); Implementation dealing with the xrootd server.; Returns kTRUE in case of errors.; This is the same as TXNetFile::ReadBuffer but using the async; call from xrootd. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer; This function is overloaded by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure.; Note: This is the overloading made in TXNetFile, If ReadBuffers; is supported by xrootd it will try to gt the whole list from one single; call avoiding the latency of multiple calls. Bool_t WriteBuffer(const char* buffer, Int_t BufferLength); Override TNetFile::WriteBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. void Init(Bool_t create); Initialize the file. Makes sure that the file is really open before; calling TFile::Init. It may block. Bool_t IsOpen() const; Return kTRUE if the file is open, kFALSE otherwise. TFile::EAsyncOpenStatus GetAsyncOpenStatus(); Return status of asynchronous request. Int_t ReOpen(Option_t* mode); Re-open the file (see TNetFile::ReOpen() or TFile::ReOpen(); for more details). void Close(Option_t* opt = """"); Close the file (see TNetFile::Close() or TFile::Close(); for more details). void Flush(); Flushes un-written data. Int_t SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); Override ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXNetFile.html:27346,failure,failure,27346,root/html528/TXNetFile.html,https://root.cern,https://root.cern/root/html528/TXNetFile.html,4,['failure'],['failure']
Availability,"l void CreateListOfMethods(TClass *cl) const = 0;; 225 virtual void CreateListOfMethodArgs(TFunction *m) const = 0;; 226 virtual void UpdateListOfMethods(TClass *cl) const = 0;; 227 virtual TString GetMangledName(TClass *cl, const char *method, const char *params, Bool_t objectIsConst = kFALSE) = 0;; 228 virtual TString GetMangledNameWithPrototype(TClass *cl, const char *method, const char *proto, Bool_t objectIsConst = kFALSE, ROOT::EFunctionMatchMode /* mode */ = ROOT::kConversionMatch) = 0;; 229 virtual void GetInterpreterTypeName(const char *name, std::string &output, Bool_t full = kFALSE) = 0;; 230 virtual void *GetInterfaceMethod(TClass *cl, const char *method, const char *params, Bool_t objectIsConst = kFALSE) = 0;; 231 virtual void *GetInterfaceMethodWithPrototype(TClass *cl, const char *method, const char *proto, Bool_t objectIsConst = kFALSE, ROOT::EFunctionMatchMode /* mode */ = ROOT::kConversionMatch) = 0;; 232 void Execute(const char *function, const char *params, int *error = nullptr) override = 0;; 233 virtual void Execute(TObject *obj, TClass *cl, const char *method, const char *params, int *error = nullptr) = 0;; 234 virtual void Execute(TObject *obj, TClass *cl, TMethod *method, TObjArray *params, int *error = nullptr) = 0;; 235 virtual void ExecuteWithArgsAndReturn(TMethod *method, void* address, const void* args[] = nullptr, int /*nargs*/ = 0, void *ret= nullptr) const = 0;; 236 virtual Longptr_t ExecuteMacro(const char *filename, EErrorCode *error = nullptr) = 0;; 237 virtual Bool_t IsErrorMessagesEnabled() const = 0;; 238 virtual Bool_t SetErrorMessages(Bool_t enable = kTRUE) = 0;; 239 virtual Bool_t IsProcessLineLocked() const = 0;; 240 virtual void SetProcessLineLock(Bool_t lock = kTRUE) = 0;; 241 virtual const char *TypeName(const char *s) = 0;; 242 virtual std::string ToString(const char *type, void *obj) = 0;; 243 ; 244 virtual void SnapshotMutexState(ROOT::TVirtualRWMutex* mtx) = 0;; 245 virtual void ForgetMutexState() = 0;; 246 ; 247 // ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TInterpreter_8h_source.html:10058,error,error,10058,doc/master/TInterpreter_8h_source.html,https://root.cern,https://root.cern/doc/master/TInterpreter_8h_source.html,1,['error'],['error']
Availability,"l void Reset() = 0;; 200 virtual void ResetAll() = 0;; 201 virtual void ResetGlobals() = 0;; 202 virtual void ResetGlobalVar(void *obj) = 0;; 203 virtual void RewindDictionary() = 0;; 204 virtual Int_t DeleteGlobal(void *obj) = 0;; 205 virtual Int_t DeleteVariable(const char* name) = 0;; 206 virtual void SaveContext() = 0;; 207 virtual void SaveGlobalsContext() = 0;; 208 virtual void UpdateListOfGlobals() = 0;; 209 virtual void UpdateListOfGlobalFunctions() = 0;; 210 virtual void UpdateListOfTypes() = 0;; 211 virtual void SetClassInfo(TClass *cl, Bool_t reload = kFALSE, Bool_t silent = kFALSE) = 0;; 212 ; 213 enum ECheckClassInfo {; 214 kUnknown = 0, // backward compatible with false; 215 kKnown = 1,; 216 kWithClassDefInline = 2; 217 };; 218 virtual ECheckClassInfo CheckClassInfo(const char *name, Bool_t autoload, Bool_t isClassOrNamespaceOnly = kFALSE) = 0;; 219 ; 220 virtual Bool_t CheckClassTemplate(const char *name) = 0;; 221 virtual Longptr_t Calc(const char *line, EErrorCode* error = nullptr) = 0;; 222 virtual void CreateListOfBaseClasses(TClass *cl) const = 0;; 223 virtual void CreateListOfDataMembers(TClass *cl) const = 0;; 224 virtual void CreateListOfMethods(TClass *cl) const = 0;; 225 virtual void CreateListOfMethodArgs(TFunction *m) const = 0;; 226 virtual void UpdateListOfMethods(TClass *cl) const = 0;; 227 virtual TString GetMangledName(TClass *cl, const char *method, const char *params, Bool_t objectIsConst = kFALSE) = 0;; 228 virtual TString GetMangledNameWithPrototype(TClass *cl, const char *method, const char *proto, Bool_t objectIsConst = kFALSE, ROOT::EFunctionMatchMode /* mode */ = ROOT::kConversionMatch) = 0;; 229 virtual void GetInterpreterTypeName(const char *name, std::string &output, Bool_t full = kFALSE) = 0;; 230 virtual void *GetInterfaceMethod(TClass *cl, const char *method, const char *params, Bool_t objectIsConst = kFALSE) = 0;; 231 virtual void *GetInterfaceMethodWithPrototype(TClass *cl, const char *method, const char *proto, Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TInterpreter_8h_source.html:8898,error,error,8898,doc/master/TInterpreter_8h_source.html,https://root.cern,https://root.cern/doc/master/TInterpreter_8h_source.html,1,['error'],['error']
Availability,"l voidSetMaximum(Double_t maximum = -1111)MENU ; virtual voidSetMinimum(Double_t minimum = -1111)MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidSetNDF(Int_t ndf); virtual voidSetNpx(Int_t npx = 100)MENU ; virtual voidTFormula::SetNumber(Int_t number); virtual voidSetNumberFitPoints(Int_t npfits); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFormula::SetParameter(const char* name, Double_t parvalue); virtual voidTFormula::SetParameter(Int_t ipar, Double_t parvalue); virtual voidTFormula::SetParameters(const Double_t* params); virtual voidTFormula::SetParameters(Double_t p0, Double_t p1, Double_t p2 = 0, Double_t p3 = 0, Double_t p4 = 0, Double_t p5 = 0, Double_t p6 = 0, Double_t p7 = 0, Double_t p8 = 0, Double_t p9 = 0, Double_t p10 = 0)MENU ; virtual voidSetParent(TObject* p = 0); virtual voidSetParError(Int_t ipar, Double_t error); virtual voidSetParErrors(const Double_t* errors); virtual voidSetParLimits(Int_t ipar, Double_t parmin, Double_t parmax); virtual voidTFormula::SetParName(Int_t ipar, const char* name); virtual voidTFormula::SetParNames(const char* name0 = ""p0"", const char* name1 = ""p1"", const char* name2 = ""p2"", const char* name3 = ""p3"", const char* name4 = ""p4"", const char* name5 = ""p5"", const char* name6 = ""p6"", const char* name7 = ""p7"", const char* name8 = ""p8"", const char* name9 = ""p9"", const char* name10 = ""p10"")MENU ; virtual voidSetRange(Double_t xmin, Double_t xmax)MENU ; virtual voidSetRange(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax); virtual voidSetRange(Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax); virtual voidSetSavedPoint(Int_t point, Double_t value); virtual voidSetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF1.html:18446,error,errors,18446,root/html528/TF1.html,https://root.cern,https://root.cern/root/html528/TF1.html,3,['error'],['errors']
Availability,"l voidSetMaximum(Double_t maximum = -1111)MENU ; virtual voidSetMinimum(Double_t minimum = -1111)MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidSetNDF(Int_t ndf); virtual voidSetNpx(Int_t npx = 100)MENU ; virtual voidTFormula::SetNumber(Int_t number); virtual voidSetNumberFitPoints(Int_t npfits); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFormula::SetParameter(const char* name, Double_t parvalue); virtual voidTFormula::SetParameter(Int_t ipar, Double_t parvalue); virtual voidTFormula::SetParameters(const Double_t* params); virtual voidTFormula::SetParameters(Double_t p0, Double_t p1, Double_t p2 = 0, Double_t p3 = 0, Double_t p4 = 0, Double_t p5 = 0, Double_t p6 = 0, Double_t p7 = 0, Double_t p8 = 0, Double_t p9 = 0, Double_t p10 = 0)MENU ; virtual voidSetParent(TObject* p = 0); virtual voidSetParError(Int_t ipar, Double_t error); virtual voidSetParErrors(const Double_t* errors); virtual voidSetParLimits(Int_t ipar, Double_t parmin, Double_t parmax); virtual voidTFormula::SetParName(Int_t ipar, const char* name); virtual voidTFormula::SetParNames(const char* name0 = ""p0"", const char* name1 = ""p1"", const char* name2 = ""p2"", const char* name3 = ""p3"", const char* name4 = ""p4"", const char* name5 = ""p5"", const char* name6 = ""p6"", const char* name7 = ""p7"", const char* name8 = ""p8"", const char* name9 = ""p9"", const char* name10 = ""p10"")MENU ; virtual voidSetRange(Double_t xmin, Double_t xmax)MENU ; virtual voidSetRange(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax); virtual voidSetRange(Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax); virtual voidSetSavedPoint(Int_t point, Double_t value); virtual voidSetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TF1.html:18853,error,errors,18853,root/html534/TF1.html,https://root.cern,https://root.cern/root/html534/TF1.html,1,['error'],['errors']
Availability,"l voidSetNuisanceParameters(const RooArgSet&); voidSetParameterPointsToTest(RooAbsData& pointsToTest); virtual voidSetParameters(const RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidSetTestSize(Double_t size); voidSetTestStatSampler(RooStats::TestStatSampler& sampler); virtual voidShowMembers(TMemberInspector& insp); virtual Double_tSize() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); voidUseAdaptiveSampling(bool flag = true). Data Members; private:. boolfAdaptiveSamplingcontrols use of adaptive sampling algorithm; Double_tfAdditionalNToysFactorgive user ability to ask for more toys; RooStats::ConfidenceBelt*fConfBelt; boolfCreateBeltcontrols use if ConfidenceBelt should be saved to a TFile; RooAbsData&fDatadata set ; Double_tfLeftSideFraction; RooStats::ModelConfig&fModel; RooAbsData*fPointsToTest; boolfSaveBeltToFilecontrols use if ConfidenceBelt should be saved to a TFile; Double_tfSizesize of the test (eg. specified rate of Type I error); RooStats::TestStatSampler*fTestStatSampler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; NeymanConstruction(RooAbsData& data, RooStats::ModelConfig& model); default constructor; fWS = new RooWorkspace();; fOwnsWorkspace = true;; fDataName = """";; fPdfName = """";. ~NeymanConstruction(); default constructor; if(fOwnsWorkspace && fWS) delete fWS;; if(fConfBelt) delete fConfBelt;. PointSetInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval.; It constructs a RooStats::SetInterval. NeymanConstruction(RooAbsData& data, RooStats::ModelConfig& model); NeymanConstruction();. void SetTestStatSampler(RooStats::TestStatSampler& sampler); in addition to interface we also need:; Set the TestStatSampler (eg. ToyMC or FFT, includes choice of TestStatistic). {fTestStatSampler = &sampler;}. void SetLeftSideTailFraction(Double_t leftSideFraction = 0.); fLeftSideTailFraction*fSize defines lower edge of acceptance region.; Unified limits use 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__NeymanConstruction.html:4297,error,error,4297,root/html528/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html528/RooStats__NeymanConstruction.html,3,['error'],['error']
Availability,"l voidTFormula::SetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTF1::SetNDF(Int_t ndf); virtual voidTF1::SetNpx(Int_t npx = 100)MENU ; virtual voidTF2::SetNpy(Int_t npy = 100)MENU ; virtual voidSetNpz(Int_t npz = 30); virtual voidTFormula::SetNumber(Int_t number); virtual voidTF1::SetNumberFitPoints(Int_t npfits); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFormula::SetParameter(const char* name, Double_t parvalue); virtual voidTFormula::SetParameter(Int_t ipar, Double_t parvalue); virtual voidTFormula::SetParameters(const Double_t* params); virtual voidTFormula::SetParameters(Double_t p0, Double_t p1, Double_t p2 = 0, Double_t p3 = 0, Double_t p4 = 0, Double_t p5 = 0, Double_t p6 = 0, Double_t p7 = 0, Double_t p8 = 0, Double_t p9 = 0, Double_t p10 = 0)MENU ; virtual voidTF1::SetParent(TObject* p = 0); virtual voidTF1::SetParError(Int_t ipar, Double_t error); virtual voidTF1::SetParErrors(const Double_t* errors); virtual voidTF1::SetParLimits(Int_t ipar, Double_t parmin, Double_t parmax); virtual voidTFormula::SetParName(Int_t ipar, const char* name); virtual voidTFormula::SetParNames(const char* name0 = ""p0"", const char* name1 = ""p1"", const char* name2 = ""p2"", const char* name3 = ""p3"", const char* name4 = ""p4"", const char* name5 = ""p5"", const char* name6 = ""p6"", const char* name7 = ""p7"", const char* name8 = ""p8"", const char* name9 = ""p9"", const char* name10 = ""p10"")MENU ; virtual voidSetRange(Double_t xmin, Double_t xmax); virtual voidSetRange(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax); virtual voidSetRange(Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax)MENU ; virtual voidTF1::SetSavedPoint(Int_t point, Double_t value); virtual voidTF1::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TF3.html:16807,error,errors,16807,root/html602/TF3.html,https://root.cern,https://root.cern/root/html602/TF3.html,1,['error'],['errors']
Availability,"l voidTGX11::DrawRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGX11::DrawSegments(Drawable_t id, GContext_t gc, Segment_t* seg, Int_t nseg); virtual voidDrawString(Drawable_t id, GContext_t gc, Int_t x, Int_t y, const char* s, Int_t len); virtual voidDrawText(Int_t x, Int_t y, Float_t angle, Float_t mgn, const char* text, TVirtualX::ETextMode mode); virtual voidDrawText(Int_t x, Int_t y, Float_t angle, Float_t mgn, const wchar_t* text, TVirtualX::ETextMode mode); virtual voidTObject::Dump() constMENU ; virtual Bool_tTGX11::EmptyRegion(Region_t reg); virtual Bool_tTGX11::EqualRegion(Region_t rega, Region_t regb); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Int_tTGX11::EventsPending(); virtual UInt_tTVirtualX::ExecCommand(TGWin32Command* code); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidTGX11::FillPolygon(Window_t id, GContext_t gc, Point_t* points, Int_t npnt); virtual voidTGX11::FillRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Window_tTGX11::FindRWindow(Window_t win, Window_t dragwin, Window_t input, int x, int y, int maxd); virtual voidTVirtualX::FlushOpenGLBuffer(Handle_t ctx); virtual voidTGX11::FreeColor(Colormap_t cmap, ULong_t pixel); virtual voidTGX11::FreeFontNames(char** fontlist); virtual voidTGX11::FreeFontStruct(FontStruct_t fs); virtual voidTGX11::GetCharacterUp(Float_t& chupx, Float_t& chupy); virtual unsigned char*TGX11::GetColorBits(Drawable_t wid, Int_t x = 0, Int_t y = 0, UInt_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGX11TTF.html:6684,error,error,6684,root/html534/TGX11TTF.html,https://root.cern,https://root.cern/root/html534/TGX11TTF.html,3,['error'],['error']
Availability,"l voidTNamed::Clear(Option_t* option = """"); virtual TObject*TDataSet::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual TNode*CreateTNode(const TVolumePosition* position = 0); virtual voidTObjectSet::Delete(Option_t* opt = """"); virtual voidDeletePosition(TVolumePosition* position); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTObjectSet::DoOwner(Bool_t done = kTRUE); virtual voidDraw(Option_t* depth = ""3"")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawOnly(Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataSet*TDataSet::Find(const char* path) const; virtual TDataSet*TDataSet::FindByName(const char* name, const char* path = """", Option_t* opt = """") const; virtual TDataSet*TDataSet::FindByPath(const char* path) const; virtual TDataSet*TDataSet::FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const; virtual TObject*TDataSet::FindObject(const char* name) const; virtual TObject*TDataSet::FindObject(const TObject* o) const; virtual TDataSet*TDataSet::First() const; virtual TSeqCollection*TDataSet::GetCollection() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVolume.html:3035,error,error,3035,root/html528/TVolume.html,https://root.cern,https://root.cern/root/html528/TVolume.html,6,['error'],['error']
Availability,"l voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual RooAbsDataStore*clone(const RooArgSet& vars, const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooAbsDataStore::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tfill(); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const RooArgSet*get(Int_t index) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); Bool_tRooAbsDataStore::hasFilledCache() const; virtual ULon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCompositeDataStore.html:2598,error,error,2598,root/html526/RooCompositeDataStore.html,https://root.cern,https://root.cern/root/html526/RooCompositeDataStore.html,3,['error'],['error']
Availability,"l voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTSystem::SetObjExt(const char* objExt); virtual voidTSystem::SetProgname(const char* name); virtual intTSystem::SetSockOpt(int sock, int kind, int val); virtual voidTSystem::SetSoExt(const char* soExt); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidTSystem::ShowOutput(RedirectHandle_t* h); virtual Int_tTNamed::Sizeof() const; virtual voidTSystem::Sleep(UInt_t milliSec); virtual TStringTSystem::SplitAclicMode(const char* filename, TString& mode, TString& args, TString& io) const; virtual voidTSystem::StackTrace(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual intTSystem::Symlink(const char* from, const char* to); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTSystem::Syslog(ELogLevel level, const char* mess); virtual const char*TSystem::TempDirectory() const; virtual FILE*TSystem::TempFileName(TString& base, const char* dir = 0); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual intTSystem::Umask(Int_t mask); virtual const char*TSystem::UnixPathName(const char* unixpathname); virtual intUnlink(const char* path); virtual voidTSystem::Unload(const char* module); virtual voidTSystem::Unsetenv(const char* name); virtual voidTObject::UseCurrentStyle(); virtual intTSystem::Utime(const char* file, Long_t modtime, Long_t actime); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual char*TSystem::Which(const char* search, const char* file, EAccessMode mode = kFileExists); virtual const char*TSystem::WorkingDirectory(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TNetSystem.html:15844,mask,mask,15844,root/html528/TNetSystem.html,https://root.cern,https://root.cern/root/html528/TNetSystem.html,6,['mask'],['mask']
Availability,"l voidTObject::AppendPad(Option_t* option = """"); TDataSet*TDataSet::At(Int_t idx) const; virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TDataSet::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidDelete(Option_t* opt = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tDoOwner(Bool_t done = kTRUE); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataSet*TDataSet::Find(const char* path) const; virtual TDataSet*TDataSet::FindByName(const char* name, const char* path = """", Option_t* opt = """") const; virtual TDataSet*TDataSet::FindByPath(const char* path) const; virtual TDataSet*TDataSet::FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const; virtual TObject*TDataSet::FindObject(const char* name) const; virtual TObject*TDataSet::FindObject(const TObject* o) const; virtual TDataSet*TDataSet::First() const; virtual TSeqCollection*TDataSet::GetCollection() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TDataSet::GetList() const; virtual Int_tTDataSet::GetListSize() const; static TDataSet*TDataSet::GetMainS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TObjectSet.html:2204,error,error,2204,root/html528/TObjectSet.html,https://root.cern,https://root.cern/root/html528/TObjectSet.html,6,['error'],['error']
Availability,"l voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Int_tConvertGeant3ToPdg(Int_t Geant3Number); virtual Int_tConvertIsajetToPdg(Int_t isaNumber); virtual Int_tConvertPdgToGeant3(Int_t pdgNumber); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TParticlePDG*GetParticle(Int_t pdgCode) const; TParticlePDG*GetParticle(const char* name) const; TParticleClassPDG*GetParticleClass(const char* name); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::Handl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDatabasePDG.html:2453,error,error,2453,root/html528/TDatabasePDG.html,https://root.cern,https://root.cern/root/html528/TDatabasePDG.html,3,['error'],['error']
Availability,"l voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Bool_tChange(const char* filter); Bool_tChange(Int_t extension_number); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* opt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TVectorD*GetArrayColumn(UInt_t col); TVectorD*GetArrayRow(UInt_t row); Int_tGetColumnNumber(const char* colname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TString&GetKeywordValue(const char* keyword); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TFITSHDU::HDURecord*GetRecord(const char* keyword); Int_tGetRecordNumber() const; Int_tGetTabNColumns() const; Int_tGetTabNRows() const; TVectorD*GetTabRealVectorCell(Int_t rownum, Int_t colnu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFITSHDU.html:1738,error,error,1738,root/html530/TFITSHDU.html,https://root.cern,https://root.cern/root/html530/TFITSHDU.html,2,['error'],['error']
Availability,"l voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Bool_tChange(const char* filter); Bool_tChange(Int_t extension_number); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* opt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TVectorD*GetArrayColumn(UInt_t col); TVectorD*GetArrayRow(UInt_t row); Int_tGetColumnNumber(const char* colname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TString&GetKeywordValue(const char* keyword); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TFITSHDU::HDURecord*GetRecord(const char* keyword); Int_tGetRecordNumber() const; Int_tGetTabNColumns() const; Int_tGetTabNRows() const; TVectorD*GetTabRealVectorColumn(Int_t colnum); TVectorD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFITSHDU.html:1738,error,error,1738,root/html528/TFITSHDU.html,https://root.cern,https://root.cern/root/html528/TFITSHDU.html,1,['error'],['error']
Availability,"l voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Bool_tChange(const char* filter); Bool_tChange(Int_t extension_number); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* opt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TVectorD*GetArrayColumn(UInt_t col); TVectorD*GetArrayRow(UInt_t row); const TString&GetColumnName(Int_t colnum); Int_tGetColumnNumber(const char* colname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TString&GetKeywordValue(const char* keyword); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TFITSHDU::HDURecord*GetRecord(const char* keyword); Int_tGetRecordNumber() const; Int_tGetTabNColumns() const; Int_tGetTabNRows() const; TVectorD*Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFITSHDU.html:1738,error,error,1738,root/html534/TFITSHDU.html,https://root.cern,https://root.cern/root/html534/TFITSHDU.html,1,['error'],['error']
Availability,"l voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Bool_tChange(const char* filter); Bool_tChange(Int_t extension_number); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* opt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TVectorD*GetArrayColumn(UInt_t col); TVectorD*GetArrayRow(UInt_t row); const TString&GetColumnName(Int_t colnum); Int_tGetColumnNumber(const char* colname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TString&GetKeywordValue(const char* keyword); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; struct HDURecord*GetRecord(const char* keyword); Int_tGetRecordNumber() const; Int_tGetTabNColumns() const; Int_tGetTabNRows() const; TVectorD*GetTab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFITSHDU.html:1551,error,error,1551,root/html602/TFITSHDU.html,https://root.cern,https://root.cern/root/html602/TFITSHDU.html,2,['error'],['error']
Availability,"l voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidCopyFrom(const TGeoMatrix* other); virtual voidTObject::Delete(Option_t* option = """")MENU ; Double_tDeterminant() const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTGeoMatrix::GetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); voidTGeoMatrix::GetHomogenousMatrix(Double_t* hmat) const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; char*TGeoMatrix::GetPointerName() const; virtual const Double_t*GetRotationMatrix() const; virtual Double_t*GetRotationMatrix(); virtual const Double_t*GetScale() const; virtual Double_t*GetScale(); virtual const char*TNamed::GetTitle() const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoHMatrix.html:8235,error,error,8235,root/html528/TGeoHMatrix.html,https://root.cern,https://root.cern/root/html528/TGeoHMatrix.html,2,['error'],['error']
Availability,"l voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidCopyFrom(const TGeoMatrix* other); virtual voidTObject::Delete(Option_t* option = """")MENU ; Double_tDeterminant() const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidFastRotZ(const Double_t* sincos); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTGeoMatrix::GetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); voidTGeoMatrix::GetHomogenousMatrix(Double_t* hmat) const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; char*TGeoMatrix::GetPointerName() const; virtual const Double_t*GetRotationMatrix() const; virtual Double_t*GetRotationMatrix(); virtual const Double_t*GetScale() const; virtual Double_t*GetScale(); virtual c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoHMatrix.html:8235,error,error,8235,root/html532/TGeoHMatrix.html,https://root.cern,https://root.cern/root/html532/TGeoHMatrix.html,4,['error'],['error']
Availability,"l voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidEvalVertex(TGLVertex3& newVertex, Double_t u, Double_t v) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Rgl::Range_tGetURange() const; Rgl::Range_tGetVRange() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLParametricEquation.html:2508,error,error,2508,root/html528/TGLParametricEquation.html,https://root.cern,https://root.cern/root/html528/TGLParametricEquation.html,6,['error'],['error']
Availability,"l voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDestroySubwindows(); virtual voidDestroyWindow(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGClient*TGObject::GetClient() const; static Int_tGetCounter(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual UInt_tGetEditDisabled() const; virtual const char*TObject::GetIconName() const; Handle_tTGObject::GetId() const; virtual const TGWindow*GetMainFrame() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TGWindow*GetParent() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tHandleEvent(Event_t*); virtual Bool_tHandleExpose(Event_t* event); virtual Bool_tHandleI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGWindow.html:1710,error,error,1710,root/html528/TGWindow.html,https://root.cern,https://root.cern/root/html528/TGWindow.html,6,['error'],['error']
Availability,"l voidTObject::Browse(TBrowser* b); Int_tTParticle::Charm(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTParticle::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; Double_tTParticle::Energy() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; Double_tTParticle::Eta() const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTParticle::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tTParticle::GetCalcMass() const; Int_tTParticle::GetDaughter(Int_t i) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tTParticle::GetFirstDaughter() const; Int_tTParticle::GetFirstMother() const; virtual const char*TObject::GetIconName() const; Int_tTParticle::GetLastDaughter() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; Double_tTParticle::GetMass(); Int_tTParticle::GetMother(Int_t i) const; virtual const char*TParticle::GetName() const; Int_tTParticle::GetNDaughters() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveMCTrack.html:1560,error,error,1560,root/html528/TEveMCTrack.html,https://root.cern,https://root.cern/root/html528/TEveMCTrack.html,2,['error'],['error']
Availability,"l voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*Clone(const char*) const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const Text_t*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tgetVal() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCatType.html:1764,error,error,1764,root/html526/RooCatType.html,https://root.cern,https://root.cern/root/html526/RooCatType.html,7,['error'],['error']
Availability,"l voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*Clone(const char*) const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNameSet.html:1895,error,error,1895,root/html526/RooNameSet.html,https://root.cern,https://root.cern/root/html526/RooNameSet.html,4,['error'],['error']
Availability,"l voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tContains(const TPoint& p) const; Bool_tContains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; TGRegionEor(const TGRegion& r) const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGDimensionGetDimension() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TGPositionGetPosition() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGRegion.html:1955,error,error,1955,root/html528/TGRegion.html,https://root.cern,https://root.cern/root/html528/TGRegion.html,6,['error'],['error']
Availability,"l voidTObject::Clear(Option_t* = """"); virtual TObject*Clone(const char*) const; virtual Int_tTObject::Compare(const TObject* obj) const; const char*content() const; virtual voidTObject::Copy(TObject& object) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNameSet.html:2007,error,error,2007,root/html534/RooNameSet.html,https://root.cern,https://root.cern/root/html534/RooNameSet.html,3,['error'],['error']
Availability,"l voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidTStopwatch::Continue(); virtual voidTObject::Copy(TObject& object) const; Int_tTStopwatch::Counter() const; Double_tTStopwatch::CpuTime(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawProgressBar(); voidDrawProgressBar(TString); voidDrawProgressBar(Int_t, const TString& comment = """"); virtual voidTObject::Dump() constMENU ; Double_tElapsedSeconds(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringGetElapsedTime(Bool_t Scientific = kTRUE); virtual const char*TObject::GetIconName() const; TStringGetLeftTime(Int_t icounts); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Timer.html:2092,error,error,2092,root/html528/TMVA__Timer.html,https://root.cern,https://root.cern/root/html528/TMVA__Timer.html,6,['error'],['error']
Availability,"l voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoFill(Long64_t entry, Double_t w, const Double_t* v); voidTObject::MakeZombie(); virtual Bool_tTProofDraw::ProcessSingle(Long64_t, Int_t); voidTProofDraw::SetCanvas(const char* objname); voidTProofDraw::SetDrawAtt(TObject* o); voidTProofDraw::SetError(const char* sub, const char* mesg). Data Members; public:. enum TProofDraw::[unnamed] { kWarn; };; enum TSelector::EAbort { kContinue; kAbortProcess; kAbortFile; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSelector::EAbortTSelector::fAbortabort status; Int_tTProofDraw::fDimensionDimension of the current expression; TGraph*fGraph; TStringTProofDraw::fInitialExp; TList*TSelector::fInputlist of objects available during processing; TTreeFormulaManager*TProofDraw::fManager; Int_tTProofDraw::fMultiplicityIndicator of the variability of the size of entries; Bool_tTProofDraw::fObjEvaltrue if fVar1 returns an object (or pointer to).; TObject*TSelector::fObjectcurrent object if processing object (vs. TTree); TStringTSelector::fOptionoption given to TTree::Process; TSelectorList*TSelector::fOutputlist of objects created during processing; TTreeFormula*TProofDraw::fSelectPointer to selection formula; TStringTProofDraw::fSelection; TStatus*TProofDraw::fStatus; Long64_tTSelector::fStatusselector status; TTree*TProofDraw::fTree; TTreeDrawArgsParserTProofDraw::fTreeDrawArgsParser; TTreeFormula*TProofDraw::fVar[4]Pointer to variable formula. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Init(TTree* tree); See TProofDraw::Init(). void SlaveBegin(TTree* ); See TProofDraw::SlaveBegin(). void DoFill(Long64_t entry, Double_t w, const Double_t* v); Fills the graph with",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofDrawGraph.html:6706,avail,available,6706,root/html528/TProofDrawGraph.html,https://root.cern,https://root.cern/root/html528/TProofDrawGraph.html,1,['avail'],['available']
Availability,"l voidmncuve(); virtual voidmnderi(); virtual voidmndxdi(Double_t pint, Int_t ipar, Double_t& dxdi); virtual voidmneig(Double_t* a, Int_t ndima, Int_t n, Int_t mits, Double_t* work, Double_t precis, Int_t& ifault); virtual voidmnemat(Double_t* emat, Int_t ndim); virtual voidmnerrs(Int_t number, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& gcc); virtual voidmneval(Double_t anext, Double_t& fnext, Int_t& ierev); virtual voidmnexcm(const char* comand, Double_t* plist, Int_t llist, Int_t& ierflg); virtual voidmnexin(Double_t* pint); virtual voidmnfixp(Int_t iint, Int_t& ierr); virtual voidmnfree(Int_t k); virtual voidmngrad(); virtual voidmnhelp(TString comd); virtual voidmnhelp(const char* command = """"); virtual voidmnhes1(); virtual voidmnhess(); virtual voidmnimpr(); virtual voidmninex(Double_t* pint); virtual voidmninit(Int_t i1, Int_t i2, Int_t i3); virtual voidmnlims(); virtual voidmnline(Double_t* start, Double_t fstart, Double_t* step, Double_t slope, Double_t toler); virtual voidmnmatu(Int_t kode); virtual voidmnmigr(); virtual voidmnmnos(); virtual voidmnmnot(Int_t ilax, Int_t ilax2, Double_t& val2pl, Double_t& val2mi); virtual voidmnparm(Int_t k, TString cnamj, Double_t uk, Double_t wk, Double_t a, Double_t b, Int_t& ierflg); virtual voidmnpars(TString& crdbuf, Int_t& icondn); virtual voidmnpfit(Double_t* parx2p, Double_t* pary2p, Int_t npar2p, Double_t* coef2p, Double_t& sdev2p); virtual voidmnpint(Double_t& pexti, Int_t i, Double_t& pinti); virtual voidmnplot(Double_t* xpt, Double_t* ypt, char* chpt, Int_t nxypt, Int_t npagwd, Int_t npagln); virtual voidmnpout(Int_t iuext, TString& chnam, Double_t& val, Double_t& err, Double_t& xlolim, Double_t& xuplim, Int_t& iuint) const; virtual voidmnprin(Int_t inkode, Double_t fval); virtual voidmnpsdf(); virtual voidmnrazz(Double_t ynew, Double_t* pnew, Double_t* y, Int_t& jh, Int_t& jl); virtual voidmnrn15(Double_t& val, Int_t& inseed); virtual voidmnrset(Int_t iopt); virtual voidmnsave(); virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:19217,toler,toler,19217,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,6,['toler'],['toler']
Availability,"l when console keyboard key was pressed. ;  ; virtual void LineProcessed (const char *line);  Emit signal when a line has been processed. ;  ; virtual void Lower ();  ; void ls (Option_t *option="""") const override;  Show available sessions. ;  ; Bool_t NoLogoOpt () const;  ; Bool_t NoLogOpt () const;  ; virtual void Open ();  ; void OpenForumTopic (const TString &type);  It opens a Forum topic in a web browser with prefilled ROOT version. ;  ; void OpenGitHubIssue (const TString &type);  It opens a GitHub issue in a web browser with prefilled ROOT version. ;  ; void OpenInBrowser (const TString &url);  The function generates and executes a command that loads the Doxygen URL in a browser. ;  ; void OpenReferenceGuideFor (const TString &strippedClass);  It opens the online reference guide, generated with Doxygen, for the chosen scope (class/namespace/struct) or member (method/function/ data member/enumeration/enumerator. ;  ; virtual Longptr_t ProcessFile (const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE);  Process a file containing a C++ macro. ;  ; Bool_t QuitOpt () const;  ; virtual void Raise ();  ; virtual void RemoveIdleTimer ();  Remove idle timer. Normally called via TROOT::Idle(0). ;  ; Bool_t ReturnFromRun () const;  ; virtual void ReturnPressed (char *text);  Emit signal when return key was pressed. ;  ; virtual void Run (Bool_t retrn=kFALSE);  Main application eventloop. Calls system dependent eventloop via gSystem. ;  ; virtual void SetEchoMode (Bool_t mode);  Set console echo mode: ;  ; virtual void SetIdleTimer (UInt_t idleTimeInSec, const char *command);  Set the command to be executed after the system has been idle for idleTimeInSec seconds. ;  ; void SetReturnFromRun (Bool_t ret);  ; virtual void Show ();  ; virtual void StartIdleing ();  Called when system starts idleing. ;  ; virtual void StopIdleing ();  Called when system stops idleing. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t TabCompletionHook ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationRemote.html:5472,error,error,5472,doc/master/classTApplicationRemote.html,https://root.cern,https://root.cern/doc/master/classTApplicationRemote.html,1,['error'],['error']
Availability,"l when console keyboard key was pressed. ;  ; virtual void LineProcessed (const char *line);  Emit signal when a line has been processed. ;  ; virtual void Lower ();  ; void ls (Option_t *option="""") const override;  Show available sessions. ;  ; Bool_t NoLogoOpt () const;  ; Bool_t NoLogOpt () const;  ; virtual void Open ();  ; void OpenForumTopic (const TString &type);  It opens a Forum topic in a web browser with prefilled ROOT version. ;  ; void OpenGitHubIssue (const TString &type);  It opens a GitHub issue in a web browser with prefilled ROOT version. ;  ; void OpenInBrowser (const TString &url);  The function generates and executes a command that loads the Doxygen URL in a browser. ;  ; void OpenReferenceGuideFor (const TString &strippedClass);  It opens the online reference guide, generated with Doxygen, for the chosen scope (class/namespace/struct) or member (method/function/ data member/enumeration/enumerator. ;  ; virtual Longptr_t ProcessFile (const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE);  Process a file containing a C++ macro. ;  ; Bool_t QuitOpt () const;  ; virtual void Raise ();  ; virtual void RemoveIdleTimer ();  Remove idle timer. Normally called via TROOT::Idle(0). ;  ; Bool_t ReturnFromRun () const;  ; virtual void ReturnPressed (char *text);  Emit signal when return key was pressed. ;  ; virtual void SetEchoMode (Bool_t mode);  Set console echo mode: ;  ; virtual void SetIdleTimer (UInt_t idleTimeInSec, const char *command);  Set the command to be executed after the system has been idle for idleTimeInSec seconds. ;  ; void SetReturnFromRun (Bool_t ret);  ; virtual void Show ();  ; virtual void StartIdleing ();  Called when system starts idleing. ;  ; virtual void StopIdleing ();  Called when system stops idleing. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t TabCompletionHook (char *buf, int *pLoc, std::ostream &out);  What to do when tab is pressed. ;  ; const char * WorkingDirectory () const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationServer.html:4829,error,error,4829,doc/master/classTApplicationServer.html,https://root.cern,https://root.cern/doc/master/classTApplicationServer.html,1,['error'],['error']
Availability,"l when console keyboard key was pressed. ;  ; virtual void LineProcessed (const char *line);  Emit signal when a line has been processed. ;  ; virtual void Lower ();  ; void ls (Option_t *option="""") const override;  Show available sessions. ;  ; Bool_t NoLogoOpt () const;  ; Bool_t NoLogOpt () const;  ; virtual void Open ();  ; void OpenForumTopic (const TString &type);  It opens a Forum topic in a web browser with prefilled ROOT version. ;  ; void OpenGitHubIssue (const TString &type);  It opens a GitHub issue in a web browser with prefilled ROOT version. ;  ; void OpenInBrowser (const TString &url);  The function generates and executes a command that loads the Doxygen URL in a browser. ;  ; void OpenReferenceGuideFor (const TString &strippedClass);  It opens the online reference guide, generated with Doxygen, for the chosen scope (class/namespace/struct) or member (method/function/ data member/enumeration/enumerator. ;  ; virtual Longptr_t ProcessFile (const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE);  Process a file containing a C++ macro. ;  ; virtual Longptr_t ProcessLine (const char *line, Bool_t sync=kFALSE, Int_t *error=nullptr);  Process a single command line, either a C++ statement or an interpreter command starting with a ""."". ;  ; Bool_t QuitOpt () const;  ; virtual void Raise ();  ; virtual void RemoveIdleTimer ();  Remove idle timer. Normally called via TROOT::Idle(0). ;  ; Bool_t ReturnFromRun () const;  ; virtual void ReturnPressed (char *text);  Emit signal when return key was pressed. ;  ; virtual void Run (Bool_t retrn=kFALSE);  Main application eventloop. Calls system dependent eventloop via gSystem. ;  ; virtual void SetEchoMode (Bool_t mode);  Set console echo mode: ;  ; virtual void SetIdleTimer (UInt_t idleTimeInSec, const char *command);  Set the command to be executed after the system has been idle for idleTimeInSec seconds. ;  ; void SetReturnFromRun (Bool_t ret);  ; virtual void Show ();  ; virtual void StartIdleing ();  Called ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplication.html:4267,error,error,4267,doc/master/classTApplication.html,https://root.cern,https://root.cern/doc/master/classTApplication.html,2,['error'],['error']
Availability,"l when console keyboard key was pressed. ;  ; virtual void LineProcessed (const char *line);  Emit signal when a line has been processed. ;  ; virtual void Lower ();  ; void ls (Option_t *option="""") const override;  Show available sessions. ;  ; Bool_t NoLogoOpt () const;  ; Bool_t NoLogOpt () const;  ; virtual void Open ();  ; void OpenForumTopic (const TString &type);  It opens a Forum topic in a web browser with prefilled ROOT version. ;  ; void OpenGitHubIssue (const TString &type);  It opens a GitHub issue in a web browser with prefilled ROOT version. ;  ; void OpenInBrowser (const TString &url);  The function generates and executes a command that loads the Doxygen URL in a browser. ;  ; void OpenReferenceGuideFor (const TString &strippedClass);  It opens the online reference guide, generated with Doxygen, for the chosen scope (class/namespace/struct) or member (method/function/ data member/enumeration/enumerator. ;  ; virtual Longptr_t ProcessFile (const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE);  Process a file containing a C++ macro. ;  ; virtual Longptr_t ProcessLine (const char *line, Bool_t sync=kFALSE, Int_t *error=nullptr);  Process a single command line, either a C++ statement or an interpreter command starting with a ""."". ;  ; Bool_t QuitOpt () const;  ; virtual void Raise ();  ; virtual void RemoveIdleTimer ();  Remove idle timer. Normally called via TROOT::Idle(0). ;  ; Bool_t ReturnFromRun () const;  ; virtual void ReturnPressed (char *text);  Emit signal when return key was pressed. ;  ; virtual void SetEchoMode (Bool_t mode);  Set console echo mode: ;  ; virtual void SetIdleTimer (UInt_t idleTimeInSec, const char *command);  Set the command to be executed after the system has been idle for idleTimeInSec seconds. ;  ; void SetReturnFromRun (Bool_t ret);  ; virtual void Show ();  ; virtual void StartIdleing ();  Called when system starts idleing. ;  ; virtual void StopIdleing ();  Called when system stops idleing. ;  ; void StreamerNVirt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServ.html:8099,error,error,8099,doc/master/classTProofServ.html,https://root.cern,https://root.cern/doc/master/classTProofServ.html,2,['error'],['error']
Availability,"l when console keyboard key was pressed. ;  ; virtual void LineProcessed (const char *line);  Emit signal when a line has been processed. ;  ; virtual void Lower ();  ; void ls (Option_t *option="""") const override;  Show available sessions. ;  ; Bool_t NoLogoOpt () const;  ; Bool_t NoLogOpt () const;  ; virtual void Open ();  ; void OpenForumTopic (const TString &type);  It opens a Forum topic in a web browser with prefilled ROOT version. ;  ; void OpenGitHubIssue (const TString &type);  It opens a GitHub issue in a web browser with prefilled ROOT version. ;  ; void OpenInBrowser (const TString &url);  The function generates and executes a command that loads the Doxygen URL in a browser. ;  ; void OpenReferenceGuideFor (const TString &strippedClass);  It opens the online reference guide, generated with Doxygen, for the chosen scope (class/namespace/struct) or member (method/function/ data member/enumeration/enumerator. ;  ; virtual Longptr_t ProcessFile (const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE);  Process a file containing a C++ macro. ;  ; virtual Longptr_t ProcessLine (const char *line, Bool_t sync=kFALSE, Int_t *error=nullptr);  Process a single command line, either a C++ statement or an interpreter command starting with a ""."". ;  ; Bool_t QuitOpt () const;  ; virtual void Raise ();  ; virtual void RemoveIdleTimer ();  Remove idle timer. Normally called via TROOT::Idle(0). ;  ; Bool_t ReturnFromRun () const;  ; virtual void ReturnPressed (char *text);  Emit signal when return key was pressed. ;  ; virtual void SetIdleTimer (UInt_t idleTimeInSec, const char *command);  Set the command to be executed after the system has been idle for idleTimeInSec seconds. ;  ; void SetReturnFromRun (Bool_t ret);  ; virtual void Show ();  ; virtual void StartIdleing ();  Called when system starts idleing. ;  ; virtual void StopIdleing ();  Called when system stops idleing. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; const char * WorkingDi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRint.html:4058,error,error,4058,doc/master/classTRint.html,https://root.cern,https://root.cern/doc/master/classTRint.html,1,['error'],['error']
Availability,"l"", [g1, g2], [frac]); ; # Generate 1000 events; data = model.generate({x}, 1000); ; # Construct unbinned likelihood of model w.r.t. data; nll = model.createNLL(data); ; # Interactive minimization, error analysis; # -------------------------------------------------------------------------------; ; # Create MINUIT interface object; m = ROOT.RooMinimizer(nll); ; # Activate verbose logging of MINUIT parameter space stepping; m.setVerbose(True); ; # Call MIGRAD to minimize the likelihood; m.migrad(); ; # Print values of all parameters, reflect values (and error estimates); # that are back propagated from MINUIT; model.getParameters({x}).Print(""s""); ; # Disable verbose logging; m.setVerbose(False); ; # Run HESSE to calculate errors from d2L/dp2; m.hesse(); ; # Print value (and error) of sigma_g2 parameter, reflects; # value and error back propagated from MINUIT; sigma_g2.Print(); ; # Run MINOS on sigma_g2 parameter only; m.minos({sigma_g2}); ; # Print value (and error) of sigma_g2 parameter, reflects; # value and error back propagated from MINUIT; sigma_g2.Print(); ; # Saving results, contour plots; # ---------------------------------------------------------; ; # Save a snapshot of the fit result. ROOT.This object contains the initial; # fit parameters, final fit parameters, complete correlation; # matrix, EDM, minimized FCN , last MINUIT status code and; # the number of times the ROOT.RooFit function object has indicated evaluation; # problems (e.g. zero probabilities during likelihood evaluation); r = m.save(); ; # Make contour plot of mx vs sx at 1,2, sigma; frame = m.contour(frac, sigma_g2, 1, 2, 3); frame.SetTitle(""Contour plot""); ; # Print the fit result snapshot; r.Print(""v""); ; # Change parameter values, plotting; # -----------------------------------------------------------------; ; # At any moment you can manually change the value of a (constant); # parameter; mean.setVal(0.3); ; # Rerun MIGRAD,HESSE; m.migrad(); m.hesse(); frac.Print(); ; # Now fix sigma_g2; s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf601__intminuit_8py.html:1895,error,error,1895,doc/master/rf601__intminuit_8py.html,https://root.cern,https://root.cern/doc/master/rf601__intminuit_8py.html,2,['error'],['error']
Availability,"l() overrideTGeoPaintervirtual; DrawPath(const char *path, Option_t *option="""") overrideTGeoPaintervirtual; DrawPolygon(const TGeoPolygon *poly) overrideTGeoPaintervirtual; DrawShape(TGeoShape *shape, Option_t *option="""") overrideTGeoPaintervirtual; DrawVolume(TGeoVolume *vol, Option_t *option="""") overrideTGeoPaintervirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EditGeometry(Option_t *option="""") overrideTGeoPaintervirtual; EGeoBombOption enum nameTVirtualGeoPainter; EGeoVisLevel enum nameTVirtualGeoPainter; EGeoVisOption enum nameTVirtualGeoPainter; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; EstimateCameraMove(Double_t tmin, Double_t tmax, Double_t *start, Double_t *end) overrideTGeoPaintervirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; ExecuteManagerEvent(TGeoManager *geom, Int_t event, Int_t px, Int_t py) overrideTGeoPaintervirtual; ExecuteShapeEvent(TGeoShape *shape, Int_t event, Int_t px, Int_t py) overrideTGeoPaintervirtual; ExecuteVolumeEvent(TGeoVolume *volume, Int_t event, Int_t px, Int_t py) overrideTGeoPaintervirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fBombRTGeoPainterprivate; fBombXTGeoPainterprivate; fBombYTGeoPainterprivate; fBombZTGeoPainterprivate; fBufferTGeoPainterprivate; fCheckedBoxTGeoPainterprivate; fCheckedNodeTGeoPainterprivate; fCheckerTGeoPainterprivate; fClippingShapeTGeoPainterprivate; fExplodedViewTGeoPainterprivate; fgDtorOnlyTObjectprivatestatic; fGeoManagerTGeoPainterprivate; fgGeoPainterTVirtualGeoPainterprotectedstatic; fGlobalTGeoPainterprivate; fgObjectStatTObjectprivatestatic; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fIsEditableTGeoPainterpriv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPainter-members.html:3768,error,error,3768,doc/master/classTGeoPainter-members.html,https://root.cern,https://root.cern/doc/master/classTGeoPainter-members.html,2,['error'],['error']
Availability,"l(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; TClass * IsA () const override;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const;  Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ;  ; bool mustBeExtended () const;  If true PDF must provide extended likelihood term. ;  ; const char * normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specificatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNormalizedPdf.html:10559,error,errors,10559,doc/master/classRooNormalizedPdf.html,https://root.cern,https://root.cern/doc/master/classRooNormalizedPdf.html,1,['error'],['errors']
Availability,"l(). void ROOT::Math::Minimizer::SetPrintLevel ; (; int ; level). inline . set print level ; Definition at line 328 of file Minimizer.h. ◆ SetStrategy(). void ROOT::Math::Minimizer::SetStrategy ; (; int ; strategyLevel). inline . set the strategy ; Definition at line 344 of file Minimizer.h. ◆ SetTolerance(). void ROOT::Math::Minimizer::SetTolerance ; (; double ; tol). inline . set the tolerance ; Definition at line 337 of file Minimizer.h. ◆ SetUpperLimitedVariable(). virtual bool ROOT::Math::Minimizer::SetUpperLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; upper . ). inlinevirtual . set a new upper limit variable (override if minimizer supports them ) ; Reimplemented in ROOT::Math::BasicMinimizer, TMinuitMinimizer, and ROOT::Minuit2::Minuit2Minimizer.; Definition at line 179 of file Minimizer.h. ◆ SetValidError(). void ROOT::Math::Minimizer::SetValidError ; (; bool ; on). inline . flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ; Definition at line 350 of file Minimizer.h. ◆ SetVariable(). virtual bool ROOT::Math::Minimizer::SetVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step . ). pure virtual . set a new free variable ; Implemented in TFumiliMinimizer, ROOT::Math::GeneticMinimizer, ROOT::Math::BasicMinimizer, TMinuitMinimizer, ROOT::Minuit2::Minuit2Minimizer, and TLinearMinimizer. ◆ SetVariableInitialRange(). virtual bool ROOT::Math::Minimizer::SetVariableInitialRange ; (; unsigned int ; , . double ; , . double ;  . ). inlinevirtual . set the initial range of an existing variable ; Definition at line 208 of file Minimizer.h. ◆ SetVariableLimits(). virtual bool ROOT::Math::Minimizer::SetVariableLimits ; (; unsigned int ; ivar, . double ; lower, . double ; upper . ). inlinevirtual . set the limits of an already existing variable ; Reimplemented in ROOT::Math::BasicMinimizer, TMinuitMinimizer, and ROOT::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html:32050,error,error,32050,doc/master/classROOT_1_1Math_1_1Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html,1,['error'],['error']
Availability,"l(); TFoamCell(Int_t); TFoamCell(TFoamCell&); virtual~TFoamCell(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCalcVolume(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFill(Int_t, TFoamCell*, TFoamCell*, TFoamCell*); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetBest() const; TFoamCell*GetDau0() const; TFoamCell*GetDau1() const; virtual Option_t*TObject::GetDrawOption() const; Double_tGetDriv() const; static Long_tTObject::GetDtorOnly(); voidGetHcub(TFoamVect&, TFoamVect&) const; voidGetHSize(TFoamVect&) const; virtual const char*TObject::GetIconName() const; Double_tGetIntg() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TFoamCell*GetPare() const; Double_tGetPrim() const; Int_tGet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFoamCell.html:1578,error,error,1578,root/html528/TFoamCell.html,https://root.cern,https://root.cern/root/html528/TFoamCell.html,4,['error'],['error']
Availability,l) const; 410 {; 411 // for row wise; 412 //assert(GetLayout() == MemoryLayout::RowMajor);; 413 assert( fNDim == 4); // || ( k==0 && fNDim == 2 ) );; 414 ; 415 size_t offset = (GetLayout() == MemoryLayout::RowMajor) ?; 416 i * fStrides[0] + j * fStrides[1] + k * fStrides[2] + l:; 417 l * fStrides[3] + k * fStrides[2] + j * fStrides[1] + i;; 418 ; 419 AFloat * elementPointer = fElementBuffer.data() + offset;; 420 ; 421 return TCudaDeviceReference<AFloat>(elementPointer);; 422 }; 423 ; 424private:; 425 ; 426 /** Initializes all shared devices resource and makes sure that a sufficient; 427 * number of curand states are allocated on the device and initialized as; 428 * well as that the one-vector for the summation over columns has the right; 429 * size. */; 430 void InitializeCuda();; 431 void InitializeCurandStates();; 432 ; 433};; 434 ; 435 ; 436 ; 437 ; 438} // namespace DNN; 439} // namespace TMVA; 440 ; 441#endif; CudaBuffers.h; CudaMatrix.h; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; offsetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h offsetDefinition T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/CudaTensor_8h_source.html:17043,error,error,17043,doc/master/CudaTensor_8h_source.html,https://root.cern,https://root.cern/doc/master/CudaTensor_8h_source.html,1,['error'],['error']
Availability,"l*>(cloneTree()) ;; 2646 RooArgSet cloneParams;; 2647 cloneFunc->getObservables(&fr.floatParsFinal(), cloneParams) ;; 2648 RooArgSet errorParams{cloneParams};; 2649 if(params) {; 2650 // clear and fill errorParams only with parameters that both in params and cloneParams; 2651 cloneParams.selectCommon(*params, errorParams);; 2652 }; 2653 ; 2654 // Generate 100 random parameter points distributed according to fit result covariance matrix; 2655 RooAbsPdf* paramPdf = fr.createHessePdf(errorParams) ;; 2656 Int_t n = Int_t(100./TMath::Erfc(Z/sqrt(2.))) ;; 2657 if (n<100) n=100 ;; 2658 ; 2659 coutI(Plotting) << ""RooAbsReal::plotOn("" << GetName() << "") INFO: visualizing "" << Z << ""-sigma uncertainties in parameters ""; 2660 << errorParams << "" from fit result "" << fr.GetName() << "" using "" << n << "" samplings."" << std::endl ;; 2661 ; 2662 // Generate variation curves with above set of parameter values; 2663 double ymin = frame->GetMinimum() ;; 2664 double ymax = frame->GetMaximum() ;; 2665 std::unique_ptr<RooDataSet> generatedData{paramPdf->generate(errorParams,n)};; 2666 std::vector<RooCurve*> cvec ;; 2667 for (int i=0 ; i<generatedData->numEntries() ; i++) {; 2668 cloneParams.assign(*generatedData->get(i)) ;; 2669 plotFunc(*cloneFunc);; 2670 cvec.push_back(frame->getCurve()) ;; 2671 frame->remove(nullptr,false) ;; 2672 }; 2673 frame->SetMinimum(ymin) ;; 2674 frame->SetMaximum(ymax) ;; 2675 ; 2676 ; 2677 // Generate upper and lower curve points from 68% interval around each point of central curve; 2678 band = cenCurve->makeErrorBand(cvec,Z) ;; 2679 ; 2680 // Cleanup; 2681 delete paramPdf ;; 2682 delete cloneFunc ;; 2683 for (std::vector<RooCurve*>::iterator i=cvec.begin() ; i!=cvec.end() ; ++i) {; 2684 delete (*i) ;; 2685 }; 2686 ; 2687 } else {; 2688 ; 2689 // *** Linear Method ***; 2690 //; 2691 // Make a one-sigma up- and down fluctation for each parameter and visualize; 2692 // a from a linearized calculation as follows; 2693 //; 2694 // error(x) = F(a) C_aa' F(a'); 269",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:117617,error,errorParams,117617,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['error'],['errorParams']
Availability,"l*_funct; RooArgList*_initConstParamList; RooArgList*_initFloatParamList; ofstream*_logfile; double_maxFCN; int_nDim; int_numBadNLL; int_printEvalErrors; bool_verbose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMinimizerFcn(RooAbsReal* funct, RooMinimizer* context, bool verbose = false); Reset the *largest* negative log-likelihood value we have seen so far. RooMinimizerFcn(const RooMinimizerFcn& other). ~RooMinimizerFcn(). ROOT::Math::IBaseFunctionMultiDim* Clone() const. Bool_t Synchronize(vector<ROOT::Fit::ParameterSettings>& parameters, Bool_t optConst, Bool_t verbose). Double_t GetPdfParamVal(Int_t index); Access PDF parameter value by ordinal index (needed by MINUIT). Double_t GetPdfParamErr(Int_t index); Access PDF parameter error by ordinal index (needed by MINUIT). void SetPdfParamErr(Int_t index, Double_t value); Modify PDF parameter error by ordinal index (needed by MINUIT). void ClearPdfParamAsymErr(Int_t index); Modify PDF parameter error by ordinal index (needed by MINUIT). void SetPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); Modify PDF parameter error by ordinal index (needed by MINUIT). void BackProp(const ROOT::Fit::FitResult& results); Transfer MINUIT fit results back into RooFit objects. Bool_t SetLogFile(const char* inLogfile); Change the file name for logging of a RooMinimizer of all MINUIT steppings; through the parameter space. If inLogfile is null, the current log file; is closed and logging is stopped. void ApplyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. Bool_t SetPdfParamVal(const Int_t& index, const Double_t& value) const; RooRealVar* par = (RooRealVar*)_floatParamList->at(index);. void updateFloatVec(). double DoEval(const double* x) const. unsigned int NDim() const; { return _nDim; }. RooArgList* G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMinimizerFcn.html:3239,error,error,3239,root/html602/RooMinimizerFcn.html,https://root.cern,https://root.cern/root/html602/RooMinimizerFcn.html,2,['error'],['error']
Availability,"l, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidEncodeText(TGString* str, const char* z); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; TGHtmlElement*FindEndNest(TGHtmlElement* sp, int en, TGHtmlElement* lp); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual intFormAction(TGHtmlForm*, int); virtual intFormCreate(TGHtmlForm*, const char*, const char*); virtual Pixel_tTGFrame::GetBackground() const; const char*GetBaseUri() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGViewFrame*TGView::GetCanvas() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGHtml.html:4541,error,error,4541,root/html602/TGHtml.html,https://root.cern,https://root.cern/root/html602/TGHtml.html,2,['error'],['error']
Availability,"l, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidTGedEditor::ExcludeClassEditor(TClass* cl, Bool_t recurse = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTVirtualPadEditor::FillAttributes(Int_t, Int_t); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; virtual TCanvas*TGedEditor::GetCanvas() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static TContextMenu*GetContextMenu(); static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveGedEditor.html:5294,error,error,5294,root/html528/TEveGedEditor.html,https://root.cern,https://root.cern/root/html528/TEveGedEditor.html,4,['error'],['error']
Availability,"l, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidEnableTimer(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TSessionDescription*GetActDesc() const; virtual Pixel_tTGFrame::GetBackground() const; const TGPicture*GetBasePict() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGPopupMenu*GetCascadeMenu() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; TGHProgressBar*GetConnectProg() const; TContextMenu*GetContextMenu() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSessionViewer.html:4723,error,error,4723,root/html528/TSessionViewer.html,https://root.cern,https://root.cern/root/html528/TSessionViewer.html,4,['error'],['error']
Availability,"l, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidTCanvas::EnterLeave(TPad* prevSelPad, TObject* prevSelObj); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTCanvas::FeedbackMode(Bool_t set); virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; voidTCanvas::Flush(); voidTCanvas::ForceUpdate(); virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; Bool_tTCanvas::GetAutoExec() const; TButton*GetBackward() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TInspectCanvas.html:6135,error,error,6135,root/html602/TInspectCanvas.html,https://root.cern,https://root.cern/root/html602/TInspectCanvas.html,2,['error'],['error']
Availability,"l, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidTCanvas::EnterLeave(TPad* prevSelPad, TObject* prevSelObj); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTCanvas::FeedbackMode(Bool_t set); virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; voidTCanvas::Flush(); voidTCanvas::ForceUpdate(); virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; Bool_tTCanvas::GetAutoExec() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDialogCanvas.html:6500,error,error,6500,root/html602/TDialogCanvas.html,https://root.cern,https://root.cern/root/html602/TDialogCanvas.html,2,['error'],['error']
Availability,"l, double step, double lower, double upper); set upper/lower limited variable. bool SetFixedVariable(unsigned int ivar, const string& name, double val); set fixed variable. bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. double Edm() const; return expected distance reached from the minimum. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. { return (fObjFunc) ? fObjFunc->NCalls() : 0; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fNFree; }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. { return (fErrors.size() > 0) ? &fErrors.front() : 0; }. double CovMatrix(unsigned int , unsigned int ) const; {; static std::vector<double> err;; err.resize(fDim);; return &err.front();; }; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. int CovMatrixStatus() const; return covariance matrix status. » Author: L. Moneta Wed Dec 20 17:16:32 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: GSLNLSMinimizer.h 37427 2010-12-09 08:57:45Z moneta $ » Last generated: 2010-12-09 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GSLNLSMinimizer.html:7874,error,error,7874,root/html528/ROOT__Math__GSLNLSMinimizer.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GSLNLSMinimizer.html,4,['error'],"['error', 'errors']"
Availability,"l, double step, double lower, double upper); set upper/lower limited variable. bool SetFixedVariable(unsigned int ivar, const string& name, double val); set fixed variable. bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. double Edm() const; return expected distance reached from the minimum. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. { return (fObjFunc) ? fObjFunc->NCalls() : 0; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fNFree; }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. { return (fErrors.size() > 0) ? &fErrors.front() : 0; }. double CovMatrix(unsigned int , unsigned int ) const; {; static std::vector<double> err;; err.resize(fDim);; return &err.front();; }; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. int CovMatrixStatus() const; return covariance matrix status. » Author: L. Moneta Wed Dec 20 17:16:32 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: GSLNLSMinimizer.h 37427 2010-12-09 08:57:45Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__GSLNLSMinimizer.html:8008,error,error,8008,root/html530/ROOT__Math__GSLNLSMinimizer.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__GSLNLSMinimizer.html,4,['error'],"['error', 'errors']"
Availability,"l, double step, double lower, double upper); set upper/lower limited variable. bool SetFixedVariable(unsigned int ivar, const string& name, double val); set fixed variable. bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. double Edm() const; return expected distance reached from the minimum. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. { return (fObjFunc) ? fObjFunc->NCalls() : 0; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fNFree; }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. { return (fErrors.size() > 0) ? &fErrors.front() : 0; }. double CovMatrix(unsigned int , unsigned int ) const; {; static std::vector<double> err;; err.resize(fDim);; return &err.front();; }; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. int CovMatrixStatus() const; return covariance matrix status. » Author: L. Moneta Wed Dec 20 17:16:32 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: GSLNLSMinimizer.h 37427 2010-12-09 08:57:45Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__GSLNLSMinimizer.html:8008,error,error,8008,root/html532/ROOT__Math__GSLNLSMinimizer.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__GSLNLSMinimizer.html,4,['error'],"['error', 'errors']"
Availability,"l.cxx. ◆ plotOnCompSelect(). void RooAbsReal::plotOnCompSelect ; (; RooArgSet * ; selNodes); const. protected . Helper function for plotting of composite p.d.fs. ; Given a set of selected components that should be plotted, find all nodes that (in)directly depend on these selected nodes. Mark all directly and indirectly selected nodes as 'selected' using the selectComp() method ; Definition at line 1438 of file RooAbsReal.cxx. ◆ plotOnWithErrorBand(). RooPlot * RooAbsReal::plotOnWithErrorBand ; (; RooPlot * ; frame, . const RooFitResult & ; fr, . double ; Z, . const RooArgSet * ; params, . const RooLinkedList & ; argList, . bool ; linMethod . ); const. protected . Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ; Parameters. [in]frameRooPlot to plot on ; [in]frThe RooFitResult, where errors can be extracted ; [in]ZThe desired significance (width) of the error band ; [in]paramsIf non-zero, consider only the subset of the parameters in fr for the error evaluation ; [in]argListOptional RooCmdArg that can be applied to a regular plotOn() operation ; [in]linMethodBy default (linMethod=true), a linearized error is shown. . ReturnsThe RooPlot the band was plotted on (for chaining of plotting commands).; The linearized error is calculated as follows: ; \[; \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; \]. where ; \[; F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; \]. with \( f(x) \) the plotted curve and \( \mathrm{d}a \) taken from the fit result, and \( \mathrm{Corr}(a,a') \) = the correlation matrix from the fit result, and \( Z \) = requested signifance ( \( Z \sigma \) band); The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; Alternatively, a more robust error is calculated us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:137406,error,errors,137406,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,4,['error'],"['error', 'errors']"
Availability,"l.cxx. ◆ plotOnCompSelect(). void RooAbsReal::plotOnCompSelect ; (; RooArgSet * ; selNodes); const. protected . Helper function for plotting of composite p.d.fs. ; Given a set of selected components that should be plotted, find all nodes that (in)directly depend on these selected nodes. Mark all directly and indirectly selected nodes as 'selected' using the selectComp() method ; Definition at line 1466 of file RooAbsReal.cxx. ◆ plotOnWithErrorBand(). RooPlot * RooAbsReal::plotOnWithErrorBand ; (; RooPlot * ; frame, . const RooFitResult & ; fr, . double ; Z, . const RooArgSet * ; params, . const RooLinkedList & ; argList, . bool ; linMethod . ); const. protected . Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ; Parameters. [in]frameRooPlot to plot on ; [in]frThe RooFitResult, where errors can be extracted ; [in]ZThe desired significance (width) of the error band ; [in]paramsIf non-zero, consider only the subset of the parameters in fr for the error evaluation ; [in]argListOptional RooCmdArg that can be applied to a regular plotOn() operation ; [in]linMethodBy default (linMethod=true), a linearized error is shown. . ReturnsThe RooPlot the band was plotted on (for chaining of plotting commands).; The linearized error is calculated as follows: ; \[; \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; \]. where ; \[; F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; \]. with \( f(x) \) the plotted curve and \( \mathrm{d}a \) taken from the fit result, and \( \mathrm{Corr}(a,a') \) = the correlation matrix from the fit result, and \( Z \) = requested signifance ( \( Z \sigma \) band); The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; Alternatively, a more robust error is calculated us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:138833,error,errors,138833,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,4,['error'],"['error', 'errors']"
Availability,"l::RField< TObject >::GetOffsetUniqueIDstatic std::size_t GetOffsetUniqueID()Definition RField.hxx:414; ROOT::Experimental::RField< TObject >::RFieldRField(RField &&other)=default; ROOT::Experimental::RField< TObject >::GetOffsetBitsstatic std::size_t GetOffsetBits()Definition RField.hxx:415; ROOT::Experimental::RField< TObject >::~RField~RField() final=default; ROOT::Experimental::RField< TObject >::operator=RField & operator=(RField &&other)=default; ROOT::Experimental::RFieldClasses with dictionaries that can be inspected by TClass.Definition RField.hxx:241; ROOT::Experimental::RField::RFieldRField(std::string_view name)Definition RField.hxx:244; ROOT::Experimental::RField::operator=RField & operator=(RField &&other)=default; ROOT::Experimental::RField::RFieldRField(RField &&other)=default; ROOT::Experimental::RField::~RField~RField() final=default; ROOT::Experimental::RField::TypeNamestatic std::string TypeName()Definition RField.hxx:243; ROOT::Experimental::RInvalidFieldUsed in RFieldBase::Check() to record field creation failures.Definition RField.hxx:76; ROOT::Experimental::RInvalidField::GetValueSizesize_t GetValueSize() const finalThe number of bytes taken by a value of the appropriate type.Definition RField.hxx:94; ROOT::Experimental::RInvalidField::GetErrorconst std::string & GetError() constDefinition RField.hxx:92; ROOT::Experimental::RInvalidField::RInvalidFieldRInvalidField(std::string_view name, std::string_view type, std::string_view error)Definition RField.hxx:87; ROOT::Experimental::RInvalidField::fErrorstd::string fErrorDefinition RField.hxx:77; ROOT::Experimental::RInvalidField::ConstructValuevoid ConstructValue(void *) const finalConstructs value in a given location of size at least GetValueSize(). Called by the base class' Creat...Definition RField.hxx:84; ROOT::Experimental::RInvalidField::CloneImplstd::unique_ptr< RFieldBase > CloneImpl(std::string_view newName) const finalCalled by Clone(), which additionally copies the on-disk ID.Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RField_8hxx_source.html:35332,failure,failures,35332,doc/master/RField_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RField_8hxx_source.html,1,['failure'],['failures']
Availability,"l::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManagerRooAbsCachedPdf::_cacheMgrThe cache manager ; RooSetProxy_cacheObsNon-convolution observables that are also cached; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedPdf::_ipOrderInterpolation order for cache histograms ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooFFTConvPdf.html:46745,error,errors,46745,root/html534/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html534/RooFFTConvPdf.html,1,['error'],['errors']
Availability,"l::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManagerRooAbsCachedPdf::_cacheMgrThe cache manager ; RooSetProxy_cacheObsNon-convolution observables that are also cached; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedPdf::_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFFTConvPdf.html:43122,error,errors,43122,root/html526/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html526/RooFFTConvPdf.html,4,['error'],['errors']
Availability,"l; DeleteText()TPaveTextvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTPavevirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""") overrideTPaveTextvirtual; DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2)TBoxvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawFile(const char *filename, Option_t *option="""")TPaveTextvirtual; DrawPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize=4, Option_t *option=""br"")TPavevirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EditText()TPaveTextvirtual; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTPavevirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fBorderSizeTPaveprotected; fCornerRadiusTPaveprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fInitTPaveprotected; fLabelTPaveTextprotected; fLineColorTAttLineprotected; fLinesTPaveTextprotected; fLineStyleTAttLineprotected; fLineWidthTAttLineprotected; fLongestTPaveTextprotected; fMarginTPaveTextprotected; fNameTPaveprotected; fOptionTPaveprotected; fResizingTBoxprotected; fShadowColorTPaveprotected; fTextAlignTAttTextprotected; fTextAngleTAttTextprotected; fTextColorTAttTextprotected; fTextFontTAttTextprotected; fTextSizeTAttTextprotected; fTipTBoxprivate; fUniqueIDTObjectprivate; fX1TBoxpro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaveText-members.html:2242,error,error,2242,doc/master/classTPaveText-members.html,https://root.cern,https://root.cern/doc/master/classTPaveText-members.html,2,['error'],['error']
Availability,"l; Double_tfTestStatisticDataresult of the test statistic evaluated on data; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HypoTestResult(const char* name = 0); Default constructor. HypoTestResult(const char* name, Double_t nullp, Double_t altp); Alternate constructor. ~HypoTestResult(); Destructor. void Append(const RooStats::HypoTestResult* other); Add additional toy-MC experiments to the current results.; Use the data test statistics of the added object if it is not already; set (otherwise, ignore the new one). void SetAltDistribution(RooStats::SamplingDistribution* alt). void SetNullDistribution(RooStats::SamplingDistribution* null). void SetTestStatisticData(const Double_t tsd). void SetPValueIsRightTail(Bool_t pr). Bool_t HasTestStatisticData(void). Double_t NullPValueError() const. Double_t CLbError() const. Double_t CLsplusbError() const. Double_t CLsError() const; Returns an estimate of the error on CLs through combination of the; errors on CLb and CLsplusb:. void UpdatePValue(const RooStats::SamplingDistribution* distr, Double_t* pvalue, Bool_t pIsRightTail); updates the pvalue if sufficient data is available. explicit HypoTestResult(const char* name = 0); default constructor. Double_t NullPValue() const; Return p-value for null hypothesis. { return fNullPValue; }. Double_t AlternatePValue() const; Return p-value for alternate hypothesis. { return fAlternatePValue; }. Double_t CLb() const; Convert NullPValue into a ""confidence level"". { return 1.-NullPValue(); }. Double_t CLsplusb() const; Convert AlternatePValue into a ""confidence level"". { return AlternatePValue(); }. Double_t CLs() const; CLs is simply CLs+b/CLb (not a method, but a quantity). Double_t Significance() const; familiar name for the Null p-value in terms of 1-sided Gaussian significance. {return RooStats::PValueToSignificance( NullPValue() ); }. SamplingDistribution* GetNullDistribution(void); { return fNullDist",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HypoTestResult.html:8360,error,error,8360,root/html528/RooStats__HypoTestResult.html,https://root.cern,https://root.cern/root/html528/RooStats__HypoTestResult.html,2,['error'],"['error', 'errors']"
Availability,"l; a box is drawn for each cell with a color scale varying with contents;; 3.21.2.2.5 Text; draw bin contents as text;; 3.21.2.2.6 Box; a box is drawn for each cell with surface proportional to contents;; 3.21.2.2.7 Scat; draw a scatter-plot (default);; 3.21.2.2.8 Palette; the color palette is drawn.; 3.21.2.3 3-D Plot; 3.21.2.3.1 Type; set histogram type to Lego or surface plot; draw (Lego, Lego1.2, Surf, Surf1…5); 3.21.2.3.2 Coords; set the coordinate system (Cartesian, Spheric, etc.);; 3.21.2.3.3 Cont #; set the number of Contours (for e.g. Lego2 draw option);; 3.21.2.3.4 Errors; draw errors in a Cartesian lego plot;; 3.21.2.3.5 Palette; draw the color palette;; 3.21.2.3.6 Front; draw the front box of a Cartesian lego plot;; 3.21.2.3.7 Back; draw the back box of a Cartesian lego plot;; 3.21.2.3.8 Bar; change the bar attributes: the width and offset.; 3.21.2.4 Rebinning Tab; The Rebinning tab has two different layouts. One is for a histogram that is not drawn from an ntuple; the other one is available for a histogram, which is drawn from an ntuple. In this case, the rebin algorithm can create a rebinned histogram from the original data i.e. the ntuple. To see the differences do for example:; TFile f (""hsimple.root"");; hpxpy->Draw(""Lego2""); // non ntuple histogram; ntuple->Draw(""px:py"","""",""Lego2""); // ntuple histogram; 3.21.2.5 Non-ntuple histogram:; Rebin with sliders (one for the x, one for the y-axis) and the number of bins (shown in the field below them can be changed to any number, which divides the number of bins of the original histogram. Selecting the Apply button will delete the origin histogram and will replace it by the rebinned one on the screen. Selecting the Ignore the origin histogram will be restored. 3.21.2.6 Histogram drawn from an ntuple; 3.21.2.6.1 Rebin; with the sliders the number of bins can be enlarged by a factor of 2,3,4,5 (moving to the right) or reduced by a factor of \(\frac{1}{2}\), \(\frac{1}{3}\), \(\frac{1}{4}\), \(\frac{1}{5}\).; 3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:139802,avail,available,139802,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avail'],['available']
Availability,"l;; 382 }; 383 else if ( kCoordError == fErrorType ); 384 {; 385 fDataError[i]/= val;; 386 }; 387 else if ( kAsymError == fErrorType ); 388 {; 389 fDataErrorHigh[i]/= val;; 390 fDataErrorLow[i]/= val;; 391 }; 392 else; 393 assert(false);; 394 }; 395 ; 396 if ( kNoError == fErrorType ); 397 {; 398 fErrorType = kValueError;; 399 }; 400 ; 401 return *this;; 402 }; 403 ; 404 ; 405 /**; 406 add one dim data with only coordinate and values; 407 */; 408 void BinData::Add( double x, double y ); 409 {; 410 assert( kNoError == fErrorType );; 411 ; 412 assert( !fData.empty() && fDataPtr );; 413 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 414 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 415 assert( fDataError.empty() && !fDataErrorPtr );; 416 assert( fCoordErrors.empty() && fCoordErrorsPtr.empty() );; 417 ; 418 fData[ fNPoints ] = y;; 419 ; 420 FitData::Add( x );; 421 fSumContent += y;; 422 }; 423 ; 424 /**; 425 add one dim data with no error in the coordinate (x); 426 in this case store the inverse of the error in the value (y); 427 */; 428 void BinData::Add( double x, double y, double ey ); 429 {; 430 assert( kValueError == fErrorType );; 431 assert( !fData.empty() && fDataPtr );; 432 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 433 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 434 assert( !fDataError.empty() && fDataErrorPtr );; 435 assert( fCoordErrors.empty() && fCoordErrorsPtr.empty() );; 436 ; 437 fData[ fNPoints ] = y;; 438 fDataError[ fNPoints ] = (ey != 0.0) ? 1.0/ey : 0.0;; 439 ; 440 FitData::Add( x );; 441 fSumContent += y;; 442 if (y != 0 || ey != 1.0) fSumError2 += ey*ey;; 443 // set the weight flag checking if error^2 != y; 444 if (!fIsWeighted); 445 if (y != 0 && std::abs( ey*ey/y - 1.0) > 1.E-12) fIsWeighted = true;; 446 }; 447 ; 448 /**; 449 add one dim data with error in the coordinate (x); 450 in this case store the value (y) error and not the inverse; 451 */; 452 void BinData::Add( double x, double y, double ex, do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:12270,error,error,12270,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,2,['error'],['error']
Availability,"lAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TMatrixDSym_cov; TMatrixDSym_covI; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; Double_t_det; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; map<int,GenData>_genCache!; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooListProxy_mu; TVectorD_muVec! Do not persist; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probabli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMultiVarGaussian.html:37178,error,errors,37178,root/html526/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html526/RooMultiVarGaussian.html,3,['error'],['errors']
Availability,"lColor"",0,-999) ;; 1694 pc.defineInt(""fillStyle"",""FillStyle"",0,-999) ;; 1695 pc.defineString(""curveName"",""Name"",0,"""") ;; 1696 pc.defineInt(""curveInvisible"",""Invisible"",0,0) ;; 1697 pc.defineInt(""showProg"",""ShowProgress"",0,0) ;; 1698 pc.defineInt(""numCPU"",""NumCPU"",0,1) ;; 1699 pc.defineInt(""interleave"",""NumCPU"",1,0) ;; 1700 pc.defineString(""addToCurveName"",""AddTo"",0,"""") ;; 1701 pc.defineDouble(""addToWgtSelf"",""AddTo"",0,1.) ;; 1702 pc.defineDouble(""addToWgtOther"",""AddTo"",1,1.) ;; 1703 pc.defineInt(""moveToBack"",""MoveToBack"",0,0) ;; 1704 pc.defineMutex(""SliceVars"",""Project"") ;; 1705 pc.defineMutex(""AddTo"",""Asymmetry"") ;; 1706 pc.defineMutex(""Range"",""RangeWithName"") ;; 1707 pc.defineMutex(""VisualizeError"",""VisualizeErrorData"") ;; 1708 ; 1709 // Process & check varargs; 1710 pc.process(argList) ;; 1711 if (!pc.ok(true)) {; 1712 return frame ;; 1713 }; 1714 ; 1715 TString drawOpt(pc.getString(""drawOption""));; 1716 ; 1717 RooFitResult* errFR = static_cast<RooFitResult*>(pc.getObject(""errorFR"")) ;; 1718 if (!drawOpt.Contains(""P"") && errFR) {; 1719 return plotOnWithErrorBand(frame, *errFR, pc.getDouble(""errorZ""), pc.getSet(""errorPars""), argList,; 1720 pc.getInt(""linearMethod""));; 1721 }; 1722 ; 1723 // Extract values from named arguments; 1724 PlotOpt o ;; 1725 o.numee = pc.getInt(""numee"") ;; 1726 o.drawOptions = drawOpt.Data();; 1727 o.curveNameSuffix = pc.getString(""curveNameSuffix"") ;; 1728 o.scaleFactor = pc.getDouble(""scaleFactor"") ;; 1729 o.stype = (ScaleType) pc.getInt(""scaleType"") ;; 1730 o.projData = static_cast<const RooAbsData*>(pc.getObject(""projData"")) ;; 1731 o.binProjData = pc.getInt(""binProjData"") ;; 1732 o.projDataSet = pc.getSet(""projDataSet"");; 1733 o.numCPU = pc.getInt(""numCPU"") ;; 1734 o.interleave = (RooFit::MPSplit) pc.getInt(""interleave"") ;; 1735 o.eeval = pc.getDouble(""evalErrorVal"") ;; 1736 o.doeeval = pc.getInt(""doEvalError"") ;; 1737 o.errorFR = errFR;; 1738 ; 1739 const RooArgSet* sliceSetTmp = pc.getSet(""sliceSet"");; 1740 std::unique_ptr<RooArgSet> ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:74648,error,errorFR,74648,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['error'],['errorFR']
Availability,"lColor(2);. mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");. return c1;; }; Graphs with error bars; Three classes are available to handle graphs with error bars:; TGraphErrors, TGraphAsymmErrors and TGraphBentErrors.; The following drawing options are specific to graphs with error bars:. ""Z""; Do not draw small horizontal and vertical lines the end of the error bars.; Without ""Z"", the default is to draw these. "">""; An arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""|>""; A filled arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; Do not draw error bars. By default, graph classes that have errors; are drawn with the errors (TGraph itself has no errors, and so this option; has no effect.). ""||""; Draw only the small vertical/horizontal lines at the ends of the; error bars, without drawing the bars themselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like option ""2"". In addition the contour line; around the boxes is drawn. This can be useful when boxes' fill colors are very; light or in gray scale mode. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gSty",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraphPainter.html:5994,error,errors,5994,root/html532/TGraphPainter.html,https://root.cern,https://root.cern/root/html532/TGraphPainter.html,8,['error'],['errors']
Availability,"lColor(9);; ; TGraph *gr3 = new TGraph(n,xvalues3,yvalues3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);; ; mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");; ; return c1;; }; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::Addvirtual void Add(TGraph *graph, Option_t *chopt="""")Add a new graph to the list of graphs.Definition TMultiGraph.cxx:419; TMultiGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this multigraph with its current attributes.Definition TMultiGraph.cxx:508; . Graphs with error bars; Three classes are available to handle graphs with error bars: TGraphErrors, TGraphAsymmErrors and TGraphBentErrors. The following drawing options are specific to graphs with error bars:. Option Description . ""Z"" Do not draw small horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. . "">"" An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""|>"" A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:8263,error,error,8263,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,1,['error'],['error']
Availability,"lColor);; 3415 fYaxis.SetLabelFont(yLabelFont);; 3416 fYaxis.SetLabelOffset(yLabelOffset);; 3417 fYaxis.SetLabelSize(yLabelSize);; 3418 fYaxis.SetTickLength(yTickLength);; 3419 fYaxis.SetTitleOffset(yTitleOffset);; 3420 fYaxis.SetTitleSize(yTitleSize);; 3421 fYaxis.SetTitleColor(yTitleColor);; 3422 fYaxis.SetTitleFont(yTitleFont);; 3423 // Restore z axis attributes; 3424 fZaxis.SetNdivisions(nZdivisions);; 3425 fZaxis.SetAxisColor(zAxisColor);; 3426 fZaxis.SetLabelColor(zLabelColor);; 3427 fZaxis.SetLabelFont(zLabelFont);; 3428 fZaxis.SetLabelOffset(zLabelOffset);; 3429 fZaxis.SetLabelSize(zLabelSize);; 3430 fZaxis.SetTickLength(zTickLength);; 3431 fZaxis.SetTitleOffset(zTitleOffset);; 3432 fZaxis.SetTitleSize(zTitleSize);; 3433 fZaxis.SetTitleColor(zTitleColor);; 3434 fZaxis.SetTitleFont(zTitleFont);; 3435 ; 3436 //restore statistics and entries modified by SetBinContent; 3437 hnew->SetEntries(entries);; 3438 if (!resetStat) hnew->PutStats(stat);; 3439 ; 3440 delete [] oldBins;; 3441 if (oldSumw2) delete [] oldSumw2;; 3442 return hnew;; 3443}; 3444 ; 3445 ; 3446////////////////////////////////////////////////////////////////////////////////; 3447/// Reset this histogram: contents, errors, etc.; 3448 ; 3449void TH3::Reset(Option_t *option); 3450{; 3451 TH1::Reset(option);; 3452 TString opt = option;; 3453 opt.ToUpper();; 3454 if (opt.Contains(""ICE"") && !opt.Contains(""S"")) return;; 3455 fTsumwy = 0;; 3456 fTsumwy2 = 0;; 3457 fTsumwxy = 0;; 3458 fTsumwz = 0;; 3459 fTsumwz2 = 0;; 3460 fTsumwxz = 0;; 3461 fTsumwyz = 0;; 3462}; 3463 ; 3464 ; 3465////////////////////////////////////////////////////////////////////////////////; 3466/// Set bin content.; 3467 ; 3468void TH3::SetBinContent(Int_t bin, Double_t content); 3469{; 3470 fEntries++;; 3471 fTsumw = 0;; 3472 if (bin < 0) return;; 3473 if (bin >= fNcells) return;; 3474 UpdateBinContent(bin, content);; 3475}; 3476 ; 3477 ; 3478////////////////////////////////////////////////////////////////////////////////; 3479/// Str",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:135455,error,errors,135455,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['error'],['errors']
Availability,"lDefinition TROOT.h:379; ROOT::Internal::DisableParBranchProcessingvoid DisableParBranchProcessing()Globally disables the IMT use case of parallel branch processing, deactivating the corresponding lock...Definition TROOT.cxx:434; ROOT::Internal::ErrorSystemMsgHandlerFunc_tstd::function< const char *()> ErrorSystemMsgHandlerFunc_tRetrieves the error string associated with the last system error.Definition TError.h:59; ROOT::Internal::IsImplicitMTEnabledImplstatic Bool_t & IsImplicitMTEnabledImpl()Keeps track of the status of ImplicitMT w/o resorting to the load of libImt.Definition TROOT.cxx:463; ROOT::Internal::MinimalErrorHandlervoid MinimalErrorHandler(int level, Bool_t abort, const char *location, const char *msg)A very simple error handler that is usually replaced by the TROOT default error handler.Definition TError.cxx:67; ROOT::Internal::GetROOTFun_tTROOT *(* GetROOTFun_t)()Definition TROOT.cxx:397; ROOT::Internal::SetErrorSystemMsgHandlerErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler(ErrorSystemMsgHandlerFunc_t h)Returns the previous system error message handler.Definition TError.cxx:56; ROOT::Internal::EnableParBranchProcessingvoid EnableParBranchProcessing()Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in...Definition TROOT.cxx:420; ROOT::Internal::IsParBranchProcessingEnabledBool_t IsParBranchProcessingEnabled()Returns true if parallel branch processing is enabled.Definition TROOT.cxx:447; ROOT::Internal::GetROOT2TROOT * GetROOT2()Definition TROOT.cxx:387; ROOT::Internal::GetROOT1TROOT * GetROOT1()Definition TROOT.cxx:380; ROOT::Internal::ReleaseDefaultErrorHandlervoid ReleaseDefaultErrorHandler()Destructs resources that are taken by using the default error handler.Definition TErrorDefaultHandler.cxx:47; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8cxx_source.html:171749,error,error,171749,doc/v632/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8cxx_source.html,1,['error'],['error']
Availability,"lDefinition TROOT.h:379; ROOT::Internal::DisableParBranchProcessingvoid DisableParBranchProcessing()Globally disables the IMT use case of parallel branch processing, deactivating the corresponding lock...Definition TROOT.cxx:434; ROOT::Internal::ErrorSystemMsgHandlerFunc_tstd::function< const char *()> ErrorSystemMsgHandlerFunc_tRetrieves the error string associated with the last system error.Definition TError.h:60; ROOT::Internal::IsImplicitMTEnabledImplstatic Bool_t & IsImplicitMTEnabledImpl()Keeps track of the status of ImplicitMT w/o resorting to the load of libImt.Definition TROOT.cxx:463; ROOT::Internal::MinimalErrorHandlervoid MinimalErrorHandler(int level, Bool_t abort, const char *location, const char *msg)A very simple error handler that is usually replaced by the TROOT default error handler.Definition TError.cxx:67; ROOT::Internal::GetROOTFun_tTROOT *(* GetROOTFun_t)()Definition TROOT.cxx:397; ROOT::Internal::SetErrorSystemMsgHandlerErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler(ErrorSystemMsgHandlerFunc_t h)Returns the previous system error message handler.Definition TError.cxx:56; ROOT::Internal::EnableParBranchProcessingvoid EnableParBranchProcessing()Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in...Definition TROOT.cxx:420; ROOT::Internal::IsParBranchProcessingEnabledBool_t IsParBranchProcessingEnabled()Returns true if parallel branch processing is enabled.Definition TROOT.cxx:447; ROOT::Internal::GetROOT2TROOT * GetROOT2()Definition TROOT.cxx:387; ROOT::Internal::GetROOT1TROOT * GetROOT1()Definition TROOT.cxx:380; ROOT::Internal::ReleaseDefaultErrorHandlervoid ReleaseDefaultErrorHandler()Destructs resources that are taken by using the default error handler.Definition TErrorDefaultHandler.cxx:47; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:171925,error,error,171925,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,1,['error'],['error']
Availability,"lEntries=-1);  Get next range of entries to be processed on this server. ;  ; void GetOptions (Int_t *argc, char **argv) override;  Get and handle command line options. ;  ; const char * GetOrdinal () const;  ; TPackMgr * GetPackMgr () const;  ; const char * GetPrefix () const;  ; TProof * GetProof () const;  ; Int_t GetProtocol () const;  ; Int_t GetQuerySeqNum () const;  ; Float_t GetRealTime () const;  ; const char * GetService () const;  ; const char * GetSessionDir () const;  ; const char * GetSessionTag () const;  ; TSocket * GetSocket () const;  ; const char * GetTopSessionTag () const;  ; Int_t GetTotSessions () const;  ; const char * GetUser () const;  ; const char * GetWorkDir () const;  ; virtual EQueryAction GetWorkers (TList *workers, Int_t &prioritychange, Bool_t resume=kFALSE);  Get list of workers to be used from now on. ;  ; void HandleException (Int_t sig) override;  Exception handler: we do not try to recover here, just exit. ;  ; virtual void HandleSigPipe ();  Called when the client is not alive anymore (i.e. ;  ; virtual void HandleSocketInput ();  Handle input coming from the client or from the master server. ;  ; virtual Int_t HandleSocketInput (TMessage *mess, Bool_t all);  Process input coming from the client or from the master server. ;  ; virtual void HandleTermination ();  ; virtual void HandleUrgentData ();  Handle Out-Of-Band data sent by the master or client. ;  ; void Interrupt ();  ; TClass * IsA () const override;  ; Bool_t IsEndMaster () const;  ; Bool_t IsMaster () const;  ; Bool_t IsParallel () const;  True if in parallel mode. ;  ; Bool_t IsTopMaster () const;  ; void LogToMaster (Bool_t on=kTRUE);  ; void Print (Option_t *option="""") const override;  Print status of slave server. ;  ; Int_t ReceiveFile (const char *file, Bool_t bin, Long64_t size);  Receive a file, either sent by a client or a master server. ;  ; virtual void ReleaseWorker (const char *);  ; void Reset (const char *dir);  Reset PROOF environment to be ready for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServ.html:3860,alive,alive,3860,doc/master/classTProofServ.html,https://root.cern,https://root.cern/doc/master/classTProofServ.html,1,['alive'],['alive']
Availability,"lErrorData().mode == CountErrors) {; 3415 evalErrorData().count++ ;; 3416 return ;; 3417 }; 3418 ; 3419 static bool inLogEvalError = false ;; 3420 ; 3421 if (inLogEvalError) {; 3422 return ;; 3423 }; 3424 inLogEvalError = true ;; 3425 ; 3426 EvalError ee ;; 3427 ee.setMessage(message) ;; 3428 ; 3429 if (serverValueString) {; 3430 ee.setServerValues(serverValueString) ;; 3431 }; 3432 ; 3433 if (evalErrorData().mode == PrintErrors) {; 3434 oocoutE(nullptr,Eval) << ""RooAbsReal::logEvalError("" << ""<STATIC>"" << "") evaluation error, "" << std::endl; 3435 << "" origin : "" << origName << std::endl; 3436 << "" message : "" << ee._msg << std::endl; 3437 << "" server values: "" << ee._srvval << std::endl ;; 3438 } else if (evalErrorData().mode == CollectErrors) {; 3439 auto &evalErrorList = evalErrorData().errorList[originator];; 3440 evalErrorList.first = origName ;; 3441 evalErrorList.second.push_back(ee) ;; 3442 }; 3443 ; 3444 ; 3445 inLogEvalError = false ;; 3446}; 3447 ; 3448 ; 3449 ; 3450////////////////////////////////////////////////////////////////////////////////; 3451/// Log evaluation error message. Evaluation errors may be routed through a different; 3452/// protocol than generic RooFit warning message (which go straight through RooMsgService); 3453/// because evaluation errors can occur in very large numbers in the use of likelihood; 3454/// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); 3455/// messages reported through this function are not printed but all stored in a list,; 3456/// along with server values at the time of reporting. Error messages logged in this; 3457/// way can be printed in a structured way, eliminating duplicates and with the ability; 3458/// to truncate the list by printEvalErrors. This is the standard mode of error logging; 3459/// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; 3460/// reported through this method are passed for immediate printing through RooMsgService.; 3461/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:147676,error,error,147676,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['error'],['error']
Availability,"lErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4254 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 548 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3542 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy the cached value of another RooAbsArg to our cache. ; Warning: This function just copies the cached values of source, it is the callers responsibility to make sure the cache is clean. ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, and RooRealVar.; Definition at line 2997 of file RooAbsReal.cxx. ◆ createChi2() [1/4]. RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \chi^2 \) variable from a histogram and this function. ; Parameters. arg1,arg2,arg3,arg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:78143,error,error,78143,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['error'],['error']
Availability,"lErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4330 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 558 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3622 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy the cached value of another RooAbsArg to our cache. ; Warning: This function just copies the cached values of source, it is the callers responsibility to make sure the cache is clean. ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, and RooRealVar.; Definition at line 3082 of file RooAbsReal.cxx. ◆ createChi2() [1/4]. RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \chi^2 \) variable from a histogram and this function. ; Parameters. arg1,arg2,arg3,arg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:79411,error,error,79411,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['error'],['error']
Availability,"lField< std::int32_t >;  ; class  RIntegralField< std::int64_t >;  ; class  RIntegralField< std::int8_t >;  ; class  RIntegralField< std::uint16_t >;  ; class  RIntegralField< std::uint32_t >;  ; class  RIntegralField< std::uint64_t >;  ; class  RIntegralField< std::uint8_t >;  ; class  RInvalidField;  Used in RFieldBase::Check() to record field creation failures. More...;  ; class  RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  ; class  RMapField;  Template specializations for C++ std::[unordered_][multi]map. More...;  ; class  RMenuItems;  List of items for object context menu. More...;  ; class  RNTupleChainProcessor;  Processor specializiation for vertically concatenated RNTuples (chains). More...;  ; class  RNTupleClusterRange;  Used to loop over entries of collections in a single cluster. More...;  ; class  RNTupleCollectionView;  A view for a collection, that can itself generate new ntuple views for its nested fields. More...;  ; class  RNTupleDescriptor;  The on-storage meta-data of an ntuple. More...;  ; class  RNTupleDirectAccessView;  A view variant that provides direct access to the I/O buffers. More...;  ; class  RNTupleDS;  The RDataSource implementa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:17150,error,errors,17150,doc/master/namespaceROOT_1_1Experimental.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html,1,['error'],['errors']
Availability,"lFileName ();  ;  Static Public Member Functions inherited from RooNumRunningInt; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsCachedReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumCdf.html:47408,error,error,47408,doc/master/classRooNumCdf.html,https://root.cern,https://root.cern/doc/master/classRooNumCdf.html,1,['error'],['error']
Availability,"lFitter::Fitter(mygraph)->SetFCN(MyFittingFunction); where MyFittingFunction is of type:; extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);. Access to the fit result. The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; By default the TFitResultPtr contains only the status of the fit and it converts; automatically to an integer. If the option ""S"" is instead used, TFitResultPtr contains; the TFitResult and behaves as a smart pointer to it. For example one can do:; TFitResultPtr r = graph->Fit(""myFunc"",""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t par0 = r->Parameter(0); // retrieve the value for the parameter 0; Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file. The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; from the fitted function. Associated functions. One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated to each graph.; When TGraph::Fit is invoked, the fitted function is added to this list.; Given a graph gr, one can retrieve an associated function; with: TF1 *myfunc = gr->GetFunction(""myfunc"");. If the graph is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Fit Statistics. You can change the statistics box to display the fit parameters with; the TStyle::SetOptFit(mode) method. This mode has four digits.; mode = pcev (default = 0111); v = 1; print name/values of parameters; e = 1; prin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiGraph.html:13571,error,error,13571,root/html528/TMultiGraph.html,https://root.cern,https://root.cern/root/html528/TMultiGraph.html,6,['error'],['error']
Availability,"lFraction = -1 or call the method SetShortestInterval(); NOTE: The BayesianCaluclator covers only the case with one; single parameter of interest. double GetMode() const; Returns the value of the parameter for the point in; parameter-space that is the most likely.; How do we do if there are points that are equi-probable?; use approximate posterior; t.b.d use real function to find the mode. void ComputeIntervalUsingRooFit(double c1, double c2) const; compute the interval using RooFit. void ComputeIntervalFromCdf(double c1, double c2) const; compute the interval using Cdf integration. void ApproximatePosterior() const; approximate posterior in nbins using a TF1 and; scan the values. void ComputeIntervalFromApproxPosterior(double c1, double c2) const; compute the interval using the approximate posterior function. void ComputeShortestInterval() const; compute the shortest interval. BayesianCalculator(); constructor. void SetData(RooAbsData& data). void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). { SetTestSize(1.-cl); }. Double_t Size() const; Get the size of the test (eg. rate of Type I error). { return fSize; }. Double_t ConfidenceLevel() const; Get the Confidence level for the test. { return 1.-fSize; }. void SetLeftSideTailFraction(Double_t leftSideFraction); set the fraction of probability content on the left tail; Central limits use 0.5 (default case); for upper limits it is 0 and 1 for lower limit; For shortest intervals a negative value (i.e. -1) must be given. {fLeftSideFraction = leftSideFraction;}. void SetShortestInterval(); set the Bayesian calculator to compute the shorest interval (default is central interval); to switch off SetLeftSideTailFraction to the rght value. { fLeftSideFraction = -1; }. void SetBrfPrecision(double precision); set the precision of the Root",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__BayesianCalculator.html:10922,error,error,10922,root/html528/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html528/RooStats__BayesianCalculator.html,1,['error'],['error']
Availability,"lHistPainter*fPainter!Pointer to histogram painter; Int_tfSize!Real size of fX, fY and fZ; TStringTNamed::fTitleobject title; Double_t*fX[fNpoints]; Double_t*fY[fNpoints] Data set to be plotted; Double_t*fZ[fNpoints]; Double_tfZoutfHistogram bin height for points lying outside the interpolated area. private:. Bool_tfUserHistoTrue when SetHistogram has been called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraph2D(); Graph2D default constructor. TGraph2D(Int_t n, Int_t* x, Int_t* y, Int_t* z); Graph2D constructor with three vectors of ints as input. TGraph2D(Int_t n, Float_t* x, Float_t* y, Float_t* z); Graph2D constructor with three vectors of floats as input. TGraph2D(Int_t n, Double_t* x, Double_t* y, Double_t* z); Graph2D constructor with three vectors of doubles as input. TGraph2D(TH2* h2); Graph2D constructor with a TH2 (h2) as input.; Only the h2's bins within the X and Y axis ranges are used.; Empty bins, recognized when both content and errors are zero, are excluded. TGraph2D(const char* name, const char* title, Int_t n, Double_t* x, Double_t* y, Double_t* z); Graph2D constructor with name, title and three vectors of doubles as input.; name : name of 2D graph (avoid blanks); title : 2D graph title; if title is of the form ""stringt;stringx;stringy;stringz""; the 2D graph title is set to stringt, the x axis title to stringx,; the y axis title to stringy,etc. TGraph2D(Int_t n); Graph2D constructor. The arrays fX, fY and fZ should be filled via; calls to SetPoint. TGraph2D(const char* filename, const char* format = ""%lg %lg %lg"", Option_t* option = """"); Graph2D constructor reading input from filename; filename is assumed to contain at least three columns of numbers.; For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files); you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; e.g. option="" \t,;"" for columns of figures separated by any ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraph2D.html:18332,error,errors,18332,root/html534/TGraph2D.html,https://root.cern,https://root.cern/root/html534/TGraph2D.html,3,['error'],['errors']
Availability,"lHistPainter*fPainter!pointer to histogram painter; Int_tfSize!Real size of fX, fY and fZ; TStringTNamed::fTitleobject title; Double_t*fX[fNpoints]; Double_t*fY[fNpoints] Data set to be plotted; Double_t*fZ[fNpoints]; Double_tfZoutfHistogram bin height for points lying outside the interpolated area. private:. Bool_tfUserHistoTrue when SetHistogram has been called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraph2D(); Graph2D default constructor. TGraph2D(Int_t n, Int_t* x, Int_t* y, Int_t* z); Graph2D constructor with three vectors of ints as input. TGraph2D(Int_t n, Float_t* x, Float_t* y, Float_t* z); Graph2D constructor with three vectors of floats as input. TGraph2D(Int_t n, Double_t* x, Double_t* y, Double_t* z); Graph2D constructor with three vectors of doubles as input. TGraph2D(TH2* h2); Graph2D constructor with a TH2 (h2) as input.; Only the h2's bins within the X and Y axis ranges are used.; Empty bins, recognized when both content and errors are zero, are excluded. TGraph2D(const char* name, const char* title, Int_t n, Double_t* x, Double_t* y, Double_t* z); Graph2D constructor with name, title and three vectors of doubles as input.; name : name of 2D graph (avoid blanks); title : 2D graph title; if title is of the form ""stringt;stringx;stringy;stringz""; the 2D graph title is set to stringt, the x axis title to stringx,; the y axis title to stringy,etc. TGraph2D(Int_t n); Graph2D constructor. The arrays fX, fY and fZ should be filled via; calls to SetPoint. TGraph2D(const char* filename, const char* format = ""%lg %lg %lg"", Option_t* option = """"); Graph2D constructor reading input from filename; filename is assumed to contain at least three columns of numbers. TGraph2D(const TGraph2D& ); Graph2D copy constructor. ~TGraph2D(); TGraph2D destructor. TGraph2D& operator=(const TGraph2D& ); Graph2D operator ""="". void Build(Int_t n); Creates the 2D graph basic data structure. void Clear(Option_t* option = """"); Free ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraph2D.html:17921,error,errors,17921,root/html528/TGraph2D.html,https://root.cern,https://root.cern/root/html528/TGraph2D.html,2,['error'],['errors']
Availability,"lHistPainter*fPainter!pointer to histogram painter; Int_tfSize!Real size of fX, fY and fZ; TStringTNamed::fTitleobject title; Double_t*fX[fNpoints]; Double_t*fY[fNpoints] Data set to be plotted; Double_t*fZ[fNpoints]; Double_tfZoutfHistogram bin height for points lying outside the interpolated area. private:. Bool_tfUserHistoTrue when SetHistogram has been called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraph2D(); Graph2D default constructor. TGraph2D(Int_t n, Int_t* x, Int_t* y, Int_t* z); Graph2D constructor with three vectors of ints as input. TGraph2D(Int_t n, Float_t* x, Float_t* y, Float_t* z); Graph2D constructor with three vectors of floats as input. TGraph2D(Int_t n, Double_t* x, Double_t* y, Double_t* z); Graph2D constructor with three vectors of doubles as input. TGraph2D(TH2* h2); Graph2D constructor with a TH2 (h2) as input.; Only the h2's bins within the X and Y axis ranges are used.; Empty bins, recognized when both content and errors are zero, are excluded. TGraph2D(const char* name, const char* title, Int_t n, Double_t* x, Double_t* y, Double_t* z); Graph2D constructor with name, title and three vectors of doubles as input.; name : name of 2D graph (avoid blanks); title : 2D graph title; if title is of the form ""stringt;stringx;stringy;stringz""; the 2D graph title is set to stringt, the x axis title to stringx,; the y axis title to stringy,etc. TGraph2D(Int_t n); Graph2D constructor. The arrays fX, fY and fZ should be filled via; calls to SetPoint. TGraph2D(const char* filename, const char* format = ""%lg %lg %lg"", Option_t* option = """"); Graph2D constructor reading input from filename; filename is assumed to contain at least three columns of numbers.; For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files); you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; e.g. option="" \t,;"" for columns of figures separated by any ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraph2D.html:18021,error,errors,18021,root/html532/TGraph2D.html,https://root.cern,https://root.cern/root/html532/TGraph2D.html,1,['error'],['errors']
Availability,"lMatrix; //! current pointer to cached global matrix; 83 TGeoHMatrix *fDivMatrix; //! current local matrix of the selected division cell; 84 TString fPath; //! path to current node; 85 ; 86 static Bool_t fgUsePWSafetyCaching; //! global mode is caching enabled for parallel world safety calls; 87 ; 88public:; 89 TGeoNavigator();; 90 TGeoNavigator(TGeoManager *geom);; 91 ~TGeoNavigator() override;; 92 ; 93 void BuildCache(Bool_t dummy = kFALSE, Bool_t nodeid = kFALSE);; 94 Bool_t cd(const char *path = """");; 95 Bool_t CheckPath(const char *path) const;; 96 void CdNode(Int_t nodeid);; 97 void CdDown(Int_t index);; 98 void CdDown(TGeoNode *node);; 99 void CdUp();; 100 void CdTop();; 101 void CdNext();; 102 void GetBranchNames(Int_t *names) const;; 103 void GetBranchNumbers(Int_t *copyNumbers, Int_t *volumeNumbers) const;; 104 void GetBranchOnlys(Int_t *isonly) const;; 105 Int_t GetNmany() const { return fNmany; }; 106 //--- geometry queries; 107 TGeoNode *CrossBoundaryAndLocate(Bool_t downwards, TGeoNode *skipnode);; 108 TGeoNode *FindNextBoundary(Double_t stepmax = TGeoShape::Big(), const char *path = """", Bool_t frombdr = kFALSE);; 109 TGeoNode *FindNextDaughterBoundary(Double_t *point, Double_t *dir, Int_t &idaughter, Bool_t compmatrix = kFALSE);; 110 TGeoNode *FindNextBoundaryAndStep(Double_t stepmax = TGeoShape::Big(), Bool_t compsafe = kFALSE);; 111 TGeoNode *FindNode(Bool_t safe_start = kTRUE);; 112 TGeoNode *FindNode(Double_t x, Double_t y, Double_t z);; 113 Double_t *FindNormal(Bool_t forward = kTRUE);; 114 Double_t *FindNormalFast();; 115 TGeoNode *InitTrack(const Double_t *point, const Double_t *dir);; 116 TGeoNode *InitTrack(Double_t x, Double_t y, Double_t z, Double_t nx, Double_t ny, Double_t nz);; 117 void ResetState();; 118 void ResetAll();; 119 Double_t Safety(Bool_t inside = kFALSE);; 120 TGeoNode *SearchNode(Bool_t downwards = kFALSE, const TGeoNode *skipnode = nullptr);; 121 TGeoNode *Step(Bool_t is_geom = kTRUE, Bool_t cross = kTRUE);; 122 const Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoNavigator_8h_source.html:5172,down,downwards,5172,doc/master/TGeoNavigator_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoNavigator_8h_source.html,1,['down'],['downwards']
Availability,"lName) const; 501{; 502 unsigned N = fColumnNames.size();; 503 ; 504 for (unsigned i = 0; i < N; ++i) {; 505 if (colName == fColumnNames[i]) {; 506 return fgTypeNames[static_cast<int>(fColumnTypes[i])];; 507 }; 508 }; 509 throw std::runtime_error(""Unknown column: "" + std::string(colName));; 510}; 511 ; 512////////////////////////////////////////////////////////////////////////////; 513/// A linear search through the columns for the given name; 514bool RSqliteDS::HasColumn(std::string_view colName) const; 515{; 516 return std::find(fColumnNames.begin(), fColumnNames.end(), colName) != fColumnNames.end();; 517}; 518 ; 519////////////////////////////////////////////////////////////////////////////; 520/// Resets the SQlite query engine at the beginning of the event loop.; 521void RSqliteDS::Initialize(); 522{; 523 fNRow = 0;; 524 int retval = sqlite3_reset(fDataSet->fQuery);; 525 if (retval != SQLITE_OK); 526 throw std::runtime_error(""SQlite error, reset"");; 527}; 528 ; 529std::string RSqliteDS::GetLabel(); 530{; 531 return ""RSqliteDS"";; 532}; 533 ; 534////////////////////////////////////////////////////////////////////////////////////////////////; 535/// \brief Factory method to create a SQlite RDataFrame.; 536/// \param[in] fileName Path of the sqlite file.; 537/// \param[in] query SQL query that defines the data set.; 538RDataFrame FromSqlite(std::string_view fileName, std::string_view query); 539{; 540 ROOT::RDataFrame rdf(std::make_unique<RSqliteDS>(std::string(fileName), std::string(query)));; 541 return rdf;; 542}; 543 ; 544////////////////////////////////////////////////////////////////////////////; 545/// Stores the result of the current active sqlite query row as a C++ value.; 546bool RSqliteDS::SetEntry(unsigned int /* slot */, ULong64_t entry); 547{; 548 assert(entry + 1 == fNRow);; 549 (void)entry;; 550 unsigned N = fValues.size();; 551 for (unsigned i = 0; i < N; ++i) {; 552 if (!fValues[i].fIsActive); 553 continue;; 554 ; 555 int nbytes;; 556 switch (fVal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RSqliteDS_8cxx_source.html:22141,error,error,22141,doc/master/RSqliteDS_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RSqliteDS_8cxx_source.html,1,['error'],['error']
Availability,"lPacketizer::EUseEstOptTVirtualPacketizer::kEstCurrent; static TVirtualPacketizer::EUseEstOptTVirtualPacketizer::kEstOff. private:. TList*fActivenodes with unfinished files; Bool_tfDefMaxWrkNodeWhether the default is used for the max workers per node; TList*fFileNodesnodes with files; Bool_tfHeuristicPSizWhether the packet size is calculated heuristically; Int_tfMaxPerfIdxmaximum of our slaves' performance index; Long_tfMaxSlaveCntmaximum number of workers per filenode (Long_t to avoid; Int_tfPacketAsAFractionused to calculate the packet size; Long64_tfPacketSizeglobal base packet size; TList*fPacketsall processed packets; TList*fUnAllocatednodes with unallocated files. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPacketizer(TDSet* dset, TList* slaves, Long64_t first, Long64_t num, TList* input, TProofProgressStatus* st); Constructor. ~TPacketizer(); Destructor. Int_t AddWorkers(TList* workers); Adds new workers. Returns the number of workers added, or -1 on failure. void RemoveUnAllocNode(TPacketizer::TFileNode* ); Remove unallocated node. void RemoveActive(TPacketizer::TFileStat* file); Remove file from the list of actives. void RemoveActiveNode(TPacketizer::TFileNode* ); Remove node from the list of actives. void Reset(); Reset the internal datastructure for packet distribution. void ValidateFiles(TDSet* dset, TList* slaves, Long64_t maxent = -1, Bool_t byfile = kFALSE); Check existence of file/dir/tree an get number of entries.; Assumes the files have been setup. Long64_t GetEntriesProcessed(TSlave* sl) const; Get entries processed by the specified slave. Float_t GetCurrentRate(Bool_t& all); Get Estimation of the current rate; just summing the current rates of; the active workers. TDSetElement * GetNextPacket(TSlave* sl, TMessage* r); Get next packet. Int_t GetActiveWorkers(); Return the number of workers still processing. TPacketizer(). TPacketizer(const TPacketizer& ). void operator=(const TPacketizer& ). TFileNode",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TPacketizer.html:11605,failure,failure,11605,root/html604/TPacketizer.html,https://root.cern,https://root.cern/root/html604/TPacketizer.html,1,['failure'],['failure']
Availability,lProxy _acp;  ; RooRealProxy _avgC;  ; RooRealProxy _avgS;  ; RooRealProxy _avgW;  ; Int_t _basisCos;  ; Int_t _basisExp;  ; Int_t _basisSin;  ; RooRealProxy _correctQ;  ; RooRealProxy _delC;  ; RooRealProxy _delS;  ; RooRealProxy _delW;  ; RooRealProxy _dm;  ; double _genB0Frac;  ; double _genRhoPlusFrac;  ; RooCategoryProxy _rhoQ;  ; RooRealProxy _t;  ; RooCategoryProxy _tag;  ; RooRealProxy _tau;  ; DecayType _type;  ; RooRealProxy _wQ;  dummy mischarge (must be set to zero!) ;  ;  Protected Attributes inherited from RooAbsAnaConvPdf; RooArgList _basisList;  ! List of created basis functions ;  ; RooAICRegistry _codeReg;  ! Registry of analytical integration codes ;  ; RooObjCacheManager _coefNormMgr;  ! Coefficient normalization manager ;  ; RooListProxy _convSet;  Set of (resModel (x) basisFunc) convolution objects. ;  ; RooRealProxy _convVar;  Convolution variable. ;  ; bool _isCopy;  ; RooRealProxy _model;  Original model. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNonCPEigenDecay.html:65501,error,errors,65501,doc/master/classRooNonCPEigenDecay.html,https://root.cern,https://root.cern/doc/master/classRooNonCPEigenDecay.html,1,['error'],['errors']
Availability,"lReduce methods. ; Definition at line 122 of file TThreadExecutor.cxx. ◆ R__AddPragmaForClass() [1/2]. static bool ROOT::Internal::R__AddPragmaForClass ; (; TTreeProxyGenerator * ; gen, . const char * ; classname . ). static . Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ; (I.e. return false if a container of this class can not have a ""pragma C++ class"" ; Definition at line 1588 of file TTreeProxyGenerator.cxx. ◆ R__AddPragmaForClass() [2/2]. static bool ROOT::Internal::R__AddPragmaForClass ; (; TTreeProxyGenerator * ; gen, . TClass * ; cl . ). static . Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ; (I.e. return false if a container of this class can not have a ""pragma C++ class"" ; Definition at line 1564 of file TTreeProxyGenerator.cxx. ◆ ReleaseDefaultErrorHandler(). void ROOT::Internal::ReleaseDefaultErrorHandler ; (; ). Destructs resources that are taken by using the default error handler. ; This function is called during the destruction of gROOT. ; Definition at line 47 of file TErrorDefaultHandler.cxx. ◆ RequiresCleanup(). Bool_t ROOT::Internal::RequiresCleanup ; (; TObject & ; obj). inline . Definition at line 386 of file TROOT.h. ◆ ResetReadEntry(). void ROOT::Internal::ResetReadEntry ; (; TFriendProxy * ; fp). Helper function to call SetReadEntry on all TFriendProxy. ; Definition at line 39 of file TBranchProxyDirector.cxx. ◆ SetErrorSystemMsgHandler(). ErrorSystemMsgHandlerFunc_t ROOT::Internal::SetErrorSystemMsgHandler ; (; ErrorSystemMsgHandlerFunc_t ; h). Returns the previous system error message handler. ; Definition at line 56 of file TError.cxx. ◆ SetRequireCleanup(). void ROOT::Internal::SetRequireCleanup ; (; TObject & ; obj). inline . Definition at line 381 of file TROOT.h. ◆ Sha256(). void ROOT::Internal::Sha256 ; (; const unsigned char * ; data, . int ; len, . ULong64_t * ; fDigest . ). Definition at line 267 of file R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Internal.html:40370,error,error,40370,doc/master/namespaceROOT_1_1Internal.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html,2,['error'],['error']
Availability,"lStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TAttLineLine Attributes class.Definition TAttLine.h:18; TAttLine::GetLineColorvirtual Color_t GetLineColor() constReturn the line color.Definition TAttLine.h:33; TAttLine::SetLineStylevirtual void SetLineStyle(Style_t lstyle)Set the line style.Definition TAttLine.h:42; TAttLine::GetLineWidthvirtual Width_t GetLineWidth() constReturn the line width.Definition TAttLine.h:35; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorAlphavirtual void SetLineColorAlpha(Color_t lcolor, Float_t lalpha)Set a transparent line color.Definition TAttLine.cxx:305; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttLine::GetLineStylevirtual Style_t GetLineStyle() constReturn the line style.Definition TAttLine.h:34; TF11-Dim function classDefinition TF1.h:233; TGraphMultiErrorsTGraph with asymmetric error bars and multiple y error dimensions.Definition TGraphMultiErrors.h:29; TGraphMultiErrors::fEyLSumDouble_t * fEyLSum! Array of summed Y low errors for fittingDefinition TGraphMultiErrors.h:39; TGraphMultiErrors::GetSumErrorsModeInt_t GetSumErrorsMode() constDefinition TGraphMultiErrors.h:165; TGraphMultiErrors::GetFillColorvirtual Color_t GetFillColor() constReturn the fill area color.Definition TAttFill.h:30; TGraphMultiErrors::GetEYhighDouble_t * GetEYhigh() const overrideGet all high errors on y coordinates as an array summed according to fSumErrorsMode.Definition TGraphMultiErrors.cxx:1588; TGraphMultiErrors::GetErrorXDouble_t GetErrorX(Int_t i) const overrideGet error on x coordinate for point i.Definition TGraphMultiErrors.cxx:1439; TGraphMultiErrors::GetFillStylevirtual Style_t GetFillStyle() constReturn the fill area style.Definition TAttFill.h:31; TGraphMultiErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t i) const overrideGet high error on x coordinate for point i.De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html:14975,error,error,14975,doc/master/TGraphMultiErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html,2,['error'],['error']
Availability,"lX.; Definition at line 186 of file TGX11.h. ◆ IconifyWindow(). void TGX11::IconifyWindow ; (; Window_t ; id). overridevirtual . Iconify the window. ; Reimplemented from TVirtualX.; Definition at line 330 of file GX11Gui.cxx. ◆ ImgPickPalette(). void TGX11::ImgPickPalette ; (; RXImage * ; image, . Int_t & ; ncol, . Int_t *& ; R, . Int_t *& ; G, . Int_t *& ; B . ). private . Returns in R G B the ncol colors of the palette used by the image. ; The image pixels are changed to index values in these R G B arrays. This produces a colormap with only the used colors (so even on displays with more than 8 planes we will be able to create GIF's when the image contains no more than 256 different colors). If it does contain more colors we will have to use GIFquantize to reduce the number of colors. The R G B arrays must be deleted by the caller. ; Definition at line 3331 of file TGX11.cxx. ◆ Init(). Bool_t TGX11::Init ; (; void * ; display). overridevirtual . Initialize X11 system. Returns kFALSE in case of failure. ; Reimplemented from TVirtualX.; Reimplemented in TGX11TTF.; Definition at line 342 of file TGX11.cxx. ◆ InitWindow(). Int_t TGX11::InitWindow ; (; ULong_t ; win). overridevirtual . Open window and return window number. ; Returns-1 if window initialization fails. ; Reimplemented from TVirtualX.; Definition at line 1301 of file TGX11.cxx. ◆ InternAtom(). Atom_t TGX11::InternAtom ; (; const char * ; atom_name, . Bool_t ; only_if_exist . ). overridevirtual . Return atom handle for atom_name. ; If it does not exist create it if only_if_exist is false. Atoms are used to communicate between different programs (i.e. window manager) via the X server. ; Reimplemented from TVirtualX.; Definition at line 900 of file GX11Gui.cxx. ◆ IntersectRegion(). void TGX11::IntersectRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Compute the intersection of rega and regb and return result region. ; The output region may be the same as the result reg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11.html:87494,failure,failure,87494,doc/master/classTGX11.html,https://root.cern,https://root.cern/doc/master/classTGX11.html,1,['failure'],['failure']
Availability,"lX::SetDrawMode ; (; EDrawMode ; mode). virtual . Sets the drawing mode. ; Parameters. [in]modedrawing mode.; mode = 1 copy; mode = 2 xor; mode = 3 invert; mode = 4 set the suitable mode for cursor echo according to the vendor . Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 774 of file TVirtualX.cxx. ◆ SetFillColor(). void TVirtualX::SetFillColor ; (; Color_t ; cindex). overridevirtual . Sets color index ""cindex"" for fill areas. ; Reimplemented from TAttFill.; Definition at line 781 of file TVirtualX.cxx. ◆ SetFillStyle(). void TVirtualX::SetFillStyle ; (; Style_t ; style). overridevirtual . Sets fill area style. ; Parameters. [in]stylecompound fill area interior style; style = 1000 * interiorstyle + styleindex . Reimplemented from TAttFill.; Definition at line 791 of file TVirtualX.cxx. ◆ SetForeground(). void TVirtualX::SetForeground ; (; GContext_t ; gc, . ULong_t ; foreground . ). virtual . Sets the foreground color for the specified GC (shortcut for ChangeGC with only foreground mask set). ; Parameters. [in]gcspecifies the GC ; [in]foregroundthe foreground you want to set. (see also the GCValues_t structure) ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 2105 of file TVirtualX.cxx. ◆ SetIconName(). void TVirtualX::SetIconName ; (; Window_t ; id, . char * ; name . ). virtual . Sets the window icon name. ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1713 of file TVirtualX.cxx. ◆ SetIconPixmap(). void TVirtualX::SetIconPixmap ; (; Window_t ; id, . Pixmap_t ; pix . ). virtual . Sets the icon name pixmap. ; Reimplemented in TGWin32, TGX11, TGWin32VirtualXProxy, and TGCocoa.; Definition at line 1720 of file TVirtualX.cxx. ◆ SetInputFocus(). void TVirtualX::SetInputFocus ; (; Window_t ; id). virtual . Changes the input focus to specified window ""id"". ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 19",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:122370,mask,mask,122370,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,1,['mask'],['mask']
Availability,"lZerovoid FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideSet zero values for point arrays in the range [begin, end].Definition TGraphMultiErrors.cxx:802; TGraphMultiErrors::fEyHstd::vector< TArrayD > fEyHTwo dimensional array of Y high errors.Definition TGraphMultiErrors.h:38; TGraphMultiErrors::GetLineStylevirtual Style_t GetLineStyle() constReturn the line style.Definition TAttLine.h:34; TGraphMultiErrors::SetPointEXvirtual void SetPointEX(Int_t i, Double_t exL, Double_t exH)Set ex values for point i.Definition TGraphMultiErrors.cxx:1844; TGraphMultiErrors::SetPointEYlowvirtual void SetPointEYlow(Int_t i, Int_t ne, const Double_t *eyL)Set eyL values for point i.Definition TGraphMultiErrors.cxx:1894; TGraphMultiErrors::Scalevoid Scale(Double_t c1=1., Option_t *option=""y"") overrideMultiply the values and errors of a TGraphMultiErrors by a constant c1.Definition TGraphMultiErrors.cxx:1766; TGraphMultiErrors::SetLineColorAlphavirtual void SetLineColorAlpha(Int_t e, Color_t lcolor, Float_t lalpha)Set Line Color and Alpha of error e (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2084; TGraphMultiErrors::GetEXlowDouble_t * GetEXlow() const overrideDefinition TGraphMultiErrors.h:141; TGraphMultiErrors::CalcYErrorsSumvoid CalcYErrorsSum() constRecalculates the summed y error arrays.Definition TGraphMultiErrors.cxx:822; TGraphMultiErrors::~TGraphMultiErrors~TGraphMultiErrors() overrideTGraphMultiErrors default destructor.Definition TGraphMultiErrors.cxx:697; TGraphMultiErrors::SetAttLinevirtual void SetAttLine(Int_t e, TAttLine *tal)Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2029; TGraphMultiErrors::fEyHSumDouble_t * fEyHSum! Array of summed Y high errors for fittingDefinition TGraphMultiErrors.h:40; TGraphMultiErrors::GetEYlowDouble_t * GetEYlow() const overrideGet all low errors on y coordinates as an array summed according to fSumErrorsMode.Definition TGrap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html:21680,error,error,21680,doc/master/TGraphMultiErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html,2,['error'],"['error', 'errors']"
Availability,"l_b). inline . Definition at line 164 of file Reader.h. ◆ Verbose(). Bool_t TMVA::Reader::Verbose ; (; void ; ); const. inline . Definition at line 114 of file Reader.h. Member Data Documentation. ◆ fCalculateError. Bool_t TMVA::Reader::fCalculateError. private . error calculation mode ; Definition at line 152 of file Reader.h. ◆ fColor. Bool_t TMVA::Reader::fColor. private . color mode ; Definition at line 151 of file Reader.h. ◆ fDataInputHandler. DataInputHandler TMVA::Reader::fDataInputHandler. private . Definition at line 138 of file Reader.h. ◆ fDataSetInfo. DataSetInfo TMVA::Reader::fDataSetInfo. private . Definition at line 136 of file Reader.h. ◆ fDataSetManager. DataSetManager* TMVA::Reader::fDataSetManager. private . Definition at line 128 of file Reader.h. ◆ fLogger. MsgLogger* TMVA::Reader::fLogger. mutableprivate . ! message logger ; Definition at line 161 of file Reader.h. ◆ fMethodMap. std::map<TString, IMethod*> TMVA::Reader::fMethodMap. private . map of methods ; Definition at line 157 of file Reader.h. ◆ fMvaEventError. Double_t TMVA::Reader::fMvaEventError. private . per-event error returned by MVA ; Definition at line 154 of file Reader.h. ◆ fMvaEventErrorUpper. Double_t TMVA::Reader::fMvaEventErrorUpper. private . per-event error returned by MVA ; Definition at line 155 of file Reader.h. ◆ fSilent. Bool_t TMVA::Reader::fSilent. private . silent mode ; Definition at line 150 of file Reader.h. ◆ fTmpEvalVec. std::vector<Float_t> TMVA::Reader::fTmpEvalVec. private . temporary evaluation vector (if user input is v<double>) ; Definition at line 159 of file Reader.h. ◆ fVerbose. Bool_t TMVA::Reader::fVerbose. private . verbosity ; Definition at line 149 of file Reader.h. Libraries for TMVA::Reader:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Reader.h; tmva/tmva/src/Reader.cxx. TMVAReader. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Reader.html:31119,error,error,31119,doc/master/classTMVA_1_1Reader.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Reader.html,2,['error'],['error']
Availability,"l_t HandleButton(Event_t* event); Handle button events in the list tree. Bool_t HandleDoubleClick(Event_t* event); Handle double click event in the list tree (only for kButton1). Bool_t HandleCrossing(Event_t* event); Handle mouse crossing event. Atom_t HandleDNDPosition(Int_t x, Int_t y, Atom_t action, Int_t xroot, Int_t yroot); Handle dragging position events. Atom_t HandleDNDEnter(Atom_t* typelist); Handle drag enter events. Bool_t HandleDNDLeave(); Handle drag leave events. Bool_t HandleDNDDrop(TDNDData* data); Handle drop events. void DataDropped(TGListTreeItem* item, TDNDData* data); Emit DataDropped() signal. Bool_t HandleMotion(Event_t* event); Handle mouse motion event. Used to set tool tip, to emit; MouseOver() signal and for DND handling. Bool_t HandleKey(Event_t* event); The key press event handler converts a key press to some line editor; action. void MouseOver(TGListTreeItem* entry); Signal emitted when pointer is over entry. void MouseOver(TGListTreeItem* entry, UInt_t mask); Signal emitted when pointer is over entry. void KeyPressed(TGListTreeItem* entry, UInt_t keysym, UInt_t mask); Signal emitted when keyboard key pressed. entry - selected item; keysym - defined in ""KeySymbols.h""; mask - modifier key mask, defined in ""GuiTypes.h"". const Mask_t kKeyShiftMask = BIT(0);; const Mask_t kKeyLockMask = BIT(1);; const Mask_t kKeyControlMask = BIT(2);; const Mask_t kKeyMod1Mask = BIT(3); // typically the Alt key; const Mask_t kButton1Mask = BIT(8);; const Mask_t kButton2Mask = BIT(9);; const Mask_t kButton3Mask = BIT(10);; const Mask_t kButton4Mask = BIT(11);; const Mask_t kButton5Mask = BIT(12);; const Mask_t kAnyModifier = BIT(15);. void ReturnPressed(TGListTreeItem* entry); Emit ReturnPressed() signal. void Checked(TObject* obj, Bool_t check); Emit Checked() signal. void Clicked(TGListTreeItem* entry, Int_t btn); Emit Clicked() signal. void Clicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Emit Clicked() signal. void Clicked(TGListTreeItem* ent",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGListTree.html:32284,mask,mask,32284,root/html528/TGListTree.html,https://root.cern,https://root.cern/root/html528/TGListTree.html,6,['mask'],['mask']
Availability,"l_t UseNamespaces = kFALSE); static TStringConvertToXML(const TObject* obj, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces = kFALSE); static TStringConvertToXML(const void* obj, const TClass* cl, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces = kFALSE); virtual voidTObject::Copy(TObject& object) const; virtual voidDecrementLevel(TVirtualStreamerInfo*); static TStringTXMLSetup::DefaultXmlSetup(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTBuffer::DetachBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidTBuffer::Expand(Int_t newsize, Bool_t copy = kTRUE); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidTBufferFile::ForceWriteInfo(TVirtualStreamerInfo* info, Bool_t force); virtual voidTBufferFile::ForceWriteInfoClones(TClonesArray* a); virtual Int_tTBufferFile::GetBufferDisplacement() const; Int_tTBuffer::GetBufferVersion() const; static TClass*TBuffer::GetClass(const type_info& typeinfo); static TClass*TBuffer::GetClass(const char* className); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); static const char*GetFloatFormat(); static Int_tTBufferFile::GetGlobalReadParam(); static Int_tTBufferFile::GetGlobalWriteParam(); virtual const char*TObject::GetIconName() const; virtual TVirtualStreamerInfo*TBufferFile::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBufferXML.html:3511,error,error,3511,root/html534/TBufferXML.html,https://root.cern,https://root.cern/root/html534/TBufferXML.html,3,['error'],['error']
Availability,"l_t bLoadLibs = kTRUE); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; const char*TApplication::WorkingDirectory() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static voidTApplication::Close(TApplication* app); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTApplication::Help(const char* line); virtual voidTApplication::LoadGraphicsLibs(); virtual voidTApplication::MakeBatch(); voidTObject::MakeZombie(); static TApplication*TApplication::Open(const char* url, Int_t debug, const char* script); static Int_tTApplication::ParseRemoteLine(const char* ln, TString& hostdir, TString& user, Int_t& dbg, TString& script); virtual Long_tTApplication::ProcessRemote(const char* line, Int_t* error = 0); voidTApplication::SetSignalHandler(TSignalHandler* sh). Data Members; public:. static TApplication::EExitOnExceptionTApplication::kAbort; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TApplication::EStatusBitsTApplication::kDefaultApplication; static TApplication::EExitOnExceptionTApplication::kDontExit; static TApplication::EExitOnE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/PyROOT__TPyROOTApplication.html:12216,error,error,12216,root/html602/PyROOT__TPyROOTApplication.html,https://root.cern,https://root.cern/root/html602/PyROOT__TPyROOTApplication.html,2,['error'],['error']
Availability,"l_t fShow! is true during the second pass (Painting)Definition TLatex.h:66; TLatex::~TLatex~TLatex() overrideDestructor.Definition TLatex.cxx:431; TLatex::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition TLatex.cxx:2711; TLatex::operator=TLatex & operator=(const TLatex &)assignment operatorDefinition TLatex.cxx:453; TLatex::DrawPolyLinevoid DrawPolyLine(Int_t npoints, Double_t *xx, Double_t *yy, const TextSpec_t &spec, Double_t scale_width=0.)Draw a poly line in a Latex formula Is scale_width parameter >=1, fill area will be drawn Otherwise l...Definition TLatex.cxx:1970; TLatex::DrawLatexTLatex * DrawLatex(Double_t x, Double_t y, const char *text)Make a copy of this object with the new parameters And copy object attributes.Definition TLatex.cxx:1943; TLatex::fFactorSizeDouble_t fFactorSize! Relative size of subscripts and superscriptsDefinition TLatex.h:62; TLatex::fErrorconst Char_t * fError! error codeDefinition TLatex.h:65; TLatex::fItalicBool_t fItalic! Currently inside italic operatorDefinition TLatex.h:69; TLatex::Paintvoid Paint(Option_t *option="""") overridePaint.Definition TLatex.cxx:2092; TLatex::AnalyseTLatexFormSize Analyse(Double_t x, Double_t y, const TextSpec_t &spec, const Char_t *t, Int_t length)Analyse and paint the TLatex formula.Definition TLatex.cxx:522; TLatex::CheckLatexSyntaxInt_t CheckLatexSyntax(TString &text)Check if the Latex syntax is correct.Definition TLatex.cxx:2322; TLatex::Savefsvoid Savefs(TLatexFormSize *fs)Save fs values in array fTabSize.Definition TLatex.cxx:2703; TMathTextTo draw TeX Mathematical Formula.Definition TMathText.h:19; TMathText::GetYsizeDouble_t GetYsize()Get Y size.Definition TMathText.cxx:519; TMathText::GetBoundingBoxvoid GetBoundingBox(UInt_t &w, UInt_t &h, Bool_t angle=kFALSE) overrideGet the text width and height.Definition TMathText.cxx:477; TMathText::GetXsizeDouble_t GetXsize()Get X size.Definition TMathText",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLatex_8cxx_source.html:110502,error,error,110502,doc/master/TLatex_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TLatex_8cxx_source.html,1,['error'],['error']
Availability,"l_t fShow! is true during the second pass (Painting)Definition TLatex.h:66; TLatex::~TLatex~TLatex() overrideDestructor.Definition TLatex.cxx:431; TLatex::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition TLatex.cxx:2711; TLatex::operator=TLatex & operator=(const TLatex &)assignment operatorDefinition TLatex.cxx:453; TLatex::DrawPolyLinevoid DrawPolyLine(Int_t npoints, Double_t *xx, Double_t *yy, const TextSpec_t &spec, Double_t scale_width=0.)Draw a poly line in a Latex formula Is scale_width parameter >=1, fill area will be drawn Otherwise l...Definition TLatex.cxx:1970; TLatex::DrawLatexTLatex * DrawLatex(Double_t x, Double_t y, const char *text)Make a copy of this object with the new parameters And copy object attributes.Definition TLatex.cxx:1943; TLatex::fFactorSizeDouble_t fFactorSize! Relative size of subscripts and superscriptsDefinition TLatex.h:62; TLatex::fErrorconst Char_t * fError! error codeDefinition TLatex.h:65; TLatex::fItalicBool_t fItalic! Currently inside italic operatorDefinition TLatex.h:69; TLatex::Paintvoid Paint(Option_t *option="""") overridePaint.Definition TLatex.cxx:2092; TLatex::AnalyseTLatexFormSize Analyse(Double_t x, Double_t y, const TextSpec_t &spec, const Char_t *t, Int_t length)Analyse and paint the TLatex formula.Definition TLatex.cxx:522; TLatex::CheckLatexSyntaxInt_t CheckLatexSyntax(TString &text)Check if the Latex syntax is correct.Definition TLatex.cxx:2322; TLatex::Savefsvoid Savefs(TLatexFormSize *fs)Save fs values in array fTabSize.Definition TLatex.cxx:2703; TObjectMother of all ROOT objects.Definition TObject.h:41; TStringBasic string class.Definition TString.h:139; TTextBase class for several text objects.Definition TText.h:22; bool; double; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; f1TF1 * f1Definition legend1.C:11; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLatex_8h_source.html:13361,error,error,13361,doc/master/TLatex_8h_source.html,https://root.cern,https://root.cern/doc/master/TLatex_8h_source.html,1,['error'],['error']
Availability,"l_t flag = true); void SetOneSidedDiscovery(Bool_t flag=true) {fOneSidedDiscovery = flag;}. {fSigned = flag;}. bool IsTwoSided() const; { return fLimitType == twoSided; }. bool IsOneSidedDiscovery() const; { return fLimitType == oneSidedDiscovery; }. void SetReuseNLL(Bool_t flag); { fReuseNll = flag ; }. void SetLOffset(Bool_t flag = kTRUE); { fLOffset = flag ; }. void SetMinimizer(const char* minimizer); { fMinimizer=minimizer;}. void SetStrategy(Int_t strategy); {fStrategy=strategy;}. void SetTolerance(double tol); {fTolerance=tol;}. void SetPrintLevel(Int_t printlevel); {fPrintLevel=printlevel;}. Double_t Evaluate(RooAbsData& data, RooArgSet& paramsOfInterest); Main interface to evaluate the test statistic on a dataset. void EnableDetailedOutput(bool e = true, bool withErrorsAndPulls = false). const RooArgSet* GetDetailedOutput(void); Returns detailed output. The value returned by this function is updated after each call to Evaluate().; The returned RooArgSet contains the following:; <ul>; <li> the minimum nll, fitstatus and convergence quality for each fit </li>; <li> for each fit and for each non-constant parameter, the value, error and pull of the parameter are stored </li>; </ul>. void SetConditionalObservables(const RooArgSet& set); set the conditional observables which will be used when creating the NLL; so the pdf's will not be normalized on the conditional observables when computing the NLL. {fConditionalObs.removeAll(); fConditionalObs.add(set);}. void SetVarName(const char* name); { fVarName = name; }. const TString GetVarName() const; {return fVarName;}. RooAbsPdf * GetPdf() const; { return fPdf; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-06-30 14:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__ProfileLikelihoodTestStat.html:4938,error,error,4938,root/html602/RooStats__ProfileLikelihoodTestStat.html,https://root.cern,https://root.cern/root/html602/RooStats__ProfileLikelihoodTestStat.html,1,['error'],['error']
Availability,"l_t flag = true); void SetOneSidedDiscovery(Bool_t flag=true) {fOneSidedDiscovery = flag;}. {fSigned = flag;}. bool IsTwoSided() const; { return fLimitType == twoSided; }. bool IsOneSidedDiscovery() const; { return fLimitType == oneSidedDiscovery; }. void SetReuseNLL(Bool_t flag); { fReuseNll = flag ; }. void SetLOffset(Bool_t flag = kTRUE); { fLOffset = flag ; }. void SetMinimizer(const char* minimizer); { fMinimizer=minimizer;}. void SetStrategy(Int_t strategy); {fStrategy=strategy;}. void SetTolerance(double tol); {fTolerance=tol;}. void SetPrintLevel(Int_t printlevel); {fPrintLevel=printlevel;}. Double_t Evaluate(RooAbsData& data, RooArgSet& paramsOfInterest); Main interface to evaluate the test statistic on a dataset. void EnableDetailedOutput(bool e = true, bool withErrorsAndPulls = false). const RooArgSet* GetDetailedOutput(void); Returns detailed output. The value returned by this function is updated after each call to Evaluate().; The returned RooArgSet contains the following:; <ul>; <li> the minimum nll, fitstatus and convergence quality for each fit </li>; <li> for each fit and for each non-constant parameter, the value, error and pull of the parameter are stored </li>; </ul>. void SetConditionalObservables(const RooArgSet& set); set the conditional observables which will be used when creating the NLL; so the pdf's will not be normalized on the conditional observables when computing the NLL. {fConditionalObs.removeAll(); fConditionalObs.add(set);}. void SetVarName(const char* name); { fVarName = name; }. const TString GetVarName() const; {return fVarName;}. RooAbsPdf * GetPdf() const; { return fPdf; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__ProfileLikelihoodTestStat.html:4938,error,error,4938,root/html604/RooStats__ProfileLikelihoodTestStat.html,https://root.cern,https://root.cern/root/html604/RooStats__ProfileLikelihoodTestStat.html,1,['error'],['error']
Availability,"l_tAddFile(const char* url, Bool_t cpProgress = kTRUE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetCWD(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*GetMergeList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetOutputFileName() const; Int_tGetPrintLevel() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); Bool_tHasCompressionChange() const; virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* ms",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFileMerger.html:1879,error,error,1879,root/html530/TFileMerger.html,https://root.cern,https://root.cern/root/html530/TFileMerger.html,1,['error'],['error']
Availability,"l_tAddFile(const char* url, Bool_t cpProgress = kTRUE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetCWD(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*GetMergeList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetOutputFileName() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFileMerger.html:1891,error,error,1891,root/html528/TFileMerger.html,https://root.cern,https://root.cern/root/html528/TFileMerger.html,1,['error'],['error']
Availability,"l_tCheckNetrc(TString& user, TString& passwd, Bool_t& pwhash, Bool_t srppwd); static Bool_tCheckProofAuth(Int_t cSec, TString& det); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static Int_tDecodeRSAPublic(const char* rsapubexport, rsa_NUMBER& n, rsa_NUMBER& d, char** rsassl = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static TList*GetAuthInfo(); static const char*GetAuthMethod(Int_t idx); static Int_tGetAuthMethodIdx(const char* meth); static Bool_tGetAuthReUse(); static Int_tGetClientProtocol(); static char*GetDefaultDetails(Int_t method, Int_t opt, const char* user); static const char*GetDefaultUser(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); static TDatimeGetGlobalExpDate(); static Bool_tGetGlobalPwHash(); static Bool_tGetGlobalSRPPwd(); static const char*GetGlobalUser(); static GlobusAuth_tGetGlobusAuthHook(); THostAuth*GetHostAuth() const; static THostAuth*GetHostAuth(const char* host, const char* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAuthenticate.html:2005,error,error,2005,root/html526/TAuthenticate.html,https://root.cern,https://root.cern/root/html526/TAuthenticate.html,7,['error'],['error']
Availability,"l_tIsDrawOrSelectLock() const; Bool_tIsLocked() const; virtual const char*LockIdStr() const; static const char*LockName(TGLLockable::ELock lock); static Bool_tLockValid(TGLLockable::ELock lock); Bool_tReleaseLock(TGLLockable::ELock lock) const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); Bool_tTakeLock(TGLLockable::ELock lock) const. private:. TGLLockable(const TGLLockable&); TGLLockable&operator=(const TGLLockable&). Data Members; public:. enum ELock { kUnlocked; kDrawLock; kSelectLock; kModifyLock; };. protected:. TGLLockable::ELockfLockLock state. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLLockable(); Constructor. Bool_t TakeLock(TGLLockable::ELock lock) const; Lock the object in mode 'lock'. Return TRUE if successful, FALSE; if the object is already locked. Bool_t ReleaseLock(TGLLockable::ELock lock) const; Release current lock, make sure it the same as the 'lock' argument.; Returns TRUE on success, FALSE on failure. const char* LockName(TGLLockable::ELock lock); Return name-string for given lock-type. Bool_t LockValid(TGLLockable::ELock lock); Test if lock is a valid type to take/release.; kUnlocked is never valid in these cases. TGLLockable(const TGLLockable& ). TGLLockable& operator=(const TGLLockable& ). virtual ~TGLLockable(); {}. const char* LockIdStr() const; { return ""<unknown>""; }. Bool_t IsLocked() const; { return (fLock != kUnlocked); }. ELock CurrentLock() const; { return fLock; }. Bool_t IsDrawOrSelectLock() const; { return fLock == kDrawLock || fLock == kSelectLock; }. » Author: Matevz Tadel, Feb 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLLockable.h 32465 2010-03-04 20:29:52Z matevz $ » Last generated: 2010-09-23 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLLockable.html:1560,failure,failure,1560,root/html528/TGLLockable.html,https://root.cern,https://root.cern/root/html528/TGLLockable.html,1,['failure'],['failure']
Availability,"l_tIsDrawOrSelectLock() const; Bool_tIsLocked() const; virtual const char*LockIdStr() const; static const char*LockName(TGLLockable::ELock lock); static Bool_tLockValid(TGLLockable::ELock lock); Bool_tReleaseLock(TGLLockable::ELock lock) const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); Bool_tTakeLock(TGLLockable::ELock lock) const. private:. TGLLockable(const TGLLockable&); TGLLockable&operator=(const TGLLockable&). Data Members; public:. enum ELock { kUnlocked; kDrawLock; kSelectLock; kModifyLock; };. protected:. TGLLockable::ELockfLockLock state. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLLockable(); Constructor. Bool_t TakeLock(TGLLockable::ELock lock) const; Lock the object in mode 'lock'. Return TRUE if successful, FALSE; if the object is already locked. Bool_t ReleaseLock(TGLLockable::ELock lock) const; Release current lock, make sure it the same as the 'lock' argument.; Returns TRUE on success, FALSE on failure. const char* LockName(TGLLockable::ELock lock); Return name-string for given lock-type. Bool_t LockValid(TGLLockable::ELock lock); Test if lock is a valid type to take/release.; kUnlocked is never valid in these cases. TGLLockable(const TGLLockable& ). TGLLockable& operator=(const TGLLockable& ). virtual ~TGLLockable(); {}. const char* LockIdStr() const; { return ""<unknown>""; }. Bool_t IsLocked() const; { return (fLock != kUnlocked); }. ELock CurrentLock() const; { return fLock; }. Bool_t IsDrawOrSelectLock() const; { return fLock == kDrawLock || fLock == kSelectLock; }. » Author: Matevz Tadel, Feb 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLLockable.h 32465 2010-03-04 20:29:52Z matevz $ » Last generated: 2011-07-04 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLLockable.html:1560,failure,failure,1560,root/html530/TGLLockable.html,https://root.cern,https://root.cern/root/html530/TGLLockable.html,1,['failure'],['failure']
Availability,"l_tIsDrawOrSelectLock() const; Bool_tIsLocked() const; virtual const char*LockIdStr() const; static const char*LockName(TGLLockable::ELock lock); static Bool_tLockValid(TGLLockable::ELock lock); Bool_tReleaseLock(TGLLockable::ELock lock) const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); Bool_tTakeLock(TGLLockable::ELock lock) const. private:. TGLLockable(const TGLLockable&); TGLLockable&operator=(const TGLLockable&). Data Members; public:. enum ELock { kUnlocked; kDrawLock; kSelectLock; kModifyLock; };. protected:. TGLLockable::ELockfLockLock state. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLLockable(); Constructor. Bool_t TakeLock(TGLLockable::ELock lock) const; Lock the object in mode 'lock'. Return TRUE if successful, FALSE; if the object is already locked. Bool_t ReleaseLock(TGLLockable::ELock lock) const; Release current lock, make sure it the same as the 'lock' argument.; Returns TRUE on success, FALSE on failure. const char* LockName(TGLLockable::ELock lock); Return name-string for given lock-type. Bool_t LockValid(TGLLockable::ELock lock); Test if lock is a valid type to take/release.; kUnlocked is never valid in these cases. TGLLockable(const TGLLockable& ). TGLLockable& operator=(const TGLLockable& ). virtual ~TGLLockable(); {}. const char* LockIdStr() const; { return ""<unknown>""; }. Bool_t IsLocked() const; { return (fLock != kUnlocked); }. ELock CurrentLock() const; { return fLock; }. Bool_t IsDrawOrSelectLock() const; { return fLock == kDrawLock || fLock == kSelectLock; }. » Author: Matevz Tadel, Feb 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLLockable.h 32465 2010-03-04 20:29:52Z matevz $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLLockable.html:1560,failure,failure,1560,root/html532/TGLLockable.html,https://root.cern,https://root.cern/root/html532/TGLLockable.html,1,['failure'],['failure']
Availability,l_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); Int_tfNPnumber of function parameters; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; TGTextButton*fOKOK button; UInt_tTGFrame::fOptionsframe options; TGCheckButton**fParBndbound setting switch; TGNumberEntryField**fParErrerror values; TGCheckButton**fParFixfix setting switch; TGNumberEntryField**fParMaxmax range values; TGNumberEntryField**fParMinmin range values; TGTextEntry**fParNamparameter names; TGTripleHSlider**fParSldtriple sliders; TGNumberEntry**fParStpstep values; TGNumberEntry**fParValparameter values; const TGWindow*TGWindow::fParentParent window; Double_t*fPerroriginal patameters' errors; Double_t*fPmaxmax limits of patameters range; Double_t*fPminmin limits of patameters range; Double_t*fPstporiginal patameters' step; Double_t*fPvaloriginal patameters' values; Double_tfRangexmaxmax function range; Double_tfRangexminmin function range; TGTextButton*fResetReset button; TStringTGMainFrame::fResourceNameWM resource name; Int_t*fRetCodeaddress to store return code; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TGCheckButton*fUpdateimmediate update switch; UInt_tTGMainFrame::fWMHeightWM height; UInt_tTGMainFrame::fWMHeightIncWM height increments; EInitialStateTGMainFrame::fWMInitStateWM initial state; UInt_tTGMainFrame::fWMMaxHeightWM max height; UInt_tTGMainFrame::fWMMaxWidthWM max width; UInt_tTGMainFrame::fWMMinHeightWM min height; UInt_tTGMainFrame::fWMMinWidthWM min width; UInt_tTGMainFrame::fWMWidthWM width; UInt_tTGMainFrame::fWMWidthIncWM width increments; Int_tTGMainFrame::fWMXWM x position; Int_tTGMainFrame::fWMYWM y position; UInt_tTGF,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitParametersDialog.html:21645,error,errors,21645,root/html528/TFitParametersDialog.html,https://root.cern,https://root.cern/root/html528/TFitParametersDialog.html,3,['error'],['errors']
Availability,l_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); Int_tfNPnumber of function parameters; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; TGTextButton*fOKOK button; UInt_tTGFrame::fOptionsframe options; TGCheckButton**fParBndbound setting switch; TGNumberEntryField**fParErrerror values; TGCheckButton**fParFixfix setting switch; TGNumberEntryField**fParMaxmax range values; TGNumberEntryField**fParMinmin range values; TGTextEntry**fParNamparameter names; TGTripleHSlider**fParSldtriple sliders; TGNumberEntry**fParStpstep values; TGNumberEntry**fParValparameter values; const TGWindow*TGWindow::fParentParent window; Double_t*fPerroriginal patameters' errors; Double_t*fPmaxmax limits of patameters range; Double_t*fPminmin limits of patameters range; Double_t*fPstporiginal patameters' step; Double_t*fPvaloriginal patameters' values; Double_tfRangexmaxmax function range; Double_tfRangexminmin function range; TGTextButton*fResetReset button; TStringTGMainFrame::fResourceNameWM resource name; Int_t*fRetCodeaddress to store return code; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TListfTextEntrieslist of text entries used for keyboard navigation; TGCheckButton*fUpdateimmediate update switch; UInt_tTGMainFrame::fWMHeightWM height; UInt_tTGMainFrame::fWMHeightIncWM height increments; EInitialStateTGMainFrame::fWMInitStateWM initial state; UInt_tTGMainFrame::fWMMaxHeightWM max height; UInt_tTGMainFrame::fWMMaxWidthWM max width; UInt_tTGMainFrame::fWMMinHeightWM min height; UInt_tTGMainFrame::fWMMinWidthWM min width; UInt_tTGMainFrame::fWMWidthWM width; UInt_tTGMainFrame::fWMWidthIncWM width increments; Int_tTGMainFram,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFitParametersDialog.html:21872,error,errors,21872,root/html534/TFitParametersDialog.html,https://root.cern,https://root.cern/root/html534/TFitParametersDialog.html,3,['error'],['errors']
Availability,"l_tattach(RooWorkspace& w); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual RooAbsStudy*clone(const char* newname = """") const; virtual TObject*RooAbsStudy::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; RooLinkedList*RooAbsStudy::detailedData(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidRooAbsStudy::dump(); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Bool_texecute(); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual Bool_tfinalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooGenFitStudy.html:1674,error,error,1674,root/html534/RooGenFitStudy.html,https://root.cern,https://root.cern/root/html534/RooGenFitStudy.html,3,['error'],['error']
Availability,"la = 0, ///< Formula functions which can be stored,; 256 kPtrScalarFreeFcn, ///< Pointer to scalar free function,; 257 kInterpreted, ///< Interpreted functions constructed by name,; 258 kTemplVec, ///< Vectorized free functions or TemplScalar functors evaluating on vectorized parameters,; 259 kTemplScalar, ///< TemplScalar functors evaluating on scalar parameters; 260 kCompositionFcn; 261 }; // formula based on composition class (e.g. NSUM, CONV); 262 ; 263 Double_t fXmin{-1111}; ///< Lower bounds for the range; 264 Double_t fXmax{-1111}; ///< Upper bounds for the range; 265 Int_t fNpar{}; ///< Number of parameters; 266 Int_t fNdim{}; ///< Function dimension; 267 Int_t fNpx{100}; ///< Number of points used for the graphical representation; 268 EFType fType{EFType::kTemplScalar};; 269 Int_t fNpfits{}; ///< Number of points used in the fit; 270 Int_t fNDF{}; ///< Number of degrees of freedom in the fit; 271 Double_t fChisquare{}; ///< Function fit chisquare; 272 Double_t fMinimum{-1111}; ///< Minimum value for plotting; 273 Double_t fMaximum{-1111}; ///< Maximum value for plotting; 274 std::vector<Double_t> fParErrors; ///< Array of errors of the fNpar parameters; 275 std::vector<Double_t> fParMin; ///< Array of lower limits of the fNpar parameters; 276 std::vector<Double_t> fParMax; ///< Array of upper limits of the fNpar parameters; 277 std::vector<Double_t> fSave; ///< Array of fNsave function values; 278 std::vector<Double_t> fIntegral; ///<! Integral of function binned on fNpx bins; 279 std::vector<Double_t> fAlpha; ///<! Array alpha. for each bin in x the deconvolution r of fIntegral; 280 std::vector<Double_t> fBeta; ///<! Array beta. is approximated by x = alpha +beta*r *gamma*r**2; 281 std::vector<Double_t> fGamma; ///<! Array gamma.; 282 TObject *fParent{nullptr}; ///<! Parent object hooking this function (if one); 283 TH1 *fHistogram{nullptr}; ///<! Pointer to histogram used for visualisation; 284 std::unique_ptr<TMethodCall> fMethodCall; ///<! Pointer to Met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8h_source.html:8175,error,errors,8175,doc/master/TF1_8h_source.html,https://root.cern,https://root.cern/doc/master/TF1_8h_source.html,1,['error'],['errors']
Availability,"la is a TF1 expression.; See TTree::Draw for explanations of the other parameters.; By default the temporary histogram created is called htemp. If varexp contains >>hnew , the new histogram created is called hnew and it is kept in the current directory. Example: tree.Fit(""pol4"",""sqrt(x)>>hsqrt"",""y>0""); will fit sqrt(x) and save the histogram as ""hsqrt"" in the current; directory.; xDouble_t x[n]Definition legend1.C:17; The function returns the status of the histogram fit (see TH1::Fit) If no entries were selected, the function returns -1; (i.e. fitResult is null if the fit is OK) ; Implements TVirtualTreePlayer.; Definition at line 569 of file TTreePlayer.cxx. ◆ GetDimension(). Int_t TTreePlayer::GetDimension ; (; ); const. inlineoverridevirtual . Implements TVirtualTreePlayer.; Definition at line 74 of file TTreePlayer.h. ◆ GetEntries(). Long64_t TTreePlayer::GetEntries ; (; const char * ; selection). overridevirtual . Return the number of entries matching the selection. ; Return -1 in case of errors.; If the selection uses any arrays or containers, we return the number of entries where at least one element match the selection. GetEntries is implemented using the selector class TSelectorEntries, which can be used directly (see code in TTreePlayer::GetEntries) for additional option. If SetEventList was used on the TTree or TChain, only that subset of entries will be considered. ; Implements TVirtualTreePlayer.; Definition at line 599 of file TTreePlayer.cxx. ◆ GetEntriesToProcess(). Long64_t TTreePlayer::GetEntriesToProcess ; (; Long64_t ; firstentry, . Long64_t ; nentries . ); const. virtual . return the number of entries to be processed this function checks that nentries is not bigger than the number of entries in the Tree or in the associated TEventlist ; Definition at line 612 of file TTreePlayer.cxx. ◆ GetHistogram(). TH1 * TTreePlayer::GetHistogram ; (; ); const. inlineoverridevirtual . Implements TVirtualTreePlayer.; Definition at line 75 of file TTreePlayer.h.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreePlayer.html:23813,error,errors,23813,doc/master/classTTreePlayer.html,https://root.cern,https://root.cern/doc/master/classTTreePlayer.html,1,['error'],['errors']
Availability,"la& operator=(const ROOT::v5::TFormula& rhs); Operator =. ~TFormula(); Formula default destructor. Bool_t AnalyzeFunction(TString& chaine, Int_t& err, Int_t offset = 0); Check if the chain as function call. If you overload this member function, you also HAVE TO; never call the constructor:. TFormula::TFormula(const char *name,const char *expression). and write your own constructor. MyClass::MyClass(const char *name,const char *expression) : TFormula(). which has to call the TFormula default constructor and whose implementation; should be similar to the implementation of the normal TFormula constructor. This is necessary because the normal TFormula constructor call indirectly; the virtual member functions Analyze, DefaultString, DefaultValue; and DefaultVariable. void Analyze(const char* schain, Int_t& err, Int_t offset = 0); Analyze a sub-expression in one formula. Expressions in one formula are recursively analyzed.; Result of analysis is stored in the object tables. Table of function codes and errors. * functions :. + 1 pow 20; - 2 sq 21; * 3 sqrt 22; / 4 strstr 23; % 5 min 24; max 25; log 30; cos 10 exp 31; sin 11 log10 32; tan 12; acos 13 abs 41; asin 14 sign 42; atan 15 int 43; atan2 16; fmod 17 rndm 50. cosh 70 acosh 73; sinh 71 asinh 74; tanh 72 atanh 75. expo 100 gaus 110 gausn (see note below); expo(0) 100 0 gaus(0) 110 0 gausn(0); expo(1) 100 1 gaus(1) 110 1 gausn(1); xexpo 100 x xgaus 110 x xgausn; yexpo 101 x ygaus 111 x ygausn; zexpo 102 x zgaus 112 x zgausn; xyexpo 105 x xygaus 115 x xygausn; yexpo(5) 102 5 ygaus(5) 111 5 ygausn(5); xyexpo(2) 105 2 xygaus(2) 115 2 xygausn(2). landau 120 x landaun (see note below); landau(0) 120 0 landaun(0); landau(1) 120 1 landaun(1); xlandau 120 x xlandaun; ylandau 121 x ylandaun; zlandau 122 x zlandaun; xylandau 125 x xylandaun; ylandau(5) 121 5 ylandaun(5); xylandau(2) 125 2 xylandaun(2). pol0 130 x pol1 130 1xx; pol0(0) 130 0 pol1(0) 130 100; pol0(1) 130 1 pol1(1) 130 101; xpol0 130 x xpol1 130 101; ypol0 131 x yp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__v5__TFormula.html:19651,error,errors,19651,root/html604/ROOT__v5__TFormula.html,https://root.cern,https://root.cern/root/html604/ROOT__v5__TFormula.html,1,['error'],['errors']
Availability,"lag == 2) {; calculate GRAD, the first derivatives of FVAL; (this is optional); }; Always calculate the value of the function, FVAL,; which is usually a chisquare or log likelihood.; if (iflag == 3) {; will come here only after the fit is finished.; Perform any final calculations, output fitted data, etc.; }. See concrete examples in TH1::H1FitChisquare, H1FitLikelihood. Int_t FixParameter(Int_t parNo); fix a parameter. Int_t GetParameter(Int_t parNo, Double_t& currentValue, Double_t& currentError) const; return parameter value and error. Int_t GetNumFixedPars() const; returns the number of currently fixed parameters. Int_t GetNumFreePars() const; returns the number of currently free parameters. Int_t GetNumPars() const; returns the total number of parameters that have been defined; as fixed or free. The constant parameters are not counted. Int_t Migrad(); invokes the MIGRAD minimizer. Int_t Release(Int_t parNo); release a parameter. Int_t SetErrorDef(Double_t up); To get the n-sigma contour the error def parameter ""up"" has to set to n^2. void SetFCN(void (*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t)); To set the address of the minimization function*-; *-* ===============================================; *. void SetFCN(void* fcn); To set the address of the minimization function*-; *-* ===============================================; this function is called by CINT instead of the function above; *. Int_t SetPrintLevel(Int_t printLevel = 0); set Minuit print level; printlevel = -1 quiet (also suppresse all warnings); = 0 normal; = 1 verbose. void mnamin(); Initialize AMIN*-*-*-*-; *-* ===============; *-*C Called from many places. Initializes the value of AMIN by; *-*C calling the user function. Prints out the function value and; *-*C parameter values if Print Flag value is high enough.; *. void mnbins(Double_t a1, Double_t a2, Int_t naa, Double_t& bl, Double_t& bh, Int_t& nb, Double_t& bwid); -*-*Compute reasonable histogram intervals; *-* ==============",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMinuit.html:34160,error,error,34160,root/html534/TMinuit.html,https://root.cern,https://root.cern/root/html534/TMinuit.html,3,['error'],['error']
Availability,"lag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . Definition at line 4105 of file RooAbsReal.cxx. ◆ chi2FitTo() [2/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooLinkedList & ; cmdList . ). virtual . Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ; List of possible commands in the cmdList:. Type of CmdArg Effect on \( \chi^2 \) . DataError() Choose between:; RooAbsData::Expected: Expected Poisson error ( \( \sqrt{n_\text{expected}} \) from the PDF).; RooAbsData::SumW2: The observed error from the square root of the sum of weights, i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \( n_\text{observed} \). If for a given bin \( n_\text{expected} \) is lower than the \( n_\text{observed} \), the lower uncertainty is taken (e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:70906,error,error,70906,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['error'],['error']
Availability,"lag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . Definition at line 4181 of file RooAbsReal.cxx. ◆ chi2FitTo() [2/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooLinkedList & ; cmdList . ). virtual . Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ; List of possible commands in the cmdList:. Type of CmdArg Effect on \( \chi^2 \) . DataError() Choose between:; RooAbsData::Expected: Expected Poisson error ( \( \sqrt{n_\text{expected}} \) from the PDF).; RooAbsData::SumW2: The observed error from the square root of the sum of weights, i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \( n_\text{observed} \). If for a given bin \( n_\text{expected} \) is lower than the \( n_\text{observed} \), the lower uncertainty is taken (e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:72174,error,error,72174,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['error'],['error']
Availability,"lag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4236 of file RooAbsReal.cxx. ◆ chi2FitTo() [4/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataSet & ; xydata, . const RooLinkedList & ; cmdList . ). virtual . Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ; The y values can either be the event weights, or can be another column designated by the YVar() argument. The y value must have errors defined for the \( \chi^2 \) to be well defined. Options to control construction of the chi-square . YVar(RooRealVar& yvar) Designate given column in dataset as Y value . Integrate(bool flag) Integrate function over range specified by X errors rather than take value at bin center. Options to control flow of fit procedure . InitialHesse(bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:75231,error,error,75231,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['error'],['error']
Availability,"lag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4254 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 548 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3542 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:77392,error,error,77392,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['error'],['error']
Availability,"lag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4312 of file RooAbsReal.cxx. ◆ chi2FitTo() [4/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataSet & ; xydata, . const RooLinkedList & ; cmdList . ). virtual . Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ; The y values can either be the event weights, or can be another column designated by the YVar() argument. The y value must have errors defined for the \( \chi^2 \) to be well defined. Options to control construction of the chi-square . YVar(RooRealVar& yvar) Designate given column in dataset as Y value . Integrate(bool flag) Integrate function over range specified by X errors rather than take value at bin center. Options to control flow of fit procedure . InitialHesse(bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:76499,error,error,76499,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['error'],['error']
Availability,"lag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4330 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 558 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3622 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:78660,error,error,78660,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['error'],['error']
Availability,"lar Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPoints3DABC.html:3986,error,error,3986,doc/master/classTPoints3DABC.html,https://root.cern,https://root.cern/doc/master/classTPoints3DABC.html,1,['error'],['error']
Availability,"lar Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classJet.html:6687,error,error,6687,doc/master/classJet.html,https://root.cern,https://root.cern/doc/master/classJet.html,6,['error'],['error']
Availability,"lar Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLHistPainter.html:9690,error,error,9690,doc/master/classTGLHistPainter.html,https://root.cern,https://root.cern/doc/master/classTGLHistPainter.html,3,['error'],['error']
Availability,"lar Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLScenePad.html:5290,error,error,5290,doc/master/classTGLScenePad.html,https://root.cern,https://root.cern/doc/master/classTGLScenePad.html,4,['error'],['error']
Availability,"lar, TTree, TTreeCache, TTreeCacheUnzip, TTreeSQL, TVirtualIndex, TVirtualTreePlayer, ROOT::Experimental::TTreeReaderFast, ROOT::Internal::TBranchProxyClassDescriptor, ROOT::Internal::TBranchProxyDescriptor, TChainIndex, TFileDrawMap, ROOT::Internal::TFriendProxyDescriptor, TSelectorDraw, TSelectorEntries, TTreeDrawArgsParser, TTreeFormula, TTreeFormulaManager, TTreeIndex, TTreePerfStats, TTreePlayer, TTreeReader, TParallelCoord, TParallelCoordRange, TParallelCoordSelect, TParallelCoordVar, TSpider, TTreeViewer, TTVRecord, TTVSession, iterplugin, h1analysis, h1analysisTreeReader, PyROOT::RegulatorCleanup, and ROOT::Internal::TCheckHashRecursiveRemoveConsistency.; Definition at line 888 of file TObject.cxx. ◆ StreamerNVirtual(). void TObject::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 243 of file TObject.h. ◆ SysError(). void TObject::SysError ; (; const char * ; location, . const char * ; fmt, .  ; ... . ); const. virtual . Issue system error message. ; Use ""location"" to specify the method where the system error occurred. Accepts standard printf formatting arguments. ; Definition at line 1001 of file TObject.cxx. ◆ TestBit(). R__ALWAYS_INLINE Bool_t TObject::TestBit ; (; UInt_t ; f); const. inline . Definition at line 199 of file TObject.h. ◆ TestBits(). Int_t TObject::TestBits ; (; UInt_t ; f); const. inline . Definition at line 200 of file TObject.h. ◆ UseCurrentStyle(). void TObject::UseCurrentStyle ; (; ). virtual . Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ; Reimplemented in TCanvas, TPad, TFrame, TPaveStats, TPaveText, TAxis3D, TGraph, TH1, and TTree.; Definition at line 801 of file TObject.cxx. ◆ Warning(). void TObject::Warning ; (; const char * ; location, . const char * ; fmt, .  ; ... . ); const. virtual . Issue warning message. ; Use ""location"" to specify the method where the warning occurred. Accepts stand",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTObject.html:116076,error,error,116076,doc/v632/classTObject.html,https://root.cern,https://root.cern/doc/v632/classTObject.html,1,['error'],['error']
Availability,"larization. enum class TMVA::DNN::EnumRegularization. strong . EnumeratorNONE ; L1 ; L2 ; L1MAX . Definition at line 172 of file NeuralNet.h. ◆ EOptimizer. enum class TMVA::DNN::EOptimizer. strong . Enum representing the optimizer used for training. . EnumeratorkSGD ; kAdam ; kAdagrad ; kRMSProp ; kAdadelta . Definition at line 82 of file Functions.h. ◆ EOutputFunction. enum class TMVA::DNN::EOutputFunction. strong . Enum that represents output functions. . EnumeratorkIdentity ; kSigmoid ; kSoftmax . Definition at line 45 of file Functions.h. ◆ ERegularization. enum class TMVA::DNN::ERegularization. strong . Enum representing the regularization type applied for a given layer. . EnumeratorkNone ; kL1 ; kL2 . Definition at line 64 of file Functions.h. ◆ MinimizerType. enum TMVA::DNN::MinimizerType. < list all the minimizer types . EnumeratorfSteepest SGD. . Definition at line 320 of file NeuralNet.h. ◆ ModeErrorFunction. enum class TMVA::DNN::ModeErrorFunction. strong . error functions to be chosen from . EnumeratorSUMOFSQUARES ; CROSSENTROPY ; CROSSENTROPY_MUTUALEXCLUSIVE . Definition at line 1038 of file NeuralNet.h. ◆ ModeOutput. enum class TMVA::DNN::ModeOutput. strong . EnumeratorFETCH . Definition at line 1029 of file NeuralNet.h. ◆ ModeOutputValues. enum class TMVA::DNN::ModeOutputValues : int. strong . EnumeratorDIRECT ; SIGMOID ; SOFTMAX ; BATCHNORMALIZATION . Definition at line 178 of file NeuralNet.h. ◆ WeightInitializationStrategy. enum class TMVA::DNN::WeightInitializationStrategy. strong . weight initialization strategies to be chosen from . EnumeratorXAVIER ; TEST ; LAYERSIZE ; XAVIERUNIFORM . Definition at line 1049 of file NeuralNet.h. Function Documentation. ◆ addRegularizationGradients(). template<typename Architecture_t > . void TMVA::DNN::addRegularizationGradients ; (; typename Architecture_t::Matrix_t & ; A, . const typename Architecture_t::Matrix_t & ; W, . typename Architecture_t::Scalar_t ; weightDecay, . ERegularization ; R . ). inline . Add",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:21950,error,error,21950,doc/master/namespaceTMVA_1_1DNN.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html,2,['error'],['error']
Availability,"lass * Class(); TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::GetDrawOptionvirtual Option_t * GetDrawOption() constGet option used by the graphics system to draw this object.Definition TObject.cxx:428; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TObject::AppendPadvirtual void AppendPad(Option_t *option="""")Append graphics object to current pad.Definition TObject.cxx:190; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::GetTitlevirtual const char * GetTitle() constReturns title of object.Definition TObject.cxx:488; TPaveA TBox with a bordersize and a shadow option.Definition TPave.h:19; TPave::Printvoid Print(Option_t *option="""") const overrideDump this pave with its attributes.Definition TPave.cxx:616; TPave::GetY2NDCDouble_t GetY2NDC() constDefinition TPave.h:62; TPave::GetBorderSizeInt_t GetBorderSize() constDefinition TPave.h:54; TPave::ConvertNDCtoPadvirtual void ConvertNDCtoPad()Convert pave coordinates from NDC to Pad coordinates.Definition TPave.cxx:139; TPave::GetX2NDCDouble_t GetX2NDC() constDefinition TPave.h:60; TPave::Copyvoid Copy(TObject &pave) const overrideCopy this pave to pave.Definition TPave.cxx:186; TPave::fBorderSizeInt_t fBorderSizewindow box bordersize in pixelsDefinition TPave.h:26; TPave::fX2NDCDouble_t fX2NDCX2 point in NDC coordinates.Definition TPave.h:24; TPave::GetY1NDCDouble_t GetY1NDC() constDefinition TPave.h:61; TPav",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLegend_8cxx_source.html:54089,error,error,54089,doc/master/TLegend_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TLegend_8cxx_source.html,1,['error'],['error']
Availability,"lass * RooCurve::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 106 of file RooCurve.h. ◆ isIdentical(). bool RooCurve::isIdentical ; (; const RooCurve & ; other, . double ; tol = 1e-6, . bool ; verbose = true . ); const. Return true if curve is identical to other curve allowing for given absolute tolerance on each point compared point. ; Definition at line 851 of file RooCurve.cxx. ◆ makeErrorBand() [1/2]. RooCurve * RooCurve::makeErrorBand ; (; const std::vector< RooCurve * > & ; plusVar, . const std::vector< RooCurve * > & ; minusVar, . const TMatrixD & ; C, . double ; Z = 1 . ); const. Construct filled RooCurve represented error band represent the error added in quadrature defined by the curves arguments plusVar and minusVar corresponding to one-sigma variations of each parameter. ; The resulting error band, combined used the correlation matrix C is multiplied with the significance parameter Z to construct the equivalent of a Z sigma error band (in Gaussian approximation) ; Definition at line 740 of file RooCurve.cxx. ◆ makeErrorBand() [2/2]. RooCurve * RooCurve::makeErrorBand ; (; const std::vector< RooCurve * > & ; variations, . double ; Z = 1 . ); const. Construct filled RooCurve represented error band that captures alpha% of the variations of the curves passed through argument variations, where the percentage alpha corresponds to the central interval fraction of a significance Z. ; Definition at line 701 of file RooCurve.cxx. ◆ plotSamplingHintForBinBoundaries(). std::list< double > * RooCurve::plotSamplingHintForBinBoundaries ; (; std::span< const double > ; boundaries, . double ; xlo, . double ; xhi . ). static . Returns sampling hints for a histogram with given boundaries. ; This helper function is meant to be used by binned RooAbsReals to produce sampling hints that are working well with RooFits plotting. ; Definition at line 893 of file RooCurve.cxx. ◆ Print(). void Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCurve.html:48197,error,error,48197,doc/master/classRooCurve.html,https://root.cern,https://root.cern/doc/master/classRooCurve.html,2,['error'],['error']
Availability,"lass ; Definition at line 85 of file TPSocket.h. ◆ Close(). void TPSocket::Close ; (; Option_t * ; option = """"). overridevirtual . Close a parallel socket. ; If option is ""force"", calls shutdown(id,2) to shut down the connection. This will close the connection also for the parent of this process. Also called via the dtor (without option ""force"", call explicitly Close(""force"") if this is desired). ; Reimplemented from TSocket.; Definition at line 326 of file TPSocket.cxx. ◆ DeclFileName(). static const char * TPSocket::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 85 of file TPSocket.h. ◆ GetDescriptor(). Int_t TPSocket::GetDescriptor ; (; ); const. overridevirtual . Return socket descriptor. ; Reimplemented from TSocket.; Definition at line 467 of file TPSocket.cxx. ◆ GetErrorCode(). Int_t TPSocket::GetErrorCode ; (; ); const. Returns error code. ; Meaning depends on context where it is called. If no error condition returns 0 else a value < 0. ; Definition at line 783 of file TPSocket.cxx. ◆ GetLocalInetAddress(). TInetAddress TPSocket::GetLocalInetAddress ; (; ). overridevirtual . Return internet address of local host to which the socket is bound. ; In case of error TInetAddress::IsValid() returns kFALSE. ; Reimplemented from TSocket.; Definition at line 451 of file TPSocket.cxx. ◆ GetOption() [1/2]. Option_t * TPSocket::GetOption ; (; ); const. inlineoverrideprivatevirtual . Reimplemented from TObject.; Definition at line 51 of file TPSocket.h. ◆ GetOption() [2/2]. Int_t TPSocket::GetOption ; (; ESockOptions ; opt, . Int_t & ; val . ). overridevirtual . Get socket options. Returns -1 in case of error. ; Reimplemented from TSocket.; Definition at line 768 of file TPSocket.cxx. ◆ GetSize(). Int_t TPSocket::GetSize ; (; ); const. inline . Definition at line 83 of file TPSocket.h. ◆ Init(). void TPSocket::Init ; (; Int_t ; tcpwindowsize, . TSocket * ; sock = nullptr . ). private . Create a parallel so",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPSocket.html:24453,error,error,24453,doc/master/classTPSocket.html,https://root.cern,https://root.cern/doc/master/classTPSocket.html,1,['error'],['error']
Availability,"lass == TClass::GetClass(""string""))) {; 568 cansplit = false;; 569 } else if (GetCollectionProxy()->HasPointers() && !splitSTLP ) {; 570 cansplit = false;; 571 } else if (!valueClass->CanSplit() && !(GetCollectionProxy()->HasPointers() && splitSTLP)) {; 572 cansplit = false;; 573 } else if (valueClass->GetCollectionProxy()) {; 574 // -- A collection was stored in a collection, we choose not to split it.; 575 // Note: Splitting it would require extending TTreeFormula; 576 // to understand how to access it.; 577 cansplit = false;; 578 }; 579 if (cansplit) {; 580 // -- Do the splitting work if we are allowed to.; 581 fType = 4;; 582 // Create a leaf for the master branch (the counter).; 583 TLeaf *leaf = new TLeafElement(this, name, fID, fStreamerType);; 584 fNleaves = 1;; 585 fLeaves.Add(leaf);; 586 fTree->GetListOfLeaves()->Add(leaf);; 587 // Check that the contained objects class name is part of the element title.; 588 // This name is mandatory when reading the tree later on and; 589 // the parent class with the pointer to the STL container is not available.; 590 fClonesName = valueClass->GetName();; 591 fClonesClass = valueClass;; 592 TString aname;; 593 aname.Form("" (%s)"", valueClass->GetName());; 594 TString atitle = element->GetTitle();; 595 if (!atitle.Contains(aname)) {; 596 atitle += aname;; 597 element->SetTitle(atitle.Data());; 598 }; 599 TString branchname (name);; 600 if (branchname.EndsWith(""."")); 601 branchname.Remove(branchname.Length()-1);; 602 branchname += ""_"";; 603 SetTitle(branchname);; 604 leaf->SetName(branchname);; 605 leaf->SetTitle(branchname);; 606 leaf->SetRange(true);; 607 // Create sub branches for each data member of an STL container.; 608 Unroll(name, valueClass, valueClass, pointer, basketsize, splitlevel+splitSTLP, 41);; 609 BuildTitle(name);; 610 SetReadLeavesPtr();; 611 SetFillLeavesPtr();; 612 return;; 613 }; 614 } else if (!strchr(elemType, '*') && ((fStreamerType == TVirtualStreamerInfo::kObject) || (fStreamerType == TVirtualStrea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:21536,avail,available,21536,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['avail'],['available']
Availability,"lass Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodRuleFit(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor. MethodRuleFit(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = NULL); constructor from weight file. ~MethodRuleFit( void ); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t ); RuleFit can handle classification with 2 classes. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options. general. RuleFitModule <string>; available values are: RFTMVA - use TMVA implementation; RFFriedman - use Friedmans original implementation. Path search (fitting). GDTau <float> gradient-directed path: fit threshhold, default; GDTauPrec <float> gradient-directed path: precision of estimated tau; GDStep <float> gradient-directed path: step size; GDNSteps <float> gradient-directed path: number of steps; GDErrScale <float> stop scan when error>scale*errmin. Tree generation. fEventsMin <float> minimum fraction of events in a splittable node; fEventsMax <float> maximum fraction of events in a splittable node; nTrees <float> number of trees in forest.; ForestType <string>; available values are: Random - create forest using random subsample and only random variables subset at each node; AdaBoost - create forest with boosted events. Model creation. RuleMinDist <float> min distance allowed between rules; MinImp <float> minimum rule importance accepted; Model <string> model to be used; available values are: ModRuleLinear <default>; ModRule; ModLinear. Friedmans module. RFWorkDir <string> directory where Friedmans module (rf_go.exe) is installed; RFNrules <int> maximum number of rules allowed; RFNendnodes <int> average number of end nodes in the forest of trees. void ProcessOptions(); process the opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodRuleFit.html:20199,error,error,20199,root/html528/TMVA__MethodRuleFit.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodRuleFit.html,4,['error'],['error']
Availability,"lass Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPainter3dAlgorithms(); Lego default constructor. TPainter3dAlgorithms(Double_t* rmin, Double_t* rmax, Int_t system = 1); Normal default constructor. rmin[3], rmax[3] are the limits of the lego object depending on; the selected coordinate system. ~TPainter3dAlgorithms(); Lego default destructor. void BackBox(Double_t ang); Draw back surfaces of surrounding box. Input ANG - angle between X and Y axis. DRFACE(ICODES,XYZ,NP,IFACE,T) - routine for face drawing; ICODES(*) - set of codes for this face; NP - number of nodes in face; IFACE(NP) - face; T(NP) - additional function. void ClearRaster(); Clear screen. void ColorFunction(Int_t nl, Double_t* fl, Int_t* icl, Int_t& irep); Set correspondance between function and color levels. Input: NL - number of levels; FL(NL) - function levels; ICL(NL+1) - colors for levels. Output: IREP - reply: 0 O.K.; -1 error in parameters:; illegal number of levels; function levels must be in increasing order; negative color index. void DefineGridLevels(Int_t ndivz); Define the grid levels drawn in the background of surface and lego plots.; The grid levels are aligned on the Z axis' main tick marks. void DrawFaceMode1(Int_t* icodes, Double_t* xyz, Int_t np, Int_t* iface, Double_t* t); Draw face - 1st variant. Function: Draw face - 1st variant; (2 colors: 1st for external surface, 2nd for internal). References: WCtoNDC. Input: ICODES(*) - set of codes for the line (not used); ICODES(1) - IX; ICODES(2) - IY; XYZ(3,*) - coordinates of nodes; NP - number of nodes; IFACE(NP) - face; T(NP) - additional function defined on this face; (not used in this routine). void DrawFaceMode2(Int_t* icodes, Double_t* xyz, Int_t np, Int_t* iface, Double_t* t); Draw face - 2nd option. Function: Draw face - 2nd option; (fill in correspondance with function levels). References: WCtoNDC, FillPolygon. Input: ICODES(*) - set of codes for the line (not used); ICODES(1) - IX; ICODES",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPainter3dAlgorithms.html:14849,error,error,14849,root/html528/TPainter3dAlgorithms.html,https://root.cern,https://root.cern/root/html528/TPainter3dAlgorithms.html,6,['error'],['error']
Availability,"lass Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void DoError(int level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler (protected). TXSlave(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd); Create a PROOF slave object. Called via the TProof ctor. void Init(const char* host, Int_t stype); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. ~TXSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 if it did not ping or in case of error. void Touch(); Touch the client admin file to proof we are alive. void Interrupt(Int_t type); Send interrupt to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. It will be; processed asynchronously by a separate thread. Int_t GetProofdProtocol(TSocket* s); Find out the remote proofd protocol version.; Returns -1 in case of error. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator.; If any output is due, this is returned as a generic message. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t SendGroupPriority(const char* grp, Int_t priority); Communicate to the coordinator the priprity of the group to which the; user belongs; Return 0 on success. Bool_t HandleError(const void* in = 0); Handle err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXSlave.html:9450,alive,alive,9450,root/html528/TXSlave.html,https://root.cern,https://root.cern/root/html528/TXSlave.html,1,['alive'],['alive']
Availability,"lass TAttFill. Fill Area Attributes class; This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the fill area; attributes.; Fill Area attributes; Fill Area attributes are:. Fill Area color.; Fill Area style. Fill Area color; The fill area color is a color index (integer) pointing in the ROOT; color table.; The fill area color of any class inheriting from TAttFill can; be changed using the method SetFillColor and retrieved using the; method GetFillColor.; The following table shows the first 50 default colors. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c->DrawColorTable();; return c;; }. Color transparency; SetFillColorAlpha(), allows to set a transparent color.; In the following example the fill color of the histogram histo; is set to blue with a transparency of 35%. The color kBlue; itself remains fully opaque. histo->SetFillColorAlpha(kBlue, 0.35);. The transparency is available on all platforms when the flagOpenGL.CanvasPreferGL is set to 1; in $ROOTSYS/etc/system.rootrc, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG ... but not PostScript.; The ROOT Color Wheel.; The wheel contains the recommended 216 colors to be used in web applications.; The colors in the Color Wheel are created by TColor::CreateColorWheel.; Using this color set for your text, background or graphics will give your; application a consistent appearance across different platforms and browsers.; Colors are grouped by hue, the aspect most important in human perception; Touching color chips have the same hue, but with different brightness and vividness.; Colors of slightly different hues clash. If you intend to display; colors of the same hue together, you should pick them from the same group.; Each color chip is identified by a mnemonic (eg kYellow) and a number.; The keywords, kRed, kBlue, kYellow, kPink, etc are defined in the header file Rtyp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TAttFill.html:1241,avail,available,1241,root/html602/TAttFill.html,https://root.cern,https://root.cern/root/html602/TAttFill.html,2,['avail'],['available']
Availability,"lass and TTree::Merge); 106 kOnlyPrepStep = BIT(3); 107 };; 108 ; 109public:; 110 ; 111 TObject();; 112 TObject(const TObject &object);; 113 TObject &operator=(const TObject &rhs);; 114 virtual ~TObject();; 115 ; 116 virtual void AppendPad(Option_t *option="""");; 117 virtual void Browse(TBrowser *b);; 118 virtual const char *ClassName() const;; 119 virtual void Clear(Option_t * /*option*/ ="""") { }; 120 ULong_t CheckedHash(); // Not virtual; 121 virtual TObject *Clone(const char *newname="""") const;; 122 virtual Int_t Compare(const TObject *obj) const;; 123 virtual void Copy(TObject &object) const;; 124 virtual void Delete(Option_t *option=""""); // *MENU*; 125 virtual Int_t DistancetoPrimitive(Int_t px, Int_t py);; 126 virtual void Draw(Option_t *option="""");; 127 virtual void DrawClass() const; // *MENU*; 128 virtual TObject *DrawClone(Option_t *option="""") const; // *MENU*; 129 virtual void Dump() const; // *MENU*; 130 virtual void Execute(const char *method, const char *params, Int_t *error = nullptr);; 131 virtual void Execute(TMethod *method, TObjArray *params, Int_t *error = nullptr);; 132 virtual void ExecuteEvent(Int_t event, Int_t px, Int_t py);; 133 virtual TObject *FindObject(const char *name) const;; 134 virtual TObject *FindObject(const TObject *obj) const;; 135 virtual Option_t *GetDrawOption() const;; 136 virtual UInt_t GetUniqueID() const;; 137 virtual const char *GetName() const;; 138 virtual const char *GetIconName() const;; 139 virtual Option_t *GetOption() const { return """"; }; 140 virtual char *GetObjectInfo(Int_t px, Int_t py) const;; 141 virtual const char *GetTitle() const;; 142 virtual Bool_t HandleTimer(TTimer *timer);; 143 Bool_t HasInconsistentHash() const;; 144 virtual ULong_t Hash() const;; 145 virtual Bool_t InheritsFrom(const char *classname) const;; 146 virtual Bool_t InheritsFrom(const TClass *cl) const;; 147 virtual void Inspect() const; // *MENU*; 148 virtual Bool_t IsFolder() const;; 149 virtual Bool_t IsEqual(const TObject *obj) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8h_source.html:5294,error,error,5294,doc/master/TObject_8h_source.html,https://root.cern,https://root.cern/doc/master/TObject_8h_source.html,1,['error'],['error']
Availability,"lass definition shows us that this tree has one branch and one leaf per data member. The methods of MyClass are:. MyClass(TTree *tree=0) - this constructor has an optional tree for a parameter. If you pass a tree, MyClass will use it rather than the tree from which it was created.; void Init(TTree *tree) - it is called by the constructor to initialize the tree for reading. It associates each branch with the corresponding leaf data member.; ~MyClass() -the destructor, nothing special.; Int_t GetEntry(Int_t entry) - it loads the class with the entry specified. Once you have executed GetEntry, the leaf data members in MyClass are set to the values of the entry. For example, GetEntry(12) loads the 13th event into the event data member of MyClass (note that the first entry is 0). GetEntry returns the number of bytes read from the file. In case the same entry is read twice, ROOT does not have to do any I/O. In this case GetEntry returns 1. It does not return 0, because many people assume a return of 0 means an error has occurred while reading.; Int_t LoadTree(Int_t entry) and void Notify() - these two methods are related to chains. LoadTree will load the tree containing the specified entry from a chain of trees. Notify is called by LoadTree to adjust the branch addresses.; void Loop() - it is the skeleton method that loops through each entry of the tree. This is interesting to us, because we will need to customize it for our analysis. 12.21.3 MyClass.C; MyClass::Loop consists of a for-loop calling GetEntry for each entry. In the template, the numbers of bytes are added up, but it does nothing else. If we were to execute it now, there would be no output.; void MyClass::Loop() {; if (fChain == 0) return;. Int_t nentries = Int_t(fChain->GetEntries());; Int_t nbytes = 0, nb = 0;; for (Int_t jentry=0; jentry<nentries;jentry++) {; Int_t ientry = LoadTree(jentry);; // in case of a TChain , ientry is the entry number in the; // current file; nb = fChain->GetEntry(jentry); nbytes ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:639997,error,error,639997,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['error'],['error']
Availability,"lass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: More...;  ; class  Box;  ; class  BoxContainer;  ; class  Chi2FCN;  Chi2FCN class for binned fits using the least square methods. More...;  ; struct  DataOptions;  DataOptions : simple structure holding the options on how the data are filled. More...;  ; class  DataRange;  class describing the range in the coordinates it supports multiple range in a coordinate. More...;  ; class  FcnAdapter;  ; class  FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  Fitter;  Fitter class, entry point for performing all type of fits. More...;  ; class  LogLikelihoodFCN;  LogLikelihoodFCN class for likelihood fits. More...;  ; struct  ObjFuncTrait;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodFunction >;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodGradFunction >;  ; class  ParameterSettings;  Class, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters. More...;  ; class  PoissonLikelihoodFCN;  class evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case More...;  ; class  ProxyListBox;  ; class  SparseData;  SparseData class representing the data of a THNSparse histogram The data needs to be converted to a BinData class before",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Fit.html:1766,error,error,1766,doc/master/namespaceROOT_1_1Fit.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit.html,2,['error'],['error']
Availability,"lass for the objective functions used in the fits It has a reference to the dat...Definition BasicFCN.h:40; ROOT::Fit::BasicFCN::SetDatavoid SetData(const std::shared_ptr< DataType > &data)Set the data pointer.Definition BasicFCN.h:98; ROOT::Fit::BasicFCN::ModelFunctionPtrstd::shared_ptr< IModelFunction > ModelFunctionPtr() constaccess to function pointerDefinition BasicFCN.h:81; ROOT::Fit::BasicFCN::SetModelFunctionvoid SetModelFunction(const std::shared_ptr< IModelFunction > &func)Set the function pointer.Definition BasicFCN.h:101; ROOT::Fit::BasicFCN::Datavirtual const DataType & Data() constaccess to const reference to the dataDefinition BasicFCN.h:72; ROOT::Fit::BasicFCN::DataPtrstd::shared_ptr< DataType > DataPtr() constaccess to data pointerDefinition BasicFCN.h:75; ROOT::Fit::BasicFCN::ModelFunctionvirtual const IModelFunction & ModelFunction() constaccess to const reference to the model functionDefinition BasicFCN.h:78; ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y ...Definition BinData.h:52; ROOT::Fit::Chi2FCNChi2FCN class for binned fits using the least square methods.Definition Chi2FCN.h:46; ROOT::Fit::Chi2FCN::BaseFunctionBaseObjFunction::BaseFunction BaseFunctionDefinition Chi2FCN.h:54; ROOT::Fit::Chi2FCN::fNEffPointsunsigned int fNEffPointsnumber of effective points used in the fitDefinition Chi2FCN.h:159; ROOT::Fit::Chi2FCN::DoDerivativevirtual double DoDerivative(const double *x, unsigned int icoord) constDefinition Chi2FCN.h:153; ROOT::Fit::Chi2FCN::Typevirtual BaseObjFunction::Type_t Type() constget type of fit method functionDefinition Chi2FCN.h:131; ROOT::Fit::Chi2FCN::fExecutionPolicy::ROOT::EExecutionPolicy fExecutionPolicyDefinition Chi2FCN.h:162; ROOT::Fit::Chi2FCN::Gradientvirtual void Gradient(const double *x, double *g) constDefinition Chi2FCN.h:123; ROOT::Fit::Chi2FCN::fGradstd::vector< double > fGradfor derivativesDefinition Chi2FCN.h:161; ROOT::Fit::Chi2FCN::IMode",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Chi2FCN_8h_source.html:7372,error,error,7372,doc/master/Chi2FCN_8h_source.html,https://root.cern,https://root.cern/doc/master/Chi2FCN_8h_source.html,1,['error'],['error']
Availability,"lass for the objective functions used in the fits It has a reference to the dat...Definition BasicFCN.h:40; ROOT::Fit::BasicFCN::SetDatavoid SetData(const std::shared_ptr< DataType > &data)Set the data pointer.Definition BasicFCN.h:98; ROOT::Fit::BasicFCN::ModelFunctionPtrstd::shared_ptr< IModelFunction > ModelFunctionPtr() constaccess to function pointerDefinition BasicFCN.h:81; ROOT::Fit::BasicFCN::SetModelFunctionvoid SetModelFunction(const std::shared_ptr< IModelFunction > &func)Set the function pointer.Definition BasicFCN.h:101; ROOT::Fit::BasicFCN::Datavirtual const DataType & Data() constaccess to const reference to the dataDefinition BasicFCN.h:72; ROOT::Fit::BasicFCN::DataPtrstd::shared_ptr< DataType > DataPtr() constaccess to data pointerDefinition BasicFCN.h:75; ROOT::Fit::BasicFCN::ModelFunctionvirtual const IModelFunction & ModelFunction() constaccess to const reference to the model functionDefinition BasicFCN.h:78; ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y ...Definition BinData.h:52; ROOT::Fit::PoissonLikelihoodFCNclass evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish ...Definition PoissonLikelihoodFCN.h:46; ROOT::Fit::PoissonLikelihoodFCN::NFitPointsvirtual unsigned int NFitPoints() constDefinition PoissonLikelihoodFCN.h:118; ROOT::Fit::PoissonLikelihoodFCN::IModelFunction::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunctionDefinition PoissonLikelihoodFCN.h:55; ROOT::Fit::PoissonLikelihoodFCN::PoissonLikelihoodFCNPoissonLikelihoodFCN(const BinData &data, const IModelFunction &func, int weight=0, bool extended=true, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)Constructor from unbin data set and model function (pdf) managed by the users.Definition PoissonLikelihoodFCN.h:73; ROOT::Fit::PoissonLikelihoodFCN::DoDerivativevirtual double DoDerivative(const double *x, unsigned int icoord) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/PoissonLikelihoodFCN_8h_source.html:9606,error,error,9606,doc/master/PoissonLikelihoodFCN_8h_source.html,https://root.cern,https://root.cern/doc/master/PoissonLikelihoodFCN_8h_source.html,1,['error'],['error']
Availability,"lass implementing operator(i,j) the matrix must be previously allocates with right size (npar * npar) ; Definition at line 235 of file FitResult.h. ◆ GetErrors(). const double * ROOT::Fit::FitResult::GetErrors ; (; ); const. inline . parameter errors (return const pointer) ; Definition at line 164 of file FitResult.h. ◆ GetParameterName(). std::string ROOT::Fit::FitResult::GetParameterName ; (; unsigned int ; ipar); const. inline . get name of parameter (deprecated) ; Definition at line 327 of file FitResult.h. ◆ GetParams(). const double * ROOT::Fit::FitResult::GetParams ; (; ); const. inline . parameter values (return const pointer) ; Definition at line 169 of file FitResult.h. ◆ GlobalCC(). double ROOT::Fit::FitResult::GlobalCC ; (; unsigned int ; i); const. inline . parameter global correlation coefficient ; Definition at line 209 of file FitResult.h. ◆ HasMinosError(). bool ROOT::Fit::FitResult::HasMinosError ; (; unsigned int ; i); const. query if parameter i has the Minos error ; Definition at line 325 of file FitResult.cxx. ◆ Index(). int ROOT::Fit::FitResult::Index ; (; const std::string & ; name); const. get index for parameter name (return -1 if not found) ; Definition at line 351 of file FitResult.cxx. ◆ IsEmpty(). bool ROOT::Fit::FitResult::IsEmpty ; (; ); const. inline . True if a fit result does not exist (even invalid) with parameter values. ; Definition at line 108 of file FitResult.h. ◆ IsParameterBound(). bool ROOT::Fit::FitResult::IsParameterBound ; (; unsigned int ; ipar); const. query if a parameter is bound ; Definition at line 361 of file FitResult.cxx. ◆ IsParameterFixed(). bool ROOT::Fit::FitResult::IsParameterFixed ; (; unsigned int ; ipar); const. query if a parameter is fixed ; Definition at line 365 of file FitResult.cxx. ◆ IsValid(). bool ROOT::Fit::FitResult::IsValid ; (; ); const. inline . True if fit successful, otherwise false. ; A fit is considered successful if the minimizer succeeded in finding the minimum. It could happen that s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:17544,error,error,17544,doc/master/classROOT_1_1Fit_1_1FitResult.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html,1,['error'],['error']
Availability,"lass(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; RooStats::ConfIntervalConfInterval(const char* name = 0); RooStats::ConfIntervalConfInterval(const RooStats::ConfInterval&); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual RooArgSet*GetParameters() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__ConfInterval.html:2314,error,error,2314,root/html602/RooStats__ConfInterval.html,https://root.cern,https://root.cern/root/html602/RooStats__ConfInterval.html,2,['error'],['error']
Availability,"lass(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; Int_tCountKey(Float_t& keyvalue); Int_tCountKey(Long_t& keyvalue); Int_tCountKey(Int_t& keyvalue); Int_tCountKey(Short_t& keyvalue); Int_tCountKey(Double_t& keyvalue); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; Int_tGetNRows() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTableIter.html:1861,error,error,1861,root/html528/TTableIter.html,https://root.cern,https://root.cern/root/html528/TTableIter.html,6,['error'],['error']
Availability,"lass(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidComputeLogs(Int_t npoints, Int_t opt); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Int_tDistancetoPrimitiveHelper(TGraph* theGraph, Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawPanelHelper(TGraph* theGraph); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExecuteEventHelper(TGraph* theGraph, Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual char*GetObjectInfoHelper(TGraph* theGraph, Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static TVirtualGraphPainter*TVirtualGraphPainter::GetPainter(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphPainter.html:13521,error,error,13521,root/html528/TGraphPainter.html,https://root.cern,https://root.cern/root/html528/TGraphPainter.html,6,['error'],['error']
Availability,"lass(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TClass*GetClassPointer(Bool_t load = kTRUE); Int_tGetDelta() const; static TDictionary*TDictionary::GetDictionary(const char* name); static TDictionary*TDictionary::GetDictionary(const type_info& typeinfo); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TBaseClass.html:1652,error,error,1652,root/html532/TBaseClass.html,https://root.cern,https://root.cern/root/html532/TBaseClass.html,1,['error'],['error']
Availability,"lass(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TClass*GetClassPointer(Bool_t load = kTRUE); Int_tGetDelta() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBaseClass.html:1652,error,error,1652,root/html526/TBaseClass.html,https://root.cern,https://root.cern/root/html526/TBaseClass.html,3,['error'],['error']
Availability,"lass* ptrClass, EDataType datatype, Bool_t ptr); Check whether or not the address described by the last 3 parameters; matches the content of the branch. If a Data Model Evolution conversion; is involved, reset the fInfo of the branch.; The return values are:; kMissingBranch (-5) : Missing branch; kInternalError (-4) : Internal error (could not find the type corresponding to a data type number); kMissingCompiledCollectionProxy (-3) : Missing compiled collection proxy for a compiled collection; kMismatch (-2) : Non-Class Pointer type given does not match the type expected by the branch; kClassMismatch (-1) : Class Pointer type given does not match the type expected by the branch; kMatch (0) : perfect match; kMatchConversion (1) : match with (I/O) conversion; kMatchConversionCollection (2) : match with (I/O) conversion of the content of a collection; kMakeClass (3) : MakeClass mode so we can not check.; kVoidPtr (4) : void* passed so no check was made.; kNoCheck (5) : Underlying TBranch not yet available so no check was made. TTree* CloneTree(Long64_t nentries = -1, Option_t* option = """"); Create a clone of this tree and copy nentries. By default copy all entries.; Note that only active branches are copied.; The compression level of the cloned tree is set to the destination file's; compression level. IMPORTANT: The cloned tree stays connected with this tree until this tree; is deleted. In particular, any changes in branch addresses; in this tree are forwarded to the clone trees, unless a branch; in a clone tree has had its address changed, in which case; that change stays in effect. When this tree is deleted, all the; addresses of the cloned tree are reset to their default values. If 'option' contains the word 'fast' and nentries is -1, the cloning will be; done without unzipping or unstreaming the baskets (i.e., a direct copy of the; raw bytes on disk). When 'fast' is specified, 'option' can also contains a; sorting order for the baskets in the output file. There are c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTree.html:57434,avail,available,57434,root/html530/TTree.html,https://root.cern,https://root.cern/root/html530/TTree.html,2,['avail'],['available']
Availability,"lass* ptrClass, EDataType datatype, Bool_t ptr); Check whether or not the address described by the last 3 parameters; matches the content of the branch. If a Data Model Evolution conversion; is involved, reset the fInfo of the branch.; The return values are:; kMissingBranch (-5) : Missing branch; kInternalError (-4) : Internal error (could not find the type corresponding to a data type number); kMissingCompiledCollectionProxy (-3) : Missing compiled collection proxy for a compiled collection; kMismatch (-2) : Non-Class Pointer type given does not match the type expected by the branch; kClassMismatch (-1) : Class Pointer type given does not match the type expected by the branch; kMatch (0) : perfect match; kMatchConversion (1) : match with (I/O) conversion; kMatchConversionCollection (2) : match with (I/O) conversion of the content of a collection; kMakeClass (3) : MakeClass mode so we can not check.; kVoidPtr (4) : void* passed so no check was made.; kNoCheck (5) : Underlying TBranch not yet available so no check was made. TTree* CloneTree(Long64_t nentries = -1, Option_t* option = """"); Create a clone of this tree and copy nentries. By default copy all entries.; The compression level of the cloned tree is set to the destination; file's compression level. NOTE: Only active branches are copied.; NOTE: If the TTree is a TChain, the structure of the first TTree; is used for the copy. IMPORTANT: The cloned tree stays connected with this tree until; this tree is deleted. In particular, any changes in; branch addresses in this tree are forwarded to the; clone trees, unless a branch in a clone tree has had; its address changed, in which case that change stays in; effect. When this tree is deleted, all the addresses of; the cloned tree are reset to their default values. If 'option' contains the word 'fast' and nentries is -1, the; cloning will be done without unzipping or unstreaming the baskets; (i.e., a direct copy of the raw bytes on disk). When 'fast' is specified, 'optio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:60474,avail,available,60474,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,3,['avail'],['available']
Availability,"lass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTTreeCache::DropBranch(TBranch* b, Bool_t subbranches = kFALSE); virtual voidTTreeCache::DropBranch(const char* branch, Bool_t subbranches = kFALSE); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Bool_tFillBuffer(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTFileCacheRead::GetBufferSize() const; const TObjArray*TTreeCache::GetCachedBranches() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTTreeCache::GetEfficiency() const; Double_tTTreeCache::GetEfficiencyRel() const; virtual const char*TObject::GetIconName() const; static Int_tTTreeCache::GetLearnEntries(); virtual const char*TObject::GetName() const; Int_tGetNFound(); Int_tGetNMissed(); Int_tGetNUnzip(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TTree*TTreeCache::GetOwner() const; static TTreeCacheUnzip::EParUnzipModeGet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTreeCacheUnzip.html:2571,error,error,2571,root/html532/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html532/TTreeCacheUnzip.html,1,['error'],['error']
Availability,"lass, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TClassDocInfo::HashULong_t Hash() const overrideReturn hash value for this object.Definition TDocInfo.cxx:31; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Definition at line 31 of file TDocInfo.cxx. ◆ HaveSource(). Bool_t TClassDocInfo::HaveSource ; (; ); const. inline . Definition at line 71 of file TDocInfo.h. ◆ IsA(). TClass * TClassDocInfo::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 100 of file TDocInfo.h. ◆ IsSelected(). Bool_t TClassDocInfo::IsSelected ; (; ); const. inline . Definition at line 70 of file TDocInfo.h. ◆ IsSortable(). Bool_t TClassDocInfo::IsSortable ; (; ); const. inlineoverridevirtual . Reimplemented from TObject.; Definition at line 84 of file TDocInfo.h. ◆ SetDeclFileName(). void TClassDocInfo::SetDeclFileName ; (; const char * ; name). inline . Definition at line 75 of file TDocInfo.h. ◆ SetDeclFileSysName().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassDocInfo.html:15538,error,error,15538,doc/master/classTClassDocInfo.html,https://root.cern,https://root.cern/doc/master/classTClassDocInfo.html,1,['error'],['error']
Availability,"lass, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TCollection::HashULong_t Hash() const overrideReturn hash value for this object.Definition TCollection.h:186; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:987; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Definition at line 186 of file TCollection.h. ◆ IsA(). TClass * TCollection::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TQCommand, TQUndoManager, TQConnection, THashList, THashTable, TList, TMap, TObjArray, TOrdCollection, TRefArray, TSeqCollection, TSortedList, TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, TListOfFunctionTemplates, TGeoNavigatorArray, TGridJobStatusList, and TParallelCoordSelect.; Definition at line 222 of file TCollection.h. ◆ IsArgNull(). Bool_t TCollection::IsArgNull ; (; const char * ; where, . const TObject * ; obj . ); const. Returns true if object is a null pointer. ; Definition at line 372 of file TCollection.cxx. ◆ IsEmpty(). virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCollection.html:24400,error,error,24400,doc/v632/classTCollection.html,https://root.cern,https://root.cern/doc/v632/classTCollection.html,1,['error'],['error']
Availability,"lass, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TCollection::HashULong_t Hash() const overrideReturn hash value for this object.Definition TCollection.h:186; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Definition at line 186 of file TCollection.h. ◆ IsA(). TClass * TCollection::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TQCommand, TQUndoManager, TQConnection, THashList, THashTable, TList, TMap, TObjArray, TOrdCollection, TRefArray, TSeqCollection, TSortedList, TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, TListOfFunctionTemplates, TGeoNavigatorArray, TGridJobStatusList, and TParallelCoordSelect.; Definition at line 222 of file TCollection.h. ◆ IsArgNull(). Bool_t TCollection::IsArgNull ; (; const char * ; where, . const TObject * ; obj . ); const. Returns true if object is a null pointer. ; Definition at line 372 of file TCollection.cxx. ◆ IsEmpty(). virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCollection.html:24401,error,error,24401,doc/master/classTCollection.html,https://root.cern,https://root.cern/doc/master/classTCollection.html,1,['error'],['error']
Availability,"lass, users do not need to delete it. RooAbsPdf* GetPosteriorPdf() const; Build and return the posterior pdf (i.e posterior function normalized to all range of poi); Note that an extra integration in the POI is required for the normalization; NOTE: user must delete the returned object. RooPlot* GetPosteriorPlot(bool norm = false, double precision = 0.01) const; return a RooPlot with the posterior and the credibility region; NOTE: User takes ownership of the returned object. void SetIntegrationType(const char* type); set the integration type (possible type are) :; 1D integration ( used when only one nuisance and when the posterior is scanned):; adaptive , gauss, nonadaptive; multidim:; ADAPTIVE, adaptive numerical integration; The parameter numIters (settable with SetNumIters) is the max number of function calls.; It can be reduced to make teh integration faster but it will be difficult to reach the required tolerance; VEGAS MC integration method based on importance sampling - numIters is number of function calls; Extra Vegas parameter can be set using IntegratorMultiDimOptions class; MISER MC integration method based on stratified sampling; See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters). Extra integration types are:. TOYMC:; evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; integration, where the function is sampled according to the nuisance. It is convenient to use when all; the nuisance are uncorrelated and it is efficient to generate them; The toy are generated by default for each poi values; (this method has been proposed and provided by J.P Chou); 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; each poi value. It can be convenient when the generation time is much larger than the evaluation time,; otherwise it is recoome",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__BayesianCalculator.html:12691,toler,tolerance,12691,root/html530/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__BayesianCalculator.html,5,['toler'],['tolerance']
Availability,"lassDef(ClassName,ClassVersionID); //The class title; For example in TLine.h we have:; ClassDef(TLine,1); //A line segment; The ClassVersionID is used by the ROOT I/O system. It is written on the output stream and during reading you can check this version ID and take appropriate action depending on the value of the ID. See “Streamers”. Every time you change the data members of a class, you should increase its ClassVersionID by one. The ClassVersionID should be >=1. Set ClassVersionID=0 in case you don’t need object I/O. To be able to generate properly documentation for your classes using THtml you must add the statement:; ClassImp(ClassName); For example in TLine.cxx:; ClassImp(TLine); Note that you should provide a default constructor for your classes, i.e. a constructor with zero parameters or with one or more parameters all with default values in case you want to use object I/O. If do not provide such a default constructor, you MUST implement an I/O constructor. If not you will get a compile time error. See the “The Default Constructor” paragraph in this chapter. The ClassDef and ClassImp macros are defined in the file Rtypes.h. This file is referenced by all ROOT include files, so you will automatically get them if you use a ROOT include file.; 15.2.1 Template Support; In ROOT version 3.03 and older, ROOT provided special ClassDef and ClassImp macros for classes with two and three template arguments. In ROOT version 3.04 and above, the macros ClassDef and ClassImp can be used directly even for a class template. ClassImp is used to register an implementation file in a class. For class templates, the ClassImp can only be used for a specific class template instance.; ClassImp(MyClass1<double>);; For multiple template arguments, you will need to use an intermediary typedef:; typedef MyClass2<int,float> myc_i_f;; ClassImp(myc_i_f);; You can also register an implementation for all instances of a class template by using templateClassImp:; templateClassImp(MyClass3);; H",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:813149,error,error,813149,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['error'],['error']
Availability,"lassDef_StreamerNVirtual_b). Data Members; private:. TRandom*fRand; Double_tfSize; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~DebuggingSampler(). SamplingDistribution* GetSamplingDistribution(RooArgSet& paramsOfInterest); Main interface to get a ConfInterval, pure virtual. Double_t EvaluateTestStatistic(RooAbsData& , RooArgSet& ); Main interface to evaluate the test statistic on a dataset. TestStatistic* GetTestStatistic() const; Get the TestStatistic. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void Initialize(RooAbsArg& , RooArgSet& , RooArgSet& ); Common Initialization. void SetPdf(RooAbsPdf& ); Set the Pdf, add to the the workspace if not already there. {}. void SetParameters(RooArgSet& ); specify the parameters of interest in the interval. {}. void SetNuisanceParameters(const RooArgSet& ); specify the nuisance parameters (eg. the rest of the parameters). {}. void SetParametersForTestStat(const RooArgSet& ); specify the values of parameters used when evaluating test statistic. {}. void SetGlobalObservables(const RooArgSet& ); specify the conditional observables. {}. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size;}. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl;}. void SetTestStatistic(RooStats::TestStatistic* ); Set the TestStatistic (want the argument to be a function of the data & parameter points. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__DebuggingSampler.html:3244,error,error,3244,root/html534/RooStats__DebuggingSampler.html,https://root.cern,https://root.cern/root/html534/RooStats__DebuggingSampler.html,1,['error'],['error']
Availability,"lassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTFileCacheRead::Close(Option_t* option = """"); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTTreeCache::Disable(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTTreeCache::DropBranch(TBranch* b, Bool_t subbranches = kFALSE); virtual voidTTreeCache::DropBranch(const char* branch, Bool_t subbranches = kFALSE); virtual voidTObject::Dump() constMENU ; virtual voidTTreeCache::Enable(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Bool_tFillBuffer(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTFileCacheRead::GetBufferSize() const; virtual Long64_tTFileCacheRead::GetBytesRead() const; virtual Long64_tTFileCacheRead::GetBytesReadExtra() const; const TObjArray*TTreeCache::GetCachedBranches() const; TTreeCache::EPrefillTypeTTreeCache::GetConfiguredPrefillType() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTTreeCache::GetEfficiency() const; Double_tTTreeCache::GetEfficiencyRel() const; virtual Int_tTTreeCache::GetEntryMax() const; virtual Int_tTTreeCache::GetEntryMin() const; TFile*TFileCacheRead::GetFile() const; virtual const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCacheUnzip.html:2739,error,error,2739,root/html534/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html534/TTreeCacheUnzip.html,2,['error'],['error']
Availability,"lassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Double_tfBoostFactorntuple var: boost weight; TH1F*fBoostFactorHistweights applied in boosting; TStringfBoostTypestring specifying the boost type; vector<Double_t>fBoostWeightsthe weights applied in the individual boosts; vector<IMethod*>fCommitteethe collection of members; TH2F*fErrFractHisterror fraction vs member number; Double_tfErrorFractionntuple var: misclassification error fraction ; Int_tfITreentuple var: ith member; TStringfMemberOptionthe options for that method; TMVA::Types::EMVAfMemberTypethe MVA method to be boosted; TTree*fMonitorNtuplemonitoring ntuple; UInt_tfNMembersnumber of members requested; Int_tfNnodesntuple var: nNodes; Bool_tfUseMemberDecisionuse binary information from IsSignal; Bool_tfUseWeightedMembersin the committee weighted from AdaBoost; vector<Double_t>fVariableImportancethe relative importance of the different variables . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodCommittee(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption, TDirectory* theTargetDir = 0); constructor. MethodCommittee(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = 0); constructor for calculating Committee-MVA using previously generatad decision trees; the result of the previous training (the decision trees) are read in via the; weightfile. Make sure the ""theVariables"" cor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodCommittee.html:17310,error,error,17310,root/html530/TMVA__MethodCommittee.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodCommittee.html,2,['error'],['error']
Availability,"lass_Name(). static const char * TMVA::MethodRuleFit::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::MethodRuleFit::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 210 of file MethodRuleFit.h. ◆ CreateRanking(). const TMVA::Ranking * TMVA::MethodRuleFit::CreateRanking ; (; ). virtual . computes ranking of input variables ; Implements TMVA::MethodBase.; Definition at line 578 of file MethodRuleFit.cxx. ◆ DeclareOptions(). void TMVA::MethodRuleFit::DeclareOptions ; (; ). privatevirtual . define the options (their key words) that can be set in the option string know options. ; general. RuleFitModule <string> available values are:; RFTMVA - use TMVA implementation; RFFriedman - use Friedmans original implementation. Path search (fitting). GDTau <float> gradient-directed path: fit threshold, default; GDTauPrec <float> gradient-directed path: precision of estimated tau; GDStep <float> gradient-directed path: step size; GDNSteps <float> gradient-directed path: number of steps; GDErrScale <float> stop scan when error>scale*errmin. Tree generation. fEventsMin <float> minimum fraction of events in a splittable node; fEventsMax <float> maximum fraction of events in a splittable node; nTrees <float> number of trees in forest.; ForestType <string> available values are:; Random - create forest using random subsample and only random variables subset at each node; AdaBoost - create forest with boosted events. Model creation. RuleMinDist <float> min distance allowed between rules; MinImp <float> minimum rule importance accepted; Model <string> model to be used available values are:; ModRuleLinear <default>; ModRule; ModLinear. Friedmans module. RFWorkDir <string> directory where Friedmans module (rf_go.exe) is installed; RFNrules <int> maximum number of rules allowed; RFNendnodes <int> average number of end nodes in the forest of trees . Implements TMVA::MethodBase.; Definiti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodRuleFit.html:34888,error,error,34888,doc/master/classTMVA_1_1MethodRuleFit.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodRuleFit.html,1,['error'],['error']
Availability,"lass_Version(). static constexpr Version_t TMVA::MethodMLP::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 219 of file MethodMLP.h. ◆ ComputeDEDw(). void TMVA::MethodMLP::ComputeDEDw ; (; ). private . Definition at line 697 of file MethodMLP.cxx. ◆ ComputeEstimator(). Double_t TMVA::MethodMLP::ComputeEstimator ; (; std::vector< Double_t > & ; parameters). this function is called by GeneticANN for GA optimization ; Definition at line 1393 of file MethodMLP.cxx. ◆ DecaySynapseWeights(). void TMVA::MethodMLP::DecaySynapseWeights ; (; Bool_t ; lateEpoch). private . decay synapse weights in last 10 epochs, lower learning rate even more to find a good minimum ; Definition at line 1208 of file MethodMLP.cxx. ◆ DeclareOptions(). void TMVA::MethodMLP::DeclareOptions ; (; ). privatevirtual . define the options (their key words) that can be set in the option string ; know options:. TrainingMethod <string> Training method available values are:; BP Back-Propagation <default>; GA Genetic Algorithm (takes a LONG time). LearningRate <float> NN learning rate parameter; DecayRate <float> Decay rate for learning parameter; TestRate <int> Test for overtraining performed at each #th epochs; BPMode <string> Back-propagation learning mode available values are:; sequential <default>; batch. BatchSize <int> Batch size: number of events/batch, only set if in Batch Mode,; -1 for BatchSize=number_of_events . Reimplemented from TMVA::MethodANNBase.; Definition at line 195 of file MethodMLP.cxx. ◆ DeclFileName(). static const char * TMVA::MethodMLP::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 219 of file MethodMLP.h. ◆ DerivDir(). Double_t TMVA::MethodMLP::DerivDir ; (; TMatrixD & ; Dir). private . Definition at line 825 of file MethodMLP.cxx. ◆ EstimatorFunction(). Double_t TMVA::MethodMLP::EstimatorFunction ; (; std::vector< Double_t > & ; parameters). virtual . interface to t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html:41657,avail,available,41657,doc/master/classTMVA_1_1MethodMLP.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html,1,['avail'],['available']
Availability,"lassname is ignored). ;  ; TClass * LoadClass (const char *name, Bool_t silent=kFALSE) const;  Helper function used by TClass::GetClass(). ;  ; Int_t LoadMacro (const char *filename, Int_t *error=nullptr, Bool_t check=kFALSE);  Load a macro in the interpreter's memory. ;  ; void ls (Option_t *option="""") const override;  To list all objects of the application. ;  ; Longptr_t Macro (const char *filename, Int_t *error=nullptr, Bool_t padUpdate=kTRUE);  Execute a macro in the interpreter. ;  ; TCanvas * MakeDefCanvas () const;  Return a default canvas. ;  ; void Message (Int_t id, const TObject *obj);  Process message id called by obj. ;  ; Bool_t MustClean () const;  ; Longptr_t ProcessLine (const char *line, Int_t *error=nullptr);  Process interpreter command via TApplication::ProcessLine(). ;  ; Longptr_t ProcessLineFast (const char *line, Int_t *error=nullptr);  Process interpreter command directly via CINT interpreter. ;  ; Longptr_t ProcessLineSync (const char *line, Int_t *error=nullptr);  Process interpreter command via TApplication::ProcessLine(). ;  ; Bool_t ReadingObject () const;  Deprecated (will be removed in next release). ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove this object from the list of Cleanups. ;  ; void RefreshBrowsers ();  Refresh all browsers. ;  ; TObject * Remove (TObject *) override;  Remove an object from the in-memory list. ;  ; void RemoveClass (TClass *);  Remove a class from the list and map of classes. ;  ; void Reset (Option_t *option="""");  Delete all global interpreter objects created since the last call to Reset. ;  ; void ResetClassSaved ();  Reset the ClassSaved status of all classes. ;  ; void SaveContext ();  Save the current interpreter context. ;  ; void SetApplication (TApplication *app);  ; void SetBatch (Bool_t batch=kTRUE);  Set batch mode for ROOT If the argument evaluates to true, the session does not use interactive graphics. ;  ; void SetCutClassName (const char *name=""TCutG"");  Set the defa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTROOT.html:11309,error,error,11309,doc/v632/classTROOT.html,https://root.cern,https://root.cern/doc/v632/classTROOT.html,2,['error'],['error']
Availability,"lassprivate; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""") overrideTClassvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() const overrideTClassinlinevirtual; Dump(const void *obj, Bool_t noAddr=kFALSE) constTClass; DynamicCast(const TClass *base, void *obj, Bool_t up=kTRUE)TClass; DynamicCast(const TClass *base, const void *obj, Bool_t up=kTRUE)TClass; ECheckSum enum nameTClass; EDeprecatedStatusBits enum nameTObject; EMemberSelection enum nameTDictionary; ENewType enum nameTClass; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; ERuntimeProperties enum nameTClassprivate; EscapeChars(const char *text) constTClass; EState enum nameTClass; EStatusBits enum nameTClass; ESTLType enum nameTDictionary; EStreamerType enum nameTClassprivate; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; fAllPubDataTClassprivate; fAllPubMethodTClassprivate; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fAttributeMapTDictionaryprivate; fBaseTClassprivate; fBitsTObjectprivate; fCanLoadClassInfoTClassmutableprivate; fCanSplitTClassprivate; fCheckSumTClassmutableprivate; fClassInfoTClassprivate; fClassMenuListTClassmutableprivate; fClassPropertyTClassmutableprivate; fClassVersionTClassprivate; fCollectionProxyTClassprivate; fContextMenuTitleTClassprivate; fConversionStreamerInfoTClassmutableprivate; fConvStreamerFuncTClassprivate; fCurrentInfoTClassmutableprivate; fDataTClassprivate; fDeclFileLineTClassprivate; fDeclFileNameTClassprivate; fDeleteTClassprivate; fDeleteArrayTClassprivate; fDestructorTClassprivate; fDirAutoAddTClassprivate; fEnumsTClassprivate; fFuncTemplateTClassprivate; fgC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass-members.html:3501,error,error,3501,doc/master/classTClass-members.html,https://root.cern,https://root.cern/doc/master/classTClass-members.html,2,['error'],['error']
Availability,"lastLayerData, . Batch & ; batch, . ItWeight ; itWeightBegin, . ItWeight ; itWeightEnd . ); const. Definition at line 1321 of file NeuralNet.icc. ◆ dE(). void TMVA::DNN::Net::dE ; (; ). ◆ dropOutWeightFactor(). template<typename WeightsType , typename DropProbabilities > . void TMVA::DNN::Net::dropOutWeightFactor ; (; WeightsType & ; weights, . const DropProbabilities & ; drops, . bool ; inverse = false . ). set the drop out configuration ; compute the drop-out-weight factor; when using drop-out a fraction of the nodes is turned off at each cycle of the computation once all nodes are turned on again (for instances when the test samples are evaluated), the weights have to be adjusted to account for the different number of active nodes this function computes the factor and applies it to the weights ; Definition at line 652 of file NeuralNet.icc. ◆ E(). double TMVA::DNN::Net::E ; (; ). ◆ errorFunction(). template<typename Container , typename ItWeight > . double TMVA::DNN::Net::errorFunction ; (; LayerData & ; layerData, . Container ; truth, . ItWeight ; itWeight, . ItWeight ; itWeightEnd, . double ; patternWeight, . double ; factorWeightDecay, . EnumRegularization ; eRegularization . ); const. computes the error of the DNN ; compute the error function; Definition at line 1579 of file NeuralNet.icc. ◆ fetchOutput() [1/2]. template<typename OutputContainer > . void TMVA::DNN::Net::fetchOutput ; (; const LayerData & ; lastLayerData, . OutputContainer & ; outputContainer . ); const. Definition at line 1291 of file NeuralNet.icc. ◆ fetchOutput() [2/2]. template<typename OutputContainer > . void TMVA::DNN::Net::fetchOutput ; (; const std::vector< LayerData > & ; layerPatternData, . OutputContainer & ; outputContainer . ); const. Definition at line 1312 of file NeuralNet.icc. ◆ fillDropContainer(). void TMVA::DNN::Net::fillDropContainer ; (; DropContainer & ; dropContainer, . double ; dropFraction, . size_t ; _numNodes . ); const. protected . prepare the drop-out-container (s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Net.html:9871,error,errorFunction,9871,doc/master/classTMVA_1_1DNN_1_1Net.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Net.html,1,['error'],['errorFunction']
Availability,"late the absolute sum of all errors. . Definition at line 57 of file TGraphMultiErrors.h. Constructor & Destructor Documentation. ◆ TGraphMultiErrors() [1/23]. TGraphMultiErrors::TGraphMultiErrors ; (; ). TGraphMultiErrors default constructor. ; Definition at line 66 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [2/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title . ). TGraphMultiErrors default constructor with name and title. ; Definition at line 74 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [3/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne = 1 . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; All values are initialized to 0. ; Definition at line 84 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [4/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne = 1 . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; All values are initialized to 0. ; Definition at line 95 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [5/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL = nullptr, . const Float_t * ; exH = nullptr, . const Float_t * ; eyL = nullptr, . const Float_t * ; eyH = nullptr, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and a single y-error. ; The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors. If exL,exH or eyL,exH are NULL, the corresponding values are preset to zero. ; Definition at line 107 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [6/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL = nullptr, . const Float_t * ; exH = nullptr, . const Fl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:45733,error,errors,45733,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['errors']
Availability,late<typename Architecture_t > . size_t TMVA::DNN::TDLGradientDescent< Architecture_t >::GetConvergenceSteps ; (; ); const. inline . Definition at line 147 of file DLMinimizers.h. ◆ GetTestError(). template<typename Architecture_t > . Scalar_t TMVA::DNN::TDLGradientDescent< Architecture_t >::GetTestError ; (; ); const. inline . Definition at line 149 of file DLMinimizers.h. ◆ GetTestInterval(). template<typename Architecture_t > . size_t TMVA::DNN::TDLGradientDescent< Architecture_t >::GetTestInterval ; (; ); const. inline . Definition at line 150 of file DLMinimizers.h. ◆ GetTrainingError(). template<typename Architecture_t > . Scalar_t TMVA::DNN::TDLGradientDescent< Architecture_t >::GetTrainingError ; (; ); const. inline . Definition at line 148 of file DLMinimizers.h. ◆ HasConverged() [1/2]. template<typename Architecture_t > . bool TMVA::DNN::TDLGradientDescent< Architecture_t >::HasConverged. Increases the minimization step counter by the test error evaluation period and uses the current internal value of the test error to determine if the minimization has converged. ; Definition at line 276 of file DLMinimizers.h. ◆ HasConverged() [2/2]. template<typename Architecture_t > . bool TMVA::DNN::TDLGradientDescent< Architecture_t >::HasConverged ; (; Scalar_t ; testError). Increases the minimization step counter by the test error evaluation period and uses the provided test error value to determine if the minimization has converged. ; Definition at line 290 of file DLMinimizers.h. ◆ Reset(). template<typename Architecture_t > . void TMVA::DNN::TDLGradientDescent< Architecture_t >::Reset ; (; ). inline . Reset minimizer object to default state. ; Definition at line 89 of file DLMinimizers.h. ◆ SetBatchSize(). template<typename Architecture_t > . void TMVA::DNN::TDLGradientDescent< Architecture_t >::SetBatchSize ; (; Scalar_t ; rate). inline . Definition at line 156 of file DLMinimizers.h. ◆ SetConvergenceSteps(). template<typename Architecture_t > . void TMVA::DNN::,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html:6195,error,error,6195,doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,2,['error'],['error']
Availability,"lated error from bgr sources; TMap*fBgrInInput: size of background sources; Double_tTUnfold::fBiasScaleInput: scale factor for the bias; TUnfold::EConstraintTUnfold::fConstraintInput: type of constraint to use; TMatrixD*fDAinColRelSqInput: normalized column err.sq. (inp.matr.); TMatrixDSparse*fDAinRelSqInput: normalized errors from input matrix; TMap*fDeltaCorrAxResult: syst.shift from fSysIn on fAx; TMap*fDeltaCorrXResult: syst.shift from fSysIn on fX; TMatrixDSparse*fDeltaSysTauResult: systematic shift from tau; Double_tfDtauInput: error on tau; TMatrixDSparse*fEmatUncorrAxResult: syst.error from fDA2 on fAx; TMatrixDSparse*fEmatUncorrXResult: syst.error from fDA2 on fX; TArrayITUnfold::fHistToXInput: histogram bins -> matrix indices; TMatrixDSparse*TUnfold::fLsquaredInput: regularisation conditions squared; TUnfold::ERegModeTUnfold::fRegModeInput: type of regularisation; TArrayDTUnfold::fSumOverYInput: sum of all columns; TMap*fSysInInput: correlated errors; Double_tTUnfold::fTauSquaredInput: regularisation parameter; TMatrixDSparse*TUnfold::fVyyInput: covariance matrix for y; TMatrixDSparse*fVyyDataInput: error on fY prior to bgr subtraction; TMatrixD*TUnfold::fX0Input: x0; TArrayITUnfold::fXToHistInput: matrix indices -> histogram bins; TMatrixD*TUnfold::fYInput: y; TMatrixD*fYDataInput: fY prior to bgr subtraction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TUnfoldSys(const TUnfoldSys& ); set all pointers to zero. TUnfoldSys(const TH2* hist_A, TUnfold::EHistMap histmap, TUnfold::ERegMode regmode = kRegModeSize, TUnfold::EConstraint constraint = kEConstraintNone); arguments:; hist_A: matrix that describes the migrations; histmap: mapping of the histogram axes to the unfolding output; regmode: global regularisation mode; data members initialized to something different from zero:; fDA2, fDAcol; initialize TUnfold. void AddSysError(const TH2* sysError, const char* name, TUnfold::EHistMap histmap, TUnfoldSys::ESysErrMo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:17410,error,error,17410,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,9,['error'],"['error', 'errors']"
Availability,"lated information). Int_t AuthExists(TString User, Int_t method, const char* Options, Int_t* Message, Int_t* Rflag, CheckSecCtx_t funcheck); Check if we have a valid established sec context in memory; Retrieves relevant info and negotiates with server.; options = ""Opt,strlen(username),username.Data()""; message = kROOTD_USER, ... void InitRandom(); Initialize random machine using seed from /dev/urandom; (or current time if /dev/urandom not available). Int_t GenRSAKeys(); Generate a valid pair of private/public RSA keys to protect for; authentication token exchange. char * GetRandString(Int_t Opt, Int_t Len); Allocates and fills a 0 terminated buffer of length len+1 with; len random characters.; Returns pointer to the buffer (to be deleted by the caller); opt = 0 any non dangerous char; 1 letters and numbers (upper and lower case); 2 hex characters (upper and lower case). Int_t SecureSend(TSocket* Socket, Int_t enc, Int_t KeyType, const char* In); Encode null terminated str using the session private key indicated by enc; and sends it over the network; Returns number of bytes sent, or -1 in case of error.; enc = 1 for private encoding, enc = 2 for public encoding. Int_t SecureRecv(TSocket* Socket, Int_t dec, Int_t KeyType, char** Out); Receive str from sock and decode it using key indicated by key type; Return number of received bytes or -1 in case of error.; dec = 1 for private decoding, dec = 2 for public decoding. Int_t DecodeRSAPublic(const char* rsapubexport, rsa_NUMBER& n, rsa_NUMBER& d, char** rsassl = 0); Store RSA public keys from export string rsaPubExport. Int_t SetRSAPublic(const char* rsapubexport, Int_t klen); Store RSA public keys from export string rsaPubExport.; Returns type of stored key, or -1 is not recognized. Int_t SendRSAPublicKey(TSocket* Socket, Int_t key = 0); Receives server RSA Public key; Sends local RSA public key encoded. Int_t ReadRootAuthrc(); Read authentication directives from $ROOTAUTHRC, $HOME/.rootauthrc or; <Root_etc_dir>/system.ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAuthenticate.html:20080,error,error,20080,root/html526/TAuthenticate.html,https://root.cern,https://root.cern/root/html526/TAuthenticate.html,7,['error'],['error']
Availability,"lating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxymean; RooRealProxysigma; RooRealProxywidth; RooRealProxyx. private:. Bool_t_doFast; Double_t_invRootPi. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooVoigtian(const char* name, const char* title, RooAbsReal& _x, RooAbsReal& _mean, RooAbsReal& _width, RooAbsReal& _sigma, Bool_t doFast = kFALSE). RooVoigtian(const RooVoigtian& other, const char* name = 0). Double_t evaluate() const. RooVoigtian(); {}. TObject* clone(const char* newname) const; { return new RooVoigtian(*this,newname); }. virtual ~RooVoigtian(); { }. void selectFastAlgorithm(); These methods allow the user to select the fast evaluation; of the complex error function using look-up tables; (default is the ""slow"" CERNlib algorithm). { _doFast = kTRUE; }. void selectDefaultAlgorithm(); { _doFast = kFALSE; }. » Last changed: Tue Jun 2 15:36:42 2015 » Last generated: 2015-06-02 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooVoigtian.html:45835,error,error,45835,root/html604/RooVoigtian.html,https://root.cern,https://root.cern/root/html604/RooVoigtian.html,1,['error'],['error']
Availability,"lation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual double CovMatrix (unsigned int ivar, unsigned int jvar) const;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; virtual double Edm () const;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:5849,error,errors,5849,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,2,['error'],['errors']
Availability,"lation matrix element addressed with numeric indices. Double_t covariance(Int_t row, Int_t col) const; Return the covariance matrix element addressed with numeric indices. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print fit result to stream 'os'. In Verbose mode, the contant parameters and; the initial and final values of the floating parameters are printed.; Standard mode only the final values of the floating parameters are printed. void fillCorrMatrix(const vector<double>& globalCC, const TMatrixDSym& corrs, const TMatrixDSym& covs); Function called by RooMinimizer. void fillLegacyCorrMatrix() const; Sanity check. void fillCorrMatrix(); Internal utility method to extract the correlation matrix and the; global correlation coefficients from the MINUIT memory buffer and; fill the internal arrays. Bool_t isIdentical(const RooFitResult& other, Double_t tol = 5e-5, Double_t tolCorr = 1e-4, Bool_t verbose = kTRUE) const; Return true if this fit result is identical to other within tolerance 'tol' on fitted values; and tolerance 'tolCor' on correlation coefficients. RooFitResult* lastMinuitFit(const RooArgList& varList = RooArgList()); Import the results of the last fit performed by gMinuit, interpreting; the fit parameters as the given varList of parameters. void setCovarianceMatrix(TMatrixDSym& V); Store externally provided correlation matrix in his RooFitResult ;. TH2* correlationHist(const char* name = ""correlation_matrix"") const; Return TH2D of correlation matrix. const TMatrixDSym& covarianceMatrix() const; Return covariance matrix. TMatrixDSym reducedCovarianceMatrix(const RooArgList& params) const; Return a reduced covariance matrix (Note that Vred _is_ a simple sub-matrix of V,; row/columns are ordered to matched the convention given in input argument 'params'. TMatrixDSym conditionalCovarianceMatrix(const RooArgList& params) const; Return a reduced covariance matrix, which is calculated as; ___ -1; Vred =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooFitResult.html:14206,toler,tolerance,14206,root/html532/RooFitResult.html,https://root.cern,https://root.cern/root/html532/RooFitResult.html,4,['toler'],['tolerance']
Availability,"lation matrix element addressed with numeric indices. Double_t covariance(Int_t row, Int_t col) const; Return the covariance matrix element addressed with numeric indices. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print fit result to stream 'os'. In Verbose mode, the contant parameters and; the initial and final values of the floating parameters are printed.; Standard mode only the final values of the floating parameters are printed. void fillCorrMatrix(const vector<double>& globalCC, const TMatrixDSym& corrs, const TMatrixDSym& covs); Function called by RooMinimizer. void fillLegacyCorrMatrix() const; Sanity check. void fillCorrMatrix(); Internal utility method to extract the correlation matrix and the; global correlation coefficients from the MINUIT memory buffer and; fill the internal arrays. Bool_t isIdentical(const RooFitResult& other, Double_t tol = 5e-5, Double_t tolCorr = 1e-4, Bool_t verbose = kTRUE) const; Return true if this fit result is identical to other within tolerance 'tol' on fitted values; and tolerance 'tolCor' on correlation coefficients. RooFitResult* lastMinuitFit(const RooArgList& varList = RooArgList()); Import the results of the last fit performed by gMinuit, interpreting; the fit parameters as the given varList of parameters. void setCovarianceMatrix(TMatrixDSym& V); Store externally provided correlation matrix in his RooFitResult ;. TH2* correlationHist(const char* name = ""correlation_matrix"") const; Return TH2D of correlation matrix. const TMatrixDSym& covarianceMatrix() const; Return covariance matrix. TMatrixDSym reducedCovarianceMatrix(const RooArgList& params) const; Return a reduced covariance matrix, which is calculated as; ___ -1; Vred = V22 = V11 - V12 * V22 * V21. Where V11,V12,V21,V22 represent a block decomposition of the covariance matrix into observables that; are propagated (labeled by index '1') and that are not propagated (labeled by index '2'), and V22bar; is the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFitResult.html:13686,toler,tolerance,13686,root/html526/RooFitResult.html,https://root.cern,https://root.cern/root/html526/RooFitResult.html,6,['toler'],['tolerance']
Availability,"lator type) and a RooRealVar for the variable. ~HypoTestInverterOriginal(); destructor. void CreateResults(); create a new HypoTestInverterResult to hold all computed results. bool RunAutoScan(double xMin, double xMax, double target, double epsilon = 0.0050000000000000001, unsigned int numAlgorithm = 0); Search for the value of the parameter of interest (vary the; hypothesis being tested) in the specified range [xMin,xMax]; until the confidence level is compatible with the target value; within one time the estimated error (and the estimated error; should also become smaller than the specified parameter epsilon). bool RunFixedScan(int nBins, double xMin, double xMax); Run a Fixed scan in npoints between min and max. bool RunOnePoint(double thisX); run only one point. HypoTestInverterOriginal(); default constructor (used only for I/O). HypoTestInverterResult* GetInterval() const; { return fResults; }. void UseCLs(bool on = true); { fUseCLs = on; if (fResults) fResults->UseCLs(on); }. void SetData(RooAbsData& ); { }. void SetModel(const RooStats::ModelConfig& ); { }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size; if (fResults) fResults->SetTestSize(size); }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl; if (fResults) fResults->SetConfidenceLevel(cl); }. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-06-02 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__HypoTestInverterOriginal.html:10080,error,error,10080,root/html604/RooStats__HypoTestInverterOriginal.html,https://root.cern,https://root.cern/root/html604/RooStats__HypoTestInverterOriginal.html,2,['error'],['error']
Availability,"lator type) and a RooRealVar for the variable. ~HypoTestInverterOriginal(); destructor. void CreateResults(); create a new HypoTestInverterResult to hold all computed results. bool RunAutoScan(double xMin, double xMax, double target, double epsilon = 0.0050000000000000001, unsigned int numAlgorithm = 0); Search for the value of the parameter of interest (vary the; hypothesis being tested) in the specified range [xMin,xMax]; until the confidence level is compatible with the target value; within one time the estimated error (and the estimated error; should also become smaller than the specified parameter epsilon). bool RunFixedScan(int nBins, double xMin, double xMax); Run a Fixed scan in npoints between min and max. bool RunOnePoint(double thisX); run only one point. HypoTestInverterOriginal(); default constructor (used only for I/O). HypoTestInverterResult* GetInterval() const; { return fResults; }. void UseCLs(bool on = true); { fUseCLs = on; if (fResults) fResults->UseCLs(on); }. void SetData(RooAbsData& ); { }. void SetModel(const RooStats::ModelConfig& ); { }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size; if (fResults) fResults->SetTestSize(size); }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl; if (fResults) fResults->SetConfidenceLevel(cl); }. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-06-30 14:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestInverterOriginal.html:10080,error,error,10080,root/html602/RooStats__HypoTestInverterOriginal.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestInverterOriginal.html,2,['error'],['error']
Availability,"launay painting class. ; TGraph2DPainter paints a TGraphDelaunay using triangles or clouds of points.; See documentation of TGraph2D, TGraph2DErrors and TGraph2DAsymmErrors to get the list of drawing options for these classes. ; Definition at line 31 of file TGraph2DPainter.h. Public Member Functions;  TGraph2DPainter ();  TGraph2DPainter default constructor. ;  ;  TGraph2DPainter (TGraphDelaunay *gd);  TGraph2DPainter constructor using the old Delaunay algorithm. ;  ;  TGraph2DPainter (TGraphDelaunay2D *gd);  TGraph2DPainter constructor using the new Delaunay algorithm. ;  ;  ~TGraph2DPainter () override;  TGraph2DPainter destructor. ;  ; TList * GetContourList (Double_t contour);  Returns the X and Y graphs building a contour. ;  ; TClass * IsA () const override;  ; void Paint (Option_t *option) override;  Paint a TGraphDelaunay according to the value of ""option"": ;  ; void PaintContour (Option_t *option);  Paints the 2D graph as a contour plot. ;  ; void PaintErrors (Option_t *option);  Paints the 2D graph as error bars. ;  ; void PaintPolyLine (Option_t *option);  Paints the 2D graph as PaintPolyLine. ;  ; void PaintPolyMarker (Option_t *option);  Paints the 2D graph as PaintPolyMarker. ;  ; void PaintTriangles (Option_t *option);  Paints the 2D graph as triangles. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DPainter.html:1434,error,error,1434,doc/master/classTGraph2DPainter.html,https://root.cern,https://root.cern/doc/master/classTGraph2DPainter.html,1,['error'],['error']
Availability,"lave*, TProofProgressStatus*, Double_t, TList**); virtual Int_tAddWorkers(TList* workers); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tAssignWork(TDSet*, Long64_t, Long64_t num); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tGetActiveWorkers(); Long64_tTVirtualPacketizer::GetBytesRead() const; TList*TVirtualPacketizer::GetConfigParams(Bool_t steal = kFALSE); Double_tTVirtualPacketizer::GetCumProcTime() const; virtual Float_tGetCurrentRate(Bool_t& all); Double_tGetCurrentTime(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tTVirtualPacketizer::GetEntriesProcessed() const; virtual Int_tTVirtualPacketizer::GetEstEntriesProcessed(Float_t, Long64_t& ent, Long64_t& bytes, Long64_t& calls); TList*TVirtualPacketizer::GetFailedPackets(); virtual const char*TObject::GetIconName() const; Float_tTVirtualPa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPacketizerUnit.html:1995,error,error,1995,root/html534/TPacketizerUnit.html,https://root.cern,https://root.cern/root/html534/TPacketizerUnit.html,1,['error'],['error']
Availability,"laves list = kActive); Send interrupt to master or slave servers. Int_t GetParallel() const; Returns number of slaves active in parallel mode. Returns 0 in case; there are no active slaves. Returns -1 in case of error. TList * GetListOfSlaveInfos(); Returns list of TSlaveInfo's. In case of error return 0. void Activate(TList* slaves = 0); Activate slave server list. void SetMonitor(TMonitor* mon = 0, Bool_t on = kTRUE); Activate (on == TRUE) or deactivate (on == FALSE) all sockets; monitored by 'mon'. Int_t BroadcastGroupPriority(const char* grp, Int_t priority, TList* workers); Broadcast the group priority to all workers in the specified list. Returns; the number of workers the message was successfully sent to.; Returns -1 in case of error. Int_t BroadcastGroupPriority(const char* grp, Int_t priority, TProof::ESlaves list = kAllUnique); Broadcast the group priority to all workers in the specified list. Returns; the number of workers the message was successfully sent to.; Returns -1 in case of error. void ResetMergePrg(); Reset the merge progress notificator. Int_t Broadcast(const TMessage& mess, TList* slaves); Broadcast a message to all slaves in the specified list. Returns; the number of slaves the message was successfully sent to.; Returns -1 in case of error. Int_t Broadcast(const TMessage& mess, TProof::ESlaves list = kActive); Broadcast a message to all slaves in the specified list (either; all slaves or only the active slaves). Returns the number of slaves; the message was successfully sent to. Returns -1 in case of error. Int_t Broadcast(const char* mess, Int_t kind, TList* slaves); Broadcast a character string buffer to all slaves in the specified; list. Use kind to set the TMessage what field. Returns the number of; slaves the message was sent to. Returns -1 in case of error. Int_t Broadcast(const char* mess, Int_t kind = kMESS_STRING, TProof::ESlaves list = kActive); Broadcast a character string buffer to all slaves in the specified; list (either all sla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:38829,error,error,38829,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,6,['error'],['error']
Availability,"layIncludePath, number of paths and options is not equal"");; 7428 ; 7429 std::string allIncludes(""include path:"");; 7430 for (size_t i = 0; i < nPaths; i += 2) {; 7431 allIncludes += ' ';; 7432 allIncludes += includePaths[i];; 7433 ; 7434 if (includePaths[i] != ""-I""); 7435 allIncludes += ' ';; 7436 allIncludes += includePaths[i + 1];; 7437 }; 7438 ; 7439 fprintf(fout, ""%s\n"", allIncludes.c_str());; 7440 }; 7441 ; 7442 return 0;; 7443}; 7444 ; 7445////////////////////////////////////////////////////////////////////////////////; 7446/// Interface to cling function; 7447 ; 7448void* TCling::FindSym(const char* entry) const; 7449{; 7450 R__LOCKGUARD(gInterpreterMutex);; 7451 return fInterpreter->getAddressOfGlobal(entry);; 7452}; 7453 ; 7454////////////////////////////////////////////////////////////////////////////////; 7455/// Let the interpreter issue a generic error, and set its error state.; 7456 ; 7457void TCling::GenericError(const char* error) const; 7458{; 7459#if defined(R__MUST_REVISIT); 7460#if R__MUST_REVISIT(6,2); 7461 Warning(""GenericError"",""Interface not available yet."");; 7462#endif; 7463#endif; 7464}; 7465 ; 7466////////////////////////////////////////////////////////////////////////////////; 7467/// This routines used to return the address of the internal wrapper; 7468/// function (of the interpreter) that was used to call *all* the; 7469/// interpreted functions that were bytecode compiled (no longer; 7470/// interpreted line by line). In Cling, there is no such; 7471/// wrapper function.; 7472/// In practice this routines was use to decipher whether the; 7473/// pointer returns by InterfaceMethod could be used to uniquely; 7474/// represent the function. In Cling if the function is in a; 7475/// useable state (its compiled version is available), this is; 7476/// always the case.; 7477/// See TClass::GetMethod.; 7478 ; 7479Long_t TCling::GetExecByteCode() const; 7480{; 7481 return 0;; 7482}; 7483 ; 7484/////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:291061,error,error,291061,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,2,"['avail', 'error']","['available', 'error']"
Availability,"layer.cxx. ◆ Finalize() [2/2]. Long64_t TProofPlayer::Finalize ; (; TQueryResult * ; qr). overridevirtual . Finalize query (may not be used in this class). ; Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote, and TProofPlayerLite.; Definition at line 1580 of file TProofPlayer.cxx. ◆ GetCacheSize(). Long64_t TProofPlayer::GetCacheSize ; (; ). overridevirtual . Return the size in bytes of the cache. ; Implements TVirtualProofPlayer.; Definition at line 1796 of file TProofPlayer.cxx. ◆ GetCurrentQuery(). TQueryResult * TProofPlayer::GetCurrentQuery ; (; ); const. inlineoverridevirtual . Implements TVirtualProofPlayer.; Definition at line 164 of file TProofPlayer.h. ◆ GetDrawArgs(). Int_t TProofPlayer::GetDrawArgs ; (; const char * ; var, . const char * ; sel, . Option_t * ; opt, . TString & ; selector, . TString & ; objname . ). overridevirtual . Parse the arguments from var, sel and opt and fill the selector and object name accordingly. ; Return 0 in case of success, 1 if libProofDraw is not available. ; Implements TVirtualProofPlayer.; Definition at line 1730 of file TProofPlayer.cxx. ◆ GetEventsProcessed(). Long64_t TProofPlayer::GetEventsProcessed ; (; ); const. inlineoverridevirtual . Implements TVirtualProofPlayer.; Definition at line 206 of file TProofPlayer.h. ◆ GetExitStatus(). EExitStatus TProofPlayer::GetExitStatus ; (; ); const. inlineoverridevirtual . Implements TVirtualProofPlayer.; Definition at line 205 of file TProofPlayer.h. ◆ GetInputList(). TList * TProofPlayer::GetInputList ; (; ); const. inlineoverridevirtual . Implements TVirtualProofPlayer.; Definition at line 161 of file TProofPlayer.h. ◆ GetLearnEntries(). Int_t TProofPlayer::GetLearnEntries ; (; ). overridevirtual . Return the number of entries in the learning phase. ; Implements TVirtualProofPlayer.; Definition at line 1805 of file TProofPlayer.cxx. ◆ GetListOfResults(). TList * TProofPlayer::GetListOfResults ; (; ); const. inlineoverridevirtual . Implements TVirtualProofPl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayer.html:30125,avail,available,30125,doc/master/classTProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTProofPlayer.html,1,['avail'],['available']
Availability,"layerSuperMaster::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TProofPlayerRemote.; Definition at line 442 of file TProofPlayer.h. ◆ Process() [1/2]. Long64_t TProofPlayerSuperMaster::Process ; (; TDSet * ; dset, . const char * ; selector_file, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; first = 0 . ). overridevirtual . Process specified TDSet on PROOF. ; Runs on super master. The return value is -1 in case of error and TSelector::GetStatus() in in case of success. ; Reimplemented from TProofPlayerRemote.; Definition at line 4481 of file TProofPlayer.cxx. ◆ Process() [2/2]. Long64_t TProofPlayerSuperMaster::Process ; (; TDSet * ; dset, . TSelector * ; selector, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; first = 0 . ). inlineoverridevirtual . Process specified TDSet on PROOF. ; This method is called on client and on the PROOF master. The return value is -1 in case of an error and TSelector::GetStatus() in in case of success. ; Reimplemented from TProofPlayerRemote.; Definition at line 423 of file TProofPlayer.h. ◆ Progress() [1/6]. void TProofPlayerSuperMaster::Progress ; (; Long64_t ; total, . Long64_t ; processed . ). inlineoverridevirtual . Progress signal. ; Reimplemented from TProofPlayerRemote.; Definition at line 428 of file TProofPlayer.h. ◆ Progress() [2/6]. void TProofPlayerSuperMaster::Progress ; (; Long64_t ; total, . Long64_t ; processed, . Long64_t ; bytesread, . Float_t ; initTime, . Float_t ; procTime, . Float_t ; evtrti, . Float_t ; mbrti . ). inlineoverridevirtual . Progress signal. ; Reimplemented from TProofPlayerRemote.; Definition at line 430 of file TProofPlayer.h. ◆ Progress() [3/6]. void TProofPlayerSuperMaster::Progress ; (; TProofProgressInfo * ; pi). inlineoverridevirtual . Progress signal. ; Reimplemented from TProofPlayerRemote.; Definition at line 435 of file TProofPlayer.h. ◆ Progress() [4/6]. void TProofPlayerSuperMaster::Progr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerSuperMaster.html:28816,error,error,28816,doc/master/classTProofPlayerSuperMaster.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerSuperMaster.html,1,['error'],['error']
Availability,"lbDist = 0, const char* outputfile = ""HypoTestInverterRebuiltDist.root""); rebuild the sampling distributions by; generating some toys and find for each of theam a new upper limit; Return the upper limit distribution and optionally also the pValue distributions for Cls, Clsb and Clbxs; as a TList for each scanned point; The method uses the present parameter value. It is user responsability to give the current parameters to rebuild the distributions; It returns a upper or lower limit distribution depending on the isUpper flag, however it computes also the lower limit distribution and it is saved in the; output file as an histogram. void SetFixedScan(int nBins, double xMin = 1, double xMax = -1, bool scanLog = false); set for a fixed scan in nbins. void SetAutoScan(); set auto scan (default). { SetFixedScan(0); }. void UseCLs(bool on = true); { fUseCLs = on; if (fResults) fResults->UseCLs(on); }. void SetModel(const RooStats::ModelConfig& ); { }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size; if (fResults) fResults->SetTestSize(size); }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl; if (fResults) fResults->SetConfidenceLevel(cl); }. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. HypoTestCalculatorGeneric * GetHypoTestCalculator() const; retrieved a reference to the internally used HypoTestCalculator; it might be invalid when the class is deleted. { return fCalculator0; }. void SetVerbose(int level = 1); set verbose level (0,1,2). { fVerbose = level; }. void SetMaximumToys(int ntoys); set maximum number of toys. { fMaxToys = ntoys;}. void SetNumErr(double err); set numerical error in test statistic evaluation (default is zero). { fNumErr = err; }. » Auth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverter.html:12054,error,error,12054,root/html534/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverter.html,3,['error'],['error']
Availability,"lbufferSize). static . static function: Sets the unzip relative buffer size ; Definition at line 830 of file TTreeCacheUnzip.cxx. ◆ StopLearningPhase(). void TTreeCacheUnzip::StopLearningPhase ; (; ). overridevirtual . It's the same as TTreeCache::StopLearningPhase but we guarantee that we start the unzipping just after getting the buffers. ; Reimplemented from TTreeCache.; Definition at line 384 of file TTreeCacheUnzip.cxx. ◆ Streamer(). void TTreeCacheUnzip::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TTreeCache. ◆ StreamerNVirtual(). void TTreeCacheUnzip::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 159 of file TTreeCacheUnzip.h. ◆ UnzipBuffer(). Int_t TTreeCacheUnzip::UnzipBuffer ; (; char ** ; dest, . char * ; src . ). Unzips a ROOT specific buffer... by reading the header at the beginning. ; returns the size of the inflated buffer or -1 if error Note!! : If *dest == 0 we will allocate the buffer and it will be the responsibility of the caller to free it... it is useful for example to pass it to the creator of TBuffer src is the original buffer with the record (header+compressed data) *dest is the inflated buffer (including the header) ; Definition at line 853 of file TTreeCacheUnzip.cxx. ◆ UnzipCache(). Int_t TTreeCacheUnzip::UnzipCache ; (; Int_t ; index). This inflates a basket in the cache. ; . passing the data to a new buffer that will only wait there to be read... This function is responsible to update corresponding elements in fUnzipStatus, fUnzipChunks and fUnzipLen. Since we use atomic variables in fUnzipStatus to exclusively unzip the basket, we must update fUnzipStatus after fUnzipChunks and fUnzipLen and make sure fUnzipChunks and fUnzipLen are ready before main thread fetch the data. ; Definition at line 526 of file TTreeCacheUnzip.cxx. ◆ UpdateBranches(). void TTreeCacheUnzip::UpdateBranches ; (; TTree * ; tree). overridevirtual . update p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCacheUnzip.html:37538,error,error,37538,doc/v632/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/v632/classTTreeCacheUnzip.html,1,['error'],['error']
Availability,"lbufferSize). static . static function: Sets the unzip relative buffer size ; Definition at line 831 of file TTreeCacheUnzip.cxx. ◆ StopLearningPhase(). void TTreeCacheUnzip::StopLearningPhase ; (; ). overridevirtual . It's the same as TTreeCache::StopLearningPhase but we guarantee that we start the unzipping just after getting the buffers. ; Reimplemented from TTreeCache.; Definition at line 385 of file TTreeCacheUnzip.cxx. ◆ Streamer(). void TTreeCacheUnzip::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TTreeCache. ◆ StreamerNVirtual(). void TTreeCacheUnzip::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 159 of file TTreeCacheUnzip.h. ◆ UnzipBuffer(). Int_t TTreeCacheUnzip::UnzipBuffer ; (; char ** ; dest, . char * ; src . ). Unzips a ROOT specific buffer... by reading the header at the beginning. ; returns the size of the inflated buffer or -1 if error Note!! : If *dest == 0 we will allocate the buffer and it will be the responsibility of the caller to free it... it is useful for example to pass it to the creator of TBuffer src is the original buffer with the record (header+compressed data) *dest is the inflated buffer (including the header) ; Definition at line 854 of file TTreeCacheUnzip.cxx. ◆ UnzipCache(). Int_t TTreeCacheUnzip::UnzipCache ; (; Int_t ; index). This inflates a basket in the cache. ; . passing the data to a new buffer that will only wait there to be read... This function is responsible to update corresponding elements in fUnzipStatus, fUnzipChunks and fUnzipLen. Since we use atomic variables in fUnzipStatus to exclusively unzip the basket, we must update fUnzipStatus after fUnzipChunks and fUnzipLen and make sure fUnzipChunks and fUnzipLen are ready before main thread fetch the data. ; Definition at line 527 of file TTreeCacheUnzip.cxx. ◆ UpdateBranches(). void TTreeCacheUnzip::UpdateBranches ; (; TTree * ; tree). overridevirtual . update p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCacheUnzip.html:37612,error,error,37612,doc/master/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/master/classTTreeCacheUnzip.html,1,['error'],['error']
Availability,"lculated values of; // fitted amplitudes of 2D peaks, output parameters; double amp_err[MAX_NUMBER_OF_PEAKS2]; // amplitude errors of 2D peaks; bool fix_amp[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows; // to fix appropriate amplitudes of 2D peaks (not fit).; // However they are present in the estimated functional; double amp_init_x1[MAX_NUMBER_OF_PEAKS2]; // initial values of 1D; // ridges amplitudes, input parameters; double amp_calc_x1[MAX_NUMBER_OF_PEAKS2]; // calculated values of; // fitted amplitudes of 1D ridges, output parameters; double amp_err_x1[MAX_NUMBER_OF_PEAKS2]; // amplitude errors of 1D ridges; bool fix_amp_x1[MAX_NUMBER_OF_PEAKS2]; // logical vector which alloes to fix; // appropriate amplitudes of 1D ridges (not fit).; // However they are present in the estimated functional; double amp_init_y1[MAX_NUMBER_OF_PEAKS2]; // initial values of 1D; // ridges amplitudes, input parameters; double amp_calc_y1[MAX_NUMBER_OF_PEAKS2]; // calculated values of; // fitted amplitudes of 1D ridges, output parameters; double amp_err_y1[MAX_NUMBER_OF_PEAKS2]; // amplitude errors of 1D ridges; bool fix_amp_y1[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix; // appropriate amplitudes of 1D ridges (not fit).; // However they are present in the estimated functional; double volume[MAX_NUMBER_OF_PEAKS1]; // calculated volumes of peaks; double volume_err[MAX_NUMBER_OF_PEAKS1]; // errors of peak volumes; double sigma_init_x; // sigma x parameter; double sigma_calc_x;; double sigma_err_x;; bool fix_sigma_x;; double sigma_init_y; // sigma y parameter; double sigma_calc_y;; double sigma_err_y;; bool fix_sigma_y;; double ro_init; // correlation coefficient; double ro_calc;; double ro_err;; bool fix_ro;; double txy_init; // t parameter for 2D peaks; double txy_calc;; double txy_err;; bool fix_txy;; double sxy_init; // s parameter for 2D peaks; double sxy_calc;; double sxy_err;; bool fix_sxy;; double tx_init; // t parameter for 1D ridges (x direction); double ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/spectrum/Spectrum.html:49902,error,errors,49902,root/html534/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/html534/guides/spectrum/Spectrum.html,1,['error'],['errors']
Availability,"lculated.; ""A"" ranges of the taget axes will be ignored. TH3D* Projection(Int_t xDim, Int_t yDim, Int_t zDim, Option_t* option = """") const; Project all bins into a 3-dimensional histogram,; keeping only axes ""xDim"", ""yDim"", and ""zDim"".; If ""option"" contains ""E"" errors will be calculated.; ""A"" ranges of the taget axes will be ignored.; ""O"" original axis range of the taget axes will be; kept, but only bins inside the selected range; will be filled. THnSparse* Projection(Int_t ndim, const Int_t* dim, Option_t* option = """") const; Project all bins into a ndim-dimensional THnSparse histogram,; keeping only axes in dim (specifying ndim dimensions); If ""option"" contains ""E"" errors will be calculated.; ""A"" ranges of the taget axes will be ignored.; ""O"" original axis range of the taget axes will be; kept, but only bins inside the selected range; will be filled. TObject* ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantSparse, Option_t* option = """") const; Project all bins into a ndim-dimensional THnSparse histogram,; keeping only axes in dim (specifying ndim dimensions); If ""option"" contains ""E"" errors will be calculated.; ""A"" ranges of the taget axes will be ignored.; ""O"" original axis range of the taget axes will be; kept, but only bins inside the selected range; will be filled. void Scale(Double_t c); Scale contents and errors of this histogram by c:; this = this * c; It does not modify the histogram's number of entries. void AddInternal(const THnSparse* h, Double_t c, Bool_t rebinned); Add() implementation for both rebinned histograms and those with identical; binning. See THnSparse::Add(). void Add(const THnSparse* h, Double_t c = 1.); Add contents of h scaled by c to this histogram:; this = this + c * h; Note that if h has Sumw2 set, Sumw2 is automatically called for this; if not already set. void RebinnedAdd(const THnSparse* h, Double_t c = 1.); Add contents of h scaled by c to this histogram:; this = this + c * h; Note that if h has Sumw2 set, Sumw2 is automati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THnSparse.html:20698,error,errors,20698,root/html528/THnSparse.html,https://root.cern,https://root.cern/root/html528/THnSparse.html,3,['error'],['errors']
Availability,"lculator(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tRooStats::CombinedCalculator::ConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual RooStats::HypoTestResult*GetHypoTest() const; virtual const char*TObject::GetIconName() const; virtual RooStats::LikelihoodInterval*GetInterval() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__ProfileLikelihoodCalculator.html:3446,error,error,3446,root/html526/RooStats__ProfileLikelihoodCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__ProfileLikelihoodCalculator.html,1,['error'],['error']
Availability,"ld * TGeoManager::GetParallelWorld ; (; ); const. inline . Definition at line 601 of file TGeoManager.h. ◆ GetParentTrackOfId(). TVirtualGeoTrack * TGeoManager::GetParentTrackOfId ; (; Int_t ; id); const. Get parent track with a given ID. ; Definition at line 2215 of file TGeoManager.cxx. ◆ GetParticleName(). const char * TGeoManager::GetParticleName ; (; ); const. inline . Definition at line 261 of file TGeoManager.h. ◆ GetPath(). const char * TGeoManager::GetPath ; (; ); const. Get path to the current node in the form /node0/node1/... ; Definition at line 2881 of file TGeoManager.cxx. ◆ GetPdgName(). const char * TGeoManager::GetPdgName ; (; Int_t ; pdg); const. Get name for given pdg code;. ; Definition at line 1966 of file TGeoManager.cxx. ◆ GetPhysicalNode(). TGeoPhysicalNode * TGeoManager::GetPhysicalNode ; (; Int_t ; i); const. inline . Definition at line 514 of file TGeoManager.h. ◆ GetProperty() [1/2]. Double_t TGeoManager::GetProperty ; (; const char * ; name, . Bool_t * ; error = nullptr . ); const. Get a user-defined property. ; Definition at line 656 of file TGeoManager.cxx. ◆ GetProperty() [2/2]. Double_t TGeoManager::GetProperty ; (; size_t ; i, . TString & ; name, . Bool_t * ; error = nullptr . ); const. Get a user-defined property from a given index. ; Definition at line 672 of file TGeoManager.cxx. ◆ GetRegion(). TGeoRegion * TGeoManager::GetRegion ; (; int ; i). inline . Definition at line 576 of file TGeoManager.h. ◆ GetRTmode(). Int_t TGeoManager::GetRTmode ; (; ); const. inline . Definition at line 440 of file TGeoManager.h. ◆ GetSafeDistance(). Double_t TGeoManager::GetSafeDistance ; (; ); const. inline . Definition at line 384 of file TGeoManager.h. ◆ GetSafeLevel(). Int_t TGeoManager::GetSafeLevel ; (; ); const. Go upwards the tree until a non-overlapping node. ; Definition at line 2251 of file TGeoManager.cxx. ◆ GetSkinSurface(). TGeoSkinSurface * TGeoManager::GetSkinSurface ; (; const char * ; name); const. Get skin surface with a given nam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:101937,error,error,101937,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['error'],['error']
Availability,"ldSys. There are covariance matrix contributions and there are systematic shifts. Systematic shifts correspond to the variation of a (buicance) parameter, for example a background normalisation or a one-sigma variation of a correlated systematic error. . Set by Access covariance matrix Access vector of shifts Description . (a)TUnfoldSys constructor GetEmatrixSysUncorr()n.a. uncorrelated errors on the input matrix histA, taken as the errors provided with the histogram. These are typically statistical errors from finite Monte Carlo samples. . (b)AddSysError()GetEmatrixSysSource() GetDeltaSysSource() correlated shifts of the input matrix histA. These shifts are taken as one-sigma effects when switchig on a given error soure. Several such error sources may be defined . (c)SetTauError()GetEmatrixSysTau() GetDeltaSysTau() A systematic error on the regularisation parameter tau . (d)SubtractBackground() GetEmatrixSysBackgroundUncorr()n.a. uncorrelated errors on background sources, originating from the errors provided with the background histograms . (e)SubtractBackground GetEmatrixSysBackgroundScale()GetDeltaSysBackgroundScale() scale errors on background sources . (i)SetInput() GetEmatrixInput()n.a.statistical uncertainty of the input (the measurement) . (i)+(d)+(e)see aboveGetEmatrix()n.a. Partial sun of uncertainties: all sources which are propagated to the covariance before unfolding . (i)+(a)+(b)+(c)+(d)+(e)see aboveGetEmatrixTotal() n.a.All known error sources summed up . Note: (a), (b), (c) are propagated to the result AFTER unfolding, whereas the background errors (d) and (e) are added to the data errors BEFORE unfolding. For this reason the errors of type (d) and (e) are INCLUDED in the standard error matrix and other methods provided by the base class TUnfold, whereas errors of type (a), (b), (c) are NOT INCLUDED in the methods provided by the base class TUnfold. ; Definition at line 59 of file TUnfoldSys.h. Public Types; enum  ESysErrMode { kSysErrModeMatrix =0; ,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:3536,error,errors,3536,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,2,['error'],['errors']
Availability,"ldSys.cxx. ◆ IsA(). TClass * TUnfoldSys::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TUnfold.; Definition at line 146 of file TUnfoldSys.h. ◆ PrepareCorrEmat(). TMatrixDSparse * TUnfoldSys::PrepareCorrEmat ; (; const TMatrixDSparse * ; m1, . const TMatrixDSparse * ; m2, . const TMatrixDSparse * ; dsys . ). protectedvirtual . propagate correlated systematic shift to an output vector ; Parameters. [in]m1coefficients ; [in]m2coeffiicients ; [in]dsysmatrix of correlated shifts from this source . Definition at line 977 of file TUnfoldSys.cxx. ◆ PrepareSysError(). void TUnfoldSys::PrepareSysError ; (; void ; ). protectedvirtual . Matrix calculations required to propagate systematic errors. ; Definition at line 663 of file TUnfoldSys.cxx. ◆ PrepareUncorrEmat(). TMatrixDSparse * TUnfoldSys::PrepareUncorrEmat ; (; const TMatrixDSparse * ; m_0, . const TMatrixDSparse * ; m_1 . ). protectedvirtual . propagate uncorrelated systematic errors to a covariance matrix ; Parameters. [in]m_0coefficients for error propagation ; [in]m_1coefficients for error propagation. returns the covariance matrix ; Definition at line 777 of file TUnfoldSys.cxx. ◆ ScaleColumnsByVector(). void TUnfoldSys::ScaleColumnsByVector ; (; TMatrixDSparse * ; m, . const TMatrixTBase< Double_t > * ; v . ); const. protected . scale columns of a matrix by the corresponding rows of a vector ; [inout] m matrix; [in] v vector; the entries mij are multiplied by vj. ; Definition at line 1423 of file TUnfoldSys.cxx. ◆ SetInput(). Int_t TUnfoldSys::SetInput ; (; const TH1 * ; input, . Double_t ; scaleBias = 0.0, . Double_t ; oneOverZeroError = 0.0, . const TH2 * ; hist_vyy = nullptr, . const TH2 * ; hist_vyy_inv = nullptr . ). overridevirtual . Define input data for subsequent calls to DoUnfold(tau) ; Parameters. [in]inputinput distribution with uncertainties ; [in]scaleBias(default=nullptr) scale factor applied to the bias ; [in]oneOverZeroError(default=nullptr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:45370,error,errors,45370,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['error'],['errors']
Availability,"lder&Builder() const; virtual ROOT::Minuit2::MinimumBuilder&Builder(); virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__ModularFunctionMinimizer.html:1901,toler,toler,1901,root/html534/ROOT__Minuit2__ModularFunctionMinimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__ModularFunctionMinimizer.html,1,['toler'],['toler']
Availability,"lding ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Tutorials. ROOT offers a rich set of code examples that allow you to see ROOT's building blocks ""in action"", as part of more complex programs. They are separated in two categories: C++ or python scripts and Jupyter notebooks.; The tutorials are available for all major ROOT releases. These are the links for the latest git snapshot. All scripts are available also in the form of a ROOTBook which can be visualized in NBViewer or tried out interactively in SWAN. Just look for these badges:. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/tutorials.html:2105,avail,available,2105,d/tutorials.html,https://root.cern,https://root.cern/d/tutorials.html,2,['avail'],['available']
Availability,"lds, const char* row); virtual~TTreeRow(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* option = """"); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*GetField(Int_t field); virtual ULong_tGetFieldLength(Int_t field); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeRow.html:1584,error,error,1584,root/html528/TTreeRow.html,https://root.cern,https://root.cern/root/html528/TTreeRow.html,4,['error'],['error']
Availability,"le (override if minimizer supports them ). bool SetVariableValue(unsigned int , double ); set the value of an existing variable. { return false; }. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of the existing parameters). bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. double Edm() const; return expected distance reached from the minimum. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. bool ProvidesError() const; minimizer provides error and error matrix. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. bool GetCovMatrix(double* ) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. { return false; }. bool GetHessianMatrix(double* ) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__Minimizer.html:6522,error,error,6522,root/html530/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__Minimizer.html,4,['error'],['error']
Availability,"le (override if minimizer supports them ). bool SetVariableValue(unsigned int , double ); set the value of an existing variable. { return false; }. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of the existing parameters). bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. double Edm() const; return expected distance reached from the minimum. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. bool ProvidesError() const; minimizer provides error and error matrix. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int i, unsigned int j) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. int CovMatrixStatus() const; return status of covariance matrix; using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate}; Minimizer who implements covariance matrix calculation will re-implement the method. { return 0; }. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int ) const. return global correlation coefficient for variable i; This is a number between zero and one which gives; the correlation between the i-th parameter and that linear combination of all; other parameters which is most strongly correlated with i.;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Minimizer.html:6289,error,error,6289,root/html526/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Minimizer.html,4,['error'],['error']
Availability,le * ROOT::Math::GSLMinimizer::Errors ; (; ); const. inlineoverridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 121 of file GSLMinimizer.h. ◆ MinGradient(). const double * ROOT::Math::GSLMinimizer::MinGradient ; (; ); const. overridevirtual . return pointer to gradient values at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 287 of file GSLMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::GSLMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 125 of file GSLMinimizer.cxx. ◆ NCalls(). unsigned int ROOT::Math::GSLMinimizer::NCalls ; (; ); const. overridevirtual . number of function calls to reach the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 111 of file GSLMinimizer.cxx. ◆ ProvidesError(). bool ROOT::Math::GSLMinimizer::ProvidesError ; (; ); const. inlineoverridevirtual . minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 118 of file GSLMinimizer.h. ◆ SetFunction(). void ROOT::Math::GSLMinimizer::SetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). overridevirtual . set the function to minimize ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 99 of file GSLMinimizer.cxx. Member Data Documentation. ◆ fGSLMultiMin. ROOT::Math::GSLMultiMinimizer* ROOT::Math::GSLMinimizer::fGSLMultiMin. private . Definition at line 137 of file GSLMinimizer.h. ◆ fLSTolerance. double ROOT::Math::GSLMinimizer::fLSTolerance. private . Definition at line 139 of file GSLMinimizer.h. Libraries for ROOT::Math::GSLMinimizer:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLMinimizer.h; math/mathmore/src/GSLMinimizer.cxx. ROOTMathGSLMinimizer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:14024,error,error,14024,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,2,['error'],['error']
Availability,"le / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Double_t *error);  Replace bin errors by values in array error. ;  ; virtual void SetHighlight (Bool_t set=kTRUE);  Set highlight (enable/disable) mode for the histogram by default highlight mode is disable. ;  ; virtual void SetLabelColor (Color_t color=1, Option_t *axis=""X"");  Set axis labels color. ;  ; virtual void SetLabelFont (Style_t font=62, Option_t *axis=""X"");  Set font number used to draw axis labels. ;  ; virtual void SetLabelOffset (Float_t offset=0.005, Option_t *axis=""X"");  Set offset between axis and axis' labels. ;  ; virtual void SetLabelSize (Float_t size=0.02, Option_t *axis=""X"");  Set size of axis' labels. ;  ; virtual void SetMaximum (Double_t maximum=-1111);  ; virtual void SetMinimum (Double_t minimum=-1111);  ; void SetName (const char *name) override;  Change the name of this histogram. ;  ; void SetNameTitle (const char *name, const char *title) override;  Change the name and title of this histogram. ;  ; virtual void SetNdivisions (Int_t n=510, Option_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLTH3Composition.html:30619,error,error,30619,doc/master/classTGLTH3Composition.html,https://root.cern,https://root.cern/doc/master/classTGLTH3Composition.html,84,['error'],"['error', 'errors']"
Availability,"le ; Definition at line 310 of file HypoTestResult.cxx. Member Data Documentation. ◆ fAllTestStatisticsData. std::unique_ptr<const RooArgList> RooStats::HypoTestResult::fAllTestStatisticsData. protected . for the case of multiple test statistics, holds all the results ; Definition at line 133 of file HypoTestResult.h. ◆ fAltDetailedOutput. std::unique_ptr<RooDataSet> RooStats::HypoTestResult::fAltDetailedOutput. protected . Definition at line 137 of file HypoTestResult.h. ◆ fAltDistr. std::unique_ptr<SamplingDistribution> RooStats::HypoTestResult::fAltDistr. protected . Definition at line 135 of file HypoTestResult.h. ◆ fAlternatePValue. double RooStats::HypoTestResult::fAlternatePValue. mutableprotected . p-value for the alternate hypothesis (small number means disfavoured) ; Definition at line 129 of file HypoTestResult.h. ◆ fAlternatePValueError. double RooStats::HypoTestResult::fAlternatePValueError. mutableprotected . error of p-value for the alternate hypothesis (small number means disfavoured) ; Definition at line 131 of file HypoTestResult.h. ◆ fBackgroundIsAlt. bool RooStats::HypoTestResult::fBackgroundIsAlt. protected . Definition at line 140 of file HypoTestResult.h. ◆ fFitInfo. std::unique_ptr<RooDataSet> RooStats::HypoTestResult::fFitInfo. protected . Definition at line 138 of file HypoTestResult.h. ◆ fNullDetailedOutput. std::unique_ptr<RooDataSet> RooStats::HypoTestResult::fNullDetailedOutput. protected . Definition at line 136 of file HypoTestResult.h. ◆ fNullDistr. std::unique_ptr<SamplingDistribution> RooStats::HypoTestResult::fNullDistr. protected . Definition at line 134 of file HypoTestResult.h. ◆ fNullPValue. double RooStats::HypoTestResult::fNullPValue. mutableprotected . p-value for the null hypothesis (small number means disfavoured) ; Definition at line 128 of file HypoTestResult.h. ◆ fNullPValueError. double RooStats::HypoTestResult::fNullPValueError. mutableprotected . error of p-value for the null hypothesis (small number means disfavour",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html:27407,error,error,27407,doc/master/classRooStats_1_1HypoTestResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html,1,['error'],['error']
Availability,"le BinData.cxx. ◆ Add() [4/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . double ; eval . ). add multi-dim coordinate data with only error in value ; add multi-dim coordinate data with only error in value The class stores internally the inverse of the error in this case ; Definition at line 524 of file BinData.cxx. ◆ Add() [5/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y . ). add one dim data with only coordinate and values ; Definition at line 408 of file BinData.cxx. ◆ Add() [6/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; ey . ). add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ; Definition at line 452 of file BinData.cxx. ◆ Add() [7/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; eyl, . double ; eyh . ). add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ; Definition at line 479 of file BinData.cxx. ◆ Add() [8/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ey . ). add one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ; Definition at line 428 of file BinData.cxx. ◆ AddBinUpEdge(). void ROOT::Fit::BinData::AddBinUpEdge ; (; const double * ; xup). add the bin width data, a pointer to an array with the bin upper edge information. ; This is needed when fitting with integral options The information is added for the previously inserted point. BinData::Add must be called before; This is needed when fitting with integral or Bin volume normalization options The information is added for the previously inserted point. BinData::Add must be called before ; Definition at line 613 of file BinData.cxx. ◆ Append(). void ROOT::Fit::BinData::Append ; (; unsigned int ; newPoints, . unsigned int ; dim = 1, . ErrorType ; e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:18629,error,error,18629,doc/master/classROOT_1_1Fit_1_1BinData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html,3,['error'],"['error', 'errors']"
Availability,"le Integral(double a, double b); Implementing VirtualIntegratorOneDim Interface. Returns Integral of function between a and b.; Based on original CERNLIB routine DGAUSS by Sigfried Kolbig; converted to C++ by Rene Brun. This function computes, to an attempted specified accuracy, the value; of the integral. Method:; For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point; and 16-point Gaussian quadrature approximations to. and define. Then,. where, starting with x0 = A and finishing with xk = B,; the subdivision points xi(i=1,2,...) are given by. is equal to the first member of the; sequence 1,1/2,1/4,... for which r(xi-1, xi) < EPS.; If, at any stage in the process of subdivision, the ratio. is so small that 1+0.005q is indistinguishable from 1 to; machine accuracy, an error exit occurs with the function value; set equal to zero. Accuracy:; Unless there is severe cancellation of positive and negative values of; f(x) over the interval [A,B], the relative error may be considered as; specifying a bound on the <I>relative</I> error of I in the case; |I|&gt;1, and a bound on the absolute error in the case |I|&lt;1. More; precisely, if k is the number of sub-intervals contributing to the; approximation (see Method), and if. then the relation. will nearly always be true, provided the routine terminates without; printing an error message. For functions f having no singularities in; the closed interval [A,B] the accuracy will usually be much higher than; this. Error handling:; The requested accuracy cannot be obtained (see Method).; The function value is set equal to zero. Note 1:; Values of the function f(x) at the interval end-points A and B are not; required. The subprogram may therefore be used when these values are; undefined. double Integral(); Returns Integral of function on an infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approxima",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GaussIntegrator.html:4010,error,error,4010,root/html528/ROOT__Math__GaussIntegrator.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GaussIntegrator.html,9,['error'],['error']
Availability,"le Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf307_fullpereventerrors.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Multidimensional models: full pdf with per-event errors ; ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""RooGaussModel.h""; #include ""RooDecay.h""; #include ""RooLandau.h""; #include ""RooProdPdf.h""; #include ""RooHistPdf.h""; #include ""RooPlot.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""TH1.h""; using namespace RooFit;; ; void rf307_fullpereventerrors(); {; // B - p h y s i c s p d f w i t h p e r - e v e n t G a u s s i a n r e s o l u t i o n; // ----------------------------------------------------------------------------------------------; ; // Observables; RooRealVar dt(""dt"", ""dt"", -10, 10);; RooRealVar dterr(""dterr"", ""per-event error on dt"", 0.01, 10);; ; // Build a gaussian resolution model scaled by the per-event error = gauss(dt,bias,sigma*dterr); RooRealVar bias(""bias"", ""bias"", 0, -10, 10);; RooRealVar sigma(""sigma"", ""per-event error scale factor"", 1, 0.1, 10);; RooGaussModel gm(""gm1"", ""gauss model scaled bt per-event error"", dt, bias, sigma, dterr);; ; // Construct decay(dt) (x) gauss1(dt|dterr); RooRealVar tau(""tau"", ""tau"", 1.548);; RooDecay decay_gm(""decay_gm"", ""decay"", dt, tau, gm, RooDecay::DoubleSided);; ; // C o n s t r u c t e m p i r i c a l p d f f o r p e r - e v e n t e r r o r; // -----------------------------------------------------------------; ; // Use landau pdf to get empirical distribution with long tail; RooLandau pdfDtErr(""pdfDtErr"", ""pdfDtErr"", dterr, 1.0, 0.25);; std::unique_ptr<RooDataSet> expDataDterr{pdfDtErr.generate(dterr, 10000)};; ; // Construct a histogram pdf to describe the shape of the dtErr distribution; std::unique_ptr<RooDataHist> expHistDterr{expDataDterr->binnedClone()};; RooHistPdf pdfErr(""pdfErr"", ""pdfErr"", dterr, *expHistDterr);; ; // C o n s t r u c t c o n d i t i o n a l p r o d u c ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf307__fullpereventerrors_8C.html:1018,error,error,1018,doc/master/rf307__fullpereventerrors_8C.html,https://root.cern,https://root.cern/doc/master/rf307__fullpereventerrors_8C.html,2,['error'],['error']
Availability,"le RooDataSet::sumEntries ; (; ); const. overridevirtual . Return effective number of entries in dataset, i.e., sum all weights. ; Implements RooAbsData.; Definition at line 844 of file RooDataSet.cxx. ◆ sumEntries() [2/2]. double RooDataSet::sumEntries ; (; const char * ; cutSpec, . const char * ; cutRange = nullptr . ); const. overridevirtual . Return the sum of weights in all entries matching cutSpec (if specified) and in named range cutRange (if specified) ; Implements RooAbsData.; Definition at line 854 of file RooDataSet.cxx. ◆ weight(). double RooDataSet::weight ; (; ); const. overridevirtual . Return event weight of current event. ; Implements RooAbsData.; Definition at line 759 of file RooDataSet.cxx. ◆ weightError() [1/2]. void RooDataSet::weightError ; (; double & ; lo, . double & ; hi, . ErrorType ; etype = SumW2 . ); const. overridevirtual . Return the asymmetric errors on the current weight. ; See also weightError(ErrorType) const for symmetric error. Parameters. [out]loLow error. ; [out]hiHigh error. ; etypeerror type . Reimplemented from RooAbsData.; Definition at line 817 of file RooDataSet.cxx. ◆ weightError() [2/2]. double RooDataSet::weightError ; (; ErrorType ; etype = SumW2); const. overridevirtual . Parameters. etypeerror type . Reimplemented from RooAbsData.; Definition at line 826 of file RooDataSet.cxx. ◆ weightSquared(). double RooDataSet::weightSquared ; (; ); const. overridevirtual . Return squared event weight of the current event. ; If this RooDataSet has no weight errors set, this will be the same as weight() * weight(), like expected for an unbinned dataset. When weight errors are set, it is assumed that the RooDataSet represents a weighted binned dataset and weightSquared() is the corresponding sum of weight squares for the bin. ; Implements RooAbsData.; Definition at line 773 of file RooDataSet.cxx. ◆ weightVar(). RooRealVar * RooDataSet::weightVar ; (; ); const. inline . Returns a pointer to the weight variable (if set). ; Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataSet.html:58366,error,error,58366,doc/master/classRooDataSet.html,https://root.cern,https://root.cern/doc/master/classRooDataSet.html,1,['error'],['error']
Availability,"le TGraphBentErrors.h. ◆ IsA(). TClass * TGraphBentErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph.; Definition at line 101 of file TGraphBentErrors.h. ◆ Print(). void TGraphBentErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 495 of file TGraphBentErrors.cxx. ◆ SavePrimitive(). void TGraphBentErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 551 of file TGraphBentErrors.cxx. ◆ Scale(). void TGraphBentErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphBentErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""xy"" both x and y values and errors are scaled ; Reimplemented from TGraph.; Definition at line 510 of file TGraphBentErrors.cxx. ◆ SetPointError() [1/2]. void TGraphBentErrors::SetPointError ; (; Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; exld = 0, . Double_t ; exhd = 0, . Double_t ; eyld = 0, . Double_t ; eyhd = 0 . ). virtual . Set ex and ey values for point pointed by the mouse. ; Definition at line 587 of file TGraphBentErrors.cxx. ◆ SetPointError() [2/2]. void TGraphBentErrors::SetPointError ; (; Int_t ; i, . Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; exld = 0, . Double_t ; exhd = 0, . Double_t ; eyld = 0, . Double_t ; eyhd = 0 . ). virtual . Set ex and ey values for point number i. ; Definition at line 624 of file TGraphBentErrors.cxx. ◆ Streamer(). void TGraphBentErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraph. ; Reimplemented f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphBentErrors.html:43285,error,errors,43285,doc/master/classTGraphBentErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html,3,['error'],['errors']
Availability,"le TProofDraw.cxx. ◆ Process(). Bool_t TProofDraw::Process ; (; Long64_t ; entry). overridevirtual . Executed for each entry. ; Reimplemented from TSelector.; Definition at line 244 of file TProofDraw.cxx. ◆ ProcessSingle(). Bool_t TProofDraw::ProcessSingle ; (; Long64_t ; entry, . Int_t ; i . ). protectedvirtual . Processes a single variable from an entry. ; Definition at line 217 of file TProofDraw.cxx. ◆ SetCanvas(). void TProofDraw::SetCanvas ; (; const char * ; objname). protected . Move to a canvas named <name>_canvas; create the canvas if not existing. ; Used to avoid screwing up existing plots when non default names are used for the final objects ; Definition at line 310 of file TProofDraw.cxx. ◆ SetDrawAtt(). void TProofDraw::SetDrawAtt ; (; TObject * ; o). protected . Set the drawing attributes from the input list. ; Definition at line 326 of file TProofDraw.cxx. ◆ SetError(). void TProofDraw::SetError ; (; const char * ; sub, . const char * ; mesg . ). protected . Sets the error status. ; Definition at line 383 of file TProofDraw.cxx. ◆ SlaveBegin(). void TProofDraw::SlaveBegin ; (; TTree * ; ). overridevirtual . Executed by each slave before processing. ; Reimplemented from TSelector.; Reimplemented in TProofDrawHist, TProofDrawEventList, TProofDrawEntryList, TProofDrawProfile, TProofDrawProfile2D, TProofDrawGraph, TProofDrawPolyMarker3D, TProofDrawListOfGraphs, and TProofDrawListOfPolyMarkers3D.; Definition at line 196 of file TProofDraw.cxx. ◆ SlaveTerminate(). void TProofDraw::SlaveTerminate ; (; void ; ). overridevirtual . Executed by each slave after the processing has finished, before returning the results to the client. ; Reimplemented from TSelector.; Reimplemented in TProofDrawEventList, and TProofDrawEntryList.; Definition at line 264 of file TProofDraw.cxx. ◆ Streamer(). void TProofDraw::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TProofDrawHist, TProofDra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDraw.html:18487,error,error,18487,doc/master/classTProofDraw.html,https://root.cern,https://root.cern/doc/master/classTProofDraw.html,1,['error'],['error']
Availability,"le TProofLite.cxx. ◆ GetTreeHeader(). TTree * TProofLite::GetTreeHeader ; (; TDSet * ; tdset). overridevirtual . Creates a tree header (a tree with nonexisting files) object for the DataSet. ; Reimplemented from TProof.; Definition at line 2397 of file TProofLite.cxx. ◆ Init(). Int_t TProofLite::Init ; (; const char * ; masterurl, . const char * ; conffile, . const char * ; confdir, . Int_t ; loglevel, . const char * ; alias = 0 . ). protected . Start the PROOF environment. ; Starting PROOF involves either connecting to a master server, which in turn will start a set of slave servers, or directly starting as master server (if master = """"). For a description of the arguments see the TProof ctor. Returns the number of started master or slave servers, returns 0 in case of error, in which case fValid remains false. ; Definition at line 154 of file TProofLite.cxx. ◆ InitDataSetManager(). Int_t TProofLite::InitDataSetManager ; (; ). private . Initialize the dataset manager from directives or from defaults Return 0 on success, -1 on failure. ; Definition at line 1412 of file TProofLite.cxx. ◆ IsA(). TClass * TProofLite::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TProof.; Definition at line 170 of file TProofLite.h. ◆ Load(). Int_t TProofLite::Load ; (; const char * ; macro, . Bool_t ; notOnClient = kFALSE, . Bool_t ; uniqueOnly = kTRUE, . TList * ; wrks = 0 . ). overridevirtual . Copy the specified macro in the cache directory. ; The macro file is uploaded if new or updated. If existing, the corresponding header basename(macro).h or .hh, is also uploaded. For the other arguments see TProof::Load(). Returns 0 in case of success and -1 in case of error. ; Reimplemented from TProof.; Definition at line 1539 of file TProofLite.cxx. ◆ MakeQueryResult(). TProofQueryResult * TProofLite::MakeQueryResult ; (; Long64_t ; nent, . const char * ; opt, . Long64_t ; fst, . TDSet * ; dset, . const char * ; selec . ). protected .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:54379,failure,failure,54379,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['failure'],['failure']
Availability,"le TRobustEstimator.h. ◆ GetRDistances() [1/2]. const TVectorD * TRobustEstimator::GetRDistances ; (; ); const. inline . Definition at line 101 of file TRobustEstimator.h. ◆ GetRDistances() [2/2]. void TRobustEstimator::GetRDistances ; (; TVectorD & ; rdist). returns the robust distances (helps to find outliers) ; Definition at line 759 of file TRobustEstimator.cxx. ◆ KOrdStat(). Double_t TRobustEstimator::KOrdStat ; (; Int_t ; ntotal, . Double_t * ; arr, . Int_t ; k, . Int_t * ; work . ). protected . because I need an Int_t work array ; Definition at line 1267 of file TRobustEstimator.cxx. ◆ Partition(). Int_t TRobustEstimator::Partition ; (; Int_t ; nmini, . Int_t * ; indsubdat . ). protected . divides the elements into approximately equal subgroups number of elements in each subgroup is stored in indsubdat number of subgroups is returned ; Definition at line 1118 of file TRobustEstimator.cxx. ◆ RDist(). Int_t TRobustEstimator::RDist ; (; TMatrixD & ; sscp). protected . Calculates robust distances.Then the samples with robust distances greater than a cutoff value (0.975 quantile of chi2 distribution with fNvar degrees of freedom, multiplied by a correction factor), are given weiht=0, and new, reweighted estimates of location and scatter are calculated The function returns the number of outliers. ; Definition at line 1172 of file TRobustEstimator.cxx. ◆ RDraw(). void TRobustEstimator::RDraw ; (; Int_t * ; subdat, . Int_t ; ngroup, . Int_t * ; indsubdat . ). protected . Draws ngroup nonoverlapping subdatasets out of a dataset of size n such that the selected case numbers are uniformly distributed from 1 to n. ; Definition at line 1235 of file TRobustEstimator.cxx. Member Data Documentation. ◆ fCorrelation. TMatrixDSym TRobustEstimator::fCorrelation. protected . Definition at line 39 of file TRobustEstimator.h. ◆ fCovariance. TMatrixDSym TRobustEstimator::fCovariance. protected . Definition at line 37 of file TRobustEstimator.h. ◆ fData. TMatrixD TRobustEstimator::fDa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRobustEstimator.html:28675,robust,robust,28675,doc/master/classTRobustEstimator.html,https://root.cern,https://root.cern/doc/master/classTRobustEstimator.html,1,['robust'],['robust']
Availability,"le TTabCom.cxx. ◆ ClearUsers(). void TTabCom::ClearUsers ; (; ). Forget all user seen so far. ; Definition at line 306 of file TTabCom.cxx. ◆ Complete(). Int_t TTabCom::Complete ; (; const TRegexp & ; re, . const TSeqCollection * ; pListOfCandidates, . const char ; appendage[], . std::ostream & ; out, . TString::ECaseCompare ; cmp = TString::kExact . ). private . [private] ; Definition at line 1163 of file TTabCom.cxx. ◆ CopyMatch(). void TTabCom::CopyMatch ; (; char * ; dest, . int ; dest_len, . const char * ; localName, . const char * ; appendage = nullptr, . const char * ; fullName = nullptr . ); const. private . [private] ; Definition at line 1415 of file TTabCom.cxx. ◆ DeclFileName(). static const char * TTabCom::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 226 of file TTabCom.h. ◆ DetermineClass(). TString TTabCom::DetermineClass ; (; const char ; varName[]). static . [static utility function]///////////////////////////// ; returns empty string on failure. otherwise returns something like this: ""TROOT*"". fails for non-class types (ie, int, char, etc). fails for pointers to functions. ; Definition at line 799 of file TTabCom.cxx. ◆ DetermineContext(). TTabCom::EContext_t TTabCom::DetermineContext ; (; ); const. private . [private] ; Definition at line 1468 of file TTabCom.cxx. ◆ DeterminePath(). TString TTabCom::DeterminePath ; (; const TString & ; fileName, . const char ; defaultPath[] . ); const. private . [private] ; Definition at line 1492 of file TTabCom.cxx. ◆ ExcludedByFignore(). Bool_t TTabCom::ExcludedByFignore ; (; TString ; s). static . [static utility function]///////////////////////////// ; returns true iff ""s"" ends with one of the strings listed in the ""TabCom.FileIgnore"" resource. ; Definition at line 892 of file TTabCom.cxx. ◆ ExtendPath(). TString TTabCom::ExtendPath ; (; const char ; originalPath[], . TString ; newBase . ); const. private . [private] ; Definition at line 1535",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:11642,failure,failure,11642,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['failure'],['failure']
Availability,"le altp);  constructor from name, null and alternate p values ;  ;  HypoTestResult (const char *name=nullptr);  default constructor ;  ;  HypoTestResult (const HypoTestResult &other);  copy constructor ;  ;  ~HypoTestResult () override;  destructor ;  ; virtual void Append (const HypoTestResult *other);  add values from another HypoTestResult ;  ; virtual double CLb () const;  Convert NullPValue into a ""confidence level"". ;  ; double CLbError () const;  The error on the ""confidence level"" of the null hypothesis. ;  ; TObject * Clone (const char *newname=nullptr) const override;  clone method, required since some data members cannot rely on the streamers to copy them ;  ; virtual double CLs () const;  \(CL_{s}\) is simply \(CL_{s+b}/CL_{b}\) (not a method, but a quantity) ;  ; double CLsError () const;  The error on the ratio \(CL_{s+b}/CL_{b}\). ;  ; virtual double CLsplusb () const;  Convert AlternatePValue into a ""confidence level"". ;  ; double CLsplusbError () const;  The error on the ""confidence level"" of the alternative hypothesis. ;  ; const RooArgList * GetAllTestStatisticsData (void) const;  ; RooDataSet * GetAltDetailedOutput (void) const;  ; SamplingDistribution * GetAltDistribution (void) const;  ; bool GetBackGroundIsAlt (void) const;  ; RooDataSet * GetFitInfo () const;  ; RooDataSet * GetNullDetailedOutput (void) const;  ; SamplingDistribution * GetNullDistribution (void) const;  ; bool GetPValueIsRightTail (void) const;  ; double GetTestStatisticData (void) const;  ; bool HasTestStatisticData (void) const;  ; TClass * IsA () const override;  ; double NullPValueError () const;  The error on the Null p-value. ;  ; HypoTestResult & operator= (const HypoTestResult &other);  assignment operator ;  ; void Print (const Option_t *="""") const override;  Print out some information about the results Note: use Alt/Null labels for the hypotheses here as the Null might be the s+b hypothesis. ;  ; void SetAllTestStatisticsData (const RooArgList *tsd);  ; void SetAltD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HybridResult.html:3847,error,error,3847,doc/master/classRooStats_1_1HybridResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HybridResult.html,1,['error'],['error']
Availability,"le b)evaluate the Integral of a function f over the over the semi-infinite interval (-inf,...Definition Integrator.h:296; ROOT::Math::MinimizerOptions::DefaultMinimizerTypestatic const std::string & DefaultMinimizerType()Definition MinimizerOptions.cxx:100; ROOT::Math::MinimizerOptions::DefaultMinimizerAlgostatic const std::string & DefaultMinimizerAlgo()Definition MinimizerOptions.cxx:85; ROOT::Math::MinimizerAbstract Minimizer class, defining the interface for the various minimizer (like Minuit2,...Definition Minimizer.h:119; ROOT::Math::Minimizer::SetLimitedVariablevirtual bool SetLimitedVariable(unsigned int ivar, const std::string &name, double val, double step, double lower, double upper)set a new upper/lower limited variable (override if minimizer supports them ) otherwise as default se...Definition Minimizer.cxx:34; ROOT::Math::Minimizer::Xvirtual const double * X() const =0return pointer to X values at the minimum; ROOT::Math::Minimizer::SetFunctionvirtual void SetFunction(const ROOT::Math::IMultiGenFunction &func)=0set the function to minimize; ROOT::Math::Minimizer::SetTolerancevoid SetTolerance(double tol)set the toleranceDefinition Minimizer.h:337; ROOT::Math::Minimizer::Minimizevirtual bool Minimize()=0method to perform the minimization; ROOT::Math::Minimizer::SetVariablevirtual bool SetVariable(unsigned int ivar, const std::string &name, double val, double step)=0set a new free variable; ROOT::Math::Minimizer::SetMaxFunctionCallsvoid SetMaxFunctionCalls(unsigned int maxfcn)set maximum of function callsDefinition Minimizer.h:331; ROOT::Math::Minimizer::MinValuevirtual double MinValue() const =0return minimum function value; ROOT::Math::ParamFunctorTemplParam Functor class for Multidimensional functions.Definition ParamFunctor.h:274; ROOT::Math::RichardsonDerivatorUser class for calculating the derivatives of a function.Definition RichardsonDerivator.h:55; ROOT::Math::RichardsonDerivator::Derivative2double Derivative2(double x)Returns the second derivati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:163096,toler,toleranceDefinition,163096,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['toler'],['toleranceDefinition']
Availability,"le beta_pdf(double x, double a, double b)Probability density function of the beta distribution.Definition PdfFuncMathCore.h:82; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; TMath::ErfDouble_t Erf(Double_t x)Computation of the error function erf(x).Definition TMath.cxx:190; rf105_funcbindingDefinition rf105_funcbinding.py:1; ; RooCFunction1Binding<double,double>::erf[ function=TMath::Erf x=x ] = 0; RooCFunction3PdfBinding<double,double,double,double>::beta[ function=(0x7fb320797e70) x=x2 y=a z=b ] = 0.934689; [#1] INFO:NumericIntegration -- RooRealIntegral::init(beta_Int[x2]) using numeric integrator RooIntegrator1D to calculate Int(x2); [#1] INFO:NumericIntegration -- RooRealIntegral::init(beta_Int[x2]) using numeric integrator RooIntegrator1D to calculate Int(x2); [#1] INFO:Fitting -- RooAbsPdf::fitTo(beta_over_beta_Int[x2]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_beta_over_beta_Int[x2]_betaData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(beta_Int[x2]) using numeric integrator RooIntegrator1D to calculate Int(x2); [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(beta_Int[x2]) using numeric integrator RooIntegrator1D to calculate Int(x2); RooTFnBinding::fa1[ TFn={fa1=sin(x)/x} obs=(x3) ] = -0.0547936; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf105_funcbinding.C. tutorialsroofitrf105_funcbinding.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf105__funcbinding_8C.html:6172,error,error,6172,doc/master/rf105__funcbinding_8C.html,https://root.cern,https://root.cern/doc/master/rf105__funcbinding_8C.html,1,['error'],['error']
Availability,"le bin size 3-D histograms. ;  ;  TH3C (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3C (const TH3C &h3c);  Copy constructor. ;  ;  ~TH3C () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz) override;  Increment 3D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz, Double_t w) override;  Increment 3D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy this 3-D histogram structure to newth3. ;  ; TClass * IsA () const override;  ; TH3C & operator= (const TH3C &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TH3C. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH3;  ~TH3 () override;  Destructor. ;  ; Int_t BufferEmpty (Int_t action=0) override;  Fill histogram with all entries in the buffer. ;  ; virtual Int_t Fill (const char *namex, const char *namey, const char *namez, Double_t w);  Increment cell defined by namex,namey,namez by a weight w. ;  ; virtual Int_t Fill (const char *namex, const char *namey, Double_t z, Double_t w);  Increment cell defined by namex,namey,z by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, const char *namez, Double_t w);  Increment cell defined by namex,y,namez by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLTH3Composition.html:4435,error,errors,4435,doc/master/classTGLTH3Composition.html,https://root.cern,https://root.cern/doc/master/classTGLTH3Composition.html,2,['error'],['errors']
Availability,"le containing the class declaration ; Definition at line 207 of file TMultiDimFit.h. ◆ Draw(). void TMultiDimFit::Draw ; (; Option_t * ; option = ""d""). inlineoverridevirtual . Default Draw method for all objects. ; Reimplemented from TObject.; Definition at line 134 of file TMultiDimFit.h. ◆ Eval(). Double_t TMultiDimFit::Eval ; (; const Double_t * ; x, . const Double_t * ; coeff = nullptr . ); const. virtual . Evaluate parameterization at point x. ; Optional argument coeff is a vector of coefficients for the parameterisation, fNCoefficients elements long. ; Definition at line 876 of file TMultiDimFit.cxx. ◆ EvalControl(). Double_t TMultiDimFit::EvalControl ; (; const Int_t * ; powers); const. protectedvirtual . PRIVATE METHOD: Calculate the control parameter from the passed powers. ; Definition at line 937 of file TMultiDimFit.cxx. ◆ EvalError(). Double_t TMultiDimFit::EvalError ; (; const Double_t * ; x, . const Double_t * ; coeff = nullptr . ); const. virtual . Evaluate parameterization error at point x. ; Optional argument coeff is a vector of coefficients for the parameterisation, fNCoefficients elements long. ; Definition at line 904 of file TMultiDimFit.cxx. ◆ EvalFactor(). Double_t TMultiDimFit::EvalFactor ; (; Int_t ; p, . Double_t ; x . ); const. protectedvirtual . PRIVATE METHOD: Evaluate function with power p at variable value x. ; Definition at line 952 of file TMultiDimFit.cxx. ◆ FindParameterization(). void TMultiDimFit::FindParameterization ; (; Option_t * ; option = """"). virtual . Find the parameterization. ; Options: None so far; For detailed description of what this entails, please refer to the class description ; Definition at line 994 of file TMultiDimFit.cxx. ◆ Fit(). void TMultiDimFit::Fit ; (; Option_t * ; option = """"). virtual . Try to fit the found parameterisation to the test sample. ; Options M use Minuit to improve coefficients; Also, refer to class description ; Definition at line 1013 of file TMultiDimFit.cxx. ◆ GetChi2(). Double_t TMu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:43005,error,error,43005,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['error'],['error']
Availability,"le el = fDataErrorLowPtr[ ipoint ];; 299 ; 300 return (el+eh) / 2.0;; 301 }; 302 ; 303 assert( fErrorType == kCoordError );; 304 return fDataErrorPtr[ ipoint ];; 305 }; 306 ; 307 void GetAsymError( unsigned int ipoint, double& lowError, double& highError ) const; 308 {; 309 assert( fErrorType == kAsymError );; 310 assert( !fDataErrorPtr && fDataErrorHighPtr && fDataErrorLowPtr );; 311 assert( fDataError.empty() );; 312 assert( fDataErrorHigh.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 313 assert( fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 314 assert( fDataErrorLow.empty() == fDataErrorHigh.empty() );; 315 ; 316 lowError = fDataErrorLowPtr[ ipoint ];; 317 highError = fDataErrorHighPtr[ ipoint ];; 318 }; 319 ; 320 /**; 321 Return the inverse of error on the value for the given fit point; 322 useful when error in the coordinates are not stored and then this is used directly this as the weight in; 323 the least square function; 324 */; 325 double InvError( unsigned int ipoint ) const; 326 {; 327 assert( ipoint < fMaxPoints );; 328 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 329 kAsymError == fErrorType || kNoError == fErrorType );; 330 ; 331 if ( fErrorType == kNoError ); 332 {; 333 assert( !fDataErrorPtr && !fDataErrorHighPtr && !fDataErrorLowPtr );; 334 assert( fDataError.empty() && fDataErrorHigh.empty() && fDataErrorLow.empty() );; 335 return 1.0;; 336 }; 337 ; 338 if ( fErrorType == kValueError ) // need to invert (inverror is stored); 339 {; 340 assert( fDataErrorPtr && !fDataErrorHighPtr && !fDataErrorLowPtr );; 341 assert( fDataErrorHigh.empty() && fDataErrorLow.empty() );; 342 assert( fDataError.empty() || &fDataError.front() == fDataErrorPtr );; 343 ; 344 double eval = fDataErrorPtr[ ipoint ];; 345 ; 346 // in case of wrapped data the pointer stores the error and; 347 // not the inverse; 348 if (fWrapped); 349 return 1.0 / eval;; 350 else; 351 return (eval != 0.0) ? eval : 0.0;; 352 }; 353 ; 35",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:11131,error,error,11131,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,2,['error'],['error']
Availability,"le file.C to be send to the PROOF cluster. Returns -1 in case of error, >=0 in case of succes. ; Definition at line 6533 of file TProof.cxx. ◆ ExistsDataSet(). Bool_t TProof::ExistsDataSet ; (; const char * ; dataset). virtual . Returns kTRUE if 'dataset' exists, kFALSE otherwise. ; Reimplemented in TProofLite.; Definition at line 10868 of file TProof.cxx. ◆ Feedback(). void TProof::Feedback ; (; TList * ; objs). Get list of feedback objects. ; Connect a slot to this signal to monitor the feedback object. ; Definition at line 9268 of file TProof.cxx. ◆ FinalizationDone(). void TProof::FinalizationDone ; (; ). inlineprivate . Definition at line 694 of file TProof.h. ◆ Finalize() [1/2]. Long64_t TProof::Finalize ; (; const char * ; ref, . Bool_t ; force = kFALSE . ). Finalize query with reference ref. ; If force, force retrieval if the query is found in the local list but has already been finalized (default kFALSE). If ref = 0, finalize current query. Return 0 on success, -1 on error ; Definition at line 5908 of file TProof.cxx. ◆ Finalize() [2/2]. Long64_t TProof::Finalize ; (; Int_t ; qry = -1, . Bool_t ; force = kFALSE . ). Finalize the qry-th query in fQueries. ; If force, force retrieval if the query is found in the local list but has already been finalized (default kFALSE). If query < 0, finalize current query. Return 0 on success, -1 on error ; Definition at line 5883 of file TProof.cxx. ◆ FindDataSets(). TList * TProof::FindDataSets ; (; const char * ; searchString, . const char * ; optStr = """" . ). Find datasets, returns in a TList all found datasets. ; Definition at line 11010 of file TProof.cxx. ◆ FindNextFreeMerger(). Int_t TProof::FindNextFreeMerger ; (; ). private . Return a merger, which is both active and still accepts some workers to be assigned to it. ; It works on the 'round-robin' basis. ; Definition at line 4304 of file TProof.cxx. ◆ FindSlave(). TSlave * TProof::FindSlave ; (; TSocket * ; s); const. private . Find slave that has TSocket s. Returns",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:90316,error,error,90316,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['error'],['error']
Availability,"le gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented from TFile.; Definition at line 240 of file TSQLFile.h. ◆ ReOpen(). Int_t TSQLFile::ReOpen ; (; Option_t * ; mode). finalvirtual . Reopen a file with a different access mode, like from READ to See TFile::Open() for details. ; Reimplemented from TFile.; Definition at line 719 of file TSQLFile.cxx. ◆ RequestSQLClassInfo() [1/2]. TSQLClassInfo * TSQLFile::RequestSQLClassInfo ; (; const char * ; clname, . Int_t ; version . ). protected . Search in database tables for specified class and return TSQLClassInfo object. ; Definition at line 1800 of file TSQLFile.cxx. ◆ RequestSQLClassInfo() [2/2]. TSQLClassInfo * TSQLFile::RequestSQLClassInfo ; (; const TClass * ; cl). protected . Search in database tables for specified class and return TSQLClassInfo object. ; Definition at line 1903 of file TSQLFile.cxx. ◆ ResetErrno(). void TSQLFile::ResetErrno ; (; ); const. inlinefinalvirtual . Method resetting the errno.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:85907,recover,recovery,85907,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,1,['recover'],['recovery']
Availability,"le gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented from TFile.; Definition at line 86 of file TXMLFile.h. ◆ ReOpen(). Int_t TXMLFile::ReOpen ; (; Option_t * ; mode). finalvirtual . Reopen a file with a different access mode, like from READ to See TFile::Open() for details. ; Reimplemented from TFile.; Definition at line 372 of file TXMLFile.cxx. ◆ ResetErrno(). void TXMLFile::ResetErrno ; (; ); const. inlinefinalvirtual . Method resetting the errno. ; Reimplemented from TFile.; Definition at line 64 of file TXMLFile.h. ◆ SaveToFile(). void TXMLFile::SaveToFile ; (; ). protected . Saves xml structures to the file xml elements are kept in list of TKeyXML objects When saving, all this elements are linked to root xml node At the end StreamerInfo structures are added After xml document is saved, all nodes will be unlinked from root node and kept in memory. ; Only Close() or destructor release memory, used by xml structures ; Definition at line 454 of file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLFile.html:67958,recover,recovery,67958,doc/master/classTXMLFile.html,https://root.cern,https://root.cern/doc/master/classTXMLFile.html,1,['recover'],['recovery']
Availability,"le h). First Derivative calculation passing function and step-size. double Derivative2(double x). Returns the second derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::DerivativeError:; (total error = roundoff error + interpolation error); the estimate of the roundoff error is taken as follows:. where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. double Derivative2(const ROOT::Math::IGenFunction& f, double x, double h). Second Derivative calculation passing function and step-size. double Derivative3(double x). Returns the third derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::DerivativeError:; (total error = roundoff error + interpola",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__RichardsonDerivator.html:5653,error,error,5653,root/html526/ROOT__Math__RichardsonDerivator.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__RichardsonDerivator.html,7,['error'],['error']
Availability,"le if the file is too large and exceeds the disk quota, or the job crashes or a batch job reaches its time limit before the file can be closed. In these cases, it is imperative to recover and retain as much information as possible. ROOT provides an intelligent and elegant file recovery mechanism using the redundant directory information in the record header.; If a file that has been not properly closed is opened again, it is scanned and rebuilt according to the information in the record header. The recovery algorithm reads the file and creates the saved objects in memory according to the header information. It then rebuilds the directory and file structure. If the file is opened in write mode, the recovery makes the correction on disk when the file is closed; however if the file is opened in read mode, the correction can not be written to disk. You can also explicitly invoke the recovery procedure by calling the TFile::Recover() method. You can recover the directory structure, but you cannot save what you recovered to the file on disk. In the following example, we interrupted and aborted the previous ROOT session, causing the file not to be closed. When we start a new session and attempt to open the file, it gives us an explanation and status on the recovery attempt.; root[] TFile f(""demo.root""); Warning in <TFile::TFile>: file demo.root probably not closed, trying to recover successfully recovered 15 keys; 11.2 The Logical ROOT File: TFile and TKey; We saw that the TFile::Map() method reads the file sequentially and prints information about each record while scanning the file. It is not feasible to support only sequential access and hence ROOT provides random or direct access, i.e. reading a specified object at a time. To do so, TFile keeps a list of TKeys, which is essentially an index to the objects in the file. The TKey class describes the record headers of objects in the file. For example, we can get the list of keys and print them. To find a specific object on ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:441199,recover,recover,441199,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['recover'],"['recover', 'recovered']"
Availability,"le is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFriendElementA TFriendElement TF describes a TTree object TF in a file.Definition TFriendElement.h:33; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TIteratorIterator abstract base class.Definition TIterator.h:30; TLeafA TLeaf describes individual elements of a TBranch See TBranch structure in TTree.Definition TLeaf.h:57; TListA doubly linked list.Definition TList.h:38; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::GetEntriesFastInt_t GetEntriesFast() constDefinition TObjArray.h:58; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TPolyMarkerA PolyMarker is defined by an array on N points in a 2-D space.Definition TPolyMarker.h:31; TPrincipalPrincipal Components Analysis (PCA)Definition TPrincipal.h:21; TSQLResultDefinition TSQLResult.h:31; TSelectorA TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and...Definition TSelector.h:31; TStreamerInfoDescribes a persistent version of a class.Definition TStreamerInfo.h:39; TTreeCacheA cache to speed-up the reading of ROOT datasets.Definition TTreeCache.h:32; TTreeClonerClass implementing or helping the various TTree cloning method.Definition TTreeCloner.h:31; TTreeFormulaUsed to pass a selection expression to the Tree drawing routine.Definition TTreeFormula.h:58; TTreeFriendLeafIterIterator on all the leaves in a TTree and its friend.Definition TTree.h:716; TTreeFriendLeafIter::operator!=bool operator!=(const TIterator &) const overrideCompare two iterator objects.Definition TTree.h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8h_source.html:48487,error,error,48487,doc/master/TTree_8h_source.html,https://root.cern,https://root.cern/doc/master/TTree_8h_source.html,1,['error'],['error']
Availability,"le logNormal(double x, double k, double m0)Definition MathFuncs.h:338; RooFit::Detail::MathFuncs::nlldouble nll(double pdf, double weight, int binnedL, int doBinOffset)Definition MathFuncs.h:353; RooFit::Detail::MathFuncs::bernsteindouble bernstein(double x, double xmin, double xmax, double *coefs, int nCoefs)The caller needs to make sure that there is at least one coefficient.Definition MathFuncs.h:48; RooFit::Detail::MathFuncs::efficiencydouble efficiency(double effFuncVal, int catIndex, int sigCatIndex)Definition MathFuncs.h:117; RooFit::Detail::MathFuncs::flexibleInterpdouble flexibleInterp(unsigned int code, double const *params, unsigned int n, double const *low, double const *high, double boundary, double nominal, int doCutoff)Definition MathFuncs.h:320; RooFit::Detail::MathFuncs::exponentialIntegraldouble exponentialIntegral(double xMin, double xMax, double constant)Definition MathFuncs.h:470; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; TMath::ErfDouble_t Erf(Double_t x)Computation of the error function erf(x).Definition TMath.cxx:190; TMath::QuietNaNDouble_t QuietNaN()Returns a quiet NaN as defined by IEEE 754.Definition TMath.h:902; TMath::Sqrt2constexpr Double_t Sqrt2()Definition TMath.h:86; TMath::ErfcDouble_t Erfc(Double_t x)Computes the complementary error function erfc(x).Definition TMath.cxx:199; TMath::LnGammaDouble_t LnGamma(Double_t z)Computation of ln[gamma(z)] for all z.Definition TMath.cxx:509; TMath::SignalingNaNDouble_t SignalingNaN()Returns a signaling NaN as defined by IEEE 754](http://en.wikipedia.org/wiki/NaN#Signaling_NaN).Definition TMath.h:910; TMath::TwoPiconstexpr Double_t TwoPi()Definition TMath.h:44; mTMarker mDefinition textangle.C:8; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. roofitroofitcoreincRooFitDetailMathFuncs.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:51 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MathFuncs_8h_source.html:31927,error,error,31927,doc/master/MathFuncs_8h_source.html,https://root.cern,https://root.cern/doc/master/MathFuncs_8h_source.html,2,['error'],['error']
Availability,"le number. ;  ; const RooDataSet & fitParDataSet ();  Return a RooDataSet containing the post-fit parameters of each toy cycle. ;  ; const RooFitResult * fitResult (Int_t sampleNum) const;  Return the RooFitResult of the fit with the given run number. ;  ; RooAbsData * genData (Int_t sampleNum) const;  Return the given generated dataset. ;  ; bool generate (Int_t nSamples, Int_t nEvtPerSample=0, bool keepGenData=false, const char *asciiFilePat=nullptr);  Generate 'nSamples' samples of 'nEvtPerSample' events. ;  ; bool generateAndFit (Int_t nSamples, Int_t nEvtPerSample=0, bool keepGenData=false, const char *asciiFilePat=nullptr);  Generate and fit 'nSamples' samples of 'nEvtPerSample' events. ;  ; const RooDataSet * genParDataSet () const;  Return dataset with generator parameters for each toy. ;  ; TClass * IsA () const override;  ; RooPlot * plotError (const RooRealVar &param, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Plot the distribution of the fit errors for the specified parameter on a newly created frame. ;  ; RooPlot * plotError (const RooRealVar &param, double lo, double hi, Int_t nbins=100);  Create a RooPlot of the distribution of the fitted errors of the given parameter. ;  ; RooPlot * plotNLL (const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Plot the distribution of the -log(L) values on a newly created frame. ;  ; RooPlot * plotNLL (double lo, double hi, Int_t nBins=100);  Create a RooPlot of the -log(L) distribution in the range lo-hi with 'nBins' bins. ;  ; RooPlot * plotParam (const char *paramName, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={},",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMCStudy.html:4402,error,errors,4402,doc/master/classRooMCStudy.html,https://root.cern,https://root.cern/doc/master/classRooMCStudy.html,1,['error'],['errors']
Availability,"le of a bin in the original histogram, all entries in the split bin in the original histogram will be transfered to the lower of the two possible bins in the new histogram. This is probably not what you want. A warning message is emitted in this case; examples: if h1 is an existing TH1F histogram with 100 bins; Double_t xbins[25] = {...} array of low-edges (xbins[25] is the upper edge of last bin; h1->Rebin(24,""hnew"",xbins); //creates a new variable bin size histogram hnew. Reimplemented in TH2, and TProfile.; Definition at line 6275 of file TH1.cxx. ◆ RebinAxis(). virtual void TH1::RebinAxis ; (; Double_t ; x, . TAxis * ; axis . ). inlinevirtual . Definition at line 437 of file TH1.h. ◆ RebinX(). virtual TH1 * TH1::RebinX ; (; Int_t ; ngroup = 2, . const char * ; newname = """" . ). inlinevirtual . Reimplemented in TH2, TH3, and TProfile2D.; Definition at line 354 of file TH1.h. ◆ Rebuild(). void TH1::Rebuild ; (; Option_t * ; option = """"). virtual . Using the current bin info, recompute the arrays for contents and errors. ; Definition at line 7087 of file TH1.cxx. ◆ RecomputeAxisLimits(). Bool_t TH1::RecomputeAxisLimits ; (; TAxis & ; destAxis, . const TAxis & ; anAxis . ). staticprotected . Finds new limits for the axis for the Merge function. ; returns false if the limits are incompatible ; Definition at line 5908 of file TH1.cxx. ◆ RecursiveRemove(). void TH1::RecursiveRemove ; (; TObject * ; obj). overridevirtual . Recursively remove object from the list of functions. ; Reimplemented from TObject.; Definition at line 6576 of file TH1.cxx. ◆ Reset(). void TH1::Reset ; (; Option_t * ; option = """"). virtual . Reset this histogram: contents, errors, etc. ; Parameters. [in]option; if ""ICE"" is specified, resets only Integral, Contents and Errors.; if ""ICES"" is specified, resets only Integral, Contents, Errors and Statistics This option is used; if ""M"" is specified, resets also Minimum and Maximum . Reimplemented in TH2Poly, TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH1K, TH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:196812,error,errors,196812,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['errors']
Availability,"le precision. The metric used for all the LorentzVector is (-,-,-,+) .; 13.12.4.1 Constructors and Assignment; The following declarations are available:; // create an empty vector (x=0, y=0, z=0, t=0); XYZTVector v1;; // vector with x=1, y=2, z=3, t=4; XYZTVector v2(1,2,3,4);; // vector with pt=1, eta=2, phi=PI, E=5; PtEtaPhiEVector v3(1,2,PI,5);; Note that each type of vector is constructed by passing its coordinate representation, so a XYZTVector(1,2,3,4) is different from a PtEtaPhiEVector(1,2,3,4). In addition, the Vector classes can be constructed by any vector, which implements the accessors x(), y(), z() and t().; This can be another ROOT::Math::LorentzVector based on a different coordinate system or any vector of a different package, like the CLHEP HepLorentzVector that implements the required signature.; XYZTVector v1(1,2,3,4);; PtEtaPhiEVector v2(v1);; CLHEP::HepLorentzVector q(1,2,3,4);; XYZTVector v3(q);; 13.12.4.2 Coordinate Accessors; All the same coordinate accessors are available through the interface of ROOT::Math::LorentzVector. For example:; //returns cartesian components for the cartesian vector v1; v1.X(); v1.X(); v1.Z(); v1.T();; //returns cartesian components for the cylindrical vector v2; v2.Px(); v2.Py(); v2.Pz(); v2.E();; //returns other components for the cartesian vector v1; v1.Pt(); v1.Eta(); v1.Phi(); v1.M(); In addition, all 4 vector coordinates can be retrieved with the GetCoordinates method:; double d[4];; //fill d array with (x,y,z,t) components of v1; v1.GetCoordinates(d);; //fill d array with (pt,eta,phi,e) components of v2; v2.GetCoordinates(d);; std::vector w(4);; //fill std::vector with (x,y,z,t); v1.GetCoordinates(w.begin(),w.end());; //components of v1; To get information on all the coordinate accessors see the ROOT::Math::LorentzVector reference documentation.; 13.12.4.3 Setter Methods; One can set only all the three coordinates via:; //sets the (x,y,z,t) for a XYZTVector; v1.SetCoordinates(c1,c2,c3,c4);; //sets pt,eta,phi,e ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:737384,avail,available,737384,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avail'],['available']
Availability,"le pt) { return RVecD{pt*0.9, pt*1.1}; }, 2); .Histo1D(""x"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""x:0""].Draw(""SAME"");; hx[""x:1""].Draw(""SAME"");; See alsoThis Vary() overload for more information. ; Definition at line 901 of file RInterface.hxx. ◆ Vary() [10/11]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; std::string_view ; colName, . std::string_view ; expression, . const std::vector< std::string > & ; variationTags, . std::string_view ; variationName = """" . ). inline . Register systematic variations for a single existing column using custom variation tags. ; Parameters. [in]colNamename of the column for which varied values are provided. ; [in]expressiona string containing valid C++ code that evaluates to an RVec containing the varied values for the specified column. ; [in]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". colName is used if none is provided. This overload adds the possibility for the expression used to evaluate the varied values to be just-in-time compiled. The example below shows how Vary() is used while dealing with a single column. The variation tags are defined as {""down"", ""up""}. auto nominal_hx =; df.Vary(""pt"", ""ROOT::RVecD{pt*0.9, pt*1.1}"", {""down"", ""up""}); .Filter(""pt > k""); .Define(""x"", someFunc, {""pt""}); .Histo1D(""x"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; See alsoThis Vary() overload for more information. ; Definition at line 1074 of file RInterface.hxx. ◆ Vary() [11/11]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; std::string_view ; colName, . std::string_view ; expression, . std::s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:153514,down,down,153514,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['down'],['down']
Availability,"le string class.Definition TObjString.h:28; TObjString::SetStringvoid SetString(const char *s)Definition TObjString.h:45; TObjString::GetNameconst char * GetName() const overrideReturns name of object.Definition TObjString.h:38; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::GetUniqueIDvirtual UInt_t GetUniqueID() constReturn the unique object id.Definition TObject.cxx:462; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::SetUniqueIDvirtual void SetUniqueID(UInt_t uid)Set the unique object id.Definition TObject.cxx:797; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TString::RemoveTString & Remove(Ssiz_t pos)Definition TString.h:685; TString::Streamervirtual void Streamer(TBuffer &)Stream a string object.Definition TString.cxx:1412; TString::AppendTString & Append(const char *cs)Definition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAxis_8cxx_source.html:65672,error,error,65672,doc/master/TAxis_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAxis_8cxx_source.html,1,['error'],['error']
Availability,le to calculate Delta(-logL) significance w.r.t given null hypothesis; RooDataHist Binned data set; RooDataHistSliceIter Iterator over a one-dimensional slice of a RooDataHist; RooDataProjBinding RealFunc/Dataset binding for data projection of a real function; RooDataSet Unbinned data set; RooDataWeightedAverage Optimized calculator of data weighted average of a RooAbsReal; RooDecay General decay function p.d.f ; RooDerivative Representation of derivative of any RooAbsReal; RooDirItem Base class for RooFit objects that are listed TDirectories; RooDouble Container class for Double_t; RooDstD0BG D*-D0 mass difference background PDF; RooEffGenContext Context for generating a dataset from a PDF; RooEffProd Product operator p.d.f of (PDF x efficiency) implementing optimized generator context; RooEfficiency Generic PDF defined by string expression and list of variables; RooEllipse 2-dimensional contour; RooErrorVar RooAbsRealLValue representation of an error of a RooRealVar; RooExpensiveObjectCache Singleton class that serves as session repository for expensive objects; RooExpensiveObjectCache::ExpensiveObject Cache element containing expensive object and parameter values for which object is valid; RooExponential Exponential PDF; RooExtendPdf Wrapper p.d.f adding an extended likelihood term to an existing p.d.f; RooExtendedBinding Your description goes here...; RooExtendedTerm Meta-p.d.f flat in all observables introducing only extended ML term; RooFFTConvPdf Convolution operator p.d.f based on numeric Fourier transforms; RooFIter ; RooFactoryWSTool RooFit class code and instance factory ; RooFirstMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooFit ; RooFitResult Container class for fit result; RooFitShortHand ; RooFoamGenerator Context for generating a dataset from a PDF using the TFoam class; RooFormula TFormula derived class interfacing with RooAbsArg objects; RooFormulaVar Real-valued function of other RooAbsArgs calculated by a TFormula expr,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:35291,error,error,35291,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,1,['error'],['error']
Availability,"le to calculate Delta(-logL) significance w.r.t given null hypothesis; RooDataHist Binned data set; RooDataHistSliceIter Iterator over a one-dimensional slice of a RooDataHist; RooDataProjBinding RealFunc/Dataset binding for data projection of a real function; RooDataSet Unbinned data set; RooDataWeightedAverage Optimized calculator of data weighted average of a RooAbsReal; RooDecay General decay function p.d.f ; RooDerivative Representation of derivative of any RooAbsReal; RooDirItem Base class for RooFit objects that are listed TDirectories; RooDouble Container class for Double_t; RooDstD0BG D*-D0 mass difference background PDF; RooEffGenContext Context for generating a dataset from a PDF; RooEffProd Product operator p.d.f of (PDF x efficiency) implementing optimized generator context; RooEfficiency Generic PDF defined by string expression and list of variables; RooEllipse 2-dimensional contour; RooErrorVar RooAbsRealLValue representation of an error of a RooRealVar; RooExpensiveObjectCache Singleton class that serves as session repository for expensive objects; RooExpensiveObjectCache::ExpensiveObject Cache element containing expensive object and parameter values for which object is valid; RooExponential Exponential PDF; RooExtendPdf Wrapper p.d.f adding an extended likelihood term to an existing p.d.f; RooExtendedTerm Meta-p.d.f flat in all observables introducing only extended ML term; RooFFTConvPdf Convolution operator p.d.f based on numeric Fourier transforms; RooFIter ; RooFactoryWSTool RooFit class code and instance factory ; RooFit ; RooFitResult Container class for fit result; RooFitShortHand ; RooFoamGenerator Context for generating a dataset from a PDF using the TFoam class; RooFormula TFormula derived class interfacing with RooAbsArg objects; RooFormulaVar Real-valued function of other RooAbsArgs calculated by a TFormula expression; RooFracRemainder Utility function calculating remainder fraction, i.e. 1-sum_i(a_i); RooFunctor Export RooAbsReal as func",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ClassIndex.html:34873,error,error,34873,root/html532/ClassIndex.html,https://root.cern,https://root.cern/root/html532/ClassIndex.html,1,['error'],['error']
Availability,"le to calculate Delta(-logL) significance w.r.t given null hypothesis; RooDataHist Binned data set; RooDataHistSliceIter Iterator over a one-dimensional slice of a RooDataHist; RooDataProjBinding RealFunc/Dataset binding for data projection of a real function; RooDataSet Unbinned data set; RooDataWeightedAverage Optimized calculator of data weighted average of a RooAbsReal; RooDecay General decay function p.d.f ; RooDerivative Representation of derivative of any RooAbsReal; RooDirItem Base class for RooFit objects that are listed TDirectories; RooDouble Container class for Double_t; RooDstD0BG D*-D0 mass difference background PDF; RooEffGenContext Context for generating a dataset from a PDF; RooEffProd Product operator p.d.f of (PDF x efficiency) implementing optimized generator context; RooEfficiency Generic PDF defined by string expression and list of variables; RooEllipse 2-dimensional contour; RooErrorVar RooAbsRealLValue representation of an error of a RooRealVar; RooExpensiveObjectCache Singleton class that serves as session repository for expensive objects; RooExpensiveObjectCache::ExpensiveObject Cache element containing expensive object and parameter values for which object is valid; RooExponential Exponential PDF; RooExtendPdf Wrapper p.d.f adding an extended likelihood term to an existing p.d.f; RooExtendedTerm Meta-p.d.f flat in all observables introducing only extended ML term; RooFFTConvPdf Convolution operator p.d.f based on numeric Fourier transforms; RooFactoryWSTool RooFit class code and instance factory ; RooFit ; RooFitResult Container class for fit result; RooFitShortHand ; RooFoamGenerator Context for generating a dataset from a PDF using the TFoam class; RooFormula TFormula derived class interfacing with RooAbsArg objects; RooFormulaVar Real-valued function of other RooAbsArgs calculated by a TFormula expression; RooFracRemainder Utility function calculating remainder fraction, i.e. 1-sum_i(a_i); RooFunctor Export RooAbsReal as functor; RooFun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:33141,error,error,33141,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,4,['error'],['error']
Availability,"le toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const vector<double>& par, const vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnUserCovariance& cov, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const ROOT::Minuit2::MnUserParameters& par, const ROOT::Minuit2::MnUserCovariance& cov, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::MnFcn& mfcn, const ROOT::Minuit2::GradientCalculator& gc, const ROOT::Minuit2::MinimumSeed& seed, const ROOT::Minuit2::MnStrategy& stra, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase& fcn, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; ROOT::Minuit2::FumiliMinimizer&operator=(const ROOT::Minuit2::FumiliMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::FumiliBuilderfMinBuilder; ROOT::Minuit2::MnSeedGeneratorfMinSeedGen. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FumiliMinimizer(). Constructor initializing the FumiliMinimizer by instantiatiating; the SeedGenerator and MinimumBuilder for the Fumili minimization method. @se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__FumiliMinimizer.html:2942,toler,toler,2942,root/html526/ROOT__Minuit2__FumiliMinimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__FumiliMinimizer.html,10,['toler'],['toler']
Availability,"le(); RooDouble(Double_t value); RooDouble(const RooDouble& other); virtual~RooDouble(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDouble.html:1417,error,error,1417,root/html526/RooDouble.html,https://root.cern,https://root.cern/root/html526/RooDouble.html,5,['error'],['error']
Availability,"le(ROOT::TSchemaRule* rule, Bool_t checkConsistency = kTRUE); Bool_tAddRules(ROOT::TSchemaRuleSet* rules, Bool_t checkConsistency = kTRUE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const TObjArray*FindRules(const TString& source) const; const ROOT::TSchemaMatch*FindRules(const TString& source, Int_t version) const; const ROOT::TSchemaMatch*FindRules(const TString& source, UInt_t checksum) const; const ROOT::TSchemaMatch*FindRules(const TString& source, Int_t version, UInt_t checksum) const; TClass*GetClass(); UInt_tGetClassCheckSum() const; TStringGetClassName() const; Int_tGetClassVersion() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__TSchemaRuleSet.html:1421,error,error,1421,root/html526/ROOT__TSchemaRuleSet.html,https://root.cern,https://root.cern/root/html526/ROOT__TSchemaRuleSet.html,1,['error'],['error']
Availability,"le(kDotted);; kRed@ kRedDefinition Rtypes.h:66; kDotted@ kDottedDefinition TAttLine.h:48; When drawing in solid mode, the color of the drawn volume corresponds to the line color.; Visibility Settings; The way geometry is build forces the definition of several volumes that does not represent real objects, but just virtual containers used for grouping and positioning volumes together. One would not want to see them in the picture. Since every volume is by default visible, one has to do this sort of tuning by its own:; myVolumeContainer->SetVisibility(kFALSE);; As described before, the drawing package supports two main global options: 1 (default) - only final volume leaves; 0 - all volumes down the drawn one appear on the screen. The global visible level put a limitation on the maximum applied depth. Combined with visibility settings per volume, these can tune quite well what should appear on the screen. However, there are situations when users want to see a volume branch displayed down to the maximum depth, keeping at the same time a limitation or even suppressing others. In order to accomplish that, one should use the volume attribute: ""Visible daughters"". By default, all daughters of all volumes are displayed if there is no limitation related with their level depth with respect to the top drawn volume. Ray Tracing; Ray tracing is a quite known drawing technique based on tracking rays from the eye position through all pixels of a view port device. The pixel color is derived from the properties of the first crossed surface, according some illumination model and material optical properties. While there are currently existing quite sophisticated ray tracing models, TGeo is currently using a very simple approach where the light source is matching the eye position (no shadows or back-tracing of the reflected ray). In future we are considering providing a base class in order to be able to derive more complex models.; Due to the fact that the number of rays that have to be ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:111872,down,down,111872,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['down'],['down']
Availability,"le); 2063{; 2064 if (e == -1); 2065 SetFillStyle(fstyle);; 2066 else if (e >= 0 && e < fNYErrors); 2067 fAttFill[e].SetFillStyle(fstyle);; 2068}; 2069 ; 2070////////////////////////////////////////////////////////////////////////////////; 2071/// Set Line Color of error e (-1 = Global and x errors).; 2072 ; 2073void TGraphMultiErrors::SetLineColor(Int_t e, Color_t lcolor); 2074{; 2075 if (e == -1); 2076 SetLineColor(lcolor);; 2077 else if (e >= 0 && e < fNYErrors); 2078 fAttLine[e].SetLineColor(lcolor);; 2079}; 2080 ; 2081////////////////////////////////////////////////////////////////////////////////; 2082/// Set Line Color and Alpha of error e (-1 = Global and x errors).; 2083 ; 2084void TGraphMultiErrors::SetLineColorAlpha(Int_t e, Color_t lcolor, Float_t lalpha); 2085{; 2086 if (e == -1); 2087 SetLineColorAlpha(lcolor, lalpha);; 2088 else if (e >= 0 && e < fNYErrors); 2089 fAttLine[e].SetLineColorAlpha(lcolor, lalpha);; 2090}; 2091 ; 2092////////////////////////////////////////////////////////////////////////////////; 2093/// Set Line Style of error e (-1 = Global and x errors).; 2094 ; 2095void TGraphMultiErrors::SetLineStyle(Int_t e, Style_t lstyle); 2096{; 2097 if (e == -1); 2098 SetLineStyle(lstyle);; 2099 else if (e >= 0 && e < fNYErrors); 2100 fAttLine[e].SetLineStyle(lstyle);; 2101}; 2102 ; 2103////////////////////////////////////////////////////////////////////////////////; 2104/// Set Line Width of error e (-1 = Global and x errors).; 2105 ; 2106void TGraphMultiErrors::SetLineWidth(Int_t e, Width_t lwidth); 2107{; 2108 if (e == -1); 2109 SetLineWidth(lwidth);; 2110 else if (e >= 0 && e < fNYErrors); 2111 fAttLine[e].SetLineWidth(lwidth);; 2112}; QuantFuncMathCore.h; d#define d(i)Definition RSha256.hxx:102; b#define b(i)Definition RSha256.hxx:100; f#define f(i)Definition RSha256.hxx:104; a#define a(i)Definition RSha256.hxx:99; h#define h(i)Definition RSha256.hxx:106; e#define e(i)Definition RSha256.hxx:103; Riostream.h; sizesize_t size(const MatrixT &matr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:70551,error,error,70551,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,2,['error'],"['error', 'errors']"
Availability,"le, . const char * ; objname = 0, . const char * ; dir = 0, . Long64_t ; first = 0, . Long64_t ; num = -1, . const char * ; msd = 0 . ). virtual . Add file to list of files to be analyzed. ; Optionally with the objname and dir arguments the default, TDSet wide, objname and dir can be overridden. ; Definition at line 1052 of file TDSet.cxx. ◆ Add() [2/4]. Bool_t TDSet::Add ; (; TCollection * ; filelist, . const char * ; meta = 0, . Bool_t ; availableOnly = kFALSE, . TCollection * ; badlist = 0 . ). virtual . Add files passed as list of TFileInfo, TUrl or TObjString objects . ; If TFileInfo, the first entry and the number of entries are also filled. The argument 'meta' can be used to specify one of the subsets in the file as described in the metadata of TFileInfo. By default the first one is taken. If 'availableOnly' is true only files available ('staged' and non corrupted) are taken: those not satisfying this requirement are added to 'badlist', if the latter is defined. By default availableOnly is false. ; Definition at line 1132 of file TDSet.cxx. ◆ Add() [3/4]. Bool_t TDSet::Add ; (; TDSet * ; set). virtual . Add specified data set to the this set. ; Definition at line 1095 of file TDSet.cxx. ◆ Add() [4/4]. Bool_t TDSet::Add ; (; TFileInfo * ; fi, . const char * ; meta = 0 . ). virtual . Add file described by 'fi' to list of files to be analyzed. ; The argument 'meta' can be used to specify a subsets in the file as described in the metadata of TFileInfo. By default the first one is taken. ; Definition at line 1185 of file TDSet.cxx. ◆ AddFriend(). void TDSet::AddFriend ; (; TDSet * ; friendset, . const char * ; alias . ). virtual . Add friend dataset to this set. ; Only possible if the TDSet type is a TTree or derived class. The friendset will be owned by this class and deleted in its destructor. ; Definition at line 1335 of file TDSet.cxx. ◆ AddInput(). void TDSet::AddInput ; (; TObject * ; obj). Add objects that might be needed during the processing of the selecto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDSet.html:20254,avail,availableOnly,20254,doc/master/classTDSet.html,https://root.cern,https://root.cern/doc/master/classTDSet.html,1,['avail'],['availableOnly']
Availability,"le, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup); Constructor. TH2I(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, Double_t ylow, Double_t yup); Constructor. TH2I(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t* ybins); Constructor. TH2I(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, const Double_t* ybins); Constructor. TH2I(const char* name, const char* title, Int_t nbinsx, const Float_t* xbins, Int_t nbinsy, const Float_t* ybins); Constructor. TH2I(const TH2I& h2i); Copy constructor. void AddBinContent(Int_t bin); Increment bin content by 1*-*-*-*-; *-* ==========================. void AddBinContent(Int_t bin, Double_t w); Increment bin content by w*-*-*-*-; *-* ==========================. void Copy(TObject& hnew) const; Copy. TH1 * DrawCopy(Option_t* option = """") const; Draw copy. Double_t GetBinContent(Int_t bin) const; Get bin content. void Reset(Option_t* option = """"); Reset this histogram: contents, errors, etc; *-* ===========================================. void SetBinContent(Int_t bin, Double_t content); Set bin content. void SetBinsLength(Int_t n = -1); Set total number of bins including under/overflow; Reallocate bin contents array. TH2I& operator=(const TH2I& h1); Operator =. Double_t GetBinContent(Int_t bin) const. Double_t GetBinContent(Int_t binx, Int_t biny) const; {return GetBinContent(GetBin(binx,biny));}. void SetBinContent(Int_t bin, Double_t content). void SetBinContent(Int_t binx, Int_t biny, Double_t content); {SetBinContent(GetBin(binx,biny),content);}. » Author: Rene Brun 26/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-03-14 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH2I.html:27882,error,errors,27882,root/html534/TH2I.html,https://root.cern,https://root.cern/root/html534/TH2I.html,1,['error'],['errors']
Availability,"le, cap-style, join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask.; GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, and dash-list. (see also the GCValues_t structure) ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1935 of file TVirtualX.cxx. ◆ DrawString(). void TVirtualX::DrawString ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . const char * ; s, . Int_t ; len . ). virtual . Each character image, as defined by the font in the GC, is treated as an additional mask for a fill operation on the drawable. ; Parameters. [in]idthe drawable ; [in]gcthe GC ; [in]x,ycoordinates, which are relative to the origin of the specified drawable and define the origin of the first character ; [in]sthe character string ; [in]lenthe number of characters in the string argument. GC components in use: function, plane-mask, fill-style, font, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. (see also the GCValues_t structure) ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1808 of file TVirtualX.cxx. ◆ DrawText() [1/2]. void TVirtualX::DrawText ; (; Int_t ; x, . Int_t ; y, . Float_t ; angle, . Float_t ; mgn, . const char * ; text, . ETextMode ; mode . ). virtual . Draws a text string using current font. ; Parameters. [in]x,ytext position ; [in]angletext angle ; [in]mgnmagnification factor ; [in]texttext string ; [in]modedrawing mode:; mode = 0 the background is not drawn (kClear); mode = 1 the background is drawn (kOpaque) . Reimplemented in TGQuartz, TGWin32, TGWin32VirtualXProxy, TGX11, and TGX11TTF.; Definition at line 345 of file TVirtualX.cxx. ◆ DrawText() [2/2]. void TVirtualX::DrawText ; (; Int_t ; x, . Int_t ; y, . Float_t ; angle, . Float_t ; m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:75700,mask,mask,75700,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,2,['mask'],['mask']
Availability,"le, kWindingRule). void SetTile(Pixmap_t v); Set tile pixmap for tiling operations. void SetStipple(Pixmap_t v); Set 1 plane pixmap for stippling. void SetTileStipXOrigin(Int_t v); X offset for tile or stipple operations. void SetTileStipYOrigin(Int_t v); Y offset for tile or stipple operations. void SetFont(FontH_t v); Set font. void SetSubwindowMode(Int_t v); Set sub window mode (kClipByChildren, kIncludeInferiors). void SetGraphicsExposures(Bool_t v); True if graphics exposure should be generated. void SetClipXOrigin(Int_t v); X origin for clipping. void SetClipYOrigin(Int_t v); Y origin for clipping. void SetClipMask(Pixmap_t v); Bitmap for clipping. void SetDashOffset(Int_t v); Patterned/dashed line offset. void SetDashList(const char[] v, Int_t len); Set dash pattern. First use SetDashOffset() if not 0. void SetArcMode(Int_t v); Set arc mode (kArcChord, kArcPieSlice). void Print(Option_t* option = """") const; Print graphics contexts info. TString GetMaskString() const; Returns GC mask as a string - used in SavePrimitive(). void SavePrimitive(ostream& out, Option_t* option = """"); Save graphics context info as a C++ statement(s) on output stream out. GContext_t GetGC() const; { return fContext; }. const GCValues_t * GetAttributes() const; { return &fValues; }. Mask_t GetMask() const; { return fValues.fMask; }. EGraphicsFunction GetFunction() const; { return fValues.fFunction; }. ULong_t GetPlaneMask() const; { return fValues.fPlaneMask; }. Pixel_t GetForeground() const; { return fValues.fForeground; }. Pixel_t GetBackground() const; { return fValues.fBackground; }. Int_t GetLineWidth() const; { return fValues.fLineWidth; }. Int_t GetLineStyle() const; { return fValues.fLineStyle; }. Pixmap_t GetTile() const; { return fValues.fTile; }. Pixmap_t GetStipple() const; { return fValues.fStipple; }. Int_t GetTileStipXOrigin() const; { return fValues.fTsXOrigin; }. Int_t GetTileStipYOrigin() const; { return fValues.fTsYOrigin; }. Int_t GetSubwindowMode() const; { return ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGGC.html:10005,mask,mask,10005,root/html602/TGGC.html,https://root.cern,https://root.cern/root/html602/TGGC.html,2,['mask'],['mask']
Availability,"le. ;  . Protected Member Functions; const char * GetLinkedLibraries () override;  Get list of shared libraries loaded at the start of the executable. ;  ;  Protected Member Functions inherited from TSystem; virtual Bool_t ConsistentWith (const char *path, void *dirptr=nullptr);  Check consistency of this helper with the one required by 'path' or 'dirptr'. ;  ; virtual void DoBeep (Int_t=-1, Int_t=-1) const;  ; virtual const char * ExpandFileName (const char *fname);  Expand a pathname getting rid of special shell characters like ~. ;  ; virtual Bool_t ExpandFileName (TString &fname);  Expand a pathname getting rid of special shell characters like ~. ;  ; TSystem * FindHelper (const char *path, void *dirptr=nullptr);  Create helper TSystem to handle file and directory operations that might be special for remote file access. ;  ; TString & GetLastErrorString ();  Return the thread local storage for the custom last error message. ;  ; const TString & GetLastErrorString () const;  Return the thread local storage for the custom last error message. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static int UnixFilestat (const char *path, FileStat_t &buf);  Get info about a file. ;  ; static int UnixFSstat (const char *path, Long_t *id, Long_t *bsize, Long_t *blocks, Long_t *bfree);  Get info about a file system: id, bsize, bfree, blocks. ;  ; static const char * UnixGetdirentry (void *dir);  Returns the next directory entry. ;  ; static const char * UnixHomedirectory (const char *user, char *path, char *mydir);  Returns the user's home directory. ;  ; static const char * UnixHomedirectory (const char *user=nullptr);  Returns the user's home directory. ;  ; static void UnixIgnoreSignal (ESignals sig, Bool_t ignore);  If ignore is true ignore the specified signal, else rest",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnixSystem.html:31361,error,error,31361,doc/master/classTUnixSystem.html,https://root.cern,https://root.cern/doc/master/classTUnixSystem.html,1,['error'],['error']
Availability,"le. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(). method to perform the minimization.; Return false in case the minimization did not converge. In this case a; status code different than zero is set; (retrieved by the derived method Minimizer::Status() )"" . status = 1 : Covariance was made pos defined; status = 2 : Hesse is invalid; status = 3 : Edm is above max; status = 4 : Reached call limit; status = 5 : Any other failure. double MinValue() const; return minimum function value. { return fState.Fval(); }. double Edm() const; return expected distance reached from the minimum. { return fState.Edm(); }. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return fState.NFcn(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fState.VariableParameters(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the min",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__Minuit2Minimizer.html:9021,failure,failure,9021,root/html534/ROOT__Minuit2__Minuit2Minimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__Minuit2Minimizer.html,1,['failure'],['failure']
Availability,"le. private:. RooStats::HypoTestCalculator*fCalculator0pointer to the calculator passed in the constructor; RooStats::HypoTestInverterResult*fResults; RooRealVar*fScannedVariablepointer to the constrained variable; doublefSize; boolfUseCLs. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HypoTestInverter(); default constructor (doesn't do anything). HypoTestInverter(RooStats::HypoTestCalculator& myhc0, RooRealVar& scannedVariable, double size = 0.05); constructor from a reference to an HypoTestCalculator; (it must be an HybridCalculator type) and a RooRealVar for the variable. ~HypoTestInverter(); destructor. void CreateResults(); create a new HypoTestInverterResult to hold all computed results. bool RunAutoScan(double xMin, double xMax, double target, double epsilon = 0.005, unsigned int numAlgorithm = 0); Search for the value of the parameter of interest (vary the; hypothesis being tested) in the specified range [xMin,xMax]; until the confidence level is compatible with the target value; within one time the estimated error (and the estimated error; should also become smaller than the specified parameter epsilon). bool RunFixedScan(int nBins, double xMin, double xMax); Run a Fixed scan in npoints between min and max. bool RunOnePoint(double thisX); run only one point. HypoTestInverter(); default constructor (used only for I/O). HypoTestInverterResult* GetInterval() const; { return fResults; }. void UseCLs(bool on = true); { fUseCLs = on; if (fResults) fResults->UseCLs(on); }. void SetData(RooAbsData& ); { }. void SetModel(const RooStats::ModelConfig& ); { }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size; if (fResults) fResults->SetTestSize(size); }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl; if (fResults) fResults->SetConfidenceLevel(cl); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HypoTestInverter.html:8477,error,error,8477,root/html526/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html526/RooStats__HypoTestInverter.html,4,['error'],['error']
Availability,"le.h. ◆ MemRead(). Long64_t TMemFile::MemRead ; (; Int_t ; fd, . void * ; buf, . Long64_t ; len . ); const. protected . ◆ NeedsExistingFile(). bool TMemFile::NeedsExistingFile ; (; EMode ; mode); const. inlineprotected . Definition at line 83 of file TMemFile.h. ◆ NeedsToWrite(). bool TMemFile::NeedsToWrite ; (; EMode ; mode); const. inlineprotected . Definition at line 82 of file TMemFile.h. ◆ operator=(). TMemFile & TMemFile::operator= ; (; const TMemFile & ; ). protecteddelete . ◆ ParseOption(). TMemFile::EMode TMemFile::ParseOption ; (; Option_t * ; option). protected . Parse option strings and set fOption. ; Definition at line 88 of file TMemFile.cxx. ◆ Print(). void TMemFile::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print all objects in the file. ; Reimplemented from TFile.; Definition at line 298 of file TMemFile.cxx. ◆ ResetAfterMerge(). void TMemFile::ResetAfterMerge ; (; TFileMergeInfo * ; info). overridevirtual . Wipe all the data from the permanent buffer but keep, the in-memory object alive. ; Reimplemented from TDirectoryFile.; Definition at line 320 of file TMemFile.cxx. ◆ ResetErrno(). void TMemFile::ResetErrno ; (; ); const. overridevirtual . Simply calls TSystem::ResetErrno(). ; Reimplemented from TFile.; Definition at line 688 of file TMemFile.cxx. ◆ ResetObjects(). void TMemFile::ResetObjects ; (; TDirectoryFile * ; directory, . TFileMergeInfo * ; info . ); const. protected . Wipe all the data from the permanent buffer but keep, the in-memory object alive. ; Definition at line 387 of file TMemFile.cxx. ◆ Streamer(). void TMemFile::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a TFile object. ; Reimplemented from TFile.; Reimplemented in TParallelMergingFile. ◆ StreamerNVirtual(). void TMemFile::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 109 of file TMemFile.h. ◆ SysClose(). Int_t TMemFile::SysClose ; (; Int_t ; fd). overrideprotectedvirtual . Close the mem file. ; Rei",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTMemFile.html:48649,alive,alive,48649,doc/v632/classTMemFile.html,https://root.cern,https://root.cern/doc/v632/classTMemFile.html,2,['alive'],['alive']
Availability,"le2D histograms.; 97 ; 98TProfile2D::~TProfile2D(); 99{; 100}; 101 ; 102////////////////////////////////////////////////////////////////////////////////; 103/// Normal Constructor for Profile histograms.; 104///; 105/// The first eight parameters are similar to TH2D::TH2D.; 106/// All values of z are accepted at filling time.; 107/// To fill a profile2D histogram, one must use TProfile2D::Fill function.; 108///; 109/// Note that when filling the profile histogram the function Fill; 110/// checks if the variable z is between fZmin and fZmax.; 111/// If a minimum or maximum value is set for the Z scale before filling,; 112/// then all values below zmin or above zmax will be discarded.; 113/// Setting the minimum or maximum value for the Z scale before filling; 114/// has the same effect as calling the special TProfile2D constructor below; 115/// where zmin and zmax are specified.; 116///; 117/// H(I,J) is printed as the cell contents. The errors computed are s(I,J) if CHOPT='S'; 118/// (spread option), or e(I,J) if CHOPT=' ' (error on mean).; 119///; 120/// See TProfile2D::BuildOptions for explanation of parameters; 121///; 122/// see other constructors below with all possible combinations of; 123/// fix and variable bin size like in TH2D.; 124 ; 125TProfile2D::TProfile2D(const char *name,const char *title,Int_t nx,Double_t xlow,Double_t xup,Int_t ny,Double_t ylow,Double_t yup,Option_t *option); 126: TH2D(name,title,nx,xlow,xup,ny,ylow,yup); 127{; 128 BuildOptions(0,0,option);; 129 if (xlow >= xup || ylow >= yup) SetBuffer(fgBufferSize);; 130}; 131 ; 132////////////////////////////////////////////////////////////////////////////////; 133/// Create a 2-D Profile with variable bins in X and fix bins in Y.; 134 ; 135TProfile2D::TProfile2D(const char *name,const char *title,Int_t nx,const Double_t *xbins,Int_t ny,Double_t ylow,Double_t yup,Option_t *option); 136: TH2D(name,title,nx,xbins,ny,ylow,yup); 137{; 138 BuildOptions(0,0,option);; 139}; 140 ; 141////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile2D_8cxx_source.html:4937,error,errors,4937,doc/master/TProfile2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile2D_8cxx_source.html,2,['error'],"['error', 'errors']"
Availability,"le2Poly.; Definition at line 266 of file TH1.h. ◆ GetBinContent() [3/5]. virtual Double_t TH1::GetBinContent ; (; Int_t ; bin, . Int_t ; , . Int_t ;  . ); const. inlinevirtual . Reimplemented from TH1.; Reimplemented in TProfile2D, TH2Poly, and TProfile2Poly.; Definition at line 267 of file TH1.h. ◆ GetBinContent() [4/5]. Double_t TH2::GetBinContent ; (; Int_t ; binx, . Int_t ; biny . ); const. inlineoverridevirtual . Reimplemented from TH1.; Reimplemented in TProfile2D, TH2Poly, and TProfile2Poly.; Definition at line 93 of file TH2.h. ◆ GetBinContent() [5/5]. Double_t TH2::GetBinContent ; (; Int_t ; binx, . Int_t ; biny, . Int_t ;  . ); const. inlineoverridevirtual . Reimplemented from TH1.; Reimplemented in TProfile2D, TH2Poly, and TProfile2Poly.; Definition at line 94 of file TH2.h. ◆ GetBinErrorLow() [1/2]. Double_t TH1::GetBinErrorLow ; (; Int_t ; bin); const. virtual . Return lower error associated to bin number bin. ; The error will depend on the statistic option used will return the binContent - lower interval value ; Reimplemented from TH1.; Definition at line 271 of file TH1.cxx. ◆ GetBinErrorLow() [2/2]. virtual Double_t TH2::GetBinErrorLow ; (; Int_t ; binx, . Int_t ; biny . ). inlinevirtual . Definition at line 97 of file TH2.h. ◆ GetBinErrorUp() [1/2]. Double_t TH1::GetBinErrorUp ; (; Int_t ; bin); const. virtual . Return upper error associated to bin number bin. ; The error will depend on the statistic option used will return the binContent - upper interval value ; Reimplemented from TH1.; Definition at line 272 of file TH1.cxx. ◆ GetBinErrorUp() [2/2]. virtual Double_t TH2::GetBinErrorUp ; (; Int_t ; binx, . Int_t ; biny . ). inlinevirtual . Definition at line 98 of file TH2.h. ◆ GetBinWithContent2(). Double_t TH2::GetBinWithContent2 ; (; Double_t ; c, . Int_t & ; binx, . Int_t & ; biny, . Int_t ; firstxbin = 1, . Int_t ; lastxbin = -1, . Int_t ; firstybin = 1, . Int_t ; lastybin = -1, . Double_t ; maxdiff = 0 . ); const. virtual . compute first cell ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:82740,error,error,82740,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,1,['error'],['error']
Availability,"le3D::Add(const TH1 *h1, const TH1 *h2, Double_t c1, Double_t c2); 201{; 202 if (!h1 || !h2) {; 203 Error(""Add"",""Attempt to add a non-existing profile"");; 204 return kFALSE;; 205 }; 206 if (!h1->InheritsFrom(TProfile3D::Class())) {; 207 Error(""Add"",""Attempt to add a non-profile3D object"");; 208 return kFALSE;; 209 }; 210 if (!h2->InheritsFrom(TProfile3D::Class())) {; 211 Error(""Add"",""Attempt to add a non-profile3D object"");; 212 return kFALSE;; 213 }; 214 ; 215 return TProfileHelper::Add(this, h1, h2, c1, c2);; 216}; 217 ; 218 ; 219////////////////////////////////////////////////////////////////////////////////; 220/// Set the fgApproximate flag.; 221///; 222/// When the flag is true, the function GetBinError; 223/// will approximate the bin error with the average profile error on all bins; 224/// in the following situation only; 225///; 226/// - the number of bins in the profile3D is less than 10404 (eg 100x100x100); 227/// - the bin number of entries is small ( <5); 228/// - the estimated bin error is extremely small compared to the bin content; 229/// (see TProfile3D::GetBinError); 230 ; 231void TProfile3D::Approximate(Bool_t approx); 232{; 233 fgApproximate = approx;; 234}; 235 ; 236 ; 237////////////////////////////////////////////////////////////////////////////////; 238/// Fill histogram with all entries in the buffer.; 239///; 240/// - action = -1 histogram is reset and refilled from the buffer (called by THistPainter::Paint); 241/// - action = 0 histogram is filled from the buffer; 242/// - action = 1 histogram is filled and buffer is deleted; 243/// The buffer is automatically deleted when the number of entries; 244/// in the buffer is greater than the number of entries in the histogram; 245 ; 246Int_t TProfile3D::BufferEmpty(Int_t action); 247{; 248 // do we need to compute the bin size?; 249 if (!fBuffer) return 0;; 250 Int_t nbentries = (Int_t)fBuffer[0];; 251 if (!nbentries) return 0;; 252 Double_t *buffer = fBuffer;; 253 if (nbentries < 0) {; 254 if (a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile3D_8cxx_source.html:8546,error,error,8546,doc/master/TProfile3D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile3D_8cxx_source.html,3,['error'],['error']
Availability,"le::CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidTDirectoryFile::Close(Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTDirectoryFile::Copy(TObject&) const; static TDirectory*&TDirectory::CurrentDirectory(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTDirectoryFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTDirectory::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTDirectoryFile::FillBuffer(char*& buffer); virtual TKey*TDirectoryFile::FindKey(const char* keyname) const; virtual TKey*TDirectoryFile::FindKeyAny(const char* keyname) const; virtual TObject*TDirectory::FindObject(const char* name) const; virtual TObject*TDirectory::FindObject(const TObject* obj) const; virtual TObject*TDirectoryFile::FindObjectAny(const char* name) const; virtual TObject*TDirectoryFile::FindObjectAnyFile(const char* name) const; virtual TObject*TDirectoryFile::Get(const char* namecycle); virtual Int_tTDirectoryFile::GetBufferSize() const; const TDatime&TDirectoryFile::GetCreationDate() const; virtual TDirectory*TDirectoryFile::GetDirectory(const char* apath, Bool_t printError = false, const char* funcname = ""GetDirectory""); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooWorkspace__WSDir.html:3148,error,error,3148,root/html532/RooWorkspace__WSDir.html,https://root.cern,https://root.cern/root/html532/RooWorkspace__WSDir.html,1,['error'],['error']
Availability,"le::ReadStreamerInfo is called; when opening the file.; It may be interesting to set fgReadInfo to false to speedup the file; opening time or in case libraries containing classes referenced; by the file have not yet been loaded.; if fgReadInfo is false, one can still read the StreamerInfo with; myfile.ReadStreamerInfo();. void ShowStreamerInfo(); Show the StreamerInfo of all classes written to this file. UShort_t WriteProcessID(TProcessID* pid); Check if the ProcessID pidd is already in the file,; if not, add it and return the index number in the local file list. void WriteStreamerInfo(); Write the list of TStreamerInfo as a single object in this file; The class Streamer description for all classes written to this file; is saved. See class TStreamerInfo. TFile * OpenFromCache(const char* name, Option_t* = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); Static member function allowing to open a file for reading through the file; cache. The file will be downloaded to the cache and opened from there.; If the download fails, it will be opened remotely.; The file will be downloaded to the directory specified by SetCacheFileDir(). TFile * Open(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); Static member function allowing the creation/opening of either a; TFile, TNetFile, TWebFile or any TFile derived class for which an; plugin library handler has been registered with the plugin manager; (for the plugin manager see the TPluginManager class). The returned; type of TFile depends on the file name specified by 'url'.; If 'url' is a '|'-separated list of file URLs, the 'URLs' are tried; sequentially in the specified order until a successful open.; If the file starts with ""root:"", ""roots:"" or ""rootk:"" a TNetFile object; will be returned, with ""http:"" a TWebFile, with ""file:"" a local TFile,; etc. (see the list of TFile plugin handlers in $ROOTSYS/etc/system.rootrc; for regular expressions that will be c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFile.html:44046,down,downloaded,44046,root/html528/TFile.html,https://root.cern,https://root.cern/root/html528/TFile.html,4,['down'],['downloaded']
Availability,"le::StyleOptionRooPrintable::kStandard; static RooPrintable::ContentsOptionRooPrintable::kTitle; static RooPrintable::StyleOptionRooPrintable::kTreeStructure; static RooPrintable::ContentsOptionRooPrintable::kValue; static RooPrintable::StyleOptionRooPrintable::kVerbose; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. RooArgSet_attachedBuffers! Currently attached buffers (if different from _varsww); TIterator*RooAbsDataStore::_cacheIter! Iterator over cached variables; const RooAbsArg*_cacheOwner! Object owning cache contents; TTree*_cacheTree! TTree holding the cached function values; RooArgSetRooAbsDataStore::_cachedVars; Double_t_curWgtWeight of current event; Double_t_curWgtErrWeight of current event; Double_t_curWgtErrHiWeight of current event; Double_t_curWgtErrLoWeight of current event; Bool_t_defCtor! Was object constructed with default ctor?; static Int_t_defTreeBufSize; Bool_tRooAbsDataStore::_doDirtyPropSwitch do (de)activate dirty state propagation when loading a data point; Double_t*_extSumW2Array! External sum of weights array; Double_t*_extWgtArray! External weight array; Double_t*_extWgtErrHiArray! External weight array - high error; Double_t*_extWgtErrLoArray! External weight array - low error; TIterator*RooAbsDataStore::_iterator! Iterator over dimension variables; static Int_tRooPrintable::_nameLength; TTree*_treeTTree holding the data points; RooArgSetRooAbsDataStore::_vars; RooArgSet_varsww; RooRealVar*_wgtVarPointer to weight variable (if set); TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooTreeDataStore(). RooTreeDataStore(TTree* t, const RooArgSet& vars, const char* wgtVarName = 0); Constructor to facilitate reading of legacy RooDataSets. RooTreeDataStore(const char* name, const char* title, const RooArgSet& vars, const char* wgtVarName = 0). RooTreeDataStore(const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooTreeDataStore.html:12486,error,error,12486,root/html602/RooTreeDataStore.html,https://root.cern,https://root.cern/root/html602/RooTreeDataStore.html,4,['error'],['error']
Availability,"le::fMemberNameSub-file name; TObjArray*TArchiveFile::fMembersMembers in this archive. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TZIPFile(); Default ctor. TZIPFile(const char* archive, const char* member, TFile* file); Specify the archive name and member name. The member can be a decimal; number which allows to access the n-th member. Int_t OpenArchive(); Open archive and read end-header and directory. Returns -1 in case; of error, 0 otherwise. Long64_t FindEndHeader(); Find the end header of the ZIP archive. Returns 0 in case of error. Int_t ReadEndHeader(Long64_t pos); Read the end header of the ZIP archive including the archive comment; at the current file position. Check that it really was a single-disk; archive with all the entries as expected. Most importantly, figure; out where the central directory begins. Returns -1 in case of error,; 0 otherwise. Int_t ReadDirectory(); Read the directory of the ZIP archive. Returns -1 in case of error,; 0 otherwise. Int_t ReadMemberHeader(TZIPMember* member); Read the member header of the ZIP archive. Sets the position where; the data starts in the member object. Returns -1 in case of error,; 0 otherwise. Int_t SetCurrentMember(); Find the desired member in the member array and make it the; current member. Returns -1 in case member is not found, 0 otherwise. UInt_t Get(const void* buffer, Int_t bytes); Read a ""bytes"" long little-endian integer value from ""buffer"". void Print(Option_t* option = """") const; Pretty print ZIP archive members. TZIPFile(const TZIPFile& ). TZIPFile& operator=(const TZIPFile& ). virtual ~TZIPFile(); { }. » Author: Fons Rademakers 30/6/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TZIPFile.h 23916 2008-05-19 20:01:28Z brun $ » Last generated: 2010-09-23 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT su",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TZIPFile.html:10798,error,error,10798,root/html528/TZIPFile.html,https://root.cern,https://root.cern/root/html528/TZIPFile.html,1,['error'],['error']
Availability,"le; 1496/// (this avoids certain security problems). Returns 0 in case; 1497/// of error.; 1498 ; 1499FILE *TSystem::TempFileName(TString &, const char *, const char *); 1500{; 1501 AbstractMethod(""TempFileName"");; 1502 return nullptr;; 1503}; 1504 ; 1505////////////////////////////////////////////////////////////////////////////////; 1506/// Set the file permission bits. Returns -1 in case or error, 0 otherwise.; 1507 ; 1508int TSystem::Chmod(const char *, UInt_t); 1509{; 1510 AbstractMethod(""Chmod"");; 1511 return -1;; 1512}; 1513 ; 1514////////////////////////////////////////////////////////////////////////////////; 1515/// Set the process file creation mode mask.; 1516 ; 1517int TSystem::Umask(Int_t); 1518{; 1519 AbstractMethod(""Umask"");; 1520 return -1;; 1521}; 1522 ; 1523////////////////////////////////////////////////////////////////////////////////; 1524/// Set the a files modification and access times. If actime = 0 it will be; 1525/// set to the modtime. Returns 0 on success and -1 in case of error.; 1526 ; 1527int TSystem::Utime(const char *, Long_t, Long_t); 1528{; 1529 AbstractMethod(""Utime"");; 1530 return -1;; 1531}; 1532 ; 1533////////////////////////////////////////////////////////////////////////////////; 1534/// Find location of file in a search path. Return value points to TString for; 1535/// compatibility with Which(const char *, const char *, EAccessMode).; 1536/// Returns 0 in case file is not found.; 1537 ; 1538const char *TSystem::FindFile(const char *, TString&, EAccessMode); 1539{; 1540 AbstractMethod(""FindFile"");; 1541 return nullptr;; 1542}; 1543 ; 1544////////////////////////////////////////////////////////////////////////////////; 1545/// Find location of file in a search path. User must delete returned string.; 1546/// Returns 0 in case file is not found.; 1547 ; 1548char *TSystem::Which(const char *search, const char *wfil, EAccessMode mode); 1549{; 1550 TString wfilString(wfil);; 1551 FindFile(search, wfilString, mode);; 1552 if (wfi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:48163,error,error,48163,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['error'],['error']
Availability,"le; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MISC; » TABLE; » TTablePoints. class TTablePoints: public TPoints3DABC. Defines the TTable as an element of ""event"" geometry. +SEQ,TTablePoints.; +SEQ,T<your_table_name_here>. class T<your_table_name_here>_Points : public TTablePoints; {; public:; T<your_table_name_here>_Points(TTableSorter *sorter,const void *key,Option_t *opt):; TTablePoints(sorter,key,opt){}; virtual ~T<your_table_name_here>_Points(){} // default destructor; virtual Float_t GetX(Int_t indx) { return ((<your_table_name_here>_st *)fRows)[Indx(idx)]-> <x>;}; virtual Float_t GetY(Int_t indx) { return ((<your_table_name_here>_st *)fRows)[Indx(idx)]-> <y>;}; virtual Float_t GetZ(Int_t indx) { return ((<your_table_name_here>_st *)fRows)[Indx(idx)]-> <z>;}; };. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TTablePoints(); voidTObject::AbstractMethod(const char* method) const; virtual Int_tTPoints3DABC::Add(Float_t x, Float_t y, Float_t z); virtual Int_tTPoints3DABC::AddLast(Float_t x, Float_t y, Float_t z); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; static Int_tTPoints3DABC::DistancetoLine(Int_t px, Int_t py, Float_t x1, Float_t y1, Float_t x2, Float_t y2, Int_t lineWidth = 1); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::Dr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTablePoints.html:1122,avail,available,1122,root/html602/TTablePoints.html,https://root.cern,https://root.cern/root/html602/TTablePoints.html,2,['avail'],['available']
Availability,"le; nsig = 0 (default value) returns the expected value; nsig = -1 returns the lower band value at -1 sigma; nsig + 1 return the upper value. double GetExpectedUpperLimit(double nsig = 0) const; Get the expected upper limit; nsig is used to specify which expected value of the UpperLimitDistribution; For example; nsig = 0 (default value) returns the expected value; nsig = -1 returns the lower band value at -1 sigma; nsig + 1 return the upper value. double GetExpectedLimit(double nsig, bool lower) const; get expected limit (lower/upper) depending on the flag. double GetLastYValue() const; { return GetYValue( fXValues.size()-1); }. double GetLastXValue() const; { return GetXValue( fXValues.size()-1); }. double GetLastYError() const; { return GetYError( fXValues.size()-1); }. HypoTestResult * GetLastResult() const; { return GetResult( fXValues.size()-1); }. int ArraySize() const; number of entries in the results array. { return fXValues.size(); }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) (eg. 0.05 for a 95% Confidence Interval). { fConfidenceLevel = 1.-size; }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). { fConfidenceLevel = cl; }. void UseCLs(bool on = true); flag to switch between using CLsb (default) or CLs as confidence level. { fUseCLs = on; }. SamplingDistribution * GetNullTestStatDist(int index) const; same in terms of alt and null. SamplingDistribution * GetAltTestStatDist(int index) const. SamplingDistribution* GetLowerLimitDistribution() const; get expected lower limit distributions; implemented using interpolation. { return GetLimitDistribution(true); }. SamplingDistribution* GetUpperLimitDistribution() const; get expected upper limit distributions; implemented using interpolation. { return GetLimitDistribution(false); }. void SetInterpolationOption(RooStats::HypoTestInverterResult::InterpolOption_t opt); set the interpolation option, linear (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestInverterResult.html:14397,error,error,14397,root/html530/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestInverterResult.html,1,['error'],['error']
Availability,"le; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MisClassificationError. class TMVA::MisClassificationError: public TMVA::SeparationBase. Implementation of the MisClassificationError as separation criterion. Function Members (Methods); public:. virtual~MisClassificationError(); static TClass*Class(); const TString&TMVA::SeparationBase::GetName(); Double_tTMVA::SeparationBase::GetSeparationGain(const Double_t& nSelS, const Double_t& nSelB, const Double_t& nTotS, const Double_t& nTotB); virtual Double_tGetSeparationIndex(const Double_t& s, const Double_t& b); virtual TClass*IsA() const; TMVA::MisClassificationErrorMisClassificationError(); TMVA::MisClassificationErrorMisClassificationError(const TMVA::MisClassificationError& g); TMVA::MisClassificationError&operator=(const TMVA::MisClassificationError&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. TStringTMVA::SeparationBase::fNamename of the concrete Separation Index impementation; Double_tTMVA::SeparationBase::fPrecisionCut. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationIndex(const Double_t& s, const Double_t& b); Misclassifiacton error criterion: 1-max(p, 1-p) (p: purity= s/(s+b)). MisClassificationError(); consturctor for the Misclassification error. { fName = ""MisCl""; }. MisClassificationError(const TMVA::MisClassificationError& g); copy constructor. {}. virtual ~MisClassificationError(); destructor. {}. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: MisClassificationError.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__MisClassificationError.html:1476,error,error,1476,root/html532/TMVA__MisClassificationError.html,https://root.cern,https://root.cern/root/html532/TMVA__MisClassificationError.html,2,['error'],['error']
Availability,"le; will be replaced with x[num], where x is an array containing value of this variable under num. pre-defined formula; will be replaced with formulas body. constant; will be replaced with constant value. parameter; will be replaced with p[num], where p is an array containing value of this parameter under num. If has arguments it can be :. function shortcut, eg. sin; will be replaced with fullname of function, eg. sin -> TMath::Sin. function from cling environment, eg. TMath::BreitWigner(x,y,z); first check if function exists, and has same number of arguments, then accept it and set as found. If all functors after iteration are matched with corresponding action, it inputs C++ code of formula into cling, and sets flag that formula is ready to evaluate. . Definition at line 2077 of file TFormula.cxx. ◆ ReInitializeEvalMethod(). void TFormula::ReInitializeEvalMethod ; (; ). private . Re-initialize eval method. ; This function is called by DoEval and DoEvalVector in case of a previous failure or in case of reading from a file ; Definition at line 3467 of file TFormula.cxx. ◆ ReplaceAllNames(). void TFormula::ReplaceAllNames ; (; TString & ; formula, . std::map< TString, TString > & ; substitutions . ). private . Definition at line 405 of file TFormula.cxx. ◆ ReplaceParamName(). void TFormula::ReplaceParamName ; (; TString & ; formula, . const TString & ; oldname, . const TString & ; name . ). protected . Replace in Formula expression the parameter name. ; Definition at line 3020 of file TFormula.cxx. ◆ SetName(). void TFormula::SetName ; (; const char * ; name). overridevirtual . Set the name of the formula. ; We need to allow the list of function to properly handle the hashes. ; Reimplemented from TNamed.; Definition at line 2640 of file TFormula.cxx. ◆ SetParameter() [1/2]. void TFormula::SetParameter ; (; const char * ; name, . Double_t ; value . ). Sets parameter value. ; Definition at line 2893 of file TFormula.cxx. ◆ SetParameter() [2/2]. void TFormula::SetParamete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFormula.html:47437,failure,failure,47437,doc/master/classTFormula.html,https://root.cern,https://root.cern/doc/master/classTFormula.html,1,['failure'],['failure']
Availability,"leAt(ULong64_t linidx) const; double&At(ULong64_t linidx); virtual Double_tAtAsDouble(ULong64_t linidx) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTNDArray::GetBin(const Int_t* idx) const; Long64_tTNDArray::GetCellSize(Int_t dim) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; Long64_tTNDArray::GetNbins() const; Int_tTNDArray::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNDArrayT_double_.html:2279,error,error,2279,root/html534/TNDArrayT_double_.html,https://root.cern,https://root.cern/root/html534/TNDArrayT_double_.html,3,['error'],['error']
Availability,"leClassPDG(const char* name = 0); virtual~TParticleClassPDG(); voidTObject::AbstractMethod(const char* method) const; voidAddParticle(TObject* p); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TObjArray*GetListOfParticles(); virtual const char*TNamed::GetName() const; Int_tGetNParticles(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TParticlePDG*GetParticle(Int_t i); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TParticleClassPDG.html:1403,error,error,1403,root/html528/TParticleClassPDG.html,https://root.cern,https://root.cern/root/html528/TParticleClassPDG.html,4,['error'],['error']
Availability,"leConflictNodes arguments are mutually exclusive. The RenameVariable argument can be repeated; as often as necessary to rename multiple variables. Alternatively, a single RenameVariable argument can be given with; two comma separated lists. Bool_t import(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg()); Import a dataset (RooDataSet or RooDataHist) into the work space. The workspace will contain a copy of the data; The dataset and its variables can be renamed upon insertion with the options below. Accepted arguments. Rename(const char* suffix) -- Rename dataset upon insertion; RenameVariable(const char* inputName, const char* outputName) -- Change names of observables in dataset upon insertion. Bool_t defineSet(const char* name, const RooArgSet& aset, Bool_t importMissing = kFALSE); Define a named RooArgSet with given constituents. If importMissing is true, any constituents; of aset that are not in the workspace will be imported, otherwise an error is returned; for missing components. Bool_t defineSet(const char* name, const char* contentList); Define a named set in the work space through a comma separated list of; names of objects already in the workspace. Bool_t extendSet(const char* name, const char* newContents); Define a named set in the work space through a comma separated list of; names of objects already in the workspace. const RooArgSet* set(const char* name); Return pointer to previously defined named set with given nmame; If no such set is found a null pointer is returned. Bool_t renameSet(const char* name, const char* newName); Rename set to a new name. Bool_t removeSet(const char* name); Remove a named set from the workspace. Bool_t startTransaction(); Open an import transaction operations. Returns kTRUE if successful, kFALSE; if there is already an ongoing transaction. Bool_t cancelTransaction(); Cancel an ongoing import transaction. All objects imported since startTransacti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooWorkspace.html:15450,error,error,15450,root/html530/RooWorkspace.html,https://root.cern,https://root.cern/root/html530/RooWorkspace.html,2,['error'],['error']
Availability,"leConflictNodes arguments are mutually exclusive. The RenameVariable argument can be repeated; as often as necessary to rename multiple variables. Alternatively, a single RenameVariable argument can be given with; two comma separated lists. Bool_t import(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg()); Import a dataset (RooDataSet or RooDataHist) into the work space. The workspace will contain a copy of the data; The dataset and its variables can be renamed upon insertion with the options below. Accepted arguments. Rename(const char* suffix) -- Rename dataset upon insertion; RenameVariable(const char* inputName, const char* outputName) -- Change names of observables in dataset upon insertion. Bool_t defineSet(const char* name, const RooArgSet& aset, Bool_t importMissing = kFALSE); Define a named RooArgSet with given constituents. If importMissing is true, any constituents; of aset that are not in the workspace will be imported, otherwise an error is returned; for missing components. Bool_t defineSet(const char* name, const char* contentList); Define a named set in the work space through a comma separated list of; names of objects already in the workspace. Bool_t extendSet(const char* name, const char* newContents); Define a named set in the work space through a comma separated list of; names of objects already in the workspace. const RooArgSet* set(const char* name); Return pointer to previously defined named set with given nmame; If no such set is found a null pointer is returned. Bool_t startTransaction(); Open an import transaction operations. Returns kTRUE if successful, kFALSE; if there is already an ongoing transaction. Bool_t cancelTransaction(); Cancel an ongoing import transaction. All objects imported since startTransaction(); will be removed and the transaction will be terminated. Return kTRUE if cancel operation; succeeds, return kFALSE if there was no open transaction. Bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooWorkspace.html:15290,error,error,15290,root/html528/RooWorkspace.html,https://root.cern,https://root.cern/root/html528/RooWorkspace.html,1,['error'],['error']
Availability,"leHandler * TWinNTSystem::RemoveFileHandler ; (; TFileHandler * ; h). overridevirtual . Remove a file handler from the list of file handlers. ; Returns the handler or 0 if the handler was not in the list of file handlers. ; Reimplemented from TSystem.; Definition at line 1355 of file TWinNTSystem.cxx. ◆ RemoveSignalHandler(). TSignalHandler * TWinNTSystem::RemoveSignalHandler ; (; TSignalHandler * ; h). overridevirtual . Remove a signal handler from list of signal handlers. ; Returns the handler or 0 if the handler was not in the list of signal handlers. ; Reimplemented from TSystem.; Definition at line 1399 of file TWinNTSystem.cxx. ◆ RemoveTimer(). TTimer * TWinNTSystem::RemoveTimer ; (; TTimer * ; ti). overridevirtual . Remove timer from list of system timers. ; Reimplemented from TSystem.; Definition at line 4431 of file TWinNTSystem.cxx. ◆ Rename(). int TWinNTSystem::Rename ; (; const char * ; from, . const char * ; to . ). overridevirtual . Rename a file. Returns 0 when successful, -1 in case of failure. ; Reimplemented from TSystem.; Definition at line 2630 of file TWinNTSystem.cxx. ◆ ResetSignal(). void TWinNTSystem::ResetSignal ; (; ESignals ; sig, . Bool_t ; reset = kTRUE . ). overridevirtual . If reset is true reset the signal handler for the specified signal to the default handler, else restore previous behaviour. ; Reimplemented from TSystem.; Definition at line 1425 of file TWinNTSystem.cxx. ◆ ResetSignals(). void TWinNTSystem::ResetSignals ; (; ). overridevirtual . Reset signals handlers to previous behaviour. ; Reimplemented from TSystem.; Definition at line 1433 of file TWinNTSystem.cxx. ◆ Select() [1/2]. Int_t TWinNTSystem::Select ; (; TFileHandler * ; h, . Long_t ; to . ). overridevirtual . Select on the file descriptor related to file handler h. ; The timeout to is in millisec. ; Reimplemented from TSystem.; Definition at line 4628 of file TWinNTSystem.cxx. ◆ Select() [2/2]. Int_t TWinNTSystem::Select ; (; TList * ; active, . Long_t ; timeout . )",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWinNTSystem.html:67676,failure,failure,67676,doc/master/classTWinNTSystem.html,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html,1,['failure'],['failure']
Availability,"leMetricMinimizer: public ROOT::Minuit2::ModularFunctionMinimizer. Instantiates the SeedGenerator and MinimumBuilder for; Variable Metric Minimization method.; API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. Function Members (Methods); public:. virtual~VariableMetricMinimizer(); virtual const ROOT::Minuit2::MinimumBuilder&Builder() const; virtual ROOT::Minuit2::MinimumBuilder&Builder(); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Mi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__VariableMetricMinimizer.html:1444,toler,toler,1444,root/html602/ROOT__Minuit2__VariableMetricMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__VariableMetricMinimizer.html,2,['toler'],['toler']
Availability,"leRooCmdArg OutputFile(const char *fileName)Definition RooGlobalFunc.cxx:517; RooFit::PrintLevelRooCmdArg PrintLevel(Int_t code)Definition RooGlobalFunc.cxx:657; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf407_latextablesDefinition rf407_latextables.py:1; ; [#0] WARNING:InputArguments -- The parameter 'sigma1' with range [-inf, inf] of the RooGaussian 'sig1' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma2' with range [-inf, inf] of the RooGaussian 'sig2' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; \begin{tabular}{lc}; $\verb+a0+ $ & $ 0.6\pm 0.2$\\; $\verb+a1+ $ & $ 0.2\pm 0.2$\\; $\verb+alpha+ $ & $ -1.00$\\; $\verb+bkgfrac+ $ & $ 0.45\pm 0.03$\\; $\verb+mean+ $ & $ 5$\\; $\verb+sig1frac+ $ & $ 0.71\pm 0.06$\\; $\verb+sigma1+ $ & $ 0.5$\\; $\verb+sigma2+ $ & $ 1$\\; \end{tabular}; \begin{tabular}{lc|lc}; $\verb+a0+ $ & $ 0.6\pm 0.2$ & $\verb+mean+ $ & $ 5$\\; $\verb+a1+ $ & $ 0.2\pm 0.2$ & $\verb+sig1frac+ $ & $ 0.71\pm 0.06$\\; $\verb+alpha+ $ & $ -1.00$ & $\verb+sigma1+ $ & $ 0.5$\\; $\verb+bkgfrac+ $ & $ 0.45\pm 0.03$ & $\verb+sigma2+ $ & $ 1$\\; \end{tabular}; \begin{tabular}{lcc}; $\verb+a0+ $ & $ 0.6\pm 0.2$ & $ 0.5$\\; $\verb+a1+ $ & $ 0.2\pm 0.2$ & $ 0.2$\\; $\verb+alpha+ $ & $ -1.00$ & $-1.00$\\; $\verb+bkgfrac+ $ & $ 0.45\pm 0.03$ & ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf407__latextables_8C.html:5466,error,error,5466,doc/master/rf407__latextables_8C.html,https://root.cern,https://root.cern/doc/master/rf407__latextables_8C.html,1,['error'],['error']
Availability,"leSet* rules, ROOT::TSchemaRuleSet::EConsistencyCheck checkConsistency = kCheckAll, TString* errmsg = 0); virtual voidTObject::AppendPad(Option_t* option = """"); voidAsString(TString& out) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const TObjArray*FindRules(const TString& source) const; const ROOT::TSchemaMatch*FindRules(const TString& source, Int_t version) const; const ROOT::TSchemaMatch*FindRules(const TString& source, UInt_t checksum) const; const ROOT::TSchemaMatch*FindRules(const TString& source, Int_t version, UInt_t checksum) const; TClass*GetClass(); UInt_tGetClassCheckSum() const; TStringGetClassName() const; Int_tGetClassVersion() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__TSchemaRuleSet.html:1573,error,error,1573,root/html530/ROOT__TSchemaRuleSet.html,https://root.cern,https://root.cern/root/html530/ROOT__TSchemaRuleSet.html,5,['error'],['error']
Availability,"leTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEstimatorFunction(vector<Double_t>&); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodFDA.html:2585,error,error,2585,root/html528/TMVA__MethodFDA.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodFDA.html,4,['error'],['error']
Availability,"le_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total. ;  ; Double_t GetErrorX (Int_t bin) const override;  Returns the combined error along X at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on X. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on X. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on Y. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on Y. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; TClass * IsA () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with asymmetric errors from the collection to this graph. ;  ; TGraphAsymmErrors & operator= (const TGraphAsymmErrors &gr);  TGraphAsymmErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphAsymmErrors by a constant c1. ;  ; virtual void SetPointError (Double_t exl, Double_t exh, Double_t eyl, Double_t eyh);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh);  Set ex and ey values for point number i. ;  ; virtual void SetPointEXhigh (Int_t i, Double_t exh);  Set EXhigh for point i. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHist.html:9102,error,errors,9102,doc/master/classRooHist.html,https://root.cern,https://root.cern/doc/master/classRooHist.html,2,['error'],['errors']
Availability,"le_t *)x, eps);; 909}; 910 ; 911template <class T>; 912inline T TF1::GradientParTempl(Int_t ipar, const T *x, Double_t eps); 913{; 914 if (GetNpar() == 0); 915 return 0;; 916 ; 917 if (eps < 1e-10 || eps > 1) {; 918 Warning(""Derivative"", ""parameter esp=%g out of allowed range[1e-10,1], reset to 0.01"", eps);; 919 eps = 0.01;; 920 }; 921 Double_t h;; 922 TF1 *func = (TF1 *)this;; 923 Double_t *parameters = GetParameters();; 924 ; 925 // Copy parameters for thread safety; 926 std::vector<Double_t> parametersCopy(parameters, parameters + GetNpar());; 927 parameters = parametersCopy.data();; 928 ; 929 Double_t al, bl, h2;; 930 T f1, f2, g1, g2, d0, d2;; 931 ; 932 ((TF1 *)this)->GetParLimits(ipar, al, bl);; 933 if (al * bl != 0 && al >= bl) {; 934 // this parameter is fixed; 935 return 0;; 936 }; 937 ; 938 // check if error has been computer (is not zero); 939 if (func->GetParError(ipar) != 0); 940 h = eps * func->GetParError(ipar);; 941 else; 942 h = eps;; 943 ; 944 // save original parameters; 945 Double_t par0 = parameters[ipar];; 946 ; 947 parameters[ipar] = par0 + h;; 948 f1 = func->EvalPar(x, parameters);; 949 parameters[ipar] = par0 - h;; 950 f2 = func->EvalPar(x, parameters);; 951 parameters[ipar] = par0 + h / 2;; 952 g1 = func->EvalPar(x, parameters);; 953 parameters[ipar] = par0 - h / 2;; 954 g2 = func->EvalPar(x, parameters);; 955 ; 956 // compute the central differences; 957 h2 = 1 / (2. * h);; 958 d0 = f1 - f2;; 959 d2 = 2 * (g1 - g2);; 960 ; 961 T grad = h2 * (4 * d2 - d0) / 3.;; 962 ; 963 // restore original value; 964 parameters[ipar] = par0;; 965 ; 966 return grad;; 967}; 968 ; 969template <class T>; 970inline void TF1::GradientPar(const T *x, T *grad, Double_t eps); 971{; 972 if (fType == EFType::kTemplVec || fType == EFType::kTemplScalar) {; 973 GradientParTempl<T>(x, grad, eps);; 974 } else; 975 GradientParTempl<Double_t>((const Double_t *)x, (Double_t *)grad, eps);; 976}; 977 ; 978template <class T>; 979inline void TF1::GradientParTempl(const T *x, T *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8h_source.html:39197,error,error,39197,doc/master/TF1_8h_source.html,https://root.cern,https://root.cern/doc/master/TF1_8h_source.html,1,['error'],['error']
Availability,"le_t *x) constreturn kTRUE if the point is inside the function rangeDefinition TF1.h:626; TF1::GetNdimvirtual Int_t GetNdim() constDefinition TF1.h:513; TGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each.Definition TGraph2D.h:41; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraphErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:623; TGraphErrors::GetEXDouble_t * GetEX() const overrideDefinition TGraphErrors.h:69; TGraphErrors::GetErrorXDouble_t GetErrorX(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:612; TGraphErrors::GetEYDouble_t * GetEY() const overrideDefinition TGraphErrors.h:70; TGraphErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:635; TGraphErrors::GetErrorYlowDouble_t GetErrorYlow(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:671; TGraphErrors::GetErrorYhighDouble_t GetErrorYhigh(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:659; TGraphErrors::IsATClass * IsA() const overrideDefinition TGraphErrors.h:78; TGraphErrors::GetErrorXlowDouble_t GetErrorXlow(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:647; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::SetPointvirtual void SetPoint(Int_t i, Double_t x, Double_t y)Set x and y values for point number i.Definition TGraph.cxx:2342; TGraph::GetYDouble_t * GetY() constDefinition TGraph.h:140; TGraph::GetEYlowvirtual Double_t * GetEYlow() constDefinition TGraph.h:146; TGraph::GetNInt_t GetN() constDefinition TGraph.h:132; TGraph::GetXDouble_t * GetX() constDefinition TGraph.h:139; TGraph::GetEYhighvirtual Double_t * GetEYhigh() cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitInterface_8cxx_source.html:40058,error,error,40058,doc/master/HFitInterface_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html,1,['error'],['error']
Availability,"le_t * ; x, . const Double_t * ; y, . const Double_t * ; ex = nullptr, . const Double_t * ; ey = nullptr . ). TGraphErrors normal constructor. ; if ex or ey are null, the corresponding arrays are preset to zero ; Definition at line 112 of file TGraphErrors.cxx. ◆ TGraphErrors() [5/9]. TGraphErrors::TGraphErrors ; (; const TVectorF & ; vx, . const TVectorF & ; vy, . const TVectorF & ; vex, . const TVectorF & ; vey . ). Constructor with four vectors of floats in input. ; A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vex and vey. The number of points in the graph is the minimum of number of points in vx and vy. ; Definition at line 133 of file TGraphErrors.cxx. ◆ TGraphErrors() [6/9]. TGraphErrors::TGraphErrors ; (; const TVectorD & ; vx, . const TVectorD & ; vy, . const TVectorD & ; vex, . const TVectorD & ; vey . ). Constructor with four vectors of doubles in input. ; A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vex and vey. The number of points in the graph is the minimum of number of points in vx and vy. ; Definition at line 154 of file TGraphErrors.cxx. ◆ TGraphErrors() [7/9]. TGraphErrors::TGraphErrors ; (; const TGraphErrors & ; gr). TGraphErrors copy constructor. ; Definition at line 170 of file TGraphErrors.cxx. ◆ TGraphErrors() [8/9]. TGraphErrors::TGraphErrors ; (; const TH1 * ; h). TGraphErrors constructor importing its parameters from the TH1 object passed as argument. ; Definition at line 204 of file TGraphErrors.cxx. ◆ TGraphErrors() [9/9]. TGraphErrors::TGraphErrors ; (; const char * ; filename, . const char * ; format = ""%lg %lg %lg %lg"", . Option_t * ; option = """" . ). GraphErrors constructor reading input from filename. ; filename is assumed to contain at least 2 columns of numbers; Convention for format (default=""%lg %lg %lg %lg""). format = lg lg read only 2 first columns into X,Y; format = lg lg lg read only 3 first columns in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphErrors.html:35807,error,errors,35807,doc/master/classTGraphErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html,1,['error'],['errors']
Availability,"le_t > > eyL, std::vector< std::vector< Double_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< TArrayD > eyL, std::vector< TArrayD > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< std::vector< Float_t > > eyL, std::vector< std::vector< Float_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< TArrayF > eyL, std::vector< TArrayF > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne=1);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const TGraphMultiErrors &tgme);  TGraphMultiErrors copy constructor. ;  ;  TGraphMultiErrors (const TH1 *pass, const TH1 *total, Int_t ne=1, Option_t *option="""");  Creates a TGraphMultiErrors by dividing two input TH1 histograms: pass/total. ;  ;  TGraphMultiErrors (const TH1 *th, Int_t ne=1);  TGraphMultiErrors constructor importing its parameters from the TH1 object passed as argument. ;  ;  TGraphMultiErrors (const TVectorD &tvX, const TVectorD &tvY, const TVectorD &tvExL, const TVectorD &tvExH, const TVectorD &tvEyL, const TVectorD &tvEyH, Int_t m=kOnlyFirst);  Constructor with six vectors of doubles in input and a single y error",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:5765,error,errors,5765,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['errors']
Availability,"le_t GetDerivative() const; computes the derivative for the appropriate function; at the working point. Double_t GetError() const; Computes the error for output neurons.; Returns 0 for other neurons. Double_t GetTarget() const; Computes the normalized target pattern for output neurons.; Returns 0 for other neurons. Double_t GetDeDw() const; Computes the derivative of the error wrt the neuron weight. void ForceExternalValue(Double_t value); Uses the branch type to force an external value. void SetNormalisation(Double_t mean, Double_t RMS); Sets the normalization variables.; Any input neuron will return (branch-mean)/RMS.; When UseBranch is called, mean and RMS are automatically set; to the actual branch mean and RMS. void SetWeight(Double_t w); Sets the neuron weight to w.; The neuron weight corresponds to the bias in the; linear combination of the inputs. void SetNewEvent() const; Inform the neuron that inputs of the network have changed,; so that the buffered values have to be recomputed. void SetDEDw(Double_t in); Sets the derivative of the total error wrt the neuron weight. TNeuron(TNeuron::ENeuronType type = kSigmoid, const char* name = """", const char* title = """", const char* extF = """", const char* extD = """"); {}. TSynapse* GetPre(Int_t n) const; { return (TSynapse*) fpre.At(n); }. TSynapse* GetPost(Int_t n) const; { return (TSynapse*) fpost.At(n); }. TNeuron* GetInLayer(Int_t n) const; { return (TNeuron*) flayer.At(n); }. ENeuronType GetType() const. Double_t GetWeight() const; { return fWeight; }. const Double_t* GetNormalisation() const; { return fNorm; }. Double_t GetDEDw() const; { return fDEDw; }. TNeuron& operator=(const TNeuron& ). » Author: Christophe.Delaere@cern.ch 20/07/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/mlp:$Id$ » Last generated: 2015-03-14 16:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNeuron.html:11003,error,error,11003,root/html534/TNeuron.html,https://root.cern,https://root.cern/root/html534/TNeuron.html,1,['error'],['error']
Availability,"le_t GetDerivative() const; computes the derivative for the appropriate function; at the working point. Double_t GetError() const; Computes the error for output neurons.; Returns 0 for other neurons. Double_t GetTarget() const; Computes the normalized target pattern for output neurons.; Returns 0 for other neurons. Double_t GetDeDw() const; Computes the derivative of the error wrt the neuron weight. void ForceExternalValue(Double_t value); Uses the branch type to force an external value. void SetNormalisation(Double_t mean, Double_t RMS); Sets the normalization variables.; Any input neuron will return (branch-mean)/RMS.; When UseBranch is called, mean and RMS are automatically set; to the actual branch mean and RMS. void SetWeight(Double_t w); Sets the neuron weight to w.; The neuron weight corresponds to the bias in the; linear combination of the inputs. void SetNewEvent() const; Inform the neuron that inputs of the network have changed,; so that the buffered values have to be recomputed. void SetDEDw(Double_t in); Sets the derivative of the total error wrt the neuron weight. TNeuron(TNeuron::ENeuronType type = kSigmoid, const char* name = """", const char* title = """", const char* extF = """", const char* extD = """"); {}. TSynapse* GetPre(Int_t n) const; { return (TSynapse*) fpre.At(n); }. TSynapse* GetPost(Int_t n) const; { return (TSynapse*) fpost.At(n); }. TNeuron* GetInLayer(Int_t n) const; { return (TNeuron*) flayer.At(n); }. ENeuronType GetType() const. Double_t GetWeight() const; { return fWeight; }. const Double_t* GetNormalisation() const; { return fNorm; }. Double_t GetDEDw() const; { return fDEDw; }. TNeuron& operator=(const TNeuron& ). » Author: Christophe.Delaere@cern.ch 20/07/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/mlp:$Id$ » Last generated: 2015-06-02 16:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TNeuron.html:11630,error,error,11630,root/html604/TNeuron.html,https://root.cern,https://root.cern/root/html604/TNeuron.html,1,['error'],['error']
Availability,"le_t GetDerivative() const; computes the derivative for the appropriate function; at the working point. Double_t GetError() const; Computes the error for output neurons.; Returns 0 for other neurons. Double_t GetTarget() const; Computes the normalized target pattern for output neurons.; Returns 0 for other neurons. Double_t GetDeDw() const; Computes the derivative of the error wrt the neuron weight. void ForceExternalValue(Double_t value); Uses the branch type to force an external value. void SetNormalisation(Double_t mean, Double_t RMS); Sets the normalization variables.; Any input neuron will return (branch-mean)/RMS.; When UseBranch is called, mean and RMS are automatically set; to the actual branch mean and RMS. void SetWeight(Double_t w); Sets the neuron weight to w.; The neuron weight corresponds to the bias in the; linear combination of the inputs. void SetNewEvent() const; Inform the neuron that inputs of the network have changed,; so that the buffered values have to be recomputed. void SetDEDw(Double_t in); Sets the derivative of the total error wrt the neuron weight. TNeuron(TNeuron::ENeuronType type = kSigmoid, const char* name = """", const char* title = """", const char* extF = """", const char* extD = """"); {}. TSynapse* GetPre(Int_t n) const; { return (TSynapse*) fpre.At(n); }. TSynapse* GetPost(Int_t n) const; { return (TSynapse*) fpost.At(n); }. TNeuron* GetInLayer(Int_t n) const; { return (TNeuron*) flayer.At(n); }. ENeuronType GetType() const. Double_t GetWeight() const; { return fWeight; }. const Double_t* GetNormalisation() const; { return fNorm; }. Double_t GetDEDw() const; { return fDEDw; }. TNeuron& operator=(const TNeuron& ). » Author: Christophe.Delaere@cern.ch 20/07/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/mlp:$Id$ » Last generated: 2015-06-30 15:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TNeuron.html:11630,error,error,11630,root/html602/TNeuron.html,https://root.cern,https://root.cern/root/html602/TNeuron.html,1,['error'],['error']
Availability,"le_t GetHatchesSpacing() constDefinition TStyle.h:201; TStyle::SetPalettevoid SetPalette(Int_t ncolors=kBird, Int_t *colors=nullptr, Float_t alpha=1.)See TColor::SetPalette.Definition TStyle.cxx:1888; TStyle::fStatYFloat_t fStatYY position of top right corner of stat box.Definition TStyle.h:114; TStyle::Copyvoid Copy(TObject &style) const overrideCopy this style.Definition TStyle.cxx:551; TStyle::GetLegendBorderSizeWidth_t GetLegendBorderSize() constDefinition TStyle.h:202; TStyle::fFrameLineStyleStyle_t fFrameLineStylePad frame line style.Definition TStyle.h:73; TStyle::SetStatBorderSizevoid SetStatBorderSize(Width_t size=2)Definition TStyle.h:393; TStyle::GetBarWidthFloat_t GetBarWidth() constDefinition TStyle.h:183; TStyle::fCanvasBorderModeInt_t fCanvasBorderModeCanvas border mode.Definition TStyle.h:87; TStyle::GetCanvasPreferGLBool_t GetCanvasPreferGL() constDefinition TStyle.h:187; TStyle::GetColorModelPSInt_t GetColorModelPS() constDefinition TStyle.h:196; TStyle::SetErrorXvoid SetErrorX(Float_t errorx=0.5)Definition TStyle.h:340; TStyle::GetCanvasDefYInt_t GetCanvasDefY() constDefinition TStyle.h:194; TStyle::SetTitleColorvoid SetTitleColor(Color_t color=1, Option_t *axis=""X"")Definition TStyle.cxx:1754; TStyle::SetNumberContoursvoid SetNumberContours(Int_t number=20)Set the default number of contour levels when drawing 2-d plots.Definition TStyle.cxx:1500; TStyle::Paintvoid Paint(Option_t *option="""") overrideCopy this style to gStyle.Definition TStyle.cxx:1252; TStyle::fTitleXFloat_t fTitleXX position of top left corner of title box.Definition TStyle.h:125; TStyle::fShowToolBarInt_t fShowToolBarShow toolbar.Definition TStyle.h:49; TStyle::SetLabelFontvoid SetLabelFont(Style_t font=62, Option_t *axis=""X"")Set font number used to draw axis labels.Definition TStyle.cxx:1413; TStyle::fCapLinePSInt_t fCapLinePSDetermines the appearance of line caps on PostScript, PDF and SVG.Definition TStyle.h:137; TStyle::fFuncWidthWidth_t fFuncWidthFunction line width.Definiti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStyle_8cxx_source.html:110512,error,errorx,110512,doc/master/TStyle_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStyle_8cxx_source.html,1,['error'],['errorx']
Availability,"le_t a); voidAddElementRN(TGeoElementRN* elem); voidAddIsotope(TGeoIsotope* isotope); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidBuildDefaultElements(); Bool_tCheckTable() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidExportElementsRN(const char* filename = """"); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; TGeoElement*FindElement(const char* name) const; TGeoIsotope*FindIsotope(const char* name) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TGeoElement*GetElement(Int_t z); TGeoElementRN*GetElementRN(Int_t ENDFcode) const; TGeoElementRN*GetElementRN(Int_t a, Int_t z, Int_t iso = 0) const; TObjArray*GetElementsRN() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; Int_tGetNelements() const; Int_tGetNelementsRN() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoElementTable.html:1865,error,error,1865,root/html528/TGeoElementTable.html,https://root.cern,https://root.cern/root/html528/TGeoElementTable.html,6,['error'],['error']
Availability,"le_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2); static voidDistToCone(const Double_t* point, const Double_t* dir, Double_t dz, Double_t r1, Double_t r2, Double_t& b, Double_t& delta); static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetAxisName(Int_t iaxis) const; virtual Double_tGetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidGetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tGetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; virtual Double_tTGeoBBox::GetDY() const; virtual Double_tGetDz() const; virtual Double_tTGeoBBox::GetDZ() const; virtual Double_tTGeoBBox::GetFacetArea(Int_t index = 0) const; virtual Int_tTGeoBBox::GetFittingBox(const TGeoBBox* parambox, TGeoMatr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoCone.html:4333,error,error,4333,root/html534/TGeoCone.html,https://root.cern,https://root.cern/root/html534/TGeoCone.html,3,['error'],['error']
Availability,"le_t exH, const Double_t *eyL, const Double_t *eyH);; 175 ; 176 virtual void SetPointEX(Int_t i, Double_t exL, Double_t exH);; 177 virtual void SetPointEXlow(Int_t i, Double_t exL);; 178 virtual void SetPointEXhigh(Int_t i, Double_t exH);; 179 virtual void SetPointEY(Int_t i, Int_t ne, const Double_t *eyL, const Double_t *eyH);; 180 virtual void SetPointEYlow(Int_t i, Int_t ne, const Double_t *eyL);; 181 virtual void SetPointEYhigh(Int_t i, Int_t ne, const Double_t *eyH);; 182 virtual void SetPointEY(Int_t i, Int_t e, Double_t eyL, Double_t eyH);; 183 virtual void SetPointEYlow(Int_t i, Int_t e, Double_t eyL);; 184 virtual void SetPointEYhigh(Int_t i, Int_t e, Double_t eyH);; 185 ; 186 virtual void SetEY(Int_t e, Int_t np, const Double_t *eyL, const Double_t *eyH);; 187 virtual void SetEYlow(Int_t e, Int_t np, const Double_t *eyL);; 188 virtual void SetEYhigh(Int_t e, Int_t np, const Double_t *eyH);; 189 ; 190 virtual void SetSumErrorsMode(Int_t m);; 191 ; 192 virtual void SetAttFill(Int_t e, TAttFill *taf);; 193 virtual void SetAttLine(Int_t e, TAttLine *tal);; 194 ; 195 using TAttFill::SetFillColor;; 196 using TAttFill::SetFillColorAlpha;; 197 using TAttFill::SetFillStyle;; 198 ; 199 virtual void SetFillColor(Int_t e, Color_t fcolor);; 200 virtual void SetFillColorAlpha(Int_t e, Color_t fcolor, Float_t falpha);; 201 virtual void SetFillStyle(Int_t e, Style_t fstyle);; 202 ; 203 using TAttLine::SetLineColor;; 204 using TAttLine::SetLineColorAlpha;; 205 using TAttLine::SetLineStyle;; 206 using TAttLine::SetLineWidth;; 207 ; 208 virtual void SetLineColor(Int_t e, Color_t lcolor);; 209 virtual void SetLineColorAlpha(Int_t e, Color_t lcolor, Float_t lalpha);; 210 virtual void SetLineStyle(Int_t e, Style_t lstyle);; 211 virtual void SetLineWidth(Int_t e, Width_t lwidth);; 212 ; 213 ClassDefOverride(TGraphMultiErrors, 1) // A Graph with asymmetric error bars and multiple y error dimensions; 214};; 215 ; 216#endif // ROOT_TGraphMultiErrors; f#define f(i)Definition RSha256.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html:11243,error,error,11243,doc/master/TGraphMultiErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html,2,['error'],['error']
Availability,"le_t exh=0., Double_t eyl=0., Double_t eyh=0.);  Add a point with asymmetric errorbars to the graph. ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; virtual void BayesDivide (const TH1 *pass, const TH1 *total, Option_t *opt="""");  This function is only kept for backward compatibility. ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total. ;  ; Double_t GetErrorX (Int_t bin) const override;  Returns the combined error along X at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on X. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on X. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on Y. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on Y. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; TClass * IsA () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with asymmetric errors from the collection to this graph. ;  ; TGraphAsymmErrors & operator= (const TGraphAsymmErrors &gr);  TGraphAsymmErrors assignment operator. ;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphAsymmError",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHist.html:8584,error,error,8584,doc/master/classRooHist.html,https://root.cern,https://root.cern/doc/master/classRooHist.html,2,['error'],['error']
Availability,"le_t ndf, Bool_t lower_tail = kTRUE); Double_tTan(Double_t x); Double_tTanH(Double_t x); Double_tTwoPi(); Double_tVavilov(Double_t x, Double_t kappa, Double_t beta2); Double_tVavilovI(Double_t x, Double_t kappa, Double_t beta2); Double_tVoigt(Double_t x, Double_t sigma, Double_t lg, Int_t R = 4). Class Charts; Function documentation; Long_t Hypot(Long_t x, Long_t y). Double_t Hypot(Double_t x, Double_t y). Double_t ASinH(Double_t ). Double_t ACosH(Double_t ). Double_t ATanH(Double_t ). Double_t Log2(Double_t x). Int_t Nint(Float_t x); Round to nearest integer. Rounds half integers to the nearest; even integer. Int_t Nint(Double_t x); Round to nearest integer. Rounds half integers to the nearest; even integer. Double_t DiLog(Double_t x); The DiLogarithm function; Code translated by R.Brun from CERNLIB DILOG function C332. Double_t Erf(Double_t x); Computation of the error function erf(x).; Erf(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between 0 and x. Double_t Erfc(Double_t x); Compute the complementary error function erfc(x).; Erfc(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between x and infinity. Double_t ErfInverse(Double_t x); returns the inverse error function; x must be <-1<x<1. Double_t ErfcInverse(Double_t x); returns the inverse of the complementary error function; x must be 0<x<2; implement using the quantile of the normal distribution; instead of ErfInverse for better numerical precision for large x. Double_t Factorial(Int_t i); Compute factorial(n). Double_t Freq(Double_t x); Computation of the normal frequency function freq(x).; Freq(x) = (1/sqrt(2pi)) Integral(exp(-t^2/2))dt between -infinity and x. Translated from CERNLIB C300 by Rene Brun. Double_t Gamma(Double_t z); Computation of gamma(z) for all z. C.Lanczos, SIAM Journal of Numerical Analysis B1 (1964), 86. Double_t Gamma(Double_t a, Double_t x); Computation of the normalized lower incomplete gamma function P(a,x) as defined in the; Handbook of Mathematical Functions by Abramowitz and Stegun, formula 6.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMath.html:12413,error,error,12413,root/html528/TMath.html,https://root.cern,https://root.cern/root/html528/TMath.html,2,['error'],['error']
Availability,"le_t ndf, Bool_t lower_tail = kTRUE); Double_tTan(Double_t x); Double_tTanH(Double_t x); Double_tTwoPi(); Double_tVavilov(Double_t x, Double_t kappa, Double_t beta2); Double_tVavilovI(Double_t x, Double_t kappa, Double_t beta2); Double_tVoigt(Double_t x, Double_t sigma, Double_t lg, Int_t r = 4). Class Charts; Function documentation; Long_t Hypot(Long_t x, Long_t y). Double_t Hypot(Double_t x, Double_t y). Double_t ASinH(Double_t ). Double_t ACosH(Double_t ). Double_t ATanH(Double_t ). Double_t Log2(Double_t x). Int_t Nint(Float_t x); Round to nearest integer. Rounds half integers to the nearest; even integer. Int_t Nint(Double_t x); Round to nearest integer. Rounds half integers to the nearest; even integer. Double_t DiLog(Double_t x); The DiLogarithm function; Code translated by R.Brun from CERNLIB DILOG function C332. Double_t Erf(Double_t x); Computation of the error function erf(x).; Erf(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between 0 and x. Double_t Erfc(Double_t x); Compute the complementary error function erfc(x).; Erfc(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between x and infinity. Double_t ErfInverse(Double_t x); returns the inverse error function; x must be <-1<x<1. Double_t ErfcInverse(Double_t x); returns the inverse of the complementary error function; x must be 0<x<2; implement using the quantile of the normal distribution; instead of ErfInverse for better numerical precision for large x. Double_t Factorial(Int_t i); Compute factorial(n). Double_t Freq(Double_t x); Computation of the normal frequency function freq(x).; Freq(x) = (1/sqrt(2pi)) Integral(exp(-t^2/2))dt between -infinity and x. Translated from CERNLIB C300 by Rene Brun. Double_t Gamma(Double_t z); Computation of gamma(z) for all z. C.Lanczos, SIAM Journal of Numerical Analysis B1 (1964), 86. Double_t Gamma(Double_t a, Double_t x); Computation of the normalized lower incomplete gamma function P(a,x) as defined in the; Handbook of Mathematical Functions by Abramowitz and Stegun, formula 6.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMath.html:12513,error,error,12513,root/html532/TMath.html,https://root.cern,https://root.cern/root/html532/TMath.html,1,['error'],['error']
Availability,"le_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidEnableTextInput(Bool_t on)TOGGLE GETTER ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGLBEntry*FindEntry(const char* s) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionGetDefa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGComboBox.html:5231,error,error,5231,root/html528/TGComboBox.html,https://root.cern,https://root.cern/root/html528/TGComboBox.html,4,['error'],['error']
Availability,"le_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTGContainer::End(Bool_t select = kFALSE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGContainer::FindFrame(Int_t x, Int_t y, Bool_t exclude = kTRUE); virtual TGFrame*TGContainer::FindFrameByName(const char* name); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual void*TGContainer::FindItem(const TString& name, Bool_t direction = kTRUE, Bool_t caseSensitive = kTRUE, Bool_t subString = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGCanvas*TGContainer::GetCanvas() const; TGClient*TGObject::Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGFileContainer.html:5402,error,error,5402,root/html528/TGFileContainer.html,https://root.cern,https://root.cern/root/html528/TGFileContainer.html,12,['error'],['error']
Availability,"le_t tolerance = 1e-10) const; Find the nearest point to xvalue. Return -1 if distance; exceeds tolerance. Double_t interpolate(Double_t x, Double_t tolerance = 1e-10) const; Return linearly interpolated value of curve at xvalue. If distance; to nearest point is less than tolerance, return nearest point value; instead. RooCurve* makeErrorBand(const vector<RooCurve*>& variations, Double_t Z = 1) const; Construct filled RooCurve represented error band that captures alpha% of the variations; of the curves passed through argument variations, where the percentage alpha corresponds to; the central interval fraction of a significance Z. RooCurve* makeErrorBand(const vector<RooCurve*>& plusVar, const vector<RooCurve*>& minusVar, const TMatrixD& V, Double_t Z = 1) const; Construct filled RooCurve represented error band represent the error added in quadrature defined by the curves arguments; plusVar and minusVar corresponding to one-sigma variations of each parameter. The resulting error band, combined used the correlation matrix C; is multiplied with the significance parameter Z to construct the equivalent of a Z sigma error band (in Gaussian approximation). void calcBandInterval(const vector<RooCurve*>& plusVar, const vector<RooCurve*>& minusVar, Int_t i, const TMatrixD& V, Double_t Z, Double_t& lo, Double_t& hi) const; Retrieve variation points from curves. void calcBandInterval(const vector<RooCurve*>& variations, Int_t i, Double_t Z, Double_t& lo, Double_t& hi, Bool_t approxGauss) const. Bool_t isIdentical(const RooCurve& other, Double_t tol = 1e-6) const; Return true if curve is identical to other curve allowing for given; absolute tolerance on each point compared point. RooCurve(). void Print(Option_t* options = 0) const; Printing interface. » Last changed: Mon Dec 7 13:47:17 2009 » Last generated: 2009-12-07 13:47; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCurve.html:22849,error,error,22849,root/html526/RooCurve.html,https://root.cern,https://root.cern/root/html526/RooCurve.html,3,"['error', 'toler']","['error', 'tolerance']"
Availability,"le_t tolerance = 1e-10) const; Find the nearest point to xvalue. Return -1 if distance; exceeds tolerance. Double_t interpolate(Double_t x, Double_t tolerance = 1e-10) const; Return linearly interpolated value of curve at xvalue. If distance; to nearest point is less than tolerance, return nearest point value; instead. RooCurve* makeErrorBand(const vector<RooCurve*>& variations, Double_t Z = 1) const; Construct filled RooCurve represented error band that captures alpha% of the variations; of the curves passed through argument variations, where the percentage alpha corresponds to; the central interval fraction of a significance Z. RooCurve* makeErrorBand(const vector<RooCurve*>& plusVar, const vector<RooCurve*>& minusVar, const TMatrixD& V, Double_t Z = 1) const; Construct filled RooCurve represented error band represent the error added in quadrature defined by the curves arguments; plusVar and minusVar corresponding to one-sigma variations of each parameter. The resulting error band, combined used the correlation matrix C; is multiplied with the significance parameter Z to construct the equivalent of a Z sigma error band (in Gaussian approximation). void calcBandInterval(const vector<RooCurve*>& plusVar, const vector<RooCurve*>& minusVar, Int_t i, const TMatrixD& V, Double_t Z, Double_t& lo, Double_t& hi) const; Retrieve variation points from curves. void calcBandInterval(const vector<RooCurve*>& variations, Int_t i, Double_t Z, Double_t& lo, Double_t& hi, Bool_t approxGauss) const. Bool_t isIdentical(const RooCurve& other, Double_t tol = 1e-6) const; Return true if curve is identical to other curve allowing for given; absolute tolerance on each point compared point. RooCurve(). void Print(Option_t* options = 0) const; Printing interface. » Last changed: Mon Jul 4 15:22:34 2011 » Last generated: 2011-07-04 15:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCurve.html:22997,error,error,22997,root/html530/RooCurve.html,https://root.cern,https://root.cern/root/html530/RooCurve.html,3,"['error', 'toler']","['error', 'tolerance']"
Availability,"le_t tolerance = 1e-10) const; Find the nearest point to xvalue. Return -1 if distance; exceeds tolerance. Double_t interpolate(Double_t x, Double_t tolerance = 1e-10) const; Return linearly interpolated value of curve at xvalue. If distance; to nearest point is less than tolerance, return nearest point value; instead. RooCurve* makeErrorBand(const vector<RooCurve*>& variations, Double_t Z = 1) const; Construct filled RooCurve represented error band that captures alpha% of the variations; of the curves passed through argument variations, where the percentage alpha corresponds to; the central interval fraction of a significance Z. RooCurve* makeErrorBand(const vector<RooCurve*>& plusVar, const vector<RooCurve*>& minusVar, const TMatrixD& V, Double_t Z = 1) const; Construct filled RooCurve represented error band represent the error added in quadrature defined by the curves arguments; plusVar and minusVar corresponding to one-sigma variations of each parameter. The resulting error band, combined used the correlation matrix C; is multiplied with the significance parameter Z to construct the equivalent of a Z sigma error band (in Gaussian approximation). void calcBandInterval(const vector<RooCurve*>& plusVar, const vector<RooCurve*>& minusVar, Int_t i, const TMatrixD& V, Double_t Z, Double_t& lo, Double_t& hi) const; Retrieve variation points from curves. void calcBandInterval(const vector<RooCurve*>& variations, Int_t i, Double_t Z, Double_t& lo, Double_t& hi, Bool_t approxGauss) const. Bool_t isIdentical(const RooCurve& other, Double_t tol = 1e-6) const; Return true if curve is identical to other curve allowing for given; absolute tolerance on each point compared point. RooCurve(). void Print(Option_t* options = 0) const; Printing interface. » Last changed: Thu Nov 3 20:07:52 2011 » Last generated: 2011-11-03 20:07; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCurve.html:22997,error,error,22997,root/html532/RooCurve.html,https://root.cern,https://root.cern/root/html532/RooCurve.html,3,"['error', 'toler']","['error', 'tolerance']"
Availability,"le_t value, const char* unit = """"); Constructor with value and unit. RooRealVar(const char* name, const char* title, Double_t minValue, Double_t maxValue, const char* unit = """"); Constructor with range and unit. Initial value is center of range. RooRealVar(const char* name, const char* title, Double_t value, Double_t minValue, Double_t maxValue, const char* unit = """"); Constructor with value, range and unit. RooRealVar(const RooRealVar& other, const char* name = 0); Copy Constructor. ~RooRealVar(); Destructor; cout << ""RooRealVar::dtor("" << this << "")"" << endl ;. Double_t getValV(const RooArgSet* nset = 0) const; Return value of variable. void setVal(Double_t value); Set value of variable to 'value'. If 'value' is outside; range of object, clip value into range. void setVal(Double_t value, const char* rangeName); Set value of variable to 'value'. If 'value' is outside; range named 'rangeName' of object, clip value into that range. RooErrorVar* errorVar() const; Return a RooAbsRealLValue representing the error associated; with this variable. The callers takes ownership of the; return object. Bool_t hasBinning(const char* name) const; Returns true if variable has a binning with 'name'. const RooAbsBinning& getBinning(const char* name = 0, Bool_t verbose = kTRUE, Bool_t createOnTheFly = kFALSE) const; Return binning definition with name. If binning with 'name' is not found it is created; on the fly as a clone of the default binning if createOnTheFly is true, otherwise; a reference to the default binning is returned. If verbose is true a message; is printed if a binning is created on the gly. RooAbsBinning& getBinning(const char* name = 0, Bool_t verbose = kTRUE, Bool_t createOnTheFly = kFALSE); Return binning definition with name. If binning with 'name' is not found it is created; on the fly as a clone of the default binning if createOnTheFly is true, otherwise; a reference to the default binning is returned. If verbose is true a message; is printed if a binning is cre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooRealVar.html:41209,error,errorVar,41209,root/html532/RooRealVar.html,https://root.cern,https://root.cern/root/html532/RooRealVar.html,8,['error'],"['error', 'errorVar']"
Availability,"le_t x);  Rounds x upward, returning the smallest integral value that is not less than x. ;  ; Int_t TMath::CeilNint (Double_t x);  Returns the nearest integer of TMath::Ceil(x). ;  ; Double_t TMath::ChisquareQuantile (Double_t p, Double_t ndf);  Evaluate the quantiles of the chi-squared probability distribution function. ;  ; Double_t TMath::Cos (Double_t);  Returns the cosine of an angle of x radians. ;  ; Double_t TMath::CosH (Double_t);  Returns the hyperbolic cosine of x. ;  ; template<typename T > ; T * TMath::Cross (const T v1[3], const T v2[3], T out[3]);  Calculates the Cross Product of two vectors: out = [v1 x v2]. ;  ; constexpr Double_t TMath::CUncertainty ();  Speed of light uncertainty. ;  ; constexpr Double_t TMath::DegToRad ();  Conversion from degree to radian: \( \frac{\pi}{180} \). ;  ; Double_t TMath::DiLog (Double_t x);  Modified Struve functions of order 1. ;  ; constexpr Double_t TMath::E ();  Base of natural log: \( e \). ;  ; Double_t TMath::Erf (Double_t x);  Computation of the error function erf(x). ;  ; Double_t TMath::Erfc (Double_t x);  Computes the complementary error function erfc(x). ;  ; Double_t TMath::ErfcInverse (Double_t x);  Returns the inverse of the complementary error function. ;  ; Double_t TMath::ErfInverse (Double_t x);  Returns the inverse error function. ;  ; constexpr Double_t TMath::EulerGamma ();  Euler-Mascheroni Constant. ;  ; Double_t TMath::Exp (Double_t x);  Returns the base-e exponential function of x, which is e raised to the power x. ;  ; Double_t TMath::Factorial (Int_t i);  Computes factorial(n). ;  ; Double_t TMath::FDist (Double_t F, Double_t N, Double_t M);  Computes the density function of F-distribution (probability function, integral of density, is computed in FDistI). ;  ; Double_t TMath::FDistI (Double_t F, Double_t N, Double_t M);  Calculates the cumulative distribution function of F-distribution (see ROOT::Math::fdistribution_cdf). ;  ; Int_t TMath::Finite (Double_t x);  Check if it is finite with",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8h.html:5471,error,error,5471,doc/master/TMath_8h.html,https://root.cern,https://root.cern/doc/master/TMath_8h.html,1,['error'],['error']
Availability,"le_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTGraph::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGraphAsymmErrors::Divide(const TH1* pass, const TH1* total, Option_t* opt = ""cp""); virtual voidTGraph::Draw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTGraph::DrawGraph(Int_t n, const Int_t* x, const Int_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Float_t* x, const Float_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Double_t* x = 0, const Double_t* y = 0, Option_t* option = """"); virtual voidTGraph::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tTGraph::Eval(Double_t x, TSpline* spline = 0, Option_t* option = """") const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGraph::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTGraph::Expand(Int_t newsize); virtual voidTGraph::Expand(Int_t newsize, Int_t step); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TGraph::FindObject(const char* name) const; virtual TObject*TGraph::FindObject(const TObject* obj) const; virtual TFitResultPtrTGraph::Fit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0)MENU ; virtual TFitResultPtrTGraph::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); virtual voidTGraph::FitPanel()MENU ; virtual Double_tTGraph::GetCorrelationFactor() const; virtual Double_tTGraph::GetCovariance() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tTGra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooHist.html:4877,error,error,4877,root/html528/RooHist.html,https://root.cern,https://root.cern/root/html528/RooHist.html,6,['error'],['error']
Availability,"le_t y, Double_t z, Double_t t); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TVirtualGeoTrack*FindTrackWithId(Int_t id) const; TVirtualGeoTrack*GetDaughter(Int_t index) const; virtual Int_tGetDaughterId(Int_t index) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const Double_t*GetFirstPoint() const; virtual const char*TObject::GetIconName() const; Int_tGetId() const; const Double_t*GetLastPoint() const; Int_tGetLastPoint(Double_t& x, Double_t& y, Double_t& z, Double_t& t) const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerCol",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualGeoTrack.html:2043,error,error,2043,root/html528/TVirtualGeoTrack.html,https://root.cern,https://root.cern/root/html528/TVirtualGeoTrack.html,6,['error'],['error']
Availability,"le_t* amplitudesY1). GETTER FUNCTION. This function gets the amplitudes of fitted 2D peaks and 1D ridges; -amplitudes - gets vector of amplitudes of 2D peaks; -amplitudesX1 - gets vector of amplitudes of 1D ridges in x direction; -amplitudesY1 - gets vector of amplitudes of 1D ridges in y direction. void GetAmplitudeErrors(Double_t* amplitudeErrors, Double_t* amplitudeErrorsX1, Double_t* amplitudeErrorsY1). GETTER FUNCTION. This function gets the amplitudes of fitted 2D peaks and 1D ridges; -amplitudeErrors - gets vector of amplitudes errors of 2D peaks; -amplitudeErrorsX1 - gets vector of amplitudes errors of 1D ridges in x direction; -amplitudesErrorY1 - gets vector of amplitudes errors of 1D ridges in y direction. void GetVolumes(Double_t* volumes). GETTER FUNCTION. This function gets the volumes of fitted 2D peaks; -volumes - gets vector of volumes of 2D peaks. void GetVolumeErrors(Double_t* volumeErrors). GETTER FUNCTION. This function gets errors of the volumes of fitted 2D peaks; -volumeErrors - gets vector of volumes errors of 2D peaks. void GetSigmaX(Double_t& sigmaX, Double_t& sigmaErrX). GETTER FUNCTION. This function gets the sigma x parameter and its error; -sigmaX - gets the fitted value of sigma x parameter; -sigmaErrX - gets error value of sigma x parameter. void GetSigmaY(Double_t& sigmaY, Double_t& sigmaErrY). GETTER FUNCTION. This function gets the sigma y parameter and its error; -sigmaY - gets the fitted value of sigma y parameter; -sigmaErrY - gets error value of sigma y parameter. void GetRo(Double_t& ro, Double_t& roErr). GETTER FUNCTION. This function gets the ro parameter and its error; -ro - gets the fitted value of ro parameter; -roErr - gets error value of ro parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error valu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum2Fit.html:71198,error,errors,71198,root/html602/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html602/TSpectrum2Fit.html,4,['error'],['errors']
Availability,"le_t* dir, Double_t dz, Double_t r1, Double_t r2, Double_t& b, Double_t& delta); static Double_tDistToCons(Double_t* point, Double_t* dir, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Double_t phi1, Double_t phi2); static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*TGeoCone::GetAxisName(Int_t iaxis) const; virtual Double_tGetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidGetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tGetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; virtual Double_tTGeoBBox::GetDY() const; virtual Double_tTGeoCone::GetDz() const; virtual Double_tTGeoBBox::GetDZ() const; virtual Double_tTGeoBBox::GetFacetArea(Int_t index = 0) const; virtual Int_tTGeoBBox::GetFittingBox(const TGeoBBox",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoConeSeg.html:4051,error,error,4051,root/html528/TGeoConeSeg.html,https://root.cern,https://root.cern/root/html528/TGeoConeSeg.html,3,['error'],['error']
Availability,"le_t* ez = 0, Option_t* option = """"); TGraph2DErrors constructor with doubles vectors as input. ~TGraph2DErrors(); TGraph2DErrors destructor. TGraph2DErrors(const TGraph2DErrors& ); Copy constructor.; Copy everything except list of functions. TGraph2DErrors & operator=(const TGraph2DErrors& ); Assignment operator; Copy everything except list of functions. Double_t GetErrorX(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorZ(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetXmaxE() const; Returns the X maximum with errors. Double_t GetXminE() const; Returns the X minimum with errors. Double_t GetYmaxE() const; Returns the Y maximum with errors. Double_t GetYminE() const; Returns the Y minimum with errors. Double_t GetZmaxE() const; Returns the Z maximum with errors. Double_t GetZminE() const; Returns the Z minimum with errors. void Set(Int_t n); Set number of points in the 2D graph.; Existing coordinates are preserved.; New coordinates above fNpoints are preset to 0. void SetPoint(Int_t i, Double_t x, Double_t y, Double_t z); Set x, y and z values for point number i. void SetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez); Set ex, ey and ez values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. Double_t * GetEZ() const; {return fEZ;}. » Author: Olivier Couet 26/11/2003 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TGraph2DErrors.h,v 1.00 » Last generated: 2015-03-14 16:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraph2DErrors.html:13985,error,errors,13985,root/html534/TGraph2DErrors.html,https://root.cern,https://root.cern/root/html534/TGraph2DErrors.html,2,['error'],['errors']
Availability,"le_t* ez = 0, Option_t* option = """"); TGraph2DErrors constructor with doubles vectors as input. ~TGraph2DErrors(); TGraph2DErrors destructor. TGraph2DErrors(const TGraph2DErrors& ); Copy constructor.; Copy everything except list of functions. TGraph2DErrors & operator=(const TGraph2DErrors& ); Assignment operator; Copy everything except list of functions. Double_t GetErrorX(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorZ(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetXmaxE() const; Returns the X maximum with errors. Double_t GetXminE() const; Returns the X minimum with errors. Double_t GetYmaxE() const; Returns the Y maximum with errors. Double_t GetYminE() const; Returns the Y minimum with errors. Double_t GetZmaxE() const; Returns the Z maximum with errors. Double_t GetZminE() const; Returns the Z minimum with errors. void Set(Int_t n); Set number of points in the 2D graph.; Existing coordinates are preserved.; New coordinates above fNpoints are preset to 0. void SetPoint(Int_t i, Double_t x, Double_t y, Double_t z); Set x, y and z values for point number i. void SetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez); Set ex, ey and ez values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. Double_t * GetEZ() const; {return fEZ;}. » Author: Olivier Couet 26/11/2003 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TGraph2DErrors.h,v 1.00 » Last generated: 2015-06-02 16:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGraph2DErrors.html:14462,error,errors,14462,root/html604/TGraph2DErrors.html,https://root.cern,https://root.cern/root/html604/TGraph2DErrors.html,2,['error'],['errors']
Availability,"le_t* ez = 0, Option_t* option = """"); TGraph2DErrors constructor with doubles vectors as input. ~TGraph2DErrors(); TGraph2DErrors destructor. TGraph2DErrors(const TGraph2DErrors& ); Copy constructor.; Copy everything except list of functions. TGraph2DErrors & operator=(const TGraph2DErrors& ); Assignment operator; Copy everything except list of functions. Double_t GetErrorX(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorZ(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetXmaxE() const; Returns the X maximum with errors. Double_t GetXminE() const; Returns the X minimum with errors. Double_t GetYmaxE() const; Returns the Y maximum with errors. Double_t GetYminE() const; Returns the Y minimum with errors. Double_t GetZmaxE() const; Returns the Z maximum with errors. Double_t GetZminE() const; Returns the Z minimum with errors. void Set(Int_t n); Set number of points in the 2D graph.; Existing coordinates are preserved.; New coordinates above fNpoints are preset to 0. void SetPoint(Int_t i, Double_t x, Double_t y, Double_t z); Set x, y and z values for point number i. void SetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez); Set ex, ey and ez values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. Double_t * GetEZ() const; {return fEZ;}. » Author: Olivier Couet 26/11/2003 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TGraph2DErrors.h,v 1.00 » Last generated: 2015-06-30 15:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraph2DErrors.html:14462,error,errors,14462,root/html602/TGraph2DErrors.html,https://root.cern,https://root.cern/root/html602/TGraph2DErrors.html,2,['error'],['errors']
Availability,"le_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t i) const; Get high error on X. Double_t GetErrorXlow(Int_t i) const; Get low error on X. Double_t GetErrorYhigh(Int_t i) const; Get high error on Y. Double_t GetErrorYlow(Int_t i) const; Get low error on Y. Int_t Merge(TCollection* list); Adds all graphs with asymmetric errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point number i. void SetPointEXlow(Int_t i, Double_t exl); Set EXlow for point i. void SetPointEXhigh(Int_t i, Double_t exh); Set EXhigh for point i. void SetPointEYlow(Int_t i, Double_t eyl); Set EYlow for point i. void SetPointEYhigh(Int_t i,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphAsymmErrors.html:23306,error,error,23306,root/html602/TGraphAsymmErrors.html,https://root.cern,https://root.cern/root/html602/TGraphAsymmErrors.html,2,['error'],['error']
Availability,"le_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t i) const; Get high error on X. Double_t GetErrorXlow(Int_t i) const; Get low error on X. Double_t GetErrorYhigh(Int_t i) const; Get high error on Y. Double_t GetErrorYlow(Int_t i) const; Get low error on Y. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point number i. void SetPointEXlow(Int_t i, Double_t exl); Set EXlow for point i. void SetPointEXhigh(Int_t i, Double_t exh); Set EXhigh for point i. void SetPointEYlow(Int_t i, Double_t eyl); Set EYlow for point i. void SetPointEYhigh(Int_t i, Double_t eyh); Set EYhigh for point i. void Streamer(TBuffer& ); Stream an object of class TGraphAsymmErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t** Alloca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphAsymmErrors.html:22817,error,error,22817,root/html534/TGraphAsymmErrors.html,https://root.cern,https://root.cern/root/html534/TGraphAsymmErrors.html,1,['error'],['error']
Availability,"le_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by multiplication of h1 by h2. ; this = (c1*h1)*(c2*h2); If errors of this are available (TH1::Sumw2), errors are recalculated. Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 6160 of file TH1.cxx. ◆ Multiply() [3/3]. Bool_t TH1::Multiply ; (; TF1 * ; f1, . Double_t ; c1 = 1 . ). virtual . Performs the operation: ; this = this*c1*f1; If errors are defined (see TH1::Sumw2), errors are also recalculated.; Only bins inside the function range are recomputed. IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 6049 of file TH1.cxx. ◆ operator=(). TH1 & TH1::operator= ; (; const TH1 & ; ). privatedelete . ◆ Paint(). void TH1::Paint ; (; Option_t * ; option = """"). overridevirtual . Control routine to paint any kind of histograms. ; This function is automatically called by TCanvas::Update. (see TH1::Draw for the list of options) ; Reimplemented from TObject.; Definition at line 6206 of file TH1.cxx. ◆ Print(). void TH1::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print some global quantities for this histogram. ; Parameters. [in]option; ""base"" is given, number of bins and ranges are also printed; ""range"" is given, bin contents and errors are also printed for all bins in the current range (defaul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:192417,error,errors,192417,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['errors']
Availability,"le_t ; xclipl, . Double_t ; xclipr, . Double_t ; yclipb, . Double_t ; yclipt . ). protected . Returns kTRUE if the input polygon (bn, x, y) is intersecting with the input rectangle (xclipl, xclipr, yclipb, yclipt) ; Definition at line 1205 of file TH2Poly.cxx. ◆ Merge(). Long64_t TH2Poly::Merge ; (; TCollection * ; coll). overridevirtual . Merge TH2Polys Given the special nature of the TH2Poly, the merge is implemented in terms of subsequent TH2Poly::Add calls. ; Reimplemented from TH1.; Reimplemented in TProfile2Poly.; Definition at line 1319 of file TH2Poly.cxx. ◆ Multiply(). Bool_t TH2Poly::Multiply ; (; TF1 * ; , . Double_t ;  . ). overridevirtual . NOT IMPLEMENTED for TH2Poly. ; Reimplemented from TH1.; Definition at line 1721 of file TH2Poly.cxx. ◆ operator=(). TH2Poly & TH2Poly::operator= ; (; const TH2Poly & ; rhs). Assignment operator. ; Definition at line 203 of file TH2Poly.cxx. ◆ Reset(). void TH2Poly::Reset ; (; Option_t * ; option). overridevirtual . Reset this histogram: contents, errors, etc. ; Reimplemented from TH2.; Reimplemented in TProfile2Poly.; Definition at line 591 of file TH2Poly.cxx. ◆ RetrieveBinContent(). Double_t TH2Poly::RetrieveBinContent ; (; Int_t ; bin); const. inlineoverrideprotectedvirtual . Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented from TH1.; Definition at line 177 of file TH2Poly.h. ◆ SavePrimitive(). void TH2Poly::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TH1.; Definition at line 1333 of file TH2Poly.cxx. ◆ Scale(). void TH2Poly::Scale ; (; Double_t ; c1 = 1, . Option_t * ; option = """" . ). overridevirtual . Multiply this histogram by a constant c1. ; Reimplemented from TH1.; Definition at line 1393 of file TH2Poly.cxx. ◆ SetBinContent() [1/3]. void TH2Poly::SetBinContent ; (; Int_t ; bin, . Double_t ; content . ). overrid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2Poly.html:84012,error,errors,84012,doc/master/classTH2Poly.html,https://root.cern,https://root.cern/doc/master/classTH2Poly.html,1,['error'],['errors']
Availability,"lean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_t_errorCountNumber of errors remaining to print; static Bool_t_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsPdf.html:42916,error,errors,42916,root/html534/RooAbsPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsPdf.html,1,['error'],['errors']
Availability,"leanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static RooNumIntConfig&defaultConfig(); virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptiondefaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; Double_tepsAbs() const; Double_tepsRel() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const RooArgSet&getConfigSection(const char* name) const; RooArgSet&getConfigSection(const char* name); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumIntConfig.html:2000,error,error,2000,root/html526/RooNumIntConfig.html,https://root.cern,https://root.cern/root/html526/RooNumIntConfig.html,7,['error'],['error']
Availability,"lear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidCustomize(RooWorkspace* proto, const char* pdfNameChar, map<string,string> renameMap); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEditSyst(RooWorkspace* proto, const char* pdfNameChar, map<string,double> gammaSyst, map<string,double> uniformSyst, map<string,double> logNormSyst); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; stringFilePrefixStr(string); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFitModel(RooWorkspace*, string, string, string, bool = false); voidFormatFrameForLikelihood(RooPlot* frame, string XTitle = std::string(""#sigma / #sigma_{SM}""), string YTitle = std::string(""-log likelihood"")); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__HistoToWorkspaceFactory.html:2299,error,error,2299,root/html602/RooStats__HistFactory__HistoToWorkspaceFactory.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__HistoToWorkspaceFactory.html,2,['error'],['error']
Availability,"lear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidCustomize(RooWorkspace* proto, const char* pdfNameChar, map<string,string> renameMap); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEditSyst(RooWorkspace* proto, const char* pdfNameChar, map<string,double> gammaSyst, map<string,double> uniformSyst, map<string,double> logNormSyst); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; stringFilePrefixStr(string); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFitModel(RooWorkspace*, string, string, string, bool = false); voidFormatFrameForLikelihood(RooPlot* frame, string XTitle = string(""#sigma / #sigma_{SM}""), string YTitle = string(""-log likelihood"")); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HistFactory__HistoToWorkspaceFactory.html:2299,error,error,2299,root/html528/RooStats__HistFactory__HistoToWorkspaceFactory.html,https://root.cern,https://root.cern/root/html528/RooStats__HistFactory__HistoToWorkspaceFactory.html,4,['error'],['error']
Availability,"leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoordSelect.html:11505,error,error,11505,doc/master/classTParallelCoordSelect.html,https://root.cern,https://root.cern/doc/master/classTParallelCoordSelect.html,4,['error'],['error']
Availability,"leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCollection.html:7869,error,error,7869,doc/v632/classTCollection.html,https://root.cern,https://root.cern/doc/v632/classTCollection.html,30,['error'],['error']
Availability,"leconst char * TitleDefinition TXMLSetup.cxx:68; mTMarker mDefinition textangle.C:8; ; RooDataSet::pxData[x,w] = 1000 entries; RooDataSet::pxData[x,weight:w] = 1000 entries (43238.9 weighted); [#1] INFO:Fitting -- RooAbsPdf::fitTo(p2_over_p2_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#0] WARNING:InputArguments -- RooAbsPdf::fitTo(p2): WARNING: a likelihood fit is requested of what appears to be weighted data.; While the estimated values of the parameters will always be calculated taking the weights into account,; there are multiple ways to estimate the errors of the parameters. You are advised to make an; explicit choice for the error calculation:; - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix; (error will be proportional to the number of events in MC).; - Or provide SumW2Error(false), to return errors from original HESSE error matrix; (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).; - Or provide AsymptoticError(true), to use the asymptotically correct expression; (for details see https://arxiv.org/abs/1911.01303).""; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_p2_over_p2_Int[x]_pxData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(p2_over_p2_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_p2_over_p2_Int[x]_pxData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(p2) Calculat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf403__weightedevts_8C.html:10421,error,errors,10421,doc/master/rf403__weightedevts_8C.html,https://root.cern,https://root.cern/doc/master/rf403__weightedevts_8C.html,2,['error'],"['error', 'errors']"
Availability,"lectWindow(Int_t wid); Select window to which subsequent output is directed. void SetCharacterUp(Float_t chupx, Float_t chupy); Set character up vector. void SetClipOFF(Int_t wid); Turn off the clipping for the window wid. void SetClipRegion(Int_t wid, Int_t x, Int_t y, UInt_t w, UInt_t h); Set clipping region for the window wid.; wid : Window indentifier; x,y : origin of clipping rectangle; w,h : size of clipping rectangle;. void SetColor(GC gc, Int_t ci); Set the foreground color in GC. void SetCursor(Int_t win, ECursor cursor); Set the cursor. void SetDoubleBuffer(Int_t wid, Int_t mode); Set the double buffer on/off on window wid.; wid : Window identifier.; 999 means all the opened windows.; mode : 1 double buffer is on; 0 double buffer is off. void SetDoubleBufferOFF(); Turn double buffer mode off. void SetDoubleBufferON(); Turn double buffer mode on. void SetDrawMode(TVirtualX::EDrawMode mode); Set the drawing mode.; mode : drawing mode; mode=1 copy; mode=2 xor; mode=3 invert; mode=4 set the suitable mode for cursor echo according to; the vendor. void SetFillColor(Color_t cindex); Set color index for fill areas. void SetFillStyle(Style_t style); Set fill area style.; fstyle : compound fill area interior style; fstyle = 1000*interiorstyle + styleindex. void SetFillStyleIndex(Int_t style, Int_t fasi); Set fill area style index. void SetInput(Int_t inp); Set input on or off. void SetLineColor(Color_t cindex); Set color index for lines. void SetLineType(Int_t n, Int_t* dash); Set line type.; n : length of dash list; dash(n) : dash segment lengths. if n <= 0 use solid lines; if n > 0 use dashed lines described by DASH(N); e.g. N=4,DASH=(6,3,1,3) gives a dashed-dotted line with dash length 6; and a gap of 7 between dashes. void SetLineStyle(Style_t linestyle); Set line style. void SetLineWidth(Width_t width); Set line width.; width : line width in pixels. void SetMarkerColor(Color_t cindex); Set color index for markers. void SetMarkerSize(Float_t markersize); Set mark",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGX11.html:32398,echo,echo,32398,root/html528/TGX11.html,https://root.cern,https://root.cern/root/html528/TGX11.html,4,['echo'],['echo']
Availability,"lected input is incomplete.; 154 virtual Int_t GetMore() const = 0;; 155 virtual TClass *GenerateTClass(const char *classname, Bool_t emulation, Bool_t silent = kFALSE) = 0;; 156 virtual TClass *GenerateTClass(ClassInfo_t *classinfo, Bool_t silent = kFALSE) = 0;; 157 virtual Int_t GenerateDictionary(const char *classes, const char *includes = nullptr, const char *options = nullptr) = 0;; 158 virtual char *GetPrompt() = 0;; 159 virtual const char *GetSharedLibs() = 0;; 160 virtual const char *GetClassSharedLibs(const char *cls, bool skipCore = true) = 0;; 161 virtual const char *GetSharedLibDeps(const char *lib, bool tryDyld = false) = 0;; 162 virtual const char *GetIncludePath() = 0;; 163 virtual const char *GetSTLIncludePath() const { return """"; }; 164 virtual TObjArray *GetRootMapFiles() const = 0;; 165 virtual void Initialize() = 0;; 166 virtual void ShutDown() = 0;; 167 virtual void InspectMembers(TMemberInspector&, const void* obj, const TClass* cl, Bool_t isTransient) = 0;; 168 virtual Bool_t IsLoaded(const char *filename) const = 0;; 169 virtual Bool_t IsLibraryLoaded(const char *libname) const = 0;; 170 virtual Bool_t HasPCMForLibrary(const char *libname) const = 0;; 171 virtual Int_t Load(const char *filenam, Bool_t system = kFALSE) = 0;; 172 virtual void LoadMacro(const char *filename, EErrorCode *error = nullptr) = 0;; 173 virtual Int_t LoadLibraryMap(const char *rootmapfile = nullptr) = 0;; 174 virtual Int_t RescanLibraryMap() = 0;; 175 virtual Int_t ReloadAllSharedLibraryMaps() = 0;; 176 virtual Int_t UnloadAllSharedLibraryMaps() = 0;; 177 virtual Int_t UnloadLibraryMap(const char *library) = 0;; 178 virtual Longptr_t ProcessLine(const char *line, EErrorCode *error = nullptr) = 0;; 179 virtual Longptr_t ProcessLineSynch(const char *line, EErrorCode *error = nullptr) = 0;; 180 virtual void PrintIntro() = 0;; 181 virtual bool RegisterPrebuiltModulePath(const std::string& FullPath,; 182 const std::string& ModuleMapName = ""module.modulemap"") const = 0;; 183",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TInterpreter_8h_source.html:6408,error,error,6408,doc/master/TInterpreter_8h_source.html,https://root.cern,https://root.cern/doc/master/TInterpreter_8h_source.html,3,['error'],['error']
Availability,"lected.; H1FitChisquare; calculates the chisquare between the user fitting function (gaussian, polynomial,; user defined,etc) and the data for given values of the parameters.; It is the task of MINUIT to find those values of the parameters; which give the lowest value of chisquare. Basic concepts - The transformation for parameters with limits. For variable parameters with limits, MINUIT uses the following; transformation:. P = arcsin(2((P -a)/(b- a))-1) P = a+((b- a)/(2))(sinP +1); int ext ext int. so that the internal value P can take on any value, while the external; int; value P can take on values only between the lower limit a and the; ext; upper limit b. Since the transformation is necessarily non-linear, it; would transform a nice linear problem into a nasty non-linear one, which; is the reason why limits should be avoided if not necessary. In addition,; the transformation does require some computer time, so it slows down the; computation a little bit, and more importantly, it introduces additional; numerical inaccuracy into the problem in addition to what is introduced in; the numerical calculation of the FCN value. The effects of; non-linearity and numerical roundoff both become more important as the; external value gets closer to one of the limits (expressed as the distance; to nearest limit divided by distance between limits). The user must; therefore be aware of the fact that, for example, if he puts limits of; (0,10^10 ) on a parameter, then the values 0.0 and 1. 0 will be; indistinguishable to the accuracy of most machines. The transformation also affects the parameter error matrix, of course, so; MINUIT does a transformation of the error matrix (and the ``parabolic''; parameter errors) when there are parameter limits. Users should however; realize that the transformation is only a linear approximation, and that; it cannot give a meaningful result if one or more parameters is very close; to a limit, where partial Pext /partial Pint #0. Therefore, it is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:3439,down,down,3439,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,4,['down'],['down']
Availability,"lected.; H1FitChisquare; calculates the chisquare between the user fitting function (gaussian, polynomial,; user defined,etc) and the data for given values of the parameters.; It is the task of MINUIT to find those values of the parameters; which give the lowest value of chisquare. Basic concepts - The transformation for parameters with limits. For variable parameters with limits, MINUIT uses the following; transformation:. P = arcsin(2((P -a)/(b- a))-1) P = a+((b- a)/(2))(sinP +1); int ext ext int. so that the internal value P can take on any value, while the external; int; value P can take on values only between the lower limit a and the; ext; upper limit b. Since the transformation is necessarily non-linear, it; would transform a nice linear problem into a nasty non-linear one, which; is the reason why limits should be avoided if not necessary. In addition,; the transformation does require some computer time, so it slows down the; computation a little bit, and more importantly, it introduces additional; numerical inaccuracy into the problem in addition to what is introduced in; the numerical calculation of the FCN value. The effects of; non-linearity and numerical roundoff both become more important as the; external value gets closer to one of the limits (expressed as the distance; to nearest limit divided by distance between limits). The user must; therefore be aware of the fact that, for example, if they put limits of; (0,10^10 ) on a parameter, then the values 0.0 and 1. 0 will be; indistinguishable to the accuracy of most machines. The transformation also affects the parameter error matrix, of course, so; MINUIT does a transformation of the error matrix (and the ``parabolic''; parameter errors) when there are parameter limits. Users should however; realize that the transformation is only a linear approximation, and that; it cannot give a meaningful result if one or more parameters is very close; to a limit, where partial Pext /partial Pint #0. Therefore, it i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMinuit.html:3439,down,down,3439,root/html602/TMinuit.html,https://root.cern,https://root.cern/root/html602/TMinuit.html,2,['down'],['down']
Availability,"lection to contain elements of the type requested (or a derived class). Any deviation from this expectation will only be caught/reported by an assert in debug builds.; This is best used with a TClonesArray, for other cases prefered TRangeDynCast.; The typical use is: for(auto bcl : TRangeStaticCast<TBaseClass>( *tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; for(auto bcl : TRangeStaticCast<TBaseClass>( tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; a#define a(i)Definition RSha256.hxx:99; ROOT::Detail::TRangeCastDefinition TCollection.h:311; TBaseClassEach class (see TClass) has a linked list of its base class(es).Definition TBaseClass.h:33; Template Parameters. TThe new type to convert to. . Definition at line 337 of file TCollection.h. Function Documentation. ◆ HasBeenDeleted(). R__ALWAYS_INLINE bool ROOT::Detail::HasBeenDeleted ; (; const TObject * ; obj). Check if the TObject's memory has been deleted. ; WarningThis should be only used for error mitigation as the answer is only sometimes correct. It actually just checks whether the object has been deleted, so this will falsely return true for an object that has been destructed but its memory has not been deleted. This will return an undefined value if the memory is re-used between the deletion and the check. i.e. This is useful to prevent a segmentation fault in case where the problem can be detected when the deletion and the usage are 'close-by' . In enviroment where delete taints (changes) the memory, this function always returns false as the marker left by ~TObject will be overwritten. ; Parameters. objThe memory to check . Returnstrue if the object has been destructed and it can be inferred that it has been deleted ; Definition at line 402 of file TObject.h. ◆ HasCallOp() [1/2]. template<typename T > . constexpr bool ROOT::Detail::HasCallOp ; (; char ; ). constexpr . Definition at line 32 of file TypeTraits.hxx. ◆ HasCallOp() [2/2]. template<typename T > . constexpr auto ROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Detail.html:4402,error,error,4402,doc/master/namespaceROOT_1_1Detail.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail.html,2,['error'],['error']
Availability,"lection' field :; A, allfiles: process all files; D, staged: process only staged (on Disk) files (if 'allfiles:' is not specified; the default is to process only files marked as non-staged); 'pre-action field':; O, open: open the files marked as staged when processing only files; marked as non-staged; T, touch: open and touch the files marked as staged when processing; only files marked as non-staged; I, nostagedcheck: do not check the actual stage status on selected files. 'process' field:; N, noaction: do nothing on the selected files; P, fullproc: open the selected files and extract the meta information; L, locateonly: only locate the selected files; S, stageonly: issue a stage request for the selected files not yet staged. 'auxiliary' field; V, verbose: notify the actions. Returns 0 on success, -1 if any failure occurs. Int_t ScanDataSet(const char* uri, UInt_t option = kReopen | kDebug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). void GetQuota(const char* group, const char* user, const char* dsName, TFileCollection* dataset). Gets quota information from this dataset. void ShowQuota(const char* opt); Display quota information. void PrintUsedSpace(). Prints the quota. void MonitorUsedSpace(TVirtualMonitoringWriter* monitoring). Log info to the monitoring server. Long64_t GetGroupUsed(const char* group). Returns the used space of that group. Long64_t GetGroupQuota(const char* group). returns the quota a group is allowed to have. void UpdateUsedSpace(); updates the used space maps. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings, if needed.; Returns 0 on success, -1 on failure. Int_t NotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); Save into t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDataSetManager.html:15060,failure,failure,15060,root/html602/TDataSetManager.html,https://root.cern,https://root.cern/root/html602/TDataSetManager.html,2,['failure'],['failure']
Availability,"lection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTCollection::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTCollection::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TCollection::FindObject(const char* name) const; virtual TObject*TCollection::FindObject(const TObject* obj) const; virtual TObject*First() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TCollection::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSeqCollection.html:2416,error,error,2416,root/html602/TSeqCollection.html,https://root.cern,https://root.cern/root/html602/TSeqCollection.html,2,['error'],['error']
Availability,"lection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObjArray::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; virtual voidTObjArray::Compress(); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObjArray::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObjArray::Expand(Int_t newSize); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObjArray::FindObject(const char* name) const; virtual TObject*TObjArray::FindObject(const TObject* obj) const; virtual TObject*TObjArray::First() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); TGeoNavigator*GetCurrentNavigator() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTObjArray::GetEntries() const; Int_tTObjArray::GetEntriesFast() const; virtual const char*TObject::GetIconName() const; virtual Int_tTObjArray::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; TObject**TObjArray::GetO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoNavigatorArray.html:2940,error,error,2940,root/html532/TGeoNavigatorArray.html,https://root.cern,https://root.cern/root/html532/TGeoNavigatorArray.html,2,['error'],['error']
Availability,"lection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObjArray::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; virtual voidTObjArray::Compress(); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObjArray::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObjArray::Expand(Int_t newSize); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObjArray::FindObject(const char* name) const; virtual TObject*TObjArray::FindObject(const TObject* obj) const; virtual TObject*TObjArray::First() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTObjArray::GetEntries() const; Int_tTObjArray::GetEntriesFast() const; virtual const char*TObject::GetIconName() const; virtual Int_tTObjArray::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; TObject**TObjArray::GetObjectRef() const; virtual TObject**TObjArra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__TSchemaMatch.html:2350,error,error,2350,root/html532/ROOT__TSchemaMatch.html,https://root.cern,https://root.cern/root/html532/ROOT__TSchemaMatch.html,1,['error'],['error']
Availability,"lection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObjArray::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; virtual voidTObjArray::Compress(); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObjArray::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObjArray::Expand(Int_t newSize); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObjArray::FindObject(const char* name) const; virtual TObject*TObjArray::FindObject(const TObject* obj) const; virtual TObject*TObjArray::First() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTObjArray::GetEntries() const; Int_tTObjArray::GetEntriesFast() const; virtual const char*TObject::GetIconName() const; virtual Int_tTObjArray::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TObjArray::GetObjectRef(const TObject* obj) const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__TSchemaMatch.html:2350,error,error,2350,root/html530/ROOT__TSchemaMatch.html,https://root.cern,https://root.cern/root/html530/ROOT__TSchemaMatch.html,1,['error'],['error']
Availability,"lectionProxy*fCollProxy! Collection proxy; TStringfContNameClass name of referenced object; Int_tfIDElement serial number in the streamer info; TIndArrayfInd! Indices; TClass*fIndArrayCl! Class of the ind array; TStreamerInfo*fInfo! The streamer info; char*fObject! Pointer to object at address or the; TBranch*fParent! Parent of this branch. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBranchSTL(); Default constructor. TBranchSTL(TTree* tree, const char* name, TVirtualCollectionProxy* collProxy, Int_t buffsize, Int_t splitlevel); Normal constructor, called from TTree. TBranchSTL(TBranch* parent, const char* name, TVirtualCollectionProxy* collProxy, Int_t buffsize, Int_t splitlevel, TStreamerInfo* info, Int_t id); Normal constructor, called from another branch. ~TBranchSTL(); destructor. void Browse(TBrowser* b); browse a STL branch. Int_t Fill(). Cleanup after revious fill. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0). Check if we should be doing this at all. Int_t GetExpectedType(TClass*& clptr, EDataType& type); Fill expectedClass and expectedType with information on the data type of the; object/values contained in this branch (and thus the type of pointers; expected to be passed to Set[Branch]Address; return 0 in case of success and > 0 in case of failure. TStreamerInfo* GetInfo() const. Check if we don't have the streamer info. Bool_t IsFolder() const; branch declared folder if at least one entry. void Print(Option_t* ) const; Print the branch parameters. void ReadLeavesImpl(TBuffer& b); TO BE DOCUMENTED. void FillLeavesImpl(TBuffer& b); TO BE DOCUMENTED. void SetAddress(void* addr). We are the top level branch. TBranchSTL(). const char * GetClassName() const; { return fClassName.Data(); }. » Last changed: root/tree:$Id$ » Last generated: 2015-06-02 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TBranchSTL.html:15455,failure,failure,15455,root/html604/TBranchSTL.html,https://root.cern,https://root.cern/root/html604/TBranchSTL.html,1,['failure'],['failure']
Availability,"lectionProxy*fCollProxy! Collection proxy; TStringfContNameClass name of referenced object; Int_tfIDElement serial number in the streamer info; TIndArrayfInd! Indices; TClass*fIndArrayCl! Class of the ind array; TStreamerInfo*fInfo! The streamer info; char*fObject! Pointer to object at address or the; TBranch*fParent! Parent of this branch. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBranchSTL(); Default constructor. TBranchSTL(TTree* tree, const char* name, TVirtualCollectionProxy* collProxy, Int_t buffsize, Int_t splitlevel); Normal constructor, called from TTree. TBranchSTL(TBranch* parent, const char* name, TVirtualCollectionProxy* collProxy, Int_t buffsize, Int_t splitlevel, TStreamerInfo* info, Int_t id); Normal constructor, called from another branch. ~TBranchSTL(); destructor. void Browse(TBrowser* b); browse a STL branch. Int_t Fill(). Cleanup after revious fill. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0). Check if we should be doing this at all. Int_t GetExpectedType(TClass*& clptr, EDataType& type); Fill expectedClass and expectedType with information on the data type of the; object/values contained in this branch (and thus the type of pointers; expected to be passed to Set[Branch]Address; return 0 in case of success and > 0 in case of failure. TStreamerInfo* GetInfo() const. Check if we don't have the streamer info. Bool_t IsFolder() const; branch declared folder if at least one entry. void Print(Option_t* ) const; Print the branch parameters. void ReadLeavesImpl(TBuffer& b); TO BE DOCUMENTED. void FillLeavesImpl(TBuffer& b); TO BE DOCUMENTED. void SetAddress(void* addr). We are the top level branch. TBranchSTL(). const char * GetClassName() const; { return fClassName.Data(); }. » Last changed: root/tree:$Id$ » Last generated: 2015-06-30 14:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBranchSTL.html:15455,failure,failure,15455,root/html602/TBranchSTL.html,https://root.cern,https://root.cern/root/html602/TBranchSTL.html,1,['failure'],['failure']
Availability,"lector found in h1analysis.C; The main features of this facility are:. on-demand loading of branches; ability to use the 'branchname' as if it was a data member; protection against array out-of-bound; ability to use the branch data as object (when the user code is available). See TTree::MakeProxy for more details. Making a Profile histogram; In case of a 2-Dim expression, one can generate a TProfile histogram instead of a TH2F histogram by specifying option=prof or option=profs or option=profi or option=profg ; the trailing letter select the way the bin error are computed, See TProfile2D::SetErrorOption for details on the differences. The option=prof is automatically selected in case of y:x>>pf where pf is an existing TProfile histogram. Making a 2D Profile histogram; In case of a 3-Dim expression, one can generate a TProfile2D histogram instead of a TH3F histogram by specifying option=prof or option=profs. or option=profi or option=profg ; the trailing letter select the way the bin error are computed, See TProfile2D::SetErrorOption for details on the differences. The option=prof is automatically selected in case of z:y:x>>pf where pf is an existing TProfile2D histogram. Making a 5D plot using GL; If option GL5D is specified together with 5 variables, a 5D plot is drawn using OpenGL. See $ROOTSYS/tutorials/tree/staff.C as example. Making a parallel coordinates plot; In case of a 2-Dim or more expression with the option=para, one can generate a parallel coordinates plot. With that option, the number of dimensions is arbitrary. Giving more than 4 variables without the option=para or option=candle or option=goff will produce an error. Making a candle sticks chart; In case of a 2-Dim or more expression with the option=candle, one can generate a candle sticks chart. With that option, the number of dimensions is arbitrary. Giving more than 4 variables without the option=para or option=candle or option=goff will produce an error. Normalizing the output histogram to 1; When",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:128881,error,error,128881,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,2,['error'],['error']
Availability,"lector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTSelectorDraw::Begin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Int_tTSelectorDraw::GetAction() const; virtual Bool_tTSelectorDraw::GetCleanElist() const; TEvePointSelectorConsumer*GetConsumer() const; virtual Int_tTSelectorDraw::GetDimension() const; virtual Long64_tTSelectorDraw::GetDrawFlag() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; Int_tTSelectorDraw::GetMultiplicity() const; virtual const char*TObject::GetName() const; virtual Int_tTSelectorDraw::GetNfill() const; TObject*TSele",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEvePointSelector.html:1819,error,error,1819,root/html528/TEvePointSelector.html,https://root.cern,https://root.cern/root/html528/TEvePointSelector.html,3,['error'],['error']
Availability,"lector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTSelectorDraw::Begin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Int_tTSelectorDraw::GetAction() const; virtual Bool_tTSelectorDraw::GetCleanElist() const; TEvePointSelectorConsumer*GetConsumer() const; virtual Int_tTSelectorDraw::GetDimension() const; virtual Long64_tTSelectorDraw::GetDrawFlag() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; Int_tTSelectorDraw::GetMultiplicity() const; virtual const char*TObject::GetName() const; virtual Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEvePointSelector.html:1819,error,error,1819,root/html534/TEvePointSelector.html,https://root.cern,https://root.cern/root/html534/TEvePointSelector.html,3,['error'],['error']
Availability,"lector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTSelectorDraw::Begin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Int_tTSelectorDraw::GetAction() const; virtual Bool_tTSelectorDraw::GetCleanElist() const; virtual Int_tTSelectorDraw::GetDimension() const; virtual Long64_tTSelectorDraw::GetDrawFlag() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; Int_tTSelectorDraw::GetMultiplicity() const; virtual const char*TObject::GetName() const; virtual Int_tTSelectorDraw::GetNfill() const; TObject*TSelectorDraw::GetObject() const; virtual char*TObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveSelectorToEventList.html:1615,error,error,1615,root/html528/TEveSelectorToEventList.html,https://root.cern,https://root.cern/root/html528/TEveSelectorToEventList.html,3,['error'],['error']
Availability,"lector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTSelectorDraw::Begin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Int_tTSelectorDraw::GetAction() const; virtual Bool_tTSelectorDraw::GetCleanElist() const; virtual Int_tTSelectorDraw::GetDimension() const; virtual Long64_tTSelectorDraw::GetDrawFlag() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; Int_tTSelectorDraw::GetMultiplicity() const; virtual const char*TObject::GetName() const; virtual Int_tTSelectorDraw::GetNfill() const; TObject*TSele",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveSelectorToEventList.html:1615,error,error,1615,root/html534/TEveSelectorToEventList.html,https://root.cern,https://root.cern/root/html534/TEveSelectorToEventList.html,3,['error'],['error']
Availability,"lector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; ClassInfo_t*fClass!; CallFunc_t*fFuncAbort!; CallFunc_t*fFuncBegin!; CallFunc_t*fFuncCut!; CallFunc_t*fFuncFill!; CallFunc_t*fFuncGetAbort!; CallFunc_t*fFuncGetStat!; CallFunc_t*fFuncInit!; CallFunc_t*fFuncInp!; CallFunc_t*fFuncNotif!; CallFunc_t*fFuncObj!; CallFunc_t*fFuncOption!; CallFunc_t*fFuncOut!; CallFunc_t*fFuncProc!; CallFunc_t*fFuncResetAbort!; CallFunc_t*fFuncSlBegin!; CallFunc_t*fFuncSlTerm!; CallFunc_t*fFuncTerm!; CallFunc_t*fFuncVersion!; TList*TSelector::fInputList of objects available during processing; TSelector*fIntSelectorPointer to interpreted selector (if interpreted); Bool_tfIsOwnerTrue if fIntSelector shoudl be deleted when the this object is deleted.; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorCint. Function documentation; TSelectorCint(); Default constructor for a Selector. ~TSelectorCint(); destructor for a Selector. void SetFuncProto(CallFunc_t* cf, ClassInfo_t* cl, const char* fname, const char* argtype, Bool_t required = kTRUE); Set the function prototype. void Build(TSelector* iselector, ClassI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSelectorCint.html:7565,avail,available,7565,root/html602/TSelectorCint.html,https://root.cern,https://root.cern/root/html602/TSelectorCint.html,2,['avail'],['available']
Availability,"lects error messages. ; It provides a Merge() operation allowing it to be used in PROOF to monitor status in the slaves. No messages indicates success. ; Definition at line 32 of file TStatus.h. Public Types; enum  EProcStatus { kNotOk = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TStatus ();  Default constructor. ;  ;  ~TStatus () override;  ; void Add (const char *mesg);  Add an error message. ;  ; void AddInfo (const char *mesg);  Add an info message. ;  ; Int_t GetExitStatus () const;  ; Long_t GetResMemMax (Bool_t master=kFALSE) const;  ; Long_t GetVirtMemMax (Bool_t master=kFALSE) const;  ; TClass * IsA () const override;  ; Bool_t IsOk () const;  ; virtual Int_t Merge (TCollection *list);  PROOF Merge() function. ;  ; const char * NextMesg ();  Return the next message or 0. ;  ; void Print (Option_t *option="""") const override;  Standard print function. ;  ; void Reset ();  Reset the iterator on the messages. ;  ; void SetExitStatus (Int_t est);  ; void SetMemValues (Long_t vmem=-1, Long_t rmem=-1, Bool_t master=kFALSE);  Set max memory values. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TStatus. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStatus.html:1402,error,error,1402,doc/master/classTStatus.html,https://root.cern,https://root.cern/doc/master/classTStatus.html,1,['error'],['error']
Availability,led by Graph2DFitChisquare. ; It returns the error along Y at point i. ; Reimplemented from TGraph2D.; Definition at line 218 of file TGraph2DErrors.cxx. ◆ GetErrorZ(). Double_t TGraph2DErrors::GetErrorZ ; (; Int_t ; i); const. overridevirtual . This function is called by Graph2DFitChisquare. ; It returns the error along Z at point i. ; Reimplemented from TGraph2D.; Definition at line 230 of file TGraph2DErrors.cxx. ◆ GetEX(). Double_t * TGraph2DErrors::GetEX ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 45 of file TGraph2DErrors.h. ◆ GetEY(). Double_t * TGraph2DErrors::GetEY ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 46 of file TGraph2DErrors.h. ◆ GetEZ(). Double_t * TGraph2DErrors::GetEZ ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 47 of file TGraph2DErrors.h. ◆ GetXmaxE(). Double_t TGraph2DErrors::GetXmaxE ; (; ); const. overridevirtual . Returns the X maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 241 of file TGraph2DErrors.cxx. ◆ GetXminE(). Double_t TGraph2DErrors::GetXminE ; (; ); const. overridevirtual . Returns the X minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 252 of file TGraph2DErrors.cxx. ◆ GetYmaxE(). Double_t TGraph2DErrors::GetYmaxE ; (; ); const. overridevirtual . Returns the Y maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 263 of file TGraph2DErrors.cxx. ◆ GetYminE(). Double_t TGraph2DErrors::GetYminE ; (; ); const. overridevirtual . Returns the Y minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 274 of file TGraph2DErrors.cxx. ◆ GetZmaxE(). Double_t TGraph2DErrors::GetZmaxE ; (; ); const. overridevirtual . Returns the Z maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 285 of file TGraph2DErrors.cxx. ◆ GetZminE(). Double_t TGraph2DErrors::GetZminE ; (; ); const. overridevirtual . Returns the Z minimum ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DErrors.html:31570,error,errors,31570,doc/master/classTGraph2DErrors.html,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html,1,['error'],['errors']
Availability,"led by TAxis::FindBin(const char *label); 5316 ; 5317void TH1::LabelsInflate(Option_t *ax); 5318{; 5319 Int_t iaxis = AxisChoice(ax);; 5320 TAxis *axis = nullptr;; 5321 if (iaxis == 1) axis = GetXaxis();; 5322 if (iaxis == 2) axis = GetYaxis();; 5323 if (iaxis == 3) axis = GetZaxis();; 5324 if (!axis) return;; 5325 ; 5326 TH1 *hold = (TH1*)IsA()->New();; 5327 hold->SetDirectory(nullptr);; 5328 Copy(*hold);; 5329 hold->ResetBit(kMustCleanup);; 5330 ; 5331 Bool_t timedisp = axis->GetTimeDisplay();; 5332 Int_t nbins = axis->GetNbins();; 5333 Double_t xmin = axis->GetXmin();; 5334 Double_t xmax = axis->GetXmax();; 5335 xmax = xmin + 2*(xmax-xmin);; 5336 axis->SetRange(0,0);; 5337 // double the bins and recompute ncells; 5338 axis->Set(2*nbins,xmin,xmax);; 5339 SetBinsLength(-1);; 5340 Int_t errors = fSumw2.fN;; 5341 if (errors) fSumw2.Set(fNcells);; 5342 axis->SetTimeDisplay(timedisp);; 5343 ; 5344 Reset(""ICE""); // reset content and error; 5345 ; 5346 //now loop on all bins and refill; 5347 Double_t oldEntries = fEntries;; 5348 Int_t bin,ibin,binx,biny,binz;; 5349 for (ibin =0; ibin < hold->fNcells; ibin++) {; 5350 // get the binx,y,z values . The x-y-z (axis) bin values will stay the same between new-old after the expanding; 5351 hold->GetBinXYZ(ibin,binx,biny,binz);; 5352 bin = GetBin(binx,biny,binz);; 5353 ; 5354 // underflow and overflow will be cleaned up because their meaning has been altered; 5355 if (hold->IsBinUnderflow(ibin,iaxis) || hold->IsBinOverflow(ibin,iaxis)) {; 5356 continue;; 5357 }; 5358 else {; 5359 AddBinContent(bin, hold->RetrieveBinContent(ibin));; 5360 if (errors) fSumw2.fArray[bin] += hold->fSumw2.fArray[ibin];; 5361 }; 5362 }; 5363 fEntries = oldEntries;; 5364 delete hold;; 5365}; 5366 ; 5367////////////////////////////////////////////////////////////////////////////////; 5368/// Sort bins with labels or set option(s) to draw axis with labels; 5369/// \param[in] option; 5370/// - ""a"" sort by alphabetic order; 5371/// - "">"" sort by decreasing v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:214759,error,error,214759,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['error']
Availability,"led from SetEntryBase; 171 kExternalLoadTree, ///< User code called LoadTree directly.; 172 kMissingBranchFromTree ///< Missing expected branch when loading new tree; 173 };; 174 ; 175 static constexpr const char *const fgEntryStatusText[kEntryUnknownError + 1] = {; 176 ""valid entry"",; 177 ""the tree does not exist"",; 178 ""the tree entry number does not exist"",; 179 ""cannot access chain element"",; 180 ""problem in opening a chain's file"",; 181 ""problem reading dictionary info from tree"",; 182 ""last entry loop has reached its end"",; 183 ""one of the readers was not successfully initialized"",; 184 ""A friend with TTreeIndex doesn't have an entry for this index"",; 185 ""A branch was not found when switching to the next TTree in the chain"",; 186 ""LoadTree return less than -6, likely a 'newer' error code""};; 187 ; 188 TTreeReader();; 189 ; 190 TTreeReader(TTree *tree, TEntryList *entryList = nullptr, bool warnAboutLongerFriends = true,; 191 const std::vector<std::string> &suppressErrorsForMissingBranches = {});; 192 TTreeReader(const char* keyname, TDirectory* dir, TEntryList* entryList = nullptr);; 193 TTreeReader(const char *keyname, TEntryList *entryList = nullptr) : TTreeReader(keyname, nullptr, entryList) {}; 194 ; 195 ~TTreeReader() override;; 196 ; 197 void SetTree(TTree* tree, TEntryList* entryList = nullptr);; 198 void SetTree(const char* keyname, TEntryList* entryList = nullptr) {; 199 SetTree(keyname, nullptr, entryList);; 200 }; 201 void SetTree(const char* keyname, TDirectory* dir, TEntryList* entryList = nullptr);; 202 ; 203 bool IsChain() const { return TestBit(kBitIsChain); }; 204 ; 205 bool IsInvalid() const { return fLoadTreeStatus == kNoTree; }; 206 ; 207 TTree* GetTree() const { return fTree; }; 208 TEntryList* GetEntryList() const { return fEntryList; }; 209 ; 210 ///\{ \name Entry setters; 211 ; 212 /// Move to the next entry (or index of the TEntryList if that is set).; 213 ///; 214 /// \return false if the previous entry was already the last entry. Thi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeReader_8h_source.html:6981,error,error,6981,doc/master/TTreeReader_8h_source.html,https://root.cern,https://root.cern/doc/master/TTreeReader_8h_source.html,1,['error'],['error']
Availability,"led when system stops idleing. void Terminate(Int_t status = 0); Terminate the application by call TSystem::Exit() unless application has; been told to return from Run(), by a call to SetReturnFromRun(). void LineProcessed(const char* line); Emit signal when a line has been processed. void KeyPressed(Int_t key); Emit signal when console keyboard key was pressed. void ReturnPressed(char* text); Emit signal when return key was pressed. void SetEchoMode(Bool_t mode); Set console echo mode:. mode = kTRUE - echo input symbols; mode = kFALSE - noecho input symbols. void CreateApplication(); Static function used to create a default application environment. TApplication * Open(const char* url, Int_t debug, const char* script); Static function used to attach to an existing remote application; or to start one. void Close(TApplication* app); Static function used to close a remote application. void ls(Option_t* option = """") const; Show available sessions. TList * GetApplications(); Static method returning the list of available applications. TApplication(const TApplication& ). TApplication& operator=(const TApplication& ). void SetSignalHandler(TSignalHandler* sh); { fSigHandler = sh; }. TApplication * Open(const char* url, Int_t debug, const char* script). TSignalHandler * GetSignalHandler() const; { return fSigHandler; }. Bool_t HandleTermInput(); { return kFALSE; }. void Init(); { fAppImp->Init(); }. const char * GetIdleCommand() const; { return fIdleCommand; }. const char * ApplicationName() const; { return fAppImp->ApplicationName(); }. void Show(); { fAppImp->Show(); }. void Hide(); { fAppImp->Hide(); }. void Iconify(); { fAppImp->Iconify(); }. void Raise(); { fAppImp->Raise(); }. void Lower(); { fAppImp->Lower(); }. Bool_t IsCmdThread(); { return fAppImp ? fAppImp->IsCmdThread() : kTRUE; }. TApplicationImp * GetApplicationImp(); { return fAppImp;}. Int_t Argc() const; { return fArgc; }. char ** Argv() const; { return fArgv; }. Bool_t NoLogOpt() const; { return fNoLog; }. B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TApplication.html:18614,avail,available,18614,root/html526/TApplication.html,https://root.cern,https://root.cern/root/html526/TApplication.html,2,['avail'],['available']
Availability,"led, kFALSE=disabled. ; Definition at line 646 of file TGComboBox.cxx. ◆ SetTopEntry(). void TGComboBox::SetTopEntry ; (; TGLBEntry * ; e, . TGLayoutHints * ; lh . ). virtual . Set a new combo box value (normally update of text string in fSelEntry is done via fSelEntry::Update()). ; Definition at line 438 of file TGComboBox.cxx. ◆ SortByName(). virtual void TGComboBox::SortByName ; (; Bool_t ; ascend = kTRUE). inlinevirtual . Definition at line 120 of file TGComboBox.h. ◆ Streamer(). void TGComboBox::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TGLineStyleComboBox, TGLineWidthComboBox, TGFontTypeComboBox, and TGFSComboBox. ◆ StreamerNVirtual(). void TGComboBox::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 131 of file TGComboBox.h. Member Data Documentation. ◆ fBpic. const TGPicture* TGComboBox::fBpic. protected . down arrow picture used in fDDButton ; Definition at line 59 of file TGComboBox.h. ◆ fComboFrame. TGComboBoxPopup* TGComboBox::fComboFrame. protected . popup containing a listbox ; Definition at line 57 of file TGComboBox.h. ◆ fDDButton. TGScrollBarElement* TGComboBox::fDDButton. protected . button controlling drop down of popup ; Definition at line 56 of file TGComboBox.h. ◆ fLhb. TGLayoutHints* TGComboBox::fLhb. protected . layout hints for fDDButton ; Definition at line 61 of file TGComboBox.h. ◆ fLhdd. TGLayoutHints* TGComboBox::fLhdd. protected . layout hints for fListBox ; Definition at line 62 of file TGComboBox.h. ◆ fLhs. TGLayoutHints* TGComboBox::fLhs. protected . layout hints for selected item frame ; Definition at line 60 of file TGComboBox.h. ◆ fListBox. TGListBox* TGComboBox::fListBox. protected . the listbox with text items ; Definition at line 58 of file TGComboBox.h. ◆ fSelEntry. TGLBEntry* TGComboBox::fSelEntry. protected . selected item frame ; Definition at line 54 of file TGComboBox.h. ◆ fTextEntry. TGTe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGComboBox.html:45893,down,down,45893,doc/master/classTGComboBox.html,https://root.cern,https://root.cern/doc/master/classTGComboBox.html,1,['down'],['down']
Availability,"led; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Bool_tTGedFrame::fAvoidSignalflag for executing slots; Pixel_tTGFrame::fBackgroundframe background color; Int_tTGFrame::fBorderWidthframe border width; TGClient*TGObject::fClientConnection to display server; Int_tTGFrame::fDNDStateEDNDFlags; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TList*TGedFrame::fExtraTabsaddtional tabs in ged editor; TGFrameElement*TGFrame::fFEpointer to frame element; TGedEditor*TGedFrame::fGedEditormanager of this frame; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; Bool_tTGedFrame::fInitinit flag for setting signals/slots; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TEveLine*fMModel object.; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TClass*TGedFrame::fModelClassclass corresponding to instantiated GedFrame; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveLineEditor.html:17288,mask,mask,17288,root/html528/TEveLineEditor.html,https://root.cern,https://root.cern/root/html528/TEveLineEditor.html,4,['mask'],['mask']
Availability,"left( \\prod_f {d^3p_f\\over (2\\pi)^3} {1\\over 2E_f} \\right) \\left| \\mathscr{M} \\left(m_A - \\left\\{p_f\\right\\} \\right) \\right|^2 (2\\pi)^4 \\delta^{(4)} \\left(p_A - \\sum p_f \\right)"");; l.DrawMathText(0.50, 0.425, ""4\\mathrm{Re}\\left\\{{2\\over 1-\\Delta\\alpha} \\chi(s) \\left[ \\^{g}_\\nu^e \\^{g}_\\nu^f (1 + \\cos^2\\theta) + \\^{g}_a^e \\^{g}_a^f \\cos\\theta \\right] \\right\\}"");; l.DrawMathText(0.50, 0.330, ""p(n) = {1\\over\\pi\\sqrt{2}} \\sum_{k = 1}^\\infty \\sqrt{k} A_k(n) {d\\over dn} {\\sinh \\left\\{ {\\pi\\over k} \\sqrt{2\\over 3} \\sqrt{n - {1\\over 24}} \\right\\} \\over \\sqrt{n - {1\\over 24}}}"");; l.DrawMathText(0.13, 0.150, ""{(\\ell+1)C_{\\ell}^{TE} \\over 2\\pi}"");; l.DrawMathText(0.27, 0.110, ""\\mathbb{N} \\subset \\mathbb{R}"");; l.DrawMathText(0.63, 0.100, ""\\hbox{RHIC スピン物理 Нью-Йорк}"");. c1->Print(""c1.gif"");; c1->Print(""c1.jpg"");; c1->Print(""c1.png"");; c1->Print(""c1.ps"");; c1->Print(""c1.eps"");; ; return c1;; }. The list of all available symbols is given in the following example:. Picture; Source. // This macro draw all possible symbols provided by TMathtext; //Author: Olivier Couet. {; TCanvas *c1 = new TCanvas(""mathtext"",""TMathText symbol"",1200,1400);. TMathText l;; l.SetTextSize(0.013);; l.SetTextFont(132);; ; // Draw 1st Column; l.SetTextAlign(12);; float y, step, x1, x2;; y = 0.99; step = 0.0126; x1 = 0.01; x2 = x1+0.02;; l.DrawMathText(x1, y, ""\\\""""); l.DrawText(x2, y, ""\\\"""");; y -= step ; l.DrawMathText(x1, y, ""\\'""); l.DrawText(x2, y, ""\\'"");; y -= step ; l.DrawMathText(x1, y, ""\\.""); l.DrawText(x2, y, ""\\."");; y -= step ; l.DrawMathText(x1, y, ""\\=""); l.DrawText(x2, y, ""\\="");; y -= step ; l.DrawMathText(x1, y, ""\\Box""); l.DrawText(x2, y, ""\\Box"");; y -= step ; l.DrawMathText(x1, y, ""\\Bumpeq""); l.DrawText(x2, y, ""\\Bumpeq"");; y -= step ; l.DrawMathText(x1, y, ""\\Cap""); l.DrawText(x2, y, ""\\Cap"");; y -= step ; l.DrawMathText(x1, y, ""\\Cup""); l.DrawText(x2, y, ""\\Cup"");; y -= step ; l.DrawMathText(x1, y, ""\\Delta""); l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMathText.html:2347,avail,available,2347,root/html534/TMathText.html,https://root.cern,https://root.cern/root/html534/TMathText.html,1,['avail'],['available']
Availability,"left,right""); expo.plotOn(plotFrameWithNormRange, LineColor=""r"", Range=""full"", NormRange=""left,right"", LineStyle=10); ; plotFrameWithNormRange.Draw(); ; canvas.Draw(); ; canvas.SaveAs(""rf212_plottingInRanges_blinding.png""); [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'full' created with bounds [1,30]; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'left' created with bounds [1,10]; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'right' created with bounds [20,30]; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'fit_nll_expo_expoData_left' created with bounds [1,10]; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'fit_nll_expo_expoData_right' created with bounds [20,30]; [#1] INFO:Fitting -- RooAbsPdf::fitTo(expo_over_expo_Int[x|left,right]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_expo_over_expo_Int[x|left,right]_expoData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Plotting -- RooAbsPdf::plotOn(expo) only plotting range 'full', curve is normalized to data in given range; [#1] INFO:Plotting -- RooAbsPdf::plotOn(expo) only plotting range 'left', curve is normalized to data in given range; [#1] INFO:Plotting -- RooAbsPdf::plotOn(expo) only plotting range 'right', curve is normalized to data in given range; [#1] INFO:Plotting -- RooAbsPdf::plotOn(expo) only plotting range 'left'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(expo) p.d.f. curve is normalized using explicit choice of ranges 'left,right'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(expo) only plotting range 'right'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(expo) p.d.f. curve is normalize",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf212__plottingInRanges__blinding_8py.html:5133,error,error,5133,doc/master/rf212__plottingInRanges__blinding_8py.html,https://root.cern,https://root.cern/doc/master/rf212__plottingInRanges__blinding_8py.html,1,['error'],['error']
Availability,"left\\{{2\\over 1-\\Delta\\alpha} \\chi(s) \\left[ \\^{g}_\\nu^e \\^{g}_\\nu^f (1 + \\cos^2\\theta) + \\^{g}_a^e \\^{g}_a^f \\cos\\theta \\right] \\right\\}"");; l.DrawMathText(0.50, 0.330, ""p(n) = {1\\over\\pi\\sqrt{2}} \\sum_{k = 1}^\\infty \\sqrt{k} A_k(n) {d\\over dn} {\\sinh \\left\\{ {\\pi\\over k} \\sqrt{2\\over 3} \\sqrt{n - {1\\over 24}} \\right\\} \\over \\sqrt{n - {1\\over 24}}}"");; l.DrawMathText(0.13, 0.150, ""{(\\ell+1)C_{\\ell}^{TE} \\over 2\\pi}"");; l.DrawMathText(0.27, 0.110, ""\\mathbb{N} \\subset \\mathbb{R}"");; l.DrawMathText(0.63, 0.100, ""\\hbox{RHIC スピン物理 Нью-Йорк}"");; ; c1->Print(""c1.png"");; c1->Print(""c1.ps"");; ; return c1;; }; TCanvasThe Canvas class.Definition TCanvas.h:23; TLine::Printvoid Print(Option_t *option="""") const overrideDump this line with its attributes.Definition TLine.cxx:419; TMathTextTo draw TeX Mathematical Formula.Definition TMathText.h:19; c1return c1Definition legend1.C:41; lTLine lDefinition textangle.C:4; . The list of all available symbols is given in the following example:. Limitation:; TMathText rendering is not implemented for the PDF output. PostScript output should be used instead. ; Definition at line 19 of file TMathText.h. Public Types; enum  { kTextNDC = (1ULL << ( 14 )); };  ;  Public Types inherited from TText; enum  { kTextNDC = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMath",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMathText.html:2499,avail,available,2499,doc/master/classTMathText.html,https://root.cern,https://root.cern/doc/master/classTMathText.html,1,['avail'],['available']
Availability,"legant replacement of two-dimensional histograms : the inter-relation of two; measured quantities X and Y can always be visualized by a two-dimensional; histogram or scatter-plot; its representation on the line-printer is not particularly; satisfactory, except for sparse data. If Y is an unknown (but single-valued); approximate function of X, this function is displayed by a profile histogram with; much better precision than by a scatter-plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for bin J. 2; H(J) = sum Y E(J) = sum Y; l(J) = sum l L(J) = sum l; h(J) = H(J)/L(J) mean of Y,; s(J) = sqrt(E(J)/L(J)- h(J)**2) standard deviation of Y (e.g. RMS); e(J) = s(J)/sqrt(L(J)) standard error on the mean. The displayed bin content for bin J of a TProfile is always h(J). The corresponding bin error is by default; e(J). In case the option ""s"" is used (in the constructor or by calling TProfile::BuildOptions); the displayed error is s(J). In the special case where s(J) is zero (eg, case of 1 entry only in one bin); the bin error e(J) is computed from the average of the s(J) for all bins if; the static function TProfile::Approximate has been called.; This simple/crude approximation was suggested in order to keep the bin; during a fit operation. But note that this approximation is not the default behaviour.; See also TProfile::BuildOptions for other error options and more detailed explanations. Example of a profile histogram with its graphics output; {; TCanvas *c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; hprof = new TProfile(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; Float_t px, py, pz;; for ( Int_t i=0; i<25000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; hprof->Fill(px,pz,1);; }; hprof->Draw();; }. /*; ; */. Function Members (Methods); public:. TProfile(); TProfile(const TProfile& profile); TProfile(const char* name, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProfile.html:1584,error,error,1584,root/html534/TProfile.html,https://root.cern,https://root.cern/root/html534/TProfile.html,1,['error'],['error']
Availability,"legant replacement of two-dimensional histograms : the inter-relation of two; measured quantities X and Y can always be visualized by a two-dimensional; histogram or scatter-plot; its representation on the line-printer is not particularly; satisfactory, except for sparse data. If Y is an unknown (but single-valued); approximate function of X, this function is displayed by a profile histogram with; much better precision than by a scatter-plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for bin J. 2; H(J) = sum Y E(J) = sum Y; l(J) = sum l L(J) = sum l; h(J) = H(J)/L(J) mean of Y,; s(J) = sqrt(E(J)/L(J)- h(J)**2) standard deviation of Y (e.g. RMS); e(J) = s(J)/sqrt(L(J)) standard error on the mean. The displayed bin content for bin J of a TProfile is always h(J). The corresponding bin error is by default; e(J). In case the option ""s"" is used (in the constructor or by calling TProfile::BuildOptions); the displayed error is s(J). In the special case where s(J) is zero (eg, case of 1 entry only in one bin); the bin error e(J) is computed from the average of the s(J) for all bins if; the static function TProfile::Approximate has been called.; This simple/crude approximation was suggested in order to keep the bin; during a fit operation. But note that this approximation is not the default behaviour.; See also TProfile::BuildOptions for other error options and more detailed explanations. Example of a profile histogram with its graphics output; {; TCanvas *c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; hprof = new TProfile(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; Float_t px, py, pz;; for ( Int_t i=0; i<25000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; hprof->Fill(px,pz,1);; }; hprof->Draw();; }. /*; ; */. Function Members (Methods); public:. virtual~TProfile(); voidTObject::AbstractMethod(const char* method) const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProfile.html:1584,error,error,1584,root/html602/TProfile.html,https://root.cern,https://root.cern/root/html602/TProfile.html,2,['error'],['error']
Availability,"lel"");. // Draw Third Column; y = 0.96; step = 0.0465; x1 = 0.52; x2 = x1+0.04;; Tl.DrawLatex(x1, y, ""#heart"") ; Tl.DrawText(x2, y, ""#heart"");; y -= step ; Tl.DrawLatex(x1, y, ""#Jgothic"") ; Tl.DrawText(x2, y, ""#Jgothic"");; y -= step ; Tl.DrawLatex(x1, y, ""#LT"") ; Tl.DrawText(x2, y, ""#LT"");; y -= step ; Tl.DrawLatex(x1, y, ""#equiv"") ; Tl.DrawText(x2, y, ""#equiv"");; y -= step ; Tl.DrawLatex(x1, y, ""#subset"") ; Tl.DrawText(x2, y, ""#subset"");; y -= step ; Tl.DrawLatex(x1, y, ""#supseteq"") ; Tl.DrawText(x2, y, ""#supseteq"");; y -= step ; Tl.DrawLatex(x1, y, ""#wedge"") ; Tl.DrawText(x2, y, ""#wedge"");; y -= step ; Tl.DrawLatex(x1, y, ""#oright"") ; Tl.DrawText(x2, y, ""#oright"");; y -= step ; Tl.DrawLatex(x1, y, ""#AA"") ; Tl.DrawText(x2, y, ""#AA"");; y -= step ; Tl.DrawLatex(x1, y, ""#pm"") ; Tl.DrawText(x2, y, ""#pm"");; y -= step ; Tl.DrawLatex(x1, y, ""#3dots"") ; Tl.DrawText(x2, y, ""#3dots"");; y -= step ; Tl.DrawLatex(x1, y, ""#nabla"") ; Tl.DrawText(x2, y, ""#nabla"");; y -= step ; Tl.DrawLatex(x1, y, ""#downleftarrow"") ; Tl.DrawText(x2, y, ""#downleftarrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#topbar"") ; Tl.DrawText(x2, y, ""#topbar"");; y -= step ; Tl.DrawLatex(x1, y, ""#arcbar"") ; Tl.DrawText(x2, y, ""#arcbar"");; y -= step ; Tl.DrawLatex(x1, y, ""#uparrow"") ; Tl.DrawText(x2, y, ""#uparrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#oplus"") ; Tl.DrawText(x2, y, ""#oplus"");; y -= step ; Tl.DrawLatex(x1, y, ""#Uparrow"") ; Tl.DrawText(x2, y, ""#Uparrow"");; y -= step ; Tl.DrawLatex(x1, y-0.01, ""#sum"") ; Tl.DrawText(x2, y, ""#sum"");; y -= step ; Tl.DrawLatex(x1, y, ""#perp"") ; Tl.DrawText(x2, y, ""#perp"");; y -= step ; Tl.DrawLatex(x1, y, ""#forall"") ; Tl.DrawText(x2, y, ""#forall""); . // Draw Fourth Column; y = 0.96; step = 0.0465; x1 = 0.77; x2 = x1+0.04;; Tl.DrawLatex(x1, y, ""#spade"") ; Tl.DrawText(x2, y, ""#spade"");; y -= step ; Tl.DrawLatex(x1, y, ""#Rgothic"") ; Tl.DrawText(x2, y, ""#Rgothic"");; y -= step ; Tl.DrawLatex(x1, y, ""#GT"") ; Tl.DrawText(x2, y, ""#GT"");; y -= step ; Tl.DrawLatex(x1, y, ""#propto"") ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLatex.html:7126,down,downleftarrow,7126,root/html528/TLatex.html,https://root.cern,https://root.cern/root/html528/TLatex.html,3,['down'],['downleftarrow']
Availability,"lel(); Set the parallel option (default). void SetPerspective(); Set perspective option. void SetRange(const Double_t* min, const Double_t* max); Set Range function. void SetRange(Double_t x0, Double_t y0, Double_t z0, Double_t x1, Double_t y1, Double_t z1, Int_t flag = 0); Set 3-D View range. Input: x0, y0, z0 are minimum coordinates; x1, y1, z1 are maximum coordinates. flag values are: 0 (set always) <- default; 1 (shrink view); 2 (expand view). void SetWindow(Double_t u0, Double_t v0, Double_t du, Double_t dv); Set viewing window. void SetView(Double_t longitude, Double_t latitude, Double_t psi, Int_t& irep); Set view parameters. void ResizePad(); Recompute window for perspective view. void ResetView(Double_t longitude, Double_t latitude, Double_t psi, Int_t& irep); Set view direction (in spherical coordinates). Input PHI - longitude; THETA - latitude (angle between +Z and view direction); PSI - rotation in screen plane. Output: IREP - reply (-1 if error in min-max). Errors: error in min-max scope. void WCtoNDC(const Float_t* pw, Float_t* pn); Transfer point from world to normalized coordinates. Input: PW(3) - point in world coordinate system; PN(3) - point in normalized coordinate system. void WCtoNDC(const Double_t* pw, Double_t* pn); Transfer point from world to normalized coordinates. Input: PW(3) - point in world coordinate system; PN(3) - point in normalized coordinate system. void AdjustPad(TVirtualPad* pad = 0); Force the current pad to be updated. void RotateView(Double_t phi, Double_t theta, TVirtualPad* pad = 0); API to rotate view and adjust the pad provided it the current one. void SideView(TVirtualPad* pad = 0); Set to side view. void FrontView(TVirtualPad* pad = 0); Set to front view. void TopView(TVirtualPad* pad = 0); Set to top view. void ToggleRulers(TVirtualPad* pad = 0); Turn on /off 3D axis. void ToggleZoom(TVirtualPad* pad = 0); Turn on /off the interactive option to; Zoom / Move / Change attributes of 3D axis correspond this view. void Adj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TView3D.html:20390,error,error,20390,root/html530/TView3D.html,https://root.cern,https://root.cern/root/html530/TView3D.html,5,['error'],['error']
Availability,"lel(); Set the parallel option (default). void SetPerspective(); Set perspective option. void SetRange(const Double_t* min, const Double_t* max); Set Range function. void SetRange(Double_t x0, Double_t y0, Double_t z0, Double_t x1, Double_t y1, Double_t z1, Int_t flag = 0); Set 3-D View range. Input: x0, y0, z0 are minimum coordinates; x1, y1, z1 are maximum coordinates. flag values are: 0 (set always) <- default; 1 (shrink view); 2 (expand view). void SetWindow(Double_t u0, Double_t v0, Double_t du, Double_t dv); Set viewing window. void SetView(Double_t longitude, Double_t latitude, Double_t psi, Int_t& irep); set view parameters. void ResizePad(); Recompute window for perspective view. void ResetView(Double_t longitude, Double_t latitude, Double_t psi, Int_t& irep); Set view direction (in spherical coordinates). Input PHI - longitude; THETA - latitude (angle between +Z and view direction); PSI - rotation in screen plane. Output: IREP - reply (-1 if error in min-max). Errors: error in min-max scope. void WCtoNDC(const Float_t* pw, Float_t* pn); Transfer point from world to normalized coordinates. Input: PW(3) - point in world coordinate system; PN(3) - point in normalized coordinate system. void WCtoNDC(const Double_t* pw, Double_t* pn); Transfer point from world to normalized coordinates. Input: PW(3) - point in world coordinate system; PN(3) - point in normalized coordinate system. void AdjustPad(TVirtualPad* pad = 0); Force the current pad to be updated. void RotateView(Double_t phi, Double_t theta, TVirtualPad* pad = 0); API to rotate view and adjust the pad provided it the current one. void SideView(TVirtualPad* pad = 0); Set to side view. void FrontView(TVirtualPad* pad = 0); Set to front view. void TopView(TVirtualPad* pad = 0); Set to top view. void ToggleRulers(TVirtualPad* pad = 0); Turn on /off 3D axis. void ToggleZoom(TVirtualPad* pad = 0); Turn on /off the interactive option to; Zoom / Move / Change attributes of 3D axis correspond this view. void Adj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TView3D.html:20319,error,error,20319,root/html528/TView3D.html,https://root.cern,https://root.cern/root/html528/TView3D.html,1,['error'],['error']
Availability,"lement value); Binary search in an array defined by its iterators. The values in the iterators range are supposed to be sorted; prior to this call. If match is found, function returns; position of element. If no match found, function gives nearest; element smaller than value. template <typename T> Long64_t BinarySearch(Long64_t n, const T *array, T value); Binary search in an array of n values to locate value. Array is supposed to be sorted prior to this call.; If match is found, function returns position of element.; If no match found, function gives nearest element smaller than value. template <typename T> Long64_t BinarySearch(Long64_t n, const T **array, T value); Binary search in an array of n values to locate value. Array is supposed to be sorted prior to this call.; If match is found, function returns position of element.; If no match found, function gives nearest element smaller than value. template <typename Element, typename Index> void Sort(Index n, const Element* a, Index* index, Bool_t down); Sort the n elements of the array a of generic templated type Element.; In output the array index of type Index contains the indices of the sorted array.; If down is false sort in increasing order (default is decreasing order). template <typename T> Double_t Median(Long64_t n, const T *a, const Double_t *w, Long64_t *work); Return the median of the array a where each entry i has weight w[i] .; Both arrays have a length of at least n . The median is a number obtained; from the sorted array a through. median = (a[jl]+a[jh])/2. where (using also the sorted index on the array w). sum_i=0,jl w[i] <= sumTot/2; sum_i=0,jh w[i] >= sumTot/2; sumTot = sum_i=0,n w[i]. If w=0, the algorithm defaults to the median definition where it is; a number that divides the sorted sequence into 2 halves.; When n is odd or n > 1000, the median is kth element k = (n + 1) / 2.; when n is even and n < 1000the median is a mean of the elements k = n/2 and k = n/2 + 1. If the weights are supplied ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMath.html:52346,down,down,52346,root/html528/TMath.html,https://root.cern,https://root.cern/root/html528/TMath.html,4,['down'],['down']
Availability,"lement value); Binary search in an array defined by its iterators. The values in the iterators range are supposed to be sorted; prior to this call. If match is found, function returns; position of element. If no match found, function gives nearest; element smaller than value. template <typename T> Long64_t BinarySearch(Long64_t n, const T *array, T value); Binary search in an array of n values to locate value. Array is supposed to be sorted prior to this call.; If match is found, function returns position of element.; If no match found, function gives nearest element smaller than value. template <typename T> Long64_t BinarySearch(Long64_t n, const T **array, T value); Binary search in an array of n values to locate value. Array is supposed to be sorted prior to this call.; If match is found, function returns position of element.; If no match found, function gives nearest element smaller than value. template <typename Element, typename Index> void Sort(Index n, const Element* a, Index* index, Bool_t down); Sort the n elements of the array a of generic templated type Element.; In output the array index of type Index contains the indices of the sorted array.; If down is false sort in increasing order (default is decreasing order). template <typename T> T * Cross(const T v1[3],const T v2[3], T out[3]); Calculate the Cross Product of two vectors:; out = [v1 x v2]. template <typename T> T * Normal2Plane(const T p1[3],const T p2[3],const T p3[3], T normal[3]); Calculate a normal vector of a plane. Input:; Float_t *p1,*p2,*p3 - 3 3D points belonged the plane to define it. Return:; Pointer to 3D normal vector (normalized). template <typename T> Bool_t IsInside(T xp, T yp, Int_t np, T *x, T *y); Function which returns kTRUE if point xp,yp lies inside the; polygon defined by the np points in arrays x and y, kFALSE otherwise.; Note that the polygon may be open or closed. template <typename T> Double_t Median(Long64_t n, const T *a, const Double_t *w, Long64_t *work); Return the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMath.html:42010,down,down,42010,root/html528/TMath.html,https://root.cern,https://root.cern/root/html528/TMath.html,4,['down'],['down']
Availability,"lementation (NO_ALTERNATIVE_QUEUE) as well. The new configuration value; 138 * ""CONNECTION_QUEUE_SIZE"" is only available for the previous queue; 139 * implementation, since the queue length is independent from the number of; 140 * worker threads there, while the new queue is one element per worker thread.; 141 *; 142 */; 143#if defined(NO_ALTERNATIVE_QUEUE) && defined(ALTERNATIVE_QUEUE); 144/* The queues are exclusive or - only one can be used. */; 145#error \; 146 ""Define ALTERNATIVE_QUEUE or NO_ALTERNATIVE_QUEUE (or none of them), but not both""; 147#endif; 148#if !defined(NO_ALTERNATIVE_QUEUE) && !defined(ALTERNATIVE_QUEUE); 149/* Use a default implementation */; 150#define NO_ALTERNATIVE_QUEUE; 151#endif; 152 ; 153#if defined(NO_FILESYSTEMS) && !defined(NO_FILES); 154/* File system access:; 155 * NO_FILES = do not serve any files from the file system automatically.; 156 * However, with NO_FILES CivetWeb may still write log files, read access; 157 * control files, default error page files or use API functions like; 158 * mg_send_file in callbacks to send files from the server local; 159 * file system.; 160 * NO_FILES only disables the automatic mapping between URLs and local; 161 * file names.; 162 * NO_FILESYSTEM = do not access any file at all. Useful for embedded; 163 * devices without file system. Logging to files in not available; 164 * (use callbacks instead) and API functions like mg_send_file are not; 165 * available.; 166 * If NO_FILESYSTEM is set, NO_FILES must be set as well.; 167 */; 168#error ""Inconsistent build flags, NO_FILESYSTEMS requires NO_FILES""; 169#endif; 170 ; 171/* DTL -- including winsock2.h works better if lean and mean */; 172#if !defined(WIN32_LEAN_AND_MEAN); 173#define WIN32_LEAN_AND_MEAN; 174#endif; 175 ; 176#if defined(__SYMBIAN32__); 177/* According to https://en.wikipedia.org/wiki/Symbian#History,; 178 * Symbian is no longer maintained since 2014-01-01.; 179 * Support for Symbian has been removed from CivetWeb; 180 */; 181#error ""S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:6629,error,error,6629,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,['error'],['error']
Availability,"lementation is no-op). ; Different objects in ROOT use the Notify method for different purposes, in coordination with other objects that call this method at the appropriate time.; For example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Reimplemented from TObject.; Definition at line 91 of file RooProofDriverSelector.cxx. ◆ Process(). bool RooProofDriverSelector::Process ; (; Long64_t ; ). overridevirtual . The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ; The entry argument specifies which entry in the currently loaded tree is to be processed. It can be passed to either t01::GetEntry() or TBranch::GetEntry() to read either all or the required parts of the data. When processing keyed objects with PROOF, the object is already loaded and is available via the fObject pointer.; This function should contain the ""body"" of the analysis. It can contain simple or elaborate selection criteria, run algorithms on the data of the event and typically fill histograms.; The processing can be stopped by calling Abort().; Use fStatus to set the return value of TTree::Process().; The return value is currently not used.; WARNING when a selector is used with a TChain, you must use the pointer to the current TTree to call GetEntry(entry). The entry is always the local entry number in the current tree. Assuming that fChain is the pointer to the TChain being processed, use: fChain->GetTree()->GetEntry(entry). ; Reimplemented from TSelector.; Definition at line 66 of file RooProofDriverSelector.cxx. ◆ SetInputList(). void RooProofDriverSelector::SetInputList ; (; TList * ; input). inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 35 of file RooProofDriverSelector.h. ◆ SetObject(). void RooProofDrive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProofDriverSelector.html:15788,avail,available,15788,doc/master/classRooProofDriverSelector.html,https://root.cern,https://root.cern/doc/master/classRooProofDriverSelector.html,1,['avail'],['available']
Availability,"lemented from RooAbsReal.; Definition at line 315 of file RooAddition.cxx. ◆ Class(). static TClass * RooAddition::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAddition::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAddition::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 76 of file RooAddition.h. ◆ clone(). TObject * RooAddition::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 35 of file RooAddition.h. ◆ DeclFileName(). static const char * RooAddition::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 76 of file RooAddition.h. ◆ defaultErrorLevel(). double RooAddition::defaultErrorLevel ; (; ); const. overridevirtual . Return the default error level for MINUIT error analysis If the addition contains one or more RooNLLVars and no RooChi2Vars, return the defaultErrorLevel() of RooNLLVar. ; If the addition contains one ore more RooChi2Vars and no RooNLLVars, return the defaultErrorLevel() of RooChi2Var. If the addition contains neither or both issue a warning message and return a value of 1 ; Reimplemented from RooAbsReal.; Definition at line 198 of file RooAddition.cxx. ◆ doEval(). void RooAddition::doEval ; (; RooFit::EvalContext & ; ctx); const. overridevirtual . Compute addition of PDFs in batches. ; Reimplemented from RooAbsReal.; Definition at line 145 of file RooAddition.cxx. ◆ evaluate(). double RooAddition::evaluate ; (; ); const. overrideprotectedvirtual . Calculate and return current value of self. ; Implements RooAbsReal.; Definition at line 130 of file RooAddition.cxx. ◆ forceAnalyticalInt(). bool RooAddition::forceAnalyticalInt ; (; const RooAbsArg & ; ); const. inlineoverridevirtual . Reimplemented from RooAbsReal.; Definition at line 44 of file RooAddition.h. ◆ getAnaly",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddition.html:63274,error,error,63274,doc/master/classRooAddition.html,https://root.cern,https://root.cern/doc/master/classRooAddition.html,2,['error'],['error']
Availability,"lemented in ROOT::RWebWindowWSHandler.; Definition at line 56 of file THttpWSHandler.h. ◆ ProcessWS(). virtual Bool_t THttpWSHandler::ProcessWS ; (; THttpCallArg * ; arg). pure virtual . Implemented in ROOT::RWebWindowWSHandler. ◆ RemoveEngine(). void THttpWSHandler::RemoveEngine ; (; std::shared_ptr< THttpWSEngine > & ; engine, . Bool_t ; terminate = kFALSE . ). private . Remove and destroy WS connection. ; Definition at line 157 of file THttpWSHandler.cxx. ◆ RunSendingThrd(). Int_t THttpWSHandler::RunSendingThrd ; (; std::shared_ptr< THttpWSEngine > ; engine). private . Send data stored in the buffer. ; Returns:. 0 - when operation was executed immediately; 1 - when send operation will be performed in different thread . Definition at line 268 of file THttpWSHandler.cxx. ◆ SendCharStarWS(). Int_t THttpWSHandler::SendCharStarWS ; (; UInt_t ; wsid, . const char * ; str . ). Send string via given websocket id. ; Returns:. -1 - in case of error,; 0 - when operation was executed immediately,; 1 - when send operation will be performed in different thread, . Definition at line 476 of file THttpWSHandler.cxx. ◆ SendHeaderWS(). Int_t THttpWSHandler::SendHeaderWS ; (; UInt_t ; wsid, . const char * ; hdr, . const void * ; buf, . int ; len . ). Send binary data with text header via given websocket id. ; Returns:. -1 - in case of error,; 0 - when operation was executed immediately,; 1 - when send operation will be performed in different thread, . Definition at line 431 of file THttpWSHandler.cxx. ◆ SendWS(). Int_t THttpWSHandler::SendWS ; (; UInt_t ; wsid, . const void * ; buf, . int ; len . ). Send binary data via given websocket id. ; Returns:. -1 - in case of error; 0 - when operation was executed immediately; 1 - when send operation will be performed in different thread . Definition at line 386 of file THttpWSHandler.cxx. ◆ SetDisabled(). void THttpWSHandler::SetDisabled ; (; ). inline . Disable all processing of websockets, normally called shortly before destructor. ; Defin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHttpWSHandler.html:23416,error,error,23416,doc/master/classTHttpWSHandler.html,https://root.cern,https://root.cern/doc/master/classTHttpWSHandler.html,1,['error'],['error']
Availability,"lemented in TCling. ◆ DiagnoseIfInterpreterException(). virtual bool TInterpreter::DiagnoseIfInterpreterException ; (; const std::exception & ; e); const. pure virtual . Implemented in TCling. ◆ DisplayClass(). virtual int TInterpreter::DisplayClass ; (; FILE * ; , . const char * ; , . int ; , . int ;  . ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 251 of file TInterpreter.h. ◆ DisplayIncludePath(). virtual int TInterpreter::DisplayIncludePath ; (; FILE * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 252 of file TInterpreter.h. ◆ EndOfLineAction(). virtual void TInterpreter::EndOfLineAction ; (; ). pure virtual . Implemented in TCling. ◆ Evaluate(). virtual int TInterpreter::Evaluate ; (; const char * ; , . TInterpreterValue & ;  . ). inlinevirtual . Reimplemented in TCling.; Definition at line 281 of file TInterpreter.h. ◆ Execute() [1/4]. void TInterpreter::Execute ; (; const char * ; method, . const char * ; params, . int * ; error = nullptr . ). overridepure virtual . Execute method on this object with the given parameter string, e.g. ; ""3.14,1,\""text\"""". ; Reimplemented from TObject.; Implemented in TCling. ◆ Execute() [2/4]. void TInterpreter::Execute ; (; TMethod * ; method, . TObjArray * ; params, . int * ; error = nullptr . ). overrideprotectedpure virtual . Execute method on this object with parameters stored in the TObjArray. ; The TObjArray should contain an argv vector like: argv[0] ... argv[n] = the list of TObjString parameters; TObjStringCollectable string class.Definition TObjString.h:28; nconst Int_t nDefinition legend1.C:16. Reimplemented from TObject.; Implemented in TCling. ◆ Execute() [3/4]. virtual void TInterpreter::Execute ; (; TObject * ; obj, . TClass * ; cl, . const char * ; method, . const char * ; params, . int * ; error = nullptr . ). pure virtual . Implemented in TCling. ◆ Execute() [4/4]. virtual void TInterpreter::Execute ; (; TObject * ; obj, . TClass * ; cl, . TMethod * ; method",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInterpreter.html:64689,error,error,64689,doc/master/classTInterpreter.html,https://root.cern,https://root.cern/doc/master/classTInterpreter.html,1,['error'],['error']
Availability,"lements TInterpreter.; Definition at line 3515 of file TCling.cxx. ◆ LoadEnums(). void TCling::LoadEnums ; (; TListOfEnums & ; cl); const. finalvirtual . Create list of pointers to enums for TClass cl. ; Implements TInterpreter.; Definition at line 4395 of file TCling.cxx. ◆ LoadFile(). int TCling::LoadFile ; (; const char * ; path); const. finalvirtual . Load a source file or library called path into the interpreter. ; Reimplemented from TInterpreter.; Definition at line 7500 of file TCling.cxx. ◆ LoadFunctionTemplates(). void TCling::LoadFunctionTemplates ; (; TClass * ; cl); const. finalvirtual . Create list of pointers to function templates for TClass cl. ; Implements TInterpreter.; Definition at line 4442 of file TCling.cxx. ◆ LoadLibraryMap(). Int_t TCling::LoadLibraryMap ; (; const char * ; rootmapfile = nullptr). finalvirtual . Load map between class and library. ; If rootmapfile is specified a specific rootmap file can be added (typically used by ACLiC). In case of error -1 is returned, 0 otherwise. The interpreter uses this information to automatically load the shared library for a class (autoload mechanism), see the AutoLoad() methods below. ; Implements TInterpreter.; Definition at line 5741 of file TCling.cxx. ◆ LoadMacro(). void TCling::LoadMacro ; (; const char * ; filename, . EErrorCode * ; error = nullptr . ). finalvirtual . Load a macro file in cling's memory. ; Implements TInterpreter.; Definition at line 3552 of file TCling.cxx. ◆ LoadPCM(). void TCling::LoadPCM ; (; std::string ; pcmFileNameFullPath). private . Tries to load a rdict PCM, issues diagnostics if it fails. ; Definition at line 1811 of file TCling.cxx. ◆ LoadPCMImpl(). void TCling::LoadPCMImpl ; (; TFile & ; pcmFile). private . Tries to load a PCM from TFile; returns true on success. ; Definition at line 1696 of file TCling.cxx. ◆ LoadText(). Bool_t TCling::LoadText ; (; const char * ; text); const. finalvirtual . Load the declarations from text into the interpreter. ; Note that this",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:113828,error,error,113828,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['error'],['error']
Availability,"len);; 9232#else; 9233 ret = getsockopt(*sock, SOL_SOCKET, SO_ERROR, psockerr, &len);; 9234#endif; 9235 ; 9236 if ((ret == 0) && (sockerr == 0)) {; 9237 conn_ret = 0;; 9238 }; 9239 }; 9240 ; 9241 if (conn_ret != 0) {; 9242 /* Not connected */; 9243 mg_snprintf(NULL,; 9244 NULL, /* No truncation check for ebuf */; 9245 ebuf,; 9246 ebuf_len,; 9247 ""connect(%s:%d): error %s"",; 9248 host,; 9249 port,; 9250 strerror(sockerr));; 9251 closesocket(*sock);; 9252 *sock = INVALID_SOCKET;; 9253 return 0;; 9254 }; 9255 ; 9256 return 1;; 9257}; 9258 ; 9259 ; 9260int; 9261mg_url_encode(const char *src, char *dst, size_t dst_len); 9262{; 9263 static const char *dont_escape = ""._-$,;~()"";; 9264 static const char *hex = ""0123456789abcdef"";; 9265 char *pos = dst;; 9266 const char *end = dst + dst_len - 1;; 9267 ; 9268 for (; ((*src != '\0') && (pos < end)); src++, pos++) {; 9269 if (isalnum((unsigned char)*src); 9270 || (strchr(dont_escape, *src) != NULL)) {; 9271 *pos = *src;; 9272 } else if (pos + 2 < end) {; 9273 pos[0] = '%';; 9274 pos[1] = hex[(unsigned char)*src >> 4];; 9275 pos[2] = hex[(unsigned char)*src & 0xf];; 9276 pos += 2;; 9277 } else {; 9278 break;; 9279 }; 9280 }; 9281 ; 9282 *pos = '\0';; 9283 return (*src == '\0') ? (int)(pos - dst) : -1;; 9284}; 9285 ; 9286/* Return 0 on success, non-zero if an error occurs. */; 9287 ; 9288static int; 9289print_dir_entry(struct de *de); 9290{; 9291 size_t namesize, escsize, i;; 9292 char *href, *esc, *p;; 9293 char size[64], mod[64];; 9294#if defined(REENTRANT_TIME); 9295 struct tm _tm;; 9296 struct tm *tm = &_tm;; 9297#else; 9298 struct tm *tm;; 9299#endif; 9300 ; 9301 /* Estimate worst case size for encoding and escaping */; 9302 namesize = strlen(de->file_name) + 1;; 9303 escsize = de->file_name[strcspn(de->file_name, ""&<>"")] ? namesize * 5 : 0;; 9304 href = (char *)mg_malloc(namesize * 3 + escsize);; 9305 if (href == NULL) {; 9306 return -1;; 9307 }; 9308 mg_url_encode(de->file_name, href, namesize * 3);; 9309 esc = NULL;; 9310",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:266104,error,error,266104,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"len);; 9233#else; 9234 ret = getsockopt(*sock, SOL_SOCKET, SO_ERROR, psockerr, &len);; 9235#endif; 9236 ; 9237 if ((ret == 0) && (sockerr == 0)) {; 9238 conn_ret = 0;; 9239 }; 9240 }; 9241 ; 9242 if (conn_ret != 0) {; 9243 /* Not connected */; 9244 mg_snprintf(NULL,; 9245 NULL, /* No truncation check for ebuf */; 9246 ebuf,; 9247 ebuf_len,; 9248 ""connect(%s:%d): error %s"",; 9249 host,; 9250 port,; 9251 strerror(sockerr));; 9252 closesocket(*sock);; 9253 *sock = INVALID_SOCKET;; 9254 return 0;; 9255 }; 9256 ; 9257 return 1;; 9258}; 9259 ; 9260 ; 9261int; 9262mg_url_encode(const char *src, char *dst, size_t dst_len); 9263{; 9264 static const char *dont_escape = ""._-$,;~()"";; 9265 static const char *hex = ""0123456789abcdef"";; 9266 char *pos = dst;; 9267 const char *end = dst + dst_len - 1;; 9268 ; 9269 for (; ((*src != '\0') && (pos < end)); src++, pos++) {; 9270 if (isalnum((unsigned char)*src); 9271 || (strchr(dont_escape, *src) != NULL)) {; 9272 *pos = *src;; 9273 } else if (pos + 2 < end) {; 9274 pos[0] = '%';; 9275 pos[1] = hex[(unsigned char)*src >> 4];; 9276 pos[2] = hex[(unsigned char)*src & 0xf];; 9277 pos += 2;; 9278 } else {; 9279 break;; 9280 }; 9281 }; 9282 ; 9283 *pos = '\0';; 9284 return (*src == '\0') ? (int)(pos - dst) : -1;; 9285}; 9286 ; 9287/* Return 0 on success, non-zero if an error occurs. */; 9288 ; 9289static int; 9290print_dir_entry(struct de *de); 9291{; 9292 size_t namesize, escsize, i;; 9293 char *href, *esc, *p;; 9294 char size[64], mod[64];; 9295#if defined(REENTRANT_TIME); 9296 struct tm _tm;; 9297 struct tm *tm = &_tm;; 9298#else; 9299 struct tm *tm;; 9300#endif; 9301 ; 9302 /* Estimate worst case size for encoding and escaping */; 9303 namesize = strlen(de->file_name) + 1;; 9304 escsize = de->file_name[strcspn(de->file_name, ""&<>"")] ? namesize * 5 : 0;; 9305 href = (char *)mg_malloc(namesize * 3 + escsize);; 9306 if (href == NULL) {; 9307 return -1;; 9308 }; 9309 mg_url_encode(de->file_name, href, namesize * 3);; 9310 esc = NULL;; 9311",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:266136,error,error,266136,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"lename is assumed to contain at least 3 columns of numbers; convention for format (default=""%lg %lg %lg %lg); format = ""%lg %lg"" read only 2 first columns into X,Y; format = ""%lg %lg %lg"" read only 3 first columns into X,Y and EY; format = ""%lg %lg %lg %lg"" read only 4 first columns into X,Y,EX,EY.; For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files); you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; e.g. option="" \t,;"" for columns of figures separated by any of these characters (' ', '\t', ',', ';'); used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower. ~TGraphErrors(); TGraphErrors default destructor. void Apply(TF1* f); apply function to all the data points; y = f(x,y). The error is calculated as ey=(f(x,y+ey)-f(x,y-ey))/2; This is the same as error(fy) = df/dy * ey for small errors. For generic functions the symmetric errors might become non-symmetric; and are averaged here. Use TGraphAsymmErrors if desired. error on x doesn't change; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. Int_t CalculateScanfFields(const char* fmt); Calculate scan fields. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraphErrors.html:17352,error,errors,17352,root/html532/TGraphErrors.html,https://root.cern,https://root.cern/root/html532/TGraphErrors.html,1,['error'],['errors']
Availability,"lename, Int_t* error = 0, Bool_t padUpdate = kTRUE); TCanvas*MakeDefCanvas() const; voidTObject::MayNotUse(const char* method) const; static Bool_tMemCheck(); voidMessage(Int_t id, const TObject* obj); virtual TDirectory*TDirectory::mkdir(const char* name, const char* title = """"); Bool_tMustClean() const; virtual Bool_tTObject::Notify(); virtual TFile*TDirectory::OpenFile(const char*, Option_t* = """", const char* = """", Int_t = 1, Int_t = 0); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTDirectory::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTDirectory::Print(Option_t* option = """") const; Long_tProcessLine(const char* line, Int_t* error = 0); Long_tProcessLineFast(const char* line, Int_t* error = 0); Long_tProcessLineSync(const char* line, Int_t* error = 0); virtual voidTDirectory::Purge(Short_t = 1); virtual voidTDirectory::pwd() const; virtual Int_tTObject::Read(const char* name); virtual voidTDirectory::ReadAll(Option_t* = """"); Bool_tReadingObject() const; virtual Int_tTDirectory::ReadKeys(Bool_t = kTRUE); virtual Int_tTDirectory::ReadTObject(TObject*, const char*); virtual voidTDirectory::RecursiveRemove(TObject* obj); voidRefreshBrowsers(); virtual TObject*TDirectory::Remove(TObject*); voidRemoveClass(TClass*); voidReset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTDirectory::rmdir(const char* name); static Int_tRootVersionCode(); virtual voidTDirectory::Save(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; voidSaveContext(); virtual Int_tTDirectory::SaveObjectAs(const TObject*, const char* = """", Option_t* = """") const; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TROOT.html:11354,error,error,11354,root/html528/TROOT.html,https://root.cern,https://root.cern/root/html528/TROOT.html,1,['error'],['error']
Availability,"lent in PyROOT: # Directly passing a RooCmdArg:; ROOT.RooMsgService.instance().addStream(ROOT.RooFit.DEBUG, ROOT.RooFit.Topic(ROOT.RooFit.Tracing), ROOT.RooFit.ClassName(""RooGaussian"")); ; # With keyword arguments:; ROOT.RooMsgService.instance().addStream(ROOT.RooFit.DEBUG, Topic = ROOT.RooFit.Tracing, ClassName = ""RooGaussian""). Definition at line 110 of file RooMsgService.h. Classes; struct  StreamConfig;  . Public Member Functions;  ~RooMsgService () override;  ; Int_t addStream (RooFit::MsgLevel level, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Add a message logging stream for message with given RooFit::MsgLevel or higher. ;  ; void clearErrorCount ();  ; Int_t & debugCode ();  ; RooWorkspace * debugWorkspace ();  ; void deleteStream (Int_t id);  Delete stream with given unique ID code. ;  ; Int_t errorCount () const;  ; StreamConfig & getStream (Int_t id);  ; bool getStreamStatus (Int_t id) const;  Get activation status of stream with given unique ID. ;  ; RooFit::MsgLevel globalKillBelow () const;  ; TClass * IsA () const override;  ; template<class T > ; bool isActive (T self, RooFit::MsgTopic topic, RooFit::MsgLevel level);  Check if logging is active for given object/topic/RooFit::MsgLevel combination. ;  ; std::ostream & log (const RooAbsArg *self, RooFit::MsgLevel level, RooFit::MsgTopic facility, bool forceSkipPrefix=false);  Log error message associated with RooAbsArg object self at given level and topic. ;  ; std::ostream & log (const TObject *self, RooFit::MsgLevel level, RooFit::MsgTopic facility, bool forceSkipPrefix=false);  Log error message associated with TObject object self at given level and topic. ;  ; std::ostream & log (std::nullptr_t, RooFit::MsgLevel level, RooFit::MsgTopic facility, bool forceSkipPrefix=false);  ; Int_t numStreams () const;  ; void Print (Option_t *options=nullptr) const override;  Print configuration of mess",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMsgService.html:3043,error,errorCount,3043,doc/master/classRooMsgService.html,https://root.cern,https://root.cern/doc/master/classRooMsgService.html,1,['error'],['errorCount']
Availability,"ler (protected).Definition TObject.cxx:954; TObject::HandleTimervirtual Bool_t HandleTimer(TTimer *timer)Execute action in response of a timer timing out.Definition TObject.cxx:498; TObject::Clonevirtual TObject * Clone(const char *newname="""") constMake a clone of an object using the Streamer facility.Definition TObject.cxx:229; TObject::GetUniqueIDvirtual UInt_t GetUniqueID() constReturn the unique object id.Definition TObject.cxx:462; TObject::kIsOnHeap@ kIsOnHeapobject is on heapDefinition TObject.h:81; TObject::kNotDeleted@ kNotDeletedobject has not been deletedDefinition TObject.h:82; TObject::fBitsUInt_t fBitsbit field status wordDefinition TObject.h:45; TObject::fgDtorOnlystatic Longptr_t fgDtorOnlyobject for which to call dtor only (i.e. no delete)Definition TObject.h:47; TObject::Streamervirtual void Streamer(TBuffer &)Stream an object of class TObject.Definition TObject.cxx:894; TObject::SysErrorvirtual void SysError(const char *method, const char *msgfmt,...) constIssue system error message.Definition TObject.cxx:1007; TObject::IsOnHeapR__ALWAYS_INLINE Bool_t IsOnHeap() constDefinition TObject.h:152; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TObject::UseCurrentStylevirtual void UseCurrentStyle()Set current style settings in this object This function is called when either TCanvas::UseCurrentStyl...Definition TObject.cxx:807; TObject::GetDrawOptionvirtual Option_t * GetDrawOption() constGet option used by the graphics system to draw this object.Definition TObject.cxx:428; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::MayNotUsevoid MayNotUse(const char *method) constUse this method to signal that a method (defined in a base class) may not be called in a derived clas...Definition TObject.cxx:1046; TObject::DrawClonevirtual TObject * DrawClone(Option_t *option="""") constDra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8cxx_source.html:52028,error,error,52028,doc/master/TObject_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TObject_8cxx_source.html,1,['error'],['error']
Availability,"ler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; ROOT::Minuit2::ModularFunctionMinimizer&operator=(const ROOT::Minuit2::ModularFunctionMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Class Charts. Inheritance; Inherited Membe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__ModularFunctionMinimizer.html:2553,toler,toler,2553,root/html526/ROOT__Minuit2__ModularFunctionMinimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__ModularFunctionMinimizer.html,5,['toler'],['toler']
Availability,"ler is found 0 is returned. The file argument is used to access the archive. The archive should be specified as url with the member name as the anchor, e.g. ""root://pcsalo.cern.ch/alice/event_1.zip#tpc.root"", where tpc.root is the file in the archive to be opened. Alternatively the sub-file can be specified via its index number, e.g. ""root://pcsalo.cern.ch/alice/event_1.zip#3"". This function is normally only called via TFile::Open(). ; Definition at line 121 of file TArchiveFile.cxx. ◆ OpenArchive(). virtual Int_t TArchiveFile::OpenArchive ; (; ). pure virtual . Implemented in TZIPFile. ◆ operator=(). TArchiveFile & TArchiveFile::operator= ; (; const TArchiveFile & ; ). privatedelete . Not implemented because TArchiveFile can not be copied. . ◆ ParseUrl(). Bool_t TArchiveFile::ParseUrl ; (; const char * ; url, . TString & ; archive, . TString & ; member, . TString & ; type . ). staticprotected . Try to determine if url contains an anchor specifying an archive member. ; Returns kFALSE in case of an error. ; Definition at line 149 of file TArchiveFile.cxx. ◆ SetCurrentMember(). virtual Int_t TArchiveFile::SetCurrentMember ; (; ). pure virtual . Implemented in TZIPFile. ◆ SetMember() [1/2]. Int_t TArchiveFile::SetMember ; (; const char * ; member). virtual . Explicitely make the specified member the current member. ; Returns -1 in case of error, 0 otherwise. ; Definition at line 88 of file TArchiveFile.cxx. ◆ SetMember() [2/2]. Int_t TArchiveFile::SetMember ; (; Int_t ; idx). virtual . Explicitely make the member with the specified index the current member. ; Returns -1 in case of error, 0 otherwise. ; Definition at line 100 of file TArchiveFile.cxx. ◆ Streamer(). void TArchiveFile::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TZIPFile. ◆ StreamerNVirtual(). void TArchiveFile::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 61 of file TAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArchiveFile.html:15926,error,error,15926,doc/master/classTArchiveFile.html,https://root.cern,https://root.cern/doc/master/classTArchiveFile.html,1,['error'],['error']
Availability,"ler(TSignalHandler* sh); Int_tTProofServ::SetupCommon(); Bool_tTProofServ::UnlinkDataDir(const char* path). private:. virtual Int_tSetup(); Int_tSetupOnFork(const char* ord). Data Members; public:. enum TProofServ::EStatusBits { kHighMemory; };; enum TProofServ::EQueryAction { kQueryOK; kQueryModify; kQueryStop; kQueryEnqueued; };; enum TApplication::EStatusBits { kProcessRemotely; kDefaultApplication; };; enum TApplication::EExitOnException { kDontExit; kExit; kAbort; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TProofServLiteInterruptHandler*fInterruptHandler; TStringfSockPathunix socket path; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofServLite(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TProofServLite(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofServLite.html:16710,avail,available,16710,root/html530/TProofServLite.html,https://root.cern,https://root.cern/root/html530/TProofServLite.html,2,['avail'],['available']
Availability,"lerFunc_t SetErrorHandler ; (; ErrorHandlerFunc_t ; newhandler). Set an errorhandler function. Returns the old handler. ; Definition at line 90 of file TError.cxx. ◆ SysError(). void SysError ; (; const char * ; location, . const char * ; msgfmt, .  ; ... . ). Use this function in case a system (OS or GUI) related error occurred. ; Definition at line 196 of file TError.cxx. ◆ Warning(). void Warning ; (; const char * ; location, . const char * ; msgfmt, .  ; ... . ). Use this function in warning situations. ; Definition at line 229 of file TError.cxx. Variable Documentation. ◆ gErrorAbortLevel. Int_t gErrorAbortLevel. extern . Definition at line 32 of file TError.cxx. ◆ gErrorIgnoreLevel. Int_t gErrorIgnoreLevel. extern . Error handling routines. ; This file defines a number of global error handling routines: Warning(), Error(), SysError() and Fatal(). They all take a location string (where the error happened) and a printf style format string plus vararg's. In the end these functions call an errorhandler function. Initially the MinimalErrorHandler, which is supposed to be replaced by the proper DefaultErrorHandler() ; Definition at line 31 of file TError.cxx. ◆ gPrintViaErrorHandler. Bool_t gPrintViaErrorHandler. extern . Definition at line 33 of file TError.cxx. ◆ kAssertMsg. const char* kAssertMsg. extern . Definition at line 35 of file TError.cxx. ◆ kBreak. constexpr Int_t kBreak = 4000. constexpr . Definition at line 48 of file TError.h. ◆ kCheckMsg. const char* kCheckMsg. extern . Definition at line 36 of file TError.cxx. ◆ kError. constexpr Int_t kError = 3000. constexpr . Definition at line 47 of file TError.h. ◆ kFatal. constexpr Int_t kFatal = 6000. constexpr . Definition at line 50 of file TError.h. ◆ kInfo. constexpr Int_t kInfo = 1000. constexpr . Definition at line 45 of file TError.h. ◆ kPrint. constexpr Int_t kPrint = 0. constexpr . Definition at line 44 of file TError.h. ◆ kSysError. constexpr Int_t kSysError = 5000. constexpr . Definition at line 49",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TError_8h.html:8891,error,errorhandler,8891,doc/master/TError_8h.html,https://root.cern,https://root.cern/doc/master/TError_8h.html,1,['error'],['errorhandler']
Availability,"lerRef(); 42{; 43 static ROOT::Internal::ErrorSystemMsgHandlerFunc_t h;; 44 return h;; 45}; 46 ; 47 ; 48namespace ROOT {; 49namespace Internal {; 50 ; 51ErrorSystemMsgHandlerFunc_t GetErrorSystemMsgHandler(); 52{; 53 return GetErrorSystemMsgHandlerRef();; 54}; 55 ; 56ErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler(ErrorSystemMsgHandlerFunc_t h); 57{; 58 auto oldHandler = GetErrorSystemMsgHandlerRef();; 59 GetErrorSystemMsgHandlerRef() = h;; 60 return oldHandler;; 61}; 62 ; 63/// A very simple error handler that is usually replaced by the TROOT default error handler.; 64/// The minimal error handler is not serialized across threads, so that output of multi-threaded programs; 65/// can get scrambled; 66/// @note `abort()` is only called if `abort_bool` is `true` and `level >= gErrorIgnoreLevel`; 67void MinimalErrorHandler(Int_t level, Bool_t abort_bool, const char *location, const char *msg); 68{; 69 if (level < gErrorIgnoreLevel); 70 return;; 71 ; 72 if (level >= kBreak); 73 fprintf(stderr, ""\n *** Break *** "");; 74 fprintf(stderr, ""<%s>: %s\n"", location ? location : ""unspecified location"", msg);; 75 fflush(stderr);; 76 if (abort_bool) {; 77 fprintf(stderr, ""aborting\n"");; 78 fflush(stderr);; 79 abort();; 80 }; 81}; 82 ; 83} // namespace Internal; 84} // namespace ROOT; 85 ; 86 ; 87////////////////////////////////////////////////////////////////////////////////; 88/// Set an errorhandler function. Returns the old handler.; 89 ; 90ErrorHandlerFunc_t SetErrorHandler(ErrorHandlerFunc_t newhandler); 91{; 92 ErrorHandlerFunc_t oldhandler = gErrorHandler;; 93 gErrorHandler = newhandler;; 94 return oldhandler;; 95}; 96 ; 97////////////////////////////////////////////////////////////////////////////////; 98/// Returns the current error handler function.; 99 ; 100ErrorHandlerFunc_t GetErrorHandler(); 101{; 102 return gErrorHandler;; 103}; 104 ; 105 ; 106////////////////////////////////////////////////////////////////////////////////; 107/// General error handler function.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TError_8cxx_source.html:2227,error,error,2227,doc/master/TError_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TError_8cxx_source.html,2,['error'],"['error', 'errorhandler']"
Availability,"lerator keys.; This is identical to the command "".x macro.C"" in the root prompt; command line. Compiling Macros. The currently loaded macro can be compiled with ACLiC if you select; Tools menu / Compile Macro; by clicking on the corresponding; toolbar button, or by using Ctrl+F7 accelerator keys.; This is identical to the command "".L macro.C++"" in the root prompt; command line. Interrupting a Running Macro. You can interrupt a running macro by selecting the Tools menu /; Interrupt; by clicking on the corresponding toolbar button, or by; using Shift+F5 accelerator keys. Interface to CINT Interpreter. Any command entered in the Command combo box will be passed to; the CINT interpreter. This combo box will keep the commands history; and will allow you to re-execute the same commands during an editor; session. Keyboard Bindings. The following table lists the keyboard shortcuts and accelerator; keys. Key: Action:. Up Move cursor up.; Shift+Up Move cursor up and extend selection.; Down Move cursor down.; Shift+Down Move cursor down and extend selection.; Left Move cursor left.; Shift+Left Move cursor left and extend selection.; Right Move cursor right.; Shift+Right Move cursor right and extend selection.; Home Move cursor to begin of line.; Shift+Home Move cursor to begin of line and extend selection.; Ctrl+Home Move cursor to top of page.; End Move cursor to end of line.; Shift+End Move cursor to end of line and extend selection.; Ctrl+End Move cursor to end of page.; PgUp Move cursor up one page.; Shift+PgUp Move cursor up one page and extend selection.; PgDn Move cursor down one page.; Shift+PgDn Move cursor down one page and extend selection.; Delete Delete character after cursor, or text selection.; BackSpace Delete character before cursor, or text selection.; Ctrl+B Move cursor left.; Ctrl+D Delete character after cursor, or text selection.; Ctrl+E Move cursor to end of line.; Ctrl+H Delete character before cursor, or text selection.; Ctrl+K Delete characters from c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTextEditor.html:3609,down,down,3609,root/html528/TGTextEditor.html,https://root.cern,https://root.cern/root/html528/TGTextEditor.html,6,['down'],['down']
Availability,"les()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooProjectedPdf; RooObjCacheManager _cacheMgr;  ! The cache manager ;  ; RooSetProxy deps;  dependents of this p.d.f ;  ; RooSetProxy intobs;  observables that p.d.f is integrated over ;  ; RooRealProxy intpdf;  p.d.f that is integrated ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Numbe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classxRooProjectedPdf.html:70796,error,errors,70796,doc/master/classxRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html,1,['error'],['errors']
Availability,"lete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTColorWheel.html:5944,error,error,5944,doc/master/classTColorWheel.html,https://root.cern,https://root.cern/doc/master/classTColorWheel.html,1,['error'],['error']
Availability,"lete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHStack.html:15422,error,error,15422,doc/master/classTHStack.html,https://root.cern,https://root.cern/doc/master/classTHStack.html,2,['error'],['error']
Availability,"lete a dummy TUrl so that TObjectStat table does not contain; 2041 // objects that are deleted after recording is turned-off (in next line),; 2042 // like the TUrl::fgSpecialProtocols list entries which are created in the; 2043 // TMacOSXSystem ctor.; 2044 { TUrl dummy(""/dummy""); }; 2045#endif; 2046 TObject::SetObjectStat(gEnv->GetValue(""Root.ObjectStat"", 0));; 2047 }; 2048}; 2049 ; 2050////////////////////////////////////////////////////////////////////////////////; 2051/// Load and initialize thread library.; 2052 ; 2053void TROOT::InitThreads(); 2054{; 2055 if (gEnv->GetValue(""Root.UseThreads"", 0) || gEnv->GetValue(""Root.EnableThreadSafety"", 0)) {; 2056 ROOT::EnableThreadSafety();; 2057 }; 2058}; 2059 ; 2060////////////////////////////////////////////////////////////////////////////////; 2061/// Initialize the interpreter. Should be called only after main(),; 2062/// to make sure LLVM/Clang is fully initialized.; 2063 ; 2064void TROOT::InitInterpreter(); 2065{; 2066 // usedToIdentifyRootClingByDlSym is available when TROOT is part of; 2067 // rootcling.; 2068 if (!dlsym(RTLD_DEFAULT, ""usedToIdentifyRootClingByDlSym""); 2069 && !dlsym(RTLD_DEFAULT, ""usedToIdentifyStaticRoot"")) {; 2070 char *libRIO = gSystem->DynamicPathName(""libRIO"");; 2071 void *libRIOHandle = dlopen(libRIO, RTLD_NOW|RTLD_GLOBAL);; 2072 delete [] libRIO;; 2073 if (!libRIOHandle) {; 2074 TString err = dlerror();; 2075 fprintf(stderr, ""Fatal in <TROOT::InitInterpreter>: cannot load library %s\n"", err.Data());; 2076 exit(1);; 2077 }; 2078 ; 2079 char *libcling = gSystem->DynamicPathName(""libCling"");; 2080 gInterpreterLib = dlopen(libcling, RTLD_LAZY|RTLD_LOCAL);; 2081 delete [] libcling;; 2082 ; 2083 if (!gInterpreterLib) {; 2084 TString err = dlerror();; 2085 fprintf(stderr, ""Fatal in <TROOT::InitInterpreter>: cannot load library %s\n"", err.Data());; 2086 exit(1);; 2087 }; 2088 dlerror(); // reset error message; 2089 } else {; 2090 gInterpreterLib = RTLD_DEFAULT;; 2091 }; 2092 CreateInterpreter_t *C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:79370,avail,available,79370,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,['avail'],['available']
Availability,"lete copy of the underlying object.Definition TH2Poly.cxx:554; TH2Poly::fNCellsInt_t fNCellsNumber of partition cells: fCellX*fCellY.Definition TH2Poly.h:162; TH2Poly::FindBinInt_t FindBin(Double_t x, Double_t y, Double_t z=0) overrideReturns the bin number of the bin at the given coordinate.Definition TH2Poly.cxx:621; TH2Poly::DivideBool_t Divide(TF1 *, Double_t) overrideNOT IMPLEMENTED for TH2Poly.Definition TH2Poly.cxx:1713; TH2Poly::Initializevoid Initialize(Double_t xlow, Double_t xup, Double_t ylow, Double_t yup, Int_t n, Int_t m)Initializes the TH2Poly object. This method is called by the constructor.Definition TH2Poly.cxx:1113; TH2Poly::fCellXInt_t fCellXNumber of partition cells in the x-direction of the histogram.Definition TH2Poly.h:160; TH2Poly::~TH2Poly~TH2Poly() overrideDestructor.Definition TH2Poly.cxx:192; TH2Poly::AddBinvirtual Int_t AddBin(TObject *poly)Adds a new bin to the histogram.Definition TH2Poly.cxx:297; TH2Poly::GetBinErrorDouble_t GetBinError(Int_t bin) const overrideReturns the value of error associated to bin number bin.Definition TH2Poly.cxx:856; TH2Poly::IsIntersectingPolygonBool_t IsIntersectingPolygon(Int_t bn, Double_t *x, Double_t *y, Double_t xclipl, Double_t xclipr, Double_t yclipb, Double_t yclipt)Returns kTRUE if the input polygon (bn, x, y) is intersecting with the input rectangle (xclipl,...Definition TH2Poly.cxx:1205; TH2Poly::AddBool_t Add(const TH1 *h1, Double_t c1) overridePerforms the operation: this = this + c1*h1.Definition TH2Poly.cxx:365; TH2Poly::GetAsymmetryvirtual TH1 * GetAsymmetry(TH1 *, Double_t, Double_t)NOT IMPLEMENTED for TH2Poly.Definition TH2Poly.cxx:1742; TH2Poly::Honeycombvoid Honeycomb(Double_t xstart, Double_t ystart, Double_t a, Int_t k, Int_t s, Option_t *option=""v"")Bins the histogram using a honeycomb structure If the option ""v"" is specified, the hexagons are drawn...Definition TH2Poly.cxx:1026; TH2Poly::MergeLong64_t Merge(TCollection *) overrideMerge TH2Polys Given the special nature of the TH2Pol",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2Poly_8cxx_source.html:72496,error,error,72496,doc/master/TH2Poly_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2Poly_8cxx_source.html,1,['error'],['error']
Availability,"lete copy of the underlying object.Definition TH2Poly.cxx:554; TH2Poly::fNCellsInt_t fNCellsNumber of partition cells: fCellX*fCellY.Definition TH2Poly.h:162; TH2Poly::FindBinInt_t FindBin(Double_t x, Double_t y, Double_t z=0) overrideReturns the bin number of the bin at the given coordinate.Definition TH2Poly.cxx:621; TH2Poly::DivideBool_t Divide(TF1 *, Double_t) overrideNOT IMPLEMENTED for TH2Poly.Definition TH2Poly.cxx:1713; TH2Poly::Initializevoid Initialize(Double_t xlow, Double_t xup, Double_t ylow, Double_t yup, Int_t n, Int_t m)Initializes the TH2Poly object. This method is called by the constructor.Definition TH2Poly.cxx:1113; TH2Poly::fCellXInt_t fCellXNumber of partition cells in the x-direction of the histogram.Definition TH2Poly.h:160; TH2Poly::~TH2Poly~TH2Poly() overrideDestructor.Definition TH2Poly.cxx:192; TH2Poly::AddBinvirtual Int_t AddBin(TObject *poly)Adds a new bin to the histogram.Definition TH2Poly.cxx:297; TH2Poly::GetBinErrorDouble_t GetBinError(Int_t bin) const overrideReturns the value of error associated to bin number bin.Definition TH2Poly.cxx:856; TH2Poly::IsIntersectingPolygonBool_t IsIntersectingPolygon(Int_t bn, Double_t *x, Double_t *y, Double_t xclipl, Double_t xclipr, Double_t yclipb, Double_t yclipt)Returns kTRUE if the input polygon (bn, x, y) is intersecting with the input rectangle (xclipl,...Definition TH2Poly.cxx:1205; TH2Poly::AddBool_t Add(const TH1 *h1, Double_t c1) overridePerforms the operation: this = this + c1*h1.Definition TH2Poly.cxx:365; TH2Poly::IntegralDouble_t Integral(Int_t, Int_t, const Option_t *) const overrideNOT IMPLEMENTED for TH2Poly.Definition TH2Poly.h:139; TH2Poly::GetAsymmetryvirtual TH1 * GetAsymmetry(TH1 *, Double_t, Double_t)NOT IMPLEMENTED for TH2Poly.Definition TH2Poly.cxx:1742; TH2Poly::Honeycombvoid Honeycomb(Double_t xstart, Double_t ystart, Double_t a, Int_t k, Int_t s, Option_t *option=""v"")Bins the histogram using a honeycomb structure If the option ""v"" is specified, the hexagons are drawn..",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2Poly_8h_source.html:20682,error,error,20682,doc/master/TH2Poly_8h_source.html,https://root.cern,https://root.cern/doc/master/TH2Poly_8h_source.html,1,['error'],['error']
Availability,"lete the current Qt object. QRect GetQRect(QPaintDevice& dev); Define the rectangle of the current ROOT selection. void CopyPixmap(int wd, int xpos, int ypos); Copy the pixmap wd at the position xpos, ypos in the current window. void CopyPixmap(const QPixmap& p, Int_t px1, Int_t py1); Copy the pixmap p at the position xpos, ypos in the current window. void CreateOpenGLContext(Int_t wid = 0); Create OpenGL context for win windows (for ""selected"" Window by default); printf("" TGQt::CreateOpenGLContext for wd = %x fSelected= %x, threadID= %d \n"",wd,fSelectedWindow,; GetCurrentThreadId());. void DeleteOpenGLContext(Int_t wid = 0); Delete OpenGL context for win windows (for ""selected"" Window by default). void DrawBox(Int_t x1, Int_t y1, Int_t x2, Int_t y2, TVirtualX::EBoxMode mode); Draw a box.; mode=0 hollow (kHollow); mode=1 solid (kSolid). void DrawCellArray(Int_t x1, Int_t y1, Int_t x2, Int_t y2, Int_t nx, Int_t ny, Int_t* ic); Draw a cell array.; x1,y1 : left down corner; x2,y2 : right up corner; nx,ny : array size; ic : array. Draw a cell array. The drawing is done with the pixel precision; if (X2-X1)/NX (or Y) is not a exact pixel number the position of; the top rigth corner may be wrong. void DrawFillArea(Int_t n, TPoint* xy); Fill area described by polygon.; n : number of points; xy(2,n) : list of points. void DrawLine(Int_t x1, Int_t y1, Int_t x2, Int_t y2); Draw a line.; x1,y1 : begin of line; x2,y2 : end of line. void DrawPolyLine(Int_t n, TPoint* xy); Draw a line through all points.; n : number of points; xy : list of points. void DrawPolyMarker(Int_t n, TPoint* xy); Draw n markers with the current attributes at position x, y.; n : number of markers to draw; xy : x,y coordinates of markers. TQtTextProxy * TextProxy(); Get the text proxy implementation pointer. void SetTextProxy(TQtTextProxy* proxy); Set the text proxy implementation pointer. void DrawText(Int_t x, Int_t y, Float_t angle, Float_t mgn, const char* text, TVirtualX::ETextMode mode). void GetChara",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGQt.html:31360,down,down,31360,root/html602/TGQt.html,https://root.cern,https://root.cern/root/html602/TGQt.html,2,['down'],['down']
Availability,"lete(p)Definition RConfig.hxx:525; b#define b(i)Definition RSha256.hxx:100; c#define c(i)Definition RSha256.hxx:101; a#define a(i)Definition RSha256.hxx:99; Int_tint Int_tDefinition RtypesCore.h:45; Version_tshort Version_tDefinition RtypesCore.h:65; Ssiz_tint Ssiz_tDefinition RtypesCore.h:67; ULong_tunsigned long ULong_tDefinition RtypesCore.h:55; kNPOSconstexpr Ssiz_t kNPOSDefinition RtypesCore.h:117; Long64_tlong long Long64_tDefinition RtypesCore.h:69; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassImp#define ClassImp(name)Definition Rtypes.h:382; TBuffer.h; gDirectory#define gDirectoryDefinition TDirectory.h:384; TEntryListBlock.h; GetCommonStringstatic Int_t GetCommonString(TString a, TString b, TString &c)Get in 'c' the string in common at the beginning of 'a' and 'b'.Definition TEntryList.cxx:1516; operator||TEntryList operator||(TEntryList &elist1, TEntryList &elist2)Definition TEntryList.cxx:1385; TEntryList.h; TError.h; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; TFile.h; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEntryList_8cxx_source.html:56339,error,error,56339,doc/master/TEntryList_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEntryList_8cxx_source.html,1,['error'],['error']
Availability,lete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Double_tfAdaptiveBandwidthFactorGeometric mean of the kernel density estimation from the data for adaptive iteration; TF1*fApproximateBiasOutput Kernel Density Estimation approximate bias; Bool_tfAsymLeft; Bool_tfAsymRight; vector<Double_t>fBinCountNumber of events per bin for binned data option; TKDE::EBinningfBinning; vector<Double_t>fCanonicalBandwidths; vector<Double_t>fDataData events; vector<Double_t>fEventWeightsOriginal data weights; vector<Double_t>fEventsOriginal data storage; TGraphErrors*fGraphGraph with the errors; TKDE::EIterationfIteration; TKDE::TKernel*fKernel; TKDE::KernelFunction_PtrfKernelFunction; vector<Double_t>fKernelSigmas2; TKDE::EKernelTypefKernelType; TF1*fLowerPDFOutput Kernel Density Estimation lower confidence interval PDF function; Double_tfMeanData mean; TKDE::EMirrorfMirror; Bool_tfMirrorLeft; Bool_tfMirrorRight; UInt_tfNBinsNumber of bins for binned data option; UInt_tfNEventsData's number of events; Bool_tfNewDataflag to control when new data are given; TF1*fPDFOutput Kernel Density Estimation PDF function; Double_tfRhoAdjustment factor for sigma; vector<Bool_t>fSettedOptionsUser input options flag; Double_tfSigmaData std deviation; Double_tfSigmaRobData std deviation (robust estimation); Double_tfSumOfCountsData sum of weights; TF1*fUpperPDFOutput Kernel Density Estimation upper confidence interval PDF function; Bool_tfUseBins; UInt_tfUseBinsNEventsIf the algorithm is allowed to use binning this is the minimum number of events to do so; Bool_tfUseMinMaxFromDataflag top control if min and max must be used from data; Bool_tfUseMirroring; Double_tfWeightSizeCaches the weight size; Double_tfXMaxData maximum value; Double_tfXMinData minimum value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TKDE(); Class destructor. void Instantiate(TKDE::Kern,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TKDE.html:10995,error,errors,10995,root/html604/TKDE.html,https://root.cern,https://root.cern/root/html604/TKDE.html,2,"['error', 'robust']","['errors', 'robust']"
Availability,"leteItem(ptr);; 176 }; 177 }; 178};; 179 ; 180/*; 181\class TGenListProxy; 182\ingroup IO; 183Local optimization class.; 184 ; 185Collection proxies get copied. On copy we switch the type of the; 186proxy to the concrete STL type. The concrete types are optimized; 187for element access.; 188**/; 189 ; 190class TGenListProxy : public TGenVectorProxy {; 191public:; 192 // Standard Destructor; 193 TGenListProxy(const TGenCollectionProxy& c) : TGenVectorProxy(c); 194 {; 195 }; 196 // Standard Destructor; 197 ~TGenListProxy() override; 198 {; 199 }; 200 // Return the address of the value at index 'idx'; 201 void* At(UInt_t idx) override; 202 {; 203 if ( fEnv && fEnv->fObject ) {; 204 switch( idx ) {; 205 case 0:; 206 fEnv->fIdx = idx;; 207 return fEnv->fStart = fFirst.invoke(fEnv);; 208 default: {; 209 fEnv->fIdx = idx - fEnv->fIdx;; 210 if (! fEnv->fStart ) fEnv->fStart = fFirst.invoke(fEnv);; 211 void* result = fNext.invoke(fEnv);; 212 fEnv->fIdx = idx;; 213 return result;; 214 }; 215 }; 216 }; 217 Fatal(""TGenListProxy"",""At> Logic error - no proxy object set."");; 218 return nullptr;; 219 }; 220};; 221 ; 222/**; 223\class TGenSetProxy; 224\ingroup IO; 225Localoptimization class.; 226 ; 227Collection proxies get copied. On copy we switch the type of the; 228proxy to the concrete STL type. The concrete types are optimized; 229for element access.; 230*/; 231 ; 232class TGenSetProxy : public TGenVectorProxy {; 233public:; 234 // Standard Destructor; 235 TGenSetProxy(const TGenCollectionProxy& c) : TGenVectorProxy(c); 236 {; 237 }; 238 // Standard Destructor; 239 ~TGenSetProxy() override; 240 {; 241 }; 242 // Return the address of the value at index 'idx'; 243 void* At(UInt_t idx) override; 244 {; 245 if ( fEnv && fEnv->fObject ) {; 246 if ( fEnv->fUseTemp ) {; 247 return (((char*)fEnv->fTemp)+idx*fValDiff);; 248 }; 249 switch( idx ) {; 250 case 0:; 251 fEnv->fIdx = idx;; 252 return fEnv->fStart = fFirst.invoke(fEnv);; 253 default: {; 254 fEnv->fIdx = idx - fEnv->fIdx;; 255 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:6246,error,error,6246,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['error'],['error']
Availability,"leted by user. TSQLResult * GetColumns(const char* dbname, const char* table, const char* wild = 0); List all columns in specified table in the specified database.; Wild is for wildcarding ""t%"" list all columns starting with ""t"".; Returns a pointer to a TSQLResult object if successful, 0 otherwise.; The result object must be deleted by the user. Int_t CreateDataBase(const char* dbname); Create a database. Returns 0 if successful, non-zero otherwise. Int_t DropDataBase(const char* dbname); Drop (i.e. delete) a database. Returns 0 if successful, non-zero; otherwise. Int_t Reload(); Reload permission tables. Returns 0 if successful, non-zero; otherwise. User must have reload permissions. Int_t Shutdown(); Shutdown the database server. Returns 0 if successful, non-zero; otherwise. User must have shutdown permissions. const char * ServerInfo(); Return server info in form ""MySQL <vesrion>"". Bool_t HasStatement() const; Return kTRUE if TSQLStatement class is supported.; Starts from MySQL 4.1. TSQLStatement * Statement(const char* sql, Int_t = 100); Produce TMySQLStatement. Bool_t StartTransaction(); Start transaction. Bool_t Commit(); Commit changes. Bool_t Rollback(); Rollback changes. Bool_t PingVerify(); Execute Ping to SQL Connection.; Since mysql_ping tries to reconnect by itself,; a double call to the mysql function is implemented.; Returns kTRUE if successful. Int_t Ping(); Execute Ping to SQL Connection using the mysql_ping function.; Returns 0 if successful, non-zero in case an error occured. TMySQLServer(const char* db, const char* uid, const char* pw). Int_t GetMaxIdentifierLength(); { return 64; }. » Author: Fons Rademakers 15/02/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/mysql:$Id: TMySQLServer.h 29976 2009-08-31 13:34:53Z rdm $ » Last generated: 2010-09-23 20:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMySQLServer.html:12781,error,error,12781,root/html528/TMySQLServer.html,https://root.cern,https://root.cern/root/html528/TMySQLServer.html,1,['error'],['error']
Availability,"leted by user. TSQLResult * GetColumns(const char* dbname, const char* table, const char* wild = 0); List all columns in specified table in the specified database.; Wild is for wildcarding ""t%"" list all columns starting with ""t"".; Returns a pointer to a TSQLResult object if successful, 0 otherwise.; The result object must be deleted by the user. Int_t CreateDataBase(const char* dbname); Create a database. Returns 0 if successful, non-zero otherwise. Int_t DropDataBase(const char* dbname); Drop (i.e. delete) a database. Returns 0 if successful, non-zero; otherwise. Int_t Reload(); Reload permission tables. Returns 0 if successful, non-zero; otherwise. User must have reload permissions. Int_t Shutdown(); Shutdown the database server. Returns 0 if successful, non-zero; otherwise. User must have shutdown permissions. const char * ServerInfo(); Return server info in form ""MySQL <vesrion>"". Bool_t HasStatement() const; Return kTRUE if TSQLStatement class is supported.; Starts from MySQL 4.1. TSQLStatement * Statement(const char* sql, Int_t = 100); Produce TMySQLStatement. Bool_t StartTransaction(); Start transaction. Bool_t Commit(); Commit changes. Bool_t Rollback(); Rollback changes. Bool_t PingVerify(); Execute Ping to SQL Connection.; Since mysql_ping tries to reconnect by itself,; a double call to the mysql function is implemented.; Returns kTRUE if successful. Int_t Ping(); Execute Ping to SQL Connection using the mysql_ping function.; Returns 0 if successful, non-zero in case an error occured. TMySQLServer(const char* db, const char* uid, const char* pw). Int_t GetMaxIdentifierLength(); { return 64; }. » Author: Fons Rademakers 15/02/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/mysql:$Id: TMySQLServer.h 29976 2009-08-31 13:34:53Z rdm $ » Last generated: 2011-07-04 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMySQLServer.html:12850,error,error,12850,root/html530/TMySQLServer.html,https://root.cern,https://root.cern/root/html530/TMySQLServer.html,1,['error'],['error']
Availability,"leted by user. TSQLResult * GetColumns(const char* dbname, const char* table, const char* wild = 0); List all columns in specified table in the specified database.; Wild is for wildcarding ""t%"" list all columns starting with ""t"".; Returns a pointer to a TSQLResult object if successful, 0 otherwise.; The result object must be deleted by the user. Int_t CreateDataBase(const char* dbname); Create a database. Returns 0 if successful, non-zero otherwise. Int_t DropDataBase(const char* dbname); Drop (i.e. delete) a database. Returns 0 if successful, non-zero; otherwise. Int_t Reload(); Reload permission tables. Returns 0 if successful, non-zero; otherwise. User must have reload permissions. Int_t Shutdown(); Shutdown the database server. Returns 0 if successful, non-zero; otherwise. User must have shutdown permissions. const char * ServerInfo(); Return server info in form ""MySQL <vesrion>"". Bool_t HasStatement() const; Return kTRUE if TSQLStatement class is supported.; Starts from MySQL 4.1. TSQLStatement * Statement(const char* sql, Int_t = 100); Produce TMySQLStatement. Bool_t StartTransaction(); Start transaction. Bool_t Commit(); Commit changes. Bool_t Rollback(); Rollback changes. Bool_t PingVerify(); Execute Ping to SQL Connection.; Since mysql_ping tries to reconnect by itself,; a double call to the mysql function is implemented.; Returns kTRUE if successful. Int_t Ping(); Execute Ping to SQL Connection using the mysql_ping function.; Returns 0 if successful, non-zero in case an error occured. TMySQLServer(const char* db, const char* uid, const char* pw). Int_t GetMaxIdentifierLength(); { return 64; }. » Author: Fons Rademakers 15/02/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/mysql:$Id: TMySQLServer.h 29976 2009-08-31 13:34:53Z rdm $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMySQLServer.html:12850,error,error,12850,root/html532/TMySQLServer.html,https://root.cern,https://root.cern/root/html532/TMySQLServer.html,1,['error'],['error']
Availability,"level p.d.f evaluates to NaN @ numerator=wrap_pdf=486.968, denominator=wrap_pdf_Int[pTV]=829530; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=486.968, denominator=wrap_pdf_Int[pTV]=829530; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.154263 cHl3=2.95902 cHq3=-2.78828; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=59.1285, denominator=wrap_pdf_Int[pTV]=200921; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.338546 cHl3=0.879879 cHq3=-1.35856; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.372361 cHl3=0.491134 cHq3=-0.886807; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=5.8312, denominator=wrap_pdf_Int[pTV]=12183.6; ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(wrap_pdf) Calculating sum-of-weights-squared correction matrix for covariance matrix; [#1] INFO:Input",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html:15646,recover,recover,15646,doc/master/rf712__lagrangianmorphfit_8C.html,https://root.cern,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html,2,['recover'],['recover']
Availability,"level); Set the level for MINUIT error analysis to the given; value. This function overrides the default value; that is taken in the RooMinimizer constructor from; the defaultErrorLevel() method of the input function. void setEps(Double_t eps); Change MINUIT epsilon. void setMinimizerType(const char* type); Choose the minimzer algorithm. RooFitResult* fit(const char* options); Parse traditional RooAbsPdf::fitTo driver options. m - Run Migrad only; h - Run Hesse to estimate errors; v - Verbose mode; l - Log parameters after each Minuit steps to file; t - Activate profile timer; r - Save fit result; 0 - Run Migrad with strategy 0. Int_t minimize(const char* type, const char* alg = 0). Int_t migrad(); Execute MIGRAD. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t hesse(); Execute HESSE. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(); Execute MINOS. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(const RooArgSet& minosParamList); Execute MINOS for given list of parameters. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t seek(); Execute SEEK. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t simplex(); Execute SIMPLEX. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t improve(); Execute IMPROVE. Changes in parameter values; and calculat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMinimizer.html:9629,error,errors,9629,root/html526/RooMinimizer.html,https://root.cern,https://root.cern/root/html526/RooMinimizer.html,4,['error'],['errors']
Availability,"level, const char* location, const char* fmt, va_list va) const; virtual voidDoFill(Long64_t entry, Double_t w, const Double_t* v); voidTObject::MakeZombie(); virtual Bool_tTProofDraw::ProcessSingle(Long64_t, Int_t); voidTProofDraw::SetCanvas(const char* objname); voidTProofDraw::SetDrawAtt(TObject* o); voidTProofDraw::SetError(const char* sub, const char* mesg). Data Members; public:. enum TProofDraw::[unnamed] { kWarn; };; enum TSelector::EAbort { kContinue; kAbortProcess; kAbortFile; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSelector::EAbortTSelector::fAbortabort status; Int_tTProofDraw::fDimensionDimension of the current expression; TEventList*fElistevent list; TList*fEventListsa list of EventLists; TStringTProofDraw::fInitialExp; TList*TSelector::fInputlist of objects available during processing; TTreeFormulaManager*TProofDraw::fManager; Int_tTProofDraw::fMultiplicityIndicator of the variability of the size of entries; Bool_tTProofDraw::fObjEvaltrue if fVar1 returns an object (or pointer to).; TObject*TSelector::fObjectcurrent object if processing object (vs. TTree); TStringTSelector::fOptionoption given to TTree::Process; TSelectorList*TSelector::fOutputlist of objects created during processing; TTreeFormula*TProofDraw::fSelectPointer to selection formula; TStringTProofDraw::fSelection; TStatus*TProofDraw::fStatus; Long64_tTSelector::fStatusselector status; TTree*TProofDraw::fTree; TTreeDrawArgsParserTProofDraw::fTreeDrawArgsParser; TTreeFormula*TProofDraw::fVar[4]Pointer to variable formula. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TProofDrawEventList(); Destructor. void Init(TTree* ); See TProofDraw::Init(). void SlaveBegin(TTree* ); See TProofDraw::SlaveBegin(). void DoFill(Long64_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofDrawEventList.html:6769,avail,available,6769,root/html528/TProofDrawEventList.html,https://root.cern,https://root.cern/root/html528/TProofDrawEventList.html,1,['avail'],['available']
Availability,"lexMinimizer: public ROOT::Minuit2::ModularFunctionMinimizer. Class implementing the required methods for a minimization using Simplex.; API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. Function Members (Methods); public:. virtual~SimplexMinimizer(); virtual const ROOT::Minuit2::MinimumBuilder&Builder() const; virtual ROOT::Minuit2::MinimumBuilder&Builder(); virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__SimplexMinimizer.html:1418,toler,toler,1418,root/html534/ROOT__Minuit2__SimplexMinimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__SimplexMinimizer.html,1,['toler'],['toler']
Availability,"le ; xmin = 0.65, . double ; xmax = 0.99, . double ; ymax = 0.95, . const RooCmdArg * ; formatCmd = nullptr . ). privatevirtual . Add a text box with the current parameter values and their errors to the frame. ; Observables of this PDF appearing in the 'data' dataset will be omitted.; An optional label will be inserted if passed. Multi-line labels can be generated by adding \n to the label string. Use 'sigDigits' to modify the default number of significant digits printed. The 'xmin,xmax,ymax' values specify the initial relative position of the text box in the plot frame. ; Definition at line 2340 of file RooAbsPdf.cxx. ◆ paramOn() [2/2]. RooAbsPdf::paramOn ; (; RooPlot * ; frame, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Add a box with parameter values (and errors) to the specified frame. ; The following named arguments are supported. Type of CmdArg Effect on parameter box . Parameters(const RooArgSet& param) Only the specified subset of parameters will be shown. By default all non-constant parameters are shown. . ShowConstants(bool flag) Also display constant parameters . Format(const char* what,...) Parameter formatting options. . Parameter Format . const char* what Controls what is shown. ""N"" adds name (alternatively, ""T"" adds the title), ""E"" adds error, ""A"" shows asymmetric error, ""U"" shows unit, ""H"" hides the value . FixedPrecision(int n) Controls precision, set fixed number of digits . AutoPrecision(int n) Controls precision. Number of shown digits is calculated from error + n specified additional digits (1 is sensible default) . Label(const chat* label) Add label to parameter box. Use \n for multi-line labels. . Layout(double xmin, double xmax, double ymax) Specify relative position of left/right side of box and top of box. Coor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:135075,error,errors,135075,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['error'],['errors']
Availability,"le CLs () const;  \(CL_{s}\) is simply \(CL_{s+b}/CL_{b}\) (not a method, but a quantity) ;  ; double CLsError () const;  The error on the ratio \(CL_{s+b}/CL_{b}\). ;  ; virtual double CLsplusb () const;  Convert AlternatePValue into a ""confidence level"". ;  ; double CLsplusbError () const;  The error on the ""confidence level"" of the alternative hypothesis. ;  ; const RooArgList * GetAllTestStatisticsData (void) const;  ; RooDataSet * GetAltDetailedOutput (void) const;  ; SamplingDistribution * GetAltDistribution (void) const;  ; bool GetBackGroundIsAlt (void) const;  ; RooDataSet * GetFitInfo () const;  ; RooDataSet * GetNullDetailedOutput (void) const;  ; SamplingDistribution * GetNullDistribution (void) const;  ; bool GetPValueIsRightTail (void) const;  ; double GetTestStatisticData (void) const;  ; bool HasTestStatisticData (void) const;  ; TClass * IsA () const override;  ; virtual double NullPValue () const;  Return p-value for null hypothesis. ;  ; double NullPValueError () const;  The error on the Null p-value. ;  ; HypoTestResult & operator= (const HypoTestResult &other);  assignment operator ;  ; void Print (const Option_t *="""") const override;  Print out some information about the results Note: use Alt/Null labels for the hypotheses here as the Null might be the s+b hypothesis. ;  ; void SetAllTestStatisticsData (const RooArgList *tsd);  ; void SetAltDetailedOutput (RooDataSet *d);  ; void SetAltDistribution (SamplingDistribution *alt);  ; void SetAltPValue (double pvalue);  ; void SetAltPValueError (double err);  ; void SetBackgroundAsAlt (bool l=true);  ; void SetFitInfo (RooDataSet *d);  ; void SetNullDetailedOutput (RooDataSet *d);  ; void SetNullDistribution (SamplingDistribution *null);  ; void SetNullPValue (double pvalue);  ; void SetNullPValueError (double err);  ; void SetPValueIsRightTail (bool pr);  ; void SetTestStatisticData (const double tsd);  ; virtual double Significance () const;  familiar name for the Null p-value in terms of 1-sided ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html:3887,error,error,3887,doc/master/classRooStats_1_1HypoTestResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html,1,['error'],['error']
Availability,"le Tolerance () const;  absolute tolerance ;  . Protected Member Functions; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; std::map< unsigned int, std::pair< double, double > > fBounds;  map specifying the bound using as key the parameter index ;  ; unsigned int fDim;  ; double fMinVal;  ; std::vector< std::string > fNames;  ; const ROOT::Math::IMultiGenFunction * fObjFunc;  ; std::vector< double > fSteps;  ; std::vector< double > fValues;  ; std::vector< ROOT::Math::EMinimVariableType > fVarTypes;  vector specifying the type of variables ;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/BasicMinimizer.h>. Inheritance diagram for ROOT::Math::BasicMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ BasicMinimizer(). ROOT::Math::BasicMinimizer::BasicMinimizer ; (; ). Default constructor. ; Definition at line 43 of file BasicMinimizer.cxx. ◆ ~BasicMinimizer(). ROOT::Math::BasicMinimizer::~BasicMinimizer ; (; ). override . Destructor. ; Definition at line 59 of file BasicMinimizer.cxx. Member Function Documentation. ◆ CheckDimension(). bool ROOT::Math::BasicMinimizer::CheckDimension ; (; ); const. protected . Definition at line 247 of file BasicMinimizer.cxx. ◆ CheckObjFunction(). bool ROOT::Math::BasicMinimizer::CheckObjFunction ; (; ); const. protected . Definition at line 256 of file BasicMinimizer.cxx. ◆ Crea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:11494,error,errors,11494,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,1,['error'],['errors']
Availability,"lfHasModeflag to indicate if a mode is set; intfLeveldebug level; doublefModemode of dist; boolfOneDimflag to indicate if the function is 1 dimension; TUnuran*fUnuranunuran engine class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TUnuranSampler(). ~TUnuranSampler(). bool Init(const char* algo = """"); initialize unuran classes using the given algorithm. bool Init(const ROOT::Math::DistSamplerOptions& opt); default initialization with algorithm name. bool DoInit1D(const char* algo); initilize for 1D sampling; need to create 1D interface from Multidim one; (to do: use directly 1D functions ??). bool DoInitDiscrete1D(const char* algo); initilize for 1D sampling of discrete distributions. bool DoInitND(const char* algo); initilize for 1D sampling. void SetFunction(TF1* pdf); set function from a TF1 pointer. void SetRandom(TRandom* r); set random generator (must be called before Init to have effect). void SetSeed(unsigned int seed); set random generator seed (must be called before Init to have effect). TRandom * GetRandom(); get random generator used. double Sample1D(); sample 1D distributions. bool Sample(double* x); sample multi-dim distributions. bool SampleBin(double prob, double& value, double* error = 0); sample a bin according to Poisson statistics. TUnuranSampler(); default constructor. void SetFunction(const ROOT::Math::IGenFunction& func); set the parent function distribution to use for random sampling (one dim case). void SetPrintLevel(int level). Set the print level; (if level=-1 use default). {fLevel = level;}. void SetMode(double mode). set the mode. void SetArea(double area). set the area. » Author: L. Moneta Fri Sep 22 15:06:47 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-03-15 16:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnuranSampler.html:3635,error,error,3635,root/html534/TUnuranSampler.html,https://root.cern,https://root.cern/root/html534/TUnuranSampler.html,1,['error'],['error']
Availability,"lgorithm as MakeGradientVector() ;  ; Double_t Optimism ();  implementation of eq. ;  ; void UpdateCoefficients ();  Establish maximum gradient for rules, linear terms and the offset. ;  ; void UpdateTstCoefficients ();  Establish maximum gradient for rules, linear terms and the offset for all taus TODO: do not need index range! ;  . Protected Attributes; std::vector< Double_t > fAverageRulePath;  average of each rule, same range ;  ; std::vector< Double_t > fAverageRulePerf;  average of each rule, same range ;  ; std::vector< Double_t > fAverageSelectorPath;  average of each variable over the range fPathIdx1,2 ;  ; std::vector< Double_t > fAverageSelectorPerf;  average of each variable over the range fPerfIdx1,2 ;  ; Double_t fAverageTruth;  average truth, ie sum(y)/N, y=+-1 ;  ; Double_t fbkgave;  Average of F(bkg) ;  ; Double_t fbkgrms;  Rms of F(bkg) ;  ; std::vector< Double_t > fFstar;  vector of F*() - filled in CalcFStar() ;  ; Double_t fFstarMedian;  median value of F*() using ;  ; std::vector< std::vector< Double_t > > fGDCoefLinTst;  linear coeffs - one per tau ;  ; std::vector< std::vector< Double_t > > fGDCoefTst;  rule coeffs - one per tau ;  ; Double_t fGDErrScale;  stop scan at error = scale*errmin ;  ; std::vector< Double_t > fGDErrTst;  error rates per tau ;  ; std::vector< Char_t > fGDErrTstOK;  error rate is sufficiently low <— stores boolean ;  ; Int_t fGDNPathSteps;  number of path steps ;  ; UInt_t fGDNTau;  number of tau-paths - calculated in SetGDTauPrec ;  ; UInt_t fGDNTauTstOK;  number of tau in the test-phase that are ok ;  ; TTree * fGDNtuple;  Gradient path ntuple, contains params for each step along the path. ;  ; std::vector< Double_t > fGDOfsTst;  offset per tau ;  ; Double_t fGDPathStep;  step size along path (delta nu in eq 22, ref 1) ;  ; Double_t fGDTau;  selected threshold parameter (tau in eq 26, ref 1) ;  ; Double_t fGDTauMax;  max threshold parameter (tau in eq 26, ref 1) ;  ; Double_t fGDTauMin;  min threshold parameter (tau i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html:5583,error,error,5583,doc/master/classTMVA_1_1RuleFitParams.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html,3,['error'],['error']
Availability,"lgorithms of the ROOT Mathematical libraries.; Numerical algorithms interfaces and in same cases default implementations for:. numerical integration;; numerical differentiation;; one dimensional root-finding;; one-dimensional minimization;; multi-dimensional minimization (only the ROOT::Math::Minimizer interface). Fitting classes: set of classes for fitting generic data sets. These classes are provided in the namespace ROOT::Fit. They are describing separately in the Fitting chapter. The sets described above is independent of ROOT libraries and can be built as a set of standalone classes. In addition MathCore provides the following classes (depending on ROOT libCore library):. TMath: namespace with mathematical functions and basic function algorithms.; TComplex: class for complex numbers.; Random classes: the base class TRandom and the derived classes TRandom1, TRandom2 and TRandom3, implementing the pseudo-random number generators. A detailed description for all MathCore classes is available in the Doxygen online reference documentation.; 13.2 MathMore Library; The MathMore library provides an advanced collection of functions and C++ classes for numerical computing. This is an extension of the functionality provided by the MathCore library. The MathMore library is implemented wrapping in C++ the GNU Scientific Library (GSL). The current set, provided in the ROOT::Math namespace include:. Special mathematical functions (like Bessel functions, Legendre polynomials, etc.. ); Additional mathematical functions used in statistics such as probability density functions, cumulative distributions functions and their inverse which are not in MathCore but present in the GSL library.; Numerical algorithms for one dimensional functions based on implementation of the GNU Scientific Library (GSL):; Numerical integration classes implementing the interface ROOT::Math::Integrator which is based on the Adaptive integration algorithms of QUADPACK; Numerical differentiation via ROOT::Ma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:658041,avail,available,658041,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avail'],['available']
Availability,"lgorithms.h. ◆ fFunLevel. Double_t TPainter3dAlgorithms::fFunLevel[NumOfColorLevels+1]. private . Definition at line 116 of file TPainter3dAlgorithms.h. ◆ fG8. Double_t TPainter3dAlgorithms::fG8[8][3]. private . Function gradients. ; Definition at line 209 of file TPainter3dAlgorithms.h. ◆ fIc1. Int_t TPainter3dAlgorithms::fIc1. private . Base colour for the 1st Iso Surface. ; Definition at line 49 of file TPainter3dAlgorithms.h. ◆ fIc2. Int_t TPainter3dAlgorithms::fIc2. private . Base colour for the 2nd Iso Surface. ; Definition at line 50 of file TPainter3dAlgorithms.h. ◆ fIc3. Int_t TPainter3dAlgorithms::fIc3. private . Base colour for the 3rd Iso Surface. ; Definition at line 51 of file TPainter3dAlgorithms.h. ◆ fIfrast. Int_t TPainter3dAlgorithms::fIfrast. private . Flag, if it not zero them the algorithm is off. ; Definition at line 180 of file TPainter3dAlgorithms.h. ◆ fJmask. Int_t TPainter3dAlgorithms::fJmask[30]. private . Indices of subsets of n-bit masks (n is from 1 to 30) ; Definition at line 182 of file TPainter3dAlgorithms.h. ◆ fLegoFunction. LegoFunc_t TPainter3dAlgorithms::fLegoFunction. private . Pointer to lego function. ; Definition at line 60 of file TPainter3dAlgorithms.h. ◆ fLevelLine. Int_t TPainter3dAlgorithms::fLevelLine[NumOfLevelLines]. private . Definition at line 121 of file TPainter3dAlgorithms.h. ◆ fLoff. Int_t TPainter3dAlgorithms::fLoff. private . Definition at line 134 of file TPainter3dAlgorithms.h. ◆ fMask. Int_t TPainter3dAlgorithms::fMask[465]. private . Set of masks (30+29+28+...+1)=465. ; Definition at line 183 of file TPainter3dAlgorithms.h. ◆ fMesh. Int_t TPainter3dAlgorithms::fMesh. private . (=1 if mesh to draw, o otherwise) ; Definition at line 44 of file TPainter3dAlgorithms.h. ◆ fNaphi. Int_t TPainter3dAlgorithms::fNaphi. private . Size of fAphi. ; Definition at line 34 of file TPainter3dAlgorithms.h. ◆ fNcolor. Int_t TPainter3dAlgorithms::fNcolor. private . Number of colours per Iso surface. ; Definition at line 48 of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPainter3dAlgorithms.html:47736,mask,masks,47736,doc/master/classTPainter3dAlgorithms.html,https://root.cern,https://root.cern/doc/master/classTPainter3dAlgorithms.html,1,['mask'],['masks']
Availability,"liability of MINUIT error estimates. MINUIT always carries around its own current estimates of the parameter; errors, which it will print out on request, no matter how accurate they; are at any given point in the execution. For example, at initialization,; these estimates are just the starting step sizes as specified by the user.; After a HESSE step, the errors are usually quite accurate,; unless there has been a problem. MINUIT, when it prints out error values,; also gives some indication of how reliable it thinks they are. For; example, those marked CURRENT GUESS ERROR are only working values; not to be believed, and APPROXIMATE ERROR means that they have; been calculated but there is reason to believe that they may not be; accurate. If no mitigating adjective is given, then at least MINUIT believes the; errors are accurate, although there is always a small chance that MINUIT; has been fooled. Some visible signs that MINUIT may have been fooled are:. Warning messages produced during the minimization or error analysis.; Failure to find new minimum.; Value of EDM too big (estimated Distance to Minimum).; Correlation coefficients exactly equal to zero, unless some parameters; are known to be uncorrelated with the others.; Correlation coefficients very close to one (greater than 0.99). This; indicates both an exceptionally difficult problem, and one which has been; badly parameterized so that individual errors are not very meaningful; because they are so highly correlated.; Parameter at limit. This condition, signalled by a MINUIT warning; message, may make both the function minimum and parameter errors; unreliable. See the discussion above ``Getting the right parameter errors; with limits''. The best way to be absolutely sure of the errors, is to use; ``independent'' calculations and compare them, or compare the calculated; errors with a picture of the function. Theoretically, the covariance; matrix for a ``physical'' function must be positive-definite at the; minimum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:8729,error,error,8729,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,6,['error'],['error']
Availability,"lias fwd decl: underlying type not fwd declared; [#6454] - ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS. Release 6.24/04; Published on August 26, 2021; Bugs and Issues fixed in this release. [#8503] - ranluxpp code is using left shift of negative value -1 which is undefined per the C standard; [#8641] - RooStats::HypoTestInverterResult::FindIndex fails if xvalue == 1; [#8767] - [netxng] Crash in on-exit destruction of an TNetXNGFile object; [#8739] - [DF] Cannot read files that don’t have a .root extension with IMT on; [#8713] - [tree] TTreeCache is turned off when fAutoFlush == 0. Release 6.24/06; Published on September 1, 2021; Bugs and Issues fixed in this release. [#8931] - TDirectory::RegisterGDirectory is MT unsafe; [#8011] - Bug in RooAbsPdf::extendedTerm when expected events is negative. Release 6.24/08; Published on September 29, 2022; Bugs and Issues fixed in this release. [ROOT-10829] - pure virtual method called error; [#8933] - CMAKE_INSTALL_PYTHONDIR on macOS creates broken symlinks; [#9017] - Access of deleted object during hadd tear down.; [#8072] - Failures with root 6.24.00 on Fedora 33 ppc64le; [#9297] - ROOT 6.24 debug build failed on ppc64le; [#9424] - ROOT 6.24 failed to build with GCC10 or 11 on ppc64le arch; [#9547] - [RF] RooFit crashes when ROOT is built with Clang 13; [#9543] - roottest-root-treeformula-stl-make crashes during process termination; [#8987] - Missing operator= in code generated by MakeProject; [#7754] - Segfault when using schema evolution; [#8428] - I/O customization rule not run on split sub-object of a non-collection object.; [#9899] - TTree incorrectly run I/O customization rules on “new” data members.; [#9939] - Hadd super slow since TFileMerger modification; [#10170] - Crashes when reading a TTree with a friend; [#8549] - A crash when opening a TTree and its friend on TFile::Close(); [#10131] - Open too many different non-versioned layouts for pair; [#10353] - Thread-safety issue in TClassEdit (StdLen)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:50122,error,error,50122,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,2,"['down', 'error']","['down', 'error']"
Availability,"libname exists and is; readable.; Returns 0 on successful loading, -1 in case libname does not; exist or in case of error and -2 in case of version mismatch. void ls(Option_t* option = """") const; To list all objects of the application.; Loop on all objects created in the ROOT linked lists.; Objects may be files and windows or any other object directly; attached to the ROOT linked list. Int_t LoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); Load a macro in the interpreter's memory. Equivalent to the command line; command "".L filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]].; The possible error codes are defined by TInterpreter::EErrorCode.; If check is true it will only check if filename exists and is; readable.; Returns 0 on successful loading and -1 in case filename does not; exist or in case of error. Long_t Macro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); Execute a macro in the interpreter. Equivalent to the command line; command "".x filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]][(args)].; The possible error codes are defined by TInterpreter::EErrorCode.; If padUpdate is true (default) update the current pad.; Returns the macro return value. void Message(Int_t id, const TObject* obj); Process message id called by obj. Long_t ProcessLine(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed asynchronously by sending; it to the CINT interpreter thread. For explicit synchronous processing; use ProcessLineSync(). On non-Win32 platforms there is no difference; between ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode. In; particular, error will equal to TInterpreter::kProcessing until",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TROOT.html:28127,error,error,28127,root/html528/TROOT.html,https://root.cern,https://root.cern/root/html528/TROOT.html,4,['error'],['error']
Availability,"lic Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; THtml::TFileDefinition Class Reference. . Definition at line 71 of file THtml.h. Public Member Functions; virtual bool GetDeclFileName (const TClass *cl, TString &out_filename, TString &out_fsys, TFileSysEntry **fse=0) const;  Determine cl's declaration file name. ;  ; virtual bool GetImplFileName (const TClass *cl, TString &out_filename, TString &out_fsys, TFileSysEntry **fse=0) const;  Determine cl's implementation file name. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::THelperBase;  THelperBase ();  ;  ~THelperBase () override;  Helper's destructor. ;  ; THtml * GetOwner () const;  ; TClass * IsA () const override;  ; void SetOwner (THtml *html);  Set the THtml object owning this object; if it's already set to a different THtml object than issue an error message and signal to the currently set object that we are not belonging to it anymore. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHtml_1_1TFileDefinition.html:1211,error,error,1211,doc/master/classTHtml_1_1TFileDefinition.html,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileDefinition.html,1,['error'],['error']
Availability,"lic Member Functions;  ChebyshevApprox (ChebyshevApprox &&)=delete;  ;  ChebyshevApprox (const ChebyshevApprox &)=delete;  ;  ChebyshevApprox (const ROOT::Math::IGenFunction &f, double a, double b, size_t n);  Construct a Chebyshev series approximation to a Function f in range [a,b]; constructor based on functions of type IGenFunction. ;  ;  ChebyshevApprox (GSLFuncPointer f, void *p, double a, double b, size_t n);  Construct a Chebyshev series approximation to a Function f in range [a,b]; constructor based on free functions with gsl_function type signature. ;  ; virtual ~ChebyshevApprox ();  ; ChebyshevApprox * Deriv ();  Compute the derivative of the series and return a pointer to a new Chebyshev series with the derivatives coefficients. ;  ; std::pair< double, double > EvalErr (double x) const;  Evaluate the series at a given point x estimating both the series result and its absolute error. ;  ; std::pair< double, double > EvalErr (double x, size_t n) const;  evaluate the series at a given point x to the given order n, estimating both the series result and its absolute error. ;  ; ChebyshevApprox * Integral ();  Compute the integral of the series and return a pointer to a new Chebyshev series with the integral coefficients. ;  ; double operator() (double x) const;  Evaluate the series at a given point x. ;  ; double operator() (double x, size_t n) const;  Evaluate the series at a given point, to (at most) the given order n. ;  ; ChebyshevApprox & operator= (ChebyshevApprox &&)=delete;  ; ChebyshevApprox & operator= (const ChebyshevApprox &)=delete;  . Protected Member Functions; void Initialize (GSLFuncPointer f, void *params, double a, double b);  Initialize series passing function and range. ;  . Private Member Functions;  ChebyshevApprox (size_t n);  construct a Chebyshev series or order n The series must be initialized from a function ;  . Private Attributes; GSLFunctionWrapper * fFunction;  ; size_t fOrder;  ; GSLChebSeries * fSeries;  . #include <Math/Chebys",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html:1779,error,error,1779,doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html,1,['error'],['error']
Availability,"lic:. virtual~VariableMetricMinimizer(); virtual const ROOT::Minuit2::MinimumBuilder&Builder() const; virtual ROOT::Minuit2::MinimumBuilder&Builder(); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(); ROOT::Minuit2::FunctionMinimizerROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minui",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__VariableMetricMinimizer.html:1709,toler,toler,1709,root/html602/ROOT__Minuit2__VariableMetricMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__VariableMetricMinimizer.html,2,['toler'],['toler']
Availability,"licate configuration option is not an error - the last; 19757 * option value will be used. */; 19758 mg_cry_ctx_internal(ctx, ""warning: %s: duplicate option"", name);; 19759 mg_free(ctx->dd.config[idx]);; 19760 }; 19761 ctx->dd.config[idx] = mg_strdup_ctx(value, ctx);; 19762 DEBUG_TRACE(""[%s] -> [%s]"", name, value);; 19763 }; 19764 ; 19765 /* Set default value if needed */; 19766 for (i = 0; config_options[i].name != NULL; i++) {; 19767 default_value = config_options[i].default_value;; 19768 if ((ctx->dd.config[i] == NULL) && (default_value != NULL)) {; 19769 ctx->dd.config[i] = mg_strdup_ctx(default_value, ctx);; 19770 }; 19771 }; 19772 ; 19773 /* Request size option */; 19774 itmp = atoi(ctx->dd.config[MAX_REQUEST_SIZE]);; 19775 if (itmp < 1024) {; 19776 mg_cry_ctx_internal(ctx,; 19777 ""%s too small"",; 19778 config_options[MAX_REQUEST_SIZE].name);; 19779 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19780 mg_snprintf(NULL,; 19781 NULL, /* No truncation check for error buffers */; 19782 error->text,; 19783 error->text_buffer_size,; 19784 ""Invalid configuration option value: %s"",; 19785 config_options[MAX_REQUEST_SIZE].name);; 19786 }; 19787 free_context(ctx);; 19788 pthread_setspecific(sTlsKey, NULL);; 19789 return NULL;; 19790 }; 19791 ctx->max_request_size = (unsigned)itmp;; 19792 ; 19793 /* Queue length */; 19794#if !defined(ALTERNATIVE_QUEUE); 19795 itmp = atoi(ctx->dd.config[CONNECTION_QUEUE_SIZE]);; 19796 if (itmp < 1) {; 19797 mg_cry_ctx_internal(ctx,; 19798 ""%s too small"",; 19799 config_options[CONNECTION_QUEUE_SIZE].name);; 19800 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19801 mg_snprintf(NULL,; 19802 NULL, /* No truncation check for error buffers */; 19803 error->text,; 19804 error->text_buffer_size,; 19805 ""Invalid configuration option value: %s"",; 19806 config_options[CONNECTION_QUEUE_SIZE].name);; 19807 }; 19808 free_context(ctx);; 19809 pthread_setspecific(sTlsKey, NULL);; 19810 return NULL;; 19811 }; 19812 ctx->squeue =; 19813",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:590445,error,error,590445,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,5,['error'],['error']
Availability,"licate configuration option is not an error - the last; 19758 * option value will be used. */; 19759 mg_cry_ctx_internal(ctx, ""warning: %s: duplicate option"", name);; 19760 mg_free(ctx->dd.config[idx]);; 19761 }; 19762 ctx->dd.config[idx] = mg_strdup_ctx(value, ctx);; 19763 DEBUG_TRACE(""[%s] -> [%s]"", name, value);; 19764 }; 19765 ; 19766 /* Set default value if needed */; 19767 for (i = 0; config_options[i].name != NULL; i++) {; 19768 default_value = config_options[i].default_value;; 19769 if ((ctx->dd.config[i] == NULL) && (default_value != NULL)) {; 19770 ctx->dd.config[i] = mg_strdup_ctx(default_value, ctx);; 19771 }; 19772 }; 19773 ; 19774 /* Request size option */; 19775 itmp = atoi(ctx->dd.config[MAX_REQUEST_SIZE]);; 19776 if (itmp < 1024) {; 19777 mg_cry_ctx_internal(ctx,; 19778 ""%s too small"",; 19779 config_options[MAX_REQUEST_SIZE].name);; 19780 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19781 mg_snprintf(NULL,; 19782 NULL, /* No truncation check for error buffers */; 19783 error->text,; 19784 error->text_buffer_size,; 19785 ""Invalid configuration option value: %s"",; 19786 config_options[MAX_REQUEST_SIZE].name);; 19787 }; 19788 free_context(ctx);; 19789 pthread_setspecific(sTlsKey, NULL);; 19790 return NULL;; 19791 }; 19792 ctx->max_request_size = (unsigned)itmp;; 19793 ; 19794 /* Queue length */; 19795#if !defined(ALTERNATIVE_QUEUE); 19796 itmp = atoi(ctx->dd.config[CONNECTION_QUEUE_SIZE]);; 19797 if (itmp < 1) {; 19798 mg_cry_ctx_internal(ctx,; 19799 ""%s too small"",; 19800 config_options[CONNECTION_QUEUE_SIZE].name);; 19801 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19802 mg_snprintf(NULL,; 19803 NULL, /* No truncation check for error buffers */; 19804 error->text,; 19805 error->text_buffer_size,; 19806 ""Invalid configuration option value: %s"",; 19807 config_options[CONNECTION_QUEUE_SIZE].name);; 19808 }; 19809 free_context(ctx);; 19810 pthread_setspecific(sTlsKey, NULL);; 19811 return NULL;; 19812 }; 19813 ctx->squeue =; 19814",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:590478,error,error,590478,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,5,['error'],['error']
Availability,"lication name (from command line, argv[0]) and copy it in gProgName. ;  ; int SetSockOpt (int sock, int opt, int val) override;  Set socket option. ;  ; void Sleep (UInt_t milliSec) override;  Sleep milliSec milli seconds. ;  ; void StackTrace () override;  Print a stack trace, if gEnv entry ""Root.Stacktrace"" is unset or 1, and if the image helper functions can be found (see InitImagehlpFunctions()). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; int Symlink (const char *from, const char *to) override;  Create a symlink from file1 to file2. ;  ; const char * TempDirectory () const override;  Return a user configured or systemwide directory to create temporary files in. ;  ; FILE * TempFileName (TString &base, const char *dir=nullptr, const char *suffix=nullptr) override;  Create a secure temporary file by appending a unique 6 letter string to base. ;  ; int Umask (Int_t mask) override;  Set the process file creation mode mask. ;  ; const char * UnixPathName (const char *unixpathname) override;  Convert a pathname to a unix pathname. ;  ; int Unlink (const char *name) override;  Unlink, i.e. ;  ; int Utime (const char *file, Long_t modtime, Long_t actime) override;  Set a files modification and access times. ;  ; const char * WorkingDirectory () override;  Return the working directory for the default drive. ;  ; const char * WorkingDirectory (char driveletter);  Return working directory for the selected drive driveletter == 0 means return the working durectory for the default drive. ;  ;  Public Member Functions inherited from TSystem;  TSystem (const char *name=""Generic"", const char *title=""Generic System"");  Create a new OS interface. ;  ; virtual ~TSystem ();  Delete the OS interface. ;  ; virtual void AddIncludePath (const char *includePath);  Add a directory to the already set include path. ;  ; virtual void AddLinkedLibs (const char *linkedLib);  Add linkedLib to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWinNTSystem.html:13225,mask,mask,13225,doc/master/classTWinNTSystem.html,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html,2,['mask'],['mask']
Availability,"lication::NoLogoOpt() const; Bool_tTApplication::NoLogOpt() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; virtual voidTApplication::Open(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidPrintLogo(Bool_t lite = kFALSE); virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTApplication::RemoveIdleTimer(); voidTObject::ResetBit(UInt_t f); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidRun(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEchoMode(Bool_t mode); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const char* command); static voidTObject::SetObjectStat(Bool_t stat); virtual const char*SetPrompt(const char* newPrompt); vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRint.html:8031,error,error,8031,root/html528/TRint.html,https://root.cern,https://root.cern/root/html528/TRint.html,1,['error'],['error']
Availability,"lication::SetSignalHandler(TSignalHandler* sh). Data Members; public:. enum TApplication::EStatusBits { kProcessRemotely; kDefaultApplication; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyROOTApplication(const char* acn, Int_t* argc, char** argv, Bool_t bLoadLibs = kTRUE); Create a TApplication derived for use with interactive ROOT from python. A; set of standard, often used libs is loaded if bLoadLibs is true (default). Bool_t CreatePyROOTApplication(Bool_t bLoadLibs = kTRUE); Create a TPyROOTApplication. Returns false if gApplication is not null. Bool_t InitROOTGlobals(); Setup the basic ROOT globals gBenchmark, gStyle, gProgname, if not already; set. Always returns true. Bool_t InitCINTMessageCallback(); Install CINT message callback which will turn CINT error message into; python exceptions. Always returns true. Bool_t InitROOTMessageCallback(); Install ROOT message handler which will turn ROOT error message into; python exceptions. Always returns true. virtual ~TPyROOTApplication(); { }. » Last changed: Mon Dec 7 13:43:16 2009 » Last generated: 2009-12-07 13:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/PyROOT__TPyROOTApplication.html:13465,error,error,13465,root/html526/PyROOT__TPyROOTApplication.html,https://root.cern,https://root.cern/root/html526/PyROOT__TPyROOTApplication.html,2,['error'],['error']
Availability,"lickedItem () const;  ; std::string GetDrawJson () const;  ; std::string GetDrawOptions () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; std::vector< int > GetHighlightedItem () const;  ; int GetJsonComp () const;  Returns JSON compression level for data transfer. ;  ; int GetMaxVisFaces () const;  Returns maximal visible number of faces, ignored when non-positive. ;  ; int GetMaxVisNodes () const;  Returns maximal visible number of nodes, ignored when non-positive. ;  ; TVirtualMutex * GetMutex () const;  Return currently used mutex. ;  ; int GetNSegments () const;  Return of segments for cylindrical shapes, if 0 - default value will be used. ;  ; int GetNumNodes () const;  Number of unique nodes in the geometry. ;  ; std::string GetSearch () const;  ; std::string GetSearchJson () const;  ; bool GetTopVisible () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; int GetVisLevel () const;  Returns maximal visible level. ;  ; bool HasDrawData () const;  Check if there is draw data available. ;  ; bool IsBuild () const;  ; int IsBuildShapes () const;  Returns true if binary 3D model build already by C++ server (default) ;  ; bool IsPreferredOffline () const;  Is offline operations preferred. ;  ; bool IsPrincipalEndNode (int nodeid);  return true when node used in main geometry drawing and does not have childs for such nodes one could provide optimize toggling of visibility flags ;  ; void IssueSignal (const void *handler, const std::string &kind);  Issue signal, which distributed on all handlers - excluding source handler. ;  ; std::vector< int > MakeIdsByStack (const std::vector< int > &stack);  Produce list of node ids for given stack If found nodes preselected - use their ids. ;  ; std::unique_ptr< RGeomNodeInfo > MakeNodeInfo (const std::vector< int > &stack);  Change visibility for specified element Returns true if changes was performed. ;  ; std::vector< std::string > MakePathByStack (const std::vector< int > &stack);  Returns pat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:2766,avail,available,2766,doc/v632/classROOT_1_1RGeomDescription.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html,1,['avail'],['available']
Availability,"lidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TNDArrayT<unsigned int>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum(anonymous)THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension; static THnBase::(anonymous)THnBase::kInvalidInt; static THnBase::(anonymous)THnBase::kNoInt; static THnBase::(anonymous)THnBase::kValidInt. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THn& operator=(const THn&). GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-30 15:12; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnT_unsigned_int_.html:11780,error,error,11780,root/html602/THnT_unsigned_int_.html,https://root.cern,https://root.cern/root/html602/THnT_unsigned_int_.html,2,['error'],"['error', 'errors']"
Availability,"lidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TNDArrayT<unsigned int>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum(anonymous)THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension; static THnBase::(anonymous)THnBase::kInvalidInt; static THnBase::(anonymous)THnBase::kNoInt; static THnBase::(anonymous)THnBase::kValidInt. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THn& operator=(const THn&). GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/THnT_unsigned_int_.html:11780,error,error,11780,root/html604/THnT_unsigned_int_.html,https://root.cern,https://root.cern/root/html604/THnT_unsigned_int_.html,2,['error'],"['error', 'errors']"
Availability,"lidParameterIndex(int ipar) const; check if ipar is a valid parameter index. void FixParameter(Int_t ipar); fix the paramter; std::cout<<""FixParameter""<<std::endl;. void GetConfidenceIntervals(Int_t n, Int_t ndim, const Double_t* x, Double_t* ci, Double_t cl = 0.95); Computes point-by-point confidence intervals for the fitted function; Parameters:; n - number of points; ndim - dimensions of points; x - points, at which to compute the intervals, for ndim > 1; should be in order: (x0,y0, x1, y1, ... xn, yn); ci - computed intervals are returned in this array; cl - confidence level, default=0.95; NOTE, that the intervals are approximate for nonlinear(in parameters) models. void GetConfidenceIntervals(TObject* obj, Double_t cl = 0.95); Computes confidence intervals at level cl. Default is 0.95; The TObject parameter can be a TGraphErrors, a TGraph2DErrors or a TH1,2,3.; For Graphs, confidence intervals are computed for each point,; the value of the graph at that point is set to the function value at that; point, and the graph y-errors (or z-errors) are set to the value of; the confidence interval at that point.; For Histograms, confidence intervals are computed for each bin center; The bin content of this bin is then set to the function value at the bin; center, and the bin error is set to the confidence interval value.; NOTE: confidence intervals are approximate for nonlinear models!. Allowed combinations:; Fitted object Passed object; TGraph TGraphErrors, TH1; TGraphErrors, AsymmErrors TGraphErrors, TH1; TH1 TGraphErrors, TH1; TGraph2D TGraph2DErrors, TH2; TGraph2DErrors TGraph2DErrors, TH2; TH2 TGraph2DErrors, TH2; TH3 TH3. Double_t* GetCovarianceMatrix() const; get the error matrix in a pointer to a NxN array.; excluding the fixed parameters. Double_t GetCovarianceMatrixElement(Int_t i, Int_t j) const; get error matrix element (return all zero if matrix is not available). Int_t GetErrors(Int_t ipar, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& globc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBackCompFitter.html:13910,error,errors,13910,root/html528/TBackCompFitter.html,https://root.cern,https://root.cern/root/html528/TBackCompFitter.html,8,['error'],['errors']
Availability,"lidParameterIndex(int ipar) const; check if ipar is a valid parameter index. void FixParameter(Int_t ipar); fix the paramter; std::cout<<""FixParameter""<<std::endl;. void GetConfidenceIntervals(Int_t n, Int_t ndim, const Double_t* x, Double_t* ci, Double_t cl = 0.95); Computes point-by-point confidence intervals for the fitted function; Parameters:; n - number of points; ndim - dimensions of points; x - points, at which to compute the intervals, for ndim > 1; should be in order: (x0,y0, x1, y1, ... xn, yn); ci - computed intervals are returned in this array; cl - confidence level, default=0.95; NOTE, that the intervals are approximate for nonlinear(in parameters) models. void GetConfidenceIntervals(TObject* obj, Double_t cl = 0.95); Computes confidence intervals at level cl. Default is 0.95; The TObject parameter can be a TGraphErrors, a TGraph2DErrors or a TH1,2,3.; For Graphs, confidence intervals are computed for each point,; the value of the graph at that point is set to the function value at that; point, and the graph y-errors (or z-errors) are set to the value of; the confidence interval at that point.; For Histograms, confidence intervals are computed for each bin center; The bin content of this bin is then set to the function value at the bin; center, and the bin error is set to the confidence interval value.; NOTE: confidence intervals are approximate for nonlinear models!. Allowed combinations:; Fitted object Passed object; TGraph TGraphErrors, TH1; TGraphErrors, AsymmErrors TGraphErrors, TH1; TH1 TGraphErrors, TH1; TGraph2D TGraph2DErrors, TH2; TGraph2DErrors TGraph2DErrors, TH2; TH2 TGraph2DErrors, TH2; TH3 TH3. Double_t* GetCovarianceMatrix() const; get the error matrix in a pointer to a NxN array.; excluding the fixed parameters. Double_t GetCovarianceMatrixElement(Int_t i, Int_t j) const; get error matrix element. Int_t GetErrors(Int_t ipar, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& globcc) const; get fit errors. Int_t GetNumberTota",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBackCompFitter.html:13851,error,errors,13851,root/html526/TBackCompFitter.html,https://root.cern,https://root.cern/root/html526/TBackCompFitter.html,2,['error'],['errors']
Availability,"lient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Copy the specified macro in the cache directory. The macro file is; uploaded if new or updated. If existing, the corresponding header; basename(macro).h or .hh, is also uploaded. For the other arguments; see TProof::Load().; Returns 0 in case of success and -1 in case of error. Int_t CopyMacroToCache(const char* macro, Int_t headerRequired = 0, TSelector** selector = 0, Int_t opt = 0, TList* wrks = 0); Copy a macro, and its possible associated .h[h] file,; to the cache directory, from where the workers can get the file.; If headerRequired is 1, return -1 in case the header is not found.; If headerRequired is 0, try to copy header too.; If headerRequired is -1, don't look for header, only copy macro.; If the selector pionter is not 0, consider the macro to be a selector; and try to load the selector and set it to the pointer.; The mask 'opt' is an or of ESendFileOpt:; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache; Return -1 in case of error, 0 otherwise. Int_t CleanupSandbox(); Remove old sessions dirs keep at most 'Proof.MaxOldSessions' (default 10). TList * GetListOfQueries(Option_t* opt = """"); Get the list of queries. Bool_t RegisterDataSet(const char* dsName, TFileCollection* ds, const char* opt = """"); Register the 'dataSet' on the cluster under the current; user, group and the given 'dataSetName'.; Fails if a dataset named 'dataSetName' already exists, unless 'optStr'; contains 'O', in which case the old dataset is overwritten.; If 'optStr' contains 'V' the dataset files are verified (default no; verification).; Returns kTRUE on success. Int_t SetDataSetTreeName(const char* dataset, const char* treename); Set/Change the name of the default tree. The tree name may contain; subdir specification in the form ""subdir/name"".; Returns 0 on success, -1 otherwise. Bool_t ExistsDataSet(const char* uri); Returns kTRUE if 'dataset' describe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:32391,mask,mask,32391,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,4,"['error', 'mask']","['error', 'mask']"
Availability,"lient. ; Reimplemented from TObject.; Reimplemented in TProofPlayerSuperMaster.; Definition at line 4130 of file TProofPlayer.cxx. ◆ HistoSameAxis(). Bool_t TProofPlayerRemote::HistoSameAxis ; (; TH1 * ; h0, . TH1 * ; h1 . ). Return kTRUE is the histograms 'h0' and 'h1' have the same binning and ranges on the axis (i.e. ; if they can be just Add-ed for merging). ; Definition at line 3811 of file TProofPlayer.cxx. ◆ Incorporate(). Int_t TProofPlayerRemote::Incorporate ; (; TObject * ; newobj, . TList * ; outlist, . Bool_t & ; merged . ). Incorporate object 'newobj' in the list 'outlist'. ; The object is merged with an object of the same name already existing in the list, or just added. The boolean merged is set to kFALSE when the object is just added to 'outlist'; this happens if the Merge() method does not exist or if a object named as 'obj' is not already in the list. If the obj is not 'merged' than it should not be deleted, unless outlist is not owner of its objects. Return 0 on success, -1 on error. ; Definition at line 3629 of file TProofPlayer.cxx. ◆ InitPacketizer(). Int_t TProofPlayerRemote::InitPacketizer ; (; TDSet * ; dset, . Long64_t ; nentries, . Long64_t ; first, . const char * ; defpackunit, . const char * ; defpackdata . ). protected . Init the packetizer Return 0 on success (fPacketizer is correctly initialized), -1 on failure. ; Definition at line 1915 of file TProofPlayer.cxx. ◆ IsA(). TClass * TProofPlayerRemote::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TProofPlayer.; Reimplemented in TProofPlayerSuperMaster.; Definition at line 366 of file TProofPlayer.h. ◆ IsClient(). Bool_t TProofPlayerRemote::IsClient ; (; ); const. overridevirtual . Is the player running on the client? ; Reimplemented from TProofPlayer.; Definition at line 4223 of file TProofPlayer.cxx. ◆ JoinProcess(). Bool_t TProofPlayerRemote::JoinProcess ; (; TList * ; workers). overridevirtual . Prepares the given list of new",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerRemote.html:30589,error,error,30589,doc/master/classTProofPlayerRemote.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerRemote.html,1,['error'],['error']
Availability,"lieves the; errors are accurate, although there is always a small chance that MINUIT; has been fooled. Some visible signs that MINUIT may have been fooled are:. Warning messages produced during the minimization or error analysis.; Failure to find new minimum.; Value of EDM too big (estimated Distance to Minimum).; Correlation coefficients exactly equal to zero, unless some parameters; are known to be uncorrelated with the others.; Correlation coefficients very close to one (greater than 0.99). This; indicates both an exceptionally difficult problem, and one which has been; badly parameterized so that individual errors are not very meaningful; because they are so highly correlated.; Parameter at limit. This condition, signalled by a MINUIT warning; message, may make both the function minimum and parameter errors; unreliable. See the discussion above ``Getting the right parameter errors; with limits''. The best way to be absolutely sure of the errors, is to use; ``independent'' calculations and compare them, or compare the calculated; errors with a picture of the function. Theoretically, the covariance; matrix for a ``physical'' function must be positive-definite at the; minimum, although it may not be so for all points far away from the; minimum, even for a well-determined physical problem. Therefore, if MIGRAD; reports that it has found a non-positive-definite covariance matrix, this; may be a sign of one or more of the following:. A non-physical region:. On its way to the minimum, MIGRAD may have traversed a region which has; unphysical behaviour, which is of course not a serious problem as long as; it recovers and leaves such a region. An underdetermined problem:. If the matrix is not positive-definite even at the minimum, this may mean; that the solution is not well-defined, for example that there are more; unknowns than there are data points, or that the parameterization of the; fit contains a linear dependence. If this is the case, then MINUIT (or any; other pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:9471,error,errors,9471,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,12,['error'],['errors']
Availability,"lifetime, const TString& pType, Double_t width, Int_t iSpin, Int_t iParity, Int_t iConjugation, Int_t iIsospin, Int_t iIsospinZ, Int_t gParity, Int_t lepton, Int_t baryon, Bool_t stable, Bool_t shortlived = kFALSE, const TString& subType = """", Int_t antiEncoding = 0, Double_t magMoment = 0.0, Double_t excitation = 0.0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawOneSpec(const char* name); virtual voidTObject::Dump() constMENU ; virtual Double_tEdep() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEtot() const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceDecayTime(Float_t); virtual voidGckmat(Int_t imed, char* name); virtual voidGdhead(Int_t, const char*, Double_t = 0); virtual voidGdman(Double_t, Double_t, const char*); virtual voidGdopt(const char*, const char*); virtual voidGdraw(const char*, Double_t theta = 30, Double_t phi = 30, Double_t psi = 0, Double_t u0 = 10, Double_t v0 = 10, Double_t ul = 0.01, Double_t vl = 0.01); virtual voidGdtom(Float_t* xd, Float_t* xm, Int_t iflag); virtual voidGdtom(Double_t* xd, Double_t* xm, Int_t iflag); virtual TVirtualMCDecayer*GetDecayer() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualMC.html:3427,error,error,3427,root/html528/TVirtualMC.html,https://root.cern,https://root.cern/root/html528/TVirtualMC.html,2,['error'],['error']
Availability,lighted background color; Handle_tTGObject::fIdX11/Win32 Window identifier; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; Bool_tfMouseOntrue when mouse on button; const TGWindow*TGWidget::fMsgWindowwindow which handles widget events; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; ULong_tfNormBgnormal background color; GContext_tTGButton::fNormGCgraphics context used for drawing button; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; EButtonStateTGButton::fStatebutton state; Bool_tTGButton::fStayDowntrue if button has to stay down; UInt_tTGButton::fTHeightbutton height; UInt_tTGButton::fTWidthbutton width; TGToolTip*TGButton::fTiptool tip associated with button; void*TGButton::fUserDatapointer to user data structure; Int_tTGWidget::fWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tTGWidget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGButton::fgHibckgndGC; static const TGGC*TGFram,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGDockButton.html:18194,down,down,18194,root/html528/TGDockButton.html,https://root.cern,https://root.cern/root/html528/TGDockButton.html,1,['down'],['down']
Availability,"lignment Vertical; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Float_tfTextMagnitudeText Magnitude; Float_tTAttText::fTextSizeText size; TStringTNamed::fTitleobject title; DrawablefVisRootWinRoot window with fVisual to be used to create GC's and XImages; RVisual*fVisualPointer to visual used by all windows; ULong_tfWhitePixelValue of white pixel in colormap. private:. TExMap*fColorsHash list of colors; CursorfCursors[19]List of cursors; Int_tfMaxNumberOfWindowsMaximum number of windows; XWindow_t*fWindowsList of windows; void*fXEventCurrent native (X11) event. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGX11(); Default constructor. TGX11(const char* name, const char* title); Normal Constructor. TGX11(const TGX11& org); Copy constructor. Currently only used by TGX11TTF. ~TGX11(); Destructor. Bool_t Init(void* display); Initialize X11 system. Returns kFALSE in case of failure. Bool_t AllocColor(Colormap cmap, RXColor* color); Allocate color in colormap. If we are on an <= 8 plane machine; we will use XAllocColor. If we are on a >= 15 (15, 16 or 24) plane; true color machine we will calculate the pixel value using:; for 15 and 16 bit true colors have 6 bits precision per color however; only the 5 most significant bits are used in the color index.; Except for 16 bits where green uses all 6 bits. I.e.:; 15 bits = rrrrrgggggbbbbb; 16 bits = rrrrrggggggbbbbb; for 24 bits each r, g and b are represented by 8 bits. Since all colors are set with a max of 65535 (16 bits) per r, g, b; we just right shift them by 10, 11 and 10 bits for 16 planes, and; (10, 10, 10 for 15 planes) and by 8 bits for 24 planes.; Returns kFALSE in case color allocation failed. void QueryColors(Colormap cmap, RXColor* colors, Int_t ncolors); Returns the current RGB value for the pixel in the XColor structure. void ClearPixmap(Drawable* pix); Clear the pixmap pix. void ClearW",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGX11.html:26632,failure,failure,26632,root/html602/TGX11.html,https://root.cern,https://root.cern/root/html602/TGX11.html,2,['failure'],['failure']
Availability,"limit, or it may be because the minimizer has; 137become ``blocked'' at a limit. This may normally happen only if the; 138parameter is so close to a limit (internal value at an odd multiple of; 139\f$\pm \frac{\pi}{2}\f$; 140that MINUIT prints a warning to this effect when it prints; 141the parameter values.; 142 ; 143The minimizer can become blocked at a limit, because at a limit; 144the derivative seen by the minimizer; 145\f$\partial F / \partial P_{\mathrm{int}}\f$; 146is zero no matter what the real derivative; 147\f$\partial F / \partial P_{\mathrm{ext}}\f$ is.; 148 ; 149\f[; 150\frac{\partial F}{\partial P_{\mathrm{int}}} =; 151\frac{\partial F}{\partial P_{\mathrm{ext}}}; 152\frac{\partial P_{\mathrm{ext}}}{\partial P_{\mathrm{int}}} =; 153\frac{\partial F}{\partial P_{\mathrm{ext}}} = 0; 154\f]; 155 ; 156#### Getting the right parameter errors with limits.; 157 ; 158In the best case, where the minimum is far from any limits, MINUIT will; 159correctly transform the error matrix, and the parameter errors it reports; 160should be accurate and very close to those you would have got without; 161limits. In other cases (which should be more common, since otherwise you; 162wouldn't need limits), the very meaning of parameter errors becomes; 163problematic. Mathematically, since the limit is an absolute constraint on; 164the parameter, a parameter at its limit has no error, at least in one; 165direction. The error matrix, which can assign only symmetric errors, then; 166becomes essentially meaningless.; 167 ; 168### Interpretation of Parameter Errors:; 169 ; 170There are two kinds of problems that can arise: the reliability of; 171MINUIT's error estimates, and their statistical interpretation, assuming; 172they are accurate.; 173 ; 174### Statistical interpretation:; 175 ; 176For discussion of basic concepts, such as the meaning of the elements of; 177the error matrix, or setting of exact confidence levels see:; 178 ; 179 1. F.James.; 180 Determining the statistical",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:7645,error,error,7645,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,2,['error'],"['error', 'errors']"
Availability,"limit. This may normally happen only if the parameter is so close to a limit (internal value at an odd multiple of \(\pm \frac{\pi}{2}\) that Minuit prints a warning to this effect when it prints the parameter values. The minimized can become blocked at a limit, because at a limit the derivative seen by the minimized \(\frac{\partial F}{\partial Pint}\) is zero no matter what the real derivative \(\frac{\partial F}{\partial Pext}\) is.; \[; \left(\frac{\partial F}{\partial Pint}\right) =; \left(\frac{\partial F}{\partial Pext}\right); \left(\frac{\partial Pext}{\partial Pint}\right) =; \left(\frac{\partial F}{\partial Pext}\right) = 0; \]; 5.9.3.2 Getting the Right Parameter Errors with Limits; In the best case, where the minimum is far from any limits, Minuit will correctly transform the error matrix, and the parameter errors it reports should be accurate and very close to those you would have got without limits. In other cases (which should be more common, since otherwise you would not need limits), the very meaning of parameter errors becomes problematic. Mathematically, since the limit is an absolute constraint on the parameter, a parameter at its limit has no error, at least in one direction. The error matrix, which can assign only symmetric errors, then becomes essentially meaningless.; 5.9.3.3 Interpretation of Parameter Errors; There are two kinds of problems that can arise: the reliability of Minuit’s error estimates, and their statistical interpretation, assuming they are accurate.; 5.9.3.4 Statistical Interpretation; For discussion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels see the articles:. F.James. Determining the statistical Significance of experimental Results. Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet. Statistical Methods in Experimental Physics. North-Holland, 1971. 5.9.4 Reliability of Minuit Error Estimate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:220221,error,errors,220221,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['error'],['errors']
Availability,"line 1204 of file Minuit2Minimizer.cxx. ◆ IsFixedVariable(). bool ROOT::Minuit2::Minuit2Minimizer::IsFixedVariable ; (; unsigned int ; ivar); const. overridevirtual . query if an existing variable is fixed (i.e. ; considered constant in the minimization) note that by default all variables are not fixed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 356 of file Minuit2Minimizer.cxx. ◆ MinGradient(). const double * ROOT::Minuit2::Minuit2Minimizer::MinGradient ; (; ); const. inlineoverridevirtual . return pointer to gradient values at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 146 of file Minuit2Minimizer.h. ◆ Minimize(). bool ROOT::Minuit2::Minuit2Minimizer::Minimize ; (; ). overridevirtual . method to perform the minimization. ; Return false in case the minimization did not converge. In this case a status code different than zero is set (retrieved by the derived method Minimizer::Status() )""; status = 1 : Covariance was made pos defined status = 2 : Hesse is invalid status = 3 : Edm is above max status = 4 : Reached call limit status = 5 : Any other failure ; Implements ROOT::Math::Minimizer.; Definition at line 465 of file Minuit2Minimizer.cxx. ◆ MinosStatus(). int ROOT::Minuit2::Minuit2Minimizer::MinosStatus ; (; ); const. inlineoverridevirtual . MINOS status code of last Minos run status & 1 > 0 : invalid lower error status & 2 > 0 : invalid upper error status & 4 > 0 : invalid because maximum number of function calls exceeded status & 8 > 0 : a new minimum has been found status & 16 > 0 : error is truncated because parameter is at lower/upper limit. ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 234 of file Minuit2Minimizer.h. ◆ MinValue(). double ROOT::Minuit2::Minuit2Minimizer::MinValue ; (; ); const. inlineoverridevirtual . return minimum function value ; Implements ROOT::Math::Minimizer.; Definition at line 137 of file Minuit2Minimizer.h. ◆ NCalls(). unsigned int ROOT::Minuit2::Minuit2Minimizer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html:20740,failure,failure,20740,doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html,1,['failure'],['failure']
Availability,"line 1686 of file TSystem.cxx. ◆ TempDirectory(). const char * TSystem::TempDirectory ; (; ); const. virtual . Return a user configured or systemwide directory to create temporary files in. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 1482 of file TSystem.cxx. ◆ TempFileName(). FILE * TSystem::TempFileName ; (; TString & ; base, . const char * ; dir = nullptr, . const char * ; suffix = nullptr . ). virtual . Create a secure temporary file by appending a unique 6 letter string to base. ; The file will be created in a standard (system) directory or in the directory provided in dir. Optionally one can provide suffix append to the final name - like extension "".txt"" or "".html"". The full filename is returned in base and a filepointer is returned for safely writing to the file (this avoids certain security problems). Returns 0 in case of error. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 1499 of file TSystem.cxx. ◆ Umask(). int TSystem::Umask ; (; Int_t ; mask). virtual . Set the process file creation mode mask. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 1517 of file TSystem.cxx. ◆ UnixPathName(). const char * TSystem::UnixPathName ; (; const char * ; name). virtual . Convert from a local pathname to a Unix pathname. ; E.g. from \user\root to /user/root. ; Reimplemented in TWinNTSystem.; Definition at line 1063 of file TSystem.cxx. ◆ Unlink(). int TSystem::Unlink ; (; const char * ; name). virtual . Unlink, i.e. ; remove, a file.; If the file is currently open by the current or another process, the behavior of this function is implementation-defined (in particular, POSIX systems unlink the file name, while Windows does not allow the file to be deleted and the operation is a no-op). ; Reimplemented in TUnixSystem, TWinNTSystem, TDavixSystem, TNetSystem, TWebSystem, and TNetXNGSystem.; Definition at line 1381 of file TSystem.cxx. ◆ Unload(). void TSystem::Unload ; (; const char * ; module). virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem.html:95458,mask,mask,95458,doc/master/classTSystem.html,https://root.cern,https://root.cern/doc/master/classTSystem.html,1,['mask'],['mask']
Availability,"line 26 of file TGraph2DAsymmErrors.h. Public Member Functions;  TGraph2DAsymmErrors ();  TGraph2DAsymmErrors default constructor. ;  ;  TGraph2DAsymmErrors (const TGraph2DAsymmErrors &);  Copy constructor. ;  ;  TGraph2DAsymmErrors (Int_t n);  TGraph2DAsymmErrors normal constructor the arrays are preset to zero. ;  ;  TGraph2DAsymmErrors (Int_t n, Double_t *x, Double_t *y, Double_t *z, Double_t *exl=nullptr, Double_t *exh=nullptr, Double_t *eyl=nullptr, Double_t *eyh=nullptr, Double_t *ezl=nullptr, Double_t *ezh=nullptr, Option_t *option="""");  TGraph2DAsymmErrors constructor with doubles vectors as input. ;  ;  ~TGraph2DAsymmErrors () override;  TGraph2DAsymmErrors destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t z, Double_t exl=0., Double_t exh=0., Double_t eyl=0., Double_t eyh=0., Double_t ezl=0., Double_t ezh=0.);  Add a 3D point with asymmetric errorbars to an existing graph. ;  ; Double_t GetErrorX (Int_t bin) const override;  Returns the combined error along X at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorXhigh (Int_t i) const;  Returns the high error along X at point i. ;  ; Double_t GetErrorXlow (Int_t i) const;  Returns the low error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const;  Returns the high error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t i) const;  Returns the low error along Y at point i. ;  ; Double_t GetErrorZ (Int_t bin) const override;  Returns the combined error along Z at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorZhigh (Int_t i) const;  Returns the high error along Z at point i. ;  ; Double_t GetErrorZlow (Int_t i) const;  Returns the low error along Z at point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const ov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DAsymmErrors.html:4014,error,error,4014,doc/master/classTGraph2DAsymmErrors.html,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html,1,['error'],['error']
Availability,"line 358 of file RooSimultaneous.cxx. ◆ RooSimultaneous() [7/7]. RooSimultaneous::RooSimultaneous ; (; const char * ; name, . const char * ; title, . RooSimultaneous::InitializationOutput && ; initInfo . ). private . Private internal constructor. ; Definition at line 162 of file RooSimultaneous.cxx. Member Function Documentation. ◆ addPdf(). bool RooSimultaneous::addPdf ; (; const RooAbsPdf & ; pdf, . const char * ; catLabel . ). Associate given PDF with index category state label 'catLabel'. ; The name state must be already defined in the index category.; RooSimultaneous can function without having a PDF associated with every single state. The normalization in such cases is taken from the number of registered PDFs, but getVal() will fail if called for an unregistered index state.; PDFs may not overlap (i.e. share any variables) with the index category (function). Parameters. [in]pdfPDF to be added. ; [in]catLabelName of the category state to be associated to the PDF. . Returnstrue in case of failure. ; Definition at line 390 of file RooSimultaneous.cxx. ◆ analyticalIntegralWN(). double RooSimultaneous::analyticalIntegralWN ; (; Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Return analytical integration defined by given code. ; Reimplemented from RooAbsPdf.; Definition at line 571 of file RooSimultaneous.cxx. ◆ autoGenContext(). RooAbsGenContext * RooSimultaneous::autoGenContext ; (; const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose = false, . bool ; autoBinned = true, . const char * ; binnedTag = """" . ); const. overridevirtual . Reimplemented from RooAbsPdf.; Definition at line 960 of file RooSimultaneous.cxx. ◆ Class(). static TClass * RooSimultaneous::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooSimultaneous::Class_Name ; (; ). static . ReturnsName of this class . ◆ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimultaneous.html:81940,failure,failure,81940,doc/master/classRooSimultaneous.html,https://root.cern,https://root.cern/doc/master/classRooSimultaneous.html,1,['failure'],['failure']
Availability,"line 361 of file FitResult.cxx. ◆ IsParameterFixed(). bool ROOT::Fit::FitResult::IsParameterFixed ; (; unsigned int ; ipar); const. query if a parameter is fixed ; Definition at line 365 of file FitResult.cxx. ◆ IsValid(). bool ROOT::Fit::FitResult::IsValid ; (; ); const. inline . True if fit successful, otherwise false. ; A fit is considered successful if the minimizer succeeded in finding the minimum. It could happen that subsequent operations like error analysis (e.g. Minos) failed. In that case the status can be still true if the original minimization algorithm succeeded in finding the minimum. One can query in that case the minimizer return status using Status(). It is responsibility to the Minimizer class to tag a found minimum as valid or not and to produce also a status code. ; Definition at line 105 of file FitResult.h. ◆ LowerError(). double ROOT::Fit::FitResult::LowerError ; (; unsigned int ; i); const. lower Minos error. If Minos has not run for parameter i return the parabolic error ; Definition at line 332 of file FitResult.cxx. ◆ MinFcnValue(). double ROOT::Fit::FitResult::MinFcnValue ; (; ); const. inline . Return value of the objective function (chi2 or likelihood) used in the fit. ; Definition at line 111 of file FitResult.h. ◆ MinimizerType(). const std::string & ROOT::Fit::FitResult::MinimizerType ; (; ); const. inline . minimization quantities ; minimizer type ; Definition at line 93 of file FitResult.h. ◆ ModelFunction(). std::shared_ptr< IModelFunction > ROOT::Fit::FitResult::ModelFunction ; (; ). inlineprotected . Return pointer non const pointer to model (fit) function with fitted parameter values. ; used by Fitter class ; Definition at line 337 of file FitResult.h. ◆ NCalls(). unsigned int ROOT::Fit::FitResult::NCalls ; (; ); const. inline . Number of function calls to find minimum. ; Definition at line 114 of file FitResult.h. ◆ Ndf(). unsigned int ROOT::Fit::FitResult::Ndf ; (; ); const. inline . Number of degree of freedom. ; Definition ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:19127,error,error,19127,doc/master/classROOT_1_1Fit_1_1FitResult.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html,1,['error'],['error']
Availability,"line 586 of file TMultiDimFit.cxx. Member Function Documentation. ◆ AddRow(). void TMultiDimFit::AddRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ; The mean of the variables and quantity is calculated on the fly, as outlined in TPrincipal::AddRow. This sample should be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 611 of file TMultiDimFit.cxx. ◆ AddTestRow(). void TMultiDimFit::AddTestRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ; This sample needn't be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 690 of file TMultiDimFit.cxx. ◆ Browse(). void TMultiDimFit::Browse ; (; TBrowser * ; b). overridevirtual . Browse the TMultiDimFit object in the TBrowser. ; Reimplemented from TObject.; Definition at line 737 of file TMultiDimFit.cxx. ◆ Class(). static TClass * TMultiDimFit::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMultiDimFit::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMultiDimFit::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 207 of file TMultiDimFit.h. ◆ Clear(). vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:40706,error,error,40706,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['error'],['error']
Availability,"line 650 of file TUnfoldSys.cxx. ◆ DeclFileName(). static const char * TUnfoldSys::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 146 of file TUnfoldSys.h. ◆ DoBackgroundSubtraction(). void TUnfoldSys::DoBackgroundSubtraction ; (; void ; ). protected . perform background subtraction ; This prepares the data members for the base class TUnfold, such that the background is properly taken into account. ; Definition at line 377 of file TUnfoldSys.cxx. ◆ GetBackground(). void TUnfoldSys::GetBackground ; (; TH1 * ; bgrHist, . const char * ; bgrSource = nullptr, . const Int_t * ; binMap = nullptr, . Int_t ; includeError = 3, . Bool_t ; clearHist = kTRUE . ); const. get background into a histogram ; Parameters. [in,out]bgrHisttarget histogram, content and errors will be altered ; [in]bgrSource(default=nullptr) name of backgrond source or zero to add all sources of background ; [in]binMap(default=nullptr) remap histogram bins ; [in]includeError(default=3) include uncorrelated(1), correlated (2) or both (3) sources of uncertainty in the histogram errors ; [in]clearHist(default=true) reset histogram before adding up the specified background sources. the array binMap is explained with the method GetOutput(). The flag clearHist may be used to add background from several sources in successive calls to GetBackground(). ; Definition at line 565 of file TUnfoldSys.cxx. ◆ GetBgrSources(). TSortedList * TUnfoldSys::GetBgrSources ; (; void ; ); const. Get a new list of all background sources. ; The user is responsible for deleting the list get list of name of background sources ; Definition at line 1528 of file TUnfoldSys.cxx. ◆ GetChi2Sys(). Double_t TUnfoldSys::GetChi2Sys ; (; void ; ). calculate total chi**2 including all systematic errors ; Definition at line 1366 of file TUnfoldSys.cxx. ◆ GetDeltaSysBackgroundScale(). Bool_t TUnfoldSys::GetDeltaSysBackgroundScale ; (; TH1 * ; hist_delta, . const char * ; source, . c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:33982,error,errors,33982,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,2,['error'],['errors']
Availability,"line. This is useful to show; 199exclusion zones.; 200 ; 201This drawing mode is activated when the absolute value of the graph line; 202width (set by `SetLineWidth()`) is greater than 99. In that; 203case the line width number is interpreted as:; 204 ; 205 100*ff+ll = ffll; 206 ; 207- The two digits number `ll` represent the normal line width; 208- The two digits number `ff` represent the filled area width.; 209- The sign of ""ffll"" allows to flip the filled area from one side of the line to the other.; 210 ; 211The current fill area attributes are used to draw the hatched zone.; 212 ; 213Begin_Macro(source); 214../../../tutorials/graphs/exclusiongraph.C; 215End_Macro; 216 ; 217\anchor GrP3; 218### Graphs with error bars; 219Three classes are available to handle graphs with error bars:; 220`TGraphErrors`, `TGraphAsymmErrors` and `TGraphBentErrors`.; 221The following drawing options are specific to graphs with error bars:; 222 ; 223| Option | Description |; 224|----------|-------------------------------------------------------------------|; 225| ""Z"" | Do not draw small horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. |; 226| "">"" | An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. |; 227| \""\|>\"" | A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. |; 228| ""X"" | Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) |; 229| \""\|\|\"" | Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. |; 230| ""[]"" | Does the same as option \""\|\|\"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It make",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:7880,error,error,7880,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,2,['error'],['error']
Availability,"lineoverridevirtual . Default Draw method for all objects. ; Reimplemented from TObject.; Definition at line 431 of file TTree.h. ◆ DropBaskets(). void TTree::DropBaskets ; (; ). virtual . Remove some baskets from memory. ; Definition at line 4518 of file TTree.cxx. ◆ DropBranchFromCache() [1/2]. Int_t TTree::DropBranchFromCache ; (; const char * ; bname, . bool ; subbranches = false . ). virtual . Remove the branch with name 'bname' from the Tree cache. ; If bname=""*"" all branches are removed from the cache. if subbranches is true all the branches of the subbranches are also removed from the cache.; Returns:; 0 branch dropped or not in cache; -1 on error . Definition at line 1142 of file TTree.cxx. ◆ DropBranchFromCache() [2/2]. Int_t TTree::DropBranchFromCache ; (; TBranch * ; b, . bool ; subbranches = false . ). virtual . Remove the branch b from the Tree cache. ; if subbranches is true all the branches of the subbranches are also removed from the cache.; Returns:; 0 branch dropped or not in cache; -1 on error . Definition at line 1181 of file TTree.cxx. ◆ DropBuffers(). void TTree::DropBuffers ; (; Int_t ; nbytes). virtual . Drop branch buffers to accommodate nbytes below MaxVirtualsize. ; Definition at line 4531 of file TTree.cxx. ◆ EnableCache(). bool TTree::EnableCache ; (; ). Enable the TTreeCache unless explicitly disabled for this TTree by a prior call to SetCacheSize(0). ; If the environment variable ROOT_TTREECACHE_SIZE or the rootrc config TTreeCache.Size has been set to zero, this call will over-ride them with a value of 1.0 (i.e. use a cache size to hold 1 cluster); Return true if there is a cache attached to the TTree (either pre-exisiting or created as part of this call) ; Definition at line 2685 of file TTree.cxx. ◆ Fill(). Int_t TTree::Fill ; (; ). virtual . Fill all branches. ; This function loops on all the branches of this tree. For each branch, it copies to the branch buffer (basket) the current values of the leaves data types. If a leaf is a s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:137850,error,error,137850,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,2,['error'],['error']
Availability,"lineoverridevirtual . Reimplemented from TDirectory.; Definition at line 102 of file TDirectoryFile.h. ◆ ls(). void TDirectoryFile::ls ; (; Option_t * ; option = """"); const. overridevirtual . List Directory contents. ; Indentation is used to identify the directory tree Subdirectories are listed first, then objects in memory, then objects on the file; The option can has the following format: [-d |-m][<regexp>] Options:; -d: only list objects in the file; -m: only list objects in memory The <regexp> will be used to match the name of the objects. By default memory and disk objects are listed. . Reimplemented from TDirectory.; Reimplemented in TFile.; Definition at line 1171 of file TDirectoryFile.cxx. ◆ mkdir(). TDirectory * TDirectoryFile::mkdir ; (; const char * ; name, . const char * ; title = """", . Bool_t ; returnExistingDirectory = kFALSE . ). overridevirtual . Create a sub-directory ""a"" or a hierarchy of sub-directories ""a/b/c/..."". ; Returns 0 in case of error or if a sub-directory (hierarchy) with the requested name already exists. returnExistingDirectory returns a pointer to an already existing sub-directory instead of 0. Returns a pointer to the created sub-directory or to the top sub-directory of the hierarchy (in the above example, the returned TDirectory * always points to ""a""). ; Reimplemented from TDirectory.; Definition at line 1249 of file TDirectoryFile.cxx. ◆ OpenFile(). TFile * TDirectoryFile::OpenFile ; (; const char * ; name, . Option_t * ; option = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Int_t ; netopt = 0 . ). overridevirtual . Interface to TFile::Open. ; Reimplemented from TDirectory.; Definition at line 1233 of file TDirectoryFile.cxx. ◆ operator=(). void TDirectoryFile::operator= ; (; const TDirectoryFile & ; ). privatedelete . ◆ Purge(). void TDirectoryFile::Purge ; (; Short_t ; nkeep = 1). overridevirtual . Purge lowest key cycles in a directory. ; By default, only t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDirectoryFile.html:41695,error,error,41695,doc/master/classTDirectoryFile.html,https://root.cern,https://root.cern/doc/master/classTDirectoryFile.html,1,['error'],['error']
Availability,"lines(conn, additional_headers);; 10124 }; 10125 ; 10126 /* Send all headers */; 10127 mg_response_header_send(conn);; 10128 ; 10129 if (!is_head_request) {; 10130#if defined(USE_ZLIB); 10131 if (allow_on_the_fly_compression) {; 10132 /* Compress and send */; 10133 send_compressed_data(conn, filep);; 10134 } else; 10135#endif; 10136 {; 10137 /* Send file directly */; 10138 send_file_data(conn, filep, r1, cl);; 10139 }; 10140 }; 10141 (void)mg_fclose(&filep->access); /* ignore error on read only file */; 10142}; 10143 ; 10144 ; 10145int; 10146mg_send_file_body(struct mg_connection *conn, const char *path); 10147{; 10148 struct mg_file file = STRUCT_FILE_INITIALIZER;; 10149 if (!mg_fopen(conn, path, MG_FOPEN_MODE_READ, &file)) {; 10150 return -1;; 10151 }; 10152 fclose_on_exec(&file.access, conn);; 10153 send_file_data(conn, &file, 0, INT64_MAX);; 10154 (void)mg_fclose(&file.access); /* Ignore errors for readonly files */; 10155 return 0; /* >= 0 for OK */; 10156}; 10157#endif /* NO_FILESYSTEMS */; 10158 ; 10159 ; 10160#if !defined(NO_CACHING); 10161/* Return True if we should reply 304 Not Modified. */; 10162static int; 10163is_not_modified(const struct mg_connection *conn,; 10164 const struct mg_file_stat *filestat); 10165{; 10166 char etag[64];; 10167 const char *ims = mg_get_header(conn, ""If-Modified-Since"");; 10168 const char *inm = mg_get_header(conn, ""If-None-Match"");; 10169 construct_etag(etag, sizeof(etag), filestat);; 10170 ; 10171 return ((inm != NULL) && !mg_strcasecmp(etag, inm)); 10172 || ((ims != NULL); 10173 && (filestat->last_modified <= parse_date_string(ims)));; 10174}; 10175 ; 10176 ; 10177static void; 10178handle_not_modified_static_file_request(struct mg_connection *conn,; 10179 struct mg_file *filep); 10180{; 10181 char lm[64], etag[64];; 10182 ; 10183 if ((conn == NULL) || (filep == NULL)) {; 10184 return;; 10185 }; 10186 ; 10187 gmt_time_string(lm, sizeof(lm), &filep->stat.last_modified);; 10188 construct_etag(etag, sizeof(etag), &filep->stat);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:292011,error,errors,292011,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['errors']
Availability,"lines(conn, additional_headers);; 10125 }; 10126 ; 10127 /* Send all headers */; 10128 mg_response_header_send(conn);; 10129 ; 10130 if (!is_head_request) {; 10131#if defined(USE_ZLIB); 10132 if (allow_on_the_fly_compression) {; 10133 /* Compress and send */; 10134 send_compressed_data(conn, filep);; 10135 } else; 10136#endif; 10137 {; 10138 /* Send file directly */; 10139 send_file_data(conn, filep, r1, cl);; 10140 }; 10141 }; 10142 (void)mg_fclose(&filep->access); /* ignore error on read only file */; 10143}; 10144 ; 10145 ; 10146int; 10147mg_send_file_body(struct mg_connection *conn, const char *path); 10148{; 10149 struct mg_file file = STRUCT_FILE_INITIALIZER;; 10150 if (!mg_fopen(conn, path, MG_FOPEN_MODE_READ, &file)) {; 10151 return -1;; 10152 }; 10153 fclose_on_exec(&file.access, conn);; 10154 send_file_data(conn, &file, 0, INT64_MAX);; 10155 (void)mg_fclose(&file.access); /* Ignore errors for readonly files */; 10156 return 0; /* >= 0 for OK */; 10157}; 10158#endif /* NO_FILESYSTEMS */; 10159 ; 10160 ; 10161#if !defined(NO_CACHING); 10162/* Return True if we should reply 304 Not Modified. */; 10163static int; 10164is_not_modified(const struct mg_connection *conn,; 10165 const struct mg_file_stat *filestat); 10166{; 10167 char etag[64];; 10168 const char *ims = mg_get_header(conn, ""If-Modified-Since"");; 10169 const char *inm = mg_get_header(conn, ""If-None-Match"");; 10170 construct_etag(etag, sizeof(etag), filestat);; 10171 ; 10172 return ((inm != NULL) && !mg_strcasecmp(etag, inm)); 10173 || ((ims != NULL); 10174 && (filestat->last_modified <= parse_date_string(ims)));; 10175}; 10176 ; 10177 ; 10178static void; 10179handle_not_modified_static_file_request(struct mg_connection *conn,; 10180 struct mg_file *filep); 10181{; 10182 char lm[64], etag[64];; 10183 ; 10184 if ((conn == NULL) || (filep == NULL)) {; 10185 return;; 10186 }; 10187 ; 10188 gmt_time_string(lm, sizeof(lm), &filep->stat.last_modified);; 10189 construct_etag(etag, sizeof(etag), &filep->stat);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:292044,error,errors,292044,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['errors']
Availability,"ling the two histograms with a weight. ;  ; Int_t FindFixBin (Double_t x, Double_t y=0, Double_t z=0) const;  Returns the global bin number containing the given values. ;  ; TFitResultPtr Fit (TF1 *f1, Option_t *opt="""");  Fits the efficiency using the TBinomialEfficiencyFitter class. ;  ; Double_t GetBetaAlpha (Int_t bin=-1) const;  ; Double_t GetBetaBeta (Int_t bin=-1) const;  ; Double_t GetConfidenceLevel () const;  ; TH1 * GetCopyPassedHisto () const;  Returns a cloned version of fPassedHistogram. ;  ; TH1 * GetCopyTotalHisto () const;  Returns a cloned version of fTotalHistogram. ;  ; Int_t GetDimension () const;  returns the dimension of the current TEfficiency object ;  ; TDirectory * GetDirectory () const;  ; Double_t GetEfficiency (Int_t bin) const;  Returns the efficiency in the given global bin. ;  ; Double_t GetEfficiencyErrorLow (Int_t bin) const;  Returns the lower error on the efficiency in the given global bin. ;  ; Double_t GetEfficiencyErrorUp (Int_t bin) const;  Returns the upper error on the efficiency in the given global bin. ;  ; Int_t GetGlobalBin (Int_t binx, Int_t biny=0, Int_t binz=0) const;  Returns the global bin number which can be used as argument for the following functions: ;  ; TList * GetListOfFunctions ();  ; TGraphAsymmErrors * GetPaintedGraph () const;  ; TGraph2DAsymmErrors * GetPaintedGraph2D () const;  ; TH2 * GetPaintedHistogram () const;  ; const TH1 * GetPassedHistogram () const;  ; EStatOption GetStatisticOption () const;  ; const TH1 * GetTotalHistogram () const;  ; Double_t GetWeight () const;  ; TClass * IsA () const override;  ; Long64_t Merge (TCollection *list);  Merges the TEfficiency objects in the given list to the given TEfficiency object using the operator+=(TEfficiency&) ;  ; TEfficiency & operator+= (const TEfficiency &rhs);  Adds the histograms of another TEfficiency object to current histograms. ;  ; TEfficiency & operator= (const TEfficiency &rhs);  Assignment operator. ;  ; void Paint (Option_t *opt) overri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEfficiency.html:35460,error,error,35460,doc/master/classTEfficiency.html,https://root.cern,https://root.cern/doc/master/classTEfficiency.html,1,['error'],['error']
Availability,"ling.cxx:8199; TCling::fClassesHeadersMapstd::map< size_t, std::vector< const char * > > fClassesHeadersMapDefinition TCling.h:119; TCling::DataMemberInfo_TypeTrueNameconst char * DataMemberInfo_TypeTrueName(DataMemberInfo_t *dminfo) const finalDefinition TCling.cxx:8690; TCling::ShutDownvirtual void ShutDown() finalDefinition TCling.cxx:1655; TCling::GetInterpreterStateMarkerunsigned long long GetInterpreterStateMarker() const finalDefinition TCling.h:224; TCling::UpdateListOfTypesvoid UpdateListOfTypes() finalNo op: see TClingCallbacks (used to update the list of types)Definition TCling.cxx:3899; TCling::TypedefInfo_PropertyLong_t TypedefInfo_Property(TypedefInfo_t *tinfo) const finalDefinition TCling.cxx:9498; TCling::RegisterRdictForLoadPCMvoid RegisterRdictForLoadPCM(const std::string &pcmFileNameFullPath, llvm::StringRef *pcmContent)Register Rdict data for future loading by LoadPCM;.Definition TCling.cxx:1678; TCling::ProcessLineSynchLongptr_t ProcessLineSynch(const char *line, EErrorCode *error=nullptr) finalLet cling process a command line synchronously, i.e we are waiting it will be finished.Definition TCling.cxx:3569; TCling::GetMangledNameWithPrototypeTString GetMangledNameWithPrototype(TClass *cl, const char *method, const char *proto, Bool_t objectIsConst=kFALSE, ROOT::EFunctionMatchMode mode=ROOT::kConversionMatch) finalReturn the cling mangled name for a method of a class with a certain prototype, i....Definition TCling.cxx:4989; TCling::UpdateAllCanvasesstatic void UpdateAllCanvases()Update all canvases at end the terminal input command.Definition TCling.cxx:6754; TCling::LoadLibraryMapInt_t LoadLibraryMap(const char *rootmapfile=nullptr) finalLoad map between class and library.Definition TCling.cxx:5741; TCling::BaseClassInfo_TagnumLongptr_t BaseClassInfo_Tagnum(BaseClassInfo_t *bcinfo) const finalDefinition TCling.cxx:8545; TCling::LibraryUnloadedvoid LibraryUnloaded(const void *dyLibHandle, const char *canonicalName)Definition TCling.cxx:6981; TDic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8h_source.html:90896,error,error,90896,doc/master/TCling_8h_source.html,https://root.cern,https://root.cern/doc/master/TCling_8h_source.html,1,['error'],['error']
Availability,"lip-mask.; GC mode-dependent components: foreground, background, tile, stipple,; tile-stipple-x-origin, and tile-stipple-y-origin.; (see also the GCValues_t structure). void DrawRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); Draws rectangle outlines of [x,y] [x+w,y] [x+w,y+h] [x,y+h]. GC components in use: function, plane-mask, line-width, line-style,; cap-style, join-style, fill-style, subwindow-mode, clip-x-origin,; clip-y-origin, clip-mask.; GC mode-dependent components: foreground, background, tile, stipple,; tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dash-list.; (see also the GCValues_t structure). void DrawSegments(Drawable_t id, GContext_t gc, Segment_t* seg, Int_t nseg); Draws multiple line segments. Each line is specified by a pair of points.; Segment_t *seg - specifies an array of segments; Int_t nseg - specifies the number of segments in the array. GC components in use: function, plane-mask, line-width, line-style,; cap-style, join-style, fill-style, subwindow-mode, clip-x-origin,; clip-y-origin, clip-mask.; GC mode-dependent components: foreground, background, tile, stipple,; tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, and dash-list.; (see also the GCValues_t structure). void SelectInput(Window_t id, UInt_t evmask); Defines which input events the window is interested in. By default; events are propageted up the window stack. This mask can also be; set at window creation time via the SetWindowAttributes_t::fEventMask; attribute. Window_t GetInputFocus(); Returns the window id of the window having the input focus. void SetInputFocus(Window_t id); Changes the input focus to specified window ""id"". Window_t GetPrimarySelectionOwner(); Returns the window id of the current owner of the primary selection.; That is the window in which, for example some text is selected. void SetPrimarySelectionOwner(Window_t id); Makes the window ""id"" the current owner of the primary selection.; That is the window in ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:54822,mask,mask,54822,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,12,['mask'],['mask']
Availability,"lipt); Bool_tIsIntersectingPolygon(Int_t bn, Double_t* x, Double_t* y, Double_t xclipl, Double_t xclipr, Double_t yclipb, Double_t yclipt); voidTObject::MakeZombie(); static Bool_tTH1::RecomputeAxisLimits(TAxis& destAxis, const TAxis& anAxis); static Bool_tTH1::SameLimitsAndNBins(const TAxis& axis1, const TAxis& axis2); virtual voidTH1::SavePrimitiveHelp(ostream& out, const char* hname, Option_t* option = """"). Data Members; public:. enum TH1::EBinErrorOpt { kNormal; kPoisson; kPoisson2; };; enum TH1::[unnamed] { kNoStats; kUserContour; kCanRebin; kLogX; kIsZoomed; kNoTitle; kIsAverage; kNstat; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Short_tTH1::fBarOffset(1000*offset) for bar charts or legos; Short_tTH1::fBarWidth(1000*width) for bar charts or legos; Bool_tfBinContentChanged!For the 3D Painter; TH1::EBinErrorOptTH1::fBinStatErrOptoption for bin statistical errors ; TList*fBinsList of bins. The list owns the contained objects; Double_t*TH1::fBuffer[fBufferSize] entry buffer; Int_tTH1::fBufferSizefBuffer size; Int_tfCellXNumber of partition cells in the x-direction of the histogram; Int_tfCellYNumber of partition cells in the y-direction of the histogram; TList*fCells[fNCells] The array of TLists that store the bins that intersect with each cell. List do not own the contained objects; Bool_t*fCompletelyInside[fNCells] The array that returns true if the cell at the given coordinate is completely inside a bin; TArrayDTH1::fContourArray to display contour levels; Int_tTH1::fDimension!Histogram dimension (1, 2 or 3 dim); TDirectory*TH1::fDirectory!Pointer to directory holding this histogram; Double_tTH1::fEntriesNumber of entries; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Bool_tfFloatWhen set to kTRUE,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH2Poly.html:29089,error,errors,29089,root/html534/TH2Poly.html,https://root.cern,https://root.cern/root/html534/TH2Poly.html,1,['error'],['errors']
Availability,"list of TGraphs) using the Delaunay triangulation. ;  ; char * GetObjectInfo (Int_t px, Int_t py) const override;  Display the histogram info (bin number, contents, integral up to bin corresponding to cursor position px,py. ;  ; TList * GetStack () const override;  ; virtual Int_t GetXHighlightBin () const;  ; virtual Int_t GetYHighlightBin () const;  ; virtual void HighlightBin (Int_t px, Int_t py);  Check on highlight bin. ;  ; TClass * IsA () const override;  ; Bool_t IsInside (Double_t x, Double_t y) override;  Return kTRUE if the point x, y is inside one of the graphical cuts. ;  ; Bool_t IsInside (Int_t x, Int_t y) override;  Return kTRUE if the cell ix, iy is inside one of the graphical cuts. ;  ; virtual Int_t MakeChopt (Option_t *option);  Decode string choptin and fill Hoption structure. ;  ; Int_t MakeCuts (char *cutsopt) override;  Decode string choptin and fill Graphical cuts structure. ;  ; void Paint (Option_t *option="""") override;  Control routine to paint any kind of histograms ;  ; virtual void Paint2DErrors (Option_t *option);  Draw 2D histograms errors. ;  ; virtual void PaintArrows (Option_t *option);  Control function to draw a table as an arrow plot ;  ; virtual void PaintAxis (Bool_t drawGridOnly=kFALSE);  Draw axis (2D case) of an histogram. ;  ; virtual void PaintBar (Option_t *option);  Draw a bar-chart in a normal pad. ;  ; virtual void PaintBarH (Option_t *option);  Draw a bar char in a rotated pad (X vertical, Y horizontal) ;  ; virtual void PaintBoxes (Option_t *option);  Control function to draw a 2D histogram as a box plot ;  ; virtual void PaintCandlePlot (Option_t *option);  Control function to draw a 2D histogram as a candle (box) plot or violin plot ;  ; virtual void PaintColorLevels (Option_t *option);  Control function to draw a 2D histogram as a color plot. ;  ; virtual void PaintColorLevelsFast (Option_t *option);  [Rendering scheme for the COL2 and COLZ2 options] (HP14) ;  ; virtual void PaintContour (Option_t *option);  Cont",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:133914,error,errors,133914,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['error'],['errors']
Availability,"list of; functions of this histogram. Double_t GetBinError(Int_t bin) const; -*-*-*-*-*Return value of error associated to bin number bin*-*-*-*-*. if the sum of squares of weights has been defined (via Sumw2),; this function returns the sqrt(sum of w2).; otherwise it returns the sqrt(contents) for this bin. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. Double_t GetBinErrorLow(Int_t bin) const; -*-*-*-*-*Return lower error associated to bin number bin*-*-*-*-*. The error will depend on the statistic option used will return; the binContent - lower interval value. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. Double_t GetBinErrorUp(Int_t bin) const; -*-*-*-*-*Return upper error associated to bin number bin*-*-*-*-*. The error will depend on the statistic option used will return; the binContent - upper interval value. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. Double_t GetBinError(Int_t binx, Int_t biny) const; -*-*-*-*-*Return error of bin number binx, biny. NB: Function to be called for 2-D histograms only. Double_t GetBinError(Int_t binx, Int_t biny, Int_t binz) const; -*-*-*-*-*Return error of bin number binx,biny,binz. NB: Function to be called for 3-D histograms only. Double_t GetCellContent(Int_t binx, Int_t biny) const; -*-*-*-*-*Return content of bin number binx, biny. NB: Function to be called for 2-D histograms only. Double_t GetCellError(Int_t binx, Int_t biny) const; -*-*-*-*-*Return error of bin number binx, biny. NB: Function to be called for 2-D histograms only. Double_t GetBinCenter(Int_t bin) const; return bin center for 1D historam; Better to use h1.GetXaxis().GetBinCenter(bin). Double_t GetBinLowEdge(Int_t bin) const; return bin lower edge for 1D historam; Better to use h1.GetXaxis().GetBinLowEdge(bin). Double_t GetBinWidth(Int_t bin) const; return bin width for 1D historam; Better to use h1.GetXaxis().GetBinWidth(bin). void GetCenter(Double_t* center) const; Fill array ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:127472,error,error,127472,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,1,['error'],['error']
Availability,"list that is flagged as owning all of its contents, or else on an empty list (which will force the list into that mode).; If you want to pass an argument that is not owned by a std::unique_ptr, you can use RooAbsCollection::addOwned(RooAbsArg&, bool). ; Definition at line 389 of file RooAbsCollection.cxx. ◆ addTyped(). template<class Arg_t > . bool RooAbsCollection::addTyped ; (; const RooAbsCollection & ; list, . bool ; silent = false . ). inline . Adds elements of a given RooAbsCollection to the container if they match the specified type. ; This function iterates through the elements of the provided RooAbsCollection and checks if each element matches the specified type. If any element doesn't match the type, it throws an exception.; Template Parameters. Arg_tThe type to match for elements in the collection. Must inherit from RooAbsArg. . Parameters. listThe RooAbsCollection containing elements to be added. ; silentForwarded to the non-typed add function. If true, suppresses error messages when adding elements, e.g. when the collection is a RooArgSet and the element is already in the set. . ReturnsReturns true if all elements could be added, else false.; Exceptions. std::invalid_argumentif an element in the collection doesn't match the specified type. . Definition at line 171 of file RooAbsCollection.h. ◆ allInRange(). bool RooAbsCollection::allInRange ; (; const char * ; rangeSpec); const. Return true if all contained object report to have their value inside the specified range. ; Definition at line 1473 of file RooAbsCollection.cxx. ◆ assert_is_no_temporary(). template<class T > . static void RooAbsCollection::assert_is_no_temporary ; (; T && ; ). inlinestaticprotected . Definition at line 424 of file RooAbsCollection.h. ◆ assign(). void RooAbsCollection::assign ; (; const RooAbsCollection & ; other); const. Sets the value, cache and constant attribute of any argument in our set that also appears in the other set. ; Note that this function changes the values of t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsCollection.html:33678,error,error,33678,doc/v632/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/v632/classRooAbsCollection.html,1,['error'],['error']
Availability,"list that is flagged as owning all of its contents, or else on an empty list (which will force the list into that mode).; If you want to pass an argument that is not owned by a std::unique_ptr, you can use RooAbsCollection::addOwned(RooAbsArg&, bool). ; Definition at line 396 of file RooAbsCollection.cxx. ◆ addTyped(). template<class Arg_t > . bool RooAbsCollection::addTyped ; (; const RooAbsCollection & ; list, . bool ; silent = false . ). inline . Adds elements of a given RooAbsCollection to the container if they match the specified type. ; This function iterates through the elements of the provided RooAbsCollection and checks if each element matches the specified type. If any element doesn't match the type, it throws an exception.; Template Parameters. Arg_tThe type to match for elements in the collection. Must inherit from RooAbsArg. . Parameters. listThe RooAbsCollection containing elements to be added. ; silentForwarded to the non-typed add function. If true, suppresses error messages when adding elements, e.g. when the collection is a RooArgSet and the element is already in the set. . ReturnsReturns true if all elements could be added, else false.; Exceptions. std::invalid_argumentif an element in the collection doesn't match the specified type. . Definition at line 171 of file RooAbsCollection.h. ◆ allInRange(). bool RooAbsCollection::allInRange ; (; const char * ; rangeSpec); const. Return true if all contained object report to have their value inside the specified range. ; Definition at line 1483 of file RooAbsCollection.cxx. ◆ assert_is_no_temporary(). template<class T > . static void RooAbsCollection::assert_is_no_temporary ; (; T && ; ). inlinestaticprotected . Definition at line 401 of file RooAbsCollection.h. ◆ assign(). void RooAbsCollection::assign ; (; const RooAbsCollection & ; other); const. Sets the value, cache and constant attribute of any argument in our set that also appears in the other set. ; Note that this function changes the values of t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCollection.html:33094,error,error,33094,doc/master/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/master/classRooAbsCollection.html,1,['error'],['error']
Availability,"list) override;  Handle Drag Enter event. ;  ; Bool_t HandleDNDLeave () override;  Handle Drag Leave event. ;  ; Atom_t HandleDNDPosition (Int_t x, Int_t y, Atom_t action, Int_t xroot, Int_t yroot) override;  Handle Drag position event. ;  ; Bool_t HandleDoubleClick (Event_t *event) override;  handle double click ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion event in the text editor widget. ;  ; Bool_t HandleSelectionClear (Event_t *event) override;  Handle selection clear event. ;  ; Bool_t HandleSelectionRequest (Event_t *event) override;  Handle request to send current clipboard contents to requestor window. ;  ; Bool_t HandleTimer (TTimer *t) override;  Handle scroll timer. ;  ; TClass * IsA () const override;  ; Bool_t IsMarked () const;  ; Bool_t IsReadOnly () const;  ; virtual Bool_t IsSaved ();  ; void Layout () override;  Layout the components of view. ;  ; virtual Bool_t LoadBuffer (const char *txtbuf);  Load text from a text buffer. Return false in case of failure. ;  ; virtual Bool_t LoadFile (const char *fname, long startpos=0, long length=-1);  Load a file in the text view widget. ;  ; virtual void Marked (Bool_t mark);  ; virtual Long_t ReturnHeighestColHeight ();  ; virtual Long_t ReturnLineCount ();  ; virtual Long_t ReturnLineLength (Long_t line);  ; virtual Long_t ReturnLongestLine ();  ; virtual Long_t ReturnLongestLineWidth ();  Return width of longest line. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save a text edit widget as a C++ statement(s) on output stream out. ;  ; virtual Bool_t Search (const char *string, Bool_t direction, Bool_t caseSensitive);  Search for string in text. ;  ; virtual Bool_t SelectAll ();  Select all text in the viewer. ;  ; virtual void SetBackground (Pixel_t p);  set background color ;  ; virtual void SetFont (FontStruct_t font);  Changes text entry font. ;  ; void SetForegroundColor (Pixel_t) override;  Set text color. ;  ; virtual void SetHsbPosition (Long_t newP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextView.html:3308,failure,failure,3308,doc/master/classTGTextView.html,https://root.cern,https://root.cern/doc/master/classTGTextView.html,1,['failure'],['failure']
Availability,"list) override;  Handle Drag Enter event. ;  ; Bool_t HandleDNDLeave () override;  Handle Drag Leave event. ;  ; Atom_t HandleDNDPosition (Int_t x, Int_t y, Atom_t action, Int_t xroot, Int_t yroot) override;  Handle Drag position event. ;  ; Bool_t HandleDoubleClick (Event_t *event) override;  handle double click ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion event in the text editor widget. ;  ; Bool_t HandleSelectionClear (Event_t *event) override;  Handle selection clear event. ;  ; Bool_t HandleSelectionRequest (Event_t *event) override;  Handle request to send current clipboard contents to requestor window. ;  ; Bool_t HandleTimer (TTimer *t) override;  Handle scroll timer. ;  ; TClass * IsA () const override;  ; Bool_t IsMarked () const;  ; Bool_t IsReadOnly () const;  ; virtual Bool_t IsSaved ();  ; void Layout () override;  Layout the components of view. ;  ; virtual Bool_t LoadBuffer (const char *txtbuf);  Load text from a text buffer. Return false in case of failure. ;  ; virtual Bool_t LoadFile (const char *fname, long startpos=0, long length=-1);  Load a file in the text view widget. ;  ; virtual void Marked (Bool_t mark);  ; virtual Long_t ReturnHeighestColHeight ();  ; virtual Long_t ReturnLineCount ();  ; virtual Long_t ReturnLineLength (Long_t line);  ; virtual Long_t ReturnLongestLine ();  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save a text edit widget as a C++ statement(s) on output stream out. ;  ; virtual Bool_t SelectAll ();  Select all text in the viewer. ;  ; virtual void SetBackground (Pixel_t p);  set background color ;  ; virtual void SetFont (FontStruct_t font);  Changes text entry font. ;  ; void SetForegroundColor (Pixel_t) override;  Set text color. ;  ; virtual void SetHsbPosition (Long_t newPos);  Set position of horizontal scrollbar. ;  ; virtual void SetReadOnly (Bool_t on=kTRUE);  ; virtual void SetSBRange (Int_t direction);  Set the range for the kVertical or kHorizontal scrollba",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEdit.html:9327,failure,failure,9327,doc/master/classTGTextEdit.html,https://root.cern,https://root.cern/doc/master/classTGTextEdit.html,1,['failure'],['failure']
Availability,"listDouble_t * fPARSplistDefinition TMinuit.h:124; TMinuit::fApsiDouble_t fApsiDefinition TMinuit.h:54; TMinuit::fBigedmDouble_t fBigedmDefinition TMinuit.h:61; TMinuit::~TMinuit~TMinuit() overrideMinuit default destructor.Definition TMinuit.cxx:497; TMinuit::fCstatuTString fCstatuDefinition TMinuit.h:167; TMinuit::fNwrmesInt_t fNwrmes[2]Definition TMinuit.h:151; TMinuit::fVlimloDouble_t fVlimloDefinition TMinuit.h:58; TMinuit::mnrazzvirtual void mnrazz(Double_t ynew, Double_t *pnew, Double_t *y, Int_t &jh, Int_t &jl)Called only by MNSIMP (and MNIMPR) to add a new point.Definition TMinuit.cxx:6568; TMinuit::fChptchar * fChptDefinition TMinuit.h:164; TMinuit::fIsysrdInt_t fIsysrdDefinition TMinuit.h:131; TMinuit::fXdircrDouble_t fXdircrDefinition TMinuit.h:65; TMinuit::mnmnosvirtual void mnmnos()Performs a MINOS error analysis.Definition TMinuit.cxx:5388; TMinuit::fUpdfltDouble_t fUpdfltDefinition TMinuit.h:62; TMinuit::mnlinevirtual void mnline(Double_t *start, Double_t fstart, Double_t *step, Double_t slope, Double_t toler)Perform a line search from position START.Definition TMinuit.cxx:4736; TMinuit::fNpfixInt_t fNpfixDefinition TMinuit.h:37; TMinuit::fMaxextInt_t fMaxextDefinition TMinuit.h:42; TMinuit::fNvarlInt_t * fNvarlDefinition TMinuit.h:126; TMinuit::mncuvevirtual void mncuve()Makes sure that the current point is a local minimum.Definition TMinuit.cxx:2130; TMinuit::fMATUvlineDouble_t * fMATUvlineDefinition TMinuit.h:107; TMinuit::fBlimDouble_t * fBlimDefinition TMinuit.h:70; TMinuit::fVthmatDouble_t * fVthmatDefinition TMinuit.h:90; TMinuit::mnscanvirtual void mnscan()Scans the values of FCN as a function of one parameter.Definition TMinuit.cxx:6708; TMinuit::fCundefTString fCundefDefinition TMinuit.h:170; TMinuit::fMIGRflnuDouble_t * fMIGRflnuDefinition TMinuit.h:108; TMinuit::fNfcnlcInt_t fNfcnlcDefinition TMinuit.h:147; TMinuit::fISWInt_t fISW[7]Definition TMinuit.h:141; TMinuit::fHESSyyDouble_t * fHESSyyDefinition TMinuit.h:104; TMinuit::fGraphicsMode",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:263238,toler,toler,263238,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['toler'],['toler']
Availability,"lity content of the quantile and n is the number of events used to compute the quantile and f(q) is the probability distribution for the other variable evaluated at the obtained quantile. In the error estimation the probability is then assumed to be a normal distribution. ; Definition at line 2505 of file TH2.cxx. ◆ QuantilesY(). TH1D * TH2::QuantilesY ; (; Double_t ; prob = 0.5, . const char * ; name = ""_qy"" . ); const. Compute the Y distribution of quantiles in the other variable X name is the name of the returned histogram prob is the probability content for the quantile (0.5 is the default for the median) An approximate error for the quantile is computed assuming that the distribution in the other variable is normal. ; Definition at line 2518 of file TH2.cxx. ◆ Rebin(). TH2 * TH2::Rebin ; (; Int_t ; ngroup = 2, . const char * ; newname = """", . const Double_t * ; xbins = nullptr . ). overridevirtual . Override TH1::Rebin as TH2::RebinX Rebinning in variable binning as for TH1 is not allowed If a non-null pointer is given an error is flagged see RebinX and Rebin2D. ; Reimplemented from TH1.; Definition at line 1663 of file TH2.cxx. ◆ Rebin2D(). TH2 * TH2::Rebin2D ; (; Int_t ; nxgroup = 2, . Int_t ; nygroup = 2, . const char * ; newname = """" . ). virtual . Rebin this histogram grouping nxgroup/nygroup bins along the xaxis/yaxis together. ; if newname is not blank a new temporary histogram hnew is created. else the current histogram is modified (default) The parameter nxgroup/nygroup indicate how many bins along the xaxis/yaxis of this have to me merged into one bin of hnew If the original histogram has errors stored (via Sumw2), the resulting histograms has new errors correctly calculated.; examples: if hpxpy is an existing TH2 histogram with 40 x 40 bins hpxpy->Rebin2D(); // merges two bins along the xaxis and yaxis in one in hpxpy; // Carefull: previous contents of hpxpy are lost; hpxpy->RebinX(5); //merges five bins along the xaxis in one in hpxpy; TH2 *hnew = h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:102627,error,error,102627,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,1,['error'],['error']
Availability,"lity, an error is reported and a NULL pointer is returned.; NOTE that the Y axis attributes of the TH2 are copied to the X axis of the projection. ; Definition at line 2476 of file TH2.cxx. ◆ PutStats(). void TH2::PutStats ; (; Double_t * ; stats). overridevirtual . Replace current statistics with the values in array stats. ; Reimplemented from TH1.; Reimplemented in TProfile2D.; Definition at line 2485 of file TH2.cxx. ◆ QuantilesX(). TH1D * TH2::QuantilesX ; (; Double_t ; prob = 0.5, . const char * ; name = ""_qx"" . ); const. Compute the X distribution of quantiles in the other variable Y name is the name of the returned histogram prob is the probability content for the quantile (0.5 is the default for the median) An approximate error for the quantile is computed assuming that the distribution in the other variable is normal. ; According to this approximate formula the error on the quantile is estimated as sqrt( p (1-p) / ( n * f(q)^2) ), where p is the probability content of the quantile and n is the number of events used to compute the quantile and f(q) is the probability distribution for the other variable evaluated at the obtained quantile. In the error estimation the probability is then assumed to be a normal distribution. ; Definition at line 2505 of file TH2.cxx. ◆ QuantilesY(). TH1D * TH2::QuantilesY ; (; Double_t ; prob = 0.5, . const char * ; name = ""_qy"" . ); const. Compute the Y distribution of quantiles in the other variable X name is the name of the returned histogram prob is the probability content for the quantile (0.5 is the default for the median) An approximate error for the quantile is computed assuming that the distribution in the other variable is normal. ; Definition at line 2518 of file TH2.cxx. ◆ Rebin(). TH2 * TH2::Rebin ; (; Int_t ; ngroup = 2, . const char * ; newname = """", . const Double_t * ; xbins = nullptr . ). overridevirtual . Override TH1::Rebin as TH2::RebinX Rebinning in variable binning as for TH1 is not allowed If a non-null po",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:101491,error,error,101491,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,1,['error'],['error']
Availability,"lity.; If external, the server waits for a reply from the server; Returns kTRUE if OK or kFALSE in case of error. void RemoteTouch(); Remote touch functionality: contact the server to proof our vitality.; No reply from server is expected. void CtrlC(); Interrupt the remote protocol instance. Used to propagate Ctrl-C.; No reply from server is expected. Int_t PickUpReady(); Wait and pick-up next buffer from the asynchronous queue. TXSockBuf * PopUpSpare(Int_t sz); Pop-up a buffer of at least size bytes from the spare list; If none is found either one is reallocated or a new one; created. void PushBackSpare(); Release read buffer giving back to the spare list. Int_t RecvRaw(void* buf, Int_t len, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Int_t SendInterrupt(Int_t type); Send urgent message (interrupt) to remote server; Returns 0 or -1 in case of error. Int_t Send(const TMessage& mess); Send a TMessage object. Returns the number of bytes in the TMessage; that were sent and -1 in case of error. Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -5 if pipe broken (connection invalid).; In those case mess == 0. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0, Long64_t l64 = 0, Int_t int3 = 0, const char* opt = 0); Send message to intermediate coordinator.; If any output is due, this is returned as an obj string to be; deleted by the caller. void SendUrgent(Int_t type, Int_t int1, Int_t int2); Send urgent message to counterpart; 'type' specifies the type of; the message (see TXSocket::EUrgentMsgType), and 'int1', 'int2'; two containers for additional information. void InitEnvs(); Init environment variables for XrdClient. Int_t Reconnect(); Try reconnection after failure. Int_t GetLowSocket() const; Auxilliary. { return (fConn ? fConn->GetLowSocket() : ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXSocket.html:17610,error,error,17610,root/html602/TXSocket.html,https://root.cern,https://root.cern/root/html602/TXSocket.html,2,['error'],['error']
Availability,"lityIndex = nullptr). the constructor for the cost complexity pruning ; Definition at line 68 of file CostComplexityPruneTool.cxx. ◆ ~CostComplexityPruneTool(). CostComplexityPruneTool::~CostComplexityPruneTool ; (; ). virtual . the destructor for the cost complexity pruning ; Definition at line 89 of file CostComplexityPruneTool.cxx. Member Function Documentation. ◆ CalculatePruningInfo(). PruningInfo * CostComplexityPruneTool::CalculatePruningInfo ; (; DecisionTree * ; dt, . const IPruneTool::EventSample * ; validationSample = nullptr, . Bool_t ; isAutomatic = kFALSE . ). virtual . the routine that basically ""steers"" the pruning process. ; Call the calculation of the pruning sequence, the tree quality and alike.. ; Implements TMVA::IPruneTool.; Definition at line 98 of file CostComplexityPruneTool.cxx. ◆ InitTreePruningMetaData(). void CostComplexityPruneTool::InitTreePruningMetaData ; (; DecisionTreeNode * ; n). private . initialise ""meta data"" for the pruning, like the ""costcomplexity"", the critical alpha, the minimal alpha down the tree, etc... for each node!! ; Definition at line 181 of file CostComplexityPruneTool.cxx. ◆ Log(). MsgLogger & TMVA::CostComplexityPruneTool::Log ; (; ); const. inlineprivate . output stream to save logging information ; Definition at line 87 of file CostComplexityPruneTool.h. ◆ Optimize(). void CostComplexityPruneTool::Optimize ; (; DecisionTree * ; dt, . Double_t ; weights . ). private . after the critical \( \alpha \) values (at which the corresponding nodes would be pruned away) had been established in the ""InitMetaData"" we need now: automatic pruning: ; find the value of \( \alpha \) for which the test sample gives minimal error, on the tree with all nodes pruned that have \( \alpha_{critical} < \alpha \), fixed parameter pruning ; Definition at line 236 of file CostComplexityPruneTool.cxx. Member Data Documentation. ◆ fLogger. MsgLogger* TMVA::CostComplexityPruneTool::fLogger. mutableprivate . Definition at line 86 of file Cost",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CostComplexityPruneTool.html:4838,down,down,4838,doc/master/classTMVA_1_1CostComplexityPruneTool.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CostComplexityPruneTool.html,1,['down'],['down']
Availability,"lize the file. Makes sure that the file is really open before; calling TFile::Init. It may block. Long64_t GetSize() const; Get the file size. Returns -1 in the case that the file could not be; stat'ed. Bool_t IsOpen() const; Check if the file is open. void SetAsyncOpenStatus(TFile::EAsyncOpenStatus status); Set the status of an asynchronous file open. void Close(Option_t* option = """"); Close the file. param option: if == ""R"", all TProcessIDs referenced by this file are; deleted (is this valid in xrootd context?). Int_t ReOpen(Option_t* modestr); Reopen the file with the new access mode. param mode: the new access mode; returns: 0 in case the mode was successfully modified, 1 in case; the mode did not change (was already as requested or wrong; input arguments) and -1 in case of failure, in which case; the file cannot be used anymore. Bool_t ReadBuffer(char* buffer, Int_t length); Read a data chunk of the given size. param buffer: a pointer to a buffer big enough to hold the data; param length: number of bytes to be read; returns: kTRUE in case of failure. Bool_t ReadBuffer(char* buffer, Long64_t position, Int_t length); Read a data chunk of the given size, starting from the given offset. param buffer: a pointer to a buffer big enough to hold the data; param position: offset from the beginning of the file; param length: number of bytes to be read; returns: kTRUE in case of failure. Bool_t ReadBuffers(char* buffer, Long64_t* position, Int_t* length, Int_t nbuffs); Read scattered data chunks in one operation. param buffer: a pointer to a buffer big enough to hold all of the; requested data; param position: position[i] is the seek position of chunk i of len; length[i]; param length: length[i] is the length of the chunk at offset; position[i]; param nbuffs: number of chunks; returns: kTRUE in case of failure. Bool_t WriteBuffer(const char* buffer, Int_t length); Write a data chunk. param buffer: the data to be written; param length: the size of the buffer; returns: kTRUE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNetXNGFile.html:24447,failure,failure,24447,root/html534/TNetXNGFile.html,https://root.cern,https://root.cern/root/html534/TNetXNGFile.html,1,['failure'],['failure']
Availability,"ll always be between 0 and 24 (hours). Sidereal time is most accurately; calculated from UT1. If fSec and fNanoSec are in UTC (which they are by; default), the optional argument UT1Offset can be supplied (in; milliseconds). If UT1Offset is not supplied, conversion has maximum error; of 1s. If offset is supplied error can be reduced to us level. Values for; UT1Offset can be found in IERS Bulletin B:; ftp://ftp.iers.org/products/eop/bulletinb/format_2009; The conversion to sidereal time used here is given by; Aoki et. al. Astron. Astrophys. 105, 359-362 (1982); http://adsabs.harvard.edu/abs/1982A%26A...105..359A. Double_t AsGAST(Double_t UT1Offset = 0) const; Return Greenwich apparant sidereal time (GAST) in hour-angle. Return; value will always be between 0 and 24 (hours). Sidereal time is most; accurately calculated from UT1. If fSec and fNanoSec are in UTC (which; they are by default), the optional argument UT1Offset can be supplied (in; milliseconds). If UT1Offset is not supplied, conversion has maximum error; of 1s. If offset is supplied error can be reduced to us level. Values for; UT1Offset can be found in IERS Bulletin B:; ftp://ftp.iers.org/products/eop/bulletinb/format_2009; Equation of the equinoxes is given by USNO:; http://aa.usno.navy.mil/faq/docs/GAST.php. Double_t AsLMST(Double_t Longitude, Double_t UT1Offset = 0) const; Return local mean sidereal time (LMST) in hour-angle, given a longitude; in degrees. Return value will always be between 0 and 24 (hours).; Sidereal time is most accurately calculated from UT1. If fSec and; fNanoSec are in UTC (which they are by default), the optional argument; UT1Offset can be supplied (in milliseconds). If UT1Offset is not; supplied, conversion has maximum error of 1s. If offset is supplied error; can be reduced to us level. Values for UT1Offset can be found in IERS; Bulletin B: ftp://ftp.iers.org/products/eop/bulletinb/format_2009. Double_t AsLAST(Double_t Longitude, Double_t UT1Offset = 0) const; Return local appara",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTimeStamp.html:6182,error,error,6182,root/html534/TTimeStamp.html,https://root.cern,https://root.cern/root/html534/TTimeStamp.html,2,['error'],['error']
Availability,"ll be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented from TFile.; Definition at line 240 of file TSQLFile.h. ◆ ReOpen(). Int_t TSQLFile::ReOpen ; (; Option_t * ; mode). finalvirtual . Reopen a file with a different access mode, like from READ to See TFile::Open() for details. ; Reimplemented from TFile.; Definition at line 719 of file TSQLFile.cxx. ◆ RequestSQLClassInfo() [1/2]. TSQLClassInfo * TSQLFile::RequestSQLClassInfo ; (; const char * ; clname, . Int_t ; version . ). protected . Search in database tables for specified class and return TSQLClassInfo object. ; Definition at line 1800 of file TSQLFile.cxx. ◆ RequestSQLClassInfo() [2/2]. TSQLClassInf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:85551,recover,recovered,85551,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,1,['recover'],['recovered']
Availability,"ll be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented from TFile.; Definition at line 86 of file TXMLFile.h. ◆ ReOpen(). Int_t TXMLFile::ReOpen ; (; Option_t * ; mode). finalvirtual . Reopen a file with a different access mode, like from READ to See TFile::Open() for details. ; Reimplemented from TFile.; Definition at line 372 of file TXMLFile.cxx. ◆ ResetErrno(). void TXMLFile::ResetErrno ; (; ); const. inlinefinalvirtual . Method resetting the errno. ; Reimplemented from TFile.; Definition at line 64 of file TXMLFile.h. ◆ SaveToFile(). void TXMLFile::SaveToFile ; (; ). protected . Saves xml structures to the file xml elements are kept in list of TKeyXM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLFile.html:67602,recover,recovered,67602,doc/master/classTXMLFile.html,https://root.cern,https://root.cern/doc/master/classTXMLFile.html,1,['recover'],['recovered']
Availability,"ll blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. the local host. In case of error TInetAddress::IsValid() returns; kFALSE. Int_t GetLocalPort(); Get port # to which server socket is bound. In case of error returns -1. UChar_t GetAcceptOptions(); Return default options for Accept. void SetAcceptOptions(UChar_t Opt); Set default options for Accept according to modifier 'mod'.; Use:; kSrvAuth require client authentication; kSrvNoAuth do not require client authentication. void ShowAcceptOptions(); Print default options for Accept. Bool_t Authenticate(TSocket* ); Check authentication request from the client on new; open connection. TServerSocket(); { }. TServerSocket(const TServerSocket& ). void operator=(const TServerSocket& ). Int_t Send(const TMessage& ); { MayNotUse(""Send(const TMessage &)""); return 0; }. Int_t Send(Int_t ); { MayNotUse(""Send(Int_t)""); return 0; }. Int_t Send(Int_t , Int_t ); { MayNotUse(""Send(Int_t, Int_t)""); return 0; }. Int_t Send(const char* , Int_t = kMESS_STRING); { MayNotUse(""Send(const char *, Int_t)""); return 0; }. Int_t SendObject(const TObject* , Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TServerSocket.html:13967,error,error,13967,root/html530/TServerSocket.html,https://root.cern,https://root.cern/root/html530/TServerSocket.html,5,['error'],['error']
Availability,"ll description of OpenGL materials, colors and lighting is beyond the scope of this document. You should refer to the OpenGL programming manual (Red Book) for a full discussion. In most cases adjustment of the Diffuse color material + Opacity/Shine properties is sufficient to achieve desired results.; A shape has four-color materials (components):. Diffuse; Ambient; Specular; Emissive. For each of these you can select the component via the radio buttons. Each component can have the red, green and blue values for the component adjusted via the sliders. You can apply this adjustment to the shape itself, or to all shapes sharing a common ‘family’. Shapes of the same family have external objects with the same TObject name string. You can also adjust the ‘Opacity’ and ‘Shine’ for the shapes materials via the sliders.; 9.13.2.11 Geometry; Viewer Controls Pane ‘Geometry’ tab.; Review and modify the shapes X/Y/Z center and scaling factors via the edit boxes. Selection and editing of shapes is not available via the API at present.; 9.13.2.12 Outputting Viewer Contents; The current viewer rendering can be output to an external EPS or PDF, using the options under the ‘File’ menu on the top menu bar. The file is named ‘viewer.eps’ or ‘viewer.pdf’ and written to the current ROOT directory.; 9.13.3 The X3D Viewer; The X3D viewer is a fairly simple and limited viewer, capable of showing basic lines and polygons. It lacks the quality, performance and more advanced features of the GL Viewer, and additionally is not supported on Windows. It is not actively developed and you are encouraged to use the GL Viewer out of preference. The below table presents the main interactions - these are repeated in the Help dialog of the viewer.; Action KeyActionKey; Wireframe Mode wRotate about xx a; Hidden Line Mode eRotate about yy b; Hidden Surface Mode rRotate about zz c; Move object down uAuto-rotate about x1 2 3; Move object up iAuto-rotate about y4 5 6; Move object left lAuto-rotate about z7 8 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:400365,avail,available,400365,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avail'],['available']
Availability,"ll members ; TMVA::RuleFitParams Class ReferenceTMVA. ; A class doing the actual fitting of a linear model using rules as base functions. ; Definition at line 49 of file RuleFitParams.h. Public Member Functions;  RuleFitParams ();  constructor ;  ; virtual ~RuleFitParams ();  destructor ;  ; Int_t FindGDTau ();  This finds the cutoff parameter tau by scanning several different paths. ;  ; UInt_t GetPathIdx1 () const;  ; UInt_t GetPathIdx2 () const;  ; UInt_t GetPerfIdx1 () const;  ; UInt_t GetPerfIdx2 () const;  ; void Init ();  Initializes all parameters using the RuleEnsemble and the training tree. ;  ; void InitGD ();  Initialize GD path search. ;  ; Double_t LossFunction (const Event &e) const;  Implementation of squared-error ramp loss function (eq 39,40 in ref 1) This is used for binary Classifications where y = {+1,-1} for (sig,bkg) ;  ; Double_t LossFunction (UInt_t evtidx) const;  Implementation of squared-error ramp loss function (eq 39,40 in ref 1) This is used for binary Classifications where y = {+1,-1} for (sig,bkg) ;  ; Double_t LossFunction (UInt_t evtidx, UInt_t itau) const;  Implementation of squared-error ramp loss function (eq 39,40 in ref 1) This is used for binary Classifications where y = {+1,-1} for (sig,bkg) ;  ; void MakeGDPath ();  The following finds the gradient directed path in parameter space. ;  ; Double_t Penalty () const;  This is the ""lasso"" penalty To be used for regression. ;  ; Double_t Risk (UInt_t ind1, UInt_t ind2, Double_t neff) const;  risk assessment ;  ; Double_t Risk (UInt_t ind1, UInt_t ind2, Double_t neff, UInt_t itau) const;  risk assessment for tau model <itau> ;  ; Double_t RiskPath () const;  ; Double_t RiskPerf () const;  ; Double_t RiskPerf (UInt_t itau) const;  ; UInt_t RiskPerfTst ();  Estimates the error rate with the current set of parameters. ;  ; void SetGDErrScale (Double_t s);  ; void SetGDNPathSteps (Int_t np);  ; void SetGDPathStep (Double_t s);  ; void SetGDTau (Double_t t);  ; void SetGDTauPrec (Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html:1043,error,error,1043,doc/master/classTMVA_1_1RuleFitParams.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html,3,['error'],['error']
Availability,"ll package; directories also on slaves. If everything is ok all package directories; should be the same. If redir is kTRUE the result is redirected to the log; file (option available for internal actions). void ShowEnabledPackages(Bool_t all = kFALSE); List which packages are enabled. If all is true show enabled packages; for all active slaves. If everything is ok all active slaves should; have the same packages enabled. Int_t ClearPackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t ClearPackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackageOnClient(const char* package); Remove a specific package 'pack' from the client.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t BuildPackage(const char* package, TProof::EBuildPackageOpt opt = kBuildAll); Build specified package. Executes the PROOF-INF/BUILD.sh; script if it exists on all unique nodes. If opt is kBuildOnSlavesNoWait; then submit build command to slaves, but don't wait; for results. If opt is kCollectBuildResults then collect result; from slaves. To be used on the master.; If opt = kBuildAll (default) then submit and wait for results; (to be used on the client).; Returns 0 in case of success and -1 in case of error. Int_t BuildPackageOnClient(const char* package, Int_t opt = 0, TString* path = 0); Build specified package on the client. Executes the PROOF-INF/BUILD.sh; script if it exists on the client.; If opt == 0, both the preparation and building phases are run.; If opt == 1, only the preparation phase (asserting and, eventually, downloading; of the package) is done; '*path' contains the full path to the; package to be passed in the next call; If opt == 2, on",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProof.html:61752,error,error,61752,root/html530/TProof.html,https://root.cern,https://root.cern/root/html530/TProof.html,2,['error'],['error']
Availability,"ll package; directories also on slaves. If everything is ok all package directories; should be the same. If redir is kTRUE the result is redirected to the log; file (option available for internal actions). void ShowEnabledPackages(Bool_t all = kFALSE); List which packages are enabled. If all is true show enabled packages; for all active slaves. If everything is ok all active slaves should; have the same packages enabled. Int_t ClearPackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t ClearPackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackageOnClient(const char* package); Remove a specific package 'pack' from the client.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t BuildPackage(const char* package, TProof::EBuildPackageOpt opt = kBuildAll, Int_t chkveropt = 2, TList* workers = 0); Build specified package. Executes the PROOF-INF/BUILD.sh; script if it exists on all unique nodes. If opt is kBuildOnSlavesNoWait; then submit build command to slaves, but don't wait; for results. If opt is kCollectBuildResults then collect result; from slaves. To be used on the master.; If opt = kBuildAll (default) then submit and wait for results; (to be used on the client).; Returns 0 in case of success and -1 in case of error. Int_t BuildPackageOnClient(const char* package, Int_t opt = 0, TString* path = 0, Int_t chkveropt = 2); Build specified package on the client. Executes the PROOF-INF/BUILD.sh; script if it exists on the client.; If opt == 0, both the preparation and building phases are run.; If opt == 1, only the preparation phase (asserting and, eventually, downloading; of the package) is done; '*path' contains the full path ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:71004,error,error,71004,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,1,['error'],['error']
Availability,"ll package; directories also on slaves. If everything is ok all package directories; should be the same. If redir is kTRUE the result is redirected to the log; file (option available for internal actions). void ShowEnabledPackages(Bool_t all = kFALSE); List which packages are enabled. If all is true show enabled packages; for all active slaves. If everything is ok all active slaves should; have the same packages enabled. Int_t ClearPackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t ClearPackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackageOnClient(const char* package); Remove a specific package 'pack' from the client.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t BuildPackage(const char* package, TProof::EBuildPackageOpt opt = kBuildAll, Int_t chkveropt = kCheckROOT); Build specified package. Executes the PROOF-INF/BUILD.sh; script if it exists on all unique nodes. If opt is kBuildOnSlavesNoWait; then submit build command to slaves, but don't wait; for results. If opt is kCollectBuildResults then collect result; from slaves. To be used on the master.; If opt = kBuildAll (default) then submit and wait for results; (to be used on the client).; Returns 0 in case of success and -1 in case of error. Int_t BuildPackageOnClient(const char* package, Int_t opt = 0, TString* path = 0, Int_t chkveropt = kCheckROOT); Build specified package on the client. Executes the PROOF-INF/BUILD.sh; script if it exists on the client.; If opt == 0, both the preparation and building phases are run.; If opt == 1, only the preparation phase (asserting and, eventually, downloading; of the package) is done; '*path' contains the full path to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProof.html:73162,error,error,73162,root/html602/TProof.html,https://root.cern,https://root.cern/root/html602/TProof.html,1,['error'],['error']
Availability,"ll package; directories also on slaves. If everything is ok all package directories; should be the same. If redir is kTRUE the result is redirected to the log; file (option available for internal actions). void ShowEnabledPackages(Bool_t all = kFALSE); List which packages are enabled. If all is true show enabled packages; for all active slaves. If everything is ok all active slaves should; have the same packages enabled. Int_t ClearPackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t ClearPackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackageOnClient(const char* package); Remove a specific package 'pack' from the client.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t BuildPackage(const char* package, TProof::EBuildPackageOpt opt = kBuildAll, Int_t chkveropt = kCheckROOT, TList* workers = 0); Build specified package. Executes the PROOF-INF/BUILD.sh; script if it exists on all unique nodes. If opt is kBuildOnSlavesNoWait; then submit build command to slaves, but don't wait; for results. If opt is kCollectBuildResults then collect result; from slaves. To be used on the master.; If opt = kBuildAll (default) then submit and wait for results; (to be used on the client).; Returns 0 in case of success and -1 in case of error. Int_t BuildPackageOnClient(const char* package, Int_t opt = 0, TString* path = 0, Int_t chkveropt = kCheckROOT); Build specified package on the client. Executes the PROOF-INF/BUILD.sh; script if it exists on the client.; If opt == 0, both the preparation and building phases are run.; If opt == 1, only the preparation phase (asserting and, eventually, downloading; of the package) is done; '*path' conta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProof.html:73835,error,error,73835,root/html604/TProof.html,https://root.cern,https://root.cern/root/html604/TProof.html,1,['error'],['error']
Availability,"ll queries known by the server. ; Definition at line 5967 of file TProof.cxx. ◆ Retrieve() [2/2]. Int_t TProof::Retrieve ; (; Int_t ; qry, . const char * ; path = 0 . ). Send retrieve request for the qry-th query in fQueries. ; If path is defined save it to path. ; Definition at line 5948 of file TProof.cxx. ◆ SaveActiveList(). void TProof::SaveActiveList ; (; ). private . Save current list of active workers. ; Definition at line 11542 of file TProof.cxx. ◆ SaveInputData(). Int_t TProof::SaveInputData ; (; TQueryResult * ; qr, . const char * ; cachedir, . TString & ; emsg . ). staticprotected . Save input data file from 'cachedir' into the sandbox or create a the file with input data objects. ; Definition at line 12311 of file TProof.cxx. ◆ SavePerfTree(). Int_t TProof::SavePerfTree ; (; const char * ; pf = 0, . const char * ; ref = 0 . ). Save performance information from TPerfStats to file 'pf'. ; If 'ref' is defined, do it for query 'ref'. Return 0 on sucecss, -1 in case of any error ; Definition at line 12646 of file TProof.cxx. ◆ SaveWorkerInfo(). void TProof::SaveWorkerInfo ; (; ). protectedvirtual . Save information about the worker set in the file .workers in the working dir. ; Called each time there is a change in the worker setup, e.g. by TProof::MarkBad(). ; Definition at line 11808 of file TProof.cxx. ◆ SendCommand(). Int_t TProof::SendCommand ; (; const char * ; cmd, . ESlaves ; list = kActive . ). private . Send command to be executed on the PROOF master and/or slaves. ; Command can be any legal command line command, however commands like "".x file.C"" or "".L file.C"" will not cause the file.C to be transfered to the PROOF cluster. In that case use TProof::Exec(). Returns the status send by the remote server as part of the kPROOF_LOGDONE message. Typically this is the return code of the command on the remote side. Returns -1 in case of error. ; Definition at line 6631 of file TProof.cxx. ◆ SendCurrentState() [1/2]. Int_t TProof::SendCurrentState ; (; ESla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:136095,error,error,136095,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['error'],['error']
Availability,"ll signals. private:. TList*fActivelist of sockets to monitor; TList*fDeActivelist of (temporary) disabled sockets; Bool_tfInterruptflags an interrupt to Select; Bool_tfMainLooptrue if monitoring sockets within the main event loop; TSocket*fReadysocket which is ready to be read or written. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMonitor(Bool_t mainloop = kTRUE); Create a monitor object. If mainloop is true the monitoring will be; done in the main event loop. TMonitor(const TMonitor& m); Copy constructor. ~TMonitor(); Cleanup the monitor object. Does not delete sockets being monitored. void Add(TSocket* sock, Int_t interest = kRead); Add socket to the monitor's active list. If interest=kRead then we; want to monitor the socket for read readiness, if interest=kWrite; then we monitor the socket for write readiness, if interest=kRead|kWrite; then we monitor both read and write readiness. void SetInterest(TSocket* sock, Int_t interest = kRead); Set interest mask for socket sock to interest. If the socket is not; in the active list move it or add it there.; If interest=kRead then we want to monitor the socket for read readiness,; if interest=kWrite then we monitor the socket for write readiness,; if interest=kRead|kWrite then we monitor both read and write readiness. void Remove(TSocket* sock); Remove a socket from the monitor. void RemoveAll(); Remove all sockets from the monitor. void Activate(TSocket* sock); Activate a de-activated socket. void ActivateAll(); Activate all de-activated sockets. void DeActivate(TSocket* sock); De-activate a socket. void DeActivateAll(); De-activate all activated sockets. TSocket * Select(); Return pointer to socket for which an event is waiting.; Select can be interrupt by a call to Interrupt() (e.g. connected with a; Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable; in such a case.; Return 0 in case of error. TSocket * Select(Long_t timeout); Return pointer to s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMonitor.html:10677,mask,mask,10677,root/html528/TMonitor.html,https://root.cern,https://root.cern/root/html528/TMonitor.html,6,['mask'],['mask']
Availability,"ll the Profile: w = 1/sigma^2; The resulting error in TProfile is then 1./SQRT( Sum(1./sigma^2) ). TProfile(const TProfile& profile); Copy constructor. Bool_t Add(TF1* h1, Double_t c1 = 1, Option_t* option = """"); Performs the operation: this = this + c1*f1. Bool_t Add(const TH1* h1, Double_t c1 = 1); Performs the operation: this = this + c1*h1. Bool_t Add(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1); -*-*Replace contents of this profile by the addition of h1 and h2; *-* =============================================================. this = c1*h1 + c2*h2. c1 and c2 are considered as weights applied to the two summed profiles.; The operation acts therefore like merging the two profiles with a weight c1 and c2. void Approximate(Bool_t approx = kTRUE); static function; set the fgApproximate flag. When the flag is true, the function GetBinError; will approximate the bin error with the average profile error on all bins; in the following situation only; - the number of bins in the profile is less than 1002; - the bin number of entries is small ( <5); - the estimated bin error is extremely small compared to the bin content; (see TProfile::GetBinError). Int_t BufferEmpty(Int_t action = 0); Fill histogram with all entries in the buffer.; action = -1 histogram is reset and refilled from the buffer (called by THistPainter::Paint); action = 0 histogram is filled from the buffer; action = 1 histogram is filled and buffer is deleted; The buffer is automatically deleted when the number of entries; in the buffer is greater than the number of entries in the histogram. Int_t BufferFill(Double_t x, Double_t y, Double_t w); accumulate arguments in buffer. When buffer is full, empty the buffer; fBuffer[0] = number of entries in buffer; fBuffer[1] = w of first entry; fBuffer[2] = x of first entry; fBuffer[3] = y of first entry. void Copy(TObject& hnew) const; -*-*-*Copy a Profile histogram to a new profile histogram; *-* ===================================================",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProfile.html:32795,error,error,32795,root/html534/TProfile.html,https://root.cern,https://root.cern/root/html534/TProfile.html,9,['error'],['error']
Availability,"ll the branches of the subbranches are; 1137/// also removed from the cache.; 1138///; 1139/// Returns:; 1140/// - 0 branch dropped or not in cache; 1141/// - -1 on error; 1142 ; 1143Int_t TTree::DropBranchFromCache(const char*bname, bool subbranches); 1144{; 1145 if (!GetTree()) {; 1146 if (LoadTree(0)<0) {; 1147 Error(""DropBranchFromCache"",""Could not load a tree"");; 1148 return -1;; 1149 }; 1150 }; 1151 if (GetTree()) {; 1152 if (GetTree() != this) {; 1153 return GetTree()->DropBranchFromCache(bname, subbranches);; 1154 }; 1155 } else {; 1156 Error(""DropBranchFromCache"", ""No tree is available. Branch was not dropped from the cache"");; 1157 return -1;; 1158 }; 1159 ; 1160 TFile *f = GetCurrentFile();; 1161 if (!f) {; 1162 Error(""DropBranchFromCache"", ""No file is available. Branch was not dropped from the cache"");; 1163 return -1;; 1164 }; 1165 TTreeCache *tc = GetReadCache(f,true);; 1166 if (!tc) {; 1167 Error(""DropBranchFromCache"", ""No cache is available, branch not dropped"");; 1168 return -1;; 1169 }; 1170 return tc->DropBranch(bname,subbranches);; 1171}; 1172 ; 1173////////////////////////////////////////////////////////////////////////////////; 1174/// Remove the branch b from the Tree cache.; 1175/// if subbranches is true all the branches of the subbranches are; 1176/// also removed from the cache.; 1177///; 1178/// Returns:; 1179/// - 0 branch dropped or not in cache; 1180/// - -1 on error; 1181 ; 1182Int_t TTree::DropBranchFromCache(TBranch *b, bool subbranches); 1183{; 1184 if (!GetTree()) {; 1185 if (LoadTree(0)<0) {; 1186 Error(""DropBranchFromCache"",""Could not load a tree"");; 1187 return -1;; 1188 }; 1189 }; 1190 if (GetTree()) {; 1191 if (GetTree() != this) {; 1192 Int_t res = GetTree()->DropBranchFromCache(b, subbranches);; 1193 if (res<0) {; 1194 Error(""DropBranchFromCache"", ""Error dropping branch"");; 1195 }; 1196 return res;; 1197 }; 1198 } else {; 1199 Error(""DropBranchFromCache"", ""No tree is available. Branch was not dropped from the cache"");; 1200",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:41434,avail,available,41434,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['avail'],['available']
Availability,"ll the results ;  ; std::unique_ptr< RooDataSet > fAltDetailedOutput;  ; std::unique_ptr< SamplingDistribution > fAltDistr;  ; double fAlternatePValue;  p-value for the alternate hypothesis (small number means disfavoured) ;  ; double fAlternatePValueError;  error of p-value for the alternate hypothesis (small number means disfavoured) ;  ; bool fBackgroundIsAlt;  ; std::unique_ptr< RooDataSet > fFitInfo;  ; std::unique_ptr< RooDataSet > fNullDetailedOutput;  ; std::unique_ptr< SamplingDistribution > fNullDistr;  ; double fNullPValue;  p-value for the null hypothesis (small number means disfavoured) ;  ; double fNullPValueError;  error of p-value for the null hypothesis (small number means disfavoured) ;  ; bool fPValueIsRightTail;  ; double fTestStatisticData;  result of the test statistic evaluated on data ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; void UpdatePValue (const SamplingDistribution *distr, double &pvalue, double &perror, bool pIsRightTail);  updates the pvalue if sufficient data is available ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Inter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html:15808,avail,available,15808,doc/master/classRooStats_1_1HypoTestResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html,1,['avail'],['available']
Availability,"ll this function twice with the same selector file; in the same script. If this is required, proceed as indicated in NOTE1,; by getting a pointer to the corresponding TSelector,eg; workaround 1. void stubs1() {; TSelector *selector = TSelector::GetSelector(""h1test.C"");; TFile *f1 = new TFile(""stubs_nood_le1.root"");; TTree *h1 = (TTree*)f1->Get(""h1"");; h1->Process(selector);; TFile *f2 = new TFile(""stubs_nood_le1_coarse.root"");; TTree *h2 = (TTree*)f2->Get(""h1"");; h2->Process(selector);; }; or use ACLIC to compile the selector; workaround 2. void stubs2() {; TFile *f1 = new TFile(""stubs_nood_le1.root"");; TTree *h1 = (TTree*)f1->Get(""h1"");; h1->Process(""h1test.C+"");; TFile *f2 = new TFile(""stubs_nood_le1_coarse.root"");; TTree *h2 = (TTree*)f2->Get(""h1"");; h2->Process(""h1test.C+"");; }. Long64_t Process(TSelector* selector, Option_t* option, Long64_t nentries, Long64_t firstentry); Process this tree executing the code in the specified selector.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. The TSelector class has the following member functions:. Begin(): called every time a loop on the tree starts,; a convenient place to create your histograms.; SlaveBegin(): called after Begin(), when on PROOF called only on the; slave servers.; Process(): called for each event, in this function you decide what; to read and fill your histograms.; SlaveTerminate: called at the end of the loop on the tree, when on PROOF; called only on the slave servers.; Terminate(): called at the end of the loop on the tree,; a convenient place to draw/fit your histograms. If the Tree (Chain) has an associated EventList, the loop is on the nentries; of the EventList, starting at firstentry, otherwise the loop is on the; specified Tree entries. void RecursiveRemove(TObject* obj); cleanup pointers in the player pointing to obj. Long64_t Scan(const char* varexp, const char* selection, Option_t* option, Long64_t nentries, Long64_t firstentry); Loop on Tree and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreePlayer.html:51171,error,error,51171,root/html528/TTreePlayer.html,https://root.cern,https://root.cern/root/html528/TTreePlayer.html,6,['error'],['error']
Availability,"ll(Double_t x, Double_t y, Double_t z, Double_t w); -*-*-*Fill a Profile2D histogram with weights; *-* =======================================. Double_t GetBinContent(Int_t bin) const; Return bin content of a Profile2D histogram*-*-; *-* ===========================================. Double_t GetBinEntries(Int_t bin) const; Return bin entries of a Profile2D histogram*-*-; *-* ===========================================. Double_t GetBinEffectiveEntries(Int_t bin); Return bin effective entries for a weighted filled Profile histogram.; In case of an unweighted profile, it is equivalent to the number of entries per bin; The effective entries is defined as the square of the sum of the weights divided by the; sum of the weights square.; TProfile::Sumw2() must be called before filling the profile with weights.; Only by calling this method the sum of the square of the weights per bin is stored. *-* =========================================. Double_t GetBinError(Int_t bin) const; *-*-*-*-*-*-*Return bin error of a Profile2D histogram*-*-*-*-*-*-*-*-*. Computing errors: A moving field. The computation of errors for a TProfile2D has evolved with the versions; of ROOT. The difficulty is in computing errors for bins with low statistics.; - prior to version 3.10, we had no special treatment of low statistic bins.; As a result, these bins had huge errors. The reason is that the; expression eprim2 is very close to 0 (rounding problems) or 0.; - The algorithm is modified/protected for the case; when a TProfile2D is projected (ProjectionX). The previous algorithm; generated a N^2 problem when projecting a TProfile2D with a large number of; bins (eg 100000).; - in version 3.10/02, a new static function TProfile::Approximate; is introduced to enable or disable (default) the approximation.; (see also comments in TProfile::GetBinError). Option_t * GetErrorOption() const; -*-*Return option to compute profile2D errors; *-* =========================================. void GetStats(Double_t* st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile2D.html:36309,error,error,36309,root/html528/TProfile2D.html,https://root.cern,https://root.cern/root/html528/TProfile2D.html,6,['error'],['error']
Availability,"ll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidCreate(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFillBinarySearchTree(const TMVA::Event* ev); virtual voidFillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidFinalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual vector<Float_t>GetCellValue(const map<Int_t,Float_t>& xvec, TMVA::ECellValue cv); virtual Float_tGetCellValue(const TMVA::PDEFoamCell* cell, TMVA::ECellValue cv); virtual Float_tGetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringGetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tGetMaxDepth() const; UInt_tGetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tGetNCells() const; UInt_tGetNInActiveCells",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__PDEFoam.html:2899,error,error,2899,root/html602/TMVA__PDEFoam.html,https://root.cern,https://root.cern/root/html602/TMVA__PDEFoam.html,2,['error'],['error']
Availability,"ll; 8 * copies of the Software, and to permit persons to whom the Software is; 9 * furnished to do so, subject to the following conditions:; 10 *; 11 * The above copyright notice and this permission notice shall be included in; 12 * all copies or substantial portions of the Software.; 13 *; 14 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; 15 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; 16 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE; 17 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER; 18 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,; 19 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN; 20 * THE SOFTWARE.; 21 */; 22 ; 23#if defined(__GNUC__) || defined(__MINGW32__); 24#define GCC_VERSION \; 25 (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__); 26#if GCC_VERSION >= 40500; 27/* gcc diagnostic pragmas available */; 28#define GCC_DIAGNOSTIC; 29#endif; 30#endif; 31 ; 32#if defined(GCC_DIAGNOSTIC); 33/* Disable unused macros warnings - not all defines are required; 34 * for all systems and all compilers. */; 35#pragma GCC diagnostic ignored ""-Wunused-macros""; 36/* A padding warning is just plain useless */; 37#pragma GCC diagnostic ignored ""-Wpadded""; 38#endif; 39 ; 40#if defined(__clang__) /* GCC does not (yet) support this pragma */; 41/* We must set some flags for the headers we include. These flags; 42 * are reserved ids according to C99, so we need to disable a; 43 * warning for that. */; 44#pragma GCC diagnostic push; 45#pragma GCC diagnostic ignored ""-Wreserved-id-macro""; 46#endif; 47 ; 48#if defined(_WIN32); 49#if !defined(_CRT_SECURE_NO_WARNINGS); 50#define _CRT_SECURE_NO_WARNINGS /* Disable deprecation warning in VS2005 */; 51#endif; 52#if !defined(_WIN32_WINNT) /* defined for tdm-gcc so we can use getnameinfo */; 53#define _WIN32_WINNT 0x0502; 54#endif; 55#else; 56#if !d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:1609,avail,available,1609,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,['avail'],['available']
Availability,"llback = 1;; 12709 }; 12710 mg_free(inflated);; 12711 }; 12712 } else; 12713#endif; 12714 if (!ws_data_handler(conn,; 12715 mop,; 12716 (char *)data,; 12717 (size_t)data_len,; 12718 callback_data)) {; 12719 exit_by_callback = 1;; 12720 }; 12721 }; 12722 }; 12723 ; 12724 /* It a buffer has been allocated, free it again */; 12725 if (data != mem) {; 12726 mg_free(data);; 12727 }; 12728 ; 12729 if (exit_by_callback) {; 12730 DEBUG_TRACE(""Callback requests to close connection from %s:%u"",; 12731 conn->request_info.remote_addr,; 12732 conn->request_info.remote_port);; 12733 break;; 12734 }; 12735 if ((mop & 0xf) == MG_WEBSOCKET_OPCODE_CONNECTION_CLOSE) {; 12736 /* Opcode == 8, connection close */; 12737 DEBUG_TRACE(""Message requests to close connection from %s:%u"",; 12738 conn->request_info.remote_addr,; 12739 conn->request_info.remote_port);; 12740 break;; 12741 }; 12742 ; 12743 /* Not breaking the loop, process next websocket frame. */; 12744 } else {; 12745 /* Read from the socket into the next available location in the; 12746 * message queue. */; 12747 n = pull_inner(NULL,; 12748 conn,; 12749 conn->buf + conn->data_len,; 12750 conn->buf_size - conn->data_len,; 12751 timeout);; 12752 if (n <= -2) {; 12753 /* Error, no bytes read */; 12754 DEBUG_TRACE(""PULL from %s:%u failed"",; 12755 conn->request_info.remote_addr,; 12756 conn->request_info.remote_port);; 12757 break;; 12758 }; 12759 if (n > 0) {; 12760 conn->data_len += n;; 12761 /* Reset open PING count */; 12762 ping_count = 0;; 12763 } else {; 12764 if (STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag); 12765 && (!conn->must_close)) {; 12766 if (ping_count > MG_MAX_UNANSWERED_PING) {; 12767 /* Stop sending PING */; 12768 DEBUG_TRACE(""Too many (%i) unanswered ping from %s:%u ""; 12769 ""- closing connection"",; 12770 ping_count,; 12771 conn->request_info.remote_addr,; 12772 conn->request_info.remote_port);; 12773 break;; 12774 }; 12775 if (enable_ping_pong) {; 12776 /* Send Websocket PING message */; 12777 DEBUG_TRACE(""PIN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:370411,avail,available,370411,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['avail'],['available']
Availability,"llback = 1;; 12710 }; 12711 mg_free(inflated);; 12712 }; 12713 } else; 12714#endif; 12715 if (!ws_data_handler(conn,; 12716 mop,; 12717 (char *)data,; 12718 (size_t)data_len,; 12719 callback_data)) {; 12720 exit_by_callback = 1;; 12721 }; 12722 }; 12723 }; 12724 ; 12725 /* It a buffer has been allocated, free it again */; 12726 if (data != mem) {; 12727 mg_free(data);; 12728 }; 12729 ; 12730 if (exit_by_callback) {; 12731 DEBUG_TRACE(""Callback requests to close connection from %s:%u"",; 12732 conn->request_info.remote_addr,; 12733 conn->request_info.remote_port);; 12734 break;; 12735 }; 12736 if ((mop & 0xf) == MG_WEBSOCKET_OPCODE_CONNECTION_CLOSE) {; 12737 /* Opcode == 8, connection close */; 12738 DEBUG_TRACE(""Message requests to close connection from %s:%u"",; 12739 conn->request_info.remote_addr,; 12740 conn->request_info.remote_port);; 12741 break;; 12742 }; 12743 ; 12744 /* Not breaking the loop, process next websocket frame. */; 12745 } else {; 12746 /* Read from the socket into the next available location in the; 12747 * message queue. */; 12748 n = pull_inner(NULL,; 12749 conn,; 12750 conn->buf + conn->data_len,; 12751 conn->buf_size - conn->data_len,; 12752 timeout);; 12753 if (n <= -2) {; 12754 /* Error, no bytes read */; 12755 DEBUG_TRACE(""PULL from %s:%u failed"",; 12756 conn->request_info.remote_addr,; 12757 conn->request_info.remote_port);; 12758 break;; 12759 }; 12760 if (n > 0) {; 12761 conn->data_len += n;; 12762 /* Reset open PING count */; 12763 ping_count = 0;; 12764 } else {; 12765 if (STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag); 12766 && (!conn->must_close)) {; 12767 if (ping_count > MG_MAX_UNANSWERED_PING) {; 12768 /* Stop sending PING */; 12769 DEBUG_TRACE(""Too many (%i) unanswered ping from %s:%u ""; 12770 ""- closing connection"",; 12771 ping_count,; 12772 conn->request_info.remote_addr,; 12773 conn->request_info.remote_port);; 12774 break;; 12775 }; 12776 if (enable_ping_pong) {; 12777 /* Send Websocket PING message */; 12778 DEBUG_TRACE(""PIN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:370444,avail,available,370444,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['avail'],['available']
Availability,"llect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes.createClones. ;  ; void Build (TGeoVolume *vol);  Collect information about geometry from single volume like it done in JSROOT ClonedNodes.createClones. ;  ; bool ChangeConfiguration (const std::string &json);  Change configuration by client Returns true if any parameter was really changed. ;  ; bool ChangeNodeVisibility (const std::vector< std::string > &path, bool on);  Change visibility for specified element Returns true if changes was performed. ;  ; bool ClearAllPhysVisibility ();  Reset all custom visibility settings. ;  ; void ClearCache ();  Clear cached data, need to be clear when connection broken. ;  ; void ClearDrawData ();  Clear raw data. Will be rebuild when next connection will be established. ;  ; bool ClearPhysNodeVisibility (const std::vector< std::string > &path);  Reset custom visibility of physical node by path. ;  ; int FindNodeId (const std::vector< int > &stack);  Returns nodeid for given stack array, returns -1 in case of failure. ;  ; std::string GetActiveItem () const;  ; std::vector< int > GetClickedItem () const;  ; std::string GetDrawJson () const;  ; std::string GetDrawOptions () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; std::vector< int > GetHighlightedItem () const;  ; int GetJsonComp () const;  Returns JSON compression level for data transfer. ;  ; int GetMaxVisFaces () const;  Returns maximal visible number of faces, ignored when non-positive. ;  ; int GetMaxVisNodes () const;  Returns maximal visible number of nodes, ignored when non-positive. ;  ; TVirtualMutex * GetMutex () const;  Return currently used mutex. ;  ; int GetNSegments () const;  Return of segments for cylindrical shapes, if 0 - default value will be used. ;  ; int GetNumNodes () const;  Number of unique nodes in the geometry. ;  ; std::string GetSearch () const;  ; std::string GetSearchJson () const;  ; bool GetTopVisible () const;  Returns draw option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:1664,failure,failure,1664,doc/v632/classROOT_1_1RGeomDescription.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html,1,['failure'],['failure']
Availability,"llect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes.createClones. ;  ; void Build (TGeoVolume *vol);  Collect information about geometry from single volume like it done in JSROOT ClonedNodes.createClones. ;  ; bool ChangeConfiguration (const std::string &json);  Change configuration by client Returns true if any parameter was really changed. ;  ; bool ChangeNodeVisibility (const std::vector< std::string > &path, bool on);  Change visibility for specified element Returns true if changes was performed. ;  ; bool ClearAllPhysVisibility ();  Reset all custom visibility settings. ;  ; void ClearCache ();  Clear cached data, need to be clear when connection broken. ;  ; void ClearDrawData ();  Clear raw data. Will be rebuild when next connection will be established. ;  ; bool ClearPhysNodeVisibility (const std::vector< std::string > &path);  Reset custom visibility of physical node by path. ;  ; int FindNodeId (const std::vector< int > &stack);  Returns nodeid for given stack array, returns -1 in case of failure. ;  ; std::string GetActiveItem () const;  ; std::vector< int > GetClickedItem () const;  ; std::string GetDrawJson () const;  ; std::string GetDrawOptions () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; std::vector< int > GetHighlightedItem () const;  ; int GetJsonComp () const;  Returns JSON compression level for data transfer. ;  ; int GetMaxVisFaces () const;  Returns maximal visible number of faces, ignored when non-positive. ;  ; int GetMaxVisNodes () const;  Returns maximal visible number of nodes, ignored when non-positive. ;  ; TVirtualMutex * GetMutex () const;  Return currently used mutex. ;  ; int GetNSegments () const;  Return of segments for cylindrical shapes, if 0 - default value will be used. ;  ; int GetNumNodes () const;  Number of unique nodes in the geometry. ;  ; std::string GetSearch () const;  ; std::string GetSearchJson () const;  ; const std::vector< int > & GetSelectedStack () co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html:1665,failure,failure,1665,doc/master/classROOT_1_1RGeomDescription.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomDescription.html,1,['failure'],['failure']
Availability,"llection*TSystem::fSignalHandlerList of signal handlers; TFdSet*TSystem::fSignals!Signals that were trapped; TStringTSystem::fSoExtExtension of shared library (.so, .sl, .a, .dll, etc.); TSeqCollection*TSystem::fStdExceptionHandlerList of std::exception handlers; TSeqCollection*TSystem::fTimersList of timers; TStringTNamed::fTitleobject title; TStringTSystem::fWdpathWorking directory; TFdSet*TSystem::fWritemask!Files that should be checked for write events; TFdSet*TSystem::fWriteready!Files with writes waiting. private:. void*fDirpdirectory handler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TWebSystem(); Create helper class that allows directory access via httpd.; The name must start with '-' to bypass the TSystem singleton check. Int_t MakeDirectory(const char* name); Make a directory via httpd. Not supported. void * OpenDirectory(const char* name); Open a directory via httpd. Returns an opaque pointer to a dir; structure. Returns 0 in case of error. void FreeDirectory(void* dirp); Free directory via httpd. const char * GetDirEntry(void* dirp); Get directory entry via httpd. Returns 0 in case no more entries. Int_t GetPathInfo(const char* path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed. Bool_t AccessPathName(const char* path, EAccessMode mode); Returns FALSE if one can access a file using the specified access mode.; Mode is the same as for the Unix access(2) function.; Attention, bizarre convention of return value!!. Int_t Unlink(const char* path); Unlink, i.e. remove, a file or directory. Returns 0 when successful,; -1 in case of failure. Not supported for httpd. void * GetDirPtr() const; { return fDirp; }. TWebSystem(). virtual ~TWebSystem(); { }. » Author: Fons Rademakers 17/01/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TWebSystem.html:20066,error,error,20066,root/html604/TWebSystem.html,https://root.cern,https://root.cern/root/html604/TWebSystem.html,1,['error'],['error']
Availability,"llection.h. ◆ first(). RooAbsArg * RooAbsCollection::first ; (; ); const. inline . Definition at line 291 of file RooAbsCollection.h. ◆ get(). Storage_t const & RooAbsCollection::get ; (; ); const. inline . Const access to the underlying stl container. ; Definition at line 116 of file RooAbsCollection.h. ◆ getCatIndex(). Int_t RooAbsCollection::getCatIndex ; (; const char * ; name, . Int_t ; defVal = 0, . bool ; verbose = false . ); const. Get index value of a RooAbsCategory stored in set with given name. ; If none is found, value of defVal is returned. No error messages are printed unless the verbose flag is set ; Definition at line 1064 of file RooAbsCollection.cxx. ◆ getCatLabel(). const char * RooAbsCollection::getCatLabel ; (; const char * ; name, . const char * ; defVal = """", . bool ; verbose = false . ); const. Get state name of a RooAbsCategory stored in set with given name. ; If none is found, value of defVal is returned. No error messages are printed unless the verbose flag is set ; Definition at line 1021 of file RooAbsCollection.cxx. ◆ getHashTableSize(). Int_t RooAbsCollection::getHashTableSize ; (; ); const. inline . Query the size at which the collection will automatically start using an extra lookup table instead of performing a linear search. ; Definition at line 111 of file RooAbsCollection.h. ◆ GetName(). const char * RooAbsCollection::GetName ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 342 of file RooAbsCollection.h. ◆ getRealValue(). double RooAbsCollection::getRealValue ; (; const char * ; name, . double ; defVal = 0.0, . bool ; verbose = false . ); const. Get value of a RooAbsReal stored in set with given name. ; If none is found, value of defVal is returned. No error messages are printed unless the verbose flag is set ; Definition at line 978 of file RooAbsCollection.cx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCollection.html:41467,error,error,41467,doc/master/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/master/classRooAbsCollection.html,1,['error'],['error']
Availability,"llectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from RooResolutionModel; RooFormulaVar * _basis = nullptr;  Basis function convolved with this resolution model. ;  ; Int_t _basisCode;  Identifier code for selected basis function. ;  ; bool _ownBasis;  Flag indicating ownership of _basis. ;  ; RooTemplateProxy< RooAbsRealLValue > x;  Dependent/convolution variable. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGaussModel.html:72772,error,errors,72772,doc/master/classRooGaussModel.html,https://root.cern,https://root.cern/doc/master/classRooGaussModel.html,1,['error'],['errors']
Availability,"llectionProxy();; 71 TPushPop helper(proxy,ptr);; 72 proxy->Clear(""force"");; 73 }; 74 fVal->DeleteItem(ptr);; 75 }; 76 }; 77};; 78 ; 79/**; 80\class TGenVectorBoolProxy; 81\ingroup IO; 82Local optimization class.; 83 ; 84Collection proxies get copied. On copy we switch the type of the; 85proxy to the concrete STL type. The concrete types are optimized; 86for element access.; 87*/; 88class TGenVectorBoolProxy : public TGenCollectionProxy {; 89 Bool_t fLastValue;; 90 ; 91public:; 92 TGenVectorBoolProxy(const TGenCollectionProxy& c) : TGenCollectionProxy(c), fLastValue(false); 93 {; 94 // Standard Constructor.; 95 }; 96 ~TGenVectorBoolProxy() override; 97 {; 98 // Standard Destructor.; 99 }; 100 void* At(UInt_t idx) override; 101 {; 102 // Return the address of the value at index 'idx'; 103 ; 104 // However we can 'take' the address of the content of std::vector<bool>.; 105 if ( fEnv && fEnv->fObject ) {; 106 auto vec = (std::vector<bool> *)(fEnv->fObject);; 107 fLastValue = (*vec)[idx];; 108 fEnv->fIdx = idx;; 109 return &fLastValue;; 110 }; 111 Fatal(""TGenVectorProxy"",""At> Logic error - no proxy object set."");; 112 return nullptr;; 113 }; 114 ; 115 void DeleteItem(Bool_t force, void* ptr) const override; 116 {; 117 // Call to delete/destruct individual item; 118 if ( force && ptr ) {; 119 fVal->DeleteItem(ptr);; 120 }; 121 }; 122};; 123 ; 124//////////////////////////////////////////////////////////////////////////; 125// //; 126// class TGenBitsetProxy; 127//; 128// Local optimization class.; 129//; 130// Collection proxies get copied. On copy we switch the type of the; 131// proxy to the concrete STL type. The concrete types are optimized; 132// for element access.; 133//; 134//////////////////////////////////////////////////////////////////////////; 135class TGenBitsetProxy : public TGenCollectionProxy {; 136 ; 137public:; 138 TGenBitsetProxy(const TGenCollectionProxy& c) : TGenCollectionProxy(c); 139 {; 140 // Standard Constructor.; 141 }; 142 ~TGenBitsetProxy() o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:3393,error,error,3393,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['error'],['error']
Availability,"lled for this; if not already set. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Multiply. void Paint(Option_t* option = """"); -*-*-*-*-*-*-*Control routine to paint any kind of histograms*-*-*-*-*-*-*. This function is automatically called by TCanvas::Update.; (see TH1::Draw for the list of options). TH1 * Rebin(Int_t ngroup = 2, const char* newname = """", const Double_t* xbins = 0); Rebin this histogram. -case 1 xbins=0; If newname is blank (default), the current histogram is modified and; a pointer to it is returned. If newname is not blank, the current histogram is not modified, and a; new histogram is returned which is a Clone of the current histogram; with its name set to newname. The parameter ngroup indicates how many bins of this have to be merged; into one bin of the result. If the original histogram has errors stored (via Sumw2), the resulting; histograms has new errors correctly calculated. examples: if h1 is an existing TH1F histogram with 100 bins; h1->Rebin(); //merges two bins in one in h1: previous contents of h1 are lost; h1->Rebin(5); //merges five bins in one in h1; TH1F *hnew = h1->Rebin(5,""hnew""); // creates a new histogram hnew; // merging 5 bins of h1 in one bin. NOTE: If ngroup is not an exact divider of the number of bins,; the top limit of the rebinned histogram is reduced; to the upper edge of the last bin that can make a complete; group. The remaining bins are added to the overflow bin.; Statistics will be recomputed from the new bin contents. -case 2 xbins!=0; A new histogram is created (you should specify newname).; The parameter ngroup is the number of variable size bins in the created histogram.; The array xbins must contain ngroup+1 elements that represent the low-edges; of the bins.; If the original histogram has errors stored (via Sumw2), the resulting; histograms has new errors correctly",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TH1.html:96686,error,errors,96686,root/html532/TH1.html,https://root.cern,https://root.cern/root/html532/TH1.html,2,['error'],['errors']
Availability,"llocate internal data structures for size points.Definition TGraphAsymmErrors.cxx:444; TGraphAsymmErrors::GetEYlowDouble_t * GetEYlow() const overrideDefinition TGraphAsymmErrors.h:76; TGraphAsymmErrors::DoMergeBool_t DoMerge(const TGraph *g) overrideProtected function to perform the merge operation of a graph with asymmetric errors.Definition TGraphAsymmErrors.cxx:1077; TGraphAsymmErrors::CopyAndReleasevoid CopyAndRelease(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy and release.Definition TGraphAsymmErrors.cxx:1007; TGraphAsymmErrors::IsATClass * IsA() const overrideDefinition TGraphAsymmErrors.h:89; TGraphAsymmErrors::SetPointEXhighvirtual void SetPointEXhigh(Int_t i, Double_t exh)Set EXhigh for point i.Definition TGraphAsymmErrors.cxx:1362; TGraphAsymmErrors::GetErrorYlowDouble_t GetErrorYlow(Int_t i) const overrideGet low error on Y.Definition TGraphAsymmErrors.cxx:1184; TGraphAsymmErrors::GetErrorXDouble_t GetErrorX(Int_t bin) const overrideReturns the combined error along X at point i by computing the average of the lower and upper varianc...Definition TGraphAsymmErrors.cxx:1122; TGraphAsymmErrors::TGraphAsymmErrorsTGraphAsymmErrors()TGraphAsymmErrors default constructor.Definition TGraphAsymmErrors.cxx:72; TGraphAsymmErrors::operator=TGraphAsymmErrors & operator=(const TGraphAsymmErrors &gr)TGraphAsymmErrors assignment operator.Definition TGraphAsymmErrors.cxx:93; TGraphAsymmErrors::~TGraphAsymmErrors~TGraphAsymmErrors() overrideTGraphAsymmErrors default destructor.Definition TGraphAsymmErrors.cxx:433; TGraphAsymmErrors::Scalevoid Scale(Double_t c1=1., Option_t *option=""y"") overrideMultiply the values and errors of a TGraphAsymmErrors by a constant c1.Definition TGraphAsymmErrors.cxx:1274; TGraphErrors::CalculateScanfFieldsstatic Int_t CalculateScanfFields(const char *fmt)Calculate scan fields.Definition TGraphErrors.cxx:449; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html:64121,error,error,64121,doc/master/TGraphAsymmErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html,1,['error'],['error']
Availability,"llowing drawing options:; ""T[x,y[,tint]]"" : tile image (use specified offset and tint), e.g. ""T100,100,#556655"" with this option the zooming is not possible and disabled; ""N"" : display in new canvas (of original image size); ""X"" : image is drawn expanded to pad size; ""Z"" : image is vectorized and image palette is drawn. The default is to display the image in the current gPad. ; Reimplemented from TObject.; Definition at line 1176 of file TASImage.cxx. ◆ DrawBox(). void TASImage::DrawBox ; (; Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2, . const char * ; col = ""#000000"", . UInt_t ; thick = 1, . Int_t ; mode = 0 . ). overridevirtual . Draw a box. ; Reimplemented from TImage.; Definition at line 4118 of file TASImage.cxx. ◆ DrawCellArray(). void TASImage::DrawCellArray ; (; Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2, . Int_t ; nx, . Int_t ; ny, . UInt_t * ; ic . ). overridevirtual . Draw a cell array. ; Parameters. [in]x1,y1: left down corner ; [in]x2,y2: right up corner ; [in]nx,ny: array size ; [in]ic: array of ARGB32 colors. Draw a cell array. The drawing is done with the pixel precision if (X2-X1)/NX (or Y) is not a exact pixel number the position of the top right corner may be wrong. ; Reimplemented from TImage.; Definition at line 5122 of file TASImage.cxx. ◆ DrawCircle(). void TASImage::DrawCircle ; (; Int_t ; x, . Int_t ; y, . Int_t ; r, . const char * ; col = ""#000000"", . Int_t ; thick = 1 . ). overridevirtual . Draw a circle. ; If thick < 0 - draw filled circle ; Reimplemented from TImage.; Definition at line 6397 of file TASImage.cxx. ◆ DrawCubeBezier(). void TASImage::DrawCubeBezier ; (; Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2, . Int_t ; x3, . Int_t ; y3, . const char * ; col = ""#000000"", . UInt_t ; thick = 1 . ). overridevirtual . Draw a cubic bezier line. ; Reimplemented from TImage.; Definition at line 6318 of file TASImage.cxx. ◆ DrawDashHLine(). void TASImage::DrawDashHLine ; (; UInt_t ; y, . UInt_t ; x1, . UInt_t ; x2, . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASImage.html:43024,down,down,43024,doc/master/classTASImage.html,https://root.cern,https://root.cern/doc/master/classTASImage.html,1,['down'],['down']
Availability,"lls-i,new TGeoTranslation(0,-ycell,0));; }; ; Double_t dxrow = 3.*(dshift+10.)*TMath::Tan(30.*TMath::DegToRad());; Double_t dyrow = dshift+10.;; Int_t nrows = 5;; for (i=0; i<nrows; i++) {; Double_t xrow = 0.5*(2*i+1)*dxrow;; Double_t yrow = 0.5*dyrow;; if ((i%2)==0) yrow = -yrow;; top->AddNode(row, nrows+i+1, new TGeoTranslation(xrow,yrow,0));; top->AddNode(row, nrows-i, new TGeoTranslation(-xrow,-yrow,0));; }; ; //--- close the geometry; geom->CloseGeometry();; ; geom->SetVisLevel(4);; geom->SetVisOption(0);; top->Draw();; }; ; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; kBlue@ kBlueDefinition Rtypes.h:66; TGeoCombiTransClass describing rotation + translation.Definition TGeoMatrix.h:317; TGeoManagerThe manager class for any TGeo geometry.Definition TGeoManager.h:44; TGeoManager::SetVisOptionvoid SetVisOption(Int_t option=0)set drawing mode :Definition TGeoManager.cxx:2426; TGeoManager::SetVisLevelvoid SetVisLevel(Int_t level=3)set default level down to which visualization is performedDefinition TGeoManager.cxx:2459; TGeoManager::CloseGeometryvoid CloseGeometry(Option_t *option=""d"")Closing geometry implies checking the geometry validity, fixing shapes with negative parameters (run-...Definition TGeoManager.cxx:1480; TGeoManager::MakeBoxTGeoVolume * MakeBox(const char *name, TGeoMedium *medium, Double_t dx, Double_t dy, Double_t dz)Make in one step a volume pointing to a box shape with given medium.Definition TGeoManager.cxx:3169; TGeoManager::SetTopVolumevoid SetTopVolume(TGeoVolume *vol)Set the top volume and corresponding node as starting point of the geometry.Definition TGeoManager.cxx:3655; TGeoMaterialBase class describing materials.Definition TGeoMaterial.h:34; TGeoMediumMedia are used to store properties related to tracking and which are useful only when using geometry ...Definition TGeoMedium.h:23; TGeoRotationClass describing rotations.Definition TGeoMatrix.h:168; TGeoRotation::RotateXvoid RotateX(Double_t a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/geom_2assembly_8C.html:3570,down,down,3570,doc/master/geom_2assembly_8C.html,https://root.cern,https://root.cern/doc/master/geom_2assembly_8C.html,1,['down'],['down']
Availability,"load of libImt. ; Definition at line 463 of file TROOT.cxx. ◆ IsParBranchProcessingEnabled(). Bool_t ROOT::Internal::IsParBranchProcessingEnabled ; (; ). Returns true if parallel branch processing is enabled. ; Definition at line 447 of file TROOT.cxx. ◆ LogicalCPUBandwidthControl(). int ROOT::Internal::LogicalCPUBandwidthControl ; (; ). Returns the available number of logical cores. . Checks if there is CFS bandwidth control in place (linux, via cgroups, assuming standard paths); Otherwise, returns the number of logical cores provided by std::thread::hardware_concurrency() . Definition at line 50 of file RTaskArena.cxx. ◆ MinimalErrorHandler(). void ROOT::Internal::MinimalErrorHandler ; (; Int_t ; level, . Bool_t ; abort_bool, . const char * ; location, . const char * ; msg . ). A very simple error handler that is usually replaced by the TROOT default error handler. ; The minimal error handler is not serialized across threads, so that output of multi-threaded programs can get scrambled Noteabort() is only called if abort_bool is true and level >= gErrorIgnoreLevel ; Definition at line 67 of file TError.cxx. ◆ NotifyDirected(). void ROOT::Internal::NotifyDirected ; (; Detail::TBranchProxy * ; x). Definition at line 36 of file TBranchProxyDirector.cxx. ◆ operator<<(). std::ostream & ROOT::Internal::operator<< ; (; std::ostream & ; os, . const RConcurrentHashColl::HashValue & ; h . ). Definition at line 24 of file RConcurrentHashColl.cxx. ◆ operator==(). bool ROOT::Internal::operator== ; (; const RConcurrentHashColl::HashValue & ; lhs, . const RConcurrentHashColl::HashValue & ; rhs . ). inline . Definition at line 69 of file RConcurrentHashColl.hxx. ◆ ParallelReduceHelper(). template<typename T > . static T ROOT::Internal::ParallelReduceHelper ; (; const std::vector< T > & ; objs, . const std::function< T(T a, T b)> & ; redfunc . ). static . A helper function to implement the TThreadExecutor::ParallelReduce methods. ; Definition at line 122 of file TThreadExecutor.cxx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Internal.html:38311,error,error,38311,doc/master/namespaceROOT_1_1Internal.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html,2,['error'],['error']
Availability,"load' is true, (attempt to) generate a new ClassInfo even if we already have one. ; Implements TInterpreter.; Definition at line 4041 of file TCling.cxx. ◆ SetClassSharedLibs(). Int_t TCling::SetClassSharedLibs ; (; const char * ; cls, . const char * ; libs . ). finalvirtual . Register the AutoLoading information for a class. ; libs is a space separated list of libraries. ; Implements TInterpreter.; Definition at line 6078 of file TCling.cxx. ◆ SetDeclAttr(). void TCling::SetDeclAttr ; (; DeclId_t ; declId, . const char * ; attribute . ). finalvirtual . Implements TInterpreter.; Definition at line 8725 of file TCling.cxx. ◆ SetErrmsgcallback(). void TCling::SetErrmsgcallback ; (; void * ; p); const. finalvirtual . Set a callback to receive error messages. ; Reimplemented from TInterpreter.; Definition at line 7606 of file TCling.cxx. ◆ SetErrorMessages(). Bool_t TCling::SetErrorMessages ; (; Bool_t ; enable = kTRUE). finalvirtual . If error messages are disabled, the interpreter should suppress its failures and warning messages from stdout. ; Return the previous state. ; Implements TInterpreter.; Definition at line 7356 of file TCling.cxx. ◆ SetGetline(). void TCling::SetGetline ; (; const char *(*)(const char *prompt) ; getlineFunc, . void(*)(const char *line) ; histaddFunc . ). finalvirtual . Set a getline function to call when input is needed. ; Implements TInterpreter.; Definition at line 3648 of file TCling.cxx. ◆ SetProcessLineLock(). void TCling::SetProcessLineLock ; (; Bool_t ; lock = kTRUE). inlinefinalvirtual . Implements TInterpreter.; Definition at line 320 of file TCling.h. ◆ SetSuspendAutoParsing(). Bool_t TCling::SetSuspendAutoParsing ; (; Bool_t ; value). finalprotectedvirtual . Suspend the Autoparsing of headers. ; Returns the old value, i.e whether it was suspended or not. ; Implements TInterpreter.; Definition at line 7596 of file TCling.cxx. ◆ SetTempLevel(). void TCling::SetTempLevel ; (; int ; val); const. finalvirtual . Create / close a scope f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:132612,error,error,132612,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,2,"['error', 'failure']","['error', 'failures']"
Availability,"loatParamList; ofstream*_logfile; Int_t_maxEvalMult; Double_t_maxFCN; Int_t_nPar; Int_t_numBadNLL; Int_t_optConst; Int_t_printEvalErrors; Int_t_printLevel; Bool_t_profile; Int_t_status; vector<std::pair<std::string,int> >_statusHistory; static TVirtualFitter*_theFitter; TStopwatch_timer; Bool_t_verbose; Int_t_warnLevel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup method called by atexit handler installed by RooSentinel; to delete all global heap objects when the program is terminated. RooMinuit(RooAbsReal& function); Construct MINUIT interface to given function. Function can be anything,; but is typically a -log(likelihood) implemented by RooNLLVar or a chi^2; (implemented by RooChi2Var). Other frequent use cases are a RooAddition; of a RooNLLVar plus a penalty or constraint term. This class propagates; all RooFit information (floating parameters, their values and errors); to MINUIT before each MINUIT call and propagates all MINUIT information; back to the RooFit object at the end of each call (updated parameter; values, their (asymmetric errors) etc. The default MINUIT error level; for HESSE and MINOS error analysis is taken from the defaultErrorLevel(); value of the input function. ~RooMinuit(); Destructor. void setStrategy(Int_t strat); Change MINUIT strategy to istrat. Accepted codes; are 0,1,2 and represent MINUIT strategies for dealing; most efficiently with fast FCNs (0), expensive FCNs (2); and 'intermediate' FCNs (1). void setErrorLevel(Double_t level); Set the level for MINUIT error analysis to the given; value. This function overrides the default value; that is taken in the RooMinuit constructor from; the defaultErrorLevel() method of the input function. void setEps(Double_t eps); Change MINUIT epsilon. RooFitResult* fit(const char* options); Parse traditional RooAbsPdf::fitTo driver options. s - Run Hesse first to estimate initial step size; m - Run Migrad only; h - Run Hesse to estim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMinuit.html:8726,error,errors,8726,root/html532/RooMinuit.html,https://root.cern,https://root.cern/root/html532/RooMinuit.html,2,['error'],['errors']
Availability,"loatParamList; ofstream*_logfile; Int_t_maxEvalMult; Double_t_maxFCN; Int_t_nPar; Int_t_numBadNLL; Int_t_optConst; Int_t_printEvalErrors; Int_t_printLevel; Bool_t_profile; Int_t_status; vector<std::pair<std::string,int> >_statusHistory; static TVirtualFitter*_theFitter; TStopwatch_timer; Bool_t_verbose; Int_t_warnLevel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup method called by atexit handler installed by RooSentinel; to delete all global heap objects when the program is terminated. RooMinuit(RooAbsReal& function); Construct MINUIT interface to given function. Function can be anything,; but is typically a -log(likelihood) implemented by RooNLLVar or a chi^2; (implemented by RooChi2Var). Other frequent use cases are a RooAddition; of a RooNLLVar plus a penalty or constraint term. This class propagates; all RooFit information (floating parameters, their values and errors); to MINUIT before each MINUIT call and propagates all MINUIT information; back to the RooFit object at the end of each call (updated parameter; values, their (asymmetric errors) etc. The default MINUIT error level; for HESSE and MINOS error analysis is taken from the defaultErrorLevel(); value of the input function. ~RooMinuit(); Destructor. void setStrategy(Int_t strat); Change MINUIT strategy to istrat. Accepted codes; are 0,1,2 and represent MINUIT strategies for dealing; most efficiently with fast FCNs (0), expensive FCNs (2); and 'intermediate' FCNs (1). void setErrorLevel(Double_t level); Set the level for MINUIT error analysis to the given; value. This function overrides the default value; that is taken in the RooMinuit constructor from; the defaultErrorLevel() method of the input function. void setEps(Double_t eps); Change MINUIT epsilon. void setOffsetting(Bool_t flag); Enable internal likelihood offsetting for enhanced numeric precision. RooFitResult* fit(const char* options); Parse traditional RooAbsPdf::fitTo driver ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMinuit.html:8833,error,errors,8833,root/html534/RooMinuit.html,https://root.cern,https://root.cern/root/html534/RooMinuit.html,2,['error'],['errors']
Availability,"loat_t x[n] = {-.22,.05,.25,.35,.5,.61,.7,.85,.89,.95};; Float_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};. // create the error arrays; Float_t ex[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Float_t ey[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};. // create the TGraphErrors and draw it; gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetTitle(""TGraphErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; c1->Update();; }; 4.4 Graphs with Asymmetric Error Bars. A graph with asymmetric error bars. A TGraphAsymmErrors is a TGraph with asymmetric error bars. It inherits the various draw format options from TGraph. Its method Paint(Option_t *option) paints the TGraphAsymmErrors with the current attributes. You can set the following additional options for drawing:. “z” or “Z”the horizontal and vertical small lines are not drawn at the end of error bars; “>”an arrow is drawn at the end of the error bars; “|>”a full arrow is drawn at the end of the error bar; its size is \(\frac{2}{3}\) of the marker size; “[]”only the end vertical/horizontal lines of the error bars are drawn; this option is interesting to superimpose systematic errors on top of a graph with statistical errors. The constructor has six arrays as parameters: X and Y as TGraph and low X-errors and high X-errors, low Y-errors and high Y-errors. The low value is the length of the error bar to the left and down, the high value is the length of the error bar to the right and up.; {; c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",; 200,10,700,500);; c1->SetGrid();. // create the arrays for the points; Int_t n = 10;; Double_t x[n] = {-.22,.05,.25,.35,.5, .61,.7,.85,.89,.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};. // create the arrays with high and low errors; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:148014,error,error,148014,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,6,['error'],"['error', 'errors']"
Availability,"loat_t y1, Float_t x2, Float_t y2, Int_t lineWidth = 1); Compute distance from point px,py to an axis of the band defined.; by pair points (x1,y1),(x2,y2) where lineWidth is the width of the band. Compute the closest distance of approach from point px,py to this line.; The distance is computed in pixels units. Algorithm:. A(x1,y1) P B(x2,y2). I; I; I; I; M(x,y). Let us call a = distance AM a2=a**2; b = distance BM b2=b**2; c = distance AB c2=c**2; d = distance PM d2=d**2; u = distance AP u2=u**2; v = distance BP v2=v**2 c = u + v. d2 = a2 - u2; d2 = b2 - v2 = b2 -(c-u)**2; ==> u = (a2 -b2 +c2)/2c. Float_t x1 = gPad->XtoAbsPixel(xp1);; Float_t y1 = gPad->YtoAbsPixel(yp1);; Float_t x2 = gPad->XtoAbsPixel(xp2);; Float_t y2 = gPad->YtoAbsPixel(yp2);. Int_t SetNextPoint(Float_t x, Float_t y, Float_t z); Add one 3D point defined by x,y,z to the array of the points; as its last element. Int_t GetN() const; GetN() returns the number of allocated cells if any.; GetN() > 0 shows how many cells; can be available via GetP() method.; GetN() == 0 then GetP() must return 0 as well. Float_t * GetP() const; GetP() returns the pointer to the float point array; of points if available; The number of the available celss can be found via; GetN() method.; GetN() > 0 shows how many cells. Float_t * GetXYZ(Float_t* xyz, Int_t idx, Int_t num = 1) const; GetXYZ(Float_t *xyz,Int_t idx,Int_t num=1) fills the buffer supplied; by the calling code with the points information. Input parameters:. Float_t *xyz - an external user supplied floating point array.; Int_t num - the total number of the points to be copied; the dimension of that array the size of the; array is num*sizeof(Float_t) at least; Int_t idx - The index of the first copy to be taken. Return: The pointer to the buffer array supplied. TPoints3DABC(); {;}. virtual ~TPoints3DABC(); {;}. Int_t DistancetoPrimitive(Int_t px, Int_t py). Int_t GetLastPosition() const; GetN() returns the number of allocated cells if any.; GetN() > 0 shows how ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPoints3DABC.html:8075,avail,available,8075,root/html602/TPoints3DABC.html,https://root.cern,https://root.cern/root/html602/TPoints3DABC.html,2,['avail'],['available']
Availability,"loat_t y1, Float_t x2, Float_t y2, Int_t lineWidth = 1); Compute distance from point px,py to an axis of the band defined.; by pair points (x1,y1),(x2,y2) where lineWidth is the width of the band. Compute the closest distance of approach from point px,py to this line.; The distance is computed in pixels units. Algorithm:. A(x1,y1) P B(x2,y2). I; I; I; I; M(x,y). Let us call a = distance AM a2=a**2; b = distance BM b2=b**2; c = distance AB c2=c**2; d = distance PM d2=d**2; u = distance AP u2=u**2; v = distance BP v2=v**2 c = u + v. d2 = a2 - u2; d2 = b2 - v2 = b2 -(c-u)**2; ==> u = (a2 -b2 +c2)/2c. Float_t x1 = gPad->XtoAbsPixel(xp1);; Float_t y1 = gPad->YtoAbsPixel(yp1);; Float_t x2 = gPad->XtoAbsPixel(xp2);; Float_t y2 = gPad->YtoAbsPixel(yp2);. Int_t SetNextPoint(Float_t x, Float_t y, Float_t z); Add one 3D point defined by x,y,z to the array of the points; as its last element. Int_t GetN() const; GetN() returns the number of allocated cells if any.; GetN() > 0 shows how many cells; can be available via GetP() method.; GetN() == 0 then GetP() must return 0 as well. Float_t * GetP() const; GetP() returns the pointer to the float point array; of points if available; The number of the available celss can be found via; GetN() method.; GetN() > 0 shows how many cells. Float_t * GetXYZ(Float_t* xyz, Int_t idx, Int_t num = 1) const; GetXYZ(Float_t *xyz,Int_t idx,Int_t num=1) fills the buffer supplied; by the calling code with the points information. Input parameters:. Float_t *xyz - an external user supplied floating point array.; Int_t num - the total number of the points to be copied; the dimension of that array the size of the; array is num*sizeof(Float_t) at least; Int_t idx - The index of the first copy to be taken. Return: The pointer to the buffer array supplied. virtual ~TPoints3DABC(); {;}. Int_t DistancetoPrimitive(Int_t px, Int_t py). Int_t GetLastPosition() const; GetN() returns the number of allocated cells if any.; GetN() > 0 shows how many cells; can be av",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPoints3DABC.html:7475,avail,available,7475,root/html528/TPoints3DABC.html,https://root.cern,https://root.cern/root/html528/TPoints3DABC.html,4,['avail'],['available']
Availability,"loat_t* eyl = 0, const Float_t* eyh = 0); TGraphAsymmErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. TGraphAsymmErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Double_t* eyh = 0); TGraphAsymmErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. TGraphAsymmErrors(const TVectorF& vx, const TVectorF& vy, const TVectorF& vexl, const TVectorF& vexh, const TVectorF& veyl, const TVectorF& veyh); Constructor with six vectors of floats in input; A grapherrors is built with the X coordinates taken from vx and Y coord from vy; and the errors from vectors vexl/h and veyl/h.; The number of points in the graph is the minimum of number of points; in vx and vy. TGraphAsymmErrors(const TVectorD& vx, const TVectorD& vy, const TVectorD& vexl, const TVectorD& vexh, const TVectorD& veyl, const TVectorD& veyh); Constructor with six vectors of doubles in input; A grapherrors is built with the X coordinates taken from vx and Y coord from vy; and the errors from vectors vexl/h and veyl/h.; The number of points in the graph is the minimum of number of points; in vx and vy. TGraphAsymmErrors(const TH1* h); TGraphAsymmErrors constructor importing its parameters from the TH1 object passed as argument; the low and high errors are set to the bin error of the histogram. TGraphAsymmErrors(const TH1* pass, const TH1* total, Option_t* option = """"); Creates a TGraphAsymmErrors by dividing two input TH1 histograms:; pass/total. (see TGraphAsymmErrors::Divide). ~TGraphAsymmErrors(); TGraphAsymmErrors default destructor. void Apply(TF1* f); apply a function to all data points; y = f(x,y). Errors are calculated as eyh = f(x,y+eyh)-f(x,y) and; eyl = f(x,y)-f(x,y-eyl). Special treatment has to be applied for the functions where the; role of ""up"" and ""down"" is reversed.; function suggested/implemented by Miroslav Helbich <helbi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphAsymmErrors.html:17046,error,errors,17046,root/html528/TGraphAsymmErrors.html,https://root.cern,https://root.cern/root/html528/TGraphAsymmErrors.html,6,['error'],['errors']
Availability,"lobal bin number corresponding to x,y,z.Definition TH1.cxx:3672; TH1::GetStatOverflowsBehaviourBool_t GetStatOverflowsBehaviour() constDefinition TH1.h:152; TH1::SaveAsvoid SaveAs(const char *filename=""hist"", Option_t *option="""") const overrideSave the histogram as .csv, .tsv or .txt.Definition TH1.cxx:7181; TH1::SetTitleFontvirtual void SetTitleFont(Style_t font=62, Option_t *axis=""X"")Set the axis' title font.Definition Haxis.cxx:323; TH1::GetQuantilesvirtual Int_t GetQuantiles(Int_t n, Double_t *xp, const Double_t *p=nullptr)Compute Quantiles for this histogram Quantile x_p := Q(p) is defined as the value x_p such that the c...Definition TH1.cxx:4611; TH1::GetAxisColorvirtual Color_t GetAxisColor(Option_t *axis=""X"") constReturn the number of divisions for ""axis"".Definition Haxis.cxx:40; TH1::CloneTObject * Clone(const char *newname="""") const overrideMake a complete copy of the underlying object.Definition TH1.cxx:2752; TH1::GetStdDevErrorvirtual Double_t GetStdDevError(Int_t axis=1) constReturn error of standard deviation estimation for Normal distribution.Definition TH1.cxx:7655; TH1::Dividevirtual Bool_t Divide(TF1 *f1, Double_t c1=1)Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2),...Definition TH1.cxx:2840; TH1::GetMinimumvirtual Double_t GetMinimum(Double_t minval=-FLT_MAX) constReturn minimum value larger than minval of bins in the range, unless the value has been overridden by...Definition TH1.cxx:8635; TH1::LoggedInconsistencyint LoggedInconsistency(const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) constDefinition TH1.cxx:883; TH1::CheckConsistentSubAxesstatic bool CheckConsistentSubAxes(const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0)Check that two sub axis are the same.Definition TH1.cxx:1640; TH1::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove object from the list of functions.Definition TH1.cxx:6576; TH1::fYaxisTAxis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8h_source.html:82093,error,error,82093,doc/master/TH1_8h_source.html,https://root.cern,https://root.cern/doc/master/TH1_8h_source.html,1,['error'],['error']
Availability,"lobalCC(unsigned int ) const; global correlation coefficient for parameter i. bool GetMinosError(unsigned int i, double& errLow, double& errUp, int = 0); Perform Minos analysis for the given parameter i. void DoClear(); reset TMinuit. void DoReleaseFixParameter(int ivar); check if a parameter is defined and in case it was fixed released; TMinuit is not able to release free parameters by redefining them; so we need to force the release. void PrintResults(); print-out results using classic Minuit format (mnprin). void SuppressMinuitWarnings(bool nowarn = true); suppress Minuit2 warnings. bool Contour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj); contour plot for parameter i and j; need a valid FunctionMinimum otherwise exits. bool Scan(unsigned int i, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0); scan a parameter (variable) around the minimum value; the parameters must have been set before; if xmin=0 && xmax == 0 by default scan around 2 sigma of the error; if the errors are also zero then scan from min and max of parameter range; (if parameters are limited Minuit scan from min and max instead of 2 sigma by default); (force in that case to use errors). bool Hesse(); perform calculation of Hessian. const double * X() const; return pointer to X values at the minimum. { return &fParams.front(); }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. { return &fErrors.front(); }. double CovMatrix(unsigned int i, unsigned int j) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. » Auth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMinuitMinimizer.html:10660,error,error,10660,root/html532/TMinuitMinimizer.html,https://root.cern,https://root.cern/root/html532/TMinuitMinimizer.html,12,['error'],"['error', 'errors']"
Availability,"lobalFunctionWithPrototype(const char *name, const char *proto=nullptr, Bool_t load=kFALSE)Return pointer to global function by name.Definition TROOT.cxx:1718; TROOT::GetForceStyleBool_t GetForceStyle() constDefinition TROOT.h:220; TROOT::GetRootFolderTFolder * GetRootFolder() constDefinition TROOT.h:274; TROOT::GetListOfBrowsersTSeqCollection * GetListOfBrowsers() constDefinition TROOT.h:245; TROOT::ReadingObjectBool_t ReadingObject() constDeprecated (will be removed in next release).Definition TROOT.cxx:2460; TROOT::fStylesTSeqCollection * fStylesList of styles.Definition TROOT.h:150; TROOT::GetListOfProofsTSeqCollection * GetListOfProofs() constDefinition TROOT.h:253; TROOT::GetEditHistogramsBool_t GetEditHistograms() constDefinition TROOT.h:218; TROOT::fVersionDateInt_t fVersionDateDate of ROOT version (ex 951226)Definition TROOT.h:116; TROOT::GetListOfColorsTSeqCollection * GetListOfColors() constDefinition TROOT.h:232; TROOT::MacroLongptr_t Macro(const char *filename, Int_t *error=nullptr, Bool_t padUpdate=kTRUE)Execute a macro in the interpreter.Definition TROOT.cxx:2316; TROOT::fBuiltTimeInt_t fBuiltTimeTime of ROOT built.Definition TROOT.h:119; TROOT::AddExtraInterpreterArgsstatic const std::vector< std::string > & AddExtraInterpreterArgs(const std::vector< std::string > &args)Provide command line arguments to the interpreter construction.Definition TROOT.cxx:2952; TROOT::SetLineHasBeenProcessedvoid SetLineHasBeenProcessed()Definition TROOT.h:329; TROOT::GetClassTClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE) constReturn pointer to class with name. Obsolete, use TClass::GetClass directly.Definition TROOT.cxx:1518; TROOT::fSelectPadTVirtualPad * fSelectPadCurrently selected pad.Definition TROOT.h:139; TROOT::fFilesTSeqCollection * fFilesList of files.Definition TROOT.h:146; TROOT::Browsevoid Browse(TBrowser *b) overrideAdd browsable objects to TBrowser.Definition TROOT.cxx:1056; TROOT::GetRootSysstatic const TString & GetRootSys()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8h_source.html:41685,error,error,41685,doc/v632/TROOT_8h_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8h_source.html,1,['error'],['error']
Availability,"lobalFunctionWithPrototype(const char *name, const char *proto=nullptr, Bool_t load=kFALSE)Return pointer to global function by name.Definition TROOT.cxx:1718; TROOT::GetForceStyleBool_t GetForceStyle() constDefinition TROOT.h:220; TROOT::GetRootFolderTFolder * GetRootFolder() constDefinition TROOT.h:274; TROOT::GetListOfBrowsersTSeqCollection * GetListOfBrowsers() constDefinition TROOT.h:245; TROOT::ReadingObjectBool_t ReadingObject() constDeprecated (will be removed in next release).Definition TROOT.cxx:2460; TROOT::fStylesTSeqCollection * fStylesList of styles.Definition TROOT.h:150; TROOT::GetListOfProofsTSeqCollection * GetListOfProofs() constDefinition TROOT.h:253; TROOT::GetEditHistogramsBool_t GetEditHistograms() constDefinition TROOT.h:218; TROOT::fVersionDateInt_t fVersionDateDate of ROOT version (ex 951226)Definition TROOT.h:116; TROOT::GetListOfColorsTSeqCollection * GetListOfColors() constDefinition TROOT.h:232; TROOT::MacroLongptr_t Macro(const char *filename, Int_t *error=nullptr, Bool_t padUpdate=kTRUE)Execute a macro in the interpreter.Definition TROOT.cxx:2316; TROOT::fBuiltTimeInt_t fBuiltTimeTime of ROOT built.Definition TROOT.h:119; TROOT::AddExtraInterpreterArgsstatic const std::vector< std::string > & AddExtraInterpreterArgs(const std::vector< std::string > &args)Provide command line arguments to the interpreter construction.Definition TROOT.cxx:2956; TROOT::SetLineHasBeenProcessedvoid SetLineHasBeenProcessed()Definition TROOT.h:329; TROOT::GetClassTClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE) constReturn pointer to class with name. Obsolete, use TClass::GetClass directly.Definition TROOT.cxx:1518; TROOT::fSelectPadTVirtualPad * fSelectPadCurrently selected pad.Definition TROOT.h:139; TROOT::fFilesTSeqCollection * fFilesList of files.Definition TROOT.h:146; TROOT::Browsevoid Browse(TBrowser *b) overrideAdd browsable objects to TBrowser.Definition TROOT.cxx:1056; TROOT::GetRootSysstatic const TString & GetRootSys()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8h_source.html:41684,error,error,41684,doc/master/TROOT_8h_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8h_source.html,1,['error'],['error']
Availability,"lock_context(conn->phys_ctx);; 15640 mg_cry_ctx_internal(; 15641 conn->phys_ctx,; 15642 ""SSL_CTX_load_verify_locations error: %s ""; 15643 ""ssl_verify_peer requires setting ""; 15644 ""either ssl_ca_path or ssl_ca_file. Is any of them ""; 15645 ""present in ""; 15646 ""the .conf file?"",; 15647 ssl_error());; 15648 return 0;; 15649 }; 15650 }; 15651 ; 15652 if (ssl_use_pem_file(conn->phys_ctx, conn->dom_ctx, pem, chain) == 0) {; 15653 mg_unlock_context(conn->phys_ctx);; 15654 return 0;; 15655 }; 15656 }; 15657 mg_unlock_context(conn->phys_ctx);; 15658 ; 15659 return 1;; 15660}; 15661 ; 15662#if defined(OPENSSL_API_1_1); 15663#else; 15664static pthread_mutex_t *ssl_mutexes;; 15665#endif /* OPENSSL_API_1_1 */; 15666 ; 15667static int; 15668sslize(struct mg_connection *conn,; 15669 int (*func)(SSL *),; 15670 const struct mg_client_options *client_options); 15671{; 15672 int ret, err;; 15673 int short_trust;; 15674 unsigned timeout = 1024;; 15675 unsigned i;; 15676 ; 15677 if (!conn) {; 15678 return 0;; 15679 }; 15680 ; 15681 short_trust =; 15682 (conn->dom_ctx->config[SSL_SHORT_TRUST] != NULL); 15683 && (mg_strcasecmp(conn->dom_ctx->config[SSL_SHORT_TRUST], ""yes"") == 0);; 15684 ; 15685 if (short_trust) {; 15686 int trust_ret = refresh_trust(conn);; 15687 if (!trust_ret) {; 15688 return trust_ret;; 15689 }; 15690 }; 15691 ; 15692 mg_lock_context(conn->phys_ctx);; 15693 conn->ssl = SSL_new(conn->dom_ctx->ssl_ctx);; 15694 mg_unlock_context(conn->phys_ctx);; 15695 if (conn->ssl == NULL) {; 15696 mg_cry_internal(conn, ""sslize error: %s"", ssl_error());; 15697 OPENSSL_REMOVE_THREAD_STATE();; 15698 return 0;; 15699 }; 15700 SSL_set_app_data(conn->ssl, (char *)conn);; 15701 ; 15702 ret = SSL_set_fd(conn->ssl, conn->client.sock);; 15703 if (ret != 1) {; 15704 mg_cry_internal(conn, ""sslize error: %s"", ssl_error());; 15705 SSL_free(conn->ssl);; 15706 conn->ssl = NULL;; 15707 OPENSSL_REMOVE_THREAD_STATE();; 15708 return 0;; 15709 }; 15710 ; 15711 if (client_options) {; 15712 if (client_opt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:463666,error,error,463666,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"lock_context(conn->phys_ctx);; 15641 mg_cry_ctx_internal(; 15642 conn->phys_ctx,; 15643 ""SSL_CTX_load_verify_locations error: %s ""; 15644 ""ssl_verify_peer requires setting ""; 15645 ""either ssl_ca_path or ssl_ca_file. Is any of them ""; 15646 ""present in ""; 15647 ""the .conf file?"",; 15648 ssl_error());; 15649 return 0;; 15650 }; 15651 }; 15652 ; 15653 if (ssl_use_pem_file(conn->phys_ctx, conn->dom_ctx, pem, chain) == 0) {; 15654 mg_unlock_context(conn->phys_ctx);; 15655 return 0;; 15656 }; 15657 }; 15658 mg_unlock_context(conn->phys_ctx);; 15659 ; 15660 return 1;; 15661}; 15662 ; 15663#if defined(OPENSSL_API_1_1); 15664#else; 15665static pthread_mutex_t *ssl_mutexes;; 15666#endif /* OPENSSL_API_1_1 */; 15667 ; 15668static int; 15669sslize(struct mg_connection *conn,; 15670 int (*func)(SSL *),; 15671 const struct mg_client_options *client_options); 15672{; 15673 int ret, err;; 15674 int short_trust;; 15675 unsigned timeout = 1024;; 15676 unsigned i;; 15677 ; 15678 if (!conn) {; 15679 return 0;; 15680 }; 15681 ; 15682 short_trust =; 15683 (conn->dom_ctx->config[SSL_SHORT_TRUST] != NULL); 15684 && (mg_strcasecmp(conn->dom_ctx->config[SSL_SHORT_TRUST], ""yes"") == 0);; 15685 ; 15686 if (short_trust) {; 15687 int trust_ret = refresh_trust(conn);; 15688 if (!trust_ret) {; 15689 return trust_ret;; 15690 }; 15691 }; 15692 ; 15693 mg_lock_context(conn->phys_ctx);; 15694 conn->ssl = SSL_new(conn->dom_ctx->ssl_ctx);; 15695 mg_unlock_context(conn->phys_ctx);; 15696 if (conn->ssl == NULL) {; 15697 mg_cry_internal(conn, ""sslize error: %s"", ssl_error());; 15698 OPENSSL_REMOVE_THREAD_STATE();; 15699 return 0;; 15700 }; 15701 SSL_set_app_data(conn->ssl, (char *)conn);; 15702 ; 15703 ret = SSL_set_fd(conn->ssl, conn->client.sock);; 15704 if (ret != 1) {; 15705 mg_cry_internal(conn, ""sslize error: %s"", ssl_error());; 15706 SSL_free(conn->ssl);; 15707 conn->ssl = NULL;; 15708 OPENSSL_REMOVE_THREAD_STATE();; 15709 return 0;; 15710 }; 15711 ; 15712 if (client_options) {; 15713 if (client_opt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:463699,error,error,463699,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"lockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TXSocketHandler*fInputHandler; TXProofServInterruptHandler*fInterruptHandler; TStringfSockPath; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the proof server. Int_t LockSession(const char* sessiontag, TProofLockPath** lck); Try locking query area of session tagged sessiontag.; The id of the locking file is returned in fid and must be; unlocked via UnlockQueryFile(fid). void ReleaseWorker(const char* ord); Send message to intermediate coordinator to release worker of la",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXProofServ.html:17393,alive,alive,17393,root/html528/TXProofServ.html,https://root.cern,https://root.cern/root/html528/TXProofServ.html,3,['alive'],['alive']
Availability,"logEvalError(const char* message, const char* serverValueString = 0) const; Log evaluation error message. Evaluation errors may be routed through a different; protocol than generic RooFit warning message (which go straight through RooMsgService); because evaluation errors can occur in very large numbers in the use of likelihood; evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); messages reported through this function are not printed but all stored in a list,; along with server values at the time of reporting. Error messages logged in this; way can be printed in a structured way, eliminating duplicates and with the ability; to truncate the list by printEvalErrors. This is the standard mode of error logging; during MINUIT operations. If enableEvalErrorLogging() is false, all errors; reported through this method are passed for immediate printing through RooMsgService.; A string with server names and values is constructed automatically for error logging; purposes, unless a custom string with similar information is passed as argument. void clearEvalErrorLog(); Clear the stack of evaluation error messages. void printEvalErrors(ostream& os = std::cout, Int_t maxPerNode = 10000000); Print all outstanding logged evaluation error on the given ostream. If maxPerNode; is zero, only the number of errors for each source (object with unique name) is listed.; If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; per source of errors. A truncation message is shown if there were more errors logged; than shown. Int_t numEvalErrors(); Return the number of logged evaluation errors since the last clearing. void fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); Fix the interpretation of the coefficient of any RooAddPdf component in; the expression tree headed by this object to the given set of observables. If the force flag is false, the normalization choice is only fixed for t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:62452,error,error,62452,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,7,['error'],['error']
Availability,"lone (identical) objects.Definition TClonesArray.h:29; To reduce the number of call to the constructor (especially useful if the user class requires memory allocation), the object can be added (and constructed when needed) using ConstructedAt which only calls the constructor once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; Note: the only supported way to add objects to a TClonesArray is via the new with placement method or the ConstructedAt method. The other Add() methods ofTObjArray and its base classes are not allowed.; Considering that a new/delete costs about 70 mus on a 300 MHz HP, O(10^9) new/deletes will save about 19 hours. NOTE 1; C/C++ offers the possibility of allocating and deleting memory. Forgetting to delete allocated memory is a programming error called a ""memory leak"", i.e. the memory of your process grows and eventually your program crashes. Even if you always delete the allocated memory, the recovered space may not be efficiently reused. The process knows that there are portions of free memory, but when you allocate it again, a fresh piece of memory is grabbed. Your program is free from semantic errors, but the total memory of your process still grows, because your program's memory is full of ""holes"" which reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in terms of CPU time.; Without entering into technical details, TClonesArray allows you to ""reuse"" the same portion of memory for new/delete avoiding memory fragmentation and memory growth and improving the performance by orders of magnitude. Every time the memory of the TClonesArray has to be reused, the Clear() method is used. To provide its benefits, each TClonesArray must be a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:2459,error,error,2459,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,1,['error'],['error']
Availability,"lone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidRooStats::SamplingDistPlot::Draw(Option_t* options = 0); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidRooStats::SamplingDistPlot::DumpToFile(const char* RootFileName, Option_t* option = """", const char* ftitle = """", Int_t compress = 1); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*RooStats::SamplingDistPlot::GetHistogram(const RooStats::SamplingDistribution* samplDist = __null); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; RooPlot*RooStats::SamplingDistPlot::GetPlot(); TH1F*RooStats::SamplingDistPlot::GetTH1F(const RooStats::SamplingDistribution* samplDist = __null); virtual const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__HypoTestPlot.html:2478,error,error,2478,root/html604/RooStats__HypoTestPlot.html,https://root.cern,https://root.cern/root/html604/RooStats__HypoTestPlot.html,1,['error'],['error']
Availability,"lone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidRooStats::SamplingDistPlot::Draw(Option_t* options = 0); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidRooStats::SamplingDistPlot::DumpToFile(const char* RootFileName, Option_t* option = """", const char* ftitle = """", Int_t compress = 1); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TH1F*RooStats::SamplingDistPlot::GetTH1F(const RooStats::SamplingDistribution* samplDist = NULL); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestPlot.html:2474,error,error,2474,root/html534/RooStats__HypoTestPlot.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestPlot.html,1,['error'],['error']
Availability,"lone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidRooStats::SamplingDistPlot::Draw(Option_t* options = 0); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidRooStats::SamplingDistPlot::DumpToFile(const char* RootFileName, Option_t* option = """", const char* ftitle = """", Int_t compress = 1); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TH1F*RooStats::SamplingDistPlot::GetTH1F(const RooStats::SamplingDistribution* samplDist = __null); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestPlot.html:2478,error,error,2478,root/html602/RooStats__HypoTestPlot.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestPlot.html,1,['error'],['error']
Availability,"lone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidRooStats::SamplingDistPlot::Draw(Option_t* options = 0); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidRooStats::SamplingDistPlot::DumpToFile(const char* RootFileName, Option_t* option = """", const char* ftitle = """", Int_t compress = 1); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TH1F*RooStats::SamplingDistPlot::GetTH1F(const RooStats::SamplingDistribution* samplDist); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HypoTestPlot.html:2248,error,error,2248,root/html528/RooStats__HypoTestPlot.html,https://root.cern,https://root.cern/root/html528/RooStats__HypoTestPlot.html,3,['error'],['error']
Availability,"lonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);. }. a.Delete();; }. Note: the only supported way to add objects to a TClonesArray is; via the new with placement method. The diffrent Add() methods of; TObjArray and its base classes are not allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offer the possibility to allocate and delete memory.; Forgetting to delete allocated memory is a programming error that originate ""leaks"",; i.e. the memory of your process grows and eventually your program crashes.; Even if you *always* delete the allocated memory, the recovered space may not be; efficiently reused. The process knows that there are portions of free memory,; but when you allocate it again, a fresh piece of memory is grabbed.; Your program is free from semantic errors, but the total memory of your process; still grows. Moreover your program's memory is full of ""holes"" which reduce the; efficiency of memory access, this is called ""memory fragmentation"".; Moreover new / delete are expensive operations in terms of CPU time. Without entering into technical details, the TClonesArray allow to ""reuse"" the; same portion of memory for new/delete avoiding memory fragmentation and memory; growth and improving by orders of magnitude the performance. Every time the; memory of the TClonesArray has to be reused, the Clear() method is employed.; To provide its benefits, each TClonesArray must be allocated *once* per process; and disposed of (deleted) *only when not needed any more*.; So a job should see *only one* deletion for each TClonesArray, which should be; ""Cleared()"" in between several times. Keep deleting a TClonesArray is a double; waste. Not only you do not avoid memory fragmentation, but you worsen it because; the TClonesArray itself is a rather heavy struct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TClonesArray.html:1949,error,errors,1949,root/html528/TClonesArray.html,https://root.cern,https://root.cern/root/html528/TClonesArray.html,2,['error'],['errors']
Availability,"long Y in NDC. ; Definition at line 72 of file TPad.h. ◆ fAbsPixeltoXk. Double_t TPad::fAbsPixeltoXk. protected . Conversion coefficient for absolute pixel to X World. ; Definition at line 55 of file TPad.h. ◆ fAbsPixeltoYk. Double_t TPad::fAbsPixeltoYk. protected . Conversion coefficient for absolute pixel to Y World. ; Definition at line 58 of file TPad.h. ◆ fAbsWNDC. Double_t TPad::fAbsWNDC. protected . Absolute Width of pad along X in NDC. ; Definition at line 71 of file TPad.h. ◆ fAbsXlowNDC. Double_t TPad::fAbsXlowNDC. protected . Absolute X top left corner of pad in NDC [0,1]. ; Definition at line 69 of file TPad.h. ◆ fAbsYlowNDC. Double_t TPad::fAbsYlowNDC. protected . Absolute Y top left corner of pad in NDC [0,1]. ; Definition at line 70 of file TPad.h. ◆ fAspectRatio. Double_t TPad::fAspectRatio. protected . ratio of w/h in case of fixed ratio ; Definition at line 82 of file TPad.h. ◆ fBorderMode. Short_t TPad::fBorderMode. protected . Bordermode (-1=down, 0 = no border, 1=up) ; Definition at line 98 of file TPad.h. ◆ fBorderSize. Short_t TPad::fBorderSize. protected . pad bordersize in pixels ; Definition at line 97 of file TPad.h. ◆ fCanvas. TCanvas* TPad::fCanvas {nullptr}. protected . ! Pointer to mother canvas ; Definition at line 106 of file TPad.h. ◆ fCGnx. Int_t TPad::fCGnx. protected . ! Size of the collide grid along x ; Definition at line 119 of file TPad.h. ◆ fCGny. Int_t TPad::fCGny. protected . ! Size of the collide grid along y ; Definition at line 120 of file TPad.h. ◆ fCollideGrid. std::vector<Bool_t> TPad::fCollideGrid. protected . ! Grid used to find empty space when adding a box (Legend) in a pad ; Definition at line 118 of file TPad.h. ◆ fCopyGLDevice. Bool_t TPad::fCopyGLDevice. protected . ! ; Definition at line 86 of file TPad.h. ◆ fCrosshair. Int_t TPad::fCrosshair. protected . Crosshair type (0 if no crosshair requested) ; Definition at line 95 of file TPad.h. ◆ fCrosshairPos. Int_t TPad::fCrosshairPos. protected . Position of cr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad.html:134165,down,down,134165,doc/master/classTPad.html,https://root.cern,https://root.cern/doc/master/classTPad.html,1,['down'],['down']
Availability,"long>::crbegin() const; vector<long>::const_reverse_iteratorvector<long>::crend() const; long*vector<long>::data(); const long*vector<long>::data() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; boolvector<long>::empty() const; TTable::iteratorEnd(); TTable::iteratorEnd() const; vector<long>::iteratorvector<long>::end(); vector<long>::const_iteratorvector<long>::end() const; vector<long>::iteratorvector<long>::erase(vector<long>::iterator __position); vector<long>::iteratorvector<long>::erase(vector<long>::iterator __first, vector<long>::iterator __last); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; vector<long>::referencevector<long>::front(); vector<long>::const_referencevector<long>::front() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTableMap.html:3706,error,error,3706,root/html602/TTableMap.html,https://root.cern,https://root.cern/root/html602/TTableMap.html,2,['error'],['error']
Availability,"longAt(ULong64_t linidx) const; long&At(ULong64_t linidx); virtual Double_tAtAsDouble(ULong64_t linidx) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTNDArray::GetBin(const Int_t* idx) const; Long64_tTNDArray::GetCellSize(Int_t dim) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; Long64_tTNDArray::GetNbins() const; Int_tTNDArray::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNDArrayT_long_.html:2257,error,error,2257,root/html534/TNDArrayT_long_.html,https://root.cern,https://root.cern/root/html534/TNDArrayT_long_.html,3,['error'],['error']
Availability,"longer present in the sub datasets.; If createEmptyDataSets is kFALSE (default) this method only creates datasets for states; which have at least one entry The caller takes ownership of the returned list and its contents. RooPlot* plotOn(RooPlot* frame, const RooLinkedList& argList); Plot dataset on specified frame. By default an unbinned dataset will use the default binning of; the target frame. A binned dataset will by default retain its intrinsic binning. The following optional named arguments can be used to modify the default behavior. Data representation options. Asymmetry(const RooCategory& c) -- Show the asymmetry of the data in given two-state category [F(+)-F(-)] / [F(+)+F(-)].; Category must have two states with indices -1 and +1 or three states with indeces -1,0 and +1.; Efficiency(const RooCategory& c)-- Show the efficiency F(acc)/[F(acc)+F(rej)]. Category must have two states with indices 0 and 1; DataError(RooAbsData::EType) -- Select the type of error drawn:; - Auto(default) results in Poisson for unweighted data and SumW2 for weighted data; - Poisson draws asymmetric Poisson confidence intervals.; - SumW2 draws symmetric sum-of-weights error ( sum(w)^2/sum(w^2) ); - None draws no error bars; Binning(double xlo, double xhi, -- Use specified binning to draw dataset; int nbins); Binning(const RooAbsBinning&) -- Use specified binning to draw dataset; Binning(const char* name) -- Use binning with specified name to draw dataset; RefreshNorm(Bool_t flag) -- Force refreshing for PDF normalization information in frame.; If set, any subsequent PDF will normalize to this dataset, even if it is; not the first one added to the frame. By default only the 1st dataset; added to a frame will update the normalization information; Rescale(Double_t f) -- Rescale drawn histogram by given factor. Histogram drawing options. DrawOption(const char* opt) -- Select ROOT draw option for resulting TGraph object; LineStyle(Int_t style) -- Select line style by ROOT line style code",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsData.html:29498,error,error,29498,root/html526/RooAbsData.html,https://root.cern,https://root.cern/root/html526/RooAbsData.html,1,['error'],['error']
Availability,"longs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGeoNode.html:19774,error,error,19774,doc/master/classTEveGeoNode.html,https://root.cern,https://root.cern/doc/master/classTEveGeoNode.html,4,['error'],['error']
Availability,"longs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:7342,error,error,7342,doc/v632/classROOT_1_1RGeoPainter.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html,9,['error'],['error']
Availability,"look for the root. ;  ; bool SetFunction (const ROOT::Math::IGenFunction &f, double xlow, double xup) override;  Sets the function for the rest of the algorithms. ;  ; virtual bool SetFunction (const ROOT::Math::IGradFunction &, double);  Set function to solve and the interval in where to look for the root. ;  ; void SetLogScan (bool on);  Set a log grid scan (default is equidistant bins) will work only if xlow > 0. ;  ; void SetNpx (int npx);  Set the number of point used to bracket root using a grid. ;  ; bool Solve (int maxIter=100, double absTol=1E-8, double relTol=1E-10) override;  Returns the X value corresponding to the function value fy for (xmin<x<xmax). ;  ; int Status () const override;  Returns status of last estimate. ;  ;  Public Member Functions inherited from ROOT::Math::IRootFinderMethod;  IRootFinderMethod ();  Default Constructor. ;  ; virtual ~IRootFinderMethod ();  Default Destructor. ;  ; virtual int Iterate ();  This method is implemented only by the GSLRootFinder and GSLRootFinderDeriv classes and will return an error if it's not one of them. ;  . Static Public Member Functions; static void SetDefaultNpx (int npx);  set number of default Npx used at construction time (when SetNpx is not called) Default value is 100 ;  ; static void SetDefaultNSearch (int n);  set number of times the bracketing search in combination with is done to find a good interval Default value is 10 ;  . Private Attributes; const IGenFunction * fFunction;  Pointer to the function. ;  ; bool fLogScan;  flag to control usage of a log scan ;  ; int fNIter;  Number of iterations needed for the last estimation. ;  ; int fNpx;  Number of points to bracket root with initial grid (def is 100) ;  ; double fRoot;  Current estimation of the function root. ;  ; int fStatus;  Status of code of the last estimate. ;  ; double fXMax;  Upper bound of the search interval. ;  ; double fXMin;  Lower bound of the search interval. ;  . #include <Math/BrentRootFinder.h>. Inheritance diagram fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentRootFinder.html:3005,error,error,3005,doc/master/classROOT_1_1Math_1_1BrentRootFinder.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentRootFinder.html,1,['error'],['error']
Availability,"look for the string Hist.Stats.). Fit Statistics; The type of information about fit parameters printed in the histogram statistics box can be selected via the parameter mode. The parameter mode can be = pcev (default = 0111) p = 1; print Probability; c = 1; print Chisquare/Number of degrees of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters; Example: gStyle->SetOptFit(1011);; print fit probability, parameter names/values and errors. When v = 1 is specified, only the non-fixed parameters are shown.; When v = 2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent to gStyle->SetOptFit(111). The error bars options. Option Description . ""E"" Default. Shows only the error bars, not a marker. . ""E1"" Small lines are drawn at the end of the error bars. . ""E2"" Error rectangles are drawn. . ""E3"" A filled area is drawn through the end points of the vertical error bars. . ""E4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""E0"" Draw error bars. Markers are drawn for bins with 0 contents. Combined with E1 or E2 it avoids error bars clipping . ""E5"" Like E3 but ignore the bins with 0 contents. . ""E6"" Like E4 but ignore the bins with 0 contents. . ""X0"" When used with one of the ""E"" option, it suppress the error bar along X as gStyle->SetErrorX(0) would do. . {; auto c1 = new TCanvas(""c1"",""c1"",600,400);; auto he = new TH1F(""he"",""Distribution drawn with error bars (option E1) "",100,-3,3);; for (int i=0; i<10000; i++) he->Fill(gRandom->Gaus(0,1));; gStyle->SetEndErrorSize(3);; gStyle->SetErrorX(1.);; he->SetMarkerStyle(20);; he->Draw(""E1"");; }; TStyle::SetEndErrorSizevoid SetEndErrorSize(Float_t np=2)Set the size (in pixels) of the small lines drawn at the end of the error bars (TH1 or TGraphErrors).Definition TStyle.cxx:1340; TStyle::SetErrorXvoid SetErrorX(Float_t errorx=0.5)Definition TStyle.h:340. The options ""E3"" and ""E4"" draw an error band through the end poi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:28104,error,error,28104,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['error'],['error']
Availability,"loped (Gauss-Newton, Levenber-Marquart conjugate gradients, etc.) and more or less successfully implemented into programs for analysis of complex spectra. They are based on matrix inversion that can impose appreciable convergence difficulties mainly for large number of fitted parameters. Peaks can be fitted separately, each peak (or multiplets) in a region or together all peaks in a spectrum. To fit separately each peak one needs to determine the fitted region. However it can happen that the regions of neighboring peaks are overlapping (mainly in 2-dimensional spectra). Then the results of fitting are very poor. On the other hand, when fitting together all the peaks found in a spectrum, one needs to have a method that is stable (i.e., converges) and fast enough to carry out the fitting in a reasonable time. The gradient methods based on the inversion of large matrices are not applicable because of two reasons:. calculation of inverse matrix is extremely time consuming;; due to accumulation of truncation and rounding-off errors, the result can become worthless. We have implemented two kinds of fitting functions. The first approach is based on the algorithm without matrix inversion [9] - awmi algorithm. It allows to fit large blocks of data and large number of parameters.; The other one is based on a calculation of the system of linear equations using Stiefel-Hestens method [10]. It converges faster than the awmi algorithm, however, it is not suitable to fit large number of parameters.; 5.1 1-DIMENSIONAL SPECTRA; The quantity to be minimized in the fitting procedure for one-dimensional spectrum is defined as; \[ \chi^2 = \frac{1}{N-M}\sum_{i=1}^{N}\frac{[y_i-f(i,a)]^2}{y_i} \]; where i is the channel in the fitted spectrum, N is the number of channels in the fitting subregion, M is the number of free parameters, y_i is the content of the i-th channel, a is a vector of the parameters being fitted and f(i,a) is a fitting or peak shape function.; Instead of the weighting",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:35018,error,errors,35018,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,1,['error'],['errors']
Availability,"lopers follow the principle of “release early and release often”, however a very large portion of a user base requires a stable product therefore generally three versions of the system is available for download - new, old and pro:. The new version evolves quickly, with weekly or bi-weekly releases. Use this to get access to the latest and greatest, but it may not be stable. By trying out the new version you can help us converge quickly to a stable version that can then become the new pro version. If you are a new user we would advice you to try the new version.; The pro (production) version is a version we feel comfortable with to exposing to a large audience for serious work. The change rate of this version is much lower than for the new version, it is about 3 to 6 months.; The old version is the previous pro version that people might need for some time before switching the new pro version. The old change rate is the same as for pro. 28.4 Installing Precompiled Binaries; The binaries are available for downloading from https://root.cern/install/. Once downloaded you need to unzip and de-tar the file. For example, if you have downloaded ROOT v5.30 for Linux-SLC5:; % gunzip root_v5.30.00.Linux-slc5-gcc4.3.tar.gz; % tar xvf root_v5.30.00.Linux-slc5-gcc4.3.tar; This will create the directory root. Before getting started read the file README/README. Also, read the Introduction chapter for an explanation of the directory structure.; 28.5 Installing from the Source; The ROOT’s source code sits in the GitHub repository https://github.com/root-project/root all the details and options to buld ROOT from sources are given in https://root.cern/building-root; In short, the steps to build ROOT from the sources are the following:. Clone the repository:. $ git clone https://github.com/root-project/root.git. Make a directory for building. $ mkdir build; $ cd build. Run cmake and make. $ cmake ../root; $ make -j8. Setup and run ROOT. $ source bin/thisroot.sh; $ root; 28.5.0.1 Staying ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1253002,avail,available,1253002,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,"['avail', 'down']","['available', 'downloading']"
Availability,"lor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y ...Definition BinData.h:52; ROOT::Fit::DataRangeclass describing the range in the coordinates it supports multiple range in a coordinate.Definition DataRange.h:35; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::SparseDataSparseData class representing the data of a THNSparse histogram The data needs to be converted to a B...Definition SparseData.h:35; ROOT::Fit::UnBinDataClass describing the un-binned data sets (just x coordinates values) of any dimensions.Definition UnBinData.h:46; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; TF11-Dim function classDefinition TF1.h:233; TF2A 2-Dim function with parameters.Definition TF2.h:29; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; TGraph2DGr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitInterface_8h_source.html:8228,error,error,8228,doc/master/HFitInterface_8h_source.html,https://root.cern,https://root.cern/doc/master/HFitInterface_8h_source.html,1,['error'],['error']
Availability,"lor components for a specific pixel value. ; On input fPixel should be set on return the fRed, fGreen and fBlue components will be set. ; Reimplemented from TVirtualX.; Definition at line 1371 of file GX11Gui.cxx. ◆ QueryColors(). void TGX11::QueryColors ; (; Colormap ; cmap, . RXColor * ; colors, . Int_t ; ncolors . ). protected . Returns the current RGB value for the pixel in the XColor structure. ; Definition at line 383 of file TGX11.cxx. ◆ QueryPointer() [1/2]. void TGX11::QueryPointer ; (; Int_t & ; ix, . Int_t & ; iy . ). overridevirtual . Query pointer position. ; Parameters. [in]ix: X coordinate of pointer ; [in]iy: Y coordinate of pointer (both coordinates are relative to the origin of the root window) . Reimplemented from TVirtualX.; Definition at line 1454 of file TGX11.cxx. ◆ QueryPointer() [2/2]. void TGX11::QueryPointer ; (; Window_t ; id, . Window_t & ; rootw, . Window_t & ; childw, . Int_t & ; root_x, . Int_t & ; root_y, . Int_t & ; win_x, . Int_t & ; win_y, . UInt_t & ; mask . ). overridevirtual . Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ; The pointer coordinates returned to win_x and win_y are relative to the origin of the specified window. In this case, QueryPointer returns the child that contains the pointer, if any, or else kNone to childw. QueryPointer returns the current logical state of the keyboard buttons and the modifier keys in mask. ; Reimplemented from TVirtualX.; Definition at line 2438 of file GX11Gui.cxx. ◆ RaiseWindow(). void TGX11::RaiseWindow ; (; Window_t ; id). overridevirtual . Put window on top of window stack. ; Reimplemented from TVirtualX.; Definition at line 277 of file GX11Gui.cxx. ◆ ReadGIF(). Pixmap_t TGX11::ReadGIF ; (; Int_t ; x0, . Int_t ; y0, . const char * ; file, . Window_t ; id = 0 . ). overridevirtual . If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ; Otherwise creates pixmap from gif file ; Rei",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11.html:98819,mask,mask,98819,doc/master/classTGX11.html,https://root.cern,https://root.cern/doc/master/classTGX11.html,1,['mask'],['mask']
Availability,"lor); TStructNodeProperty(const char* name, Pixel_t pixel); virtual~TStructNodeProperty(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TColorGetColor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Pixel_tGetPixel() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* meth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TStructNodeProperty.html:1500,error,error,1500,root/html530/TStructNodeProperty.html,https://root.cern,https://root.cern/root/html530/TStructNodeProperty.html,3,['error'],['error']
Availability,"lor. ;  ; void SetWindowBackgroundPixmap (Window_t id, Pixmap_t pxm) override;  Set pixmap as window background. ;  ; void SetWindowName (Window_t id, char *name) override;  Set window name. ;  ; void SetWMPosition (Window_t id, Int_t x, Int_t y) override;  Tells the window manager the desired position [x,y] of window ""id"". ;  ; void SetWMSize (Window_t id, UInt_t w, UInt_t h) override;  Tells window manager the desired size of window ""id"". ;  ; void SetWMSizeHints (Window_t id, UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc) override;  Give the window manager minimum and maximum size hints. ;  ; void SetWMState (Window_t id, EInitialState state) override;  Set the initial state of the window. Either kNormalState or kIconicState. ;  ; void SetWMTransientHint (Window_t id, Window_t main_id) override;  Tell window manager that window is a transient window of gdk_parent_root. ;  ; void ShapeCombineMask (Window_t id, Int_t x, Int_t y, Pixmap_t mask) override;  The Nonrectangular Window Shape Extension adds nonrectangular windows to the System. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SubtractRegion (Region_t rega, Region_t regb, Region_t result) override;  Subtract rega from regb. ;  ; void Sync (Int_t mode) override;  Set synchronisation on or off. ;  ; Int_t TextWidth (FontStruct_t font, const char *s, Int_t len) override;  Return length of string in pixels. Size depends on font. ;  ; void TranslateCoordinates (Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t &dest_x, Int_t &dest_y, Window_t &child) override;  TranslateCoordinates translates coordinates from the frame of reference of one window to another. ;  ; void UnionRectWithRegion (Rectangle_t *rect, Region_t src, Region_t dest) override;  Union of rectangle with a region. ;  ; void UnionRegion (Region_t rega, Region_t regb, Region_t result) override;  Compute th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32.html:23292,mask,mask,23292,doc/master/classTGWin32.html,https://root.cern,https://root.cern/doc/master/classTGWin32.html,1,['mask'],['mask']
Availability,"lor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from RooPlotable; double _normValue = 0.0;  ; TString _yAxisLabel;  ; double _ymax = 0.0;  ; double _ymin = 0.0;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooEllipse.h>. Inheritance diagram for RooEllipse:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooEllipse() [1/2]. RooEllipse::RooEllipse ; (; ). default . ◆ RooEllipse() [2/2]. RooEllipse::RooEllipse ; (; const char * ; name, . double ; x1, . double ; x2, . double ; s1, . double ; s2, . double ; rho = 0, . Int_t ; points = 100 . ). Create a 2-dimensional ellipse centered at (x1,x2) that represents the confidence level contour for a measurement with errors (s1,s2) and correlation coefficient rho. ; The resulting curve is defined as the unique ellipse that passes through these points:; (x1+rho*s1,x2+s2) , (x1-rho*s1,x2-s2) , (x1+s1,x2+rho*s2) , (x1-s1,x2-rho*s2); and is described by the implicit equation:; x*x 2*rho*x*y y*y --— - ------— + --— = 1 - rho*rho s1*s1 s1*s2 s2*s2; The input parameters s1,s2 must be > 0 and also |rho| <= 1. The degenerate case |rho|=1 corresponds to a straight line and is handled as a special case. ; Definition at line 52 of file RooEllipse.cxx. Member Function Documentation. ◆ Class(). static TClass * RooEllipse::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooEllipse::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooEllipse::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 44 of file RooEllipse.h. ◆ DeclFileName().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooEllipse.html:35024,error,errors,35024,doc/master/classRooEllipse.html,https://root.cern,https://root.cern/doc/master/classRooEllipse.html,1,['error'],['errors']
Availability,"lot with hidden line removal. ""LEGO1""; Draw a lego plot with hidden surface removal. ""LEGO2""; Draw a lego plot using colors to show the cell contents When the option ""0"" is; used with any LEGO option, the empty bins are not drawn. ""TEXT""; Draw bin contents as text (format set via gStyle->SetPaintTextFormat). ""TEXTnn""; Draw bin contents as text at angle nn (0 < nn < 90). ""X+""; The X-axis is drawn on the top side of the plot. ""Y+""; The Y-axis is drawn on the right side of the plot. Options supported for 1D histograms. "" ""; Default. ""AH""; Draw histogram without axis. ""A"" can be combined with any drawing option. For; instance, ""AC"" draws the histogram as a smooth Curve without axis. ""][""; When this option is selected the first and last vertical lines of the histogram; are not drawn. ""B""; Bar chart option. ""BAR""; Like option ""B"", but bars can be drawn with a 3D effect. ""HBAR""; Like option ""BAR"", but bars are drawn horizontally. ""C""; Draw a smooth Curve through the histogram bins. ""E""; Draw error bars. ""E0""; Draw error bars. Markers are drawn for bins with 0 contents. ""E1""; Draw error bars with perpendicular lines at the edges. ""E2""; Draw error bars with rectangles. ""E3""; Draw a fill area through the end points of the vertical error bars. ""E4""; Draw a smoothed filled area through the end points of the error bars. ""E5""; Like E3 but ignore the bins with 0 contents. ""E6""; Like E4 but ignore the bins with 0 contents. ""X0""; When used with one of the ""E"" option, it suppress the error bar along; X as gStyle->SetErrorX(0) would do. ""L""; Draw a line through the bin contents. ""P""; Draw current marker at each bin except empty bins. ""P0""; Draw current marker at each bin including empty bins. ""PIE""; Draw histogram as a Pie Chart. ""*H""; Draw histogram with a * at each bin. ""LF2""; Draw histogram like with option ""L"" but with a fill area. Note that ""L"" draws; also a fill area if the hist fill color is set but the fill area corresponds to; the histogram contour. ""9""; Force histogram to be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THistPainter.html:6339,error,error,6339,root/html528/THistPainter.html,https://root.cern,https://root.cern/root/html528/THistPainter.html,3,['error'],['error']
Availability,"lot, 1 worker per node; 'normx:' Normalized scaling plot, 1 worker per node; type = 'mbs' MB/s scaling plots (default); 'evts' Event/s scaling plots. Int_t ReleaseCache(const char* dset); Release memory cache for dataset 'dset'; Return 0 on success, -1 on error. Int_t RemoveDataSet(const char* dset); Physically remove the dataset 'dset', i.e. remove the dataset and the files; it describes; Return 0 on success, -1 on error. Int_t MakeDataSet(const char* dset = 0, Long64_t nevt = -1, const char* fnroot = ""event"", Bool_t regenerate = kFALSE); Create the largest dataset for the run.; Defaults for; dataset name, filename root; are; ""BenchDataSet"", ""event""; respectively.; Default selector is TSelEventGen. Use SetDataGenSel and SetDataGenOar to change it; and to pass the list of PARs defining the alternative selector.; These can be changed via dset, sel and fnroot, respectively.; The argument 'nevt' controls the number of events per file (-1 for the default,; which is 30000).; Return 0 on success, -1 on error. Int_t CopyDataSet(const char* dset, const char* dsetdst, const char* destdir); Copy the files of dataset 'dset' to 'destdir' and create a new dataset named 'dsetdst'; decribing them.; Return 0 on success, -1 on error. void SetProofDS(TProof* p); Set the PROOF instance to be used for dataset operations, like releasing; cache ...; Use SetProofDS(0) to reset and using the default PROOF. TProofBench(const char* url, const char* outfile = ""<default>"", const char* proofopt = 0). const char * GetOutFileName() const; { return fOutFileName; }. void SetNFilesWrk(Int_t nf = 0); { fNFilesWrk = (nf > 0) ? nf : 4; }. void SetNTries(Int_t nt); { if (nt > 0) fNtries = nt; }. void SetHistType(TPBHistType* histtype); { fHistType = histtype; }. void SetNHist(Int_t nh); { fNHist = nh; }. void SetReadType(TPBReadType* readtype); { fReadType = readtype; }. void SetCPUSel(const char* sel); { fCPUSel = sel; }. void SetCPUPar(const char* par); { fCPUPar = par; }. void SetDataSel(const char* s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofBench.html:10529,error,error,10529,root/html532/TProofBench.html,https://root.cern,https://root.cern/root/html532/TProofBench.html,1,['error'],['error']
Availability,"lot: 'Contour' : ComboBox: draw a contour plot (None, Cont0..4) 'Cont #' : TGNumberEntry: set the number of Contours 2d Plot checkboxes: 'Arrow' : arrow mode. Shows gradient between adjacent cells 'Col' : a box is drawn for each cell with a color scale varying with contents 'Text' : Draw bin contents as text 'Box' : a box is drawn for each cell with surface proportional to contents 'Scat' : Draw a scatter-plot (default) 'Palette' : the color palette is drawn; 3d Plot: 'Type' : ComboBox: set histogram type Lego or Surface-Plot draw(Lego, Lego1..4, Surf, Surf1..5) see THistPainter::Paint 'Coords' : ComboBox: set the coordinate system (Cartesian, .. Spheric) see THistPainter::Paint 'Cont #' : TGNumberEntry: set the number of Contours (for e.g. Lego2 drawoption 3d Plot checkboxes: 'Errors' : draw errors in a cartesian lego plot 'Palette' : the color palette is drawn 'Front' : draw the front box of a cartesian lego plot 'Back' : draw the back box of a cartesian lego plot Available for a 3D lego plot: 'Bar' : change the bar attributes 'W' : change Bar Width 'O' : change Bar Offset Further Editor: 'Marker' : change the Marker attributes (color, appearance, thickness) see TAttMarkerEditor; Rebinning Tab: This Tab has two different layouts. One is for a histogram which is not drawn from an ntuple. The other one is available for a histogram which is drawn from an ntuple. In this case the rebin algorithm can create a rebinned histogram from the original data i.e. the ntuple. To see te differences do for example: TFile f(""hsimple.root""); hpxpy->Draw(""Lego2""); // non ntuple histogram ntuple->Draw(""px:py"","""",""Lego2""); // ntuple histogram Non ntuple histogram: 'Rebin': with the Sliders (one for the x, one for the y axis) the number of bins (shown in the field below the Slider) can be changed to any number which divides the number of bins of the original histogram. Pushing 'Apply' will delete the origin histogram and replace it by the rebinned one on the screen. Pushing 'Ignore' the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2Editor.html:1856,error,errors,1856,doc/master/classTH2Editor.html,https://root.cern,https://root.cern/doc/master/classTH2Editor.html,1,['error'],['errors']
Availability,"lotting operations. ; Definition at line 2860 of file RooAbsReal.cxx. ◆ preferredObservableScanOrder(). void RooAbsReal::preferredObservableScanOrder ; (; const RooArgSet & ; obs, . RooArgSet & ; orderedObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3694 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is zero, only the number of errors for each source (object with unique name) is listed. If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown per source of errors. A truncation message is shown if there were more errors logged than shown. ; Definition at line 3582 of file RooAbsReal.cxx. ◆ printMultiline(). void RooAbsReal::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Structure printing. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, RooResolutionModel, RooAbsRealLValue, RooFormulaVar, RooRealIntegral, and RooRealVar.; Definition at line 455 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 445 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:141407,error,errors,141407,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['error'],['errors']
Availability,"lotting tutorial for further explanation of meaning & use of this technique . ProjWData(const RooArgSet& s, const RooAbsData& d) As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging . ProjectionRange(const char* rn) When projecting the PDF onto the plot axis, it is usually integrated over the full range of the invisible variables. The ProjectionRange overrides this. This is useful if the PDF was fitted in a limited range in y, but it is now projected onto x. If ProjectionRange(""<name of fit range>"") is passed, the projection is normalised correctly. Type of argument Plotting control . LineStyle(Int_t style) Select line style by ROOT line style code, default is solid . LineColor(Int_t color) Select line color by ROOT color code, default is blue . LineWidth(Int_t width) Select line with in pixels, default is 3 . FillStyle(Int_t style) Select fill style, default is not filled. If a filled style is selected, also use VLines() to add vertical downward lines at end of curve to ensure proper closure . FillColor(Int_t color) Select fill color by ROOT color code . Range(const char* name) Only draw curve in range defined by given name. Multiple comma-separated ranges can be given. An empty string """" or nullptr means to use the default range of the variable. . Range(double lo, double hi) Only draw curve in specified range . VLines() Add vertical lines to y=0 at end points of curve . Precision(double eps) Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. A higher precision will result in more and more densely spaced curve points. A negative precision value will disable adaptive point spacing and restrict sampling to the grid point of points defined by the binning of the plotted observable (recommended for expensive functions such as profile likelihoods) . Invisible(bool flag) Add curve to frame, but do not display. Useful in combination AddTo() . VisualizeError(const RooFitResult& fitres, double Z=1, bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimultaneous.html:95755,down,downward,95755,doc/master/classRooSimultaneous.html,https://root.cern,https://root.cern/doc/master/classRooSimultaneous.html,2,['down'],['downward']
Availability,"low; Reallocate bin contents array. void SetBuffer(Int_t buffersize, Option_t* opt = """"); set the buffer size in units of 8 bytes (double). void SetErrorOption(Option_t* option = """"); -*-*Set option to compute profile3D errors; *-* =======================================. The computation of the bin errors is based on the parameter option:; option:; ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (T),; i.e. the standard error of the bin contents.; Note that if TProfile3D::Approximate() is called, an approximation is used when; the spread in T is 0 and the number of bin entries is > 0. 's' The bin errors are the standard deviations of the T bin values; Note that if TProfile3D::Approximate() is called, an approximation is used when; the spread in T is 0 and the number of bin entries is > 0. 'i' Errors are as in default case (standard errors of the bin contents); The only difference is for the case when the spread in T is zero.; In this case for N > 0 the error is 1./SQRT(12.*N). 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; W is the sum in the bin of the weights of the profile.; This option is for combining measurements t +/- dt,; and the profile is filled with values t and weights w = 1/dt**2. See TProfile::BuildOptions for explanation of all options. void Sumw2(Bool_t flag = kTRUE); Create/Delete structure to store sum of squares of weights per bin *-*-*-*-*-*-*-*; This is needed to compute the correct statistical quantities; of a profile filled with weights. This function is automatically called when the histogram is created; if the static function TH1::SetDefaultSumw2 has been called before.; If flag = false the structure is deleted. Int_t BufferFill(Double_t , Double_t ); {return -2;}. Int_t BufferFill(Double_t , Double_t , Double_t ); {return -2;}. Int_t BufferFill(Double_t , Double_t , Double_t , Double_t ); {return -2;}. void SetBins(const Int_t* nbins, const Double_t* range); helper methods for the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProfile3D.html:45186,error,error,45186,root/html534/TProfile3D.html,https://root.cern,https://root.cern/root/html534/TProfile3D.html,3,['error'],['error']
Availability,"lowing cases are supported:; CASE 1: T->GetEntry(entry) is called In this case, the serial number entry is used to retrieve the data in both Trees.; CASE 2: T->GetEntry(entry) is called, TF has a TreeIndex the expressions given in major/minorname of TF are used to compute the value pair major,minor with the data in T. TF->GetEntryWithIndex(major,minor) is then called (tricky case!); CASE 3: T->GetEntryWithIndex(major,minor) is called. It is assumed that both T and TF have a TreeIndex built using the same major and minor name. Saving the TreeIndex; Once the index is built, it can be saved with the TTree object with tree.Write(); (if the file has been open in ""update"" mode).; The most convenient place to create the index is at the end of the filling process just before saving the Tree header. If a previous index was computed, it is redefined by this new call.; Note that this function can also be applied to a TChain.; The return value is the number of entries in the Index (< 0 indicates failure); It is possible to play with different TreeIndex in the same Tree. see comments in TTree::SetTreeIndex. ; Definition at line 128 of file TTreeIndex.cxx. ◆ ~TTreeIndex(). TTreeIndex::~TTreeIndex ; (; ). override . Destructor. ; Definition at line 223 of file TTreeIndex.cxx. Member Function Documentation. ◆ Append(). void TTreeIndex::Append ; (; const TVirtualIndex * ; add, . bool ; delaySort = false . ). overridevirtual . Append 'add' to this index. ; Entry 0 in add will become entry n+1 in this. If delaySort is true, do not sort the value, then you must call Append(0,false); ; Implements TVirtualIndex.; Definition at line 240 of file TTreeIndex.cxx. ◆ Class(). static TClass * TTreeIndex::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTreeIndex::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTreeIndex::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this clas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeIndex.html:17547,failure,failure,17547,doc/master/classTTreeIndex.html,https://root.cern,https://root.cern/doc/master/classTTreeIndex.html,1,['failure'],['failure']
Availability,"lows specifying if the step is limited by geometrical reasons (a boundary crossing) or is an arbitrary step. The flag cross can be used in case the step is made on a boundary and specifies if user wants to cross or not the boundary. The returned node represents the new current node after the step was made. Making a geometrically contained step with boundary crossing (is_geom=kTRUE, cross=kTRUE) - This is the default method behavior. In this case, the step size is supposed to be already set by a previous TGeoManager::FindNextBoundary() call. Due to floating-point boundary uncertainties, making a step corresponding ""exactly"" to the distance to next boundary does not insure boundary crossing. If the method is called with this purpose, an extra small step will be made in order to make the crossing the most probable event (epsil=10-6cm). Even with this extra small step cannot insure 100% boundary crossing for specific crossed shapes at big incident angles. After such a step is made, additional cross-checks become available:. gGeoManager->FindNextBoundary(pstep);; Double_t snext = gGeoManager->GetStep();; // The geometrical step is taken; TGeoNode *newNode = gGeoManager->Step();; // The step=snext+epsil is made; Bool_t hasCrossed = gGeoManager->IsEntering();; // Is the boundary crossed or not?; Bool_t isOnBoundary = gGeoManager->IsOnBoundary(); // The proposed; // geometrically limited step to be made was smaller; // than epsil value.; Bool_t isOutside = gGeoManager->IsOutside();; //Did we exit geometry ?; TGeoManager::IsOnBoundaryBool_t IsOnBoundary() constDefinition TGeoManager.h:407; TGeoManager::IsEnteringBool_t IsEntering() constDefinition TGeoManager.h:402; In case the desired end-point of the step should be in the same starting volume, the input flag cross should be set to kFALSE. In this case, the epsil value will be subtracted from the current step. Making a step of arbitrary value (is_geom=kFALSE, cross=no matter). In this case, the step to be made can be either",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:88913,avail,available,88913,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['avail'],['available']
Availability,"lows to fix the parameter (not to fit).; Bool_t*fFixAmp[fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional ; Bool_tfFixBlogical value of b parameter, which allows to fix the parameter (not to fit). ; Bool_t*fFixPosition[fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional ; Bool_tfFixSlogical value of s parameter, which allows to fix the parameter (not to fit). ; Bool_tfFixSigmalogical value of sigma parameter, which allows to fix the parameter (not to fit). ; Bool_tfFixTlogical value of t parameter, which allows to fix the parameter (not to fit). ; Int_tfNPeaksnumber of peaks present in fit, input parameter, it should be > 0; TStringTNamed::fNameobject identifier; Int_tfNumberIterationsnumber of iterations in fitting procedure, input parameter, it should be > 0; Double_t*fPositionCalc[fNPeaks] array of calculated values of fitted positions, output parameters; Double_t*fPositionErr[fNPeaks] array of position errors; Double_t*fPositionInit[fNPeaks] array of initial values of peaks positions, input parameters; Int_tfPowerpossible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; Double_tfSCalccalculated value of s parameter; Double_tfSErrerror value of s parameter; Double_tfSInitinitial value of s parameter (relative amplitude of step), for details see html manual and references; Double_tfSigmaCalccalculated value of sigma parameter; Double_tfSigmaErrerror value of sigma parameter; Double_tfSigmaInitinitial value of sigma parameter; Int_tfStatisticTypetype of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; Double_tfTCalccalculated value of t parameter; Double_tfTErrerror",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrumFit.html:11888,error,errors,11888,root/html528/TSpectrumFit.html,https://root.cern,https://root.cern/root/html528/TSpectrumFit.html,4,['error'],['errors']
Availability,"lows/overflows); 6072 Double_t xx[3];; 6073 Double_t *params = nullptr;; 6074 f1->InitArgs(xx,params);; 6075 ; 6076 for (Int_t binz = 0; binz < nz; ++binz) {; 6077 xx[2] = fZaxis.GetBinCenter(binz);; 6078 for (Int_t biny = 0; biny < ny; ++biny) {; 6079 xx[1] = fYaxis.GetBinCenter(biny);; 6080 for (Int_t binx = 0; binx < nx; ++binx) {; 6081 xx[0] = fXaxis.GetBinCenter(binx);; 6082 if (!f1->IsInside(xx)) continue;; 6083 TF1::RejectPoint(kFALSE);; 6084 Int_t bin = binx + nx * (biny + ny *binz);; 6085 Double_t cu = c1*f1->EvalPar(xx);; 6086 if (TF1::RejectedPoint()) continue;; 6087 UpdateBinContent(bin, RetrieveBinContent(bin) * cu);; 6088 if (fSumw2.fN) {; 6089 fSumw2.fArray[bin] = cu * cu * GetBinErrorSqUnchecked(bin);; 6090 }; 6091 }; 6092 }; 6093 }; 6094 ResetStats();; 6095 return kTRUE;; 6096}; 6097 ; 6098////////////////////////////////////////////////////////////////////////////////; 6099/// Multiply this histogram by h1.; 6100///; 6101/// `this = this*h1`; 6102///; 6103/// If errors of this are available (TH1::Sumw2), errors are recalculated.; 6104/// Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; 6105/// if not already set.; 6106///; 6107/// IMPORTANT NOTE: If you intend to use the errors of this histogram later; 6108/// you should call Sumw2 before making this operation.; 6109/// This is particularly important if you fit the histogram after TH1::Multiply; 6110///; 6111/// The function return kFALSE if the Multiply operation failed; 6112 ; 6113Bool_t TH1::Multiply(const TH1 *h1); 6114{; 6115 if (!h1) {; 6116 Error(""Multiply"",""Attempt to multiply by a non-existing histogram"");; 6117 return kFALSE;; 6118 }; 6119 ; 6120 // delete buffer if it is there since it will become invalid; 6121 if (fBuffer) BufferEmpty(1);; 6122 ; 6123 if (LoggedInconsistency(""Multiply"", this, h1) >= kDifferentNumberOfBins) {; 6124 return false;; 6125 }; 6126 ; 6127 // Create Sumw2 if h1 has Sumw2 set; 6128 if (fSumw2.fN == 0 && h1->GetSumw2N() != 0) Sumw2();; 6129 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:240908,error,errors,240908,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,3,"['avail', 'error']","['available', 'errors']"
Availability,"lptr), fClassMenuList(nullptr),; 1109 fDeclFileName(""""), fImplFileName(""""), fDeclFileLine(0), fImplFileLine(0),; 1110 fInstanceCount(0), fOnHeap(0),; 1111 fCheckSum(0), fCollectionProxy(nullptr), fClassVersion(0), fClassInfo(nullptr),; 1112 fTypeInfo(nullptr), fShowMembers(nullptr),; 1113 fStreamer(nullptr), fIsA(nullptr), fGlobalIsA(nullptr), fIsAMethod(nullptr),; 1114 fMerge(nullptr), fResetAfterMerge(nullptr), fNew(nullptr), fNewArray(nullptr), fDelete(nullptr), fDeleteArray(nullptr),; 1115 fDestructor(nullptr), fDirAutoAdd(nullptr), fStreamerFunc(nullptr), fConvStreamerFunc(nullptr), fSizeof(-1),; 1116 fCanSplit(-1), fIsSyntheticPair(kFALSE), fHasCustomStreamerMember(kFALSE), fProperty(0), fClassProperty(0), fHasRootPcmInfo(kFALSE), fCanLoadClassInfo(kFALSE),; 1117 fIsOffsetStreamerSet(kFALSE), fVersionUsed(kFALSE), fRuntimeProperties(0), fOffsetStreamer(0), fStreamerType(TClass::kDefault),; 1118 fState(kNoInfo),; 1119 fCurrentInfo(nullptr), fLastReadInfo(nullptr), fRefProxy(nullptr),; 1120 fSchemaRules(nullptr), fStreamerImpl(&TClass::StreamerDefault); 1121{; 1122 R__LOCKGUARD(gInterpreterMutex);; 1123 ; 1124 if (!gROOT); 1125 ::Fatal(""TClass::TClass"", ""ROOT system not initialized"");; 1126 ; 1127 {; 1128 TMmallocDescTemp setreset;; 1129 fStreamerInfo = new TObjArray(1, -2);; 1130 }; 1131 fDeclFileLine = -2; // -2 for standalone TClass (checked in dtor); 1132 ; 1133 SetBit(kLoading);; 1134 if (!gInterpreter); 1135 ::Fatal(""TClass::TClass"", ""gInterpreter not initialized"");; 1136 ; 1137 gInterpreter->SetClassInfo(this); // sets fClassInfo pointer; 1138 if (!silent && !fClassInfo && !TClassEdit::IsArtificial(name)); 1139 ::Warning(""TClass::TClass"", ""no dictionary for class %s is available"", name);; 1140 ResetBit(kLoading);; 1141 ; 1142 if (fClassInfo) SetTitle(gCling->ClassInfo_Title(fClassInfo));; 1143 fConversionStreamerInfo = nullptr;; 1144}; 1145 ; 1146////////////////////////////////////////////////////////////////////////////////; 1147/// Internal constructor.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:40631,avail,available,40631,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['avail'],['available']
Availability,"lptr), fClassMenuList(nullptr),; 1176 fDeclFileName(""""), fImplFileName(""""), fDeclFileLine(0), fImplFileLine(0),; 1177 fInstanceCount(0), fOnHeap(0),; 1178 fCheckSum(0), fCollectionProxy(nullptr), fClassVersion(0), fClassInfo(nullptr),; 1179 fTypeInfo(nullptr), fShowMembers(nullptr),; 1180 fStreamer(nullptr), fIsA(nullptr), fGlobalIsA(nullptr), fIsAMethod(nullptr),; 1181 fMerge(nullptr), fResetAfterMerge(nullptr), fNew(nullptr), fNewArray(nullptr), fDelete(nullptr), fDeleteArray(nullptr),; 1182 fDestructor(nullptr), fDirAutoAdd(nullptr), fStreamerFunc(nullptr), fConvStreamerFunc(nullptr), fSizeof(-1),; 1183 fCanSplit(-1), fIsSyntheticPair(kFALSE), fHasCustomStreamerMember(kFALSE), fProperty(0), fClassProperty(0), fHasRootPcmInfo(kFALSE), fCanLoadClassInfo(kFALSE),; 1184 fIsOffsetStreamerSet(kFALSE), fVersionUsed(kFALSE), fRuntimeProperties(0), fOffsetStreamer(0), fStreamerType(TClass::kDefault),; 1185 fState(kNoInfo),; 1186 fCurrentInfo(nullptr), fLastReadInfo(nullptr), fRefProxy(nullptr),; 1187 fSchemaRules(nullptr), fStreamerImpl(&TClass::StreamerDefault); 1188{; 1189 R__LOCKGUARD(gInterpreterMutex);; 1190 ; 1191 if (!gROOT); 1192 ::Fatal(""TClass::TClass"", ""ROOT system not initialized"");; 1193 ; 1194 {; 1195 TMmallocDescTemp setreset;; 1196 fStreamerInfo = new TObjArray(1, -2);; 1197 }; 1198 fDeclFileLine = -2; // -2 for standalone TClass (checked in dtor); 1199 ; 1200 SetBit(kLoading);; 1201 if (!gInterpreter); 1202 ::Fatal(""TClass::TClass"", ""gInterpreter not initialized"");; 1203 ; 1204 gInterpreter->SetClassInfo(this); // sets fClassInfo pointer; 1205 if (!silent && !fClassInfo && !TClassEdit::IsArtificial(name)); 1206 ::Warning(""TClass::TClass"", ""no dictionary for class %s is available"", name);; 1207 ResetBit(kLoading);; 1208 ; 1209 if (fClassInfo) SetTitle(gCling->ClassInfo_Title(fClassInfo));; 1210 fConversionStreamerInfo = nullptr;; 1211}; 1212 ; 1213////////////////////////////////////////////////////////////////////////////////; 1214/// Internal constructor.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:43382,avail,available,43382,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['avail'],['available']
Availability,"lptr, const Float_t *eyh=nullptr, const Float_t *exld=nullptr, const Float_t *exhd=nullptr, const Float_t *eyld=nullptr, const Float_t *eyhd=nullptr);  TGraphBentErrors normal constructor. ;  ;  ~TGraphBentErrors () override;  TGraphBentErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0);  Add a point with bent errors to the graph. ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  Get high error on X[i]. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  Get low error on X[i]. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  Get high error on Y[i]. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  Get low error on Y[i]. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXhighd () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEXlowd () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYhighd () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEYlowd () const override;  ; TClass * IsA () const override;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphBentErrors by a constant c1. ;  ; virtual void SetPointError (Double_t exl, Double_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphBentErrors.html:4180,error,error,4180,doc/master/classTGraphBentErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html,1,['error'],['error']
Availability,"lres = 0 means timeout */; 6351 nread = 0;; 6352 }; 6353 }; 6354 ; 6355 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6356 return -2;; 6357 }; 6358 ; 6359 if ((nread > 0) || ((nread == 0) && (len == 0))) {; 6360 /* some data has been read, or no data was requested */; 6361 return nread;; 6362 }; 6363 ; 6364 if (nread < 0) {; 6365 /* socket error - check errno */; 6366#if defined(_WIN32); 6367 if (err == WSAEWOULDBLOCK) {; 6368 /* TODO (low): check if this is still required */; 6369 /* standard case if called from close_socket_gracefully */; 6370 return -2;; 6371 } else if (err == WSAETIMEDOUT) {; 6372 /* TODO (low): check if this is still required */; 6373 /* timeout is handled by the while loop */; 6374 return 0;; 6375 } else if (err == WSAECONNABORTED) {; 6376 /* See https://www.chilkatsoft.com/p/p_299.asp */; 6377 return -2;; 6378 } else {; 6379 DEBUG_TRACE(""recv() failed, error %d"", err);; 6380 return -2;; 6381 }; 6382#else; 6383 /* TODO: POSIX returns either EAGAIN or EWOULDBLOCK in both cases,; 6384 * if the timeout is reached and if the socket was set to non-; 6385 * blocking in close_socket_gracefully, so we can not distinguish; 6386 * here. We have to wait for the timeout in both cases for now.; 6387 */; 6388 if (ERROR_TRY_AGAIN(err)) {; 6389 /* TODO (low): check if this is still required */; 6390 /* EAGAIN/EWOULDBLOCK:; 6391 * standard case if called from close_socket_gracefully; 6392 * => should return -1 */; 6393 /* or timeout occurred; 6394 * => the code must stay in the while loop */; 6395 ; 6396 /* EINTR can be generated on a socket with a timeout set even; 6397 * when SA_RESTART is effective for all relevant signals; 6398 * (see signal(7)).; 6399 * => stay in the while loop */; 6400 } else {; 6401 DEBUG_TRACE(""recv() failed, error %d"", err);; 6402 return -2;; 6403 }; 6404#endif; 6405 }; 6406 ; 6407 /* Timeout occurred, but no data available. */; 6408 return -1;; 6409}; 6410 ; 6411 ; 6412static int; 6413pull_all(FILE *fp, struct mg_connection ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:185717,error,error,185717,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"lres = 0 means timeout */; 6352 nread = 0;; 6353 }; 6354 }; 6355 ; 6356 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6357 return -2;; 6358 }; 6359 ; 6360 if ((nread > 0) || ((nread == 0) && (len == 0))) {; 6361 /* some data has been read, or no data was requested */; 6362 return nread;; 6363 }; 6364 ; 6365 if (nread < 0) {; 6366 /* socket error - check errno */; 6367#if defined(_WIN32); 6368 if (err == WSAEWOULDBLOCK) {; 6369 /* TODO (low): check if this is still required */; 6370 /* standard case if called from close_socket_gracefully */; 6371 return -2;; 6372 } else if (err == WSAETIMEDOUT) {; 6373 /* TODO (low): check if this is still required */; 6374 /* timeout is handled by the while loop */; 6375 return 0;; 6376 } else if (err == WSAECONNABORTED) {; 6377 /* See https://www.chilkatsoft.com/p/p_299.asp */; 6378 return -2;; 6379 } else {; 6380 DEBUG_TRACE(""recv() failed, error %d"", err);; 6381 return -2;; 6382 }; 6383#else; 6384 /* TODO: POSIX returns either EAGAIN or EWOULDBLOCK in both cases,; 6385 * if the timeout is reached and if the socket was set to non-; 6386 * blocking in close_socket_gracefully, so we can not distinguish; 6387 * here. We have to wait for the timeout in both cases for now.; 6388 */; 6389 if (ERROR_TRY_AGAIN(err)) {; 6390 /* TODO (low): check if this is still required */; 6391 /* EAGAIN/EWOULDBLOCK:; 6392 * standard case if called from close_socket_gracefully; 6393 * => should return -1 */; 6394 /* or timeout occurred; 6395 * => the code must stay in the while loop */; 6396 ; 6397 /* EINTR can be generated on a socket with a timeout set even; 6398 * when SA_RESTART is effective for all relevant signals; 6399 * (see signal(7)).; 6400 * => stay in the while loop */; 6401 } else {; 6402 DEBUG_TRACE(""recv() failed, error %d"", err);; 6403 return -2;; 6404 }; 6405#endif; 6406 }; 6407 ; 6408 /* Timeout occurred, but no data available. */; 6409 return -1;; 6410}; 6411 ; 6412 ; 6413static int; 6414pull_all(FILE *fp, struct mg_connection ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:185749,error,error,185749,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"ls! list of signals from this object; Bool_tfMarkEndslines marking where stretch zones begin; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; Int_tfMove1: move min value; const TGWindow*TGWidget::fMsgWindowwindow which handles widget events; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; Float_tfPoslogical position between fVmin and fVmax; Int_tfPressPointmouse position at button press event; Float_tfPressSmaxlogical max position at button press event; Float_tfPressSminlogical min position at button press event; Int_tfRelPosslider position in pixel coordinates; Bool_tfReversedScalereverse which end is min and max; Int_tfScaletick mark scale; Int_tfScaleTypetick mark scale type (no, downright, both); Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; const TGPicture*fSliderPicpicture to draw slider ends; Float_tfSmaxlogical position of max value of Slider; Float_tfSminlogical position of min value of Slider; Float_tfVmaxlogical upper limit of slider; Float_tfVminlogical lower limit of slider; Int_tTGWidget::fWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tTGWidget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFram",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGDoubleSlider.html:18412,down,downright,18412,root/html528/TGDoubleSlider.html,https://root.cern,https://root.cern/root/html528/TGDoubleSlider.html,6,['down'],['downright']
Availability,"ls(Option_t* option = """") const; Long_tMacro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); TCanvas*MakeDefCanvas() const; voidTObject::MayNotUse(const char* method) const; static Bool_tMemCheck(); voidMessage(Int_t id, const TObject* obj); virtual TDirectory*TDirectory::mkdir(const char* name, const char* title = """"); Bool_tMustClean() const; virtual Bool_tTObject::Notify(); virtual TFile*TDirectory::OpenFile(const char*, Option_t* = """", const char* = """", Int_t = 1, Int_t = 0); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTDirectory::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTDirectory::Print(Option_t* option = """") const; Long_tProcessLine(const char* line, Int_t* error = 0); Long_tProcessLineFast(const char* line, Int_t* error = 0); Long_tProcessLineSync(const char* line, Int_t* error = 0); virtual voidTDirectory::Purge(Short_t = 1); virtual voidTDirectory::pwd() const; virtual Int_tTObject::Read(const char* name); virtual voidTDirectory::ReadAll(Option_t* = """"); Bool_tReadingObject() const; virtual Int_tTDirectory::ReadKeys(Bool_t = kTRUE); virtual Int_tTDirectory::ReadTObject(TObject*, const char*); virtual voidTDirectory::RecursiveRemove(TObject* obj); voidRefreshBrowsers(); virtual TObject*TDirectory::Remove(TObject*); voidRemoveClass(TClass*); voidReset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTDirectory::rmdir(const char* name); static Int_tRootVersionCode(); virtual voidTDirectory::Save(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; voidSaveContext(); virtual Int_tTDirectory::SaveObjectAs(const TObject*, const char* = """", Option_t* = """") const; virtual voidTObject::Sa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TROOT.html:11295,error,error,11295,root/html528/TROOT.html,https://root.cern,https://root.cern/root/html528/TROOT.html,1,['error'],['error']
Availability,"ls(unsigned int n, unsigned int stride1, unsigned int stride2, const double* x, double* ci, double cl = 0.95) const. get confidence intervals for an array of n points x.; stride1 indicates the stride in the coordinate space while stride2 the stride in dimension space.; For 1-dim points : stride1=1, stride2=1; for multi-dim points arranged as (x0,x1,...,xN,y0,....yN) stride1=1 stride2=n; for multi-dim points arraged as (x0,y0,..,x1,y1,...,xN,yN,..) stride1=ndim, stride2=1. the confidence interval are returned in the array ci; cl is the desired confidedence interval value. void GetConfidenceIntervals(const ROOT::Fit::BinData& data, double* ci, double cl = 0.95) const. evaluate confidence interval for the point specified in the passed data sets; the confidence interval are returned in the array ci; cl is the desired confidence interval value. int Index(const string& name) const; get index for parameter name (return -1 if not found). void NormalizeErrors(); normalize errors using chi2/ndf for chi2 fits. bool NormalizedErrors(); flag to chek if errors are normalized. { return fNormalized; }. void Print(ostream& os, bool covmat = false) const; print the result and optionaly covariance matrix and correlations. void PrintCovMatrix(ostream& os) const; print error matrix and correlations. bool IsParameterBound(unsigned int ipar) const; query if a parameter is bound. bool IsParameterFixed(unsigned int ipar) const; query if a parameter is fixed. std::string GetParameterName(unsigned int ipar) const; get name of parameter. void SetModelFunction(ROOT::Fit::FitResult::IModelFunction* func); { fFitFunc = func; }. » Author: L. Moneta Wed Aug 30 11:05:34 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: FitResult.h 31604 2009-12-07 19:04:33Z moneta $ » Last generated: 2009-12-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Fit__FitResult.html:9600,error,errors,9600,root/html526/ROOT__Fit__FitResult.html,https://root.cern,https://root.cern/root/html526/ROOT__Fit__FitResult.html,2,['error'],"['error', 'errors']"
Availability,"ls. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:61541,error,error,61541,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,148,['error'],['error']
Availability,"ls; 'm': print memory usage; 's': print statistics; 'c': print its content, too (this can generate a LOT of output!); Other options are forwarded to PrintEntries(). void Browse(TBrowser* b); Browse a THnSparse: create an entry (ROOT::THnSparseBrowsable) for each; dimension. THnSparse& operator=(const THnSparse& ). Int_t GetChunkSize() const; { return fChunkSize; }. THnSparseArrayChunk* GetChunk(Int_t idx) const. TArray* GenerateArray() const. Long64_t Fill(Long64_t bin, Double_t w); Increment the bin content of ""bin"" by ""w"",; return the bin index. Bool_t PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const. Int_t GetNChunks() const; { return fBinContent.GetEntriesFast(); }. TObjArray* GetListOfAxes(); { return &fAxes; }. TAxis* GetAxis(Int_t dim) const; { return (TAxis*)fAxes[dim]; }. Long64_t Fill(const Double_t* x, Double_t w = 1.). return Fill(const char** name, Double_t w = 1.). TList* GetListOfFunctions(); { return 0; }. Double_t GetEntries() const; { return fEntries; }. Double_t GetWeightSum() const; { return fTsumw; }. Long64_t GetNbins() const; { return fFilledBins; }. Int_t GetNdimensions() const; { return fNdimensions; }. Bool_t GetCalculateErrors() const; { return fTsumw2 >= 0.; }. void CalculateErrors(Bool_t calc = kTRUE); Calculate errors (or not if ""calc"" == kFALSE). void SetEntries(Double_t entries); { fEntries = entries; }. Double_t GetSumw() const; { return fTsumw; }. Double_t GetSumw2() const; { return fTsumw2; }. Double_t GetSumwx(Int_t dim) const; { return fTsumwx[dim]; }. Double_t GetSumwx2(Int_t dim) const; { return fTsumwx2[dim]; }. Bool_t IsFolder() const; { return kTRUE; }. » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: THnSparse.h 41546 2011-10-24 14:42:42Z axel $ » Last generated: 2011-12-02 14:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/THnSparse.html:27224,error,errors,27224,root/html532/THnSparse.html,https://root.cern,https://root.cern/root/html532/THnSparse.html,1,['error'],['errors']
Availability,"ls] [tolerance]"");; 3584 Printf("" Causes minimization of the function by the method of Migrad,"");; 3585 Printf("" the most efficient and complete single method, recommended"");; 3586 Printf("" for general functions (see also MINImize)."");; 3587 Printf("" The minimization produces as a by-product the error matrix"");; 3588 Printf("" of the parameters, which is usually reliable unless warning"");; 3589 Printf("" messages are produced."");; 3590 Printf("" The optional argument [maxcalls] specifies the (approximate)"");; 3591 Printf("" maximum number of function calls after which the calculation"");; 3592 Printf("" will be stopped even if it has not yet converged."");; 3593 Printf("" The optional argument [tolerance] specifies required tolerance"");; 3594 Printf("" on the function value at the minimum."");; 3595 Printf("" The default tolerance is 0.1, and the minimization will stop"");; 3596 Printf("" when the estimated vertical distance to the minimum (EDM) is"");; 3597 Printf("" less than 0.001*[tolerance]*UP (see [SET ERRordef])."");; 3598 goto L99;; 3599 }; 3600//______________________________________________________________________________; 3601//; 3602// Command MINIMIZE; 3603//; 3604 if( !strncmp(comd.Data(),""MINI"",4) ) {; 3605 Printf("" ***>MINImize [maxcalls] [tolerance]"");; 3606 Printf("" Causes minimization of the function by the method of Migrad,"");; 3607 Printf("" as does the MIGrad command, but switches to the SIMplex method"");; 3608 Printf("" if Migrad fails to converge. Arguments are as for MIGrad."");; 3609 Printf("" Note that command requires four characters to be unambiguous."");; 3610 goto L99;; 3611 }; 3612//______________________________________________________________________________; 3613//; 3614// Command MINOS; 3615//; 3616 if( !strncmp(comd.Data(),""MIN0"",4) ) {; 3617 Printf("" ***>MINOs [maxcalls] [parno] [parno] ..."");; 3618 Printf("" Causes a Minos error analysis to be performed on the parameters"");; 3619 Printf("" whose numbers [parno] are specified. If none are specified,"")",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:115949,toler,tolerance,115949,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['toler'],['tolerance']
Availability,"lse {; 2071 ::Error(""TApplication::Open"", ""failed to load plugin for TApplicationRemote"");; 2072 }; 2073 } else {; 2074 ::Error(""TApplication::Open"", ""failed to find plugin for TApplicationRemote"");; 2075 }; 2076 ; 2077 // Add to the list; 2078 if (ap && !(ap->TestBit(kInvalidObject))) {; 2079 fgApplications->Add(ap);; 2080 gROOT->GetListOfBrowsables()->Add(ap, ap->ApplicationName());; 2081 TIter next(gROOT->GetListOfBrowsers());; 2082 TBrowser *b;; 2083 while ((b = (TBrowser*) next())); 2084 b->Add(ap, ap->ApplicationName());; 2085 gROOT->RefreshBrowsers();; 2086 } else {; 2087 SafeDelete(ap);; 2088 ::Error(""TApplication::Open"",; 2089 ""TApplicationRemote for %s could not be instantiated"", url);; 2090 }; 2091 ; 2092 // Done; 2093 return ap;; 2094}; 2095 ; 2096////////////////////////////////////////////////////////////////////////////////; 2097/// Static function used to close a remote application; 2098 ; 2099void TApplication::Close(TApplication *app); 2100{; 2101 if (app) {; 2102 app->Terminate(0);; 2103 fgApplications->Remove(app);; 2104 gROOT->GetListOfBrowsables()->RecursiveRemove(app);; 2105 TIter next(gROOT->GetListOfBrowsers());; 2106 TBrowser *b;; 2107 while ((b = (TBrowser*) next())); 2108 b->RecursiveRemove(app);; 2109 gROOT->RefreshBrowsers();; 2110 }; 2111}; 2112 ; 2113////////////////////////////////////////////////////////////////////////////////; 2114/// Show available sessions; 2115 ; 2116void TApplication::ls(Option_t *opt) const; 2117{; 2118 if (fgApplications) {; 2119 TIter nxa(fgApplications);; 2120 TApplication *a = nullptr;; 2121 while ((a = (TApplication *) nxa())) {; 2122 a->Print(opt);; 2123 }; 2124 } else {; 2125 Print(opt);; 2126 }; 2127}; 2128 ; 2129////////////////////////////////////////////////////////////////////////////////; 2130/// Static method returning the list of available applications; 2131 ; 2132TList *TApplication::GetApplications(); 2133{; 2134 return fgApplications;; 2135}; SafeDelete#define SafeDelete(p)Definition RConfig.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:79470,avail,available,79470,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,2,['avail'],['available']
Availability,"lse {; 3600 ; 3601 // Print node name and details of 'maxPerNode' errors; 3602 os << item.second.first << std::endl;; 3603 // item.first->printStream(os,kName|kClassName|kArgs,kSingleLine) ;; 3604 ; 3605 Int_t i(0);; 3606 for (auto const &item2 : item.second.second) {; 3607 os << "" "" << item2._msg << "" @ "" << item2._srvval << std::endl;; 3608 if (i > maxPerNode) {; 3609 os << "" ... (remaining "" << item.second.second.size() - maxPerNode << "" messages suppressed)""; 3610 << std::endl;; 3611 break;; 3612 }; 3613 i++;; 3614 }; 3615 }; 3616 }; 3617}; 3618 ; 3619 ; 3620 ; 3621////////////////////////////////////////////////////////////////////////////////; 3622/// Return the number of logged evaluation errors since the last clearing.; 3623 ; 3624Int_t RooAbsReal::numEvalErrors(); 3625{; 3626 auto &evalErrors = evalErrorData();; 3627 if (evalErrors.mode == CountErrors) {; 3628 return evalErrors.count;; 3629 }; 3630 ; 3631 Int_t ntot(0);; 3632 for (auto const &elem : evalErrors.errorList) {; 3633 ntot += elem.second.second.size();; 3634 }; 3635 return ntot;; 3636}; 3637 ; 3638 ; 3639 ; 3640////////////////////////////////////////////////////////////////////////////////; 3641/// Fix the interpretation of the coefficient of any RooAddPdf component in; 3642/// the expression tree headed by this object to the given set of observables.; 3643///; 3644/// If the force flag is false, the normalization choice is only fixed for those; 3645/// RooAddPdf components that have the default 'automatic' interpretation of; 3646/// coefficients (i.e. the interpretation is defined by the observables passed; 3647/// to getVal()). If force is true, also RooAddPdf that already have a fixed; 3648/// interpretation are changed to a new fixed interpretation.; 3649 ; 3650void RooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet, bool force); 3651{; 3652 std::unique_ptr<RooArgSet> compSet{getComponents()};; 3653 for(auto * pdf : dynamic_range_cast<RooAbsPdf*>(*compSet)) {; 3654 if (pdf) {; 3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:154884,error,errorList,154884,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['error'],['errorList']
Availability,"lse;; 464}; 465 ; 466//-----------------------------------------------------------------------------; 467const CPyCppyy::PyResult CPyCppyy::Eval(const std::string& expr); 468{; 469// Evaluate a python expression.; 470//; 471// Caution: do not hold on to the return value: either store it in a builtin; 472// type (implicit casting will work), or in a pointer to a cppyy object (explicit; 473// casting to a void* is required).; 474 if (!Initialize()); 475 return PyResult();; 476 ; 477// evaluate the expression; 478 PyObject* result =; 479 PyRun_String(const_cast<char*>(expr.c_str()), Py_eval_input, gMainDict, gMainDict);; 480 ; 481// report errors as appropriate; return void; 482 if (!result) {; 483 PyErr_Print();; 484 return PyResult();; 485 }; 486 ; 487// results that require no conversion; 488 if (result == Py_None || CPPInstance_Check(result) ||; 489 PyBytes_Check(result) ||; 490 PyFloat_Check(result) || PyLong_Check(result) || PyInt_Check(result)); 491 return PyResult(result);; 492 ; 493// explicit conversion for python type required; 494 PyObject* pyclass = (PyObject*)Py_TYPE(result);; 495 ; 496// retrieve class name and the module in which it resides; 497 PyObject* name = PyObject_GetAttr(pyclass, PyStrings::gName);; 498 PyObject* module = PyObject_GetAttr(pyclass, PyStrings::gModule);; 499 ; 500 // concat name; 501 std::string qname =; 502 std::string(CPyCppyy_PyText_AsString(module)) + \; 503 '.' + CPyCppyy_PyText_AsString(name);; 504 Py_DECREF(module);; 505 Py_DECREF(name);; 506 ; 507// locate cppyy style class with this name; 508 // TODO: use Cppyy.cxx ...; 509 //TClass* klass = TClass::GetClass(qname.c_str());; 510 void* klass = nullptr;; 511 ; 512// construct general cppyy python object that pretends to be of class 'klass'; 513 if (klass); 514 return PyResult(result);; 515 ; 516// no conversion, return null pointer object; 517 Py_DECREF(result);; 518 return PyResult();; 519}; 520 ; 521//-----------------------------------------------------------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/API_8cxx_source.html:16497,error,errors,16497,doc/master/API_8cxx_source.html,https://root.cern,https://root.cern/doc/master/API_8cxx_source.html,1,['error'],['errors']
Availability,"lse;; 491 const RooFitResult *errorFR = nullptr;; 492 };; 493 ; 494 // Plot implementation functions; 495 virtual RooPlot *plotOn(RooPlot* frame, PlotOpt o) const;; 496 ; 497 virtual RooPlot *plotAsymOn(RooPlot *frame, const RooAbsCategoryLValue& asymCat, PlotOpt o) const;; 498 ; 499 bool matchArgsByName(const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;; 500 ; 501 bool redirectServersHook(const RooAbsCollection & newServerList, bool mustReplaceAll,; 502 bool nameChange, bool isRecursiveStep) override;; 503 ; 504 static void globalSelectComp(bool flag) ;; 505 ; 506 // This struct can be used to flip the global switch to select components.; 507 // Doing this with RAII prevents forgetting to reset the state.; 508 struct GlobalSelectComponentRAII {; 509 GlobalSelectComponentRAII(bool state) :; 510 _oldState{_globalSelectComp} {; 511 if (state != RooAbsReal::_globalSelectComp); 512 RooAbsReal::_globalSelectComp = state;; 513 }; 514 ; 515 ~GlobalSelectComponentRAII() {; 516 if (RooAbsReal::_globalSelectComp != _oldState); 517 RooAbsReal::_globalSelectComp = _oldState;; 518 }; 519 ; 520 bool _oldState;; 521 };; 522 ; 523 ; 524private:; 525 ; 526 /// Debug version of getVal(), which is slow and does error checking.; 527 double _DEBUG_getVal(const RooArgSet* normalisationSet) const;; 528 ; 529 //--------------------------------------------------------------------; 530 ; 531 protected:; 532 ; 533 double _plotMin = 0.0; ///< Minimum of plot range; 534 double _plotMax = 0.0; ///< Maximum of plot range; 535 Int_t _plotBins = 100; ///< Number of plot bins; 536 mutable double _value = 0.0; ///< Cache for current value of object; 537 TString _unit; ///< Unit for objects value; 538 TString _label; ///< Plot label for objects value; 539 bool _forceNumInt = false; ///< Force numerical integration if flag set; 540 std::unique_ptr<RooNumIntConfig> _specIntegratorConfig; // Numeric integrator configuration specific for this object; 541 TreeReadBuffer *_treeR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8h_source.html:25598,error,error,25598,doc/master/RooAbsReal_8h_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8h_source.html,1,['error'],['error']
Availability,"lt = fitter.Result();; ; std::cout << ""Total final distance square "" << result.MinFcnValue() << std::endl;; result.Print(std::cout);; ; ; gr->Draw(""p0"");; ; // get fit parameters; const double * parFit = result.GetParams();; ; // draw the fitted line; int n = 1000;; double t0 = 0;; double dt = 10;; TPolyLine3D *l = new TPolyLine3D(n);; for (int i = 0; i <n;++i) {; double t = t0+ dt*i/n;; double x,y,z;; line(t,parFit,x,y,z);; l->SetPoint(i,x,y,z);; }; l->SetLineColor(kRed);; l->Draw(""same"");; ; // draw original line; TPolyLine3D *l0 = new TPolyLine3D(n);; for (int i = 0; i <n;++i) {; double t = t0+ dt*i/n;; double x,y,z;; line(t,p0,x,y,z);; l0->SetPoint(i,x,y,z);; }; l0->SetLineColor(kBlue);; l0->Draw(""same"");; return 0;; }; Fitter.h; Functor.h; d#define d(i)Definition RSha256.hxx:102; g#define g(i)Definition RSha256.hxx:105; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; TCanvas.h; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; TF2.h; N#define N; CrossTGLVector3 Cross(const TGLVector3 &v1, const TGLVector3 &v2)Definition TGLUtil.h:323; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; TGraph2D.h; TH1.h; TMath.h; TPolyLine3D.h; operator()TRObject operator()(const T1 &t1) constDefinition TRFunctionImport__oprtr.h:14; TRandom2.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; Vector3D.h; ROOT::Fit::FitConfig::ParSettingsconst ParameterSettings & ParSettings",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/line3Dfit_8C.html:4653,error,error,4653,doc/master/line3Dfit_8C.html,https://root.cern,https://root.cern/doc/master/line3Dfit_8C.html,1,['error'],['error']
Availability,"lt object at the given index point. int FindIndex(double xvalue) const; find the index corresponding at the poi value xvalue; If no points is found return -1; Note that a tolerance is used of 10^-12 to find the closest point. double GetGraphX(const TGraph& g, double y0, bool lowSearch = false, double xmin = 1, double xmax = 0) const; return the X value of the given graph for the target value y0; the graph is evaluated using linea rinterpolation by default.; if option = ""S"" a TSpline3 is used. double FindInterpolatedLimit(double target, bool lowSearch = false, double xmin = 1, double xmax = 0); interpolate to find a limit value; Use a linear or a spline interpolation depending on the interpolation option. int FindClosestPointIndex(double target); find the object with the smallest error that is < 1 sigma from the target. Double_t LowerLimit(). Double_t UpperLimit(); std::cout << ""finding point with cl = "" << (1-ConfidenceLevel())/2 << endl;. Double_t CalculateEstimatedError(double target); Return an error estimate on the upper limit. This is the error on; either CLs or CLsplusb divided by an estimate of the slope at this; point. Double_t LowerLimitEstimatedError(). Double_t UpperLimitEstimatedError(). SamplingDistribution * GetBackgroundTestStatDist(int index) const; get the background test statistic distribution. SamplingDistribution * GetSignalAndBackgroundTestStatDist(int index) const; get the signal and background test statistic distribution. SamplingDistribution * GetExpectedPValueDist(int index) const; get the expected p-value distribution at the scanned point index. SamplingDistribution * GetLimitDistribution(bool lower) const; get the limit distribution (lower/upper depending on the flag); by interpolating the expected p values for each point. double GetExpectedLowerLimit(double nsig = 0) const; Get the expected lower limit; nsig is used to specify which expected value of the UpperLimitDistribution; For example; nsig = 0 (default value) returns the expected va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestInverterResult.html:12430,error,error,12430,root/html530/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestInverterResult.html,1,['error'],['error']
Availability,"lt object at the given index point. int FindIndex(double xvalue) const; find the index corresponding at the poi value xvalue; If no points is found return -1; Note that a tolerance is used of 10^-12 to find the closest point. double GetGraphX(const TGraph& g, double y0, bool lowSearch = false, double xmin = 1, double xmax = 0) const; return the X value of the given graph for the target value y0; the graph is evaluated using linear interpolation by default.; if option = ""S"" a TSpline3 is used. double FindInterpolatedLimit(double target, bool lowSearch = false, double xmin = 1, double xmax = 0); interpolate to find a limit value; Use a linear or a spline interpolation depending on the interpolation option. int FindClosestPointIndex(double target); find the object with the smallest error that is < 1 sigma from the target. Double_t LowerLimit(). Double_t UpperLimit(); std::cout << ""finding point with cl = "" << (1-ConfidenceLevel())/2 << endl;. Double_t CalculateEstimatedError(double target); Return an error estimate on the upper limit. This is the error on; either CLs or CLsplusb divided by an estimate of the slope at this; point. Double_t LowerLimitEstimatedError(). Double_t UpperLimitEstimatedError(). SamplingDistribution * GetBackgroundTestStatDist(int index) const; get the background test statistic distribution. SamplingDistribution * GetSignalAndBackgroundTestStatDist(int index) const; get the signal and background test statistic distribution. SamplingDistribution * GetExpectedPValueDist(int index) const; get the expected p-value distribution at the scanned point index. SamplingDistribution * GetLimitDistribution(bool lower) const; get the limit distribution (lower/upper depending on the flag); by interpolating the expected p values for each point. double GetExpectedLowerLimit(double nsig = 0, const char* opt = """") const; Get the expected lower limit; nsig is used to specify which expected value of the UpperLimitDistribution; For example; nsig = 0 (default value) r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__HypoTestInverterResult.html:12759,error,error,12759,root/html532/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html532/RooStats__HypoTestInverterResult.html,1,['error'],['error']
Availability,"lt$(arr2,0)"");; will print on one line the value of arr1 and (arr2,0) that will be; matched by; tree->Draw(""arr1-Alt$(arr2,0)"");. The ternary operator is not directly supported in TTree::Draw however, to plot the; equivalent of 'var2<20 ? -99 : var1', you can use:; tree->Draw(""(var2<20)*99+(var2>=20)*var1"","""");. Drawing a user function accessing the TTree data directly. If the formula contains a file name, TTree::MakeProxy will be used; to load and execute this file. In particular it will draw the; result of a function with the same name as the file. The function; will be executed in a context where the name of the branches can; be used as a C++ variable. For example draw px using the file hsimple.root (generated by the; hsimple.C tutorial), we need a file named hsimple.cxx:. double hsimple() {; return px;; }. MakeProxy can then be used indirectly via the TTree::Draw interface; as follow:; new TFile(""hsimple.root""); ntuple->Draw(""hsimple.cxx"");. A more complete example is available in the tutorials directory:; h1analysisProxy.cxx , h1analysProxy.h and h1analysisProxyCut.C; which reimplement the selector found in h1analysis.C. The main features of this facility are:. * on-demand loading of branches; * ability to use the 'branchname' as if it was a data member; * protection against array out-of-bound; * ability to use the branch data as object (when the user code is available). See TTree::MakeProxy for more details. Making a Profile histogram. In case of a 2-Dim expression, one can generate a TProfile histogram; instead of a TH2F histogram by specyfying option=prof or option=profs; or option=profi or option=profg ; the trailing letter select the way; the bin error are computed, See TProfile2D::SetErrorOption for; details on the differences.; The option=prof is automatically selected in case of y:x>>pf; where pf is an existing TProfile histogram. Making a 2D Profile histogram. In case of a 3-Dim expression, one can generate a TProfile2D histogram; instead of a TH3F hist",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:81580,avail,available,81580,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,3,['avail'],['available']
Availability,"lt;  ; T Unwrap ();  If the operation was successful, returns the inner type by value. ;  ;  Public Member Functions inherited from ROOT::Experimental::RResultBase;  RResultBase (const RResultBase &other)=delete;  ;  RResultBase (RResultBase &&other)=default;  ;  ~RResultBase () noexcept(false);  ; RError * GetError ();  ; RResultBase & operator= (const RResultBase &other)=delete;  ; RResultBase & operator= (RResultBase &&other)=default;  ; void Throw ();  Throws an RException with fError. ;  . Private Member Functions; void ThrowOnError ();  . Private Attributes; T fValue;  The result value in case of successful execution. ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::Experimental::RResultBase; static RError ForwardError (RResultBase &&result, RError::RLocation &&sourceLocation);  Used by R__FORWARD_ERROR in order to keep track of the stack trace. ;  ;  Protected Member Functions inherited from ROOT::Experimental::RResultBase;  RResultBase ()=default;  ;  RResultBase (RError &&error);  ; bool Check ();  Used by the RResult<T> bool operator. ;  ;  Protected Attributes inherited from ROOT::Experimental::RResultBase; std::unique_ptr< RError > fError;  This is the nullptr for an RResult representing success. ;  ; bool fIsChecked {false};  Switches to true once the user of an RResult object checks the object status. ;  . #include <ROOT/RError.hxx>. Inheritance diagram for ROOT::Experimental::RResult< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RResult() [1/5]. template<typename T > . ROOT::Experimental::RResult< T >::RResult ; (; const T & ; value). inline . Definition at line 214 of file RError.hxx. ◆ RResult() [2/5]. template<typename T > . ROOT::Experimental::RResult< T >::RResult ; (; T && ; value). inline . Definition at line 215 of file RError.hxx. ◆ RResult() [3/5]. template<typename T > . ROOT::Experimental::RResult< T >::R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:4501,error,error,4501,doc/master/classROOT_1_1Experimental_1_1RResult.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html,1,['error'],['error']
Availability,"ltSplitter;  CTF3Adapter;  CTF3EdgeSplitter;  CTGridGeometry;  CTH3Adapter;  CTIsoMesh;  CTMeshBuilder;  CTSlice;  CTSourceAdapterSelector;  CTSourceAdapterSelector< TF3 >;  CTSourceAdapterSelector< TH3C >;  CTSourceAdapterSelector< TH3D >;  CTSourceAdapterSelector< TH3F >;  CTSourceAdapterSelector< TH3I >;  CTSourceAdapterSelector< TH3S >;  CTSourceAdapterSelector< TKDEFGT >;  CTSplitterSelector;  CTSplitterSelector< TF3, V >;  CTSplitterSelector< TH3C, V >;  CTSplitterSelector< TH3D, V >;  CTSplitterSelector< TH3F, V >;  CTSplitterSelector< TH3I, V >;  CTSplitterSelector< TH3S, V >;  CTSplitterSelector< TKDEFGT, V >;  ►NPad;  CBoundingRect;  CFillAttribSet;  CGLLimits;  CLineAttribSet;  CMarkerPainter;  CMeshPatch_t;  COffScreenDevice;  CPolygonStippleSet;  CTesselator;  CPlotTranslation;  CTGuardBase;  CTOneArgGuard;  CTTwoArgsGuard;  NRooFit;  NRooFitShortHand;  ►NRooHelpers;  CHijackMessageStreamHijacks all messages with given level and topic (and optionally object name) while alive ;  CMakeVerboseSwitches the message service to verbose while the instance alive ;  NRooLinkedListImplDetails;  NRooSimultaneousAux;  ►NRooStats@(#)root/roostats:$Id$ Author: George Lewis, Kyle Cranmer ;  ►NHistFactory;  NConstraint;  CAsimovTODO Here, we are missing some documentation ;  CChannelThis class encapsulates all information for the statistical interpretation of one experiment ;  CConfigParserTODO Add documentation ;  CData;  ►CEstimateSummary;  CNormFactor;  CShapeSys;  CFlexibleInterpVar;  Chf_exc;  CHistFactoryNavigation;  CHistFactorySimultaneousRooSimultaneous facilitates simultaneous fitting of multiple PDFs to subsets of a given dataset ;  CHistoFactorConfiguration for an unconstrained, coherent shape variation of affected samples ;  CHistoSysConfiguration for a constrained, coherent shape variation of affected samples ;  CHistoToWorkspaceFactory;  CHistoToWorkspaceFactoryFast;  CHistRefInternal class wrapping an histogram and managing its content ;  CLinInterpVarRo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/namespaces.html:7529,alive,alive,7529,doc/v616/namespaces.html,https://root.cern,https://root.cern/doc/v616/namespaces.html,1,['alive'],['alive']
Availability,"ltiErrors.cxx. ◆ CopyPoints(). Bool_t TGraphMultiErrors::CopyPoints ; (; Double_t ** ; arrays, . Int_t ; ibegin, . Int_t ; iend, . Int_t ; obegin . ). overrideprotectedvirtual . Copy errors from fE*** to arrays[***] or to f*** Copy points. ; Reimplemented from TGraph.; Definition at line 777 of file TGraphMultiErrors.cxx. ◆ CtorAllocate(). Bool_t TGraphMultiErrors::CtorAllocate ; (; ). protected . Should be called from ctors after fNpoints has been set Note: This function should be called only from the constructor since it does not delete previously existing arrays. ; Definition at line 718 of file TGraphMultiErrors.cxx. ◆ DeclFileName(). static const char * TGraphMultiErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 213 of file TGraphMultiErrors.h. ◆ DeleteYError(). void TGraphMultiErrors::DeleteYError ; (; Int_t ; e). virtual . Deletes the y error with the index e. ; Note that you must keep at least 1 error ; Definition at line 1422 of file TGraphMultiErrors.cxx. ◆ Divide(). void TGraphMultiErrors::Divide ; (; const TH1 * ; pass, . const TH1 * ; total, . Option_t * ; opt = ""cp"" . ). This function was adapted from the TGraphAsymmErrors class. ; See TGraphAsymmErrors::Divide for the documentation; Only the first error dimension is affected. ; Definition at line 1001 of file TGraphMultiErrors.cxx. ◆ DoMerge(). Bool_t TGraphMultiErrors::DoMerge ; (; const TGraph * ; tg). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with multiple asymmetric errors. ; Reimplemented from TGraph.; Definition at line 838 of file TGraphMultiErrors.cxx. ◆ FillZero(). void TGraphMultiErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end]. ; Reimplemented from TGraph.; Definition at line 802 of file TGraphMultiErrors.cxx. ◆ GetAttFill(). TAttFill * TGraphMultiError",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:60456,error,error,60456,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['error']
Availability,"ltiErrors::SetAttLinevirtual void SetAttLine(Int_t e, TAttLine *tal)Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2029; TGraphMultiErrors::fEyHSumDouble_t * fEyHSum! Array of summed Y high errors for fittingDefinition TGraphMultiErrors.h:40; TGraphMultiErrors::GetEYlowDouble_t * GetEYlow() const overrideGet all low errors on y coordinates as an array summed according to fSumErrorsMode.Definition TGraphMultiErrors.cxx:1577; TGraphMultiErrors::DeleteYErrorvirtual void DeleteYError(Int_t e)Deletes the y error with the index e.Definition TGraphMultiErrors.cxx:1422; TGraphMultiErrors::Applyvoid Apply(TF1 *f) overrideApply a function to all data points .Definition TGraphMultiErrors.cxx:951; TGraphMultiErrors::SetFillStylevirtual void SetFillStyle(Int_t e, Style_t fstyle)Set Fill Style of error e (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2062; TGraphMultiErrors::SetEYhighvirtual void SetEYhigh(Int_t e, Int_t np, const Double_t *eyH)Set error e eyH values.Definition TGraphMultiErrors.cxx:1995; TGraphMultiErrors::SwapPointsvoid SwapPoints(Int_t pos1, Int_t pos2) overrideSwap points.Definition TGraphMultiErrors.cxx:869; TGraphMultiErrors::SetAttFillvirtual void SetAttFill(Int_t e, TAttFill *taf)Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2018; TGraphMultiErrors::SetEYlowvirtual void SetEYlow(Int_t e, Int_t np, const Double_t *eyL)Set error e eyL values.Definition TGraphMultiErrors.cxx:1982; TGraphMultiErrors::fAttFillstd::vector< TAttFill > fAttFillThe AttFill attributes of the different errors.Definition TGraphMultiErrors.h:41; TGraphMultiErrors::UpdateArraysvoid UpdateArrays(const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) overrideUpdate the fX, fY, fExL, fExH, fEyL and fEyH arrays with the sorted values.Definition TGraphMultiErrors.cxx:885; TGraphMultiErrors::Ctor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:84961,error,error,84961,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,1,['error'],['error']
Availability,"ltiRootFinder.cxx:224; ROOT::Math::GSLMultiRootFinder::ETypeETypeenumeration specifying the types of GSL multi root finders which do not require the derivativesDefinition GSLMultiRootFinder.h:115; ROOT::Math::GSLMultiRootFinder::kDNewton@ kDNewtonDefinition GSLMultiRootFinder.h:118; ROOT::Math::GSLMultiRootFinder::kHybrid@ kHybridDefinition GSLMultiRootFinder.h:117; ROOT::Math::GSLMultiRootFinder::kBroyden@ kBroydenDefinition GSLMultiRootFinder.h:119; ROOT::Math::GSLMultiRootFinder::kHybridS@ kHybridSDefinition GSLMultiRootFinder.h:116; ROOT::Math::GSLMultiRootFinder::SetPrintLevelvoid SetPrintLevel(int level)Definition GSLMultiRootFinder.h:246; ROOT::Math::GSLMultiRootFinder::GetTypestd::pair< bool, int > GetType(const char *name)Definition GSLMultiRootFinder.cxx:207; ROOT::Math::GSLMultiRootFinder::SetFunctionListbool SetFunctionList(FuncIterator begin, FuncIterator end)Definition GSLMultiRootFinder.h:170; ROOT::Math::GSLMultiRootFinder::Nameconst char * Name() constReturn the algorithm name used for solving Note the name is available only after having called solved...Definition GSLMultiRootFinder.cxx:147; ROOT::Math::GSLMultiRootFinder::fStatusint fStatusDefinition GSLMultiRootFinder.h:277; ROOT::Math::GSLMultiRootFinder::PrintStatevoid PrintState(std::ostream &os=std::cout)print iteration stateDefinition GSLMultiRootFinder.cxx:321; ROOT::Math::GSLMultiRootFinder::PrintLevelint PrintLevel() constreturn the print levelDefinition GSLMultiRootFinder.h:249; ROOT::Math::GSLMultiRootFinder::ClearFunctionsvoid ClearFunctions()Definition GSLMultiRootFinder.cxx:118; ROOT::Math::GSLMultiRootFinder::fSolverGSLMultiRootBaseSolver * fSolverDefinition GSLMultiRootFinder.h:286; ROOT::Math::GSLMultiRootFinder::Statusint Status() constReturn the status of last root finding.Definition GSLMultiRootFinder.h:233; ROOT::Math::GSLMultiRootFinder::fIterint fIterDefinition GSLMultiRootFinder.h:276; ROOT::Math::GSLMultiRootFinder::EDerivTypeEDerivTypeenumeration specifying the types of GS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:14744,avail,available,14744,doc/master/GSLMultiRootFinder_8h_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html,1,['avail'],['available']
Availability,"ltiRootFinder.h:287; ROOT::Math::GSLMultiRootFinder::Solvebool Solve(const double *x, int maxIter=0, double absTol=0, double relTol=0)Find the root starting from the point X; Use the number of iteration and tolerance if given otherwise...Definition GSLMultiRootFinder.cxx:224; ROOT::Math::GSLMultiRootFinder::ETypeETypeenumeration specifying the types of GSL multi root finders which do not require the derivativesDefinition GSLMultiRootFinder.h:115; ROOT::Math::GSLMultiRootFinder::kDNewton@ kDNewtonDefinition GSLMultiRootFinder.h:118; ROOT::Math::GSLMultiRootFinder::kHybrid@ kHybridDefinition GSLMultiRootFinder.h:117; ROOT::Math::GSLMultiRootFinder::kBroyden@ kBroydenDefinition GSLMultiRootFinder.h:119; ROOT::Math::GSLMultiRootFinder::kHybridS@ kHybridSDefinition GSLMultiRootFinder.h:116; ROOT::Math::GSLMultiRootFinder::GetTypestd::pair< bool, int > GetType(const char *name)Definition GSLMultiRootFinder.cxx:207; ROOT::Math::GSLMultiRootFinder::Nameconst char * Name() constReturn the algorithm name used for solving Note the name is available only after having called solved...Definition GSLMultiRootFinder.cxx:147; ROOT::Math::GSLMultiRootFinder::fStatusint fStatusDefinition GSLMultiRootFinder.h:277; ROOT::Math::GSLMultiRootFinder::PrintStatevoid PrintState(std::ostream &os=std::cout)print iteration stateDefinition GSLMultiRootFinder.cxx:321; ROOT::Math::GSLMultiRootFinder::ClearFunctionsvoid ClearFunctions()Definition GSLMultiRootFinder.cxx:118; ROOT::Math::GSLMultiRootFinder::fSolverGSLMultiRootBaseSolver * fSolverDefinition GSLMultiRootFinder.h:286; ROOT::Math::GSLMultiRootFinder::fIterint fIterDefinition GSLMultiRootFinder.h:276; ROOT::Math::GSLMultiRootFinder::EDerivTypeEDerivTypeenumeration specifying the types of GSL multi root finders requiring the derivativesDefinition GSLMultiRootFinder.h:104; ROOT::Math::GSLMultiRootFinder::kGNewton@ kGNewtonDefinition GSLMultiRootFinder.h:108; ROOT::Math::GSLMultiRootFinder::kHybridSJ@ kHybridSJDefinition GSLMultiRootFinder.h:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:16812,avail,available,16812,doc/master/GSLMultiRootFinder_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html,1,['avail'],['available']
Availability,"ltiRootFinder::fPrintLevelint fPrintLevelDefinition GSLMultiRootFinder.h:278; ROOT::Math::GSLMultiRootFinder::GSLMultiRootFinderGSLMultiRootFinder(GSLMultiRootFinder &&)=delete; ROOT::Math::GSLMultiRootFinder::~GSLMultiRootFindervirtual ~GSLMultiRootFinder()destructorDefinition GSLMultiRootFinder.cxx:95; ROOT::Math::GSLMultiRootFinder::FValconst double * FVal() constreturn the function values f(X) solving the system i.e.Definition GSLMultiRootFinder.cxx:143; ROOT::Math::GSLMultiRootFinder::SetTypevoid SetType(EDerivType type)set the type of algorithm using derivativesDefinition GSLMultiRootFinder.h:153; ROOT::Math::GSLMultiRootFinder::SetTypevoid SetType(EType type)set the type for an algorithm without derivativesDefinition GSLMultiRootFinder.h:148; ROOT::Math::GSLMultiRootFinder::fFunctionsstd::vector< ROOT::Math::IMultiGenFunction * > fFunctionsDefinition GSLMultiRootFinder.h:287; ROOT::Math::GSLMultiRootFinder::Solvebool Solve(const double *x, int maxIter=0, double absTol=0, double relTol=0)Find the root starting from the point X; Use the number of iteration and tolerance if given otherwise...Definition GSLMultiRootFinder.cxx:224; ROOT::Math::GSLMultiRootFinder::ETypeETypeenumeration specifying the types of GSL multi root finders which do not require the derivativesDefinition GSLMultiRootFinder.h:115; ROOT::Math::GSLMultiRootFinder::kDNewton@ kDNewtonDefinition GSLMultiRootFinder.h:118; ROOT::Math::GSLMultiRootFinder::kHybrid@ kHybridDefinition GSLMultiRootFinder.h:117; ROOT::Math::GSLMultiRootFinder::kBroyden@ kBroydenDefinition GSLMultiRootFinder.h:119; ROOT::Math::GSLMultiRootFinder::kHybridS@ kHybridSDefinition GSLMultiRootFinder.h:116; ROOT::Math::GSLMultiRootFinder::SetPrintLevelvoid SetPrintLevel(int level)Definition GSLMultiRootFinder.h:246; ROOT::Math::GSLMultiRootFinder::GetTypestd::pair< bool, int > GetType(const char *name)Definition GSLMultiRootFinder.cxx:207; ROOT::Math::GSLMultiRootFinder::SetFunctionListbool SetFunctionList(FuncIterator begin, Fun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:13654,toler,tolerance,13654,doc/master/GSLMultiRootFinder_8h_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html,1,['toler'],['tolerance']
Availability,"lticlass(const TString& methodTag, Double_t aux = 0); evaluates MVA for given set of input variables. const std::vector< Float_t >& EvaluateMulticlass(TMVA::MethodBase* method, Double_t aux = 0); evaluates the multiclass MVA. Float_t EvaluateMulticlass(UInt_t clsNumber, const TString& methodTag, Double_t aux = 0); evaluates the multiclass MVA. TMVA::IMethod* FindMVA(const TString& methodTag); return pointer to method with tag ""methodTag"". TMVA::MethodCuts* FindCutsMVA(const TString& methodTag); special function for Cuts to avoid dynamic_casts in ROOT macros,; which are not properly handled by CINT. Double_t GetProba(const TString& methodTag, Double_t ap_sig = 0.5, Double_t mvaVal = -9999999); evaluates probability of MVA for given set of input variables. Double_t GetRarity(const TString& methodTag, Double_t mvaVal = -9999999); evaluates the MVA's rarity. void DecodeVarNames( const std::string& varNames ); decodes ""name1:name2:..."" form. void DecodeVarNames(const TString& varNames); decodes ""name1:name2:..."" form. Double_t GetMVAError() const; returns error on MVA response for given event; NOTE: must be called AFTER ""EvaluateMVA(...)"" call !. { return fMvaEventError; }. Double_t GetMVAErrorLower() const; { return fMvaEventError; }. Double_t GetMVAErrorUpper() const; { return fMvaEventErrorUpper; }. const char* GetName() const; accessors. { return ""Reader""; }. Bool_t Verbose( void ); { return fVerbose; }. void SetVerbose(Bool_t v); { fVerbose = v; }. const DataSetInfo& DataInfo() const; { return fDataSetInfo; }. DataSetInfo& DataInfo(); { return fDataSetInfo; }. » Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag » Copyright (c) 2005-2011: *; » Last changed: root/tmva $Id: Reader.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__Reader.html:14635,error,error,14635,root/html532/TMVA__Reader.html,https://root.cern,https://root.cern/root/html532/TMVA__Reader.html,1,['error'],['error']
Availability,"ltiply sparse matrix and a non-sparse matrix ;  ; TMatrixDSparse * MultiplyMSparseMSparse (const TMatrixDSparse *a, const TMatrixDSparse *b) const;  multiply two sparse matrices ;  ; TMatrixDSparse * MultiplyMSparseMSparseTranspVector (const TMatrixDSparse *m1, const TMatrixDSparse *m2, const TMatrixTBase< Double_t > *v) const;  calculate a sparse matrix product M1*V*M2T where the diagonal matrix V is given by a vector ;  ; TMatrixDSparse * MultiplyMSparseTranspMSparse (const TMatrixDSparse *a, const TMatrixDSparse *b) const;  multiply a transposed Sparse matrix with another Sparse matrix ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TMatrixD * fAoutside;  Input: underflow/overflow bins. ;  ; TMap * fBgrErrScaleIn;  Input: background sources correlated error. ;  ; TMap * fBgrErrUncorrInSq;  Input: uncorr error squared from bgr sources. ;  ; TMap * fBgrIn;  Input: size of background sources. ;  ; TMatrixD * fDAinColRelSq;  Input: normalized column err.sq. (inp.matr.) ;  ; TMatrixDSparse * fDAinRelSq;  Input: normalized errors from input matrix. ;  ; TMap * fDeltaCorrAx;  Result: syst.shift from fSysIn on fAx. ;  ; TMap * fDeltaCorrX;  Result: syst.shift from fSysIn on fX. ;  ; TMatrixDSparse * fDeltaSysTau;  Result: systematic shift from tau. ;  ; Double_t fDtau;  Input: error on tau. ;  ; TMatrixDSparse * fEmatUncorrAx;  Result: syst.error from fDA2 on fAx. ;  ; TMatrixDSparse * fEmatUncorrX;  Result: syst.error from fDA2 on fX. ;  ; TMap * fSysIn;  Input: correlated errors. ;  ; TMatrixDSparse * fVyyData;  Input: error on fY prior to bgr subtraction. ;  ; TMatrixD * fYData;  Input: fY prior to bgr subtraction. ;  ;  Protected Attributes inherited from TUnfold; TMatrixDSparse * fA;  response matrix A ;  ; Double_t fBiasScale;  scale factor for the bias ;  ; EConstraint fConstra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:27961,error,error,27961,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['error'],['error']
Availability,"ltiply. The function return kFALSE if the Multiply operation failed. Bool_t Multiply(const TH1* h1); Multiply this histogram by h1. this = this*h1. If errors of this are available (TH1::Sumw2), errors are recalculated.; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; if not already set. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Multiply. The function return kFALSE if the Multiply operation failed. Bool_t Multiply(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """"); Replace contents of this histogram by multiplication of h1 by h2. this = (c1*h1)*(c2*h2). If errors of this are available (TH1::Sumw2), errors are recalculated.; Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; if not already set. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Multiply. The function return kFALSE if the Multiply operation failed. void Paint(Option_t* option = """"); Control routine to paint any kind of histograms. This function is automatically called by TCanvas::Update.; (see TH1::Draw for the list of options). TH1 * Rebin(Int_t ngroup = 2, const char* newname = """", const Double_t* xbins = 0); Rebin this histogram. -case 1 xbins=0; If newname is blank (default), the current histogram is modified and; a pointer to it is returned. If newname is not blank, the current histogram is not modified, and a; new histogram is returned which is a Clone of the current histogram; with its name set to newname. The parameter ngroup indicates how many bins of this have to be merged; into one bin of the result. If the original histogram has errors stored (via Sumw2), the resulting; histograms has new errors correctly calculated. ex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:102053,error,errors,102053,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,2,['error'],['errors']
Availability,"ltiplyMSparseTranspMSparse (const TMatrixDSparse *a, const TMatrixDSparse *b) const;  multiply a transposed Sparse matrix with another Sparse matrix ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; const TUnfoldBinning * fConstInputBins;  binning scheme for the input (detector level) ;  ; const TUnfoldBinning * fConstOutputBins;  binning scheme for the output (truth level) ;  ; TUnfoldBinning * fOwnedInputBins;  pointer to input binning scheme if owned by this class ;  ; TUnfoldBinning * fOwnedOutputBins;  pointer to output binning scheme if owned by this class ;  ; TUnfoldBinning * fRegularisationConditions;  binning scheme for the regularisation conditions ;  ;  Protected Attributes inherited from TUnfoldSys; TMatrixD * fAoutside;  Input: underflow/overflow bins. ;  ; TMap * fBgrErrScaleIn;  Input: background sources correlated error. ;  ; TMap * fBgrErrUncorrInSq;  Input: uncorr error squared from bgr sources. ;  ; TMap * fBgrIn;  Input: size of background sources. ;  ; TMatrixD * fDAinColRelSq;  Input: normalized column err.sq. (inp.matr.) ;  ; TMatrixDSparse * fDAinRelSq;  Input: normalized errors from input matrix. ;  ; TMap * fDeltaCorrAx;  Result: syst.shift from fSysIn on fAx. ;  ; TMap * fDeltaCorrX;  Result: syst.shift from fSysIn on fX. ;  ; TMatrixDSparse * fDeltaSysTau;  Result: systematic shift from tau. ;  ; Double_t fDtau;  Input: error on tau. ;  ; TMatrixDSparse * fEmatUncorrAx;  Result: syst.error from fDA2 on fAx. ;  ; TMatrixDSparse * fEmatUncorrX;  Result: syst.error from fDA2 on fX. ;  ; TMap * fSysIn;  Input: correlated errors. ;  ; TMatrixDSparse * fVyyData;  Input: error on fY prior to bgr subtraction. ;  ; TMatrixD * fYData;  Input: fY prior to bgr subtraction. ;  ;  Protected Attributes inherited from TUnfold; TMatrixDSparse * fA;  response matrix A ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldDensity.html:37580,error,error,37580,doc/master/classTUnfoldDensity.html,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html,1,['error'],['error']
Availability,"ltithreading \n \; 1516 [recommended: True] \n \; 1517 Multithreading can be turned on. The minibatches are distributed to the available \n \; 1518 cores. The algorithm is lock-free (\""Hogwild!\""-style) for each cycle. \n \; 1519 \n \; 1520 Options: \n \; 1521 \""Layout\"": \n \; 1522 - example: \""TANH|(N+30)*2,TANH|(N+30),LINEAR\"" \n \; 1523 - meaning: \n \; 1524 . two hidden layers (separated by \"",\"") \n \; 1525 . the activation function is TANH (other options: RELU, SOFTSIGN, LINEAR) \n \; 1526 . the activation function for the output layer is LINEAR \n \; 1527 . the first hidden layer has (N+30)*2 nodes where N is the number of input neurons \n \; 1528 . the second hidden layer has N+30 nodes, where N is the number of input neurons \n \; 1529 . the number of nodes in the output layer is determined by the number of output nodes \n \; 1530 and can therefore not be chosen freely. \n \; 1531 \n \; 1532 \""ErrorStrategy\"": \n \; 1533 - SUMOFSQUARES \n \; 1534 The error of the neural net is determined by a sum-of-squares error function \n \; 1535 For regression, this is the only possible choice. \n \; 1536 - CROSSENTROPY \n \; 1537 The error of the neural net is determined by a cross entropy function. The \n \; 1538 output values are automatically (internally) transformed into probabilities \n \; 1539 using a sigmoid function. \n \; 1540 For signal/background classification this is the default choice. \n \; 1541 For multiclass using cross entropy more than one or no output classes \n \; 1542 can be equally true or false (e.g. Event 0: A and B are true, Event 1: \n \; 1543 A and C is true, Event 2: C is true, ...) \n \; 1544 - MUTUALEXCLUSIVE \n \; 1545 In multiclass settings, exactly one of the output classes can be true (e.g. either A or B or C) \n \; 1546 \n \; 1547 \""WeightInitialization\"" \n \; 1548 - XAVIER \n \; 1549 [recommended] \n \; 1550 \""Xavier Glorot & Yoshua Bengio\""-style of initializing the weights. The weights are chosen randomly \n \; 1551 such that th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:56358,error,error,56358,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,2,['error'],['error']
Availability,"lts on 1K weighted events with a summed weight of 43K""); r_chi2_wgt.Print(); ; c = ROOT.TCanvas(""rf403_weightedevts"", ""rf403_weightedevts"", 600, 600); ROOT.gPad.SetLeftMargin(0.15); frame.GetYaxis().SetTitleOffset(1.8); frame.Draw(); ; c.SaveAs(""rf403_weightedevts.png""); RooDataSet::pxData[x,w] = 1000 entries; RooDataSet::pxData[x,weight:w] = 1000 entries (43238.9 weighted); [#1] INFO:Fitting -- RooAbsPdf::fitTo(p2_over_p2_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#0] WARNING:InputArguments -- RooAbsPdf::fitTo(p2): WARNING: a likelihood fit is requested of what appears to be weighted data.; While the estimated values of the parameters will always be calculated taking the weights into account,; there are multiple ways to estimate the errors of the parameters. You are advised to make an; explicit choice for the error calculation:; - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix; (error will be proportional to the number of events in MC).; - Or provide SumW2Error(false), to return errors from original HESSE error matrix; (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).; - Or provide AsymptoticError(true), to use the asymptotically correct expression; (for details see https://arxiv.org/abs/1911.01303).""; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_p2_over_p2_Int[x]_pxData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(p2_over_p2_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_p2_over_p2_Int[x]_pxData) Summation contai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf403__weightedevts_8py.html:6074,error,error,6074,doc/master/rf403__weightedevts_8py.html,https://root.cern,https://root.cern/doc/master/rf403__weightedevts_8py.html,3,['error'],['error']
Availability,"ltype(opPtr);  Internal class used by TF1 to get the right operator() signature from a Functor with several ones. ;  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::*opPtr)(T *, double *)) -> decltype(opPtr);  ; static TVersionCheck gVersionCheck (ROOT_VERSION_CODE);  ; template<typename > ; constexpr bool hasBeginEnd (...);  ; template<typename T > ; constexpr auto hasBeginEnd (int) -> decltype(std::begin(std::declval< T >()), std::end(std::declval< T >()), true);  ; Bool_t HasConsistentHashMember (const char *clName);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; Bool_t HasConsistentHashMember (TClass &clRef);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; static Bool_t & IsImplicitMTEnabledImpl ();  Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ;  ; Bool_t IsParBranchProcessingEnabled ();  Returns true if parallel branch processing is enabled. ;  ; int LogicalCPUBandwidthControl ();  Returns the available number of logical cores. ;  ; void MinimalErrorHandler (Int_t level, Bool_t abort_bool, const char *location, const char *msg);  A very simple error handler that is usually replaced by the TROOT default error handler. ;  ; void NotifyDirected (Detail::TBranchProxy *x);  ; std::ostream & operator<< (std::ostream &os, const RConcurrentHashColl::HashValue &h);  ; bool operator== (const RConcurrentHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs);  ; template<typename T > ; static T ParallelReduceHelper (const std::vector< T > &objs, const std::function< T(T a, T b)> &redfunc);  A helper function to implement the TThreadExecutor::ParallelReduce methods. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, const char *classname);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, TClass *cl);  Add the ""pragma C++ clas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Internal.html:15623,avail,available,15623,doc/master/namespaceROOT_1_1Internal.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html,2,['avail'],['available']
Availability,"luate() const =0Evaluate this PDF / function / constant. Needs to be overridden by all derived classes.; RooAbsReal::getTitleTString getTitle(bool appendUnit=false) constReturn this variable's title string.Definition RooAbsReal.cxx:285; RooAbsReal::logEvalErrorvoid logEvalError(const char *message, const char *serverValueString=nullptr) constLog evaluation error message.Definition RooAbsReal.cxx:3464; RooAbsReal::analyticalIntegralWNvirtual double analyticalIntegralWN(Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:380; RooAbsReal::getUnitconst Text_t * getUnit() constDefinition RooAbsReal.h:143; RooAbsReal::getIntegratorConfigconst RooNumIntConfig * getIntegratorConfig() constReturn the numeric integration configuration used for this object.Definition RooAbsReal.cxx:3309; RooAbsReal::printEvalErrorsstatic void printEvalErrors(std::ostream &os=std::cout, Int_t maxPerNode=10000000)Print all outstanding logged evaluation error on the given ostream.Definition RooAbsReal.cxx:3582; RooAbsReal::createIntRIRooFit::OwningPtr< RooAbsReal > createIntRI(const RooArgSet &iset, const RooArgSet &nset={})Utility function for createRunningIntegral.Definition RooAbsReal.cxx:3827; RooAbsReal::enableOffsettingvirtual void enableOffsetting(bool)Definition RooAbsReal.cxx:4484; RooAbsReal::clearEvalErrorLogstatic void clearEvalErrorLog()Clear the stack of evaluation error messages.Definition RooAbsReal.cxx:3542; RooAbsReal::createIntObjRooFit::OwningPtr< RooAbsReal > createIntObj(const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) constInternal utility function for createIntegral() that creates the actual integral object.Definition RooAbsReal.cxx:590; RooAbsReal::functorRooFunctor * functor(const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) constReturn a RooFunctor obje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:231765,error,error,231765,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['error'],['error']
Availability,"luated for data; vector<double>fTestStat_sbvector of results for S+B toy-MC. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HybridResult( const char *name); HybridResult default constructor (with name ). HybridResult(const char* name, vector<double>& testStat_sb_vals, vector<double>& testStat_b_vals, bool sumLargerValues = true); HybridResult constructor (with name, title and vectors of S+B and B values). ~HybridResult(); HybridResult destructor. void SetDataTestStatistics(double testStat_data_val); set the value of the test statistics on data. double NullPValue() const; return 1-CL_b : the B p-value. double AlternatePValue() const; return CL_s+b : the S+B p-value. Double_t CLbError() const; Returns an estimate of the error on CLb assuming a binomial error on; CLb:. Double_t CLsplusbError() const; Returns an estimate of the error on CLsplusb assuming a binomial; error on CLsplusb:. Double_t CLsError() const; Returns an estimate of the error on CLs through combination of the; errors on CLb and CLsplusb:. void Add(RooStats::HybridResult* other); add additional toy-MC experiments to the current results; use the data test statistics of the added object if none is already present (otherwise, ignore the new one). HybridPlot* GetPlot(const char* name, const char* title, int n_bins); prepare a plot showing a result and return a pointer to a HybridPlot object; the needed arguments are: an object name, a title and the number of bins in the plot. void PrintMore(const char* options); Print out some information about the results. explicit HybridResult(const char *name = 0); Default constructor. std::vector<double> GetTestStat_sb(); Get test statistics values for the sb model. {return fTestStat_sb;}. std::vector<double> GetTestStat_b(); Get test statistics values for the b model. {return fTestStat_b;}. double GetTestStat_data(); Get test statistics value for data. { return fTestStat_data;}. » Last changed: root/roostats:$Id: HybridResul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HybridResult.html:8889,error,error,8889,root/html526/RooStats__HybridResult.html,https://root.cern,https://root.cern/root/html526/RooStats__HybridResult.html,2,['error'],"['error', 'errors']"
Availability,"ludes; Libraries. Function documentation; TClassDocOutput(THtml& html, TClass* cl, TList* typedefs); Create an object given the invoking THtml object, and the TClass; object that we will generate output for. ~TClassDocOutput(); Destructor, deletes fParser. void Class2Html(Bool_t force = kFALSE); Create HTML files for a single class. void ListFunctions(ostream& classFile); Write the list of functions. void ListDataMembers(ostream& classFile); Write the list of data members and enums. Bool_t ClassDotCharts(ostream& out); This function builds the class charts for one class in GraphViz/Dot format,; i.e. the inheritance diagram, the include dependencies, and the library; dependency. Input: out - output file stream. void ClassHtmlTree(ostream& out, TClass* classPtr, TClassDocOutput::ETraverse dir = kBoth, int depth = 1); This function builds the class tree for one class in HTML; (inherited and succeeding classes, called recursively). Input: out - output file stream; classPtr - pointer to the class; dir - direction to traverse tree: up, down or both. void ClassTree(TVirtualPad* canvas, Bool_t force = kFALSE); It makes a graphical class tree. Input: psCanvas - pointer to the current canvas; classPtr - pointer to the class. Bool_t CreateDotClassChartInh(const char* filename); Build the class tree for one class in GraphViz/Dot format. Input: filename - output dot file incl. path. Bool_t CreateDotClassChartInhMem(const char* filename); Build the class tree of inherited members for one class in GraphViz/Dot format. Input: filename - output dot file incl. path. Bool_t CreateDotClassChartIncl(const char* filename); Build the include dependency graph for one class in; GraphViz/Dot format. Input: filename - output dot file incl. path. Bool_t CreateDotClassChartLib(const char* filename); Build the library dependency graph for one class in; GraphViz/Dot format. Input: filename - output dot file incl. path. void CreateClassHierarchy(ostream& out, const char* docFileName); Create the h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClassDocOutput.html:11530,down,down,11530,root/html526/TClassDocOutput.html,https://root.cern,https://root.cern/root/html526/TClassDocOutput.html,7,['down'],['down']
Availability,"lue (Double_t value);  force the value, typically for input and bias neurons ;  ; Double_t GetActivationValue () const;  ; Double_t GetDEDw () const;  ; Double_t GetDelta () const;  ; Double_t GetValue () const;  ; void InitSynapseDeltas ();  initialize the error fields of all pre-neurons this method should only be called in batch mode ;  ; virtual TClass * IsA () const;  ; Bool_t IsInputNeuron () const;  ; Bool_t IsOutputNeuron () const;  ; Int_t NumPostLinks () const;  ; Int_t NumPreLinks () const;  ; TSynapse * PostLinkAt (Int_t index) const;  ; TSynapse * PreLinkAt (Int_t index) const;  ; virtual void Print (Option_t *="""") const;  This method must be overridden when a class wants to print itself. ;  ; void PrintActivationEqn ();  print activation equation, for debugging ;  ; void PrintPostLinks () const;  ; void PrintPreLinks () const;  ; void SetActivationEqn (TActivation *activation);  set activation equation ;  ; void SetBiasNeuron ();  ; void SetDEDw (Double_t DEDw);  ; void SetError (Double_t error);  set error, this should only be done for an output neuron ;  ; void SetInputCalculator (TNeuronInput *calculator);  set input calculator ;  ; void SetInputNeuron ();  ; void SetOutputNeuron ();  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateSynapsesBatch ();  update and adjust the pre-synapses for each neuron (input neuron has no pre-synapse) this method should only be called in batch mode ;  ; void UpdateSynapsesSequential ();  update the pre-synapses for each neuron (input neuron has no pre-synapse) this method should only be called in sequential mode ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TNeuron.html:2110,error,error,2110,doc/master/classTMVA_1_1TNeuron.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TNeuron.html,2,['error'],['error']
Availability,"lue (not '5'); >>> ROOT.gDebug = 3 # changes ROOT module reference; >>> gROOT.ProcessLine( 'cout << gDebug << endl;' ); 3 # ROOT global properly changed; >>>; The above is another good reason to prefer ‘import ROOT’ over ‘from ROOT import *’.; 19.1.5.4 Access to Python; The access to Python from Cling goes through the TPython class, or directly if a Python object or class has crossed the border. The TPython class, which looks approximately like this:; class TPython {. public:; // load a Python script as if it were a macro; static void LoadMacro(const char* name);. // execute a Python statement (e.g. ""import ROOT""); static void Exec(const char* cmd);. // evaluate a Python expression (e.g. ""1+1""); static const TPyReturn& Eval(const char* expr);. // bind a ROOT object with, at the Python side, the name ""label""; static bool Bind(TObject* obj,const char* label);. // enter an interactive Python session (exit with ^D); static void Prompt();; };; LoadMacro(const char* name) - the argument is a name of a Python file that is to be executed ('execfile'), after which any new classes are automatically made available to Cling. Since it is non-selective, use with care.; ExecScript(const char* name,int argc=0,const char** argv=0) - the argument is a name of a python file that is to be executed (‘execfile’) in a private namespace to minimize side-effects. Optionally, you can add CLI-style arguments which are handed to the script through ‘sys.argv’ in the normal way.; Exec(const char* cmd)- the argument is a string of Python code that is executed as a statement. There is no return value, but an error message will be printed if there are problems such as syntax errors.; Eval(const char* expr)- the argument is a string of Python code that is evaluated as an expression. The result of the expression is returned, if it is either a builtin type (int, long, float, double, and const char* are supported), a Python type that can cross, or a ROOT type. If a ROOT type is returned, an explicit ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1056558,avail,available,1056558,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avail'],['available']
Availability,"lue *point, Index inode, Value &min, Value &max, Int_t type=2);  Find the minimal and maximal distance from a given point to a given node. ;  ; void FindBNodeA (Value *point, Value *delta, Int_t &inode);  find the smallest node covering the full range - start ;  ; void FindInRange (Value *point, Value range, std::vector< Index > &res);  Find all points in the sphere of a given radius ""range"" around the given point 1st argument - the point 2nd argument - radius of the shere 3rd argument - a vector, in which the results will be returned. ;  ; void FindNearestNeighbors (const Value *point, Int_t k, Index *ind, Value *dist);  Find kNN nearest neighbors to the point in the first argument Returns 1 on success, 0 on failure Arrays ind and dist are provided by the user and are assumed to be at least kNN elements long. ;  ; Index FindNode (const Value *point) const;  returns the index of the terminal node to which point belongs (index in the fAxis, fValue, etc arrays) returns -1 in case of failure ;  ; void FindPoint (Value *point, Index &index, Int_t &iter);  find the index of point works only if we keep fData pointers ;  ; Value * GetBoundaries ();  Get the boundaries. ;  ; Value * GetBoundariesExact ();  Get the boundaries. ;  ; Value * GetBoundary (const Int_t node);  Get a boundary. ;  ; Value * GetBoundaryExact (const Int_t node);  Get a boundary. ;  ; Index GetBucketSize ();  ; Int_t GetCrossNode ();  smallest terminal row ;  ; Index * GetIndPoints ();  offset in fIndPoints ;  ; Int_t GetLeft (Int_t inode) const;  ; Index GetNDim ();  ; Int_t GetNNodes () const;  ; UChar_t GetNodeAxis (Int_t id) const;  ; void GetNodePointsIndexes (Int_t node, Int_t &first1, Int_t &last1, Int_t &first2, Int_t &last2) const;  Return the indices of points in that node Indices are returned as the first and last value of the part of indices array, that belong to this node Sometimes points are in 2 intervals, then the first and last value for the second one are returned in third and fourth ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKDTree.html:13968,failure,failure,13968,doc/master/classTKDTree.html,https://root.cern,https://root.cern/doc/master/classTKDTree.html,1,['failure'],['failure']
Availability,"lue <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:9317,error,errors,9317,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,3,['error'],['errors']
Availability,"lue final : public ROOT::Internal::TTreeReaderValueBase {; 159 public:; 160 TTreeReaderOpaqueValue(TTreeReader &tr, const char *branchname); 161 : TTreeReaderValueBase(&tr, branchname, /*dict*/ nullptr, /*opaqueRead*/ true); 162 {; 163 }; 164 ; 165 protected:; 166 const char *GetDerivedTypeName() const { return """"; }; 167 };; 168 ; 169} // namespace Internal; 170} // namespace ROOT; 171 ; 172 ; 173template <typename T>; 174class R__CLING_PTRCHECK(off) TTreeReaderValue final: public ROOT::Internal::TTreeReaderValueBase {; 175// R__CLING_PTRCHECK is disabled because pointer / types are checked by CreateProxy().; 176 ; 177public:; 178 using NonConstT_t = typename std::remove_const<T>::type;; 179 TTreeReaderValue() = delete;; 180 TTreeReaderValue(TTreeReader& tr, const char* branchname):; 181 TTreeReaderValueBase(&tr, branchname,; 182 TDictionary::GetDictionary(typeid(NonConstT_t))) {}; 183 ; 184 /// Return a pointer to the value of the current entry.; 185 /// Return a nullptr and print an error if no entry has been loaded yet.; 186 /// The returned address is guaranteed to stay constant while a given TTree is being read from a given file,; 187 /// unless the branch addresses are manipulated directly (e.g. through TTree::SetBranchAddress()).; 188 /// The address might also change when the underlying TTree/TFile is switched, e.g. when a TChain switches files.; 189 T *Get(); 190 {; 191 if (!fProxy) {; 192 ErrorAboutMissingProxyIfNeeded();; 193 return nullptr;; 194 }; 195 void *address = GetAddress(); // Needed to figure out if it's a pointer; 196 return fProxy->IsaPointer() ? *(T **)address : (T *)address;; 197 }; 198 ; 199 /// Return a pointer to the value of the current entry.; 200 /// Equivalent to Get().; 201 T* operator->() { return Get(); }; 202 ; 203 /// Return a reference to the value of the current entry.; 204 /// Equivalent to dereferencing the pointer returned by Get(). Behavior is undefined if no entry has been loaded yet.; 205 /// Most likely a crash will occ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeReaderValue_8h_source.html:8192,error,error,8192,doc/master/TTreeReaderValue_8h_source.html,https://root.cern,https://root.cern/doc/master/TTreeReaderValue_8h_source.html,1,['error'],['error']
Availability,"lue for the parameter 0; Double_t err0 = r->Error(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file. The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; from the fitted function.; If the histogram is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Access to the fit status. The status of the fit can be obtained converting the TFitResultPtr to an integer; indipendently if the fit option ""S"" is used or not:; TFitResultPtr r = h=>Fit(myFunc,opt);; Int_t fitStatus = r;. The fitStatus is 0 if the fit is OK (i.e. no error occurred).; The value of the fit status code is negative in case of an error not connected with the; minimization procedure, for example when a wrong function is used.; Otherwise the return value is the one returned from the minimization procedure.; When TMinuit (default case) or Minuit2 are used as minimizer the status returned is :; fitStatus = migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult.; TMinuit will return 0 (for migrad, minos, hesse or improve) in case of success and 4 in; case of error (see the documentation of TMinuit::mnexcm). So for example, for an error; only in Minos but not in Migrad a fitStatus of 40 will be returned.; Minuit2 will return also 0 in case of success and different values in migrad, minos or; hesse depending on the error. See in this case the documentation of; Minuit2Minimizer::Minimize for the migradResult, Minuit2Minimizer::GetMinosError for the; minosResult and Minuit2Minimizer::Hesse for the hesseResult.; If other minimizers are u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraph.html:28843,error,error,28843,root/html528/TGraph.html,https://root.cern,https://root.cern/root/html528/TGraph.html,3,['error'],['error']
Availability,"lue is 32000 bytes and should be ok for most cases.; You can specify a larger value (eg 256000) if your Tree is not split; and each entry is large (Megabytes); A small value for bufsize is optimum if you intend to access; the entries in the Tree randomly and your Tree is in split mode. Use splitlevel < 0 instead of splitlevel=0 when the class; has a custom Streamer. Note: if the split level is set to the default (99), TTree::Branch will; not issue a warning if the class can not be split. TBranch* BronchExec(const char* name, const char* classname, void* addobj, Bool_t isptrptr, Int_t bufsize, Int_t splitlevel); Helper function implementing TTree::Bronch and TTree::Branch(const char *name, T &obj);. void Browse(TBrowser* ); Browse content of the TTree. Int_t BuildIndex(const char* majorname, const char* minorname = ""0""); Build a Tree Index (default is TTreeIndex).; See a description of the parameters and functionality in; TTreeIndex::TTreeIndex(). The return value is the number of entries in the Index (< 0 indicates failure). A TTreeIndex object pointed by fTreeIndex is created.; This object will be automatically deleted by the TTree destructor.; See also comments in TTree::SetTreeIndex(). TStreamerInfo* BuildStreamerInfo(TClass* cl, void* pointer = 0, Bool_t canOptimize = kTRUE); Build StreamerInfo for class cl.; pointer is an optional argument that may contain a pointer to an object of cl. TFile* ChangeFile(TFile* file); Called by TTree::Fill() when file has reached its maximum fgMaxTreeSize.; Create a new file. If the original file is named ""myfile.root"",; subsequent files are named ""myfile_1.root"", ""myfile_2.root"", etc. Returns a pointer to the new file. Currently, the automatic change of file is restricted; to the case where the tree is in the top level directory.; The file should not contain sub-directories. Before switching to a new file, the tree header is written; to the current file, then the current file is closed. To process the multiple files created by ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:52544,failure,failure,52544,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,2,['failure'],['failure']
Availability,"lue of ro parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -ax - gets the fitted value of ax parameter; -axErr - gets error value of ax parameter; -ay - gets the fitted value of ay parameter; -ayErr - gets error value of ay parameter. void GetTailParameters(Double_t& txy, Double_t& txyErr, Double_t& tx, Double_t& txErr, Double_t& ty, Double_t& tyErr, Double_t& bx, Double_t& bxErr, Double_t& by, Double_t& byErr, Double_t& sxy, Double_t& sxyErr, Double_t& sx, Double_t& sxErr, Double_t& sy, Double_t& syErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -txy - gets the fitted value of txy parameter; -txyErr - gets error value of txy parameter; -tx - gets the fitted value of tx parameter; -txErr - gets error value of tx parameter; -ty - gets the fitted value of ty parameter; -tyErr - gets error value of ty parameter; -bx - gets the fitted value of bx parameter; -bxErr - gets error value of bx parameter; -by - gets the fitted value of by parameter; -byErr - gets error value of by parameter; -sxy - gets the fitted value of sxy parameter; -sxyErr - gets error value of sxy parameter; -sx - gets the fitted value of sx parameter; -sxErr - gets error value of sx parameter; -sy - gets the fitted value of sy parameter; -syErr - gets error value of sy parameter. TSpectrum2Fit(const TSpectrum2Fit& ). Double_t GetChi() const; {return fChi;}. » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id: TSpectrum2Fit.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Fit.html:71656,error,errors,71656,root/html528/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Fit.html,9,['error'],"['error', 'errors']"
Availability,"lue of ro parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -ax - gets the fitted value of ax parameter; -axErr - gets error value of ax parameter; -ay - gets the fitted value of ay parameter; -ayErr - gets error value of ay parameter. void GetTailParameters(Double_t& txy, Double_t& txyErr, Double_t& tx, Double_t& txErr, Double_t& ty, Double_t& tyErr, Double_t& bx, Double_t& bxErr, Double_t& by, Double_t& byErr, Double_t& sxy, Double_t& sxyErr, Double_t& sx, Double_t& sxErr, Double_t& sy, Double_t& syErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -txy - gets the fitted value of txy parameter; -txyErr - gets error value of txy parameter; -tx - gets the fitted value of tx parameter; -txErr - gets error value of tx parameter; -ty - gets the fitted value of ty parameter; -tyErr - gets error value of ty parameter; -bx - gets the fitted value of bx parameter; -bxErr - gets error value of bx parameter; -by - gets the fitted value of by parameter; -byErr - gets error value of by parameter; -sxy - gets the fitted value of sxy parameter; -sxyErr - gets error value of sxy parameter; -sx - gets the fitted value of sx parameter; -sxErr - gets error value of sx parameter; -sy - gets the fitted value of sy parameter; -syErr - gets error value of sy parameter. TSpectrum2Fit(const TSpectrum2Fit& ). Double_t GetChi() const; {return fChi;}. » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id: TSpectrum2Fit.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSpectrum2Fit.html:71725,error,errors,71725,root/html530/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html530/TSpectrum2Fit.html,9,['error'],"['error', 'errors']"
Availability,"lue of ro parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -ax - gets the fitted value of ax parameter; -axErr - gets error value of ax parameter; -ay - gets the fitted value of ay parameter; -ayErr - gets error value of ay parameter. void GetTailParameters(Double_t& txy, Double_t& txyErr, Double_t& tx, Double_t& txErr, Double_t& ty, Double_t& tyErr, Double_t& bx, Double_t& bxErr, Double_t& by, Double_t& byErr, Double_t& sxy, Double_t& sxyErr, Double_t& sx, Double_t& sxErr, Double_t& sy, Double_t& syErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -txy - gets the fitted value of txy parameter; -txyErr - gets error value of txy parameter; -tx - gets the fitted value of tx parameter; -txErr - gets error value of tx parameter; -ty - gets the fitted value of ty parameter; -tyErr - gets error value of ty parameter; -bx - gets the fitted value of bx parameter; -bxErr - gets error value of bx parameter; -by - gets the fitted value of by parameter; -byErr - gets error value of by parameter; -sxy - gets the fitted value of sxy parameter; -sxyErr - gets error value of sxy parameter; -sx - gets the fitted value of sx parameter; -sxErr - gets error value of sx parameter; -sy - gets the fitted value of sy parameter; -syErr - gets error value of sy parameter. TSpectrum2Fit(const TSpectrum2Fit& ). Double_t GetChi() const; {return fChi;}. » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id: TSpectrum2Fit.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TSpectrum2Fit.html:71725,error,errors,71725,root/html532/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html532/TSpectrum2Fit.html,9,['error'],"['error', 'errors']"
Availability,"lue of the confidence level for the i^th entry in the results ;  ; TClass * IsA () const override;  ; bool IsOneSided () const;  query if one sided result ;  ; bool IsTwoSided () const;  query if two sided result ;  ; double LowerLimit () override;  lower and upper bound of the confidence interval (to get upper/lower limits, multiply the size( = 1-confidence level ) by 2 ;  ; double LowerLimitEstimatedError ();  rough estimation of the error on the computed bound of the confidence interval Estimate of lower limit error function evaluates only a rough error on the lower limit. ;  ; HypoTestInverterResult & operator= (const HypoTestInverterResult &other);  operator = ;  ; void SetCLsCleanupThreshold (double th);  set CLs threshold for exclusion cleanup function ;  ; void SetConfidenceLevel (double cl) override;  set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval) ;  ; void SetInterpolationOption (InterpolOption_t opt);  set the interpolation option, linear (kLinear ) or spline (kSpline) ;  ; virtual void SetTestSize (double size);  set the size of the test (rate of Type I error) (eg. 0.05 for a 95% Confidence Interval) ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; double UpperLimit () override;  return the interval upper limit ;  ; double UpperLimitEstimatedError ();  Estimate of lower limit error function evaluates only a rough error on the lower limit. ;  ; void UseCLs (bool on=true);  flag to switch between using CLsb (default) or CLs as confidence level ;  ;  Public Member Functions inherited from RooStats::SimpleInterval;  SimpleInterval (const char *name, const RooRealVar &var, double lower, double upper, double cl);  constructor from name, the Parameter of interest and lower/upper bound values ;  ;  SimpleInterval (const char *name=nullptr);  default constructor ;  ;  SimpleInterval (const SimpleInterval &other, const char *name); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html:6274,error,error,6274,doc/master/classRooStats_1_1HypoTestInverterResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html,1,['error'],['error']
Availability,"lue(const char *name, Int_t dflt) constReturns the integer value for a resource.Definition TEnv.cxx:491; TIterDefinition TCollection.h:235; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TNamed::SetNameTitlevirtual void SetNameTitle(const char *name, const char *title)Set all the TNamed parameters (name and title).Definition TNamed.cxx:154; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TStringBasic string class.Definition TString.h:139; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TStyleTStyle objects may be created to define special styles.Definition TStyle.h:29; TStyle::GetViolinScaledBool_t GetViolinScaled() constDefinition TStyle.h:293; TStyle::GetTimeOffsetDouble_t GetTimeOffset() constDefinition TStyle.h:269; TStyle::GetAxisMaxDigitsInt_t GetAxisMaxDigits() constMethod returns maximum number of digits permitted for the axis labels above which the notation with 1...Definition TStyle.cxx:1157; TStyle::GetOptLogyInt_t GetOptLogy() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStyle_8cxx_source.html:96834,error,error,96834,doc/master/TStyle_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStyle_8cxx_source.html,1,['error'],['error']
Availability,"lue(serv.batch[std::min(i, serv.batch.size()-1)], false);; 4411 }; 4412 ; 4413 output[i] = evaluate();; 4414 }; 4415}; 4416 ; 4417////////////////////////////////////////////////////////////////////////////////; 4418/// This function defines the analytical integral translation for the class.; 4419///; 4420/// \param[in] code The code that decides the integrands.; 4421/// \param[in] rangeName Name of the normalization range.; 4422/// \param[in] ctx An object to manage auxiliary information for code-squashing.; 4423///; 4424/// \returns The representative code string of the integral for the given object.; 4425std::string RooAbsReal::buildCallToAnalyticIntegral(Int_t /* code */, const char * /* rangeName */,; 4426 RooFit::Detail::CodeSquashContext & /*ctx*/) const; 4427{; 4428 std::stringstream errorMsg;; 4429 errorMsg << ""An analytical integral function for class \"""" << ClassName() << ""\"" has not yet been implemented."";; 4430 coutE(Minimization) << errorMsg.str() << std::endl;; 4431 throw std::runtime_error(errorMsg.str().c_str());; 4432}; 4433 ; 4434double RooAbsReal::_DEBUG_getVal(const RooArgSet* normalisationSet) const {; 4435 ; 4436 const bool tmpFast = _fast;; 4437 const double tmp = _value;; 4438 ; 4439 double fullEval = 0.;; 4440 try {; 4441 fullEval = getValV(normalisationSet);; 4442 }; 4443 catch (CachingError& error) {; 4444 throw CachingError(std::move(error),; 4445 FormatPdfTree() << *this);; 4446 }; 4447 ; 4448 const double ret = (_fast && !_inhibitDirty) ? _value : fullEval;; 4449 ; 4450 if (std::isfinite(ret) && ( ret != 0. ? (ret - fullEval)/ret : ret - fullEval) > 1.E-9) {; 4451#ifndef NDEBUG; 4452 gSystem->StackTrace();; 4453#endif; 4454 FormatPdfTree formatter;; 4455 formatter << ""--> (Scalar computation wrong here:)\n""; 4456 << GetName() << "" "" << this << "" _fast="" << tmpFast; 4457 << ""\n\tcached _value="" << std::setprecision(16) << tmp; 4458 << ""\n\treturning ="" << ret; 4459 << ""\n\trecomputed ="" << fullEval; 4460 << ""\n\tnew _value ="" << _value ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:195466,error,errorMsg,195466,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['error'],['errorMsg']
Availability,"lue); voidAddUnpackInt(const char* tname, Int_t value); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetBlobPrefixName() const; const char*GetBlobTypeName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TSQLClassInfo*GetInfo() const; const char*GetLocatedField() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Long64_tGetObjId() const; virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetValue() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSQLObjectData.html:2007,error,error,2007,root/html530/TSQLObjectData.html,https://root.cern,https://root.cern/root/html530/TSQLObjectData.html,5,['error'],['error']
Availability,"lues and initial Error guess (sigma) (or ""step size""),; or Parameter starting values and initial covariance matrix;; covariance matrix is stored in Upper triangular packed storage format,; e.g. the Elements in the array are arranged like; {a(0,0), a(0,1), a(1,1), a(0,2), a(1,2), a(2,2), ...},; the size is nrow*(nrow+1)/2 (see also MnUserCovariance.h);. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~FunctionMinimizer(); virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>& par, const vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, const vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int strategy, unsigned int maxfcn, double toler) const; ROOT::Minuit2::FunctionMinimizer&operator=(const ROOT::Minuit2::FunctionMinimizer&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~FunctionMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const std::vector<double>& par, const std::vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler); starting values for parameters and errors. FunctionMinimum Minimize(const FCNGradientBase&, const std::vector<double>& par, const std::vector<double>& err, unsigned int strategy, unsigned int maxfcn, double toler); starting values f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__FunctionMinimizer.html:1151,toler,toler,1151,root/html526/ROOT__Minuit2__FunctionMinimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__FunctionMinimizer.html,20,['toler'],['toler']
Availability,"lues in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const RooXYChi2Var& other, const char* name = 0); Copy constructor. void initialize(); Common constructor initialization. void initIntegrator(); Initialize bin content integrator. ~RooXYChi2Var(); Destructor. Double_t xErrorContribution(Double_t ydata) const; Calculate contribution to internal error due to error on 'x' coordinates; at point i. Double_t fy() const; Return function value requested bu present configuration. If integration is required, the function value integrated; over the bin volume divided by the bin volume is returned,; otherwise the value at the bin center is returned.; The bin volume is defined by the error on the 'X' coordinates. If an extended p.d.f. is used as function, its value is; also multiplied by the expected number of events here. Double_t evaluatePartition(Int_t firstEvent, Int_t lastEvent, Int_t stepSize) const; Calculate chi^2 in partition from firstEvent to lastEvent using given stepSize. RooArgSet requiredExtraObservables() const; Inform base class that observable yvar cannot be optimized away from the dataset. TObject* clone(const char* newname) const; { return new RooXYChi2Var(*this,newname); }. RooAbsTestStatistic* create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet& , const char* , const char* , Int_t , Bool_t , Bool_t , Bool_t ); Virtual constructor. Double_t defaultErrorLevel() const; The default error level for MINUIT error analysis for a chi^2 is 1.0. RooNumIntConfig& binIntegratorConfig(); { return _intConfig ; }. const RooNumIntConfig& binIntegratorConfig() const; { return _intConfig ; }. Bool_t allowFunctionCac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooXYChi2Var.html:40995,error,error,40995,root/html528/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html528/RooXYChi2Var.html,3,['error'],['error']
Availability,"lues in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const RooXYChi2Var& other, const char* name = 0); Copy constructor. void initialize(); Common constructor initialization. void initIntegrator(); Initialize bin content integrator. ~RooXYChi2Var(); Destructor. Double_t xErrorContribution(Double_t ydata) const; Calculate contribution to internal error due to error on 'x' coordinates; at point i. Double_t fy() const; Return function value requested bu present configuration. If integration is required, the function value integrated; over the bin volume divided by the bin volume is returned,; otherwise the value at the bin center is returned.; The bin volume is defined by the error on the 'X' coordinates. If an extended p.d.f. is used as function, its value is; also multiplied by the expected number of events here. Double_t evaluatePartition(Int_t firstEvent, Int_t lastEvent, Int_t stepSize) const; Calculate chi^2 in partition from firstEvent to lastEvent using given stepSize. RooArgSet requiredExtraObservables() const; Inform base class that observable yvar cannot be optimized away from the dataset. TObject* clone(const char* newname) const; { return new RooXYChi2Var(*this,newname); }. RooAbsTestStatistic* create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet& , const char* , const char* , Int_t , Bool_t , Bool_t , Bool_t ); Virtual constructor. Double_t defaultErrorLevel() const; The default error level for MINUIT error analysis for a chi^2 is 1.0. RooNumIntConfig& binIntegratorConfig(); { return _intConfig ; }. const RooNumIntConfig& binIntegratorConfig(); { return _intConfig ; }. Bool_t allowFunctionCache(); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooXYChi2Var.html:40678,error,error,40678,root/html526/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html526/RooXYChi2Var.html,1,['error'],['error']
Availability,"lues in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const RooXYChi2Var& other, const char* name = 0); Copy constructor. void initialize(); Common constructor initialization. void initIntegrator(); Initialize bin content integrator. ~RooXYChi2Var(); Destructor. Double_t xErrorContribution(Double_t ydata) const; Calculate contribution to internal error due to error on 'x' coordinates; at point i. Double_t fy() const; Return function value requested bu present configuration. If integration is required, the function value integrated; over the bin volume divided by the bin volume is returned,; otherwise the value at the bin center is returned.; The bin volume is defined by the error on the 'X' coordinates. If an extended p.d.f. is used as function, its value is; also multiplied by the expected number of events here. Double_t evaluatePartition(Int_t firstEvent, Int_t lastEvent, Int_t stepSize) const; Calculate chi^2 in partition from firstEvent to lastEvent using given stepSize. RooArgSet requiredExtraObservables() const; Inform base class that observable yvar cannot be optimized away from the dataset. TObject* clone(const char* newname) const; { return new RooXYChi2Var(*this,newname); }. RooAbsTestStatistic* create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet& , const char* , const char* , Int_t , RooFit::MPSplit , Bool_t , Bool_t , Bool_t ); Virtual constructor. Double_t defaultErrorLevel() const; The default error level for MINUIT error analysis for a chi^2 is 1.0. RooNumIntConfig& binIntegratorConfig(); { return _intConfig ; }. const RooNumIntConfig& binIntegratorConfig() const; { return _intConfig ; }. Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooXYChi2Var.html:47005,error,error,47005,root/html534/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html534/RooXYChi2Var.html,3,['error'],['error']
Availability,"lues(). const std::vector< Float_t > & TMVA::MethodPDEFoam::GetMulticlassValues ; (; ). virtual . Get the multiclass MVA response for the PDEFoam classifier. ; The returned MVA values are normalized, i.e. their sum equals 1. ; Reimplemented from TMVA::MethodBase.; Definition at line 789 of file MethodPDEFoam.cxx. ◆ GetMvaValue(). Double_t TMVA::MethodPDEFoam::GetMvaValue ; (; Double_t * ; err = nullptr, . Double_t * ; errUpper = nullptr . ). virtual . Return Mva-Value. ; In case of fSigBgSeparated==false (one unified PDEFoam was trained) the function returns the content of the cell, which corresponds to the current TMVA::Event, i.e. D = N_sig/(N_bg+N_sig).; In case of fSigBgSeparated==true (two separate PDEFoams were trained) the function returns D = Density_sig/(Density_sig+Density_bg); where 'Density_sig' is the content of the cell in the signal PDEFoam (fFoam[0]) and 'Density_bg' is the content of the cell in the background PDEFoam (fFoam[1]).; In both cases the error on the discriminant is stored in 'err' and 'errUpper'. (Of course err and errUpper must be non-zero and point to valid address to make this work.) ; Implements TMVA::MethodBase.; Definition at line 709 of file MethodPDEFoam.cxx. ◆ GetNCuts(). void TMVA::MethodPDEFoam::GetNCuts ; (; PDEFoamCell * ; cell, . std::vector< UInt_t > & ; nCuts . ). Fill in 'nCuts' the number of cuts made in every foam dimension, starting at the root cell 'cell'. ; Parameters:. cell - root cell to start the counting from; nCuts - the number of cuts are saved in this vector . Definition at line 876 of file MethodPDEFoam.cxx. ◆ GetRegressionValues(). const std::vector< Float_t > & TMVA::MethodPDEFoam::GetRegressionValues ; (; ). virtual . Return regression values for both multi- and mono-target regression. ; Reimplemented from TMVA::MethodBase.; Definition at line 1050 of file MethodPDEFoam.cxx. ◆ HasAnalysisType(). Bool_t TMVA::MethodPDEFoam::HasAnalysisType ; (; Types::EAnalysisType ; type, . UInt_t ; numberClasses, . UInt_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPDEFoam.html:38366,error,error,38366,doc/master/classTMVA_1_1MethodPDEFoam.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPDEFoam.html,1,['error'],['error']
Availability,"lues2);; gr2->SetLineColor(4);; gr2->SetLineWidth(-2002);; gr2->SetFillStyle(3004);; gr2->SetFillColor(9);; ; TGraph *gr3 = new TGraph(n,xvalues3,yvalues3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);; ; mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");; ; return c1;; }; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::Addvirtual void Add(TGraph *graph, Option_t *chopt="""")Add a new graph to the list of graphs.Definition TMultiGraph.cxx:419; TMultiGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this multigraph with its current attributes.Definition TMultiGraph.cxx:508; . Graphs with error bars; Three classes are available to handle graphs with error bars: TGraphErrors, TGraphAsymmErrors and TGraphBentErrors. The following drawing options are specific to graphs with error bars:. Option Description . ""Z"" Do not draw small horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. . "">"" An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""|>"" A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:8162,error,error,8162,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,1,['error'],['error']
Availability,lues: a0=0.510348 a1=-0.776595 mean=5.09286 nbkg=154.805 nsig=114.979 sig1frac=0.0496841; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 120; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 110; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-796.54) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.702991 a1=-0.414346 mean=5.11911 nbkg=145.466 nsig=141.134 sig1frac=0.532895; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 100; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-920.777) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.726241 a1=-0.424659 mean=5.05565 nbkg=151.228 nsig=170.816 sig1frac=0.771802; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-743.339) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.942558 a1=-0.775768 mean=4.99866 nbkg=187.872 nsig=63.0852 sig1frac=0.868175; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-743.339) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.984478 a1=-0.59938 mean=4.99914 nbkg=173.959 nsig=90.3182 sig1frac=0.461117; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 90; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 80; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 70; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-775.389) to force MIGRAD to back out of this region.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:27134,error,errors,27134,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,4,['error'],"['error', 'errors']"
Availability,"lues; *-* =====================================================================; *-* calculates the transformation factor between external and; *-* internal parameter values. this factor is one for; *-* parameters which are not limited. called from MNEMAT.; *. void mneig(Double_t* a, Int_t ndima, Int_t n, Int_t mits, Double_t* work, Double_t precis, Int_t& ifault); Compute matrix eigen values*-; *-* ===========================; System generated locals. void mnemat(Double_t* emat, Int_t ndim); Calculates the external error matrix from the internal matrix. Note that if the matrix is declared like Double_t matrix[5][5]; in the calling program, one has to call mnemat with, eg; gMinuit->mnemat(&matrix[0][0],5);. void mnerrs(Int_t number, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& gcc); Utility routine to get MINOS errors*-; *-* ===================================; *-* Called by user.; *-* NUMBER is the parameter number; *-* values returned by MNERRS:; *-* EPLUS, EMINUS are MINOS errors of parameter NUMBER,; *-* EPARAB is 'parabolic' error (from error matrix).; *-* (Errors not calculated are set = 0); *-* GCC is global correlation coefficient from error matrix; *. void mneval(Double_t anext, Double_t& fnext, Int_t& ierev); Evaluates the function being analyzed by MNCROS*-; *-* ===============================================; *-* Evaluates the function being analyzed by MNCROS, which is; *-* generally the minimum of FCN with respect to all remaining; *-* variable parameters. The class data members contains the; *-* data necessary to know the values of U(KE1CR) and U(KE2CR); *-* to be used, namely U(KE1CR) = XMIDCR + ANEXT*XDIRCR; *-* and (if KE2CR .NE. 0) U(KE2CR) = YMIDCR + ANEXT*YDIRCR; *. void mnexcm(const char* comand, Double_t* plist, Int_t llist, Int_t& ierflg); Interprets a command and takes appropriate action*-*-; *-* =================================================; *-* either directly by skipping to the corresponding code in; *-* MNEXCM, or by",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:40291,error,errors,40291,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,18,['error'],"['error', 'errors']"
Availability,"lues;; 1120 if (XGetGCValues((Display*)fDisplay, *gGCtext, GCForeground|GCBackground, &values)) {; 1121 XSetForeground((Display*)fDisplay, *gGCinvt, values.background);; 1122 XSetBackground((Display*)fDisplay, *gGCinvt, values.foreground);; 1123 } else {; 1124 Error(""OpenDisplay"", ""cannot get GC values"");; 1125 }; 1126 ; 1127 // Turn-off GraphicsExpose and NoExpose event reporting for the pixmap; 1128 // manipulation GC, this to prevent these events from being stacked up; 1129 // without ever being processed and thereby wasting a lot of memory.; 1130 XSetGraphicsExposures((Display*)fDisplay, *gGCpxmp, False);; 1131 ; 1132 // Create input echo graphic context; 1133 XGCValues echov;; 1134 echov.foreground = fBlackPixel;; 1135 echov.background = fWhitePixel;; 1136 if (strstr(vendor,""Hewlett"")); 1137 echov.function = GXxor;; 1138 else; 1139 echov.function = GXinvert;; 1140 ; 1141 gGCecho = XCreateGC((Display*)fDisplay, fVisRootWin,; 1142 GCForeground | GCBackground | GCFunction,; 1143 &echov);; 1144 ; 1145 // Load a default Font; 1146 static int isdisp = 0;; 1147 if (!isdisp) {; 1148 for (i = 0; i < kMAXFONT; i++) {; 1149 gFont[i].id = nullptr;; 1150 strcpy(gFont[i].name, "" "");; 1151 }; 1152 fontlist = XListFonts((Display*)fDisplay, ""*courier*"", 1, &fontcount);; 1153 if (fontlist && fontcount != 0) {; 1154 gFont[gCurrentFontNumber].id = XLoadQueryFont((Display*)fDisplay, fontlist[0]);; 1155 gTextFont = gFont[gCurrentFontNumber].id;; 1156 strcpy(gFont[gCurrentFontNumber].name, ""*courier*"");; 1157 gCurrentFontNumber++;; 1158 XFreeFontNames(fontlist);; 1159 } else {; 1160 // emergency: try fixed font; 1161 fontlist = XListFonts((Display*)fDisplay, ""fixed"", 1, &fontcount);; 1162 if (fontlist && fontcount != 0) {; 1163 gFont[gCurrentFontNumber].id = XLoadQueryFont((Display*)fDisplay, fontlist[0]);; 1164 gTextFont = gFont[gCurrentFontNumber].id;; 1165 strcpy(gFont[gCurrentFontNumber].name, ""fixed"");; 1166 gCurrentFontNumber++;; 1167 XFreeFontNames(fontlist);; 1168 } else {; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGX11_8cxx_source.html:37195,echo,echov,37195,doc/master/TGX11_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGX11_8cxx_source.html,1,['echo'],['echov']
Availability,"lugin) overrideDefinition TGeoPainter.h:165; TGeoPainter::RandomPointsvoid RandomPoints(const TGeoVolume *vol, Int_t npoints, Option_t *option="""") overrideDraw random points in the bounding box of a volume.Definition TGeoPainter.cxx:1693; TGeoPainter::fTopVisibleBool_t fTopVisibleDefinition TGeoPainter.h:53; TGeoPainter::GetTopVolumeTGeoVolume * GetTopVolume() const overrideDefinition TGeoPainter.h:129; TGeoPainter::fGlobalTGeoHMatrix * fGlobalDefinition TGeoPainter.h:61; TGeoPainter::GetBombFactorsvoid GetBombFactors(Double_t &bombx, Double_t &bomby, Double_t &bombz, Double_t &bombr) const overrideDefinition TGeoPainter.h:116; TGeoPainter::fVisLevelInt_t fVisLevelDefinition TGeoPainter.h:49; TGeoPainter::Lockvoid Lock(Bool_t flag=kTRUE)Definition TGeoPainter.h:142; TGeoPainter::SetNsegmentsvoid SetNsegments(Int_t nseg=20) overrideSet number of segments to approximate circles.Definition TGeoPainter.cxx:1992; TGeoPainter::CheckBoundaryReferencevoid CheckBoundaryReference(Int_t icheck=-1) overrideCheck the boundary errors reference file created by CheckBoundaryErrors method.Definition TGeoPainter.cxx:210; TGeoPainter::AddTrackPointvoid AddTrackPoint(Double_t *point, Double_t *box, Bool_t reset=kFALSE) overrideAverage center of view of all painted tracklets and compute view box.Definition TGeoPainter.cxx:138; TGeoPainter::GrabFocusvoid GrabFocus(Int_t nfr=0, Double_t dlong=0, Double_t dlat=0, Double_t dpsi=0) overrideMove focus to current volume.Definition TGeoPainter.cxx:1206; TGeoPainter::DrawOverlapvoid DrawOverlap(void *ovlp, Option_t *option="""") overrideDraw an overlap.Definition TGeoPainter.cxx:913; TGeoPainter::SetVisLevelvoid SetVisLevel(Int_t level=3) overrideSet default level down to which visualization is performed.Definition TGeoPainter.cxx:2024; TGeoPainter::AddSize3Dvoid AddSize3D(Int_t numpoints, Int_t numsegs, Int_t numpolys) overrideAdd numpoints, numsegs, numpolys to the global 3D size.Definition TGeoPainter.cxx:121; TGeoPainter::fCheckedNodeTGeoNode *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8h_source.html:23315,error,errors,23315,doc/master/TGeoPainter_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8h_source.html,1,['error'],['errors']
Availability,"lume (bin volume divided by a reference value) ;  ; bool fUseEmpty;  use empty bins (default is false) with a fixed error of 1 ;  ; bool fUseRange;  use the function range when creating the fit data (default is false) ;  . #include <Fit/DataOptions.h>; Constructor & Destructor Documentation. ◆ DataOptions(). ROOT::Fit::DataOptions::DataOptions ; (; ). inline . Default constructor: use the default options. ; Definition at line 34 of file DataOptions.h. Member Data Documentation. ◆ fAsymErrors. bool ROOT::Fit::DataOptions::fAsymErrors. use asymmetric errors in the value when available, selecting them according to the on sign of residual (default is true) ; Definition at line 55 of file DataOptions.h. ◆ fBinVolume. bool ROOT::Fit::DataOptions::fBinVolume. normalize data by the bin volume (it is used in the Poisson likelihood fits) ; Definition at line 48 of file DataOptions.h. ◆ fCoordErrors. bool ROOT::Fit::DataOptions::fCoordErrors. use errors on the x coordinates when available (default is true) ; Definition at line 54 of file DataOptions.h. ◆ fErrors1. bool ROOT::Fit::DataOptions::fErrors1. use all errors equal to 1, i.e. fit without errors (default is false) ; Definition at line 52 of file DataOptions.h. ◆ fExpErrors. bool ROOT::Fit::DataOptions::fExpErrors. use expected errors from the function and not from the data ; Definition at line 53 of file DataOptions.h. ◆ fIntegral. bool ROOT::Fit::DataOptions::fIntegral. use integral of bin content instead of bin center (default is false) ; Definition at line 47 of file DataOptions.h. ◆ fNormBinVolume. bool ROOT::Fit::DataOptions::fNormBinVolume. normalize data by a normalized the bin volume (bin volume divided by a reference value) ; Definition at line 49 of file DataOptions.h. ◆ fUseEmpty. bool ROOT::Fit::DataOptions::fUseEmpty. use empty bins (default is false) with a fixed error of 1 ; Definition at line 50 of file DataOptions.h. ◆ fUseRange. bool ROOT::Fit::DataOptions::fUseRange. use the function range when creati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Fit_1_1DataOptions.html:2187,error,errors,2187,doc/master/structROOT_1_1Fit_1_1DataOptions.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Fit_1_1DataOptions.html,2,"['avail', 'error']","['available', 'errors']"
Availability,"lumns must all be `float` variables):; 97/// \code; 98/// bool myVecFunc(std::vector<float> args);; 99/// df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});; 100/// \endcode; 101// clang-format on; 102template <std::size_t N, typename T, typename F>; 103auto PassAsVec(F &&f) -> RDFInternal::PassAsVecHelper<std::make_index_sequence<N>, T, F>; 104{; 105 return RDFInternal::PassAsVecHelper<std::make_index_sequence<N>, T, F>(std::forward<F>(f));; 106}; 107 ; 108// clang-format off; 109/// Create a graphviz representation of the dataframe computation graph, return it as a string.; 110/// \param[in] node any node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to.; 111///; 112/// The output can be displayed with a command akin to `dot -Tpng output.dot > output.png && open output.png`.; 113///; 114/// Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are; 115/// effectively optimized away from the computation graph.; 116///; 117/// Note that SaveGraph is not thread-safe and must not be called concurrently from different threads.; 118// clang-format on; 119template <typename NodeType>; 120std::string SaveGraph(NodeType node); 121{; 122 ROOT::Internal::RDF::GraphDrawing::GraphCreatorHelper helper;; 123 return helper.RepresentGraph(node);; 124}; 125 ; 126// clang-format off; 127/// Create a graphviz representation of the dataframe computation graph, write it to the specified file.; 128/// \param[in] node any node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to.; 129/// \param[in] outputFile file where to save the representation.; 130///; 131/// The output can be displayed with a command akin to `dot -Tpng output.dot > output.png && open output.png`.; 132///; 133/// Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDFHelpers_8hxx_source.html:5059,down,downstream,5059,doc/master/RDFHelpers_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RDFHelpers_8hxx_source.html,1,['down'],['downstream']
Availability,"lute tolerance on each point compared point. ; Definition at line 851 of file RooCurve.cxx. ◆ makeErrorBand() [1/2]. RooCurve * RooCurve::makeErrorBand ; (; const std::vector< RooCurve * > & ; plusVar, . const std::vector< RooCurve * > & ; minusVar, . const TMatrixD & ; C, . double ; Z = 1 . ); const. Construct filled RooCurve represented error band represent the error added in quadrature defined by the curves arguments plusVar and minusVar corresponding to one-sigma variations of each parameter. ; The resulting error band, combined used the correlation matrix C is multiplied with the significance parameter Z to construct the equivalent of a Z sigma error band (in Gaussian approximation) ; Definition at line 740 of file RooCurve.cxx. ◆ makeErrorBand() [2/2]. RooCurve * RooCurve::makeErrorBand ; (; const std::vector< RooCurve * > & ; variations, . double ; Z = 1 . ); const. Construct filled RooCurve represented error band that captures alpha% of the variations of the curves passed through argument variations, where the percentage alpha corresponds to the central interval fraction of a significance Z. ; Definition at line 701 of file RooCurve.cxx. ◆ plotSamplingHintForBinBoundaries(). std::list< double > * RooCurve::plotSamplingHintForBinBoundaries ; (; std::span< const double > ; boundaries, . double ; xlo, . double ; xhi . ). static . Returns sampling hints for a histogram with given boundaries. ; This helper function is meant to be used by binned RooAbsReals to produce sampling hints that are working well with RooFits plotting. ; Definition at line 893 of file RooCurve.cxx. ◆ Print(). void RooCurve::Print ; (; Option_t * ; option = nullptr); const. inlineoverridevirtual . This method must be overridden when a class wants to print itself. ; Reimplemented from TObject.; Definition at line 63 of file RooCurve.h. ◆ printClassName(). void RooCurve::printClassName ; (; std::ostream & ; os); const. overridevirtual . Print the class name of this curve. ; Reimplemented from ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCurve.html:48603,error,error,48603,doc/master/classRooCurve.html,https://root.cern,https://root.cern/doc/master/classRooCurve.html,1,['error'],['error']
Availability,"lve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TGFrame; static const TGGC * fgBckgndGC = nullptr;  ; static const TGGC * fgBlackGC = nullptr;  ; static Pixel_t fgBlackPixel = 0;  ; static Window_t fgDbw = 0;  ; static Int_t fgDbx = 0;  ; static Int_t fgDby = 0;  ; static ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHorizontal3DLine.html:24906,mask,mask,24906,doc/master/classTGHorizontal3DLine.html,https://root.cern,https://root.cern/doc/master/classTGHorizontal3DLine.html,2,['mask'],['mask']
Availability,"lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb); virtual~THilbertMatrixT<float>(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTMatrixTLazy<float>::GetColLwb() const; Int_tTMatrixTLazy<float>::GetColUpb() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tTMatrixTLazy<float>::GetRowLwb() const; Int_tTMatrixTLazy<float>::GetRowUpb() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THilbertMatrixT_float_.html:1754,error,error,1754,root/html528/THilbertMatrixT_float_.html,https://root.cern,https://root.cern/root/html528/THilbertMatrixT_float_.html,4,['error'],['error']
Availability,"ly = 0); Performs searching at the LDAP directory.; Return value: a TLDAPResult object or 0 in case of error.; Result needs to be deleted by user.; const char *base: Specifies the base object for the search operation; Int_t scope: Specifies the portion of the LDAP tree, relative to; the base object, to search.; Must be one of LDAP_SCOPE_BASE (==0),; LDAP_SCOPE_ONELEVEL (==1) or LDAP_SCOPE_SUBTREE (==2).; char *filter: The criteria during the search to determine which; entries to return, 0 means that the filter; ""(objectclass=*)"" will be applied; TList *attrs: The TList of attributes to be returned along with; each entry, 0 means that all available attributes; should be returned.; Int_t attrsonly: This parameter is a boolean specifying whether both; types and values should be returned with each; attribute (zero) or types only should be returned; (non-zero). Int_t AddEntry(TLDAPEntry& entry); Adds entry to the LDAP tree.; Be sure that you are bound with write permissions.; Return value: LDAP error code. Int_t ModifyEntry(TLDAPEntry& entry, Int_t mode = LDAP_MOD_REPLACE); Modifies specified entry.; Be sure that you are bound with write permissions.; Return value: LDAP error code, 0 = success.; TLDAPEntry &entry: Entry to be modified.; Int_t mode: Modifying mode.; Should be one of LDAP_MOD_ADD (==0),; LDAP_MOD_DELETE (==1) or LDAP_MOD_REPLACE (==2); Specifies what to do with all the entry's attributes; and its values - add to the corresponding entry on; the server, delete from it, or replace the; corresponding attributes with new values. Int_t DeleteEntry(const char* dn); Deletes the entry with specified DN, the base entry must exist.; Be sure that you are bound with write permissions.; Return value: LDAP error code, 0 = succes. Int_t RenameEntry(const char* dn, const char* newrdn, Bool_t removeattr = kFALSE); Renames the entry with specified DN, the entry must be leaf; Be sure that you are bound with the write permissions; Return value: LDAP error code, 0 = succes; cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLDAPServer.html:9158,error,error,9158,root/html528/TLDAPServer.html,https://root.cern,https://root.cern/root/html528/TLDAPServer.html,3,['error'],['error']
Availability,"ly Hermitian array); 30// to real output; 31// - ""R2HC"" - a real-input DFT with output in ""halfcomplex"" format,; 32// i.e. real and imaginary parts for a transform of size n stored as; 33// r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; 34// - ""HC2R"" - computes the reverse of FFTW_R2HC, above; 35// - ""DHT"" - computes a discrete Hartley transform; 36//; 37// Sine/cosine transforms:; 38// Different types of transforms are specified by parameter kind of the SineCosine() static; 39// function. 4 different kinds of sine and cosine transforms are available; 40// DCT-I (REDFT00 in FFTW3 notation)- kind=0; 41// DCT-II (REDFT10 in FFTW3 notation)- kind=1; 42// DCT-III(REDFT01 in FFTW3 notation)- kind=2; 43// DCT-IV (REDFT11 in FFTW3 notation)- kind=3; 44// DST-I (RODFT00 in FFTW3 notation)- kind=4; 45// DST-II (RODFT10 in FFTW3 notation)- kind=5; 46// DST-III(RODFT01 in FFTW3 notation)- kind=6; 47// DST-IV (RODFT11 in FFTW3 notation)- kind=7; 48// Formulas and detailed descriptions can be found in the chapter; 49// ""What FFTW really computes"" of the FFTW manual; 50//; 51// NOTE: FFTW computes unnormalized transforms, so doing a transform, followed by its; 52// inverse will give the original array, multiplied by normalization constant; 53// (transform size(N) for FFT, 2*(N-1) for DCT-I, 2*(N+1) for DST-I, 2*N for; 54// other sine/cosine transforms); 55//; 56// How to use it:; 57// Call to the static function FFT returns a pointer to a fast fourier transform; 58// with requested parameters. Call to the static function SineCosine returns a; 59// pointer to a sine or cosine transform with requested parameters. Example:; 60// {; 61// Int_t N = 10; Double_t *in = new Double_t[N];; 62// TVirtualFFT *fftr2c = TVirtualFFT::FFT(1, &N, ""R2C"");; 63// fftr2c->SetPoints(in);; 64// fftr2c->Transform();; 65// Double_t re, im;; 66// for (Int_t i=0; i<N; i++); 67// fftr2c->GetPointComplex(i, re, im);; 68// ...; 69// fftr2c->SetPoints(in2);; 70// ...; 71// fftr2c->SetPoints(in3);; 72// ...; 7",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TVirtualFFT_8h_source.html:1901,avail,available,1901,doc/master/TVirtualFFT_8h_source.html,https://root.cern,https://root.cern/doc/master/TVirtualFFT_8h_source.html,1,['avail'],['available']
Availability,"ly closed on program termination. ; Definition at line 139 of file TServerSocket.cxx. ◆ TServerSocket() [4/4]. TServerSocket::TServerSocket ; (; const char * ; service, . Bool_t ; reuse = kFALSE, . Int_t ; backlog = kDefaultBacklog, . Int_t ; tcpwindowsize = -1 . ). Create a server socket object for a named service. ; Set reuse to true to force reuse of the server socket (i.e. do not wait for the time out to pass). Using backlog one can set the desirable queue length for pending connections. Use tcpwindowsize to specify the size of the receive buffer, it has to be specified here to make sure the window scale option is set (for tcpwindowsize > 65KB and for platforms supporting window scaling). Use IsValid() to check the validity of the server socket. In case server socket is not valid use GetErrorCode() to obtain the specific error value. These values are: 0 = no error (socket is valid) -1 = low level socket() call failed -2 = low level bind() call failed -3 = low level listen() call failed Every valid server socket is added to the TROOT sockets list which will make sure that any open sockets are properly closed on program termination. ; Definition at line 76 of file TServerSocket.cxx. ◆ ~TServerSocket(). TServerSocket::~TServerSocket ; (; ). virtual . Destructor: cleanup authentication stuff (if any) and close. ; Definition at line 162 of file TServerSocket.cxx. Member Function Documentation. ◆ Accept(). TSocket * TServerSocket::Accept ; (; UChar_t ; opt = 0). virtual . Accept a connection on a server socket. ; Returns a full-duplex communication TSocket object. If no pending connections are present on the queue and nonblocking mode has not been enabled with SetOption(kNoBlock,1) the call blocks until a connection is present. The returned socket must be deleted by the user. The socket is also added to the TROOT sockets list which will make sure that any open sockets are properly closed on program termination. In case of error 0 is returned and in case non-blocking I/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTServerSocket.html:21424,error,error,21424,doc/master/classTServerSocket.html,https://root.cern,https://root.cern/doc/master/classTServerSocket.html,1,['error'],['error']
Availability,"ly fixed parameters; 854 ; 855Int_t TMinuit::GetNumFixedPars() const; 856{; 857 return fNpfix;; 858}; 859 ; 860////////////////////////////////////////////////////////////////////////////////; 861/// returns the number of currently free parameters; 862 ; 863Int_t TMinuit::GetNumFreePars() const; 864{; 865 return fNpar;; 866}; 867 ; 868////////////////////////////////////////////////////////////////////////////////; 869/// returns the total number of parameters that have been defined; 870/// as fixed or free. The constant parameters are not counted.; 871 ; 872Int_t TMinuit::GetNumPars() const; 873{; 874 return fNpar + fNpfix;; 875}; 876 ; 877////////////////////////////////////////////////////////////////////////////////; 878/// invokes the MIGRAD minimizer; 879 ; 880Int_t TMinuit::Migrad(); 881{; 882 Int_t err;; 883 Double_t tmp[1];; 884 tmp[0] = 0;; 885 ; 886 mnexcm( ""MIGRAD"", tmp, 0, err );; 887 ; 888 return err;; 889}; 890 ; 891////////////////////////////////////////////////////////////////////////////////; 892/// release a parameter; 893 ; 894Int_t TMinuit::Release( Int_t parNo); 895{; 896 Int_t err;; 897 Double_t tmp[1];; 898 tmp[0] = parNo+1; //set internal Minuit numbering; 899 ; 900 mnexcm( ""RELEASE"", tmp, 1, err );; 901 ; 902 return err;; 903}; 904 ; 905////////////////////////////////////////////////////////////////////////////////; 906/// To get the n-sigma contour the error def parameter ""up"" has to set to n^2.; 907 ; 908Int_t TMinuit::SetErrorDef( Double_t up ); 909{; 910 Int_t err;; 911 ; 912 mnexcm( ""SET ERRDEF"", &up, 1, err );; 913 ; 914 return err;; 915}; 916 ; 917////////////////////////////////////////////////////////////////////////////////; 918/// To set the address of the minimization function; 919 ; 920void TMinuit::SetFCN(void (*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t)); 921{; 922 fFCN = fcn;; 923}; 924 ; 925////////////////////////////////////////////////////////////////////////////////; 926/// Static function called when Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:33287,error,error,33287,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['error'],['error']
Availability,"ly length bytes from buffer. Use opt to send out-of-band; data (see TSocket). int RecvBuf(int sock, void* buffer, int length); Receive a buffer headed by a length indicator. int SendBuf(int sock, const void* buffer, int length); Send a buffer headed by a length indicator. int SetSockOpt(int sock, int kind, int val); Set socket option. int GetSockOpt(int sock, int kind, int* val); Get socket option. int GetSysInfo(SysInfo_t* info) const; Returns static system info, like OS type, CPU type, number of CPUs; RAM size, etc into the SysInfo_t structure. Returns -1 in case of error,; 0 otherwise. int GetCpuInfo(CpuInfo_t* info, Int_t sampleTime = 1000) const; Returns cpu load average and load info into the CpuInfo_t structure.; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; interval over which the CPU load will be measured, in ms (default 1000). int GetMemInfo(MemInfo_t* info) const; Returns ram and swap memory usage info into the MemInfo_t structure.; Returns -1 in case of error, 0 otherwise. int GetProcInfo(ProcInfo_t* info) const; Returns cpu and memory used by this process into the ProcInfo_t structure.; Returns -1 in case of error, 0 otherwise. int CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); This method compiles and loads a shared library containing; the code from the file ""filename"". The possible options are:; k : keep the shared library after the session end.; f : force recompilation.; g : compile with debug symbol; O : optimized the code (ignore if 'g' is specified); c : compile only, do not attempt to load the library.; - : if buildir is set, use a flat structure (see buildir below). If library_specified is specified, CompileMacro generates the file; ""library_specified"".soext where soext is the shared library extension for; the current platform. If build_dir is specified, it is used as an alternative 'root' for the; generation of the shared library. The l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSystem.html:37169,error,error,37169,root/html528/TSystem.html,https://root.cern,https://root.cern/root/html528/TSystem.html,1,['error'],['error']
Availability,"ly length bytes from buffer. Use opt to send out-of-band; data (see TSocket). int RecvBuf(int sock, void* buffer, int length); Receive a buffer headed by a length indicator. int SendBuf(int sock, const void* buffer, int length); Send a buffer headed by a length indicator. int SetSockOpt(int sock, int kind, int val); Set socket option. int GetSockOpt(int sock, int kind, int* val); Get socket option. int GetSysInfo(SysInfo_t* info) const; Returns static system info, like OS type, CPU type, number of CPUs; RAM size, etc into the SysInfo_t structure. Returns -1 in case of error,; 0 otherwise. int GetCpuInfo(CpuInfo_t* info, Int_t sampleTime = 1000) const; Returns cpu load average and load info into the CpuInfo_t structure.; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; interval over which the CPU load will be measured, in ms (default 1000). int GetMemInfo(MemInfo_t* info) const; Returns ram and swap memory usage info into the MemInfo_t structure.; Returns -1 in case of error, 0 otherwise. int GetProcInfo(ProcInfo_t* info) const; Returns cpu and memory used by this process into the ProcInfo_t structure.; Returns -1 in case of error, 0 otherwise. int CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); This method compiles and loads a shared library containing; the code from the file ""filename"". The return value is true (1) in case of success and false (0); in case of error. The possible options are:; k : keep the shared library after the session end.; f : force recompilation.; g : compile with debug symbol; O : optimized the code (ignore if 'g' is specified); c : compile only, do not attempt to load the library.; - : if buildir is set, use a flat structure (see buildir below). If library_specified is specified, CompileMacro generates the file; ""library_specified"".soext where soext is the shared library extension for; the current platform. If build_dir is specified, it ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSystem.html:37238,error,error,37238,root/html530/TSystem.html,https://root.cern,https://root.cern/root/html530/TSystem.html,3,['error'],['error']
Availability,"ly length bytes from buffer. Use opt to send out-of-band; data (see TSocket). int RecvBuf(int sock, void* buffer, int length); Receive a buffer headed by a length indicator. int SendBuf(int sock, const void* buffer, int length); Send a buffer headed by a length indicator. int SetSockOpt(int sock, int kind, int val); Set socket option. int GetSockOpt(int sock, int kind, int* val); Get socket option. int GetSysInfo(SysInfo_t* info) const; Returns static system info, like OS type, CPU type, number of CPUs; RAM size, etc into the SysInfo_t structure. Returns -1 in case of error,; 0 otherwise. int GetCpuInfo(CpuInfo_t* info, Int_t sampleTime = 1000) const; Returns cpu load average and load info into the CpuInfo_t structure.; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; interval over which the CPU load will be measured, in ms (default 1000). int GetMemInfo(MemInfo_t* info) const; Returns ram and swap memory usage info into the MemInfo_t structure.; Returns -1 in case of error, 0 otherwise. int GetProcInfo(ProcInfo_t* info) const; Returns cpu and memory used by this process into the ProcInfo_t structure.; Returns -1 in case of error, 0 otherwise. int CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); This method compiles and loads a shared library containing; the code from the file ""filename"". The return value is true (1) in case of success and false (0); in case of error. The possible options are:; k : keep the shared library after the session end.; f : force recompilation.; g : compile with debug symbol; O : optimized the code; c : compile only, do not attempt to load the library.; s : silence all informational output; v : output all information output; d : debug ACLiC, keep all the output files.; - : if buildir is set, use a flat structure (see buildir below). If library_specified is specified, CompileMacro generates the file; ""library_specified"".soext where soext ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSystem.html:38849,error,error,38849,root/html602/TSystem.html,https://root.cern,https://root.cern/root/html602/TSystem.html,2,['error'],['error']
Availability,"ly the current state into; a static structure.; The call can be made reentrant by specifying the opaque structure pointed; by 'h', which is filled with the relevant information. The handle 'h'; obtained on the first call must then be used in any subsequent call,; included ShowOutput, to display the redirected output.; Returns 0 on success, -1 in case of error. void ShowOutput(RedirectHandle_t* h); Display the content associated with the redirection described by the; opaque handle 'h'. void AddDynamicPath(const char* pathname); Add a new directory to the dynamic path. const char* GetDynamicPath(); Return the dynamic path (used to find shared libraries). void SetDynamicPath(const char* pathname); Set the dynamic path to a new value.; If the value of 'path' is zero, the dynamic path is reset to its; default value. int Load(const char* module, const char* entry = """", Bool_t system = kFALSE); Load a shared library. Returns 0 on successful loading, 1 in; case lib was already loaded, -1 in case lib does not exist; or in case of error and -2 in case of version mismatch.; When entry is specified the loaded lib is; searched for this entry point (return -1 when entry does not exist,; 0 otherwise). When the system flag is kTRUE, the library is consisdered; a permanent systen library that should not be unloaded during the; course of the session. char * DynamicPathName(const char* lib, Bool_t quiet = kFALSE); Find a dynamic library called lib using the system search paths.; Appends known extensions if needed. Returned string must be deleted; by the user!. const char * FindDynamicLibrary(TString& lib, Bool_t quiet = kFALSE); Find a dynamic library using the system search paths. lib will be updated; to contain the absolute filename if found. Returns lib if found, or NULL; if a library called lib was not found.; This function does not open the library. Func_t DynFindSymbol(const char* module, const char* entry); Find specific entry point in specified library. Specify ""*"" for lib; to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSystem.html:34233,error,error,34233,root/html602/TSystem.html,https://root.cern,https://root.cern/root/html602/TSystem.html,2,['error'],['error']
Availability,"ly the current state into; a static structure.; The call can be made reentrant by specifying the opaque structure pointed; by 'h', which is filled with the relevant information. The handle 'h'; obtained on the first call must then be used in any subsequent call,; included ShowOutput, to display the redirected output.; Returns 0 on success, -1 in case of error. void ShowOutput(RedirectHandle_t* h); Display the content associated with the redirection described by the; opaque handle 'h'. void AddDynamicPath(const char* pathname); Add a new directory to the dynamic path. const char* GetDynamicPath(); Return the dynamic path (used to find shared libraries). void SetDynamicPath(const char* pathname); Set the dynamic path to a new value.; If the value of 'path' is zero, the dynamic path is reset to its; default value. int Load(const char* module, const char* entry = """", Bool_t system = kFALSE); Load a shared library. Returns 0 on successful loading, 1 in; case lib was already loaded, -1 in case lib does not exist; or in case of error and -2 in case of version mismatch.; When entry is specified the loaded lib is; searched for this entry point (return -1 when entry does not exist,; 0 otherwise). When the system flag is kTRUE, the library is consisdered; a permanent systen library that should not be unloaded during the; course of the session. char * DynamicPathName(const char* lib, Bool_t quiet = kFALSE); Need to return the equivalent of LD_LIBRARY_PATH. Func_t DynFindSymbol(const char* module, const char* entry); Find specific entry point in specified library. Specify ""*"" for lib; to search in all libraries. void Unload(const char* module); Unload a shared library. void ListSymbols(const char* module, const char* re = """"); List symbols in a shared library. void ListLibraries(const char* regexp = """"); List all loaded shared libraries. Regexp is a wildcard expression,; see TRegexp::MakeWildcard. TString & GetLastErrorString(); Return the thread local storage for the custom last",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSystem.html:33548,error,error,33548,root/html534/TSystem.html,https://root.cern,https://root.cern/root/html534/TSystem.html,1,['error'],['error']
Availability,"ly the current state into; a static structure.; The call can be made reentrant by specifying the opaque structure pointed; by 'h', which is filled with the relevant information. The handle 'h'; obtained on the first call must then be used in any subsequent call,; included ShowOutput, to display the redirected output.; Returns 0 on success, -1 in case of error. void ShowOutput(RedirectHandle_t* h); Display the content associated with the redirection described by the; opaque handle 'h'. void AddDynamicPath(const char* pathname); Add a new directory to the dynamic path. const char* GetDynamicPath(); Return the dynamic path (used to find shared libraries). void SetDynamicPath(const char* pathname); Set the dynamic path to a new value.; If the value of 'path' is zero, the dynamic path is reset to its; default value. int Load(const char* module, const char* entry = """", Bool_t system = kFALSE); Load a shared library. Returns 0 on successful loading, 1 in; case lib was already loaded, -1 in case lib does not exist; or in case of error and -2 in case of version mismatch.; When entry is specified the loaded lib is; searched for this entry point (return -1 when entry does not exist,; 0 otherwise). When the system flag is kTRUE, the library is consisdered; a permanent systen library that should not be unloaded during the; course of the session. char * DynamicPathName(const char* lib, Bool_t quiet = kFALSE); Need to return the equivalent of LD_LIBRARY_PATH. Func_t DynFindSymbol(const char* module, const char* entry); Find specific entry point in specified library. Specify ""*"" for lib; to search in all libraries. void Unload(const char* module); Unload a shared library. void ListSymbols(const char* module, const char* re = """"); List symbols in a shared library. void ListLibraries(const char* regexp = """"); List all loaded shared libraries. Regexp is a wildcard expression,; see TRegexp::MakeWildcard. const char * GetLinkedLibraries(); Get list of shared libraries loaded at the start",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSystem.html:33261,error,error,33261,root/html528/TSystem.html,https://root.cern,https://root.cern/root/html528/TSystem.html,3,['error'],['error']
Availability,"ly();; 4215 server.sin_port = sport;; 4216 ; 4217 // Create socket; 4218 int sock;; 4219 if ((sock = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {; 4220 ::SysError(""TUnixSystem::UnixUdpConnect"", ""socket (%s:%d)"",; 4221 hostname, port);; 4222 return -1;; 4223 }; 4224 ; 4225 while (connect(sock, (struct sockaddr*) &server, sizeof(server)) == -1) {; 4226 if (GetErrno() == EINTR); 4227 ResetErrno();; 4228 else {; 4229 ::SysError(""TUnixSystem::UnixUdpConnect"", ""connect (%s:%d)"",; 4230 hostname, port);; 4231 close(sock);; 4232 return -1;; 4233 }; 4234 }; 4235 return sock;; 4236}; 4237 ; 4238////////////////////////////////////////////////////////////////////////////////; 4239/// Connect to a Unix domain socket.; 4240 ; 4241int TUnixSystem::UnixUnixConnect(int port); 4242{; 4243 return UnixUnixConnect(TString::Format(""%s/%d"", kServerPath, port));; 4244}; 4245 ; 4246////////////////////////////////////////////////////////////////////////////////; 4247/// Connect to a Unix domain socket. Returns -1 in case of error.; 4248 ; 4249int TUnixSystem::UnixUnixConnect(const char *sockpath); 4250{; 4251 if (!sockpath || strlen(sockpath) <= 0) {; 4252 ::SysError(""TUnixSystem::UnixUnixConnect"", ""socket path undefined"");; 4253 return -1;; 4254 }; 4255 ; 4256 int sock;; 4257 struct sockaddr_un unserver;; 4258 unserver.sun_family = AF_UNIX;; 4259 ; 4260 if (strlen(sockpath) > sizeof(unserver.sun_path)-1) {; 4261 ::Error(""TUnixSystem::UnixUnixConnect"", ""socket path %s, longer than max allowed length (%u)"",; 4262 sockpath, (UInt_t)sizeof(unserver.sun_path)-1);; 4263 return -1;; 4264 }; 4265 strlcpy(unserver.sun_path, sockpath, sizeof(unserver.sun_path));; 4266 ; 4267 // Open socket; 4268 if ((sock = socket(AF_UNIX, SOCK_STREAM, 0)) < 0) {; 4269 ::SysError(""TUnixSystem::UnixUnixConnect"", ""socket"");; 4270 return -1;; 4271 }; 4272 ; 4273 while (connect(sock, (struct sockaddr*) &unserver, strlen(unserver.sun_path)+2) == -1) {; 4274 if (GetErrno() == EINTR); 4275 ResetErrno();; 4276 else {; 4277 ::SysEr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8cxx_source.html:135998,error,error,135998,doc/master/TUnixSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8cxx_source.html,1,['error'],['error']
Availability,"lyEurope.C File ReferenceTutorials » Histograms tutorials. Detailed Description; This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ; The initial data are stored in TMultiGraphs. They represent the european countries. The histogram filling is done according to a Mercator projection, therefore the bin contains should be proportional to the real surface of the countries.; The initial data have been downloaded from: http://www.maproom.psu.edu/dcw/ This database was developed in 1991/1992 and national boundaries reflect political reality as of that time.; The script is shooting npoints (script argument) randomly over the Europe area. The number of points inside the countries should be proportional to the country surface The estimated surface is compared to the surfaces taken from wikipedia. ; Partitioning: Real Time = 1.31 seconds Cpu Time = 1.31 seconds; Filling : Real Time = 4.01 seconds Cpu Time = 4.01 seconds; THPoly Europe surface estimation error wrt wikipedia = 1.260096 per cent when using 500000 points; ; void th2polyEurope(Int_t npoints=500000); {; Int_t i,j;; Double_t lon1 = -25;; Double_t lon2 = 35;; Double_t lat1 = 34;; Double_t lat2 = 72;; Double_t R = (lat2-lat1)/(lon2-lon1);; Int_t W = 800;; Int_t H = (Int_t)(R*800);; gStyle->SetStatX(0.28);; gStyle->SetStatY(0.45);; gStyle->SetStatW(0.15);; ; // Canvas used to draw TH2Poly (the map); TCanvas *ce = new TCanvas(""ce"", ""ce"",0,0,W,H);; ce->ToggleEventStatus();; ce->SetGridx();; ce->SetGridy();; ; // Real surfaces taken from Wikipedia.; const Int_t nx = 36;; // see http://en.wikipedia.org/wiki/Area_and_population_of_European_countries; const char *countries[nx] = {; ""france"", ""spain"", ""sweden"", ""germany"", ""finland"",; ""norway"", ""poland"", ""italy"", ""yugoslavia"", ""united_kingdom"",; ""romania"", ""belarus"",""greece"", ""czechoslovakia"",""bulgaria"",; ""iceland"", ""hungary"",""portugal"",""austria"", ""ireland"",; ""lithuania"", ""latvia"", ""estonia"", ""denmark"", ""netherlands"",; ""switz",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/th2polyEurope_8C.html:1152,error,error,1152,doc/master/th2polyEurope_8C.html,https://root.cern,https://root.cern/doc/master/th2polyEurope_8C.html,1,['error'],['error']
Availability,"lynomialIntegral(double const *coeffs, int nCoeffs, int lowestOrder, double xMin, double xMax); 482{; 483 int denom = lowestOrder + nCoeffs;; 484 double min = coeffs[nCoeffs - 1] / double(denom);; 485 double max = coeffs[nCoeffs - 1] / double(denom);; 486 ; 487 for (int i = nCoeffs - 2; i >= 0; i--) {; 488 denom--;; 489 min = (coeffs[i] / double(denom)) + xMin * min;; 490 max = (coeffs[i] / double(denom)) + xMax * max;; 491 }; 492 ; 493 max = max * std::pow(xMax, 1 + lowestOrder);; 494 min = min * std::pow(xMin, 1 + lowestOrder);; 495 ; 496 return max - min + (pdfMode && lowestOrder > 0.0 ? xMax - xMin : 0.0);; 497}; 498 ; 499/// use fast FMA if available, fall back to normal arithmetic if not; 500inline double fast_fma(double x, double y, double z) noexcept; 501{; 502#if defined(FP_FAST_FMA) // check if std::fma has fast hardware implementation; 503 return std::fma(x, y, z);; 504#else // defined(FP_FAST_FMA); 505 // std::fma might be slow, so use a more pedestrian implementation; 506#if defined(__clang__); 507#pragma STDC FP_CONTRACT ON // hint clang that using an FMA is okay here; 508#endif // defined(__clang__); 509 return (x * y) + z;; 510#endif // defined(FP_FAST_FMA); 511}; 512 ; 513inline double chebychevIntegral(double const *coeffs, unsigned int nCoeffs, double xMin, double xMax, double xMinFull,; 514 double xMaxFull); 515{; 516 const double halfrange = .5 * (xMax - xMin);; 517 const double mid = .5 * (xMax + xMin);; 518 ; 519 // the full range of the function is mapped to the normalised [-1, 1] range; 520 const double b = (xMaxFull - mid) / halfrange;; 521 const double a = (xMinFull - mid) / halfrange;; 522 ; 523 // coefficient for integral(T_0(x)) is 1 (implicit), integrate by hand; 524 // T_0(x) and T_1(x), and use for n > 1: integral(T_n(x) dx) =; 525 // (T_n+1(x) / (n + 1) - T_n-1(x) / (n - 1)) / 2; 526 double sum = b - a; // integrate T_0(x) by hand; 527 ; 528 const unsigned int iend = nCoeffs;; 529 if (iend > 0) {; 530 {; 531 // integrate T_1(x) by h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MathFuncs_8h_source.html:16325,avail,available,16325,doc/master/MathFuncs_8h_source.html,https://root.cern,https://root.cern/doc/master/MathFuncs_8h_source.html,1,['avail'],['available']
Availability,"lysisProxy_Process(Long64_t);; SlaveTerminate -> void h1analysisProxy_SlaveTerminate();; Terminate -> void h1analysisProxy_Terminate();. If a file name macrofilename.h (or .hh, .hpp, .hxx, .hPP, .hXX) exist it is included before the declaration of the proxy class. This can be used in particular to insure that the include files needed by the macro file are properly loaded.; The default histogram is accessible via the variable named 'htemp'.; If the library of the classes describing the data in the branch is loaded, the skeleton will add the needed include statements and give the ability to access the object stored in the branches.; To draw px using the file `hsimple.root (generated by the hsimple.C tutorial), we need a file named hsimple.cxx:; double hsimple() {; return px;; }; hsimpleDefinition hsimple.py:1; MakeProxy can then be used indirectly via the TTree::Draw interface as follow: new TFile(""hsimple.root""); ntuple->Draw(""hsimple.cxx"");; Drawth1 Draw(); A more complete example is available in the tutorials directory: h1analysisProxy.cxx , h1analysProxy.h and h1analysisProxyCut.C which reimplement the selector found in h1analysis.C ; Implements TVirtualTreePlayer.; Definition at line 1925 of file TTreePlayer.cxx. ◆ MakeReader(). Int_t TTreePlayer::MakeReader ; (; const char * ; classname, . Option_t * ; option . ). overridevirtual . Generate skeleton selector class for this tree. ; The following files are produced: classname.h and classname.C. If classname is 0, the selector will be called ""nameoftree"". The option can be used to specify the branches that will have a data member.; If option is empty, readers will be generated for each leaf.; If option is ""@"", readers will be generated for the topmost branches.; Individual branches can also be picked by their name:; ""X"" generates readers for leaves of X.; ""@X"" generates a reader for X as a whole.; ""@X;Y"" generates a reader for X as a whole and also readers for the leaves of Y. For further examples see the figure bel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreePlayer.html:36273,avail,available,36273,doc/master/classTTreePlayer.html,https://root.cern,https://root.cern/doc/master/classTTreePlayer.html,1,['avail'],['available']
Availability,"lyticalIntegral(). int RooLegacyExpPoly::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 199 of file RooLegacyExpPoly.cxx. ◆ getFormulaExpression(). std::string RooLegacyExpPoly::getFormulaExpression ; (; bool ; expand); const. Definition at line 299 of file RooLegacyExpPoly.cxx. ◆ getLogVal(). double RooLegacyExpPoly::getLogVal ; (; const RooArgSet * ; set); const. overridevirtual . Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ; Reimplemented from RooAbsPdf.; Definition at line 191 of file RooLegacyExpPoly.cxx. ◆ IsA(). TClass * RooLegacyExpPoly::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 57 of file RooLegacyExpPoly.h. ◆ lowestOrder(). int RooLegacyExpPoly::lowestOrder ; (; ); const. inline . Return the order for the first coefficient in the list. ; Definition at line 33 of file RooLegacyExpPoly.h. ◆ Streamer(). void RooLegacyExpPoly::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooLegacyExpPoly::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 57 of file RooLegacyExpPoly.h. ◆ x(). RooAbsReal const & RooLegacyExpPoly::x ; (; ); const. inline . Get the x variable. ; Definition at line 27 of file RooLegacyExpPoly.h.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLegacyExpPoly.html:79034,error,error,79034,doc/master/classRooLegacyExpPoly.html,https://root.cern,https://root.cern/doc/master/classRooLegacyExpPoly.html,1,['error'],['error']
Availability,"lyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Return pseud-code that indicates if all components can do internal generation (1) or not (0) ;  ; TClass * IsA () const override;  ; bool isDirectGenSafe (const RooAbsArg &arg) const override;  Direct generation is safe if all components say so. ;  ; const RooArgList & pdfList () const;  Return list of component p.d.fs. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooAddModel to more intuitively reflect the contents of the product operator construction. ;  ; void resetErrorCounters (Int_t resetValue=10) override;  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; bool selfNormalized () const override;  Model is self normalized when used as p.d.f. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooResolutionModel;  RooResolutionModel ()=default;  ;  RooResolutionModel (const char *name, const char *title, RooAbsRealLValue &x);  Constructor with convolution variable 'x'. ;  ;  RooResolutionModel (const RooResolutionModel &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooResolutionModel () override;  Destructor. ;  ; const RooFormulaVar & basis () const;  ; const RooRealVar & basisConvVar () const;  Return the convolution variable of the selection basis function. ;  ; virtual void changeBasis (RooFormulaVar *basis);  Change the basis function we convolute with. ;  ; RooAbsRealLValue & convVar () const;  Ret",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddModel.html:4601,error,error,4601,doc/master/classRooAddModel.html,https://root.cern,https://root.cern/doc/master/classRooAddModel.html,2,['error'],['error']
Availability,"l~TColorWheel(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TCanvas*GetCanvas() const; virtual Int_tGetColor(Int_t px, Int_t py) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TColorWheel.html:2509,error,error,2509,root/html526/TColorWheel.html,https://root.cern,https://root.cern/root/html526/TColorWheel.html,7,['error'],['error']
Availability,"l~TLDAPServer(); voidTObject::AbstractMethod(const char* method) const; Int_tAddEntry(TLDAPEntry& entry); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tDeleteEntry(const char* dn); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TLDAPResult*GetAttributeTypes(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; const char*GetNamingContexts(); TLDAPResult*GetObjectClasses(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetSubschemaSubentry(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLDAPServer.html:1469,error,error,1469,root/html528/TLDAPServer.html,https://root.cern,https://root.cern/root/html528/TLDAPServer.html,3,['error'],['error']
Availability,"l~TMixture(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidDefineElement(Int_t n, Float_t a, Float_t z, Float_t w); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Float_tTMaterial::GetA() const; Float_t*GetAmixt() const; virtual Float_tTMaterial::GetDensity() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Float_tTMaterial::GetInterLength() const; virtual const char*TNamed::GetName() const; Int_tGetNmixt() const; virtual Int_tTMaterial::GetNumber() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMixture.html:1476,error,error,1476,root/html528/TMixture.html,https://root.cern,https://root.cern/root/html528/TMixture.html,6,['error'],['error']
Availability,"l~TPolyMarker3D(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidCopy(TObject& polymarker) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawPolyMarker(Int_t n, Float_t* p, Marker_t marker, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Int_tGetLastPoint() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual Int_tGetN() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*GetOption() const; virtual Float_t*GetP() const; virtual voidGetPoint(Int_t n, Float_t& x, Float_t& y, Float_t& z) const; virtual voidGetPoint(Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPolyMarker3D.html:2379,error,error,2379,root/html528/TPolyMarker3D.html,https://root.cern,https://root.cern/root/html528/TPolyMarker3D.html,6,['error'],['error']
Availability,"l~TSVDUnfold(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Double_tComputeChiSquared(const TH1D& truspec, const TH1D& unfspec); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TH2D*GetAdetCovMatrix(Int_t ntoys, Int_t seed = 1); TH1D*GetD() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetKReg() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TH1D*GetSV() const; virtual const char*TObject::GetTitle() const; TH2D*GetUnfoldCovMatrix(const TH2D* cov, Int_t ntoys, Int_t seed = 1); virtual UInt_tTObject::GetUniqueID() const; TH2D*GetXinv() const; TH2D*GetXtau() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSVDUnfold.html:1686,error,error,1686,root/html530/TSVDUnfold.html,https://root.cern,https://root.cern/root/html530/TSVDUnfold.html,2,['error'],['error']
Availability,"l~TSVDUnfold(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Double_tComputeChiSquared(const TH1D& truspec, const TH1D& unfspec); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TH2D*GetAdetCovMatrix(Int_t ntoys, Int_t seed = 1); TH2D*GetBCov() const; TH1D*GetD() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetKReg() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TH1D*GetSV() const; virtual const char*TObject::GetTitle() const; TH2D*GetUnfoldCovMatrix(const TH2D* cov, Int_t ntoys, Int_t seed = 1); virtual UInt_tTObject::GetUniqueID() const; TH2D*GetXinv() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSVDUnfold.html:4288,error,error,4288,root/html534/TSVDUnfold.html,https://root.cern,https://root.cern/root/html534/TSVDUnfold.html,3,['error'],['error']
Availability,"l~TSpectrumTransform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEnhance(const Double_t* source, Double_t* destVector); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); voidFilterZonal(const Double_t* source, Double_t* destVector); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrumTransform.html:2387,error,error,2387,root/html602/TSpectrumTransform.html,https://root.cern,https://root.cern/root/html602/TSpectrumTransform.html,2,['error'],['error']
Availability,"l~TTreeReader(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); TTreeReader::Iterator_tbegin(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; TTreeReader::Iterator_tend() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tGetCurrentEntry() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetEntries(Bool_t force) const; TTreeReader::EEntryStatusGetEntryStatus() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; TTree*GetTree() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeReader.html:6554,error,error,6554,root/html602/TTreeReader.html,https://root.cern,https://root.cern/root/html602/TTreeReader.html,2,['error'],['error']
Availability,"l~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationMultiDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double Integral(const double* , const double* ); evaluate integral. void SetFunction(const ROOT::Math::IMultiGenFunction& ); set integration function. return Options(). void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options; (should be re-implemented by derived classes -if more options than tolerance exist. virtual ~VirtualIntegratorMultiDim(); destructor: no operation. {}. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html:2818,toler,tolerance,2818,root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__VirtualIntegratorMultiDim.html,1,['toler'],['tolerance']
Availability,"l~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationMultiDim::TypeType() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimVirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double Integral(const double* , const double* ); evaluate integral. void SetFunction(const ROOT::Math::IMultiGenFunction& ); set integration function. return Options(). void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options; (should be re-implemented by derived classes -if more options than tolerance exist. virtual ~VirtualIntegratorMultiDim(); destructor: no operation. {}. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__VirtualIntegratorMultiDim.html:2818,toler,tolerance,2818,root/html604/ROOT__Math__VirtualIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__VirtualIntegratorMultiDim.html,1,['toler'],['tolerance']
Availability,"l _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static RooArgSet _emptySet;  Supports named argument constructor. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions;  RooChi2Var (const char *name, const char *title, RooAbsReal &func, RooDataHist &data, const RooArgSet &projDeps, FuncMode funcMode, RooAbsTestStatistic::Configuration const &cfg, RooDataHist::ErrorType etype);  . Additional Inherited Members;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChi2Var.html:66180,error,error,66180,doc/master/classRooChi2Var.html,https://root.cern,https://root.cern/doc/master/classRooChi2Var.html,1,['error'],['error']
Availability,"m ""; 1147 << a[i] << std::endl;; 1148 }; 1149 ; 1150 for (i=0; i < n; i++) {; 1151 fArray[i+1] = sumw[a[i]];; 1152 fSumw2.fArray[i+1] = errors[a[i]];; 1153 fBinEntries.fArray[i+1] = ent[a[i]];; 1154 if (fBinSumw2.fN); 1155 fBinSumw2.fArray[i+1] = binsw2[a[i]];; 1156 }; 1157 }; 1158 // need to set to zero the statistics if axis has been sorted; 1159 // see for example TH3::PutStats for definition of s vector; 1160 bool labelsAreSorted = kFALSE;; 1161 for (i = 0; i < n; ++i) {; 1162 if (a[i] != i) {; 1163 labelsAreSorted = kTRUE;; 1164 break;; 1165 }; 1166 }; 1167 if (labelsAreSorted) {; 1168 double s[TH1::kNstat];; 1169 GetStats(s);; 1170 // if (iaxis == 1) {; 1171 s[2] = 0; // fTsumwx; 1172 s[3] = 0; // fTsumwx2; 1173 PutStats(s);; 1174 }; 1175}; 1176 ; 1177////////////////////////////////////////////////////////////////////////////////; 1178///Merge all histograms in the collection in this histogram.; 1179///; 1180/// This function computes the min/max for the x axis,; 1181/// compute a new number of bins, if necessary,; 1182/// add bin contents, errors and statistics.; 1183/// If overflows are present and limits are different the function will fail.; 1184/// The function returns the total number of entries in the result histogram; 1185/// if the merge is successful, -1 otherwise.; 1186///; 1187/// IMPORTANT remark. The axis x may have different number; 1188/// of bins and different limits, BUT the largest bin width must be; 1189/// a multiple of the smallest bin width and the upper limit must also; 1190/// be a multiple of the bin width.; 1191 ; 1192Long64_t TProfile::Merge(TCollection *li); 1193{; 1194 return TProfileHelper::Merge(this, li);; 1195}; 1196 ; 1197////////////////////////////////////////////////////////////////////////////////; 1198/// Performs the operation: this = this*c1*f1; 1199///; 1200/// The function return kFALSE if the Multiply operation failed; 1201 ; 1202Bool_t TProfile::Multiply(TF1 *f1, Double_t c1); 1203{; 1204 ; 1205 if (!f1) {; 1206 E",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile_8cxx_source.html:43189,error,errors,43189,doc/master/TProfile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile_8cxx_source.html,1,['error'],['errors']
Availability,"m *item, Bool_t state, Bool_t draw);  Highlight item children. ;  ; void HighlightItem (TGListTreeItem *item);  Highlight item. ;  ; void HighlightItem (TGListTreeItem *item, Bool_t state, Bool_t draw);  Highlight tree item. ;  ; void Home (Bool_t select=kFALSE) override;  Move content to the top. ;  ; TClass * IsA () const override;  ; Bool_t IsEventHandled () const;  ; virtual void KeyPressed (TGListTreeItem *entry, UInt_t keysym, UInt_t mask);  Signal emitted when keyboard key pressed. ;  ; void LineDown (Bool_t select=kFALSE) override;  Move content one item-size down. ;  ; void LineUp (Bool_t select=kFALSE) override;  Move content one item-size up. ;  ; virtual void MouseOver (TGListTreeItem *entry);  Signal emitted when pointer is over entry. ;  ; virtual void MouseOver (TGListTreeItem *entry, UInt_t mask);  Signal emitted when pointer is over entry. ;  ; void OpenItem (TGListTreeItem *item);  Open item in list tree (i.e. show child items). ;  ; void PageDown (Bool_t select=kFALSE) override;  Move content one page down. ;  ; void PageUp (Bool_t select=kFALSE) override;  Move content one page up. ;  ; Int_t RecursiveDeleteItem (TGListTreeItem *item, void *userData);  Delete item with fUserData == ptr. ;  ; void RenameItem (TGListTreeItem *item, const char *string);  Rename item in list tree. ;  ; void RenameSelected (const char *string);  ; Int_t Reparent (TGListTreeItem *item, TGListTreeItem *newparent);  Make newparent the new parent of item. ;  ; Int_t ReparentChildren (TGListTreeItem *item, TGListTreeItem *newparent);  Make newparent the new parent of the children of item. ;  ; virtual void ReturnPressed (TGListTreeItem *entry);  Emit ReturnPressed() signal. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a list tree widget as a C++ statements on output stream out. ;  ; void Search (Bool_t close=kTRUE) override;  Invokes search dialog. Looks for item with the entered name. ;  ; void SetAutoCheckBoxPic (Bool_t on);  ; void Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListTree.html:8672,down,down,8672,doc/master/classTGListTree.html,https://root.cern,https://root.cern/doc/master/classTGListTree.html,1,['down'],['down']
Availability,"m = -1111)MENU ; virtual voidTF1::SetMinimum(Double_t minimum = -1111)MENU ; virtual voidTFormula::SetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTF1::SetNDF(Int_t ndf); virtual voidTF1::SetNpx(Int_t npx = 100)MENU ; virtual voidTFormula::SetNumber(Int_t number); virtual voidTF1::SetNumberFitPoints(Int_t npfits); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFormula::SetParameter(const char* name, Double_t parvalue); virtual voidTFormula::SetParameter(Int_t ipar, Double_t parvalue); virtual voidTFormula::SetParameters(const Double_t* params); virtual voidTFormula::SetParameters(Double_t p0, Double_t p1, Double_t p2 = 0, Double_t p3 = 0, Double_t p4 = 0, Double_t p5 = 0, Double_t p6 = 0, Double_t p7 = 0, Double_t p8 = 0, Double_t p9 = 0, Double_t p10 = 0)MENU ; virtual voidTF1::SetParent(TObject* p = 0); virtual voidTF1::SetParError(Int_t ipar, Double_t error); virtual voidTF1::SetParErrors(const Double_t* errors); virtual voidTF1::SetParLimits(Int_t ipar, Double_t parmin, Double_t parmax); virtual voidTFormula::SetParName(Int_t ipar, const char* name); virtual voidTFormula::SetParNames(const char* name0 = ""p0"", const char* name1 = ""p1"", const char* name2 = ""p2"", const char* name3 = ""p3"", const char* name4 = ""p4"", const char* name5 = ""p5"", const char* name6 = ""p6"", const char* name7 = ""p7"", const char* name8 = ""p8"", const char* name9 = ""p9"", const char* name10 = ""p10"")MENU ; virtual voidTF1::SetRange(Double_t xmin, Double_t xmax)MENU ; virtual voidTF1::SetRange(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax); virtual voidTF1::SetRange(Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax); virtual voidTF1::SetSavedPoint(Int_t point, Double_t value); virtual voidTF1::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetXY(Double_t xy)MENU ; virtual voidShowMembers(TMemberInspector& insp) const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TF12.html:14042,error,errors,14042,root/html602/TF12.html,https://root.cern,https://root.cern/root/html602/TF12.html,1,['error'],['errors']
Availability,"m Run...Definition TApplication.cxx:1927; TApplication::ApplicationNamevirtual const char * ApplicationName() constDefinition TApplication.h:128; TApplication::ProcessFilevirtual Longptr_t ProcessFile(const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE)Process a file containing a C++ macro.Definition TApplication.cxx:1720; TApplication::ReturnPressedvirtual void ReturnPressed(char *text)Emit signal when return key was pressed.Definition TApplication.cxx:1957; TApplication::kExpression@ kExpressionDefinition TApplication.h:49; TApplication::NoLogOptBool_t NoLogOpt() constDefinition TApplication.h:143; TApplication::NoLogoOptBool_t NoLogoOpt() constDefinition TApplication.h:144; TApplication::WorkingDirectoryconst char * WorkingDirectory() constDefinition TApplication.h:147; TApplication::QuitOptBool_t QuitOpt() constDefinition TApplication.h:145; TApplication::ArgcInt_t Argc() constDefinition TApplication.h:140; TApplication::ProcessRemotevirtual Longptr_t ProcessRemote(const char *line, Int_t *error=nullptr)Process the content of a line starting with "".R"" (already stripped-off) The format is.Definition TApplication.cxx:1485; TApplication::fAppRemoteTApplication * fAppRemoteDefinition TApplication.h:80; TApplication::SetSignalHandlervoid SetSignalHandler(TSignalHandler *sh)Definition TApplication.h:92; TBenchmarkThis class is a ROOT utility to help benchmarking applications.Definition TBenchmark.h:29; TClassTable::GetDictstatic DictFuncPtr_t GetDict(const char *cname)Given the class name returns the Dictionary() function of a class (uses hash of name).Definition TClassTable.cxx:674; TEnv::GetValuevirtual Int_t GetValue(const char *name, Int_t dflt) constReturns the integer value for a resource.Definition TEnv.cxx:491; TFileHandlerDefinition TSysEvtHandler.h:65; TFileHandler::Removevoid Remove() overrideRemove file event handler from system file handler list.Definition TSysEvtHandler.cxx:137; TFileHandler::Addvoid Add() overrideAdd file event handler to system f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRint_8cxx_source.html:34100,error,error,34100,doc/master/TRint_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TRint_8cxx_source.html,1,['error'],['error']
Availability,m Test error found - save the configuration ; : 1 | 0.66619 0.628056 0.587341 0.0468945 20605.2 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.605139 0.593298 0.586597 0.0468674 20632.5 0; : 3 Minimum Test error found - save the configuration ; : 3 | 0.581823 0.587355 0.586416 0.0468644 20639.4 0; : 4 | 0.575813 0.593823 0.586862 0.0466947 20615.8 1; : 5 Minimum Test error found - save the configuration ; : 5 | 0.572257 0.578309 0.587324 0.0469531 20608.1 0; : 6 | 0.567347 0.582461 0.586969 0.0467966 20615.6 1; : 7 Minimum Test error found - save the configuration ; : 7 | 0.564553 0.577241 0.588162 0.0470086 20578.3 0; : 8 | 0.56278 0.582039 0.588324 0.0468355 20565.5 1; : 9 | 0.559377 0.582454 0.588676 0.0469029 20554.7 2; : 10 | 0.55743 0.581686 0.590386 0.0469245 20490.9 3; : 11 | 0.555638 0.57854 0.591068 0.0469776 20467.2 4; : 12 | 0.556914 0.579893 0.589121 0.0470111 20542 5; : 13 | 0.553226 0.579356 0.590241 0.0470372 20500.6 6; : 14 Minimum Test error found - save the configuration ; : 14 | 0.551359 0.575116 0.590392 0.0472515 20503 0; : 15 | 0.550484 0.575412 0.59006 0.0471061 20510 1; : 16 Minimum Test error found - save the configuration ; : 16 | 0.548532 0.572184 0.591616 0.0473333 20460 0; : 17 | 0.544023 0.585132 0.591038 0.0471532 20474.9 1; : 18 | 0.543801 0.585958 0.59089 0.0471671 20481 2; : 19 | 0.543073 0.577544 0.59151 0.0472011 20459 3; : 20 | 0.540305 0.585505 0.591485 0.0472123 20460.3 4; : 21 | 0.541092 0.577737 0.591401 0.0472411 20464.6 5; : 22 | 0.537394 0.582432 0.592336 0.0472536 20429.9 6; : 23 | 0.536715 0.589196 0.591864 0.0475573 20459.1 7; : 24 | 0.537796 0.579234 0.591655 0.0473491 20459.1 8; : 25 | 0.534347 0.586832 0.601681 0.047397 20090.8 9; : 26 | 0.531742 0.582802 0.613513 0.0496834 19750.6 10; : 27 | 0.532714 0.581886 0.617515 0.0480417 19554.9 11; : ; : Elapsed time for training with 14000 events: 16.1 sec ; : Evaluate deep neural network on CPU using batches with size = 128; : ; DNN_CPU : [dataset] : Ev,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:25302,error,error,25302,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['error'],['error']
Availability,"m The array stats must be correctly dimensione...Definition TH1.cxx:7833; TH1::SetTitlevoid SetTitle(const char *title) overrideChange/set the title.Definition TH1.cxx:6718; TH1::GetNbinsYvirtual Int_t GetNbinsY() constDefinition TH1.h:298; TH1::GetNbinsZvirtual Int_t GetNbinsZ() constDefinition TH1.h:299; TH1::GetDimensionvirtual Int_t GetDimension() constDefinition TH1.h:283; TH1::kIsAverage@ kIsAverageBin contents are average (used by Add)Definition TH1.h:171; TH1::Resetvirtual void Reset(Option_t *option="""")Reset this histogram: contents, errors, etc.Definition TH1.cxx:7103; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::GetNcellsvirtual Int_t GetNcells() constDefinition TH1.h:300; TH1::GetBinvirtual Int_t GetBin(Int_t binx, Int_t biny=0, Int_t binz=0) constReturn Global bin number corresponding to binx,y,z.Definition TH1.cxx:4961; TH1::GetNbinsXvirtual Int_t GetNbinsX() constDefinition TH1.h:297; TH1::Addvirtual Bool_t Add(TF1 *h1, Double_t c1=1, Option_t *option="""")Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2),...Definition TH1.cxx:826; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::GetYaxisTAxis * GetYaxis()Definition TH1.h:325; TH1::SetBinContentvirtual void SetBinContent(Int_t bin, Double_t content)Set bin content see convention for numbering bins in TH1::GetBin In case the bin number is greater th...Definition TH1.cxx:9222; TH1::GetBinLowEdgevirtual Double_t GetBinLowEdge(Int_t bin) constReturn bin lower edge for 1D histogram.Definition TH1.cxx:9152; TH1::GetEntriesvirtual Double_t GetEntries() constReturn the current number of entries.Definition TH1.cxx:4423; TH1::SetNamevoid SetName(const char *name) overrideChange the name of this histogram.Definition TH1.cxx:8960; TH1::Paintvoid Paint(Option_t *option="""") overrideControl routine to paint any kind of histograms.Definition TH1.cxx:6206; TH1::kNstat@ kNstatSize of statistics data (up to TProfile3D)Defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEfficiency_8cxx_source.html:179452,error,errors,179452,doc/master/TEfficiency_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEfficiency_8cxx_source.html,1,['error'],['errors']
Availability,"m a MINOS minimisation. ;  ; Double_t EvaluateFCN (const Double_t *par);  ; void ExcludeBin (Int_t bin);  Exclude the given bin from the fit. ;  ; TFitResultPtr Fit ();  Perform the fit with the default UP value. ;  ; Double_t GetChisquare () const;  Return the likelihood ratio Chi-squared (chi2) for the fit. ;  ; ROOT::Fit::Fitter * GetFitter () const;  Give direct access to the underlying fitter class. ;  ; TH1 * GetMCPrediction (Int_t parm) const;  Return the adjusted MC template (Aji) for template (parm). ;  ; Int_t GetNDF () const;  return the number of degrees of freedom in the fit the fNDF parameter has been previously computed during a fit. ;  ; TH1 * GetPlot ();  Return the ""template prediction"" corresponding to the fit result (this is not the same as the weighted sum of template distributions, as template statistical uncertainties are taken into account). ;  ; Double_t GetProb () const;  return the fit probability ;  ; void GetResult (Int_t parm, Double_t &value, Double_t &error) const;  Obtain the fit result for parameter <parm> (the parameter numbering follows that of the input template vector). ;  ; void IncludeBin (Int_t bin);  Include the given bin in the fit, if it was excluded before using ExcludeBin(). ;  ; TClass * IsA () const override;  ; void ReleaseRangeX ();  Release restrictions on the X range of the histogram to be used in the fit. ;  ; void ReleaseRangeY ();  Release restrictions on the Y range of the histogram to be used in the fit. ;  ; void ReleaseRangeZ ();  Release restrictions on the Z range of the histogram to be used in the fit. ;  ; void SetData (TH1 *data);  Change the histogram to be fitted to. ;  ; void SetMC (Int_t parm, TH1 *MC);  Change the histogram for template number <parm>. ;  ; void SetRangeX (Int_t low, Int_t high);  Set the X range of the histogram to be used in the fit. ;  ; void SetRangeY (Int_t low, Int_t high);  Set the Y range of the histogram to be used in the fit (2D or 3D histograms only). ;  ; void SetRangeZ (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFractionFitter.html:8036,error,error,8036,doc/master/classTFractionFitter.html,https://root.cern,https://root.cern/doc/master/classTFractionFitter.html,1,['error'],['error']
Availability,"m a previous run); the bit is set by; UploadPackage, since the check is done elsewhere.; kForward (0x4) if set, ask server to forward the file to slave; or submaster (meaningless for slave servers).; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache. Definition at line 6894 of file TProof.cxx. ◆ SendGroupView(). Int_t TProof::SendGroupView ; (; ). private . Send to all active slaves servers the current slave group size and their unique id. ; Returns number of active slaves. Returns -1 in case of error. ; Definition at line 6460 of file TProof.cxx. ◆ SendingLogToWindow(). Bool_t TProof::SendingLogToWindow ; (; ); const. inline . Definition at line 1016 of file TProof.h. ◆ SendInitialState(). Int_t TProof::SendInitialState ; (; ). private . Transfer the initial (i.e. ; current) state of the master to all slave servers. Currently the initial state includes: log level. Returns the number of active slaves. Returns -1 in case of error. ; Definition at line 6774 of file TProof.cxx. ◆ SendInputData(). Int_t TProof::SendInputData ; (; TQueryResult * ; qr, . TProof * ; p, . TString & ; emsg . ). staticprotected . Send the input data file to the workers. ; Definition at line 12380 of file TProof.cxx. ◆ SendInputDataFile(). void TProof::SendInputDataFile ; (; ). protectedvirtual . Send the input data objects to the master; the objects are taken from the dedicated list and / or the specified file. ; If the fInputData is empty the specified file is sent over. If there is no specified file, a file named ""inputdata.root"" is created locally with the content of fInputData and sent over to the master. If both fInputData and the specified file are not empty, a copy of the file is made locally and augmented with the content of fInputData. ; Reimplemented in TProofLite.; Definition at line 9612 of file TProof.cxx. ◆ SendLogToWindow(). void TProof::SendLogToWindow ; (; Bool_t ; mode). inline . Definition at line 1017 o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:139849,error,error,139849,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['error'],['error']
Availability,"m a string. ;  ; TString ToLower (const TString &s);  Return a lower-case version of str. ;  ; TString ToUpper (const TString &s);  Return an upper-case version of str. ;  ; int UnEscChar (const char *src, char *dst, int dstlen, char *specchars, char escchar);  Un-escape specchars in src from escchar and copy to dst. ;  . Function Documentation. ◆ Compress(). char * Compress ; (; const char * ; str). Remove all blanks from the string str. ; The returned string has to be deleted by the user. ; Definition at line 2572 of file TString.cxx. ◆ EscChar(). int EscChar ; (; const char * ; src, . char * ; dst, . int ; dstlen, . char * ; specchars, . char ; escchar . ). Escape specchars in src with escchar and copy to dst. ; Definition at line 2593 of file TString.cxx. ◆ Form(). char * Form ; (; const char * ; fmt, .  ; ... . ). Formats a string in a circular formatting buffer. ; Removes the need to create and delete short lived strings. Don't pass Form() pointers from user code down to ROOT functions as the circular buffer may be overwritten downstream. Use Form() results immediately or use TString::Format() instead. ; Definition at line 2489 of file TString.cxx. ◆ Hash() [1/3]. UInt_t Hash ; (; const char * ; s). Return a case-sensitive hash value (endian independent). ; Definition at line 576 of file TString.cxx. ◆ Hash() [2/3]. UInt_t Hash ; (; const TString & ; s). inline . Definition at line 494 of file TString.h. ◆ Hash() [3/3]. UInt_t Hash ; (; const TString * ; s). inline . Definition at line 495 of file TString.h. ◆ operator!=() [1/8]. Bool_t operator!= ; (; const char * ; s1, . const TString & ; s2 . ). inline . Definition at line 807 of file TString.h. ◆ operator!=() [2/8]. Bool_t operator!= ; (; const char * ; s1, . const TSubString & ; s2 . ). inline . Definition at line 844 of file TString.h. ◆ operator!=() [3/8]. Bool_t operator!= ; (; const TString & ; s1, . const char * ; s2 . ). inline . Definition at line 789 of file TString.h. ◆ operator!=() [4/8]. Bool_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8h.html:6143,down,down,6143,doc/master/TString_8h.html,https://root.cern,https://root.cern/doc/master/TString_8h.html,2,['down'],"['down', 'downstream']"
Availability,"m bin content; The number of entries is set to the total bin content or (in case of weighted histogram); to number of effective entries. Double_t GetSumOfWeights() const; -*-*-*-*-*-*Return the sum of weights excluding under/overflows*-*-*-*-*. Double_t Integral(Option_t* option = """") const; Return integral of bin contents. Only bins in the bins range are considered.; By default the integral is computed as the sum of bin contents in the range.; if option ""width"" is specified, the integral is the sum of; the bin contents multiplied by the bin width in x. Double_t Integral(Int_t binx1, Int_t binx2, Option_t* option = """") const; Return integral of bin contents in range [binx1,binx2]; By default the integral is computed as the sum of bin contents in the range.; if option ""width"" is specified, the integral is the sum of; the bin contents multiplied by the bin width in x. Double_t IntegralAndError(Int_t binx1, Int_t binx2, Double_t& err, Option_t* option = """") const; Return integral of bin contents in range [binx1,binx2] and its error; By default the integral is computed as the sum of bin contents in the range.; if option ""width"" is specified, the integral is the sum of; the bin contents multiplied by the bin width in x.; the error is computed using error propagation from the bin errors assumming that; all the bins are uncorrelated. Double_t DoIntegral(Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t& err, Option_t* opt, Bool_t doerr = kFALSE) const; internal function compute integral and optionally the error between the limits; specified by the bin number values working for all histograms (1D, 2D and 3D). Double_t AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; Statistical test of compatibility in shape between; this histogram and h2, using the Anderson-Darling 2 sample test.; The AD 2 sample test formula are derived from the paper; F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; The test is implemented in root in t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:113090,error,error,113090,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,1,['error'],['error']
Availability,"m bin content; The number of entries is set to the total bin content or (in case of weighted histogram); to number of effective entries. Double_t GetSumOfWeights() const; -*-*-*-*-*-*Return the sum of weights excluding under/overflows*-*-*-*-*. Double_t Integral(Option_t* option = """") const; Return integral of bin contents. Only bins in the bins range are considered.; By default the integral is computed as the sum of bin contents in the range.; if option ""width"" is specified, the integral is the sum of; the bin contents multiplied by the bin width in x. Double_t Integral(Int_t binx1, Int_t binx2, Option_t* option = """") const; Return integral of bin contents in range [binx1,binx2]; By default the integral is computed as the sum of bin contents in the range.; if option ""width"" is specified, the integral is the sum of; the bin contents multiplied by the bin width in x. Double_t IntegralAndError(Int_t binx1, Int_t binx2, Double_t& err, Option_t* option = """") const; Return integral of bin contents in range [binx1,binx2] and its error; By default the integral is computed as the sum of bin contents in the range.; if option ""width"" is specified, the integral is the sum of; the bin contents multiplied by the bin width in x.; the error is computed using error propagation from the bin errors assumming that; all the bins are uncorrelated. Double_t DoIntegral(Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t& err, Option_t* opt, Bool_t doerr = kFALSE) const; internal function compute integral and optionally the error between the limits; specified by the bin number values working for all histograms (1D, 2D and 3D). Double_t KolmogorovTest(const TH1* h2, Option_t* option = """") const; Statistical test of compatibility in shape between; THIS histogram and h2, using Kolmogorov test. Default: Ignore under- and overflow bins in comparison. option is a character string to specify options; ""U"" include Underflows in test (also for 2-dim); ""O"" include Overflows (al",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:106591,error,error,106591,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,3,['error'],['error']
Availability,"m contour only. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. void Divide(TF1* f1, Double_t c1 = 1); Performs the operation: this = this/(c1*f1); if errors are defined (see TH1::Sumw2), errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Divide. void Divide(const TH1* h1); -*-*-*-*-*-*-*-*-*Divide this histogram by h1*-*-*-*-*-*-*-*-*-*-*-*-*. this = this/h1; if errors are defined (see TH1::Sumw2), errors are also recalculated.; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; if not already set.; The resulting errors are calculated assuming uncorrelated histograms.; See the other TH1::Divide that gives the possibility to optionally; compute binomial errors. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Scale. void Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """"); -*-*-*Replace contents of this histogram by the division of h1 by h2*-*-*. this = c1*h1/(c2*h2). if errors are defined (see TH1::Sumw2), errors are also recalculated; Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; if not already set.; The resulting errors are calculated assuming uncorrelated histograms.; However, if option =""B"" is specified, Binomial errors are computed.; In this case c1 and c2 do not make real sense and they are ignored. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Divide. Please note also that in the binomial case errors are calculated using standard; binomi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TH1.html:59853,error,errors,59853,root/html532/TH1.html,https://root.cern,https://root.cern/root/html532/TH1.html,1,['error'],['errors']
Availability,"m curve of the value of the specified real-valued expression; as a function of x. Use the optional precision parameter to control; how precisely the smooth curve is rasterized. Use the optional argument set; to specify how the expression should be normalized. Use the optional scale; factor to rescale the expression after normalization.; If shiftToZero is set, the entire curve is shift down to make the lowest; point in of the curve go through zero. RooCurve(const char* name, const char* title, const RooAbsFunc& func, Double_t xlo, Double_t xhi, UInt_t minPoints, Double_t prec = 0.001, Double_t resolution = 0.001, Bool_t shiftToZero = kFALSE, RooCurve::WingMode wmode = Extended, Int_t nEvalError = -1, Int_t doEEVal = kFALSE, Double_t eeVal = 0); Create a 1-dim curve of the value of the specified real-valued; expression as a function of x. Use the optional precision; parameter to control how precisely the smooth curve is; rasterized. If shiftToZero is set, the entire curve is shift; down to make the lowest point in of the curve go through zero. RooCurve(const char* name, const char* title, const RooCurve& c1, const RooCurve& c2, Double_t scale1 = 1., Double_t scale2 = 1.); Constructor of curve as sum of two other curves. Csum = scale1*c1 + scale2*c2. ~RooCurve(); Destructor. void initialize(); Perform initialization that is common to all curves. void shiftCurveToZero(Double_t prevYMax); Find lowest point in curve and move all points in curve so that; lowest point will go exactly through zero. void addPoints(const RooAbsFunc& func, Double_t xlo, Double_t xhi, Int_t minPoints, Double_t prec, Double_t resolution, RooCurve::WingMode wmode, Int_t numee = 0, Bool_t doEEVal = kFALSE, Double_t eeVal = 0., list<Double_t>* samplingHint = 0); Add points calculated with the specified function, over the range (xlo,xhi).; Add at least minPoints equally spaced points, and add sufficient points so that; the maximum deviation from the final straight-line segements is prec*(ymax-ymin),; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCurve.html:20583,down,down,20583,root/html602/RooCurve.html,https://root.cern,https://root.cern/root/html602/RooCurve.html,2,['down'],['down']
Availability,"m if there are multiple. ; Reimplemented from RooAbsReal.; Definition at line 912 of file RooAddPdf.cxx. ◆ printMetaArgs(). void RooAddPdf::printMetaArgs ; (; std::ostream & ; os); const. overridevirtual . Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the product operator construction. ; Reimplemented from RooAbsArg.; Definition at line 949 of file RooAddPdf.cxx. ◆ redirectServersHook(). bool RooAddPdf::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursiveStep . ). overrideprotectedvirtual . The cache manager. ; Hook function intercepting redirectServer calls.; Discard current normalization object if any server is redirected ; Reimplemented from RooAbsPdf.; Definition at line 955 of file RooAddPdf.cxx. ◆ resetErrorCounters(). void RooAddPdf::resetErrorCounters ; (; Int_t ; resetValue = 10). overridevirtual . Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ; Reimplemented from RooAbsPdf.; Definition at line 602 of file RooAddPdf.cxx. ◆ selectNormalization(). void RooAddPdf::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ; Reimplemented from RooAbsReal.; Definition at line 863 of file RooAddPdf.cxx. ◆ selectNormalizationRange(). void RooAddPdf::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ; Reimplemented from RooAbsReal.; Definition at line 886 of file RooAddPdf.cxx. ◆ selfNormalized(). bool RooAddPdf::selfNormalized ; (; ); const. inlineoverridevirtual . Shows if a PDF is self-normalized, which means that no ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAddPdf.html:92400,error,error,92400,doc/v632/classRooAddPdf.html,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html,4,['error'],['error']
Availability,"m of all added histograms; returns the maximum of all histograms if option ""nostack"". Double_t GetMinimum(Option_t* option = """"); returns the minimum of all added histograms; returns the minimum of all histograms if option ""nostack"". Int_t GetNhists() const; Return the number of histograms in the stack. TObjArray * GetStack(); Return pointer to Stack. Build it if not yet done. TAxis * GetXaxis() const; Get x axis of the histogram used to draw the stack. IMPORTANT NOTE; You must call Draw before calling this function. The returned histogram; depends on the selected Draw options. TAxis * GetYaxis() const; Get x axis of the histogram used to draw the stack. IMPORTANT NOTE; You must call Draw before calling this function. The returned histogram; depends on the selected Draw options. void ls(Option_t* option = """") const; List histograms in the stack. Long64_t Merge(TCollection* li, TFileMergeInfo* info); Merge the THStack in the TList into this stack.; Returns the total number of histograms in the result or -1 in case of an error. void Modified(); invalidate sum of histograms. void Paint(Option_t* chopt = """"); Paint the list of histograms.; By default, histograms are shown stacked.; - the first histogram is paint; - then the sum of the first and second, etc. If option ""nostack"" is specified, histograms are all paint in the same pad; as if the option ""same"" had been specified. If the option nostackb is specified histograms are all paint in the same pad; next to each other as bar plots. if option ""pads"" is specified, the current pad/canvas is subdivided into; a number of pads equal to the number of histograms and each histogram; is paint into a separate pad. By default the background of the histograms is erased before drawing the; histograms. The option ""noclear"" avoid this behaviour. This is useful; when drawing a THStack on top of an other plot. If the patterns used to; draw the histograms in the stack are transparents, then the plot behind; will be visible. See THistPain",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/THStack.html:14677,error,error,14677,root/html604/THStack.html,https://root.cern,https://root.cern/root/html604/THStack.html,1,['error'],['error']
Availability,"m of all added histograms; returns the maximum of all histograms if option ""nostack"". Double_t GetMinimum(Option_t* option = """"); returns the minimum of all added histograms; returns the minimum of all histograms if option ""nostack"". Int_t GetNhists() const; Return the number of histograms in the stack. TObjArray * GetStack(); Return pointer to Stack. Build it if not yet done. TAxis * GetXaxis() const; Get x axis of the histogram used to draw the stack. IMPORTANT NOTE; You must call Draw before calling this function. The returned histogram; depends on the selected Draw options. TAxis * GetYaxis() const; Get x axis of the histogram used to draw the stack. IMPORTANT NOTE; You must call Draw before calling this function. The returned histogram; depends on the selected Draw options. void ls(Option_t* option = """") const; List histograms in the stack. Long64_t Merge(TCollection* li, TFileMergeInfo* info); Merge the THStack in the TList into this stack.; Returns the total number of histograms in the result or -1 in case of an error. void Modified(); invalidate sum of histograms. void Paint(Option_t* chopt = """"); paint the list of histograms; By default, histograms are shown stacked.; -the first histogram is paint; -then the sum of the first and second, etc. If option ""nostack"" is specified, histograms are all paint in the same pad; as if the option ""same"" had been specified. if option ""pads"" is specified, the current pad/canvas is subdivided into; a number of pads equal to the number of histograms and each histogram; is paint into a separate pad. By default the background of the histograms is erased before drawing the; histograms. The option ""noclear"" avoid this behaviour. This is useful; when drawing a THStack on top of an other plot. If the patterns used to; draw the histograms in the stack are transparents, then the plot behind; will be visible. See THistPainter::Paint for a list of valid options. void Print(Option_t* chopt = """") const; Print the list of histograms. void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THStack.html:11133,error,error,11133,root/html534/THStack.html,https://root.cern,https://root.cern/root/html534/THStack.html,2,['error'],['error']
Availability,"m of the PAR file corresponding to given package Returns a pointer to a TMD5 object, transferring ownership to the caller. ;  ; const char * GetName () const override;  Returns name of object. ;  ; Int_t GetPackDir (const char *pack, TString &pdir);  Method to get the path of the dir for package 'pack'. ;  ; Int_t GetParPath (const char *pack, TString &path);  Method to get the path of the PAR file for package 'pack'. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; Bool_t Has (const char *pack);  Method to check if this package manager has package 'pack'. ;  ; Int_t Install (const char *par, Bool_t rmold=kFALSE);  Install package from par (unpack the file in the directory); par can be an URL for remote retrieval. ;  ; TClass * IsA () const override;  ; Bool_t IsInDir (const char *path);  Method to check if 'path' is in the managed directory Return kTRUE or kFALSE. ;  ; Bool_t IsPackageEnabled (const char *pack);  ; Int_t Load (const char *pack, const char *opts);  Method to load a package taking an option const char * Return -1 on error, 0 otherwise. ;  ; Int_t Load (const char *pack, TList *optls=0);  Method to load a package taking an option list Return -1 on error, 0 otherwise. ;  ; TMD5 * ReadMD5 (const char *pack);  Read MD5 checksum of the PAR file from the PROOF-INF/md5.txt file. ;  ; Int_t Remove (const char *pack=0, Bool_t dolock=kTRUE);  Remove package 'pack' If 'pack' is null or empty all packages are cleared. ;  ; void SetLogger (TPackMgrLog_t logger);  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetPrefix (const char *pfx);  ; void Show (const char *title=0);  Show available packages. ;  ; void ShowEnabled (const char *title=0);  Show enabled packages. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Unload (const char *pack);  Method to unload a package. ;  ; Int_t Unpack (const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPackMgr.html:3451,error,error,3451,doc/master/classTPackMgr.html,https://root.cern,https://root.cern/doc/master/classTPackMgr.html,1,['error'],['error']
Availability,"m p o r t T H 1 i n t o a R o o D a t a H i s t; // ---------------------------------------------------------; ; // Create a ROOT TH1 histogram; TH1 *hh = makeTH1();; ; // Declare observable x; RooRealVar x(""x"", ""x"", -10, 10);; ; // Create a binned dataset that imports contents of TH1 and associates its contents to observable 'x'; RooDataHist dh(""dh"", ""dh"", x, Import(*hh));; ; // P l o t a n d f i t a R o o D a t a H i s t; // ---------------------------------------------------; ; // Make plot of binned dataset showing Poisson error bars (RooFit default); RooPlot *frame = x.frame(Title(""Imported TH1 with Poisson error bars""));; dh.plotOn(frame);; ; // Fit a Gaussian pdf to the data; RooRealVar mean(""mean"", ""mean"", 0, -10, 10);; RooRealVar sigma(""sigma"", ""sigma"", 3, 0.1, 10);; RooGaussian gauss(""gauss"", ""gauss"", x, mean, sigma);; gauss.fitTo(dh, PrintLevel(-1));; gauss.plotOn(frame);; ; // P l o t a n d f i t a R o o D a t a H i s t w i t h i n t e r n a l e r r o r s; // ---------------------------------------------------------------------------------------------; ; // If histogram has custom error (i.e. its contents is does not originate from a Poisson process; // but e.g. is a sum of weighted events) you can data with symmetric 'sum-of-weights' error instead; // (same error bars as shown by ROOT); RooPlot *frame2 = x.frame(Title(""Imported TH1 with internal errors""));; dh.plotOn(frame2, DataError(RooAbsData::SumW2));; gauss.plotOn(frame2);; ; // Please note that error bars shown (Poisson or SumW2) are for visualization only, the are NOT used; // in a maximum likelihood fit; //; // A (binned) ML fit will ALWAYS assume the Poisson error interpretation of data (the mathematical definition; // of likelihood does not take any external definition of errors). Data with non-unit weights can only be correctly; // fitted with a chi^2 fit (see rf602_chi2fit.C); ; // -----------------------------------------; // I m p o r t i n g R O O T T T r e e s; // =======================",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf102__dataimport_8C.html:1884,error,error,1884,doc/master/rf102__dataimport_8C.html,https://root.cern,https://root.cern/doc/master/rf102__dataimport_8C.html,1,['error'],['error']
Availability,"m server is expected. void CtrlC(); Interrupt the remote protocol instance. Used to propagate Ctrl-C.; No reply from server is expected. Int_t PickUpReady(); Wait and pick-up next buffer from the asynchronous queue. TXSockBuf * PopUpSpare(Int_t sz); Pop-up a buffer of at least size bytes from the spare list; If none is found either one is reallocated or a new one; created. void PushBackSpare(); Release read buffer giving back to the spare list. Int_t RecvRaw(void* buf, Int_t len, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Int_t SendInterrupt(Int_t type); Send urgent message (interrupt) to remote server; Returns 0 or -1 in case of error. Int_t Send(const TMessage& mess); Send a TMessage object. Returns the number of bytes in the TMessage; that were sent and -1 in case of error. Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -5 if pipe broken (connection invalid).; In those case mess == 0. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0, Long64_t l64 = 0, Int_t int3 = 0, const char* opt = 0); Send message to intermediate coordinator.; If any output is due, this is returned as an obj string to be; deleted by the caller. void SendUrgent(Int_t type, Int_t int1, Int_t int2); Send urgent message to counterpart; 'type' specifies the type of; the message (see TXSocket::EUrgentMsgType), and 'int1', 'int2'; two containers for additional information. void InitEnvs(); Init environment variables for XrdClient. Int_t Reconnect(); Try reconnection after failure. Int_t GetLowSocket() const; Auxilliary. { return (fConn ? fConn->GetLowSocket() : -1); }. Int_t GetClientID() const; { return -1; }. Int_t GetClientIDSize() const; { return 1; }. Int_t GetLogConnID() const; { return (fConn ? fConn->GetLogConnID() : -1); }. Int_t GetOpenError() const; { return (fCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXSocket.html:17818,error,error,17818,root/html602/TXSocket.html,https://root.cern,https://root.cern/root/html602/TXSocket.html,2,['error'],['error']
Availability,"m tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_tRooAbsTestStatistic::_verboseVerbose messaging if true; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooChi2Var(const char *name, const char* title, RooAbsReal& func, RooDataHist& hdata,		 const RooCmdArg& arg1,const RooCmdArg& arg2,const RooCmdArg& arg3,		 const RooCmdArg& arg4,const RooCmdArg& arg5,const RooCmdArg& arg6,		 const RooCmdArg& arg7,const RooCmdArg& arg8,const RooCmdArg& arg9); RooChi2Var constructor. Optional arguments taken. DataError() -- Choose between Poisson errors and Sum-of-weights errors; NumCPU() -- Activate parallel processing feature; Range() -- Fit only selected region; Verbose() -- Verbose output of GOF framework. RooChi2Var(const char *name, const char* title, RooAbsPdf& pdf, RooDataHist& hdata,		 const RooCmdArg& arg1,const RooCmdArg& arg2,const RooCmdArg& arg3,		 const RooCmdArg& arg4,const RooCmdArg& arg5,const RooCmdArg& arg6,		 const RooCmdArg& arg7,const RooCmdArg& arg8,const RooCmdArg& arg9); RooChi2Var constructor. Optional arguments taken. Extended() -- Include extended term in calculation; DataError() -- Choose between Poisson errors and Sum-of-weights errors; NumCPU() -- Activate parallel processing feature; Range() -- Fit only selected region; SumCoefRange() -- Set the range in which to interpret the coefficients of RooAddPdf components; SplitRange() -- Fit range is split by index catory of simultaneous PDF; ConditionalObservables() -- Define projected observables; Verbose() -- Verbose output of GOF framework. RooChi2Var(const char* name, const char* title, RooAbsPdf& pdf, RooDataH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooChi2Var.html:37441,error,errors,37441,root/html526/RooChi2Var.html,https://root.cern,https://root.cern/root/html526/RooChi2Var.html,2,['error'],['errors']
Availability,"m tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAddition(). RooAddition(const char* name, const char* title, const RooArgSet& sumSet, Bool_t takeOwnerShip = kFALSE). RooAddition(const char* name, const char* title, const RooArgList& sumSet1, const RooArgList& sumSet2, Bool_t takeOwnerShip = kFALSE). RooAddition(const RooAddition& other, const char* name = 0). ~RooAddition(). Double_t evaluate() const; Calculate and return current value of self. Double_t defaultErrorLevel() const; Return the default error level for MINUIT error analysis; If the addition contains one or more RooNLLVars and; no RooChi2Vars, return the defaultErrorLevel() of; RooNLLVar. If the addition contains one ore more RooChi2Vars; and no RooNLLVars, return the defaultErrorLevel() of; RooChi2Var. If the addition contains neither or both; issue a warning message and return a value of 1. Bool_t setData(RooAbsData& data, Bool_t cloneData = kTRUE). void printMetaArgs(ostream& os) const. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& numVars, const char* rangeName = 0) const. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Calculate integral internally from appropriate integral cache. TObject* clone(const char* newname) const; { return new RooAddition(*this, newname); }. const RooArgList& list1() const; { return _set ; }. const RooArgList& list() const; { return _set ; }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force RooRealIntegral to offer all observables for internal integration. » Last changed: Mon Jul 4 15:21:3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAddition.html:33983,error,error,33983,root/html530/RooAddition.html,https://root.cern,https://root.cern/root/html530/RooAddition.html,2,['error'],['error']
Availability,"m tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAddition(). RooAddition(const char* name, const char* title, const RooArgSet& sumSet, Bool_t takeOwnerShip = kFALSE). RooAddition(const char* name, const char* title, const RooArgList& sumSet1, const RooArgList& sumSet2, Bool_t takeOwnerShip = kFALSE). RooAddition(const RooAddition& other, const char* name = 0). ~RooAddition(). Double_t evaluate() const; Calculate and return current value of self. Double_t defaultErrorLevel() const; Return the default error level for MINUIT error analysis; If the addition contains one or more RooNLLVars and; no RooChi2Vars, return the defaultErrorLevel() of; RooNLLVar. If the addition contains one ore more RooChi2Vars; and no RooNLLVars, return the defaultErrorLevel() of; RooChi2Var. If the addition contains neither or both; issue a warning message and return a value of 1. Bool_t setData(RooAbsData& data, Bool_t cloneData = kTRUE). void printMetaArgs(ostream& os) const. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& numVars, const char* rangeName = 0) const. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Calculate integral internally from appropriate integral cache. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const. Bool_t isBinnedDistribution(const RooArgSet& obs) const; If all components that depend on obs are binned that so is the product. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& , Double_t , Double_t ) const. TObject* clone(const char* newname) const; { retu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAddition.html:34654,error,error,34654,root/html532/RooAddition.html,https://root.cern,https://root.cern/root/html532/RooAddition.html,2,['error'],['error']
Availability,"m tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAddition(). RooAddition(const char* name, const char* title, const RooArgSet& sumSet, Bool_t takeOwnerShip = kFALSE). RooAddition(const char* name, const char* title, const RooArgList& sumSet1, const RooArgList& sumSet2, Bool_t takeOwnerShip = kFALSE). RooAddition(const RooAddition& other, const char* name = 0). ~RooAddition(). Double_t evaluate() const; Calculate and return current value of self. Double_t defaultErrorLevel() const; Return the default error level for MINUIT error analysis; If the addition contains one or more RooNLLVars and; no RooChi2Vars, return the defaultErrorLevel() of; RooNLLVar. If the addition contains one ore more RooChi2Vars; and no RooNLLVars, return the defaultErrorLevel() of; RooChi2Var. If the addition contains neither or both; issue a warning message and return a value of 1. void printMetaArgs(ostream& os) const. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& numVars, const char* rangeName = 0) const. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Calculate integral internally from appropriate integral cache. TObject* clone(const char* newname) const; { return new RooAddition(*this, newname); }. const RooArgList& list1() const; { return _set ; }. const RooArgList& list() const; { return _set ; }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force RooRealIntegral to offer all observables for internal integration. » Last changed: Thu Dec 2 00:31:37 2010 » Last generated: 2010-12-02 00:31; This page has bee",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddition.html:33703,error,error,33703,root/html528/RooAddition.html,https://root.cern,https://root.cern/root/html528/RooAddition.html,2,['error'],['error']
Availability,"m tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAddition(). RooAddition(const char* name, const char* title, const RooArgList& sumSet, Bool_t takeOwnerShip = kFALSE). RooAddition(const char* name, const char* title, const RooArgList& sumSet1, const RooArgList& sumSet2, Bool_t takeOwnerShip = kFALSE). RooAddition(const RooAddition& other, const char* name = 0). ~RooAddition(). Double_t evaluate() const; Calculate and return current value of self. Double_t defaultErrorLevel() const; Return the default error level for MINUIT error analysis; If the addition contains one or more RooNLLVars and; no RooChi2Vars, return the defaultErrorLevel() of; RooNLLVar. If the addition contains one ore more RooChi2Vars; and no RooNLLVars, return the defaultErrorLevel() of; RooChi2Var. If the addition contains neither or both; issue a warning message and return a value of 1. void enableOffsetting(Bool_t ). Bool_t setData(RooAbsData& data, Bool_t cloneData = kTRUE). void printMetaArgs(ostream& os) const. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& numVars, const char* rangeName = 0) const. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Calculate integral internally from appropriate integral cache. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const. Bool_t isBinnedDistribution(const RooArgSet& obs) const; If all components that depend on obs are binned that so is the product. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& , Double_t , Double_t ) const. TObject* clone(co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAddition.html:37993,error,error,37993,root/html602/RooAddition.html,https://root.cern,https://root.cern/root/html602/RooAddition.html,4,['error'],['error']
Availability,"m variable with a distribution approximated by the normal probability distribution \( N(Wp_{i},\sigma_{i}^{2}) \) where \( \sigma_{i}^{2} \) is the variance of the weight wi. If we replace the variance \( \sigma_{i}^{2} \) with estimate \( s_{i}^{2} \) (sum of squares of weights of events in the ith bin) and the hypothesis of identity is valid, then the maximum likelihood estimator of pi,i=1,...,r, is ; \[; \hat{p}_{i} = \frac{Ww_{i}-Ns_{i}^{2}+\sqrt{(Ww_{i}-Ns_{i}^{2})^{2}+4W^{2}s_{i}^{2}n_{i}}}{2W^{2}}; \]. We may then use the test statistic ; \[; X^{2} = \sum_{i=1}^{r} \frac{(n_{i}-N\hat{p}_{i})^{2}}{N\hat{p}_{i}} + \sum_{i=1}^{r} \frac{(w_{i}-W\hat{p}_{i})^{2}}{s_{i}^{2}}; \]. and it has approximately a \( \sigma^{2}_{(r-1)} \) distribution [2]. This test, as well as the original one [3], has a restriction on the expected frequencies. The expected frequencies recommended for the weighted histogram is more than 25. The value of the minimal expected frequency can be decreased down to 10 for the case when the weights of the events are close to constant. In the case of a weighted histogram if the number of events is unknown, then we can apply this recommendation for the equivalent number of events as ; \[; n_{i}^{equiv} = \frac{ w_{i}^{2} }{ s_{i}^{2} }; \]. The minimal expected frequency for an unweighted histogram must be 1. Notice that any usual (unweighted) histogram can be considered as a weighted histogram with events that have constant weights equal to 1. The variance \( z_{i}^{2} \) of the difference between the weight wi and the estimated expectation value of the weight is approximately equal to: ; \[; z_{i}^{2} = Var(w_{i}-W\hat{p}_{i}) = N\hat{p}_{i}(1-N\hat{p}_{i})\left(\frac{Ws_{i}^{2}}{\sqrt{(Ns_{i}^{2}-w_{i}W)^{2}+4W^{2}s_{i}^{2}n_{i}}}\right)^{2}+\frac{s_{i}^{2}}{4}\left(1+\frac{Ns_{i}^{2}-w_{i}W}{\sqrt{(Ns_{i}^{2}-w_{i}W)^{2}+4W^{2}s_{i}^{2}n_{i}}}\right)^{2}; \]. The residuals ; \[; r_{i} = \frac{w_{i}-W\hat{p}_{i}}{z_{i}}; \]. have approximately a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:92658,down,down,92658,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['down'],['down']
Availability,"m with binx,biny,binz, the function; Int_t bin = h->GetBin(binx,biny,binz);; returns a global/linearized bin number. This global bin is useful to access the bin information independently of the dimension. ; Reimplemented in TH2, TH3, TH1K, TH2Poly, TProfile, TProfile2D, TProfile2Poly, TProfile2Poly, and TProfile3D.; Definition at line 5061 of file TH1.cxx. ◆ GetBinContent() [2/3]. virtual Double_t TH1::GetBinContent ; (; Int_t ; bin, . Int_t ;  . ); const. inlinevirtual . Reimplemented in TH2, TH3, TH1K, TProfile, TH2, TProfile2D, TH2Poly, TProfile2Poly, and TProfile3D.; Definition at line 266 of file TH1.h. ◆ GetBinContent() [3/3]. virtual Double_t TH1::GetBinContent ; (; Int_t ; bin, . Int_t ; , . Int_t ;  . ); const. inlinevirtual . Reimplemented in TH2, TH3, TH1K, TProfile, TH3, TProfile3D, TH2, TProfile2D, TH2Poly, and TProfile2Poly.; Definition at line 267 of file TH1.h. ◆ GetBinError() [1/3]. Double_t TH1::GetBinError ; (; Int_t ; bin); const. virtual . Return value of error associated to bin number bin. ; if the sum of squares of weights has been defined (via Sumw2), this function returns the sqrt(sum of w2). otherwise it returns the sqrt(contents) for this bin. ; Reimplemented in TH1K, TH2Poly, TProfile, TProfile2D, TProfile2Poly, TProfile2Poly, and TProfile3D.; Definition at line 9063 of file TH1.cxx. ◆ GetBinError() [2/3]. virtual Double_t TH1::GetBinError ; (; Int_t ; binx, . Int_t ; biny . ); const. inlinevirtual . Reimplemented in TH1K, TProfile, TProfile2D, TH2Poly, TProfile2Poly, and TProfile3D.; Definition at line 269 of file TH1.h. ◆ GetBinError() [3/3]. virtual Double_t TH1::GetBinError ; (; Int_t ; binx, . Int_t ; biny, . Int_t ; binz . ); const. inlinevirtual . Reimplemented in TH1K, TProfile, TProfile3D, TProfile2D, TH2Poly, and TProfile2Poly.; Definition at line 270 of file TH1.h. ◆ GetBinErrorLow(). Double_t TH1::GetBinErrorLow ; (; Int_t ; bin); const. virtual . Return lower error associated to bin number bin. ; The error will depend on the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:149391,error,error,149391,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['error']
Availability,"m  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TASLogHandler (const char *cmd, TSocket *s, const char *pfx="""");  Execute 'cmd' in a pipe and handle output messages from the related file. ;  ;  TASLogHandler (FILE *f, TSocket *s, const char *pfx="""");  Handle available message from the open file 'f'. ;  ; virtual ~TASLogHandler ();  Handle available message in the open file. ;  ; Bool_t IsValid ();  ; Bool_t Notify () override;  Handle available message in the open file. ;  ; Bool_t ReadNotify () override;  Notify when something can be read from the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TFileHandler;  TFileHandler (int fd, int mask);  Create a file descriptor event handler. ;  ; virtual ~TFileHandler ();  ; void Add () override;  Add file event handler to system file handler list. ;  ; int GetFd () const;  ; virtual Bool_t HasReadInterest ();  True if handler is interested in read events. ;  ; virtual Bool_t HasWriteInterest ();  True if handler is interested in write events. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsReadReady () const;  ; virtual Bool_t IsWriteReady () const;  ; Bool_t Notify () override;  Notify when event occurred on descriptor associated with this handler. ;  ; void Remove () override;  Remove file event handler from system file handler list. ;  ; virtual void ResetReadyMask ();  ; void SetFd (int fd);  ; virtual void Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASLogHandler.html:1588,avail,available,1588,doc/master/classTASLogHandler.html,https://root.cern,https://root.cern/doc/master/classTASLogHandler.html,1,['avail'],['available']
Availability,"m(const RooComplex& z, Int_t nOrder); static Double_tITPComplexErrFuncRe(const RooComplex& z, Int_t nOrder); RooMath&operator=(const RooMath&); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. static const char*cacheFileName(); static voidinitFastCERF(Int_t reBins = 800, Double_t reMin = -4.0, Double_t reMax = 4.0, Int_t imBins = 1000, Double_t imMin = -4.0, Double_t imMax = 6.0); static Bool_tloadCache(); static voidstoreCache(). Data Members; private:. static Bool_t_cacheTableSwitch activating use of file cache for CERF-LUT; static Int_t_imBinsNumber of grid points in imaginary dimension of CERF-LUT ; static double**_imCerfArrayLookup table for Im part of complex error function; static Double_t_imMaxHigh edge of imaginary dimension of CERF-LUT; static Double_t_imMinLow edge of imaginary dimension of CERF-LUT; static Double_t_imRangeRange in imaginary dimension of CERF-LUT; static Double_t_imStepGrid spacing in imaginary dimension of CERF-LUT; static Int_t_reBinsNumber of grid points in real dimension of CERF-LUT; static double**_reCerfArrayLookup table for Re part of complex error function; static Double_t_reMaxHigh edge of real dimension of CERF-LUT; static Double_t_reMinLow edge of real dimension of CERF-LUT; static Double_t_reRangeRange in real dimension of CERF-LUT; static Double_t_reStepGrid spacing in real dimension of CERF-LUT. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooComplex FastComplexErrFunc(const RooComplex& z). Double_t FastComplexErrFuncRe(const RooComplex& z). Double_t FastComplexErrFuncIm(const RooComplex& z). void cacheCERF(Bool_t flag = kTRUE). RooComplex ComplexErrFunc(Double_t re, Double_t im = 0); Return CERNlib complex error function for Z(re,im). RooComplex ComplexErrFunc(const RooComplex& z); Return CERNlib complex error function. This code is translated from the fortran version in the CERN mathlib.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMath.html:1855,error,error,1855,root/html526/RooMath.html,https://root.cern,https://root.cern/root/html526/RooMath.html,2,['error'],['error']
Availability,"m); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const char*TApplication::GetIdleCommand() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/PyROOT__TPyROOTApplication.html:4863,error,error,4863,root/html602/PyROOT__TPyROOTApplication.html,https://root.cern,https://root.cern/root/html602/PyROOT__TPyROOTApplication.html,2,['error'],['error']
Availability,"m); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); Int_tTGLBEntry::EntryId() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static FontStruct_tGetDefaultFontStruct(); static Pixel_tTGFrame::GetDefaultFrameBackground(); static const TGGC&GetDefaultGC(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionGetDefaultSize() const; virtual UInt_tTGFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFrame::GetDragType() const; virtual Option_t*TObject::GetD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTextLBEntry.html:4785,error,error,4785,root/html528/TGTextLBEntry.html,https://root.cern,https://root.cern/root/html528/TGTextLBEntry.html,8,['error'],['error']
Availability,"m); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); Int_tTGLBEntry::EntryId() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static FontStruct_tTGTextLBEntry::GetDefaultFontStruct(); static Pixel_tTGFrame::GetDefaultFrameBackground(); static const TGGC&TGTextLBEntry::GetDefaultGC(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionGetDefaultSize() const; virtual UInt_tTGFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFrame::GetDragType() const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGIconLBEntry.html:4742,error,error,4742,root/html528/TGIconLBEntry.html,https://root.cern,https://root.cern/root/html528/TGIconLBEntry.html,8,['error'],['error']
Availability,"m); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); Bool_tEnableHide() const; voidEnableHide(Bool_t onoff); Bool_tEnableUndock() const; voidEnableUndock(Bool_t onoff); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; TGCompositeFrame*GetContainer() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGDockableFrame.html:4671,error,error,4671,root/html602/TGDockableFrame.html,https://root.cern,https://root.cern/root/html602/TGDockableFrame.html,2,['error'],['error']
Availability,"m); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidEventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual Double_tGetAbsHNDC() const; virtual Double_tGetAbsWNDC() const; virtual Double_tGetAbsXlowNDC() const; virtual Double_tGetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tGetAspectRatio() const; Float_tTAttPad::GetAstat() const; virtual Rectangle_tGetBBox(); virtual TPointGetBBoxCenter(); virtual Short_tGetBorderMode() const; virtual Short_tGetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*GetCanvas() const; virtual Int_tGetCanvasID() const; virtual TCanvasImp*GetCanvasImp() const; Int_tGetCrosshair() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEvent() const; virtual Int_tGetEventX() const; virtual Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPad.html:7303,error,error,7303,root/html602/TPad.html,https://root.cern,https://root.cern/root/html602/TPad.html,2,['error'],['error']
Availability,"m); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidEnableMenuBarHiding(); virtual voidTGLViewer::EndScene(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGLViewer::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Bool_tTGLViewerBase::FindClosestOpaqueRecord(TGLSelectRecord& rec, Int_t& recIdx); Bool_tTGLViewerBase::FindClosestOverlayRecord(TGLOvlSelectRecord& rec, Int_t& recIdx); Bool_tTGLViewerBase::FindClosestRecord(TGLSelectRecord& rec, Int_t& recIdx); TGLLogicalShape*TGLViewerBase::FindLogicalInScenes(TObject* id); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGLAutoRotator*TGLViewer::GetAutoRotator(); TGLCameraOverlay*TGLViewer::GetCameraOverlay() const; Bool_tTGLViewer::GetClipAutoUpdate() const; TGLClipSet*TGLViewer::GetClipSet() const; TGLOverlayElement*TGLViewer::GetCurrentOvlElm() const; static TGLColorSet&TGLViewer::GetDefaultColorSet(); Int_tTGLViewer::GetDev() const; TGLV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLSAViewer.html:5311,error,error,5311,root/html602/TGLSAViewer.html,https://root.cern,https://root.cern/root/html602/TGLSAViewer.html,2,['error'],['error']
Availability,"m, this alters an existing MD5 hash to; reflect the addition of 16 longwords of new data. Update() blocks; the data and converts bytes into longwords for this routine. Int_t SetDigest(const char* md5ascii); Set the digest from the ASCII representation 'md5ascii'. The caller; is responsible to make sure that the 32 chars md5ascii are valid.; Returns -1 if md5ascii is malformed, returns 0 otherwise. TMD5 * ReadChecksum(const char* file); Returns checksum stored in ASCII in specified file. Use to read files; created via WriteChecksum(). The returned TMD5 object must be deleted; by the user. Returns 0 in case the file cannot be opened or in case of; error. Static utlity function. Int_t WriteChecksum(const char* file, const TMD5* md5); Writes checksum in ASCII format to specified file. This file can; directly be read by ReadChecksum(). The md5 must have been finalized.; Returns -1 in case file cannot be opened or in case of error,; 0 otherwise. Static utility function. TMD5 * FileChecksum(const char* file); Returns checksum of specified file. The returned TMD5 object must; be deleted by the user. Returns 0 in case the file does not exists; or in case of error. This function preserves the modtime of the file; so it can be safely used in conjunction with methods that keep track; of the file's modtime. Static utility function. Int_t FileChecksum(const char* file, UChar_t* digest); Returns checksum of specified file in digest argument. Returns -1 in; case of error, 0 otherwise. This method preserves the modtime of the; file so it can be safely used in conjunction with methods that keep; track of the file's modtime. Static utility function. virtual ~TMD5(); { }. » Author: Fons Rademakers 29/9/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-03-14 16:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMD5.html:4644,error,error,4644,root/html534/TMD5.html,https://root.cern,https://root.cern/root/html534/TMD5.html,2,['error'],['error']
Availability,"m->Integral(), ""width"");; ; // Drawing everything; TCanvas *c1 = new TCanvas(""c1"", ""Histogram Normalization"", 700, 900);; c1->Divide(1, 2);; ; c1->cd(1);; orig->Draw();; c1->cd(2);; norm->Draw();; }; TCanvas.h; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TH2F.h; TRandom.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::SetTitlevoid SetTitle(const char *title) overrideChange/set the title.Definition TH1.cxx:6718; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::Integralvirtual Double_t Integral(Option_t *option="""") constReturn integral of bin contents.Definition TH1.cxx:7941; TH1::Scalevirtual void Scale(Double_t c1=1, Option_t *option="""")Multiply this histogram by a constant c1.Definition TH1.cxx:6604; TH1::CloneTObject * Clone(const char *newname="""") const overrideMake a complete copy of the underlying object.Definition TH1.cxx:2752; TRandom2Random number generator class based on the maximally quidistributed combined Tausworthe generator by ...Definition TRandom2.h:27; TRandom2::RndmDouble_t Rndm() overrideTausWorth generator from L'Ecuyer, uses as seed 3x32bits integers Use a mask of 0xffffffffUL to make ...Definition TRandom2.cxx:55; TStyle::SetTitleFontSizevoid SetTitleFontSize(Float_t size=0)Definition TStyle.h:407; c1return c1Definition legend1.C:41; AuthorAdvait Dhingra ; Definition in file NormalizeHistogram.C. tutorialshistNormalizeHistogram.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NormalizeHistogram_8C.html:2677,mask,mask,2677,doc/master/NormalizeHistogram_8C.html,https://root.cern,https://root.cern/doc/master/NormalizeHistogram_8C.html,1,['mask'],['mask']
Availability,"m. CMake does not build the project, it generates the files needed by your build tool (GNU make, Ninja, Visual Studio, etc) for building ROOT. The classic build with configure/make is is still available but it will not be evolving with the new features of ROOT. The instructions can be found here.; If you are really anxious about getting a functional ROOT build, go to the Quick Start section. If you are a CMake novice, start on Basic CMake usage and then go back to the Quick Start once you know what you are doing. The Options and Variables section is a reference for customizing your build. If you already have experience with CMake, this is the recommended starting point.; Preparation; Check the prerequisites and supported platforms for the list of packages needed for your setup before starting the build.; Quick Start; The following are the basic instructions for UNIX systems. We use here the command-line, non-interactive CMake interface. Download and unpack the ROOT's sources from the download area or using directly the Git repository. Follow the instructions for getting the ROOT sources; Open a shell. Your development tools must be reachable from this shell through the PATH environment variable.; Create a directory for containing the build. It is not supported to build ROOT on the source directory. cd to this directory:; $ mkdir <builddir>; $ cd <builddir> . Execute the cmake command on the shell replacing path/to/source with the path to the top of your ROOT source tree:; $ cmake path/to/source. CMake will detect your development environment, perform a series of test and generate the files required for building ROOT. CMake will use default values for all build parameters. See the Build Options and Variables sections for fine-tuning your build; This can fail if CMake can’t detect your toolset, or if it thinks that the environment is not sane enough. On this case make sure that the toolset that you intend to use is the only one reachable from the shell and that the sh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/building-root.html:2972,down,download,2972,d/building-root.html,https://root.cern,https://root.cern/d/building-root.html,1,['down'],['download']
Availability,"m.Uniform(-10, 10);; x[2+i*5] = randNum.Uniform(-10, 10);; x[3+i*5] = randNum.Uniform(-10, 10);; x[4+i*5] = randNum.Uniform(-10, 10);; e[i] = 0.01;; y[i] = 4*x[0+i*5] + x[1+i*5] + 2*x[2+i*5] + 3*x[3+i*5] + 0.2*x[4+i*5] + randNum.Gaus()*e[i];; }; ; //Assign the data the same way as before; lf->AssignData(n*2, 5, x, y, e);; lf->Eval();; lf->GetParameters(params);; lf->GetErrors(errors);; printf(""\nMore Points:\n"");; for (int i=0; i<6; i++); printf(""par[%d]=%f+-%f\n"", i, params(i), errors(i));; chisquare=lf->GetChisquare();; printf(""chisquare=%.15f\n"", chisquare);; ; ; //Suppose, you are not satisfied with the result and want to try a different formula; //Without a constant:; //Since the AssignData() function was used, you don't have to add all points to the fitter again; lf->SetFormula(""x0++x1++x2++x3++x4"");; ; lf->Eval();; lf->GetParameters(params);; lf->GetErrors(errors);; printf(""\nWithout Constant\n"");; for (int i=0; i<5; i++); printf(""par[%d]=%f+-%f\n"", i, params(i), errors(i));; chisquare=lf->GetChisquare();; printf(""chisquare=%f\n"", chisquare);; ; //Now suppose that you want to fix the value of one of the parameters; //Let's fix the first parameter at 4:; lf->SetFormula(""hyp5"");; lf->FixParameter(1, 4);; lf->Eval();; lf->GetParameters(params);; lf->GetErrors(errors);; printf(""\nFixed Constant:\n"");; for (i=0; i<6; i++); printf(""par[%d]=%f+-%f\n"", i, params(i), errors(i));; chisquare=lf->GetChisquare();; printf(""chisquare=%.15f\n"", chisquare);; ; //The fixed parameters can then be released by the ReleaseParameter method; delete lf;; ; }; ; e#define e(i)Definition RSha256.hxx:103; TF1.h; TLinearFitter.h; TRandom.h; TLinearFitterDefinition TLinearFitter.h:153; TLinearFitter::GetChisquarevirtual Double_t GetChisquare()Get the Chisquare.Definition TLinearFitter.cxx:1074; TLinearFitter::GetErrorsvirtual void GetErrors(TVectorD &vpar)Returns parameter errors.Definition TLinearFitter.cxx:1328; TLinearFitter::Evalvirtual Int_t Eval()Perform the fit and evaluate the para",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitLinear2_8C.html:3620,error,errors,3620,doc/master/fitLinear2_8C.html,https://root.cern,https://root.cern/doc/master/fitLinear2_8C.html,4,['error'],['errors']
Availability,"m2 += cnt2;; 2214 sumw1 += e1sq;; 2215 sumw2 += e2sq;; 2216 }; 2217 }; 2218 }; 2219 if (sumw1 <= 0.0 || sumw2 <= 0.0) {; 2220 Error(""Chi2TestX"", ""Cannot use option NORM when one histogram has all zero errors"");; 2221 return 0.0;; 2222 }; 2223 ; 2224 } else {; 2225 for (Int_t i = i_start; i <= i_end; ++i) {; 2226 for (Int_t j = j_start; j <= j_end; ++j) {; 2227 for (Int_t k = k_start; k <= k_end; ++k) {; 2228 ; 2229 Int_t bin = GetBin(i, j, k);; 2230 ; 2231 sum1 += RetrieveBinContent(bin);; 2232 sum2 += h2->RetrieveBinContent(bin);; 2233 ; 2234 if ( comparisonWW ) sumw1 += GetBinErrorSqUnchecked(bin);; 2235 if ( comparisonUW || comparisonWW ) sumw2 += h2->GetBinErrorSqUnchecked(bin);; 2236 }; 2237 }; 2238 }; 2239 }; 2240 //checks that the histograms are not empty; 2241 if (sum1 == 0.0 || sum2 == 0.0) {; 2242 Error(""Chi2TestX"",""one histogram is empty"");; 2243 return 0.0;; 2244 }; 2245 ; 2246 if ( comparisonWW && ( sumw1 <= 0.0 && sumw2 <= 0.0 ) ){; 2247 Error(""Chi2TestX"",""Hist1 and Hist2 have both all zero errors\n"");; 2248 return 0.0;; 2249 }; 2250 ; 2251 //THE TEST; 2252 Int_t m = 0, n = 0;; 2253 ; 2254 //Experiment - experiment comparison; 2255 if (comparisonUU) {; 2256 Double_t sum = sum1 + sum2;; 2257 for (Int_t i = i_start; i <= i_end; ++i) {; 2258 for (Int_t j = j_start; j <= j_end; ++j) {; 2259 for (Int_t k = k_start; k <= k_end; ++k) {; 2260 ; 2261 Int_t bin = GetBin(i, j, k);; 2262 ; 2263 Double_t cnt1 = RetrieveBinContent(bin);; 2264 Double_t cnt2 = h2->RetrieveBinContent(bin);; 2265 ; 2266 if (scaledHistogram) {; 2267 // scale bin value to effective bin entries; 2268 Double_t e1sq = GetBinErrorSqUnchecked(bin);; 2269 Double_t e2sq = h2->GetBinErrorSqUnchecked(bin);; 2270 ; 2271 if (e1sq > 0) cnt1 = TMath::Floor(cnt1 * cnt1 / e1sq + 0.5); // avoid rounding errors; 2272 else cnt1 = 0;; 2273 ; 2274 if (e2sq > 0) cnt2 = TMath::Floor(cnt2 * cnt2 / e2sq + 0.5); // avoid rounding errors; 2275 else cnt2 = 0;; 2276 }; 2277 ; 2278 if (Int_t(cnt1) == 0 && Int_t(cnt2)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:90781,error,errors,90781,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['errors']
Availability,"m; 945/// will be equal to the GetBinEntries(bin) of the profile,; 946/// - if option ""C=E"" the bin contents of the projection are set to the; 947/// bin errors of the profile; 948/// - if option ""W"" is specified the bin content of the projected histogram is set to the; 949/// product of the bin content of the profile and the entries.; 950/// With this option the returned histogram will be equivalent to the one obtained by; 951/// filling directly a TH2D using the 3-rd value as a weight.; 952/// This option makes sense only for profile filled with all weights =1.; 953/// When the profile is weighted (filled with weights different than 1) the; 954/// bin error of the projected histogram (obtained using this option ""W"") cannot be; 955/// correctly computed from the information stored in the profile. In that case the; 956/// obtained histogram contains as bin error square the weighted sum of the square of the; 957/// profiled observable (TProfile2D::fSumw2[bin] ); 958///; 959/// Note that the axis range is not considered when doing the projection; 960 ; 961TH3D *TProfile3D::ProjectionXYZ(const char *name, Option_t *option) const; 962{; 963 ; 964 TString opt = option;; 965 opt.ToLower();; 966 Int_t nx = fXaxis.GetNbins();; 967 Int_t ny = fYaxis.GetNbins();; 968 Int_t nz = fZaxis.GetNbins();; 969 const TArrayD *xbins = fXaxis.GetXbins();; 970 const TArrayD *ybins = fYaxis.GetXbins();; 971 const TArrayD *zbins = fZaxis.GetXbins();; 972 ; 973 // Create the projection histogram; 974 TString pname = name;; 975 if (pname == ""_px"") {; 976 pname = GetName(); pname.Append(""_pxyz"");; 977 }; 978 TH3D *h1 = nullptr ;; 979 if (xbins->fN == 0 && ybins->fN == 0 && zbins->fN == 0); 980 h1 = new TH3D(pname,GetTitle(),nx,fXaxis.GetXmin(),fXaxis.GetXmax(),ny,fYaxis.GetXmin(),fYaxis.GetXmax(),nz,fZaxis.GetXmin(),fZaxis.GetXmax());; 981 else if ( xbins->fN != 0 && ybins->fN != 0 && zbins->fN != 0); 982 h1 = new TH3D(pname,GetTitle(),nx,xbins->GetArray(),ny,ybins->GetArray(), nz,zbins->GetAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile3D_8cxx_source.html:34586,error,error,34586,doc/master/TProfile3D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile3D_8cxx_source.html,1,['error'],['error']
Availability,"m; ssizex-x length of source; ssizey-y length of source; averWindow-width of averaging smoothing window. . Smoothing;  ; Goal: Suppression of; statistical fluctuations; �        ; the algorithm is based on discrete; Markov chain, which has very simple invariant distribution;  ; ����������� �����; ������� ��being defined from the normalization condition ;  ; �������� n; is the length of the smoothed spectrum and .  ;  ;  . is the probability of the change of; the peak position from channel i to the channel i+1. �is the normalization constant so; that �and m is a width of smoothing window. We have extended this; algortihm to two dimensions. ;  ; Function:; const char*; TSpectrum2::SmoothMarkov(float; **fSpectrum, int ssizex, int; ssizey, �int averWindow)� ;  ; This; function calculates smoothed spectrum from the source spectrum based on Markov; chain method. The result is placed in the vector pointed by source pointer. On; successful completion it returns 0. On error it returns pointer to the string; describing error.;  ; Parameters:; ������� fSpectrum-pointer; to the matrix of source spectrum����������������� ; ������� ssizex, ssizey; -lengths of the spectrum matrix�������������������������������� ; ������� averWindow-width; of averaging smoothing window ;  ; Reference:; [1]; Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376; (1996), 451.� . . Example 4 � script Smooth.c; :. Fig. 9 Original noisy; spectrum.��� Fig. 10 Smoothed spectrum m=3; Peaks can hardly be; observed.� ���Peaks become apparent. Fig. 11 Smoothed spectrum; m=5 Fig.12 Smoothed spectrum m=7;  ; Script:; // Example to illustrate the Markov smoothing (class; TSpectrum).; // To execute this example, do; // root > .x Smooth.C; #include <TSpectrum> ; void Smooth() {; �� Int_t i, j;; �� Double_t nbinsx = 256;; �� Double_t nbinsy = 256;�� ; �� Double_t xmin� = 0;; �� Double_t xmax� = (Double_t)nbinsx;; �� Double_t ymin� = 0;; �� Double_t ymax� = (Double_t)nbinsy;�� ; �� Float_t ** so",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2.html:22983,error,error,22983,root/html528/TSpectrum2.html,https://root.cern,https://root.cern/root/html528/TSpectrum2.html,8,['error'],['error']
Availability,"m=kFALSE) const;  select the values from the event ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; TString GetShortName () const;  ; virtual std::vector< TString > * GetTransformationStrings (Int_t cls) const;  TODO --> adapt to variable,target,spectator selection default transformation output --> only indicate that transformation occurred. ;  ; Types::EVariableTransform GetVariableTransform () const;  ; Bool_t IsCreated () const;  ; Bool_t IsEnabled () const;  ; Bool_t IsNormalised () const;  ; MsgLogger & Log () const;  ; virtual void PrintTransformation (std::ostream &);  ; virtual void SelectInput (const TString &inputVariables, Bool_t putIntoVariables=kFALSE);  select the variables/targets/spectators which serve as input to the transformation ;  ; void SetEnabled (Bool_t e);  ; void SetNormalise (Bool_t n);  ; virtual void SetOutput (Event *event, std::vector< Float_t > &output, std::vector< Char_t > &mask, const Event *oldEvent=nullptr, Bool_t backTransform=kFALSE) const;  select the values from the event ;  ; void SetOutputDataSetInfo (DataSetInfo *outputDsi);  ; void SetTMVAVersion (TMVAVersion_t v);  ; void SetUseSignalTransform (Bool_t e=kTRUE);  ; const std::vector< TMVA::VariableInfo > & Spectators () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; const std::vector< TMVA::VariableInfo > & Targets () const;  ; void ToggleInputSortOrder (Bool_t sortOrder);  ; Bool_t UseSignalTransform () const;  ; const std::vector< TMVA::VariableInfo > & Variables () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Br",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableIdentityTransform.html:3128,mask,mask,3128,doc/master/classTMVA_1_1VariableIdentityTransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableIdentityTransform.html,2,['mask'],['mask']
Availability,"m>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::BinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>::fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>::fFunc. private:. vector<double>fGradfor derivatives; boolfIsExtendedflag to indicate if is extended (when false is a Multinomial lieklihood), default is true; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new PoissonLikelihoodFCN(*this); }. unsigned int NFitPoints() const; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood element and its gradient. void Gradient(const double* x, double* g) const; evaluate gradient. bool IsWeighted() const; { return (fWeight != 0); }. void UseSumOfWeights(); Use the weights in evaluating the likelihood. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:8106,error,errors,8106,root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,1,['error'],['errors']
Availability,"mDouble_t * fEyHSum! Array of summed Y high errors for fittingDefinition TGraphMultiErrors.h:40; TGraphMultiErrors::GetEYlowDouble_t * GetEYlow() const overrideGet all low errors on y coordinates as an array summed according to fSumErrorsMode.Definition TGraphMultiErrors.cxx:1577; TGraphMultiErrors::DeleteYErrorvirtual void DeleteYError(Int_t e)Deletes the y error with the index e.Definition TGraphMultiErrors.cxx:1422; TGraphMultiErrors::Applyvoid Apply(TF1 *f) overrideApply a function to all data points .Definition TGraphMultiErrors.cxx:951; TGraphMultiErrors::SetEYhighvirtual void SetEYhigh(Int_t e, Int_t np, const Double_t *eyH)Set error e eyH values.Definition TGraphMultiErrors.cxx:1995; TGraphMultiErrors::GetNYErrorsInt_t GetNYErrors() constDefinition TGraphMultiErrors.h:166; TGraphMultiErrors::SwapPointsvoid SwapPoints(Int_t pos1, Int_t pos2) overrideSwap points.Definition TGraphMultiErrors.cxx:869; TGraphMultiErrors::SetAttFillvirtual void SetAttFill(Int_t e, TAttFill *taf)Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2018; TGraphMultiErrors::SetEYlowvirtual void SetEYlow(Int_t e, Int_t np, const Double_t *eyL)Set error e eyL values.Definition TGraphMultiErrors.cxx:1982; TGraphMultiErrors::fAttFillstd::vector< TAttFill > fAttFillThe AttFill attributes of the different errors.Definition TGraphMultiErrors.h:41; TGraphMultiErrors::UpdateArraysvoid UpdateArrays(const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) overrideUpdate the fX, fY, fExL, fExH, fEyL and fEyH arrays with the sorted values.Definition TGraphMultiErrors.cxx:885; TGraphMultiErrors::CtorAllocateBool_t CtorAllocate()Should be called from ctors after fNpoints has been set Note: This function should be called only fro...Definition TGraphMultiErrors.cxx:718; TGraphMultiErrors::fExHDouble_t * fExH[fNpoints] array of X high errorsDefinition TGraphMultiErrors.h:36; TGraphMultiErrors::SetPointEYvi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html:23388,error,error,23388,doc/master/TGraphMultiErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html,2,['error'],"['error', 'errors']"
Availability,"mErrors (Int_t n, Double_t *x, Double_t *y, Double_t *z, Double_t *exl=nullptr, Double_t *exh=nullptr, Double_t *eyl=nullptr, Double_t *eyh=nullptr, Double_t *ezl=nullptr, Double_t *ezh=nullptr, Option_t *option="""");  TGraph2DAsymmErrors constructor with doubles vectors as input. ;  ;  ~TGraph2DAsymmErrors () override;  TGraph2DAsymmErrors destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t z, Double_t exl=0., Double_t exh=0., Double_t eyl=0., Double_t eyh=0., Double_t ezl=0., Double_t ezh=0.);  Add a 3D point with asymmetric errorbars to an existing graph. ;  ; Double_t GetErrorX (Int_t bin) const override;  Returns the combined error along X at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorXhigh (Int_t i) const;  Returns the high error along X at point i. ;  ; Double_t GetErrorXlow (Int_t i) const;  Returns the low error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const;  Returns the high error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t i) const;  Returns the low error along Y at point i. ;  ; Double_t GetErrorZ (Int_t bin) const override;  Returns the combined error along Z at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorZhigh (Int_t i) const;  Returns the high error along Z at point i. ;  ; Double_t GetErrorZlow (Int_t i) const;  Returns the low error along Z at point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEZhigh () const override;  ; Double_t * GetEZlow () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DAsymmErrors.html:4347,error,error,4347,doc/master/classTGraph2DAsymmErrors.html,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html,1,['error'],['error']
Availability,"mErrors.cxx:468; TGraphAsymmErrors::AllocateDouble_t ** Allocate(Int_t size) overrideAllocate internal data structures for size points.Definition TGraphAsymmErrors.cxx:444; TGraphAsymmErrors::GetEYlowDouble_t * GetEYlow() const overrideDefinition TGraphAsymmErrors.h:76; TGraphAsymmErrors::DoMergeBool_t DoMerge(const TGraph *g) overrideProtected function to perform the merge operation of a graph with asymmetric errors.Definition TGraphAsymmErrors.cxx:1077; TGraphAsymmErrors::CopyAndReleasevoid CopyAndRelease(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy and release.Definition TGraphAsymmErrors.cxx:1007; TGraphAsymmErrors::SetPointEXhighvirtual void SetPointEXhigh(Int_t i, Double_t exh)Set EXhigh for point i.Definition TGraphAsymmErrors.cxx:1362; TGraphAsymmErrors::GetErrorYlowDouble_t GetErrorYlow(Int_t i) const overrideGet low error on Y.Definition TGraphAsymmErrors.cxx:1184; TGraphAsymmErrors::GetErrorXDouble_t GetErrorX(Int_t bin) const overrideReturns the combined error along X at point i by computing the average of the lower and upper varianc...Definition TGraphAsymmErrors.cxx:1122; TGraphAsymmErrors::TGraphAsymmErrorsTGraphAsymmErrors()TGraphAsymmErrors default constructor.Definition TGraphAsymmErrors.cxx:72; TGraphAsymmErrors::operator=TGraphAsymmErrors & operator=(const TGraphAsymmErrors &gr)TGraphAsymmErrors assignment operator.Definition TGraphAsymmErrors.cxx:93; TGraphAsymmErrors::~TGraphAsymmErrors~TGraphAsymmErrors() overrideTGraphAsymmErrors default destructor.Definition TGraphAsymmErrors.cxx:433; TGraphAsymmErrors::Scalevoid Scale(Double_t c1=1., Option_t *option=""y"") overrideMultiply the values and errors of a TGraphAsymmErrors by a constant c1.Definition TGraphAsymmErrors.cxx:1274; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TVectorTTVectorT.Definition TVectorT.h:27; double; yDouble_t y[n]Def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphAsymmErrors_8h_source.html:12783,error,error,12783,doc/master/TGraphAsymmErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphAsymmErrors_8h_source.html,1,['error'],['error']
Availability,"mFunction::SOFTSIGN@ SOFTSIGN; TMVA::DNN::EnumFunction::GAUSS@ GAUSS; TMVA::DNN::EnumFunction::TANHSHIFT@ TANHSHIFT; TMVA::DNN::EnumFunction::SYMMRELU@ SYMMRELU; TMVA::DNN::EnumFunction::ZERO@ ZERO; TMVA::DNN::EnumFunction::LINEAR@ LINEAR; TMVA::DNN::EnumFunction::SIGMOID@ SIGMOID; TMVA::DNN::EnumFunction::GAUSSCOMPLEMENT@ GAUSSCOMPLEMENT; TMVA::DNN::EnumFunction::RELU@ RELU; TMVA::DNN::regularizationauto regularization(const typename Architecture_t::Matrix_t &A, ERegularization R) -> decltype(Architecture_t::L1Regularization(A))Evaluate the regularization functional for a given weight matrix.Definition Functions.h:238; TMVA::DNN::ModeErrorFunctionModeErrorFunctionerror functions to be chosen fromDefinition NeuralNet.h:1039; TMVA::DNN::ModeErrorFunction::CROSSENTROPY@ CROSSENTROPY; TMVA::DNN::ModeErrorFunction::SUMOFSQUARES@ SUMOFSQUARES; TMVA::DNN::ModeErrorFunction::CROSSENTROPY_MUTUALEXCLUSIVE@ CROSSENTROPY_MUTUALEXCLUSIVE; TMVA::DNN::softMaxCrossEntropydouble softMaxCrossEntropy(ItOutput itProbabilityBegin, ItOutput itProbabilityEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight)soft-max-cross-entropy error function (for mutual exclusive cross-entropy)Definition NeuralNet.icc:458; TMVA::DNN::WeightInitializationStrategyWeightInitializationStrategyweight initialization strategies to be chosen fromDefinition NeuralNet.h:1050; TMVA::DNN::WeightInitializationStrategy::TEST@ TEST; TMVA::DNN::WeightInitializationStrategy::XAVIERUNIFORM@ XAVIERUNIFORM; TMVA::DNN::WeightInitializationStrategy::XAVIER@ XAVIER; TMVA::DNN::WeightInitializationStrategy::LAYERSIZE@ LAYERSIZE; TMVA::DNN::operator|=ModeOutputValues operator|=(ModeOutputValues &lhs, ModeOutputValues rhs)Definition NeuralNet.h:193; TMVA::DNN::MinimizerTypeMinimizerType< list all the minimizer typesDefinition NeuralNet.h:321; TMVA::DNN::fSteepest@ fSteepestSGD.Definition NeuralNet.h:322; TMVA::DNN::gaussDoubledouble gaussDouble(double m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:83174,error,error,83174,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['error'],['error']
Availability,"mOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); Double_tDistToSegZ(const Double_t* point, const Double_t* dir, Int_t& iz) const; virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); Double_t&Dphi(); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetAxisName(Int_t iaxis) const; virtual Double_tGetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidGetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tGetByteCount() const; Double_tGetDphi() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; virtual Double_tTGeoBBox::GetDY() const; virtual Double_tTGeoBBox::GetDZ() const; virtual Double_tTGeoBBox::GetFacetArea(Int_t index = 0) const; virtual Int_tTGeoBBox::GetFittingBox(const TGeoBBox* parambox, TGeoMatrix* ma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoPcon.html:3744,error,error,3744,root/html534/TGeoPcon.html,https://root.cern,https://root.cern/root/html534/TGeoPcon.html,3,['error'],['error']
Availability,"mPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooEllipse(); Default constructor. ~RooEllipse(); Destructor. RooEllipse(const char* name, Double_t x1, Double_t x2, Double_t s1, Double_t s2, Double_t rho = 0, Int_t points = 100); Create a 2-dimensional ellipse centered at (x1,x2) that represents the confidence; level contour for a measurement with errors (s1,s2) and correlation coefficient rho.; The resulting curve is defined as the unique ellipse that passes through these points:. (x1+rho*s1,x2+s2) , (x1-rho*s1,x2-s2) , (x1+s1,x2+rho*s2) , (x1-s1,x2-rho*s2). and is described by the implicit equation:. x*x 2*rho*x*y y*y; ----- - --------- + ----- = 1 - rho*rho; s1*s1 s1*s2 s2*s2. The input parameters s1,s2 must be > 0 and also |rho| <= 1.; The degenerate case |rho|=1 corresponds to a straight line and; is handled as a special case. void printName(ostream& os) const; Print name of ellipse on ostream. void printTitle(ostream& os) const; Print title of ellipse on ostream. void printClassName(ostream& os) const; Print class name of ellipse on ostream. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print detailed multi line information on ellipse on ostreamx. RooEllipse(). void Print(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooEllipse.html:15324,error,errors,15324,root/html526/RooEllipse.html,https://root.cern,https://root.cern/root/html526/RooEllipse.html,7,['error'],['errors']
Availability,"mState;  MinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder). More...;  ; class  MinosError;  Class holding the result of Minos (lower and upper values) for a specific parameter. More...;  ; class  Minuit2Minimizer;  Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm. More...;  ; class  MinuitParameter;  class for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; More...;  ; class  MnApplication;  application interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization More...;  ; class  MnContours;  API class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors;. More...;  ; class  MnCovarianceSqueeze;  class to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index More...;  ; class  MnCross;  ; class  MnEigen;  API class for calculating the eigenvalues of symmetric matrix. More...;  ; class  MnFcn;  Wrapper class to FCNBase interface used internally by Minuit. More...;  ; class  MnFumiliMinimize;  API class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc.; also used by MnMinos and MnContours;. More...;  ; class  MnFunctionCross;  MnFunctionCross. More...;  ; class  MnGlobalCorrelationCoeff;  class for global correlation coefficient More...;  ; class  MnHesse;  API class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:5776,error,errors,5776,doc/master/namespaceROOT_1_1Minuit2.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html,4,['error'],['errors']
Availability,mTree. private . Definition at line 37 of file TTreeCloner.h. ◆ fIsValid. bool TTreeCloner::fIsValid. private . Definition at line 34 of file TTreeCloner.h. ◆ fMaxBaskets. UInt_t TTreeCloner::fMaxBaskets. private . Definition at line 45 of file TTreeCloner.h. ◆ fMethod. Option_t* TTreeCloner::fMethod. private . Definition at line 41 of file TTreeCloner.h. ◆ fNeedConversion. bool TTreeCloner::fNeedConversion. private . True if the fast merge is not possible but a slow merge might possible. ; Definition at line 35 of file TTreeCloner.h. ◆ fOptions. UInt_t TTreeCloner::fOptions. private . Definition at line 36 of file TTreeCloner.h. ◆ fPidOffset. UShort_t TTreeCloner::fPidOffset. private . Offset to be added to the copied key/basket. ; Definition at line 53 of file TTreeCloner.h. ◆ fPrevCache. TFileCacheRead* TTreeCloner::fPrevCache. private . Cache that set before the TTreeCloner ctor for the 'from' TTree if any. ; Definition at line 60 of file TTreeCloner.h. ◆ fToBranches. TObjArray TTreeCloner::fToBranches. private . Definition at line 43 of file TTreeCloner.h. ◆ fToDirectory. TDirectory* TTreeCloner::fToDirectory. private . Definition at line 39 of file TTreeCloner.h. ◆ fToFile. TFile* TTreeCloner::fToFile. private . Definition at line 40 of file TTreeCloner.h. ◆ fToStartEntries. Long64_t TTreeCloner::fToStartEntries. private . Number of entries in the target tree before any addition. ; Definition at line 56 of file TTreeCloner.h. ◆ fToTree. TTree* TTreeCloner::fToTree. private . Definition at line 38 of file TTreeCloner.h. ◆ fWarningMsg. TString TTreeCloner::fWarningMsg. private . Text of the error message lead to an 'invalid' state. ; Definition at line 32 of file TTreeCloner.h. Libraries for TTreeCloner:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TTreeCloner.h; tree/tree/src/TTreeCloner.cxx. TTreeCloner. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:39 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCloner.html:15467,error,error,15467,doc/master/classTTreeCloner.html,https://root.cern,https://root.cern/doc/master/classTTreeCloner.html,1,['error'],['error']
Availability,"m_t dt = kNone, void* d = 0, Int_t len = 0, Atom_t act = kNone); virtual~TDNDData(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TDNDData.html:1343,error,error,1343,root/html526/TDNDData.html,https://root.cern,https://root.cern/root/html526/TDNDData.html,5,['error'],['error']
Availability,"m_t ; property, . Atom_t ; type, . UChar_t * ; data, . Int_t ; len . ). overridevirtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Parameters. [in]idthe window whose property you want to change ; [in]propertyspecifies the property name ; [in]typethe type of the property; the X server does not interpret the type but simply passes it back to an application that might ask about the window properties ; [in]datathe property data ; [in]lenthe length of the specified data format . Reimplemented from TVirtualX. ◆ ChangeWindowAttributes(). void TGWin32VirtualXProxy::ChangeWindowAttributes ; (; Window_t ; id, . SetWindowAttributes_t * ; attr . ). overridevirtual . Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ; The mask data member of ""attr"" specifies which window attributes are defined in the attributes argument. This mask is the bitwise inclusive OR of the valid attribute mask bits; if it is zero, the attributes are ignored. ; Reimplemented from TVirtualX. ◆ CheckEvent(). Bool_t TGWin32VirtualXProxy::CheckEvent ; (; Window_t ; id, . EGEventType ; type, . Event_t & ; ev . ). overridevirtual . Check if there is for window ""id"" an event of type ""type"". ; Reimplemented from TVirtualX.; Definition at line 312 of file TGWin32VirtualXProxy.cxx. ◆ ClearArea(). void TGWin32VirtualXProxy::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Paints a rectangular area in the specified window ""id"" according to the specified dimensions with the window's background pixel or pixmap. ; Parameters. [in]idspecifies the window ; [in]x,ycoordinates, which are relative to the origin ; [in]w,hthe width and height which define the rectangle dimensions . Reimplemented from TVirtualX. ◆ ClearWindow() [1/2]. void TGWin32VirtualXProxy::ClearWindow ; (; ). overridevirtual . Clears the entire area of the current window. ; Reim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:55636,mask,mask,55636,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,2,['mask'],['mask']
Availability,"ma parameters, the"",; ""signal & background templates"",; ""can adapt to the data."",; ""Note how the blue signal"",; ""template changes its shape."",; ""This leads to higher errors"",; ""of the scale parameters A."",; ]; ; for text in pt_text2:; pt.AddText(text); ; pt.DrawClone(); ; can.cd(3); frame = x.frame(Title=""Barlow Beeston light for (Sig+Bkg)""); sumData.plotOn(frame); model2.plotOn(frame, LineColor=""b"", VisualizeError=result2); # Plot data again to show it on top of model0 error bands:; sumData.plotOn(frame); model2.plotOn(frame, LineColor=""b""); p_ph_sig2_set = {p_ph_sig2}; p_ph_bkg2_set = {p_ph_bkg2}; model2.plotOn(frame, Components=p_ph_sig2_set, LineColor=""kAzure""); model2.plotOn(frame, Components=p_ph_bkg2_set, LineColor=""r""); model2.paramOn(frame, Parameters={Asig2, Abkg2}); ; sigData.plotOn(frame, MarkerColor=""b""); frame.Draw(); ; pt.Clear(); pt_text3 = [; ""When signal and background"",; ""template share one gamma para-"",; ""meter per bin, they adapt less."",; ""The errors of the A parameters"",; ""also shrink slightly."",; ]; for text in pt_text3:; pt.AddText(text); pt.DrawClone(); ; ; print(""Asig [normal ] = {} +/- {}"".format(Asig0.getVal(), Asig0.getError())); print(""Asig [BB ] = {} +/- {}"".format(Asig1.getVal(), Asig1.getError())); print(""Asig [BBlight] = {} +/- {}"".format(Asig2.getVal(), Asig2.getError())); ; can.SaveAs(""rf709_BarlowBeeston.png""); formatOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf709__BarlowBeeston_8py.html:6950,error,errors,6950,doc/master/rf709__BarlowBeeston_8py.html,https://root.cern,https://root.cern/doc/master/rf709__BarlowBeeston_8py.html,1,['error'],['errors']
Availability,"ma);; ; // Construct plot frame in 'x'; RooPlot *xframe = x.frame(Title(""Gaussian pdf.""));; ; // P l o t m o d e l a n d c h a n g e p a r a m e t e r v a l u e s; // ---------------------------------------------------------------------------; ; // Plot gauss in frame (i.e. in x); gauss.plotOn(xframe);; ; // Change the value of sigma to 3; sigma.setVal(3);; ; // Plot gauss in frame (i.e. in x) and draw frame on canvas; gauss.plotOn(xframe, LineColor(kRed));; ; // G e n e r a t e e v e n t s; // -----------------------------; ; // Generate a dataset of 1000 events in x from gauss; std::unique_ptr<RooDataSet> data{gauss.generate(x, 10000)};; ; // Make a second plot frame in x and draw both the; // data and the pdf in the frame; RooPlot *xframe2 = x.frame(Title(""Gaussian pdf with data""));; data->plotOn(xframe2);; gauss.plotOn(xframe2);; ; // F i t m o d e l t o d a t a; // -----------------------------; ; // Fit pdf to data; gauss.fitTo(*data, PrintLevel(-1));; ; // Print values of mean and sigma (that now reflect fitted values and errors); mean.Print();; sigma.Print();; ; // Draw all frames on a canvas; TCanvas *c = new TCanvas(""rf101_basics"", ""rf101_basics"", 800, 400); c->Divide(2);; c->cd(1);; gPad->SetLeftMargin(0.15);; xframe->GetYaxis()->SetTitleOffset(1.6);; xframe->Draw();; c->cd(2);; gPad->SetLeftMargin(0.15);; xframe2->GetYaxis()->SetTitleOffset(1.6);; xframe2->Draw();; }; c#define c(i)Definition RSha256.hxx:101; RooDataSet.h; RooGaussian.h; RooPlot.h; RooRealVar.h; kRed@ kRedDefinition Rtypes.h:66; TAxis.h; TCanvas.h; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; gPad#define gPadDefinition TVirtualPad.h:308; RooGaussianPlain Gaussian p.d.f.Definition RooGaussian.h:24; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::framestatic RooPlot * frame(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf101__basics_8C.html:1973,error,errors,1973,doc/master/rf101__basics_8C.html,https://root.cern,https://root.cern/doc/master/rf101__basics_8C.html,1,['error'],['errors']
Availability,"mage.; Definition at line 2163 of file TASImage.cxx. ◆ GetIconName(). const char * TASImage::GetIconName ; (; ); const. inlineoverridevirtual . Returns mime type name of object. ; Used by the TBrowser (via TGMimeTypes class). Override for class of which you would like to have different icons for objects of the same class. ; Reimplemented from TObject.; Definition at line 99 of file TASImage.h. ◆ GetImage(). ASImage * TASImage::GetImage ; (; ); const. inline . Definition at line 186 of file TASImage.h. ◆ GetImageBuffer(). void TASImage::GetImageBuffer ; (; char ** ; buffer, . int * ; size, . EImageFileTypes ; type = TImage::kPng . ). overridevirtual . Return in-memory buffer compressed according image type. ; Buffer must be deallocated after usage with free(buffer) call. This method can be used for sending images over network. ; Reimplemented from TImage.; Definition at line 5989 of file TASImage.cxx. ◆ GetMask(). Pixmap_t TASImage::GetMask ; (; ). overridevirtual . Returns image mask pixmap (alpha channel). ; The pixmap must deleted by user. ; Reimplemented from TImage.; Definition at line 2303 of file TASImage.cxx. ◆ GetObjectInfo(). char * TASImage::GetObjectInfo ; (; Int_t ; px, . Int_t ; py . ); const. overridevirtual . Get image pixel coordinates and the pixel value at the mouse pointer. ; Reimplemented from TObject.; Definition at line 1820 of file TASImage.cxx. ◆ GetPixels(). TArrayL * TASImage::GetPixels ; (; Int_t ; x = 0, . Int_t ; y = 0, . UInt_t ; w = 0, . UInt_t ; h = 0 . ). overridevirtual . Return 2D array of machine dependent pixel values. ; Reimplemented from TImage.; Definition at line 2409 of file TASImage.cxx. ◆ GetPixmap(). Pixmap_t TASImage::GetPixmap ; (; ). overridevirtual . Returns image pixmap. ; The pixmap must deleted by user. ; Reimplemented from TImage.; Definition at line 2271 of file TASImage.cxx. ◆ GetPolygonSpans(). Bool_t TASImage::GetPolygonSpans ; (; UInt_t ; npt, . TPoint * ; ppt, . UInt_t * ; nspans, . TPoint ** ; firstPoint, . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASImage.html:57536,mask,mask,57536,doc/master/classTASImage.html,https://root.cern,https://root.cern/doc/master/classTASImage.html,1,['mask'],['mask']
Availability,"make sure the cache is clean. ; Reimplemented from RooAbsRealLValue.; Definition at line 1193 of file RooRealVar.cxx. ◆ copyCacheFast(). void RooRealVar::copyCacheFast ; (; const RooRealVar & ; other, . bool ; setValDirty = true . ). inline . Definition at line 131 of file RooRealVar.h. ◆ DeclFileName(). static const char * RooRealVar::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 173 of file RooRealVar.h. ◆ defaultPrintContents(). Int_t RooRealVar::defaultPrintContents ; (; Option_t * ; opt); const. overridevirtual . Mapping of Print() option string to RooPrintable contents specifications. ; Reimplemented from RooAbsArg.; Definition at line 820 of file RooRealVar.cxx. ◆ deleteSharedProperties(). void RooRealVar::deleteSharedProperties ; (; ). Stop sharing properties. ; Definition at line 1318 of file RooRealVar.cxx. ◆ errorVar(). RooErrorVar * RooRealVar::errorVar ; (; ); const. Return a RooAbsRealLValue representing the error associated with this variable. ; The callers takes ownership of the return object ; Definition at line 278 of file RooRealVar.cxx. ◆ evaluate(). double RooRealVar::evaluate ; (; ); const. inlineoverrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 145 of file RooRealVar.h. ◆ fillTreeBranch(). void RooRealVar::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Overload RooAbsReal::fillTreeBranch to also fill tree branches with (asymmetric) errors if requested. ; Reimplemented from RooAbsReal.; Definition at line 1155 of file RooRealVar.cxx. ◆ format() [1/2]. TString * RooRealVar::format ; (; const RooCmdArg & ; formatArg); const. Format contents of RooRealVar for pretty printing on RooPlot parameter boxes. ; This function processes the named arguments taken by paramOn() and translates them to an option string parsed by RooRealVar::format(Int_t sigDigits, const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVar.html:78139,error,error,78139,doc/master/classRooRealVar.html,https://root.cern,https://root.cern/doc/master/classRooRealVar.html,1,['error'],['error']
Availability,"make)Set all the branches in this TTree to be in decomposed object mode (also known as MakeClass mode).Definition TTree.cxx:9177; TTree::GetDirectoryTDirectory * GetDirectory() constDefinition TTree.h:462; TTree::GetReadCacheTTreeCache * GetReadCache(TFile *file) constFind and return the TTreeCache registered with the file and which may contain branches for us.Definition TTree.cxx:6318; TTree::fEntriesLong64_t fEntriesNumber of entries.Definition TTree.h:84; TTree::fEntryListTEntryList * fEntryList! Pointer to event selection list (if one)Definition TTree.h:126; TTree::GetTreeIndexvirtual TVirtualIndex * GetTreeIndex() constDefinition TTree.h:558; TTree::fExternalFriendsTList * fExternalFriends! List of TFriendsElement pointing to us and need to be notified of LoadTree. Content not owned.Definition TTree.h:131; TTree::SetMaxVirtualSizevirtual void SetMaxVirtualSize(Long64_t size=0)Definition TTree.h:665; TTree::SetAutoSavevirtual void SetAutoSave(Long64_t autos=-300000000)In case of a program crash, it will be possible to recover the data in the tree up to the last AutoSa...Definition TTree.cxx:8342; TTree::Processvirtual Long64_t Process(const char *filename, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0)Process this tree executing the TSelector code in the specified filename.Definition TTree.cxx:7450; TTree::ResetAfterMergevirtual void ResetAfterMerge(TFileMergeInfo *)Resets the state of this TTree after a merge (keep the customization but forget the data).Definition TTree.cxx:8034; TTree::GetEntriesvirtual Long64_t GetEntries() constDefinition TTree.h:463; TTree::CloneTreevirtual TTree * CloneTree(Long64_t nentries=-1, Option_t *option="""")Create a clone of this tree and copy nentries.Definition TTree.cxx:3139; TTree::GetLeafvirtual TLeaf * GetLeaf(const char *branchname, const char *leafname)Return pointer to the 1st Leaf named name in any Branch of this Tree or any branch in the list of fri...Definition TTree.cxx:6195; TTree::Resetvir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:148129,recover,recover,148129,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,1,['recover'],['recover']
Availability,"making the step size h smaller. double operator()(double x); { return Derivative1(x); }. double Derivative1(const ROOT::Math::IGenFunction& f, double x, double h). First Derivative calculation passing function and step-size. double Derivative2(double x). Returns the second derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::DerivativeError:; (total error = roundoff error + interpolation error); the estimate of the roundoff error is taken as follows:. where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. double Derivative2(const ROOT::Math::IGenFunction& f, double x, double h). Second Derivative calculation passing function and step-size. double Derivative3(double x). Returns the third derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your fun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__RichardsonDerivator.html:5404,error,error,5404,root/html526/ROOT__Math__RichardsonDerivator.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__RichardsonDerivator.html,35,['error'],['error']
Availability,"malizing function TODO include target-transformation into makefunction ;  ; Bool_t PrepareTransformation (const std::vector< Event * > &);  prepare transformation ;  ; virtual void PrintTransformation (std::ostream &o);  prints the transformation ranges ;  ; virtual void ReadFromXML (void *trfnode);  Read the transformation matrices from the xml node. ;  ; void ReadTransformationFromStream (std::istream &, const TString &);  Read the variable ranges from an input stream. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual const Event * Transform (const Event *const, Int_t cls) const;  apply the normalization transformation ;  ; void WriteTransformationToStream (std::ostream &) const;  write the transformation to the stream ;  ;  Public Member Functions inherited from TMVA::VariableTransformBase;  VariableTransformBase (DataSetInfo &dsi, Types::EVariableTransform tf, const TString &trfName);  standard constructor ;  ; virtual ~VariableTransformBase (void);  ; virtual void CountVariableTypes (UInt_t &nvars, UInt_t &ntgts, UInt_t &nspcts) const;  count variables, targets and spectators ;  ; virtual Bool_t GetInput (const Event *event, std::vector< Float_t > &input, std::vector< Char_t > &mask, Bool_t backTransform=kFALSE) const;  select the values from the event ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; TString GetShortName () const;  ; Types::EVariableTransform GetVariableTransform () const;  ; Bool_t IsCreated () const;  ; Bool_t IsEnabled () const;  ; Bool_t IsNormalised () const;  ; MsgLogger & Log () const;  ; virtual void SelectInput (const TString &inputVariables, Bool_t putIntoVariables=kFALSE);  select the variables/targets/spectators which serve as input to the transformation ;  ; void SetEnabled (Bool_t e);  ; void SetNormalise (Bool_t n);  ; virtual void SetOutput (Event *event, std::vector< Float_t > &output, std::vector< Cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableNormalizeTransform.html:3735,mask,mask,3735,doc/master/classTMVA_1_1VariableNormalizeTransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableNormalizeTransform.html,1,['mask'],['mask']
Availability,"managed by this class; use auto_ptr to manage previously existing distribution objects. bool SetRandomGenerator(); set an external random generator. bool SetContDistribution(const TUnuranContDist& dist); internal method to set in unuran the function pointer for a continuous univariate distribution. bool SetMultiDistribution(const TUnuranMultiContDist& dist); internal method to set in unuran the function pointer for a multivariate distribution. bool SetEmpiricalDistribution(const TUnuranEmpDist& dist). bool SetDiscreteDistribution(const TUnuranDiscrDist& dist); internal method to set in unuran the function pointer for a discrete univariate distribution. bool SetMethodAndInit(). int SampleDiscr(); sample one-dimensional distribution. double Sample(); sample one-dimensional distribution. bool SampleMulti(double* x); sample multidimensional distribution. void SetSeed(unsigned int seed). bool SetLogLevel(unsigned int iflag = 1). bool InitPoisson(double mu, const string& method = ""dstd""); initializaton for a Poisson. bool InitBinomial(unsigned int ntot, double prob, const string& method = ""dstd""); initializaton for a Binomial. bool ReInitDiscrDist(unsigned int npar, double* params); re-initialization of UNURAN without freeing and creating a new fGen object; works only for pre-defined distribution by changing their parameters. void SetRandom(TRandom* r). set the random engine.; Must be called before init to have effect. TRandom * GetRandom(). return instance of the random engine used. bool SetLogStream(). set stream for log and error (not yet implemented). { return false;}. const std::string & MethodName() const. used Unuran method. { return fMethod; }. » Author: L. Moneta Tue Sep 26 16:25:09 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/unuran:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnuran.html:4788,error,error,4788,root/html602/TUnuran.html,https://root.cern,https://root.cern/root/html602/TUnuran.html,1,['error'],['error']
Availability,"managed by this class; use auto_ptr to manage previously existing distribution objects. bool SetRandomGenerator(); set an external random generator. bool SetContDistribution(const TUnuranContDist& dist); internal method to set in unuran the function pointer for a continuous univariate distribution. bool SetMultiDistribution(const TUnuranMultiContDist& dist); internal method to set in unuran the function pointer for a multivariate distribution. bool SetEmpiricalDistribution(const TUnuranEmpDist& dist). bool SetDiscreteDistribution(const TUnuranDiscrDist& dist); internal method to set in unuran the function pointer for a discrete univariate distribution. bool SetMethodAndInit(). int SampleDiscr(); sample one-dimensional distribution. double Sample(); sample one-dimensional distribution. bool SampleMulti(double* x); sample multidimensional distribution. void SetSeed(unsigned int seed). bool SetLogLevel(unsigned int iflag = 1). bool InitPoisson(double mu, const string& method = ""dstd""); initializaton for a Poisson. bool InitBinomial(unsigned int ntot, double prob, const string& method = ""dstd""); initializaton for a Binomial. bool ReInitDiscrDist(unsigned int npar, double* params); re-initialization of UNURAN without freeing and creating a new fGen object; works only for pre-defined distribution by changing their parameters. void SetRandom(TRandom* r). set the random engine.; Must be called before init to have effect. TRandom * GetRandom(). return instance of the random engine used. bool SetLogStream(). set stream for log and error (not yet implemented). { return false;}. const std::string & MethodName() const. used Unuran method. { return fMethod; }. » Author: L. Moneta Tue Sep 26 16:25:09 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/unuran:$Id$ » Last generated: 2015-09-08 17:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TUnuran.html:4788,error,error,4788,root/html604/TUnuran.html,https://root.cern,https://root.cern/root/html604/TUnuran.html,1,['error'],['error']
Availability,"map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooErrorVar(const char* name, const char* title, const RooRealVar& input); Construct an lvalue variable representing the error of RooRealVar input. RooErrorVar(const RooErrorVar& other, const char* name = 0). ~RooErrorVar(); Destructor. Double_t getVal(const RooArgSet* set = 0) const; Return value, i.e. error on input variable. Bool_t hasBinning(const char* name) const; Return true if we have binning with given name. const RooAbsBinning& getBinning(const char* name = 0, Bool_t verbose = kTRUE, Bool_t createOnTheFly = kFALSE) const; Return binning with given name. If no binning exists with such a name, clone the default; binning on the fly if so requested. RooAbsBinning& getBinning(const char* name = 0, Bool_t verbose = kTRUE, Bool_t createOnTheFly = kFALSE); Return binning with given name. If no binning exists with such a name, clone the default; binning on the fly if so requested. void setBinning(const RooAbsBinning& binning, const char* name = 0); Store given binning with this variable under the given name. void setMin(const char* name, Double_t value); Set the lower bound of the range with the given name to the given value; If name is a null pointer, set the lower bound of the default range. void setMax(const char* name, Double_t value); Set the upper bound of the range with the given name to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooErrorVar.html:37768,error,error,37768,root/html528/RooErrorVar.html,https://root.cern,https://root.cern/root/html528/RooErrorVar.html,2,['error'],['error']
Availability,"map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooErrorVar(const char* name, const char* title, const RooRealVar& input); Construct an lvalue variable representing the error of RooRealVar input. RooErrorVar(const RooErrorVar& other, const char* name = 0). ~RooErrorVar(); Destructor. Double_t getVal(const RooArgSet* set = 0) const; Return value, i.e. error on input variable. Bool_t hasBinning(const char* name) const; Return true if we have binning with given name. const RooAbsBinning& getBinning(const char* name, Bool_t verbose, Bool_t createOnTheFly); Return binning with given name. If no binning exists with such a name, clone the default; binning on the fly if so requested. RooAbsBinning& getBinning(const char* name, Bool_t /*verbose*/, Bool_t createOnTheFly); Return binning with given name. If no binning exists with such a name, clone the default; binning on the fly if so requested. void setBinning(const RooAbsBinning& binning, const char* name = 0); Store given binning with this variable under the given name. void setMin(const char* name, Double_t value); Set the lower bound of the range with the given name to the given value; If name is a null pointer, set the lower bound of the default range. void setMax(const char* name, Double_t value); Set the upper bound of the range with the given name to the given value; If name is a null pointer, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooErrorVar.html:37527,error,error,37527,root/html526/RooErrorVar.html,https://root.cern,https://root.cern/root/html526/RooErrorVar.html,1,['error'],['error']
Availability,"marises all the possible combinations of the ""Display modes groups"" and the ""Display modes"". Simple Light Height Light-Height . Points X X X X . Grid X X X X . Contours X - X - . Bars X - X - . LinesX X X X X . LinesY X X X X . BarsX X - X - . BarsY X - X - . Needles X - - - . Surface - X X X . Triangles X X X X . The Pen Attributes can be changed using pa(color, style, width). Example: h2->Draw(""SPEC dm(1,2) pa(2,1,2)"");; sets the line color to 2, line type to 1 and line width to2. Note that if pa() is not specified, the histogram ""h2"" line attributes are used. Note also that operators for SPEC option can be cumulated and specified in any order.; The buffer size can be change with bf(size). Example: h2->Draw(""SPEC bf(8000)"");; The spectrum painter needs a buffer to paint the spectrum. By default the buffer size is set to 1600. In most cases this buffer size is enough. But if the canvas size is very big, for instance 8000x5000 this buffer size is too small. An error message is issued telling to use the option bf().; The number of nodes can be change with n(nodesx, nodesy). Example: h2->Draw(""SPEC n(40,40)"");; Sometimes the displayed region is rather large. When displaying all channels pictures become very dense and complicated. It is very difficult to understand the overall shape of data. ""n(nx,ny)"" allows to change the density of displayed channels. Only the channels coinciding with given nodes are displayed.; The visualization angles can be changed with a(alpha, beta, view). Example: h2->Draw(""SPEC n(40,40) dm(0,1) a(30,30,0)"");; Alpha defines the angle between bottom horizontal screen line and the displayed space on the right side of the picture and beta on the left side, respectively. One can rotate the 3-d space around vertical axis going through the center of it employing the view parameter. Allowed values are 0, 90, 180 and 270 degrees.; zs(scale) changes the scale of the Z-axis Possible values are:. 0 = Linear (default); 1 = Log; 2 = Sqrt. If gPad->SetLogz() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:46139,error,error,46139,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['error'],['error']
Availability,"mat input*-; *-* ============================; *-* Cracks the free-format input, expecting zero or more; *-* alphanumeric fields (which it joins into COMAND(1:LNC)); *-* followed by one or more numeric fields separated by; *-* blanks and/or one comma. The numeric fields are put into; *-* the LLIST (but at most MXP) elements of PLIST.; *-* IERR = 0 if no errors,; *-* = 1 if error(s).; -; *; Initialized data. void mncros(Double_t& aopt, Int_t& iercr); Find point where MNEVAL=AMIN+UP*-; *-* ===============================; *-* Find point where MNEVAL=AMIN+UP, along the line through; *-* XMIDCR,YMIDCR with direction XDIRCR,YDIRCR, where X and Y; *-* are parameters KE1CR and KE2CR. If KE2CR=0 (from MINOS),; *-* only KE1CR is varied. From MNCONT, both are varied.; *-* Crossing point is at; *-* (U(KE1),U(KE2)) = (XMID,YMID) + AOPT*(XDIR,YDIR); -; *. void mncuve(); -*-*-*Makes sure that the current point is a local minimum; *-* ====================================================; *-* Makes sure that the current point is a local; *-* minimum and that the error matrix exists,; *-* or at least something good enough for MINOS and MNCONT; *. void mnderi(); Calculates the first derivatives of FCN (GRD); *-* =============================================; *-* Calculates the first derivatives of FCN (GRD),; *-* either by finite differences or by transforming the user-; *-* supplied derivatives to internal coordinates,; *-* according to whether fISW[2] is zero or one.; *. void mndxdi(Double_t pint, Int_t ipar, Double_t& dxdi); -*-*Calculates the transformation factor between ext/internal values; *-* =====================================================================; *-* calculates the transformation factor between external and; *-* internal parameter values. this factor is one for; *-* parameters which are not limited. called from MNEMAT.; *. void mneig(Double_t* a, Int_t ndima, Int_t n, Int_t mits, Double_t* work, Double_t precis, Int_t& ifault); Compute matrix eigen values*-; *-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:38745,error,error,38745,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,6,['error'],['error']
Availability,"mat. This first implementation does not support subdirectories; or Trees. The shared library libRXML.so may be loaded dynamically; via gSystem->Load(""libRXML""). This library is automatically; loaded by the plugin manager as soon as a XML file is created; via, eg; TFile::Open(""file.xml"",""recreate"");; TFile::Open returns a TXMLFile object. When a XML file is open in write mode,; one can use the normal TObject::Write to write an object in the file.; Alternatively one can use the new functions TDirectoryFile::WriteObject and; TDirectoryFile::WriteObjectAny to write a TObject* or any class not deriving; from TObject. example of a session saving a histogram to a XML file. TFile *f = TFile::Open(""Example.xml"",""recreate"");; TH1F *h = new TH1F(""h"",""test"",1000,-2,2);; h->FillRandom(""gaus"");; h->Write();; delete f;. example of a session reading the histogram from the file. TFile *f = TFile::Open(""Example.xml"");; TH1F *h = (TH1F*)f->Get(""h"");; h->Draw();. A new option in the canvas ""File"" menu is available to save; a TCanvas as a XML file. One can also do; canvas->Print(""Example.xml"");. Configuring ROOT with the option ""xml"". The XML package is enabled by default. documentation. See also classes TBufferXML, TKeyXML, TXMLEngine, TXMLSetup and TXMLPlayer.; An example of XML file corresponding to the small example below; can be found at http://root.cern.ch/root/Example.xml. Function Members (Methods); public:. TXMLFile(); TXMLFile(const char* filename, Option_t* option = ""read"", const char* title = ""title"", Int_t compression = 1); virtual~TXMLFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); Bool_tAddXmlComment(const char* comment); Bool_tAddXmlLine(const char* line); Bool_tAddXmlStyleSheet(const char* href, const char* type = ""text/css"", const char* title = 0, int alternate = -1, const char* me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLFile.html:2046,avail,available,2046,root/html528/TXMLFile.html,https://root.cern,https://root.cern/root/html528/TXMLFile.html,4,['avail'],['available']
Availability,"mat. This first implementation does not support subdirectories; or Trees. The shared library libRXML.so may be loaded dynamically; via gSystem->Load(""libRXML""). This library is automatically; loaded by the plugin manager as soon as a XML file is created; via, eg; TFile::Open(""file.xml"",""recreate"");; TFile::Open returns a TXMLFile object. When a XML file is open in write mode,; one can use the normal TObject::Write to write an object in the file.; Alternatively one can use the new functions TDirectoryFile::WriteObject and; TDirectoryFile::WriteObjectAny to write a TObject* or any class not deriving; from TObject. example of a session saving a histogram to a XML file. TFile *f = TFile::Open(""Example.xml"",""recreate"");; TH1F *h = new TH1F(""h"",""test"",1000,-2,2);; h->FillRandom(""gaus"");; h->Write();; delete f;. example of a session reading the histogram from the file. TFile *f = TFile::Open(""Example.xml"");; TH1F *h = (TH1F*)f->Get(""h"");; h->Draw();. A new option in the canvas ""File"" menu is available to save; a TCanvas as a XML file. One can also do; canvas->Print(""Example.xml"");. Configuring ROOT with the option ""xml"". The XML package is enabled by default. documentation. See also classes TBufferXML, TKeyXML, TXMLEngine, TXMLSetup and TXMLPlayer.; An example of XML file corresponding to the small example below; can be found at http://root.cern.ch/root/Example.xml. Function Members (Methods); public:. virtual~TXMLFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); Bool_tAddXmlComment(const char* comment); Bool_tAddXmlLine(const char* line); Bool_tAddXmlStyleSheet(const char* href, const char* type = ""text/css"", const char* title = 0, int alternate = -1, const char* media = 0, const char* charset = 0); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXMLFile.html:2070,avail,available,2070,root/html602/TXMLFile.html,https://root.cern,https://root.cern/root/html602/TXMLFile.html,2,['avail'],['available']
Availability,"matching; name is found, the corresponding object is added in the legend using its pointer. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",600,500);; gStyle->SetOptStat(0);. TH1F *h1 = new TH1F(""h1"",""TLegend Example"",200,-10,10);; h1->FillRandom(""gaus"",30000);; h1->SetFillColor(kGreen);; h1->SetFillStyle(3003);; h1->Draw();. TF1 *f1=new TF1(""f1"",""1000*TMath::Abs(sin(x)/x)"",-10,10);; f1->SetLineColor(kBlue);; f1->SetLineWidth(4);; f1->Draw(""same"");. const Int_t n = 20;; Double_t x[n], y[n], ex[n], ey[n];; for (Int_t i=0;i<n;i++) {; x[i] = i*0.1;; y[i] = 1000*sin(x[i]+0.2);; x[i] = 17.8*x[i]-8.9;; ex[i] = 1.0;; ey[i] = 10.*i;; }; TGraphErrors *gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetName(""gr"");; gr->SetLineColor(kRed);; gr->SetLineWidth(2);; gr->SetMarkerStyle(21);; gr->SetMarkerSize(1.3);; gr->SetMarkerColor(7);; gr->Draw(""P"");. leg = new TLegend(0.1,0.7,0.48,0.9);; leg->SetHeader(""The Legend Title"");; leg->AddEntry(h1,""Histogram filled with random numbers"",""f"");; leg->AddEntry(""f1"",""Function abs(#frac{sin(x)}{x})"",""l"");; leg->AddEntry(""gr"",""Graph with error bars"",""lep"");; leg->Draw();. return c1;; }. TLegend inherits from TAttText therefore changing any; text attributes (text alignment, font, color...) on a legend will changed the; text attributes on each line. In particular it can be interesting to change the text alignement that way. In; order to have a base-line vertical alignment instead of a centered one simply do:. leg->SetTextAlign(13);. leg->SetTextAlign(11);; TLegend attributes can be changed using; gStyle. The default settings are:. SetLegendBorderSize(1);; SetLegendFillColor(0);; SetLegendFont(42);; SetLegendTextSize(0.);. The global attributes change the default values for the next created legends. Text attributes can be also changed individually on each legend entry:. TLegendEntry *le = leg->AddEntry(h1,""Histogram filled with random numbers"",""f"");; le->SetTextColor(kBlue);;. Note that the TPad class has a method to build automatically a lege",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TLegend.html:2228,error,error,2228,root/html604/TLegend.html,https://root.cern,https://root.cern/root/html604/TLegend.html,1,['error'],['error']
Availability,"mathsf{C}\mathbf{e}_n; \end{eqnarray*}. The minimization of the sum in (7) is obtained when each term \(\mathbf{e}_n^\mathsf{C}\mathbf{e}_n\) is minimum, since \(\mathsf{C}\) is positive definite. By the method of Lagrange multipliers, and the condition (5), we get ; \[; E_N = \sum^{P-1}_{n=N+1} \left(\mathbf{e}_n^T\mathsf{C}\mathbf{e}_n -; l_n\mathbf{e}_n^T\bullet\mathbf{e}_n + l_n\right); \]. The minimum condition \(\frac{dE_N}{d\mathbf{e}^T_n} = 0\) leads to the equation ; \[; \mathsf{C}\mathbf{e}_n = l_n\mathbf{e}_n\,,; \]. which shows that \(\mathbf{e}_n\) is an eigenvector of the covariance matrix \(\mathsf{C}\) with eigenvalue \(l_n\). The estimated minimum error is then given by ; \[; E_N \sim \sum^{P-1}_{n=N+1} \mathbf{e}_n^T\bullet l_n\mathbf{e}_n; = \sum^{P-1}_{n=N+1} l_n\,,; \]. where \(l_n,\,n=N+1,\ldots,P\) \(l_n,\,n=N+1,\ldots,P-1\) are the eigenvalues associated with the omitted eigenvectors in the expansion (3). Thus, by choosing the \(N\) largest eigenvalues, and their associated eigenvectors, the error \(E_N\) is minimized.; The transformation matrix to go from the pattern space to the feature space consists of the ordered eigenvectors \(\mathbf{e}_1,\ldots,\mathbf{e}_P\) \(\mathbf{e}_0,\ldots,\mathbf{e}_{P-1}\) for its columns ; \[; \mathsf{T} = \left[; \begin{array}{cccc}; \mathbf{e}_0 &; \mathbf{e}_1 &; \vdots &; \mathbf{e}_{P-1}; \end{array}\right]; = \left[; \begin{array}{cccc}; \mathbf{e}_{0_0} & \mathbf{e}_{1_0} & \cdots & \mathbf{e}_{{P-1}_0}\\; \mathbf{e}_{0_1} & \mathbf{e}_{1_1} & \cdots & \mathbf{e}_{{P-1}_1}\\; \vdots & \vdots & \ddots & \vdots \\; \mathbf{e}_{0_{P-1}} & \mathbf{e}_{1_{P-1}} & \cdots & \mathbf{e}_{{P-1}_{P-1}}\\; \end{array}\right]; \]. This is an orthogonal transformation, or rotation, of the pattern space and feature selection results in ignoring certain coordinates in the transformed space.; Christian Holm August 2000, CERN ; Definition at line 21 of file TPrincipal.h. Public Member Functions;  TPrincipal ();  Empty",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPrincipal.html:7039,error,error,7039,doc/master/classTPrincipal.html,https://root.cern,https://root.cern/doc/master/classTPrincipal.html,1,['error'],['error']
Availability,"matic histograms; static Bool_tTH1::fgDefaultSumw2!flag to call TH1::Sumw2 automatically at histogram creation time; static Bool_tTH1::fgStatOverflows!flag to use under/overflows in statistics. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TH3C(); Constructor. ~TH3C(); Destructor. TH3C(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup); Normal constructor for fix bin size 3-D histograms. TH3C(const char* name, const char* title, Int_t nbinsx, const Float_t* xbins, Int_t nbinsy, const Float_t* ybins, Int_t nbinsz, const Float_t* zbins); Normal constructor for variable bin size 3-D histograms. TH3C(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, const Double_t* ybins, Int_t nbinsz, const Double_t* zbins); Normal constructor for variable bin size 3-D histograms. TH3C(const TH3C& h3c); Copy constructor. void AddBinContent(Int_t bin); Increment bin content by 1. void AddBinContent(Int_t bin, Double_t w); Increment bin content by w. void Copy(TObject& hnew) const; Copy this 3-D histogram structure to newth3. void Reset(Option_t* option = """"); Reset this histogram: contents, errors, etc. void SetBinsLength(Int_t n = -1); Set total number of bins including under/overflow; Reallocate bin contents array. void Streamer(TBuffer& ); Stream an object of class TH3C. TH3C& operator=(const TH3C& h1); Operator =. Double_t RetrieveBinContent(Int_t bin) const; { return Double_t (fArray[bin]); }. void UpdateBinContent(Int_t bin, Double_t content); { fArray[bin] = Char_t (content); }. » Author: Rene Brun 27/10/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-02 16:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TH3C.html:30771,error,errors,30771,root/html604/TH3C.html,https://root.cern,https://root.cern/root/html604/TH3C.html,1,['error'],['errors']
Availability,"matic histograms; static Bool_tTH1::fgDefaultSumw2!flag to call TH1::Sumw2 automatically at histogram creation time; static Bool_tTH1::fgStatOverflows!flag to use under/overflows in statistics. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TH3C(); Constructor. ~TH3C(); Destructor. TH3C(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup); Normal constructor for fix bin size 3-D histograms. TH3C(const char* name, const char* title, Int_t nbinsx, const Float_t* xbins, Int_t nbinsy, const Float_t* ybins, Int_t nbinsz, const Float_t* zbins); Normal constructor for variable bin size 3-D histograms. TH3C(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, const Double_t* ybins, Int_t nbinsz, const Double_t* zbins); Normal constructor for variable bin size 3-D histograms. TH3C(const TH3C& h3c); Copy constructor. void AddBinContent(Int_t bin); Increment bin content by 1. void AddBinContent(Int_t bin, Double_t w); Increment bin content by w. void Copy(TObject& hnew) const; Copy this 3-D histogram structure to newth3. void Reset(Option_t* option = """"); Reset this histogram: contents, errors, etc. void SetBinsLength(Int_t n = -1); Set total number of bins including under/overflow; Reallocate bin contents array. void Streamer(TBuffer& ); Stream an object of class TH3C. TH3C& operator=(const TH3C& h1); Operator =. Double_t RetrieveBinContent(Int_t bin) const; { return Double_t (fArray[bin]); }. void UpdateBinContent(Int_t bin, Double_t content); { fArray[bin] = Char_t (content); }. » Author: Rene Brun 27/10/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-30 15:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH3C.html:30771,error,errors,30771,root/html602/TH3C.html,https://root.cern,https://root.cern/root/html602/TH3C.html,1,['error'],['errors']
Availability,"matic histograms; static Bool_tTH1::fgDefaultSumw2!flag to call TH1::Sumw2 automatically at histogram creation time; static Bool_tTH1::fgStatOverflows!flag to use under/overflows in statistics. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TH3S(); Constructor. ~TH3S(); Destructor. TH3S(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup); Normal constructor for fix bin size 3-D histograms. TH3S(const char* name, const char* title, Int_t nbinsx, const Float_t* xbins, Int_t nbinsy, const Float_t* ybins, Int_t nbinsz, const Float_t* zbins); Normal constructor for variable bin size 3-D histograms. TH3S(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, const Double_t* ybins, Int_t nbinsz, const Double_t* zbins); Normal constructor for variable bin size 3-D histograms. TH3S(const TH3S& h3s); Copy Constructor. void AddBinContent(Int_t bin); Increment bin content by 1. void AddBinContent(Int_t bin, Double_t w); Increment bin content by w. void Copy(TObject& hnew) const; Copy this 3-D histogram structure to newth3. void Reset(Option_t* option = """"); Reset this histogram: contents, errors, etc. void SetBinsLength(Int_t n = -1); Set total number of bins including under/overflow; Reallocate bin contents array. void Streamer(TBuffer& ); Stream an object of class TH3S. TH3S& operator=(const TH3S& h1); Operator =. Double_t RetrieveBinContent(Int_t bin) const; { return Double_t (fArray[bin]); }. void UpdateBinContent(Int_t bin, Double_t content); { fArray[bin] = Char_t (content); }. » Author: Rene Brun 27/10/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-02 16:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TH3S.html:30791,error,errors,30791,root/html604/TH3S.html,https://root.cern,https://root.cern/root/html604/TH3S.html,1,['error'],['errors']
Availability,"matic histograms; static Bool_tTH1::fgDefaultSumw2!flag to call TH1::Sumw2 automatically at histogram creation time; static Bool_tTH1::fgStatOverflows!flag to use under/overflows in statistics. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TH3S(); Constructor. ~TH3S(); Destructor. TH3S(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup); Normal constructor for fix bin size 3-D histograms. TH3S(const char* name, const char* title, Int_t nbinsx, const Float_t* xbins, Int_t nbinsy, const Float_t* ybins, Int_t nbinsz, const Float_t* zbins); Normal constructor for variable bin size 3-D histograms. TH3S(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, const Double_t* ybins, Int_t nbinsz, const Double_t* zbins); Normal constructor for variable bin size 3-D histograms. TH3S(const TH3S& h3s); Copy Constructor. void AddBinContent(Int_t bin); Increment bin content by 1. void AddBinContent(Int_t bin, Double_t w); Increment bin content by w. void Copy(TObject& hnew) const; Copy this 3-D histogram structure to newth3. void Reset(Option_t* option = """"); Reset this histogram: contents, errors, etc. void SetBinsLength(Int_t n = -1); Set total number of bins including under/overflow; Reallocate bin contents array. void Streamer(TBuffer& ); Stream an object of class TH3S. TH3S& operator=(const TH3S& h1); Operator =. Double_t RetrieveBinContent(Int_t bin) const; { return Double_t (fArray[bin]); }. void UpdateBinContent(Int_t bin, Double_t content); { fArray[bin] = Char_t (content); }. » Author: Rene Brun 27/10/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-30 15:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH3S.html:30791,error,errors,30791,root/html602/TH3S.html,https://root.cern,https://root.cern/root/html602/TH3S.html,1,['error'],['errors']
Availability,"mation (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::FitResult::fGlobalCCstd::vector< double > fGlobalCCglobal Correlation coefficientDefinition FitResult.h:363; ROOT::Fit::FitResult::IsValidbool IsValid() constTrue if fit successful, otherwise false.Definition FitResult.h:105; ROOT::Fit::FitResult::IsEmptybool IsEmpty() constTrue if a fit result does not exist (even invalid) with parameter values.Definition FitResult.h:108; ROOT::Fit::FitResult::fNFreeunsigned int fNFreenumber of fit free parameters (total parameters are in size of parameter vector)Definition FitResult.h:345; ROOT::Fit::FitResult::fBoundParamsstd::map< unsigned int, unsigned int > fBoundParamslist of limited parametersDefinition FitResult.h:358; ROOT::Fit::FitResult::FittedBinDataconst BinData * FittedBinData() constreturn BinData used in the fit (return a nullptr in case a different fit is done or the data are not ...Definition FitResult.cxx:631; ROOT::Fit::FitResult::ParErrordouble ParError(unsigned int i) constparameter error by indexDefinition FitResult.h:183; ROOT::Fit::FitResult::FillResultvoid FillResult(const std::shared_ptr< ROOT::Math::Minimizer > &min, const FitConfig &fconfig, const std::shared_ptr< IModelFunction > &f, bool isValid, unsigned int sizeOfData=0, int fitType=1, const ROOT::Math::IMultiGenFunction *chi2func=nullptr, unsigned int ncalls=0)Fill the fit result from a Minimizer instance after fitting Run also Minos if requested from the conf...Definition FitResult.cxx:100; ROOT::Fit::FitResult::UpperErrordouble UpperError(unsigned int i) constupper Minos error. If Minos has not run for parameter i return the parabolic errorDefinition FitResult.cxx:339; ROOT::Fit::FitResult::fValdouble fValminimum function valueDefinition FitResult.h:350; ROOT::Fit::FitResult::fEdmdouble fEdmexpected distance from minimumDefinition FitResult.h:351; ROOT::Fit::FitResult::fErrorsstd::vector< double > fErrorserrorsDefinition FitResult.h:361; ROOT::Fit::FitResult::NormalizedErrors",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FitResult_8h_source.html:17403,error,error,17403,doc/master/FitResult_8h_source.html,https://root.cern,https://root.cern/doc/master/FitResult_8h_source.html,1,['error'],['error']
Availability,"mation you may loose in case of; a job crash. In case your program crashes before closing the file holding this tree,; the file will be automatically recovered when you will connect the file; in UPDATE mode.; The Tree will be recovered at the status corresponding to the last AutoSave. if option contains ""SaveSelf"", gDirectory->SaveSelf() is called.; This allows another process to analyze the Tree while the Tree is being filled. if option contains ""FlushBaskets"", TTree::FlushBaskets is called and all; the current basket are closed-out and written to disk individually. By default the previous header is deleted after having written the new header.; if option contains ""Overwrite"", the previous Tree header is deleted; before written the new header. This option is slightly faster, but; the default option is safer in case of a problem (disk quota exceeded); when writing the new header. The function returns the number of bytes written to the file.; if the number of bytes is null, an error has occurred while writing; the header to the file. How to write a Tree in one process and view it from another process. The following two scripts illustrate how to do this.; The script treew.C is executed by process1, treer.C by process2. ----- script treew.C; void treew() {; TFile f(""test.root"",""recreate"");; TNtuple *ntuple = new TNtuple(""ntuple"",""Demo"",""px:py:pz:random:i"");; Float_t px, py, pz;; for ( Int_t i=0; i<10000000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; Float_t random = gRandom->Rndm(1);; ntuple->Fill(px,py,pz,random,i);; if (i%1000 == 1) ntuple->AutoSave(""SaveSelf"");; }; }. ----- script treer.C; void treer() {; TFile f(""test.root"");; TTree *ntuple = (TTree*)f.Get(""ntuple"");; TCanvas c1;; Int_t first = 0;; while(1) {; if (first == 0) ntuple->Draw(""px>>hpx"", """","""",10000000,first);; else ntuple->Draw(""px>>+hpx"","""","""",10000000,first);; first = (Int_t)ntuple->GetEntries();; c1.Update();; gSystem->Sleep(1000); //sleep 1 second; ntuple->Refresh();; }; }. TBranch* Branc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTree.html:41527,error,error,41527,root/html532/TTree.html,https://root.cern,https://root.cern/root/html532/TTree.html,4,['error'],['error']
Availability,"matrices for each class); 1533 ; 1534 std::vector<TVectorD*>* vec = new std::vector<TVectorD*>(matNum);; 1535 std::vector<TMatrixD*>* mat2 = new std::vector<TMatrixD*>(matNum);; 1536 std::vector<Double_t> count(matNum);; 1537 count.assign(matNum,0);; 1538 ; 1539 Int_t cls = 0;; 1540 TVectorD* v;; 1541 TMatrixD* m;; 1542 UInt_t ivar=0, jvar=0;; 1543 for (cls = 0; cls < matNum ; cls++) {; 1544 vec->at(cls) = new TVectorD(nvars);; 1545 mat2->at(cls) = new TMatrixD(nvars,nvars);; 1546 v = vec->at(cls);; 1547 m = mat2->at(cls);; 1548 ; 1549 for (ivar=0; ivar<nvars; ivar++) {; 1550 (*v)(ivar) = 0;; 1551 for (jvar=0; jvar<nvars; jvar++) {; 1552 (*m)(ivar, jvar) = 0;; 1553 }; 1554 }; 1555 }; 1556 ; 1557 // perform event loop; 1558 for (UInt_t i=0; i<events.size(); i++) {; 1559 ; 1560 // fill the event; 1561 const Event * ev = events[i];; 1562 cls = ev->GetClass();; 1563 Double_t weight = ev->GetWeight();; 1564 ; 1565 std::vector<Float_t> input;; 1566 std::vector<Char_t> mask; // entries with kTRUE must not be transformed; 1567 // Bool_t hasMaskedEntries = kFALSE;; 1568 if (transformBase) {; 1569 /* hasMaskedEntries = */ transformBase->GetInput (ev, input, mask);; 1570 } else {; 1571 for (ivar=0; ivar<nvars; ++ivar) {; 1572 input.push_back (ev->GetValue(ivar));; 1573 }; 1574 }; 1575 ; 1576 if (maxCls > 1) {; 1577 v = vec->at(matNum-1);; 1578 m = mat2->at(matNum-1);; 1579 ; 1580 count.at(matNum-1)+=weight; // count used events; 1581 for (ivar=0; ivar<nvars; ivar++) {; 1582 ; 1583 Double_t xi = input.at (ivar);; 1584 (*v)(ivar) += xi*weight;; 1585 (*m)(ivar, ivar) += (xi*xi*weight);; 1586 ; 1587 for (jvar=ivar+1; jvar<nvars; jvar++) {; 1588 Double_t xj = input.at (jvar);; 1589 (*m)(ivar, jvar) += (xi*xj*weight);; 1590 (*m)(jvar, ivar) = (*m)(ivar, jvar); // symmetric matrix; 1591 }; 1592 }; 1593 }; 1594 ; 1595 count.at(cls)+=weight; // count used events; 1596 v = vec->at(cls);; 1597 m = mat2->at(cls);; 1598 for (ivar=0; ivar<nvars; ivar++) {; 1599 Double_t xi = input.at (ivar)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:56097,mask,mask,56097,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,2,['mask'],['mask']
Availability,"matrix If the variable is fixed or const the values for that variables are zero. ;  ; bool GetMinosError (unsigned int i, double &errLow, double &errUp, int=0) override;  get the minos error for parameter i, return false if Minos failed A minimizaiton must be performed befre, return false if no minimization has been done In case of Minos failed the status error is updated as following status += 10 * minosStatus. ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; double GlobalCC (unsigned int i) const override;  get global correlation coefficient for the variable i. ;  ; bool Hesse () override;  perform a full calculation of the Hessian matrix for error calculation If a valid minimum exists the calculation is done on the minimum point otherwise is performed in the current set values of parameters Status code of minimizer is updated according to the following convention (in case Hesse failed) status += 100*hesseStatus where hesse status is: status = 1 : hesse failed status = 2 : matrix inversion failed status = 3 : matrix is not pos defined ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if an existing variable is fixed (i.e. ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization. ;  ; int MinosStatus () const override;  MINOS status code of last Minos run status & 1 > 0 : invalid lower error status & 2 > 0 : invalid upper error status & 4 > 0 : invalid because maximum number of function calls exceeded status & 8 > 0 : a new minimum has been found status & 16 > 0 : error is truncated because parameter is at lower/upper limit. ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int N",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html:3525,error,error,3525,doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html,1,['error'],['error']
Availability,"mats a string using a printf style format descriptor.Definition TString.cxx:2310; TString::GetPointerchar * GetPointer()Definition TString.h:256; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; TString::Recommendstatic Ssiz_t Recommend(Ssiz_t s)Definition TString.h:234; TString::AtollLong64_t Atoll() constReturn long long value of string.Definition TString.cxx:2014; TSubStringA zero length substring is legal.Definition TString.h:85; TSubString::TSubStringTSubString(const TString &s, Ssiz_t start, Ssiz_t len)Private constructor.Definition TString.cxx:1631; TSubString::operator=TSubString & operator=(const char *s)Assign char* to sub-string.Definition TString.cxx:1696; TSubString::IsNullBool_t IsNull() constDefinition TString.h:129; TSubString::ToUppervoid ToUpper()Convert sub-string to upper-case.Definition TString.cxx:1754; TSubString::fStrTString & fStrDefinition TString.h:95; TSubString::SubStringErrorvoid SubStringError(Ssiz_t, Ssiz_t, Ssiz_t) constOutput error message.Definition TString.cxx:1766; TSubString::fBeginSsiz_t fBeginDefinition TString.h:96; TSubString::operator[]char & operator[](Ssiz_t i)Return character at pos i from sub-string. Check validity of i.Definition TString.cxx:1668; TSubString::fExtentSsiz_t fExtentDefinition TString.h:97; TSubString::AssertElementvoid AssertElement(Ssiz_t i) constCheck to make sure a sub-string index is in range.Definition TString.cxx:1775; TSubString::ToLowervoid ToLower()Convert sub-string to lower-case.Definition TString.cxx:1742; TSubString::Dataconst char * Data() constDefinition TString.h:736; TSubString::operator()char & operator()(Ssiz_t i)Return character at pos i from sub-string. No check on i.Definition TString.cxx:1677; TSubString::LengthSsiz_t Length() constDefinition TString.h:122; bool; double; int; unsigned int; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; h1TH1F * h1Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8cxx_source.html:106876,error,error,106876,doc/master/TString_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TString_8cxx_source.html,1,['error'],['error']
Availability,"max = 0); virtual voidDefinePerspectiveView(); virtual voidDefineViewDirection(const Double_t* s, const Double_t* c, Double_t cosphi, Double_t sinphi, Double_t costhe, Double_t sinthe, Double_t cospsi, Double_t sinpsi, Double_t* tnorm, Double_t* tback); virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawOutlineCube(TList* outline, Double_t* rmin, Double_t* rmax); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExecuteRotateView(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFindNormal(Double_t x, Double_t y, Double_t z, Double_t& zn); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFindPhiSectors(Int_t iopt, Int_t& kphi, Double_t* aphi, Int_t& iphi1, Int_t& iphi2); virtual voidFindScope(Double_t* scale, Double_t* center, Int_t& irep); virtual voidFindThetaSectors(Int_t iopt, Double_t phi, Int_t& kth, Double_t* ath, Int_t& ith1, Int_t& ith2); virtual voidFront(); virtual voidFrontView(TVirtualPad* pad = 0); virtual Bool_tGetAutoRange(); virtual Int_tGetDistancetoAxis(Int_t axis, Int_t px, Int_t py, Double_t& ratio); virtual Double_tGetDproj() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tGetDvi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TView.html:2262,error,error,2262,root/html528/TView.html,https://root.cern,https://root.cern/root/html528/TView.html,6,['error'],['error']
Availability,"max = 0); virtual voidDefinePerspectiveView(); virtual voidDefineViewDirection(const Double_t* s, const Double_t* c, Double_t cosphi, Double_t sinphi, Double_t costhe, Double_t sinthe, Double_t cospsi, Double_t sinpsi, Double_t* tnorm, Double_t* tback); virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawOutlineCube(TList* outline, Double_t* rmin, Double_t* rmax); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExecuteRotateView(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFindNormal(Double_t x, Double_t y, Double_t z, Double_t& zn); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFindPhiSectors(Int_t iopt, Int_t& kphi, Double_t* aphi, Int_t& iphi1, Int_t& iphi2); virtual voidFindScope(Double_t* scale, Double_t* center, Int_t& irep); virtual voidFindThetaSectors(Int_t iopt, Double_t phi, Int_t& kth, Double_t* ath, Int_t& ith1, Int_t& ith2); virtual voidFront()MENU ; virtual voidFrontView(TVirtualPad* pad = 0); virtual Bool_tGetAutoRange(); virtual Int_tGetDistancetoAxis(Int_t axis, Int_t px, Int_t py, Double_t& ratio); virtual Double_tGetDproj() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TView3D.html:3113,error,error,3113,root/html528/TView3D.html,https://root.cern,https://root.cern/root/html528/TView3D.html,6,['error'],['error']
Availability,"max transfer size. void SetMaxTransferSize(Long64_t maxsz); Set max transfer size. Int_t Retrieve(TProofLog::ERetrieveOpt opt = TProofLog::kTrailing, const char* pattern = 0); Retrieve the content of the associated file. The approximate number; of lines to be retrieved is given by 'lines', with the convention that; 0 means 'all', a positive number means the first 'lines' and a negative; number means the last '-lines'. Default is -1000.; If opt == TProofLog::kGrep only the lines containing 'pattern' are; retrieved (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; Return 0 on success, -1 in case of any error. void Display(Int_t from = 0, Int_t to = -1); Display the current content starting from line 'from' to line 'to'; inclusive.; A negative value for 'from' indicates lines counted from the end; (tail action); 'to' is ignored in such a case.; TProofLog::Prt is called to display: the location (screen, file, box); is defined there.; Return 0 on success, -1 in case of any error. void Print(Option_t* opt = 0) const; Print a line with the relevant info. void Prt(const char* what); Special printing procedure. Int_t Grep(const char* txt, TString& res, Int_t from = 0); Search lines containing 'txt', starting from line 'from'. Return; their blanck-separated list into 'res'.; Return the number of lines found, or -1 in case of error. TProofLogElem(const char* ord, const char* url, TProofLog* logger); the name of TProofLogElem is the ordinal number of the corresp. worker; the title is the url. TMacro * GetMacro() const; { return fMacro; }. const char * GetRole(); { return fRole.Data(); }. Bool_t IsMaster() const; { return (fRole == ""master"") ? kTRUE : kFALSE; }. Bool_t IsSubMaster() const; { return (fRole == ""submaster"") ? kTRUE : kFALSE; }. Bool_t IsWorker() const; { return (fRole == ""worker"") ? kTRUE : kFALSE; }. » Author: G. Ganis 31/08/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: 5d579564fcc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofLogElem.html:8004,error,error,8004,root/html602/TProofLogElem.html,https://root.cern,https://root.cern/root/html602/TProofLogElem.html,2,['error'],['error']
Availability,"max,hmaxspecify the maximum window size ; [in]winc,hincdefine an arithmetic progression of sizes into which the window to be resized (minimum to maximum) . Reimplemented from TVirtualX.; Definition at line 1637 of file TGCocoa.mm. ◆ SetWMState(). void TGCocoa::SetWMState ; (; Window_t ; id, . EInitialState ; state . ). overridevirtual . Sets the initial state of the window ""id"": either kNormalState or kIconicState. ; Reimplemented from TVirtualX.; Definition at line 1653 of file TGCocoa.mm. ◆ SetWMTransientHint(). void TGCocoa::SetWMTransientHint ; (; Window_t ; id, . Window_t ; main_id . ). overridevirtual . Tells window manager that the window ""id"" is a transient window of the window ""main_id"". ; A window manager may decide not to decorate a transient window or may treat it differently in other ways. ; Reimplemented from TVirtualX.; Definition at line 1659 of file TGCocoa.mm. ◆ ShapeCombineMask(). void TGCocoa::ShapeCombineMask ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . Pixmap_t ; mask . ). overridevirtual . The Non-rectangular Window Shape Extension adds non-rectangular windows to the System. ; This allows for making shaped (partially transparent) windows ; Reimplemented from TVirtualX.; Definition at line 1551 of file TGCocoa.mm. ◆ Streamer(). void TGCocoa::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TGQuartz. ◆ StreamerNVirtual(). void TGCocoa::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 476 of file TGCocoa.h. ◆ SubtractRegion(). void TGCocoa::SubtractRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Subtracts regb from rega and stores the results in result. ; Reimplemented from TVirtualX.; Definition at line 4344 of file TGCocoa.mm. ◆ SupportsExtension(). Int_t TGCocoa::SupportsExtension ; (; const char * ; ext); const. overridevirtual . Returns 1 if window system server supports",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:122486,mask,mask,122486,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,1,['mask'],['mask']
Availability,"maxfloat xmaxDefinition THbookFile.cxx:95; ymaxfloat ymaxDefinition THbookFile.cxx:95; gInterpreter#define gInterpreterDefinition TInterpreter.h:573; TMath.h; TPluginManager.h; TProfile.h; gDebugInt_t gDebugDefinition TROOT.cxx:597; TROOT.h; gROOTMutexR__EXTERN TVirtualMutex * gROOTMutexDefinition TROOT.h:63; gROOT#define gROOTDefinition TROOT.h:406; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; Printfvoid Printf(const char *fmt,...)Formats a string in a circular formatting buffer and prints the string.Definition TString.cxx:2503; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TVectorD.h; TVectorF.h; TVirtualFFT.h; TVirtualFitter.h; TVirtualHistPainter.h; R__LOCKGUARD#define R__LOCKGUARD(mutex)Definition TVirtualMutex.h:95; TVirtualPad.h; gPad#define gPadDefinition TVirtualPad.h:308; TVirtualPaveStats.h; R__WRITE_LOCKGUARD#define R__WRITE_LOCKGUARD(mutex)Definition TVirtualRWMutex.h:157; ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y ...Definition BinData.h:52; ROOT::Fit::DataRangeclass describing the range in the coordinates it supports multiple range in a coordinate.Definition DataRange.h:35; ROOT::Math::GoFTest::AndersonDarling2SamplesTestvoid AndersonDarling2SamplesTest(Double_t &pvalue, Double_t &testStat) constPerforms the Anderson-Darling 2-Sample Test.Definition GoFTest.cxx:646; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; TArrayCArray of chars or bytes (8 bits per element).Definition TArrayC.h:27; TArrayC::fArrayChar_t * fArrayDefinition TArrayC.h:30; TArrayC::Resetvoid Reset(Char_t val=0)Definition TArrayC.h:47; TArrayC::Setvoid Set(Int_t n) overrideSet size of this array to n chars.Definition TArrayC.cxx:105; TArrayDArray of doubles (64 bits per element).Definition TArrayD.h:27; TArrayD::GetAtDouble_t GetAt(Int_t i) const overrideDefinition TArrayD.h:45; TArrayD::fArrayDouble_t * fArrayDefinition TArrayD.h:30",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:413733,error,error,413733,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['error']
Availability,"maximum=-1111)TF1virtual; SetMinimum(Double_t minimum=-1111)TF1virtual; SetName(const char *name)TNamedvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetNDF(Int_t ndf)TF1virtual; SetNdim(Int_t ndim)TF1inline; SetNormalized(Bool_t flag)TF1inlinevirtual; SetNpx(Int_t npx=100)TF1virtual; SetNumberFitPoints(Int_t npfits)TF1inlinevirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetParameter(Int_t param, Double_t value)TF1inlinevirtual; SetParameter(const TString &name, Double_t value)TF1inlinevirtual; SetParameters(const Double_t *params)TF1inlinevirtual; SetParameters(double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN())TF1inlinevirtual; SetParent(TObject *p=nullptr)TF1inlinevirtual; SetParError(Int_t ipar, Double_t error)TF1virtual; SetParErrors(const Double_t *errors)TF1virtual; SetParLimits(Int_t ipar, Double_t parmin, Double_t parmax)TF1virtual; SetParName(Int_t ipar, const char *name)TF1virtual; SetParNames(const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""")TF1virtual; SetRange(Double_t xmin, Double_t xmax)TF1virtual; SetRange(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax)TF1inlinevirtual; SetRange(Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax)TF1inlinevirtual; SetSavedPoint(Int_t point, Double_t value)TF1virtual; SetTitle(const char *title="""") overrideTF1virtual; SetUniqueID(UInt_t uid)TObjectvirtual; SetVectorized(Bool_t vectorized)TF1inlinevirtual; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTF1virtual; StreamerNVirtual(TBuffer &ClassDef",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1-members.html:16020,error,error,16020,doc/master/classTF1-members.html,https://root.cern,https://root.cern/doc/master/classTF1-members.html,1,['error'],['error']
Availability,"may become corrupted or it may be impossible to write it to disk and close it properly. For example if the file is too large and exceeds the disk quota, or the job crashes or a batch job reaches its time limit before the file can be closed. In these cases, it is imperative to recover and retain as much information as possible. ROOT provides an intelligent and elegant file recovery mechanism using the redundant directory information in the record header.; If a file that has been not properly closed is opened again, it is scanned and rebuilt according to the information in the record header. The recovery algorithm reads the file and creates the saved objects in memory according to the header information. It then rebuilds the directory and file structure. If the file is opened in write mode, the recovery makes the correction on disk when the file is closed; however if the file is opened in read mode, the correction can not be written to disk. You can also explicitly invoke the recovery procedure by calling the TFile::Recover() method. You can recover the directory structure, but you cannot save what you recovered to the file on disk. In the following example, we interrupted and aborted the previous ROOT session, causing the file not to be closed. When we start a new session and attempt to open the file, it gives us an explanation and status on the recovery attempt.; root[] TFile f(""demo.root""); Warning in <TFile::TFile>: file demo.root probably not closed, trying to recover successfully recovered 15 keys; 11.2 The Logical ROOT File: TFile and TKey; We saw that the TFile::Map() method reads the file sequentially and prints information about each record while scanning the file. It is not feasible to support only sequential access and hence ROOT provides random or direct access, i.e. reading a specified object at a time. To do so, TFile keeps a list of TKeys, which is essentially an index to the objects in the file. The TKey class describes the record headers of objects i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:441132,recover,recovery,441132,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['recover'],['recovery']
Availability,"mber Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TDirectoryFile Class ReferenceInput/Output Library. ; A ROOT file is structured in Directories (like a file system). ; Each Directory has a list of Keys (see TKeys) and a list of objects in memory. A Key is a small object that describes the type and location of a persistent object in a file. The persistent object may be a directory. The structure of a file is shown in TFile::TFile. PyROOT; In the same way as for TDirectory, it is possible to inspect the content of a TDirectoryFile object from Python as if the subdirectories and objects it contains were its attributes. For more information, please refer to the TDirectory documentation.; In addition to the attribute syntax, one can inspect a TDirectoryFile in Python via the Get method. In this case, the subdirectory/object name is specified as a string: # Access a subdirectory; d.Get('subdir'); ; # We can go further down in the hierarchy of directories; d.Get('subdir/subsubdir'); ; # Access an object (e.g. a histogram) in the directory; d.Get('obj'); ; # ... or in a subdirectory; d.Get('subdir/obj'); ; # Wrong attribute: returns null; x = d.Get('wrongAttr') # x points to null; Furthermore, TDirectoryFile inherits a WriteObject Python method from TDirectory. Such method allows to write an object into a TDirectoryFile with the following syntax: # Write object obj with identifier 'keyName'; d.WriteObject(obj, 'keyName'). Definition at line 32 of file TDirectoryFile.h. Public Types; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDirectoryFile.html:1202,down,down,1202,doc/master/classTDirectoryFile.html,https://root.cern,https://root.cern/doc/master/classTDirectoryFile.html,1,['down'],['down']
Availability,"mber of bin effective entries is used} \\; h(j) &= H(j) / W(j) & &\text{mean of Y,} \\; s(j) &= \sqrt{E(j)/W(j)- h(j)^2} & &\text{standard deviation of Y} \\; e(j) &= s(j)/\sqrt{W(j)} & &\text{standard error on the mean} \\; \end{align}; \]. The bin content is always the mean of the Y values, but errors change depending on options: ; \[; \begin{align}; \text{GetBinContent}(j) &= h(j) \\; \text{GetBinError}(j) &=; \begin{cases}; e(j) &\text{if option="""" (default). Error of the mean of all y values.} \\; s(j) &\text{if option=""s"". Standard deviation of all y values.} \\; \begin{cases} e(j) &\text{if } h(j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(j)} &\text{if option=""g"". Error of a weighted mean for combining measurements with variances of } w. \\; \end{cases}; \end{align}; \]. In the special case where s(j) is zero (eg, case of 1 entry only in one bin) the bin error e(j) is computed from the average of the s(j) for all bins if the static function TProfile::Approximate() has been called. This simple/crude approximation was suggested in order to keep the bin during a fit operation. But note that this approximation is not the default behaviour. See also TProfile::BuildOptions for more on error options. Creating and drawing a profile histogram; {; auto c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; auto hprof = new TProfile(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; Float_t px, py, pz;; for ( Int_t i=0; i<25000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; hprof->Fill(px,pz,1);; }; hprof->Draw();; }; Float_tfloat Float_tDefinition RtypesCore.h:57; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TCanvasThe Canvas class.Definition TCanvas.h:23; TProfile::TProfileTProfile()Default constructor for Profile histograms.Definition TProfile.cxx:92; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers dist",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile.html:2322,error,error,2322,doc/master/classTProfile.html,https://root.cern,https://root.cern/doc/master/classTProfile.html,1,['error'],['error']
Availability,"mber of bins; xbins : array of low-edges for each bin; This is an array of size nbins+1. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. TH1(const TH1& ); Copy constructor.; The list of functions is not copied. (Use Clone if needed). Bool_t AddDirectoryStatus(); static function: cannot be inlined on Windows/NT. void Browse(TBrowser* b); Browe the Histogram object. void Build(); -*-*-*-*-*-*-*-*Creates histogram basic data structure*-*-*-*-*-*-*-*-*-*. Bool_t Add(TF1* h1, Double_t c1 = 1, Option_t* option = """"); Performs the operation: this = this + c1*f1; if errors are defined (see TH1::Sumw2), errors are also recalculated. By default, the function is computed at the centre of the bin.; if option ""I"" is specified (1-d histogram only), the integral of the; function in each bin is used instead of the value of the function at; the centre of the bin.; Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Add. The function return kFALSE if the Add operation failed. Bool_t Add(const TH1* h1, Double_t c1 = 1); Performs the operation: this = this + c1*h1; if errors are defined (see TH1::Sumw2), errors are also recalculated.; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; if not already set.; Note also that adding histogram with labels is not supported, histogram will be; added merging them by bin number independently of the labels.; For adding histogram with labels one should use TH1::Merge. SPECIAL CASE (Average/Efficiency histograms); For histograms representing averages or efficiencies, one should compute the average; of the two histograms and not the sum. One can mark a histogram to be an average; histogram by setting its bit kIsAverage with; myhist.SetBit(TH1::kIsAverage);; Note that the two histograms must have their kIsAverage bi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:41583,error,errors,41583,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,1,['error'],['errors']
Availability,"mber of entries of the whole; 1386distribution). Candle plots like these are usually called ""notched candle plots"".; 1387 ; 1388In case the significance of the median is greater that the size of the box, the; 1389box will have an unnatural shape. Usually it means the chart has not enough data,; 1390or that representing this uncertainty is not useful; 1391 ; 1392##### The Mean; 1393The mean can be drawn as a dashed line or as a circle or not drawn at all.; 1394The mean is the arithmetic average of the values in the distribution.; 1395It is calculated using GetMean(). Because histograms are; 1396binned data, the mean value can differ from a calculation on the raw-data.; 1397If the distribution is large enough and gaussian shaped the mean will be; 1398exactly the median.; 1399 ; 1400##### The Whiskers; 1401The whiskers represent the part of the distribution not covered by the box.; 1402The upper 25% and the lower 25% of the distribution are located within the whiskers.; 1403Two representations are available.; 1404 ; 1405 - A simple one (using w=1) defining the lower whisker from the lowest data value; 1406 to the bottom of the box, and the upper whisker from the top of the box to the; 1407 highest data value. In this representation the whisker-lines are dashed.; 1408 - A more complex one having a further restriction. The whiskers are still connected; 1409 to the box but their length cannot exceed \f$ 1.5\times iqr \f$. So it might; 1410 be that the outermost part of the underlying distribution will not be covered; 1411 by the whiskers. Usually these missing parts will be represented by the outliers; 1412 (see points). Of course the upper and the lower whisker may differ in length.; 1413 In this representation the whiskers are drawn as solid lines.; 1414 ; 1415\since **ROOT version 6.11/01**; 1416 ; 1417Using the static function TCandle::SetWhiskerRange(double) the whisker definition w=1; 1418will be overwritten. E.g. using a whisker-range of 0.95 and w=1 will redefine ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:58862,avail,available,58862,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['avail'],['available']
Availability,"mber); virtual Int_tSetTextFont(char* fontname, TVirtualX::ETextSetMode mode); virtual voidSetTextMagnitude(Float_t mgn); virtual voidSetTextSize(Float_t textsize); virtual voidTAttText::SetTextSizePixels(Int_t npixels); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidSetTypeList(Window_t win, Atom_t prop, Atom_t* typelist); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetWindowBackground(Window_t id, ULong_t color); virtual voidSetWindowBackgroundPixmap(Window_t id, Pixmap_t pxm); virtual voidSetWindowName(Window_t id, char* name); virtual voidSetWMPosition(Window_t id, Int_t x, Int_t y); virtual voidSetWMSize(Window_t id, UInt_t w, UInt_t h); virtual voidSetWMSizeHints(Window_t id, UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); virtual voidSetWMState(Window_t id, EInitialState state); virtual voidSetWMTransientHint(Window_t id, Window_t main_id); virtual voidShapeCombineMask(Window_t id, Int_t x, Int_t y, Pixmap_t mask); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidSubtractRegion(Region_t rega, Region_t regb, Region_t result); virtual Int_tSupportsExtension(const char* ext) const; virtual voidSync(Int_t mode); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Int_tTextWidth(FontStruct_t font, const char* s, Int_t len); virtual voidTranslateCoordinates(Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t& dest_x, Int_t& dest_y, Window_t& child); TVirtualX(); TVirtualX(const TVirtualX&); TVirtualX(const char* name, const char* title); virtual voidUnionRectWithRegion(Rectangle_t* rect, Region_t src, Region_t dest); virtual voidUnionRegion(Region_t rega, Region_t regb, Region_t result); virtual voidUnmapWindow(Window_t id); virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualX.html:19524,mask,mask,19524,root/html602/TVirtualX.html,https://root.cern,https://root.cern/root/html602/TVirtualX.html,2,['mask'],['mask']
Availability,"mber); virtual Int_tSetTextFont(char* fontname, TVirtualX::ETextSetMode mode); virtual voidSetTextMagnitude(Float_t mgn); virtual voidSetTextSize(Float_t textsize); virtual voidTAttText::SetTextSizePixels(Int_t npixels); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidSetTypeList(Window_t win, Atom_t prop, Atom_t* typelist); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetWindowBackground(Window_t id, ULong_t color); virtual voidSetWindowBackgroundPixmap(Window_t id, Pixmap_t pxm); virtual voidSetWindowName(Window_t id, char* name); virtual voidSetWMPosition(Window_t id, Int_t x, Int_t y); virtual voidSetWMSize(Window_t id, UInt_t w, UInt_t h); virtual voidSetWMSizeHints(Window_t id, UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); virtual voidSetWMState(Window_t id, EInitialState state); virtual voidSetWMTransientHint(Window_t id, Window_t main_id); virtual voidShapeCombineMask(Window_t id, Int_t x, Int_t y, Pixmap_t mask); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidSubtractRegion(Region_t rega, Region_t regb, Region_t result); virtual Int_tSupportsExtension(const char* ext) const; virtual voidSync(Int_t mode); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Int_tTextWidth(FontStruct_t font, const char* s, Int_t len); virtual voidTranslateCoordinates(Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t& dest_x, Int_t& dest_y, Window_t& child); virtual voidUnionRectWithRegion(Rectangle_t* rect, Region_t src, Region_t dest); virtual voidUnionRegion(Region_t rega, Region_t regb, Region_t result); virtual voidUnmapWindow(Window_t id); virtual voidUpdate(Int_t mode = 0); virtual voidUpdateWindow(Int_t mode); virtual voidTObject::UseCurrentStyle(); virtual voidTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVirtualX.html:18523,mask,mask,18523,root/html530/TVirtualX.html,https://root.cern,https://root.cern/root/html530/TVirtualX.html,2,['mask'],['mask']
Availability,"mber); virtual Int_tSetTextFont(char* fontname, TVirtualX::ETextSetMode mode); virtual voidSetTextMagnitude(Float_t mgn); virtual voidSetTextSize(Float_t textsize); virtual voidTAttText::SetTextSizePixels(Int_t npixels); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidSetTypeList(Window_t win, Atom_t prop, Atom_t* typelist); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetWindowBackground(Window_t id, ULong_t color); virtual voidSetWindowBackgroundPixmap(Window_t id, Pixmap_t pxm); virtual voidSetWindowName(Window_t id, char* name); virtual voidSetWMPosition(Window_t id, Int_t x, Int_t y); virtual voidSetWMSize(Window_t id, UInt_t w, UInt_t h); virtual voidSetWMSizeHints(Window_t id, UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); virtual voidSetWMState(Window_t id, EInitialState state); virtual voidSetWMTransientHint(Window_t id, Window_t main_id); virtual voidShapeCombineMask(Window_t id, Int_t x, Int_t y, Pixmap_t mask); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidSubtractRegion(Region_t rega, Region_t regb, Region_t result); virtual Int_tSupportsExtension(const char* ext) const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Int_tTextWidth(FontStruct_t font, const char* s, Int_t len); virtual voidTranslateCoordinates(Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t& dest_x, Int_t& dest_y, Window_t& child); virtual voidUnionRectWithRegion(Rectangle_t* rect, Region_t src, Region_t dest); virtual voidUnionRegion(Region_t rega, Region_t regb, Region_t result); virtual voidUnmapWindow(Window_t id); virtual voidUpdate(Int_t mode = 0); virtual voidUpdateWindow(Int_t mode); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* meth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:18454,mask,mask,18454,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,1,['mask'],['mask']
Availability,"mber); virtual Int_tSetTextFont(char* fontname, TVirtualX::ETextSetMode mode); virtual voidSetTextMagnitude(Float_t mgn); virtual voidSetTextSize(Float_t textsize); virtual voidTAttText::SetTextSizePixels(Int_t npixels); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidSetTypeList(Window_t win, Atom_t prop, Atom_t* typelist); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetWindowBackground(Window_t id, ULong_t color); virtual voidSetWindowBackgroundPixmap(Window_t id, Pixmap_t pxm); virtual voidSetWindowName(Window_t id, char* name); virtual voidSetWMPosition(Window_t id, Int_t x, Int_t y); virtual voidSetWMSize(Window_t id, UInt_t w, UInt_t h); virtual voidSetWMSizeHints(Window_t id, UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); virtual voidSetWMState(Window_t id, EInitialState state); virtual voidSetWMTransientHint(Window_t id, Window_t main_id); virtual voidShapeCombineMask(Window_t id, Int_t x, Int_t y, Pixmap_t mask); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidSubtractRegion(Region_t rega, Region_t regb, Region_t result); virtual Int_tSupportsExtension(const char* ext) const; virtual voidSync(Int_t mode); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Int_tTextWidth(FontStruct_t font, const char* s, Int_t len); virtual voidTranslateCoordinates(Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t& dest_x, Int_t& dest_y, Window_t& child); virtual voidUnionRectWithRegion(Rectangle_t* rect, Region_t src, Region_t dest); virtual voidUnionRegion(Region_t rega, Region_t regb, Region_t result); virtual voidUnmapWindow(Window_t id); virtual voidUpdate(Int_t mode = 0); virtual voidUpdateWindow(Int_t mode); virtual voidTObject::UseCurrentStyle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualX.html:19718,mask,mask,19718,root/html534/TVirtualX.html,https://root.cern,https://root.cern/root/html534/TVirtualX.html,1,['mask'],['mask']
Availability,"mber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEXhigh;  [fNpoints] array of X high errors ;  ; Double_t * fEXhighd;  [fNpoints] array of X high displacements ;  ; Double_t * fEXlow;  [fNpoints] array of X low errors ;  ; Double_t * fEXlowd;  [fNpoints] array of X low displacements ;  ; Double_t * fEYhigh;  [fNpoints] array of Y high errors ;  ; Double_t * fEYhighd;  [fNpoints] array of Y high displacements ;  ; Double_t * fEYlow;  [fNpoints] array of Y low errors ;  ; Double_t * fEYlowd;  [fNpoints] array of Y low displacements ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Pro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphBentErrors.html:31525,error,errors,31525,doc/master/classTGraphBentErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html,4,['error'],['errors']
Availability,"mberTotalParameters ; (; ); const. overridevirtual . Return the total number of parameters (free + fixed) ; Implements TVirtualFitter.; Definition at line 806 of file TFumili.cxx. ◆ GetParameter() [1/2]. Double_t TFumili::GetParameter ; (; Int_t ; ipar); const. overridevirtual . Return current value of parameter ipar. ; Implements TVirtualFitter.; Definition at line 835 of file TFumili.cxx. ◆ GetParameter() [2/2]. Int_t TFumili::GetParameter ; (; Int_t ; ipar, . char * ; cname, . Double_t & ; value, . Double_t & ; verr, . Double_t & ; vlow, . Double_t & ; vhigh . ); const. overridevirtual . Get various ipar parameter attributes: . cname: parameter name; value: parameter value; verr: parameter error; vlow: lower limit; vhigh: upper limit. WARNING! parname must be suitably dimensioned in the calling function. ; Implements TVirtualFitter.; Definition at line 852 of file TFumili.cxx. ◆ GetParError(). Double_t TFumili::GetParError ; (; Int_t ; ipar); const. overridevirtual . Return error of parameter ipar. ; Implements TVirtualFitter.; Definition at line 826 of file TFumili.cxx. ◆ GetParName(). const char * TFumili::GetParName ; (; Int_t ; ipar); const. overridevirtual . Return name of parameter ipar. ; Implements TVirtualFitter.; Definition at line 872 of file TFumili.cxx. ◆ GetPL0(). Double_t * TFumili::GetPL0 ; (; ); const. inline . Definition at line 95 of file TFumili.h. ◆ GetStats(). Int_t TFumili::GetStats ; (; Double_t & ; amin, . Double_t & ; edm, . Double_t & ; errdef, . Int_t & ; nvpar, . Int_t & ; nparx . ); const. overridevirtual . Return global fit parameters. . amin : chisquare; edm : estimated distance to minimum; errdef; nvpar : number of variable parameters; nparx : total number of parameters . Implements TVirtualFitter.; Definition at line 904 of file TFumili.cxx. ◆ GetSumLog(). Double_t TFumili::GetSumLog ; (; Int_t ; n). overridevirtual . Return Sum(log(i) i=0,n used by log-likelihood fits. ; Implements TVirtualFitter.; Definition at line 921 of file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumili.html:34206,error,error,34206,doc/master/classTFumili.html,https://root.cern,https://root.cern/doc/master/classTFumili.html,1,['error'],['error']
Availability,"mbie(); static TApplication*TApplication::Open(const char* url, Int_t debug, const char* script); static Int_tTApplication::ParseRemoteLine(const char* ln, TString& hostdir, TString& user, Int_t& dbg, TString& script); virtual Long_tTApplication::ProcessRemote(const char* line, Int_t* error = 0); voidTApplication::SetSignalHandler(TSignalHandler* sh). private:. voidExecLogon(); Int_tSendCanvases(); Int_tSetup(). Data Members; public:. enum TApplication::EStatusBits { kProcessRemotely; kDefaultApplication; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications. private:. Bool_tfInterruptflag interrupt state; Bool_tfIsValidflag validity; FILE*fLogFilelog file; Int_tfLogFileDeslog file descriptor; TStringfLogFilePathPath to log file; Int_tfProtocoluser protocol version number; Bool_tfRealTimeLogTRUE if log messages should be send back in real-time; TList*fSentCanvasesList of canvases already sent; TStringfSessIdIdentifier for this session; TSocket*fSocketsocket connection to user; TUrlfUrluser's url; TStringfWorkDirWorking dir; TRemoteObject*fWorkingDirWorking (remote) directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TApplicationServer(Int_t* argc, char** argv, FILE* flog, const char* logfile); Main constructor. Create an application environment. The TApplicationServer; envi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TApplicationServer.html:12438,avail,available,12438,root/html526/TApplicationServer.html,https://root.cern,https://root.cern/root/html526/TApplicationServer.html,1,['avail'],['available']
Availability,"mbing); 1 - cartesian coordinates. The bomb factor on each axis can be set with TGeoManager::SetBombX(Double_t bomb) and corresponding Y and Z.; 2 - bomb in cylindrical coordinates. Only the bomb factors on Z and R are considered . 3 - bomb in radial spherical coordinate : TGeoManager::SetBombR(). Volumes themselves support different visualization settings :; TGeoVolume::SetVisibility() : set volume visibility.; TGeoVolume::VisibleDaughters() : set daughters visibility. All these actions automatically updates the current view if any. Checking the geometry; Several checking methods are accessible from the volume context menu. They generally apply only to the visible parts of the drawn geometry in order to ease geometry checking, and their implementation is in the TGeoChecker class from the painting package.; Checking a given point.; Can be called from TGeoManager::CheckPoint(Double_t x, Double_t y, Double_t z). This method is drawing the daughters of the volume containing the point one level down, printing the path to the deepest physical node holding this point. It also computes the closest distance to any boundary. The point will be drawn in red, as well as a sphere having this closest distance as radius. In case a non-zero distance is given by the user as fifth argument of CheckPoint, this distance will be used as radius of the safety sphere. Shooting random points.; Can be called from TGeoVolume::RandomPoints() (context menu function) and it will draw this volume with current visualization settings. Random points are generated in the bounding box of the top drawn volume. The points are classified and drawn with the color of their deepest container. Only points in visible nodes will be drawn. Raytracing.; Can be called from TGeoVolume::RandomRays() (context menu of volumes) and will shoot rays from a given point in the local reference frame with random directions. The intersections with displayed nodes will appear as segments having the color of the touched node. D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:18302,down,down,18302,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['down'],['down']
Availability,"mbols ;  mass_spectrum.C This macro makes use of some basic graphics primitives such as line, arrow and text ;  palettes.C This macro draws all the high definition palettes available in ROOT ;  pavetext.C Draw a pave text ;  piechart.C Pie chart example ;  polytest1.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  polytest2.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  pstable.C Display all possible types of ROOT/Postscript characters ;  psview.C An example how to display PS, EPS, PDF files in canvas ;  quarks.C Example illustrating divided pads and Latex ;  tmathtext.CThis macro draws various formula in a canvas ;  tmathtext2.C This macro draw all possible symbols provided by TMathtext ;  tornado.C Show 3-d polymarker ;  transparency.C This macro demonstrates the use of color transparency ;  triangles.C Generate small triangles randomly in the canvas ;  ► graphs;  approx.C Macro to test interpolation function Approx ;  bent.C Bent error bars ;  exclusiongraph.C Draw three graphs with an exclusion zone ;  exclusiongraph2.C Draw several graphs with an exclusion zones ;  gerrors.C Draw a graph with error bars ;  gerrors2.C Draw two graphs with error bars ;  graph.C Draw a simple graph ;  graph2derrorsfit.C Draw and fit a TGraph2DErrors ;  graphApply.C A macro to demonstrate the functionality of TGraph::Apply() method ;  graphpolar.C Create and draw a polar graph ;  graphpolar2.C Create and draw a polar graph with PI axis ;  graphpolar3.C Create and draw a polar graph with PI axis using a TF1 ;  graphShade.C Show how to shade an area between two graphs ;  graphstruct.C Draw a simple graph structure ;  graphtext.C Draw a graph with text attached to each point ;  gtime.C Example of TGraphTime ;  gtime2.C Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program ;  labels1.C Setting alphanumeric labels in a 1-d histogram ;  labels2.C Setting alphanumeri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:115629,error,error,115629,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['error'],['error']
Availability,"mdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {} . ). Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ; NoteThis method does not perform any generation. To generate according to generations specification call RooAbsPdf::generate(RooAbsPdf::GenSpec&) const. Details copied from RooAbsPdf::generate():; Generate the specified number of events or expectedEvents() if not specified. Parameters. [in]whatVarsChoose variables in which to generate events. Variables not listed here will remain constant and not be used for event generation. ; [in]arg1,arg2,arg3,arg4,arg5,arg6Optional RooCmdArg() to change behaviour of generate(). . ReturnsRooDataSet *, owned by caller.; Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. Returns zero in case of an error. Type of CmdArg Effect on generate . Name(const char* name) Name of the output dataset . Verbose(bool flag) Print informational messages during event generation . NumEvents(int nevt) Generate specified number of events . Extended() If no number of events to be generated is given, use expected number of events from extended likelihood term. This evidently only works for extended PDFs. . GenBinned(const char* tag) Use binned generation for all component pdfs that have 'setAttribute(tag)' set . AutoBinned(bool flag) Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of RooHistPdfs etc) NoteDatasets that are generated in binned mode are returned as weighted unbinned datasets. This means that for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content. AllBinned() As above, but for all components. NoteThe notion of components is only meaningful for simultaneous PDF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:147266,error,error,147266,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['error'],['error']
Availability,"mdArg& arg8); 4108{; 4109 RooLinkedList l ;; 4110 l.Add((TObject*)&arg1) ; l.Add((TObject*)&arg2) ;; 4111 l.Add((TObject*)&arg3) ; l.Add((TObject*)&arg4) ;; 4112 l.Add((TObject*)&arg5) ; l.Add((TObject*)&arg6) ;; 4113 l.Add((TObject*)&arg7) ; l.Add((TObject*)&arg8) ;; 4114 return chi2FitTo(data,l) ;; 4115}; 4116 ; 4117 ; 4118 ; 4119////////////////////////////////////////////////////////////////////////////////; 4120/// Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result.; 4121///; 4122/// List of possible commands in the `cmdList`:; 4123///; 4124/// <table>; 4125/// <tr><th> Type of CmdArg <th> Effect on \f$ \chi^2 \f$; 4126/// <tr><td>; 4127/// <tr><td> `DataError()` <td> Choose between:; 4128/// - RooAbsData::Expected: Expected Poisson error (\f$ \sqrt{n_\text{expected}} \f$ from the PDF).; 4129/// - RooAbsData::SumW2: The observed error from the square root of the sum of weights,; 4130/// i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; 4131/// - RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \f$ n_\text{observed} \f$.; 4132/// If for a given bin \f$ n_\text{expected} \f$ is lower than the \f$ n_\text{observed} \f$, the lower uncertainty is taken; 4133/// (e.g., the difference between the mean and the 16 % quantile).; 4134/// If \f$ n_\text{expected} \f$ is higher than \f$ n_\text{observed} \f$, the higher uncertainty is taken; 4135/// (e.g., the difference between the 84 % quantile and the mean).; 4136/// - RooAbsData::Auto (default): RooAbsData::Expected for unweighted data, RooAbsData::SumW2 for weighted data.; 4137/// <tr><td>; 4138/// `Extended()` <td> Use expected number of events of an extended p.d.f as normalization; 4139/// <tr><td>; 4140/// NumCPU() <td> Activate parallel processing feature; 4141/// <tr><td>; 4142/// Range() <td> Calculate \f$ \chi^2 \f$ only in selected region; 4143/// <tr><td>; 4144//",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:180513,error,errors,180513,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['error'],['errors']
Availability,"mdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&); 4197/// \param data hist data; 4198/// \param cmdList List with RooCmdArg() from the table; 4199 ; 4200RooFit::OwningPtr<RooAbsReal> RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); 4201{; 4202 return RooFit::makeOwningPtr(RooFit::FitHelpers::createChi2(*this, data, cmdList));; 4203}; 4204 ; 4205////////////////////////////////////////////////////////////////////////////////; 4206/// Perform a 2-D \f$ \chi^2 \f$ fit using a series of x and y values stored in the dataset `xydata`.; 4207/// The y values can either be the event weights, or can be another column designated; 4208/// by the YVar() argument. The y value must have errors defined for the \f$ \chi^2 \f$ to; 4209/// be well defined.; 4210///; 4211/// <table>; 4212/// <tr><th><th> Options to control construction of the chi-square; 4213/// <tr><td> `YVar(RooRealVar& yvar)` <td> Designate given column in dataset as Y value; 4214/// <tr><td> `Integrate(bool flag)` <td> Integrate function over range specified by X errors; 4215/// rather than take value at bin center.; 4216///; 4217/// <tr><th><th> Options to control flow of fit procedure; 4218/// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; 4219/// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; 4220/// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; 4221/// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; 4222/// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; 4223/// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); 4224///; 4225/// <tr><th><th> Options to control informational output; 4226/// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:185247,error,errors,185247,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['error'],['errors']
Availability,"me ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TMapFile ();  Default ctor. Does not much except setting some basic values. ;  ;  TMapFile (const char *name, const char *title, Option_t *option, Int_t size, TMapFile *&newMapFile);  Create a memory mapped file. ;  ;  TMapFile (const TMapFile &f, Longptr_t offset=0);  Private copy ctor. ;  ; Int_t AcquireSemaphore ();  Acquire semaphore. Returns 0 if OK, -1 on error. ;  ; void CreateSemaphore (Int_t pid=0);  Create semaphore used for synchronizing access to shared memory. ;  ; void DeleteSemaphore ();  Delete the semaphore. ;  ; TMapFile * FindShadowMapFile ();  Returns shadow map file. ;  ; Int_t GetBestBuffer ();  Return the best buffer size for objects in this file. ;  ; void InitDirectory ();  Create the directory associated to this mapfile. ;  ; TMapFile & operator= (const TMapFile &rhs)=delete;  ; Int_t ReleaseSemaphore ();  Release semaphore. Returns 0 if OK, -1 on error. ;  ; TObject * Remove (const char *name, Bool_t lock);  Remove object by name from shared memory. ;  ; TObject * Remove (TObject *obj, Bool_t lock);  Remove object from shared memory. ;  ; void SumBuffer (Int_t bufsize);  Increment statistics for buffer sizes of objects in this file. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMapFile.html:14144,error,error,14144,doc/master/classTMapFile.html,https://root.cern,https://root.cern/doc/master/classTMapFile.html,1,['error'],['error']
Availability,"me (i.e. in x); gauss.plotOn(xframe); ; # Change the value of sigma to 3; sigma.setVal(3); ; # Plot gauss in frame (i.e. in x) and draw frame on canvas; gauss.plotOn(xframe, LineColor=""r""); ; # Generate events; # -----------------------------; # Generate a dataset of 1000 events in x from gauss; data = gauss.generate({x}, 10000) # ROOT.RooDataSet; ; # Make a second plot frame in x and draw both the; # data and the pdf in the frame; xframe2 = x.frame(Title=""Gaussian pdf with data"") # RooPlot; data.plotOn(xframe2); gauss.plotOn(xframe2); ; # Fit model to data; # -----------------------------; # Fit pdf to data; gauss.fitTo(data, PrintLevel=-1); ; # Print values of mean and sigma (that now reflect fitted values and; # errors); mean.Print(); sigma.Print(); ; # Draw all frames on a canvas; c = ROOT.TCanvas(""rf101_basics"", ""rf101_basics"", 800, 400); c.Divide(2); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); xframe.GetYaxis().SetTitleOffset(1.6); xframe.Draw(); c.cd(2); ROOT.gPad.SetLeftMargin(0.15); xframe2.GetYaxis().SetTitleOffset(1.6); xframe2.Draw(); ; c.SaveAs(""rf101_basics.png""); [#1] INFO:Fitting -- RooAbsPdf::fitTo(gauss_over_gauss_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_gauss_over_gauss_Int[x]_gaussData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; RooRealVar::mean = 1.01746 +/- 0.0300144 L(-10 - 10) ; RooRealVar::sigma = 2.9787 +/- 0.0219217 L(0.1 - 10) ; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf101_basics.py. tutorialsroofitrf101_basics.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf101__basics_8py.html:2402,error,error,2402,doc/master/rf101__basics_8py.html,https://root.cern,https://root.cern/doc/master/rf101__basics_8py.html,1,['error'],['error']
Availability,"me (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i Th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:5840,error,error,5840,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,1,['error'],['error']
Availability,"me = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidCopy(TObject& frame) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTBox::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual TBox*TBox::DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTWbox::DrawWbox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color = 33, Short_t bordersize = 5, Short_t bordermode = -1); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Short_tTWbox::GetBorderMode() const; Short_tTWbox::GetBorderSize() const; Int_tTWbox::GetDarkColor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; Int_tTWbox::GetLightColor() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFrame.html:1794,error,error,1794,root/html528/TFrame.html,https://root.cern,https://root.cern/root/html528/TFrame.html,3,['error'],['error']
Availability,"me = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidCopy(TObject& frame) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTBox::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual TBox*TBox::DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTWbox::DrawWbox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color = 33, Short_t bordersize = 5, Short_t bordermode = -1); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Rectangle_tTBox::GetBBox(); virtual TPointTBox::GetBBoxCenter(); Short_tTWbox::GetBorderMode() const; Short_tTWbox::GetBorderSize() const; Int_tTWbox::GetDarkColor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; Int_tTWbox::GetLightColor() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFrame.html:1794,error,error,1794,root/html534/TFrame.html,https://root.cern,https://root.cern/root/html534/TFrame.html,3,['error'],['error']
Availability,"me = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual TTree*CopyTree(const char* selection, Option_t* option, Long64_t nentries, Long64_t firstentry); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Long64_tDrawScript(const char* wrapperPrefix, const char* macrofilename, const char* cutfilename, Option_t* option, Long64_t nentries, Long64_t firstentry); virtual Long64_tDrawSelect(const char* varexp, const char* selection, Option_t* option, Long64_t nentries, Long64_t firstentry); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tFit(const char* formula, const char* varexp, const char* selection, Option_t* option, Option_t* goption, Long64_t nentries, Long64_t firstentry); static TVirtualTreePlayer*TVirtualTreePlayer::GetCurrentPlayer(); virtual Int_tGetDimension() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tGetEntries(const char* selection); virtual Long64_tGetEntriesToProcess(Long64_t firstentry, Long64_t nentries) const; virtual TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual Int_tGetNfill() const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreePlayer.html:8592,error,error,8592,root/html528/TTreePlayer.html,https://root.cern,https://root.cern/root/html528/TTreePlayer.html,6,['error'],['error']
Availability,"me = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; UInt_tGetBytesRecv() const; UInt_tGetBytesSent() const; static Int_tGetClientProtocol(); Int_tGetCompressionAlgorithm() const; Int_tGetCompressionLevel() const; Int_tGetCompressionSettings() const; virtual Int_tGetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressGetInetAddress() const; TTimeStampGetLastUsage(); virtual TInetAddressGetLocalInetAddress(); virtual Int_tGetLocalPort(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSocket.html:2269,error,error,2269,root/html530/TSocket.html,https://root.cern,https://root.cern/root/html530/TSocket.html,5,['error'],['error']
Availability,"me A and y are filled. TUnfold unfold(A,TUnfold::kHistMapOutputHoriz);. unfold.SetInput(y);. Int_t nScan=30;; Int_t iBest;; TSpline *logTauX,*logTauY;; TGraph *lCurve;. iBest=unfold.ScanLcurve(nScan,0.0,0.0,&lCurve);. std::cout<<""tau=""<<unfold.GetTau()<<""\n"";. TH1D *x=unfold.GetOutput(""x"",""myVariable"");; TH2D *rhoij=unfold.GetRhoIJ(""correlation"",""myVariable"");. This creates; logTauX: the L-curve's x-coordinate as a function of log(tau); logTauY: the L-curve's y-coordinate as a function of log(tau); lCurve: a graph of the L-curve; x,rhoij: unfolding result for best choice of tau; iBest: the coordinate/spline knot number with the best choice of tau. Note: always check the L curve after unfolding. The algorithm is not; perfect. Bin averaging of the output. Sometimes it is useful to unfold for a fine binning in x and; calculate the final result with a smaller number of bins. The advantage; is a reduction in the correlation coefficients if bins are averaged.; For this type of averaging the full error matrix has to be used.; There are methods in TUnfold to support this type of calculation; Example:; The vector x has dimension 49, it consists of 7x7 bins; in two variables (Pt,Eta); The unfolding result is to be presented as one-dimensional projections; in (Pt) and (Eta); The bins of x are mapped as: bins 1..7 the first Eta bin; bins 2..14 the second Eta bin. bins 1,8,15,... the first Pt bin. code fragment:. TUnfold unfold(A,TUnfold::kHistMapOutputHoriz);; Double_t tau=1.E-4;; Double_t biasScale=0.0;; unfold.DoUnfold(tau,y,biasScale);; Int_t binMapEta[49+2];; Int_t binMapPt[49+2];; // overflow and underflow bins are not used; binMapEta[0]=-1;; binMapEta[49+1]=-1;; binMapPt[0]=-1;; binMapPt[49+1]=-1;; for(Int_t i=1;i<=49;i++) {; // all bins (i) with the same (i-1)/7 are added; binMapEta[i] = (i-1)/7 +1;; // all bins (i) with the same (i-1)%7 are added; binMapPt[i] = (i-1)%7 +1;; }; TH1D *etaHist=new TH1D(""eta(unfolded)"","";eta"",7,etamin,etamax);; TH1D *etaCorr=new TH2D(""eta(u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfold.html:6623,error,error,6623,root/html528/TUnfold.html,https://root.cern,https://root.cern/root/html528/TUnfold.html,3,['error'],['error']
Availability,"me T > . ROOT::RDF::RResultPtr< T >::RResultPtr ; (; const RResultPtr< T > & ; ). default . ◆ RResultPtr() [4/5]. template<typename T > . ROOT::RDF::RResultPtr< T >::RResultPtr ; (; RResultPtr< T > && ; ). default . ◆ RResultPtr() [5/5]. template<typename T > . template<typename T2 , std::enable_if_t< std::is_constructible< std::shared_ptr< T >, std::shared_ptr< T2 > >::value, int > = 0> . ROOT::RDF::RResultPtr< T >::RResultPtr ; (; const RResultPtr< T2 > & ; r). inline . Convert a RResultPtr<T2> to a RResultPtr<T>. ; Useful e.g. to store a number of RResultPtr<TH1D> and RResultPtr<TH2D> in a std::vector<RResultPtr<TH1>>. The requirements on T2 and T are the same as for conversion between std::shared_ptr<T2> and std::shared_ptr<T>. ; Definition at line 222 of file RResultPtr.hxx. Member Function Documentation. ◆ begin(). template<typename T > . RIterationHelper< T >::Iterator_t ROOT::RDF::RResultPtr< T >::begin ; (; ). inline . Return an iterator to the beginning of the contained object if this makes sense, throw a compilation error otherwise. ; Definition at line 257 of file RResultPtr.hxx. ◆ end(). template<typename T > . RIterationHelper< T >::Iterator_t ROOT::RDF::RResultPtr< T >::end ; (; ). inline . Return an iterator to the end of the contained object if this makes sense, throw a compilation error otherwise. ; Definition at line 267 of file RResultPtr.hxx. ◆ Get(). template<typename T > . T * ROOT::RDF::RResultPtr< T >::Get ; (; ). inlineprivate . Get the pointer to the encapsulated result. ; Ownership is not transferred to the caller. Triggers event loop and execution of all actions booked in the associated RLoopManager. ; Definition at line 186 of file RResultPtr.hxx. ◆ GetPtr(). template<typename T > . T * ROOT::RDF::RResultPtr< T >::GetPtr ; (; ). inline . Get the pointer to the encapsulated object. ; Triggers event loop and execution of all actions booked in the associated RLoopManager. ; Definition at line 236 of file RResultPtr.hxx. ◆ GetValue(). templ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:7101,error,error,7101,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html,1,['error'],['error']
Availability,"me behavior for general and symmetric matrices; in contrast to the iterator access methods which behave differently (it follows the data order).; SMatrix33 m;; m(0,0) = 1; // set the element in first row and first column; *(m.begin()+1) = 2; // set the second element (0,1); double d[9]={1,2,3,4,5,6,7,8,9};; m.SetElements(d,d+9); // set the d[] values in m; double x = m(2,1); // return the element in 3; x = m.apply(7); // return the 8-th element (row=2,col=1); x = *(m.begin()+7); // return the 8-th element (row=2,col=1); // symmetric matrices; //(note the difference in behavior between apply and the iterators); x = *(m.begin()+4) // return the element (row=2,col=1); x = m.apply(7); // returns again the (row=2,col=1) element; There are methods to place and/or retrieve ROOT::Math::SVector objects as rows or columns in (from) a matrix. In addition one can put (get) a sub-matrix as another ROOT::Math::SMatrix object in a matrix. If the size of the sub-vector or sub-matrix is larger than the matrix size a static assert (a compilation error) is produced. The non-const methods are:; SMatrix33 m;; SVector2 v2(1,2);; // place a vector in the first row from; // element (0,1) : m(0,1)=v2[0]; m.Place_in_row(v2,0,1);; // place the vector in the second column from; // (0,1) : m(0,1) = v2[0]; m.Place in_col(v2,0,1);; SMatrix22 m2;; // place m2 in m starting from the; // element (1,1) : m(1,1) = m2(0,0); m.Place_at(m2,1,1);; SVector3 v3(1,2,3);; // set v3 as the diagonal elements; // of m : m(i,i) = v3[i] for i=0,1,2; m.SetDiagonal(v3); The const methods retrieving contents (getting slices of a matrix) are:; a = {1,2,3,4,5,6,7,8,9};; SMatrix33 m(a,a+9);; SVector3 irow = m.Row(0); // return as vector the first row; SVector3 jcol = m.Col(1); // return as vector the second column. // return a slice of the first row from; // (0,1): r2[0]= m(0,1); r2[1]=m(0,2); SVector2 r2 = m.SubRow<SVector2> (0,1);; // return a slice of the second column from; // (0,1): c2[0] = m(0,1); c2[1] = m(1,1); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:758829,error,error,758829,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['error'],['error']
Availability,"me box - ignored for ortho camera. Assumed to be same as one passed to Setup().; 'pickRect' - optional picking rect. If non-null, restrict drawing to this viewport rect. . Implements TGLCamera.; Definition at line 246 of file TGLOrthoCamera.cxx. ◆ Class(). static TClass * TGLOrthoCamera::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGLOrthoCamera::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGLOrthoCamera::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 95 of file TGLOrthoCamera.h. ◆ Configure(). void TGLOrthoCamera::Configure ; (; Double_t ; zoom, . Double_t ; dolly, . Double_t ; center[3], . Double_t ; hRotate, . Double_t ; vRotate . ). overridevirtual . Configure the camera state. . zoom - set directly (default = 0.78);; dolly - additional move along the camera forward direction;; center - new camera center (can be 0 for no change);; hRotate - additional ""up/down"" rotation in radians;; vRotate - additional ""left/right"" rotation in radians. . Implements TGLCamera.; Definition at line 316 of file TGLOrthoCamera.cxx. ◆ DeclFileName(). static const char * TGLOrthoCamera::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 95 of file TGLOrthoCamera.h. ◆ Dolly(). Bool_t TGLOrthoCamera::Dolly ; (; Int_t ; delta, . Bool_t ; mod1, . Bool_t ; mod2 . ). overridevirtual . Dolly the camera. ; By default the dolly is reinterpreted to zoom, but it can be changed by modifying the fDollyToZoom data-member. ; Reimplemented from TGLCamera.; Definition at line 146 of file TGLOrthoCamera.cxx. ◆ GetDollyToZoom(). Bool_t TGLOrthoCamera::GetDollyToZoom ; (; ); const. inline . Definition at line 90 of file TGLOrthoCamera.h. ◆ GetEnableRotate(). Bool_t TGLOrthoCamera::GetEnableRotate ; (; ); const. inline . Definition at line 81 of file TGLOrthoCamera.h. ◆ GetZoom(). Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLOrthoCamera.html:23256,down,down,23256,doc/master/classTGLOrthoCamera.html,https://root.cern,https://root.cern/doc/master/classTGLOrthoCamera.html,1,['down'],['down']
Availability,"me class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Private Member Functions;  TRint (const TRint &)=delete;  ; void ExecLogon ();  Execute logon macro's. ;  ; TRint & operator= (const TRint &)=delete;  ; Longptr_t ProcessLineNr (const char *filestem, const char *line, Int_t *error=nullptr);  Calls TRint::ProcessLine() possibly prepending a #line directive for better diagnostics. ;  ; Longptr_t ProcessRemote (const char *line, Int_t *error=nullptr) override;  Process the content of a line starting with "".R"" (already stripped-off) The format is [user@]host[:dir] [-l user] [-d dbg] [script] The variable 'dir' is the remote directory to be used as working dir. ;  . Private Attributes; Bool_t fBackslashContinue {};  ; Int_t fCaughtSignal;  ; TString fDefaultPrompt;  ; TFileHandler * fInputHandler;  ; Bool_t fInterrupt;  ; Int_t fNcmd;  ; TString fNonContinuePrompt;  ; char fPrompt [64];  . Additional Inherited Members;  Public Types inherited from TApplication; enum  EExitOnException { kDontExit; , kExit; , kAbort; };  ; enum  EFileBits { kExpression = (1ULL << ( 14 )); };  ; enum  EStatusBits { kProcessRemotely = (1ULL << ( 15 )); , kDefaultApplication = (1ULL << ( 16 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL <<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRint.html:17393,error,error,17393,doc/master/classTRint.html,https://root.cern,https://root.cern/doc/master/classTRint.html,1,['error'],['error']
Availability,"me computer time, so it slows down the computation a little bit, and more importantly, it introduces additional numerical inaccuracy into the problem in addition to what is introduced in the numerical calculation of the \(\mbox{FCN}\) value. The effects of non-linearity and numerical roundoff both become more important as the external value gets closer to one of the limits (expressed as the distance to nearest limit divided by distance between limits). The user must therefore be aware of the fact that, for example, if they put limits of \((0,10^{10})\) on a parameter, then the values \(0.0\) and \(1.0\) will be indistinguishable to the accuracy of most machines.; For this purpose single sided limits on parameters are provided by M , with their transformation being:; Lower bound \(a\):; \[\begin{aligned}; P_{\mathrm{int}} &=& \pm\sqrt{(P_{\mathrm{ext}} - a + 1)^2 - 1} \\; P_{\mathrm{ext}} &=& a - 1 + \sqrt{P_{\mathrm{int}}^2 + 1} \end{aligned}\]; Upper bound \(b\):; \[\begin{aligned}; P_{\mathrm{int}} &=& \pm\sqrt{(b - P_{\mathrm{ext}} + 1)^2 - 1} \\; P_{\mathrm{ext}} &=& b + 1 - \sqrt{P_{\mathrm{int}}^2 + 1} \end{aligned}\]; The transformation of course also affects the parameter error matrix, so M does a transformation of the error matrix (and the “parabolic” parameter errors) when there are parameter limits. Users should however realize that the transformation is only a linear approximation, and that it cannot give a meaningful result if one or more parameters is very close to a limit, where \(\partial P_{\mathrm{ext}} / \partial P_{\mathrm{int}} \approx 0\). Therefore, it is recommended that:. Limits on variable parameters should be used only when needed in order to prevent the parameter from taking on unphysical values.; When a satisfactory minimum has been found using limits, the limits should then be removed if possible, in order to perform or re-perform the error analysis without limits. Further discussion of the effects of parameter limits may be found in the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:11545,error,error,11545,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,3,['error'],"['error', 'errors']"
Availability,"me identifier id. Int_t MediumId(const char* mediumName) const; Return the unique numeric identifier for medium name mediumName. Int_t NofVolumes() const; Return total number of volumes in the geometry. Int_t VolId2Mate(Int_t id) const; Return material number for a given volume id. Int_t NofVolDaughters(const char* volName) const; Return number of daughters of the volume specified by volName. const char* VolDaughterName(const char* volName, Int_t i) const; Return the name of i-th daughter of the volume specified by volName. Int_t VolDaughterCopyNo(const char* volName, Int_t i) const; Return the copyNo of i-th daughter of the volume specified by volName. Bool_t SetCut(const char* cutName, Double_t cutValue). methods for physics management. set methods. Set transport cuts for particles. Bool_t SetProcess(const char* flagName, Int_t flagValue); Set process control. Bool_t DefineParticle(Int_t pdg, const char* name, TMCParticleType mcType, Double_t mass, Double_t charge, Double_t lifetime); Set a user defined particle; Function is ignored if particle with specified pdg; already exists and error report is printed.; pdg PDG encoding; name particle name; mcType VMC Particle type; mass mass [GeV]; charge charge [eplus]; lifetime time of life [s]; pType particle type as in Geant4; width width [GeV]; iSpin spin; iParity parity; iConjugation conjugation; iIsospin isospin; iIsospinZ isospin - #rd component; gParity gParity; lepton lepton number; baryon baryon number; stable stability; shortlived is shorlived?; subType particle subType as in Geant4; antiEncoding anti encoding; magMoment magnetic moment; excitation excitation energy [GeV]. Bool_t DefineIon(const char* name, Int_t Z, Int_t A, Int_t Q, Double_t excEnergy, Double_t mass = 0.); Set a user defined particle; Function is ignored if particle with specified pdg; already exists and error report is printed.; pdg PDG encoding; name particle name; mcType VMC Particle type; mass mass [GeV]; charge charge [eplus]; lifetime time",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualMC.html:28285,error,error,28285,root/html528/TVirtualMC.html,https://root.cern,https://root.cern/root/html528/TVirtualMC.html,6,['error'],['error']
Availability,"me is not given, the first variable will be used.; This is useful mostly for RooDataSets with only one observable. SamplingDistribution(); SamplingDistribution default constructor. ~SamplingDistribution(); SamplingDistribution destructor. void Add(const RooStats::SamplingDistribution* other); Merge SamplingDistributions (does nothing if NULL is given).; If variable name was not set before, it is copied from the added; SamplingDistribution. Double_t Integral(Double_t low, Double_t high, Bool_t normalize = kTRUE, Bool_t lowClosed = kTRUE, Bool_t highClosed = kFALSE) const; Returns the integral in the open/closed/mixed interval. Default is [low,high) interval.; Normalization can be turned off. Double_t IntegralAndError(Double_t& error, Double_t low, Double_t high, Bool_t normalize = kTRUE, Bool_t lowClosed = kTRUE, Bool_t highClosed = kFALSE) const; Returns the integral in the open/closed/mixed interval. Default is [low,high) interval.; Normalization can be turned off.; compute also the error on the integral. Double_t CDF(Double_t x) const; returns the closed integral [-inf,x]. Double_t InverseCDF(Double_t pvalue); returns the inverse of the cumulative distribution function. Double_t InverseCDF(Double_t pvalue, Double_t sigmaVariaton, Double_t& inverseVariation); returns the inverse of the cumulative distribution function, with variations depending on number of samples. Double_t InverseCDFInterpolate(Double_t pvalue); returns the inverse of the cumulative distribution function. SamplingDistribution(const char* name, const char* title, vector<Double_t>& samplingDist, const char* varName = 0); Constructor for SamplingDistribution. Int_t GetSize() const; size of samples. {return fSamplingDist.size();}. const std::vector<Double_t> & GetSamplingDistribution() const; Get test statistics values. {return fSamplingDist;}. const std::vector<Double_t> & GetSampleWeights() const; Get the sampling weights. {return fSampleWeights;}. const TString GetVarName() const; {return fVarName;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__SamplingDistribution.html:9328,error,error,9328,root/html530/RooStats__SamplingDistribution.html,https://root.cern,https://root.cern/root/html530/RooStats__SamplingDistribution.html,1,['error'],['error']
Availability,"me number of events as the prototype (unless otherwise specified), and any prototype variables not in; whatVars will be copied into the new dataset for each generated event and also used to set our PDF parameters.; The user can specify a number of events to generate that will override the default. The result is a; copy of the prototype dataset with only variables in whatVars randomized. Variables in whatVars that; are not in the prototype will be added as new columns to the generated dataset. RooDataSet * generate(const RooArgSet& whatVars, const RooCmdArg& arg1,const RooCmdArg& arg2,				const RooCmdArg& arg3,const RooCmdArg& arg4, const RooCmdArg& arg5,const RooCmdArg& arg6); Generate a new dataset containing the specified variables with events sampled from our distribution.; Generate the specified number of events or expectedEvents() if not specified. Any variables of this PDF that are not in whatVars will use their; current values and be treated as fixed parameters. Returns zero; in case of an error. The caller takes ownership of the returned; dataset. The following named arguments are supported. Name(const char* name) -- Name of the output dataset; Verbose(Bool_t flag) -- Print informational messages during event generation; NumEvent(int nevt) -- Generate specified number of events; Extended() -- The actual number of events generated will be sampled from a Poisson distribution; with mu=nevt. For use with extended maximum likelihood fits; ProtoData(const RooDataSet& data, -- Use specified dataset as prototype dataset. If randOrder is set to true; Bool_t randOrder, the order of the events in the dataset will be read in a random order; Bool_t resample) if the requested number of events to be generated does not match the; number of events in the prototype dataset. If resample is also set to; true, the prototype dataset will be resampled rather than be strictly; reshuffled. In this mode events of the protodata may be used more than; once. If ProtoData() is used, the s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:57783,error,error,57783,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,1,['error'],['error']
Availability,"me of class to which the object belongs.Definition TObject.cxx:213; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::IsAvirtual TClass * IsA() constDefinition TObject.h:243; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TProfile2DProfile2D histograms are used to display the mean value of Z and its error for each cell in X,...Definition TProfile2D.h:27; TProfile2D::PutStatsvoid PutStats(Double_t *stats) overrideReplace current statistics with the values in array stats.Definition TProfile2D.cxx:1474; TProfile2D::FillInt_t Fill(const Double_t *v)Definition TProfile2D.h:51; TProfile2D::Classstatic TClass * Class(); TProfile2D::Sumw2void Sumw2(Bool_t flag=kTRUE) overrideCreate/Delete structure to store sum of squares of weights per bin.Definition TProfile2D.cxx:2043; TProfile2D::SetBinsvoid SetBins(const Int_t *nbins, const Double_t *range)Definition TProfile2D.h:49; TProfile2D::GetBinSumw2virtual TArrayD * GetBinSumw2()Definition TProfile2D.h:121; TProfile2D::Resetvoid Reset(Option_t *option="""") overrideReset contents of a Profile2D histogram.Definition TProfile2D.cxx:1490; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:214434,error,error,214434,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['error'],['error']
Availability,"me of dataset and TSelector object. ; Reimplemented in TProofLite, and TProofSuperMaster.; Definition at line 5809 of file TProof.cxx. ◆ Process() [3/8]. Long64_t TProof::Process ; (; const char * ; selector, . Long64_t ; n, . Option_t * ; option = """" . ). virtual . Generic (non-data based) selector processing: the Process() method of the specified selector (.C) or TSelector object is called 'n' times. ; The return value is -1 in case of error and TSelector::GetStatus() in in case of success. ; Reimplemented in TProofLite, and TProofSuperMaster.; Definition at line 5721 of file TProof.cxx. ◆ Process() [4/8]. Long64_t TProof::Process ; (; TDSet * ; dset, . const char * ; selector, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; first = 0 . ). virtual . Process a data set (TDSet) using the specified selector (.C) file or Tselector object Entry- or event-lists should be set in the data set object using TDSet::SetEntryList. ; The return value is -1 in case of error and TSelector::GetStatus() in in case of success. ; Reimplemented in TProofLite, and TProofSuperMaster.; Definition at line 5303 of file TProof.cxx. ◆ Process() [5/8]. Long64_t TProof::Process ; (; TDSet * ; dset, . TSelector * ; selector, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; first = 0 . ). virtual . Process a data set (TDSet) using the specified selector object. ; Entry- or event-lists should be set in the data set object using TDSet::SetEntryList. The return value is -1 in case of error and TSelector::GetStatus() in in case of success. ; Reimplemented in TProofLite, and TProofSuperMaster.; Definition at line 5761 of file TProof.cxx. ◆ Process() [6/8]. Long64_t TProof::Process ; (; TFileCollection * ; fc, . const char * ; selector, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; first = 0 . ). virtual . Process a data set (TFileCollection) using the specified selector (.C) file or TSelector object. ; The default tree is analyzed (i.e. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:125786,error,error,125786,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['error'],['error']
Availability,"me of this class . ◆ Class_Version(). static constexpr Version_t TH3D::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 403 of file TH3.h. ◆ Copy(). void TH3D::Copy ; (; TObject & ; hnew); const. overridevirtual . Copy this 3-D histogram structure to newth3. ; Reimplemented from TH3.; Reimplemented in TProfile3D.; Definition at line 4742 of file TH3.cxx. ◆ DeclFileName(). static const char * TH3D::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 403 of file TH3.h. ◆ IsA(). TClass * TH3D::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TH3.; Reimplemented in TProfile3D.; Definition at line 403 of file TH3.h. ◆ operator=(). TH3D & TH3D::operator= ; (; const TH3D & ; h1). Operator =. ; Definition at line 4807 of file TH3.cxx. ◆ Reset(). void TH3D::Reset ; (; Option_t * ; option = """"). overridevirtual . Reset this histogram: contents, errors, etc. ; Reimplemented from TH3.; Reimplemented in TProfile3D.; Definition at line 4751 of file TH3.cxx. ◆ RetrieveBinContent(). Double_t TH3D::RetrieveBinContent ; (; Int_t ; bin); const. inlineoverrideprotectedvirtual . Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented from TH1.; Reimplemented in TProfile3D.; Definition at line 400 of file TH3.h. ◆ SetBinsLength(). void TH3D::SetBinsLength ; (; Int_t ; n = -1). overridevirtual . Set total number of bins including under/overflow Reallocate bin contents array. ; Reimplemented from TH1.; Reimplemented in TProfile3D.; Definition at line 4763 of file TH3.cxx. ◆ Streamer(). void TH3D::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TH3D. ; Reimplemented from TH3.; Reimplemented in TProfile3D.; Definition at line 4774 of file TH3.cxx. ◆ StreamerNVirtual(). void TH3D::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3D.html:65427,error,errors,65427,doc/master/classTH3D.html,https://root.cern,https://root.cern/doc/master/classTH3D.html,1,['error'],['errors']
Availability,"me parameters are known to be uncorrelated with the others.; Correlation coefficients very close to one (greater than 0.99).; This indicates both an exceptionally difficult problem, and one which has been badly parametrized so that individual errors are not very meaningful because they are so highly correlated.; Parameter at limit. This condition, signalled by a M warning message, may make both the function minimum and parameter errors unreliable. See section [answer:right-errors], Getting the right parameter errors with limits. The best way to be absolutely sure of the errors, is to use “independent” calculations and compare them, or compare the calculated errors with a picture of the function if possible. For example, if there is only one free parameter, \(\mbox{SCAN}\) allows the user to verify approximately the function curvature. Similarly, if there are only two free parameters, use \(\mbox{CONTOURS}\). To verify a full error matrix, compare the results of \(\mbox{MIGRAD}\) with those (calculated afterward) by \(\mbox{HESSE}\), which uses a different method. And of course the most reliable and most expensive technique, which must be used if asymmetric errors are required, is \(\mbox{MINOS}\).; 6.6 Convergence in \(\mbox{MIGRAD}\), and positive–definiteness; \(\mbox{MIGRAD}\) uses its current estimate of the covariance matrix of the function to determine the current search direction, since this is the optimal strategy for quadratic functions and “physical” functions should be quadratic in the neighbourhood of the minimum at least. The search directions determined by \(\mbox{MIGRAD}\) are guaranteed to be downhill only if the covariance matrix is positive–definite, so in case this is not true, it makes a positive–definite approximation by adding an appropriate constant along the diagonal as determined by the eigenvalues of the matrix. Theoretically, the covariance matrix for a “physical” function must be positive–definite at the minimum, although it may not be so",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:75732,error,error,75732,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['error'],['error']
Availability,"me settings. Since the corresponding attributes are flags belonging to volume and node objects, you can change them at any time (even when the picture is already drawn) and see immediately the result.; 18.7.2.1 Colors and Line Styles; We have already described how to change the line colors for volumes. In fact, volume objects inherit from TAttLine class so the line style or width can also be changed:; myVolume->SetLineColor(kRed);; myVolume->SetLineWith(2);; myVolume->SetLineStyle(kDotted);; When drawing in solid mode, the color of the drawn volume corresponds to the line color.; 18.7.2.2 Visibility Settings; The way geometry is build forces the definition of several volumes that does not represent real objects, but just virtual containers used for grouping and positioning volumes together. One would not want to see them in the picture. Since every volume is by default visible, one has to do this sort of tuning by its own:; myVolumeContainer->SetVisibility(kFALSE);; As described before, the drawing package supports two main global options: 1 (default) - only final volume leaves; 0 - all volumes down the drawn one appear on the screen. The global visible level put a limitation on the maximum applied depth. Combined with visibility settings per volume, these can tune quite well what should appear on the screen. However, there are situations when users want to see a volume branch displayed down to the maximum depth, keeping at the same time a limitation or even suppressing others. In order to accomplish that, one should use the volume attribute: Visible daughters. By default, all daughters of all volumes are displayed if there is no limitation related with their level depth with respect to the top drawn volume.; 18.7.3 Ray Tracing; Ray tracing is a quite known drawing technique based on tracking rays from the eye position through all pixels of a view port device. The pixel color is derived from the properties of the first crossed surface, according some illumination mo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1010147,down,down,1010147,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['down'],['down']
Availability,"me statistics parameters are incremented to compute; 369 the mean value and Root Mean Square with the maximum precision.; 370 ; 371 In case of histograms of type TH1C, TH1S, TH2C, TH2S, TH3C, TH3S; 372 a check is made that the bin contents do not exceed the maximum positive; 373 capacity (127 or 32767). Histograms of all types may have positive; 374 or/and negative bin contents.; 375 ; 376\anchor associated-errors; 377### Associated errors; 378 By default, for each bin, the sum of weights is computed at fill time.; 379 One can also call TH1::Sumw2 to force the storage and computation; 380 of the sum of the square of weights per bin.; 381 If Sumw2 has been called, the error per bin is computed as the; 382 sqrt(sum of squares of weights), otherwise the error is set equal; 383 to the sqrt(bin content).; 384 To return the error for a given bin number, do:; 385~~~ {.cpp}; 386 Double_t error = h->GetBinError(bin);; 387~~~; 388 ; 389\anchor associated-functions; 390### Associated functions; 391 One or more object (typically a TF1*) can be added to the list; 392 of functions (fFunctions) associated to each histogram.; 393 When TH1::Fit is invoked, the fitted function is added to this list.; 394 Given a histogram h, one can retrieve an associated function; 395 with:; 396~~~ {.cpp}; 397 TF1 *myfunc = h->GetFunction(""myfunc"");; 398~~~; 399 ; 400 ; 401\anchor operations-on-histograms; 402## Operations on histograms; 403 ; 404 Many types of operations are supported on histograms or between histograms; 405 ; 406 - Addition of a histogram to the current histogram.; 407 - Additions of two histograms with coefficients and storage into the current; 408 histogram.; 409 - Multiplications and Divisions are supported in the same way as additions.; 410 - The Add, Divide and Multiply functions also exist to add, divide or multiply; 411 a histogram by a function.; 412 ; 413 If a histogram has associated error bars (TH1::Sumw2 has been called),; 414 the resulting error bars are also computed",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:17068,error,error,17068,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['error']
Availability,"me there is a change in the worker setup, e.g. by TProof::MarkBad(). ; Definition at line 11808 of file TProof.cxx. ◆ SendCommand(). Int_t TProof::SendCommand ; (; const char * ; cmd, . ESlaves ; list = kActive . ). private . Send command to be executed on the PROOF master and/or slaves. ; Command can be any legal command line command, however commands like "".x file.C"" or "".L file.C"" will not cause the file.C to be transfered to the PROOF cluster. In that case use TProof::Exec(). Returns the status send by the remote server as part of the kPROOF_LOGDONE message. Typically this is the return code of the command on the remote side. Returns -1 in case of error. ; Definition at line 6631 of file TProof.cxx. ◆ SendCurrentState() [1/2]. Int_t TProof::SendCurrentState ; (; ESlaves ; list = kActive). private . Transfer the current state of the master to the active slave servers. ; The current state includes: the current working directory, etc. Returns the number of active slaves. Returns -1 in case of error. ; Definition at line 6758 of file TProof.cxx. ◆ SendCurrentState() [2/2]. Int_t TProof::SendCurrentState ; (; TList * ; list). private . Transfer the current state of the master to the active slave servers. ; The current state includes: the current working directory, etc. Returns the number of active slaves. Returns -1 in case of error. ; Definition at line 6742 of file TProof.cxx. ◆ SendDataSetStatus(). void TProof::SendDataSetStatus ; (; const char * ; msg, . UInt_t ; n, . UInt_t ; tot, . Bool_t ; st . ). Send or notify data set status. ; Definition at line 9336 of file TProof.cxx. ◆ SendFile(). Int_t TProof::SendFile ; (; const char * ; file, . Int_t ; opt = (kBinary | kForward | kCp | kCpBin), . const char * ; rfile = 0, . TSlave * ; wrk = 0 . ). protected . Send a file to master or slave servers. ; Returns number of slaves the file was sent to, maybe 0 in case master and slaves have the same file system image, -1 in case of error. If defined, send to worker 'wrk' on",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:137327,error,error,137327,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['error'],['error']
Availability,"me width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGScrollBarElement(const TGWindow* p = 0, const TGPicture* pic = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kRaisedFrame | kDoubleBorder, Pixel_t back = GetDefaultFrameBackground()); Constructor. ~TGScrollBarElement(); destructor. void SetState(Int_t state); Change state of scrollbar element (either up or down). void SetEnabled(Bool_t on = kTRUE); Enable/Disable scroll bar button chaging the state. void DrawBorder(); Draw border around scollbar element. Bool_t HandleCrossing(Event_t* event); Handle mouse crossing event. TGScrollBarElement(const TGScrollBarElement& ). TGScrollBarElement& operator=(const TGScrollBarElement& ). Bool_t IsEnabled() const; { return !(fState & kButtonDisabled); }. » Author: Fons Rademakers 10/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGScrollBarElement.html:19109,down,down,19109,root/html604/TGScrollBarElement.html,https://root.cern,https://root.cern/root/html604/TGScrollBarElement.html,1,['down'],['down']
Availability,"me width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGScrollBarElement(const TGWindow* p = 0, const TGPicture* pic = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kRaisedFrame | kDoubleBorder, Pixel_t back = GetDefaultFrameBackground()); Constructor. ~TGScrollBarElement(); destructor. void SetState(Int_t state); Change state of scrollbar element (either up or down). void SetEnabled(Bool_t on = kTRUE); Enable/Disable scroll bar button chaging the state. void DrawBorder(); Draw border around scollbar element. Bool_t HandleCrossing(Event_t* event); Handle mouse crossing event. TGScrollBarElement(const TGScrollBarElement& ). TGScrollBarElement& operator=(const TGScrollBarElement& ). Bool_t IsEnabled() const; { return !(fState & kButtonDisabled); }. » Author: Fons Rademakers 10/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 14:57; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGScrollBarElement.html:19109,down,down,19109,root/html602/TGScrollBarElement.html,https://root.cern,https://root.cern/root/html602/TGScrollBarElement.html,1,['down'],['down']
Availability,"me » ROOT 6 Analysis Workshop 1. Extracting an object from a TFile. File can be local on your disk or remote accessible for instance through http:; root [0] TFile* file = TFile::Open(""http://someserver/somefile.root"");. You can list the objects inside the file using .ls:; root [1] .ls; TFile** hsimple.root Demo ROOT file with histograms; TFile* hsimple.root Demo ROOT file with histograms; KEY: TH1F hpx;1 This is the px distribution; KEY: TH2F hpxpy;1 py vs px; KEY: TProfile hprof;1 Profile of pz versus px; KEY: TNtuple ntuple;1 Demo ntuple. You can access objects inside the files by their names, either by using this name as a variable on the prompt:; root [2] hpx->Draw();. In regular code you should use TFile::GetObject():; root [3] TH1* readThis = 0;; root [4] file->GetObject(""hpx"", readThis);. Now let's try this out: get the TTree called ""MyTree"" from a file located at http://root.cern.ch/root/files/tutorials/mockupx.root Note that you don't need to download it with your browser: you just specify the http:// location as an argument to TFile::Open(). Once you have the TTree object, call Print() on it to see its structure.; . ‹ 0. Setting up ROOT; up; 2. Running code in ROOT ›. Navigate through this book; 0. Setting up ROOT; 1. Extracting an object from a TFile; 2. Running code in ROOT; 4. Histogramming; 3. Examining a TTree's data; 5. Fitting; 6. Multivariate Analysis; 7. Using the TTreeReader; 8. Efficiency Calculation; 9. Fitting By Coding; 10. Go Parallel!; TutorialSelector.C; 11. Done!. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/1-extracting-object-tfile.html:2834,down,download,2834,d/1-extracting-object-tfile.html,https://root.cern,https://root.cern/d/1-extracting-object-tfile.html,1,['down'],['download']
Availability,"me() const; static voidcleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; RooAbsNumGenerator*createSampler(RooAbsReal& func, const RooArgSet& genVars, const RooArgSet& condVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, RooAbsReal* maxFuncVal = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const RooAbsNumGenerator*getProtoSampler(const char* name); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumGenFactory.html:2056,error,error,2056,root/html526/RooNumGenFactory.html,https://root.cern,https://root.cern/root/html526/RooNumGenFactory.html,7,['error'],['error']
Availability,"me() constDefinition RLogger.hxx:126; ROOT::Experimental::RLogChannel::RLogChannelRLogChannel(ELogLevel verbosity)Construct an anonymous channel with a default verbosity.Definition RLogger.hxx:113; ROOT::Experimental::RLogDiagCountKeep track of emitted errors and warnings.Definition RLogger.hxx:53; ROOT::Experimental::RLogDiagCount::fNumFatalErrorsstd::atomic< long long > fNumFatalErrorsNumber of errors.Definition RLogger.hxx:57; ROOT::Experimental::RLogDiagCount::fNumWarningsstd::atomic< long long > fNumWarningsDefinition RLogger.hxx:55; ROOT::Experimental::RLogDiagCount::Incrementvoid Increment(ELogLevel severity)Increase warning or error count.Definition RLogger.hxx:70; ROOT::Experimental::RLogDiagCount::GetNumWarningslong long GetNumWarnings() constNumber of fatal errors.Definition RLogger.hxx:61; ROOT::Experimental::RLogDiagCount::fNumErrorsstd::atomic< long long > fNumErrorsNumber of warnings.Definition RLogger.hxx:56; ROOT::Experimental::RLogDiagCount::GetNumFatalErrorslong long GetNumFatalErrors() constReturns the current number of fatal errors.Definition RLogger.hxx:67; ROOT::Experimental::RLogDiagCount::GetNumErrorslong long GetNumErrors() constReturns the current number of errors.Definition RLogger.hxx:64; ROOT::Experimental::RLogEntryA diagnostic that can be emitted by the RLogManager.Definition RLogger.hxx:178; ROOT::Experimental::RLogEntry::fMessagestd::string fMessageDefinition RLogger.hxx:181; ROOT::Experimental::RLogEntry::IsDebugbool IsDebug() constDefinition RLogger.hxx:191; ROOT::Experimental::RLogEntry::RLogEntryRLogEntry(ELogLevel level, RLogChannel &channel, const RLogLocation &loc)Definition RLogger.hxx:186; ROOT::Experimental::RLogEntry::IsFatalbool IsFatal() constDefinition RLogger.hxx:195; ROOT::Experimental::RLogEntry::IsErrorbool IsError() constDefinition RLogger.hxx:194; ROOT::Experimental::RLogEntry::RLogEntryRLogEntry(ELogLevel level, RLogChannel &channel)Definition RLogger.hxx:185; ROOT::Experimental::RLogEntry::IsInfobool IsInfo() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RLogger_8hxx_source.html:18436,error,errors,18436,doc/master/RLogger_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html,1,['error'],['errors']
Availability,"me() constDefinition TApplication.h:128; TApplication::Forumvirtual void Forum(const char *line)The function ("".forum <type>"") submits a new post on the ROOT forum via web browser.Definition TApplication.cxx:1165; TApplication::SetReturnFromRunvoid SetReturnFromRun(Bool_t ret)Definition TApplication.h:154; TApplication::fQuitBool_t fQuitDefinition TApplication.h:65; TApplication::TabCompletionHookvirtual Int_t TabCompletionHook(char *buf, int *pLoc, std::ostream &out)What to do when tab is pressed.Definition TApplication.cxx:1917; TApplication::fExitOnExceptionEExitOnException fExitOnExceptionDefinition TApplication.h:71; TApplication::fFilesTObjArray * fFilesDefinition TApplication.h:66; TApplication::GetIdleCommandconst char * GetIdleCommand() constDefinition TApplication.h:123; TApplication::TApplicationTApplication()Default ctor. Can be used by classes deriving from TApplication.Definition TApplication.cxx:97; TApplication::ProcessFilevirtual Longptr_t ProcessFile(const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE)Process a file containing a C++ macro.Definition TApplication.cxx:1720; TApplication::OpenForumTopicvoid OpenForumTopic(const TString &type)It opens a Forum topic in a web browser with prefilled ROOT version.Definition TApplication.cxx:1011; TApplication::fWorkDirTString fWorkDirDefinition TApplication.h:67; TApplication::ReturnPressedvirtual void ReturnPressed(char *text)Emit signal when return key was pressed.Definition TApplication.cxx:1957; TApplication::fgGraphInitstatic Bool_t fgGraphInitDefinition TApplication.h:74; TApplication::RemoveIdleTimervirtual void RemoveIdleTimer()Remove idle timer. Normally called via TROOT::Idle(0).Definition TApplication.cxx:1885; TApplication::kExpression@ kExpressionDefinition TApplication.h:49; TApplication::SetIdleTimervirtual void SetIdleTimer(UInt_t idleTimeInSec, const char *command)Set the command to be executed after the system has been idle for idleTimeInSec seconds.Definition TApplication.cxx:1874",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:91504,error,error,91504,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['error'],['error']
Availability,"me(Int_t hour, Int_t min, Int_t sec). void SetDate(Int_t year, Int_t month, Int_t day). void SetHexNumber(ULong_t val). void SetText(const char* text, Bool_t emit = kTRUE). Double_t GetNumber() const. Long_t GetIntNumber() const. void GetTime(Int_t& hour, Int_t& min, Int_t& sec) const. void GetDate(Int_t& year, Int_t& month, Int_t& day) const. ULong_t GetHexNumber() const. void IncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t logstep = kFALSE). void SetLimits(TGNumberFormat::ELimit limits = TGNumberFormat::kNELNoLimits, Double_t min = 0, Double_t max = 1). EStyle GetNumStyle() const; Get the numerical style. EAttribute GetNumAttr() const; Get the numerical attribute. ELimit GetNumLimits() const; Get the numerialc limit attribute. Double_t GetNumMin() const; Get the lower limit. Double_t GetNumMax() const; Get the upper limit. Bool_t IsLogStep() const; Is log step enabled?. Bool_t IsEditable() const; { return kFALSE; }. TGNumberEntry(const TGNumberEntry& ). TGNumberEntry& operator=(const TGNumberEntry& ). void SetFormat(TGNumberFormat::EStyle style, TGNumberFormat::EAttribute attr = TGNumberFormat::kNEAAnyNumber); Set the numerical format. void SetNumStyle(TGNumberFormat::EStyle style). void SetNumAttr(TGNumberFormat::EAttribute attr = kNEAAnyNumber). void SetNumLimits(TGNumberFormat::ELimit limits = kNELNoLimits). void SetLimitValues(Double_t min = 0, Double_t max = 1). TGNumberEntryField * GetNumberEntry() const; Get the number entry field. TGButton * GetButtonUp() const; Get the up button. TGButton * GetButtonDown() const; Get the down button. UInt_t GetDefaultHeight() const; { return fNumericEntry->GetDefaultHeight(); }. » Author: Daniel Sigg 03/09/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGNumberEntry.html:30235,down,down,30235,root/html604/TGNumberEntry.html,https://root.cern,https://root.cern/root/html604/TGNumberEntry.html,1,['down'],['down']
Availability,"me(Int_t hour, Int_t min, Int_t sec). void SetDate(Int_t year, Int_t month, Int_t day). void SetHexNumber(ULong_t val). void SetText(const char* text, Bool_t emit = kTRUE). Double_t GetNumber() const. Long_t GetIntNumber() const. void GetTime(Int_t& hour, Int_t& min, Int_t& sec) const. void GetDate(Int_t& year, Int_t& month, Int_t& day) const. ULong_t GetHexNumber() const. void IncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t logstep = kFALSE). void SetLimits(TGNumberFormat::ELimit limits = TGNumberFormat::kNELNoLimits, Double_t min = 0, Double_t max = 1). EStyle GetNumStyle() const; Get the numerical style. EAttribute GetNumAttr() const; Get the numerical attribute. ELimit GetNumLimits() const; Get the numerialc limit attribute. Double_t GetNumMin() const; Get the lower limit. Double_t GetNumMax() const; Get the upper limit. Bool_t IsLogStep() const; Is log step enabled?. Bool_t IsEditable() const; { return kFALSE; }. TGNumberEntry(const TGNumberEntry& ). TGNumberEntry& operator=(const TGNumberEntry& ). void SetFormat(TGNumberFormat::EStyle style, TGNumberFormat::EAttribute attr = TGNumberFormat::kNEAAnyNumber); Set the numerical format. void SetNumStyle(TGNumberFormat::EStyle style). void SetNumAttr(TGNumberFormat::EAttribute attr = kNEAAnyNumber). void SetNumLimits(TGNumberFormat::ELimit limits = kNELNoLimits). void SetLimitValues(Double_t min = 0, Double_t max = 1). TGNumberEntryField * GetNumberEntry() const; Get the number entry field. TGButton * GetButtonUp() const; Get the up button. TGButton * GetButtonDown() const; Get the down button. UInt_t GetDefaultHeight() const; { return fNumericEntry->GetDefaultHeight(); }. » Author: Daniel Sigg 03/09/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-04 16:52; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGNumberEntry.html:28452,down,down,28452,root/html534/TGNumberEntry.html,https://root.cern,https://root.cern/root/html534/TGNumberEntry.html,1,['down'],['down']
Availability,"me(Int_t hour, Int_t min, Int_t sec). void SetDate(Int_t year, Int_t month, Int_t day). void SetHexNumber(ULong_t val). void SetText(const char* text, Bool_t emit = kTRUE). Double_t GetNumber() const. Long_t GetIntNumber() const. void GetTime(Int_t& hour, Int_t& min, Int_t& sec) const. void GetDate(Int_t& year, Int_t& month, Int_t& day) const. ULong_t GetHexNumber() const. void IncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t logstep = kFALSE). void SetLimits(TGNumberFormat::ELimit limits = TGNumberFormat::kNELNoLimits, Double_t min = 0, Double_t max = 1). EStyle GetNumStyle() const; Get the numerical style. EAttribute GetNumAttr() const; Get the numerical attribute. ELimit GetNumLimits() const; Get the numerialc limit attribute. Double_t GetNumMin() const; Get the lower limit. Double_t GetNumMax() const; Get the upper limit. Bool_t IsLogStep() const; Is log step enabled?. Bool_t IsEditable() const; { return kFALSE; }. TGNumberEntry(const TGNumberEntry& ). TGNumberEntry& operator=(const TGNumberEntry& ). void SetFormat(TGNumberFormat::EStyle style, TGNumberFormat::EAttribute attr = TGNumberFormat::kNEAAnyNumber); Set the numerical format. void SetNumStyle(TGNumberFormat::EStyle style). void SetNumAttr(TGNumberFormat::EAttribute attr = kNEAAnyNumber). void SetNumLimits(TGNumberFormat::ELimit limits = kNELNoLimits). void SetLimitValues(Double_t min = 0, Double_t max = 1). TGNumberEntryField * GetNumberEntry() const; Get the number entry field. TGButton * GetButtonUp() const; Get the up button. TGButton * GetButtonDown() const; Get the down button. UInt_t GetDefaultHeight() const; { return fNumericEntry->GetDefaultHeight(); }. » Author: Daniel Sigg 03/09/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 14:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGNumberEntry.html:30235,down,down,30235,root/html602/TGNumberEntry.html,https://root.cern,https://root.cern/root/html602/TGNumberEntry.html,1,['down'],['down']
Availability,"me(h->fFile, kReadPermission)) {; 1735 Error(""ShowOutput"", ""file '%s' cannot be read"", h->fFile.Data());; 1736 return;; 1737 }; 1738 ; 1739 // Open the file; 1740 FILE *f = nullptr;; 1741 if (!(f = fopen(h->fFile.Data(), ""r""))) {; 1742 Error(""ShowOutput"", ""file '%s' cannot be open"", h->fFile.Data());; 1743 return;; 1744 }; 1745 ; 1746 // Determine the number of bytes to be read from the file.; 1747 off_t ltot = lseek(fileno(f), (off_t) 0, SEEK_END);; 1748 Int_t begin = (h->fReadOffSet > 0 && h->fReadOffSet < ltot) ? h->fReadOffSet : 0;; 1749 lseek(fileno(f), (off_t) begin, SEEK_SET);; 1750 Int_t left = ltot - begin;; 1751 ; 1752 // Now readout from file; 1753 const Int_t kMAXBUF = 16384;; 1754 char buf[kMAXBUF];; 1755 Int_t wanted = (left > kMAXBUF-1) ? kMAXBUF-1 : left;; 1756 Int_t len;; 1757 do {; 1758 while ((len = read(fileno(f), buf, wanted)) < 0 &&; 1759 TSystem::GetErrno() == EINTR); 1760 TSystem::ResetErrno();; 1761 ; 1762 if (len < 0) {; 1763 SysError(""ShowOutput"", ""error reading log file"");; 1764 break;; 1765 }; 1766 ; 1767 // Null-terminate; 1768 buf[len] = 0;; 1769 fprintf(stderr,""%s"", buf);; 1770 ; 1771 // Update counters; 1772 left -= len;; 1773 wanted = (left > kMAXBUF) ? kMAXBUF : left;; 1774 ; 1775 } while (len > 0 && left > 0);; 1776 ; 1777 // Do not display twice the same thing; 1778 h->fReadOffSet = ltot;; 1779 fclose(f);; 1780}; 1781 ; 1782//---- Dynamic Loading ---------------------------------------------------------; 1783 ; 1784////////////////////////////////////////////////////////////////////////////////; 1785/// Add a new directory to the dynamic path.; 1786 ; 1787void TSystem::AddDynamicPath(const char *); 1788{; 1789 AbstractMethod(""AddDynamicPath"");; 1790}; 1791 ; 1792////////////////////////////////////////////////////////////////////////////////; 1793/// Return the dynamic path (used to find shared libraries).; 1794 ; 1795const char *TSystem::GetDynamicPath(); 1796{; 1797 AbstractMethod(""GetDynamicPath"");; 1798 return nullptr;; 1799};",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:56790,error,error,56790,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['error'],['error']
Availability,"me); 143{; 144 // If the filename does not contain ""."" assume class is compiled in; 145 TString localname;; 146 bool fromFile = false;; 147 if (strchr(filename, '.') != nullptr) {; 148 //Interpret/compile filename via CINT; 149 localname = "".L "";; 150 localname += filename;; 151 gROOT->ProcessLine(localname);; 152 fromFile = true;; 153 }; 154 ; 155 //loop on all classes known to CINT to find the class on filename; 156 //that derives from TSelector; 157 const char *basename = gSystem->BaseName(filename);; 158 if (!basename) {; 159 ::Error(""TSelector::GetSelector"",""unable to determine the classname for file %s"", filename);; 160 return nullptr;; 161 }; 162 TString aclicmode,args,io;; 163 localname = gSystem->SplitAclicMode(basename,aclicmode,args,io);; 164 if (localname.Last('.') != kNPOS); 165 localname.Remove(localname.Last('.'));; 166 ; 167 // if a file was not specified, try to load the class via the interpreter;; 168 // this returns 0 (== failure) in the case the class is already in memory; 169 // but does not have a dictionary, so we just raise a flag for better; 170 // diagnostic in the case the class is not found in the CINT ClassInfo table.; 171 bool autoloaderr = false;; 172 if (!fromFile && gCling->AutoLoad(localname) != 1); 173 autoloaderr = true;; 174 ; 175 TClass *selCl = TClass::GetClass(localname);; 176 if (selCl) {; 177 // We have all we need.; 178 auto offset = selCl->GetBaseClassOffset(TSelector::Class());; 179 if (offset == -1) {; 180 // TSelector is not a based class.; 181 if (fromFile); 182 ::Error(""TSelector::GetSelector"",; 183 ""The class %s in file %s does not derive from TSelector."", localname.Data(), filename);; 184 else if (autoloaderr); 185 ::Error(""TSelector::GetSelector"", ""class %s could not be loaded"", filename);; 186 else; 187 ::Error(""TSelector::GetSelector"",; 188 ""class %s does not exist or does not derive from TSelector"", filename);; 189 return nullptr;; 190 }; 191 char *result = (char*)selCl->New();; 192 // By adding offset, we suppor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSelector_8cxx_source.html:6988,failure,failure,6988,doc/master/TSelector_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSelector_8cxx_source.html,1,['failure'],['failure']
Availability,"me); Produces SQL table info.; Object must be deleted by user. TSQLResult * GetColumns(const char* dbname, const char* table, const char* wild = 0); List all columns in specified table in the specified database.; Wild is for wildcarding ""t%"" list all columns starting with ""t"".; Returns a pointer to a TSQLResult object if successful, 0 otherwise.; The result object must be deleted by the user. Int_t CreateDataBase(const char* dbname); Create a database. Returns 0 if successful, non-zero otherwise. Int_t DropDataBase(const char* dbname); Drop (i.e. delete) a database. Returns 0 if successful, non-zero; otherwise. Int_t Reload(); Reload permission tables. Returns 0 if successful, non-zero; otherwise. User must have reload permissions. Int_t Shutdown(); Shutdown the database server. Returns 0 if successful, non-zero; otherwise. User must have shutdown permissions. const char * ServerInfo(); Return server info in form ""MySQL <vesrion>"". Bool_t HasStatement() const; Return kTRUE if TSQLStatement class is supported.; Starts from MySQL 4.1. TSQLStatement * Statement(const char* sql, Int_t = 100); Produce TMySQLStatement. Bool_t StartTransaction(); Start transaction. Bool_t Commit(); Commit changes. Bool_t Rollback(); Rollback changes. Bool_t PingVerify(); Execute Ping to SQL Connection.; Since mysql_ping tries to reconnect by itself,; a double call to the mysql function is implemented.; Returns kTRUE if successful. Int_t Ping(); Execute Ping to SQL Connection using the mysql_ping function.; Returns 0 if successful, non-zero in case an error occured. TMySQLServer(const char* db, const char* uid, const char* pw). Int_t GetMaxIdentifierLength(); { return 64; }. » Author: Fons Rademakers 15/02/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/mysql:$Id$ » Last generated: 2015-03-14 16:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMySQLServer.html:12869,error,error,12869,root/html534/TMySQLServer.html,https://root.cern,https://root.cern/root/html534/TMySQLServer.html,1,['error'],['error']
Availability,"me); Produces SQL table info.; Object must be deleted by user. TSQLResult * GetColumns(const char* dbname, const char* table, const char* wild = 0); List all columns in specified table in the specified database.; Wild is for wildcarding ""t%"" list all columns starting with ""t"".; Returns a pointer to a TSQLResult object if successful, 0 otherwise.; The result object must be deleted by the user. Int_t CreateDataBase(const char* dbname); Create a database. Returns 0 if successful, non-zero otherwise. Int_t DropDataBase(const char* dbname); Drop (i.e. delete) a database. Returns 0 if successful, non-zero; otherwise. Int_t Reload(); Reload permission tables. Returns 0 if successful, non-zero; otherwise. User must have reload permissions. Int_t Shutdown(); Shutdown the database server. Returns 0 if successful, non-zero; otherwise. User must have shutdown permissions. const char * ServerInfo(); Return server info in form ""MySQL <vesrion>"". Bool_t HasStatement() const; Return kTRUE if TSQLStatement class is supported.; Starts from MySQL 4.1. TSQLStatement * Statement(const char* sql, Int_t = 100); Produce TMySQLStatement. Bool_t StartTransaction(); Start transaction. Bool_t Commit(); Commit changes. Bool_t Rollback(); Rollback changes. Bool_t PingVerify(); Execute Ping to SQL Connection.; Since mysql_ping tries to reconnect by itself,; a double call to the mysql function is implemented.; Returns kTRUE if successful. Int_t Ping(); Execute Ping to SQL Connection using the mysql_ping function.; Returns 0 if successful, non-zero in case an error occured. TMySQLServer(const char* db, const char* uid, const char* pw). Int_t GetMaxIdentifierLength(); { return 64; }. » Author: Fons Rademakers 15/02/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/mysql:$Id$ » Last generated: 2015-06-02 16:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMySQLServer.html:13689,error,error,13689,root/html604/TMySQLServer.html,https://root.cern,https://root.cern/root/html604/TMySQLServer.html,1,['error'],['error']
Availability,"me); Produces SQL table info.; Object must be deleted by user. TSQLResult * GetColumns(const char* dbname, const char* table, const char* wild = 0); List all columns in specified table in the specified database.; Wild is for wildcarding ""t%"" list all columns starting with ""t"".; Returns a pointer to a TSQLResult object if successful, 0 otherwise.; The result object must be deleted by the user. Int_t CreateDataBase(const char* dbname); Create a database. Returns 0 if successful, non-zero otherwise. Int_t DropDataBase(const char* dbname); Drop (i.e. delete) a database. Returns 0 if successful, non-zero; otherwise. Int_t Reload(); Reload permission tables. Returns 0 if successful, non-zero; otherwise. User must have reload permissions. Int_t Shutdown(); Shutdown the database server. Returns 0 if successful, non-zero; otherwise. User must have shutdown permissions. const char * ServerInfo(); Return server info in form ""MySQL <vesrion>"". Bool_t HasStatement() const; Return kTRUE if TSQLStatement class is supported.; Starts from MySQL 4.1. TSQLStatement * Statement(const char* sql, Int_t = 100); Produce TMySQLStatement. Bool_t StartTransaction(); Start transaction. Bool_t Commit(); Commit changes. Bool_t Rollback(); Rollback changes. Bool_t PingVerify(); Execute Ping to SQL Connection.; Since mysql_ping tries to reconnect by itself,; a double call to the mysql function is implemented.; Returns kTRUE if successful. Int_t Ping(); Execute Ping to SQL Connection using the mysql_ping function.; Returns 0 if successful, non-zero in case an error occured. TMySQLServer(const char* db, const char* uid, const char* pw). Int_t GetMaxIdentifierLength(); { return 64; }. » Author: Fons Rademakers 15/02/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/mysql:$Id$ » Last generated: 2015-06-30 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMySQLServer.html:13689,error,error,13689,root/html602/TMySQLServer.html,https://root.cern,https://root.cern/root/html602/TMySQLServer.html,1,['error'],['error']
Availability,"me); virtual~TStreamerLoop(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerElement::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; const char*GetCountClass() const; const char*GetCountName() const; Int_tGetCountVersion() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStreamerLoop.html:1656,error,error,1656,root/html528/TStreamerLoop.html,https://root.cern,https://root.cern/root/html528/TStreamerLoop.html,4,['error'],['error']
Availability,"me, ""/private/var/vm/"",MAXNAMLEN);; 4975 strlcat (fname, dp->d_name,MAXNAMLEN);; 4976 if (stat(fname, &sb) < 0); 4977 continue;; 4978 swap_total += sb.st_size;; 4979 }; 4980 closedir(dirp);; 4981 ; 4982 Long64_t used = (Long64_t)(vm_info.active_count + vm_info.inactive_count + vm_info.wire_count) << pshift;; 4983 Long64_t free = (Long64_t)(vm_info.free_count) << pshift;; 4984 Long64_t total = (Long64_t)(vm_info.active_count + vm_info.inactive_count + vm_info.free_count + vm_info.wire_count) << pshift;; 4985 Long64_t avail = (Long64_t)(vm_info.inactive_count + vm_info.free_count) << pshift;; 4986 ; 4987 // Swap is available at same time as mem, so grab values here.; 4988 Long64_t swap_used = vm_info.pageouts << pshift;; 4989 ; 4990 meminfo->fMemTotal = (Int_t) (total >> 20); // divide by 1024 * 1024; 4991 meminfo->fMemUsed = (Int_t) (used >> 20);; 4992 meminfo->fMemFree = (Int_t) (free >> 20);; 4993 meminfo->fSwapTotal = (Int_t) (swap_total >> 20);; 4994 meminfo->fSwapUsed = (Int_t) (swap_used >> 20);; 4995 meminfo->fSwapFree = meminfo->fSwapTotal - meminfo->fSwapUsed;; 4996 meminfo->fMemAvailable = (Int_t)(avail >> 20);; 4997}; 4998 ; 4999////////////////////////////////////////////////////////////////////////////////; 5000/// Get process info for this process on Mac OS X.; 5001/// Code largely taken from:; 5002/// http://www.opensource.apple.com/source/top/top-15/libtop.c; 5003/// The virtual memory usage is slightly over estimated as we don't; 5004/// subtract shared regions, but the value makes more sense; 5005/// than using `virtual_size`, which is useless on 64-bit machines.; 5006 ; 5007static void GetDarwinProcInfo(ProcInfo_t *procinfo); 5008{; 5009#ifdef _LP64; 5010#define vm_region vm_region_64; 5011#endif; 5012 ; 5013// taken from <mach/shared_memory_server.h> which is obsoleted in 10.5; 5014#define GLOBAL_SHARED_TEXT_SEGMENT 0x90000000U; 5015#define GLOBAL_SHARED_DATA_SEGMENT 0xA0000000U; 5016#define SHARED_TEXT_REGION_SIZE 0x10000000; 5017#define SHARED_DA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8cxx_source.html:161431,avail,avail,161431,doc/master/TUnixSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8cxx_source.html,1,['avail'],['avail']
Availability,"me, const char *title=""Context sensitive popup menu"");  Create a context menu. ;  ; virtual ~TContextMenu ();  Destroy a context menu. ;  ; virtual void Action (TClassMenuItem *classmenuitem);  Action to be performed when this menu item is selected. ;  ; void Action (TMethod *method);  ; virtual void Action (TObject *object, TMethod *method);  Action to be performed when this menu item is selected. ;  ; virtual void Action (TObject *object, TToggle *toggle);  Action to be performed when this toggle menu item is selected. ;  ; void Action (TToggle *toggle);  ; virtual const char * CreateArgumentTitle (TMethodArg *argument);  Create string describing argument (for use in dialog box). ;  ; virtual const char * CreateDialogTitle (TObject *object, TFunction *method);  Create title for dialog box retrieving argument values. ;  ; virtual const char * CreatePopupTitle (TObject *object);  Create title for popup menu. ;  ; void Execute (const char *method, const char *params, Int_t *error=nullptr) override;  Execute method on this object with the given parameter string, e.g. ;  ; void Execute (const char *params);  ; void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr) override;  Execute method on this object with parameters stored in the TObjArray. ;  ; void Execute (TObjArray *params);  ; virtual void Execute (TObject *object, TFunction *method, const char *params);  Execute method with specified arguments for specified object. ;  ; virtual void Execute (TObject *object, TFunction *method, TObjArray *params);  Execute method with specified arguments for specified object. ;  ; virtual TBrowser * GetBrowser ();  ; virtual TObject * GetCalledObject ();  ; virtual TContextMenuImp * GetContextMenuImp ();  ; virtual TVirtualPad * GetSelectedCanvas ();  ; virtual TClassMenuItem * GetSelectedMenuItem ();  ; virtual TFunction * GetSelectedMethod ();  ; virtual TObject * GetSelectedObject ();  ; virtual TVirtualPad * GetSelectedPad ();  ; TClass * IsA () const over",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTContextMenu.html:1995,error,error,1995,doc/master/classTContextMenu.html,https://root.cern,https://root.cern/doc/master/classTContextMenu.html,1,['error'],['error']
Availability,"me, const char *title=""Context sensitive popup menu"");  Create a context menu. ;  ; virtual ~TContextMenu ();  Destroy a context menu. ;  ; virtual void Action (TClassMenuItem *classmenuitem);  Action to be performed when this menu item is selected. ;  ; void Action (TMethod *method);  ; virtual void Action (TObject *object, TMethod *method);  Action to be performed when this menu item is selected. ;  ; virtual void Action (TObject *object, TToggle *toggle);  Action to be performed when this toggle menu item is selected. ;  ; void Action (TToggle *toggle);  ; virtual const char * CreateArgumentTitle (TMethodArg *argument);  Create string describing argument (for use in dialog box). ;  ; virtual const char * CreateDialogTitle (TObject *object, TFunction *method);  Create title for dialog box retrieving argument values. ;  ; virtual const char * CreatePopupTitle (TObject *object);  Create title for popup menu. ;  ; void Execute (const char *method, const char *params, Int_t *error=nullptr) override;  Execute method on this object with the given parameter string, e.g. ;  ; void Execute (const char *params);  ; void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr) override;  Execute method on this object with parameters stored in the TObjArray. ;  ; void Execute (TObjArray *params);  ; virtual void Execute (TObject *object, TFunction *method, const char *params);  Execute method with specified arguments for specified object. ;  ; virtual void Execute (TObject *object, TFunction *method, TObjArray *params);  Execute method with specified arguments for specified object. ;  ; virtual TBrowser * GetBrowser ();  ; virtual TObject * GetCalledObject ();  ; virtual TContextMenuImp * GetContextMenuImp ();  ; virtual TVirtualPad * GetSelectedCanvas ();  ; virtual TClassMenuItem * GetSelectedMenuItem ();  ; virtual TFunction * GetSelectedMethod ();  ; virtual TObject * GetSelectedObject ();  ; virtual TVirtualPad * GetSelectedPad ();  ; virtual void Popup (Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveContextMenu.html:1964,error,error,1964,doc/master/classTEveContextMenu.html,https://root.cern,https://root.cern/doc/master/classTEveContextMenu.html,1,['error'],['error']
Availability,"me, const char* signal, void* receiver = 0, const char* slot = 0); virtual voidTQObject::Disconnected(const char*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTGFrame::DrawBorder(); virtual voidTGFrame::DrawClass() const; virtual TObject*TGFrame::DrawClone(Option_t* = """") const; virtual voidTGFrame::DrawCopy(Handle_t, Int_t, Int_t); virtual voidTGFrame::Dump() const; voidTQObject::Emit(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFormat(const char* format = ""%.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGProgressBar.html:4300,error,error,4300,root/html528/TGProgressBar.html,https://root.cern,https://root.cern/root/html528/TGProgressBar.html,8,['error'],['error']
Availability,"me, const char* title = """"); virtual~TMacro(); voidTObject::AbstractMethod(const char* method) const; virtual TObjString*AddLine(const char* text); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); virtual TMD5*Checksum(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Long_tExec(const char* params = 0, Int_t* error = 0)MENU ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TObjString*GetLineWith(const char* text) const; TList*GetListOfLines() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMacro.html:2418,error,error,2418,root/html528/TMacro.html,https://root.cern,https://root.cern/root/html528/TMacro.html,4,['error'],['error']
Availability,"me, void* pointer, TStructNode* parent, ULong_t size, ENodeType type); virtual~TStructNode(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; ULong_tGetAllMembersCount() const; Float_tGetCenter() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Float_tGetHeight() const; virtual const char*TObject::GetIconName() const; UInt_tGetLevel() const; UInt_tGetMaxLevel() const; UInt_tGetMaxObjects() const; TList*GetMembers() const; ULong_tGetMembersCount() const; Float_tGetMiddle() const; virtual const char*GetName() const; ENodeTypeGetNodeType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TStructNode*GetParent() const; void*GetPoi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TStructNode.html:1859,error,error,1859,root/html530/TStructNode.html,https://root.cern,https://root.cern/root/html530/TStructNode.html,3,['error'],['error']
Availability,"me.GetYaxis().SetTitleOffset(1.8); frame.Draw(); ; c.SaveAs(""rf403_weightedevts.png""); RooDataSet::pxData[x,w] = 1000 entries; RooDataSet::pxData[x,weight:w] = 1000 entries (43238.9 weighted); [#1] INFO:Fitting -- RooAbsPdf::fitTo(p2_over_p2_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#0] WARNING:InputArguments -- RooAbsPdf::fitTo(p2): WARNING: a likelihood fit is requested of what appears to be weighted data.; While the estimated values of the parameters will always be calculated taking the weights into account,; there are multiple ways to estimate the errors of the parameters. You are advised to make an; explicit choice for the error calculation:; - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix; (error will be proportional to the number of events in MC).; - Or provide SumW2Error(false), to return errors from original HESSE error matrix; (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).; - Or provide AsymptoticError(true), to use the asymptotically correct expression; (for details see https://arxiv.org/abs/1911.01303).""; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_p2_over_p2_Int[x]_pxData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(p2_over_p2_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_p2_over_p2_Int[x]_pxData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(p2) Calculat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf403__weightedevts_8py.html:6292,error,errors,6292,doc/master/rf403__weightedevts_8py.html,https://root.cern,https://root.cern/doc/master/rf403__weightedevts_8py.html,2,['error'],"['error', 'errors']"
Availability,"me::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*TGCheckButton::fgDefaultFont; static const TGFont*TGTextButton::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGCheckButton::fgDefaultGC; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGButton::fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Window_tTGButton::fgReleaseBtnthe last released button; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGColorSelect(const TGWindow* p = 0, Pixel_t color = 0, Int_t id = -1); TGColorSelect constructor.; The TGColorSelect widget is like a checkbutton but instead of the check; mark there is color area with a little down arrow.; When clicked on the arrow the TGColorPopup pops up. ~TGColorSelect(); TGColorSelect destructor. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for TGColorSelect. Bool_t HandleButton(Event_t* event); Handle button events for TGColorSelect. void Enable(Bool_t on = kTRUE); Set state of widget as enabled. void Disable(); Set state of widget as disabled. void DoRedraw(); Redraw TGColorSelect widget. void DrawTriangle(GContext_t gc, Int_t x, Int_t y); Draw triangle (arrow) on which user can click to open TGColorPopup. void SetColor(Pixel_t color, Bool_t emit = kTRUE); Set color. void SavePrimitive(ostream& out, Option_t* = """"); Save a color select widget as a C++ statement(s) on output stream out. TGColorFrame& operator=(const TGColorSelect& ). Pixel_t GetColor() const; { return fColor; }. TGColorSelect(const TGColorSelect& ). void SetDown(Bool_t on = kTRUE, Bool_t emit = kFALSE); dummy methods j",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGColorSelect.html:23215,down,down,23215,root/html528/TGColorSelect.html,https://root.cern,https://root.cern/root/html528/TGColorSelect.html,3,['down'],['down']
Availability,"me::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*TGCheckButton::fgDefaultFont; static const TGFont*TGTextButton::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGCheckButton::fgDefaultGC; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGButton::fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Window_tTGButton::fgReleaseBtnthe last released button; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGColorSelect(const TGWindow* p = 0, Pixel_t color = 0, Int_t id = -1); TGColorSelect constructor.; The TGColorSelect widget is like a checkbutton but instead of the check; mark there is color area with a little down arrow.; When clicked on the arrow the TGColorPopup pops up. ~TGColorSelect(); TGColorSelect destructor. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for TGColorSelect. Bool_t HandleButton(Event_t* event); Handle button events for TGColorSelect. void Enable(Bool_t on = kTRUE); Set state of widget as enabled. void Disable(); Set state of widget as disabled. void DoRedraw(); Redraw TGColorSelect widget. void DrawTriangle(GContext_t gc, Int_t x, Int_t y); Draw triangle (arrow) on which user can click to open TGColorPopup. void SetColor(Pixel_t color, Bool_t emit = kTRUE); Set color. void SetAlphaColor(ULong_t color, Bool_t emit = kTRUE); Set color. void SavePrimitive(ostream& out, Option_t* = """"); Save a color select widget as a C++ statement(s) on output stream out. TGColorFrame& operator=(const TGColorSelect& ). Pixel_t GetColor() const; { return fColor; }. TGColorSelect(const TGColorSelect& ). voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGColorSelect.html:23742,down,down,23742,root/html534/TGColorSelect.html,https://root.cern,https://root.cern/root/html534/TGColorSelect.html,1,['down'],['down']
Availability,"meEditor. Editor for geometry volumes and assemblies of volumes. Besides the volume; name and line attributes, a TGeoVolume has the following editable categories; split vertically by a shutter:; - Properties: one can edit the shape and medium components from here. It is; also possible to change the existing ones.; - Daughters: the main category allowing defining, editing, removing or; positioning daughter volumes inside the current edited volume. To add a; daughter, one needs to select first a volume and a matrix. Currently no check; is performed if the daughter volume creates an extrusion (illegal for tracking).; To remove or change the position of an existing daughter, one should simply; select the desired daughter from the combo box with the existing ones, then; simply click the appropriate button.; - Visualization: One can set the visibility of the volume and of its daughters,; set the visibility depth and the view type. Selecting ""All"" will draw the; volume and all visible daughters down to the selected level starting from the; edited volume. Selecting ""Leaves"" will draw just the deepest daughters within; the selected visibility level, without displaying the containers, while ""Only""; will just draw the edited volume.; - Division: The category becomes active only if there are no daughters of the; edited volume added by normal positioning (e.g. from <Daughters> category). The; minimum allowed starting value for the selected division axis is automatically; selected, while the dslicing step is set to 0 - meaning that only the number; of slices matter. Function Members (Methods); public:. TGeoVolumeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual~TGeoVolumeEditor(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidActivateBaseClassEditors(TClass* cl); virtual void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoVolumeEditor.html:1332,down,down,1332,root/html534/TGeoVolumeEditor.html,https://root.cern,https://root.cern/root/html534/TGeoVolumeEditor.html,1,['down'],['down']
Availability,"meEditor. Editor for geometry volumes and assemblies of volumes. Besides the volume; name and line attributes, a TGeoVolume has the following editable categories; split vertically by a shutter:; - Properties: one can edit the shape and medium components from here. It is; also possible to change the existing ones.; - Daughters: the main category allowing defining, editing, removing or; positioning daughter volumes inside the current edited volume. To add a; daughter, one needs to select first a volume and a matrix. Currently no check; is performed if the daughter volume creates an extrusion (illegal for tracking).; To remove or change the position of an existing daughter, one should simply; select the desired daughter from the combo box with the existing ones, then; simply click the appropriate button.; - Visualization: One can set the visibility of the volume and of its daughters,; set the visibility depth and the view type. Selecting ""All"" will draw the; volume and all visible daughters down to the selected level starting from the; edited volume. Selecting ""Leaves"" will draw just the deepest daughters within; the selected visibility level, without displaying the containers, while ""Only""; will just draw the edited volume.; - Division: The category becomes active only if there are no daughters of the; edited volume added by normal positioning (e.g. from <Daughters> category). The; minimum allowed starting value for the selected division axis is automatically; selected, while the dslicing step is set to 0 - meaning that only the number; of slices matter. Function Members (Methods); public:. virtual~TGeoVolumeEditor(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoVolumeEditor.html:1332,down,down,1332,root/html602/TGeoVolumeEditor.html,https://root.cern,https://root.cern/root/html602/TGeoVolumeEditor.html,2,['down'],['down']
Availability,"meElement(); TGFrameElement(TGFrame* f, TGLayoutHints* l); virtual~TGFrameElement(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGFrameElement.html:1430,error,error,1430,root/html528/TGFrameElement.html,https://root.cern,https://root.cern/root/html528/TGFrameElement.html,4,['error'],['error']
Availability,"meHostname; Bool_tTSystem::fInControlTrue if in eventloop; TStringTSystem::fIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tTSystem::fInsideNotifyUsed by DispatchTimers(); Bool_tfIsLocalTRUE if the path points to this host; TStringTSystem::fLastErrorStringLast system error message; Int_tTSystem::fLevelLevel of nested eventloops; TStringTSystem::fLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EACLiCProperties); TStringTSystem::fLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringTSystem::fListLibsList shared libraries, cache used by GetLibraries; TStringTSystem::fListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringfLocalPrefixif fIsLocal, prefix to be prepend locally; TStringTSystem::fMakeExeDirective used to build an executable; TStringTSystem::fMakeSharedLibDirective used to build a shared library; Int_tTSystem::fMaxrfdLargest fd in read mask; Int_tTSystem::fMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tTSystem::fNfdNumber of fd's in masks; TStringTSystem::fObjExtExtension of object files (.o, .obj, etc.); TSeqCollection*TSystem::fOnExitListList of items to be cleaned-up on exit; TFdSet*TSystem::fReadmask!Files that should be checked for read events; TFdSet*TSystem::fReadready!Files with reads waiting; Int_tTSystem::fSigcntNumber of pending signals; TSeqCollection*TSystem::fSignalHandlerList of signal handlers; TFdSet*TSystem::fSignals!Signals that were trapped; TStringTSystem::fSoExtExtension of shared library (.so, .sl, .a, .dll, etc.); TSeqCollection*TSystem::fStdExceptionHandlerList of std::exception handlers; TSeqCollection*TSystem::fTimersList of timers; TStringTNamed::fTitleobject title; TStringTSystem::fWdpathWorking directory; TFdSet*TSystem::fWritemask!Files that should be checked for write events; TFdSet*TSystem::fWriteready!Files with wr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TNetSystem.html:19809,mask,mask,19809,root/html528/TNetSystem.html,https://root.cern,https://root.cern/root/html528/TNetSystem.html,9,['mask'],"['mask', 'masks']"
Availability,"meInSec, const char *command = nullptr);; 278 Int_t IgnoreInclude(const char *fname, const char *expandedfname);; 279 Bool_t IsBatch() const { return fBatch; }; 280 Bool_t IsExecutingMacro() const { return fExecutingMacro; }; 281 Bool_t IsFolder() const override { return kTRUE; }; 282 Bool_t IsInterrupted() const { return fInterrupt; }; 283 Bool_t IsEscaped() const { return fEscape; }; 284 Bool_t IsLineProcessing() const { return fLineIsProcessing ? kTRUE : kFALSE; }; 285 Bool_t IsProofServ() const { return fName == ""proofserv"" ? kTRUE : kFALSE; }; 286 Bool_t IsRootFile(const char *filename) const;; 287 Bool_t IsWebDisplay() const { return fIsWebDisplay; }; 288 Bool_t IsWebDisplayBatch() const { return fIsWebDisplayBatch; }; 289 void ls(Option_t *option = """") const override;; 290 Int_t LoadClass(const char *classname, const char *libname, Bool_t check = kFALSE);; 291 TClass *LoadClass(const char *name, Bool_t silent = kFALSE) const;; 292 Int_t LoadMacro(const char *filename, Int_t *error = nullptr, Bool_t check = kFALSE);; 293 Longptr_t Macro(const char *filename, Int_t *error = nullptr, Bool_t padUpdate = kTRUE);; 294 TCanvas *MakeDefCanvas() const;; 295 void Message(Int_t id, const TObject *obj);; 296 Bool_t MustClean() const { return fMustClean; }; 297 Longptr_t ProcessLine(const char *line, Int_t *error = nullptr);; 298 Longptr_t ProcessLineSync(const char *line, Int_t *error = nullptr);; 299 Longptr_t ProcessLineFast(const char *line, Int_t *error = nullptr);; 300 Bool_t ReadingObject() const;; 301 void RecursiveRemove(TObject *obj) override;; 302 void RefreshBrowsers();; 303 static void RegisterModule(const char* modulename,; 304 const char** headers,; 305 const char** includePaths,; 306 const char* payLoadCode,; 307 const char* fwdDeclCode,; 308 void (*triggerFunc)(),; 309 const FwdDeclArgsToKeepCollection_t& fwdDeclsArgToSkip,; 310 const char** classesHeaders,; 311 bool hasCxxModule = false);; 312 TObject *Remove(TObject*) override;; 313 void RemoveClass(TCl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8h_source.html:14810,error,error,14810,doc/master/TROOT_8h_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8h_source.html,2,['error'],['error']
Availability,"meTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTSystem::SetObjExt(const char* objExt); virtual voidTSystem::SetProgname(const char* name); virtual intTSystem::SetSockOpt(int sock, int kind, int val); virtual voidTSystem::SetSoExt(const char* soExt); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidTSystem::ShowOutput(RedirectHandle_t* h); virtual Int_tTNamed::Sizeof() const; virtual voidTSystem::Sleep(UInt_t milliSec); virtual TStringTSystem::SplitAclicMode(const char* filename, TString& mode, TString& args, TString& io) const; virtual voidTSystem::StackTrace(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual intTSystem::Symlink(const char* from, const char* to); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTSystem::Syslog(ELogLevel level, const char* mess); virtual const char*TSystem::TempDirectory() const; virtual FILE*TSystem::TempFileName(TString& base, const char* dir = 0); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual intTSystem::Umask(Int_t mask); virtual const char*TSystem::UnixPathName(const char* unixpathname); virtual intUnlink(const char* path); virtual voidTSystem::Unload(const char* module); virtual voidTSystem::Unsetenv(const char* name); virtual voidTObject::UseCurrentStyle(); virtual intTSystem::Utime(const char* file, Long_t modtime, Long_t actime); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual char*TSystem::Which(const char* search, const char* file, EAccessMode mode = kFileExists); virtual const char*TSystem::WorkingDirectory(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNetSystem.html:16121,mask,mask,16121,root/html534/TNetSystem.html,https://root.cern,https://root.cern/root/html534/TNetSystem.html,2,['mask'],['mask']
Availability,"mean value of the histogram along; X,Y or Z axis.; For axis = 11, 12, 13 returns the standard error of the mean value; of the histogram along X, Y or Z axis. Note that the mean value/StdDev is computed using the bins in the currently; defined range (see TAxis::SetRange). By default the range includes; all bins from 1 to nbins included, excluding underflows and overflows.; To force the underflows and overflows in the computation, one must; call the static function TH1::StatOverflows(kTRUE) before filling; the histogram. Return mean value of this histogram along the X axis. Note that the mean value/StdDev is computed using the bins in the currently; defined range (see TAxis::SetRange). By default the range includes; all bins from 1 to nbins included, excluding underflows and overflows.; To force the underflows and overflows in the computation, one must; call the static function TH1::StatOverflows(kTRUE) before filling; the histogram. Double_t GetMeanError(Int_t axis = 1) const; Return standard error of mean of this histogram along the X axis. Note that the mean value/StdDev is computed using the bins in the currently; defined range (see TAxis::SetRange). By default the range includes; all bins from 1 to nbins included, excluding underflows and overflows.; To force the underflows and overflows in the computation, one must; call the static function TH1::StatOverflows(kTRUE) before filling; the histogram.; Also note, that although the definition of standard error doesn't include the; assumption of normality, many uses of this feature implicitly assume it. Double_t GetStdDev(Int_t axis = 1) const; Returns the Standard Deviation (Sigma).; The Sigma estimate is computed as Sqrt((1/N)*(Sum(x_i-x_mean)^2)). For axis = 1,2 or 3 returns the Sigma value of the histogram along; X, Y or Z axis; For axis = 11, 12 or 13 returns the error of StdDev estimation along; X, Y or Z axis for Normal distribution. Note that the mean value/sigma is computed using the bins in the currently; defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TH1.html:111140,error,error,111140,root/html604/TH1.html,https://root.cern,https://root.cern/root/html604/TH1.html,1,['error'],['error']
Availability,"mean"", ""mean of g1 and g2"", 0);; RooRealVar sigma_g1(""sigma_g1"", ""width of g1"", 3);; RooGaussian g1(""g1"", ""g1"", x, mean, sigma_g1);; ; RooRealVar sigma_g2(""sigma_g2"", ""width of g2"", 4, 3.0, 6.0);; RooGaussian g2(""g2"", ""g2"", x, mean, sigma_g2);; ; RooRealVar frac(""frac"", ""frac"", 0.5, 0.0, 1.0);; RooAddPdf model(""model"", ""model"", RooArgList(g1, g2), frac);; ; // Generate 1000 events; std::unique_ptr<RooDataSet> data{model.generate(x, 1000)};; ; // Construct unbinned likelihood of model w.r.t. data; std::unique_ptr<RooAbsReal> nll{model.createNLL(*data)};; ; // I n t e r a c t i v e m i n i m i z a t i o n , e r r o r a n a l y s i s; // -------------------------------------------------------------------------------; ; // Create MINUIT interface object; RooMinimizer m(*nll);; ; // Activate verbose logging of MINUIT parameter space stepping; m.setVerbose(true);; ; // Call MIGRAD to minimize the likelihood; m.migrad();; ; // Print values of all parameters, that reflect values (and error estimates); // that are back propagated from MINUIT; std::unique_ptr<RooArgSet>{model.getParameters(x)}->Print(""s"");; ; // Disable verbose logging; m.setVerbose(false);; ; // Run HESSE to calculate errors from d2L/dp2; m.hesse();; ; // Print value (and error) of sigma_g2 parameter, that reflects; // value and error back propagated from MINUIT; sigma_g2.Print();; ; // Run MINOS on sigma_g2 parameter only; m.minos(sigma_g2);; ; // Print value (and error) of sigma_g2 parameter, that reflects; // value and error back propagated from MINUIT; sigma_g2.Print();; ; // S a v i n g r e s u l t s , c o n t o u r p l o t s; // ---------------------------------------------------------; ; // Save a snapshot of the fit result. This object contains the initial; // fit parameters, the final fit parameters, the complete correlation; // matrix, the EDM, the minimized FCN , the last MINUIT status code and; // the number of times the RooFit function object has indicated evaluation; // problems (e.g. zero proba",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf601__intminuit_8C.html:1812,error,error,1812,doc/master/rf601__intminuit_8C.html,https://root.cern,https://root.cern/doc/master/rf601__intminuit_8C.html,1,['error'],['error']
Availability,"means EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock) -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Definition at line 867 of file TUDPSocket.cxx. ◆ RecvStreamerInfos(). Bool_t TUDPSocket::RecvStreamerInfos ; (; TMessage * ; mess). protected . Receive a message containing streamer infos. ; In case the message contains streamer infos they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 898 of file TUDPSocket.cxx. ◆ Select(). Int_t TUDPSocket::Select ; (; Int_t ; interest = kRead, . Long_t ; timeout = -1 . ). virtual . Waits for this socket to change status. ; If interest=kRead, the socket will be watched to see if characters become available for reading; if interest=kWrite the socket will be watched to see if a write will not block. The argument 'timeout' specifies a maximum time to wait in millisec. Default no timeout. Returns 1 if a change of status of interest has been detected within timeout; 0 in case of timeout; < 0 if an error occured. ; Definition at line 407 of file TUDPSocket.cxx. ◆ Send() [1/4]. Int_t TUDPSocket::Send ; (; const char * ; str, . Int_t ; kind = kMESS_STRING . ). virtual . Send a character string buffer. ; Use kind to set the TMessage ""what"" field. Returns the number of bytes in the string str that were sent and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Definition at line 464 of file TUDPSocket.cxx. ◆ Send() [2/4]. Int_t TUDPSocket::Send ; (; const TMessage & ; mess). virtual . Send a TMessage object. ; Returns the number of bytes in the TMessage that were sent and -1 in case of error. In case the TMessage::What has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. Returns -4 in case of kNoBlock and errno == EWOULDBLOCK",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUDPSocket.html:29219,error,error,29219,doc/master/classTUDPSocket.html,https://root.cern,https://root.cern/doc/master/classTUDPSocket.html,1,['error'],['error']
Availability,"means one degree of freedom less; 2334 continue;; 2335 }; 2336 ; 2337 // case weighted histogram has zero bin content and error; 2338 if (cnt2 * cnt2 == 0 && e2sq == 0) {; 2339 if (sumw2 > 0) {; 2340 // use as approximated error as 1 scaled by a scaling ratio; 2341 // estimated from the total sum weight and sum weight squared; 2342 e2sq = sumw2 / sum2;; 2343 }; 2344 else {; 2345 // return error because infinite discrepancy here:; 2346 // bin1 != 0 and bin2 =0 in a histogram with all errors zero; 2347 Error(""Chi2TestX"",""Hist2 has in bin (%d,%d,%d) zero content and zero errors\n"", i, j, k);; 2348 chi2 = 0; return 0;; 2349 }; 2350 }; 2351 ; 2352 if (cnt1 < 1) m++;; 2353 if (e2sq > 0 && cnt2 * cnt2 / e2sq < 10) n++;; 2354 ; 2355 Double_t var1 = sum2 * cnt2 - sum1 * e2sq;; 2356 Double_t var2 = var1 * var1 + 4. * sum2 * sum2 * cnt1 * e2sq;; 2357 ; 2358 // if cnt1 is zero and cnt2 = 1 and sum1 = sum2 var1 = 0 && var2 == 0; 2359 // approximate by incrementing cnt1; 2360 // LM (this need to be fixed for numerical errors); 2361 while (var1 * var1 + cnt1 == 0 || var1 + var2 == 0) {; 2362 sum1++;; 2363 cnt1++;; 2364 var1 = sum2 * cnt2 - sum1 * e2sq;; 2365 var2 = var1 * var1 + 4. * sum2 * sum2 * cnt1 * e2sq;; 2366 }; 2367 var2 = TMath::Sqrt(var2);; 2368 ; 2369 while (var1 + var2 == 0) {; 2370 sum1++;; 2371 cnt1++;; 2372 var1 = sum2 * cnt2 - sum1 * e2sq;; 2373 var2 = var1 * var1 + 4. * sum2 * sum2 * cnt1 * e2sq;; 2374 while (var1 * var1 + cnt1 == 0 || var1 + var2 == 0) {; 2375 sum1++;; 2376 cnt1++;; 2377 var1 = sum2 * cnt2 - sum1 * e2sq;; 2378 var2 = var1 * var1 + 4. * sum2 * sum2 * cnt1 * e2sq;; 2379 }; 2380 var2 = TMath::Sqrt(var2);; 2381 }; 2382 ; 2383 Double_t probb = (var1 + var2) / (2. * sum2 * sum2);; 2384 ; 2385 Double_t nexp1 = probb * sum1;; 2386 Double_t nexp2 = probb * sum2;; 2387 ; 2388 Double_t delta1 = cnt1 - nexp1;; 2389 Double_t delta2 = cnt2 - nexp2;; 2390 ; 2391 chi2 += delta1 * delta1 / nexp1;; 2392 ; 2393 if (e2sq > 0) {; 2394 chi2 += delta2 * delta2 / e2sq;; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:94546,error,errors,94546,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['errors']
Availability,"med *)(arr[k]+ioffset))->TNamed::Streamer(b); }; continue; }; 428 ; 429 case TStreamerInfo::kAnyp: // Class* Class not derived from TObject and with comment field //->; 430 case TStreamerInfo::kAnyp + TStreamerInfo::kOffsetL:; 431 ; 432 case TStreamerInfo::kObjectp: // Class * Class derived from TObject and with comment field //->; 433 case TStreamerInfo::kObjectp + TStreamerInfo::kOffsetL:; 434 ; 435 isPreAlloc = kTRUE;; 436 ; 437 // Intentional fallthrough now that isPreAlloc is set.; 438 case TStreamerInfo::kAnyP: // Class* Class not derived from TObject and no comment; 439 case TStreamerInfo::kAnyP + TStreamerInfo::kOffsetL:; 440 ; 441 case TStreamerInfo::kObjectP: // Class* Class derived from TObject; 442 case TStreamerInfo::kObjectP + TStreamerInfo::kOffsetL: {; 443 TClass *cl = compinfo[i]->fClass;; 444 TMemberStreamer *pstreamer = compinfo[i]->fStreamer;; 445 DOLOOP {; 446 Int_t res = b.WriteFastArray((void**)(arr[k]+ioffset),cl,compinfo[i]->fLength,isPreAlloc,pstreamer);; 447 if (res==2) {; 448 Warning(""WriteBuffer"",; 449 ""The actual class of %s::%s is not available. Only the \""%s\"" part will be written\n"",; 450 GetName(),aElement->GetName(),cl->GetName());; 451 }; 452 }; 453 continue;; 454 }; 455 ; 456 case TStreamerInfo::kAnyPnoVT: // Class* Class not derived from TObject and no virtual table and no comment; 457 case TStreamerInfo::kAnyPnoVT + TStreamerInfo::kOffsetL: {; 458 TClass *cl = compinfo[i]->fClass;; 459 TMemberStreamer *pstreamer = compinfo[i]->fStreamer;; 460 DOLOOP {; 461 void **f = (void**)(arr[k]+ioffset);; 462 int j;; 463 for(j=0;j<compinfo[i]->fLength;j++) {; 464 void *af = f[j];; 465 if (af) b << Char_t(1);; 466 else {b << Char_t(0); continue;}; 467 if (pstreamer) (*pstreamer)(b, af, 0);; 468 else cl->Streamer( af, b );; 469 }; 470 }; 471 continue;; 472 }; 473 ; 474// case TStreamerInfo::kSTLvarp: // Variable size array of STL containers.; 475// {; 476// TMemberStreamer *pstreamer = compinfo[i]->fStreamer;; 477// TClass *cl = compinfo[i]-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoWriteBuffer_8cxx_source.html:19885,avail,available,19885,doc/master/TStreamerInfoWriteBuffer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoWriteBuffer_8cxx_source.html,1,['avail'],['available']
Availability,"med.cxx:74; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::SavePrimitivevirtual void SavePrimitive(std::ostream &out, Option_t *option="""")Save a primitive as a C++ statement(s) on output stream ""out"".Definition TObject.cxx:757; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::IsAvirtual TClass * IsA() constDefinition TObject.h:243; TStringBasic string class.Definition TString.h:139; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::CompareToint CompareTo(const char *cs, ECaseCompare cmp=kExact) constCompare a string to char *cs2.Definition TString.cxx:457; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; bool; double; int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2Poly_8cxx_source.html:77086,error,error,77086,doc/master/TH2Poly_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2Poly_8cxx_source.html,1,['error'],['error']
Availability,"med::Clone(const char* newname = """") const; Bool_tcommitTransaction(); virtual Int_tTNamed::Compare(const TObject* obj) const; TIterator*componentIterator() const; const RooArgSet&components() const; virtual voidTNamed::Copy(TObject& named) const; RooAbsData*data(const char* name) const; Bool_tdefineSet(const char* name, const char* contentList); Bool_tdefineSet(const char* name, const RooArgSet& aset, Bool_t importMissing = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); RooExpensiveObjectCache&expensiveObjectCache(); voidexportToCint(const char* namespaceName = 0); Bool_textendSet(const char* name, const char* newContents); RooFactoryWSTool&factory(); RooAbsArg*factory(const char* expr); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; RooAbsReal*function(const char* name) const; RooAbsArg*fundArg(const char* name) const; TObject*genobj(const char* name) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooWorkspace.html:3483,error,error,3483,root/html526/RooWorkspace.html,https://root.cern,https://root.cern/root/html526/RooWorkspace.html,4,['error'],['error']
Availability,"med::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTSystem::SetObjExt(const char* objExt); virtual voidTSystem::SetProgname(const char* name); virtual intTSystem::SetSockOpt(int sock, int kind, int val); virtual voidTSystem::SetSoExt(const char* soExt); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidTSystem::ShowOutput(RedirectHandle_t* h); virtual Int_tTNamed::Sizeof() const; virtual voidTSystem::Sleep(UInt_t milliSec); virtual TStringTSystem::SplitAclicMode(const char* filename, TString& mode, TString& args, TString& io) const; virtual voidTSystem::StackTrace(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual intTSystem::Symlink(const char* from, const char* to); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTSystem::Syslog(ELogLevel level, const char* mess); virtual const char*TSystem::TempDirectory() const; virtual FILE*TSystem::TempFileName(TString& base, const char* dir = 0); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual intTSystem::Umask(Int_t mask); virtual const char*TSystem::UnixPathName(const char* unixpathname); virtual intTSystem::Unlink(const char* name); virtual voidTSystem::Unload(const char* module); virtual voidTSystem::Unsetenv(const char* name); virtual voidTObject::UseCurrentStyle(); virtual intTSystem::Utime(const char* file, Long_t modtime, Long_t actime); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual char*TSystem::Which(const char* search, const char* file, EAccessMode mode = kFileExists); virtual const char*TSystem::WorkingDirectory(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDCacheSystem.html:13845,mask,mask,13845,root/html528/TDCacheSystem.html,https://root.cern,https://root.cern/root/html528/TDCacheSystem.html,3,['mask'],['mask']
Availability,"members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooNonCentralChiSquare Class ReferenceRooFit » RooFit. ; The PDF of the Non-Central Chi Square distribution for n degrees of freedom. ; It is the asymptotic distribution of the profile likelihood ratio test q_mu when a different mu' is true. It is Wald's generalization of Wilks' Theorem.; See:; Asymptotic formulae for likelihood-based tests of new physics; By Glen Cowan, Kyle Cranmer, Eilam Gross, Ofer Vitells http://arXiv.org/abs/arXiv:1007.1727; Wikipedia; It requires MathMore to evaluate for non-integer degrees of freedom, k.; When the Mathmore library is available we can use the MathMore libraries implemented using GSL. It makes use of the modified Bessel function of the first kind (for k > 2). For k < 2 it uses the hypergeometric function 0F1. When is not available we use explicit summation of normal chi-squared distributions The usage of the sum can be forced by calling SetForceSum(true);; This implementation could be improved. BOOST has a nice implementation:; http://live.boost.org/doc/libs/1_42_0/libs/math/doc/sf_and_dist/html/math_toolkit/dist/dist_ref/dists/nc_chi_squared_dist.html; http://wesnoth.repositoryhosting.com/trac/wesnoth_wesnoth/browser/trunk/include/boost/math/distributions/non_central_chi_squared.hpp?rev=6 ; Definition at line 20 of file RooNonCentralChiSquare.h. Public Member Functions;  RooNonCentralChiSquare ();  ;  RooNonCentralChiSquare (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_k, RooAbsReal &_lambda);  ;  RooNonCentralChiSquare (const RooNonCentralChiSquare &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNonCentralChiSquare.html:1060,avail,available,1060,doc/master/classRooNonCentralChiSquare.html,https://root.cern,https://root.cern/doc/master/classRooNonCentralChiSquare.html,1,['avail'],['available']
Availability,"memfuncTFormula::fOptimal!pointer to optimal function; Double_t*TFormula::fParams[fNpar] Array of fNpar parameters; TFormulaPrimitive**TFormula::fPredefined![fNPar] predefined function ; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooFormula(); Default constructor; coverity[UNINIT_CTOR]. RooFormula(const char* name, const char* formula, const RooArgList& varList); Constructor with expression string and list of RooAbsArg variables. RooFormula(const RooFormula& other, const char* name = 0); Copy constructor. Bool_t reCompile(const char* newFormula); Recompile formula with new expression. ~RooFormula(); Destructor. RooArgSet& actualDependents() const; Return list of RooAbsArg dependents that is actually used by formula expression. void dump(); DEBUG: Dump state information. Bool_t changeDependents(const RooAbsCollection& newDeps, Bool_t mustReplaceAll, Bool_t nameChange); Change used variables to those with the same name in given list; If mustReplaceAll is true and error is generated if one of the; elements of newDeps is not found as a server. Double_t eval(const RooArgSet* nset = 0); Evaluate TFormula using given normalization set to be used as; observables definition passed to RooAbsReal::getVal(). DefinedValue(Int_t code); Interface to TFormula, return value defined by object with id 'code'; Object ids are mapped from object names by method DefinedVariable(). Int_t DefinedVariable(TString& name, int& action); Interface to TFormula. If name passed by TFormula is recognized; as one of our RooAbsArg servers, return a unique id integer; that represent this variable. Int_t DefinedVariable(TString& name); Interface to TFormula. If name passed by TFormula is recognized; as one of our RooAbsArg servers, return a unique id integer; that represent this variable. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Printing interface. void printValu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooFormula.html:14661,error,error,14661,root/html528/RooFormula.html,https://root.cern,https://root.cern/root/html528/RooFormula.html,4,['error'],['error']
Availability,"mended instead; (with mean =*ntot+0.5 and standard deviation sqrt(ntot*prob*(1-prob)). Double_t BreitWigner(Double_t mean = 0, Double_t gamma = 1); Return a number distributed following a BreitWigner function with mean and gamma. void Circle(Double_t& x, Double_t& y, Double_t r); Generates random vectors, uniformly distributed over a circle of given radius.; Input : r = circle radius; Output: x,y a random 2-d vector of length r. Double_t Exp(Double_t tau); Returns an exponential deviate. exp( -t/tau ). Double_t Gaus(Double_t mean = 0, Double_t sigma = 1); Samples a random number from the standard Normal (Gaussian) Distribution; with the given mean and sigma.; Uses the Acceptance-complement ratio from W. Hoermann and G. Derflinger; This is one of the fastest existing method for generating normal random variables.; It is a factor 2/3 faster than the polar (Box-Muller) method used in the previous; version of TRandom::Gaus. The speed is comparable to the Ziggurat method (from Marsaglia); implemented for example in GSL and available in the MathMore library. REFERENCE: - W. Hoermann and G. Derflinger (1990):; The ACR Method for generating normal random variables,; OR Spektrum 12 (1990), 181-185. Implementation taken from; UNURAN (c) 2000 W. Hoermann & J. Leydold, Institut f. Statistik, WU Wien. UInt_t Integer(UInt_t imax); Returns a random integer on [ 0, imax-1 ]. Double_t Landau(Double_t mean = 0, Double_t sigma = 1); Generate a random number following a Landau distribution; with location parameter mu and scale parameter sigma:; Landau( (x-mu)/sigma ); Note that mu is not the mpv(most probable value) of the Landa distribution; and sigma is not the standard deviation of the distribution which is not defined.; For mu =0 and sigma=1, the mpv = -0.22278. The Landau random number generation is implemented using the; function landau_quantile(x,sigma), which provides; the inverse of the landau cumulative distribution.; landau_quantile has been converted from CERNLIB ranlan(G110",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRandom.html:12721,avail,available,12721,root/html534/TRandom.html,https://root.cern,https://root.cern/root/html534/TRandom.html,3,['avail'],['available']
Availability,"mended instead; (with mean =*ntot+0.5 and standard deviation sqrt(ntot*prob*(1-prob)). Double_t BreitWigner(Double_t mean = 0, Double_t gamma = 1); Return a number distributed following a BreitWigner function with mean and gamma. void Circle(Double_t& x, Double_t& y, Double_t r); generates random vectors, uniformly distributed over a circle of given radius.; Input : r = circle radius; Output: x,y a random 2-d vector of length r. Double_t Exp(Double_t tau); returns an exponential deviate. exp( -t/tau ). Double_t Gaus(Double_t mean = 0, Double_t sigma = 1). samples a random number from the standard Normal (Gaussian) Distribution; with the given mean and sigma.; Uses the Acceptance-complement ratio from W. Hoermann and G. Derflinger; This is one of the fastest existing method for generating normal random variables.; It is a factor 2/3 faster than the polar (Box-Muller) method used in the previous; version of TRandom::Gaus. The speed is comparable to the Ziggurat method (from Marsaglia); implemented for example in GSL and available in the MathMore library. REFERENCE: - W. Hoermann and G. Derflinger (1990):; The ACR Method for generating normal random variables,; OR Spektrum 12 (1990), 181-185. Implementation taken from; UNURAN (c) 2000 W. Hoermann & J. Leydold, Institut f. Statistik, WU Wien. UInt_t Integer(UInt_t imax); returns a random integer on [ 0, imax-1 ]. Double_t Landau(Double_t mean = 0, Double_t sigma = 1); Generate a random number following a Landau distribution; with mpv(most probable value) and sigma; Use function landau_quantile(x,sigma) which provides; the inverse of the landau cumulative distribution; landau_quantile has been converted from CERNLIB ranlan(G110). Int_t Poisson(Double_t mean); Generates a random integer N according to a Poisson law.; Prob(N) = exp(-mean)*mean^N/Factorial(N). Use a different procedure according to the mean value.; The algorithm is the same used by CLHEP; For lower value (mean < 25) use the rejection method based on; the exp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRandom.html:12610,avail,available,12610,root/html528/TRandom.html,https://root.cern,https://root.cern/root/html528/TRandom.html,3,['avail'],['available']
Availability,"ment * FindFrame(Int_t x, Int_t y, Bool_t exclude = kTRUE); Find frame located int container at position x,y. void * FindItem(const TString& name, Bool_t direction = kTRUE, Bool_t caseSensitive = kTRUE, Bool_t subString = kFALSE). TGHScrollBar * GetHScrollbar() const; returns pointer to hor. scroll bar. TGVScrollBar * GetVScrollbar() const; returns pointer to vert. scroll bar. void SetVsbPosition(Int_t newPos); Set position of vertical scrollbar. void SetHsbPosition(Int_t newPos); set new hor. position. void AdjustPosition(); Move content to position of highlighted/activated frame. void LineLeft(Bool_t select = kFALSE); Move current position one column left. void LineRight(Bool_t select = kFALSE); Move current position one column right. void LineUp(Bool_t select = kFALSE); Make current position first line in window by scrolling up. void LineDown(Bool_t select = kFALSE); Move one line down. void PageUp(Bool_t select = kFALSE); Move position one page up. void PageDown(Bool_t select = kFALSE); Move position one page down. void Home(Bool_t select = kFALSE); Move to upper-left corner of container. void End(Bool_t select = kFALSE); Move to the bottom-right corner of container. const TGGC & GetLineGC(); Get graphics context for line drawing. void SavePrimitive(ostream& out, Option_t* option = """"); Save a canvas container as a C++ statement(s) on output stream out. TGContainer(const TGContainer& ). TGContainer& operator=(const TGContainer& ). void Associate(const TGWindow* w); { fMsgWindow = w; }. TGCanvas * GetCanvas() const; { return fCanvas; }. const TGWindow * GetMessageWindow() const; { return fMsgWindow; }. Int_t NumSelected() const; { return fSelected; }. Int_t NumItems() const; { return fTotal; }. TGFrame * GetLastActive() const; { return fLastActiveEl ? fLastActiveEl->fFrame : 0; }. Bool_t HandleDNDFinished(); { fBdown = kFALSE; return kTRUE; }. » Author: Fons Rademakers 11/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGContainer.html:28558,down,down,28558,root/html528/TGContainer.html,https://root.cern,https://root.cern/root/html528/TGContainer.html,6,['down'],['down']
Availability,"ment Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGScrollBarElement Class Reference. . Definition at line 29 of file TGScrollBar.h. Public Member Functions;  TGScrollBarElement (const TGWindow *p=nullptr, const TGPicture *pic=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kRaisedFrame|kDoubleBorder, Pixel_t back=GetDefaultFrameBackground());  Constructor. ;  ;  ~TGScrollBarElement () override;  destructor ;  ; void DrawBorder () override;  Draw border around scollbar element. ;  ; Bool_t HandleCrossing (Event_t *event) override;  Handle mouse crossing event. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsEnabled () const;  ; virtual void SetEnabled (Bool_t on=kTRUE);  Enable/Disable scroll bar button chaging the state. ;  ; virtual void SetState (Int_t state);  Change state of scrollbar element (either up or down). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_t);  ; void AddInput (UInt_t emask);  Add events specified in the emask to the events the frame should handle. ;  ; virtual void ChangeBackground (Pixel_t back);  Change frame background color. ;  ; virtual void ChangeOptions (UInt_t options);  Change frame options. Options is an OR of the EFrameTypes. ;  ; Bool_t Contains (Int_t x, Int_t y) const;  ; void Delete (Op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGScrollBarElement.html:1065,down,down,1065,doc/master/classTGScrollBarElement.html,https://root.cern,https://root.cern/doc/master/classTGScrollBarElement.html,1,['down'],['down']
Availability,"ment is a string option defining some general configuration for the TMVA session. For example all TMVA output can be suppressed by removing the ""!"" (not) in front of the ""Silent"" argument in the option string; ; import ROOT; import os; ; TMVA = ROOT.TMVA; TFile = ROOT.TFile; ; TMVA.Tools.Instance(); ; # options to control used methods; useLikelihood = True # likelihood based discriminant; useLikelihoodKDE = False # likelihood based discriminant; useFischer = True # Fischer discriminant; useMLP = False # Multi Layer Perceptron (old TMVA NN implementation); useBDT = True # Boosted Decision Tree; useDL = True # TMVA Deep learning ( CPU or GPU); useKeras = True # Use Keras Deep Learning via PyMVA; ; if ROOT.gSystem.GetFromPipe(""root-config --has-tmva-pymva"") == ""yes"":; TMVA.PyMethodBase.PyInitialize(); else:; useKeras = False # cannot use Keras if PYMVA is not available; ; if useKeras:; try:; import tensorflow; except:; ROOT.Warning(""TMVA_Higgs_Classification"", ""Skip using Keras since tensorflow is not available""); useKeras = False; ; outputFile = TFile.Open(""Higgs_ClassificationOutput.root"", ""RECREATE""); factory = TMVA.Factory(; ""TMVA_Higgs_Classification"", outputFile, V=False, ROC=True, Silent=False, Color=True, AnalysisType=""Classification""; ); ; ; ## Setup Dataset(s); ; # Define now input data file and signal and background trees; ; inputFileName = ""Higgs_data.root""; inputFileLink = ""http://root.cern.ch/files/"" + inputFileName; ; ; if ROOT.gSystem.AccessPathName(inputFileName):; ROOT.Info(""TMVA_Higgs_Classification"", ""Download Higgs_data.root file""); TFile.SetCacheFileDir("".""); inputFile = TFile.Open(inputFileLink, ""CACHEREAD""); if inputFile is None:; raise FileNotFoundError(""Input file cannot be downloaded - exit""); else:; # file exists; inputFile = TFile.Open(inputFileName); ; ; # --- Register the training and test trees; signalTree = inputFile.Get(""sig_tree""); backgroundTree = inputFile.Get(""bkg_tree""); signalTree.Print(); ; ## Declare DataLoader(s); ; # The next ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:58067,avail,available,58067,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['avail'],['available']
Availability,"ment wise subtraction; C=r-A C=A-r A-=r; overwrites \(A\). matrix multiplication; C=r*A C=A*r A*=r; overwrites \(A\). 14.4.3 Comparisons and Boolean Operations; The following table shows element wise comparisons between two matrices:. Format; Output; Description. A == B; Bool_t; equal to. A != B; A > B; A >= B; A < B; A <= B; matrix; matrix; matrix; matrix; matrix; Not equal; Greater than; Greater than or equal to; Smaller than; Smaller than or equal to. AreCompatible(A,B); Compare(A,B); VerifyMatrixIdentity(A,B,verb, maxDev); Bool_t; Bool_t; Compare matrix properties; return summary of comparison; Check matrix identity within maxDev tolerance. The following table shows element wise comparisons between matrix and real:. Format; Output; Description. A == r; A != r; A > r; A >= r; A < r; A <= r; Bool_t; Bool_t; Bool_t Bool_t; Bool_t Bool_t; equal to; Not equal; Greater than; Greater than or equal to; Smaller than; Smaller than or equal to. VerifyMatrixValue(A,r,verb, maxDev); Bool_t; Compare matrix value with r within maxDev tolerance. 14.4.4 Matrix Norms. Format; Output; Description. A.RowNorm(); A.NormInf(); A.ColNorm(); A.Norm1(); A.E2Norm(); A.NonZeros(); A.Sum(); A.Min(); A.Max(); Double_t; Double_t; Double_t; Double_t; Double_t; Int_t; Double_t; Double_t; Double_t; norm induced by the infinity vector norm, maxi\(\sum_{i}|A_{ij}|\); maxi\(\sum_{i}|A_{ij}|\); norm induced by the 1 vector norm, maxj\(\sum_{i}|A_{ij}|\); maxj\(\sum_{i}|A_{ij}|\); Square of the Euclidean norm,; \(\sum_{ji}(A_{ij}^{2})\); number of elements unequal zero; \(\sum_{ji}(A_{ij})\); minij \((A_{ij})\); maxij \((A_{ij})\). A.NormByColumn (v,""D""); A.NormByRow (v,""D""); TMatrixD; TMatrixD; \(A_{ij}/= \nu_i\), divide each matrix column by vector v. If the second argument is “M”, the column is multiplied.; \(A_{ij}/= \nu_j\), divide each matrix row by vector v. If the second argument is “M”, the row is multiplied. 14.4.5 Miscellaneous Operators. Format; Output; Description. A.Zero(); TMatrixX; \(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:781378,toler,tolerance,781378,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['toler'],['tolerance']
Availability,ment*TGFrame::fFEpointer to frame element; TGButtonGroup*fGroupbutton group this button belongs to; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; const TGWindow*TGWidget::fMsgWindowwindow which handles widget events; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; GContext_tfNormGCgraphics context used for drawing button; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; EButtonStatefStatebutton state; Bool_tfStayDowntrue if button has to stay down; UInt_tfTHeightbutton height; UInt_tfTWidthbutton width; TGToolTip*fTiptool tip associated with button; void*fUserDatapointer to user data structure; Int_tTGWidget::fWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tTGWidget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tT,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGButton.html:20113,down,down,20113,root/html528/TGButton.html,https://root.cern,https://root.cern/root/html528/TGButton.html,1,['down'],['down']
Availability,"ment: Returns ARG_NONE.Definition OptionParser.h:907; ROOT::option::DescriptorDescribes an option, its help text (usage) and how it should be parsed.Definition OptionParser.h:327; A CheckArg function has the following signature: ArgStatus CheckArg(const Option& option, bool msg); ; ROOT::option::OptionA parsed option from the command line together with its argument if it has one.Definition OptionParser.h:454; ROOT::option::ArgStatusArgStatusPossible results when checking if an argument is valid for a certain option.Definition OptionParser.h:263; ROOT::option::CheckArgArgStatus(* CheckArg)(const Option &option, bool msg)Signature of functions that check if an argument is valid for a certain type of option.Definition OptionParser.h:302; It is used to check if a potential argument would be acceptable for the option. It will even be called if there is no argument. In that case option.arg will be NULL.; If msg is true and the function determines that an argument is not acceptable and that this is a fatal error, it should output a message to the user before returning ARG_ILLEGAL. If msg is false the function should remain silent (or you will get duplicate messages).; See ArgStatus for the meaning of the return values.; While you can provide your own functions, often the following pre-defined checks (which never return ARG_ILLEGAL) will suffice:. Arg::None For options that don't take an argument: Returns ARG_NONE. ; Arg::Optional Returns ARG_OK if the argument is attached and ARG_IGNORE otherwise. . Definition at line 302 of file OptionParser.h. Enumeration Type Documentation. ◆ ArgStatus. enum ROOT::option::ArgStatus. Possible results when checking if an argument is valid for a certain option. ; In the case that no argument is provided for an option that takes an optional argument, return codes ARG_OK and ARG_IGNORE are equivalent. . EnumeratorARG_NONE The option does not take an argument. . ARG_OK The argument is acceptable for the option. . ARG_IGNORE The argument is no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1option.html:3795,error,error,3795,doc/master/namespaceROOT_1_1option.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1option.html,2,['error'],['error']
Availability,"mentation. ◆ ErrorHandlerFunc_t. typedef void(* ErrorHandlerFunc_t) (int level, Bool_t abort, const char *location, const char *msg). Definition at line 71 of file TError.h. Function Documentation. ◆ AbstractMethod(). void AbstractMethod ; (; const char * ; method). This function can be used in abstract base classes in case one does not want to make the class a ""real"" (in C++ sense) ABC. ; If this function is called it will warn the user that the function should have been overridden. ; Definition at line 159 of file TError.cxx. ◆ Break(). void Break ; (; const char * ; location, . const char * ; msgfmt, .  ; ... . ). Use this function in case an error occurred. ; Definition at line 207 of file TError.cxx. ◆ DefaultErrorHandler(). void DefaultErrorHandler ; (; Int_t ; level, . Bool_t ; abort_bool, . const char * ; location, . const char * ; msg . ). The default error handler function. ; It prints the message on stderr and if abort is set it aborts the application. Replaces the minimal error handler of TError.h as part of the gROOT construction. TError's minimal handler is put back in place during the gROOT destruction. Noteabort() is only called if abort_bool is true and level < gErrorIgnoreLevel ; Definition at line 102 of file TErrorDefaultHandler.cxx. ◆ Error(). void Error ; (; const char * ; location, . const char * ; msgfmt, .  ; ... . ). Use this function in case an error occurred. ; Definition at line 185 of file TError.cxx. ◆ ErrorHandler(). void ErrorHandler ; (; int ; level, . const char * ; location, . const char * ; fmt, . std::va_list ; va . ). General error handler function. It calls the user set error handler. ; Definition at line 109 of file TError.cxx. ◆ Fatal(). void Fatal ; (; const char * ; location, . const char * ; fmt, .  ; ... . ). Use this function in case of a fatal error. It will abort the program. ; WarningFatal() will not abort the program if gErrorIgnoreLevel > kFatal; but for all reasonable settings it will abort. . Definition at line 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TError_8h.html:5942,error,error,5942,doc/master/TError_8h.html,https://root.cern,https://root.cern/doc/master/TError_8h.html,1,['error'],['error']
Availability,"mentation. ◆ MethodPDEFoam() [1/2]. TMVA::MethodPDEFoam::MethodPDEFoam ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; dsi, . const TString & ; theOption = ""PDEFoam"" . ). init PDEFoam objects ; Definition at line 85 of file MethodPDEFoam.cxx. ◆ MethodPDEFoam() [2/2]. TMVA::MethodPDEFoam::MethodPDEFoam ; (; DataSetInfo & ; dsi, . const TString & ; theWeightFile . ). constructor from weight file ; Definition at line 123 of file MethodPDEFoam.cxx. ◆ ~MethodPDEFoam(). TMVA::MethodPDEFoam::~MethodPDEFoam ; (; void ; ). virtual . destructor ; Definition at line 310 of file MethodPDEFoam.cxx. Member Function Documentation. ◆ AddWeightsXMLTo(). void TMVA::MethodPDEFoam::AddWeightsXMLTo ; (; void * ; parent); const. virtual . create XML output of PDEFoam method variables ; Implements TMVA::MethodBase.; Definition at line 1152 of file MethodPDEFoam.cxx. ◆ CalculateMVAError(). Double_t TMVA::MethodPDEFoam::CalculateMVAError ; (; ). protected . Calculate the error on the Mva value. ; If fSigBgSeparated == true the error is calculated from the number of events in the signal and background PDEFoam cells.; If fSigBgSeparated == false, the error is taken directly from the PDEFoam cell. ; Definition at line 755 of file MethodPDEFoam.cxx. ◆ CalcXminXmax(). void TMVA::MethodPDEFoam::CalcXminXmax ; (; ). protected . Determine foam range [fXmin, fXmax] for all dimensions, such that a fraction of 'fFrac' events lie outside the foam. ; Definition at line 322 of file MethodPDEFoam.cxx. ◆ Class(). static TClass * TMVA::MethodPDEFoam::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::MethodPDEFoam::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::MethodPDEFoam::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 212 of file MethodPDEFoam.h. ◆ CreatePDEFoamKernel(). TMVA::PDEFoamKernelBase * TMVA::MethodP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPDEFoam.html:34476,error,error,34476,doc/master/classTMVA_1_1MethodPDEFoam.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPDEFoam.html,1,['error'],['error']
Availability,"mentation. ◆ PDEFoamTarget() [1/3]. TMVA::PDEFoamTarget::PDEFoamTarget ; (; const PDEFoamTarget & ; from). protected . Copy Constructor NOT IMPLEMENTED (NEVER USED) ; Definition at line 81 of file PDEFoamTarget.cxx. ◆ PDEFoamTarget() [2/3]. TMVA::PDEFoamTarget::PDEFoamTarget ; (; ). Default constructor for streamer, user should not use it. ; Definition at line 57 of file PDEFoamTarget.cxx. ◆ PDEFoamTarget() [3/3]. TMVA::PDEFoamTarget::PDEFoamTarget ; (; const TString & ; name, . UInt_t ; target . ). User constructor. ; Parameters:. name - name of PDEFoam object; target - target number to range-search for . Definition at line 72 of file PDEFoamTarget.cxx. ◆ ~PDEFoamTarget(). virtual TMVA::PDEFoamTarget::~PDEFoamTarget ; (; ). inlinevirtual . Definition at line 59 of file PDEFoamTarget.h. Member Function Documentation. ◆ CellValueIsUndefined(). Bool_t TMVA::PDEFoamTarget::CellValueIsUndefined ; (; PDEFoamCell * ; cell). protectedvirtual . Returns true, if the target error equals -1, as set in Finalize() in case of no events in the cell. ; Reimplemented from TMVA::PDEFoam.; Definition at line 136 of file PDEFoamTarget.cxx. ◆ Class(). static TClass * TMVA::PDEFoamTarget::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::PDEFoamTarget::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::PDEFoamTarget::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 71 of file PDEFoamTarget.h. ◆ DeclFileName(). static const char * TMVA::PDEFoamTarget::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 71 of file PDEFoamTarget.h. ◆ FillFoamCells(). void TMVA::PDEFoamTarget::FillFoamCells ; (; const Event * ; ev, . Float_t ; wt . ). virtual . This function fills an event into the discriminant PDEFoam. ; The weight 'wt' is filled into cell element 0 if the event is of class '",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamTarget.html:20358,error,error,20358,doc/master/classTMVA_1_1PDEFoamTarget.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamTarget.html,1,['error'],['error']
Availability,"mentation; MethodPDERS(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructor for the PDERS method. MethodPDERS(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); construct MethodPDERS through from file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); PDERS can handle classification with 2 classes and regression with one or more regression-targets. void Init( void ); default initialisation routine called by all constructors. ~MethodPDERS( void ); destructor. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; VolumeRangeMode <string> Method to determine volume range; available values are: MinMax; Unscaled; RMS; kNN; Adaptive <default>. KernelEstimator <string> Kernel estimation function; available values are: Box <default>; Sphere; Teepee; Gauss; Sinc3; Sinc5; Sinc7; Sinc9; Sinc11; Lanczos2; Lanczos3; Lanczos5; Lanczos8; Trim. DeltaFrac <float> Ratio of #EventsMin/#EventsMax for MinMax and RMS volume range; NEventsMin <int> Minimum number of events for adaptive volume range; NEventsMax <int> Maximum number of events for adaptive volume range; MaxVIterations <int> Maximum number of iterations for adaptive volume range; InitialScale <float> Initial scale for adaptive volume range; GaussSigma <float> Width with respect to the volume size of Gaussian kernel estimator. void ProcessOptions(); process the options specified by the user. void Train( void ); this is a dummy training: the preparation work to do is the construction; of the binary tree as a pointer chain. It is easier to directly save the; trainingTree in the weight file, and to rebuild the binary tree in the; test phase from scratch. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); init the size of a volume element using a defined fraction o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodPDERS.html:23155,avail,available,23155,root/html602/TMVA__MethodPDERS.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodPDERS.html,2,['avail'],['available']
Availability,"mentation; RooHist(); Default constructor. RooHist(Double_t nominalBinWidth, Double_t nSigma = 1, Double_t xErrorFrac = 1.0, Double_t scaleFactor = 1.0); Create an empty histogram that can be filled with the addBin(); and addAsymmetryBin() methods. Use the optional parameter to; specify the confidence level in units of sigma to use for; calculating error bars. The nominal bin width specifies the; default used by addBin(), and is used to set the relative; normalization of bins with different widths. RooHist(const TH1& data, Double_t nominalBinWidth = 0, Double_t nSigma = 1, RooAbsData::ErrorType = RooAbsData::Poisson, Double_t xErrorFrac = 1.0, Bool_t correctForBinWidth = kTRUE, Double_t scaleFactor = 1.); Create a histogram from the contents of the specified TH1 object; which may have fixed or variable bin widths. Error bars are; calculated using Poisson statistics. Prints a warning and rounds; any bins with non-integer contents. Use the optional parameter to; specify the confidence level in units of sigma to use for; calculating error bars. The nominal bin width specifies the; default used by addBin(), and is used to set the relative; normalization of bins with different widths. If not set, the; nominal bin width is calculated as range/nbins. RooHist(const TH1& data1, const TH1& data2, Double_t nominalBinWidth = 0, Double_t nSigma = 1, RooAbsData::ErrorType = RooAbsData::Poisson, Double_t xErrorFrac = 1.0, Bool_t efficiency = kFALSE, Double_t scaleFactor = 1.0); Create a histogram from the asymmetry between the specified TH1 objects; which may have fixed or variable bin widths, but which must both have; the same binning. The asymmetry is calculated as (1-2)/(1+2). Error bars are; calculated using Binomial statistics. Prints a warning and rounds; any bins with non-integer contents. Use the optional parameter to; specify the confidence level in units of sigma to use for; calculating error bars. The nominal bin width specifies the; default used by addAsymmetryBin(), a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooHist.html:20179,error,error,20179,root/html526/RooHist.html,https://root.cern,https://root.cern/root/html526/RooHist.html,5,['error'],['error']
Availability,"mented from TGraph.; Definition at line 752 of file TGraphErrors.cxx. ◆ SetPointError() [1/2]. void TGraphErrors::SetPointError ; (; Double_t ; ex, . Double_t ; ey . ). virtual . Set ex and ey values for point pointed by the mouse. ; Definition at line 769 of file TGraphErrors.cxx. ◆ SetPointError() [2/2]. void TGraphErrors::SetPointError ; (; Int_t ; i, . Double_t ; ex, . Double_t ; ey . ). virtual . Set ex and ey values for point number i. ; Definition at line 802 of file TGraphErrors.cxx. ◆ Streamer(). void TGraphErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraphErrors. ; Reimplemented from TGraph.; Reimplemented in TGraphPolar.; Definition at line 817 of file TGraphErrors.cxx. ◆ StreamerNVirtual(). void TGraphErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 78 of file TGraphErrors.h. ◆ SwapPoints(). void TGraphErrors::SwapPoints ; (; Int_t ; pos1, . Int_t ; pos2 . ). overrideprotectedvirtual . Swap points. ; Reimplemented from TGraph.; Definition at line 856 of file TGraphErrors.cxx. ◆ UpdateArrays(). void TGraphErrors::UpdateArrays ; (; const std::vector< Int_t > & ; sorting_indices, . Int_t ; numSortedPoints, . Int_t ; low . ). overrideprotectedvirtual . Update the fX, fY, fEX, and fEY arrays with the sorted values. ; Reimplemented from TGraph.; Definition at line 866 of file TGraphErrors.cxx. Member Data Documentation. ◆ fEX. Double_t* TGraphErrors::fEX {nullptr}. protected . [fNpoints] array of X errors ; Definition at line 29 of file TGraphErrors.h. ◆ fEY. Double_t* TGraphErrors::fEY {nullptr}. protected . [fNpoints] array of Y errors ; Definition at line 30 of file TGraphErrors.h. Libraries for TGraphErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraphErrors.h; hist/hist/src/TGraphErrors.cxx. TGraphErrors. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphErrors.html:46415,error,errors,46415,doc/master/classTGraphErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html,2,['error'],['errors']
Availability,"mented from TH2Poly.; Definition at line 144 of file TH2Poly.h. ◆ GetBinEffectiveEntries(). Double_t TProfile2Poly::GetBinEffectiveEntries ; (; Int_t ; bin); const. Get bin effective entries. ; Definition at line 351 of file TProfile2Poly.cxx. ◆ GetBinEntries(). Double_t TProfile2Poly::GetBinEntries ; (; Int_t ; bin); const. Get bin entries. ; Definition at line 361 of file TProfile2Poly.cxx. ◆ GetBinEntriesVW(). Double_t TProfile2Poly::GetBinEntriesVW ; (; Int_t ; bin); const. Get bin entries VW. ; Definition at line 381 of file TProfile2Poly.cxx. ◆ GetBinEntriesW2(). Double_t TProfile2Poly::GetBinEntriesW2 ; (; Int_t ; bin); const. Get bin entries W2. ; Definition at line 371 of file TProfile2Poly.cxx. ◆ GetBinEntriesWV2(). Double_t TProfile2Poly::GetBinEntriesWV2 ; (; Int_t ; bin); const. Get bin entries WV2. ; Definition at line 391 of file TProfile2Poly.cxx. ◆ GetBinError() [1/4]. Double_t TH2Poly::GetBinError ; (; Int_t ; bin); const. overridevirtual . Returns the value of error associated to bin number bin. ; If the sum of squares of weights has been defined (via Sumw2), this function returns the sqrt(sum of w2). otherwise it returns the sqrt(contents) for this bin. Bins are in range [1:nbins] and for bin < 0 in range [-9:-1] it returns errors for overflow bins. See also TH2Poly::GetBinContent ; Reimplemented from TH2Poly.; Definition at line 104 of file TH2Poly.cxx. ◆ GetBinError() [2/4]. Double_t TProfile2Poly::GetBinError ; (; Int_t ; bin); const. overridevirtual . Get bin error. ; Reimplemented from TH2Poly.; Definition at line 401 of file TProfile2Poly.cxx. ◆ GetBinError() [3/4]. Double_t TH2Poly::GetBinError ; (; Int_t ; , . Int_t ;  . ); const. inlineoverridevirtual . NOT IMPLEMENTED for TH2Poly. ; Reimplemented from TH2Poly.; Definition at line 146 of file TH2Poly.h. ◆ GetBinError() [4/4]. Double_t TH2Poly::GetBinError ; (; Int_t ; , . Int_t ; , . Int_t ;  . ); const. inlineoverridevirtual . NOT IMPLEMENTED for TH2Poly. ; Reimplemented from TH2Poly.; D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2Poly.html:67554,error,error,67554,doc/master/classTProfile2Poly.html,https://root.cern,https://root.cern/doc/master/classTProfile2Poly.html,1,['error'],['error']
Availability,"ments for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProdPdf.html:74155,error,error,74155,doc/master/classRooProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooProdPdf.html,1,['error'],['error']
Availability,"ments to the current results use the data test statistics of the added object if none is already present (otherwise, ignore the new one) ; Definition at line 226 of file HybridResult.cxx. ◆ AlternatePValue(). double HybridResult::AlternatePValue ; (; ); const. overridevirtual . Returns \(CL_{s+b}\) : the S+B p-value. ; Reimplemented from RooStats::HypoTestResult.; Definition at line 147 of file HybridResult.cxx. ◆ Class(). static TClass * RooStats::HybridResult::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooStats::HybridResult::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooStats::HybridResult::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 88 of file HybridResult.h. ◆ CLbError(). double HybridResult::CLbError ; (; ); const. The error on the ""confidence level"" of the null hypothesis. ; Returns an estimate of the error on \(CL_{b}\) assuming a binomial error on \(CL_{b}\):. \[; \sigma_{CL_{b}} = \sqrt{CL_{b} \left( 1 - CL_{b} \right) / n_{toys}}; \]. Definition at line 181 of file HybridResult.cxx. ◆ CLsError(). double HybridResult::CLsError ; (; ); const. The error on the ratio \(CL_{s+b}/CL_{b}\). ; Returns an estimate of the error on \(CL_{s}\) through combination of the errors on \(CL_{b}\) and \(CL_{s+b}\):. \[; \sigma_{CL_s} = CL_s \sqrt{\left( \frac{\sigma_{CL_{s+b}}}{CL_{s+b}} \right)^2 + \left( \frac{\sigma_{CL_{b}}}{CL_{b}} \right)^2}; \]. Definition at line 207 of file HybridResult.cxx. ◆ CLsplusbError(). double HybridResult::CLsplusbError ; (; ); const. The error on the ""confidence level"" of the alternative hypothesis. ; Returns an estimate of the error on \(CL_{s+b}\) assuming a binomial error on \(CL_{s+b}\):. \[; \sigma_{CL_{s+b}} = \sqrt{CL_{s+b} \left( 1 - CL_{s+b} \right) / n_{toys}}; \]. Definition at line 194 of file HybridResult.cxx. ◆ DeclFileName(). static const char * RooStats::HybridRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HybridResult.html:19675,error,error,19675,doc/master/classRooStats_1_1HybridResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HybridResult.html,2,['error'],['error']
Availability,"ments with smallest distances will have covariance matrix with determinant; less or equal to the determinant of the input subset covariance matrix. determinant for this htotal-subset with smallest distances is returned. Int_t Exact(Double_t* ndist); for the exact fit situaions; returns number of observations on the hyperplane. Int_t Exact2(TMatrixD& mstockbig, TMatrixD& cstockbig, TMatrixD& hyperplane, Double_t* deti, Int_t nbest, Int_t kgroup, TMatrixD& sscp, Double_t* ndist); This function is called if determinant of the covariance matrix of a subset=0. If there are more then fH vectors on a hyperplane,; returns this hyperplane and stops; else stores the hyperplane coordinates in hyperplane matrix. Int_t Partition(Int_t nmini, Int_t* indsubdat); divides the elements into approximately equal subgroups; number of elements in each subgroup is stored in indsubdat; number of subgroups is returned. Int_t RDist(TMatrixD& sscp); Calculates robust distances.Then the samples with robust distances; greater than a cutoff value (0.975 quantile of chi2 distribution with; fNvar degrees of freedom, multiplied by a correction factor), are given; weiht=0, and new, reweighted estimates of location and scatter are calculated; The function returns the number of outliers. void RDraw(Int_t* subdat, Int_t ngroup, Int_t* indsubdat); Draws ngroup nonoverlapping subdatasets out of a dataset of size n; such that the selected case numbers are uniformly distributed from 1 to n. Double_t KOrdStat(Int_t ntotal, Double_t* arr, Int_t k, Int_t* work); because I need an Int_t work array. TRobustEstimator(). virtual ~TRobustEstimator(); {;}. void GetCovariance(TMatrixDSym& matr). void GetCorrelation(TMatrixDSym& matr). Int_t GetNHyp(); {return fExact;}. void GetMean(TVectorD& means). void GetRDistances(TVectorD& rdist). Int_t GetNumberObservations() const; {return fN;}. Int_t GetNvar() const; {return fNvar;}. const TArrayI* GetOuliers() const; {return &fOut;}. » Last changed: root/physics:$Id$ » Last ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRobustEstimator.html:16737,robust,robust,16737,root/html534/TRobustEstimator.html,https://root.cern,https://root.cern/root/html534/TRobustEstimator.html,3,['robust'],['robust']
Availability,"ments with smallest distances will have covariance matrix with determinant; less or equal to the determinant of the input subset covariance matrix. determinant for this htotal-subset with smallest distances is returned. Int_t Exact(Double_t* ndist); for the exact fit situaions; returns number of observations on the hyperplane. Int_t Exact2(TMatrixD& mstockbig, TMatrixD& cstockbig, TMatrixD& hyperplane, Double_t* deti, Int_t nbest, Int_t kgroup, TMatrixD& sscp, Double_t* ndist); This function is called if determinant of the covariance matrix of a subset=0. If there are more then fH vectors on a hyperplane,; returns this hyperplane and stops; else stores the hyperplane coordinates in hyperplane matrix. Int_t Partition(Int_t nmini, Int_t* indsubdat); divides the elements into approximately equal subgroups; number of elements in each subgroup is stored in indsubdat; number of subgroups is returned. Int_t RDist(TMatrixD& sscp); Calculates robust distances.Then the samples with robust distances; greater than a cutoff value (0.975 quantile of chi2 distribution with; fNvar degrees of freedom, multiplied by a correction factor), are given; weiht=0, and new, reweighted estimates of location and scatter are calculated; The function returns the number of outliers. void RDraw(Int_t* subdat, Int_t ngroup, Int_t* indsubdat); Draws ngroup nonoverlapping subdatasets out of a dataset of size n; such that the selected case numbers are uniformly distributed from 1 to n. Double_t KOrdStat(Int_t ntotal, Double_t* arr, Int_t k, Int_t* work); because I need an Int_t work array. TRobustEstimator(). virtual ~TRobustEstimator(); {;}. void GetCovariance(TMatrixDSym& matr). void GetCorrelation(TMatrixDSym& matr). Int_t GetNHyp(); {return fExact;}. void GetMean(TVectorD& means). void GetRDistances(TVectorD& rdist). Int_t GetNumberObservations() const; {return fN;}. Int_t GetNvar() const; {return fNvar;}. const TArrayI* GetOuliers() const; {return &fOut;}. » Last changed: root/physics:$Id: TRobust",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRobustEstimator.html:16649,robust,robust,16649,root/html528/TRobustEstimator.html,https://root.cern,https://root.cern/root/html528/TRobustEstimator.html,3,['robust'],['robust']
Availability,"ments, void *arena, ENewType defConstructor) const; 5311{; 5312 ObjectPtr p;; 5313 ; 5314 if (fNewArray) {; 5315 // We have the new operator wrapper function,; 5316 // so there is a dictionary and it was generated; 5317 // by rootcint, so there should be a default; 5318 // constructor we can call through the wrapper.; 5319 {; 5320 TClass__GetCallingNewRAII callingNew(defConstructor);; 5321 p = fNewArray(nElements, arena);; 5322 }; 5323 if (!p) {; 5324 Error(""NewArray with placement"", ""cannot create object of class %s version %d at address %p"", GetName(), fClassVersion, arena);; 5325 }; 5326 } else if (HasInterpreterInfo()) {; 5327 // We have the dictionary but do not have the constructor wrapper,; 5328 // so the dictionary was not generated by rootcint (it was made either; 5329 // by cint or by some external mechanism). Let's try to create the; 5330 // object by having the interpreter call the new operator, either the; 5331 // class library is loaded and there is a default constructor we can; 5332 // call, or the class is interpreted and we will call the default; 5333 // constructor that way, or no default constructor is available and; 5334 // we fail.; 5335 {; 5336 TClass__GetCallingNewRAII callingNew(defConstructor);; 5337 p = gCling->ClassInfo_New(GetClassInfo(),nElements, arena);; 5338 }; 5339 if (!p) {; 5340 Error(""NewArray with placement"", ""cannot create object of class %s version %d at address %p"", GetName(), fClassVersion, arena);; 5341 }; 5342 } else if (!HasInterpreterInfo() && fCollectionProxy) {; 5343 // There is no dictionary at all, so this is an emulated; 5344 // class; however we do have the services of a collection proxy,; 5345 // so this is an emulated STL class.; 5346 {; 5347 TClass__GetCallingNewRAII callingNew(defConstructor);; 5348 p = fCollectionProxy->NewObjectArray(nElements, arena);; 5349 }; 5350 } else if (!HasInterpreterInfo() && !fCollectionProxy) {; 5351 // There is no dictionary at all and we do not have; 5352 // the services of a colle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:203922,avail,available,203922,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['avail'],['available']
Availability,"ments, void *arena, ENewType defConstructor) const; 5378{; 5379 ObjectPtr p;; 5380 ; 5381 if (fNewArray) {; 5382 // We have the new operator wrapper function,; 5383 // so there is a dictionary and it was generated; 5384 // by rootcint, so there should be a default; 5385 // constructor we can call through the wrapper.; 5386 {; 5387 TClass__GetCallingNewRAII callingNew(defConstructor);; 5388 p = fNewArray(nElements, arena);; 5389 }; 5390 if (!p) {; 5391 Error(""NewArray with placement"", ""cannot create object of class %s version %d at address %p"", GetName(), fClassVersion, arena);; 5392 }; 5393 } else if (HasInterpreterInfo()) {; 5394 // We have the dictionary but do not have the constructor wrapper,; 5395 // so the dictionary was not generated by rootcint (it was made either; 5396 // by cint or by some external mechanism). Let's try to create the; 5397 // object by having the interpreter call the new operator, either the; 5398 // class library is loaded and there is a default constructor we can; 5399 // call, or the class is interpreted and we will call the default; 5400 // constructor that way, or no default constructor is available and; 5401 // we fail.; 5402 {; 5403 TClass__GetCallingNewRAII callingNew(defConstructor);; 5404 p = gCling->ClassInfo_New(GetClassInfo(),nElements, arena);; 5405 }; 5406 if (!p) {; 5407 Error(""NewArray with placement"", ""cannot create object of class %s version %d at address %p"", GetName(), fClassVersion, arena);; 5408 }; 5409 } else if (!HasInterpreterInfo() && fCollectionProxy) {; 5410 // There is no dictionary at all, so this is an emulated; 5411 // class; however we do have the services of a collection proxy,; 5412 // so this is an emulated STL class.; 5413 {; 5414 TClass__GetCallingNewRAII callingNew(defConstructor);; 5415 p = fCollectionProxy->NewObjectArray(nElements, arena);; 5416 }; 5417 } else if (!HasInterpreterInfo() && !fCollectionProxy) {; 5418 // There is no dictionary at all and we do not have; 5419 // the services of a colle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:206673,avail,available,206673,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['avail'],['available']
Availability,"ments->At(0)->GetName(), ""fData"");; 782 if (!isOldRVec && TClassEdit::IsSTLCont(fClass->GetName())) {; 783 // We have a collection that is indeed an STL collection,; 784 // we know we don't need its streamerInfo.; 785 SetBit(kCanDelete);; 786 return;; 787 }; 788 }; 789 bool isStdPair = TClassEdit::IsStdPair(GetName());; 790 ; 791 if (0 == strcmp(""string"",fClass->GetName())) {; 792 // We know we do not need any offset check for a string; 793 SetBit(kCanDelete);; 794 return;; 795 }; 796 ; 797 const TObjArray *array = fClass->GetStreamerInfos();; 798 TStreamerInfo* info = 0;; 799 ; 800 if (fClass->GetState() == TClass::kNoInfo && array->IsEmpty()) {; 801 // We have an emulated class that has no TStreamerInfo, this; 802 // means it was created to insert a (default) rule. Consequently; 803 // the error message about the missing dictionary was not printed.; 804 // For consistency, let's print it now!; 805 ; 806 ::Warning(""TClass::TClass"", ""no dictionary for class %s is available"", GetName());; 807 }; 808 ; 809 // Case of a custom collection (the user provided a CollectionProxy; 810 // for a class that is not an STL collection).; 811 if (GetElements()->GetEntriesFast() == 1) {; 812 TObject *element = GetElements()->UncheckedAt(0);; 813 Bool_t isstl = element && strcmp(""This"",element->GetName())==0;; 814 if (isstl && !fClass->GetCollectionProxy()) {; 815 if (element->GetTitle()[0] == '<') {; 816 // We know the content.; 817 TString content = element->GetTitle();; 818 Int_t level = 1;; 819 for(Int_t c = 1; c < content.Length(); ++c) {; 820 if (content[c] == '<') ++level;; 821 else if (content[c] == '>') --level;; 822 if (level == 0) {; 823 content.Remove(c+1);; 824 break;; 825 }; 826 }; 827 content.Prepend(""vector"");; 828 TClass *clequiv = TClass::GetClass(content);; 829 TVirtualCollectionProxy *proxy = clequiv->GetCollectionProxy();; 830 if (gDebug > 1); 831 Info(""BuildCheck"",; 832 ""Update the collection proxy of the class \""%s\"" \n""; 833 ""\tto be similar to \""%s\""."",; 834 G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:29722,avail,available,29722,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['avail'],['available']
Availability,"ments. In some ways can be considered an extended and extensible implementation of TConfidenceLevel. ; Definition at line 27 of file HybridResult.h. Public Member Functions;  HybridResult (const char *name, const std::vector< double > &testStat_sb_vals, const std::vector< double > &testStat_b_vals, bool sumLargerValues=true);  Constructor for HybridResult. ;  ;  HybridResult (const char *name=nullptr);  Default constructor. ;  ;  ~HybridResult () override;  Destructor of HybridResult. ;  ; void Add (HybridResult *other);  add additional toy-MC experiments to the current results use the data test statistics of the added object if none is already present (otherwise, ignore the new one) ;  ; double AlternatePValue () const override;  Returns \(CL_{s+b}\) : the S+B p-value. ;  ; double CLbError () const;  The error on the ""confidence level"" of the null hypothesis. ;  ; double CLsError () const;  The error on the ratio \(CL_{s+b}/CL_{b}\). ;  ; double CLsplusbError () const;  The error on the ""confidence level"" of the alternative hypothesis. ;  ; HybridPlot * GetPlot (const char *name, const char *title, int n_bins);  prepare a plot showing a result and return a pointer to a HybridPlot object the needed arguments are: an object name, a title and the number of bins in the plot ;  ; std::vector< double > GetTestStat_b ();  Get test statistics values for the b model. ;  ; double GetTestStat_data ();  Get test statistics value for data. ;  ; std::vector< double > GetTestStat_sb ();  Get test statistics values for the sb model. ;  ; TClass * IsA () const override;  ; double NullPValue () const override;  Returns \(1 - CL_{b}\) : the B p-value. ;  ; void PrintMore (const char *options);  Print out some information about the results. ;  ; void SetDataTestStatistics (double testStat_data_val);  set the value of the test statistics on data ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HybridResult.html:1723,error,error,1723,doc/master/classRooStats_1_1HybridResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HybridResult.html,1,['error'],['error']
Availability,"ments; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDiscriminant(); Default constructor for streamer, user should not use it. PDEFoamDiscriminant(const TString& , UInt_t ); {}. PDEFoamDiscriminant(const TMVA::PDEFoamDiscriminant& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills an event into the discriminant PDEFoam. The; event weight 'wt' is filled into cell element 0 if the event is; of class fClass, and filled into cell element 1 otherwise. void Finalize(); Calc discriminator and its error for every cell and save it to; the cell. TH2D* Project2(Int_t , Int_t , TMVA::ECellValue , TMVA::PDEFoamKernelBase* , UInt_t ); Project foam variable idim1 and variable idim2 to histogram.; The projection algorithm is modified such that the z axis range; of the returned histogram is [0, 1], as necessary for the; interpretation as a discriminator. This is done by weighting; the cell values (in case of cell_value = kValue) by the cell; volume in all dimensions, excluding 'idim1' and 'idim2'. Parameters:. - idim1, idim2 - dimensions to project to. - cell_value - the cell value to draw. - kernel - a PDEFoam kernel (optional). If NULL is given, the; kernel is ignored and the pure cell values are; plotted. - nbin - number of bins in x and y direction of result histogram; (optional, default is 50). Returns:; a 2-dimensional histogram. virtual ~PDEFoamDiscriminant(); {}. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root/tmva $I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamDiscriminant.html:12455,error,error,12455,root/html530/TMVA__PDEFoamDiscriminant.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamDiscriminant.html,5,['error'],['error']
Availability,"ments; of an histogram.; The distance is computed in pixels units. Algorithm:; Currently, this simple model computes the distance from the mouse; to the histogram contour only. Bool_t Divide(TF1* f1, Double_t c1 = 1); Performs the operation: this = this/(c1*f1); if errors are defined (see TH1::Sumw2), errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Divide. The function return kFALSE if the divide operation failed. Bool_t Divide(const TH1* h1); Divide this histogram by h1. this = this/h1; if errors are defined (see TH1::Sumw2), errors are also recalculated.; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; if not already set.; The resulting errors are calculated assuming uncorrelated histograms.; See the other TH1::Divide that gives the possibility to optionally; compute binomial errors. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Scale. The function return kFALSE if the divide operation failed. Bool_t Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """"); Replace contents of this histogram by the division of h1 by h2. this = c1*h1/(c2*h2). if errors are defined (see TH1::Sumw2), errors are also recalculated; Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; if not already set.; The resulting errors are calculated assuming uncorrelated histograms.; However, if option =""B"" is specified, Binomial errors are computed.; In this case c1 and c2 do not make real sense and they are ignored. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; Th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:64271,error,errors,64271,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,2,['error'],['errors']
Availability,"mepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » TStatistic. class TStatistic: public TObject. TStatistic. Statistical variable, defined by its mean, RMS and related errors.; Named, streamable, storable and mergeable. Function Members (Methods); public:. virtual~TStatistic(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFill(Double_t val, Double_t w = 1.); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Double_tGetM2() const; Double_tGetMean() const; Double_tGetMeanErr() const; Long64_tGetN() const; virtual const char*GetName() const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TStatistic.html:1365,error,error,1365,root/html604/TStatistic.html,https://root.cern,https://root.cern/root/html604/TStatistic.html,2,['error'],['error']
Availability,"mer infos. ; In case the message contains streamer infos they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 898 of file TUDPSocket.cxx. ◆ Select(). Int_t TUDPSocket::Select ; (; Int_t ; interest = kRead, . Long_t ; timeout = -1 . ). virtual . Waits for this socket to change status. ; If interest=kRead, the socket will be watched to see if characters become available for reading; if interest=kWrite the socket will be watched to see if a write will not block. The argument 'timeout' specifies a maximum time to wait in millisec. Default no timeout. Returns 1 if a change of status of interest has been detected within timeout; 0 in case of timeout; < 0 if an error occured. ; Definition at line 407 of file TUDPSocket.cxx. ◆ Send() [1/4]. Int_t TUDPSocket::Send ; (; const char * ; str, . Int_t ; kind = kMESS_STRING . ). virtual . Send a character string buffer. ; Use kind to set the TMessage ""what"" field. Returns the number of bytes in the string str that were sent and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Definition at line 464 of file TUDPSocket.cxx. ◆ Send() [2/4]. Int_t TUDPSocket::Send ; (; const TMessage & ; mess). virtual . Send a TMessage object. ; Returns the number of bytes in the TMessage that were sent and -1 in case of error. In case the TMessage::What has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). support for streaming TStreamerInfo added by Rene Brun May 2008 support for streaming TProcessID added by Rene Brun June 2008 ; Definition at line 486 of file TUDPSocket.cxx. ◆ Send() [3/4]. Int_t TUDPSocket::Send ; (; Int_t ; kind). virtual . Send a single message opcode",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUDPSocket.html:29548,error,error,29548,doc/master/classTUDPSocket.html,https://root.cern,https://root.cern/doc/master/classTUDPSocket.html,1,['error'],['error']
Availability,"merMember. private . The class has a Streamer method and it is implemented by the user or an older (not StreamerInfo based) automatic streamer. ; Definition at line 253 of file TClass.h. ◆ fHasRootPcmInfo. std::atomic<Bool_t> TClass::fHasRootPcmInfo. private . C++ Property of the class (is abstract, has virtual table, etc.) ; Definition at line 259 of file TClass.h. ◆ fImplFileLine. Short_t TClass::fImplFileLine. private . Definition at line 216 of file TClass.h. ◆ fImplFileName. const char* TClass::fImplFileName. private . Definition at line 214 of file TClass.h. ◆ fInstanceCount. UInt_t TClass::fInstanceCount. private . Definition at line 217 of file TClass.h. ◆ fIsA. TVirtualIsAProxy* TClass::fIsA. private . Definition at line 229 of file TClass.h. ◆ fIsAMethod. std::atomic<TMethodCall*> TClass::fIsAMethod. mutableprivate . Definition at line 231 of file TClass.h. ◆ fIsOffsetStreamerSet. std::atomic<Bool_t> TClass::fIsOffsetStreamerSet. mutableprivate . Indicates whether the ClassInfo is supposed to be available. ; Definition at line 261 of file TClass.h. ◆ fIsSyntheticPair. Bool_t TClass::fIsSyntheticPair. private . Indicates whether this class can be split or not. Values are -1, 0, 1, 2. ; Indicates whether this class represents a pair and was not created from a dictionary nor interpreter info but has compiler compatible offset and size (and all the info is in the StreamerInfo per se) ; Definition at line 250 of file TClass.h. ◆ fLastReadInfo. std::atomic<TVirtualStreamerInfo*> TClass::fLastReadInfo. mutableprivate . cached current streamer info. ; Definition at line 279 of file TClass.h. ◆ fMerge. ROOT::MergeFunc_t TClass::fMerge. private . saved info to call a IsA member function ; Definition at line 233 of file TClass.h. ◆ fMethod. std::atomic<TListOfFunctions*> TClass::fMethod. private . Definition at line 207 of file TClass.h. ◆ fNew. ROOT::NewFunc_t TClass::fNew. private . Definition at line 235 of file TClass.h. ◆ fNewArray. ROOT::NewArrFunc_t TClass::fNe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:129016,avail,available,129016,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,2,['avail'],['available']
Availability,"merNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooLegendre; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSpHarmonic.html:47167,error,error,47167,doc/master/classRooSpHarmonic.html,https://root.cern,https://root.cern/doc/master/classRooSpHarmonic.html,1,['error'],['error']
Availability,"merge is done but a warning message is printed. bool Add(Double_t x, const RooStats::HypoTestResult& result); Add a single point result (an HypoTestResult). double GetXValue(int index) const; function to return the value of the parameter of interest for the i^th entry in the results. double GetYValue(int index) const; function to return the value of the confidence level for the i^th entry in the results. double GetYError(int index) const; function to return the estimated error on the value of the confidence level for the i^th entry in the results. double CLb(int index) const; function to return the observed CLb value for the i-th entry. double CLsplusb(int index) const; function to return the observed CLs+b value for the i-th entry. double CLs(int index) const; function to return the observed CLs value for the i-th entry. double CLbError(int index) const; function to return the error on the observed CLb value for the i-th entry. double CLsplusbError(int index) const; function to return the error on the observed CLs+b value for the i-th entry. double CLsError(int index) const; function to return the error on the observed CLs value for the i-th entry. HypoTestResult* GetResult(int index) const; get the HypoTestResult object at the given index point. int FindIndex(double xvalue) const; find the index corresponding at the poi value xvalue; If no points is found return -1; Note that a tolerance is used of 10^-12 to find the closest point. double GetGraphX(const TGraph& g, double y0, bool lowSearch = false, double xmin = 1, double xmax = 0) const; return the X value of the given graph for the target value y0; the graph is evaluated using linear interpolation by default.; if option = ""S"" a TSpline3 is used. double FindInterpolatedLimit(double target, bool lowSearch = false, double xmin = 1, double xmax = 0); interpolate to find a limit value; Use a linear or a spline interpolation depending on the interpolation option. int FindClosestPointIndex(double target); find the obj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__HypoTestInverterResult.html:11519,error,error,11519,root/html532/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html532/RooStats__HypoTestInverterResult.html,1,['error'],['error']
Availability,"merge is done but a warning message is printed. bool Add(Double_t x, const RooStats::HypoTestResult& result); Add a single point result (an HypoTestResult). double GetXValue(int index) const; function to return the value of the parameter of interest for the i^th entry in the results. double GetYValue(int index) const; function to return the value of the confidence level for the i^th entry in the results. double GetYError(int index) const; function to return the estimated error on the value of the confidence level for the i^th entry in the results. double CLb(int index) const; function to return the observed CLb value for the i-th entry. double CLsplusb(int index) const; function to return the observed CLs+b value for the i-th entry. double CLs(int index) const; function to return the observed CLs value for the i-th entry. double CLbError(int index) const; function to return the error on the observed CLb value for the i-th entry. double CLsplusbError(int index) const; function to return the error on the observed CLs+b value for the i-th entry. double CLsError(int index) const; function to return the error on the observed CLs value for the i-th entry. HypoTestResult* GetResult(int index) const; get the HypoTestResult object at the given index point. int FindIndex(double xvalue) const; find the index corresponding at the poi value xvalue; If no points is found return -1; Note that a tolerance is used of 10^-12 to find the closest point. double GetGraphX(const TGraph& g, double y0, bool lowSearch, double& xmin, double& xmax) const; return the X value of the given graph for the target value y0; the graph is evaluated using linear interpolation by default.; if option = ""S"" a TSpline3 is used. double FindInterpolatedLimit(double target, bool lowSearch = false, double xmin = 1, double xmax = 0); interpolate to find a limit value; Use a linear or a spline interpolation depending on the interpolation option. int FindClosestPointIndex(double target, int mode = 0, double xtarge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html:12311,error,error,12311,root/html534/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html,3,['error'],['error']
Availability,"merical Algorithms » Numerical Integration. ; Class for adaptive quadrature integration in multi-dimensions using rectangular regions. ; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120) The new code features many changes compared to the Fortran version.; Control parameters are:. \( minpts \): Minimum number of function evaluations requested. Must not exceed maxpts. if minpts < 1 minpts is set to \( 2^n +2n(n+1) +1 \) where n is the function dimension; \( maxpts \): Maximum number of function evaluations to be allowed. \( maxpts >= 2^n +2n(n+1) +1 \) if \( maxpts<minpts \), \( maxpts \) is set to \( 10minpts \); \( epstol \), \( epsrel \) : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the absolute error is less than the absolute tolerance; The class computes in addition to the integral of the function in the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code: 0. Normal exit. . At least minpts and at most maxpts calls to the function were performed.; maxpts is too small for the specified accuracy eps. The result and relerr contain the values obtainable for the specified value of maxpts.; size is too small for the specified number MAXPTS of function evaluations.; n<2 or n>15. Method:; An integration rule of degree seven is used together with a certain strategy of subdivision. For a more detailed description of the method see References. Notes:; 1..Multi-dimensional integration is time-consuming. For each rectangular subregion, the routine requires function evaluations. Careful programming of the integrand might result in substantial saving of time. 2..Numerical integration usually works best for smooth functions. Some anal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:1289,error,error,1289,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,4,"['error', 'toler']","['error', 'tolerance']"
Availability,"merical differentiation. ; Parameters. xpoint, were the gradient is computed ; gradused to return the computed gradient, assumed to be of at least fNpar size ; epsif the errors of parameters have been computed, the step used in numerical differentiation is eps*parameter_error. if the errors have not been computed, step=eps is used default value of eps = 0.01 Method is the same as in Derivative() function; If a parameter is fixed, the gradient on this parameter = 0 ; Definition at line 2468 of file TF1.cxx. ◆ GradientPar() [2/4]. template<class T > . void TF1::GradientPar ; (; const T * ; x, . T * ; grad, . Double_t ; eps = 0.01 . ). inline . Definition at line 970 of file TF1.h. ◆ GradientPar() [3/4]. Double_t TF1::GradientPar ; (; Int_t ; ipar, . const Double_t * ; x, . Double_t ; eps = 0.01 . ). virtual . Compute the gradient (derivative) wrt a parameter ipar. ; Parameters. iparindex of parameter for which the derivative is computed ; xpoint, where the derivative is computed ; eps- if the errors of parameters have been computed, the step used in numerical differentiation is eps*parameter_error. if the errors have not been computed, step=eps is used default value of eps = 0.01 Method is the same as in Derivative() function; If a parameter is fixed, the gradient on this parameter = 0 ; Definition at line 2445 of file TF1.cxx. ◆ GradientPar() [4/4]. template<class T > . T TF1::GradientPar ; (; Int_t ; ipar, . const T * ; x, . Double_t ; eps = 0.01 . ). inline . Definition at line 903 of file TF1.h. ◆ GradientParTempl() [1/2]. template<class T > . void TF1::GradientParTempl ; (; const T * ; x, . T * ; grad, . Double_t ; eps = 0.01 . ). inline . Definition at line 979 of file TF1.h. ◆ GradientParTempl() [2/2]. template<class T > . T TF1::GradientParTempl ; (; Int_t ; ipar, . const T * ; x, . Double_t ; eps = 0.01 . ). inline . Definition at line 912 of file TF1.h. ◆ HasSave(). Bool_t TF1::HasSave ; (; ); const. inline . Return true if function has data in fSave buffer. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:91275,error,errors,91275,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,1,['error'],['errors']
Availability,"merical value accordingly. This can be useful to implement cursors; which move from data point to data point. For the message being sent; see ProcessMessage(). Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process the up/down button messages. If fButtonToNum is false the; following message is sent: kC_COMMAND, kCM_BUTTON, widget id, param; param % 100 is the step size; param % 10000 / 100 != 0 indicates log step; param / 10000 != 0 indicates button down. TGLayoutManager * GetLayoutManager() const; Return layout manager. void ValueChanged(Long_t val); Emit ValueChanged(Long_t) signal. This signal is emitted when; fButtonToNum is false. The val has the following meaning:; val % 100 is the step size; val % 10000 / 100 != 0 indicates log step; val / 10000 != 0 indicates button down. void ValueSet(Long_t val); Emit ValueSet(Long_t) signal. This signal is emitted when the; number entry value is changed. The val has the following meaning:; val % 100 is the step size; val % 10000 / 100 != 0 indicates log step; val / 10000 != 0 indicates button down. void SavePrimitive(ostream& out, Option_t* = """"); Save a number entry widget as a C++ statement(s) on output stream out. void SetNumber(Double_t val). void SetIntNumber(Long_t val). void SetTime(Int_t hour, Int_t min, Int_t sec). void SetDate(Int_t year, Int_t month, Int_t day). void SetHexNumber(ULong_t val). void SetText(const char* text, Bool_t emit = kTRUE). Double_t GetNumber() const. Long_t GetIntNumber() const. void GetTime(Int_t& hour, Int_t& min, Int_t& sec) const. void GetDate(Int_t& year, Int_t& month, Int_t& day) const. ULong_t GetHexNumber() const. void IncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t logstep = kFALSE). void SetLimits(TGNumberFormat::ELimit limits = TGNumberFormat::kNELNoLimits, Double_t min = 0, Double_t max = 1). EStyle GetNumStyle() const; Get the numerical style. EAttribute GetNumAttr() const; Get the numerical attribute. ELimit GetNumLimits() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGNumberEntry.html:26543,down,down,26543,root/html528/TGNumberEntry.html,https://root.cern,https://root.cern/root/html528/TGNumberEntry.html,6,['down'],['down']
Availability,"message to all slaves in the specified list. Returns; the number of slaves the message was successfully sent to.; Returns -1 in case of error. Int_t Broadcast(const TMessage& mess, TProof::ESlaves list = kActive); Broadcast a message to all slaves in the specified list (either; all slaves or only the active slaves). Returns the number of slaves; the message was successfully sent to. Returns -1 in case of error. Int_t Broadcast(const char* mess, Int_t kind, TList* slaves); Broadcast a character string buffer to all slaves in the specified; list. Use kind to set the TMessage what field. Returns the number of; slaves the message was sent to. Returns -1 in case of error. Int_t Broadcast(const char* mess, Int_t kind = kMESS_STRING, TProof::ESlaves list = kActive); Broadcast a character string buffer to all slaves in the specified; list (either all slaves or only the active slaves). Use kind to; set the TMessage what field. Returns the number of slaves the message; was sent to. Returns -1 in case of error. Int_t BroadcastObject(const TObject* obj, Int_t kind, TList* slaves); Broadcast an object to all slaves in the specified list. Use kind to; set the TMEssage what field. Returns the number of slaves the message; was sent to. Returns -1 in case of error. Int_t BroadcastObject(const TObject* obj, Int_t kind = kMESS_OBJECT, TProof::ESlaves list = kActive); Broadcast an object to all slaves in the specified list. Use kind to; set the TMEssage what field. Returns the number of slaves the message; was sent to. Returns -1 in case of error. Int_t BroadcastRaw(const void* buffer, Int_t length, TList* slaves); Broadcast a raw buffer of specified length to all slaves in the; specified list. Returns the number of slaves the buffer was sent to.; Returns -1 in case of error. Int_t BroadcastRaw(const void* buffer, Int_t length, TProof::ESlaves list = kActive); Broadcast a raw buffer of specified length to all slaves in the; specified list. Returns the number of slaves the buffer was sen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:39971,error,error,39971,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,6,['error'],['error']
Availability,"meter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file. The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; from the fitted function.; If the histogram is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Access to the fit status. The status of the fit can be obtained converting the TFitResultPtr to an integer; indipendently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. The fitStatus is 0 if the fit is OK (i.e. no error occurred).; The value of the fit status code is negative in case of an error not connected with the; minimization procedure, for example when a wrong function is used.; Otherwise the return value is the one returned from the minimization procedure.; When TMinuit (default case) or Minuit2 are used as minimizer the status returned is :; fitStatus = migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult.; TMinuit will return 0 (for migrad, minos, hesse or improve) in case of success and 4 in; case of error (see the documentation of TMinuit::mnexcm). So for example, for an error; only in Minos but not in Migrad a fitStatus of 40 will be returned.; Minuit2 will return also 0 in case of success and different values in migrad, minos or; hesse depending on the error. See in this case the documentation of; Minuit2Minimizer::Minimize for the migradResult, Minuit2Minimizer::GetMinosError for the; minosResult and Minuit2Minimizer::Hesse for the hesseResult.; If other minimizers are used see their specific documentation for the status code; returned. For example in the ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraph.html:30229,error,error,30229,root/html534/TGraph.html,https://root.cern,https://root.cern/root/html534/TGraph.html,3,['error'],['error']
Availability,"meter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file. The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; from the fitted function.; If the histogram is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Access to the fit status. The status of the fit can be obtained converting the TFitResultPtr to an integer; indipendently if the fit option ""S"" is used or not:; TFitResultPtr r = h=>Fit(myFunc,opt);; Int_t fitStatus = r;. The fitStatus is 0 if the fit is OK (i.e. no error occurred).; The value of the fit status code is negative in case of an error not connected with the; minimization procedure, for example when a wrong function is used.; Otherwise the return value is the one returned from the minimization procedure.; When TMinuit (default case) or Minuit2 are used as minimizer the status returned is :; fitStatus = migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult.; TMinuit will return 0 (for migrad, minos, hesse or improve) in case of success and 4 in; case of error (see the documentation of TMinuit::mnexcm). So for example, for an error; only in Minos but not in Migrad a fitStatus of 40 will be returned.; Minuit2 will return also 0 in case of success and different values in migrad, minos or; hesse depending on the error. See in this case the documentation of; Minuit2Minimizer::Minimize for the migradResult, Minuit2Minimizer::GetMinosError for the; minosResult and Minuit2Minimizer::Hesse for the hesseResult.; If other minimizers are used see their specific documentation for the status code; returned. For example in the ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraph.html:28920,error,error,28920,root/html528/TGraph.html,https://root.cern,https://root.cern/root/html528/TGraph.html,3,['error'],['error']
Availability,"meter does not exist; or value type does not match), 0 otherwise. Int_t GetParameter(TCollection* c, const char* par, Int_t& value); Get the value from the specified parameter from the specified collection.; Returns -1 in case of error (i.e. list is 0, parameter does not exist; or value type does not match), 0 otherwise. Int_t GetParameter(TCollection* c, const char* par, Long_t& value); Get the value from the specified parameter from the specified collection.; Returns -1 in case of error (i.e. list is 0, parameter does not exist; or value type does not match), 0 otherwise. Int_t GetParameter(TCollection* c, const char* par, Long64_t& value); Get the value from the specified parameter from the specified collection.; Returns -1 in case of error (i.e. list is 0, parameter does not exist; or value type does not match), 0 otherwise. Int_t GetParameter(TCollection* c, const char* par, Double_t& value); Get the value from the specified parameter from the specified collection.; Returns -1 in case of error (i.e. list is 0, parameter does not exist; or value type does not match), 0 otherwise. Int_t AssertDataSet(TDSet* dset, TList* input, TDataSetManager* mgr, TString& emsg); Make sure that dataset is in the form to be processed. This may mean; retrieving the relevant info from the dataset manager or from the; attached input list.; Returns 0 on success, -1 on error. Int_t SaveInputData(TQueryResult* qr, const char* cachedir, TString& emsg); Save input data file from 'cachedir' into the sandbox or create a the file; with input data objects. Int_t SendInputData(TQueryResult* qr, TProof* p, TString& emsg); Send the input data file to the workers. Int_t GetInputData(TList* input, const char* cachedir, TString& emsg); Get the input data from the file defined in the input list. void LogViewer(const char* url = 0, Int_t sessionidx = 0); Start the log viewer window usign the plugin manager. void SetProgressDialog(Bool_t on = kTRUE); Enable/Disable the graphic progress dialog.; By def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:86798,error,error,86798,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,6,['error'],['error']
Availability,"meter five, then add; MnContours contour(...);; std::vector<std::pair<double, double> > points = contour(4, 5);; to see a two-dimensional picture.; 6.5 Interpretation of parameter errors; There are two kinds of problems that can arise: The reliability of M ’s error estimates, and their statistical interpretation, assuming they are accurate.; 6.5.1 Statistical interpretation; For discussuion of basic concepts, such as the meaning of the elements of the error matrix, parabolic versus \(\mbox{MINOS}\) errors, the appropriate value for \(\mbox{up}\) (see [howto:errordef]), and setting of exact confidence levels, see (in order of increasing complexity and completeness):. “Interpretation of the Errors on Parameters”, see Part 3 of this write-up.; “Determining the Statistical Significance of Experimental Results”@bib-MIN81.; “Statistical Methods in Experimental Physics”@bib-EADIE. 6.5.2 The reliability of M error estimates; M always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step sizes as specified by the user. After a \(\mbox{MIGRAD}\) or \(\mbox{HESSE}\) step, the errors are usually quite accurate, unless there has been a problem. If no mitigating adjective is given in the printout of the errors, then at least M believes the errors are accurate, although there is always a small chance that M has been fooled. Some visible signs that M may have been fooled are:. Warning messages produced during the minimization or error analysis.; Failure to find new minimum.; Value of \(\mbox{EDM}\) too big. For a “normal” minimization, after \(\mbox{MIGRAD}\), the value of \(\mbox{EDM}\) is usually more than three orders of magnitude smaller than \(\mbox{up}\), unless a looser tolerance has been specified.; Correlation coefficients exactly equal to zero, unless some parameters are known to be u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:73720,reliab,reliability,73720,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,3,"['error', 'reliab']","['error', 'errors', 'reliability']"
Availability,"meter is near one of; 133its limits, then the existence of limits has probably not prevented MINUIT; 134from finding the right minimum. On the other hand, if one or more; 135parameters is near its limit at the minimum, this may be because the true; 136minimum is indeed at a limit, or it may be because the minimizer has; 137become ``blocked'' at a limit. This may normally happen only if the; 138parameter is so close to a limit (internal value at an odd multiple of; 139\f$\pm \frac{\pi}{2}\f$; 140that MINUIT prints a warning to this effect when it prints; 141the parameter values.; 142 ; 143The minimizer can become blocked at a limit, because at a limit; 144the derivative seen by the minimizer; 145\f$\partial F / \partial P_{\mathrm{int}}\f$; 146is zero no matter what the real derivative; 147\f$\partial F / \partial P_{\mathrm{ext}}\f$ is.; 148 ; 149\f[; 150\frac{\partial F}{\partial P_{\mathrm{int}}} =; 151\frac{\partial F}{\partial P_{\mathrm{ext}}}; 152\frac{\partial P_{\mathrm{ext}}}{\partial P_{\mathrm{int}}} =; 153\frac{\partial F}{\partial P_{\mathrm{ext}}} = 0; 154\f]; 155 ; 156#### Getting the right parameter errors with limits.; 157 ; 158In the best case, where the minimum is far from any limits, MINUIT will; 159correctly transform the error matrix, and the parameter errors it reports; 160should be accurate and very close to those you would have got without; 161limits. In other cases (which should be more common, since otherwise you; 162wouldn't need limits), the very meaning of parameter errors becomes; 163problematic. Mathematically, since the limit is an absolute constraint on; 164the parameter, a parameter at its limit has no error, at least in one; 165direction. The error matrix, which can assign only symmetric errors, then; 166becomes essentially meaningless.; 167 ; 168### Interpretation of Parameter Errors:; 169 ; 170There are two kinds of problems that can arise: the reliability of; 171MINUIT's error estimates, and their statistical interpretation, as",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:7515,error,errors,7515,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['error'],['errors']
Availability,"meter tau ; Parameters. [in]tauregularisation parameter. this method sets tau and then calls the core unfolding algorithm ; Definition at line 2491 of file TUnfold.cxx. ◆ DoUnfold() [2/3]. Double_t TUnfold::DoUnfold ; (; Double_t ; tau_reg, . const TH1 * ; input, . Double_t ; scaleBias = 0.0 . ). perform the unfolding for a given input and regularisation ; Parameters. [in]tau_regregularisation parameter ; [in]inputinput distribution with uncertainties ; [in]scaleBias(default=0.0) scale factor applied to the bias. This is a shortcut for { SetInput(input,scaleBias); DoUnfold(tau); } ; Definition at line 2235 of file TUnfold.cxx. ◆ DoUnfold() [3/3]. Double_t TUnfold::DoUnfold ; (; void ; ). protectedvirtual . core unfolding algorithm ; Definition at line 246 of file TUnfold.cxx. ◆ ErrorMatrixToHist(). void TUnfold::ErrorMatrixToHist ; (; TH2 * ; ematrix, . const TMatrixDSparse * ; emat, . const Int_t * ; binMap, . Bool_t ; doClear . ); const. protected . add up an error matrix, also respecting the bin mapping ; Parameters. [in,out]ematrixerror matrix histogram ; [in]ematerror matrix stored with internal mapping (member fXToHist) ; [in]binMapmapping of histogram bins ; [in]doClearif true, ematrix is cleared prior to adding elements of emat to it. the array binMap is explained with the method GetOutput(). The matrix emat must have dimension NxN where N=fXToHist.size() The flag doClear may be used to add covariance matrices from several uncertainty sources. ; Definition at line 3379 of file TUnfold.cxx. ◆ GetAx(). const TMatrixDSparse * TUnfold::GetAx ; (; void ; ); const. inlineprotected . vector of folded-back result ; Definition at line 248 of file TUnfold.h. ◆ GetBias(). void TUnfold::GetBias ; (; TH1 * ; out, . const Int_t * ; binMap = nullptr . ); const. get bias vector including bias scale ; Parameters. [out]outhistogram to store the scaled bias vector. The bin contents are overwritten ; [in]binMap(default=nullptr) array for mapping truth bins to histogram bins. Th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfold.html:31317,error,error,31317,doc/master/classTUnfold.html,https://root.cern,https://root.cern/doc/master/classTUnfold.html,1,['error'],['error']
Availability,"meter_values.data()); # Note: in the C++ tutorial, the parameter value sync is done in one line with:; # ```C++; # f_sum->SetParameters(fnorm_exp_cb->GetParameters().data());; # ```; # However, TF1NormSum::GetParameters() returns an std::vector by value, which; # doesn't survive long enough in Python. That's why we have to explicitly; # assign it to a variable first and can't use a temporary.; ; f_sum.SetParName(1, ""NBackground""); f_sum.SetParName(0, ""NSignal""); for i in range(2, f_sum.GetNpar()):; f_sum.SetParName(i, fnorm_exp_cb.GetParName(i)); ; # GENERATE HISTOGRAM TO FIT ..............................................................; w = ROOT.TStopwatch(); w.Start(); h_sum = ROOT.TH1D(""h_ExpCB"", ""Exponential Bkg + CrystalBall function"", nBins, -5.0, 5.0); h_sum.FillRandom(""fsum"", nEvents); print(""Time to generate {0} events: "".format(nEvents)); w.Print(); ; # need to scale histogram with width since we are fitting a density; h_sum.Sumw2(); h_sum.Scale(1.0, ""width""); ; # fit - use Minuit2 if available; ROOT.Math.MinimizerOptions.SetDefaultMinimizer(""Minuit2""); c1 = ROOT.TCanvas(""Fit"", ""Fit"", 800, 1000); # do a least-square fit of the spectrum; result = h_sum.Fit(""fsum"", ""SQ""); result.Print(); h_sum.Draw(); print(""Time to fit using ROOT TF1Normsum: ""); w.Print(); ; # test if parameters are fine; for i, pref in enumerate([nsig, nbkg, signal_mean]):; if not ROOT.TMath.AreEqualAbs(pref, f_sum.GetParameter(i), f_sum.GetParError(i) * 10.0):; ROOT.Error(; ""testFitNormSum"",; ""Difference found in fitted {0} - difference is {1:.2f} sigma"".format(; f_sum.GetParName(i), (f_sum.GetParameter(i) - pref) / f_sum.GetParError(i); ),; ); ; ROOT.gStyle.SetOptStat(0); # add parameters; t1 = ROOT.TLatex(-2.5, 300000, ""NSignal = {0:g} #pm {1:g}"".format(f_sum.GetParameter(0), f_sum.GetParError(0))); t2 = ROOT.TLatex(-2.5, 270000, ""Nbackgr = {0:g} #pm {1:g}"".format(f_sum.GetParameter(1), f_sum.GetParError(1))); t1.Draw(); t2.Draw(); ; c1.SaveAs(""fitNormSum.png""); formatOption_t Option_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitNormSum_8py.html:2967,avail,available,2967,doc/master/fitNormSum_8py.html,https://root.cern,https://root.cern/doc/master/fitNormSum_8py.html,1,['avail'],['available']
Availability,"meters and uncertainties or a more functional one provided by M . If the user wants to interact with the parameters before minimization (fixing, adding/removing limits), the minimal required interface cannot be used.; 4.3.1 What the user must supply; The user must supply to M. a valid implementation of the FCNBase base class; parameters with their starting values; expected uncertainties on the parameters. The input parameters can be simply defined via an std::vector\(<\)double\(>\), which means that all parameters are variables. If the user wants fix a parameter or put limits on it before minimization, they have to instantiate a MnUserParameters object and then add parameters one by one, giving them a name, value, uncertainty. Once all parameters are added to MnUserParameters, they can fix a parameter or put limits on another one before handing them over to Minuit for minimization.; 4.3.2 What the user can supply; Optionally the user can supply their own gradient calculator by implementing the FCNGradientBase interface or supply a full covariance matrix for input if one is available. The covariance matrix can be supplied in form of a std::vector\(<\)double\(>\) in packed storage format (upper triangular), or in a more user-friendly way by using the interface provided by the MnUserCovariance.; 4.4 Running a M minimization; Two use cases are addressed for minimization:. The user just wants the function to be minimized in one go.; The user wants to minimize the \(\mbox{FCN}\) in several minimization steps, re-using the result of the preceeding minimization in the next step and change parameters in between (fix/release/put limits on them, etc.). How M minimizations can be performed is shown in [example:main].; 4.4.1 Direct usage of minimizers; Minimizers such as the VariableMetricMinimizer are designed as state-less minimization engines, which means that they do not depend on the current function and its parameters. Any \(\mbox{FCN}\) function can be minimized with the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:34455,avail,available,34455,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,1,['avail'],['available']
Availability,"meters theFitP = kNotEnforced;; 413 if (fAllVarsI[ivar] == """" || fAllVarsI[ivar] == ""NotEnforced"") theFitP = kNotEnforced;; 414 else if (fAllVarsI[ivar] == ""FMax"" ) theFitP = kForceMax;; 415 else if (fAllVarsI[ivar] == ""FMin"" ) theFitP = kForceMin;; 416 else if (fAllVarsI[ivar] == ""FSmart"" ) theFitP = kForceSmart;; 417 else {; 418 Log() << kFATAL << ""unknown value \'"" << fAllVarsI[ivar]; 419 << ""\' for fit parameter option "" << Form(""VarProp[%i]"",ivar) << Endl;; 420 }; 421 (*fFitParams)[ivar] = theFitP;; 422 ; 423 if (theFitP != kNotEnforced); 424 Log() << kINFO << ""Use \"""" << fAllVarsI[ivar]; 425 << ""\"" cuts for variable: "" << ""'"" << (*fInputVars)[ivar] << ""'"" << Endl;; 426 }; 427}; 428 ; 429////////////////////////////////////////////////////////////////////////////////; 430/// cut evaluation: returns 1.0 if event passed, 0.0 otherwise; 431 ; 432Double_t TMVA::MethodCuts::GetMvaValue( Double_t* err, Double_t* errUpper ); 433{; 434 // cannot determine error; 435 NoErrorCalc(err, errUpper);; 436 ; 437 // sanity check; 438 if (fCutMin == NULL || fCutMax == NULL || fNbins == 0) {; 439 Log() << kFATAL << ""<Eval_Cuts> fCutMin/Max have zero pointer. ""; 440 << ""Did you book Cuts ?"" << Endl;; 441 }; 442 ; 443 const Event* ev = GetEvent();; 444 ; 445 // sanity check; 446 if (fTestSignalEff > 0) {; 447 // get efficiency bin; 448 Int_t ibin = fEffBvsSLocal->FindBin( fTestSignalEff );; 449 if (ibin < 0 ) ibin = 0;; 450 else if (ibin >= fNbins) ibin = fNbins - 1;; 451 ; 452 Bool_t passed = kTRUE;; 453 for (UInt_t ivar=0; ivar<GetNvar(); ivar++); 454 passed &= ( (ev->GetValue(ivar) > fCutMin[ivar][ibin]) &&; 455 (ev->GetValue(ivar) <= fCutMax[ivar][ibin]) );; 456 ; 457 return passed ? 1. : 0. ;; 458 }; 459 else return 0;; 460}; 461 ; 462////////////////////////////////////////////////////////////////////////////////; 463/// print cuts; 464 ; 465void TMVA::MethodCuts::PrintCuts( Double_t effS ) const; 466{; 467 std::vector<Double_t> cutsMin;; 468 std::vector<Double_t> cutsMax;; 4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:16287,error,error,16287,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['error'],['error']
Availability,"meters(minParams);; func->SetParErrors(parErrors);; func->SetChisquare(chi2);; int ndf = npfits - fitter.Result().NFreeParameters();; func->SetNDF(ndf);; ; // add to list of functions; h1->GetListOfFunctions()->Add(func);; h2->GetListOfFunctions()->Add(func);; }; else {; // fit independently; h1->Fit(func, ""0"");; h2->Fit(func, ""0"");; }; ; // Create a new canvas.; TCanvas * c1 = new TCanvas(""c1"",""Two HIstogram Fit example"",100,10,900,800);; c1->Divide(2,2);; gStyle->SetOptFit();; gStyle->SetStatY(0.6);; ; c1->cd(1);; h1->Draw();; func->SetRange(xlow1,ylow1,xup1,yup1);; func->DrawCopy(""cont3 same"");; c1->cd(2);; h1->Draw(""lego"");; func->DrawCopy(""surf1 same"");; c1->cd(3);; func->SetRange(xlow2,ylow2,xup2,yup2);; h2->Draw();; func->DrawCopy(""cont3 same"");; c1->cd(4);; h2->Draw(""lego"");; gPad->SetLogz();; func->Draw(""surf1 same"");; ; return 0;; }; Fitter.h; h#define h(i)Definition RSha256.hxx:106; TCanvas.h; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; TF2.h; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TH2D.h; TList.h; operator()TRObject operator()(const T1 &t1) constDefinition TRFunctionImport__oprtr.h:14; TRandom3.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; gPad#define gPadDefinition TVirtualPad.h:308; ROOT::Fit::FitConfig::SetMinimizervoid SetMinimizer(const char *type, const char *algo=nullptr)set minimizer typeDefinition FitConfig.h:179; ROOT::Fit::FitConfig::ParSettingsconst ParameterSettings & ParSettings(unsigned int i) constget the param",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fit2dHist_8C.html:7194,error,error,7194,doc/master/fit2dHist_8C.html,https://root.cern,https://root.cern/doc/master/fit2dHist_8C.html,1,['error'],['error']
Availability,"method must be overridden to handle object notification (the base implementation is no-op). ; Different objects in ROOT use the Notify method for different purposes, in coordination with other objects that call this method at the appropriate time.; For example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Reimplemented from TSelector. ◆ Process(). Bool_t TSelEvent::Process ; (; Long64_t ; entry). virtual . The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ; The entry argument specifies which entry in the currently loaded tree is to be processed. It can be passed to either TTree::GetEntry() or TBranch::GetEntry() to read either all or the required parts of the data. When processing keyed objects with PROOF, the object is already loaded and is available via the fObject pointer.; This function should contain the ""body"" of the analysis. It can contain simple or elaborate selection criteria, run algorithms on the data of the event and typically fill histograms. ; Reimplemented from TSelector.; Definition at line 201 of file TSelEvent.cxx. ◆ SetInputList(). virtual void TSelEvent::SetInputList ; (; TList * ; input). inlinevirtual . Reimplemented from TSelector.; Definition at line 113 of file TSelEvent.h. ◆ SetObject(). virtual void TSelEvent::SetObject ; (; TObject * ; obj). inlinevirtual . Reimplemented from TSelector.; Definition at line 112 of file TSelEvent.h. ◆ SetOption(). virtual void TSelEvent::SetOption ; (; const char * ; option). inlinevirtual . Reimplemented from TSelector.; Definition at line 111 of file TSelEvent.h. ◆ SlaveBegin(). void TSelEvent::SlaveBegin ; (; TTree * ; tree). virtual . The SlaveBegin() function is called after the Begin() function. ; When running with PROOF SlaveBegin() i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelEvent.html:17935,avail,available,17935,doc/master/classTSelEvent.html,https://root.cern,https://root.cern/doc/master/classTSelEvent.html,1,['avail'],['available']
Availability,"method"");; d = (TH1F*) f->Get(""decon_response_wide"");; ; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; for (i = 0; i < nbins; i++) response[i]=d->GetBinContent(i + 1);; ; h->SetMaximum(200000);; h->Draw(""L"");; TSpectrum *s = new TSpectrum();; s->Deconvolution(source,response,256,200,50,1.2);; ; for (i = 0; i < nbins; i++) d->SetBinContent(i + 1,source[i]);; d->SetLineColor(kRed);; d->Draw(""SAME L"");; }; . Definition at line 1452 of file TSpectrum.cxx. ◆ DeconvolutionRL(). const char * TSpectrum::DeconvolutionRL ; (; Double_t * ; source, . const Double_t * ; response, . Int_t ; ssize, . Int_t ; numberIterations, . Int_t ; numberRepetitions, . Double_t ; boost . ). One-dimensional deconvolution function. ; This function calculates deconvolution from source spectrum according to response spectrum using Richardson-Lucy deconvolution algorithm. The result is placed in the vector pointed by source pointer. On successful completion it returns 0. On error it returns pointer to the string describing error. If desired after every numberIterations one can apply boosting operation (exponential function with exponent given by boost coefficient) and repeat it numberRepetitions times (see Gold deconvolution).; Parameters:. source: pointer to the vector of source spectrum; response: pointer to the vector of response spectrum; ssize: length of source and response spectra; numberIterations, for details we refer to the reference given above; numberRepetitions, for repeated boosted deconvolution; boost, boosting coefficient. Richardson-Lucy deconvolution algorithm:; For discrete systems it has the form: ; \[; x^{(n)}(i) = x^{(n-1)}(i) \sum_{j=0}^{N-1}h(i,j)\frac{y(j)}{\sum_{k=0}^{M-1}h(j,k)x^{(n-1)}(k)} \\; i \in \left<0,M-1\right>; \]. for positive input data and response matrix this iterative method forces the deconvoluted spectra to be non-negative. The Richardson-Lucy iteration converges to the maximum likelihood solution for Poisson statistics in the data.; Refer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum.html:48041,error,error,48041,doc/master/classTSpectrum.html,https://root.cern,https://root.cern/doc/master/classTSpectrum.html,2,['error'],['error']
Availability,"method) const; UInt_tNbPnts() const; UInt_tNbPols() const; UInt_tNbSegs() const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); Bool_tSectionsValid(UInt_t mask) const; voidSetAABoundingBox(const Double_t* origin, const Double_t* halfLengths); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetLocalMasterIdentity(); static voidTObject::SetObjectStat(Bool_t stat); Bool_tSetRawSizes(UInt_t reqPnts, UInt_t reqPntsCapacity, UInt_t reqSegs, UInt_t reqSegsCapacity, UInt_t reqPols, UInt_t reqPolsCapacity); voidSetSectionsValid(UInt_t mask); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Int_tType() const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Writ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBuffer3D.html:12765,mask,mask,12765,root/html528/TBuffer3D.html,https://root.cern,https://root.cern/root/html528/TBuffer3D.html,1,['mask'],['mask']
Availability,"method) const; UInt_tNbPnts() const; UInt_tNbPols() const; UInt_tNbSegs() const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); Bool_tSectionsValid(UInt_t mask) const; voidSetAABoundingBox(const Double_t* origin, const Double_t* halfLengths); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetLocalMasterIdentity(); static voidTObject::SetObjectStat(Bool_t stat); Bool_tSetRawSizes(UInt_t reqPnts, UInt_t reqPntsCapacity, UInt_t reqSegs, UInt_t reqSegsCapacity, UInt_t reqPols, UInt_t reqPolsCapacity); voidSetSectionsValid(UInt_t mask); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Int_tType() const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBuffer3D.html:12765,mask,mask,12765,root/html526/TBuffer3D.html,https://root.cern,https://root.cern/root/html526/TBuffer3D.html,1,['mask'],['mask']
Availability,"method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidTDictionary::CreateAttributeMap(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetArrayDim() const; const char*GetArrayIndex() const; TDictAttributeMap*TDictionary::GetAttributeMap() const; TClass*GetClass() const; TDataType*GetDataType() const; TDictionary::DeclId_tGetDeclId() const; static TDictionary*TDictionary::GetDictionary(const char* name); static TDictionary*TDictionary::GetDictionary(const type_info& typeinfo); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetFullTypeName() const; virtual const char*TObject::GetIconName() const; Int_tGetMaxIndex(Int_t dim) const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDataMember.html:6348,error,error,6348,root/html602/TDataMember.html,https://root.cern,https://root.cern/root/html602/TDataMember.html,2,['error'],['error']
Availability,"method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidTDictionary::CreateAttributeMap(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetArrayDim() const; const char*GetArrayIndex() const; TDictAttributeMap*TDictionary::GetAttributeMap() const; TClass*GetClass() const; TDataType*GetDataType() const; static TDictionary*TDictionary::GetDictionary(const char* name); static TDictionary*TDictionary::GetDictionary(const type_info& typeinfo); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetFullTypeName() const; virtual const char*TObject::GetIconName() const; Int_tGetMaxIndex(Int_t dim) const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Long_tGetOffset",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDataMember.html:6403,error,error,6403,root/html534/TDataMember.html,https://root.cern,https://root.cern/root/html534/TDataMember.html,1,['error'],['error']
Availability,"method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidTDictionary::CreateAttributeMap(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TDictAttributeMap*TDictionary::GetAttributeMap() const; TDataMember*GetDataMember() const; const char*GetDefault() const; static TDictionary*TDictionary::GetDictionary(const char* name); static TDictionary*TDictionary::GetDictionary(const type_info& typeinfo); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetFullTypeName() const; virtual const char*TObject::GetIconName() const; TFunction*GetMethod() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TList*GetOptions() const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMethodArg.html:1729,error,error,1729,root/html534/TMethodArg.html,https://root.cern,https://root.cern/root/html534/TMethodArg.html,3,['error'],['error']
Availability,"method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidTDictionary::CreateAttributeMap(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual void*GetAddress() const; virtual Int_tGetArrayDim() const; TDictAttributeMap*TDictionary::GetAttributeMap() const; virtual TDictionary::DeclId_tGetDeclId() const; static TDictionary*TDictionary::GetDictionary(const char* name); static TDictionary*TDictionary::GetDictionary(const type_info& typeinfo); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*GetFullTypeName() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetMaxIndex(Int_t dim) const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGlobal.html:1624,error,error,1624,root/html602/TGlobal.html,https://root.cern,https://root.cern/root/html602/TGlobal.html,2,['error'],['error']
Availability,"method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidTDictionary::CreateAttributeMap(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual void*GetAddress() const; virtual Int_tTGlobal::GetArrayDim() const; TDictAttributeMap*TDictionary::GetAttributeMap() const; virtual TDictionary::DeclId_tTGlobal::GetDeclId() const; static TDictionary*TDictionary::GetDictionary(const char* name); static TDictionary*TDictionary::GetDictionary(const type_info& typeinfo); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*GetFullTypeName() const; virtual const char*TObject::GetIconName() const; virtual Int_tTGlobal::GetMaxIndex(Int_t dim) const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEnumConstant.html:1466,error,error,1466,root/html602/TEnumConstant.html,https://root.cern,https://root.cern/root/html602/TEnumConstant.html,2,['error'],['error']
Availability,"method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidTDictionary::CreateAttributeMap(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; void*GetAddress() const; Int_tGetArrayDim() const; TDictAttributeMap*TDictionary::GetAttributeMap() const; static TDictionary*TDictionary::GetDictionary(const char* name); static TDictionary*TDictionary::GetDictionary(const type_info& typeinfo); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetFullTypeName() const; virtual const char*TObject::GetIconName() const; Int_tGetMaxIndex(Int_t dim) const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGlobal.html:1686,error,error,1686,root/html534/TGlobal.html,https://root.cern,https://root.cern/root/html534/TGlobal.html,1,['error'],['error']
Availability,"method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; UInt_tGetBytesRecv() const; UInt_tGetBytesSent() const; Int_tGetCompressionAlgorithm() const; Int_tGetCompressionLevel() const; Int_tGetCompressionSettings() const; virtual Int_tGetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressGetInetAddress() const; TTimeStampGetLastUsage(); virtual TInetAddressGetLocalInetAddress(); virtual Int_tGetLocalPort(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tGetOption(ESockOptions",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TUDPSocket.html:1932,error,error,1932,root/html532/TUDPSocket.html,https://root.cern,https://root.cern/root/html532/TUDPSocket.html,4,['error'],['error']
Availability,"method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Int_tDistancetoPrimitiveHelper(TGraph* theGraph, Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawPanelHelper(TGraph* theGraph); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExecuteEventHelper(TGraph* theGraph, Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual char*GetObjectInfoHelper(TGraph* theGraph, Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static TVirtualGraphPainter*GetPainter(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualGraphPainter.html:1628,error,error,1628,root/html528/TVirtualGraphPainter.html,https://root.cern,https://root.cern/root/html528/TVirtualGraphPainter.html,6,['error'],['error']
Availability,"method) const; voidAdd(Double_t cl, Double_t leftside); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetConfidenceLevel(Int_t index); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Double_tGetLeftSideTailFraction(Int_t index); Int_tGetLookupIndex(Double_t cl, Double_t leftside); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__SamplingSummaryLookup.html:1441,error,error,1441,root/html526/RooStats__SamplingSummaryLookup.html,https://root.cern,https://root.cern/root/html526/RooStats__SamplingSummaryLookup.html,7,['error'],['error']
Availability,"method) const; voidAdd(const TGeoTranslation* other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTGeoMatrix::GetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); voidTGeoMatrix::GetHomogenousMatrix(Double_t* hmat) const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; char*TGeoMatrix::GetPointerName() const; virtual const Double_t*GetRotationMatrix() const; virtual const Double_t*GetScale() const; virtual const char*TNamed::GetTitle() const; virtual const Double_t*GetTranslation() const; virtual UInt_tTObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoTranslation.html:8350,error,error,8350,root/html528/TGeoTranslation.html,https://root.cern,https://root.cern/root/html528/TGeoTranslation.html,6,['error'],['error']
Availability,"method, or nullptr on error.; 903///; 904/// Note: Evaluation of the given method must have been run prior to ROC; 905/// generation through Factory::EvaluateAllMetods.; 906///; 907/// NOTE: The ROC curve is 1 vs. all where the given class is considered signal; 908/// and the others considered background. This is ok in binary classification; 909/// but in in multi class classification, the ROC surface is an N dimensional; 910/// shape, where N is number of classes - 1.; 911 ; 912TGraph *TMVA::Factory::GetROCCurve(DataLoader *loader, TString theMethodName, Bool_t setTitles, UInt_t iClass,; 913 Types::ETreeType type); 914{; 915 return GetROCCurve((TString)loader->GetName(), theMethodName, setTitles, iClass, type);; 916}; 917 ; 918////////////////////////////////////////////////////////////////////////////////; 919/// Argument iClass specifies the class to generate the ROC curve in a; 920/// multiclass setting. It is ignored for binary classification.; 921///; 922/// Returns a ROC graph for a given method, or nullptr on error.; 923///; 924/// Note: Evaluation of the given method must have been run prior to ROC; 925/// generation through Factory::EvaluateAllMetods.; 926///; 927/// NOTE: The ROC curve is 1 vs. all where the given class is considered signal; 928/// and the others considered background. This is ok in binary classification; 929/// but in in multi class classification, the ROC surface is an N dimensional; 930/// shape, where N is number of classes - 1.; 931 ; 932TGraph *TMVA::Factory::GetROCCurve(TString datasetname, TString theMethodName, Bool_t setTitles, UInt_t iClass,; 933 Types::ETreeType type); 934{; 935 if (fMethodsMap.find(datasetname) == fMethodsMap.end()) {; 936 Log() << kERROR << Form(""DataSet = %s not found in methods map."", datasetname.Data()) << Endl;; 937 return nullptr;; 938 }; 939 ; 940 if (!this->HasMethod(datasetname, theMethodName)) {; 941 Log() << kERROR << Form(""Method = %s not found with Dataset = %s "", theMethodName.Data(), datasetname",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:37526,error,error,37526,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['error'],['error']
Availability,"methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""MC:150:10000:"", TDirectory* theTargetFile = 0); standard constructor. MethodCuts(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = NULL); construction from weight file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); Cuts can only handle classification with 2 classes. void Init( void ); default initialisation called by all constructors. ~MethodCuts( void ); destructor. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; Method <string> Minimisation method; available values are: MC Monte Carlo <default>; GA Genetic Algorithm; SA Simulated annealing. EffMethod <string> Efficiency selection method; available values are: EffSel <default>; EffPDF. VarProp <string> Property of variable 1 for the MC method (taking precedence over the; globale setting. The same values as for the global option are available. Variables 1..10 can be; set this way. CutRangeMin/Max <float> user-defined ranges in which cuts are varied. void ProcessOptions(); process user options; sanity check, do not allow the input variables to be normalised, because this; only creates problems when interpreting the cuts. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); cut evaluation: returns 1.0 if event passed, 0.0 otherwise. void PrintCuts(Double_t effS) const; print cuts. Double_t GetCuts(Double_t effS, Double_t* cutMin, Double_t* cutMax) const; retrieve cut values for given signal efficiency; assume vector of correct size !!. Double_t GetCuts(Double_t effS, vector<Double_t>& cutMin, vector<Double_t>& cutMax) const; retrieve cut values for given signal efficiency. void Train( void ); training method: here the cuts are optimised for the training sample. void TestClassification(); nothing to test. Double_t EstimatorFunction(Int_t ievt1, Int_t ievt2); for full event scan. Double_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodCuts.html:21502,avail,available,21502,root/html528/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodCuts.html,4,['avail'],['available']
Availability,"mevirtual void SetName(const char *name)Set the name of the TNamed.Definition TNamed.cxx:140; TNamed::operator=TNamed & operator=(const TNamed &rhs)TNamed assignment operator.Definition TNamed.cxx:51; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::GetEntriesFastInt_t GetEntriesFast() constDefinition TObjArray.h:58; TObjArray::RemoveTObject * Remove(TObject *obj) overrideRemove object from array.Definition TObjArray.cxx:719; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::GetUniqueIDvirtual UInt_t GetUniqueID() constReturn the unique object id.Definition TObject.cxx:462; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TStringBasic string class.Definition TString.h:139; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; bool; double; int; TMath::ACosDouble_t ACos(Double_t)Returns the principal value of the arc cosine of x, expressed in radians.Definition TMath.h:632; TMath::ASinDouble_t ASin(Double_t)Returns the principal value of the arc sine of x, expressed in radians.Definition TMath.h:624; TMath::ATan2Double_t ATan2(Double_t y, Double_t x)Returns the principal value of the arc tangent of y/x, expressed in radians.Definition TMath.h:646; TMath::DegToRadconstexpr Double_t DegToRad()Conversion from degree to radian: .Definition TMath.h:79;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html:126920,error,error,126920,doc/master/TGeoMatrix_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html,1,['error'],['error']
Availability,"mi-infinite interval (-inf,...Definition Integrator.h:296; ROOT::Math::IntegratorOneDim::Integraldouble Integral()evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with I...Definition Integrator.h:364; ROOT::Math::IntegratorOneDim::GetTypestatic IntegrationOneDim::Type GetType(const char *name)static function to get the enumeration from a stringDefinition Integrator.cxx:53; ROOT::Math::VirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrete Integr...Definition VirtualIntegrator.h:101; ROOT::Math::VirtualIntegratorOneDim::Optionsvirtual ROOT::Math::IntegratorOneDimOptions Options() const =0get the option used for the integration must be implemented by derived class; ROOT::Math::VirtualIntegratorOneDim::SetFunctionvirtual void SetFunction(const IGenFunction &)=0set integration function; ROOT::Math::VirtualIntegratorOneDim::IntegralCauchyvirtual double IntegralCauchy(double a, double b, double c)=0evaluate Cauchy integral; ROOT::Math::VirtualIntegratorOneDim::IntegralLowvirtual double IntegralLow(double b)=0evaluate integral over the (-inf, b); ROOT::Math::VirtualIntegratorOneDim::SetOptionsvirtual void SetOptions(const ROOT::Math::IntegratorOneDimOptions &opt)set the options (should be re-implemented by derived classes -if more options than tolerance existDefinition VirtualIntegrator.h:140; ROOT::Math::VirtualIntegratorOneDim::Integralvirtual double Integral(double a, double b)=0evaluate integral; ROOT::Math::VirtualIntegratorOneDim::IntegralUpvirtual double IntegralUp(double a)=0evaluate integral over the (a, +inf); ROOT::Math::VirtualIntegrator::SetRelTolerancevirtual void SetRelTolerance(double)=0set the desired relative Error; ROOT::Math::VirtualIntegrator::SetAbsTolerancevirtual void SetAbsTolerance(double)=0set the desired absolute Error; ROOT::Math::VirtualIntegrator::Errorvirtual double Error() const =0return the estimate of the absolute Error of the last",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Integrator_8h_source.html:30954,toler,tolerance,30954,doc/master/Integrator_8h_source.html,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html,1,['toler'],['tolerance']
Availability,"mili(). TFumili::~TFumili ; (; ). override . TFumili destructor. ; Definition at line 217 of file TFumili.cxx. Member Function Documentation. ◆ BuildArrays(). void TFumili::BuildArrays ; (; ). Allocates memory for internal arrays. ; Called by TFumili::TFumili ; Definition at line 182 of file TFumili.cxx. ◆ Chisquare(). Double_t TFumili::Chisquare ; (; Int_t ; npar, . Double_t * ; params . ); const. overridevirtual . return a chisquare equivalent ; Implements TVirtualFitter.; Definition at line 227 of file TFumili.cxx. ◆ Class(). static TClass * TFumili::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TFumili::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TFumili::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 114 of file TFumili.h. ◆ Clear(). void TFumili::Clear ; (; Option_t * ; opt = """"). overridevirtual . Resets all parameter names, values and errors to zero. ; Argument opt is ignored; NB: this procedure doesn't reset parameter limits ; Implements TVirtualFitter.; Definition at line 242 of file TFumili.cxx. ◆ DeclFileName(). static const char * TFumili::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 114 of file TFumili.h. ◆ DeleteArrays(). void TFumili::DeleteArrays ; (; ). Deallocates memory. Called from destructor TFumili::~TFumili. ; Definition at line 261 of file TFumili.cxx. ◆ Derivatives(). void TFumili::Derivatives ; (; Double_t * ; df, . Double_t * ; fX . ). Calculates partial derivatives of theoretical function. ; Input:; fX - vector of data point. Output:; DF - array of derivatives. ARITHM.F: Converted from CERNLIB ; Definition at line 291 of file TFumili.cxx. ◆ Eval(). Int_t TFumili::Eval ; (; Int_t & ; npar, . Double_t * ; grad, . Double_t & ; fval, . Double_t * ; par, . Int_t ; flag . ). Evaluate the minimisation function. ; Input par",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumili.html:26678,error,errors,26678,doc/master/classTFumili.html,https://root.cern,https://root.cern/doc/master/classTFumili.html,1,['error'],['errors']
Availability,"mili::Derivatives, set theoretical function by means of TFumili::SetUserFunc, but first - pass number of parameters by TFumili::SetParNumber; Later values are determined by Fumili as it searches for the minimum or performs whatever analysis is requested by the user.; The default function calls the function specified in SetFCN ; Definition at line 350 of file TFumili.cxx. ◆ EvalTFN(). Double_t TFumili::EvalTFN ; (; Double_t * ; , . Double_t * ; X . ). Evaluate theoretical function. . df: array of partial derivatives; X: vector of theoretical function argument . Definition at line 362 of file TFumili.cxx. ◆ ExecuteCommand(). Int_t TFumili::ExecuteCommand ; (; const char * ; command, . Double_t * ; args, . Int_t ; nargs . ). overridevirtual . Execute MINUIT commands. ; MINImize, SIMplex, MIGrad and FUMili all will call TFumili::Minimize method.; For full command list see MINUIT. Reference Manual. CERN Program Library Long Writeup D506.; Improvement and errors calculation are not yet implemented as well as Monte-Carlo seeking and minimization. Contour commands are also unsupported. command : command string; args : array of arguments; nargs : number of arguments . Implements TVirtualFitter.; Definition at line 391 of file TFumili.cxx. ◆ ExecuteSetCommand(). Int_t TFumili::ExecuteSetCommand ; (; Int_t ; nargs). Called from TFumili::ExecuteCommand in case of ""SET xxx"" and ""SHOW xxx"". ; Definition at line 558 of file TFumili.cxx. ◆ FitChisquare(). void TFumili::FitChisquare ; (; Int_t & ; npar, . Double_t * ; gin, . Double_t & ; f, . Double_t * ; u, . Int_t ; flag . ). virtual . Minimization function for H1s using a Chisquare method. ; Default method (function evaluated at center of bin) for each point the cache contains the following info; 1D : bc,e,xc (bin content, error, x of center of bin); 2D : bc,e,xc,yc; 3D : bc,e,xc,yc,zc . Definition at line 1738 of file TFumili.cxx. ◆ FitChisquareI(). void TFumili::FitChisquareI ; (; Int_t & ; npar, . Double_t * ; gin, . Double_t &",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumili.html:29166,error,errors,29166,doc/master/classTFumili.html,https://root.cern,https://root.cern/doc/master/classTFumili.html,1,['error'],['errors']
Availability,"min(x), max(x)], where; nout = max(nout, number of input data).; xout: an optional set of values at which to evaluate the fit. void BDRksmooth(Double_t* x, Double_t* y, Int_t n, Double_t* xp, Double_t* yp, Int_t np, Int_t kernel, Double_t bw); Smooth data with specified kernel*-*-; *-* =================================. Based on R function ksmooth: Translated to C++ by C. Stratowa; (R source file: ksmooth.c by B.D.Ripley Copyright (C) 1998). -. TGraph * SmoothLowess(TGraph* grin, Option_t* option = """", Double_t span = 0.67, Int_t iter = 3, Double_t delta = 0); Smooth data with Lowess smoother*-*-. This function performs the computations for the LOWESS smoother; (see the reference below). Lowess returns the output points; x and y which give the coordinates of the smooth. Arguments:; grin: Input graph. span: the smoother span. This gives the proportion of points in the plot; which influence the smooth at each value.; Larger values give more smoothness.; iter: the number of robustifying iterations which should be performed.; Using smaller values of iter will make lowess run faster.; delta: values of x which lie within delta of each other replaced by a; single value in the output from lowess.; For delta = 0, delta will be calculated. References:; Cleveland, W. S. (1979) Robust locally weighted regression and smoothing; scatterplots. J. Amer. Statist. Assoc. 74, 829-836.; Cleveland, W. S. (1981) LOWESS: A program for smoothing scatterplots; by robust locally weighted regression.; The American Statistician, 35, 54. void Lowess(Double_t* x, Double_t* y, Int_t n, Double_t* ys, Double_t span, Int_t iter, Double_t delta); Lowess regression smoother*-*-*-*-*-. Based on R function clowess: Translated to C++ by C. Stratowa; (R source file: lowess.c by R Development Core Team (C) 1999-2001). -. void Lowest(Double_t* x, Double_t* y, Int_t n, Double_t& xs, Double_t& ys, Int_t nleft, Int_t nright, Double_t* w, Bool_t userw, Double_t* rw, Bool_t& ok); Fit value at x[i] *-*-*-*-*-*-*-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphSmooth.html:9262,robust,robustifying,9262,root/html528/TGraphSmooth.html,https://root.cern,https://root.cern/root/html528/TGraphSmooth.html,4,['robust'],['robustifying']
Availability,"min, Double_t &ymin, Double_t &xmax, Double_t &ymax) const overrideCompute range.Definition TGraphErrors.cxx:480; TGraphErrors::UpdateArraysvoid UpdateArrays(const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) overrideUpdate the fX, fY, fEX, and fEY arrays with the sorted values.Definition TGraphErrors.cxx:866; TGraphErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:623; TGraphErrors::GetEXDouble_t * GetEX() const overrideDefinition TGraphErrors.h:69; TGraphErrors::GetErrorXDouble_t GetErrorX(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:612; TGraphErrors::fEYDouble_t * fEY[fNpoints] array of Y errorsDefinition TGraphErrors.h:30; TGraphErrors::~TGraphErrors~TGraphErrors() overrideTGraphErrors default destructor.Definition TGraphErrors.cxx:368; TGraphErrors::Scalevoid Scale(Double_t c1=1., Option_t *option=""y"") overrideMultiply the values and errors of a TGraphErrors by a constant c1.Definition TGraphErrors.cxx:752; TGraphErrors::CalculateScanfFieldsstatic Int_t CalculateScanfFields(const char *fmt)Calculate scan fields.Definition TGraphErrors.cxx:449; TGraphErrors::FillZerovoid FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideSet zero values for point arrays in the range [begin, end].Definition TGraphErrors.cxx:598; TGraphErrors::AddPointErrorvirtual void AddPointError(Double_t x, Double_t y, Double_t ex=0., Double_t ey=0.)Add a point with errorbars to the graph.Definition TGraphErrors.cxx:377; TGraphErrors::fEXDouble_t * fEX[fNpoints] array of X errorsDefinition TGraphErrors.h:29; TGraphErrors::Printvoid Print(Option_t *chopt="""") const overridePrint graph and errors values.Definition TGraphErrors.cxx:711; TGraphErrors::SetPointErrorvirtual void SetPointError(Double_t ex, Double_t ey)Set ex and ey values for point pointed by the mouse.Definition TGraphErrors.cxx:769; TGraphErrors::DoMergeBool_t DoMer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphErrors_8h_source.html:7372,error,errors,7372,doc/master/TGraphErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphErrors_8h_source.html,1,['error'],['errors']
Availability,"ming Tree variables; 365 with an unknown range.; 366 This automatic binning option is supported for 1-D, 2-D and 3-D histograms.; 367 ; 368 During filling, some statistics parameters are incremented to compute; 369 the mean value and Root Mean Square with the maximum precision.; 370 ; 371 In case of histograms of type TH1C, TH1S, TH2C, TH2S, TH3C, TH3S; 372 a check is made that the bin contents do not exceed the maximum positive; 373 capacity (127 or 32767). Histograms of all types may have positive; 374 or/and negative bin contents.; 375 ; 376\anchor associated-errors; 377### Associated errors; 378 By default, for each bin, the sum of weights is computed at fill time.; 379 One can also call TH1::Sumw2 to force the storage and computation; 380 of the sum of the square of weights per bin.; 381 If Sumw2 has been called, the error per bin is computed as the; 382 sqrt(sum of squares of weights), otherwise the error is set equal; 383 to the sqrt(bin content).; 384 To return the error for a given bin number, do:; 385~~~ {.cpp}; 386 Double_t error = h->GetBinError(bin);; 387~~~; 388 ; 389\anchor associated-functions; 390### Associated functions; 391 One or more object (typically a TF1*) can be added to the list; 392 of functions (fFunctions) associated to each histogram.; 393 When TH1::Fit is invoked, the fitted function is added to this list.; 394 Given a histogram h, one can retrieve an associated function; 395 with:; 396~~~ {.cpp}; 397 TF1 *myfunc = h->GetFunction(""myfunc"");; 398~~~; 399 ; 400 ; 401\anchor operations-on-histograms; 402## Operations on histograms; 403 ; 404 Many types of operations are supported on histograms or between histograms; 405 ; 406 - Addition of a histogram to the current histogram.; 407 - Additions of two histograms with coefficients and storage into the current; 408 histogram.; 409 - Multiplications and Divisions are supported in the same way as additions.; 410 - The Add, Divide and Multiply functions also exist to add, divide or multiply; 41",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:17005,error,error,17005,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['error']
Availability,"minimization has converged, and the current"");; 3570 Printf("" values of the parameters therefore correspond to a local"");; 3571 Printf("" minimum of the function, this command requests a search for"");; 3572 Printf("" additional distinct local minima."");; 3573 Printf("" The optional argument [maxcalls] specifies the (approximate"");; 3574 Printf("" maximum number of function calls after which the calculation"");; 3575 Printf("" will be stopped."");; 3576 goto L99;; 3577 }; 3578//______________________________________________________________________________; 3579//; 3580// Command MIGRAD; 3581//; 3582 if( !strncmp(comd.Data(),""MIG"",3) ) {; 3583 Printf("" ***>MIGrad [maxcalls] [tolerance]"");; 3584 Printf("" Causes minimization of the function by the method of Migrad,"");; 3585 Printf("" the most efficient and complete single method, recommended"");; 3586 Printf("" for general functions (see also MINImize)."");; 3587 Printf("" The minimization produces as a by-product the error matrix"");; 3588 Printf("" of the parameters, which is usually reliable unless warning"");; 3589 Printf("" messages are produced."");; 3590 Printf("" The optional argument [maxcalls] specifies the (approximate)"");; 3591 Printf("" maximum number of function calls after which the calculation"");; 3592 Printf("" will be stopped even if it has not yet converged."");; 3593 Printf("" The optional argument [tolerance] specifies required tolerance"");; 3594 Printf("" on the function value at the minimum."");; 3595 Printf("" The default tolerance is 0.1, and the minimization will stop"");; 3596 Printf("" when the estimated vertical distance to the minimum (EDM) is"");; 3597 Printf("" less than 0.001*[tolerance]*UP (see [SET ERRordef])."");; 3598 goto L99;; 3599 }; 3600//______________________________________________________________________________; 3601//; 3602// Command MINIMIZE; 3603//; 3604 if( !strncmp(comd.Data(),""MINI"",4) ) {; 3605 Printf("" ***>MINImize [maxcalls] [tolerance]"");; 3606 Printf("" Causes minimization of the function by th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:115261,error,error,115261,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,2,"['error', 'reliab']","['error', 'reliable']"
Availability,"minimize(const char* type, const char* alg = 0). Int_t migrad(); Execute MIGRAD. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t hesse(); Execute HESSE. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(); Execute MINOS. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(const RooArgSet& minosParamList); Execute MINOS for given list of parameters. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t seek(); Execute SEEK. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t simplex(); Execute SIMPLEX. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t improve(); Execute IMPROVE. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t setPrintLevel(Int_t newLevel); Change the MINUIT internal printing level. void optimizeConst(Bool_t flag); If flag is true, perform constant term optimization on; function being minimized. RooFitResult* save(const char* name = 0, const char* title = 0); Save and return a RooFitResult snaphot of current minimizer status.; This snapshot contains the values of all constant parameters,; the value of all floating parameters at RooMinimizer construction and; after the last MINUIT operation, the MINUIT status, vari",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMinimizer.html:10272,error,errors,10272,root/html526/RooMinimizer.html,https://root.cern,https://root.cern/root/html526/RooMinimizer.html,3,['error'],['errors']
Availability,"minimize(const char* type, const char* alg = 0). Int_t migrad(); Execute MIGRAD. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t hesse(); Execute HESSE. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(); Execute MINOS. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(const RooArgSet& minosParamList); Execute MINOS for given list of parameters. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t seek(); Execute SEEK. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t simplex(); Execute SIMPLEX. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t improve(); Execute IMPROVE. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t setPrintLevel(Int_t newLevel); Change the MINUIT internal printing level. void optimizeConst(Int_t flag); If flag is true, perform constant term optimization on; function being minimized. RooFitResult* save(const char* name = 0, const char* title = 0); Save and return a RooFitResult snaphot of current minimizer status.; This snapshot contains the values of all constant parameters,; the value of all floating parameters at RooMinimizer construction and; after the last MINUIT operation, the MINUIT status, varia",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMinimizer.html:10426,error,errors,10426,root/html532/RooMinimizer.html,https://root.cern,https://root.cern/root/html532/RooMinimizer.html,4,['error'],['errors']
Availability,"minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. double Edm() const; return expected distance reached from the minimum. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fValues.size(); }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total number of free parameters. { return fObjFunc->NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int , unsigned int ) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. { return 0; }. const ROOT::Math::IMultiGradFunction * ObjFunction() const; method of only GSL minimizer (not inherited from interface); return pointer to used objective gradient function. { return fObjFunc; }. » Author: L. Moneta Wed Oct 18 11:48:00 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: GSLMinimizer.h 37448 2010-12-09 20:20:56Z moneta $ » Last generated: 2010-12-09 22:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GSLMinimizer.html:8086,error,error,8086,root/html528/ROOT__Math__GSLMinimizer.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GSLMinimizer.html,4,['error'],"['error', 'errors']"
Availability,"minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. double Edm() const; return expected distance reached from the minimum. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fValues.size(); }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total number of free parameters. { return fObjFunc->NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int , unsigned int ) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. { return 0; }. const ROOT::Math::IMultiGradFunction * ObjFunction() const; method of only GSL minimizer (not inherited from interface); return pointer to used objective gradient function. { return fObjFunc; }. » Author: L. Moneta Wed Oct 18 11:48:00 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: GSLMinimizer.h 37448 2010-12-09 20:20:56Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__GSLMinimizer.html:8220,error,error,8220,root/html530/ROOT__Math__GSLMinimizer.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__GSLMinimizer.html,4,['error'],"['error', 'errors']"
Availability,"minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. double Edm() const; return expected distance reached from the minimum. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fValues.size(); }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total number of free parameters. { return fObjFunc->NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int , unsigned int ) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. { return 0; }. const ROOT::Math::IMultiGradFunction * ObjFunction() const; method of only GSL minimizer (not inherited from interface); return pointer to used objective gradient function. { return fObjFunc; }. » Author: L. Moneta Wed Oct 18 11:48:00 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: GSLMinimizer.h 37448 2010-12-09 20:20:56Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__GSLMinimizer.html:8220,error,error,8220,root/html532/ROOT__Math__GSLMinimizer.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__GSLMinimizer.html,4,['error'],"['error', 'errors']"
Availability,"minimum. On the other hand, if one or more parameters is near its limit at the minimum, this may be because the true minimum is indeed at a limit, or it may be because the minimized has become ‘’blocked’’ at a limit. This may normally happen only if the parameter is so close to a limit (internal value at an odd multiple of \(\pm \frac{\pi}{2}\) that Minuit prints a warning to this effect when it prints the parameter values. The minimized can become blocked at a limit, because at a limit the derivative seen by the minimized \(\frac{\partial F}{\partial Pint}\) is zero no matter what the real derivative \(\frac{\partial F}{\partial Pext}\) is.; \[; \left(\frac{\partial F}{\partial Pint}\right) =; \left(\frac{\partial F}{\partial Pext}\right); \left(\frac{\partial Pext}{\partial Pint}\right) =; \left(\frac{\partial F}{\partial Pext}\right) = 0; \]; 5.9.3.2 Getting the Right Parameter Errors with Limits; In the best case, where the minimum is far from any limits, Minuit will correctly transform the error matrix, and the parameter errors it reports should be accurate and very close to those you would have got without limits. In other cases (which should be more common, since otherwise you would not need limits), the very meaning of parameter errors becomes problematic. Mathematically, since the limit is an absolute constraint on the parameter, a parameter at its limit has no error, at least in one direction. The error matrix, which can assign only symmetric errors, then becomes essentially meaningless.; 5.9.3.3 Interpretation of Parameter Errors; There are two kinds of problems that can arise: the reliability of Minuit’s error estimates, and their statistical interpretation, assuming they are accurate.; 5.9.3.4 Statistical Interpretation; For discussion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels see the articles:. F.James. Determining the statistical Significance of experimental Results. Technical Repo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:219974,error,error,219974,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['error'],"['error', 'errors']"
Availability,missing recursive traversal; [#13623] - Add directory wildcarding in TChain; [#13531] - Huge RAM consumption of the hadd command for input files with several directories; [#13511] - TMapFile can’t work; [#13497] - Assertion failure in TMVA with vector iterators incompatible error on Windows; [#13441] - error in root-generated code for cubic spline (TSpline3); [#13421] - [MSVC] ROOT builds under msvc option /permissive- with error C4576; [#13359] - Bug in TFileMerger class for a single input file and a selective list of objects to be merged in output file; [#13288] - [cling] long double type incorrectly parsed by interpreter; [#13155] - TMVA doesn’t compile with pytorch 2.0.1; [#13130] - Valgrind reports leak when constructing TChain; [#13110] - Bug in TDecompBase::DiagProd; [#13079] - Builtin TBB library sometimes not found (or more exactly the one install in /usr/lib sometimes take priority); [#13041] - TVirtualFitter::GetFitter() unexpectedly returns NULL on macOS 12 and 13 with Xcode 14; [#13019] - LLVM assertion failure in HandleUnionActiveMemberChange; [#12993] - std::source_location not working in the interpreter; [#12959] - [ntuple] Distinguish between connecting a page sink and a page source in RColumn; [#12783] - [IO] Writing HistFactory model file twice gives strange results since ROOT 6.26.02; [#12770] - tmva/sofie_parsers does not build with latest Protobuf (22.x); [#12744] - wrong Python version found during build; [#12718] - A crash when trying to initialise a vector from a >1D numpy array in PyROOT; [#12685] - TEnum::GetEnum does NOT process typedefs; [#12644] - Can’t find cxxabi.h and build module ‘ROOT_Foundation_Stage1_NoRTTI’ when building from source on Macos; [#12631] - Unable to build master with external XROOTD; [#12621] - [I/O][RDF] Usage of xrootd from multi-thread event loops runs into severe bottlenecks; [#12592] - [doc] TProfile bin error documentation is not correct; [#12591] - Allow partial enablement of modules; [#12527] - MacOS build f,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:32995,failure,failure,32995,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['failure'],['failure']
Availability,"mit b. Since the transformation is necessarily non-linear, it; would transform a nice linear problem into a nasty non-linear one, which; is the reason why limits should be avoided if not necessary. In addition,; the transformation does require some computer time, so it slows down the; computation a little bit, and more importantly, it introduces additional; numerical inaccuracy into the problem in addition to what is introduced in; the numerical calculation of the FCN value. The effects of; non-linearity and numerical roundoff both become more important as the; external value gets closer to one of the limits (expressed as the distance; to nearest limit divided by distance between limits). The user must; therefore be aware of the fact that, for example, if he puts limits of; (0,10^10 ) on a parameter, then the values 0.0 and 1. 0 will be; indistinguishable to the accuracy of most machines. The transformation also affects the parameter error matrix, of course, so; MINUIT does a transformation of the error matrix (and the ``parabolic''; parameter errors) when there are parameter limits. Users should however; realize that the transformation is only a linear approximation, and that; it cannot give a meaningful result if one or more parameters is very close; to a limit, where partial Pext /partial Pint #0. Therefore, it is; recommended that:. Limits on variable parameters should be used only when needed in order; to prevent the parameter from taking on unphysical values.; When a satisfactory minimum has been found using limits, the limits; should then be removed if possible, in order to perform or re-perform the; error analysis without limits. How to get the right answer from MINUIT. MINUIT offers the user a choice of several minimization algorithms. The; MIGRAD algorithm is in general the best minimizer for; nearly all functions. It is a variable-metric method with inexact line; search, a stable metric updating scheme, and checks for; positive-definiteness. Its main weakn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:4111,error,error,4111,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,12,['error'],"['error', 'errors']"
Availability,"mit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TList::FindObject(const char* name) const; virtual TObject*TList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TQCommand*GetCommand(); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*GetName() const; Int_tGetNRargs() const; I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQCommand.html:7605,error,error,7605,root/html602/TQCommand.html,https://root.cern,https://root.cern/root/html602/TQCommand.html,2,['error'],['error']
Availability,"mit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TList::FindObject(const char* name) const; virtual TObject*TList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TQCommand*TQCommand::GetCommand(); TQCommand*GetCurrent() const; static TCollection*TCollection::GetCurrentCollection(); TQCommand*GetCursor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; UInt_tGetLimit() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQUndoManager.html:7701,error,error,7701,root/html602/TQUndoManager.html,https://root.cern,https://root.cern/root/html602/TQUndoManager.html,2,['error'],['error']
Availability,"mit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidExecuteMethod(); voidExecuteMethod(Long_t param); voidExecuteMethod(Long64_t param); voidExecuteMethod(Double_t param); voidExecuteMethod(const char* params); voidExecuteMethod(Int_t nargs, va_list va); voidExecuteMethod(Long_t* params, Int_t nparam = -1); voidExecuteMethod<>(); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TList::FindObject(const char* name) const; virtual TObject*TList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); const char*GetClassName() const; static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQConnection.html:4929,error,error,4929,root/html602/TQConnection.html,https://root.cern,https://root.cern/root/html602/TQConnection.html,2,['error'],['error']
Availability,"mit; if rebuild = false (default) it will re-use the results of the scan done; for obtained the observed limit and no extra toys will be generated; if rebuild a new set of B toys will be done and the procedure will be repeted; for each toy. void SetData(RooAbsData& ). SamplingDistribution * RebuildDistributions(bool isUpper = true, int nToys = 100, TList* clsDist = 0, TList* clsbDist = 0, TList* clbDist = 0); rebuild the sampling distributions by; generating some toys and find for each of theam a new upper limit; Return the upper limit distribution and optionally also the pValue distributions for Cls, Clsb and Clbxs; as a TList for each scanned point. void SetFixedScan(int nBins, double xMin = 1, double xMax = -1); set for a fixed scan in nbins. void SetAutoScan(); set auto scan (default). { SetFixedScan(0); }. void UseCLs(bool on = true); { fUseCLs = on; if (fResults) fResults->UseCLs(on); }. void SetModel(const RooStats::ModelConfig& ); { }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size; if (fResults) fResults->SetTestSize(size); }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl; if (fResults) fResults->SetConfidenceLevel(cl); }. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. HypoTestCalculatorGeneric * GetHypoTestCalculator() const; retrieved a reference to the internally used HypoTestCalculator; it might be invalid when the class is deleted. { return fCalculator0; }. void SetVerbose(int level = 1); set verbose level (0,1,2). { fVerbose = level; }. void SetMaximumToys(int ntoys); set maximum number of toys. { fMaxToys = ntoys;}. void SetNumErr(double err); set numerical error in test statistic evaluation (default is zero). { fNumErr = err; }. » Auth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestInverter.html:10852,error,error,10852,root/html530/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestInverter.html,2,['error'],['error']
Availability,"mitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Bool_tTMVA::VariableTransformBase::GetInput(const TMVA::Event* event, vector<Float_t>& input, vector<Char_t>& mask, Bool_t backTransform = kFALSE) const; virtual const char*TMVA::VariableTransformBase::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TStringTMVA::VariableTransformBase::GetShortName() const; virtual const char*TObject::GetTitle() const; virtual vector<TString>*GetTransformationStrings(Int_t cls) const; virtual UInt_tTObject::GetUniqueID() const; TMVA::Types::EVariableTransformTMVA::VariableTransformBase::GetVariableTransform() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInitialize(); virtual voidTObject::Inspect() constMENU ; virtual const TMVA::Event*InverseTransform(const TMVA::Event *const, Int_t cls) cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__VariableDecorrTransform.html:2111,mask,mask,2111,root/html530/TMVA__VariableDecorrTransform.html,https://root.cern,https://root.cern/root/html530/TMVA__VariableDecorrTransform.html,9,['mask'],['mask']
Availability,"mitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Bool_tTMVA::VariableTransformBase::GetInput(const TMVA::Event* event, vector<Float_t>& input, vector<Char_t>& mask, Bool_t backTransform = kFALSE) const; virtual const char*TMVA::VariableTransformBase::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TStringTMVA::VariableTransformBase::GetShortName() const; virtual const char*TObject::GetTitle() const; virtual vector<TString>*GetTransformationStrings(Int_t cls) const; virtual UInt_tTObject::GetUniqueID() const; TMVA::Types::EVariableTransformTMVA::VariableTransformBase::GetVariableTransform() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInitialize(); virtual voidTObject::Inspect() constMENU ; virtual const TMVA::Event*InverseTransform(const TMVA::Event*const, Int_t cls) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__VariableDecorrTransform.html:2111,mask,mask,2111,root/html602/TMVA__VariableDecorrTransform.html,https://root.cern,https://root.cern/root/html602/TMVA__VariableDecorrTransform.html,6,['mask'],['mask']
Availability,"mitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Bool_tTMVA::VariableTransformBase::GetInput(const TMVA::Event* event, vector<Float_t>& input, vector<Char_t>& mask, Bool_t backTransform = kFALSE) const; virtual const char*TMVA::VariableTransformBase::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TStringTMVA::VariableTransformBase::GetShortName() const; virtual const char*TObject::GetTitle() const; virtual vector<TString>*TMVA::VariableTransformBase::GetTransformationStrings(Int_t cls) const; virtual UInt_tTObject::GetUniqueID() const; TMVA::Types::EVariableTransformTMVA::VariableTransformBase::GetVariableTransform() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInitialize(); virtual voidTObject::Inspect() constMENU ; virtual const TMVA::Event*InverseTransform(const TMVA::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__VariableGaussTransform.html:2151,mask,mask,2151,root/html530/TMVA__VariableGaussTransform.html,https://root.cern,https://root.cern/root/html530/TMVA__VariableGaussTransform.html,15,['mask'],['mask']
Availability,"mits). Therefore the internal error matrix kept by; Minuit must be transformed to an external error matrix for the user.; This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J),; where DEXDIN is the derivative of the external value with respect to the; internal value at the minimum. This is a linearization of the; transformation, and is the only way to produce an error matrix in external; coordinates meaningful to the user. But when reporting the individual; parabolic errors for limited parameters, Minuit can do a little better, so; it does. In this case, Minuit actually transforms the ends of the; internal ""error bar"" to external coordinates and reports the length of; this transformed interval. Strictly speaking, it is now asymmetric, but; since the origin of the asymmetry is only an artificial transformation it; does not make much sense, so the transformed errors are symmetrized. The result of all the above is that for parameters with limits, the error; reported by Minuit is not exactly equal to the square root of the diagonal; element of the error matrix. The difference is a measure of how much the; limits deform the problem. If possible, it is suggested not to use limits; on parameters, and the problem goes away. If for some reason limits are; necessary, and you are sensitive to the difference between the two ways of; calculating the errors, it is suggested to use Minos errors which take; into account the non-linearities much more precisely. Function Members (Methods); public:. TMinuit(); TMinuit(Int_t maxpar); virtual~TMinuit(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidBuildArrays(Int_t maxpar = 15); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tCommand(const char* command); virtual In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:13729,error,error,13729,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,8,['error'],['error']
Availability,"mits). Therefore the internal error matrix kept by; Minuit must be transformed to an external error matrix for the user.; This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J),; where DEXDIN is the derivative of the external value with respect to the; internal value at the minimum. This is a linearization of the; transformation, and is the only way to produce an error matrix in external; coordinates meaningful to the user. But when reporting the individual; parabolic errors for limited parameters, Minuit can do a little better, so; it does. In this case, Minuit actually transforms the ends of the; internal ""error bar"" to external coordinates and reports the length of; this transformed interval. Strictly speaking, it is now asymmetric, but; since the origin of the asymmetry is only an artificial transformation it; does not make much sense, so the transformed errors are symmetrized. The result of all the above is that for parameters with limits, the error; reported by Minuit is not exactly equal to the square root of the diagonal; element of the error matrix. The difference is a measure of how much the; limits deform the problem. If possible, it is suggested not to use limits; on parameters, and the problem goes away. If for some reason limits are; necessary, and you are sensitive to the difference between the two ways of; calculating the errors, it is suggested to use Minos errors which take; into account the non-linearities much more precisely. Function Members (Methods); public:. virtual~TMinuit(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidBuildArrays(Int_t maxpar = 15); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tCommand(const char* command); virtual Int_tTNamed::Compare(const TObject* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMinuit.html:13727,error,error,13727,root/html602/TMinuit.html,https://root.cern,https://root.cern/root/html602/TMinuit.html,4,['error'],['error']
Availability,mized function has error status but is ignored.; Parameter values: k=-35.3713 m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.27133; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 166 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.28726; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 9 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.2898; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 1 errors; ; Minuit2Minimizer : Invalid minimum - status = 3; FVAL = -2419.31; Edm = -nan; Nfcn = 34; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.2898; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.28374; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 44 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.27133; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 166 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.28726; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 9 errors; ; RooAbsMinimizerFcn: Minimized function has error statu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html:12183,error,errors,12183,doc/master/rf606__nllerrorhandling_8C.html,https://root.cern,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html,2,['error'],['errors']
Availability,"mizer status. ;  ; void saveStatus (const char *label, int status);  ; int seek ();  Execute SEEK. ;  ; void setEps (double eps);  Change MINUIT epsilon. ;  ; void setErrorLevel (double level);  Set the level for MINUIT error analysis to the given value. ;  ; void setEvalErrorWall (bool flag);  ; bool setLogFile (const char *logf=nullptr);  ; void setMaxFunctionCalls (int n);  Change maximum number of likelihood function class from MINUIT (RooMinimizer default 500 * #parameters) ;  ; void setMaxIterations (int n);  Change maximum number of MINUIT iterations (RooMinimizer default 500 * #parameters) ;  ; void setMinimizerType (std::string const &type);  Choose the minimizer algorithm. ;  ; void setOffsetting (bool flag);  Enable internal likelihood offsetting for enhanced numeric precision. ;  ; void setPrintEvalErrors (int numEvalErrors);  ; void setPrintLevel (int newLevel);  Change the MINUIT internal printing level. ;  ; void setProfile (bool flag=true);  ; void setRecoverFromNaNStrength (double strength);  Try to recover from invalid function values. ;  ; void setStrategy (int istrat);  Change MINUIT strategy to istrat. ;  ; void setVerbose (bool flag=true);  ; int simplex ();  Execute SIMPLEX. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void zeroEvalCount ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMinimizer.html:4960,recover,recover,4960,doc/master/classRooMinimizer.html,https://root.cern,https://root.cern/doc/master/classRooMinimizer.html,1,['recover'],['recover']
Availability,"mizer(). TFumiliMinimizer::TFumiliMinimizer ; (; int ; dummy = 0). Default constructor (an argument is needed by plug-in manager) ; Definition at line 137 of file TFumiliMinimizer.cxx. ◆ ~TFumiliMinimizer(). TFumiliMinimizer::~TFumiliMinimizer ; (; ). override . Destructor (no operations) ; Definition at line 160 of file TFumiliMinimizer.cxx. Member Function Documentation. ◆ Class(). static TClass * TFumiliMinimizer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TFumiliMinimizer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TFumiliMinimizer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 162 of file TFumiliMinimizer.h. ◆ CovMatrix(). double TFumiliMinimizer::CovMatrix ; (; unsigned int ; i, . unsigned int ; j . ); const. inlineoverridevirtual . return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 116 of file TFumiliMinimizer.h. ◆ CovMatrixStatus(). int TFumiliMinimizer::CovMatrixStatus ; (; ); const. inlineoverridevirtual . return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 123 of file TFumiliMinimizer.h. ◆ DeclFileName(). static const char * TFumiliMinimizer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 162 of file TFumiliMinimizer.h. ◆ Edm(). double TFumiliMinimizer::Edm ; (; ); const. inlineoverridevirtual . return expected distance reached from the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 87 of file TFumiliMinimizer.h. ◆ Errors(). const double * TFumiliM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumiliMinimizer.html:12379,error,errors,12379,doc/master/classTFumiliMinimizer.html,https://root.cern,https://root.cern/doc/master/classTFumiliMinimizer.html,1,['error'],['errors']
Availability,"mizer.h:344; ROOT::Math::Minimizer::ProvidesErrorvirtual bool ProvidesError() constminimizer provides error and error matrixDefinition Minimizer.h:243; ROOT::Math::Minimizer::FixVariablevirtual bool FixVariable(unsigned int ivar)fix an existing variableDefinition Minimizer.cxx:87; ROOT::Math::Minimizer::SetPrecisionvoid SetPrecision(double prec)set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer wi...Definition Minimizer.h:341; ROOT::Math::Minimizer::Optionsvirtual MinimizerOptions Options() constretrieve the minimizer options (implement derived class if needed)Definition Minimizer.h:323; ROOT::Math::Minimizer::Correlationvirtual double Correlation(unsigned int i, unsigned int j) constreturn correlation coefficient between variable i and j.Definition Minimizer.h:264; ROOT::Math::Minimizer::~Minimizervirtual ~Minimizer()Destructor (no operations).Definition Minimizer.h:127; ROOT::Math::Minimizer::ErrorDefdouble ErrorDef() constreturn the statistical scale used for calculate the error is typically 1 for Chi2 and 0....Definition Minimizer.h:317; ROOT::Math::Minimizer::fOptionsMinimizerOptions fOptionsminimizer optionsDefinition Minimizer.h:370; ROOT::Math::Minimizer::operator=Minimizer & operator=(Minimizer const &)=delete; ROOT::Math::Minimizer::SetFixedVariablevirtual bool SetFixedVariable(unsigned int ivar, const std::string &name, double val)set a new fixed variable (override if minimizer supports them )Definition Minimizer.cxx:44; ROOT::Math::Minimizer::SetMaxFunctionCallsvoid SetMaxFunctionCalls(unsigned int maxfcn)set maximum of function callsDefinition Minimizer.h:331; ROOT::Math::Minimizer::IsValidErrorbool IsValidError() constreturn true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit)Definition Minimizer.h:320; ROOT::Math::Minimizer::Edmvirtual double Edm() constreturn expected distance reached from the minimum (re-implement if minimizer provides itDefinition Minimizer.h:222; ROO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Minimizer_8h_source.html:29047,error,error,29047,doc/master/Minimizer_8h_source.html,https://root.cern,https://root.cern/doc/master/Minimizer_8h_source.html,1,['error'],['error']
Availability,"ml#distributed.Client) is not; 739provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine; 740using all cores available.; 741 ; 742### Choosing the number of distributed tasks; 743 ; 744A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending; 745tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but; 746generically tries to infer how many cores are available in the cluster through the connection object. The number of; 747tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend; 748doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to; 749a batch system. The client object created at the beginning of the application does not automatically know how many cores; 750will be available during distributed execution, since the jobs are submitted to the batch system after the creation of; 751the connection. In such cases, the logic is to default to process the whole dataset in 2 tasks.; 752 ; 753The number of tasks submitted for distributed execution can be also set programmatically, by providing the optional; 754keyword argument `npartitions` when creating the RDataFrame object. This parameter is accepted irrespectively of the; 755backend used:; 756 ; 757~~~{.py}; 758import ROOT; 759 ; 760# Define correct imports and access the distributed RDataFrame appropriate for the; 761# backend used in the analysis; 762RDataFrame = ROOT.RDF.Experimental.Distributed.[BACKEND].RDataFrame; 763 ; 764if __name__ == ""__main__"":; 765 # The `npartitions` optional argument tells the RDataFrame how many tasks are desired; 766 df = RDataFrame(""mytree"",""myfile.root"", npartitions=NPARTITIONS); 767 # Proceed as usual; 768 df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10),",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:43556,avail,available,43556,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['avail'],['available']
Availability,"ml#distributed.Client) is not; 779provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine; 780using all cores available.; 781 ; 782### Choosing the number of distributed tasks; 783 ; 784A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending; 785tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but; 786generically tries to infer how many cores are available in the cluster through the connection object. The number of; 787tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend; 788doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to; 789a batch system. The client object created at the beginning of the application does not automatically know how many cores; 790will be available during distributed execution, since the jobs are submitted to the batch system after the creation of; 791the connection. In such cases, the logic is to default to process the whole dataset in 2 tasks.; 792 ; 793The number of tasks submitted for distributed execution can be also set programmatically, by providing the optional; 794keyword argument `npartitions` when creating the RDataFrame object. This parameter is accepted irrespectively of the; 795backend used:; 796 ; 797~~~{.py}; 798import ROOT; 799 ; 800# Define correct imports and access the distributed RDataFrame appropriate for the; 801# backend used in the analysis; 802RDataFrame = ROOT.RDF.Experimental.Distributed.[BACKEND].RDataFrame; 803 ; 804if __name__ == ""__main__"":; 805 # The `npartitions` optional argument tells the RDataFrame how many tasks are desired; 806 df = RDataFrame(""mytree"",""myfile.root"", npartitions=NPARTITIONS); 807 # Proceed as usual; 808 df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10),",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:45196,avail,available,45196,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['avail'],['available']
Availability,"ml; CERNLIB https://cern-tex.web.cern.ch/cern-tex/shortwrupsdir/c346/top.html; while the latter is used by. Abramowitz and Stegun; Mathematica http://mathworld.wolfram.com/EllipticIntegraloftheThirdKind.html; C++ standard http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1687.pdf; in order to be C++ compliant, we decided to use the latter, hence the change of the sign in the function call to GSL. . Definition at line 276 of file SpecFuncMathMore.cxx. ◆ erf(). double ROOT::Math::erf ; (; double ; x). Error function encountered in integrating the normal distribution. . \[ erf(x) = \frac{2}{\sqrt{\pi}} \int_{0}^{x} e^{-t^2} dt \]. For detailed description see Mathworld. The implementation used is that of GSL. This function is provided only for convenience, in case your standard C++ implementation does not support it. If it does, please use these standard version! ; Definition at line 59 of file SpecFuncMathCore.cxx. ◆ erfc(). double ROOT::Math::erfc ; (; double ; x). Complementary error function. . \[ erfc(x) = 1 - erf(x) = \frac{2}{\sqrt{\pi}} \int_{x}^{\infty} e^{-t^2} dt \]. For detailed description see Mathworld. The implementation used is that of Cephes from S. Moshier. ; Definition at line 44 of file SpecFuncMathCore.cxx. ◆ expint(). double ROOT::Math::expint ; (; double ; x). Calculates the exponential integral. . \[ Ei(x) = - \int_{-x}^{\infty} \frac{e^{-t}}{t} dt \]. For detailed description see Mathworld. The implementation used is that of GSL. ; Definition at line 287 of file SpecFuncMathMore.cxx. ◆ expint_n(). double ROOT::Math::expint_n ; (; int ; n, . double ; x . ). Definition at line 296 of file SpecFuncMathMore.cxx. ◆ hyperg(). double ROOT::Math::hyperg ; (; double ; a, . double ; b, . double ; c, . double ; x . ). Calculates Gauss' hypergeometric function. . \[ _{2}F_{1}(a,b;c;x) = \frac{\Gamma(c)}{\Gamma(a) \Gamma(b)} \sum_{n=0}^{\infty} \frac{\Gamma(a+n)\Gamma(b+n)}{\Gamma(c+n)} \frac{x^n}{n!} \]. For detailed description see Mathworld. The i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__SpecFunc.html:21131,error,error,21131,doc/master/group__SpecFunc.html,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html,1,['error'],['error']
Availability,"mlink from file1 to file2. ; Returns 0 when successful, -1 in case of failure. ; Reimplemented from TSystem.; Definition at line 2826 of file TWinNTSystem.cxx. ◆ TempDirectory(). const char * TWinNTSystem::TempDirectory ; (; ); const. overridevirtual . Return a user configured or systemwide directory to create temporary files in. ; Reimplemented from TSystem.; Definition at line 2257 of file TWinNTSystem.cxx. ◆ TempFileName(). FILE * TWinNTSystem::TempFileName ; (; TString & ; base, . const char * ; dir = nullptr, . const char * ; suffix = nullptr . ). overridevirtual . Create a secure temporary file by appending a unique 6 letter string to base. ; The file will be created in a standard (system) directory or in the directory provided in dir. Optionally one can provide suffix append to the final name - like extension "".txt"" or "".html"". The full filename is returned in base and a filepointer is returned for safely writing to the file (this avoids certain security problems). Returns 0 in case of error. ; Reimplemented from TSystem.; Definition at line 2281 of file TWinNTSystem.cxx. ◆ ThreadStub(). static void TWinNTSystem::ThreadStub ; (; void * ; Parameter). inlinestaticprivate . Definition at line 88 of file TWinNTSystem.h. ◆ TimerThread(). void TWinNTSystem::TimerThread ; (; ). private . Special Thread to check asynchronous timers. ; Definition at line 4442 of file TWinNTSystem.cxx. ◆ Umask(). int TWinNTSystem::Umask ; (; Int_t ; mask). overridevirtual . Set the process file creation mode mask. ; Reimplemented from TSystem.; Definition at line 3081 of file TWinNTSystem.cxx. ◆ UnixPathName(). const char * TWinNTSystem::UnixPathName ; (; const char * ; name). overridevirtual . Convert a pathname to a unix pathname. ; E.g. from \user\root to /user/root. General rules for applications creating names for directories and files or processing names supplied by the user include the following:. Use any character in the current code page for a name, but do not use a path separ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWinNTSystem.html:73561,error,error,73561,doc/master/classTWinNTSystem.html,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html,1,['error'],['error']
Availability,"mmErrors destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t z, Double_t exl=0., Double_t exh=0., Double_t eyl=0., Double_t eyh=0., Double_t ezl=0., Double_t ezh=0.);  Add a 3D point with asymmetric errorbars to an existing graph. ;  ; Double_t GetErrorX (Int_t bin) const override;  Returns the combined error along X at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorXhigh (Int_t i) const;  Returns the high error along X at point i. ;  ; Double_t GetErrorXlow (Int_t i) const;  Returns the low error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const;  Returns the high error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t i) const;  Returns the low error along Y at point i. ;  ; Double_t GetErrorZ (Int_t bin) const override;  Returns the combined error along Z at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorZhigh (Int_t i) const;  Returns the high error along Z at point i. ;  ; Double_t GetErrorZlow (Int_t i) const;  Returns the low error along Z at point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEZhigh () const override;  ; Double_t * GetEZlow () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;  ; Double_t GetYmaxE () const override;  Returns the Y maximum with errors. ;  ; Double_t GetYminE () const override;  Returns the Y minimum with errors. ;  ; Double_t GetZmaxE () const override;  Returns the Z maximum with errors. ;  ; Double_t GetZminE () const override;  Returns the Z minimum with errors. ;  ; TClass * IsA () c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DAsymmErrors.html:4680,error,error,4680,doc/master/classTGraph2DAsymmErrors.html,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html,1,['error'],['error']
Availability,mma;  ! Array gamma. ;  ; TH1 * fHistogram {nullptr};  ! Pointer to histogram used for visualisation ;  ; std::vector< Double_t > fIntegral;  ! Integral of function binned on fNpx bins ;  ; Double_t fMaximum {-1111};  Maximum value for plotting. ;  ; std::unique_ptr< TMethodCall > fMethodCall;  ! Pointer to MethodCall in case of interpreted function ;  ; Double_t fMinimum {-1111};  Minimum value for plotting. ;  ; Int_t fNDF {};  Number of degrees of freedom in the fit. ;  ; Int_t fNdim {};  Function dimension. ;  ; Bool_t fNormalized {false};  Normalization option (false by default) ;  ; Double_t fNormIntegral {};  Integral of the function before being normalized. ;  ; Int_t fNpar {};  Number of parameters. ;  ; Int_t fNpfits {};  Number of points used in the fit. ;  ; Int_t fNpx {100};  Number of points used for the graphical representation. ;  ; std::unique_ptr< TF1Parameters > fParams;  Pointer to Function parameters object (exists only for not-formula functions) ;  ; TObject * fParent {nullptr};  ! Parent object hooking this function (if one) ;  ; std::vector< Double_t > fParErrors;  Array of errors of the fNpar parameters. ;  ; std::vector< Double_t > fParMax;  Array of upper limits of the fNpar parameters. ;  ; std::vector< Double_t > fParMin;  Array of lower limits of the fNpar parameters. ;  ; std::vector< Double_t > fSave;  Array of fNsave function values. ;  ; EFType fType {EFType::kTemplScalar};  ; Double_t fXmax {-1111};  Upper bounds for the range. ;  ; Double_t fXmin {-1111};  Lower bounds for the range. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Mar,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:47399,error,errors,47399,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,4,['error'],['errors']
Availability,"mma_fparameters associated with the step length heuristic; Int_tfMaxitmaximum number of iterations allowed; Double_t*fMu_history[fMaxit] history of values of mu obtained on all iterations to date; Double_tfMutoltermination parameters; Double_tfPhimerit function, defined as the sum of the complementarity gap; Double_t*fPhi_history[fMaxit] history of values of phi obtained on all iterations to date; Double_t*fPhi_min_history[fMaxit] the i-th entry of this array contains the minimum value of phi; Double_t*fRnorm_history[fMaxit] history of values of residual norm obtained on all iterations to date; TQpLinSolverBase*fSys. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TQpSolverBase(); Deconstructor. void Start(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Implements a default starting-point heuristic. While interior-point theory; places fairly loose restrictions on the choice of starting point, the choice; of heuristic can significantly affect the robustness and efficiency of the; algorithm. void DefStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Default starting point. void SteveStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Starting point algoritm according to Stephen Wright. void DumbStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Alternative starting point heuristic: sets the ""complementary"" variables to a large; positive value (based on the norm of the problem data) and the remaining variables; to zero . Double_t FinalStepLength(TQpVar* iterate, TQpVar* step); Implements a version of Mehrotra starting point heuristic,; modified to ensure identical steps in the primal and dual variables. void DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQpSolverBase.html:7876,robust,robustness,7876,root/html528/TQpSolverBase.html,https://root.cern,https://root.cern/root/html528/TQpSolverBase.html,4,['robust'],['robustness']
Availability,"mming only over the dimensions specified in sumSet. ;  ; double sum (const RooArgSet &sumSet, const RooArgSet &sliceSet, bool correctForBinSize, bool inverseCorr=false);  Return the sum of the weights of a multi-dimensional slice of the histogram by summing only over the dimensions specified in sumSet. ;  ; double sumEntries () const override;  Sum the weights of all bins. ;  ; double sumEntries (const char *cutSpec, const char *cutRange=nullptr) const override;  Return the sum of weights in all entries matching cutSpec (if specified) and in named range cutRange (if specified) Return the. ;  ; double const * sumW2Array () const;  ; double weight (const RooArgSet &bin, Int_t intOrder=1, bool correctForBinSize=false, bool cdfBoundaries=false, bool oneSafe=false);  Return the weight at given coordinates with optional interpolation. ;  ; double weight (std::size_t i) const;  Return weight of i-th bin. ;  ; double const * weightArray () const;  ; void weightError (double &lo, double &hi, ErrorType etype=Poisson) const override;  Return the asymmetric errors on the current weight. ;  ; double weightError (ErrorType etype=Poisson) const override;  Return the symmetric error on the current weight. ;  ; double weightFast (const RooArgSet &bin, int intOrder, bool correctForBinSize, bool cdfBoundaries);  A faster version of RooDataHist::weight that assumes the passed arguments are aligned with the histogram variables. ;  ; void weights (double *output, std::span< double const > xVals, int intOrder, bool correctForBinSize, bool cdfBoundaries);  A vectorized version of RooDataHist::weight() for one dimensional histograms with up to one dimensional interpolation. ;  ; double weightSquared (std::size_t i) const;  Return squared weight sum of i-th bin. ;  ; double const * wgtErrHiArray () const;  ; double const * wgtErrLoArray () const;  ; Deprecated functions; These functions rely on the fact that an event has been loaded before they are called.; It is advised to switch to their co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataHist.html:10509,error,errors,10509,doc/master/classRooDataHist.html,https://root.cern,https://root.cern/doc/master/classRooDataHist.html,1,['error'],['errors']
Availability,"mmon task, ROOT provides a utility that generates a skeleton class designed to loop over the entries of the tree.; This is the TTree::MakeClass method. We will now go through the steps of using MakeClass with a simplified example. The methods used here obviously work for complex event loop calculations.; These are our assumptions: we would like to do selective plotting and loop through each entry of the tree and tracks. We chose a simple example: we want to plot fPx of the first 100 tracks of each entry. We have a ROOT tree with a branch for each data member in the “Event” object. To build this file and tree follow the instructions on how to build the examples in $ROOTSYS/test. Execute Event and instruct it to split the object with this command (from the UNIX command line).; > $ROOTSYS/test/Event 400 1 2 1; This creates an Event.root file with 400 events, compressed, split, and filled.; See $ROOTSYS/test/MainEvent.cxx for more info.; The person who designed the tree makes a shared library available to you, which defines the classes needed. In this case, the classes are Event, EventHeader, and Track and they are defined in the shared library libEvent.so. The designer also gives you the Event.h file to see the definition of the classes. You can locate Event.h in $ROOTSYS/test, and if you have not yet built libEvent.so, please see the instructions of how to build it (typing make in $ROOTSYS/test is enough). If you have already built it, you can now use it again.; 12.21.1 Creating a Class with MakeClass; First, we load the shared library and open Event.root.; root[] .L libEvent.so; root[] TFile *f = new TFile(""Event.root"");; root[] f->ls();; TFile** Event.root TTree benchmark ROOT file; TFile* Event.root TTree benchmark ROOT file; KEY: TH1F htime;1 Real-Time to write versus time; KEY: TTree T;1 An example of a ROOT tree; We can see there is a tree “T”, and just to verify that we are working with the correct one, we print the tree, which will show us the header and branch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:635218,avail,available,635218,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avail'],['available']
Availability,"mmxw XRD_REAL64; vmemmxm XRD_REAL64; rmemmxm XRD_REAL64; numfiles XRD_REAL64; dataset XRD_STRING. Version 0 contains the following information; ('group' instead of 'proofgroup'; no 'vmemmxw',; 'rmemmxw', 'vmemmxm', 'rmemmxm', 'numfiles', 'dataset'). user XRD_STRING; group XRD_STRING; begin XRD_STRING; end XRD_STRING; walltime XRD_REAL64; cputime XRD_REAL64; bytesread XRD_REAL64; events XRD_REAL64; totevents XRD_REAL64; workers XRD_REAL64. Return 0 on success, -1 on any failure. Int_t SendDataSetInfo(TDSet* , TList* , const char* , const char* ); Post information about the processed dataset(s). The information is taken; from the TDSet object 'dset' and integrated with the missing files; information in the list 'missing'. The string 'qid' is the uninque; ID of the query; 'begin' the starting time. The records sent by this call will appear with ids 'dataset_<dataset_name_hash>'. There are two versions of this record, with or without the starting time.; The starting time could be looked up from the summary record, if available. The default version 1 contains the following information:. dsn XRD_STRING; querytag XRD_STRING; querybegin XRD_STRING; numfiles XRD_REAL64; missfiles XRD_REAL64. Version 0 contains the following information:; (no 'querybegin'). dsn XRD_STRING; querytag XRD_STRING; numfiles XRD_REAL64; missfiles XRD_REAL64. The information is posted with a bulk insert. Returns 0 on success, -1 on failure. Int_t SendFileInfo(TDSet* , TList* , const char* , const char* ); Post information about the requested files. The information is taken; from the TDSet object 'dset' and integrated with the missing files; information in the list 'missing'. The string 'qid' is the unique; ID of the query; 'begin' the starting time. The records sent by this call will appear with ids 'file_<file_name_hash>'. There are two versions of this record, with or without the starting time.; The starting time could be looked up from the summary record, if available. The default version 1 contai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofMonSenderML.html:9137,avail,available,9137,root/html602/TProofMonSenderML.html,https://root.cern,https://root.cern/root/html602/TProofMonSenderML.html,2,['avail'],['available']
Availability,"mmy object (used for bookeeping); TObjArrayfErrorOnBackgroundpacked error sources for background; TObjArrayfErrorOnSignalpacked error sources for signal; TObjArrayfIdspacked IDs for the different error sources; TObjArrayfSignalpacked input signal. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLimitDataSource(); Default constructor. TLimitDataSource(TH1* s, TH1* b, TH1* d); Another constructor, directly adds one channel; with signal, background and data given as input. TLimitDataSource(TH1* s, TH1* b, TH1* d, TVectorD* es, TVectorD* eb, TObjArray* names); Another constructor, directly adds one channel; with signal, background and data given as input. void AddChannel(TH1* , TH1* , TH1* ); Adds a channel with signal, background and data given as input. void AddChannel(TH1* , TH1* , TH1* , TVectorD* , TVectorD* , TObjArray* ); Adds a channel with signal, background and data given as input.; In addition, error sources are defined.; TH1 are here used for convenience: each bin has to be seen as; an error source (relative).; names is an array of strings containing the names of the sources.; Sources with the same name are correlated. void SetOwner(bool swtch = kTRUE); Gives to the TLimitDataSource the ownership of the various objects; given as input.; Objects are then deleted by the TLimitDataSource destructor. virtual ~TLimitDataSource(); {}. TObjArray* GetSignal(); { return &fSignal;}. TObjArray* GetBackground(); { return &fBackground;}. TObjArray* GetCandidates(); { return &fCandidates;}. TObjArray* GetErrorOnSignal(); { return &fErrorOnSignal;}. TObjArray* GetErrorOnBackground(); { return &fErrorOnBackground;}. TObjArray* GetErrorNames(); { return &fIds;}. » Last changed: root/hist:$Id: TLimitDataSource.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-30 18:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLimitDataSource.html:6835,error,error,6835,root/html528/TLimitDataSource.html,https://root.cern,https://root.cern/root/html528/TLimitDataSource.html,1,['error'],['error']
Availability,"mmy object (used for bookeeping); TObjArrayfErrorOnBackgroundpacked error sources for background; TObjArrayfErrorOnSignalpacked error sources for signal; TObjArrayfIdspacked IDs for the different error sources; TObjArrayfSignalpacked input signal. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLimitDataSource(); Default constructor. TLimitDataSource(TH1* s, TH1* b, TH1* d); Another constructor, directly adds one channel; with signal, background and data given as input. TLimitDataSource(TH1* s, TH1* b, TH1* d, TVectorD* es, TVectorD* eb, TObjArray* names); Another constructor, directly adds one channel; with signal, background and data given as input. void AddChannel(TH1* , TH1* , TH1* ); Adds a channel with signal, background and data given as input. void AddChannel(TH1* , TH1* , TH1* , TVectorD* , TVectorD* , TObjArray* ); Adds a channel with signal, background and data given as input.; In addition, error sources are defined.; TH1 are here used for convenience: each bin has to be seen as; an error source (relative).; names is an array of strings containing the names of the sources.; Sources with the same name are correlated. void SetOwner(bool swtch = kTRUE); Gives to the TLimitDataSource the ownership of the various objects; given as input.; Objects are then deleted by the TLimitDataSource destructor. virtual ~TLimitDataSource(); {}. TObjArray* GetSignal(); { return &fSignal;}. TObjArray* GetBackground(); { return &fBackground;}. TObjArray* GetCandidates(); { return &fCandidates;}. TObjArray* GetErrorOnSignal(); { return &fErrorOnSignal;}. TObjArray* GetErrorOnBackground(); { return &fErrorOnBackground;}. TObjArray* GetErrorNames(); { return &fIds;}. » Last changed: root/hist:$Id: TLimitDataSource.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TLimitDataSource.html:6904,error,error,6904,root/html530/TLimitDataSource.html,https://root.cern,https://root.cern/root/html530/TLimitDataSource.html,1,['error'],['error']
Availability,"mmy object (used for bookeeping); TObjArrayfErrorOnBackgroundpacked error sources for background; TObjArrayfErrorOnSignalpacked error sources for signal; TObjArrayfIdspacked IDs for the different error sources; TObjArrayfSignalpacked input signal. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLimitDataSource(); Default constructor. TLimitDataSource(TH1* s, TH1* b, TH1* d); Another constructor, directly adds one channel; with signal, background and data given as input. TLimitDataSource(TH1* s, TH1* b, TH1* d, TVectorD* es, TVectorD* eb, TObjArray* names); Another constructor, directly adds one channel; with signal, background and data given as input. void AddChannel(TH1* , TH1* , TH1* ); Adds a channel with signal, background and data given as input. void AddChannel(TH1* , TH1* , TH1* , TVectorD* , TVectorD* , TObjArray* ); Adds a channel with signal, background and data given as input.; In addition, error sources are defined.; TH1 are here used for convenience: each bin has to be seen as; an error source (relative).; names is an array of strings containing the names of the sources.; Sources with the same name are correlated. void SetOwner(bool swtch = kTRUE); Gives to the TLimitDataSource the ownership of the various objects; given as input.; Objects are then deleted by the TLimitDataSource destructor. virtual ~TLimitDataSource(); {}. TObjArray* GetSignal(); { return &fSignal;}. TObjArray* GetBackground(); { return &fBackground;}. TObjArray* GetCandidates(); { return &fCandidates;}. TObjArray* GetErrorOnSignal(); { return &fErrorOnSignal;}. TObjArray* GetErrorOnBackground(); { return &fErrorOnBackground;}. TObjArray* GetErrorNames(); { return &fIds;}. » Last changed: root/hist:$Id: TLimitDataSource.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TLimitDataSource.html:6904,error,error,6904,root/html532/TLimitDataSource.html,https://root.cern,https://root.cern/root/html532/TLimitDataSource.html,1,['error'],['error']
Availability,"mn(wFunc); ; # Dataset d is now a dataset with two observable (x,w) with 1000 entries; data.Print(); ; # Instruct dataset wdata in interpret w as event weight rather than as; # observable; wdata = ROOT.RooDataSet(data.GetName(), data.GetTitle(), data, data.get(), """", w.GetName()); ; # Dataset d is now a dataset with one observable (x) with 1000 entries and; # a sum of weights of ~430K; wdata.Print(); ; # Unbinned ML fit to weighted data; # ---------------------------------------------------------------; ; # Construction quadratic polynomial pdf for fitting; a0 = ROOT.RooRealVar(""a0"", ""a0"", 1); a1 = ROOT.RooRealVar(""a1"", ""a1"", 0, -1, 1); a2 = ROOT.RooRealVar(""a2"", ""a2"", 1, 0, 10); p2 = ROOT.RooPolynomial(""p2"", ""p2"", x, [a0, a1, a2], 0); ; # Fit quadratic polynomial to weighted data; ; # NOTE: A plain Maximum likelihood fit to weighted data does in general; # NOT result in correct error estimates, individual; # event weights represent Poisson statistics themselves.; #; # Fit with 'wrong' errors; r_ml_wgt = p2.fitTo(wdata, Save=True, PrintLevel=-1); ; # A first order correction to estimated parameter errors in an; # (unbinned) ML fit can be obtained by calculating the; # covariance matrix as; #; # V' = V C-1 V; #; # where V is the covariance matrix calculated from a fit; # to -logL = - sum [ w_i log f(x_i) ] and C is the covariance; # matrix calculated from -logL' = -sum [ w_i^2 log f(x_i) ]; # (i.e. the weights are applied squared); #; # A fit in self mode can be performed as follows:; ; r_ml_wgt_corr = p2.fitTo(wdata, Save=True, SumW2Error=True, PrintLevel=-1); ; # Plot weighted data and fit result; # ---------------------------------------------------------------; ; # Construct plot frame; frame = x.frame(Title=""Unbinned ML fit, chi^2 fit to weighted data""); ; # Plot data using sum-of-weights-squared error rather than Poisson errors; wdata.plotOn(frame, DataError=""SumW2""); ; # Overlay result of 2nd order polynomial fit to weighted data; p2.plotOn(frame); ; # ML fit ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf403__weightedevts_8py.html:2006,error,errors,2006,doc/master/rf403__weightedevts_8py.html,https://root.cern,https://root.cern/doc/master/rf403__weightedevts_8py.html,1,['error'],['errors']
Availability,"mnNames_t & ; defaultColumns = {} . ). ◆ RDataFrame() [5/10]. ROOT::RDataFrame::RDataFrame ; (; TTree & ; tree, . const ColumnNames_t & ; defaultColumns = {} . ). Build the dataframe. ; Parameters. [in]treeThe tree or chain to be studied. ; [in]defaultColumnsCollection of default column names to fall back to when none is specified. The default columns are looked at in case no column is specified in the booking of actions or transformations. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1630 of file RDataFrame.cxx. ◆ RDataFrame() [6/10]. ROOT::RDataFrame::RDataFrame ; (; ULong64_t ; numEntries). Build a dataframe that generates numEntries entries. ; Parameters. [in]numEntriesThe number of entries to generate. An empty-source dataframe constructed with a number of entries will generate those entries on the fly when some action is triggered, and it will do so for all the previously-defined columns. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1643 of file RDataFrame.cxx. ◆ RDataFrame() [7/10]. ROOT::RDataFrame::RDataFrame ; (; std::unique_ptr< ROOT::RDF::RDataSource > ; ds, . const ColumnNames_t & ; defaultColumns = {} . ). Build dataframe associated to data source. ; Parameters. [in]dsThe data source object. ; [in]defaultColumnsCollection of default column names to fall back to when none is specified. A dataframe associated to a data source will query it to access column values. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1656 of file RDataFrame.cxx. ◆ RDataFrame() [8/10]. ROOT::RDataFrame::RDataFrame ; (; ROOT::RDF::Experimental::RDatasetSpec ; spec). Build dataframe from an RDatasetSpec object. ; Parameters. [in]specThe dataset specification object. A dataset specification includes trees and file names, as well as an optional friend list and/or entry range. Example usage from Python:; spec = (; ROOT.RDF.Exp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:109214,avail,available,109214,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,1,['avail'],['available']
Availability,"mnNames_t & ; defaultColumns = {} . ). ◆ RDataFrame() [5/10]. ROOT::RDataFrame::RDataFrame ; (; TTree & ; tree, . const ColumnNames_t & ; defaultColumns = {} . ). Build the dataframe. ; Parameters. [in]treeThe tree or chain to be studied. ; [in]defaultColumnsCollection of default column names to fall back to when none is specified. The default columns are looked at in case no column is specified in the booking of actions or transformations. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1807 of file RDataFrame.cxx. ◆ RDataFrame() [6/10]. ROOT::RDataFrame::RDataFrame ; (; ULong64_t ; numEntries). Build a dataframe that generates numEntries entries. ; Parameters. [in]numEntriesThe number of entries to generate. An empty-source dataframe constructed with a number of entries will generate those entries on the fly when some action is triggered, and it will do so for all the previously-defined columns. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1820 of file RDataFrame.cxx. ◆ RDataFrame() [7/10]. ROOT::RDataFrame::RDataFrame ; (; std::unique_ptr< ROOT::RDF::RDataSource > ; ds, . const ColumnNames_t & ; defaultColumns = {} . ). Build dataframe associated to data source. ; Parameters. [in]dsThe data source object. ; [in]defaultColumnsCollection of default column names to fall back to when none is specified. A dataframe associated to a data source will query it to access column values. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1833 of file RDataFrame.cxx. ◆ RDataFrame() [8/10]. ROOT::RDataFrame::RDataFrame ; (; ROOT::RDF::Experimental::RDatasetSpec ; spec). Build dataframe from an RDatasetSpec object. ; Parameters. [in]specThe dataset specification object. A dataset specification includes trees and file names, as well as an optional friend list and/or entry range. Example usage from Python:; spec = (; ROOT.RDF.Exp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDataFrame.html:116581,avail,available,116581,doc/master/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html,1,['avail'],['available']
Availability,"mns using custom variation tags.; 917 /// \param[in] colNames set of names of the columns for which varied values are provided.; 918 /// \param[in] expression a callable that evaluates the varied values for the specified columns. The callable can; 919 /// take any column values as input, similarly to what happens during Filter and Define calls. It must; 920 /// return an RVec of varied values, one for each variation tag, in the same order as the tags.; 921 /// \param[in] inputColumns the names of the columns to be passed to the callable.; 922 /// \param[in] variationTags names for each of the varied values, e.g. `""up""` and `""down""`.; 923 /// \param[in] variationName a generic name for this set of varied values, e.g. `""ptvariation""`; 924 ///; 925 /// This overload of Vary takes a list of column names as first argument and; 926 /// requires that the expression returns an RVec of RVecs of values: one inner RVec for the variations of each; 927 /// affected column. The `variationTags` are defined as `{""down"", ""up""}`.; 928 ///; 929 /// Example usage:; 930 /// ~~~{.cpp}; 931 /// // produce variations ""ptAndEta:down"" and ""ptAndEta:up""; 932 /// auto nominal_hx =; 933 /// df.Vary({""pt"", ""eta""}, // the columns that will vary simultaneously; 934 /// [](double pt, double eta) { return RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}; },; 935 /// {""pt"", ""eta""}, // inputs to the Vary expression, independent of what columns are varied; 936 /// {""down"", ""up""}, // variation tags; 937 /// ""ptAndEta"") // variation name; 938 /// .Histo1D(""pt"", ""eta"");; 939 ///; 940 /// auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; 941 /// hx[""nominal""].Draw();; 942 /// hx[""ptAndEta:down""].Draw(""SAME"");; 943 /// hx[""ptAndEta:up""].Draw(""SAME"");; 944 /// ~~~; 945 ///; 946 /// \sa This Vary() overload for more information.; 947 ; 948 template <typename F>; 949 RInterface<Proxied, DS_t>; 950 Vary(const std::vector<std::string> &colNames, F &&expression, const ColumnNames_t &inputColumns,; 95",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:50403,down,down,50403,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['down'],['down']
Availability,"mode and recalculate summed errors.; 2007void TGraphMultiErrors::SetSumErrorsMode(Int_t m); 2008{; 2009 if (fSumErrorsMode == m); 2010 return;; 2011 fSumErrorsMode = m;; 2012 CalcYErrorsSum();; 2013}; 2014 ; 2015////////////////////////////////////////////////////////////////////////////////; 2016/// Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors).; 2017 ; 2018void TGraphMultiErrors::SetAttFill(Int_t e, TAttFill *taf); 2019{; 2020 if (e == -1); 2021 taf->TAttFill::Copy(*this);; 2022 else if (e >= 0 && e < fNYErrors); 2023 taf->TAttFill::Copy(fAttFill[e]);; 2024}; 2025 ; 2026////////////////////////////////////////////////////////////////////////////////; 2027/// Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors).; 2028 ; 2029void TGraphMultiErrors::SetAttLine(Int_t e, TAttLine *taf); 2030{; 2031 if (e == -1); 2032 taf->TAttLine::Copy(*this);; 2033 else if (e >= 0 && e < fNYErrors); 2034 taf->TAttLine::Copy(fAttLine[e]);; 2035}; 2036 ; 2037////////////////////////////////////////////////////////////////////////////////; 2038/// Set Fill Color of error e (-1 = Global and x errors).; 2039 ; 2040void TGraphMultiErrors::SetFillColor(Int_t e, Color_t fcolor); 2041{; 2042 if (e == -1); 2043 SetFillColor(fcolor);; 2044 else if (e >= 0 && e < fNYErrors); 2045 fAttFill[e].SetFillColor(fcolor);; 2046}; 2047 ; 2048////////////////////////////////////////////////////////////////////////////////; 2049/// Set Fill Color and Alpha of error e (-1 = Global and x errors).; 2050 ; 2051void TGraphMultiErrors::SetFillColorAlpha(Int_t e, Color_t fcolor, Float_t falpha); 2052{; 2053 if (e == -1); 2054 SetFillColorAlpha(fcolor, falpha);; 2055 else if (e >= 0 && e < fNYErrors); 2056 fAttFill[e].SetFillColorAlpha(fcolor, falpha);; 2057}; 2058 ; 2059////////////////////////////////////////////////////////////////////////////////; 2060/// Set Fill Style of error e (-1 = Global and x errors).; 2061 ; 2062v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:68582,error,error,68582,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,2,['error'],"['error', 'errors']"
Availability,"mode.; The parameter mode can be = pcev (default = 0111); p = 1; print Probability; c = 1; print Chisquare/Number of degrees of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters; Example: gStyle->SetOptFit(1011);; print fit probability, parameter names/values and errors.; When ""v""=1 is specified, only the non-fixed parameters are shown.; When ""v""=2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent to; gStyle->SetOptFit(111). see also SetOptStat below. void SetOptStat(Int_t stat = 1); The type of information printed in the histogram statistics box; can be selected via the parameter mode.; The parameter mode can be = ksiourmen (default = 000001111); k = 1; kurtosis printed; k = 2; kurtosis and kurtosis error printed; s = 1; skewness printed; s = 2; skewness and skewness error printed; i = 1; integral of bins printed; i = 2; integral of bins with option ""width"" printed; o = 1; number of overflows printed; u = 1; number of underflows printed; r = 1; rms printed; r = 2; rms and rms error printed; m = 1; mean value printed; m = 2; mean and mean error values printed; e = 1; number of entries printed; n = 1; name of histogram is printed; Example: gStyle->SetOptStat(11);; print only name of histogram and number of entries.; gStyle->SetOptStat(1101); displays the name of histogram, mean value and RMS.; WARNING: never call SetOptStat(000111); but SetOptStat(1111), 0001111 will; be taken as an octal number !!; WARNING: SetOptStat(1) is taken as SetOptStat(1111) (for back compatibility; with older versions. If you want to print only the name of the histogram; call SetOptStat(1000000001).; NOTE that in case of 2-D histograms, when selecting just underflow (10000); or overflow (100000), the stats box will show all combinations; of underflow/overflows and not just one single number!. void SetOptStat(Option_t* stat); The parameter mode can be any combination of kKsSiourRmMen; k : kurtosis printed;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TStyle.html:34324,error,error,34324,root/html604/TStyle.html,https://root.cern,https://root.cern/root/html604/TStyle.html,4,['error'],['error']
Availability,"mode.; The parameter mode can be = pcev (default = 0111); p = 1; print Probability; c = 1; print Chisquare/Number of degress of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters; Example: gStyle->SetOptFit(1011);; print fit probability, parameter names/values and errors.; When ""v""=1 is specified, only the non-fixed parameters are shown.; When ""v""=2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent to; gStyle->SetOptFit(111). see also SetOptStat below. void SetOptStat(Int_t stat = 1); The type of information printed in the histogram statistics box; can be selected via the parameter mode.; The parameter mode can be = ksiourmen (default = 000001111); k = 1; kurtosis printed; k = 2; kurtosis and kurtosis error printed; s = 1; skewness printed; s = 2; skewness and skewness error printed; i = 1; integral of bins printed; i = 2; integral of bins with option ""width"" printed; o = 1; number of overflows printed; u = 1; number of underflows printed; r = 1; rms printed; r = 2; rms and rms error printed; m = 1; mean value printed; m = 2; mean and mean error values printed; e = 1; number of entries printed; n = 1; name of histogram is printed; Example: gStyle->SetOptStat(11);; print only name of histogram and number of entries.; gStyle->SetOptStat(1101); displays the name of histogram, mean value and RMS.; WARNING: never call SetOptStat(000111); but SetOptStat(1111), 0001111 will; be taken as an octal number !!; WARNING: SetOptStat(1) is taken as SetOptStat(1111) (for back compatibility; with older versions. If you want to print only the name of the histogram; call SetOptStat(1000000001).; NOTE that in case of 2-D histograms, when selecting just underflow (10000); or overflow (100000), the stats box will show all combinations; of underflow/overflows and not just one single number!. void SetOptStat(Option_t* stat); The parameter mode can be any combination of kKsSiourRmMen; k : kurtosis printed;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TStyle.html:33420,error,error,33420,root/html534/TStyle.html,https://root.cern,https://root.cern/root/html534/TStyle.html,8,['error'],['error']
Availability,"model1.fitTo(sumData, PrintLevel(0), Save());; auto result2 = model2.fitTo(sumData, PrintLevel(0), Save());; ; ; TCanvas* can = new TCanvas(""can"", """", 1500, 600);; can->Divide(3,1);; ; TPaveText pt(-19.5, 1, -2, 25);; pt.SetFillStyle(0);; pt.SetBorderSize(0);; ; ; can->cd(1);; auto frame = x.frame(Title(""No template uncertainties""));; // Plot data to enable automatic determination of model0 normalisation:; sumData.plotOn(frame);; model0.plotOn(frame, LineColor(kBlue), VisualizeError(*result0));; // Plot data again to show it on top of model0 error bands:; sumData.plotOn(frame);; // Plot model components; model0.plotOn(frame, LineColor(kBlue));; model0.plotOn(frame, Components(p_h_sig), LineColor(kAzure));; model0.plotOn(frame, Components(p_h_bkg), LineColor(kRed));; model0.paramOn(frame);; ; sigData->plotOn(frame, MarkerColor(kBlue));; frame->Draw();; ; for (auto text : {; ""No template uncertainties"",; ""are taken into account."",; ""This leads to low errors"",; ""for the parameters A, since"",; ""the only source of errors"",; ""are the data statistics.""}) {; pt.AddText(text);; }; pt.DrawClone();; ; ; can->cd(2);; frame = x.frame(Title(""Barlow Beeston for Sig & Bkg separately""));; sumData.plotOn(frame);; model1.plotOn(frame, LineColor(kBlue), VisualizeError(*result1));; // Plot data again to show it on top of error bands:; sumData.plotOn(frame);; model1.plotOn(frame, LineColor(kBlue));; model1.plotOn(frame, Components(p_ph_sig1), LineColor(kAzure));; model1.plotOn(frame, Components(p_ph_bkg1), LineColor(kRed));; model1.paramOn(frame, Parameters(RooArgSet(Asig1, Abkg1)));; ; sigData->plotOn(frame, MarkerColor(kBlue));; frame->Draw();; ; pt.Clear();; for (auto text : {; ""With gamma parameters, the"",; ""signal & background templates"",; ""can adapt to the data."",; ""Note how the blue signal"",; ""template changes its shape."",; ""This leads to higher errors"",; ""of the scale parameters A.""}) {; pt.AddText(text);; }; pt.DrawClone();; ; can->cd(3);; frame = x.frame(Title(""Barlow Beeston l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html:5687,error,errors,5687,doc/master/rf709__BarlowBeeston_8C.html,https://root.cern,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html,2,['error'],['errors']
Availability,"monitoringDefinition NeuralNet.h:818; TMVA::DNN::Settings::m_testRepetitionssize_t m_testRepetitionsDefinition NeuralNet.h:839; TMVA::DNN::Settings::fLearningRatedouble fLearningRateDefinition NeuralNet.h:852; TMVA::DNN::Settings::fMomentumdouble fMomentumDefinition NeuralNet.h:853; TMVA::DNN::Settings::batchSizesize_t batchSize() constmini-batch sizeDefinition NeuralNet.h:767; TMVA::DNN::Settings::computeResultvirtual void computeResult(const Net &, std::vector< double > &)callback for monitoring and loggingDefinition NeuralNet.h:809; TMVA::DNN::Settings::fMonitoringstd::shared_ptr< Monitoring > fMonitoringDefinition NeuralNet.h:865; TMVA::DNN::Settings::dropRepetitionssize_t dropRepetitions() constDefinition NeuralNet.h:761; TMVA::DNN::Settings::createvoid create(std::string histoName, int bins, double min, double max)for monitoringDefinition NeuralNet.h:819; TMVA::DNN::Settings::fRepetitionsint fRepetitionsDefinition NeuralNet.h:854; TMVA::DNN::Settings::minErrorsize_t minError() constreturns the smallest error so farDefinition NeuralNet.h:829; TMVA::DNN::Settings::startTrainingvirtual void startTraining()Definition NeuralNet.h:795; TMVA::DNN::Settings::m_maxConvergenceCountsize_t m_maxConvergenceCountDefinition NeuralNet.h:858; TMVA::DNN::Settings::startTestCyclevirtual void startTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:804; TMVA::DNN::SteepestSteepest Gradient Descent algorithm (SGD)Definition NeuralNet.h:334; TMVA::DNN::Steepest::m_repetitionssize_t m_repetitionsDefinition NeuralNet.h:337; TMVA::DNN::Steepest::m_betadouble m_betainternal parameter (momentum)Definition NeuralNet.h:372; TMVA::DNN::Steepest::m_localGradientsstd::vector< double > m_localGradientslocal gradients for reuse in thread.Definition NeuralNet.h:376; TMVA::DNN::Steepest::m_prevGradientsstd::vector< double > m_prevGradientsvector remembers the gradients of the previous stepDefinition NeuralNet.h:373; TMVA::DNN::Steepest::m_alphadouble m_alphainternal parameter (l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:77847,error,error,77847,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['error'],['error']
Availability,"more explanations on errors; 168 ; 169TProfile2D::TProfile2D(const char *name,const char *title,Int_t nx,Double_t xlow,Double_t xup,Int_t ny, Double_t ylow,Double_t yup,Double_t zlow,Double_t zup,Option_t *option); 170: TH2D(name,title,nx,xlow,xup,ny,ylow,yup); 171{; 172 BuildOptions(zlow,zup,option);; 173 if (xlow >= xup || ylow >= yup) SetBuffer(fgBufferSize);; 174}; 175 ; 176 ; 177////////////////////////////////////////////////////////////////////////////////; 178/// Set Profile2D histogram structure and options.; 179///; 180/// - zmin: minimum value allowed for z; 181/// - zmax: maximum value allowed for z; 182/// if (zmin = zmax = 0) there are no limits on the allowed z values (zmin = -inf, zmax = +inf); 183///; 184/// - option: this is the option for the computation of the t error of the profile ( TProfile2D::GetBinError ); 185/// possible values for the options are documented in TProfile2D::SetErrorOption; 186///; 187/// See TProfile::BuildOptions for a detailed description; 188 ; 189void TProfile2D::BuildOptions(Double_t zmin, Double_t zmax, Option_t *option); 190{; 191 ; 192 SetErrorOption(option);; 193 ; 194 // create extra profile data structure (bin entries/ y^2 and sum of weight square); 195 TProfileHelper::BuildArray(this);; 196 ; 197 fZmin = zmin;; 198 fZmax = zmax;; 199 fScaling = kFALSE;; 200 fTsumwz = fTsumwz2 = 0;; 201}; 202 ; 203////////////////////////////////////////////////////////////////////////////////; 204/// Copy constructor.; 205 ; 206TProfile2D::TProfile2D(const TProfile2D &profile2d) : TH2D(); 207{; 208 profile2d.TProfile2D::Copy(*this);; 209}; 210 ; 211TProfile2D &TProfile2D::operator=(const TProfile2D &profile2d); 212{; 213 if (this != &profile2d); 214 profile2d.TProfile2D::Copy(*this);; 215 return *this;; 216}; 217 ; 218////////////////////////////////////////////////////////////////////////////////; 219/// Performs the operation: `this = this + c1*f1` .; 220 ; 221Bool_t TProfile2D::Add(TF1 *, Double_t , Option_t*); 222{; 223 Error",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile2D_8cxx_source.html:8029,error,error,8029,doc/master/TProfile2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile2D_8cxx_source.html,1,['error'],['error']
Availability,"mory objects to this file.Definition TFile.cxx:2436; TFile::fAsyncOpenStatusEAsyncOpenStatus fAsyncOpenStatus!Status of an asynchronous open requestDefinition TFile.h:109; TFile::fGlobalRegistrationbool fGlobalRegistration! if true, bypass use of global listsDefinition TFile.h:115; TFile::fSumBufferDouble_t fSumBufferSum of buffer sizes of objects written so far.Definition TFile.h:73; TFile::fIsArchiveBool_t fIsArchive!True if this is a pure archive fileDefinition TFile.h:102; TFile::GetListOfProcessIDsTObjArray * GetListOfProcessIDs() constDefinition TFile.h:236; TFile::Drawvoid Draw(Option_t *option="""") overrideFill Graphics Structure and Paint.Definition TFile.cxx:1111; TFile::Closevoid Close(Option_t *option="""") overrideClose a file.Definition TFile.cxx:950; TFile::IsATClass * IsA() const overrideDefinition TFile.h:344; TFile::fgReadCallsstatic std::atomic< Int_t > fgReadCallsNumber of bytes read from all TFile objects.Definition TFile.h:133; TFile::Recovervirtual Int_t Recover()Attempt to recover file if not correctly closed.Definition TFile.cxx:2048; TFile::GetStreamerInfoListvirtual TList * GetStreamerInfoList() finalRead the list of TStreamerInfo objects written to this file.Definition TFile.cxx:1445; TFile::WriteHeadervirtual void WriteHeader()Write File Header.Definition TFile.cxx:2615; TFile::kRecovered@ kRecoveredDefinition TFile.h:191; TFile::kReproducible@ kReproducibleDefinition TFile.h:197; TFile::kDevNull@ kDevNullDefinition TFile.h:193; TFile::kHasReferences@ kHasReferencesDefinition TFile.h:192; TFile::k630forwardCompatibility@ k630forwardCompatibilityDefinition TFile.h:190; TFile::kWriteError@ kWriteErrorDefinition TFile.h:194; TFile::kBinaryFile@ kBinaryFileDefinition TFile.h:195; TFile::OpenFromCachestatic TFile * OpenFromCache(const char *name, Option_t *="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Open a file for reading through the file cache.Definition TFile.cxx:3874; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:229202,recover,recover,229202,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['recover'],['recover']
Availability,"mory threshold is set by the cluster admin); in case an output file is defined, the files are merged at the end; 1 save results to file. <how> = 0 save at the end of the query 1 save results after each packet (to reduce the loss in case of crash).; Setting 'ds' automatically sets 'mvf=1'; it is still possible to set 'mvf=11' to save results after each packet.; The separator from the next option is either a ' ' or a ';'; All recognized settings are removed from the input string opt. If action == 0, set up the output file accordingly, if action == 1 clean related output file settings. If the final target file is local then 'target' is set to the final local path when action == 0 and used to retrieve the file with TFile::Cp when action == 1.; Output file settings are in the form `<previous_option>`of=name `<next_option>`; `<previous_option>`outfile=name,...;`<next_option>`; The separator from the next option is either a ' ' or a ';' Called interanally by TProof::Process.; Returns 0 on success, -1 on error. ; Definition at line 4937 of file TProof.cxx. ◆ HandleSubmerger(). void TProof::HandleSubmerger ; (; TMessage * ; mess, . TSlave * ; sl . ). private . Process a message of type kPROOF_SUBMERGER. ; Definition at line 4014 of file TProof.cxx. ◆ Init(). Int_t TProof::Init ; (; const char * ; masterurl, . const char * ; conffile, . const char * ; confdir, . Int_t ; loglevel, . const char * ; alias = 0 . ). protected . Start the PROOF environment. ; Starting PROOF involves either connecting to a master server, which in turn will start a set of slave servers, or directly starting as master server (if master = """"). For a description of the arguments see the TProof ctor. Returns the number of started master or slave servers, returns 0 in case of error, in which case fValid remains false. ; Definition at line 757 of file TProof.cxx. ◆ InitMembers(). void TProof::InitMembers ; (; ). protected . Default initializations. ; Definition at line 527 of file TProof.cxx. ◆ Interrupt()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:110732,error,error,110732,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['error'],['error']
Availability,"mote application.Definition TApplication.cxx:2070; TApplication::SetEchoModevirtual void SetEchoMode(Bool_t mode)Set console echo mode:Definition TApplication.cxx:1968; TApplication::Helpvirtual void Help(const char *line)The function lists useful commands ("".help"") or opens the online reference guide, generated with Doxy...Definition TApplication.cxx:1208; TApplication::LineProcessedvirtual void LineProcessed(const char *line)Emit signal when a line has been processed.Definition TApplication.cxx:1941; TApplication::ClearInputFilesvoid ClearInputFiles()Clear list containing macro files passed as program arguments.Definition TApplication.cxx:318; TApplication::fAppImpTApplicationImp * fAppImpDefinition TApplication.h:60; TApplication::EExitOnExceptionEExitOnExceptionDefinition TApplication.h:51; TApplication::kAbort@ kAbortDefinition TApplication.h:54; TApplication::kExit@ kExitDefinition TApplication.h:53; TApplication::ExecuteFilestatic Longptr_t ExecuteFile(const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE)Execute a file containing a C++ macro (static method).Definition TApplication.cxx:1729; TApplication::InitializeGraphicsvoid InitializeGraphics(Bool_t only_web=kFALSE)Initialize the graphics environment.Definition TApplication.cxx:244; TApplication::Openvirtual void Open()Definition TApplication.h:132; TApplication::LoadGraphicsLibsvirtual void LoadGraphicsLibs()Load shared libs necessary for graphics.Definition TApplication.cxx:1333; TApplication::StopIdleingvirtual void StopIdleing()Called when system stops idleing.Definition TApplication.cxx:1907; TApplication::kProcessRemotely@ kProcessRemotelyDefinition TApplication.h:44; TApplication::kDefaultApplication@ kDefaultApplicationDefinition TApplication.h:45; TApplication::StartIdleingvirtual void StartIdleing()Called when system starts idleing.Definition TApplication.cxx:1896; TApplication::Runvirtual void Run(Bool_t retrn=kFALSE)Main application eventloop. Calls system dependent eventloop via gSystem.D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:87829,error,error,87829,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['error'],['error']
Availability,"mote file via dCache daemon.; Returns kTRUE in case of error. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer.; This function is overloaded by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure. Bool_t WriteBuffer(const char* buf, Int_t len); Write specified byte range to remote file via dCache daemon.; Returns kTRUE in case of error. Bool_t Stage(const char* path, UInt_t secs, const char* location = 0); Stage() returns kTRUE on success and kFALSE on failure. Bool_t CheckFile(const char* path, const char* location = 0); CheckFile() returns kTRUE on success and kFALSE on failure. In; case the file exists but is not cached, CheckFile() returns; kFALSE and errno is set to EAGAIN. void SetOpenTimeout(UInt_t secs); Set file open timeout. void SetOnError(TDCacheFile::OnErrorAction = kOnErrorDefault); Set on error handler. void SetReplyHostName(const char* host_name); Set reply host name. const char * GetDcapVersion(); Return dCache version string. Int_t SysOpen(const char* pathname, Int_t flags, UInt_t mode); Interface to system open. All arguments like in POSIX open. Int_t SysClose(Int_t fd); Interface to system close. All arguments like in POSIX close. Int_t SysRead(Int_t fd, void* buf, Int_t len); Interface to system read. All arguments like in POSIX read. Int_t SysWrite(Int_t fd, const void* buf, Int_t len); Interface to system write. All arguments like in POSIX write. Long64_t SysSeek(Int_t fd, Long64_t offset, Int_t whence); Interface to system seek. All arguments like in POSIX lseek. Int_t SysSync(Int_t fd); Interface to system sync. All arguments like in POSIX fsync.; dCache always keep it's files sync'ed, so there's no need to; sync() them manually. Int_t SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); Get info about a fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TDCacheFile.html:24013,error,error,24013,root/html526/TDCacheFile.html,https://root.cern,https://root.cern/root/html526/TDCacheFile.html,4,['error'],['error']
Availability,"mote path will be rfile.; If rfile = ""cache"" the file is copied to the remote cache instead of the sandbox; (to copy to the cache on a different name use rfile = ""cache:newname"").; The mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run); the bit is set by; UploadPackage, since the check is done elsewhere.; kForward (0x4) if set, ask server to forward the file to slave; or submaster (meaningless for slave servers).; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache. Int_t Echo(const TObject* obj); Sends an object to master and workers and expect them to send back a; message with the output of its TObject::Print(). Returns -1 on error, the; number of workers that received the objects on success. Int_t Echo(const char* str); Sends a string to master and workers and expect them to echo it back to; the client via a message. It is a special case of the generic Echo(); that works with TObjects. Returns -1 on error, the number of workers that; received the message on success. Int_t SendObject(const TObject* obj, TProof::ESlaves list = kActive); Send object to master or slave servers. Returns number of slaves object; was sent to, -1 in case of error. Int_t SendPrint(Option_t* option = """"); Send print command to master server. Returns number of slaves message; was sent to. Returns -1 in case of error. void SetLogLevel(Int_t level, UInt_t mask = TProofDebug::kAll); Set server logging level. void SetRealTimeLog(Bool_t on = kTRUE); Switch ON/OFF the real-time logging facility. When this option is; ON, log messages from processing are sent back as they come, instead of; being sent back at the end in one go. This may help debugging or monitoring; i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:66336,error,error,66336,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['error'],['error']
Availability,"mous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Bool_tfConstrained; ParametricEquation_tfEquation; Bool_tfModified; TGLParametricEquation::Painter_tfPainter; Rgl::Range_tfURange; Rgl::Range_tfVRange; TGLParametricEquation::Ptr_tfXEquation; TGLParametricEquation::Ptr_tfYEquation; TGLParametricEquation::Ptr_tfZEquation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLParametricEquation(const TString& name, const TString& xEquation, const TString& yEquation, const TString& zEquation, Double_t uMin, Double_t uMax, Double_t vMin, Double_t vMax); Surface is defined by three strings.; ROOT does not use exceptions in ctors,; so, I have to use MakeZombie to let; external user know about errors. TGLParametricEquation(const TString& name, ParametricEquation_t equation, Double_t uMin, Double_t uMax, Double_t vMin, Double_t vMax); Surface defined by user's function (see ParametricEquation_t declaration in TGLParametricEquation.h). Rgl::Range_t GetURange() const; [uMin, uMax]. Rgl::Range_t GetVRange() const; [vMin, vMax]. Bool_t IsConstrained() const; Check is constrained. void SetConstrained(Bool_t c); Set constrained. Bool_t IsModified() const; Something was changed in parametric equation (or constrained option was changed). void SetModified(Bool_t m); Set modified. void EvalVertex(TGLVertex3& newVertex, Double_t u, Double_t v) const; Calculate vertex. Int_t DistancetoPrimitive(Int_t px, Int_t py); Check, if parametric surface is under cursor. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Pass event to painter. char * GetObjectInfo(Int_t px, Int_t py) const; No object info yet. void Paint(Option_t* option); Delegate p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLParametricEquation.html:7925,error,errors,7925,root/html602/TGLParametricEquation.html,https://root.cern,https://root.cern/root/html602/TGLParametricEquation.html,2,['error'],['errors']
Availability,"mous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_tTGeoBBox::fDXX half-length; Double_tTGeoBBox::fDYY half-length; Double_tTGeoBBox::fDZZ half-length; TStringTNamed::fNameobject identifier; Double_tTGeoBBox::fOrigin[3]box origin; UInt_tTGeoShape::fShapeBitsshape bits; Int_tTGeoShape::fShapeIdshape id; TStringTNamed::fTitleobject title. private:. TGeoBoolNode*fNodetop boolean node. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ClearThreadData() const; Needed just for cleanup. void CreateThreadData(Int_t nthreads); Needed just for cleanup. TGeoCompositeShape(); Default constructor. TGeoCompositeShape(const char* name, const char* expression); Default constructor. TGeoCompositeShape(const char* expression); Default constructor. TGeoCompositeShape(const char* name, TGeoBoolNode* node); Constructor with a Boolean node. ~TGeoCompositeShape(); destructor. Double_t Capacity() const; Computes capacity of this shape [length^3] by sampling with 1% error. void ComputeBBox(); compute bounding box of the sphere. void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); Computes normal vector in POINT to the composite shape. Bool_t Contains(const Double_t* point) const; Tests if point is inside the shape. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute closest distance from point px,py to each corner. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from outside point to this composite shape.; Check if the bounding box is crossed within the requested distance. Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to outside of this composite shape. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoCompositeShape.html:20614,error,error,20614,root/html602/TGeoCompositeShape.html,https://root.cern,https://root.cern/root/html602/TGeoCompositeShape.html,2,['error'],['error']
Availability,"move setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGItemContext.html:2512,error,error,2512,doc/master/classTGItemContext.html,https://root.cern,https://root.cern/doc/master/classTGItemContext.html,1,['error'],['error']
Availability,"move, a file.; If the file is currently open by the current or another process, the behavior of this function is implementation-defined (in particular, POSIX systems unlink the file name, while Windows does not allow the file to be deleted and the operation is a no-op). ; Reimplemented in TUnixSystem, TWinNTSystem, TDavixSystem, TNetSystem, TWebSystem, and TNetXNGSystem.; Definition at line 1381 of file TSystem.cxx. ◆ Unload(). void TSystem::Unload ; (; const char * ; module). virtual . Unload a shared library. ; Reimplemented in TUnixSystem.; Definition at line 2052 of file TSystem.cxx. ◆ Unsetenv(). void TSystem::Unsetenv ; (; const char * ; name). virtual . Unset environment variable. ; Reimplemented in TUnixSystem.; Definition at line 1657 of file TSystem.cxx. ◆ Utime(). int TSystem::Utime ; (; const char * ; file, . Long_t ; modtime, . Long_t ; actime . ). virtual . Set the a files modification and access times. ; If actime = 0 it will be set to the modtime. Returns 0 on success and -1 in case of error. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 1527 of file TSystem.cxx. ◆ Which(). char * TSystem::Which ; (; const char * ; search, . const char * ; wfil, . EAccessMode ; mode = kFileExists . ). virtual . Find location of file in a search path. ; User must delete returned string. Returns 0 in case file is not found. ; Definition at line 1548 of file TSystem.cxx. ◆ WorkingDirectory(). const char * TSystem::WorkingDirectory ; (; ). virtual . Return working directory. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 871 of file TSystem.cxx. Member Data Documentation. ◆ fAclicMode. EAclicMode TSystem::fAclicMode {kDefault}. protected . Definition at line 315 of file TSystem.h. ◆ fAclicProperties. Int_t TSystem::fAclicProperties {0}. protected . Definition at line 319 of file TSystem.h. ◆ fBeepDuration. Int_t TSystem::fBeepDuration {0}. protected . Definition at line 288 of file TSystem.h. ◆ fBeepFreq. Int_t TSystem::fBee",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem.html:96972,error,error,96972,doc/master/classTSystem.html,https://root.cern,https://root.cern/doc/master/classTSystem.html,1,['error'],['error']
Availability,"mpErrX1;��������������������� //[fNPeaks] array of amplitudes errors of 1D; ridges in x direction, output parameters; �� Double_t; *fAmpInitY1;�������������������� //[fNPeaks] array of initial values of; amplitudes of 1D ridges in y direction, input parameters; �� Double_t; *fAmpCalcY1;�������������������� //[fNPeaks] array of calculated values of; amplitudes of 1D ridges in y direction, output parameters; �� Double_t; *fAmpErrY1;��������������������� //[fNPeaks] array of amplitudes errors of 1D; ridges in y direction, output parameters; �� Double_t; *fVolume;����������������������� //[fNPeaks] array of calculated volumes of 2D; peaks, output parameters; �� Double_t; *fVolumeErr;�������������������� //[fNPeaks] array of volumes errors of 2D; peaks, output parameters; �� Double_t�; fSigmaInitX;������������������� //initial value of sigma x parameter; �� Double_t�; fSigmaCalcX;������������������� //calculated value of sigma x parameter; �� Double_t�; fSigmaErrX;�������������������� //error value of sigma x parameter; �� Double_t�; fSigmaInitY;������������������� //initial value of sigma y parameter; �� Double_t�; fSigmaCalcY;������������������� //calculated value of sigma y parameter; �� Double_t�; fSigmaErrY;�������������������� //error value of sigma y parameter; �� Double_t�; fRoInit;����������������������� //initial value of correlation coefficient; �� Double_t�; fRoCalc;����������������������� //calculated value of correlation coefficient; �� Double_t�; fRoErr;������������������������ //error value of correlation coefficient; �� Double_t�; fTxyInit;���������������������� //initial value of t parameter for 2D peaks; (relative amplitude of tail), for details see html manual and references; �� Double_t�; fTxyCalc;���������������������� //calculated value of t parameter for 2D peaks; �� Double_t�; fTxyErr;����������������������� //error value of t parameter for 2D peaks; �� Double_t�; fSxyInit;���������������������� //initial value of s parameter for 2D peaks; (relat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Fit.html:42757,error,error,42757,root/html528/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Fit.html,6,['error'],['error']
Availability,"mpOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. RooRealProxy_ndof; RooRealProxy_x. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooChiSquarePdf(). RooChiSquarePdf(const char* name, const char* title, RooAbsReal& x, RooAbsReal& ndof). RooChiSquarePdf(const RooChiSquarePdf& other, const char* name = 0). Double_t evaluate() const. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; No analytical calculation available (yet) of integrals over subranges. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const. TObject* clone(const char* newname) const; { return new RooChiSquarePdf(*this, newname); }. virtual ~RooChiSquarePdf(); { }. » Last changed: Tue Jun 30 14:32:08 2015 » Last generated: 2015-06-30 14:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooChiSquarePdf.html:45234,avail,available,45234,root/html602/RooChiSquarePdf.html,https://root.cern,https://root.cern/root/html602/RooChiSquarePdf.html,1,['avail'],['available']
Availability,"mpact, bool verbose=false) overrideRead object contents from stream (dummy for now)Definition RooAbsReal.cxx:426; RooAbsReal::matchArgsbool matchArgs(const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) constUtility function for use in getAnalyticalIntegral().Definition RooAbsReal.cxx:3146; RooAbsReal::fillTreeBranchvoid fillTreeBranch(TTree &t) overrideFill the tree branch that associated with this object with its current value.Definition RooAbsReal.cxx:3099; RooAbsReal::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overrideStructure printing.Definition RooAbsReal.cxx:455; RooAbsReal::plotAsymOnvirtual RooPlot * plotAsymOn(RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) constDefinition RooAbsReal.cxx:2199; RooAbsReal::operator==bool operator==(double value) constEquality operator comparing to a double.Definition RooAbsReal.cxx:250; RooAbsReal::evalErrorLoggingModestatic ErrorLoggingMode evalErrorLoggingMode()Return current evaluation error logging mode.Definition RooAbsReal.cxx:4302; RooAbsReal::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideFunction that is called at the end of redirectServers().Definition RooAbsReal.cxx:4474; RooAbsReal::isValidRealvirtual bool isValidReal(double, bool printError=false) constInterface function to check if given value is a valid value for this object. Returns true unless over...Definition RooAbsReal.h:447; RooAbsReal::setIntegratorConfigvoid setIntegratorConfig()Remove the specialized numeric integration configuration associated with this object.Definition RooAbsReal.cxx:3346; RooAbsReal::printValuevoid printValue(std::ostream &os) const overridePrint object value.Definition RooAbsReal.cxx:445; RooAbsReal::isIdenticalbool isIdentical(const RooAbsArg &other, bool assumeSameType=false) const overrideDefinition RooAbsReal.cxx:270; RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:223516,error,error,223516,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['error'],['error']
Availability,"mpilation and runtime errors properly. ; Definition at line 5257 of file TCling.cxx. ◆ Execute() [4/5]. void TCling::Execute ; (; TObject * ; obj, . TClass * ; cl, . const char * ; method, . const char * ; params, . int * ; error = nullptr . ). finalvirtual . Implements TInterpreter.; Definition at line 5277 of file TCling.cxx. ◆ Execute() [5/5]. void TCling::Execute ; (; TObject * ; obj, . TClass * ; cl, . TMethod * ; method, . TObjArray * ; params, . int * ; error = nullptr . ). finalvirtual . Execute a method from class cl with the arguments in array params (params[0] ... params[n] = array of TObjString parameters). ; Convert the TObjArray array of TObjString parameters to a character string of comma separated parameters. The parameters of type 'char' are enclosed in double quotes and all internal quotes are escaped. ; Implements TInterpreter.; Definition at line 5291 of file TCling.cxx. ◆ ExecuteMacro(). Longptr_t TCling::ExecuteMacro ; (; const char * ; filename, . EErrorCode * ; error = nullptr . ). finalvirtual . Execute a cling macro. ; Implements TInterpreter.; Definition at line 5403 of file TCling.cxx. ◆ ExecuteWithArgsAndReturn(). void TCling::ExecuteWithArgsAndReturn ; (; TMethod * ; method, . void * ; address, . const void * ; args[] = nullptr, . int ; nargs = 0, . void * ; ret = nullptr . ); const. finalvirtual . Implements TInterpreter.; Definition at line 5385 of file TCling.cxx. ◆ FindSym(). void * TCling::FindSym ; (; const char * ; entry); const. finalvirtual . Interface to cling function. ; Reimplemented from TInterpreter.; Definition at line 7448 of file TCling.cxx. ◆ ForgetMutexState(). void TCling::ForgetMutexState ; (; ). finalvirtual . Implements TInterpreter.; Definition at line 9618 of file TCling.cxx. ◆ FuncTempInfo_Delete(). void TCling::FuncTempInfo_Delete ; (; FuncTempInfo_t * ; ); const. finalvirtual . Delete the FuncTempInfo_t. ; Implements TInterpreter.; Definition at line 8806 of file TCling.cxx. ◆ FuncTempInfo_ExtraProperty(). Lon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:86437,error,error,86437,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['error'],['error']
Availability,"mpiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]][(args)].; The possible error codes are defined by TInterpreter::EErrorCode.; If padUpdate is true (default) update the current pad.; Returns the macro return value. void Message(Int_t id, const TObject* obj); Process message id called by obj. Long_t ProcessLine(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed asynchronously by sending; it to the CINT interpreter thread. For explicit synchronous processing; use ProcessLineSync(). On non-Win32 platforms there is no difference; between ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode. In; particular, error will equal to TInterpreter::kProcessing until the; CINT interpreted thread has finished executing the line.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineSync(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed synchronously (i.e. it will; only return when the CINT interpreter thread has finished executing; the line). On non-Win32 platforms there is no difference between; ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineFast(const char* line, Int_t* error = 0); Process interpreter command directly via CINT interpreter.; Only executable statements are allowed (no variable declarations),; In all other cases use TROOT::ProcessLine().; The possible error codes are defined by TInterpreter::EErrorCode. void ReadGitInfo(); Read Git commit information and branch name from the; etc/gitinfo.txt file. Bool_t ReadingObject() const; Deprecated (will be removed in next release). void SetReadingObject(Bool_t flag = kTRUE). const char * GetGitDate(); Return date/time make was run. void R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TROOT.html:30479,error,error,30479,root/html534/TROOT.html,https://root.cern,https://root.cern/root/html534/TROOT.html,3,['error'],['error']
Availability,"mpiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]][(args)].; The possible error codes are defined by TInterpreter::EErrorCode.; If padUpdate is true (default) update the current pad.; Returns the macro return value. void Message(Int_t id, const TObject* obj); Process message id called by obj. Long_t ProcessLine(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed asynchronously by sending; it to the CINT interpreter thread. For explicit synchronous processing; use ProcessLineSync(). On non-Win32 platforms there is no difference; between ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode. In; particular, error will equal to TInterpreter::kProcessing until the; CINT interpreted thread has finished executing the line.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineSync(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed synchronously (i.e. it will; only return when the CINT interpreter thread has finished executing; the line). On non-Win32 platforms there is no difference between; ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineFast(const char* line, Int_t* error = 0); Process interpreter command directly via CINT interpreter.; Only executable statements are allowed (no variable declarations),; In all other cases use TROOT::ProcessLine().; The possible error codes are defined by TInterpreter::EErrorCode. void ReadSvnInfo(); Read Subversion revision information and branch name from the; etc/svnrev.txt file. const char * GetSvnDate(); Return date/time make was run. void RefreshBrowsers(); Refresh all browsers. Call this method when some command line; command or script has changed t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TROOT.html:29307,error,error,29307,root/html528/TROOT.html,https://root.cern,https://root.cern/root/html528/TROOT.html,3,['error'],['error']
Availability,"mple dataset with X,err(X),Y,err(Y) values; for i in range(10):; x.setVal(-10 + 2 * i); x.setError((0.5 / 1.0) if (i < 5) else (1.0 / 1.0)); ; # Set Y value and error; y.setVal(x.getVal() * x.getVal() + 4 * abs(ROOT.gRandom.Gaus())); y.setError(math.sqrt(y.getVal())); ; dxy.add({x, y}); ; # Perform chi2 fit to X +/- dX and Y +/- dY values; # ---------------------------------------------------------------------------------------; ; # Make fit function; a = ROOT.RooRealVar(""a"", ""a"", 0.0, -10, 10); b = ROOT.RooRealVar(""b"", ""b"", 0.0, -100, 100); c = ROOT.RooRealVar(""c"", ""c"", 0.0, -100, 100); f = ROOT.RooPolyVar(""f"", ""f"", x, [b, a, c]); ; # Plot dataset in X-Y interpretation; frame = x.frame(Title=""Chi^2 fit of function set of (X#pmdX,Y#pmdY) values""); dxy.plotOnXY(frame, YVar=y); ; # Fit chi^2 using X and Y errors; fit1 = f.chi2FitTo(dxy, YVar=y, Save=True, PrintLevel=-1); fit1.Print(); ; # Overlay fitted function; f.plotOn(frame); ; # Alternative: fit chi^2 integrating f(x) over ranges defined by X errors, rather; # than taking point at center of bin; fit2 = f.chi2FitTo(dxy, YVar=y, Save=True, PrintLevel=-1, Integrate=True); fit2.Print(); ; # Overlay alternate fit result; f.plotOn(frame, LineStyle=""--"", LineColor=""r""); ; # Draw the plot on a canvas; c = ROOT.TCanvas(""rf609_xychi2fit"", ""rf609_xychi2fit"", 600, 600); ROOT.gPad.SetLeftMargin(0.15); frame.GetYaxis().SetTitleOffset(1.4); frame.Draw(); ; c.SaveAs(""rf609_xychi2fit.png""); [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; ; RooFitResult: minimized FCN value: 1.16828, estimated distance to minimum: 3.27623e-05; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; a -8.5827e-02 +/- 6.43e-01; b 2.9994e-01 +/- 4.78e-01; c 1.0408e+00 +/- 1.04e-01; ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf609__xychi2fit_8py.html:2004,error,errors,2004,doc/master/rf609__xychi2fit_8py.html,https://root.cern,https://root.cern/doc/master/rf609__xychi2fit_8py.html,1,['error'],['errors']
Availability,"mple_category""] == [""data""]]}, [m4l]); nll = pdf_learned_extended.createNLL(data, Extended=True); ; # Plot the nll computet by the mixture model; frame2 = mu_var.frame(Title=""NLL sum;#mu (signal strength);#Delta NLL"", Range=(0.5, 4)); nll.plotOn(frame2, ShiftToZero=True, LineColor=""kP6Blue""); ; # Write the plots into one canvas to show, or into separate canvases for saving.; single_canvas = True; ; c = ROOT.TCanvas("""", """", 1200 if single_canvas else 600, 600); if single_canvas:; c.Divide(2); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); frame1.GetYaxis().SetTitleOffset(1.8); frame1.Draw(); ; if single_canvas:; c.cd(2); ROOT.gPad.SetLeftMargin(0.15); frame2.GetYaxis().SetTitleOffset(1.8); else:; c.SaveAs(""rf618_plot_1.png""); c = ROOT.TCanvas("""", """", 600, 600); ; frame2.Draw(); ; if not single_canvas:; c.SaveAs(""rf618_plot_2.png""); ; # Compute the minimum via minuit and display the results; minimizer = ROOT.RooMinimizer(nll); minimizer.setErrorLevel(0.5) # Adjust the error level in the minimization to work with likelihoods; minimizer.setPrintLevel(-1); minimizer.minimize(""Minuit2""); result = minimizer.save(); ROOT.SetOwnership(result, True); result.Print(); ; del minimizer; del nll; del pdf_learned_extended; del n_pred; del llh; del nll_ratio; ; import sys; ; # Hack to bypass ClearProxiedObjects(); del sys.modules[""libROOTPythonizations""]; lenOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf618__mixture__models_8py.html:7054,error,error,7054,doc/master/rf618__mixture__models_8py.html,https://root.cern,https://root.cern/doc/master/rf618__mixture__models_8py.html,1,['error'],['error']
Availability,"mplement by the default constructor. I/O. Fix the issue described at ROOT-7500 : crash due to change in base class which versioned derived class. Proof. Add support for aliases ROOT-7392; Fix issue with trees in sub-directories causing stressProof test #29 to fail. Interpreter. Fix unloading of code ROOT-7290; Fix template instantiations in cling internals ROOT-7364; Forget erroneous decls in case of errors ROOT-7295; Work around binutils issue (ld crash building llvm) on MacOSX with GCC (pull requests 64-66); Work around MacOS X builds being version specific ROOT-6966; Handle relocation of ROOT and non-PCH-able glibc headers.; Fix parsing of definition for forward declared enums ROOT-7419; Pass CXXFLAGS to the PCH generator, to ensure platform consistency.; Work around linker assert when building with GCC on OS X (PR #68). PyROOT. Fix lookup of templated classes in namespace with arguments that have ‘std::’ in their name ROOT-7448; Use GetTrueTypeName() instead of GetFullTypeName(), as the latter loses namespaces; Strip down number of libraries linked to libPyROOT in order to reduce to the minimum the time needed to import the ROOT module. TFormula, TF1. Allow possibility to automatically normalize itself. If the function TF1::SetNormalized(true) is called, when evaluated, the function will return its value divided by its integral computed in the function range.; Added helper classes TF1NormSum, TF1Convolution.; Fix a bug in calling TF1::Update when changing the parameter values. Fix also the TF1Convolution.; Fix the caching of the parameters in TF1NormSum to avoid recomputing integrals for same parameter values.; Remove unwanted printout from Streamer method. RooFit. Fix for contour computations in RooMinimizer[ROOT-7290]. Dictionary Generation. Uniform style of warnings, use standard ROOT logging facilities rather than cout/cerr.; Do not add as autoparse keys stl classes, stl (nested) containers templated with plain old data or integers. Tree. TTreeReaderArray now",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:27536,down,down,27536,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['down'],['down']
Availability,"mplemented from TFile.; Definition at line 81 of file TXMLFile.h. ◆ Print(). void TXMLFile::Print ; (; Option_t * ; option = """"); const. inlinefinalvirtual . Print all objects in the file. ; Reimplemented from TFile.; Definition at line 82 of file TXMLFile.h. ◆ ProduceFileNames(). void TXMLFile::ProduceFileNames ; (; const char * ; filename, . TString & ; fname, . TString & ; dtdname . ). staticprotected . function produces pair of xml and dtd file names ; Definition at line 424 of file TXMLFile.cxx. ◆ ReadBuffer() [1/2]. Bool_t TXMLFile::ReadBuffer ; (; char * ; buf, . Int_t ; len . ). inlinefinalvirtual . Read a buffer from the file. ; This is the basic low level read operation. Returns kTRUE in case of failure. ; Reimplemented from TFile.; Definition at line 83 of file TXMLFile.h. ◆ ReadBuffer() [2/2]. Bool_t TXMLFile::ReadBuffer ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). inlinefinalvirtual . Read a buffer from the file at the offset 'pos' in the file. ; Returns kTRUE in case of failure. Compared to ReadBuffer(char*, Int_t), this routine does not change the cursor on the physical file representation (fD) if the data is in this TFile's cache. ; Reimplemented from TFile.; Definition at line 84 of file TXMLFile.h. ◆ ReadFree(). void TXMLFile::ReadFree ; (; ). inlinefinalvirtual . Read the FREE linked list. ; Every file has a linked list (fFree) of free segments. This linked list has been written on the file via WriteFree as a single data record. ; Reimplemented from TFile.; Definition at line 85 of file TXMLFile.h. ◆ ReadFromFile(). Bool_t TXMLFile::ReadFromFile ; (; ). protected . read document from file Now full content of document reads into the memory Then document decomposed to separate keys and streamer info structures All irrelevant data will be cleaned ; Definition at line 559 of file TXMLFile.cxx. ◆ ReadKeysList(). Int_t TXMLFile::ReadKeysList ; (; TDirectory * ; dir, . XMLNodePointer_t ; topnode . ). protected . Read list of keys for directory",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLFile.html:65155,failure,failure,65155,doc/master/classTXMLFile.html,https://root.cern,https://root.cern/doc/master/classTXMLFile.html,1,['failure'],['failure']
Availability,"mplemented from TProofPlayer.; Definition at line 3344 of file TProofPlayer.cxx. ◆ Class(). static TClass * TProofPlayerRemote::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TProofPlayerRemote::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProofPlayerRemote::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 366 of file TProofPlayer.h. ◆ DeclFileName(). static const char * TProofPlayerRemote::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 366 of file TProofPlayer.h. ◆ DrawSelect(). Long64_t TProofPlayerRemote::DrawSelect ; (; TDSet * ; set, . const char * ; varexp, . const char * ; selection, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; firstentry = 0 . ). overridevirtual . Draw (support for TChain::Draw()). ; Returns -1 in case of error or number of selected events in case of success. ; Reimplemented from TProofPlayer.; Definition at line 4232 of file TProofPlayer.cxx. ◆ Feedback(). void TProofPlayerRemote::Feedback ; (; TList * ; objs). overridevirtual . Feedback signal. ; Reimplemented from TProofPlayer.; Definition at line 3317 of file TProofPlayer.cxx. ◆ Finalize() [1/2]. Long64_t TProofPlayerRemote::Finalize ; (; Bool_t ; force = kFALSE, . Bool_t ; sync = kFALSE . ). overridevirtual . Finalize query (may not be used in this class). ; Reimplemented from TProofPlayer.; Definition at line 2781 of file TProofPlayer.cxx. ◆ Finalize() [2/2]. Long64_t TProofPlayerRemote::Finalize ; (; TQueryResult * ; qr). overridevirtual . Finalize the results of a query already processed. ; Reimplemented from TProofPlayer.; Definition at line 2973 of file TProofPlayer.cxx. ◆ GetNextPacket(). TDSetElement * TProofPlayerRemote::GetNextPacket ; (; TSlave * ; slave, . TMessage * ; r . ). overridevirtual . Get next packet for specified slave. ; Rei",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerRemote.html:27787,error,error,27787,doc/master/classTProofPlayerRemote.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerRemote.html,1,['error'],['error']
Availability,"mplemented in TPSocket.; Definition at line 112 of file TSocket.h. ◆ GetErrorCode(). Int_t TSocket::GetErrorCode ; (; ); const. Returns error code. ; Meaning depends on context where it is called. If no error condition returns 0 else a value < 0. For example see TServerSocket ctor. ; Definition at line 1035 of file TSocket.cxx. ◆ GetInetAddress(). TInetAddress TSocket::GetInetAddress ; (; ); const. inline . Definition at line 113 of file TSocket.h. ◆ GetLastUsage(). TTimeStamp TSocket::GetLastUsage ; (; ). inline . Definition at line 129 of file TSocket.h. ◆ GetLocalInetAddress(). TInetAddress TSocket::GetLocalInetAddress ; (; ). virtual . Return internet address of local host to which the socket is bound. ; In case of error TInetAddress::IsValid() returns kFALSE. ; Reimplemented in TPSocket, and TServerSocket.; Definition at line 409 of file TSocket.cxx. ◆ GetLocalPort(). Int_t TSocket::GetLocalPort ; (; ). virtual . Return the local port # to which the socket is bound. ; In case of error return -1. ; Reimplemented in TServerSocket.; Definition at line 423 of file TSocket.cxx. ◆ GetOption() [1/2]. Option_t * TSocket::GetOption ; (; ); const. inlineoverrideprivatevirtual . Reimplemented from TObject.; Definition at line 98 of file TSocket.h. ◆ GetOption() [2/2]. Int_t TSocket::GetOption ; (; ESockOptions ; opt, . Int_t & ; val . ). virtual . Get socket options. Returns -1 in case of error. ; Reimplemented in TPSocket.; Definition at line 1023 of file TSocket.cxx. ◆ GetPort(). Int_t TSocket::GetPort ; (; ); const. inline . Definition at line 115 of file TSocket.h. ◆ GetRemoteProtocol(). Int_t TSocket::GetRemoteProtocol ; (; ); const. inline . Definition at line 126 of file TSocket.h. ◆ GetSecContext(). TSecContext * TSocket::GetSecContext ; (; ); const. inline . Definition at line 127 of file TSocket.h. ◆ GetService(). const char * TSocket::GetService ; (; ); const. inline . Definition at line 116 of file TSocket.h. ◆ GetServType(). Int_t TSocket::GetServType ; (; );",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSocket.html:28347,error,error,28347,doc/master/classTSocket.html,https://root.cern,https://root.cern/doc/master/classTSocket.html,1,['error'],['error']
Availability,"mpler&). Data Members; private:. TRandom*fRand; Double_tfSize; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; DebuggingSampler(). virtual ~DebuggingSampler(). SamplingDistribution* GetSamplingDistribution(RooArgSet& paramsOfInterest); Main interface to get a ConfInterval, pure virtual. Double_t EvaluateTestStatistic(RooAbsData& , RooArgSet& ); Main interface to evaluate the test statistic on a dataset. TestStatistic* GetTestStatistic() const; Get the TestStatistic. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void Initialize(RooAbsArg& , RooArgSet& , RooArgSet& ); Common Initialization. void SetPdf(RooAbsPdf& ); Set the Pdf, add to the the workspace if not already there. {}. void SetParameters(RooArgSet& ); specify the parameters of interest in the interval. {}. void SetNuisanceParameters(const RooArgSet& ); specify the nuisance parameters (eg. the rest of the parameters). {}. void SetParametersForTestStat(const RooArgSet& ); specify the values of parameters used when evaluating test statistic. {}. void SetGlobalObservables(const RooArgSet& ); specify the conditional observables. {}. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size;}. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl;}. void SetTestStatistic(RooStats::TestStatistic* ); Set the TestStatistic (want the argument to be a function of the data & parameter points. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-06-30 14:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__DebuggingSampler.html:3574,error,error,3574,root/html602/RooStats__DebuggingSampler.html,https://root.cern,https://root.cern/root/html602/RooStats__DebuggingSampler.html,1,['error'],['error']
Availability,"mpler&). Data Members; private:. TRandom*fRand; Double_tfSize; RooRealVar*fTestStatistic. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; DebuggingSampler(). virtual ~DebuggingSampler(). SamplingDistribution* GetSamplingDistribution(RooArgSet& paramsOfInterest); Main interface to get a ConfInterval, pure virtual. Double_t EvaluateTestStatistic(RooAbsData& , RooArgSet& ); Main interface to evaluate the test statistic on a dataset. TestStatistic* GetTestStatistic() const; Get the TestStatistic. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void Initialize(RooAbsArg& , RooArgSet& , RooArgSet& ); Common Initialization. void SetPdf(RooAbsPdf& ); Set the Pdf, add to the the workspace if not already there. {}. void SetParameters(RooArgSet& ); specify the parameters of interest in the interval. {}. void SetNuisanceParameters(const RooArgSet& ); specify the nuisance parameters (eg. the rest of the parameters). {}. void SetParametersForTestStat(const RooArgSet& ); specify the values of parameters used when evaluating test statistic. {}. void SetGlobalObservables(const RooArgSet& ); specify the conditional observables. {}. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size;}. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl;}. void SetTestStatistic(RooStats::TestStatistic* ); Set the TestStatistic (want the argument to be a function of the data & parameter points. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__DebuggingSampler.html:3574,error,error,3574,root/html604/RooStats__DebuggingSampler.html,https://root.cern,https://root.cern/root/html604/RooStats__DebuggingSampler.html,1,['error'],['error']
Availability,"mplete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char* dest, const char* localName, const char* appendage = 0, const char* fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char* defaultPath) const; [private]. TString ExtendPath(const char* originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc, ostream& out); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const char* className) const; [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a class.; user must delete.; returns 0 in case of error. TClass * TryMakeClassFromClassName(const char* className) const; Same as above but does not print the error message. TClass * MakeClassFromVarName(const char* varName, TTabCom::EContext_t& context, int iter = 0); [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a variable.; user must delete.; returns 0 in case of error.; if user has operator.() or operator->() backwards, will modify: context, *fpLoc and fBuf.; context sensitive behavior. void SetPattern(TTabCom::EContext_t handle, const char* regexp); [private]. int ParseReverse(const char* var_str, int start). Returns the place in the string where to put the \0, starting the search; from ""start"". TTabCom(). TTabCom& operator=(const TTabCom& ). EContext_t DetermineContext() const. » Author: Christian Lacunza 27/04/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/rint:$Id: TTabCom.h 39402 2011-05-26 12:56:31Z axel $ » Last generated: 2011-07-04 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTabCom.html:12220,error,error,12220,root/html530/TTabCom.html,https://root.cern,https://root.cern/root/html530/TTabCom.html,2,['error'],['error']
Availability,"mplete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char* dest, const char* localName, const char* appendage = 0, const char* fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char* defaultPath) const; [private]. TString ExtendPath(const char* originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc, ostream& out); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const char* className) const; [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a class.; user must delete.; returns 0 in case of error. TClass * TryMakeClassFromClassName(const char* className) const; Same as above but does not print the error message. TClass * MakeClassFromVarName(const char* varName, TTabCom::EContext_t& context, int iter = 0); [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a variable.; user must delete.; returns 0 in case of error.; if user has operator.() or operator->() backwards, will modify: context, *fpLoc and fBuf.; context sensitive behavior. void SetPattern(TTabCom::EContext_t handle, const char* regexp); [private]. int ParseReverse(const char* var_str, int start). Returns the place in the string where to put the \0, starting the search; from ""start"". TTabCom(). TTabCom& operator=(const TTabCom& ). EContext_t DetermineContext() const. » Author: Christian Lacunza 27/04/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/rint:$Id: TTabCom.h 39402 2011-05-26 12:56:31Z axel $ » Last generated: 2011-12-02 14:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTabCom.html:12220,error,error,12220,root/html532/TTabCom.html,https://root.cern,https://root.cern/root/html532/TTabCom.html,2,['error'],['error']
Availability,"mport *. c = TCanvas(); l = TLorentzVector(); Keeping the ROOT namespace (“import ROOT”), or only importing from ROOT those classes that you will actually use (see above), however, will always be cleaner and clearer:; import ROOT. c = ROOT.TCanvas(); l = ROOT.TLorentzVector(); Since it is foreseen that most people will use the simple approach anyway, the request to copy all from module ROOT will not actually result in copying all ROOT classes into the current namespace. Instead, classes will still be bound (and possibly loaded) on an as-needed basis. Note carefully how this is different from other Python (extension) modules, and what to expect if you use the normal inspection tools (such as e.g. ‘dir()’). This feature prevents the inspection tools from being swamped by an enormous amount of classes, but they can no longer be used to explore unknown parts of the system (e.g. to find out which classes are available). Furthermore, because of this approach, <tab>-completion will usually not be available until after the first use (and hence creation) of a class.; Access to class static functions, public data members, enums, etc. is as expected. Many more example uses of ROOT classes from Python can be found in the tutorials directory in the ROOT distribution. The recipes section contains a description on working with your own classes (see “Using Your Own Classes”).; 19.1.5.2 Access to STL Classes; The STL classes live in the ROOT.std namespace (or, if you prefer to get them from there, in the ROOT module directly, but doing so makes the code less clear, of course). Be careful in their use, because Python already has types called “string” and “list.”; In order to understand how to get access to a templated class, think of the general template as a meta class. By instantiating the meta class with the proper parameters, you get an actual class, which can then be used to create object instances. An example usage:; >>> from ROOT import std; >>> v = std.vector(int)(); >>> for i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1051944,avail,available,1051944,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avail'],['available']
Availability,"mpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn through the end points of the vertical error bars. . ""4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""5"" Error rectangles are drawn like option ""2"". In addition the contour line around the boxes is drawn. This can be useful when boxes' fill colors are very light or in gray scale mode. . gStyle->SetErrorX(dx) controls the size of the error along x. dx = 0 removes the error along x.; gStyle->SetEndErrorSize(np) controls the size of the lines at the end of the error bars (when option 1 is used). By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are defined along X and Y and are symmetric: The left and right errors are the same along X and the bottom and up errors are the same along Y.; {; auto c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""A graph with errors"");; ge->Draw(""ap"");; }; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; eyDouble_t ey[n]Definition legend1.C:17; exDouble_t ex[n]Definition legend1.C:17. The option ""0"" shows the error bars for data points outside range.; {; auto c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:9869,error,error,9869,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,1,['error'],['error']
Availability,"mpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like option ""2"". In addition the contour line; around the boxes is drawn. This can be useful when boxes' fill colors are very; light or in gray scale mode. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetric: The left and right errors are the same; along X and the bottom and up errors are the same along Y. Picture; Source. {; TCanvas *c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->Draw(""ap"");; return c4;; }; The option ""0"" shows the error bars for data points outside range. Picture; Source. {; TCanvas *c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] = {1,2,3};; float err_x[] = {0,0,0};; float err_y[] = {5,5,5};; float y[] = {1,4,9};; TGraphErrors tg(3,x,y,err_x,err_y);; c48->Divide(2,1);; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraphPainter.html:6975,error,error,6975,root/html532/TGraphPainter.html,https://root.cern,https://root.cern/root/html532/TGraphPainter.html,4,['error'],['error']
Availability,"mpt = ""Password: ""). static . Static method to prompt for the user's passwd to be used for authentication to rootd or proofd. ; Uses non-echoing command line to get passwd. Returns passwd (which must de deleted by caller) or 0. If non-interactive run (eg ProofServ) returns -1 ; Definition at line 1142 of file TAuthenticate.cxx. ◆ PromptUser(). char * TAuthenticate::PromptUser ; (; const char * ; remote). static . Static method to prompt for the user name to be used for authentication to rootd or proofd. ; User is asked to type user name. Returns user name (which must be deleted by caller) or 0. If non-interactive run (eg ProofServ) returns default user. ; Definition at line 1102 of file TAuthenticate.cxx. ◆ ProofAuthSetup() [1/2]. Int_t TAuthenticate::ProofAuthSetup ; (; ). private . Authentication related stuff setup in TProofServ. ; This is the place where the buffer send by the client / master is decoded. It contains also password information, if the case requires. Return 0 on success, -1 on failure. ; Definition at line 3699 of file TAuthenticate.cxx. ◆ ProofAuthSetup() [2/2]. Int_t TAuthenticate::ProofAuthSetup ; (; TSocket * ; sock, . Bool_t ; client . ). staticprivate . Setup of authetication related stuff in PROOF run after a successful authentication. ; Return 0 on success, -1 on failure. ; Definition at line 3820 of file TAuthenticate.cxx. ◆ ReadRootAuthrc(). Int_t TAuthenticate::ReadRootAuthrc ; (; ). static . Read authentication directives from $ROOTAUTHRC, $HOME/.rootauthrc or <Root_etc_dir>/system.rootauthrc and create related THostAuth objects. ; Files are read only if they changed since last reading If 'proofconf' is defined, check also file proofconf for directives ; Definition at line 3212 of file TAuthenticate.cxx. ◆ RemoveHostAuth(). void TAuthenticate::RemoveHostAuth ; (; THostAuth * ; ha, . Option_t * ; opt = """" . ). static . Remove THostAuth instance from the list. ; Definition at line 2203 of file TAuthenticate.cxx. ◆ RemoveSecContext(). void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAuthenticate.html:34960,failure,failure,34960,doc/master/classTAuthenticate.html,https://root.cern,https://root.cern/doc/master/classTAuthenticate.html,1,['failure'],['failure']
Availability,"mpt(); Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"". const char * SetPrompt(const char* newPrompt); Set a new default prompt. It returns the previous prompt.; The prompt may contain a %d which will be replaced by the commend; number. The default prompt is ""root [%d] "". The maximum length of; the prompt is 55 characters. To set the prompt in an interactive; session do:; root [0] ((TRint*)gROOT->GetApplication())->SetPrompt(""aap> ""); aap>. Bool_t HandleTermInput(); Handle input coming from terminal. void HandleException(Int_t sig); Handle exceptions (kSigBus, kSigSegmentationViolation,; kSigIllegalInstruction and kSigFloatingException) trapped in TSystem.; Specific TApplication implementations may want something different here. void Terminate(int status); Terminate the application. Reset the terminal to sane mode and call; the logoff macro defined via Rint.Logoff environment variable. void SetEchoMode(Bool_t mode); Set console mode:. mode = kTRUE - echo input symbols; mode = kFALSE - noecho input symbols. Long_t ProcessRemote(const char* line, Int_t* error = 0); Process the content of a line starting with "".R"" (already stripped-off); The format is; [user@]host[:dir] [-l user] [-d dbg] [script]; The variable 'dir' is the remote directory to be used as working dir.; The username can be specified in two ways, ""-l"" having the priority; (as in ssh).; A 'dbg' value > 0 gives increasing verbosity.; The last argument 'script' allows to specify an alternative script to; be executed remotely to startup the session. TRint(const TRint& ). TRint& operator=(const TRint& ). void Interrupt(); { fInterrupt = kTRUE; }. » Author: Rene Brun 17/02/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/rint:$Id: TRint.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-27 22:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRint.html:14761,echo,echo,14761,root/html528/TRint.html,https://root.cern,https://root.cern/root/html528/TRint.html,2,"['echo', 'error']","['echo', 'error']"
Availability,"mptoticCalculator& hc, RooRealVar* scannedVariable, double size ); Constructor from a reference to a AsymptoticCalculator; The calculator must be created before by using the S+B model for the null and; the B model for the alt; If no variable to scan are given they are assumed to be the first variable; from the parameter of interests of the null model. HypoTestInverter(RooAbsData& data, RooStats::ModelConfig& sb, RooStats::ModelConfig& b, RooRealVar* scannedVariable = 0, RooStats::HypoTestInverter::ECalculatorType type = kFrequentist, double size = 0.050000000000000003); Constructor from a model for B model and a model for S+B.; An HypoTestCalculator (Hybrid of Frequentis) will be created using the; S+B model as the null and the B model as the alternate; If no variable to scan are given they are assumed to be the first variable; from the parameter of interests of the null model. HypoTestInverter(const RooStats::HypoTestInverter& rhs); copy-constructor; NOTE: this class does not copy the contained result and; the HypoTestCalculator, but only the pointers; It requires the original HTI to be alive. HypoTestInverter & operator=(const RooStats::HypoTestInverter& rhs); assignment operator; NOTE: this class does not copy the contained result and; the HypoTestCalculator, but only the pointers; It requires the original HTI to be alive. ~HypoTestInverter(); destructor (delete the HypoTestInverterResult). TestStatistic * GetTestStatistic() const; return the test statistic which is or will be used by the class. bool SetTestStatistic(RooStats::TestStatistic& stat); set the test statistic to use. void Clear(); delete contained result and graph. void CreateResults() const; create a new HypoTestInverterResult to hold all computed results. HypoTestInverterResult* GetInterval() const; Run a fixed scan or the automatic scan depending on the configuration; Return if needed a copy of the result object which will be managed by the user. HypoTestResult * Eval(RooStats::HypoTestCalculatorGen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestInverter.html:8741,alive,alive,8741,root/html602/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestInverter.html,2,['alive'],['alive']
Availability,"mpty slots. This function loops over the complete array and; is therefore very slow when applied in a loop. Most of the time you; better use GetEntriesFast() (only in case when there are no empty slots). Int_t GetAbsLast() const; Return absolute index to last object in array. Returns -1 in case; array is empty. Int_t GetLast() const; Return index of last object in array. Returns lowerBound-1 in case; array is empty. TObject ** GetObjectRef(const TObject* obj) const; Return address of pointer obj. If obj is 0 returns address of container. Int_t IndexOf(const TObject* obj) const; obj != 0 Return index of object in array.; Returns lowerBound-1 in case array doesn't contain the obj. obj == 0 Return the index of the first empty slot.; Returns lowerBound-1 in case array doesn't contain any empty slot. void Init(Int_t s, Int_t lowerBound); Initialize a TObjArray. TIterator * MakeIterator(Bool_t dir = kIterForward) const; Returns an array iterator. Bool_t OutOfBoundsError(const char* where, Int_t i) const; Generate an out-of-bounds error. Always returns false. void RecursiveRemove(TObject* obj); Remove object from this collection and recursively remove the object; from all other objects (and collections). TObject * RemoveAt(Int_t idx); Remove object at index idx. TObject * Remove(TObject* obj); Remove object from array. void RemoveRange(Int_t idx1, Int_t idx2); Remove objects from index idx1 to idx2 included. void SetLast(Int_t last); Set index of last object in array, effectively truncating the; array. Use carefully since whenever last position has to be; recalculated, e.g. after a Remove() or Sort() it will be reset; to the last non-empty slot. If last is -2 this will force the; recalculation of the last used slot.; If last is -1, this effectively truncate the array completely. void Randomize(Int_t ntimes = 1); Randomize objects inside the array, i.e. permute randomly objects.; With fLast being the index of the last entry in the array, the following; algorithm is applied ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TObjArray.html:15382,error,error,15382,root/html528/TObjArray.html,https://root.cern,https://root.cern/root/html528/TObjArray.html,6,['error'],['error']
Availability,"mpty();; 2630 if (fMappedTree) MapTree(fTree);; 2631 if (fMappedBranch) MapBranch(fMappedBranch);; 2632 fListView->Layout();; 2633 fNexpressions++;; 2634}; 2635 ; 2636////////////////////////////////////////////////////////////////////////////////; 2637/// Find parent tree of a clicked item.; 2638 ; 2639void TTreeViewer::SetParentTree(TGListTreeItem *item); 2640{; 2641 if (!item) return;; 2642 ULong_t *itemType = (ULong_t *)item->GetUserData();; 2643 if (!itemType) return;; 2644 TGListTreeItem *parent = nullptr;; 2645 Int_t index;; 2646 if (!(*itemType & kLTTreeType)) {; 2647 parent = item->GetParent();; 2648 SetParentTree(parent);; 2649 } else {; 2650 index = (Int_t)(*itemType >> 8);; 2651 SwitchTree(index);; 2652 }; 2653}; 2654 ; 2655////////////////////////////////////////////////////////////////////////////////; 2656/// Send a message on the status bar.; 2657 ; 2658void TTreeViewer::Message(const char* msg); 2659{; 2660 fStatusBar->SetText(msg);; 2661}; 2662 ; 2663////////////////////////////////////////////////////////////////////////////////; 2664/// Put error/warning into TMsgBox and also forward to console.; 2665 ; 2666void TTreeViewer::DoError(int level, const char *location, const char *fmt, va_list va) const; 2667{; 2668 TObject::DoError(level, location, fmt, va);; 2669 ; 2670 // in case level will abort we will not come here...; 2671 ; 2672 static const int buf_size = 2048;; 2673 char buf[buf_size], *bp;; 2674 ; 2675 int n = vsnprintf(buf, buf_size, fmt, va);; 2676 // old vsnprintf's return -1 if string is truncated new ones return; 2677 // total number of characters that would have been written; 2678 if (n == -1 || n >= buf_size) {; 2679 TObject::Warning(""DoError"", ""Error message string truncated..."");; 2680 }; 2681 if (level >= kSysError && level < kFatal); 2682 bp = Form(""%s (%s)"", buf, gSystem->GetError());; 2683 else; 2684 bp = buf;; 2685 ; 2686 const char *title = """";; 2687 if (level == kInfo); 2688 title = ""Info"";; 2689 if (level == kWarning); 2690",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeViewer_8cxx_source.html:94631,error,error,94631,doc/master/TTreeViewer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreeViewer_8cxx_source.html,1,['error'],['error']
Availability,"ms); For histograms representing averages or efficiencies, one should compute the average; of the two histograms and not the sum. One can mark a histogram to be an average; histogram by setting its bit kIsAverage with; myhist.SetBit(TH1::kIsAverage);; Note that the two histograms must have their kIsAverage bit set. IMPORTANT NOTE1: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Add. IMPORTANT NOTE2: if h1 has a normalisation factor, the normalisation factor; is used , ie this = this + c1*factor*h1; Use the other TH1::Add function if you do not want this feature. The function return kFALSE if the Add operation failed. Bool_t Add(const TH1* h, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1); -*-*-*Replace contents of this histogram by the addition of h1 and h2*-*-*. this = c1*h1 + c2*h2; if errors are defined (see TH1::Sumw2), errors are also recalculated; Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; if not already set.; Note also that adding histogram with labels is not supported, histogram will be; added merging them by bin number independently of the labels.; For adding histogram ith labels one should use TH1::Merge. SPECIAL CASE (Average/Efficiency histograms); For histograms representing averages or efficiencies, one should compute the average; of the two histograms and not the sum. One can mark a histogram to be an average; histogram by setting its bit kIsAverage with; myhist.SetBit(TH1::kIsAverage);; Note that the two histograms must have their kIsAverage bit set. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Add. ANOTHER SPECIAL CASE : h1 = h2 and c2 < 0; do a scaling this = c1 * h1 / (bin Volume). The function returns kFALSE if the Add operation failed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:43224,error,errors,43224,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,2,['error'],['errors']
Availability,"ms.; ROOT::Math::MinimizerOptions::SetDefaultTolerance for setting a different tolerance value for the minimization.; ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls for setting the maximum number of function calls.; ROOT::Math::MinimizerOptions::SetDefaultPrintLevel for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing. Other options are possible depending on the Minimizer used, see the corresponding documentation. The default minimizer can be also set in the resource file in etc/system.rootrc. For example; Root.Fitter: Minuit2. Chi-square Fits; By default a chi-square (least-square) fit is performed on the histogram. The so-called modified least-square method is used where the residual for each bin is computed using as error the observed value (the bin error) returned by TH1::GetBinError. \[; Chi2 = \sum_{i}{ \left(\frac{y(i) - f(x(i) | p )}{e(i)} \right)^2 }; \]. where y(i) is the bin content for each bin i, x(i) is the bin center and e(i) is the bin error (sqrt(y(i) for an un-weighted histogram). Bins with zero errors are excluded from the fit. See also later the note on the treatment of empty bins. When using option ""I"" the residual is computed not using the function value at the bin center, f(x(i)|p), but the integral of the function in the bin, Integral{ f(x|p)dx }, divided by the bin volume. When using option P (Pearson chi2), the expected error computed as e(i) = sqrt(f(x(i)|p)) is used. In this case empty bins are considered in the fit. Both chi-square methods should not be used when the bin content represent counts, especially in case of low bin statistics, because they could return a biased result. Likelihood Fits; When using option ""L"" a likelihood fit is used instead of the default chi-square fit. The likelihood is built assuming a Poisson probability density function for each bin. The negative log-likelihood to be minimized is. \[; NLL = - \sum_{i}{ \log {\mathrm P} ( y(i) | f(x(i) | p ) ) }; \]. wh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:131596,error,error,131596,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['error']
Availability,"msIf non-zero, consider only the subset of the parameters in fr for the error evaluation ; [in]argListOptional RooCmdArg that can be applied to a regular plotOn() operation ; [in]linMethodBy default (linMethod=true), a linearized error is shown. . ReturnsThe RooPlot the band was plotted on (for chaining of plotting commands).; The linearized error is calculated as follows: ; \[; \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; \]. where ; \[; F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; \]. with \( f(x) \) the plotted curve and \( \mathrm{d}a \) taken from the fit result, and \( \mathrm{Corr}(a,a') \) = the correlation matrix from the fit result, and \( Z \) = requested signifance ( \( Z \sigma \) band); The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such that at least 30 curves are expected to be outside the N% interval, and is minimally 100 (e.g. Z=1->Ncurve=100, Z=2->Ncurve=659, Z=3->Ncurve=11111) Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much) longer to calculate. ; Definition at line 2601 of file RooAbsReal.cxx. ◆ plotSamplingHint(). std::list< double > * RooAbsReal::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Inter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:138515,robust,robust,138515,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,2,"['error', 'robust']","['error', 'robust']"
Availability,"msIf non-zero, consider only the subset of the parameters in fr for the error evaluation ; [in]argListOptional RooCmdArg that can be applied to a regular plotOn() operation ; [in]linMethodBy default (linMethod=true), a linearized error is shown. . ReturnsThe RooPlot the band was plotted on (for chaining of plotting commands).; The linearized error is calculated as follows: ; \[; \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; \]. where ; \[; F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; \]. with \( f(x) \) the plotted curve and \( \mathrm{d}a \) taken from the fit result, and \( \mathrm{Corr}(a,a') \) = the correlation matrix from the fit result, and \( Z \) = requested signifance ( \( Z \sigma \) band); The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such that at least 30 curves are expected to be outside the N% interval, and is minimally 100 (e.g. Z=1->Ncurve=100, Z=2->Ncurve=659, Z=3->Ncurve=11111) Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much) longer to calculate. ; Definition at line 2686 of file RooAbsReal.cxx. ◆ plotSamplingHint(). std::list< double > * RooAbsReal::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Inter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:139942,robust,robust,139942,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,2,"['error', 'robust']","['error', 'robust']"
Availability,"mstatic; Class_Name()TGeoMediumstatic; Class_Version()TGeoMediuminlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &named) const overrideTNamedvirtual; DeclFileName()TGeoMediuminlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EGeoMedium enum nameTGeoMedium; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fIdTGeoMediumprotected; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fMaterialTGeoMediumprotected; fNameTNamedprotected; fParamsTGeoMediumprotected; fTitleTNamedprotected; fUniqueIDTObjectprivate; GetByteCount() constTGeoMediuminlinevirtual; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetIconName() constTObjectvirtual; GetId() constTGeoMediuminline; GetMaterial() constTGeoMediuminline; GetName() const overrideTNamedinlinevirtual; GetObjectInfo(Int_t px, Int_t py) constTObjectvirtual; GetObjectStat()TObjectstatic; GetOption() constTObjectinlinevirtual; GetParam(Int_t i) constTGeoMediuminline; GetPoint",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoMedium-members.html:1381,error,error,1381,doc/master/classTGeoMedium-members.html,https://root.cern,https://root.cern/doc/master/classTGeoMedium-members.html,2,['error'],['error']
Availability,"mt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TSelector::EAbort { kContinue; kAbortProcess; kAbortFile; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. TTree*fChain! pointer to the analyzed TTree or TChain; TTreeFormula*fSelectPointer to selection formula; Bool_tfSelectMultipletrue if selection has a variable index; Long64_tfSelectedRowsNumber of selected entries. protected:. TSelector::EAbortTSelector::fAbortAbort status; TList*TSelector::fInputList of objects available during processing; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSelectorEntries(TTree* tree = 0, const char* selection = 0). TSelectorEntries(const char* selection). virtual ~TSelectorEntries(). Int_t Version() const; { return 2; }. void Begin(TTree* tree). void SlaveBegin(TTree* tree). void Init(TTree* tree). Bool_t Notify(). Bool_t Process(Long64_t entry). Int_t GetEntry(Long64_t entry, Int_t getall = 0). Long64_t GetSelectedRows() const; { return fSelectedRows; }. void SetOption(const char* option); { fOption = option; }. void SetObject(TObject* obj); { fObject = obj; }. void SetSelection(const char* selection). TList * GetOutputList() const; { return fOutput; }. void SlaveTerminate(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSelectorEntries.html:7022,avail,available,7022,root/html534/TSelectorEntries.html,https://root.cern,https://root.cern/root/html534/TSelectorEntries.html,1,['avail'],['available']
Availability,"mt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. boolfAdaptiveSamplingcontrols use of adaptive sampling algorithm; RooStats::ConfidenceBelt*fConfBelt; boolfCreateBeltcontrols use if ConfidenceBelt should be saved to a TFile; RooAbsData*fDatadata set ; Double_tfLeftSideFraction; RooArgSetfNuisParamsRooArgSet specifying nuisance parameters for interval; RooArgSetfPOIRooArgSet specifying parameters of interest for interval; RooAbsPdf*fPdfcommon PDF; RooAbsData*fPointsToTest; boolfSaveBeltToFilecontrols use if ConfidenceBelt should be saved to a TFile; Double_tfSizesize of the test (eg. specified rate of Type I error); RooStats::TestStatSampler*fTestStatSampler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; NeymanConstruction(); default constructor; fWS = new RooWorkspace();; fOwnsWorkspace = true;; fDataName = """";; fPdfName = """";. void SetModel(const RooStats::ModelConfig& ); set the model. ~NeymanConstruction(); default constructor; if(fOwnsWorkspace && fWS) delete fWS;; if(fConfBelt) delete fConfBelt;. ConfInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval.; It constructs a RooStats::SetInterval. TList* GenSamplingDistribution(const char* asciiFilePat = 0) const; This method generates the sampling distribution for each point of the study. If a file path; is provided, the distribution is saved in a root file. Returns the list of the distributions; for each point. ConfInterval* GetIntervalUsingList() const; Main interface to get a RooStats::ConfInterval.; It constructs a RooStats::PointSetInterval. ConfInterval* GetInterval(const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__NeymanConstruction.html:9229,error,error,9229,root/html526/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html526/RooStats__NeymanConstruction.html,1,['error'],['error']
Availability,"mt, va_list va) const; voidTObject::MakeZombie(). private:. TMVA::MsgLogger&Log() const. Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Int_tfCountnumber of updates contributing to error field; Double_tfDEDwsum of deltas; Double_tfDeltalocal error field; Double_tfLearnRatelearning rate parameter; TMVA::TNeuron*fPostNeuronpointer to post-neuron; TMVA::TNeuron*fPreNeuronpointer to pre-neuron; Double_tfWeightweight of the synapse. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSynapse(); Default constructor. TSynapse(TNeuron * pre, TNeuron * post, Double_t w); Constructor that connects two neurons. void SetWeight(Double_t weight); Sets the weight of the synapse.; This weight is the multiplying factor applied on the; output of a neuron in the linear combination given as input; of another neuron. void SetDEDw(Double_t DEDw); Sets the derivative of the total error wrt the synapse weight. virtual ~TSynapse(); {}. Double_t GetWeight(); { return fweight; }. Double_t GetDEDw(); { return fDEDw; }. » Author: Christophe.Delaere@cern.ch 20/07/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/mlp:$Id$ » Last generated: 2015-06-02 16:19; This page has been automatically generated. For comments or s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__TSynapse.html:6287,error,error,6287,root/html604/TMVA__TSynapse.html,https://root.cern,https://root.cern/root/html604/TMVA__TSynapse.html,2,['error'],['error']
Availability,"mt, va_list va) const; voidTObject::MakeZombie(). private:. TMVA::MsgLogger&Log() const. Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Int_tfCountnumber of updates contributing to error field; Double_tfDEDwsum of deltas; Double_tfDeltalocal error field; Double_tfLearnRatelearning rate parameter; TMVA::TNeuron*fPostNeuronpointer to post-neuron; TMVA::TNeuron*fPreNeuronpointer to pre-neuron; Double_tfWeightweight of the synapse. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSynapse(); Default constructor. TSynapse(TNeuron * pre, TNeuron * post, Double_t w); Constructor that connects two neurons. void SetWeight(Double_t weight); Sets the weight of the synapse.; This weight is the multiplying factor applied on the; output of a neuron in the linear combination given as input; of another neuron. void SetDEDw(Double_t DEDw); Sets the derivative of the total error wrt the synapse weight. virtual ~TSynapse(); {}. Double_t GetWeight(); { return fweight; }. Double_t GetDEDw(); { return fDEDw; }. » Author: Christophe.Delaere@cern.ch 20/07/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/mlp:$Id$ » Last generated: 2015-06-30 15:18; This page has been automatically generated. For comments or s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__TSynapse.html:6287,error,error,6287,root/html602/TMVA__TSynapse.html,https://root.cern,https://root.cern/root/html602/TMVA__TSynapse.html,2,['error'],['error']
Availability,"mt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static RooRealVarSharedProperties & _nullProp ();  Null property. ;  ; static SharedPropertiesMap * sharedPropList ();  List of properties shared among clones of a variable. ;  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . Protected Attributes; std::unordered_map< std::string, std::unique_ptr< RooAbsBinning > > _altNonSharedBinning;  ! Non-shareable alternative binnings ;  ; double _asymErrHi;  High side of asymmetric error associated with current value. ;  ; double _asymErrLo;  Low side of asymmetric error associated with current value. ;  ; std::unique_ptr< RooAbsBinning > _binning;  ; double _error;  Symmetric error associated with current value. ;  ; std::shared_ptr< RooRealVarSharedProperties > _sharedProp;  ! Shared binnings associated with this instance ;  ; std::size_t _valueResetCounter = 0;  ! How many times the value of this variable was reset ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVar.html:68012,error,error,68012,doc/master/classRooRealVar.html,https://root.cern,https://root.cern/doc/master/classRooRealVar.html,1,['error'],['error']
Availability,"mula::SetActionOptimized(Int_t code, Int_t value, Int_t param = 0); virtual Bool_tROOT::v5::TFormula::StringToNumber(Int_t code). Data Members; public:. Double_tfChisquareFunction fit chisquare; Double_tfMaximumMaximum value for plotting; Double_tfMinimumMinimum value for plotting; Int_tfNDFNumber of degrees of freedom in the fit; Int_tfNpfitsNumber of points used in the fit; Int_tfNpxNumber of points used for the graphical representation; Int_tfNsaveNumber of points used to fill array fSave; Double_t*fParErrors[fNpar] Array of errors of the fNpar parameters; Double_t*fParMax[fNpar] Array of upper limits of the fNpar parameters; Double_t*fParMin[fNpar] Array of lower limits of the fNpar parameters; Double_t*fSave[fNsave] Array of fNsave function values; Int_tfType(=0 for standard functions, 1 if pointer to function); Double_tfXmaxUpper bounds for the range; Double_tfXminLower bounds for the range; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static ROOT::v5::TFormula::(anonymous)ROOT::v5::TFormula::kLinear; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static ROOT::v5::TFormula::(anonymous)ROOT::v5::TFormula::kNormalized; static TObject::(anonymous)TObject::kNotDeleted; static ROOT::v5::TFormula::(anonymous)ROOT::v5::TFormula::kNotGlobal; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TBitsROOT::v5::TFormula::fAlreadyFound! cache for information; Double_t*ROOT::v5::TFormula::fConst[fNconst] Array of fNconst formula consta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__v5__TF1Data.html:12353,error,errors,12353,root/html604/ROOT__v5__TF1Data.html,https://root.cern,https://root.cern/root/html604/ROOT__v5__TF1Data.html,1,['error'],['errors']
Availability,"mulation, Bool_t silent = kFALSE). TClass * GenerateTClass(ClassInfo_t* classinfo, Bool_t silent = kFALSE). Int_t GenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0). char * GetPrompt(). const char * GetSharedLibs(). const char * GetClassSharedLibs(const char* cls). const char * GetSharedLibDeps(const char* lib). const char * GetIncludePath(). const char * GetSTLIncludePath() const; { return """"; }. TObjArray * GetRootMapFiles() const. void Initialize(). void InspectMembers(TMemberInspector& , const void* obj, const TClass* cl, Bool_t isTransient). Bool_t IsLoaded(const char* filename) const. Int_t Load(const char* filenam, Bool_t system = kFALSE). void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Int_t LoadLibraryMap(const char* rootmapfile = 0). Int_t RescanLibraryMap(). Int_t ReloadAllSharedLibraryMaps(). Int_t UnloadAllSharedLibraryMaps(). Int_t UnloadLibraryMap(const char* library). Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0). Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0). void PrintIntro(). void RegisterModule(const char* , const char** , const char** , const char* , const char* , void(*)() , const TInterpreter::FwdDeclArgsToKeepCollection_t& fwdDeclArgsToKeep, const char** classesHeaders). void UnRegisterTClassUpdate(const TClass* oldcl). Int_t SetClassSharedLibs(const char* cls, const char* libs). void SetGetline(const char*(*)(const char*) getlineFunc, void(*)(const char*) histaddFunc). void ResetAll(). void ResetGlobals(). void ResetGlobalVar(void* obj). void RewindDictionary(). Int_t DeleteGlobal(void* obj). Int_t DeleteVariable(const char* name). void SaveContext(). void SaveGlobalsContext(). void UpdateListOfGlobals(). void UpdateListOfGlobalFunctions(). void UpdateListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE). Bool_t CheckClassInfo(const char* name, Bool_t autoload, Bool_t isClassOrNamespaceOnly = kFALSE). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TInterpreter.html:27417,error,error,27417,root/html602/TInterpreter.html,https://root.cern,https://root.cern/root/html602/TInterpreter.html,2,['error'],['error']
Availability,"mum correlation of the parameter\n with arbitrary linear combination of other parameters)"");; 689 for(i=0;i<fNpar;i++) {; 690 printf(""%5s: "",fANames[i].Data());; 691 printf(""%11.3E\n"",TMath::Sqrt(1-1/((fR[i]!=0.)?fR[i]:1.)) );; 692 }; 693 std::cout<<std::endl;; 694 return 0;; 695 case 5: // PRIntout not implemented; 696 return -10;; 697 case 6: // NOGradient; 698 if(!setCommand) return 0;; 699 fGRAD = false;; 700 return 0;; 701 case 7: // GRAdient; 702 if(!setCommand) return 0;; 703 fGRAD = true;; 704 return 0;; 705 case 8: // ERRordef - now ignored; 706 return 0;; 707 case 9: // INPut - not implemented; 708 return -10;; 709 case 10: // WIDthpage - not implemented; 710 return -10;; 711 case 11: // LINesperpage - not implemented; 712 return -10;; 713 case 12: //NOWarnings; 714 if(!setCommand) return 0;; 715 fWARN = false;; 716 return 0;; 717 case 13: // WARnings; 718 if(!setCommand) return 0;; 719 fWARN = true;; 720 return 0;; 721 case 14: // RANdomgenerator - not implemented; 722 return -10;; 723 case 15: // TITle - ignored; 724 return 0;; 725 case 16: // STRategy - ignored; 726 return 0;; 727 case 17: // EIGenvalues - not implemented; 728 return -10;; 729 case 18: // PAGethrow - ignored; 730 return 0;; 731 case 19: // MINos errors - not implemented; 732 return -10;; 733 case 20: //EPSmachine; 734 if(!setCommand) {; 735 Printf(""Relative floating point precision RP=%E"",fRP);; 736 } else; 737 if (nargs>0) {; 738 Double_t pres=fCmPar[0];; 739 if (pres<1e-5 && pres>1e-34) fRP=pres;; 740 }; 741 return 0;; 742 case 21: // OUTputfile - not implemented; 743 return -10;; 744 case 22: // BATch - ignored; 745 return 0;; 746 case 23: // INTerative - ignored; 747 return 0;; 748 case 24: // VERsion; 749 if(setCommand) return 0;; 750 Printf(""FUMILI-ROOT version 0.1"");; 751 return 0;; 752 case 25: // reserved; 753 return 0;; 754 case 26: // NODebug; 755 if(!setCommand) return 0;; 756 fDEBUG = false;; 757 return 0;; 758 case 27: // DEBug; 759 if(!setCommand) return 0;; 760 fDEBUG = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:22060,error,errors,22060,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,1,['error'],['errors']
Availability,"mum number of planes*-; *-* ============================; *-* nplanes : number of bit planes; *. void ClearWindow(); Clear current window. void ClosePixmap(); Delete the current pixmap. void CloseWindow(); Delete the current window. void CopyPixmap(Int_t wid, Int_t xpos, Int_t ypos); Copy the pixmap wd at the position xpos, ypos in the current window. void CreateOpenGLContext(Int_t wid = 0); Create OpenGL context for win windows (for ""selected"" Window by default); printf("" TGQt::CreateOpenGLContext for wd = %x fSelected= %x, threadID= %d \n"",wd,fSelectedWindow,; GetCurrentThreadId());. void DeleteOpenGLContext(Int_t wid = 0); Delete OpenGL context for win windows (for ""selected"" Window by default). void DrawBox(Int_t x1, Int_t y1, Int_t x2, Int_t y2, TVirtualX::EBoxMode mode); Draw a box.; mode=0 hollow (kHollow); mode=1 solid (kSolid). void DrawCellArray(Int_t x1, Int_t y1, Int_t x2, Int_t y2, Int_t nx, Int_t ny, Int_t* ic); Draw a cell array.; x1,y1 : left down corner; x2,y2 : right up corner; nx,ny : array size; ic : array. Draw a cell array. The drawing is done with the pixel precision; if (X2-X1)/NX (or Y) is not a exact pixel number the position of; the top rigth corner may be wrong. void DrawFillArea(Int_t n, TPoint* xy); Fill area described by polygon.; n : number of points; xy(2,n) : list of points. void DrawLine(Int_t x1, Int_t y1, Int_t x2, Int_t y2); Draw a line.; x1,y1 : begin of line; x2,y2 : end of line. void DrawPolyLine(Int_t n, TPoint* xy); Draw a line through all points.; n : number of points; xy : list of points. void DrawPolyMarker(Int_t n, TPoint* xy); Draw n markers with the current attributes at position x, y.; n : number of markers to draw; xy : x,y coordinates of markers. void DrawText(Int_t x, Int_t y, Float_t angle, Float_t mgn, const char* text, TVirtualX::ETextMode mode). void GetCharacterUp(Float_t& chupx, Float_t& chupy); Return character up vector. QPaintDevice * GetDoubleBuffer(Int_t wid); Query the pointer to the dev offscreen buff",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGQt.html:25158,down,down,25158,root/html528/TGQt.html,https://root.cern,https://root.cern/root/html528/TGQt.html,3,['down'],['down']
Availability,"mum(Double_t minimum=-1111)TF1virtual; SetName(const char *name)TNamedvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetNDF(Int_t ndf)TF1virtual; SetNdim(Int_t ndim)TF1inline; SetNormalized(Bool_t flag)TF1inlinevirtual; SetNpx(Int_t npx=100)TF1virtual; SetNpy(Int_t npy=100)TF2virtual; SetNumberFitPoints(Int_t npfits)TF1inlinevirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetParameter(Int_t param, Double_t value)TF1inlinevirtual; SetParameter(const TString &name, Double_t value)TF1inlinevirtual; SetParameters(const Double_t *params)TF1inlinevirtual; SetParameters(double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN())TF1inlinevirtual; SetParent(TObject *p=nullptr)TF1inlinevirtual; SetParError(Int_t ipar, Double_t error)TF1virtual; SetParErrors(const Double_t *errors)TF1virtual; SetParLimits(Int_t ipar, Double_t parmin, Double_t parmax)TF1virtual; SetParName(Int_t ipar, const char *name)TF1virtual; SetParNames(const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""")TF1virtual; SetRange(Double_t xmin, Double_t xmax) overrideTF2inlinevirtual; SetRange(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax) overrideTF2virtual; SetRange(Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax) overrideTF2inlinevirtual; SetSavedPoint(Int_t point, Double_t value)TF1virtual; SetTitle(const char *title="""") overrideTF1virtual; SetUniqueID(UInt_t uid)TObjectvirtual; SetVectorized(Bool_t vectorized)TF1inlinevirtual; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTF2virtual; Streame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF2-members.html:17748,error,error,17748,doc/master/classTF2-members.html,https://root.cern,https://root.cern/doc/master/classTF2-members.html,1,['error'],['error']
Availability,"mum; 30static int gDefaultNSearch = 10; // number of time the iteration (bracketing -Brent ) is repeted; 31 ; 32 ; 33 BrentMinimizer1D::BrentMinimizer1D():; 34 fFunction(nullptr),; 35 fLogScan(false), fNIter(0),; 36 fNpx(0), fStatus(-1),; 37 fXMin(0), fXMax(0), fXMinimum(0); 38{; 39// Default Constructor.; 40 fNpx = gDefaultNpx;; 41}; 42 ; 43void BrentMinimizer1D::SetDefaultNpx(int n) { gDefaultNpx = n; }; 44 ; 45void BrentMinimizer1D::SetDefaultNSearch(int n) { gDefaultNSearch = n; }; 46 ; 47 ; 48void BrentMinimizer1D::SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); 49{; 50// Sets function to be minimized.; 51 ; 52 fFunction = &f;; 53 fStatus = -1; // reset the status; 54 ; 55 if (xlow >= xup); 56 {; 57 double tmp = xlow;; 58 xlow = xup;; 59 xup = tmp;; 60 }; 61 fXMin = xlow;; 62 fXMax = xup;; 63}; 64 ; 65 ; 66 ; 67double BrentMinimizer1D::FValMinimum() const; 68{ return (*fFunction)(fXMinimum); }; 69 ; 70double BrentMinimizer1D::FValLower() const; 71{ return (*fFunction)(fXMin); }; 72 ; 73double BrentMinimizer1D::FValUpper() const; 74{ return (*fFunction)(fXMax); }; 75 ; 76bool BrentMinimizer1D::Minimize( int maxIter, double absTol , double relTol); 77{; 78// Find minimum position iterating until convergence specified by the; 79// absolute and relative tolerance or the maximum number of iteration; 80// is reached.; 81// repeat search (Bracketing + Brent) until max number of search is reached (default is 10); 82// maxITer refers to the iterations inside the Brent algorithm; 83 ; 84 if (!fFunction) {; 85 MATH_ERROR_MSG(""BrentMinimizer1D::Minimize"", ""Function has not been set"");; 86 return false;; 87 }; 88 ; 89 if (fLogScan && fXMin <= 0) {; 90 MATH_ERROR_MSG(""BrentMinimizer1D::Minimize"", ""xmin is < 0 and log scan is set - disable it"");; 91 fLogScan = false;; 92 }; 93 ; 94 fNIter = 0;; 95 fStatus = -1;; 96 ; 97 double xmin = fXMin;; 98 double xmax = fXMax;; 99 ; 100 int maxIter1 = gDefaultNSearch; // external loop (number of search ); 101 int ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BrentMinimizer1D_8cxx_source.html:2362,toler,tolerance,2362,doc/master/BrentMinimizer1D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BrentMinimizer1D_8cxx_source.html,1,['toler'],['tolerance']
Availability,"mumMinimize(const ROOT::Minuit2::FCNGradientBase& fcn, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; ROOT::Minuit2::FumiliMinimizer&operator=(const ROOT::Minuit2::FumiliMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::FumiliBuilderfMinBuilder; ROOT::Minuit2::MnSeedGeneratorfMinSeedGen. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FumiliMinimizer(). Constructor initializing the FumiliMinimizer by instantiatiating; the SeedGenerator and MinimumBuilder for the Fumili minimization method. @see MnSeedGenerator. @see FumiliBuilder. {}. ~FumiliMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1); for Fumili. FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>& par, const std::vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1); need to re-implement all function in ModularFuncitionMinimizer otherwise they will be hided. FunctionMinimum Minimize(const FCNGradientBase&fcn, const std::vector<double>&par, const std::vector<double>&err, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__FumiliMinimizer.html:4281,toler,toler,4281,root/html526/ROOT__Minuit2__FumiliMinimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__FumiliMinimizer.html,5,['toler'],['toler']
Availability,"must be called for the most derived class (i.e. BigTrack). Bool_t InheritsFrom(const char* cl) const; Return kTRUE if this class inherits from a class with name ""classname"".; note that the function returns kTRUE in case classname is the class itself. Bool_t InheritsFrom(const TClass* cl) const; Return kTRUE if this class inherits from class cl.; note that the function returns KTRUE in case cl is the class itself. void * DynamicCast(const TClass* base, void* obj, Bool_t up = kTRUE); Cast obj of this class type up to baseclass cl if up is true.; Cast obj of this class type down from baseclass cl if up is false.; If this class is not a baseclass of cl return 0, else the pointer; to the cl part of this (up) or to this (down). const void * DynamicCast(const TClass* base, const void* obj, Bool_t up = kTRUE); Cast obj of this class type up to baseclass cl if up is true.; Cast obj of this class type down from baseclass cl if up is false.; If this class is not a baseclass of cl return 0, else the pointer; to the cl part of this (up) or to this (down). void * New(TClass::ENewType defConstructor = kClassNew, Bool_t quiet = kFALSE) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). If quiet is true, do no issue a message via Error on case; of problems, just return 0. The constructor actually called here can be customized by; using the rootcint pragma:; #pragma link C++ ioctortype UserClass;; For example, with this pragma and a class named MyClass,; this method will called the first of the following 3; constructors which exists and is public:; MyClass(UserClass*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. When more than one pragma ioctortype is used, the first seen as priority; For example with:; #pragma link C++ ioctortype UserClass1;; #pragma link C++ ioctortype UserClass2;; We look in the following order:; MyCla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClass.html:48638,down,down,48638,root/html602/TClass.html,https://root.cern,https://root.cern/root/html602/TClass.html,2,['down'],['down']
Availability,"must be of type kMESS_STRING. Returns length of received string (can be 0 if otherside of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 75 of file TPSocket.h. ◆ Recv() [2/4]. Int_t TPSocket::Recv ; (; char * ; str, . Int_t ; max, . Int_t & ; kind . ). inlineoverridevirtual . Receive a character string message of maximum max length. ; Returns in kind the message type. Returns length of received string+4 (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 76 of file TPSocket.h. ◆ Recv() [3/4]. Int_t TPSocket::Recv ; (; Int_t & ; status, . Int_t & ; kind . ). inlineoverridevirtual . Receives a status and a message type. ; Returns length of received integers, 2*sizeof(Int_t) (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 74 of file TPSocket.h. ◆ Recv() [4/4]. Int_t TPSocket::Recv ; (; TMessage *& ; mess). overridevirtual . Receive a TMessage object. ; The user must delete the TMessage object. Returns length of message in bytes (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). In those case mess == 0. ; Reimplemented from TSocket.; Definition at line 626 of file TPSocket.cxx. ◆ RecvRaw(). Int_t TPSocket::RecvRaw ; (; void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). overridevirtual . Send a raw buffer of specified length. ; Returns the number of bytes sent or -1 in case of error. ; Reimplemented from TSocket.; Definition at line 679 of file TPSocket.cxx. ◆ Send() [1/4]. Int_t TPSocket::Send ; (; const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPSocket.html:27173,error,error,27173,doc/master/classTPSocket.html,https://root.cern,https://root.cern/doc/master/classTPSocket.html,1,['error'],['error']
Availability,"must have the same number of fields, in the same order.; Any field may be quoted. ""1997"",""Ford"",""E350"". Fields with embedded delimiters (e.g. comma) must be quoted. 1997,Ford,E350,""Super, luxurious truck"". Fields with double-quote characters must be quoted, and each of the embedded double-quote characters must be represented by a pair of double-quote characters. 1997,Ford,E350,""Super, """"luxurious"""" truck"". Fields with embedded line breaks are not supported, even when quoted. 1997,Ford,E350,""Go get one now; they are going fast"". Spaces are considered part of a field and are not ignored. 1997, Ford , E350; not same as; 1997,Ford,E350; but same as; 1997, ""Ford"" , E350. If a header row is provided, it must contain column names for each of the fields. Year,Make,Model; 1997,Ford,E350; 2000,Mercury,Cougar. The current implementation of RCsvDS reads the entire CSV file content into memory before RDataFrame starts processing it. Therefore, before creating a CSV RDataFrame, it is important to check both how much memory is available and the size of the CSV file.; RCsvDS can handle empty cells and also allows the usage of the special keywords ""NaN"" and ""nan"" to indicate nan values. If the column is of type double, these cells are stored internally as nan. Empty cells and explicit nan-s inside columns of type Long64_t/bool are stored as zeros. ; Definition at line 35 of file RCsvDS.hxx. Public Member Functions;  RCsvDS (std::string_view fileName, bool readHeaders=true, char delimiter=',', Long64_t linesChunkSize=-1LL, std::unordered_map< std::string, char > &&colTypes={});  Constructor to create a CSV RDataSource for RDataFrame. ;  ;  ~RCsvDS ();  Destructor. ;  ; void Finalize () final;  Convenience method called after concluding an event-loop. ;  ; const std::vector< std::string > & GetColumnNames () const final;  Returns a reference to the collection of the dataset's column names. ;  ; std::vector< std::pair< ULong64_t, ULong64_t > > GetEntryRanges () final;  Return ranges of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RCsvDS.html:2690,avail,available,2690,doc/master/classROOT_1_1RDF_1_1RCsvDS.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RCsvDS.html,1,['avail'],['available']
Availability,"mwx2Total Sum of weight*X*X.Definition TH1.h:99; TH1::GetStdDevvirtual Double_t GetStdDev(Int_t axis=1) constReturns the Standard Deviation (Sigma).Definition TH1.cxx:7607; TH1::GetNbinsYvirtual Int_t GetNbinsY() constDefinition TH1.h:298; TH1::GetBinErrorvirtual Double_t GetBinError(Int_t bin) constReturn value of error associated to bin number bin.Definition TH1.cxx:9063; TH1::GetMeanvirtual Double_t GetMean(Int_t axis=1) constFor axis = 1,2 or 3 returns the mean value of the histogram along X,Y or Z axis.Definition TH1.cxx:7535; TH1::GetDimensionvirtual Int_t GetDimension() constDefinition TH1.h:283; TH1::Streamervoid Streamer(TBuffer &) overrideStream a class object.Definition TH1.cxx:6933; TH1::kIsNotW@ kIsNotWHistogram is forced to be not weighted even when the histogram is filled with weighted.Definition TH1.h:172; TH1::CanExtendAllAxesvirtual Bool_t CanExtendAllAxes() constReturns true if all axes are extendable.Definition TH1.cxx:6636; TH1::Resetvirtual void Reset(Option_t *option="""")Reset this histogram: contents, errors, etc.Definition TH1.cxx:7103; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::GetNcellsvirtual Int_t GetNcells() constDefinition TH1.h:300; TH1::PutStatsvirtual void PutStats(Double_t *stats)Replace current statistics with the values in array stats.Definition TH1.cxx:7884; TH1::GetPainterTVirtualHistPainter * GetPainter(Option_t *option="""")Return pointer to painter.Definition TH1.cxx:4511; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::GetBinvirtual Int_t GetBin(Int_t binx, Int_t biny=0, Int_t binz=0) constReturn Global bin number corresponding to binx,y,z.Definition TH1.cxx:4961; TH1::GetNbinsXvirtual Int_t GetNbinsX() constDefinition TH1.h:297; TH1::Addvirtual Bool_t Add(TF1 *h1, Double_t c1=1, Option_t *option="""")Performs the operation: this = this + c1*f1 if errors are defined (see",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2_8cxx_source.html:174636,error,errors,174636,doc/master/TH2_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2_8cxx_source.html,1,['error'],['errors']
Availability,"myfunc = h->GetFunction(""myfunc"");; 4097/// ~~~; 4098/// or by quering directly the list obtained by calling `TH1::GetListOfFunctions`.; 4099///; 4100/// \anchor HFitStatus; 4101/// ### Fit status; 4102///; 4103/// The status of the fit is obtained converting the TFitResultPtr to an integer; 4104/// independently if the fit option ""S"" is used or not:; 4105///; 4106/// ~~~ {.cpp}; 4107/// TFitResultPtr r = h->Fit(myFunc,opt);; 4108/// Int_t fitStatus = r;; 4109/// ~~~; 4110///; 4111/// - `status = 0` : the fit has been performed successfully (i.e no error occurred).; 4112/// - `status < 0` : there is an error not connected with the minimization procedure, for example when a wrong function is used.; 4113/// - `status > 0` : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; 4114/// - `status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus`.; 4115/// TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error; 4116/// only in Minos but not in Migrad a fitStatus of 40 will be returned.; 4117/// Minuit2 returns 0 in case of success and different values in migrad,minos or; 4118/// hesse depending on the error. See in this case the documentation of; 4119/// Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the; 4120/// minos return status and Minuit2Minimizer::Hesse for the hesse return status.; 4121/// If other minimizers are used see their specific documentation for the status code returned.; 4122/// For example in the case of Fumili, see TFumili::Minimize.; 4123///; 4124/// \anchor HFitRange; 4125/// ### Fitting in a range; 4126///; 4127/// In order to fit in a sub-range of the histogram you have two options:; 4128/// - pass to this function the lower (`xxmin`) and upper (`xxmax`) values for the fitting range;; 4129/// - define a specific range in t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:168768,error,error,168768,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['error']
Availability,"myfunc = h->GetFunction(""myfunc"");; or by quering directly the list obtained by calling TH1::GetListOfFunctions. Fit status; The status of the fit is obtained converting the TFitResultPtr to an integer independently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. status = 0 : the fit has been performed successfully (i.e no error occurred).; status < 0 : there is an error not connected with the minimization procedure, for example when a wrong function is used.; status > 0 : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus. TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error only in Minos but not in Migrad a fitStatus of 40 will be returned. Minuit2 returns 0 in case of success and different values in migrad,minos or hesse depending on the error. See in this case the documentation of Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the minos return status and Minuit2Minimizer::Hesse for the hesse return status. If other minimizers are used see their specific documentation for the status code returned. For example in the case of Fumili, see TFumili::Minimize. Fitting in a range; In order to fit in a sub-range of the histogram you have two options:; pass to this function the lower (xxmin) and upper (xxmax) values for the fitting range;; define a specific range in the fitted function and use the fitting option ""R"". For example, if your histogram has a defined range between -4 and 4 and you want to fit a gaussian only in the interval 1 to 3, you can do:. TF1 *f1 = new TF1(""f1"", ""gaus"", 1, 3);; histo->Fit(""f1"", ""R"");; f1TF1 * f1Definition legend1.C:11; The fitting range is also limited by the histogram range defined using TAxis::SetRang",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:137428,error,error,137428,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['error']
Availability,"m{corr} = V C^{-1} V \f$, where \f$ V \f$ is the original; 1005 * covariance matrix and \f$ C \f$ is the inverse of the covariance matrix calculated using the; 1006 * squared weights. This allows to switch between two interpretations of errors:; 1007 * <table>; 1008 * <tr><th> SumW2Error <th> Interpretation; 1009 * <tr><td> true <td> The errors reflect the uncertainty of the Monte Carlo simulation.; 1010 * Use this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; 1011 *; 1012 * **Example**: Simulation with 1000 events, the average weight is 0.1.; 1013 * The errors are as big as if one fitted to 1000 events.; 1014 * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; 1015 * Use this if you want to know what statistical errors you would get if you had a dataset with as many; 1016 * events as the (weighted) Monte Carlo simulation represents.; 1017 *; 1018 * **Example** (Data as above):; 1019 * The errors are as big as if one fitted to 100 events.; 1020 * </table>; 1021 * \note If the `SumW2Error` correction is enabled, the covariance matrix quality stored in the RooFitResult; 1022 * object will be the minimum of the original covariance matrix quality and the quality of the covariance; 1023 * matrix calculated with the squared weights.; 1024 * <tr><td> `AsymptoticError()` <td> Use the asymptotically correct approach to estimate errors in the presence of weights.; 1025 * This is slower but more accurate than `SumW2Error`. See also https://arxiv.org/abs/1911.01303).; 1026 This option even correctly implements the case of extended likelihood fits; 1027 (see this [writeup on extended weighted fits](https://root.cern/files/extended_weighted_fits.pdf) that complements the paper linked before).; 1028 * <tr><td> `PrefitDataFraction(double fraction)`; 1029 * <td> Runs a prefit on a small dataset of size fraction*(actual data size). This can speed up fits; 1030 * by finding good starti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:48592,error,errors,48592,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['error'],['errors']
Availability,"m{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}} = 0; \]. Getting the right parameter errors with limits.; In the best case, where the minimum is far from any limits, MINUIT will correctly transform the error matrix, and the parameter errors it reports should be accurate and very close to those you would have got without limits. In other cases (which should be more common, since otherwise you wouldn't need limits), the very meaning of parameter errors becomes problematic. Mathematically, since the limit is an absolute constraint on the parameter, a parameter at its limit has no error, at least in one direction. The error matrix, which can assign only symmetric errors, then becomes essentially meaningless. Interpretation of Parameter Errors:; There are two kinds of problems that can arise: the reliability of MINUIT's error estimates, and their statistical interpretation, assuming they are accurate. Statistical interpretation:; For discussion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels see:. F.James. Determining the statistical Significance of experimental Results. Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet. Statistical Methods in Experimental Physics. North-Holland, 1971. Reliability of MINUIT error estimates.; MINUIT always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step sizes as specified by the user. After a HESSE step, the errors are usually quite accurate, unless there has been a problem. MINUIT, when it prints out error values, also gives some indication of how reliable it thinks they are. For example, those marked CURRENT GUESS ERROR are only working values not to be believed, and APPROXIMATE ERROR means that they hav",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:7421,error,error,7421,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,1,['error'],['error']
Availability,"n ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHStack.html:14970,error,error,14970,doc/master/classTHStack.html,https://root.cern,https://root.cern/doc/master/classTHStack.html,2,['error'],['error']
Availability,"n ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCurve.html:20851,error,error,20851,doc/master/classRooCurve.html,https://root.cern,https://root.cern/doc/master/classRooCurve.html,11,['error'],['error']
Availability,"n ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLTH3Composition.html:35998,error,error,35998,doc/master/classTGLTH3Composition.html,https://root.cern,https://root.cern/doc/master/classTGLTH3Composition.html,28,['error'],['error']
Availability,"n ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2D.html:20974,error,error,20974,doc/master/classTGraph2D.html,https://root.cern,https://root.cern/doc/master/classTGraph2D.html,3,['error'],['error']
Availability,"n ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASImage.html:17908,error,error,17908,doc/master/classTASImage.html,https://root.cern,https://root.cern/doc/master/classTASImage.html,1,['error'],['error']
Availability,"n ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolume.html:27651,error,error,27651,doc/master/classTGeoVolume.html,https://root.cern,https://root.cern/doc/master/classTGeoVolume.html,3,['error'],['error']
Availability,"n ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:32121,error,error,32121,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,7,['error'],['error']
Availability,"n ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNode.html:7213,error,error,7213,doc/master/classTNode.html,https://root.cern,https://root.cern/doc/master/classTNode.html,2,['error'],['error']
Availability,"n ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEfficiency.html:42771,error,error,42771,doc/master/classTEfficiency.html,https://root.cern,https://root.cern/doc/master/classTEfficiency.html,3,['error'],['error']
Availability,"n &fParams.front(); }; 170 ; 171 /// parameter value by index; 172 double Value(unsigned int i) const { return fParams[i]; }; 173 /// parameter value by index; 174 double Parameter(unsigned int i) const { return fParams[i]; }; 175 ; 176 /// parameter error by index; 177 // (NOTE: this due to conflict with TObject::Error cannot used in derived class which; 178 // inherits from TObject. Use instead ParError (or Errors()[i] ); 179 double Error(unsigned int i) const {; 180 return (i < fErrors.size() ) ? fErrors[i] : 0;; 181 }; 182 /// parameter error by index; 183 double ParError(unsigned int i) const {; 184 return (i < fErrors.size() ) ? fErrors[i] : 0;; 185 }; 186 ; 187 /// name of the parameter; 188 std::string ParName(unsigned int i) const;; 189 ; 190 /// set the Minos errors for parameter i (called by the Fitter class when running Minos); 191 void SetMinosError(unsigned int i, double elow, double eup);; 192 ; 193 /// Set the chi2 and the ndf; 194 /// This function should be called when using an external FCN for fitting; 195 /// and one provides the chi2 and the number of fitting data points) to store; 196 /// and have them printed in the FitResult class; 197 void SetChi2AndNdf(double chi2, unsigned int npoints);; 198 ; 199 /// query if parameter i has the Minos error; 200 bool HasMinosError(unsigned int i) const;; 201 ; 202 /// lower Minos error. If Minos has not run for parameter i return the parabolic error; 203 double LowerError(unsigned int i) const;; 204 ; 205 /// upper Minos error. If Minos has not run for parameter i return the parabolic error; 206 double UpperError(unsigned int i) const;; 207 ; 208 /// parameter global correlation coefficient; 209 double GlobalCC(unsigned int i) const {; 210 return (i < fGlobalCC.size() ) ? fGlobalCC[i] : -1;; 211 }; 212 ; 213 ; 214 /// retrieve covariance matrix element; 215 double CovMatrix (unsigned int i, unsigned int j) const {; 216 if ( i >= fErrors.size() || j >= fErrors.size() ) return 0;; 217 if (fCovMatrix.empty())",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FitResult_8h_source.html:6958,error,errors,6958,doc/master/FitResult_8h_source.html,https://root.cern,https://root.cern/doc/master/FitResult_8h_source.html,3,['error'],"['error', 'errors']"
Availability,"n ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; bool ExamineMinimum (const ROOT::Minuit2::FunctionMinimum &min);  examine the minimum result ;  ; virtual const ROOT::Minuit2::FCNBase * GetFCN () const;  ; virtual const ROOT::Minuit2::ModularFunctionMinimizer * GetMinimizer () const;  ; int RunMinosError (unsigned int i, double &errLow, double &errUp, int runopt);  ; bool SetCovariance (std::span< const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html:10314,toler,tolerance,10314,doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html,2,"['error', 'toler']","['error', 'tolerance']"
Availability,"n ("".forum <type>"") submits a new post on the ROOT forum via web browser.Definition TApplication.cxx:1165; TApplication::SetReturnFromRunvoid SetReturnFromRun(Bool_t ret)Definition TApplication.h:154; TApplication::fQuitBool_t fQuitDefinition TApplication.h:65; TApplication::TabCompletionHookvirtual Int_t TabCompletionHook(char *buf, int *pLoc, std::ostream &out)What to do when tab is pressed.Definition TApplication.cxx:1917; TApplication::fExitOnExceptionEExitOnException fExitOnExceptionDefinition TApplication.h:71; TApplication::GetApplicationImpvirtual TApplicationImp * GetApplicationImp()Definition TApplication.h:136; TApplication::fFilesTObjArray * fFilesDefinition TApplication.h:66; TApplication::GetIdleCommandconst char * GetIdleCommand() constDefinition TApplication.h:123; TApplication::TApplicationTApplication()Default ctor. Can be used by classes deriving from TApplication.Definition TApplication.cxx:97; TApplication::ProcessFilevirtual Longptr_t ProcessFile(const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE)Process a file containing a C++ macro.Definition TApplication.cxx:1720; TApplication::OpenForumTopicvoid OpenForumTopic(const TString &type)It opens a Forum topic in a web browser with prefilled ROOT version.Definition TApplication.cxx:1011; TApplication::fWorkDirTString fWorkDirDefinition TApplication.h:67; TApplication::ReturnPressedvirtual void ReturnPressed(char *text)Emit signal when return key was pressed.Definition TApplication.cxx:1957; TApplication::fgGraphInitstatic Bool_t fgGraphInitDefinition TApplication.h:74; TApplication::RemoveIdleTimervirtual void RemoveIdleTimer()Remove idle timer. Normally called via TROOT::Idle(0).Definition TApplication.cxx:1885; TApplication::EFileBitsEFileBitsDefinition TApplication.h:48; TApplication::kExpression@ kExpressionDefinition TApplication.h:49; TApplication::NoLogOptBool_t NoLogOpt() constDefinition TApplication.h:143; TApplication::SetIdleTimervirtual void SetIdleTimer(UInt_t idleTimeInSec, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8h_source.html:16616,error,error,16616,doc/master/TApplication_8h_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8h_source.html,1,['error'],['error']
Availability,"n (e.g. polN), switch to use the default minimizer (e.g. Minuit). By default, polN functions are fitted by the linear fitter. *goption:The third parameter is the graphics option that is the same as in the TH1::Draw (see the chapter Draw Options).; xxmin, xxmax:Thee fourth and fifth parameters specify the range over which to apply the fit. By default, the fitted function object is added to the histogram and is drawn in the current pad.; 5.1.2 The TGraph::Fit Method; The signature for fitting a TGraph is exactly the same as for the TH1. Only some options apply only for fitting histograms, these are the options “L”, “WL” and “I”. These options apply instead only for TGraph::Fit, the rest of options (appart from “L”, “WL” and “I” are the same). TGraph specific options. “EX0” When fitting a TGraphErrors or a TgraphAsymErrors the errors on the coordinates are not used in the fit; “ROB” in case of linear fitting use the Robust fitting. Compute the LTS regression coefficients (robust (resistant) regression), using the default fraction of good points.; “ROB=0.x” as above, but compute the LTS regression coefficients, using 0.x as a fraction of good points. 5.2 The TF1 function class; Here we will show how to create the TF1 class that is used for fitting histograms and graphs.; 5.2.1 Fit with a Predefined Function; To fit a histogram with a predefined function, simply pass the name of the function in the first parameter of TH1::Fit. For example, this line fits histogram object hist with a Gaussian.; root[] hist.Fit(""gaus"");; The initial parameter values (and eventual limits) for pre-defined functions are set automatically. For overriding the default limits values use the fit option B.; The list of pre-defined functions that can be used with the Fit method is the following:. “gaus” Gaussian function with 3 parameters: f(x) = p0*exp(-0.5*((x-p1)/p2)^2); “expo”An Exponential with 2 parameters: f(x) = exp(p0+p1*x); “polN” A polynomial of degree N, where N is a number between 0 and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:167052,robust,robust,167052,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['robust'],['robust']
Availability,"n * TTabCom::GetListOfGlobalFunctions ; (; ). Return the list of global functions. ; Definition at line 588 of file TTabCom.cxx. ◆ GetListOfGlobals(). const TSeqCollection * TTabCom::GetListOfGlobals ; (; ). Return the list of globals. ; Definition at line 580 of file TTabCom.cxx. ◆ GetListOfPragmas(). const TSeqCollection * TTabCom::GetListOfPragmas ; (; ). Return the list of pragmas. ; Definition at line 596 of file TTabCom.cxx. ◆ GetListOfSysIncFiles(). const TSeqCollection * TTabCom::GetListOfSysIncFiles ; (; ). Return the list of system include files. ; Definition at line 627 of file TTabCom.cxx. ◆ GetListOfUsers(). const TSeqCollection * TTabCom::GetListOfUsers ; (; ). reads from ""/etc/passwd"" ; Definition at line 639 of file TTabCom.cxx. ◆ GetSysIncludePath(). TString TTabCom::GetSysIncludePath ; (; ). static . [static utility function]///////////////////////////// ; returns a colon-separated string of directories that CINT will search when you call #include<...>; returns empty string on failure. ; Definition at line 928 of file TTabCom.cxx. ◆ Hook(). Int_t TTabCom::Hook ; (; char * ; buf, . int * ; pLoc, . std::ostream & ; out . ). [private] ; Definition at line 1567 of file TTabCom.cxx. ◆ InitPatterns(). void TTabCom::InitPatterns ; (; ). private . [private] ; Definition at line 2139 of file TTabCom.cxx. ◆ IsA(). virtual TClass * TTabCom::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 226 of file TTabCom.h. ◆ IsDirectory(). Bool_t TTabCom::IsDirectory ; (; const char ; fileName[]). static . [static utility function]///////////////////////////// ; calls TSystem::GetPathInfo() to see if ""fileName"" is a system directory. ; Definition at line 1029 of file TTabCom.cxx. ◆ MakeClassFromClassName(). TClass * TTabCom::MakeClassFromClassName ; (; const char ; className[]); const. private . [private] (does some specific error handling that makes the function unsuitable for general use.) returns a new'd TClass given the n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:14433,failure,failure,14433,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['failure'],['failure']
Availability,"n - new minimum will be stored here; newMax - new maximum will be stored here.; false if failed (e.g. if the initial axis limits are wrong; or the new range is more than 2^64 times the old one). void RebinAxis(Double_t x, TAxis* axis); Histogram is resized along axis such that x is in the axis range.; The new axis limits are recomputed by doubling iteratively; the current axis range until the specified value x is within the limits.; The algorithm makes a copy of the histogram, then loops on all bins; of the old histogram to fill the rebinned histogram.; Takes into account errors (Sumw2) if any.; The algorithm works for 1-d, 2-D and 3-D histograms.; The bit kCanRebin must be set before invoking this function.; Ex: h->SetBit(TH1::kCanRebin);. void RecursiveRemove(TObject* obj); Recursively remove object from the list of functions. void Scale(Double_t c1 = 1, Option_t* option = """"); -*-*-*Multiply this histogram by a constant c1*-*-*-*-*-*-*-*-*. this = c1*this. Note that both contents and errors(if any) are scaled.; This function uses the services of TH1::Add. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Scale. One can scale an histogram such that the bins integral is equal to; the normalization parameter via TH1::Scale(Double_t norm), where norm; is the desired normalization divided by the integral of the histogram. If option contains ""width"" the bin contents and errors are divided; by the bin width. void SetDefaultBufferSize(Int_t buffersize = 1000); static function to set the default buffer size for automatic histograms.; When an histogram is created with one of its axis lower limit greater; or equal to its upper limit, the function SetBuffer is automatically; called with the default buffer size. void SetDefaultSumw2(Bool_t sumw2 = kTRUE); static function.; When this static function is called with sumw2=kTRUE, all new; h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:97253,error,errors,97253,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,4,['error'],['errors']
Availability,"n -- RooMCStudy::run: sample 70; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-775.389) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.72761 a1=-0.375581 mean=5.04879 nbkg=141.143 nsig=137.402 sig1frac=0.495257; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 60; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 50; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 40; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 30; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 20; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 10; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 0; [#0] WARNING:Generation -- Fit parameter 'sigma1' does not have an error. A pull distribution cannot be generated. This might be caused by the parameter being constant or because the fits were not run.; [#0] WARNING:Generation -- Fit parameter 'sigma2' does not have an error. A pull distribution cannot be generated. This might be caused by the parameter being constant or because the fits were not run.; [#1] INFO:ObjectHandling -- RooWorkspace::import() importing RooRealVar::meanpull; ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(pullGauss_over_pullGauss_Int[meanpull]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_pullGauss_over_pullGauss_Int[meanpull]_fitParData_model) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; DateFebruary 2018 ; AuthorWouter Verkerke ; Definition in file rf801_mcstudy.C. tutorialsroofitrf801_mcstudy.C. ROOT master - Reference Guide Generated on Tue",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:28988,error,error,28988,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,1,['error'],['error']
Availability,"n -- RooMCStudy::run: sample 70; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-775.389) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.72761 a1=-0.375581 mean=5.04879 nbkg=141.143 nsig=137.402 sig1frac=0.495257; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 60; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 50; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 40; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 30; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 20; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 10; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 0; [#0] WARNING:Generation -- Fit parameter 'sigma1' does not have an error. A pull distribution cannot be generated. This might be caused by the parameter being constant or because the fits were not run.; [#0] WARNING:Generation -- Fit parameter 'sigma2' does not have an error. A pull distribution cannot be generated. This might be caused by the parameter being constant or because the fits were not run.; [#1] INFO:ObjectHandling -- RooWorkspace::import() importing RooRealVar::meanpull; ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(pullGauss_over_pullGauss_Int[meanpull]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_pullGauss_over_pullGauss_Int[meanpull]_fitParData_model) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf801_mcstudy.py. tutorialsroofitrf801_mcstudy.py. ROOT master - ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8py.html:23622,error,error,23622,doc/master/rf801__mcstudy_8py.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8py.html,1,['error'],['error']
Availability,"n -1;; 5507}; 5508 ; 5509////////////////////////////////////////////////////////////////////////////////; 5510/// Return pointer to the 1st Leaf named name in any Branch of this Tree or; 5511/// any branch in the list of friend trees.; 5512 ; 5513Long64_t TTree::GetEntriesFriend() const; 5514{; 5515 if (fEntries) return fEntries;; 5516 if (!fFriends) return 0;; 5517 TFriendElement *fr = (TFriendElement*)fFriends->At(0);; 5518 if (!fr) return 0;; 5519 TTree *t = fr->GetTree();; 5520 if (t==nullptr) return 0;; 5521 return t->GetEntriesFriend();; 5522}; 5523 ; 5524////////////////////////////////////////////////////////////////////////////////; 5525/// Read all branches of entry and return total number of bytes read.; 5526///; 5527/// - `getall = 0` : get only active branches; 5528/// - `getall = 1` : get all branches; 5529///; 5530/// The function returns the number of bytes read from the input buffer.; 5531/// If entry does not exist the function returns 0.; 5532/// If an I/O error occurs, the function returns -1.; 5533///; 5534/// If the Tree has friends, also read the friends entry.; 5535///; 5536/// To activate/deactivate one or more branches, use TBranch::SetBranchStatus; 5537/// For example, if you have a Tree with several hundred branches, and you; 5538/// are interested only by branches named ""a"" and ""b"", do; 5539/// ~~~ {.cpp}; 5540/// mytree.SetBranchStatus(""*"",0); //disable all branches; 5541/// mytree.SetBranchStatus(""a"",1);; 5542/// mytree.SetBranchStatus(""b"",1);; 5543/// ~~~; 5544/// when calling mytree.GetEntry(i); only branches ""a"" and ""b"" will be read.; 5545///; 5546/// __WARNING!!__; 5547/// If your Tree has been created in split mode with a parent branch ""parent."",; 5548/// ~~~ {.cpp}; 5549/// mytree.SetBranchStatus(""parent"",1);; 5550/// ~~~; 5551/// will not activate the sub-branches of ""parent"". You should do:; 5552/// ~~~ {.cpp}; 5553/// mytree.SetBranchStatus(""parent*"",1);; 5554/// ~~~; 5555/// Without the trailing dot in the branch creation yo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:218789,error,error,218789,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['error'],['error']
Availability,"n 2; h2p->Fill(-0.7, -0.5, 1); // fill bin 2; h2p->Fill( 1, 3, 5); // fill bin 3; }; More examples can bin found in $ROOTSYS/tutorials/hist/th2poly*.C. A TH2Poly histogram example. 3.17 Profile Histograms; Profile histograms are in many cases an elegant replacement of two-dimensional histograms. The relationship of two quantities X and Y can be visualized by a two-dimensional histogram or a scatter-plot; its representation is not particularly satisfactory, except for sparse data. If Y is an unknown [but single-valued] function of X, it can be displayed by a profile histogram with much better precision than by a scatter-plot. Profile histograms display the mean value of Y and its RMS for each bin in X. The following shows the contents [capital letters] and the values shown in the graphics [small letters] of the elements for bin j. When you fill a profile histogram with TProfile.Fill(x,y) :. H[j] will contain for each bin j the sum of the y values for this bin; L[j] contains the number of entries in the bin j; e[j] or s[j] will be the resulting error depending on the selected option. See “Build Options”. E[j] = sum Y**2; L[j] = number of entries in bin J; H[j] = sum Y; h[j] = H[j] / L[j]; s[j] = sqrt[E[j] / L[j] - h[j]**2]; e[j] = s[j] / sqrt[L[j]]; In the special case where s[j] is zero, when there is only one entry per bin, e[j] is computed from the average of the s[j] for all bins. This approximation is used to keep the bin during a fit operation. The TProfile constructor takes up to eight arguments. The first five parameters are similar to TH1D constructor.; TProfile(const char *name,const char *title,Int_t nbinsx,; Double_t xlow, Double_t xup, Double_t ylow, Double_t yup,; Option_t *option); All values of y are accepted at filling time. To fill a profile histogram, you must use TProfile::Fill function. Note that when filling the profile histogram the method TProfile::Fill checks if the variable y is between fYmin and fYmax. If a minimum or maximum value is set fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:126687,error,error,126687,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['error'],['error']
Availability,n ; : 100 | 13550.9 12502.3 0.0200464 0.00180511 43856.6 0; : 101 Minimum Test error found - save the configuration ; : 101 | 13439.7 12392 0.0201571 0.00185957 43721.7 0; : 102 Minimum Test error found - save the configuration ; : 102 | 13328.8 12281.3 0.0202143 0.00181888 43489.1 0; : 103 Minimum Test error found - save the configuration ; : 103 | 13217 12173.3 0.0200026 0.0018059 43964.1 0; : 104 Minimum Test error found - save the configuration ; : 104 | 13107.7 12065.4 0.0200115 0.00180466 43939.6 0; : 105 Minimum Test error found - save the configuration ; : 105 | 12997.9 11959.7 0.0201517 0.00183944 43686.6 0; : 106 Minimum Test error found - save the configuration ; : 106 | 12890.1 11854.8 0.0204012 0.00181637 43045.8 0; : 107 Minimum Test error found - save the configuration ; : 107 | 12783.3 11750.6 0.0200273 0.00179591 43880.4 0; : 108 Minimum Test error found - save the configuration ; : 108 | 12679.4 11643.6 0.0200105 0.00179336 43914.7 0; : 109 Minimum Test error found - save the configuration ; : 109 | 12570.9 11543.2 0.0200071 0.00179343 43923.1 0; : 110 Minimum Test error found - save the configuration ; : 110 | 12468 11440.7 0.0200047 0.00179413 43930.5 0; : 111 Minimum Test error found - save the configuration ; : 111 | 12365.7 11337.8 0.0200081 0.00179319 43920.1 0; : 112 Minimum Test error found - save the configuration ; : 112 | 12261.9 11237.7 0.02002 0.00179362 43892.3 0; : 113 Minimum Test error found - save the configuration ; : 113 | 12160 11139.2 0.0201211 0.00180176 43669.7 0; : 114 Minimum Test error found - save the configuration ; : 114 | 12060.2 11039.6 0.020348 0.00184935 43246.4 0; : 115 Minimum Test error found - save the configuration ; : 115 | 11961.2 10939.8 0.0202696 0.00181495 43349.5 0; : 116 Minimum Test error found - save the configuration ; : 116 | 11860.6 10843.2 0.0200362 0.00180159 43872.5 0; : 117 Minimum Test error found - save the configuration ; : 117 | 11765.1 10743.9 0.0200658 0.00179585 43787.7 0; : 118 Minimum T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:23235,error,error,23235,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,n ; : 102 | 13328.8 12281.3 0.0202143 0.00181888 43489.1 0; : 103 Minimum Test error found - save the configuration ; : 103 | 13217 12173.3 0.0200026 0.0018059 43964.1 0; : 104 Minimum Test error found - save the configuration ; : 104 | 13107.7 12065.4 0.0200115 0.00180466 43939.6 0; : 105 Minimum Test error found - save the configuration ; : 105 | 12997.9 11959.7 0.0201517 0.00183944 43686.6 0; : 106 Minimum Test error found - save the configuration ; : 106 | 12890.1 11854.8 0.0204012 0.00181637 43045.8 0; : 107 Minimum Test error found - save the configuration ; : 107 | 12783.3 11750.6 0.0200273 0.00179591 43880.4 0; : 108 Minimum Test error found - save the configuration ; : 108 | 12679.4 11643.6 0.0200105 0.00179336 43914.7 0; : 109 Minimum Test error found - save the configuration ; : 109 | 12570.9 11543.2 0.0200071 0.00179343 43923.1 0; : 110 Minimum Test error found - save the configuration ; : 110 | 12468 11440.7 0.0200047 0.00179413 43930.5 0; : 111 Minimum Test error found - save the configuration ; : 111 | 12365.7 11337.8 0.0200081 0.00179319 43920.1 0; : 112 Minimum Test error found - save the configuration ; : 112 | 12261.9 11237.7 0.02002 0.00179362 43892.3 0; : 113 Minimum Test error found - save the configuration ; : 113 | 12160 11139.2 0.0201211 0.00180176 43669.7 0; : 114 Minimum Test error found - save the configuration ; : 114 | 12060.2 11039.6 0.020348 0.00184935 43246.4 0; : 115 Minimum Test error found - save the configuration ; : 115 | 11961.2 10939.8 0.0202696 0.00181495 43349.5 0; : 116 Minimum Test error found - save the configuration ; : 116 | 11860.6 10843.2 0.0200362 0.00180159 43872.5 0; : 117 Minimum Test error found - save the configuration ; : 117 | 11765.1 10743.9 0.0200658 0.00179585 43787.7 0; : 118 Minimum Test error found - save the configuration ; : 118 | 11664.5 10650.2 0.0200137 0.00179245 43904.8 0; : 119 Minimum Test error found - save the configuration ; : 119 | 11569.9 10554.7 0.0200191 0.00179411 43895.9 0; : 120 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:23461,error,error,23461,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,n ; : 103 | 13217 12173.3 0.0200026 0.0018059 43964.1 0; : 104 Minimum Test error found - save the configuration ; : 104 | 13107.7 12065.4 0.0200115 0.00180466 43939.6 0; : 105 Minimum Test error found - save the configuration ; : 105 | 12997.9 11959.7 0.0201517 0.00183944 43686.6 0; : 106 Minimum Test error found - save the configuration ; : 106 | 12890.1 11854.8 0.0204012 0.00181637 43045.8 0; : 107 Minimum Test error found - save the configuration ; : 107 | 12783.3 11750.6 0.0200273 0.00179591 43880.4 0; : 108 Minimum Test error found - save the configuration ; : 108 | 12679.4 11643.6 0.0200105 0.00179336 43914.7 0; : 109 Minimum Test error found - save the configuration ; : 109 | 12570.9 11543.2 0.0200071 0.00179343 43923.1 0; : 110 Minimum Test error found - save the configuration ; : 110 | 12468 11440.7 0.0200047 0.00179413 43930.5 0; : 111 Minimum Test error found - save the configuration ; : 111 | 12365.7 11337.8 0.0200081 0.00179319 43920.1 0; : 112 Minimum Test error found - save the configuration ; : 112 | 12261.9 11237.7 0.02002 0.00179362 43892.3 0; : 113 Minimum Test error found - save the configuration ; : 113 | 12160 11139.2 0.0201211 0.00180176 43669.7 0; : 114 Minimum Test error found - save the configuration ; : 114 | 12060.2 11039.6 0.020348 0.00184935 43246.4 0; : 115 Minimum Test error found - save the configuration ; : 115 | 11961.2 10939.8 0.0202696 0.00181495 43349.5 0; : 116 Minimum Test error found - save the configuration ; : 116 | 11860.6 10843.2 0.0200362 0.00180159 43872.5 0; : 117 Minimum Test error found - save the configuration ; : 117 | 11765.1 10743.9 0.0200658 0.00179585 43787.7 0; : 118 Minimum Test error found - save the configuration ; : 118 | 11664.5 10650.2 0.0200137 0.00179245 43904.8 0; : 119 Minimum Test error found - save the configuration ; : 119 | 11569.9 10554.7 0.0200191 0.00179411 43895.9 0; : 120 Minimum Test error found - save the configuration ; : 120 | 11473 10462 0.0200241 0.00179418 43883.8 0; : 121 Minimum Tes,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:23575,error,error,23575,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,n ; : 141 | 9644.27 8657.79 0.020429 0.00182729 43006.8 0; : 142 Minimum Test error found - save the configuration ; : 142 | 9564.39 8579.88 0.0204803 0.00186473 42974.8 0; : 143 Minimum Test error found - save the configuration ; : 143 | 9485.56 8503.01 0.0205275 0.0018356 42799.2 0; : 144 Minimum Test error found - save the configuration ; : 144 | 9408.47 8425.29 0.0205008 0.00183704 42863.9 0; : 145 Minimum Test error found - save the configuration ; : 145 | 9331.33 8347.95 0.0201933 0.00180744 43511.7 0; : 146 Minimum Test error found - save the configuration ; : 146 | 9254.79 8271.21 0.0201415 0.00180723 43634.1 0; : 147 Minimum Test error found - save the configuration ; : 147 | 9177.56 8197 0.0201152 0.00181664 43719.3 0; : 148 Minimum Test error found - save the configuration ; : 148 | 9102.51 8122.82 0.0201505 0.00182259 43649.3 0; : 149 Minimum Test error found - save the configuration ; : 149 | 9029.04 8047.39 0.0200933 0.00180584 43745.9 0; : 150 Minimum Test error found - save the configuration ; : 150 | 8953.47 7974.78 0.0200512 0.00180093 43835 0; : 151 Minimum Test error found - save the configuration ; : 151 | 8880.6 7901.79 0.0200576 0.00180346 43825.6 0; : 152 Minimum Test error found - save the configuration ; : 152 | 8806.61 7831.08 0.0200492 0.00180366 43846.4 0; : 153 Minimum Test error found - save the configuration ; : 153 | 8736.73 7757.21 0.0200718 0.00180708 43800.2 0; : 154 Minimum Test error found - save the configuration ; : 154 | 8663.76 7685.97 0.0200413 0.00179705 43849.5 0; : 155 Minimum Test error found - save the configuration ; : 155 | 8592.21 7616.06 0.0200532 0.00180372 43837 0; : 156 Minimum Test error found - save the configuration ; : 156 | 8521.8 7546.54 0.0202528 0.00182096 43403 0; : 157 Minimum Test error found - save the configuration ; : 157 | 8451.39 7478.5 0.0200697 0.00181123 43815.3 0; : 158 Minimum Test error found - save the configuration ; : 158 | 8382.56 7410.24 0.020077 0.00181311 43802.4 0; : 159 Minimum Tes,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:27868,error,error,27868,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,n ; : 166 | 7848.36 6879.88 0.0204674 0.00182719 42918 0; : 167 Minimum Test error found - save the configuration ; : 167 | 7784.6 6815.88 0.0200635 0.00180544 43816.2 0; : 168 Minimum Test error found - save the configuration ; : 168 | 7720.74 6752.64 0.0200614 0.00180502 43820.3 0; : 169 Minimum Test error found - save the configuration ; : 169 | 7657.59 6690.04 0.0201291 0.00181427 43680.6 0; : 170 Minimum Test error found - save the configuration ; : 170 | 7595.66 6626.52 0.0200669 0.00181066 43820.7 0; : 171 Minimum Test error found - save the configuration ; : 171 | 7532.11 6565.9 0.0201114 0.00182063 43737.9 0; : 172 Minimum Test error found - save the configuration ; : 172 | 7471.23 6504.71 0.0200897 0.00182205 43793.2 0; : 173 Minimum Test error found - save the configuration ; : 173 | 7410.53 6443.41 0.0204177 0.00187787 43150.4 0; : 174 Minimum Test error found - save the configuration ; : 174 | 7349.1 6383.77 0.0200981 0.00181163 43748.3 0; : 175 Minimum Test error found - save the configuration ; : 175 | 7289.39 6324 0.0200682 0.0018131 43823.4 0; : 176 Minimum Test error found - save the configuration ; : 176 | 7230 6264.47 0.0200687 0.00181285 43821.5 0; : 177 Minimum Test error found - save the configuration ; : 177 | 7171.82 6204.18 0.0200767 0.00181262 43801.8 0; : 178 Minimum Test error found - save the configuration ; : 178 | 7111.03 6147.7 0.0200764 0.00181324 43803.9 0; : 179 Minimum Test error found - save the configuration ; : 179 | 7053.87 6090.24 0.0200835 0.0018163 43794.3 0; : 180 Minimum Test error found - save the configuration ; : 180 | 6997.03 6032.07 0.0204217 0.00180691 42976.5 0; : 181 Minimum Test error found - save the configuration ; : 181 | 6939.07 5975.45 0.0200798 0.00180145 43767.5 0; : 182 Minimum Test error found - save the configuration ; : 182 | 6882.6 5919.11 0.0200699 0.00180792 43806.8 0; : 183 Minimum Test error found - save the configuration ; : 183 | 6826.1 5863.62 0.0200838 0.00180862 43775.3 0; : 184 Minimum Test,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:30698,error,error,30698,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,n ; : 167 | 7784.6 6815.88 0.0200635 0.00180544 43816.2 0; : 168 Minimum Test error found - save the configuration ; : 168 | 7720.74 6752.64 0.0200614 0.00180502 43820.3 0; : 169 Minimum Test error found - save the configuration ; : 169 | 7657.59 6690.04 0.0201291 0.00181427 43680.6 0; : 170 Minimum Test error found - save the configuration ; : 170 | 7595.66 6626.52 0.0200669 0.00181066 43820.7 0; : 171 Minimum Test error found - save the configuration ; : 171 | 7532.11 6565.9 0.0201114 0.00182063 43737.9 0; : 172 Minimum Test error found - save the configuration ; : 172 | 7471.23 6504.71 0.0200897 0.00182205 43793.2 0; : 173 Minimum Test error found - save the configuration ; : 173 | 7410.53 6443.41 0.0204177 0.00187787 43150.4 0; : 174 Minimum Test error found - save the configuration ; : 174 | 7349.1 6383.77 0.0200981 0.00181163 43748.3 0; : 175 Minimum Test error found - save the configuration ; : 175 | 7289.39 6324 0.0200682 0.0018131 43823.4 0; : 176 Minimum Test error found - save the configuration ; : 176 | 7230 6264.47 0.0200687 0.00181285 43821.5 0; : 177 Minimum Test error found - save the configuration ; : 177 | 7171.82 6204.18 0.0200767 0.00181262 43801.8 0; : 178 Minimum Test error found - save the configuration ; : 178 | 7111.03 6147.7 0.0200764 0.00181324 43803.9 0; : 179 Minimum Test error found - save the configuration ; : 179 | 7053.87 6090.24 0.0200835 0.0018163 43794.3 0; : 180 Minimum Test error found - save the configuration ; : 180 | 6997.03 6032.07 0.0204217 0.00180691 42976.5 0; : 181 Minimum Test error found - save the configuration ; : 181 | 6939.07 5975.45 0.0200798 0.00180145 43767.5 0; : 182 Minimum Test error found - save the configuration ; : 182 | 6882.6 5919.11 0.0200699 0.00180792 43806.8 0; : 183 Minimum Test error found - save the configuration ; : 183 | 6826.1 5863.62 0.0200838 0.00180862 43775.3 0; : 184 Minimum Test error found - save the configuration ; : 184 | 6771.06 5807.61 0.0200991 0.00181199 43746.7 0; : 185 Minimum Tes,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:30808,error,error,30808,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,n ; : 208 | 5563.22 4613.51 0.0205774 0.00187424 42773.5 0; : 209 Minimum Test error found - save the configuration ; : 209 | 5517.39 4568.89 0.0206693 0.00189663 42615.1 0; : 210 Minimum Test error found - save the configuration ; : 210 | 5472.46 4524.65 0.0206417 0.0018492 42570.3 0; : 211 Minimum Test error found - save the configuration ; : 211 | 5426.81 4482.4 0.0206443 0.00186291 42595.5 0; : 212 Minimum Test error found - save the configuration ; : 212 | 5384.28 4437.99 0.020536 0.00181976 42743.7 0; : 213 Minimum Test error found - save the configuration ; : 213 | 5339.22 4395.34 0.0201574 0.00182356 43635.1 0; : 214 Minimum Test error found - save the configuration ; : 214 | 5296.23 4352.84 0.0204206 0.00182076 43011.2 0; : 215 Minimum Test error found - save the configuration ; : 215 | 5253.06 4310.52 0.0202066 0.00181743 43504 0; : 216 Minimum Test error found - save the configuration ; : 216 | 5210.68 4267.22 0.0201957 0.00182236 43541.2 0; : 217 Minimum Test error found - save the configuration ; : 217 | 5167.13 4226.2 0.0205987 0.00192627 42843.8 0; : 218 Minimum Test error found - save the configuration ; : 218 | 5125.25 4184.98 0.0205604 0.00182022 42689.1 0; : 219 Minimum Test error found - save the configuration ; : 219 | 5082.85 4144.99 0.0201692 0.00184819 43665.6 0; : 220 Minimum Test error found - save the configuration ; : 220 | 5041.97 4104.3 0.0201733 0.00183631 43627.6 0; : 221 Minimum Test error found - save the configuration ; : 221 | 5000.63 4064.07 0.0203116 0.00186316 43364 0; : 222 Minimum Test error found - save the configuration ; : 222 | 4960.27 4023.61 0.020233 0.0018342 43481.1 0; : 223 Minimum Test error found - save the configuration ; : 223 | 4919.35 3984.02 0.0201371 0.00181764 43669.4 0; : 224 Minimum Test error found - save the configuration ; : 224 | 4878.53 3945.89 0.0203286 0.0018483 43289.4 0; : 225 Minimum Test error found - save the configuration ; : 225 | 4840.32 3905.84 0.0201762 0.00181162 43562 0; : 226 Minimum Te,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:35452,error,error,35452,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,n ; : 211 | 5426.81 4482.4 0.0206443 0.00186291 42595.5 0; : 212 Minimum Test error found - save the configuration ; : 212 | 5384.28 4437.99 0.020536 0.00181976 42743.7 0; : 213 Minimum Test error found - save the configuration ; : 213 | 5339.22 4395.34 0.0201574 0.00182356 43635.1 0; : 214 Minimum Test error found - save the configuration ; : 214 | 5296.23 4352.84 0.0204206 0.00182076 43011.2 0; : 215 Minimum Test error found - save the configuration ; : 215 | 5253.06 4310.52 0.0202066 0.00181743 43504 0; : 216 Minimum Test error found - save the configuration ; : 216 | 5210.68 4267.22 0.0201957 0.00182236 43541.2 0; : 217 Minimum Test error found - save the configuration ; : 217 | 5167.13 4226.2 0.0205987 0.00192627 42843.8 0; : 218 Minimum Test error found - save the configuration ; : 218 | 5125.25 4184.98 0.0205604 0.00182022 42689.1 0; : 219 Minimum Test error found - save the configuration ; : 219 | 5082.85 4144.99 0.0201692 0.00184819 43665.6 0; : 220 Minimum Test error found - save the configuration ; : 220 | 5041.97 4104.3 0.0201733 0.00183631 43627.6 0; : 221 Minimum Test error found - save the configuration ; : 221 | 5000.63 4064.07 0.0203116 0.00186316 43364 0; : 222 Minimum Test error found - save the configuration ; : 222 | 4960.27 4023.61 0.020233 0.0018342 43481.1 0; : 223 Minimum Test error found - save the configuration ; : 223 | 4919.35 3984.02 0.0201371 0.00181764 43669.4 0; : 224 Minimum Test error found - save the configuration ; : 224 | 4878.53 3945.89 0.0203286 0.0018483 43289.4 0; : 225 Minimum Test error found - save the configuration ; : 225 | 4840.32 3905.84 0.0201762 0.00181162 43562 0; : 226 Minimum Test error found - save the configuration ; : 226 | 4799.06 3868.52 0.0201024 0.00180874 43731 0; : 227 Minimum Test error found - save the configuration ; : 227 | 4760.29 3830.98 0.0201923 0.00181512 43532.4 0; : 228 Minimum Test error found - save the configuration ; : 228 | 4721.11 3793.89 0.0201034 0.00181119 43734.4 0; : 229 Minimum Tes,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:35793,error,error,35793,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,n ; : 212 | 5384.28 4437.99 0.020536 0.00181976 42743.7 0; : 213 Minimum Test error found - save the configuration ; : 213 | 5339.22 4395.34 0.0201574 0.00182356 43635.1 0; : 214 Minimum Test error found - save the configuration ; : 214 | 5296.23 4352.84 0.0204206 0.00182076 43011.2 0; : 215 Minimum Test error found - save the configuration ; : 215 | 5253.06 4310.52 0.0202066 0.00181743 43504 0; : 216 Minimum Test error found - save the configuration ; : 216 | 5210.68 4267.22 0.0201957 0.00182236 43541.2 0; : 217 Minimum Test error found - save the configuration ; : 217 | 5167.13 4226.2 0.0205987 0.00192627 42843.8 0; : 218 Minimum Test error found - save the configuration ; : 218 | 5125.25 4184.98 0.0205604 0.00182022 42689.1 0; : 219 Minimum Test error found - save the configuration ; : 219 | 5082.85 4144.99 0.0201692 0.00184819 43665.6 0; : 220 Minimum Test error found - save the configuration ; : 220 | 5041.97 4104.3 0.0201733 0.00183631 43627.6 0; : 221 Minimum Test error found - save the configuration ; : 221 | 5000.63 4064.07 0.0203116 0.00186316 43364 0; : 222 Minimum Test error found - save the configuration ; : 222 | 4960.27 4023.61 0.020233 0.0018342 43481.1 0; : 223 Minimum Test error found - save the configuration ; : 223 | 4919.35 3984.02 0.0201371 0.00181764 43669.4 0; : 224 Minimum Test error found - save the configuration ; : 224 | 4878.53 3945.89 0.0203286 0.0018483 43289.4 0; : 225 Minimum Test error found - save the configuration ; : 225 | 4840.32 3905.84 0.0201762 0.00181162 43562 0; : 226 Minimum Test error found - save the configuration ; : 226 | 4799.06 3868.52 0.0201024 0.00180874 43731 0; : 227 Minimum Test error found - save the configuration ; : 227 | 4760.29 3830.98 0.0201923 0.00181512 43532.4 0; : 228 Minimum Test error found - save the configuration ; : 228 | 4721.11 3793.89 0.0201034 0.00181119 43734.4 0; : 229 Minimum Test error found - save the configuration ; : 229 | 4683.32 3755.52 0.0201311 0.00181167 43669.5 0; : 230 Minimum Te,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:35906,error,error,35906,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,n ; : 226 | 4799.06 3868.52 0.0201024 0.00180874 43731 0; : 227 Minimum Test error found - save the configuration ; : 227 | 4760.29 3830.98 0.0201923 0.00181512 43532.4 0; : 228 Minimum Test error found - save the configuration ; : 228 | 4721.11 3793.89 0.0201034 0.00181119 43734.4 0; : 229 Minimum Test error found - save the configuration ; : 229 | 4683.32 3755.52 0.0201311 0.00181167 43669.5 0; : 230 Minimum Test error found - save the configuration ; : 230 | 4644.47 3718.53 0.0201323 0.00180638 43654.1 0; : 231 Minimum Test error found - save the configuration ; : 231 | 4606.79 3681.43 0.020129 0.00181323 43678.1 0; : 232 Minimum Test error found - save the configuration ; : 232 | 4567.71 3646.94 0.0201545 0.0018103 43610.4 0; : 233 Minimum Test error found - save the configuration ; : 233 | 4531.87 3609.69 0.0200999 0.00180936 43738.5 0; : 234 Minimum Test error found - save the configuration ; : 234 | 4493.9 3574.45 0.0204352 0.00182946 42997.5 0; : 235 Minimum Test error found - save the configuration ; : 235 | 4458.22 3537.88 0.0202146 0.00181434 43477.6 0; : 236 Minimum Test error found - save the configuration ; : 236 | 4420.27 3503.48 0.0201332 0.00182095 43686.7 0; : 237 Minimum Test error found - save the configuration ; : 237 | 4384.12 3469.32 0.020111 0.00181828 43733.2 0; : 238 Minimum Test error found - save the configuration ; : 238 | 4349.33 3433.65 0.0201102 0.00181751 43733.3 0; : 239 Minimum Test error found - save the configuration ; : 239 | 4312.94 3399.06 0.0201135 0.00181726 43724.7 0; : 240 Minimum Test error found - save the configuration ; : 240 | 4277.25 3365.37 0.0201097 0.00181862 43737.2 0; : 241 Minimum Test error found - save the configuration ; : 241 | 4241.69 3332.68 0.0201074 0.00181941 43744.5 0; : 242 Minimum Test error found - save the configuration ; : 242 | 4208.08 3298.33 0.0201335 0.00181692 43676.3 0; : 243 Minimum Test error found - save the configuration ; : 243 | 4173.13 3264.81 0.0202242 0.00183569 43505.4 0; : 244 Mi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:37490,error,error,37490,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,n ; : 243 | 4173.13 3264.81 0.0202242 0.00183569 43505.4 0; : 244 Minimum Test error found - save the configuration ; : 244 | 4137.61 3233.61 0.0204354 0.00200563 43408 0; : 245 Minimum Test error found - save the configuration ; : 245 | 4104.68 3201.11 0.0208426 0.00184317 42106.5 0; : 246 Minimum Test error found - save the configuration ; : 246 | 4071.07 3168.1 0.0203912 0.0018296 43099.8 0; : 247 Minimum Test error found - save the configuration ; : 247 | 4036.99 3136.52 0.0201725 0.00181637 43582.1 0; : 248 Minimum Test error found - save the configuration ; : 248 | 4004.73 3104.47 0.0201502 0.00182336 43651.8 0; : 249 Minimum Test error found - save the configuration ; : 249 | 3970.44 3073.93 0.0201703 0.00181858 43592.7 0; : 250 Minimum Test error found - save the configuration ; : 250 | 3939.05 3041.72 0.0204513 0.00185682 43023.5 0; : 251 Minimum Test error found - save the configuration ; : 251 | 3905.19 3012.24 0.0207706 0.0018857 42361.9 0; : 252 Minimum Test error found - save the configuration ; : 252 | 3873.64 2981.7 0.0208833 0.0019031 42149.1 0; : 253 Minimum Test error found - save the configuration ; : 253 | 3841.98 2951.54 0.0208487 0.0019305 42287.4 0; : 254 Minimum Test error found - save the configuration ; : 254 | 3809.95 2921.87 0.0208755 0.00187363 42101.1 0; : 255 Minimum Test error found - save the configuration ; : 255 | 3779.13 2892.2 0.020905 0.00188208 42054.6 0; : 256 Minimum Test error found - save the configuration ; : 256 | 3747.34 2863.22 0.020356 0.00183152 43186 0; : 257 Minimum Test error found - save the configuration ; : 257 | 3717.23 2832.96 0.0205175 0.00183548 42822 0; : 258 Minimum Test error found - save the configuration ; : 258 | 3685.71 2804.1 0.0207306 0.00191201 42511.2 0; : 259 Minimum Test error found - save the configuration ; : 259 | 3655.28 2775.93 0.0206157 0.0018465 42623 0; : 260 Minimum Test error found - save the configuration ; : 260 | 3624.6 2748.54 0.0206258 0.00186298 42637.5 0; : 261 Minimum Test err,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:39422,error,error,39422,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,n ; : 264 | 3507.67 2636.8 0.0206158 0.00185399 42639.7 0; : 265 Minimum Test error found - save the configuration ; : 265 | 3477.42 2610.03 0.0202093 0.0018315 43530.8 0; : 266 Minimum Test error found - save the configuration ; : 266 | 3448.44 2583.82 0.0201348 0.00181129 43659.7 0; : 267 Minimum Test error found - save the configuration ; : 267 | 3419.61 2557.61 0.0201203 0.00181281 43697.9 0; : 268 Minimum Test error found - save the configuration ; : 268 | 3391.52 2531.71 0.0201083 0.00181098 43722.2 0; : 269 Minimum Test error found - save the configuration ; : 269 | 3363.52 2505.37 0.0201147 0.00180493 43692.5 0; : 270 Minimum Test error found - save the configuration ; : 270 | 3335.06 2479.9 0.0201599 0.00183615 43659.2 0; : 271 Minimum Test error found - save the configuration ; : 271 | 3308.12 2454.26 0.0202082 0.00181348 43490.8 0; : 272 Minimum Test error found - save the configuration ; : 272 | 3280.89 2427.73 0.020272 0.0018293 43377.6 0; : 273 Minimum Test error found - save the configuration ; : 273 | 3252.38 2403.22 0.0201521 0.00183383 43672.2 0; : 274 Minimum Test error found - save the configuration ; : 274 | 3225.54 2378.31 0.0201071 0.00180974 43722.2 0; : 275 Minimum Test error found - save the configuration ; : 275 | 3198.95 2353.31 0.0201145 0.00180932 43703.5 0; : 276 Minimum Test error found - save the configuration ; : 276 | 3171.39 2329.66 0.0201297 0.00182099 43695.1 0; : 277 Minimum Test error found - save the configuration ; : 277 | 3145.15 2305.54 0.0201561 0.00183399 43663.2 0; : 278 Minimum Test error found - save the configuration ; : 278 | 3119.15 2281.29 0.0205214 0.00187306 42899.3 0; : 279 Minimum Test error found - save the configuration ; : 279 | 3092.67 2258.03 0.0205194 0.00183787 42823.1 0; : 280 Minimum Test error found - save the configuration ; : 280 | 3067.15 2234.03 0.0206301 0.00183798 42571.1 0; : 281 Minimum Test error found - save the configuration ; : 281 | 3041.24 2210.43 0.0205967 0.00188294 42749.4 0; : 282 M,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:41796,error,error,41796,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,n ; : 276 | 3171.39 2329.66 0.0201297 0.00182099 43695.1 0; : 277 Minimum Test error found - save the configuration ; : 277 | 3145.15 2305.54 0.0201561 0.00183399 43663.2 0; : 278 Minimum Test error found - save the configuration ; : 278 | 3119.15 2281.29 0.0205214 0.00187306 42899.3 0; : 279 Minimum Test error found - save the configuration ; : 279 | 3092.67 2258.03 0.0205194 0.00183787 42823.1 0; : 280 Minimum Test error found - save the configuration ; : 280 | 3067.15 2234.03 0.0206301 0.00183798 42571.1 0; : 281 Minimum Test error found - save the configuration ; : 281 | 3041.24 2210.43 0.0205967 0.00188294 42749.4 0; : 282 Minimum Test error found - save the configuration ; : 282 | 3015.05 2187.65 0.0203448 0.00180913 43160 0; : 283 Minimum Test error found - save the configuration ; : 283 | 2989.86 2164.96 0.0201855 0.00181334 43544.1 0; : 284 Minimum Test error found - save the configuration ; : 284 | 2964.88 2142 0.0201236 0.00181217 43688.6 0; : 285 Minimum Test error found - save the configuration ; : 285 | 2939.99 2119.13 0.0201416 0.00181963 43663.5 0; : 286 Minimum Test error found - save the configuration ; : 286 | 2915.05 2096.39 0.0202522 0.00187797 43539.3 0; : 287 Minimum Test error found - save the configuration ; : 287 | 2890.28 2074.46 0.0203309 0.00186659 43326.9 0; : 288 Minimum Test error found - save the configuration ; : 288 | 2866.16 2052.25 0.020288 0.00183539 43354.4 0; : 289 Minimum Test error found - save the configuration ; : 289 | 2841.54 2030.76 0.0202472 0.00188865 43576.5 0; : 290 Minimum Test error found - save the configuration ; : 290 | 2817.7 2009.26 0.020243 0.00187711 43559.1 0; : 291 Minimum Test error found - save the configuration ; : 291 | 2793.45 1988.22 0.0204562 0.0019356 43195.2 0; : 292 Minimum Test error found - save the configuration ; : 292 | 2769.81 1967.05 0.0206007 0.00187416 42720.1 0; : 293 Minimum Test error found - save the configuration ; : 293 | 2746.94 1945.3 0.0203018 0.00188698 43443.4 0; : 294 Minimu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:43159,error,error,43159,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,n ; : 277 | 3145.15 2305.54 0.0201561 0.00183399 43663.2 0; : 278 Minimum Test error found - save the configuration ; : 278 | 3119.15 2281.29 0.0205214 0.00187306 42899.3 0; : 279 Minimum Test error found - save the configuration ; : 279 | 3092.67 2258.03 0.0205194 0.00183787 42823.1 0; : 280 Minimum Test error found - save the configuration ; : 280 | 3067.15 2234.03 0.0206301 0.00183798 42571.1 0; : 281 Minimum Test error found - save the configuration ; : 281 | 3041.24 2210.43 0.0205967 0.00188294 42749.4 0; : 282 Minimum Test error found - save the configuration ; : 282 | 3015.05 2187.65 0.0203448 0.00180913 43160 0; : 283 Minimum Test error found - save the configuration ; : 283 | 2989.86 2164.96 0.0201855 0.00181334 43544.1 0; : 284 Minimum Test error found - save the configuration ; : 284 | 2964.88 2142 0.0201236 0.00181217 43688.6 0; : 285 Minimum Test error found - save the configuration ; : 285 | 2939.99 2119.13 0.0201416 0.00181963 43663.5 0; : 286 Minimum Test error found - save the configuration ; : 286 | 2915.05 2096.39 0.0202522 0.00187797 43539.3 0; : 287 Minimum Test error found - save the configuration ; : 287 | 2890.28 2074.46 0.0203309 0.00186659 43326.9 0; : 288 Minimum Test error found - save the configuration ; : 288 | 2866.16 2052.25 0.020288 0.00183539 43354.4 0; : 289 Minimum Test error found - save the configuration ; : 289 | 2841.54 2030.76 0.0202472 0.00188865 43576.5 0; : 290 Minimum Test error found - save the configuration ; : 290 | 2817.7 2009.26 0.020243 0.00187711 43559.1 0; : 291 Minimum Test error found - save the configuration ; : 291 | 2793.45 1988.22 0.0204562 0.0019356 43195.2 0; : 292 Minimum Test error found - save the configuration ; : 292 | 2769.81 1967.05 0.0206007 0.00187416 42720.1 0; : 293 Minimum Test error found - save the configuration ; : 293 | 2746.94 1945.3 0.0203018 0.00188698 43443.4 0; : 294 Minimum Test error found - save the configuration ; : 294 | 2722.93 1924.99 0.0202207 0.00184041 43524.9 0; : 295 Minimu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:43273,error,error,43273,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,n ; : 278 | 3119.15 2281.29 0.0205214 0.00187306 42899.3 0; : 279 Minimum Test error found - save the configuration ; : 279 | 3092.67 2258.03 0.0205194 0.00183787 42823.1 0; : 280 Minimum Test error found - save the configuration ; : 280 | 3067.15 2234.03 0.0206301 0.00183798 42571.1 0; : 281 Minimum Test error found - save the configuration ; : 281 | 3041.24 2210.43 0.0205967 0.00188294 42749.4 0; : 282 Minimum Test error found - save the configuration ; : 282 | 3015.05 2187.65 0.0203448 0.00180913 43160 0; : 283 Minimum Test error found - save the configuration ; : 283 | 2989.86 2164.96 0.0201855 0.00181334 43544.1 0; : 284 Minimum Test error found - save the configuration ; : 284 | 2964.88 2142 0.0201236 0.00181217 43688.6 0; : 285 Minimum Test error found - save the configuration ; : 285 | 2939.99 2119.13 0.0201416 0.00181963 43663.5 0; : 286 Minimum Test error found - save the configuration ; : 286 | 2915.05 2096.39 0.0202522 0.00187797 43539.3 0; : 287 Minimum Test error found - save the configuration ; : 287 | 2890.28 2074.46 0.0203309 0.00186659 43326.9 0; : 288 Minimum Test error found - save the configuration ; : 288 | 2866.16 2052.25 0.020288 0.00183539 43354.4 0; : 289 Minimum Test error found - save the configuration ; : 289 | 2841.54 2030.76 0.0202472 0.00188865 43576.5 0; : 290 Minimum Test error found - save the configuration ; : 290 | 2817.7 2009.26 0.020243 0.00187711 43559.1 0; : 291 Minimum Test error found - save the configuration ; : 291 | 2793.45 1988.22 0.0204562 0.0019356 43195.2 0; : 292 Minimum Test error found - save the configuration ; : 292 | 2769.81 1967.05 0.0206007 0.00187416 42720.1 0; : 293 Minimum Test error found - save the configuration ; : 293 | 2746.94 1945.3 0.0203018 0.00188698 43443.4 0; : 294 Minimum Test error found - save the configuration ; : 294 | 2722.93 1924.99 0.0202207 0.00184041 43524.9 0; : 295 Minimum Test error found - save the configuration ; : 295 | 2699.2 1905.24 0.0201591 0.00182196 43627.2 0; : 296 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:43387,error,error,43387,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,n ; : 279 | 3092.67 2258.03 0.0205194 0.00183787 42823.1 0; : 280 Minimum Test error found - save the configuration ; : 280 | 3067.15 2234.03 0.0206301 0.00183798 42571.1 0; : 281 Minimum Test error found - save the configuration ; : 281 | 3041.24 2210.43 0.0205967 0.00188294 42749.4 0; : 282 Minimum Test error found - save the configuration ; : 282 | 3015.05 2187.65 0.0203448 0.00180913 43160 0; : 283 Minimum Test error found - save the configuration ; : 283 | 2989.86 2164.96 0.0201855 0.00181334 43544.1 0; : 284 Minimum Test error found - save the configuration ; : 284 | 2964.88 2142 0.0201236 0.00181217 43688.6 0; : 285 Minimum Test error found - save the configuration ; : 285 | 2939.99 2119.13 0.0201416 0.00181963 43663.5 0; : 286 Minimum Test error found - save the configuration ; : 286 | 2915.05 2096.39 0.0202522 0.00187797 43539.3 0; : 287 Minimum Test error found - save the configuration ; : 287 | 2890.28 2074.46 0.0203309 0.00186659 43326.9 0; : 288 Minimum Test error found - save the configuration ; : 288 | 2866.16 2052.25 0.020288 0.00183539 43354.4 0; : 289 Minimum Test error found - save the configuration ; : 289 | 2841.54 2030.76 0.0202472 0.00188865 43576.5 0; : 290 Minimum Test error found - save the configuration ; : 290 | 2817.7 2009.26 0.020243 0.00187711 43559.1 0; : 291 Minimum Test error found - save the configuration ; : 291 | 2793.45 1988.22 0.0204562 0.0019356 43195.2 0; : 292 Minimum Test error found - save the configuration ; : 292 | 2769.81 1967.05 0.0206007 0.00187416 42720.1 0; : 293 Minimum Test error found - save the configuration ; : 293 | 2746.94 1945.3 0.0203018 0.00188698 43443.4 0; : 294 Minimum Test error found - save the configuration ; : 294 | 2722.93 1924.99 0.0202207 0.00184041 43524.9 0; : 295 Minimum Test error found - save the configuration ; : 295 | 2699.2 1905.24 0.0201591 0.00182196 43627.2 0; : 296 Minimum Test error found - save the configuration ; : 296 | 2677.38 1884 0.020139 0.00182793 43689.5 0; : 297 Minimum Tes,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:43501,error,error,43501,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,n ; : 285 | 2939.99 2119.13 0.0201416 0.00181963 43663.5 0; : 286 Minimum Test error found - save the configuration ; : 286 | 2915.05 2096.39 0.0202522 0.00187797 43539.3 0; : 287 Minimum Test error found - save the configuration ; : 287 | 2890.28 2074.46 0.0203309 0.00186659 43326.9 0; : 288 Minimum Test error found - save the configuration ; : 288 | 2866.16 2052.25 0.020288 0.00183539 43354.4 0; : 289 Minimum Test error found - save the configuration ; : 289 | 2841.54 2030.76 0.0202472 0.00188865 43576.5 0; : 290 Minimum Test error found - save the configuration ; : 290 | 2817.7 2009.26 0.020243 0.00187711 43559.1 0; : 291 Minimum Test error found - save the configuration ; : 291 | 2793.45 1988.22 0.0204562 0.0019356 43195.2 0; : 292 Minimum Test error found - save the configuration ; : 292 | 2769.81 1967.05 0.0206007 0.00187416 42720.1 0; : 293 Minimum Test error found - save the configuration ; : 293 | 2746.94 1945.3 0.0203018 0.00188698 43443.4 0; : 294 Minimum Test error found - save the configuration ; : 294 | 2722.93 1924.99 0.0202207 0.00184041 43524.9 0; : 295 Minimum Test error found - save the configuration ; : 295 | 2699.2 1905.24 0.0201591 0.00182196 43627.2 0; : 296 Minimum Test error found - save the configuration ; : 296 | 2677.38 1884 0.020139 0.00182793 43689.5 0; : 297 Minimum Test error found - save the configuration ; : 297 | 2654.18 1863.4 0.0201209 0.00180649 43681.3 0; : 298 Minimum Test error found - save the configuration ; : 298 | 2631.44 1843.45 0.0201273 0.00181385 43683.7 0; : 299 Minimum Test error found - save the configuration ; : 299 | 2608.67 1823.73 0.0201716 0.0018196 43591.9 0; : 300 Minimum Test error found - save the configuration ; : 300 | 2587.28 1803.4 0.0201132 0.00181242 43714.1 0; : 301 Minimum Test error found - save the configuration ; : 301 | 2563.77 1785.09 0.0201182 0.00181092 43698.4 0; : 302 Minimum Test error found - save the configuration ; : 302 | 2542.68 1765.44 0.020145 0.00181496 43644.3 0; : 303 Minimum Te,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:44180,error,error,44180,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,n ; : 286 | 2915.05 2096.39 0.0202522 0.00187797 43539.3 0; : 287 Minimum Test error found - save the configuration ; : 287 | 2890.28 2074.46 0.0203309 0.00186659 43326.9 0; : 288 Minimum Test error found - save the configuration ; : 288 | 2866.16 2052.25 0.020288 0.00183539 43354.4 0; : 289 Minimum Test error found - save the configuration ; : 289 | 2841.54 2030.76 0.0202472 0.00188865 43576.5 0; : 290 Minimum Test error found - save the configuration ; : 290 | 2817.7 2009.26 0.020243 0.00187711 43559.1 0; : 291 Minimum Test error found - save the configuration ; : 291 | 2793.45 1988.22 0.0204562 0.0019356 43195.2 0; : 292 Minimum Test error found - save the configuration ; : 292 | 2769.81 1967.05 0.0206007 0.00187416 42720.1 0; : 293 Minimum Test error found - save the configuration ; : 293 | 2746.94 1945.3 0.0203018 0.00188698 43443.4 0; : 294 Minimum Test error found - save the configuration ; : 294 | 2722.93 1924.99 0.0202207 0.00184041 43524.9 0; : 295 Minimum Test error found - save the configuration ; : 295 | 2699.2 1905.24 0.0201591 0.00182196 43627.2 0; : 296 Minimum Test error found - save the configuration ; : 296 | 2677.38 1884 0.020139 0.00182793 43689.5 0; : 297 Minimum Test error found - save the configuration ; : 297 | 2654.18 1863.4 0.0201209 0.00180649 43681.3 0; : 298 Minimum Test error found - save the configuration ; : 298 | 2631.44 1843.45 0.0201273 0.00181385 43683.7 0; : 299 Minimum Test error found - save the configuration ; : 299 | 2608.67 1823.73 0.0201716 0.0018196 43591.9 0; : 300 Minimum Test error found - save the configuration ; : 300 | 2587.28 1803.4 0.0201132 0.00181242 43714.1 0; : 301 Minimum Test error found - save the configuration ; : 301 | 2563.77 1785.09 0.0201182 0.00181092 43698.4 0; : 302 Minimum Test error found - save the configuration ; : 302 | 2542.68 1765.44 0.020145 0.00181496 43644.3 0; : 303 Minimum Test error found - save the configuration ; : 303 | 2520.76 1746.74 0.0201278 0.00181436 43683.8 0; : 304 Minimum Te,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:44294,error,error,44294,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,n ; : 321 | 2155.9 1431.89 0.0202817 0.00182411 43342.5 0; : 322 Minimum Test error found - save the configuration ; : 322 | 2136.97 1416.3 0.0201745 0.00185513 43669.6 0; : 323 Minimum Test error found - save the configuration ; : 323 | 2118.43 1400.63 0.0201356 0.00181878 43675.8 0; : 324 Minimum Test error found - save the configuration ; : 324 | 2100.24 1384.53 0.0201342 0.00182071 43683.6 0; : 325 Minimum Test error found - save the configuration ; : 325 | 2081.68 1368.94 0.02014 0.00181951 43666.9 0; : 326 Minimum Test error found - save the configuration ; : 326 | 2062.99 1354.16 0.0201231 0.00181474 43695.9 0; : 327 Minimum Test error found - save the configuration ; : 327 | 2044.89 1339.01 0.0203662 0.00185106 43207.9 0; : 328 Minimum Test error found - save the configuration ; : 328 | 2027.08 1324.14 0.0205379 0.00189883 42920.6 0; : 329 Minimum Test error found - save the configuration ; : 329 | 2010.14 1308.4 0.0208465 0.00188706 42195.2 0; : 330 Minimum Test error found - save the configuration ; : 330 | 1991.48 1294.33 0.0203889 0.00185386 43161.4 0; : 331 Minimum Test error found - save the configuration ; : 331 | 1974 1281.47 0.020168 0.00182028 43602.2 0; : 332 Minimum Test error found - save the configuration ; : 332 | 1957.4 1265.55 0.0201238 0.00181209 43687.9 0; : 333 Minimum Test error found - save the configuration ; : 333 | 1939.3 1251.56 0.020118 0.0018119 43701.4 0; : 334 Minimum Test error found - save the configuration ; : 334 | 1922.28 1237.18 0.0201046 0.00181273 43735.3 0; : 335 Minimum Test error found - save the configuration ; : 335 | 1905.38 1223.07 0.0201485 0.00181696 43640.6 0; : 336 Minimum Test error found - save the configuration ; : 336 | 1888.23 1209.6 0.0201214 0.00181991 43712.2 0; : 337 Minimum Test error found - save the configuration ; : 337 | 1871.94 1195.83 0.0205304 0.00184821 42821.5 0; : 338 Minimum Test error found - save the configuration ; : 338 | 1855.07 1182.37 0.0201268 0.00181989 43699.3 0; : 339 Minimum Te,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:48267,error,error,48267,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,n ; : 334 | 1922.28 1237.18 0.0201046 0.00181273 43735.3 0; : 335 Minimum Test error found - save the configuration ; : 335 | 1905.38 1223.07 0.0201485 0.00181696 43640.6 0; : 336 Minimum Test error found - save the configuration ; : 336 | 1888.23 1209.6 0.0201214 0.00181991 43712.2 0; : 337 Minimum Test error found - save the configuration ; : 337 | 1871.94 1195.83 0.0205304 0.00184821 42821.5 0; : 338 Minimum Test error found - save the configuration ; : 338 | 1855.07 1182.37 0.0201268 0.00181989 43699.3 0; : 339 Minimum Test error found - save the configuration ; : 339 | 1838.61 1168.93 0.0201201 0.00181292 43698.7 0; : 340 Minimum Test error found - save the configuration ; : 340 | 1822.04 1156.1 0.020121 0.00181141 43693 0; : 341 Minimum Test error found - save the configuration ; : 341 | 1806.12 1142.64 0.0202229 0.00182722 43488.6 0; : 342 Minimum Test error found - save the configuration ; : 342 | 1789.69 1130.02 0.0201502 0.00182055 43645.1 0; : 343 Minimum Test error found - save the configuration ; : 343 | 1774.23 1116.9 0.0201756 0.0018237 43592.2 0; : 344 Minimum Test error found - save the configuration ; : 344 | 1757.78 1104.57 0.0201146 0.00181274 43711.3 0; : 345 Minimum Test error found - save the configuration ; : 345 | 1742.23 1092.31 0.0201296 0.00180634 43660.4 0; : 346 Minimum Test error found - save the configuration ; : 346 | 1726.84 1079.76 0.0201287 0.00180534 43660.1 0; : 347 Minimum Test error found - save the configuration ; : 347 | 1711.03 1067.63 0.0201353 0.00181782 43674.2 0; : 348 Minimum Test error found - save the configuration ; : 348 | 1695.85 1055.38 0.0201691 0.00181876 43596 0; : 349 Minimum Test error found - save the configuration ; : 349 | 1680.85 1042.99 0.0201335 0.00181253 43665.7 0; : 350 Minimum Test error found - save the configuration ; : 350 | 1665.28 1031.67 0.0201289 0.00181121 43673.7 0; : 351 Minimum Test error found - save the configuration ; : 351 | 1649.82 1020.23 0.0201549 0.00183189 43661 0; : 352 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:49736,error,error,49736,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,n ; : 349 | 1680.85 1042.99 0.0201335 0.00181253 43665.7 0; : 350 Minimum Test error found - save the configuration ; : 350 | 1665.28 1031.67 0.0201289 0.00181121 43673.7 0; : 351 Minimum Test error found - save the configuration ; : 351 | 1649.82 1020.23 0.0201549 0.00183189 43661 0; : 352 Minimum Test error found - save the configuration ; : 352 | 1635.63 1008.56 0.0201479 0.00180795 43620.7 0; : 353 Minimum Test error found - save the configuration ; : 353 | 1620.78 996.719 0.0201232 0.001813 43691.5 0; : 354 Minimum Test error found - save the configuration ; : 354 | 1605.94 985.366 0.0201287 0.00181207 43676.2 0; : 355 Minimum Test error found - save the configuration ; : 355 | 1591.13 974.131 0.0204416 0.00182759 42978.3 0; : 356 Minimum Test error found - save the configuration ; : 356 | 1576.72 963.473 0.0201234 0.00181346 43692.1 0; : 357 Minimum Test error found - save the configuration ; : 357 | 1562.75 952.48 0.0201406 0.00181733 43660.4 0; : 358 Minimum Test error found - save the configuration ; : 358 | 1548.22 941.458 0.0201341 0.00182516 43694.5 0; : 359 Minimum Test error found - save the configuration ; : 359 | 1534.11 930.552 0.0201332 0.0018225 43690.3 0; : 360 Minimum Test error found - save the configuration ; : 360 | 1520 920.009 0.020131 0.00182161 43693.5 0; : 361 Minimum Test error found - save the configuration ; : 361 | 1506.11 909.801 0.0201272 0.00182148 43702.2 0; : 362 Minimum Test error found - save the configuration ; : 362 | 1492.5 899.632 0.0201236 0.00181792 43702.3 0; : 363 Minimum Test error found - save the configuration ; : 363 | 1478.85 889.132 0.0202194 0.00182105 43482.1 0; : 364 Minimum Test error found - save the configuration ; : 364 | 1465.26 879.602 0.0201188 0.00181401 43704.5 0; : 365 Minimum Test error found - save the configuration ; : 365 | 1452.04 868.451 0.0201338 0.00181986 43682.7 0; : 366 Minimum Test error found - save the configuration ; : 366 | 1438.22 858.822 0.0202933 0.00187199 43428 0; : 367 Minimum T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:51437,error,error,51437,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,n ; : 350 | 1665.28 1031.67 0.0201289 0.00181121 43673.7 0; : 351 Minimum Test error found - save the configuration ; : 351 | 1649.82 1020.23 0.0201549 0.00183189 43661 0; : 352 Minimum Test error found - save the configuration ; : 352 | 1635.63 1008.56 0.0201479 0.00180795 43620.7 0; : 353 Minimum Test error found - save the configuration ; : 353 | 1620.78 996.719 0.0201232 0.001813 43691.5 0; : 354 Minimum Test error found - save the configuration ; : 354 | 1605.94 985.366 0.0201287 0.00181207 43676.2 0; : 355 Minimum Test error found - save the configuration ; : 355 | 1591.13 974.131 0.0204416 0.00182759 42978.3 0; : 356 Minimum Test error found - save the configuration ; : 356 | 1576.72 963.473 0.0201234 0.00181346 43692.1 0; : 357 Minimum Test error found - save the configuration ; : 357 | 1562.75 952.48 0.0201406 0.00181733 43660.4 0; : 358 Minimum Test error found - save the configuration ; : 358 | 1548.22 941.458 0.0201341 0.00182516 43694.5 0; : 359 Minimum Test error found - save the configuration ; : 359 | 1534.11 930.552 0.0201332 0.0018225 43690.3 0; : 360 Minimum Test error found - save the configuration ; : 360 | 1520 920.009 0.020131 0.00182161 43693.5 0; : 361 Minimum Test error found - save the configuration ; : 361 | 1506.11 909.801 0.0201272 0.00182148 43702.2 0; : 362 Minimum Test error found - save the configuration ; : 362 | 1492.5 899.632 0.0201236 0.00181792 43702.3 0; : 363 Minimum Test error found - save the configuration ; : 363 | 1478.85 889.132 0.0202194 0.00182105 43482.1 0; : 364 Minimum Test error found - save the configuration ; : 364 | 1465.26 879.602 0.0201188 0.00181401 43704.5 0; : 365 Minimum Test error found - save the configuration ; : 365 | 1452.04 868.451 0.0201338 0.00181986 43682.7 0; : 366 Minimum Test error found - save the configuration ; : 366 | 1438.22 858.822 0.0202933 0.00187199 43428 0; : 367 Minimum Test error found - save the configuration ; : 367 | 1424.9 849.517 0.0203705 0.00181778 43120.3 0; : 368 Minimum Te,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:51551,error,error,51551,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,n ; : 361 | 1506.11 909.801 0.0201272 0.00182148 43702.2 0; : 362 Minimum Test error found - save the configuration ; : 362 | 1492.5 899.632 0.0201236 0.00181792 43702.3 0; : 363 Minimum Test error found - save the configuration ; : 363 | 1478.85 889.132 0.0202194 0.00182105 43482.1 0; : 364 Minimum Test error found - save the configuration ; : 364 | 1465.26 879.602 0.0201188 0.00181401 43704.5 0; : 365 Minimum Test error found - save the configuration ; : 365 | 1452.04 868.451 0.0201338 0.00181986 43682.7 0; : 366 Minimum Test error found - save the configuration ; : 366 | 1438.22 858.822 0.0202933 0.00187199 43428 0; : 367 Minimum Test error found - save the configuration ; : 367 | 1424.9 849.517 0.0203705 0.00181778 43120.3 0; : 368 Minimum Test error found - save the configuration ; : 368 | 1411.97 839.213 0.020133 0.00180845 43657.3 0; : 369 Minimum Test error found - save the configuration ; : 369 | 1398.96 829.601 0.0201373 0.00181244 43656.5 0; : 370 Minimum Test error found - save the configuration ; : 370 | 1385.58 820.462 0.020129 0.00181191 43675 0; : 371 Minimum Test error found - save the configuration ; : 371 | 1373.35 810.549 0.0201499 0.00183853 43688.7 0; : 372 Minimum Test error found - save the configuration ; : 372 | 1359.77 801.896 0.0201658 0.00181611 43597.4 0; : 373 Minimum Test error found - save the configuration ; : 373 | 1347.92 793.298 0.0201248 0.00181285 43687.4 0; : 374 Minimum Test error found - save the configuration ; : 374 | 1335.01 784.052 0.0201186 0.0018071 43688.4 0; : 375 Minimum Test error found - save the configuration ; : 375 | 1322.7 774.736 0.0201382 0.00181076 43650.3 0; : 376 Minimum Test error found - save the configuration ; : 376 | 1310.36 765.843 0.0201418 0.00181155 43643.7 0; : 377 Minimum Test error found - save the configuration ; : 377 | 1298.44 756.891 0.0201268 0.00181403 43685.4 0; : 378 Minimum Test error found - save the configuration ; : 378 | 1285.86 748.455 0.0201275 0.00181908 43695.6 0; : 379 Minimu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:52795,error,error,52795,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,n ; : 369 | 1398.96 829.601 0.0201373 0.00181244 43656.5 0; : 370 Minimum Test error found - save the configuration ; : 370 | 1385.58 820.462 0.020129 0.00181191 43675 0; : 371 Minimum Test error found - save the configuration ; : 371 | 1373.35 810.549 0.0201499 0.00183853 43688.7 0; : 372 Minimum Test error found - save the configuration ; : 372 | 1359.77 801.896 0.0201658 0.00181611 43597.4 0; : 373 Minimum Test error found - save the configuration ; : 373 | 1347.92 793.298 0.0201248 0.00181285 43687.4 0; : 374 Minimum Test error found - save the configuration ; : 374 | 1335.01 784.052 0.0201186 0.0018071 43688.4 0; : 375 Minimum Test error found - save the configuration ; : 375 | 1322.7 774.736 0.0201382 0.00181076 43650.3 0; : 376 Minimum Test error found - save the configuration ; : 376 | 1310.36 765.843 0.0201418 0.00181155 43643.7 0; : 377 Minimum Test error found - save the configuration ; : 377 | 1298.44 756.891 0.0201268 0.00181403 43685.4 0; : 378 Minimum Test error found - save the configuration ; : 378 | 1285.86 748.455 0.0201275 0.00181908 43695.6 0; : 379 Minimum Test error found - save the configuration ; : 379 | 1273.98 740.611 0.0201241 0.00181383 43691.2 0; : 380 Minimum Test error found - save the configuration ; : 380 | 1262.34 731.526 0.0201157 0.00181169 43706.2 0; : 381 Minimum Test error found - save the configuration ; : 381 | 1250.17 723.372 0.0201233 0.00181189 43688.6 0; : 382 Minimum Test error found - save the configuration ; : 382 | 1238.6 715.116 0.0201183 0.00181259 43702.2 0; : 383 Minimum Test error found - save the configuration ; : 383 | 1227 706.748 0.0201329 0.0018213 43688.2 0; : 384 Minimum Test error found - save the configuration ; : 384 | 1215.11 699.222 0.0201342 0.00181943 43680.7 0; : 385 Minimum Test error found - save the configuration ; : 385 | 1203.63 691.403 0.02014 0.00182334 43676.1 0; : 386 Minimum Test error found - save the configuration ; : 386 | 1192.53 683.241 0.0201197 0.00181992 43716.3 0; : 387 Minimum ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:53702,error,error,53702,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
