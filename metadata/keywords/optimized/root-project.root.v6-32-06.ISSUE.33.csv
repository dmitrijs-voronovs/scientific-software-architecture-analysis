quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/61632/console).; ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:836 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3964#issuecomment-503246248:247,message,message,247,https://root.cern,https://github.com/root-project/root/pull/3964#issuecomment-503246248,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/61722/console).; ### Errors:; - CMake Error at C:/Program Files/CMake/share/cmake-3.14/Modules/FindPackageHandleStandardArgs.cmake:137 (message): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:918 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3975#issuecomment-503432242:251,message,message,251,https://root.cern,https://github.com/root-project/root/pull/3975#issuecomment-503432242,2,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/61902/console).; ### Errors:; - CMake Error at C:/build/workspace/root-pullrequests-build/build/ZSTD-prefix/src/ZSTD-stamp/ZSTD-configure-Release.cmake:49 (message): . ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:879 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3947#issuecomment-504291895:271,message,message,271,https://root.cern,https://github.com/root-project/root/pull/3947#issuecomment-504291895,2,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/62127/console).; ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:879 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3850#issuecomment-506255163:247,message,message,247,https://root.cern,https://github.com/root-project/root/pull/3850#issuecomment-506255163,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/62576/console).; ### Errors:; - CMake Error at cmake/modules/RootBuildOptions.cmake:344 (message): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:922 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4041#issuecomment-508501564:204,message,message,204,https://root.cern,https://github.com/root-project/root/pull/4041#issuecomment-508501564,2,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/62588/console).; ### Errors:; - CMake Error at cmake/modules/RootBuildOptions.cmake:344 (message): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:922 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4041#issuecomment-508505729:204,message,message,204,https://root.cern,https://github.com/root-project/root/pull/4041#issuecomment-508505729,2,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/62650/console).; ### Errors:; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:861 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4041#issuecomment-508708487:243,message,message,243,https://root.cern,https://github.com/root-project/root/pull/4041#issuecomment-508708487,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/63236/console).; ### Errors:; - error: Failed to merge in the changes. ; - CMake Error at C:/build/workspace/root-pullrequests-build_2/rootspi/jenkins/root-build.cmake:861 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4082#issuecomment-510834258:288,message,message,288,https://root.cern,https://github.com/root-project/root/pull/4082#issuecomment-510834258,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/63368/console).; ### Errors:; - CMake Error at cmake/modules/SearchInstalledSoftware.cmake:670 (message): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:907 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4070#issuecomment-511396985:211,message,message,211,https://root.cern,https://github.com/root-project/root/pull/4070#issuecomment-511396985,2,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/63452/console).; ### Errors:; - CMake Error at C:/build/workspace/root-pullrequests-build/build/TBB-prefix/src/TBB-stamp/TBB-build-Release.cmake:49 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4005#issuecomment-512008670:264,message,message,264,https://root.cern,https://github.com/root-project/root/pull/4005#issuecomment-512008670,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/63524/console).; ### Errors:; - CMake Error at cmake/modules/FindSQLite3.cmake:51 (include): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:906 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4097#issuecomment-512338682:308,message,message,308,https://root.cern,https://github.com/root-project/root/pull/4097#issuecomment-512338682,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/63542/console).; ### Errors:; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:906 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4095#issuecomment-512508014:243,message,message,243,https://root.cern,https://github.com/root-project/root/pull/4095#issuecomment-512508014,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/63566/console).; ### Errors:; - CMake Error at TBB-stamp/TBB-download-Release.cmake:49 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4005#issuecomment-512769115:203,message,message,203,https://root.cern,https://github.com/root-project/root/pull/4005#issuecomment-512769115,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/63578/console).; ### Errors:; - CMake Error at TBB-stamp/TBB-download-Release.cmake:49 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4097#issuecomment-512772005:203,message,message,203,https://root.cern,https://github.com/root-project/root/pull/4097#issuecomment-512772005,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/63668/console).; ### Errors:; - error: Failed to merge in the changes. ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:845 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3913#issuecomment-513709638:286,message,message,286,https://root.cern,https://github.com/root-project/root/pull/3913#issuecomment-513709638,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/63674/console).; ### Errors:; - error: Failed to merge in the changes. ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:845 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3913#issuecomment-513711494:286,message,message,286,https://root.cern,https://github.com/root-project/root/pull/3913#issuecomment-513711494,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/63794/console).; ### Errors:; - CMake Error at cmake/modules/RootMacros.cmake:324 (message): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:906 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4108#issuecomment-514265002:198,message,message,198,https://root.cern,https://github.com/root-project/root/pull/4108#issuecomment-514265002,2,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/63812/console).; ### Errors:; - CMake Error at cmake/modules/RootMacros.cmake:534 (add_dependencies): ; - CMake Error at cmake/modules/RootMacros.cmake:534 (add_dependencies): ; - CMake Error at cmake/modules/RootMacros.cmake:534 (add_dependencies): ; - CMake Error at cmake/modules/RootMacros.cmake:534 (add_dependencies): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:906 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4108#issuecomment-514618865:539,message,message,539,https://root.cern,https://github.com/root-project/root/pull/4108#issuecomment-514618865,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/64100/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin' ; - CMake Error at C:/build/workspace/root-pullrequests-build_2/rootspi/jenkins/root-build.cmake:845 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4128#issuecomment-515975035:375,message,message,375,https://root.cern,https://github.com/root-project/root/pull/4128#issuecomment-515975035,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/64280/console).; ### Errors:; - CMake Error at C:/build/workspace/root-pullrequests-build_2/rootspi/jenkins/root-build.cmake:906 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4095#issuecomment-517698554:245,message,message,245,https://root.cern,https://github.com/root-project/root/pull/4095#issuecomment-517698554,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/64414/console).; ### Errors:; - error: Failed to merge in the changes. ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:845 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4134#issuecomment-518630156:286,message,message,286,https://root.cern,https://github.com/root-project/root/pull/4134#issuecomment-518630156,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/64438/console).; ### Errors:; - error: Failed to merge in the changes. ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:845 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4134#issuecomment-518658083:286,message,message,286,https://root.cern,https://github.com/root-project/root/pull/4134#issuecomment-518658083,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/64444/console).; ### Errors:; - error: Failed to merge in the changes. ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:845 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4134#issuecomment-518965306:286,message,message,286,https://root.cern,https://github.com/root-project/root/pull/4134#issuecomment-518965306,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/64450/console).; ### Errors:; - error: Failed to merge in the changes. ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:845 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4134#issuecomment-518968765:286,message,message,286,https://root.cern,https://github.com/root-project/root/pull/4134#issuecomment-518968765,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/64522/console).; ### Errors:; - error: Failed to merge in the changes. ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:845 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4165#issuecomment-519556829:286,message,message,286,https://root.cern,https://github.com/root-project/root/pull/4165#issuecomment-519556829,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/64792/console).; ### Errors:; - CMake Error at googletest-stamp/googletest-download-Release.cmake:49 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4187#issuecomment-520723704:217,message,message,217,https://root.cern,https://github.com/root-project/root/pull/4187#issuecomment-520723704,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/64853/console).; ### Errors:; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:877 (message): . ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:863 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4191#issuecomment-520819032:243,message,message,243,https://root.cern,https://github.com/root-project/root/pull/4191#issuecomment-520819032,2,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65051/console).; ### Errors:; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:845 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4201#issuecomment-521230916:243,message,message,243,https://root.cern,https://github.com/root-project/root/pull/4201#issuecomment-521230916,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65362/console).; ### Errors:; - error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. ; - error: cannot lock ref 'refs/remotes/origin/pr/3957/head': Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/refs/remotes/origin/pr/3957/head.lock': File exists. ; - error: failed to run reflog ; - error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. ; - error: cannot lock ref 'refs/remotes/origin/pr/3957/head': Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/refs/remotes/origin/pr/3957/head.lock': File exists. ; - error: cannot lock ref 'refs/remotes/origin/pr/4056/head': Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/refs/remotes/origin/pr/4056/head.lock': File exists. ; - error: failed to run reflog ; - CMake Error at C:/build/workspace/root-pullrequests-build_2/rootspi/jenkins/root-build.cmake:846 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4126#issuecomment-522079254:1104,message,message,1104,https://root.cern,https://github.com/root-project/root/pull/4126#issuecomment-522079254,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65464/console).; ### Errors:; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:846 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4237#issuecomment-522541763:243,message,message,243,https://root.cern,https://github.com/root-project/root/pull/4237#issuecomment-522541763,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65499/console).; ### Errors:; - CMake Error at clad-stamp/clad-download-Release.cmake:49 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4240#issuecomment-522703769:205,message,message,205,https://root.cern,https://github.com/root-project/root/pull/4240#issuecomment-522703769,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65625/console).; ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:864 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4250#issuecomment-523406685:247,message,message,247,https://root.cern,https://github.com/root-project/root/pull/4250#issuecomment-523406685,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65763/console).; ### Errors:; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:846 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3030#issuecomment-523946594:243,message,message,243,https://root.cern,https://github.com/root-project/root/pull/3030#issuecomment-523946594,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/66139/console).; ### Errors:; - error: Failed to merge in the changes. ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:846 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4278#issuecomment-524881679:286,message,message,286,https://root.cern,https://github.com/root-project/root/pull/4278#issuecomment-524881679,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/66265/console).; ### Errors:; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:846 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4286#issuecomment-525218328:243,message,message,243,https://root.cern,https://github.com/root-project/root/pull/4286#issuecomment-525218328,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/66301/console).; ### Errors:; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:846 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4290#issuecomment-525318221:243,message,message,243,https://root.cern,https://github.com/root-project/root/pull/4290#issuecomment-525318221,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/66367/console).; ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:864 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4283#issuecomment-525438980:247,message,message,247,https://root.cern,https://github.com/root-project/root/pull/4283#issuecomment-525438980,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/66735/console).; ### Errors:; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:846 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4319#issuecomment-526620458:243,message,message,243,https://root.cern,https://github.com/root-project/root/pull/4319#issuecomment-526620458,1,['message'],['message']
Integrability,"Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/66741/console).; ### Errors:; - C:\build\workspace\root-pullrequests-build\root\roofit\roofitcore\src\RooAbsPdf.cxx(190): fatal error C1083: Cannot open include file: 'vdt/log.h': No such file or directory [C:\build\workspace\root-pullrequests-build\build\roofit\roofitcore\RooFitCore.vcxproj] . ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:864 (message): ; - C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/DebugInfo/CodeView/SymbolRecordMapping.h(43): warning C4266: 'llvm::Error llvm::codeview::SymbolVisitorCallbacks::visitSymbolBegin(llvm::codeview::CVSymbol &,uint32_t)': no override available for virtual member function from base 'llvm::codeview::SymbolVisitorCallbacks'; function is hidden (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\DebugInfo\CodeView\SymbolSerializer.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\DebugInfo\CodeView\LLVMDebugInfoCodeView.vcxproj] ; - C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/DebugInfo/CodeView/SymbolRecordMapping.h(43): warning C4266: 'llvm::Error llvm::codeview::SymbolVisitorCallbacks::visitSymbolBegin(llvm::codeview::CVSymbol &,uint32_t)': no override available for virtual member function from base 'llvm::codeview::SymbolVisitorCallbacks'; function is hidden (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\DebugInfo\CodeView\SymbolRecordMapping.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\DebugInfo\CodeView\LLVMDebugInfoCodeView.vcxproj] ; - C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/DebugInfo/CodeView/SymbolRecordMapping.h(43): warning C4266: 'llvm::Error llvm::codeview::SymbolVi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4283#issuecomment-526643482:526,message,message,526,https://root.cern,https://github.com/root-project/root/pull/4283#issuecomment-526643482,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/66789/console).; ### Errors:; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:846 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4321#issuecomment-526708170:243,message,message,243,https://root.cern,https://github.com/root-project/root/pull/4321#issuecomment-526708170,1,['message'],['message']
Integrability,"Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/66807/console).; ### Errors:; - C:\build\workspace\root-pullrequests-build\root\roofit\roofitcore\src\RooAbsPdf.cxx(190): fatal error C1083: Cannot open include file: 'vdt/log.h': No such file or directory [C:\build\workspace\root-pullrequests-build\build\roofit\roofitcore\RooFitCore.vcxproj] . ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:864 (message): ; - C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/DebugInfo/CodeView/SymbolRecordMapping.h(43): warning C4266: 'llvm::Error llvm::codeview::SymbolVisitorCallbacks::visitSymbolBegin(llvm::codeview::CVSymbol &,uint32_t)': no override available for virtual member function from base 'llvm::codeview::SymbolVisitorCallbacks'; function is hidden (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\DebugInfo\CodeView\SymbolRecordMapping.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\DebugInfo\CodeView\LLVMDebugInfoCodeView.vcxproj] ; - C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/DebugInfo/CodeView/SymbolRecordMapping.h(43): warning C4266: 'llvm::Error llvm::codeview::SymbolVisitorCallbacks::visitSymbolBegin(llvm::codeview::CVSymbol &,uint32_t)': no override available for virtual member function from base 'llvm::codeview::SymbolVisitorCallbacks'; function is hidden (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\DebugInfo\CodeView\SymbolSerializer.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\DebugInfo\CodeView\LLVMDebugInfoCodeView.vcxproj] ; - C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/DebugInfo/CodeView/SymbolRecordMapping.h(43): warning C4266: 'llvm::Error llvm::codeview::SymbolVi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4283#issuecomment-526742943:526,message,message,526,https://root.cern,https://github.com/root-project/root/pull/4283#issuecomment-526742943,1,['message'],['message']
Integrability,"Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/66856/console).; ### Errors:; - ghprbCommentBody=Build failed on windows10/default.\n[See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/66789/console).\n### Errors:\n- CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:846 (message): \n\n . ### Warnings:; - C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/DebugInfo/CodeView/SymbolRecordMapping.h(43): warning C4266: 'llvm::Error llvm::codeview::SymbolVisitorCallbacks::visitSymbolBegin(llvm::codeview::CVSymbol &,uint32_t)': no override available for virtual member function from base 'llvm::codeview::SymbolVisitorCallbacks'; function is hidden (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\DebugInfo\CodeView\SymbolSerializer.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\DebugInfo\CodeView\LLVMDebugInfoCodeView.vcxproj] ; - C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/DebugInfo/CodeView/SymbolRecordMapping.h(43): warning C4266: 'llvm::Error llvm::codeview::SymbolVisitorCallbacks::visitSymbolBegin(llvm::codeview::CVSymbol &,uint32_t)': no override available for virtual member function from base 'llvm::codeview::SymbolVisitorCallbacks'; function is hidden (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\DebugInfo\CodeView\SymbolDumper.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\DebugInfo\CodeView\LLVMDebugInfoCodeView.vcxproj] ; - C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\DebugInfo\CodeView\SymbolDumper.cpp(62): warning C4266: 'llvm::Error llvm::codeview::SymbolVisitorCallbacks::visitSymbolBegin(llvm::codeview::CVSymbol &,uint32_t)': no override available for virtual member functio",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4321#issuecomment-526836433:407,message,message,407,https://root.cern,https://github.com/root-project/root/pull/4321#issuecomment-526836433,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/66886/console).; ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:864 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4325#issuecomment-527051985:247,message,message,247,https://root.cern,https://github.com/root-project/root/pull/4325#issuecomment-527051985,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/66958/console).; ### Errors:; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:846 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4329#issuecomment-527365791:243,message,message,243,https://root.cern,https://github.com/root-project/root/pull/4329#issuecomment-527365791,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67175/console).; ### Errors:; - error: Failed to merge in the changes. ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:879 (message): . ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:865 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-528283791:286,message,message,286,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-528283791,2,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67199/console).; ### Errors:; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/rootCommon.cmake:230 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4346#issuecomment-528396505:243,message,message,243,https://root.cern,https://github.com/root-project/root/pull/4346#issuecomment-528396505,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67248/console).; ### Errors:; - error: Failed to merge in the changes. ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:885 (message): . ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:868 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-528444430:286,message,message,286,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-528444430,2,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67486/console).; ### Errors:; - CMake Error at cmake/modules/CheckCompiler.cmake:123 (message): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:917 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4363#issuecomment-529428867:201,message,message,201,https://root.cern,https://github.com/root-project/root/pull/4363#issuecomment-529428867,2,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67740/console).; ### Errors:; - CMake Error at cmake/modules/FindZSTD.cmake:63 (message): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:919 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4323#issuecomment-530741384:195,message,message,195,https://root.cern,https://github.com/root-project/root/pull/4323#issuecomment-530741384,2,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67746/console).; ### Errors:; - CMake Error at cmake/modules/FindZSTD.cmake:63 (message): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:919 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4323#issuecomment-530762535:195,message,message,195,https://root.cern,https://github.com/root-project/root/pull/4323#issuecomment-530762535,2,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67833/console).; ### Errors:; - CMake Error at cmake/modules/FindZSTD.cmake:63 (message): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:917 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4323#issuecomment-531751920:195,message,message,195,https://root.cern,https://github.com/root-project/root/pull/4323#issuecomment-531751920,2,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67839/console).; ### Errors:; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:917 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4323#issuecomment-531753972:243,message,message,243,https://root.cern,https://github.com/root-project/root/pull/4323#issuecomment-531753972,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67851/console).; ### Errors:; - CMake Error at C:/Program Files/CMake/share/cmake-3.14/Modules/FindPackageHandleStandardArgs.cmake:137 (message): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:917 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4323#issuecomment-531766624:251,message,message,251,https://root.cern,https://github.com/root-project/root/pull/4323#issuecomment-531766624,2,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67997/console).; ### Errors:; - CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1471 (message): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:915 (message): . ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:866 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4375#issuecomment-532314115:212,message,message,212,https://root.cern,https://github.com/root-project/root/pull/4375#issuecomment-532314115,3,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/68072/console).; ### Errors:; - CMake Error at builtins/glew/CMakeLists.txt:50 (target_compile_definitions): ; - CMake Error at builtins/glew/CMakeLists.txt:51 (target_link_libraries): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:915 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4095#issuecomment-532747421:400,message,message,400,https://root.cern,https://github.com/root-project/root/pull/4095#issuecomment-532747421,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/68724/console).; ### Errors:; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:853 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4445#issuecomment-536145405:243,message,message,243,https://root.cern,https://github.com/root-project/root/pull/4445#issuecomment-536145405,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/68856/console).; ### Errors:; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:853 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4453#issuecomment-536905603:243,message,message,243,https://root.cern,https://github.com/root-project/root/pull/4453#issuecomment-536905603,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/69151/console).; ### Errors:; - CMake Error at bindings/pyroot/CMakeLists.txt:79 (if): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:921 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4479#issuecomment-538359508:302,message,message,302,https://root.cern,https://github.com/root-project/root/pull/4479#issuecomment-538359508,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/69427/console).; ### Errors:; - error: Failed to merge in the changes. ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:889 (message): . ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:872 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4502#issuecomment-539901857:286,message,message,286,https://root.cern,https://github.com/root-project/root/pull/4502#issuecomment-539901857,2,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/69451/console).; ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:872 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-539950170:247,message,message,247,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-539950170,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/69457/console).; ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:872 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4502#issuecomment-539969619:247,message,message,247,https://root.cern,https://github.com/root-project/root/pull/4502#issuecomment-539969619,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/69469/console).; ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:872 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4502#issuecomment-540031636:247,message,message,247,https://root.cern,https://github.com/root-project/root/pull/4502#issuecomment-540031636,1,['message'],['message']
Integrability,"Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/69688/console).; ### Errors:; - C:\build\workspace\root-pullrequests-build\root\bindings\pyroot_experimental\PyROOT\ROOT\src\TTreePyz.cxx(93,61): error C2664: 'CPyCppyy::Converter *CPyCppyy::CreateConverter(const std::string &,dims_t)': cannot convert argument 2 from 'long [2]' to 'dims_t' [C:\build\workspace\root-pullrequests-build\build\bindings\pyroot_experimental\PyROOT\ROOT\ROOTPython.vcxproj] . ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:872 (message):",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-540699486:634,message,message,634,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-540699486,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/69746/console).; ### Errors:; - CMake Error at cmake/modules/RootBuildOptions.cmake:357 (message): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:921 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4523#issuecomment-540767416:204,message,message,204,https://root.cern,https://github.com/root-project/root/pull/4523#issuecomment-540767416,2,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/69787/console).; ### Errors:; - CMake Error at cmake/modules/RootBuildOptions.cmake:357 (message): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:921 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4523#issuecomment-540935888:204,message,message,204,https://root.cern,https://github.com/root-project/root/pull/4523#issuecomment-540935888,2,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/69823/console).; ### Errors:; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:853 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4528#issuecomment-541018307:243,message,message,243,https://root.cern,https://github.com/root-project/root/pull/4528#issuecomment-541018307,1,['message'],['message']
Integrability,"Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/69925/console).; ### Errors:; - C:\build\workspace\root-pullrequests-build\root\bindings\pyroot_experimental\PyROOT\ROOT\src\TTreePyz.cxx(93,61): error C2664: 'CPyCppyy::Converter *CPyCppyy::CreateConverter(const std::string &,dims_t)': cannot convert argument 2 from 'long [2]' to 'dims_t' [C:\build\workspace\root-pullrequests-build\build\bindings\pyroot_experimental\PyROOT\ROOT\ROOTPython.vcxproj] . ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:872 (message):",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-541116739:634,message,message,634,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-541116739,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/69961/console).; ### Errors:; - CMake Error at C:/Program Files/CMake/share/cmake-3.14/Modules/FindPackageHandleStandardArgs.cmake:137 (message): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:921 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4323#issuecomment-541271385:251,message,message,251,https://root.cern,https://github.com/root-project/root/pull/4323#issuecomment-541271385,2,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/69973/console).; ### Errors:; - CMake Error at cmake/modules/RootMacros.cmake:333 (message): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:921 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4536#issuecomment-541335907:198,message,message,198,https://root.cern,https://github.com/root-project/root/pull/4536#issuecomment-541335907,2,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/70069/console).; ### Errors:; - CMake Error at cmake/modules/RootMacros.cmake:333 (message): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:921 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4536#issuecomment-541456666:198,message,message,198,https://root.cern,https://github.com/root-project/root/pull/4536#issuecomment-541456666,2,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/70129/console).; ### Errors:; - CMake Error at C:/Program Files/CMake/share/cmake-3.14/Modules/FindPackageHandleStandardArgs.cmake:137 (message): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:921 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4323#issuecomment-541610025:251,message,message,251,https://root.cern,https://github.com/root-project/root/pull/4323#issuecomment-541610025,2,['message'],['message']
Integrability,"Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/70300/console).; ### Errors:; - C:\build\workspace\root-pullrequests-build\root\core\foundation\src\FoundationUtils.cxx(101,10): error C2664: 'DWORD GetModuleFileNameW(HMODULE,LPWSTR,DWORD)': cannot convert argument 2 from 'char [260]' to 'LPWSTR' [C:\build\workspace\root-pullrequests-build\build\core\foundation\Foundation_Stage1.vcxproj] ; - C:\build\workspace\root-pullrequests-build\root\core\foundation\src\FoundationUtils.cxx(105,37): error C3861: 'DirName': identifier not found [C:\build\workspace\root-pullrequests-build\build\core\foundation\Foundation_Stage1.vcxproj] ; - C:\build\workspace\root-pullrequests-build\root\core\foundation\src\FoundationUtils.cxx(105,29): error C3861: 'DirName': identifier not found [C:\build\workspace\root-pullrequests-build\build\core\foundation\Foundation_Stage1.vcxproj] ; - C:\build\workspace\root-pullrequests-build\root\core\foundation\src\FoundationUtils.cxx(105,37): error C3861: 'DirName': identifier not found [C:\build\workspace\root-pullrequests-build\build\core\foundation\Foundation.vcxproj] ; - C:\build\workspace\root-pullrequests-build\root\core\foundation\src\FoundationUtils.cxx(105,29): error C3861: 'DirName': identifier not found [C:\build\workspace\root-pullrequests-build\build\core\foundation\Foundation.vcxproj] ; - C:\build\workspace\root-pullrequests-build\root\core\foundation\src\FoundationUtils.cxx(106,14): error C3861: 'StrDup': identifier not found [C:\build\workspace\root-pullrequests-build\build\core\foundation\Foundation_Stage1.vcxproj] ; - C:\build\workspace\root-pullrequests-build\root\core\foundation\src\FoundationUtils.cxx(106,14): error C3861: 'StrDup': identifier not found [C:\build\workspace\root-pullrequests-build\build\core\foundation\Foundation.vcxproj] . ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:874 (message):",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4553#issuecomment-542648300:1984,message,message,1984,https://root.cern,https://github.com/root-project/root/pull/4553#issuecomment-542648300,1,['message'],['message']
Integrability,"Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/70312/console).; ### Errors:; - C:\build\workspace\root-pullrequests-build\root\core\foundation\src\FoundationUtils.cxx(108,55): error C2664: 'std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt; ROOT::FoundationUtils::GetFallbackRootSys::&lt;lambda_9fb16fa0be1be96d912f398ac18f6254&gt;::operator ()(std::string &) const': cannot convert argument 1 from 'char [260]' to 'std::string &' [C:\build\workspace\root-pullrequests-build\build\core\foundation\Foundation.vcxproj] ; - C:\build\workspace\root-pullrequests-build\root\core\foundation\src\FoundationUtils.cxx(108,55): error C2664: 'std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt; ROOT::FoundationUtils::GetFallbackRootSys::&lt;lambda_9fb16fa0be1be96d912f398ac18f6254&gt;::operator ()(std::string &) const': cannot convert argument 1 from 'char [260]' to 'std::string &' [C:\build\workspace\root-pullrequests-build\build\core\foundation\Foundation_Stage1.vcxproj] ; - C:\build\workspace\root-pullrequests-build\root\core\foundation\src\FoundationUtils.cxx(108,14): error C3861: 'StrDup': identifier not found [C:\build\workspace\root-pullrequests-build\build\core\foundation\Foundation.vcxproj] ; - C:\build\workspace\root-pullrequests-build\root\core\foundation\src\FoundationUtils.cxx(108,14): error C3861: 'StrDup': identifier not found [C:\build\workspace\root-pullrequests-build\build\core\foundation\Foundation_Stage1.vcxproj] . ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:874 (message):",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4553#issuecomment-542671425:1690,message,message,1690,https://root.cern,https://github.com/root-project/root/pull/4553#issuecomment-542671425,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/70606/console).; ### Errors:; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:936 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4566#issuecomment-544948336:243,message,message,243,https://root.cern,https://github.com/root-project/root/pull/4566#issuecomment-544948336,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/70618/console).; ### Errors:; - CMake Error at C:/Program Files/CMake/share/cmake-3.14/Modules/FindPackageHandleStandardArgs.cmake:137 (message): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:936 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4566#issuecomment-544966571:251,message,message,251,https://root.cern,https://github.com/root-project/root/pull/4566#issuecomment-544966571,2,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/70672/console).; ### Errors:; - CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1499 (message): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:936 (message): . ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:887 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4375#issuecomment-545065831:212,message,message,212,https://root.cern,https://github.com/root-project/root/pull/4375#issuecomment-545065831,3,['message'],['message']
Integrability,"Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/70695/console).; ### Errors:; - C:\build\workspace\root-pullrequests-build\root\bindings\pyroot_experimental\PyROOT\ROOT\src\TTreePyz.cxx(93,61): error C2664: 'CPyCppyy::Converter *CPyCppyy::CreateConverter(const std::string &,dims_t)': cannot convert argument 2 from 'long [2]' to 'dims_t' [C:\build\workspace\root-pullrequests-build\build\bindings\pyroot_experimental\PyROOT\ROOT\ROOTPython.vcxproj] . ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:887 (message):",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-545201513:634,message,message,634,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-545201513,1,['message'],['message']
Integrability,"Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/70719/console).; ### Errors:; - C:\build\workspace\root-pullrequests-build\root\bindings\pyroot_experimental\PyROOT\ROOT\src\TTreePyz.cxx(93,61): error C2664: 'CPyCppyy::Converter *CPyCppyy::CreateConverter(const std::string &,dims_t)': cannot convert argument 2 from 'long [2]' to 'dims_t' [C:\build\workspace\root-pullrequests-build\build\bindings\pyroot_experimental\PyROOT\ROOT\ROOTPython.vcxproj] . ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:887 (message):",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-545309663:634,message,message,634,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-545309663,1,['message'],['message']
Integrability,"Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/70731/console).; ### Errors:; - C:\build\workspace\root-pullrequests-build\root\bindings\pyroot_experimental\PyROOT\ROOT\src\TTreePyz.cxx(93,61): error C2664: 'CPyCppyy::Converter *CPyCppyy::CreateConverter(const std::string &,dims_t)': cannot convert argument 2 from 'long [2]' to 'dims_t' [C:\build\workspace\root-pullrequests-build\build\bindings\pyroot_experimental\PyROOT\ROOT\ROOTPython.vcxproj] . ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:887 (message): ; - CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:31 (message): ; - CMake Warning at bindings/pyroot_experimental/PyROOT/ROOT/CMakeLists.txt:125 (message):",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-545468698:634,message,message,634,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-545468698,3,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/70800/console).; ### Errors:; - CMake Error at interpreter/CMakeLists.txt:159 (string): ; - CMake Error at C:/build/workspace/root-pullrequests-build/roottest/cmake/modules/RoottestMacros.cmake:400 (CMAKE_PARSE_ARGUMENTS): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4576#issuecomment-545873415:438,message,message,438,https://root.cern,https://github.com/root-project/root/pull/4576#issuecomment-545873415,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/70820/console).; ### Errors:; - CMake Error at interpreter/CMakeLists.txt:159 (string): ; - CMake Error at C:/build/workspace/root-pullrequests-build/roottest/cmake/modules/RoottestMacros.cmake:400 (CMAKE_PARSE_ARGUMENTS): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4576#issuecomment-545908378:438,message,message,438,https://root.cern,https://github.com/root-project/root/pull/4576#issuecomment-545908378,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/70838/console).; ### Errors:; - error: Failed to merge in the changes. ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:873 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4578#issuecomment-545948376:286,message,message,286,https://root.cern,https://github.com/root-project/root/pull/4578#issuecomment-545948376,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/70850/console).; ### Errors:; - CMake Error at interpreter/CMakeLists.txt:159 (string): ; - CMake Error at C:/build/workspace/root-pullrequests-build/roottest/cmake/modules/RoottestMacros.cmake:400 (CMAKE_PARSE_ARGUMENTS): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4576#issuecomment-545972720:438,message,message,438,https://root.cern,https://github.com/root-project/root/pull/4576#issuecomment-545972720,1,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/70891/console).; ### Errors:; - error: Failed to merge in the changes. ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:873 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4016#issuecomment-546325080:286,message,message,286,https://root.cern,https://github.com/root-project/root/pull/4016#issuecomment-546325080,1,['message'],['message']
Integrability,"Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/70927/console).; ### Errors:; - C:\build\workspace\root-pullrequests-build\root\bindings\pyroot_experimental\PyROOT\ROOT\src\TTreePyz.cxx(93,61): error C2664: 'CPyCppyy::Converter *CPyCppyy::CreateConverter(const std::string &,dims_t)': cannot convert argument 2 from 'long [2]' to 'dims_t' [C:\build\workspace\root-pullrequests-build\build\bindings\pyroot_experimental\PyROOT\ROOT\ROOTPython.vcxproj] . ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message): ; - CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:31 (message): ; - CMake Warning at bindings/pyroot_experimental/PyROOT/ROOT/CMakeLists.txt:125 (message):",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-546609466:634,message,message,634,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-546609466,3,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/70933/console).; ### Errors:; - CMake Error at C:/build/workspace/root-pullrequests-build/roottest/cmake/modules/RoottestMacros.cmake:400 (CMAKE_PARSE_ARGUMENTS): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message): . ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message): ; - CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:31 (message): ; - CMake Warning at bindings/pyroot_experimental/PyROOT/ROOT/CMakeLists.txt:125 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-546613683:378,message,message,378,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-546613683,4,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/70951/console).; ### Errors:; - CMake Error at C:/build/workspace/root-pullrequests-build/roottest/cmake/modules/RoottestMacros.cmake:400 (CMAKE_PARSE_ARGUMENTS): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message): . ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message): ; - CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:31 (message): ; - CMake Warning at bindings/pyroot_experimental/PyROOT/ROOT/CMakeLists.txt:125 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-546694230:378,message,message,378,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-546694230,4,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/70963/console).; ### Errors:; - CMake Error at C:/build/workspace/root-pullrequests-build/roottest/cmake/modules/RoottestMacros.cmake:400 (CMAKE_PARSE_ARGUMENTS): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message): . ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message): ; - CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:31 (message): ; - CMake Warning at bindings/pyroot_experimental/PyROOT/ROOT/CMakeLists.txt:125 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-546705091:378,message,message,378,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-546705091,4,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/70969/console).; ### Errors:; - CMake Error at C:/build/workspace/root-pullrequests-build/roottest/cmake/modules/RoottestMacros.cmake:400 (CMAKE_PARSE_ARGUMENTS): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message): . ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message): ; - CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:31 (message): ; - CMake Warning at bindings/pyroot_experimental/PyROOT/ROOT/CMakeLists.txt:130 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-546713460:378,message,message,378,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-546713460,4,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/70975/console).; ### Errors:; - CMake Error at C:/build/workspace/root-pullrequests-build/roottest/cmake/modules/RoottestMacros.cmake:400 (CMAKE_PARSE_ARGUMENTS): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message): . ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message): ; - CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:36 (message): ; - CMake Warning at bindings/pyroot_experimental/PyROOT/ROOT/CMakeLists.txt:130 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-546715109:378,message,message,378,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-546715109,4,['message'],['message']
Integrability,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/70981/console).; ### Errors:; - CMake Error at C:/build/workspace/root-pullrequests-build/roottest/cmake/modules/RoottestMacros.cmake:400 (CMAKE_PARSE_ARGUMENTS): ; - CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:941 (message): . ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message): ; - CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:36 (message): ; - CMake Warning at bindings/pyroot_experimental/PyROOT/ROOT/CMakeLists.txt:130 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-546723680:378,message,message,378,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-546723680,4,['message'],['message']
Integrability,"Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71059/console).; ### Errors:; - C:\build\workspace\root-pullrequests-build\root\bindings\pyroot_experimental\PyROOT\ROOT\src\TTreePyz.cxx(93,61): error C2664: 'CPyCppyy::Converter *CPyCppyy::CreateConverter(const std::string &,dims_t)': cannot convert argument 2 from 'long [2]' to 'dims_t' [C:\build\workspace\root-pullrequests-build\build\bindings\pyroot_experimental\PyROOT\ROOT\ROOTPython.vcxproj] . ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message): ; - CMake Warning at bindings/pyroot_experimental/cppyy/cppyy/CMakeLists.txt:36 (message): ; - CMake Warning at bindings/pyroot_experimental/PyROOT/ROOT/CMakeLists.txt:130 (message):",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-547073630:634,message,message,634,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-547073630,3,['message'],['message']
Integrability,"Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71203/console).; AXEL DEBUG: logParserAction errors=1, warnings=1; ### Errors:; - C:\build\workspace\root-pullrequests-build\root\interpreter\cling\lib\Utils\PlatformWin.cpp(385,1): fatal error C1189: #error: ""Unsupported/Untested _MSC_VER"" [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\cling\lib\Utils\obj.clingUtils.vcxproj] . ### Warnings:; - CMake Warning at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message):",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4592#issuecomment-547397186:590,message,message,590,https://root.cern,https://github.com/root-project/root/pull/4592#issuecomment-547397186,1,['message'],['message']
Integrability,"Building ROOT with gcc 11.2.0 on a centos7 system with the following configuration:. cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DCMAKE_INSTALL_PREFIX=/opt/root/v6-26-02_gc112_c17 -GNinja ../src. fails with the following error:; ```; [2542/9705] Performing download step (download, verify and extract) for 'XROOTD'; FAILED: builtins/xrootd/XROOTD-prefix/src/XROOTD-stamp/XROOTD-download /bld6/root/bld/builtins/xrootd/XROOTD-prefix/src/XROOTD-stamp/XROOTD-download ; cd /bld6/root/bld/builtins/xrootd/XROOTD-prefix/src && /bld4/opt/cmake/3.22.2/bin/cmake -P /bld6/root/bld/builtins/xrootd/XROOTD-prefix/src/XROOTD-stamp/XROOTD-download-Release.cmake && /bld4/opt/cmake/3.22.2/bin/cmake -E touch /bld6/root/bld/builtins/xrootd/XROOTD-prefix/src/XROOTD-stamp/XROOTD-download; CMake Error at XROOTD-stamp/XROOTD-download-Release.cmake:49 (message):; Command failed: 1. '/bld4/opt/cmake/3.22.2/bin/cmake' '-Dmake=' '-Dconfig=' '-P' '/bld6/root/bld/builtins/xrootd/XROOTD-prefix/src/XROOTD-stamp/XROOTD-download-Release-impl.cmake'. ```. attached are the XROOTD-download-err.log and XROOTD-download-out.log; [XROOTD-download-err.log](https://github.com/root-project/root/files/8624870/XROOTD-download-err.log); [XROOTD-download-out.log](https://github.com/root-project/root/files/8624872/XROOTD-download-out.log)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10527:850,message,message,850,https://root.cern,https://github.com/root-project/root/issues/10527,1,['message'],['message']
Integrability,"Building clad should not depend on the result of the connectivity check, but whether it is enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15416:25,depend,depend,25,https://root.cern,https://github.com/root-project/root/pull/15416,1,['depend'],['depend']
Integrability,"Building the Windows version:; ```; Creating directories for 'TBB'; Building Custom Rule E:/Programs/github_repositories/normal/root/CMakeLists.txt; Performing download step (download, verify and extract) for 'TBB'; -- TBB download command succeeded. See also E:/Programs/github_repositories/normal/root/build_windows/TBB-prefix/src/TBB-stamp/T; BB-download-*.log; No update step for 'TBB'; No patch step for 'TBB'; Performing configure step for 'TBB'; CMake Error at E:/Programs/github_repositories/normal/root/build_windows/TBB-prefix/src/TBB-stamp/TBB-configure-Release.cmake:49; (message):; Command failed: 1. 'devenv.exe' '/useenv' '/upgrade' 'build/vs2013/makefile.sln'. See also. E:/Programs/github_repositories/normal/root/build_windows/TBB-prefix/src/TBB-stamp/TBB-configure-*.log. ```; Might be due to (from the log files):; ```; Microsoft Visual Studio 2019 Version 16.9.4.; Copyright (C) Microsoft Corp. All rights reserved. The license for Visual Studio has expired. The evaluation period for this product has ended.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8742#issuecomment-887674511:584,message,message,584,https://root.cern,https://github.com/root-project/root/issues/8742#issuecomment-887674511,1,['message'],['message']
Integrability,Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15508:54,depend,dependency,54,https://root.cern,https://github.com/root-project/root/pull/15508,1,['depend'],['dependency']
Integrability,"Bumps [minimist](https://github.com/minimistjs/minimist) and [mkdirp](https://github.com/isaacs/node-mkdirp). These dependencies needed to be updated together.; Updates `minimist` from 0.0.8 to 1.2.7; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/minimistjs/minimist/blob/main/CHANGELOG.md"">minimist's changelog</a>.</em></p>; <blockquote>; <h2><a href=""https://github.com/minimistjs/minimist/compare/v1.2.6...v1.2.7"">v1.2.7</a> - 2022-10-10</h2>; <h3>Commits</h3>; <ul>; <li>[meta] add <code>auto-changelog</code> <a href=""https://github.com/minimistjs/minimist/commit/0ebf4ebcd5f7787a5524d31a849ef41316b83c3c""><code>0ebf4eb</code></a></li>; <li>[actions] add reusable workflows <a href=""https://github.com/minimistjs/minimist/commit/e115b63fa9d3909f33b00a2db647ff79068388de""><code>e115b63</code></a></li>; <li>[eslint] add eslint; rules to enable later are warnings <a href=""https://github.com/minimistjs/minimist/commit/f58745b9bb84348e1be72af7dbba5840c7c13013""><code>f58745b</code></a></li>; <li>[Dev Deps] switch from <code>covert</code> to <code>nyc</code> <a href=""https://github.com/minimistjs/minimist/commit/ab033567b9c8b31117cb026dc7f1e592ce455c65""><code>ab03356</code></a></li>; <li>[readme] rename and add badges <a href=""https://github.com/minimistjs/minimist/commit/236f4a07e4ebe5ee44f1496ec6974991ab293ffd""><code>236f4a0</code></a></li>; <li>[meta] create FUNDING.yml; add <code>funding</code> in package.json <a href=""https://github.com/minimistjs/minimist/commit/783a49bfd47e8335d3098a8cac75662cf71eb32a""><code>783a49b</code></a></li>; <li>[meta] use <code>npmignore</code> to autogenerate an npmignore file <a href=""https://github.com/minimistjs/minimist/commit/f81ece6aaec2fa14e69ff4f1e0407a8c4e2635a2""><code>f81ece6</code></a></li>; <li>Only apps should have lockfiles <a href=""https://github.com/minimistjs/minimist/commit/56cad44c7f879b9bb5ec18fcc349308024a89bfc""><code>56cad44</code></a></li>; <li>[Dev Deps] update <code>covert</code",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11865:116,depend,dependencies,116,https://root.cern,https://github.com/root-project/root/pull/11865,1,['depend'],['dependencies']
Integrability,"Bumps [path-parse](https://github.com/jbgutierrez/path-parse) from 1.0.6 to 1.0.7.; <details>; <summary>Commits</summary>; <ul>; <li>See full diff in <a href=""https://github.com/jbgutierrez/path-parse/commits/v1.0.7"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=path-parse&package-manager=npm_and_yarn&previous-version=1.0.6&new-version=1.0.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11863:270,Depend,Dependabot,270,https://root.cern,https://github.com/root-project/root/pull/11863,9,"['Depend', 'depend']","['Dependabot', 'dependabot', 'dependabot-automerge-end', 'dependabot-automerge-start', 'dependabot-badges', 'dependabot-security-updates', 'dependency-name']"
Integrability,"But it's a good question, because we do not depend on pandas like on jupyter or numba. we just support to push data to it and test a specific interface of pandas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5408#issuecomment-654645154:44,depend,depend,44,https://root.cern,https://github.com/root-project/root/pull/5408#issuecomment-654645154,2,"['depend', 'interface']","['depend', 'interface']"
Integrability,"But should we explicitly add optional ROOT dependencies there? Not sure. Anyway I put it there temporarily, for the sake of a CI run. Related PR:; * https://github.com/root-project/root/pull/14685",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15173#issuecomment-2045233909:43,depend,dependencies,43,https://root.cern,https://github.com/root-project/root/pull/15173#issuecomment-2045233909,1,['depend'],['dependencies']
Integrability,"By introducing a virtual `FCNBase::HasGradient()` method and moving the; former `FCNGradientBase` interface to the base class, we don't need to; repeat lots of code just for dealing with both the `FCNBase` and; `FCNGradientBase` types. This is a completely backwards compatible change that makes the Minuit 2; code more maintainable. Another commit in this PR removed the unused `FCNGradientBase::CheckGradient()` member function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16393:98,interface,interface,98,https://root.cern,https://github.com/root-project/root/pull/16393,1,['interface'],['interface']
Integrability,"By putting it into `buildconfig/`, it will also appear in the releases. Is that what we want, given GPL licensed dependencies?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14648#issuecomment-1936984129:113,depend,dependencies,113,https://root.cern,https://github.com/root-project/root/pull/14648#issuecomment-1936984129,1,['depend'],['dependencies']
Integrability,"By the way, props to you for also writing such a nice commit message :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14160#issuecomment-1836881985:61,message,message,61,https://root.cern,https://github.com/root-project/root/pull/14160#issuecomment-1836881985,1,['message'],['message']
Integrability,C++ modules: dependency issue on out of date Rint.pcm,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10271:13,depend,dependency,13,https://root.cern,https://github.com/root-project/root/issues/10271,1,['depend'],['dependency']
Integrability,CMake GenerateDict dependency fixes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3404:19,depend,dependency,19,https://root.cern,https://github.com/root-project/root/pull/3404,1,['depend'],['dependency']
Integrability,CMake dependency on Python: use targets,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6753:6,depend,dependency,6,https://root.cern,https://github.com/root-project/root/issues/6753,1,['depend'],['dependency']
Integrability,CMake integration with external projects,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/916:6,integrat,integration,6,https://root.cern,https://github.com/root-project/root/pull/916,1,['integrat'],['integration']
Integrability,"CMake offers three visibility qualifiers for target include; directories, which are populated to target properties as shown in the; following table:. | | `INTERFACE` | `PUBLIC` | `PRIVATE` |; | --- | --- | --- | --- |; | `INCLUDE_DIRECTORIES` | | x | x |; | `INTERFACE_INCLUDE_DIRECTORIES` | X | x | |. For dictionary generation the `PUBLIC` and `INTERFACE` qualifiers and; hence the `INTERFACE_INCLUDE_DIRECTORIES` are to be preferred, because; header files meant to be consumed by the user are usually put into; `PUBLIC` and/or `INTERFACE` qualified directories. Furthermore, the CMake; imported targets always have `INTERFACE` visibility. This commit changes the current behaviour to read the; `INTERFACE_INCLUDE_DIRECTORIES` (as opposed to the `INCLUDE_DIRECTORIES`); target property which will catch more desired use cases, including; imported targets. In other words, this will now ignore `PRIVATE` include; directories, but include `INTERFACE` include directories - `PUBLIC` ones; stay unchanged. In addition, this commit adds a condition which ignores include; directories formulated as a CMake generator expression. Unfortunately,; there is currently no way to evaluate those seperately.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/942:155,INTERFACE,INTERFACE,155,https://root.cern,https://github.com/root-project/root/pull/942,5,['INTERFACE'],['INTERFACE']
Integrability,CTest fixtures which have previously been added to Rootbench have been useful in defining better dependencies for tests. Since we currently cannot have dependencies between tests fixtures should be added into both root and roottest.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8707:97,depend,dependencies,97,https://root.cern,https://github.com/root-project/root/issues/8707,2,['depend'],['dependencies']
Integrability,"CXXRecordDecls will synthesize special functions through lookup, but; do not expose them as part of the DeclContext iteration. Synthesize them,; and inject them into the iteration of TClingMethodInfo. This is especially; needed for modules which aggressively prune these special functions, relying; on DefinitionData instead. This also fixes roottest/root/meta/runMemberComments.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5036:149,inject,inject,149,https://root.cern,https://github.com/root-project/root/pull/5036,1,['inject'],['inject']
Integrability,"Call typed overload of `SetBranchAddress` for array types like `np.ndarray` or `array.array`. The correct C++ template parameter is inferred from the array interface type information. This is an improvement for two reasons:. 1. We don't need to cast the arrays to a `void *` to avoid template resolution problems anymore. 2. More importantly: ROOT will do a runtime check for type compatibility, which was requested in the JIRA ticked linked below. To see the benefit of the added type check, take for example this code, where the branch address is set to an array address with a mismatched type:. ```python; import array; import ROOT. def create():; f = ROOT.TFile(""dummy.root"", 'RECREATE'); t = ROOT.TTree(""tree"", 'A tree'); a = array.array('f', [42]); br = t.Branch('a', a, 'a/F'). for x in (21, 42, 1337):; a[0] = x; t.Fill(). t.Write(); f.Close(). def test(typecode='f'):; f = ROOT.TFile(""dummy.root"", 'READ'); t = f.Get('tree'); a = array.array(typecode, [0]); status = t.SetBranchAddress('a', a); print(""Status = %s"" % (status, )). for i in range(t.GetEntries()):; t.GetEntry(i); print(""a = %s"" % (a[0], )). create(); test(""f""); test(""d""); ```. Before this commit, the output would be like this:; ```txt; Status = 4; a = 21.0; a = 42.0; a = 1337.0; Status = 4; a = 5.442276803e-315; a = 5.483722033e-315; a = 5.690664868e-315; ```. With this commit, you get a clear error:; ```txt; Status = 0; a = 21.0; a = 42.0; a = 1337.0; Error in <TTree::SetBranchAddress>: The pointer type given ""Double_t"" (8) does not correspond to the type needed ""Float_t"" (5) by the branch: a; Status = -2; a = 0.0; a = 0.0; a = 0.0; ```. Closes the following JIRA ticket:; https://its.cern.ch/jira/browse/ROOT-8213",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16171:156,interface,interface,156,https://root.cern,https://github.com/root-project/root/pull/16171,1,['interface'],['interface']
Integrability,Calling `GSLMCIntegrator::SetMode` crashed because the internal workspace was not yet created. ; This PR fixes this and also the way the extra option parameters are retrieved and set in the GSLMCIntegrator. . A small change in the interface is done by returning now a unique_ptr instead of a row pointer in ; `GSLMCIntegrator::ExtraOptions()`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14058:231,interface,interface,231,https://root.cern,https://github.com/root-project/root/pull/14058,1,['interface'],['interface']
Integrability,Can I have a reproducer and some more info?. - how do I get that code into cling?; - `error: no template named 'RAttrValue'`; - how does it crash? Do you have an error message / backtrace?; - Is the missing semicolon after the class decl intentional?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8494#issuecomment-865036952:168,message,message,168,https://root.cern,https://github.com/root-project/root/issues/8494#issuecomment-865036952,1,['message'],['message']
Integrability,Can one of you confirm that this issue can be closed? nullptr checks should now only be injected if `TRint` is used *and* if there is a terminal attached (or Windows) *and* if outside callfunc.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9112#issuecomment-1010763602:88,inject,injected,88,https://root.cern,https://github.com/root-project/root/issues/9112#issuecomment-1010763602,1,['inject'],['injected']
Integrability,Can we find a way to be interface-wise backward compatible? (Maybe offer two function overload instead of one).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/943#issuecomment-327931155:24,interface,interface-wise,24,https://root.cern,https://github.com/root-project/root/pull/943#issuecomment-327931155,1,['interface'],['interface-wise']
Integrability,"Can we simply add `const TROOT *&GetROOTPtrRef()`, in the source file of where `gROOT` is injected in the list of globals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3208#issuecomment-457495268:90,inject,injected,90,https://root.cern,https://github.com/root-project/root/pull/3208#issuecomment-457495268,1,['inject'],['injected']
Integrability,"Can you expand on why we cannot snapshot from TTree to RNTuple? In general, I'm not sure if it's a good idea to change the default behavior depending on the type of the datasource. Ideally, `kDefault` would for now always mean `kTTree` but be kind of deprecated from the beginning to get users to choose which snapshot format they want. Then at a later point, we could remove it entirely and force users to choose the wanted format, to eventually re-introduce `kDefault` in ROOT7 to mean `kRNTuple`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15750#issuecomment-2333926984:140,depend,depending,140,https://root.cern,https://github.com/root-project/root/pull/15750#issuecomment-2333926984,1,['depend'],['depending']
Integrability,"Can you motivate why we should include those in ROOT's interface? I understand the motivation for testing! I'm sure you have a good reason to also expose them, I'd just like to see the reasons :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8383#issuecomment-857664938:55,interface,interface,55,https://root.cern,https://github.com/root-project/root/pull/8383#issuecomment-857664938,1,['interface'],['interface']
Integrability,Can you paste the entire callfunc wrapper?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14426#issuecomment-1917959962:34,wrap,wrapper,34,https://root.cern,https://github.com/root-project/root/pull/14426#issuecomment-1917959962,1,['wrap'],['wrapper']
Integrability,"Can you please try to build the PCH and try again? Also, can you run with GDB and post the stack trace? Maybe there are other missing dependencies in the test, which then tries to load them at runtime from the PCH. I wonder why there is a dependency on the PCH for the other test in any case, as I pointed out [here](https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103)? Since the build is parallel, the order may slightly change after my changes, but these changes passed all tests before. I am a bit bummed that a test that is broken on master is holding off these changes after it has passed all the tests before several times, and has been held off twice already, for the LLVM upgrade, and the branching of 6.28, and that is not counting the first time these changes were proposed, back in 2019, when it was held for later because CMake was too old... It's hard to get motivated to contribute when this sort of hurdle keeps getting in the way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10690#issuecomment-1403838311:134,depend,dependencies,134,https://root.cern,https://github.com/root-project/root/pull/10690#issuecomment-1403838311,2,['depend'],"['dependencies', 'dependency']"
Integrability,"Can you rename the commit message. Looks good overall, let me know if I should test it on massively parallel machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/767#issuecomment-315207029:26,message,message,26,https://root.cern,https://github.com/root-project/root/pull/767#issuecomment-315207029,1,['message'],['message']
Integrability,Can you share the whole valgrind report without the wrapper? The error you quote is intentional (and part of the ROOT suppression file).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-759611858:52,wrap,wrapper,52,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-759611858,1,['wrap'],['wrapper']
Integrability,"Change ""TTreeReader::Reset"" to ""Restart"" in error message",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/304:50,message,message,50,https://root.cern,https://github.com/root-project/root/pull/304,1,['message'],['message']
Integrability,Change deprecation message for python option,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5131:19,message,message,19,https://root.cern,https://github.com/root-project/root/pull/5131,1,['message'],['message']
Integrability,Change http to https in gdb message,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6541:28,message,message,28,https://root.cern,https://github.com/root-project/root/pull/6541,1,['message'],['message']
Integrability,"Change primary responsible for page memory management from page pool to page storage. This is a preparation for asynchronous interfaces. In the new scheme, RColumn uses `RPageStorage::ReservePage` (writing) or `RPageStorage::PopulatePage` (reading) to allocate pages and `RPageStorage::ReleasePage` for freeing them. The page storage, in turn, may use a shared page pool. In this case, ownership of a page's memory is transferred to the page pool, which will free a page if there are no further users. Addresses ROOT-10205",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4014:125,interface,interfaces,125,https://root.cern,https://github.com/root-project/root/pull/4014,1,['interface'],['interfaces']
Integrability,"Change the structure of BinData, FitData to a more data-oriented one. This is the second in a series of PR for the integration of the vectorization + parallelization of the fit in ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/367:115,integrat,integration,115,https://root.cern,https://github.com/root-project/root/pull/367,1,['integrat'],['integration']
Integrability,"Changed TGDMLWrite interface to take UInt_t. The export precision is now handled by GDML and partially .C export (just matrices for now), but not by xml export. @pcanal, @linev what is your take? Could we do the same for the xml exporter?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1901#issuecomment-383544565:19,interface,interface,19,https://root.cern,https://github.com/root-project/root/pull/1901#issuecomment-383544565,1,['interface'],['interface']
Integrability,"Changed the internal handeling of filters in RBatchGenerator. ; Instead of adding a new filter for each filter, the filters are concatenated to a string and applied as a single filter ; Note: The Python interface of the RBatchGenerator does not change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13313:203,interface,interface,203,https://root.cern,https://github.com/root-project/root/pull/13313,1,['interface'],['interface']
Integrability,Changes the RNTuple support in RBrowser from page source to the reader interface along the way. It turns out that the views are not only an interface for zero-copy reading but they also provide a quite useful way to read individual fields from a reader.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14530:71,interface,interface,71,https://root.cern,https://github.com/root-project/root/pull/14530,2,['interface'],['interface']
Integrability,"Chatted with @Axel-Naumann and changed the logic:; 1. No two IMT tutorials will run in parallel; 2. Other tests and/or tutorials will, however, still be started in parallel with an IMT tutorial (--> may still oversubscribe to 200%); 3. To reduce the OS in case 2., I just lied to CMake that IMT *tutorials* always use 4 CPUs. What they actually use depends on the hardware, but without this you would have `1xIMTx8 + 7xnormal`. Now, you have `1xIMTx8 + 4xnormal`, so only 150% subscription on an 8-core machine, and 100% on a 4-core.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6274#issuecomment-682628956:349,depend,depends,349,https://root.cern,https://github.com/root-project/root/pull/6274#issuecomment-682628956,1,['depend'],['depends']
Integrability,Cherry picked in #2716 to integrate with root-project/roottest#220,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2346#issuecomment-425665457:26,integrat,integrate,26,https://root.cern,https://github.com/root-project/root/pull/2346#issuecomment-425665457,1,['integrat'],['integrate']
Integrability,"Clang 18 changed the name mangling of function templates, see https://releases.llvm.org/18.1.0/tools/clang/docs/ReleaseNotes.html#c-specific-potentially-breaking-changes. The first mentioned case is ""When a template parameter in a function template depends on a previous template parameter"", for example:; ```; struct A {; template <typename T, std::enable_if_t<std::is_integral_v<T>, int> = 0>; void Member(T p) {}; };. template void A::Member(int);; ```. With Clang < 18 and current versions of GCC, this will mangle to `_ZN1A6MemberIiLi0EEEvT_`, but Clang 18 and later will mangle it to `_ZN1A6MemberIiTnNSt9enable_ifIXsr3stdE13is_integral_vIT_EEiE4typeELi0EEEvS2_` (unless reverted for compatibility with `-fclang-abi-compat=17`). For ROOT's use of Cling, this poses a bidirectional problem:; * If building current master with Clang 18, the compiler will, by default, mangle according to the new rules. At runtime, Cling based on LLVM/Clang 16 will generate the old name, but that symbol cannot be found in the shared library.; * Conversely, in the current attempt to upgrade to LLVM/Clang 18, the opposite situation will happen when building with an ""older"" compiler so the shared library has the old name. In both cases, a failure of `tutorial-tmva-tmva103_Application` can be observed, when Cling cannot find the symbol. Unfortunately, it is not easily possible to detect which symbol names are in the shared library because it depends on the host compiler and configuration. Furthermore, with the current LLVM/Clang 16, we do not have access to the new mangling. Finally, it is unclear if generating the template instantiations in question actually takes up significant time during compilation. As such, the best approach in the current situation is to remove the `extern template` declarations and let the compiler / Cling re-generate them as needed. FYI @devajithvs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16176:249,depend,depends,249,https://root.cern,https://github.com/root-project/root/pull/16176,2,['depend'],['depends']
Integrability,Cleaned up dependencies for TMVA tuts for avoiding race conditions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/426:11,depend,dependencies,11,https://root.cern,https://github.com/root-project/root/pull/426,1,['depend'],['dependencies']
Integrability,"ClingWorkAroundUnnamedDetection2 -compilerI/usr/i; nclude/c++/9 -compilerI/usr/include/x86_64-linux-gnu/c++/9 -compilerI/usr/include/c++/9/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/9/include -compilerI/usr/local/include -compilerI/; usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/9/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/i; nclude -I/home/pcanal/root_working/build/master-debug/include -I/home/pcanal/root_working/code/root/roottest -I/home/pcanal/root_working/code/root/roottest/root/meta/MakeProject -I/home/p; canal/root_working/build/master-debug/etc/cling /home/pcanal/root_working/code/root/roottest/root/meta/MakeProject/stl_makeproject_test.h /home/pcanal/root_working/code/root/roottest/root; /meta/MakeProject/stl_makeproject_test_linkdef.h; In file included from input_line_10:36:; /home/pcanal/root_working/code/root/roottest/root/meta/MakeProject/stl_makeproject_test.h:10:2: fatal error: module file '/home/pcanal/root_working/build/master-debug/lib/Imt.pcm' is out ; of date and needs to be rebuilt: could not read module signature; #include ""TH1D.h""; ^; /home/pcanal/root_working/code/root/roottest/root/meta/MakeProject/stl_makeproject_test.h:10:2: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/master-debug/rootte; st/root/meta/MakeProject/MathCore.pcm'; /home/pcanal/root_working/code/root/roottest/root/meta/MakeProject/stl_makeproject_test.h:10:2: note: imported by module 'Hist' in '/home/pcanal/root_working/build/master-debug/roottest/r; oot/meta/MakeProject/Hist.pcm'; Error: /home/pcanal/root_working/build/master-debug/bin/rootcling: compilation failure (/home/pcanal/root_working/build/master-debug/roottest/root/meta/MakeProject/stl_makeproject_testb1a; 3e30369_dictUmbrella.h); ```. and indeed, `libHist` has not been build yet. So it seem that `roottest/root/meta/MakeProject/stl_makeproject_test.cxx` is missing a dependency on `libHist`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9600:3104,depend,dependency,3104,https://root.cern,https://github.com/root-project/root/issues/9600,1,['depend'],['dependency']
Integrability,Closed temporarily while I'm busy with the gradient interfaces. I'll reopen it later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/655#issuecomment-316747657:52,interface,interfaces,52,https://root.cern,https://github.com/root-project/root/pull/655#issuecomment-316747657,1,['interface'],['interfaces']
Integrability,"Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the; docker images via the `requirements.txt`. However, this will only have a; delayed effect until the images are re-built. Therefore, we can't; validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be; opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything.; The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:; https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15512:75,depend,dependencies,75,https://root.cern,https://github.com/root-project/root/pull/15512,3,['depend'],"['dependencies', 'dependency']"
Integrability,Closing because we decided to not go that route.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15873#issuecomment-2187512355:42,rout,route,42,https://root.cern,https://github.com/root-project/root/pull/15873#issuecomment-2187512355,1,['rout'],['route']
Integrability,Closing since #7335 can handle better xrootd OpenSSL dependency (particularly OpenSSL builtin),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8963#issuecomment-914357681:53,depend,dependency,53,https://root.cern,https://github.com/root-project/root/pull/8963#issuecomment-914357681,1,['depend'],['dependency']
Integrability,"Closing this in favour of:; https://github.com/root-project/root/pull/8270. Besides the changes of the aforementioned PR, a new interface in `TInterpreter` will be necessary to use `AddIncludePath` with the `-isystem` flag.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8263#issuecomment-850307470:128,interface,interface,128,https://root.cern,https://github.com/root-project/root/pull/8263#issuecomment-850307470,1,['interface'],['interface']
Integrability,Closing: these changes are being integrated in https://github.com/root-project/root/pull/8770 (which solves #6347 ).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6361#issuecomment-889718031:33,integrat,integrated,33,https://root.cern,https://github.com/root-project/root/pull/6361#issuecomment-889718031,1,['integrat'],['integrated']
Integrability,"Co-authored-by: Jakob Blomer. This commit is a proof-of-concept `MapV` implementation for floats. If; the interface is approved, the remaining mappable types will done too. Spun off from https://github.com/root-project/root/pull/7112",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8210:106,interface,interface,106,https://root.cern,https://github.com/root-project/root/pull/8210,1,['interface'],['interface']
Integrability,Collection of three short improvements:; - Better docs for SPlot; - Shorten run time of rf402 tutorial by removing unnecessary printouts; - [ROOT-10521] Better const-correctness in RooAbsData interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4875:192,interface,interface,192,https://root.cern,https://github.com/root-project/root/pull/4875,1,['interface'],['interface']
Integrability,"ColumnRegister::ResolveAlias[abi:cxx11](std::basic_string_view<char, std::char_traits<char> >) const (RDFColumnRegister.cxx:140); ==270704== by 0x27216527: ROOT::Internal::RDF::GetValidatedColumnNames(ROOT::Detail::RDF::RLoopManager&, unsigned int, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, ROOT::Internal::RDF::RColumnRegister const&, ROOT::RDF::RDataSource*) (RDFInterfaceUtils.cxx:893); ==270704== by 0x197967D1: ???; ==270704== by 0x5EF4C44: Cppyy::CallO(long, void*, unsigned long, void*, unsigned long) (clingwrapper.cxx:887); ==270704== by 0x5E37DA3: GILCallO(long, void*, CPyCppyy::CallContext*, unsigned long) (Executors.cxx:86); ==270704== by 0x5E3A66D: CPyCppyy::(anonymous namespace)::InstanceExecutor::Execute(long, void*, CPyCppyy::CallContext*) (Executors.cxx:594); ==270704== ; ==270704== Conditional jump or move depends on uninitialised value(s); ==270704== at 0x662731A: load_bytes (hash_bytes.cc:56); ==270704== by 0x662731A: std::_Hash_bytes(void const*, unsigned long, unsigned long) (hash_bytes.cc:153); ==270704== by 0x75167D5: std::_Hash_impl::hash(void const*, unsigned long, unsigned long) (functional_hash.h:198); ==270704== by 0x7516F81: std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (basic_string.h:6875); ==270704== by 0x753C32B: std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_M",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10092#issuecomment-1064001383:81782,depend,depends,81782,https://root.cern,https://github.com/root-project/root/issues/10092#issuecomment-1064001383,1,['depend'],['depends']
Integrability,"Columns defined via DefinePerSample cannot ever have a dependency; on the systematic variation (they don't depend on any dataset; column), so when a RDefinePerSample is asked to `MakeVariations`; it just does nothing, and program logic should never end up; requesting a varied value for a RDefinePerSample. The commit also adds a test for this case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9935:55,depend,dependency,55,https://root.cern,https://github.com/root-project/root/pull/9935,2,['depend'],"['depend', 'dependency']"
Integrability,"Commenting here what I discussed with @dpiparo offline. This looks alright, but I think that rather than fixing this here, it might be better to fix it in the builtins themselves, so that not only it works for `libCore`, but also other libraries if needed (think another builtin depending on xxhash, like maybe lzma). Ideally, code outside of `builtins/` should never have to test for `builtin_foo`, but just use the target `foo::foo` and the builtin, when enabled, should take care of properly setting up the target properties so that it works in all cases.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13739#issuecomment-1738730760:279,depend,depending,279,https://root.cern,https://github.com/root-project/root/pull/13739#issuecomment-1738730760,1,['depend'],['depending']
Integrability,"Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12591:243,depend,dependencies,243,https://root.cern,https://github.com/root-project/root/issues/12591,3,"['depend', 'message']","['dependencies', 'dependency', 'messages']"
Integrability,Commit message amended.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2276#issuecomment-406324488:7,message,message,7,https://root.cern,https://github.com/root-project/root/pull/2276#issuecomment-406324488,1,['message'],['message']
Integrability,"Complete code reformatted to use JS classes.; Makes layout more clear and compact.; Optimize io code - use more internal constants, which; very well can be optimized by JS. Exclude `rawinflate.js` - code integrated and optimized in io script; Update `dat.gui.js`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9779:204,integrat,integrated,204,https://root.cern,https://github.com/root-project/root/pull/9779,1,['integrat'],['integrated']
Integrability,"Completes the support for fields with multiple column representations. For the moment, only the unit tests can change the column representation between clusters on writing. Eventually, we may add a proper interface. Merging will also lead to this situation. In all cases but the nullable field, we can exploit the fact that the number of columns of multiple representations is the same and the corresponding columns have the same number of elements and cluster boundaries. Therefore, when reading we team up the corresponding columns of multiple representations. When we map another page, the column teams can then figure out amongst each other the column that is not suppressed for the given page / element index and forward the call. Follow-up of #16054",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16143:205,interface,interface,205,https://root.cern,https://github.com/root-project/root/pull/16143,1,['interface'],['interface']
Integrability,"Consequently a more complete instruction would read:; ```; if [ -d /py-venv/ROOT-CI/bin/ ]; then . /py-venv/ROOT-CI/bin/activate; fi; export JUPYTER_ALLOW_INSECURE_WRITES=true; (; rm -rf /github/home/ROOT-CI; mkdir -p /github/home/ROOT-CI; ); (; curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/ubuntu2404/master/RelWithDebInfo/3f796869dae3bde0bfafc4ef8051339eb5ca133c/2024-08-12.tar.gz; ); (; cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz; ); (; cd '/github/home/ROOT-CI/src'; git checkout master; git fetch; git reset --hard @{u}; ); (; cd '/github/home/ROOT-CI/src'; git fetch https://github.com/root-project/root 9fc748389d42ce698fe8654ac177f9cf9a542f5c; ); (; cd '/github/home/ROOT-CI/src'; ; git config user.email ""rootci@root.cern""; git config user.name 'ROOT Continous Integration'; ; git fetch origin 7d45ab2957efacf7b6685f4ae126a9fed243494c:fix-15733; git checkout fix-15733; git rebase 531620f59e898e5ec809043135583d15b0d151a6; ); (; git clone --branch master --single-branch https://github.com/root-project/roottest.git ""/github/home/ROOT-CI/roottest""; ); (; cd '/github/home/ROOT-CI/roottest'; ; git config user.email ""rootci@root.cern""; git config user.name 'ROOT Continous Integration'; ; git fetch ; git checkout ; git rebase master; ); (; which cmake; cmake --version; which c++ || true; c++ --version || true; uname -a || true; cat /etc/os-release || true; sw_vers || true; uptime || true; df || true; ); (; cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L; ); (; cmake --build '/github/home/ROOT-CI/build' --config 'RelWithDebInfo' --parallel '16'; ); (; cd '/github/home/ROOT-CI/build'; ctest --output-on-failure --parallel 16 --output-junit TestResults.xml; ); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16242#issuecomment-2292484709:856,Integrat,Integration,856,https://root.cern,https://github.com/root-project/root/issues/16242#issuecomment-2292484709,2,['Integrat'],['Integration']
Integrability,"Consider the following test case:. test.c; ```cpp; #include ""TInterpreter.h""; #include ""TClass.h""; #include ""TMethod.h""; #include ""TROOT.h""; #include <iostream>. struct Dummy {; double x;; };. struct Dummy2{; };. template<typename... Args, typename Extra = Dummy2>; double sumT(Args... args) {; return (args.x + ...);; }. int test() {; auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");; TMethodCall call_explicit(meth_explicit);. double res;; const Dummy arg{5.};; const void *args[3] = {&arg, &arg, &arg};; call_explicit.Execute(nullptr, args, 3, &res);; std::cout << ""res = "" << res << std::endl;. return 0;; }; ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```; In file included from input_line_8:1:; /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'; return (args.x + ...);; ~~~~ ^; input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here; Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],; ^; Error in <TClingCallFunc::make_wrapper>: Failed to compile; ==== SOURCE BEGIN ====; #pragma clang diagnostic push; #pragma clang diagnostic ignored ""-Wformat-security""; __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))); extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret); {; if (ret) {; new (ret) (double) (((double (&)(Dummy, Dummy,; Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],; *(Dummy*)args[2]));; return;; }; else {; (void)(((double (&)(Dummy, Dummy,; Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],; *(Dummy*)args[2]));; return;; }; }; #pragma clang diagnostic pop; ==== SOURCE END ====; Error in <TClingCal",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12549:795,wrap,wrapper,795,https://root.cern,https://github.com/root-project/root/issues/12549,1,['wrap'],['wrapper']
Integrability,"Consider:; 1. Build A.pcm; 2. Build B.pcm which imports A.pcm; 3. Rebuild A.pcm (without rebuilding B.pcm); 4. Use B.pcm. This patch disables out-of-date errors coming from the fact that we did not rebuild B.pcm. This is nice to have, however, our current problems were due to the fact that we had broken dependencies in the build system (see PR #2687).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2680#issuecomment-424736217:305,depend,dependencies,305,https://root.cern,https://github.com/root-project/root/pull/2680#issuecomment-424736217,1,['depend'],['dependencies']
Integrability,"Consolidate RBDT as specified in the ROOT plan of work 2024. The backends of RBDT are replaced with a single new backend:; the logic from the FastForest library:; https://github.com/guitargeek/XGBoost-FastForest. The logic in that library was originally taken from the GBRForest in; CMSSW:; https://github.com/cms-sw/cmssw/blob/master/CommonTools/MVAUtils/interface/GBRForestTools.h. The interface remains the same, only that the template parameter; specifying the backend is gone. This change adds support for unbalanced trees. To see the fixed logic, as one run a modified version of the `tmva101_Training.py` tutorial (remember to run `tutorials/tmva/tmva100_DataPreparation.py` first):; ```python; import ROOT; import numpy as np. from tmva100_DataPreparation import variables. def load_data(signal_filename, background_filename):; # Read data from ROOT files; data_sig = ROOT.RDataFrame(""Events"", signal_filename).AsNumpy(); data_bkg = ROOT.RDataFrame(""Events"", background_filename).AsNumpy(). # Convert inputs to format readable by machine learning tools; x_sig = np.vstack([data_sig[var] for var in variables]).T; x_bkg = np.vstack([data_bkg[var] for var in variables]).T; x = np.vstack([x_sig, x_bkg]). # Create labels; num_sig = x_sig.shape[0]; num_bkg = x_bkg.shape[0]; y = np.hstack([np.ones(num_sig), np.zeros(num_bkg)]). # Compute weights balancing both classes; num_all = num_sig + num_bkg; w = np.hstack([np.ones(num_sig) * num_all / num_sig, np.ones(num_bkg) * num_all / num_bkg]). return x, y, w. # Load data; x, y, w = load_data(""train_signal.root"", ""train_background.root""). # Fit xgboost model; from xgboost import XGBClassifier; xbdt = XGBClassifier(max_depth=3, n_estimators=500); xbdt.fit(x, y, sample_weight=w). # Save model in TMVA format; ROOT.TMVA.Experimental.SaveXGBoost(xbdt, ""myBDT"", ""tmva101.root"", num_inputs=x.shape[1]). # Load data; x, y_true, w = load_data(""test_signal.root"", ""test_background.root""). # Load trained model; File = ""tmva101.root"". bdt = ROOT.TMVA.Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15173:356,interface,interface,356,https://root.cern,https://github.com/root-project/root/pull/15173,2,['interface'],['interface']
Integrability,"Copy post from Mattermost:. Normally one writes:; ```; TList *lst = new TList(); ; TIter iter(lst);; ```. This works fine. In many places of RooFit (and also in some other classes) one can see following syntax:; ```; TIter iter = lst->MakeIterator();; ```. It is also fine while where is constructor signature TIter(TIterator *it).; But if one does again:; ```; iter = lst->MakeIterator();; ```. One do not get that one expects. While C++ does:. 1. creates temporary TIter instance, ; 2. Calls TIter &operator=(const TIter &rhs) ; 3. deletes temporary `TIter` instance with original `TIterator` object which was created by `lst->MakeIterator()`. Means we have unnecessary duplication of `TIterator` in between. Moreover, following code **MAY** produce wrong results:; ```; iter = lst->MakeIterator(kIterBackward);; ```. It depends if assign operator implemented properly for derived `TIterator` classes.; Probably, we should define assign operator abstract:; ```; virtual TIterator &operator=(const TIterator &) = 0;; ```; To ensure that all derived classes implement it",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7633:823,depend,depends,823,https://root.cern,https://github.com/root-project/root/issues/7633,1,['depend'],['depends']
Integrability,"Could not find any duplicate. ### Describe the bug; When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt.; The message is related to SOFIE:. ```; IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'!; You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&); Maybe you need to load the corresponding shared library?; Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'?; ```. ROOT 6.24/06 works fine. ### Expected behavior; No warning message. ### To Reproduce; Steps to reproduce the behavior:; 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 ; 2. Source dev4arm; `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`; 3. Start ROOT, e.g. `root -b -q`. ### Setup; 1. ROOT version: 6.26/04; 2. Operating system: aarch64, centos7; 3. LCG stack. ### Additional context; Affecting ATLAS ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10877:110,message,message,110,https://root.cern,https://github.com/root-project/root/issues/10877,2,['message'],['message']
Integrability,Could the commit message be enhanced to express which files are still embedded? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2411#issuecomment-409616161:17,message,message,17,https://root.cern,https://github.com/root-project/root/pull/2411#issuecomment-409616161,1,['message'],['message']
Integrability,Could the commit message be enhanced with a discussion of why the change is being made and why a vector is sufficient (Note that vec[slot] = ... may or may not be thread safe in the general case because of cache line sharing across indices ... the much slower *(vec[slot]) = ... would be safer),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2708#issuecomment-425172680:17,message,message,17,https://root.cern,https://github.com/root-project/root/pull/2708#issuecomment-425172680,1,['message'],['message']
Integrability,Could you add a link to the CMake bug report ? That way we know when we can remove this message.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5238#issuecomment-605620656:88,message,message,88,https://root.cern,https://github.com/root-project/root/pull/5238#issuecomment-605620656,1,['message'],['message']
Integrability,"Could you add the actual error message (and not just the error's context) to the commit log, please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6488#issuecomment-700164405:31,message,message,31,https://root.cern,https://github.com/root-project/root/pull/6488#issuecomment-700164405,1,['message'],['message']
Integrability,"Could you elaborate what does it mean that ""use `RRawFile` only for `TFile`'s ... otherwise the native `TFile` (subclass) is wrapped in a `RRawFileTFile`""? This could be easily (mis?)interpreted in a way the behavior for the `TFile` object itself is ambiguous. Is the intention perhaps that for all other `TFile` subclasses than `TDavixFiles` and `TNetXNGFiles` (and `TFile`) itself the `RRawFileTFile` is used?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15246#issuecomment-2059109543:125,wrap,wrapped,125,https://root.cern,https://github.com/root-project/root/pull/15246#issuecomment-2059109543,1,['wrap'],['wrapped']
Integrability,"Could you expand a little more the commit message and the PR description. I fail to capture the intent. In general, ROOT_GENERATE_DICTIONARY is very complex and needs to be simplified and refactored, unless this is fixing a real issue I'd be reluctant to make it more complex than it already is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5172#issuecomment-600574122:42,message,message,42,https://root.cern,https://github.com/root-project/root/pull/5172#issuecomment-600574122,1,['message'],['message']
Integrability,Could you fix your GitHub profile match to the one from the commit message?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4213#issuecomment-521673476:67,message,message,67,https://root.cern,https://github.com/root-project/root/pull/4213#issuecomment-521673476,1,['message'],['message']
Integrability,Could you please add to the commit message the description of your changes above? It's useful when looking at the log. Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1958#issuecomment-385449387:35,message,message,35,https://root.cern,https://github.com/root-project/root/pull/1958#issuecomment-385449387,1,['message'],['message']
Integrability,Could you please manually rebase your changes on top of current `master`? There seems to be a merge conflict.; ```; 19:29:06 CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1030 (message):; 19:29:06 Rebase of gartung-cmssw-root-llvm-fix-type-printing-array-template-args; 19:29:06 branch on top of master failed!; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7336#issuecomment-789125370:234,message,message,234,https://root.cern,https://github.com/root-project/root/pull/7336#issuecomment-789125370,1,['message'],['message']
Integrability,Could you please provide an explanation in the commit message why you need to disable them?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4038#issuecomment-508384412:54,message,message,54,https://root.cern,https://github.com/root-project/root/pull/4038#issuecomment-508384412,1,['message'],['message']
Integrability,Crash message should point to github,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6540:6,message,message,6,https://root.cern,https://github.com/root-project/root/issues/6540,1,['message'],['message']
Integrability,"Create notebooks from fit, add jsroot integration",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/207:38,integrat,integration,38,https://root.cern,https://github.com/root-project/root/pull/207,1,['integrat'],['integration']
Integrability,"Creating a new pull request since I force-pushed to the old branch. This PR improves VecCore integration into ROOT. Before we copied all VecCore and Vc headers into the build directory, since rootcling did not get the right includes when Vc or VecCore were builtin. Now the right includes are propagates by calling set_property() with the necessary include directories. Ideally, in the future we should take the includes not from the DIRECTORY property, but from the target dependencies for each subcomponent.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/851:93,integrat,integration,93,https://root.cern,https://github.com/root-project/root/pull/851,2,"['depend', 'integrat']","['dependencies', 'integration']"
Integrability,"Cross validation has been integrated through a different PR. Remaining are the Hyper param opt and variable importance.; I refer to @lmoneta for the future plan there. It is my understanding however that if we integrate them we do it through new PR’s, indicating that this PR can be closed. I will make sure to update the PR after discussion with Lorenzo during next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/858#issuecomment-408062694:26,integrat,integrated,26,https://root.cern,https://github.com/root-project/root/pull/858#issuecomment-408062694,2,['integrat'],"['integrate', 'integrated']"
Integrability,Current histfactory is optional (it requires xml is to enable/available) but the test depending on it are run nonetheless. So with; ```; $ grep xml CMakeCache.txt ; ...; //Enable support for XML (requires libxml2); xml:BOOL=OFF; ...; ```; In particular tutorial-roostats-CreateExampleFile is ran but fails:; ```; Output:; ----------------------------------------------------------. Processing /home/pcanal/root_working/code/root/tutorials/roostats/CreateExampleFile.C...; sh: 1: prepareHistFactory: not found; sh: 1: hist2workspace: not found; <end of output>; ```; The following tutorial then fails; ```; 702:tutorial-roostats-OneSidedFrequentistUpperLimitWithBands; 703:tutorial-roostats-StandardBayesianMCMCDemo; 704:tutorial-roostats-StandardBayesianNumericalDemo; 705:tutorial-roostats-StandardFeldmanCousinsDemo; 706:tutorial-roostats-StandardFrequentistDiscovery; 707:tutorial-roostats-StandardHistFactoryPlotsWithCategories; 708:tutorial-roostats-StandardHypoTestDemo; 709:tutorial-roostats-StandardHypoTestInvDemo; 710:tutorial-roostats-StandardProfileInspectorDemo; 711:tutorial-roostats-StandardProfileLikelihoodDemo; 712:tutorial-roostats-StandardTestStatDistributionDemo; 713:tutorial-roostats-TwoSidedFrequentistUpperLimitWithBands; ```; most (if not all) due to the missing root file.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6911:86,depend,depending,86,https://root.cern,https://github.com/root-project/root/issues/6911,1,['depend'],['depending']
Integrability,"Current state:; - the normalized name continues to remove `std::`; - it injects using declarations for the ""most common"" stdlib identifiers; - this PR adds `std::` where ""needed"", to the normalized name, to make identifiers ""compilable"" (in dictionary source). The last point requires to have an authoritative list of ""things in the std namespace"", to prepend `std::` to them. This does not scale - any stdlib implementation might have any non-public identifier that might be needed also for public types, e.g. some libstdc++ have `std::thread::id` as type alias to `std::__thread_id`. Alternatively, this PR could implement a ""if lookup fails, try again with prepending `std::`"". This is an issue for types such as `foo<bar, baz<boo,boz>>` where either any type must be tested for std-ization separately or all possible permutations (`std::foo<bar, baz<boo,boz>>`, `foo<std::bar, baz<boo,boz>>`,`std::foo<std::bar, baz<boo,boz>>`...) must be tried.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11027:72,inject,injects,72,https://root.cern,https://github.com/root-project/root/pull/11027,1,['inject'],['injects']
Integrability,"Currently RDF reads all column values via a single RColumnValue type,; which knows how to deal with TTreeReaderValues, TTreeReaderArrays,; datasource columns and defined columns. Not only that's too many hats; for a single type, but this design requires some runtime logical branching; to decide which path to take that can be simplified.; Finally and most importantly, going forward we want smarter integration; with RDataSource, and we will require RDataSource-specialized column readers.; In order to allow this latter use-case and simplify some logical; branching, instead of a single RColumnValue type we add specialized; column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values; via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,; and RDSColumnReader reads values from a datasource.; A given computation graph will only make use of one between; RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:; - logical branching has been reduced (for now, at the cost of introducing a; virtual call); - the new design makes it simpler to insert datasource-specific column; readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6170:400,integrat,integration,400,https://root.cern,https://github.com/root-project/root/pull/6170,2,"['depend', 'integrat']","['depending', 'integration']"
Integrability,Currently all included Qt headers in this ROOT module are duplicated; into each submodule. We now wrap all includes to Qt headers in a; single wrapper module which includes and owns those declarations. This should fix warnings related to ambiguous linkage of all the; constants that the Qt headers define (and which make the builds; yellow).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2011:98,wrap,wrap,98,https://root.cern,https://github.com/root-project/root/pull/2011,2,['wrap'],"['wrap', 'wrapper']"
Integrability,"Currently if we compile this test we get ld warning messages like this:. ```; ld: direct access in function ... to global weak symbol. This was likely; caused by different translation units being compiled with different; visibility settings.; ```. This seems to be caused by the fact that visibility=hidden is spreading; from the parent directory to the test directory, even though it should; only land in the src/ directory. As CMAKE_CXX_FLAGS is working on a; per subdirectory basis, we just move the code for handling the source; code to the src/ folder, which should contain the visibility=hidden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/644:52,message,messages,52,https://root.cern,https://github.com/root-project/root/pull/644,1,['message'],['messages']
Integrability,"Currently there is a chance that rootcling includes and builds; the 'complex' dictionary before it is built, which will cause; the build to fail. To fix this we need this dependency here. The specific line that includes the complex header is; `core/dictgen/src/rootcling_impl.cxx:3045`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1247:171,depend,dependency,171,https://root.cern,https://github.com/root-project/root/pull/1247,1,['depend'],['dependency']
Integrability,"Currently we rebuilt LTO everytime you rerun cmake, as CMake; touches the vcsrevision file that LTO depends on. Make isn't; smart enough to realise it's still just an empty file, so it; retriggers the LTO compilations whenever you run CMake. Again, this patch will be obsolete on the next LLVM upgrade; as this CMake code is refactored upstream.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/842:100,depend,depends,100,https://root.cern,https://github.com/root-project/root/pull/842,1,['depend'],['depends']
Integrability,"Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3616:23,interface,interface,23,https://root.cern,https://github.com/root-project/root/pull/3616,1,['interface'],['interface']
Integrability,"Custom ranges seemed to be supported for analytical integration in; RooNDKeysPdf, but the code was not activated. Numerical integration was; always used for custom ranges. Unfortunately, using the existing code for analytical integration with; custom ranges gives the wrong result. This commit suggests how this can; be done with new and simpler code that has a logic similar to; RooNDKeysPdf::evaluate() to get the correct result. This is a draft PR for now. I still need to study the problem a bit more, because when you have many data points for the KDE the new analytical integration gives a result different from numerical integration at the percent level. I need to figure out if this is a mistake in the analytical integration, or if the numerical integration is unstable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8019:52,integrat,integration,52,https://root.cern,https://github.com/root-project/root/pull/8019,7,['integrat'],['integration']
Integrability,"DEPENDENCIES also links, it's basically the same, except an explicit dependency is added. It was needed because of problems in CMake dependencies on the dictionary sources if I understand it correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2802#issuecomment-430326361:0,DEPEND,DEPENDENCIES,0,https://root.cern,https://github.com/root-project/root/pull/2802#issuecomment-430326361,3,"['DEPEND', 'depend']","['DEPENDENCIES', 'dependencies', 'dependency']"
Integrability,"DE_DIRS=/home/mkrzewic/src/root/interpreter/llvm-project/clang/include' '/home/mkrzewic/build/root/interpreter/llvm-project/llvm/tools/clang//include' '-DCMAKE_CXX_STANDARD=17' '-DClang_DIR=/home/mkrzewic/build/root/interpreter/llvm-project/llvm/tools/clang/' '-DClang_CONFIG_EXTRA_PATH_HINTS=' '-DLLVM_FORCE_USE_OLD_TOOLCHAIN=ON' '-DCLAD_BUILD_STATIC_ONLY=ON' '-GUnix Makefiles' '-S' '/home/mkrzewic/build/root/interpreter/cling/tools/plugins/clad/clad-prefix/src/clad' '-B' '/home/mkrzewic/build/root/interpreter/cling/tools/plugins/clad/clad-prefix/src/clad-build'. See also. /home/mkrzewic/build/root/interpreter/cling/tools/plugins/clad/clad-prefix/src/clad-stamp/clad-configure-*.log. -- stdout output is:; -- Configuring incomplete, errors occurred!. -- stderr output is:; CMake Warning:; Ignoring extra path from command line:. ""/home/mkrzewic/build/root/interpreter/llvm-project/llvm/tools/clang/include"". CMake Warning:; Ignoring extra path from command line:. ""/home/mkrzewic/build/root/interpreter/llvm-project/llvm/tools/clang//include"". CMake Error at CMakeLists.txt:86 (message):; Found unsupported version: LLVM 2.13.2;. Please set LLVM_DIR pointing to the llvm version 5.0 to 16.0.x build or; installation folder. CMake Error at /home/mkrzewic/build/root/interpreter/cling/tools/plugins/clad/clad-prefix/src/clad-stamp/clad-configure-Release.cmake:47 (message):; Stopping after outputting logs. gmake[2]: *** [interpreter/cling/tools/plugins/clad/CMakeFiles/clad.dir/build.make:92: interpreter/cling/tools/plugins/clad/clad-prefix/src/clad-stamp/clad-configure] Error 1; gmake[1]: *** [CMakeFiles/Makefile2:44491: interpreter/cling/tools/plugins/clad/CMakeFiles/clad.dir/all] Error 2; gmake: *** [Makefile:166: all] Error 2; ```. ### Reproducer. cmake ../../src/root -Droottest=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo; cmake --build . ### ROOT version. master@0afffc6fc9. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14492:2521,message,message,2521,https://root.cern,https://github.com/root-project/root/issues/14492,2,['message'],['message']
Integrability,"DS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]\r\nC:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr&lt;ROOT::RDF::RInterface&lt;ROOT::RDF::RInterface&lt;Proxied,DataSource&gt;::RLoopManager,void&gt;&gt; ROOT::RDF::RInterface&lt;ROOT::RDF::RInterface&lt;Proxied,DataSource&gt;::RLoopManager,void&gt;::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]\r\nC:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr&lt;ROOT::RDF::RInterface&lt;ROOT::RDF::RInterface&lt;Proxied,DataSource&gt;::RLoopManager,void&gt;&gt; ROOT::RDF::RInterface&lt;ROOT::RDF::RInterface&lt;Proxied,DataSource&gt;::RLoopManager,void&gt;::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]\r\nC:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface&lt;ROOT::RDF::RInterface&lt;Proxied,DataSource&gt;::RLoopManager,void&gt;' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]\r\nC:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]\r\nC:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\belle",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11153#issuecomment-1209201215:1405,message,message,1405,https://root.cern,https://github.com/root-project/root/pull/11153#issuecomment-1209201215,1,['message'],['message']
Integrability,"David Kirkby[NON-XML-CHAR-0x1B][0m ; Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University; All rights reserved, please read http://roofit.sourceforge.net/license.txt. [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=-2.65215, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=-2.04508, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=-2.08508, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=-2.11206, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=-2.61614, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=4.19165, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation error, ; origin : RooGaussian::g1[ x=x mean=mean1 sigma=sigma1 ]; message : p.d.f normalization integral is zero or negative; server values: x=x=-2.07341, mean=mean1=3.74943, sigma=sigma1=0; [#0] ERROR:Eval -- RooAbsReal::logEvalError(g1) evaluation",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1327#issuecomment-349216512:1468,message,message,1468,https://root.cern,https://github.com/root-project/root/pull/1327#issuecomment-349216512,1,['message'],['message']
Integrability,"Dear @Josiah1 ,. Thanks for your message. The recently released Mac version brought some changes that we had to adapt to (see this recent [forum post](https://root-forum.cern.ch/t/root-stopped-yesterday-working-on-osx/61693) for example). . Can I ask you to try to compile the release candidate https://github.com/root-project/root/tree/v6-32-06-rc1 and tell us whether this is working on your machine?. Also, could you post the full MacOS version, as well as the XCode version?. Cheers,; Vincenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16498#issuecomment-2365251752:33,message,message,33,https://root.cern,https://github.com/root-project/root/issues/16498#issuecomment-2365251752,1,['message'],['message']
Integrability,"Dear @acampove,; Thanks contacting us. We should probably wait for @eguiraud for a final answer, but I'd like to give my two cents about this. > Instances of RDataFrame objects are meant to be treated like trees. I am curious about this first sentence. I have never got this impression, neither reading docs / toying with tutorials or doing more complex analyses with RDF. the first line of the [RDF docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html) says `ROOT's RDataFrame offers a high level interface for analyses of data stored in TTree, CSV's and other data formats. `. Just by the fact that I can read and process other formats than TTree I would say that in general RDF is not meant to be treated like a TTree. Otherwise I would also have to say that RDF is meant to be treated like a CSV file or something similar. > there should be a function that allows us to merge them. If I have to think about this function you propose, I don't see it going much further than the example you already have above. Since RDataFrame **is not** the dataset itself, but just an interface to it, it still needs to open the file where the dataset is contained and read data from it. Thus, merging two RDF objects would still involve ` opening each file and saving them. Then loading them again and merging, then saving again` as you say above. Or at least the loading, merging and saving again part, if we consider that the part of your example where you create two files from scratch and save data into them with RDF could also just have been opening already existing files written by some other application before the merging. In fact the solution you provide follows exactly these steps:; ```python; # Opening files and loading pre-existing datasets; df_1=ROOT.RDataFrame('tree', file_path_1); df_2=ROOT.RDataFrame('tree', file_path_2). # creating new columns in the datasets; df_1=df_1.Define('identity', '+1'); df_2=df_2.Define('identity', '+2'). # Merging the datasets in memory; df_3 = df_1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9030#issuecomment-927091065:509,interface,interface,509,https://root.cern,https://github.com/root-project/root/issues/9030#issuecomment-927091065,1,['interface'],['interface']
Integrability,"Dear @amadio, @bluehood ,; thanks for the complete, smart and constructive set of comments. I think I implemented them all. ; In addition, I reloaded the implementation of the **VecOps**. In a nutshell the changes are:; - Now TVec encapsulate a vector<T, TVecAllocator<T>>. This allows to mirror the interface of vector but also to allow nice goodies like the constructor from an address and a lenght or assignment ops.; - Map free function has been added to do what Python's map does; - Filter was not added but rather the operator[] was overloaded to allow things like **v[ v < 3 ]** like numpy does; - Assignment operators have been added; - Test coverage has been increased. I wonder if this, once TVec replaces TArrayBranch in the TDF implementation, is enough to make life of users like @JavierCVilla .; I added @stwunsch as reviewer given the chat we had face2face and his involvement in analysis and TMVA development.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1613#issuecomment-365441937:300,interface,interface,300,https://root.cern,https://github.com/root-project/root/pull/1613#issuecomment-365441937,1,['interface'],['interface']
Integrability,"Dear @couet thank you very much. Is this something that could be implemented soon in ROOT. If it's a simple change to add the copy CTOR to the API it would avoid us in CMSSW to have to create a custom-made wrapper for TH2Poly.; Many thanks in advance, Pedro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13075#issuecomment-1891586098:206,wrap,wrapper,206,https://root.cern,https://github.com/root-project/root/issues/13075#issuecomment-1891586098,1,['wrap'],['wrapper']
Integrability,"Dear @eguiraud,. I tried to play a bit with it and apparently one of the problem is that `CMAKE_SOURCE_DIR` and `CMAKE_BINARY_DIR` have to be changed to `CMAKE_CURRENT_SOURCE_DIR` and `CMAKE_CURRENT_BINARY_DIR` in some places. I'm able to enter in the configuration step but then it crashes because of `RootMacros.cmake` :. ```cmake; CMake Error at build/_deps/root-src/cmake/modules/RootMacros.cmake:442 (message):; Cannot find header ROOT/TErrorDefaultHandler.hxx to generate dictionary; G__Core for. Did you forget to set the INCLUDE_DIRECTORIES property for; the current directory?; Call Stack (most recent call first):; build/_deps/root-src/core/CMakeLists.txt:237 (ROOT_GENERATE_DICTIONARY); ```; I tried to change them in `RootMacros.cmake` but it is a difficult part. . At least the use of `CMAKE_CURRENT_SOURCE_DIR` and `CMAKE_CURRENT_BINARY_DIR` in the right places should solve a lot of errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8923#issuecomment-907318235:406,message,message,406,https://root.cern,https://github.com/root-project/root/issues/8923#issuecomment-907318235,1,['message'],['message']
Integrability,"Dear @guitargeek ; Thank you very much for detailed information.; Actually I do no serialize `RooNLLVar` explicitely. ; I have (in python) large shelve-like database, where I store the results of the fits from RooFit - namely `RoofitResult` and `RooPlot` objects. Probably they ""pick-up"" `RooNLLVar` objects indirectly..; For my purposes the deserialized `RooFitResult` and `RooPlot` objects look perfectly OK (however I cannot guarantee that *all* methods for deserialized objects have been tested). . Actually now within my project I've provided the dedicated serializers ( via `__reduce__` ) for these objects to bypass annoying warning messages, and from now this issue in not relevant for me anymore.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13280#issuecomment-1644363144:640,message,messages,640,https://root.cern,https://github.com/root-project/root/issues/13280#issuecomment-1644363144,1,['message'],['messages']
Integrability,"Dear @vepadulano . Thanks for your reply. > Dear @acampove,; > Thanks contacting us. We should probably wait for @eguiraud for a final answer, but I'd like to give my two cents about this.; > ; > > Instances of RDataFrame objects are meant to be treated like trees.; > ; > I am curious about this first sentence. I have never got this impression, neither reading docs / toying with tutorials or doing more complex analyses with RDF. the first line of the [RDF docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html) says `ROOT's RDataFrame offers a high level interface for analyses of data stored in TTree, CSV's and other data formats. `. Just by the fact that I can read and process other formats than TTree I would say that in general RDF is not meant to be treated like a TTree. Otherwise I would also have to say that RDF is meant to be treated like a CSV file or something similar. I did not refer to the documentation but to how people would actually use this class. 99% of people do not read CSV files with ROOT and `RDataFrame` will be mostly used to interact in a simple and quick way with trees. > ; > > there should be a function that allows us to merge them; > ; > If I have to think about this function you propose, I don't see it going much further than the example you already have above. Since RDataFrame **is not** the dataset itself, but just an interface to it, it still needs to open the file where the dataset is contained and read data from it. Thus, merging two RDF objects would still involve ` opening each file and saving them. Then loading them again and merging, then saving again` as you say above. Or at least the loading, merging and saving again part, if we consider that the part of your example where you create two files from scratch and save data into them with RDF could also just have been opening already existing files written by some other application before the merging. In fact the solution you provide follows exactly these steps:; > ; > ```pytho",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9030#issuecomment-927331768:569,interface,interface,569,https://root.cern,https://github.com/root-project/root/issues/9030#issuecomment-927331768,1,['interface'],['interface']
Integrability,"Dear Bertrand,. Here is the entire log of the cmake output and the make output. Here I used the C++17 standard. Please note, the command with which I called cmake is specified in the first line of the log file.; [cmake_debug.log](https://github.com/root-project/root/files/10993550/cmake_debug.log); [make_debug.log](https://github.com/root-project/root/files/10993551/make_debug.log). Here are also CMakeError.log and CMakeOutput.log.; [CMakeError.log](https://github.com/root-project/root/files/10993778/CMakeError.log); [CMakeOutput.log](https://github.com/root-project/root/files/10993780/CMakeOutput.log). I've also compiled the release mode with C++14, and it works just fine. Here are the output logs.; [cmake_release.log](https://github.com/root-project/root/files/10993654/cmake_release.log); [make_release.log](https://github.com/root-project/root/files/10993655/make_release.log). After this, I tried to compile the release mode with the C++17 standard, but it fails. Meanwhile, I cannot use C++14 with the debug mode.; Here is the cmake output if I'm trying to configure the project in debug mode with C++14. ```; CMake Error at cmake/modules/RootBuildOptions.cmake:405 (message):; >>> At least C++17 standard required with root7, please enable it using; CMake option: -DCMAKE_CXX_STANDARD=17; Call Stack (most recent call first):; CMakeLists.txt:157 (include); ```. So I suggest that the problem rather is with C++17. With best regards,; Denys.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12492#issuecomment-1472390460:1183,message,message,1183,https://root.cern,https://github.com/root-project/root/issues/12492#issuecomment-1472390460,1,['message'],['message']
Integrability,"Dear Jonas. A huge thank you for your investigation on this, and kind explanation. Almost everything on what you explained is clear to me. But let me give you a tiny point where I don't completely understand. **About the <55 instead of <=55. You are right : I made a mistake there in my minimum example. But the principle of the comment stay. I made the fix in order to ""synchronize"" with the numerical values that you gave in your kind answer (I deduced that you made the fix). -->ok for that. **Case option_normalize_hist=1. Your comment : ""n_times_pdf_continuum->getVal()*bin_width=0.0181818 : here n_times_pdf_continuum is a RooAddPdf, which automatically normalizes itself. You create it from the continuum with 55 bins and bin width one, so I'd expect 1/55 which is indeed 0.0181818""; -->I disagree : my pdf is not just ""pdf_continuum"" : I put *n* times pdf_continuum where n is here the number of bkg : n=2200.; So I would expect that n times pdf should be 2200 * (1/55) = 40. **n_times_pdf_continuum is a RooAddPdf (with one element in the addition) with one parameter of yield, and one parameter of shape, so it is a extended pdf : n_bkg * times a pdf.**. **Case option_normalize_hist=0.; From your log, you changed a bit my code since in my code, I was putting, for the case not normalize :; if (option_normalize_hist); value_pdf=nb_events*pdf->getVal()*bin_width;; else; value_pdf=pdf->getVal()*bin_width;. But I understood your point (and it is clear)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7991#issuecomment-826815525:371,synchroniz,synchronize,371,https://root.cern,https://github.com/root-project/root/issues/7991#issuecomment-826815525,1,['synchroniz'],['synchronize']
Integrability,"Dear Lorenzo,. Thanks for the message! I'd be glad if you could let me know if you'll get; to investigating the correction too. Best wishes,. Ondra. On Fri, Feb 4, 2022 at 6:41 PM Lorenzo Moneta ***@***.***>; wrote:. > Hi,; > You are absolutly correct about the KS 1 sample test implemented in the; > GoFTest class.; > There is an issue with line 937 and it should be fixed now by this PR; > #9819 <https://github.com/root-project/root/pull/9819>; > See this commit (1ee1bba; > <https://github.com/root-project/root/commit/1ee1bba75a39c1bf74af88a08796386e6ea3d69d>; > ); >; > Concerning the question about the corrections on the number of events, the; > 2 sample test in Math uses a different implementation, coming from the; > CERNLIB. There, the correction was not applied.; > I will investigate this further to understand if this correction should be; > applied.; >; > Thank you for reporting this problem and the solution !; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/9636#issuecomment-1030252255>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AXLSCWIFWQXSVT6EKQX4MZDUZQMUZANCNFSM5MM3HGOQ>; > .; > Triage notifications on the go with GitHub Mobile for iOS; > <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>; > or Android; > <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.; >; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9636#issuecomment-1039219502:30,message,message,30,https://root.cern,https://github.com/root-project/root/issues/9636#issuecomment-1039219502,2,"['Message', 'message']","['Message', 'message']"
Integrability,"Dear Philippe. Sorry for late response. The crash depends on the input file. I landed with one file and here is the log file which came from running valgrind. I cannot find out the real reason from this. Could you point out where I should look into this?? Thanks and regards. Sunanda; ________________________________; From: Sunanda Banerjee ***@***.***>; Sent: 28 February 2023 14:10; To: root-project/root ***@***.***>; root-project/root ***@***.***>; Cc: Mention ***@***.***>; Subject: RE: [root-project/root] Getting a crash while reading a Root Tree (Issue #12370). Thanks Philippe - I shall try that; ________________________________; From: Philippe Canal ***@***.***; Sent: 27 February 2023 18:50; To: root-project/root; Cc: Sunanda Banerjee; Mention; Subject: Re: [root-project/root] Getting a crash while reading a Root Tree (Issue #12370). Alternatively you can run valgrind to get more information on this kind of failure:. valgrind --suppressions=$ROOTSYS/etc/valgrind-root.supp --log-file=val.01.log myexecutable myargs. —; Reply to this email directly, view it on GitHub<https://github.com/root-project/root/issues/12370#issuecomment-1446778005>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/ABGMZOSBSY5NDNIO7K6JZEDWZTSPBANCNFSM6AAAAAAVFHT3OU>.; You are receiving this because you were mentioned.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12370#issuecomment-1465411877:50,depend,depends,50,https://root.cern,https://github.com/root-project/root/issues/12370#issuecomment-1465411877,2,"['Message', 'depend']","['Message', 'depends']"
Integrability,"Dear ROOT developers,. we have met with a problem reading more than 2-dimensional arrays in TTrees using MakeClass. The problem appears only on the **Windows ROOT 6 version** (same code works on ROOT 6 on Linux, as well as on ROOT 5 in Windows). The code to reproduce is simple:. A tree is created by:; ```; TFile f(""newtree.root"", ""NEW"");; TTree t(""MyTree"", ""Test tree"");; double x[5][5][5];; t.Branch(""x"", x, ""x[5][5][5]"");; t.Fill();; t.Write();; f.Close();; ```; Then produce MakeClass from the tree: ```MyTree->MakeClass()```. Finally, try to read that tree via the class MyTree:; ```; .L MyTree.C; MyTree t;; t.Loop(); // crashes with bad-memory-allocation message (or silently); t.b_x->GetAddress(); // also crashes; ```. No problem is seen when using 2D or 1D arrays, nor simple numbers. Thanks, Pavel",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8833:663,message,message,663,https://root.cern,https://github.com/root-project/root/issues/8833,1,['message'],['message']
Integrability,"Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd.; We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:; ```; -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001); --; -- libXrdMain not found: xproofd will be a wrapper around xrootd; -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private; -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```; This then causes problem when our ROOT is used on some other machine.; So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version?. Thanks,; Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11750:656,wrap,wrapper,656,https://root.cern,https://github.com/root-project/root/issues/11750,1,['wrap'],['wrapper']
Integrability,"Dear ROOT maintainers, . The TTreeSQL class seems a bit broken. ; - It does not support sqlite (which nowadays might be the most likely format someone might use a TTree for) because of the way it parses columns. ; - Some of the data type conversions don't make sense to me (but maybe I misunderstand). In particular the string conversions don't seem like they'd work. . Here is a commit to address those issues. I wanted to also add proper support for database date/datetime/timestamp types (right now I turn them into a string) but I was not sure how to do that. I think what would work is to have an e.g. TDateSQL class that uses a TString for storage (since I believe that's what the SQL API right now would give us) that could then be transparently converted to TDatime or TTimeStamp as needed. This would be easy to implement, but I have not yet because there must be a better way... . Below is the commit message. There are also a few typo fixes that I included. . This commit has a few changes:; -Column names are now obtained from the Table metadata, ensuring that sqlite will work properly; -Variable length strings are properly supported (using TString); -The data type mapping was modified to make a bit more sense (in my opinion), but could still use some work.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3707:911,message,message,911,https://root.cern,https://github.com/root-project/root/pull/3707,1,['message'],['message']
Integrability,"Dear ROOT team,. while integrating some CMake functionality provided by ROOT through the `ROOT_USE_FILE` include into our project, some small issues came up. If we are mistaken and there are better solutions than the one I provided, your advice is very welcome. Our `FindROOT.cmake` implementation looks like this:; ```cmake; find_package(ROOT QUIET CONFIG; HINTS; ${ROOT_ROOT} # aliBuild; ${ROOTSYS} # upstream; $ENV{ROOTSYS} # upstream; ${SIMPATH} # FairSoft; ); include(FindPackageHandleStandardArgs); find_package_handle_standard_args(ROOT CONFIG_MODE); include(${ROOT_USE_FILE}); ```; which is called in a `CMakeLists.txt` like this; ```cmake; find_package(ROOT 6.10.04 REQUIRED); ```. Please see the commit messages for more details about the issues we had. Best regards,; Dennis",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/916:23,integrat,integrating,23,https://root.cern,https://github.com/root-project/root/pull/916,2,"['integrat', 'message']","['integrating', 'messages']"
Integrability,"Dear Vincenzo,. That's great, thank you for all your help!. Cheers,; Daniel. On Tue, 27 Feb 2024 at 13:21, Vincenzo Eduardo Padulano <; ***@***.***> wrote:. > Merged #14713 <https://github.com/root-project/root/pull/14713> into; > master.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/pull/14713#event-11934071904>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/APZZFPHYZAW2ZKTEERUFCI3YVWXTXAVCNFSM6AAAAABDIBYBJSVHI2DSMVQWIX3LMV45UABCJFZXG5LFIV3GK3TUJZXXI2LGNFRWC5DJN5XDWMJRHEZTIMBXGE4TANA>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14713#issuecomment-1966263145:629,Message,Message,629,https://root.cern,https://github.com/root-project/root/pull/14713#issuecomment-1966263145,1,['Message'],['Message']
Integrability,"Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):; ```; git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src; mkdir root_build; cd root_build; cmake ../root_src -j4; ```. and this produced:; ```; ...; [ 76%] Built target ClingUtils; [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o; [ 76%] Linking CXX shared library ../../../lib/libCling.so; [ 76%] Linking CXX executable src/rootcling_stage1; [ 76%] Built target rootcling_stage1; [ 76%] Generating G__Core.cxx, ../lib/Core.pcm; [ 76%] Built target Cling; While building module 'Core':; While building module 'std' imported from input_line_1:1:; In file included from <module-includes>:52:; In file included from /usr/include/c++/13/memory_resource:60:; In file included from /usr/include/c++/13/bits/memory_resource.h:46:; /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'; inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;; ^; ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'; # include <bits/utility.h> // for std::tuple_element, std::tuple_size; ^; ..; ```. It's not the exact same error message as in #12659 but seems rather close in nature ...; Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04?. Thanks & Cheers,; --Sven",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12897:1519,message,message,1519,https://root.cern,https://github.com/root-project/root/issues/12897,1,['message'],['message']
Integrability,"Deciding how many tasks to submit to a distributed scheduler is a fine art on its own :) From what I understand of your case, I would try to test first with `npartitions ~ n_files * (n_clusters_per_file / 5)` so that each task has at least more than 100 MB of data to process and you don't incur in too many small tasks that bring more overhead than actual gain. In the future it would be nice to have some clever algorithm that figures out a better default number of partitions, we'll see. Not sure about the details of the `HTCondorCluster` interface, I will get back to you if I manage to understand what's missing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9429#issuecomment-992778076:543,interface,interface,543,https://root.cern,https://github.com/root-project/root/issues/9429#issuecomment-992778076,1,['interface'],['interface']
Integrability,"DeclUnloader was trying to unload template instantiations whose point of (first) instantiation was the PCH. This caused problems with the code below. In particular, the class specialization `std::vector<int>` was instantiated in the PCH as part of `std::stack<...>`, which in turn was required by the STL <regex> header.; ```; root [0] std::vector<int> foo, bar;; root [1] std::swap(foo, bar);; root [2] .undo 1; root [3] std::swap(foo, bar);; IncrementalExecutor::executeFunction: symbol '_ZSt15__alloc_on_swapISaIiEEvRT_S2_' unresolved while linking [cling interface function]!; ```. This PR fixes the issue avoiding the unload of decls instantiated in the PCH.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4447:559,interface,interface,559,https://root.cern,https://github.com/root-project/root/pull/4447,1,['interface'],['interface']
Integrability,"Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:; Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309; https://its.cern.ch/jira/browse/ROOT-10593; https://its.cern.ch/jira/browse/ROOT-10284; https://its.cern.ch/jira/browse/ROOT-8828; https://its.cern.ch/jira/browse/ROOT-8538; https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:; Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14645:231,inject,injection,231,https://root.cern,https://github.com/root-project/root/pull/14645,4,"['inject', 'message']","['injection', 'message', 'messages']"
Integrability,"Declares a new method `RNTuple::Merge` to conform to the `hadd` merger interface, namely: ; https://github.com/root-project/root/blob/331efa4c00fefc38980eaaf7b41b8e95fcd1a23b/io/doc/v530/index.html#L43-L53. I originally thought about to adding this method `RNTupleReader`, but think this is the right choice since it's the `RNTuple` blob that's stored on disk, and we have to parse it into a `RNTupleReader` to do any useful work. . Actually running it segfaults, and I'm not sure whether I've made a mistake in linking or elsewhere. ; ~~**Edit:** segfault fixed by #6016~~; **Edit**: I believe the segfault is fixed by 12fef499c109da4c2454d9cca2e60e88a883aa1c, where I avoid assuming that mergeable objects are derived from `TObject`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6008:71,interface,interface,71,https://root.cern,https://github.com/root-project/root/pull/6008,1,['interface'],['interface']
Integrability,"Default.xctoolchain/usr/include -compilerI/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.0.0/include -compilerI/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include -compilerI/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -I/Users/suter_a/Applications/root/root_exec/include -I/opt/local/include -I/Users/suter_a/Applications/musrfit/src/include -I/Users/suter_a/Applications/musrfit/src/classes PUserFcnBase.h /Users/suter_a/Applications/musrfit/src/include/PUserFcnBaseLinkDef.h; cd /Users/suter_a/Applications/musrfit/build && /opt/local/bin/cmake -E cmake_depends ""Unix Makefiles"" /Users/suter_a/Applications/musrfit /Users/suter_a/Applications/musrfit/src/classes /Users/suter_a/Applications/musrfit/build /Users/suter_a/Applications/musrfit/build/src/classes /Users/suter_a/Applications/musrfit/build/src/classes/CMakeFiles/PUserFcnBase.dir/DependInfo.cmake --color=; Dependee ""/Users/suter_a/Applications/musrfit/build/src/classes/CMakeFiles/PUserFcnBase.dir/DependInfo.cmake"" is newer than depender ""/Users/suter_a/Applications/musrfit/build/src/classes/CMakeFiles/PUserFcnBase.dir/depend.internal"".; Dependee ""/Users/suter_a/Applications/musrfit/build/src/classes/CMakeFiles/CMakeDirectoryInformation.cmake"" is newer than depender ""/Users/suter_a/Applications/musrfit/build/src/classes/CMakeFiles/PUserFcnBase.dir/depend.internal"".; Scanning dependencies of target PUserFcnBase; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f src/classes/CMakeFiles/PUserFcnBase.dir/build.make src/classes/CMakeFiles/PUserFcnBase.dir/build; ... And all the further root_generate_dictionary work as well. Does this help?. Cheers,; Andreas. PS: Machine I have tested it on: ; Darwin Kernel Version 21.3.0: Wed Jan 5 21:37:58 PST 2022; root:xnu-8019.80.24~20/RELEASE_ARM64_T8101 arm64. ________________________________. Paul Scherrer Institut. Dr. An",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10062#issuecomment-1061481610:4253,Depend,DependInfo,4253,https://root.cern,https://github.com/root-project/root/issues/10062#issuecomment-1061481610,1,['Depend'],['DependInfo']
Integrability,Deleted two empty files that were just including the header and made; some cosmetic changes to root/multiproc and TPool derived classes:; - #include reordering.; - standarize the use of TError::Error as the way of throwing error; messages instead of mixing it with std::cerr here and there.; - added missing copyright notices and module identification lines.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/164:230,message,messages,230,https://root.cern,https://github.com/root-project/root/pull/164,1,['message'],['messages']
Integrability,Dependencies using ${GENERATE_REFLEX_TEST} variable do not work in roottest,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7978:0,Depend,Dependencies,0,https://root.cern,https://github.com/root-project/root/issues/7978,1,['Depend'],['Dependencies']
Integrability,Dependency: I don't have a strong opinion or technical argument. I'm a bit afraid of circular dependencies between core and imt.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-748052361:0,Depend,Dependency,0,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-748052361,2,"['Depend', 'depend']","['Dependency', 'dependencies']"
Integrability,Dependent on #2329,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2332:0,Depend,Dependent,0,https://root.cern,https://github.com/root-project/root/pull/2332,1,['Depend'],['Dependent']
Integrability,"Depending from selected file extension, show only appropriate files; Preliminary windows support in RFileDialog",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4734:0,Depend,Depending,0,https://root.cern,https://github.com/root-project/root/pull/4734,1,['Depend'],['Depending']
Integrability,Depends on #10850,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11193#issuecomment-1216481310:0,Depend,Depends,0,https://root.cern,https://github.com/root-project/root/pull/11193#issuecomment-1216481310,1,['Depend'],['Depends']
Integrability,Depends on #16645,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16769:0,Depend,Depends,0,https://root.cern,https://github.com/root-project/root/pull/16769,1,['Depend'],['Depends']
Integrability,Depends on #2375 and #2356,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2346#issuecomment-411397777:0,Depend,Depends,0,https://root.cern,https://github.com/root-project/root/pull/2346#issuecomment-411397777,1,['Depend'],['Depends']
Integrability,Depends on #2452.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2448#issuecomment-411065725:0,Depend,Depends,0,https://root.cern,https://github.com/root-project/root/pull/2448#issuecomment-411065725,1,['Depend'],['Depends']
Integrability,Depends on #2915. Could you rebase against?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2854#issuecomment-435624896:0,Depend,Depends,0,https://root.cern,https://github.com/root-project/root/pull/2854#issuecomment-435624896,1,['Depend'],['Depends']
Integrability,Depends on #3032,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3039:0,Depend,Depends,0,https://root.cern,https://github.com/root-project/root/pull/3039,1,['Depend'],['Depends']
Integrability,Depends on #3043,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3798:0,Depend,Depends,0,https://root.cern,https://github.com/root-project/root/pull/3798,1,['Depend'],['Depends']
Integrability,Depends on #3850.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4005:0,Depend,Depends,0,https://root.cern,https://github.com/root-project/root/pull/4005,1,['Depend'],['Depends']
Integrability,Depends on #4269,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4270:0,Depend,Depends,0,https://root.cern,https://github.com/root-project/root/pull/4270,1,['Depend'],['Depends']
Integrability,"Depends on #4401, requires rebase.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4448:0,Depend,Depends,0,https://root.cern,https://github.com/root-project/root/pull/4448,1,['Depend'],['Depends']
Integrability,Depends on @dpiparo resurrecting the missing test source files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1984#issuecomment-387350267:0,Depend,Depends,0,https://root.cern,https://github.com/root-project/root/pull/1984#issuecomment-387350267,1,['Depend'],['Depends']
Integrability,Depends on PR #1218 .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1257#issuecomment-341034522:0,Depend,Depends,0,https://root.cern,https://github.com/root-project/root/pull/1257#issuecomment-341034522,1,['Depend'],['Depends']
Integrability,Depends on PR #2371.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2378#issuecomment-408362633:0,Depend,Depends,0,https://root.cern,https://github.com/root-project/root/pull/2378#issuecomment-408362633,1,['Depend'],['Depends']
Integrability,Depends on PR #2795 and vgvassilev/clad#97.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2745#issuecomment-429634853:0,Depend,Depends,0,https://root.cern,https://github.com/root-project/root/pull/2745#issuecomment-429634853,1,['Depend'],['Depends']
Integrability,"Depends on PR #3000. @Axel-Naumann, we seem to have a cycle in module 'Hist': Hist -> ROOTHistDraw -> Hist. I am not sure what'd the best way to fix it. Could you fix it?. PS: Original error message:; ```; In file included from input_line_13:85:; /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: remark: building module 'ROOTHistDraw' as '/home/vvassilev/workspace/builds/root_runtime_modules/lib/ROOTHistDraw.pcm'; [-Rmodule-build]; #include ""ROOT/RHistDrawable.hxx""; ^; Error: Had to build non-system module ROOTHistDraw implicitly. You first need to; generate the dictionary for ROOTHistDraw or mark the C++ module as a system; module if you provided your own system modulemap file:; ROOTHistDraw [system] { ... }; [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoNode.cxx.o; While building module 'Hist':; While building module 'ROOTHistDraw' imported from /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:; In file included from <module-includes>:1:; /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHistDrawable.hxx:21:10: fatal error: cyclic dependency in module 'Hist': Hist -> ROOTHistDraw -> Hist; #include ""ROOT/RHistImpl.hxx""; ^; Scanning dependencies of target GenVector; [ 79%] Building CXX object geom/geom/CMakeFiles/Geom.dir/src/TGeoPara.cxx.o; In file included from input_line_13:85:; /home/vvassilev/workspace/builds/root_runtime_modules/include/ROOT/RHist.hxx:23:10: fatal error: could not build module 'ROOTHistDraw'; #include ""ROOT/RHistDrawable.hxx""; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2999#issuecomment-439637409:0,Depend,Depends,0,https://root.cern,https://github.com/root-project/root/pull/2999#issuecomment-439637409,4,"['Depend', 'depend', 'message']","['Depends', 'dependencies', 'dependency', 'message']"
Integrability,"Depends on label size of the axis, but now the lower limit is the default label size. That way, zero size label axes are still click and draggable",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/196:0,Depend,Depends,0,https://root.cern,https://github.com/root-project/root/pull/196,1,['Depend'],['Depends']
Integrability,"Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used; without the appropriate include never worked. This was previously; fixed by just adding TreePlayer (which contains TDF) to the PCH.; ; As always, let's recreate this hack with modules to make restore; the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1328:0,Depend,Depends,0,https://root.cern,https://github.com/root-project/root/pull/1328,1,['Depend'],['Depends']
Integrability,"Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; .dot file generated with RooAbsArg::graphVizTree produces an invalid .dot file if the graph title contains spaces. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; RooAbsArg::graphVizTree should produce a valid .dot file even when the names of the elements contain spaces. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; ROOT macro, save to graphvizMWE.C and run with `root graphvizMWE.C`:; ```; void graphvizMWE(void){; // Create a simple dependency tree; RooRealVar x{};; RooRealVar sigma{};; RooRealVar mu{};. RooGaussian Gaussian(""my_gaussian"", ""Gaussian"", x, mu, sigma);; RooGaussian GaussianWithSpace(""my gaussian"", ""Gaussian"", x, mu, sigma);. // Create GraphViz trees; Gaussian.graphVizTree(""tree_example.dot"");; GaussianWithSpace.graphVizTree(""tree_example2.dot""); // Produces invalid output; }; ```; Then attempt to convert the produced `.dot` files to images using; `dot -Tpng tree_example.dot -o example1.png # Produces an image`; `dot -Tpng tree_example2.dot -o example2.png # Error!`. The first of these will produce a .png image, the second will fail with a message like: `Error: tree_example2.dot: syntax error in line 1 near 'gaussian'`. Can be fixed by enclosing the graph title in quotes: i.e. changing line 1 of `tree_example2.dot` from; `digraph my gaussian{`; to; `digraph ""my gaussian""{`. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; ROOT built from source. ROOT Version: 6.23/01; Built for linuxx8664gcc on Jun 05 2020, 15:06:16; From heads/master@v6-23-01-229-gd4ac502837. Ubuntu 18.04.5 LTS",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7067:1815,message,message,1815,https://root.cern,https://github.com/root-project/root/issues/7067,1,['message'],['message']
Integrability,"Describe the bug; When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt.; The message is related to SOFIE:. ```; IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'!; You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&); Maybe you need to load the corresponding shared library?; Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'?; ```. ROOT 6.24/06 works fine. ### Expected behavior; No warning message. ### To Reproduce; Steps to reproduce the behavior:; 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 ; 2. Source dev4arm; `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`; 3. Start ROOT, e.g. `root -b -q`. ### Setup; 1. ROOT version: 6.26/04; 2. Operating system: aarch64, centos7; 3. LCG stack. ### Additional context; Affecting ATLAS (first noticed by Asoka Da Silva)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10877:1601,message,message,1601,https://root.cern,https://github.com/root-project/root/issues/10877,1,['message'],['message']
Integrability,"Diagnostic.h, line 1545; 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):; 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C...; 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538; 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):; 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C...; 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99; 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):; 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C...; 768: Assertion failed: is(tok::raw_identifier), file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Token.h, line 208; 768: Assertion failed: (CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):; 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C...; 768: Assertion failed: DiagID - DIAG_UPPER_LIMIT < DiagInfo.size() && ""Invalid diagnostic ID"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Basic\DiagnosticIDs.cpp, line 379; 768: Assertion failed: CurLexerCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):; 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C...; 768: Assertion failed: CurLexer && ""Got EOF but no current lexer set!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14200#issuecomment-1903602682:1804,message,message,1804,https://root.cern,https://github.com/root-project/root/pull/14200#issuecomment-1903602682,1,['message'],['message']
Integrability,"Dirty flag propagation appeared to be unnecessary in the batch mode; because the RooFitDriver manages the evaluation of nodes, but some nodes; have internal computation graphs that rely on the dirty flag; propagation, notably the integrals of a RooAbsAnaConvPdf. This fixes some stressRooFit tests wit the RooFit batchmode:; ```; Test 21 : Conditional use of per-event error p.d.f. F(t|dt)......OK; Test 28 : P.d.f. marginalization through integration.............OK; ```. The only tests that still needs to be fixed now is:; ```; Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)...............FAILED; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9458:440,integrat,integration,440,https://root.cern,https://github.com/root-project/root/pull/9458,1,['integrat'],['integration']
Integrability,Disable tests depending on xml when xml is not found,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12002:14,depend,depending,14,https://root.cern,https://github.com/root-project/root/pull/12002,1,['depend'],['depending']
Integrability,"Disclaimer: I am not sure whether this is:; * 0 bug report (intented / wontfix),; * 1 or 2 bug reports. . Depending on feedback, We can close and / or I can create dedicated bugs. . ### Observations; There are two changes in 6.26.00:; * `TRint` exits hard for unknown arguments. ; * `TRint` crashes when instantiated with `*argc = nullptr` and / or `argv = nullptr` which are the default values for `TApplication` and hence may be used by existing users of the `TRint` constructor. . ### Affected use cases; Applications may do something like:; ```cpp; TRint *app = new TRint(""app"", 0, NULL);; ...; app->Run(kTRUE);; ```; Applications may also use `TRint` during operation. One existing model some applications I use are employing is:; * Create a `TRint` shortly after startup, passing in `argc` and `argv`. ; * Allow the user to drop to a ROOT interpreter prompt. This is then done by calling `app->Run(kTRUE);`. A user can use the interpreter to inspect state of the analysis software, and exit it again to let the software continue. . The latter approach is extremely useful for example to shell out after analysis software startup, or inside an event, such that the user can interactively analyze objects right from a ROOT interpreter shell. . ### Questions; * Is the use case ""use TRint as class to drop into the interpreter"" supported? ; The changelog of 6.26.00 reads like `TRint` is meant for internal use by `root.exe` only, but there seems to be no easy alternative. ; Depending on the reply, this could be a separate bug report, or a ""wontfix"". ; * If the use case is / should be supported, It would be useful to be able to allow unsupported arguments to pass through, for use in applications which are not `root.exe`. ; * For improved backwards compatibility and safety, not crashing when being passed `*argc = nullptr` and / or `argv = nullptr` would be nice. . In case somebody else is hit by this, I am right now using this hack as workaround:; ```cpp; int dargc = 1;; char** dargv = &a",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10090:106,Depend,Depending,106,https://root.cern,https://github.com/root-project/root/issues/10090,1,['Depend'],['Depending']
Integrability,"Disclaimer: not everyone tagged in this comment agreed to the totality of my changes, and all dissenting comments have been considered. Anything included this PR is carved in stone and everything is open for discussion. I'm proposing a generalized executor interface that resolves to the specific ones (```TThreadExecutor```, ```TProcessExecutor```, a new ```SequentialExecutor```) with an execution policy received as a parameter. This is a use case that we found in places such as ```TMVA``` (@omazapa, @lmoneta) and the various fitting functions, where currently we rely on several if-else instructions where we check the execution policy (or even if ROOT has been compiled with IMT) to instantiate the right executor. My suggestion is to move ```TExecutor``` to ```ROOT::TExecutorBaseImpl``` (maybe in ```ROOT::Internals```?) and reuse the name. This breaks ROOT's very strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp ; ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);; auto mapFunction = [](unsigned i){return 1u;};; auto reductionFunction = [](const std::vector<unsigned> &v) {; return std::accumulate(v.begin(), v.end(), 0u);; };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);; ```. *",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1312:257,interface,interface,257,https://root.cern,https://github.com/root-project/root/pull/1312,1,['interface'],['interface']
Integrability,"Discussed with @etejedor, still needs to be discussed with @oshadura.; Commit message needs to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5607:78,message,message,78,https://root.cern,https://github.com/root-project/root/pull/5607,1,['message'],['message']
Integrability,Do not add a non-existent target to the list of dependencies.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/509:48,depend,dependencies,48,https://root.cern,https://github.com/root-project/root/pull/509,1,['depend'],['dependencies']
Integrability,Do not change the class layout depending on NDEBUG!,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2060:31,depend,depending,31,https://root.cern,https://github.com/root-project/root/pull/2060,1,['depend'],['depending']
Integrability,Do not evaluate dependent immediate invocations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13700:16,depend,dependent,16,https://root.cern,https://github.com/root-project/root/pull/13700,1,['depend'],['dependent']
Integrability,"Do not set up the iterator in the ctor.; ; Many interfaces in ROOT namely TCling do not need to iterate over decls to find what they look for. They use the regular lookup facilities which are provided by cling or clang.; ; In a few cases we still use the pattern:; `TClingClassInfo(fInterpreter) ci; ci.GetDataMember(..);`; where we are supposed to look for a ROOT's definition of a data member on the global scope. In turn, this pattern does not walk the decls but performs a 'regular' lookup.; ; This patch removes the expensive setup of the iterators (triggering humongous amount of deserializations). We lazily set up the iterators only when we are about to start iterating (most notably coming from the legacy PyROOT interfaces).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1668:48,interface,interfaces,48,https://root.cern,https://github.com/root-project/root/pull/1668,2,['interface'],['interfaces']
Integrability,Do we have perhaps a better understanding of this issue? I understand the dependencies are now fixed. Are the symbols also cured?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16553#issuecomment-2396007485:74,depend,dependencies,74,https://root.cern,https://github.com/root-project/root/issues/16553#issuecomment-2396007485,1,['depend'],['dependencies']
Integrability,"Do you actually want to change the behavior of TTree::Draw and TTreeReader so the stopping condition depends on the branches that are being read? That is a lot more work than ""just"" making the behavior of TTreeReader+TTree consistent with TTree::Draw and TTreeReader+TChain.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6518#issuecomment-774216574:101,depend,depends,101,https://root.cern,https://github.com/root-project/root/issues/6518#issuecomment-774216574,1,['depend'],['depends']
Integrability,Do you mean 'duplicated' or 'deprecated' in the commit message?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2405#issuecomment-409703223:55,message,message,55,https://root.cern,https://github.com/root-project/root/pull/2405#issuecomment-409703223,1,['message'],['message']
Integrability,Documentation for TH1's Chi2Test() routine,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12290:35,rout,routine,35,https://root.cern,https://github.com/root-project/root/issues/12290,1,['rout'],['routine']
Integrability,"Documentation of the method reported here for ease of review:. This method books a custom action for execution. The behavior of the action is completely dependent on the; Helper object provided by the caller. The minimum required interface for the helper is the following (more; methods can be present, e.g. a constructor that takes the number of worker threads is usually useful):. * Helper must publicly inherit from ROOT::Detail::TDF::TActionImpl<Helper>; * Helper(Helper &&): a move-constructor is required. Copy-constructors are discouraged.; * ColumnTypes_t: alias for a ROOT::TypeTraits::TypeList instantiation that specifies the types of the; columns to be passed to this action helper.; * Result_t: alias for the type of the result of this action helper. Must be default-constructible.; * ROOT::Detail::TDF::ColumnNames_t GetColumnNames() const: return the names of the columns processed by this; action. The number of names must be equal to the size of ColumnTypes_t.; * void Exec(unsigned int slot, ColumnTypes...columnValues): each working thread shall call this method; during the event-loop, possibly concurrently. No two threads will ever call Exec with the same 'slot' value:; this parameter is there to facilitate writing thread-safe helpers. The other arguments will be the values of; the requested columns for the particular entry being processed.; * void InitTask(TTreeReader *, unsigned int slot): each working thread shall call this method during the event; loop, before processing a batch of entries (possibly read from the TTreeReader passed as argument, if not null).; This method can be used e.g. to prepare the helper to process a batch of entries in a given thread. Can be no-op.; * void Initialize(): this method is called once before starting the event-loop. Useful for setup operations.; Can be no-op.; * void Finalize(): this method is called at the end of the event loop. Commonly used to finalize the contents; of the result.; * Result_t &PartialUpdate(unsigned int s",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1905:153,depend,dependent,153,https://root.cern,https://github.com/root-project/root/pull/1905,2,"['depend', 'interface']","['dependent', 'interface']"
Integrability,Documentation updates and sometimes also code changes that e.g. format warning messages or replace ineffective `assert`s by `throw`s.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5315:79,message,messages,79,https://root.cern,https://github.com/root-project/root/pull/5315,1,['message'],['messages']
Integrability,Does fgMaxSlots have to be static? I can't figure out the reason apart from wanting to keep the slot size heterogeneous at any point of the program. I would need it to be local for dependency on IMT behaviours to make sense.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1019#issuecomment-331064357:181,depend,dependency,181,https://root.cern,https://github.com/root-project/root/pull/1019#issuecomment-331064357,1,['depend'],['dependency']
Integrability,"Doesn't have setting the build type the same effect, which is what I do right now?; ```; CMAKE_ARGS -G ${CMAKE_GENERATOR}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; ```; I wonder if we can make the code more platform in-depended like this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15508#issuecomment-2112188641:218,depend,depended,218,https://root.cern,https://github.com/root-project/root/pull/15508#issuecomment-2112188641,1,['depend'],['depended']
Integrability,"Doing in a empty build directory; ```; cmake -Dminimal=ON $ROOT_SRC_DIR; cmake -Dbuiltin_xrootd=ON .; ```; fails with:; ```; CMake Error at cmake/modules/SearchInstalledSoftware.cmake:924 (target_link_libraries):; The link interface of target ""XRootD"" contains:. OpenSSL::SSL. but the target was not found. Possible reasons include:. * There is a typo in the target name.; * A find_package call is missing for an IMPORTED target.; * An ALIAS target is missing. Call Stack (most recent call first):; CMakeLists.txt:305 (include); ```; while on the same machine and in another empty directory doing just:; ```; cmake -Dbuiltin_xrootd=ON .; ```. The difference between the two case is that the `ssl` variable usually default to `ON` but in the minimal case it default to `OFF` and turning on `builtin_xrootd` does not turn `ssl` back on. The reason why this matters is that `find_package` defaults to declaring its results only inside the parent_scope. In practice we see `find_package` works properly in the top level `CMakeList.txt` and in one level of indirection (typically `cmake/modules/SearchInstalledSoftware.cmake`) but a second level of direction (i.e. inside the `add_subdirectory(builtins/xrootd)` inside `SearchInstalledSoftware.cmake`), it does not work. From https://cmake.org/cmake/help/latest/command/find_package.html we read:. > New in version 3.24: Specifying the GLOBAL keyword will promote all imported targets to a global scope in the importing project. Alternatively, this functionality can be enabled by setting the [CMAKE_FIND_PACKAGE_TARGETS_GLOBAL](https://cmake.org/cmake/help/latest/variable/CMAKE_FIND_PACKAGE_TARGETS_GLOBAL.html#variable:CMAKE_FIND_PACKAGE_TARGETS_GLOBAL) variable. So there is 3 possible solution. 1. Require `CMake` version `3.24` and add the `GLOBAL` keyword where needed (or set the variable); 2. Make sure that `builtin_xrootd` (and any other similar components) to turn `ssl` ON when turned ON; 3. Move the `find_package(OpenSSL) from inside `builti",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16374:223,interface,interface,223,https://root.cern,https://github.com/root-project/root/issues/16374,1,['interface'],['interface']
Integrability,"Don't convert RooHistPdf first to TH1 when exporting; 195d5b8111 [RF][HS3] Additions to JSONInterface to reduce code duplication; a75dec1868 [RF][HS3] Keep all information necessary to reconstruct combined datas; 6b80645765 Revert ""[RF] Make RooBatchCompute dependency public.""; [RF] Move loop management for code generation into CodeSquashContext; [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); [RF] Add 'translate' to RooNllVarNew.; [RF] Remove function declarations in RooStats LinkDef.h; [RF] Apply clang-format to ModelConfig.h and ModelConfig.cxx; [RF] Move `ModelConfig` from RooStats to RooFit; [RF] Don't add `weightVar` to observables in HistFactory; [RF] Minor improvements to RooFit evaluation code generation; [RF][NFC] Fix typo.; [RF] Disable RooFuncWrapper test if clad is off.; [RF] Remove wrong header declaration from roofit/roofit.; [RF] Fix visibility of the res/ directories.; [RF] Make RooBatchCompute dependency public.; [RF] Add initial interface and implementation for code-squashing.; [RF][HS3] Put exported `histosys` in the correct vector; [RF][HS3] Avoid creating temporary objects to import into workspace; [RF][HS3][HF] General cleanup of HS3 HistFactory implementation; [RF][HS3] Cover also `HistoSys` in HS3 HistFactory test; [RF] Enable passing of gradient function directly to RooMinimizer; [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory var",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12590#issuecomment-1491813664:1610,interface,interface,1610,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664,1,['interface'],['interface']
Integrability,"Don't understand, 'happy with' what?; I see the issue is that interpreter the behavior is a bit different than someone might reasonably expect and showing a warning is probably worthwhile. That is the current behavior is dependent on all variables in the Interpreter being globals, which is an implementation detail not known to all users.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/631#issuecomment-307671268:221,depend,dependent,221,https://root.cern,https://github.com/root-project/root/pull/631#issuecomment-307671268,1,['depend'],['dependent']
Integrability,"Don't use a default w=1.0 in the Fill functions, but instead declare inlined no-weight overloads to correctly override TH2 methods. Note that the overrides are actually quite questionable, because they don't respect the actual TH2 interface, where the third parameter is the weight ""w"" and not an additional coordinate ""z"". However, that's how the TProfile2D interface was defined a long time ago, so these overrides are preserved for backwards compatibility. The better design would have been to give the function a different name, or always require an explicit `w` parameter such that the signatures are always different. Closes #15688.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15693:231,interface,interface,231,https://root.cern,https://github.com/root-project/root/pull/15693,2,['interface'],['interface']
Integrability,Done! I think I've integrated all changes. **TODO:**. - [x] Make commit message more expressive; - [x] Try to make the counters in `RDefineBase` and `GraphNode` atomics; - [x] Look for another solution for the static `TRegex` members; - [x] Add a random sleep to the test cases to stir things up; - [x] Add tests for `Cache` and `Snapshot`; - [x] Point out in the docs that `SaveGraph` is not thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6266:19,integrat,integrated,19,https://root.cern,https://github.com/root-project/root/pull/6266,2,"['integrat', 'message']","['integrated', 'message']"
Integrability,Doxygen fixes in integrator classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7746:17,integrat,integrator,17,https://root.cern,https://github.com/root-project/root/pull/7746,1,['integrat'],['integrator']
Integrability,Doxygen fixes in integrator classes; Typos,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7746:17,integrat,integrator,17,https://root.cern,https://github.com/root-project/root/pull/7746,1,['integrat'],['integrator']
Integrability,Drop MathCore and ROOTVecOps from PyROOT dependencies,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3225:41,depend,dependencies,41,https://root.cern,https://github.com/root-project/root/pull/3225,1,['depend'],['dependencies']
Integrability,"Due to faulty logic, we were using different RDefine objects for; each systematic variation even if the define itself did not depend; on the systematic variation under consideration.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10622:126,depend,depend,126,https://root.cern,https://github.com/root-project/root/pull/10622,1,['depend'],['depend']
Integrability,Due to pymva being automatically built with tmva and depending on numpy it was possible to configuration due to missing the package (and fail-on-missing being enabled). This patch introduces a switch in the cmake configuration to allow independently disabling pymva. Warning: Did _not_ try building yet (hoping the CI system will take care of that). Relevant output for `cmake ../root-src -DPYTHON_EXECUTABLE=$(which python) -Dtmva-pymva=on -Dfail-on-missing=off`:; ```; -- Looking for python; -- Looking for numpy (python package); -- TMVA: numpy not found for python /Users/ashlaban/.local/share/virtualenvs/root-conf-test-qZnOX_ZL/bin/python. Switching off tmva-pymva option; ```. Relevant output for `cmake ../root-src -DPYTHON_EXECUTABLE=$(which python) -Dtmva-pymva=on -Dfail-on-missing=on`:; ```; -- Looking for python; -- Looking for numpy (python package); CMake Error at cmake/modules/SearchInstalledSoftware.cmake:467 (message):; TMVA: numpy python package not found and tmva-pymva component required; (python executable:; /Users/ashlaban/.local/share/virtualenvs/root-conf-test-qZnOX_ZL/bin/python); ```. Relevant output for `cmake ../root-src -DPYTHON_EXECUTABLE=$(which python) -Dtmva-pymva=off -Dfail-on-missing=on` and `cmake ../root-src -DPYTHON_EXECUTABLE=$(which python) -Dtmva-pymva=off -Dfail-on-missing=off`:; ```; ```. Meaning in these cases it configures without issue.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2972:53,depend,depending,53,https://root.cern,https://github.com/root-project/root/pull/2972,2,"['depend', 'message']","['depending', 'message']"
Integrability,"Due to some planned major improvements to RVec (namely the addition of; a small buffer optimization) the layout of RVec objects will change in; a backward-incompatible way between v6.24 and v6.26. Because of this, we now print a warning if an application is reading or; writing a ROOT::RVec object from/to a ROOT file. We assume this is an; exceedingly rare case, as the ROOT interface typically used to; manipulate RVecs is RDataFrame, and RDataFrame performs an on-the-fly; RVec <-> std::vector conversion rather than writing RVecs to disk. Note that, currently, RVecs written e.g. in a TTree cannot be read back; using certain ROOT interfaces (e.g. TTreeReaderArray and RDataFrame).; These limitations will also be lifted in v6.26.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7222:376,interface,interface,376,https://root.cern,https://github.com/root-project/root/pull/7222,2,['interface'],"['interface', 'interfaces']"
Integrability,"During our meeting just now we decided that the highest priority issues for me to work on the coming days are:. 1. Documentation; 2. The top-level likelihood builder interface / PDF analysis (together with @wverkerke). If time permits, after that I will try to harmonize the Kahan sum usages and the other remaining issues, but we may need to postpone these to another PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8700#issuecomment-910293173:166,interface,interface,166,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-910293173,1,['interface'],['interface']
Integrability,"During the initial build file generation, CMake populates the CMakeCache.txt file. This is why subsequent cmake invokations fetch the variables from this file and do not display the ""Found ...."" messages. If you want to see these messages when running a new build you could remove the CMakeCache.txt so as to populate the variables again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8084#issuecomment-848526396:195,message,messages,195,https://root.cern,https://github.com/root-project/root/issues/8084#issuecomment-848526396,2,['message'],['messages']
Integrability,"During the upgrade to LLVM 18, we enabled JITLink for AArch64 on Linux, because we had to (there were problems with RuntimeDyld that we could not solve). In order to switch x86 as well, we need a solution for `CLING_DEBUG` and `CLING_PROFILE`. It's not clear to me how this works with JITLink, does it have an equivalent interface to `registerJITEventListener`? Maybe @lhames can comment...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14209#issuecomment-2342696358:321,interface,interface,321,https://root.cern,https://github.com/root-project/root/issues/14209#issuecomment-2342696358,1,['interface'],['interface']
Integrability,ELF header does contain dependency information.; $ objdump -x lib/libMathMore.so | less; ```; Dynamic Section:; PLTGOT 0x0000000000092fe8; PLTRELSZ 0x0000000000005a48; JMPREL 0x000000000002d4a8; PLTREL 0x0000000000000007; RELA 0x0000000000024e98; RELASZ 0x0000000000008610; RELAENT 0x0000000000000018; RELACOUNT 0x000000000000003c; SYMTAB 0x00000000000001c8; SYMENT 0x0000000000000018; STRTAB 0x000000000000ac50; STRSZ 0x0000000000013c98; GNU_HASH 0x000000000001e8e8; HASH 0x00000000000212d0; NEEDED libgsl.so.23; NEEDED libgslcblas.so.0; NEEDED libm.so.6; NEEDED libMathCore.so; NEEDED libImt.so; NEEDED libThread.so; NEEDED libCore.so; NEEDED libstdc++.so.6; NEEDED libgcc_s.so.1; NEEDED libpthread.so.0; NEEDED libc.so.6; SONAME libMathMore.so; ```. NEEDED section is the dependency libraries.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2135#issuecomment-394476683:24,depend,dependency,24,https://root.cern,https://github.com/root-project/root/pull/2135#issuecomment-394476683,2,['depend'],['dependency']
Integrability,"EPREFIX=1 /usr/bin/python3.5 /mnt/build/workspace/root-pullrequests-build/root/etc/dictpch/makepch.py etc/allDict.cxx.pch -I/mnt/build/workspace/root-pullrequests-build/build/include -I/mnt/build/workspace/root-pullrequests-build/root/core ; - [2021-11-30T07:32:08.128Z] ./include/TestStatistics/LikelihoodJob.h:17:10: fatal error: 'RooFit/MultiProcess/Job.h' file not found . ### Warnings:; - [2021-11-30T07:30:53.680Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/inc/TestStatistics/LikelihoodGradientWrapper.h:45:17: warning: ‘virtual void RooFit::TestStatistics::LikelihoodGradientWrapper::synchronizeParameterSettings(const std::vector&lt;ROOT::Fit::ParameterSettings&gt;&)’ was hidden [-Woverloaded-virtual] ; - [2021-11-30T07:30:53.680Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/inc/TestStatistics/LikelihoodGradientJob.h:47:9: warning: by ‘virtual void RooFit::TestStatistics::LikelihoodGradientJob::synchronizeParameterSettings(ROOT::Math::IMultiGenFunction*, const std::vector&lt;ROOT::Fit::ParameterSettings&gt;&)’ [-Woverloaded-virtual] ; - [2021-11-30T07:30:59.393Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/inc/TestStatistics/LikelihoodGradientWrapper.h:45:17: warning: ‘virtual void RooFit::TestStatistics::LikelihoodGradientWrapper::synchronizeParameterSettings(const std::vector&lt;ROOT::Fit::ParameterSettings&gt;&)’ was hidden [-Woverloaded-virtual] ; - [2021-11-30T07:30:59.393Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/inc/TestStatistics/LikelihoodGradientJob.h:47:9: warning: by ‘virtual void RooFit::TestStatistics::LikelihoodGradientJob::synchronizeParameterSettings(ROOT::Math::IMultiGenFunction*, const std::vector&lt;ROOT::Fit::ParameterSettings&gt;&)’ [-Woverloaded-virtual] ; - [2021-11-30T07:30:59.393Z] /mnt/build/workspace/root-pullrequests-build/root/roofit/roofitcore/inc/TestStatistics/LikelihoodGradientWrapper.h:45:17: warning: ‘virtual void RooFit::TestStati",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9349#issuecomment-982359449:1851,synchroniz,synchronizeParameterSettings,1851,https://root.cern,https://github.com/root-project/root/pull/9349#issuecomment-982359449,1,['synchroniz'],['synchronizeParameterSettings']
Integrability,"ESDMUON;Aliphysics=vAN-20150213"";. gProof->ShowDataSet(query);; will generate filenames as : . alien:///alice/data/2011/LHC11h/000169838/ESDs/pass2_muon/11000169838080.42/AliESDs.FILTER_ESDMUON_WITH_ALIPHYSICS_vAN-20150213.root alien:///alice/data/2011/LHC11h/000169838/ESDs/pass2_muon/11000169838080.42/AliESDs.FILTER_ESDMUON_WITH_ALIPHYSICS_vAN-20150213.root. On the workers the staging script is deciphering the filename in order to call. $ALICE_PHYSICS/aaf-stage-and-filter --from source_url --to destination_url --filter filtername . where :; ALICE_PHYSICS points to (cvmfs version of) vAN-20150213, ; source_url is alien:///alice/data/2011/LHC11h/000169838/ESDs/pass2_muon/11000169838080.42/AliESDs.root alien:///alice/data/2011/LHC11h/000169838/ESDs/pass2_muon/11000169838080.42/AliESDs.root; filter name is ESDMUON . Hope this clarifies the intent (more bla at http://aphecetche.github.io/aafu/doc/#Datafiltering http://aphecetche.github.io/aafu/doc/#Datafiltering). . If the dataset manager can be easily provided to users without having it in Root, I’m all for it. . Regards,. > Le 5 mai 2015 à 18:40, Dario Berzano notifications@github.com a écrit :; > ; > Hello @aphecetche https://github.com/aphecetche,; > ; > replacing an existing keyword with another one may break compatibility with existing users. Even if Filter sounds more appropriate, I would avoid doing that.; > ; > Pushing the concepts of AliRoot and AliPhysics into ROOT is wrong. This is ALICE stuff and should not get ""too much"" into ROOT's code.; > ; > ""too much"" = the AliEn interface was inside ROOT already (wrongly, IMHO), and this dataset manager has been added to ROOT solely because it requires AliEn only to work.; > ; > To me those patches reflect your quite specific use case. What is it you'd like to achieve, and that cannot be done with the tools you have?; > ; > Cheers; > ; > d.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/root-mirror/root/pull/63#issuecomment-99135034.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/63#issuecomment-99143966:2346,interface,interface,2346,https://root.cern,https://github.com/root-project/root/pull/63#issuecomment-99143966,1,['interface'],['interface']
Integrability,E_INSTALL_LIBDIR=/nix/store/4csvzgc3216rdp2lndklpcqr67w5mcc5-root-6.28.00/lib -DCMAKE_INSTALL_DOCDIR=/nix/store/4csvzgc3216rdp2lndklpcqr67w5mcc5-root-6.28.00/share/doc/ROOT -DCMAKE_INSTALL_INFODIR=/nix/store/4csvzgc3216rdp2lndklpcqr67w5mcc5-root-6.28.00/share/info -DCMAKE_INSTALL_MANDIR=/nix/store/4csvzgc3216rdp2lndklpcqr67w5mcc5-root-6.28.00/share/man -DCMAKE_INSTALL_OLDINCLUDEDIR=/nix/store/4csvzgc3216rdp2lndklpcqr67w5mcc5-root-6.28.00/include -DCMAKE_INSTALL_INCLUDEDIR=/nix/store/4csvzgc3216rdp2lndklpcqr67w5mcc5-root-6.28.00/include -DCMAKE_INSTALL_SBINDIR=/nix/store/4csvzgc3216rdp2lndklpcqr67w5mcc5-root-6.28.00/sbin -DCMAKE_INSTALL_BINDIR=/nix/store/4csvzgc3216rdp2lndklpcqr67w5mcc5-root-6.28.00/bin -DCMAKE_INSTALL_NAME_DIR=/nix/store/4csvzgc3216rdp2lndklpcqr67w5mcc5-root-6.28.00/lib -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_OSX_SYSROOT= -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_STRIP=/nix/store/1y8i61anhs9hh1g5x3zw2fvdbivwixzg-gcc-wrapper-11.3.0/bin/strip -DCMAKE_RANLIB=/nix/store/1y8i61anhs9hh1g5x3zw2fvdbivwixzg-gcc-wrapper-11.3.0/bin/ranlib -DCMAKE_AR=/nix/store/1y8i61anhs9hh1g5x3zw2fvdbivwixzg-gcc-wrapper-11.3.0/bin/ar -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_INSTALL_PREFIX=/nix/store/4csvzgc3216rdp2lndklpcqr67w5mcc5-root-6.28.00 -Drpath=ON -Dbuiltin_llvm=OFF -Dbuiltin_freetype=OFF -Dbuiltin_gtest=OFF -Dbuiltin_nlohmannjson=OFF -Dbuiltin_openui5=OFF -Dalien=OFF -Dbonjour=OFF -Dcastor=OFF -Dchirp=OFF -Dclad=OFF -Ddavix=ON -Ddcache=OFF -Dfail-on-missing=ON -Dfftw3=OFF -Dfitsio=OFF -Dfortran=OFF -Dgnuinstall=ON -Dimt=ON -Dgfal=OFF -Dgviz=OFF -Dhdfs=OFF -Dhttp=ON -Dkrb5=OFF -Dldap=OFF -Dmonalisa=OFF -Dmysql=OFF -Dodbc=OFF -Dopengl=ON -Doracle=OFF -Dpgsql=OFF -Dpythia6=OFF -Dpythia8=OFF -Drfio=OFF -Droot7=OFF -Dsqlite=OFF -Dssl=ON -Dtmva=ON -Dvdt=OFF -Dwebgui=OFF -Dxml=ON -Dxrootd=ON -DC_INCLUDE_DIRS=/nix/store/nasgvbblxi25r6y1s82il4m0m4ghib68-glibc-2.35-224-dev/include ; -- The C compiler identification is GNU 11.3.0; -- The CXX compiler identification ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12153#issuecomment-1429284232:3552,wrap,wrapper-,3552,https://root.cern,https://github.com/root-project/root/pull/12153#issuecomment-1429284232,1,['wrap'],['wrapper-']
Integrability,"Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary; information (see [ATR-25049](https://its.cern.ch/jira/browse/ATR-25049)). The ROOT internal class TClassTable records information about all classes; that could potentially be created. This is effectively a singleton,; but TClassTable itself does no locking. Rather, it depends on callers; already having acquired the root internal mutex. When a shared library; is loaded that contains dictionary information, TClassTable gets calls; to register information for classes defined in that file. However,; the ROOT lock is not acquired in that case. So a shared library load; could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock; when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading; in order to acquire the lock, but this hack is not possible with newer; versions of glibc, so this will eventually become a blocker for; moving to centos9.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11263:345,depend,depends,345,https://root.cern,https://github.com/root-project/root/pull/11263,1,['depend'],['depends']
Integrability,"Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup.; ; This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1632:490,depend,dependencies,490,https://root.cern,https://github.com/root-project/root/pull/1632,3,['depend'],"['dependencies', 'depends']"
Integrability,Enable again the usage of ROOT error messages (TError) in Minuit2,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6059:37,message,messages,37,https://root.cern,https://github.com/root-project/root/pull/6059,1,['message'],['messages']
Integrability,Enable argument dependent lookup (ADL) in math.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/445:16,depend,dependent,16,https://root.cern,https://github.com/root-project/root/pull/445,1,['depend'],['dependent']
Integrability,Error message when opening a GDML with TEveManager,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7987:6,message,message,6,https://root.cern,https://github.com/root-project/root/issues/7987,1,['message'],['message']
Integrability,Error value and context of call to FT_Set_Char_Size in TTF::SetTextSize should be in error message,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14592:91,message,message,91,https://root.cern,https://github.com/root-project/root/issues/14592,1,['message'],['message']
Integrability,Eve-7 Add simple window management and improve message log,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9515:47,message,message,47,https://root.cern,https://github.com/root-project/root/pull/9515,1,['message'],['message']
Integrability,Eve-7 Enable routing to table views,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7369:13,rout,routing,13,https://root.cern,https://github.com/root-project/root/pull/7369,1,['rout'],['routing']
Integrability,"Even simpler reproducer, that doesn't depend on `TObject` at all (sorry for the noise); ```py; import ROOT. ROOT.gInterpreter.Declare(; '''; class A {};; class B: public A {};; class C: public B {};. void myfunc(const B &b){; std::cout << ""B"" << std::endl;; }. void myfunc(const C &c){; std::cout << ""c"" << std::endl;; }. '''). ROOT.myfunc(ROOT.B()); ROOT.myfunc(ROOT.C()); ```. output:; ```; B; B; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8817#issuecomment-896106638:38,depend,depend,38,https://root.cern,https://github.com/root-project/root/issues/8817#issuecomment-896106638,1,['depend'],['depend']
Integrability,"Everybody has python. Not everybody has NumPy. That state gets a name with this PR. I think it makes sense, also in Oksana's approach of ""let's configure ROOT parts, not dependent libraries"". See https://epsft-jenkins.cern.ch/view/ROOT/job/root-incremental-master/6924/LABEL=ROOT-centos7,SPEC=noimt/console; ```; CMake Error at cmake/modules/FindNumPy.cmake:62 (message):; NumPy import failure:. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ImportError: No module named numpy. Call Stack (most recent call first):; cmake/modules/SearchInstalledSoftware.cmake:9 (_find_package); cmake/modules/SearchInstalledSoftware.cmake:469 (find_package); CMakeLists.txt:103 (include); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2972#issuecomment-439441593:170,depend,dependent,170,https://root.cern,https://github.com/root-project/root/pull/2972#issuecomment-439441593,2,"['depend', 'message']","['dependent', 'message']"
Integrability,"Exactly same routine can be applied for TWebCanvas, but this requires small modifications in TCanvasImp interface",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4855#issuecomment-578131523:13,rout,routine,13,https://root.cern,https://github.com/root-project/root/pull/4855#issuecomment-578131523,2,"['interface', 'rout']","['interface', 'routine']"
Integrability,Exactly. Talking to Philippe we indeed need to decide how to deal with this case of `std::foo` vs `::foo`. We can delay the decision point by renaming `std::Detail` injected by ROOT (#9093).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8828#issuecomment-939859280:165,inject,injected,165,https://root.cern,https://github.com/root-project/root/issues/8828#issuecomment-939859280,1,['inject'],['injected']
Integrability,"Example effect of the new, complete implementation:; ```.cpp; #include ""ROOT/RDataFrame.hxx"". struct DecayAngles {; Double_t phi{0.0};; };. int main(); {; ROOT::RDataFrame d( 10 );; auto dnotype = d.Define( ""foo"", [](){ return DecayAngles(); } );; *dnotype.Count(); // does work; // *dnotype.Filter(""foo.phi > 0"").Count(); // does not work and prints nice error message; return 0;; }; ```; error message; ```; input_line_15:1:56: error: variable has incomplete type '__tdf1::foo_type' (aka '__tdf1::DecayAngles'); namespace __tdf_0{ auto tdf_f = []() {__tdf1::foo_type foo;; ^; input_line_13:1:26: note: forward declaration of '__tdf1::DecayAngles'; namespace __tdf1 { class DecayAngles;/* Did you forget to declare type DecayAngles in the interpreter?*/ using foo_type = DecayAngles; }; ^; libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Cannot interpret the following expression:; foo.phi > 0. Make sure it is valid C++.; Abort trap: 6; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2558#issuecomment-417694357:362,message,message,362,https://root.cern,https://github.com/root-project/root/pull/2558#issuecomment-417694357,2,['message'],['message']
Integrability,"Example of failure:``` java.lang.IllegalArgumentException: Could not instantiate {delegate={$class=XUnitBuilder, testTimeMargin=3000, thresholdMode=1, thresholds=[{$class=FailedThreshold, failureNewThreshold=0, failureThreshold=0, unstableNewThreshold=0, unstableThreshold=0}, {$class=SkippedThreshold, failureNewThreshold=, failureThreshold=, unstableNewThreshold=, unstableThreshold=}], tools=[{$class=CTestType, deleteOutputFiles=true, failIfNotNew=false, pattern=build/Testing/*/Test.xml, skipNoTestFiles=false, stopProcessingIfError=true}]}} for org.jenkinsci.plugins.workflow.steps.CoreStep: java.lang.UnsupportedOperationException: no known implementation of interface jenkins.tasks.SimpleBuildStep is named XUnitBuilder ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7901#issuecomment-829093239:666,interface,interface,666,https://root.cern,https://github.com/root-project/root/pull/7901#issuecomment-829093239,1,['interface'],['interface']
Integrability,Examples for the mentioned features. Dependent on PR #1872.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1889:37,Depend,Dependent,37,https://root.cern,https://github.com/root-project/root/pull/1889,1,['Depend'],['Dependent']
Integrability,Exceptions thrown in an event loop are caught to print a message. This catch block is leveraged to finalize all scheduled actions in order to properly deallocate memory where needed and save the partial results which are obtained. # This Pull request:; Is work in progress and lacks a test battery; ## Changes or fixes:; Allows to finalize actions scheduled in a RDF analysis in case an exception is thrown during the event loop. ## Checklist:. - [V] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #10484,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13546:57,message,message,57,https://root.cern,https://github.com/root-project/root/pull/13546,1,['message'],['message']
Integrability,"ExprValueKind, clang::DeclarationNameInfo const&, clang::NestedNameSpecifierLoc, clang::NamedDecl*, clang::SourceLocation, clang::TemplateArgumentListInfo const*) () from /home/linev/build/webgui/lib/libCling.so; #12 0x00007f4aa568b13c in clang::Sema::BuildDeclarationNameExpr(clang::CXXScopeSpec const&, clang::DeclarationNameInfo const&, clang::NamedDecl*, clang::NamedDecl*, clang::TemplateArgumentListInfo const*, bool) () from /home/linev/build/webgui/lib/libCling.so; #13 0x00007f4aa568b7ce in clang::Sema::BuildDeclarationNameExpr(clang::CXXScopeSpec const&, clang::LookupResult&, bool, bool) () from /home/linev/build/webgui/lib/libCling.so; #14 0x00007f4aa568c378 in clang::Sema::BuildQualifiedDeclarationNameExpr(clang::CXXScopeSpec&, clang::DeclarationNameInfo const&, bool, clang::Scope const*, clang::TypeSourceInfo**) () from /home/linev/build/webgui/lib/libCling.so; #15 0x00007f4aa59a162a in clang::TreeTransform<(anonymous namespace)::TemplateInstantiator>::TransformDependentScopeDeclRefExpr(clang::DependentScopeDeclRefExpr*, bool, clang::TypeSourceInfo**) () from /home/linev/build/webgui/lib/libCling.so; #16 0x00007f4aa59948bc in clang::TreeTransform<(anonymous namespace)::TemplateInstantiator>::TransformTemplateArgument(clang::TemplateArgumentLoc const&, clang::TemplateArgumentLoc&, bool) () from /home/linev/build/webgui/lib/libCling.so; #17 0x00007f4aa5996dc2 in clang::TreeTransform<(anonymous namespace)::TemplateInstantiator>::TransformTemplateSpecializationType(clang::TypeLocBuilder&, clang::TemplateSpecializationTypeLoc, clang::TemplateName) () from /home/linev/build/webgui/lib/libCling.so; #18 0x00007f4aa5993be9 in clang::TreeTransform<(anonymous namespace)::TemplateInstantiator>::TransformTSIInObjectScope(clang::TypeLoc, clang::QualType, clang::NamedDecl*, clang::CXXScopeSpec&) [clone .isra.0] () from /home/linev/build/webgui/lib/libCling.so; #19 0x00007f4aa5994499 in clang::TreeTransform<(anonymous namespace)::TemplateInstantiator>::TransformNestedNameSp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8494#issuecomment-865084737:2026,Depend,DependentScopeDeclRefExpr,2026,https://root.cern,https://github.com/root-project/root/issues/8494#issuecomment-865084737,1,['Depend'],['DependentScopeDeclRefExpr']
Integrability,Extend TCanvasImp interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/622:18,interface,interface,18,https://root.cern,https://github.com/root-project/root/pull/622,1,['interface'],['interface']
Integrability,Extend the message ID type to Long_t to fix overflow described in #6715,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6740:11,message,message,11,https://root.cern,https://github.com/root-project/root/pull/6740,1,['message'],['message']
Integrability,Extended fitting interfaces.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/567:17,interface,interfaces,17,https://root.cern,https://github.com/root-project/root/pull/567,1,['interface'],['interfaces']
Integrability,"Extracted here to circumvent ODR clash between; std::Sp_counted_ptr_inplace<llvm::sys::fs::detail::DirIterState, std::allocator<llvm::sys::fs::detail::DirIterState>, (_gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&); coming from a no-rtti and a rtti build in libstdc++ from GCC >= 8.1.; In its function body, rtti uses `arg0 == typeid(...)` protected by #ifdef __cpp_rtti. Depending; on which symbol (with or without rtti) the linker picks up, the argument `arg0` is a valid; type_info - or not, in which case this comparison crashes.; Circumvent this by removing the rtti-use of this function:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2748:389,Depend,Depending,389,https://root.cern,https://github.com/root-project/root/pull/2748,1,['Depend'],['Depending']
Integrability,Extracted the code that makes generates an example file into its own file and made this a dependency of the others.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/365:90,depend,dependency,90,https://root.cern,https://github.com/root-project/root/pull/365,1,['depend'],['dependency']
Integrability,Extraction from #5181 . First of all - add libraries in dependency list when class from such library used; Second - try to remove includes which are not used and coming from libraries which are not in dep list; In two places try to use virtual interfaces (TVirtualTreePlayer and TVirtualPacketizer) to avoid linking to implementation library.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5231:56,depend,dependency,56,https://root.cern,https://github.com/root-project/root/pull/5231,2,"['depend', 'interface']","['dependency', 'interfaces']"
Integrability,"FAILED: tmva/sofie/CMakeFiles/ROOTTMVASofie.dir/src/SOFIE_common.cxx.o ; - [2023-02-22T14:17:35.310Z] /mnt/build/workspace/root-pullrequests-build/root/tmva/sofie/inc/TMVA/SOFIE_common.hxx:464:4: error: there are no arguments to ‘assert’ that depend on a template parameter, so a declaration of ‘assert’ must be available [-fpermissive] ; - [2023-02-22T14:17:35.310Z] /mnt/build/workspace/root-pullrequests-build/root/tmva/sofie/inc/TMVA/SOFIE_common.hxx:464:10: error: ‘assert’ was not declared in this scope ; - [2023-02-22T14:17:35.310Z] /mnt/build/workspace/root-pullrequests-build/root/tmva/sofie/inc/TMVA/SOFIE_common.hxx:466:10: error: ‘assert’ was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation [-fpermissive] ; - [2023-02-22T14:17:35.310Z] FAILED: tmva/sofie/CMakeFiles/ROOTTMVASofie.dir/src/RModel_Base.cxx.o ; - [2023-02-22T14:17:36.241Z] /mnt/build/workspace/root-pullrequests-build/root/tmva/sofie/inc/TMVA/SOFIE_common.hxx:464:4: error: there are no arguments to ‘assert’ that depend on a template parameter, so a declaration of ‘assert’ must be available [-fpermissive] ; - [2023-02-22T14:17:36.241Z] /mnt/build/workspace/root-pullrequests-build/root/tmva/sofie/inc/TMVA/SOFIE_common.hxx:464:10: error: ‘assert’ was not declared in this scope ; - [2023-02-22T14:17:36.241Z] /mnt/build/workspace/root-pullrequests-build/root/tmva/sofie/inc/TMVA/SOFIE_common.hxx:466:10: error: ‘assert’ was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation [-fpermissive] ; - [2023-02-22T14:17:36.241Z] FAILED: tmva/sofie/CMakeFiles/ROOTTMVASofie.dir/src/RModel_GraphIndependent.cxx.o ; - [2023-02-22T14:17:36.803Z] /mnt/build/workspace/root-pullrequests-build/root/tmva/sofie/inc/TMVA/SOFIE_common.hxx:464:4: error: there are no arguments to ‘assert’ that depend on a template parameter, so a declaration of ‘assert’ must be available [-fpermissive] . And 10 more",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11208#issuecomment-1440094979:1341,depend,depend,1341,https://root.cern,https://github.com/root-project/root/pull/11208#issuecomment-1440094979,3,['depend'],"['depend', 'dependent']"
Integrability,"FF -Dbuiltin_gtest=OFF -Dbuiltin_nlohmannjson=OFF -Dbuiltin_openui5=OFF -Dalien=OFF -Dbonjour=OFF -Dcastor=OFF -Dchirp=OFF -Dclad=OFF -Ddavix=ON -Ddcache=OFF -Dfail-on-missing=ON -Dfftw3=OFF -Dfitsio=OFF -Dfortran=OFF -Dgnuinstall=ON -Dimt=ON -Dgfal=OFF -Dgviz=OFF -Dhdfs=OFF -Dhttp=ON -Dkrb5=OFF -Dldap=OFF -Dmonalisa=OFF -Dmysql=OFF -Dodbc=OFF -Dopengl=ON -Doracle=OFF -Dpgsql=OFF -Dpythia6=OFF -Dpythia8=OFF -Drfio=OFF -Droot7=OFF -Dsqlite=OFF -Dssl=ON -Dtmva=ON -Dvdt=OFF -Dwebgui=OFF -Dxml=ON -Dxrootd=ON -DC_INCLUDE_DIRS=/nix/store/nasgvbblxi25r6y1s82il4m0m4ghib68-glibc-2.35-224-dev/include ; -- The C compiler identification is GNU 11.3.0; -- The CXX compiler identification is GNU 11.3.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /nix/store/1y8i61anhs9hh1g5x3zw2fvdbivwixzg-gcc-wrapper-11.3.0/bin/gcc - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /nix/store/1y8i61anhs9hh1g5x3zw2fvdbivwixzg-gcc-wrapper-11.3.0/bin/g++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: /nix/store/bslw1kzx445wxp08ykq2vdsgnr516vcq-git-2.39.1/bin/git (found version ""2.39.1"") ; -- Checking internet connectivity; -- Checking internet connectivity - failed: will not automatically download external dependencies; -- Looking for Python; -- Found Python3: /nix/store/sp5x6s8n36gjlwck74xhj1i61p66vcpa-python3-3.10.9/bin/python3.10 (found version ""3.10.9"") found components: Interpreter Development NumPy Development.Module Development.Embed ; -- Could NOT find Python2 (missing: Python2_EXECUTABLE Python2_INCLUDE_DIRS Python2_LIBRARIES Python2_NumPy_INCLUDE_DIRS Interpreter Development NumPy Development.Module Development.Embed) ; Reason given by package: ; Interpreter: Wrong major version for the interpreter ""/nix/store/sp5x6s8n36gjlwck74x",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12153#issuecomment-1429284232:4960,wrap,wrapper-,4960,https://root.cern,https://github.com/root-project/root/pull/12153#issuecomment-1429284232,1,['wrap'],['wrapper-']
Integrability,"FWIW many of the failures are due to; ```; root [0] std::string_view sv;; root [1] (std::string) sv;; IncrementalExecutor::executeFunction: symbol '_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12__sv_wrapperC1ESt17basic_string_viewIcS2_E' unresolved while linking [cling interface function]!; You are probably missing the definition of std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::__sv_wrapper::__sv_wrapper(std::basic_string_view<char, std::char_traits<char> >); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17_S_to_string_viewESt17basic_string_viewIcS2_E' unresolved while linking [cling interface function]!; You are probably missing the definition of std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_to_string_view(std::basic_string_view<char, std::char_traits<char> >); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ENS4_12__sv_wrapperERKS3_' unresolved while linking [cling interface function]!; You are probably missing the definition of std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::__sv_wrapper, std::allocator<char> const&); Maybe you need to load the corresponding shared library?; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11601#issuecomment-1282548277:279,interface,interface,279,https://root.cern,https://github.com/root-project/root/issues/11601#issuecomment-1282548277,3,['interface'],['interface']
Integrability,"FWIW the line isn't needed because a few lines down, we have; ```cmake; target_include_directories(gtest INTERFACE ${GTEST_INCLUDE_DIR}); target_include_directories(gmock INTERFACE ${GMOCK_INCLUDE_DIR}); ```; (note the singular `GTEST_INCLUDE_DIR`!)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13375#issuecomment-1661886125:105,INTERFACE,INTERFACE,105,https://root.cern,https://github.com/root-project/root/pull/13375#issuecomment-1661886125,2,['INTERFACE'],['INTERFACE']
Integrability,FWIW you can resurrect your local incremental builds with `rm -rf AFTERIMAGE-prefix/` and then `cmake .`. The failure is related to our `ExternalProject_Add` that does `cmake -E copy_directory` without properly tracking dependencies.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16129#issuecomment-2255392246:220,depend,dependencies,220,https://root.cern,https://github.com/root-project/root/pull/16129#issuecomment-2255392246,1,['depend'],['dependencies']
Integrability,"FYI, after setting the build type to `Release` and rerunning, only these still fail:; ```; The following tests FAILED:; 	 1 - clingtest-check-cling (Failed); 	 13 - pyunittests-pyroot-dependency-versions (Failed); 	 68 - pyunittests-pyroot-numbadeclare (Not Run); 	 69 - test-import-numba (Failed); 	160 - gtest-math-mathcore-test-stressMathCoreUnit (Failed); 	282 - test-stressmathcore (Failed); 	307 - test-TFormulaTests (Failed); 	1143 - tutorial-pyroot-pyroot004_NumbaDeclare-py (Not Run); 	1852 - roottest-root-meta-ROOT-5694-execLoadLibs (Failed); ```; and the log of failures is [here](https://github.com/root-project/root/files/7710438/ctest-failed.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9436#issuecomment-993356711:184,depend,dependency-versions,184,https://root.cern,https://github.com/root-project/root/issues/9436#issuecomment-993356711,1,['depend'],['dependency-versions']
Integrability,"FYI,. I tried the route of `ClassDefInline` with poor results. First off, the class now need a default constructor, which means I had to turn the reference data member to a pointer. The diff is here. ```; --- a/gui/browserv7/src/RBrowserData.cxx; +++ b/gui/browserv7/src/RBrowserData.cxx; @@ -26,6 +26,8 @@; #include ""TBufferJSON.h""; #include ""TEnv.h""; ; +#include ""TObject.h""; +; #include <algorithm>; #include <regex>; ; @@ -42,15 +44,15 @@ namespace Experimental {; ; class RBrowserDataCleanup : public TObject {; ; - RBrowserData &fData;; + RBrowserData *fData{nullptr}; //!; ; public:; - RBrowserDataCleanup(RBrowserData &_data) : fData(_data) {}; + RBrowserDataCleanup(RBrowserData *_data) : fData(_data) {}; + RBrowserDataCleanup() {} // Needed by ClassDefInline; ; - void RecursiveRemove(TObject *obj) override; - {; - fData.RemoveFromCache(obj);; - }; + void RecursiveRemove(TObject *obj) override { fData->RemoveFromCache(obj); }; +; + ClassDefInline(RBrowserDataCleanup, 1);; };; }; }; @@ -67,7 +69,7 @@ public:; ; RBrowserData::RBrowserData(); {; - fCleanupHandle = std::make_unique<RBrowserDataCleanup>(*this);; + fCleanupHandle = std::make_unique<RBrowserDataCleanup>(this);; R__LOCKGUARD(gROOTMutex);; gROOT->GetListOfCleanups()->Add(fCleanupHandle.get());; }. ```. And the test gives even more errors then before:. ```; 1548: -- BEGIN OUTDIFF OUTPUT --; 1548: --- /home/vpadulan/Programs/rootproject/roottest/root/core/execStatusBitsCheck.ref	Wed Jun 9 11:08:31 2021; 1548: +++ /home/vpadulan/Programs/rootproject/rootbuild/execstatusbitcheck-fix-v2/roottest/root/core/execStatusBitsCheck.log	Mon Jul 17 18:19:46 2023; 1548: @@ -14,5 +14,29 @@; 1548: Bit 13 declared in TObject as kInvalidObject; 1548: Bit 14 declared in TStreamerElement as kWholeObject; 1548: Bit 21 declared in TStreamerElement as kWarned; 1548: +Error in <TClass::LoadClassInfo>: no interpreter information for class ROOT::Experimental::RBrowserDataCleanup is available even though it has a TClass initialization r",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13134#issuecomment-1638467226:18,rout,route,18,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1638467226,1,['rout'],['route']
Integrability,"FYI: The reason for the slow test execution and many of the timeouts was `ReuseExistingWeakSymbols`, added mostly as an optimization in commit adec92d1e763143dfcd151718418a3c1834824a8. It calls `getSymbolAddress` for a lot of `GlobalValue`s which is apparently much more expensive with LLVM 13 (probably due to locking, discussed above). However, the original commit message also mentions that this actually solves problems on M1, so we'll have to see later on how to re-enable it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1124936547:367,message,message,367,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1124936547,1,['message'],['message']
Integrability,"F] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers; f4fc140268 [RF] Remove RooMomentMorphND; 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf; d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10; 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper.; 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument; 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext; ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew.; 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation; c51376731b [RF][NFC] Fix typo.; 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off.; 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit.; 98d004c200 [RF] Fix visibility of the res/ directories.; e97347056c [RF] Make RooBatchCompute dependency public.; 4483b01b7f [RF] Add initial interface and implementation for code-squashing.; f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer; 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; bf4990c5d4 [RF] Exclude RooHistError from IO; 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; f355c3ced4 [RF] Code-format `testRooDataHist.cxx`; 3fd99f7679 [RF] Enable AD code-gen test for RooFit.; a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext; 1367091202 [RF] Code modernization of RooAbsReal; 5c20fdc652 [RF] Add inti",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12681:2364,interface,interface,2364,https://root.cern,https://github.com/root-project/root/pull/12681,4,['interface'],['interface']
Integrability,Fails with this message:; - projectroot.roottest.root.dataframe.roottest_root_dataframe_test_snapshot (from CTest); - Failing for the past 7 builds (Since #94 ),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/525#issuecomment-297293981:16,message,message,16,https://root.cern,https://github.com/root-project/root/pull/525#issuecomment-297293981,1,['message'],['message']
Integrability,Failure is unrelated (likely missing dependency in cmake/ctest).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2511#issuecomment-415522077:37,depend,dependency,37,https://root.cern,https://github.com/root-project/root/pull/2511#issuecomment-415522077,1,['depend'],['dependency']
Integrability,"Failure on `alma8` looks unrelated to this PR:; ```txt; Traceback (most recent call last):; File ""/github/home/ROOT-CI/src/tutorials/tmva/TMVA_SOFIE_Inference.py"", line 70, in <module>; session = ROOT.TMVA_SOFIE_Higgs_trained_model.Session(); cppyy.gbl.std.runtime_error: Session::Session(string filename = ""Higgs_trained_model.dat"") =>; runtime_error: TMVA-SOFIE failed to read the correct tensor name; expected name is tensor_densebias0 , read tensor_dense3kernel0; CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15421#issuecomment-2097064454:536,message,message,536,https://root.cern,https://github.com/root-project/root/pull/15421#issuecomment-2097064454,1,['message'],['message']
Integrability,Failures on Ubuntu2004 are due to use std::regex before loading the PyTorch module. ; See PyTorch issue: https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091. regex comes from libROOTNtuple (days component) loaded by TMVA dependency on RDataframe. ; Unfortunately cannot disable DAOS when running with `testing=On`. Try now building without RDataframe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13674#issuecomment-1733208800:240,depend,dependency,240,https://root.cern,https://github.com/root-project/root/pull/13674#issuecomment-1733208800,1,['depend'],['dependency']
Integrability,"Failures seem unrelated. @Axel-Naumann, we are only hit by this because of cxxmodules. There are header dependencies (usually Math/Math.h) and the pcm generation requires this. For regular ROOT that's not an issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2506#issuecomment-415555227:104,depend,dependencies,104,https://root.cern,https://github.com/root-project/root/pull/2506#issuecomment-415555227,1,['depend'],['dependencies']
Integrability,Fair enough. What replacement do you have in mind? (I see it mentioned but not described in the commit message).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/543#issuecomment-298657607:103,message,message,103,https://root.cern,https://github.com/root-project/root/pull/543#issuecomment-298657607,1,['message'],['message']
Integrability,"Feature: Save training progress to root file, present it in TMVAGui. Add training history object for TMVA, here I incorporate usage to log DNN epoch performance with DNN_CPU and PyKeras. The tool is intended to be general enough that it can be used by any ML algorithm. For example, XGBoost could also record its progress per iteration with this object. A request for this functionality can be found on the root forums; https://root-forum.cern.ch/t/how-to-get-training-history-using-tmva-keras-interface/28799. My solution does not require tensorboard and records are stored within the root file. Test:; ```; . bin/thisroot.sh; cd tutorials/tmva/; make; ./TMVAClassification; root -l; TMVA::TMVAGui(""TMVA.root""); //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx ; .q. cd keras; python ClassificationKeras.py; root -l; TMVA::TMVAGui(""TMVA.root""); //Click on Training History... See Keras training history for PyKeras_val_acc, PyKeras_acc, PyKeras_loss and PyKeras_val_loss; ```. Feedback welcomed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4337:494,interface,interface,494,https://root.cern,https://github.com/root-project/root/pull/4337,1,['interface'],['interface']
Integrability,"Few more details - all implementation build around `TCanvas::IsDrawn()` functionality.; This flag set every time `c.Draw()` called, but then checked and reset in jupyter via `CaptureDrawnPrimitives` function. Same logic could be implemented for `TCanvas::Update()`.; But next problem - so called `NotebookDrawer` is temporary object in Jupyter . One need to store update handle for each drawn canvas and reuse it if `c.Update()` is called. Theoretically this could be implemented, but needs some extension in C++ interface. ; @vepadulano Do we want this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13631#issuecomment-1714144864:513,interface,interface,513,https://root.cern,https://github.com/root-project/root/issues/13631#issuecomment-1714144864,1,['interface'],['interface']
Integrability,"FileExtension> > > const&, bool, cling::Interpreter const*) () from /home/geonwoo/root/lib/libCling.so; #16 0x00007fd7ce21b224 in TCling::TCling(char const*, char const*, char const* const*) () from /home/geonwoo/root/lib/libCling.so; #17 0x00007fd7ce21ceea in CreateInterpreter () from /home/geonwoo/root/lib/libCling.so; #18 0x00007fd7d1edeb13 in TROOT::InitInterpreter() () from /home/geonwoo/root/lib/libCore.so.6.22; #19 0x00007fd7d1edf00f in ROOT::Internal::GetROOT2() () from /home/geonwoo/root/lib/libCore.so.6.22; #20 0x00007fd7d1eebdcd in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/geonwoo/root/lib/libCore.so.6.22; #21 0x00007fd7d2263f0f in TRint::TRint(char const*, int*, char**, void*, int, bool) () from /home/geonwoo/root/lib/libRint.so.6.22; #22 0x0000561a6211b174 in main (); ===========================================================; ```. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; i installed root from homepage, ; ```; $ wget https://root.cern/download/root_v6.22.00.Linux-ubuntu19-x86_64-gcc9.2.tar.gz; $ tar -xzvf root_v6.22.00.Linux-ubuntu19-x86_64-gcc9.2.tar.gz; $ source root/bin/thisroot.sh # also available: thisroot.{csh,fish,bat}; ```; i finished these steps and finally i had tried to excute root by $root and then this error message had poped up . ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; 1.latest version 2. oracle VM VirtualBox in window 10 3.i don't know i just followed steps from cern homepage. ### Additional context; <!--; Add any other context about the problem here.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6859:9895,message,message,9895,https://root.cern,https://github.com/root-project/root/issues/6859,1,['message'],['message']
Integrability,Filter doesn't display command line option `-js` and `-nodraw` in the description anymore. Tutorials now use `gROOT->GetTutorialsDir()` to access tutorial files. converttonotebooks now displays an error message that is picked up by jenkins when nbconvert fails.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/209:203,message,message,203,https://root.cern,https://github.com/root-project/root/pull/209,1,['message'],['message']
Integrability,"First attempt at moving the globbing logic in `TChain::Add` out of the method. The main remaining question is where will this new free function actually live. It depends on `TRegexp`, `TString` and `TSystem`, so I guess somewhere in `core/base`. Any ideas here?. I removed usage of `TList` in the function, with C++17 support I could use `std::filesystem` instead of `gSystem` which could be another small improvement in the logic.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13160:162,depend,depends,162,https://root.cern,https://github.com/root-project/root/pull/13160,1,['depend'],['depends']
Integrability,"First reported here: https://bugs.gentoo.org/793002. To reproduce, it should be enough to configure with; ```; $ cmake .. -DCMAKE_C_COMPILER=gcc-11.1.0 -DCMAKE_CXX_COMPILER=g++-11.1.0 -DCMAKE_CXX_STANDARD=11 -Dminimal=ON; ```; to reproduce the error below; ```; Consolidate compiler generated dependencies of target Foundation_Stage1; [ 18%] Building CXX object core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o; In file included from /srv/root/src/root/core/foundation/inc/ROOT/RWrap_libcpp_string_view.h:545,; from /srv/root/src/root/core/foundation/inc/ROOT/RStringView.hxx:26,; from /srv/root/src/root/core/foundation/inc/TClassEdit.h:65,; from /srv/root/src/root/core/foundation/src/RConversionRuleParser.cxx:18:; /srv/root/src/root/core/foundation/inc/ROOT/libcpp_string_view.h: In member function ‘constexpr std::experimental::__ROOT::basic_string_view<_CharT, _Traits>::size_type std::experimental::__ROOT::basic_string_view<_CharT, _Traits>::max_size() const’:; /srv/root/src/root/core/foundation/inc/ROOT/libcpp_string_view.h:275:63: error: ‘numeric_limits’ is not a member of ‘std’; 275 | size_type max_size() const _NOEXCEPT { return (_VSTD::numeric_limits<size_type>::max)(); }; | ^~~~~~~~~~~~~~; /srv/root/src/root/core/foundation/inc/ROOT/libcpp_string_view.h:275:87: error: expected primary-expression before ‘>’ token; 275 | size_type max_size() const _NOEXCEPT { return (_VSTD::numeric_limits<size_type>::max)(); }; | ^; /srv/root/src/root/core/foundation/inc/ROOT/libcpp_string_view.h:275:90: error: ‘::max’ has not been declared; did you mean ‘std::max’?; 275 | size_type max_size() const _NOEXCEPT { return (_VSTD::numeric_limits<size_type>::max)(); }; | ^~~; | std::max; In file included from /usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/g++-v11/algorithm:62,; from /srv/root/src/root/core/foundation/res/TSchemaRuleProcessor.h:15,; from /srv/root/src/root/core/foundation/src/RConversionRuleParser.cxx:17:; /usr/lib/gcc/x86_64-pc-linux-gnu/11.1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8281:293,depend,dependencies,293,https://root.cern,https://github.com/root-project/root/issues/8281,1,['depend'],['dependencies']
Integrability,First steps in direction of development RNTuple C API with minimal dependencies,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6322:67,depend,dependencies,67,https://root.cern,https://github.com/root-project/root/pull/6322,1,['depend'],['dependencies']
Integrability,"Fix #7912. In this report, the v5 file has a 'map<TString, RooExpensiveObjectCache::ExpensiveObject*>'; however it is recorded as 'map<TString, ExpensiveObject*>'. However the map stored in; the file is empty and thus no information was recorded about `ExpensiveObject`,; consequently when the map's StreamerInfo request the TClass for the underlying pair,; it is returned nullptr (since we no longer create the TClass for a pair where one or; more of the component is unknown). The routine `FixCollectionV5` needed to be updated to handle this situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7926:483,rout,routine,483,https://root.cern,https://github.com/root-project/root/pull/7926,3,['rout'],['routine']
Integrability,Fix NO_CXXMODULE handling logic for dependencies,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5903:36,depend,dependencies,36,https://root.cern,https://github.com/root-project/root/pull/5903,1,['depend'],['dependencies']
Integrability,Fix PyROOT dependencies for cxxmodules build,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2809:11,depend,dependencies,11,https://root.cern,https://github.com/root-project/root/pull/2809,1,['depend'],['dependencies']
Integrability,Fix RLogger interface in CEF and Qt5 adapters,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6959:12,interface,interface,12,https://root.cern,https://github.com/root-project/root/pull/6959,2,"['adapter', 'interface']","['adapters', 'interface']"
Integrability,Fix ROOT libraries dependencies,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5231:19,depend,dependencies,19,https://root.cern,https://github.com/root-project/root/pull/5231,1,['depend'],['dependencies']
Integrability,Fix TMVA dependency on Cuda,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7017:9,depend,dependency,9,https://root.cern,https://github.com/root-project/root/pull/7017,1,['depend'],['dependency']
Integrability,Fix Windows exception handling for newer LLVM interfaces. Block it’s …,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/732:46,interface,interfaces,46,https://root.cern,https://github.com/root-project/root/pull/732,1,['interface'],['interfaces']
Integrability,"Fix [this](http://cdash.cern.ch/viewBuildError.php?type=1&buildid=362417) warning:. ```; Scanning dependencies of target testRootFinder; [ 96%] Building CXX object math/mathcore/test/CMakeFiles/testRootFinder.dir/testRootFinder.cxx.o; /.../root/graf3d/gl/src/gl2ps.cxx: In function ‘void gl2psBuildBspTree(GL2PSbsptree*, GL2PSlist*)’:; /.../root/graf3d/gl/src/gl2ps.cxx:1540:19: warning: ‘prim’ may be used uninitialized in this function [-Wmaybe-uninitialized]; GL2PSprimitive *prim, *frontprim = NULL, *backprim = NULL;; ^~~~; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/618:98,depend,dependencies,98,https://root.cern,https://github.com/root-project/root/pull/618,1,['depend'],['dependencies']
Integrability,"Fix `mt201_parallelHistoFill.C` failing with the following error:; ```; 779: Processing C:/root-dev/git/master/tutorials/multicore/mt201_parallelHistoFill.C...; 779: [runStaticInitializersOnce]: Failed to materialize symbols: { (main, { ?_Swap@?$_Ptr_base@VTH1F@@@std@@IEAAXAEAV12@@Z,; [...]; 779: [runStaticInitializersOnce]: Failed to materialize symbols: { (main, { __orc_init_func.cling-module-9 }) }; 779: cling JIT session error: Failed to materialize symbols: { (main, { ?mt201_parallelHistoFill@@YAHXZ }) }; 779: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):; 779: error code: 1; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14786:590,message,message,590,https://root.cern,https://github.com/root-project/root/pull/14786,2,['message'],['message']
Integrability,"Fix a few minor things and pave the way to integrate cutflow reports in TDataFrame. * TDFAction ctor can take a shared_ptr instead of a weak_ptr: TDFAction; can safely assume that the previous node in the chain still exists when it is; being constructed; * fPrevData is now a reference instead of a raw pointer in all classes:; a reference better indicates that we always expect fPrevData to be a valid; node of the chain. In fact, the only case when this condition might not be; met is when the TDataFrameImpl object goes out-of-scope before other nodes; of the chain; we detect this case and throw before trying to access; invalid fPrevData pointers/references.; * use `Long64_t` instead of `int` for all entry variables",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/333:43,integrat,integrate,43,https://root.cern,https://github.com/root-project/root/pull/333,1,['integrat'],['integrate']
Integrability,"Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,; RooFit's old, single-value computations have to be used as a fallback.; If RooFit, however, tries to precalculate those values, the nodes of; the computation graph will always yield the same wrong value, since; they are switched to ""always clean"".; This happens e.g. when a node of the graph doesn't depend on parameters,; but only on observables. To fix this, the global static that inihibits ""always clean"" has to be; set while the computation is running. **NB**:; The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come).; Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6178:126,interface,interface,126,https://root.cern,https://github.com/root-project/root/pull/6178,2,"['depend', 'interface']","['depend', 'interface']"
Integrability,Fix a printout message in Minuit2,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8134:15,message,message,15,https://root.cern,https://github.com/root-project/root/pull/8134,1,['message'],['message']
Integrability,Fix an access violation error when using `fscanf` on Windows 64 bit:; ```; 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx...; 243: **********************************************************************; 243: * Starting Graphics - S T R E S S suite *; 243: **********************************************************************; 243: * Starting Basic Graphics - S T R E S S *; 243: **********************************************************************; 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):; 243: error code: Access violation; 243:; 243:; 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9959:553,message,message,553,https://root.cern,https://github.com/root-project/root/pull/9959,1,['message'],['message']
Integrability,"Fix bug introduced in https://github.com/root-project/root/commit/bc4e3d3787a30a5e4ccad5371044975f4481232e. fSelEntry is a nullptr or not, depending on which constructor is called. Editable-combo-box constructor leaves fSelEntry as a nullptr, thus guards are needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14397:139,depend,depending,139,https://root.cern,https://github.com/root-project/root/pull/14397,1,['depend'],['depending']
Integrability,"Fix bug introduced in https://github.com/root-project/root/commit/bc4e3d3787a30a5e4ccad5371044975f4481232e. fSelEntry is a nullptr or not, depending on which constructor is called. Editable-combo-box constructor leaves fSelEntry as a nullptr, thus guards are needed. There are guards everywhere in the code except in this function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14301:139,depend,depending,139,https://root.cern,https://github.com/root-project/root/pull/14301,1,['depend'],['depending']
Integrability,Fix compilation errors in win32gdk (typos) and winnt (interface changes),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1093:54,interface,interface,54,https://root.cern,https://github.com/root-project/root/pull/1093,1,['interface'],['interface']
Integrability,"Fix compilation of dataframe-resptr test on RHEL/EPEL 7 using the default compiler (gcc 4.8.5) and the gtest library provided by the system (gtest 1.6.0) instead of the bundled one. Error message with the original sources:; ````; In file included from /usr/include/gtest/gtest.h:57:0,; from /builddir/build/BUILD/root-6.14.00/tree/dataframe/test/dataframe_resptr.cxx:2:; /builddir/build/BUILD/root-6.14.00/tree/dataframe/test/dataframe_resptr.cxx: In member function 'virtual void RResultPtr_ImplConv_Test::TestBody()':; /builddir/build/BUILD/root-6.14.00/tree/dataframe/test/dataframe_resptr.cxx:48:4: error: no matching function for call to 'testing::AssertionResult::AssertionResult(ROOT::RDF::RResultPtr<TH1D>&)'; EXPECT_TRUE(m);; ^; /builddir/build/BUILD/root-6.14.00/tree/dataframe/test/dataframe_resptr.cxx:48:4: note: candidates are:; In file included from /builddir/build/BUILD/root-6.14.00/tree/dataframe/test/dataframe_resptr.cxx:2:0:; /usr/include/gtest/gtest.h:271:12: note: testing::AssertionResult::AssertionResult(bool); explicit AssertionResult(bool success) : success_(success) {}; ^; /usr/include/gtest/gtest.h:271:12: note: no known conversion for argument 1 from 'ROOT::RDF::RResultPtr<TH1D>' to 'bool'; /usr/include/gtest/gtest.h:269:3: note: testing::AssertionResult::AssertionResult(const testing::AssertionResult&); AssertionResult(const AssertionResult& other);; ^; /usr/include/gtest/gtest.h:269:3: note: no known conversion for argument 1 from 'ROOT::RDF::RResultPtr<TH1D>' to 'const testing::AssertionResult&'; ````",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2263:188,message,message,188,https://root.cern,https://github.com/root-project/root/pull/2263,1,['message'],['message']
Integrability,Fix dependencies in periodic target,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2499:4,depend,dependencies,4,https://root.cern,https://github.com/root-project/root/pull/2499,1,['depend'],['dependencies']
Integrability,Fix dependency of Mathcore from Mathmore,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5418:4,depend,dependency,4,https://root.cern,https://github.com/root-project/root/pull/5418,1,['depend'],['dependency']
Integrability,Fix dependency of pymva on sofie,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8930:4,depend,dependency,4,https://root.cern,https://github.com/root-project/root/pull/8930,1,['depend'],['dependency']
Integrability,Fix dependency propagation of Vdt when builtin_vdt=ON,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3986:4,depend,dependency,4,https://root.cern,https://github.com/root-project/root/pull/3986,1,['depend'],['dependency']
Integrability,Fix error message in Brent root finder algorithm ( used by TF1::GetX),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5076:10,message,message,10,https://root.cern,https://github.com/root-project/root/pull/5076,1,['message'],['message']
Integrability,"Fix for a bug in rooteventselector when applying both a cut and the exclusion of branches, reported by:; https://sft.its.cern.ch/jira/browse/ROOT-9797. More information in the commit message.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2996:183,message,message,183,https://root.cern,https://github.com/root-project/root/pull/2996,1,['message'],['message']
Integrability,"Fix function, which was introduced with commit 822106a898267fca74214fc83d64d6110b2d66c5; Now, error messages of the device compiler are correctly prefixed with `cling-ptx: `",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7392:100,message,messages,100,https://root.cern,https://github.com/root-project/root/pull/7392,1,['message'],['messages']
Integrability,Fix header->dict dependencies.; Simplify core dictionary.; Simplify cmake code for dictionary generation (modulo modules - that's still to be simplified...),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3404:17,depend,dependencies,17,https://root.cern,https://github.com/root-project/root/pull/3404,1,['depend'],['dependencies']
Integrability,Fix logic of handling dependencies when NO_CXXMODULE is specified,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5798:22,depend,dependencies,22,https://root.cern,https://github.com/root-project/root/pull/5798,1,['depend'],['dependencies']
Integrability,Fix lookup of Visual Studio directories + improve error messages,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2678:56,message,messages,56,https://root.cern,https://github.com/root-project/root/pull/2678,1,['message'],['messages']
Integrability,"Fix nullptr dereference bugs in TClass and TList, wrap TClass.cxx to 120 columns to follow coding conventions, and avoid StreamerInfo lookup when it is cached.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/953:50,wrap,wrap,50,https://root.cern,https://github.com/root-project/root/pull/953,1,['wrap'],['wrap']
Integrability,Fix potential startup error messages on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5627:28,message,messages,28,https://root.cern,https://github.com/root-project/root/pull/5627,1,['message'],['messages']
Integrability,Fix printing of warning message when calling without a normalization set but fixCoefNormalization has been called,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8030:24,message,message,24,https://root.cern,https://github.com/root-project/root/pull/8030,1,['message'],['message']
Integrability,"Fix protobuf warnings as suggested in https://github.com/protocolbuffers/protobuf/issues/7140#issuecomment-599467033. The warnings should however be fixed in the latest protobuf version, 3.17",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8937:57,protocol,protocolbuffers,57,https://root.cern,https://github.com/root-project/root/pull/8937,1,['protocol'],['protocolbuffers']
Integrability,Fix some dependency issues in the tests of TMVA-sofie,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8799:9,depend,dependency,9,https://root.cern,https://github.com/root-project/root/pull/8799,1,['depend'],['dependency']
Integrability,Fix some warnings during doxygen documentation generation.; See the commit messages for details.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6029:75,message,messages,75,https://root.cern,https://github.com/root-project/root/pull/6029,1,['message'],['messages']
Integrability,"Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5860:164,depend,dependency,164,https://root.cern,https://github.com/root-project/root/pull/5860,1,['depend'],['dependency']
Integrability,Fix the GSL random number generator wrapper for external engines (e.g. random engine from ROOT),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4419:36,wrap,wrapper,36,https://root.cern,https://github.com/root-project/root/pull/4419,1,['wrap'],['wrapper']
Integrability,"Fix the GSL wrapper of the function generating random numbers according to a ND Gaussian. Do not create gsl_matrix and vector but use a view. Also since the GSL function requires the Cholesky factorized L matrix of the covariance, have an interface to provide the factorized matrix to gain time. This will fix the old JIRA issue [ROOT-767](https://sft.its.cern.ch/jira/browse/ROOT-767)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12615:12,wrap,wrapper,12,https://root.cern,https://github.com/root-project/root/pull/12615,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"Fix the `ntpl002_vector.C`, `ntpl005_introspection.C`, `ntpl006_friends.C`, and `ntpl007_mtFill.C` tutorials failing with the following errors:; ```; Processing ntpl002_vector.C...; IncrementalExecutor::executeFunction: symbol '_Smtx_unlock_shared' unresolved while linking [cling interface function]!; You are probably missing the definition of _Smtx_unlock_shared; Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_Smtx_lock_shared' unresolved while linking [cling interface function]!; You are probably missing the definition of _Smtx_lock_shared; Maybe you need to load the corresponding shared library?; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10262:281,interface,interface,281,https://root.cern,https://github.com/root-project/root/pull/10262,2,['interface'],['interface']
Integrability,Fix the compilation of Cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Support compilation when configuting with: ; cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CUDA_STANDARD=14. The fix is done by modifying the pre-processor macros defined in RConfigure.h when compiling Cuda.; A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used only when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda.; Something to be done in a future code re-factoring,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5598:351,depend,dependency,351,https://root.cern,https://github.com/root-project/root/pull/5598,1,['depend'],['dependency']
Integrability,Fix the dependency of Python and C++ tutorials using the Higgs_trained_model.h5 file,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15115:8,depend,dependency,8,https://root.cern,https://github.com/root-project/root/pull/15115,1,['depend'],['dependency']
Integrability,"Fix the following compilation errors when using the /std:c++17 flag on Windows:; ```; roofit\roofitcore\src\RooDataSet.cxx(2073,43): error C2664: 'RooDataSet::RooDataSet(std::string_view,std::string_view,RooDataSet *,const RooArgSet &,const RooFormulaVar *,const char *,size_t,size_t,Bool_t,const char *)': cannot convert argument 1 from 'TString' to 'std::string_view'; roofit\roofitcore\src\RooDataSet.cxx(2073,17): message : No user-defined-conversion operator available that can perform this conversion, or the operator cannot be called; roofit\roofitcore\src\RooDataSet.cxx(625,13): message : see declaration of 'RooDataSet::RooDataSet'; roofit\roofitcore\src\RooDataSet.cxx(2074,43): error C2664: 'RooDataSet::RooDataSet(std::string_view,std::string_view,RooDataSet *,const RooArgSet &,const RooFormulaVar *,const char *,size_t,size_t,Bool_t,const char *)': cannot convert argument 1 from 'TString' to 'std::string_view'; roofit\roofitcore\src\RooDataSet.cxx(2074,17): message : No user-defined-conversion operator available that can perform this conversion, or the operator cannot be called; roofit\roofitcore\src\RooDataSet.cxx(625,13): message : see declaration of 'RooDataSet::RooDataSet'; roofit\roofitcore\src\RooDataSet.cxx(2075,43): error C2664: 'RooDataSet::RooDataSet(std::string_view,std::string_view,RooDataSet *,const RooArgSet &,const RooFormulaVar *,const char *,size_t,size_t,Bool_t,const char *)': cannot convert argument 2 from 'TString' to 'std::string_view'; roofit\roofitcore\src\RooDataSet.cxx(2075,23): message : No user-defined-conversion operator available that can perform this conversion, or the operator cannot be called; roofit\roofitcore\src\RooDataSet.cxx(625,13): message : see declaration of 'RooDataSet::RooDataSet'; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8789:418,message,message,418,https://root.cern,https://github.com/root-project/root/pull/8789,6,['message'],['message']
Integrability,"Fix the following compilation errors with `-std:c++20` on Windows:; ```; interpreter\llvm\src\utils\TableGen\GlobalISel\GIMatchDag.cpp(51,11): error C2666: 'llvm::format': overloaded functions have similar conversions [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; interpreter\llvm\src\include\llvm/Support/Format.h(124,29): message : could be 'llvm::format_object<const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>> *> llvm::format<const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>>*>(const char *,const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>> *const &)' [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\format(3526,20): message : or 'std::wstring std::format<const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>>*>(const std::basic_format_string<wchar_t,const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>> *>,const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>> *&&)' [found using argument-dependent lookup] [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; interpreter\llvm\src\utils\TableGen\GlobalISel\GIMatchDag.cpp(51,11): message : 'std::wstring std::format<const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>>*>(const std::basic_format_string<wchar_t,const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>> *>,const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>> *&&)': cannot convert argument 1 from 'const char [5]' to 'const std::basic_format_string<wchar_t,const std::uni",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12523:395,message,message,395,https://root.cern,https://github.com/root-project/root/pull/12523,1,['message'],['message']
Integrability,"Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:; ```; In file included from input_line_3:38:; In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'; struct _CrtEnableIf<true, _Ty>; ^~~~~~~~~~~~~~~~~~~~~~~; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here; struct _CrtEnableIf<true, _Ty>; ^; In file included from input_line_3:38:; In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'; typedef struct __crt_locale_data_public; ^; C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include; site here; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include; site here; ^; In file included from input_line_3:38:; In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:; C:\Program Files (x86)\Window",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5627:24,message,messages,24,https://root.cern,https://github.com/root-project/root/pull/5627,2,['message'],['messages']
Integrability,"Fix the following error on Windows:. In file included from input_line_10:1:; C:\Users\sftnight\git\master\tutorials\roofit\rf204b_extendedLikelihood_rangedFit.C:71:13: error: call to constructor of 'RooRealVar' is ambiguous; RooRealVar alpha(""alpha"", ""alpha"", -0.04, -0.1, -0);; ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; C:/Users/sftnight/build/release\include\RooRealVar.h:41:3: note: candidate constructor; RooRealVar(const char *name, const char *title, Double_t minValue,; ^; C:/Users/sftnight/build/release\include\RooRealVar.h:43:3: note: candidate constructor; RooRealVar(const char *name, const char *title, Double_t value,; ^; CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; error code: 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6009:704,message,message,704,https://root.cern,https://github.com/root-project/root/pull/6009,1,['message'],['message']
Integrability,"Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:; ```; Processing box.cxx...; IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]!; You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen; Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]!; You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed; Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]!; You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue; Maybe you need to load the corresponding shared library?; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6157:405,interface,interface,405,https://root.cern,https://github.com/root-project/root/pull/6157,3,['interface'],['interface']
Integrability,Fix this kind of error message on Windows:; 155: input_line_18:2:19: error: invalid digit 'B' in octal constant; 155: *((std::string*)0B8DCA20) = cling::printValue((int*)0xeff520);*((std::string*)0B8DB9E0) = cling::printValue((int*)0xb8c1250);*((std::string*)0B8DB9F8) = cling::printValue((int*)0xb8c1254);*((std::string*)0B8DBA10) = cling::printValue((int*)0xb8c1258);*((std::string*)0B8DCA50) = cling::printValue((double*)0xeff530);,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2760:23,message,message,23,https://root.cern,https://github.com/root-project/root/pull/2760,1,['message'],['message']
Integrability,Fix to avoid redefinition of injected value of macro in test stressTMVA. Visible for C++ module build for Clang 8.0.0:. In file included from <module-includes>:26: ../build/include/TMVA/MethodDNN.h:56:9: warning: 'DNNCPU' macro redefined [-Wmacro-redefined]. #define DNNCPU. While building module 'TMVA' imported from /.../root/test/stressTMVA.cxx:70: In file included from <built-in>:379:; #define DNNCPU 1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2598:29,inject,injected,29,https://root.cern,https://github.com/root-project/root/pull/2598,1,['inject'],['injected']
Integrability,Fix to avoid redefinition of injected value of macro in test stressTMVA. Visible for C++ module build for Clang 8.0.0:; ```; In file included from <module-includes>:26: ../build/include/TMVA/MethodDNN.h:56:9: warning: 'DNNCPU' macro redefined [-Wmacro-redefined]. #define DNNCPU. While building module 'TMVA' imported from /.../root/test/stressTMVA.cxx:70: In file included from <built-in>:379:; #define DNNCPU 1; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2582:29,inject,injected,29,https://root.cern,https://github.com/root-project/root/pull/2582,1,['inject'],['injected']
Integrability,Fix warning message in THtml,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6689:12,message,message,12,https://root.cern,https://github.com/root-project/root/pull/6689,1,['message'],['message']
Integrability,"Fixed (in theory) the warnings, and moved to using newer style build system (will be integrated with #1680, since there's now some duplication). Uses `MINUIT2_MPI` and `MINUIT2_OMP` instead of environment variables.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1689#issuecomment-369942972:85,integrat,integrated,85,https://root.cern,https://github.com/root-project/root/pull/1689#issuecomment-369942972,1,['integrat'],['integrated']
Integrability,Fixed Issue reported on ; https://sft.its.cern.ch/jira/browse/ROOT-10755; https://root-forum.cern.ch/t/rootr-root-r-interface-problems-with-x11-graphics/39299,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5608:116,interface,interface-problems-with-,116,https://root.cern,https://github.com/root-project/root/pull/5608,1,['interface'],['interface-problems-with-']
Integrability,"Fixed a faulty loop condition in RooAddModel that lead to a crash in; RoofitUnBinnedBenchmark.; Further, fix the definition of basis functions in RooBMixDecay, which; lead to an info message about not using a parameter in a RooFormulaVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4790:183,message,message,183,https://root.cern,https://github.com/root-project/root/pull/4790,1,['message'],['message']
Integrability,Fixed a typo in the commit message ..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5695#issuecomment-633562880:27,message,message,27,https://root.cern,https://github.com/root-project/root/pull/5695#issuecomment-633562880,1,['message'],['message']
Integrability,Fixed dependencies between tests on roostats,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/365:6,depend,dependencies,6,https://root.cern,https://github.com/root-project/root/pull/365,1,['depend'],['dependencies']
Integrability,Fixed dependencies for TMVA tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/420:6,depend,dependencies,6,https://root.cern,https://github.com/root-project/root/pull/420,1,['depend'],['dependencies']
Integrability,"Fixed pretty-printing, remaining issues seem related to autoloading:. ```; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT6VecOps15SmallVectorBaseIjE8grow_podEPvmm' unresolved while linking [cling interface function]!; You are probably missing the definition of ROOT::VecOps::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long); Maybe you need to load the corresponding shared library?; ```. Not sure what's going on on Windows, will have to investigate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-815646679:204,interface,interface,204,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-815646679,1,['interface'],['interface']
Integrability,Fixed tutorial. Added explicit dependency of shared library on ROOT dictionary,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14619:31,depend,dependency,31,https://root.cern,https://github.com/root-project/root/pull/14619,1,['depend'],['dependency']
Integrability,Fixes #6743 ROOT crashes with no helpful error messages if a TApplication is not present and tree->StartViewer() is called. Now it prints the following warning:; ```; Warning in <TTreePlayer::StartViewer>: The tree viewer cannot run in batch mode; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6752:47,message,messages,47,https://root.cern,https://github.com/root-project/root/pull/6752,1,['message'],['messages']
Integrability,"Fixes #7828 partially, missing integration into Describe",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7832:31,integrat,integration,31,https://root.cern,https://github.com/root-project/root/pull/7832,1,['integrat'],['integration']
Integrability,"Fixes #7829 partially, missing integration into Describe",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7833:31,integrat,integration,31,https://root.cern,https://github.com/root-project/root/pull/7833,1,['integrat'],['integration']
Integrability,Fixes #8141. This PR requires a new clad release v0.9. The clad master is incompatible with ROOT atm and the release of 0.9 depends on #8371,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8766:124,depend,depends,124,https://root.cern,https://github.com/root-project/root/pull/8766,1,['depend'],['depends']
Integrability,Fixes a problem with using genreflex to create a dictionary for a class that inherits from TObject. The problem was triggered by the thread-safety changes.; Depends on previous pull request (#12).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13:157,Depend,Depends,157,https://root.cern,https://github.com/root-project/root/pull/13,1,['Depend'],['Depends']
Integrability,"Fixes for bug ROOT-1036 (FitResult::Scan); When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer !; This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. ; One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals.; Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4557:758,integrat,integrator,758,https://root.cern,https://github.com/root-project/root/pull/4557,1,['integrat'],['integrator']
Integrability,Fixes https://github.com/root-project/root/issues/7740. # This Pull request:. ## Changes or fixes:; Add tutorial about multi dimensional integrator. ## Checklist:. - [x ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes # ; https://github.com/root-project/root/issues/7740,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14730:137,integrat,integrator,137,https://root.cern,https://github.com/root-project/root/pull/14730,1,['integrat'],['integrator']
Integrability,Fixes the dependence of the correct handling of the signal and background classes; on the order in which in which data sets are filled. This was described here:; https://root-forum.cern.ch/t/tmva-signal-background-target-responses-inverted,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/779:10,depend,dependence,10,https://root.cern,https://github.com/root-project/root/pull/779,1,['depend'],['dependence']
Integrability,"Fixes the following warning with CMake 3.24:; ```; CMake Warning (dev) at /usr/share/cmake/Modules/ExternalProject.cmake:3071 (message):; The DOWNLOAD_EXTRACT_TIMESTAMP option was not given and policy CMP0135 is; not set. The policy's OLD behavior will be used. When using a URL; download, the timestamps of extracted files should preferably be that of; the time of extraction, otherwise code that depends on the extracted; contents might not be rebuilt if the URL changes. The OLD behavior; preserves the timestamps from the archive instead, but this is usually not; what you want. Update your project to the NEW behavior or specify the; DOWNLOAD_EXTRACT_TIMESTAMP option with a value of true to avoid this; robustness issue.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11231:127,message,message,127,https://root.cern,https://github.com/root-project/root/pull/11231,4,"['depend', 'message']","['depends', 'message']"
Integrability,"Fixing this related issue upstream : https://github.com/wlav/CPyCppyy/issues/35 will unblock this PR. Current test failures on this PR are from the string_view converter failing in calls to the RDataFrame constructor:. ```cpp; RDataFrame(std::string_view treename, const std::vector<std::string> &filenames, ; const ColumnNames_t &defaultColumns = {});; ```. Minimal reproducer:; ```py; cppyy.cppdef('''void processMessage(std::string_view A, std::vector<int> messages) {. for (const auto& msg : messages) {; std::cout << ""Message2: "" << msg << std::endl;; }} '''). cppyy.gbl.processMessage(""a"", (x for x in [1, 2, 3])); ```. This fails when:. - A generator expression is used ( `cppyy.gbl.processMessage(""a"", [1, 2, 3])` works); - We add a `string_view` in the beginning of the function signature:. The second patch that we delete in this PR adds a commit which makes this CallContext `noimp` call in the string_view converter:. ```diff; bool CPyCppyy::STLStringViewConverter::SetArg(; PyObject* pyobject, Parameter& para, CallContext* ctxt); {. // normal instance convertion (eg. string_view object passed); if (!PyInt_Check(pyobject) && !PyLong_Check(pyobject)) {; + CallContextRAII<CallContext::kNoImplicit> noimp(ctxt);; if (InstanceConverter::SetArg(pyobject, para, ctxt)) {. ```. if I remove this line and allow it to be implicit then this issue no longer happens.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16212#issuecomment-2311776416:460,message,messages,460,https://root.cern,https://github.com/root-project/root/pull/16212#issuecomment-2311776416,2,['message'],['messages']
Integrability,"Follow-up on https://github.com/root-project/root/pull/7198 as promised in https://github.com/root-project/root/pull/7198#issuecomment-782401337. A new testRooParamHistFunc was introduced. The analytic integration of a; RooParamHistFunc is tested both for trivial and non-trivial parameters,; since the integration over subranges was problematic (as reported in; issue #7182).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7322:202,integrat,integration,202,https://root.cern,https://github.com/root-project/root/pull/7322,2,['integrat'],['integration']
Integrability,"Following #14974, we see no change in the error message today:; ```; lxplus966:~$ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc11-opt/setup.sh ; lxplus966:~$ python -c ""import ROOT""; <<< cling interactive line includer >>>: fatal error: module file '/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT-HEAD-build/lib/Vc.pcm' not found: module file not found; <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Fri/ROOT/HEAD/x86_64-el9-gcc11-opt/lib/MathCore.pcm'; Failed to load module MathCore; [snip]; ```. (Some of the builds that you might see in our cdash could suffer from picking up Vc.pcm in the build location but from builds for other platforms...; which results in an error message like; ```; <<< cling interactive line includer >>>: fatal error: module file '/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT-HEAD-build/lib/Vc.pcm' is out of date and needs to be rebuilt: signature mismatch; ```; )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14964#issuecomment-2014753873:48,message,message,48,https://root.cern,https://github.com/root-project/root/issues/14964#issuecomment-2014753873,2,['message'],['message']
Integrability,"Following a ""suggestion"" by @daritter ;-). Rationale: these days, not having `DISPLAY` set is likely intentional (unlike in say good old AIX days). So printing the message ""just because"" is unlikely to be helpful. If OTOH the GUI *is* requested, printing a helpful ""you probably want `ssh -Y`"" is nice - so let's do that (in non-batch), but in `TUnixSystem::SetDisplay()`, which is invoked by the graphics initialization hook. This gets rid of all the utmp code in `rootx.cxx`, near-duplicating the code of `TUnixSystem.cxx`. Yay.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3530:164,message,message,164,https://root.cern,https://github.com/root-project/root/pull/3530,1,['message'],['message']
Integrability,"Following the instructions at https://cliutils.gitlab.io/modern-cmake/chapters/packages/ROOT.html I wrote (with the rest of the setup as in the issue description):. ```cmake; add_executable(readwrite_twoints twoints.cpp); target_link_libraries(readwrite_twoints ROOT::RIO); ROOT_GENERATE_DICTIONARY(twoints_dict twoints.hpp MODULE readwrite_twoints LINKDEF LinkDef.h); ```. This gets me:. ```; CMake Error at /home/blue/ROOT/master/_build/RootMacros.cmake:442 (message):; Cannot find header twoints.hpp to generate dictionary twoints_dict for.; Did you forget to set the INCLUDE_DIRECTORIES property for the current; directory?; ```. So, following Guilherme's suggestions above, I added a `target_include_directories` before calling `ROOT_GENERATE_DICTIONARY`:. ```cmake; add_executable(readwrite_twoints readwrite_twoints.cpp twoints.cpp); target_link_libraries(readwrite_twoints ROOT::RIO); target_include_directories(readwrite_twoints PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}); ROOT_GENERATE_DICTIONARY(twoints_dict twoints.hpp MODULE readwrite_twoints LINKDEF LinkDef.h); ```. which ~~instead gives me~~ works (thanks @amadio ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8308#issuecomment-856717175:461,message,message,461,https://root.cern,https://github.com/root-project/root/issues/8308#issuecomment-856717175,1,['message'],['message']
Integrability,"For ACLiC, we have to generate "".out"" files which contains dependency; library name separated by "" "". This was done by creating; std::vector<(identifier from rootmap file), (library name)> and comparing this with decls from the input file.; However with modules, we want not to use rootmap files. Module's name; already contains information about library (modulename should be; consistent to the library) so we need not to store all information in; the vector anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2396:59,depend,dependency,59,https://root.cern,https://github.com/root-project/root/pull/2396,1,['depend'],['dependency']
Integrability,"For Asimage libraries you have now proper support of external PNG library. @jgrosseo did you check for ldd for `root` executable?. libpng from ldd output of root executable is coming as a dependency from X11 libraries: https://github.com/root-project/root/blob/master/rootx/CMakeLists.txt#L24-L26. We are linking `root` (not root.exe) with next X11 libraries: /usr/lib/libSM.so /usr/lib/libICE.so /usr/lib/libX11.so /usr/lib/libXext.so /usr/lib/libXft.so /usr/lib/libXpm.so; ```; oksana@oksana-dellxps: ldd /usr/lib/libXft.so ; linux-vdso.so.1 (0x00007ffecfcf6000); libfontconfig.so.1 => /usr/lib/libfontconfig.so.1 (0x00007f9bffd47000); libfreetype.so.6 => /usr/lib/libfreetype.so.6 (0x00007f9bffc79000); libXrender.so.1 => /usr/lib/libXrender.so.1 (0x00007f9bffc6c000); libX11.so.6 => /usr/lib/libX11.so.6 (0x00007f9bffb2c000); libc.so.6 => /usr/lib/libc.so.6 (0x00007f9bff966000); libexpat.so.1 => /usr/lib/libexpat.so.1 (0x00007f9bff936000); libuuid.so.1 => /usr/lib/libuuid.so.1 (0x00007f9bff92b000); libpthread.so.0 => /usr/lib/libpthread.so.0 (0x00007f9bff909000); libbz2.so.1.0 => /usr/lib/libbz2.so.1.0 (0x00007f9bff8f6000); libpng16.so.16 => /usr/lib/libpng16.so.16 (0x00007f9bff8be000); libz.so.1 => /usr/lib/libz.so.1 (0x00007f9bff8a4000); libharfbuzz.so.0 => /usr/lib/libharfbuzz.so.0 (0x00007f9bff7a0000); libxcb.so.1 => /usr/lib/libxcb.so.1 (0x00007f9bff774000); libdl.so.2 => /usr/lib/libdl.so.2 (0x00007f9bff76f000); /usr/lib64/ld-linux-x86-64.so.2 (0x00007f9bffdf1000); libm.so.6 => /usr/lib/libm.so.6 (0x00007f9bff629000); libglib-2.0.so.0 => /usr/lib/libglib-2.0.so.0 (0x00007f9bff501000); libgraphite2.so.3 => /usr/lib/libgraphite2.so.3 (0x00007f9bff4dc000); libXau.so.6 => /usr/lib/libXau.so.6 (0x00007f9bff4d7000); libXdmcp.so.6 => /usr/lib/libXdmcp.so.6 (0x00007f9bff4cd000); libpcre.so.1 => /usr/lib/libpcre.so.1 (0x00007f9bff45b000). ``` ; Here I am not sure how I can help you, only solution for you is to disable x11.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5717#issuecomment-635184642:188,depend,dependency,188,https://root.cern,https://github.com/root-project/root/pull/5717#issuecomment-635184642,1,['depend'],['dependency']
Integrability,"For RNTuple's current purposes, what Jakob proposes would suffice. It is also consistent with the way `Float16_t` is represented. The purpose of this issue was mostly to gauge whether this is indeed a reasonable addition since this change `RtypesCore` concerns the entire project and not just RNTuple, or if there are any strong reasons not to do it this way. In any case, I think making the in-memory representation platform-dependent will lead to confusion and potential errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13917#issuecomment-1777400915:426,depend,dependent,426,https://root.cern,https://github.com/root-project/root/issues/13917#issuecomment-1777400915,1,['depend'],['dependent']
Integrability,"For `DO_WHATEVER_NLOHMANM_3.11.0_NEEDS` just display a message:; ```cmake; try_compile(FWD_DECLARE MYBINDIR forward_declare.cpp); try_compile(FWD_HEADER MYBINDIR forward_header.cpp); if(FWD_DECLARE); message(""Using forward declaration for nlohmann_json""); elseif(FWD_HEADER); message(""Using forward header from nlohmann_json""); else(); set(DO_WHATEVER_NLOHMANM_3.11.0_NEEDS ON); message(FATAL_ERROR ""You are probably running nlohmann_json version 3.11.0 which is deemed unusable by its creator (https://github.com/nlohmann/json/releases/tag/v3.11.0). Please install a working version of nlohmann_json. If you think you're seeing this message in error and you have a different version of nlohmann_json installed, please report it as a bug.""); endif(); ```; but the advantage of this way is that it's version independent and will work when it works, even if the default behaviour changes in the future again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11130#issuecomment-1220602003:55,message,message,55,https://root.cern,https://github.com/root-project/root/issues/11130#issuecomment-1220602003,5,['message'],['message']
Integrability,For `TSystem's Exit and Abort` I would add a throw after the `AbstractMethod` (At first I thought about calling `Fatal` but those 2 routines could be involved in the implementation of `Fatal` causing more trouble).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11443#issuecomment-1267207616:132,rout,routines,132,https://root.cern,https://github.com/root-project/root/pull/11443#issuecomment-1267207616,1,['rout'],['routines']
Integrability,"For a long time, users had to increase their maximum stack size in order; to read RooFit workspaces. Otherwise, the process would simply end; without any message.; The problem is an 8kB stack buffer for the I/O of stl sets, which is; always declared but rarely used. Here, the buffer is replaced with a; heap buffer. This is an analysis of stack frames at -O2 in the moment of a crash:; ```; tot. size call count frame size; 5468960 665 8224 libRIO.so`TGenCollectionStreamer::ReadObjects(this nElements b; 566576 2083 272 libRIO.so`int TStreamerInfo::ReadBuffer<char**>(TBuffer&, char**; 307664 2747 112 libRIO.so`TBufferFile::ReadClassBuffer(this cl pointer; 133248 2082 64 libRIO.so`TStreamerInfoActions::GenericReadAction(buf addr config; 131856 2747 48 libRIO.so`TBufferFile::ApplySequence(this sequence obj; 74480 665 112 libRIO.so`TBufferFile::ReadObjectAny(this clCast at; 68064 1418 48 libCore.so`TStreamerBase::ReadBuffer(this b pointer; 42560 665 64 libRIO.so`TGenCollectionStreamer::ReadBufferGeneric(this b obj; 42560 665 64 libRIO.so`TBufferFile::ReadFastArray(this start cl; 31920 665 48 libRIO.so`int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*,; 21280 665 32 libRooFitCore.so`RooAbsArg::Streamer(this R__b at; 14592 152 96 libRooFitCore.so`RooRealVar::Streamer(this R__b at; 1056 22 48 libRooFitCore.so`RooHistFunc::Streamer(this R__b at; 720 15 48 libHistFactory.so`PiecewiseInterpolation::Streamer(this R__b at; ```. and after this fix:; ```; 54400	200	272	 200 libRIO.so`int TStreamerInfo::ReadBuffer<char**>(this b 	272; 29792	266	112	 266 libRIO.so`TBufferFile::ReadClassBuffer(this cl pointer 	112; 12864	201	64	 201 libRIO.so`TStreamerInfoActions::GenericReadAction(buf addr config 	64; 12768	266	48	 266 libRIO.so`TBufferFile::ApplySequence(this sequence obj 	48; 8320	65	128	 65 libRIO.so`TGenCollectionStreamer::ReadObjects(this nElements b 	128; 7280	65	112	 65 libRIO.so`TBufferFile::ReadObjectAny(this clCast at 	112; 6",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9470:154,message,message,154,https://root.cern,https://github.com/root-project/root/pull/9470,1,['message'],['message']
Integrability,"For better modularity in the future, the major end-user ROOT components; like RDataFrame, RooFit, and TMVA should not depend on each other. There was a dependency of RooFit on RDataFrame because of the; RooAbsDataHelper, but it is actually easy to avoid this with forward; declarations. This should have no impact on the user, because if they use RDF, they; probably include it already if they're not using the interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16606:118,depend,depend,118,https://root.cern,https://github.com/root-project/root/pull/16606,2,['depend'],"['depend', 'dependency']"
Integrability,For math operations in ROOT we prefer not to emit messages and leave to the user to handle the returned NaN,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14506#issuecomment-2448471203:50,message,messages,50,https://root.cern,https://github.com/root-project/root/pull/14506#issuecomment-2448471203,1,['message'],['messages']
Integrability,"For me, the title does not change but it does not crash. No error messages.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14032#issuecomment-1801791917:66,message,messages,66,https://root.cern,https://github.com/root-project/root/issues/14032#issuecomment-1801791917,1,['message'],['messages']
Integrability,"For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like; ```; Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed).; ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing; ```; root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);; root [1] gInterpreter->Calc("""", &errorCode);; root [2] errorCode; (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2; ```; And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15578:81,message,message,81,https://root.cern,https://github.com/root-project/root/pull/15578,1,['message'],['message']
Integrability,"For our users, it's important to fix certain parameters in the likelihood easily with any overhead. So far, this didn't work when using gradients from AD, because the gradients were only produced for the parameters that are floating at the time where the likelihood is created. However, it has no additional runtime overhead in backwards AD mode to simply generate the gradient for **all** parameters, and then filter out the right elements in the the RooMinimizer-related code. This is what is implemented in the second commit of this PR. Some changes in the RooAbsMinimizerFcn were necessary to do this filtering: so far it didn't store any information on all the parameters in order. It only stored two separate lists for floating and constant parameters. The first commit in this PR adds the necessary data members (`_allParams` and `_allParamsInit`) to the RooAbsMinimizerFcn for the filtering of parameters. Furthermore, the previous datamembers that stored the parameters separately are removed to avoid duplication and possible desync of information. On this occasion, the parameter management was completely rewritten to be more concise and robust. This will also help later when we integrate the discrete profiling from CMS combine, where changing the state and filtering of minimization parameters is also relevant. It was validated with the ATLAS and CMS likelihoods from ICHEP 2024 that this PR results in no performance regression, even though we are now generating the gradient for more parameters (roughly up to two times more, because for every floating nuisance parameter there is usually one constant global observable that constrains it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16750:1192,integrat,integrate,1192,https://root.cern,https://github.com/root-project/root/pull/16750,1,['integrat'],['integrate']
Integrability,"For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected; * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr); * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5603:143,rout,routines,143,https://root.cern,https://github.com/root-project/root/pull/5603,1,['rout'],['routines']
Integrability,"For some algorithms like numeric integration, we want to enable PDF evaluation on the GPU with the RooFitDriver also for the case where the input arrays are already on the device and don't come from a `RooAbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++; namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model; RooRealVar x{""x"", ""x"", 0, -10, 10};; RooRealVar mu{""mu"", ""mu"", 0, 0, 10};; RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;; x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values; std::vector<double> xValsHost;; for (std::size_t i = 0; i < numBins; ++i) {; x.setBin(i);; xValsHost.push_back(x.getVal());; }. // Copy observable values to the array; CudaInterface::DeviceArray<double> xValsDevice{numBins};; CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver; std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array; ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};; driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate; std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results; std::vector<double> hostOut(deviceOut.size());; CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);; for (int i = 0; i < numBins; ++i) {; std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;; }; ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. The evaluation of PDFs with the RooFitDriver also on the GPU i",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13389:33,integrat,integration,33,https://root.cern,https://github.com/root-project/root/pull/13389,1,['integrat'],['integration']
Integrability,"For some reason root-config calls on macOS 10.13.2 are extremely slow (not sure if this is related to the meltdown / spectre mitigations). ```bash; [O2/latest] ~/work/active/sw/BUILD/ROOT-latest/ROOT %> time root-config --version; 6.13/01; root-config --version 0.24s user 1.06s system 131% cpu 0.989 total; ```. which than means that whatever dependent project using `FindROOT.cmake` is slowed down quite a lot when trying to do incremental builds. This is because of the multiple `root-config` invocations in such a macro, which are also not cached so they get done on any `make` invocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1569:344,depend,dependent,344,https://root.cern,https://github.com/root-project/root/pull/1569,1,['depend'],['dependent']
Integrability,"For the `IMultiGenFunction` crossinheritance I see that we inject the`NDim()` method into the dispatched code:. ``` unsigned int NDim() const {; PyObject* iself = (PyObject*)_internal_self;; if (!iself || iself == Py_None) {; PyErr_Warn(PyExc_RuntimeWarning, (char*)""Call attempted on deleted python-side proxy"");; return unsigned int{};; }; ```; using this code block:. https://github.com/root-project/root/blob/0aa2b6b8760b78dff2cffd873f955735fa1b0ef3/bindings/pyroot/cppyy/CPyCppyy/src/Dispatcher.cxx#L41-L51. Cling fails to compile the initialization in `return unsigned int{};` since it is not valid C++. We should also consider `unsigned int` and other multi keyword types that require a function style cast for value initialization (like `return (unsigned int){}`. If I am not wrong, this should just work for all primitives(as zero initialization) and user-defined types(as default initialization). I was able to get this example from the manual to work with this fix. Based on the issue, I was of the opinion we should land this upstream but I see that this is a high priority issue and @wlav is on vacation. . What do you think @guitargeek @dpiparo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15315#issuecomment-2275171210:59,inject,inject,59,https://root.cern,https://github.com/root-project/root/issues/15315#issuecomment-2275171210,1,['inject'],['inject']
Integrability,"For the minimization, the RooMinimizer sets the error logging mode; temporarily to `CollectErrors`, which collects all error messages in; strings. This results in a HUGE overhead, which is completely; unnecessary if evaluation error printing is disabled. In that case, the; error evaluation mode should be set to counting only, which is what this; commit implements. This speeds up fits with frequent evaluation errors a lot, for example; the `testNaNPacker` tests are sped up by 25x.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12328:125,message,messages,125,https://root.cern,https://github.com/root-project/root/pull/12328,1,['message'],['messages']
Integrability,"For the moment changing of global debug level is the only solution to suppress warning. One changing RLogger debug level, which is not used for core ROOT components like I/O.; Therefore all other important warnings and error messages will be still there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14300#issuecomment-1889023103:225,message,messages,225,https://root.cern,https://github.com/root-project/root/issues/14300#issuecomment-1889023103,1,['message'],['messages']
Integrability,"For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a; fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became; clear gradually how important this step is, as many changes need to be; done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are; separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new; object that exposes the full intenal computation graph that is cached by; the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute; graph, and there was also a third pass to figure out dependencies and; normalization sets in the graph, and some more recursive passes the; attach new servers. This all became very compilcated and hard to debug, as the separate; passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general; way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the; newly-proposed function; `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set; is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing; the RooProdPdfs can be implemented in the overload for this function of; the specific class. There is even an overload for the RooSimultaneous; now, which contains all the logic of making the RooSimultaenous ready; for the NLL creation. There are still some rough edges in the new interface, but it is already; a big step forward that will make debugging much easier because it's now; much less compilcated to understand how the computation graph is set up; by the BatchMode. Also, this m",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12079:795,depend,dependencies,795,https://root.cern,https://github.com/root-project/root/pull/12079,1,['depend'],['dependencies']
Integrability,"For the pyROOT interface, we wanted to support that the user can pass a; Python set whenever the interface expects a RooArgSet. This is achieved by pythonizing the `__init__` function of the RooArgSet Python mirror class. This PR also includes a complete migration of all RooFit tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8751:15,interface,interface,15,https://root.cern,https://github.com/root-project/root/pull/8751,2,['interface'],['interface']
Integrability,"For the record, I am able to get things to work by doing:. ```; sed -i.removeme '/deps = gcc/d' build.ninja; ```. on the generated `build.ninja`. I think the issue is to be traced back to some spurious dependency added in `ROOT/interpreter/llvm-project/llvm/cmake/modules/TableGen.cmake`, but I am not quite sure how that happens.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15064#issuecomment-2022344568:202,depend,dependency,202,https://root.cern,https://github.com/root-project/root/issues/15064#issuecomment-2022344568,1,['depend'],['dependency']
Integrability,"For the record, one such discussion yield the following:. a) Update the merging operation (if not already done) to make sure that the output file is kept open during the length of the process (this is to avoid re-reading the output TTree from the output file) and the TTree is written to the output file only once at the end. b) CMSSW can detect when a 'merge' operation was requested by checking the return value of Fill and the number of entry: if Fill succeed and the TTree has zero entries afterwards then a merge operation was requested (the TTree was reset). c) We need to call a callback (std::function) provided at CMS when a merge operation is completed (i.e all its baskets are on the output file and the output TTree has been updated accordingly). d) When CMSSW noticed that a 'merge' operation has been requested, it will shutdown the CMSSW output module (make it unavailable to other modules). This guarantees that if CMSSW has N output modules, there will be at most N queued merge operations and while the merge are going on only 1 thread is used for it (and the other N-1 can be used for other CMSSW work). e) We need to implement a queuing of the merge operations tasks without relying on the ROOT global write lock. See for example the way something similar is done in CSMSW: https://github.com/cms-sw/cmssw/blob/master/FWCore/Concurrency/interface/SerialTaskQueue.h. f) CMSSW need to call a 'finalization' API to 'close-out' the output file (without this call the output file is useless).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1866#issuecomment-387769514:1357,interface,interface,1357,https://root.cern,https://github.com/root-project/root/pull/1866#issuecomment-387769514,1,['interface'],['interface']
Integrability,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:; ```; <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature; <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'; Error: Module 'MathCore.pcm' failed to load.; ```; where as `Rint.pcm` is actually the newer of the 2 files:; ```; (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm; -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm; -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7704#issuecomment-1311128901:209,message,message,209,https://root.cern,https://github.com/root-project/root/issues/7704#issuecomment-1311128901,1,['message'],['message']
Integrability,"For the record:. This is /not/ ADL. ADL pulls in namespaces not considered during regular look; Vc provides `sqrt` in `std` which means we can find it without ADL. Instead, this patch leaves the function names in the calls as dependent names, because they are not qualified. That allows the lookup to be delayed until template instantiation, at which point the Vc overloads are visible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/445#issuecomment-287710672:226,depend,dependent,226,https://root.cern,https://github.com/root-project/root/pull/445#issuecomment-287710672,1,['depend'],['dependent']
Integrability,"For what concerns the integration in TDF, the cases to cover are:; 1) tdf.Histo1D(""col""); 2) tdf.Histo1D(model, ""col""); (and weighted versions). For 1), we can transparently enable bit 20 and ""pow2"" binning. Better than the current hard limit from 0 to 64.; For 2) we can enable a new model constructor, which takes name and title only. Bin suggestion is fixed to 64. For the case in which the model is created from an histo, bit 20 can be easily propagated from the histo to the model and back to the new histo based on the model.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1305#issuecomment-344598869:22,integrat,integration,22,https://root.cern,https://github.com/root-project/root/pull/1305#issuecomment-344598869,1,['integrat'],['integration']
Integrability,Force-pushed again just to update the commit message.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10205#issuecomment-1076491031:45,message,message,45,https://root.cern,https://github.com/root-project/root/pull/10205#issuecomment-1076491031,1,['message'],['message']
Integrability,"Forgot to say, this should be only 2 commits: one the dependencies the other the header/linkdef adjustments to be able to semantically track such improvements...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5231#issuecomment-604933117:54,depend,dependencies,54,https://root.cern,https://github.com/root-project/root/pull/5231#issuecomment-604933117,1,['depend'],['dependencies']
Integrability,"Found it! As it turns out, it is a ""simple"" 2 line fix:; https://github.com/stephanlachnit/root/commit/65ae229c6ba458c610f0a41d32b798a132f385e4. We need to set `LLVM_LINK_LLVM_DYLIB=OFF` for clang, this will prefer static libs. The only disadvantage is that links against *all* LLVM libraries, which means additionally dependencies might need to be installed. In particular LLVM 16 is broken due to https://github.com/llvm/llvm-project/issues/62300.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156#issuecomment-1666954709:319,depend,dependencies,319,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1666954709,1,['depend'],['dependencies']
Integrability,"From @henryiii :. > ROOT can't pass homebrew's audit any more because it is now injecting `-flat_namespace`. Flat namespaces have been deprecated since the move to Intel. I believe this was done due to `-undefined dynamic_lookup` producing a warning - Apple plans to add something to replace this in the future, but it's not the old `-flat_namespace`. See [Homebrew/homebrew-core#114543 (comment)](https://github.com/Homebrew/homebrew-core/pull/114543#issuecomment-1330719444); > Flat namespace makes major changes to the layout, is more deprecated than dynamic_lookup, and isn't supposed to even work in conda-forge. See also https://github.com/pybind/pybind11/pull/4301 .; > `-undefined dynamic_lookup` does silence the linker on missing symbols, that's what it's for. The problem is that the method it uses is deprecated, producing a warning (and already broken in iOS) `-flat_namespace` doesn't just silence the linker, it changes the binary layout for every symbol. You could always just silence the warning `-Wl,-w` or `-Wl,-no_fixup_chains`; this will eventually break, but is less deprecated than `-flat_namespace`.; > Apple's official statement is basically ""live with the warning for now, we'll find a way to not break all CPython extensions eventually"" from what I gather.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11937:80,inject,injecting,80,https://root.cern,https://github.com/root-project/root/issues/11937,1,['inject'],['injecting']
Integrability,"From in-person discussion with Philippe:; - Change interface at the `TIOFeatures`-level from `TBasket::EIOBits` to `ROOT::EIOFeatures`, which then get translated to the on-disk IO bits.; - Add the corresponding `ROOT::Experimental::EIOFeatures` and `ROOT::Experimental::EIOUnsupportedFeatures` enums.; - The above also allows us to move `TIOFeatures` into the `ROOT` namespace. Instead of storing `UChar_t` directly in the `TTree` / `TBranch` / `TBasket` classes, we can store `TIOFeature`. We would only use `TBasket::EIOBits` in the serialization code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1003#issuecomment-332621552:51,interface,interface,51,https://root.cern,https://github.com/root-project/root/pull/1003#issuecomment-332621552,1,['interface'],['interface']
Integrability,"From the `alma8` build:; ```; Assembler messages:; Fatal error: can't create CMakeFiles/Geom.dir/src/TGeoOpticalSurface.cxx.o: No space left on device; {standard input}: Assembler messages:; {standard input}: Fatal error: can't write 1276 bytes to section .debug_loc of CMakeFiles/Graf.dir/src/TGaxis.cxx.o: 'No space left on device'; {standard input}: Fatal error: can't close CMakeFiles/Graf.dir/src/TGaxis.cxx.o: No space left on device; gmake[2]: *** [graf2d/graf/CMakeFiles/Graf.dir/build.make:244: graf2d/graf/CMakeFiles/Graf.dir/src/TGaxis.cxx.o] Error 1; gmake[1]: *** [CMakeFiles/Makefile2:51872: graf2d/graf/CMakeFiles/Graf.dir/all] Error 2; gmake[1]: *** Waiting for unfinished jobs....; ```; Interesting that this is still an issue after https://github.com/root-project/root/commit/800f97c0c64d7e3968d00d694e4f40dd8cd0ab3c. Not good :slightly_frowning_face: That has nothing to do with this PR, it's just an important observation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15300#issuecomment-2068151207:40,message,messages,40,https://root.cern,https://github.com/root-project/root/pull/15300#issuecomment-2068151207,2,['message'],['messages']
Integrability,"From the cmake log in ROOT it shows:; ```; -- Clang version: 16.0.6; [...]; Compiler: AppleClang15; ```; Not sure which one to trust. Other libraries I am using are showing Clang15. . I bypassed the cmake issue using the `builtin_glew` suggestion. ; [cmake.log](https://github.com/root-project/root/files/14173548/cmake.log). Looking more closely I can see many error message as following. I am not sure about the origin of these lines.; ```; ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths!; Invoking:; LC_ALL=C clang -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'; ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths!; ```. Except this, there is no issue anymore. The most recent master doesn't have this white blank issue. ; Thank you for pointing the solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14483#issuecomment-1928595346:368,message,message,368,https://root.cern,https://github.com/root-project/root/issues/14483#issuecomment-1928595346,1,['message'],['message']
Integrability,From the test results I learned that we already have a mechanism in ROOT to mark Python non-optional test dependencies:; https://github.com/root-project/root/commit/2917c6e7153c426507227d9fdba1937fca7535aa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15306#issuecomment-2069022427:106,depend,dependencies,106,https://root.cern,https://github.com/root-project/root/pull/15306#issuecomment-2069022427,1,['depend'],['dependencies']
Integrability,"From this simple reproducer:. ```cpp; #include <TCanvas.h>; #include <TFile.h>; #include <TTree.h>. #include <ROOT/RDataFrame.hxx>; #include <iostream>; #include <string>; #include <vector>. void generateData(const char *filename, int n, double value); {; TFile f{filename, ""RECREATE"", ""file for testing""};. double var1;. TTree tree{""AnalysisTree"", ""AnalysisTree""};; tree.Branch(""column1"", &var1, ""column1/D"");. for (unsigned int i = 0; i < n; i++) {; var1 = value;; tree.Fill();; }. tree.Write();; f.Write();; f.Close();; }. int main(); {; std::vector<std::string> fileNames{""test1.root"", ""test2.root""};; std::vector<double> weights{2, 0.5};. // Create two files with trees for testing; // 10 entries of 0.5; generateData(""test1.root"", 10, 0.5);; // 10 entries of 2; generateData(""test2.root"", 10, 2);. // Create Dataframe from files; ROOT::RDataFrame df(""AnalysisTree"", fileNames);. // Define weights depending on input file; auto df2 =; df.DefinePerSample(""weightbysample"", [&fileNames, &weights](unsigned int, const ROOT::RDF::RSampleInfo &id) {; for (unsigned int i = 0; i < fileNames.size(); i++); if (id.Contains(fileNames[i])); return weights[i];; return -1.;; });. auto s0 = df2.Sum<double>(""weightbysample"");; auto d0 = df2.Display({""weightbysample""}, 20);; std::cout << ""sum of weights: "" << *s0 << ""\n"";; d0->Print();. auto s1 = df2.Sum<double>(""weightbysample"");; auto d1 = df2.Display({""weightbysample""}, 20);; std::cout << ""sum of weights: "" << *s1 << ""\n"";; d1->Print();. }; ```. The `DefinePerSample` operation defines a column of 20 entries, 10 should have value `2`, the following 10 should have value `0.5`. The first set of `Sum` and `Display` operations show the correct behaviour, then the second set of operations reports a wrong result. All the 20 entries of the column are `0.5`:. ```; sum of weights: 25; +-----+----------------+; | Row | weightbysample | ; +-----+----------------+; | 0 | 2.0000000 | ; +-----+----------------+; | 1 | 2.0000000 | ; +-----+----------------+",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12043:903,depend,depending,903,https://root.cern,https://github.com/root-project/root/issues/12043,1,['depend'],['depending']
Integrability,"Fully exclude source directory from include paths - for dictionary generation and for objects compilation. Significantly reduce list of dirs in CXX flags.; Makes dependency files very clear - `${CMAKE_BINARY_DIR}/include` used in 99%, rest are special includes from `res/` subfolders.; Tested with and without cxx modules",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5170:162,depend,dependency,162,https://root.cern,https://github.com/root-project/root/pull/5170,1,['depend'],['dependency']
Integrability,"Fwd decls from rootmap files were injected to ROOT at the startup time.; However with modules we don't need any foward decls as we're preloading; all modules. Our future plan is to remove rootmap files as a whole, but we still need; to support more features (see 2380). So for now we can remove what we; are not using. *edit This patch also contains adding fHasCxxModule as a private member. This improves startup memory by 10 mbytes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2592:34,inject,injected,34,https://root.cern,https://github.com/root-project/root/pull/2592,1,['inject'],['injected']
Integrability,"GNU ld has a way to control the symbol versions by 'fixing' the library; appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which; are supposed to be resolved either in libc or glibc which are system; libraries. Our symbol dependency chain builder does not look into system; libraries for performance (and legacy reasons). Thus the undefined symbols; from the C/C++ runtime cause us to scan every time all non-system libraries; when we know what would be the outcome. More information can be found in the binutils documentation:; https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4112:266,depend,dependency,266,https://root.cern,https://github.com/root-project/root/pull/4112,2,['depend'],['dependency']
Integrability,GenerateDict dependency fixes; split G__Core,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3371:13,depend,dependency,13,https://root.cern,https://github.com/root-project/root/pull/3371,1,['depend'],['dependency']
Integrability,"Get rid of the remaining memory leaks, avoid code duplication for simultaneous binned fit test, etc. There is also an additional commit that continues the campaign of making the `roofitcore` tests depend less on `roofit`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11793:197,depend,depend,197,https://root.cern,https://github.com/root-project/root/pull/11793,1,['depend'],['depend']
Integrability,GetColumn method of the interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1071:24,interface,interface,24,https://root.cern,https://github.com/root-project/root/pull/1071,1,['interface'],['interface']
Integrability,"GetTreeFullPaths assumed that the first occurrence of "":/"" was; the separator between filename and tree name in strings such as; ""file.root:/dir/tree"". However, the separator is the _last_; occurrence of "":/"" -- e.g. if the file is read via a remote; protocol, its name starts with ""protocol://"". This logic is of course still broken in case the name of the tree; or the one of the directory that contains it contains "":/"", we; do not support that case. This fixes #10216.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10217:251,protocol,protocol,251,https://root.cern,https://github.com/root-project/root/pull/10217,4,['protocol'],['protocol']
Integrability,"GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--. -->; segfault in build process. ; ### Expected behavior; <!--; -->; build process completes. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; standard cmake build process, as described in the guide. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; ROOT v6-26-10 (@4dddea35); FreeBSD 13.2 RELEASE (clang 14.0.5), required dependencies installed from ports. ### Additional context; <!--; Add any other context about the problem here.; -->. a port exists v6-28-02 (development/root), installs in binary form (so somebody got it to compile, did not have too much time to test it thoroughly). In my case, however, the port also does not compile, craps out somewhere else. plus it hauls in too many dependencies so it is less than ideal.; I imagine getting it to work on FreeBSD would not end at fixing this issue here. The fbsd port maintainer has some patches which might help, but I have also seen that e.g. procfs is deprecated in new releases and libprocstat has to be used, etc, etc.; With that being said, it would be extremely nice to get ROOT to work on FreeBSD...; thanks,. ```; [ 52%] Built target rootcling_stage1; [ 52%] Generating G__Core.cxx, ../lib/Core.pcm; #0 0x000000000446e3d5 llvm::sys::PrintStackTrace(llvm::raw_ostream&) Signals.cpp:0:0; #1 0x000000000446c646 llvm::sys::RunSignalHandlers() Signals.cpp:0:0; #2 0x00",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12787:1048,depend,dependencies,1048,https://root.cern,https://github.com/root-project/root/issues/12787,1,['depend'],['dependencies']
Integrability,Given e.g. the comment by Jonas:. > I will probably have more comments later when working on connecting this to the RooMinimizer. What do we gain from merging this into 6.28? Do we expect users of this new interface already for 6.28?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11755#issuecomment-1357780600:206,interface,interface,206,https://root.cern,https://github.com/root-project/root/pull/11755#issuecomment-1357780600,1,['interface'],['interface']
Integrability,"Given two consecutive identifiers, the first token is necessarily a type name, e.g. in `foo bar`, `foo` is a type. This pull-request disables runtime resolution for this case. Previously, the lookup was returning a VarDecl of type `DependentTy` regardless of the identifier being probably a mistyped type. This caused clang to start parsing an expression, which ended up in misleading diagnostic messages. More details here: https://sft.its.cern.ch/jira/browse/ROOT-5268. Sibling PR in roottest: https://github.com/root-project/roottest/pull/786. ## Changes or fixes:; - Disable runtime resolution for identifiers that are followed by an identifier token. ## Checklist:; - [X] tested changes locally. This PR fixes JIRA issue ROOT-5268.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9160:232,Depend,DependentTy,232,https://root.cern,https://github.com/root-project/root/pull/9160,2,"['Depend', 'message']","['DependentTy', 'messages']"
Integrability,"Given. ```python; import ROOT. df = ROOT.RDataFrame(""Events"", ""root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root""); ```. I see that `TROOT::EndOfProcessCleanups()` is called twice, once before the `RDataFrame` destructor, once after, with these callstacks:. ```; #0 TROOT::EndOfProcessCleanups (this=0x7ffff6e43ee0 <ROOT::Internal::GetROOT1()::alloc>) at ../core/base/src/TROOT.cxx:1206; #1 0x00007ffff7e7758a in WrapperCall (method=93825045955840, nargs=0, args_=0x7fffffffdc30, self=0x7ffff6e43ee0 <ROOT::Internal::GetROOT1()::alloc>, result=0x0) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778; #2 0x00007ffff7e778bc in Cppyy::CallV (method=93825045955840, self=0x7ffff6e43ee0 <ROOT::Internal::GetROOT1()::alloc>, nargs=0, args=0x7fffffffdc30) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:829; #3 0x00007ffff707536a in GILCallV (method=93825045955840, self=0x7ffff6e43ee0 <ROOT::Internal::GetROOT1()::alloc>, ctxt=0x7fffffffdc10) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:68; #4 0x00007ffff7077a1b in CPyCppyy::(anonymous namespace)::VoidExecutor::Execute (this=0x7ffff70fd980 <(anonymous namespace)::InitExecFactories_t::InitExecFactories_t()::{lambda()#41}::operator()() const::e>, method=93825045955840, self=0x7ffff6e43ee0 <ROOT::Internal::GetROOT1()::alloc>, ctxt=0x7fffffffdc10) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:410; #5 0x00007ffff7058a76 in CPyCppyy::CPPMethod::ExecuteFast (this=0x555558890a70, self=0x7ffff6e43ee0 <ROOT::Internal::GetROOT1()::alloc>, offset=0, ctxt=0x7fffffffdc10) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74; #6 0x00007ffff7059020 in CPyCppyy::CPPMethod::ExecuteProtected (this=0x555558890a70, self=0x7ffff6e43ee0 <ROOT::Internal::GetROOT1()::alloc>, offset=0, ctxt=0x7fffffffdc10) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149; #7 0x00007ffff70582a9 in CPyCppyy::CPPMethod::Execu",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10743:479,Wrap,WrapperCall,479,https://root.cern,https://github.com/root-project/root/issues/10743,1,['Wrap'],['WrapperCall']
Integrability,"Given; ```cpp; // tree_with_pair.cpp; void tree_with_pair() {; TTree t(""t"", ""t"");; auto x = std::make_pair(42, 84);; //t.Branch(""topbranch"", &x, ""a/I:b/I""); t.Branch(""topbranch"", &x);; t.Fill();; t.Scan();; }; ```. , without this patch the output is:. ```; Error in <HandleInterpreterException>: Trying to dereference null pointer or trying to call routine taking non-null arguments; Execution of your code was aborted.; In module 'Core':; /home/blue/ROOT/dev/cmake-build-foo/include/TClass.h:635:38: warning: null passed to a callee that requires a non-null argument [-Wnonnull]; size_t hint_offset = ((char*)&(p->second)) - (char*)p;; ^; ```. with this patch:. ```; Processing tree_with_pair.cpp...; ************************************; * Row * topbranch * topbranch *; ************************************; * 0 * 42 * 84 *; ************************************; ```. This fixes #11215 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11227:349,rout,routine,349,https://root.cern,https://github.com/root-project/root/pull/11227,1,['rout'],['routine']
Integrability,Giving an update on [this comment](https://github.com/root-project/root/issues/14553#issuecomment-1941552355): our current understanding is that we lack the following Python packages for the optional runtime dependencies of TMVA:; ```; graph_nets; sonnet; ipywidgets (for JsMVA); ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14553#issuecomment-2067707416:208,depend,dependencies,208,https://root.cern,https://github.com/root-project/root/issues/14553#issuecomment-2067707416,1,['depend'],['dependencies']
Integrability,Going to a function doesn't work; At least the tests depend on REFLEX_GENERATE_DICTIONARY leaking `${gensrcdict}`; e.g.: roottest/cmake/modules/RoottestMacros.cmake; ```cmake; REFLEX_GENERATE_DICTIONARY(${dictionary} ${ARG_UNPARSED_ARGUMENTS}; SELECTION ${ARG_SELECTION}; ${reflex_pass_options}). add_library(${targetname_libgen} EXCLUDE_FROM_ALL SHARED ${gensrcdict}); ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5019#issuecomment-587558815:53,depend,depend,53,https://root.cern,https://github.com/root-project/root/pull/5019#issuecomment-587558815,1,['depend'],['depend']
Integrability,"Good job, @j-mathe! All the changes of the tutorial look reasonable to me. Small remarks regarding naming conventions:; 1. PRs would usually trigger several machines to build ROOT on them and run all the ROOT tests on them (CI). Since the changes are only on comments, you should start the name of your PR/commit as `[skip-ci]`. This would prevent these machines from building/testing.; 2. Since the changes are very closely related to RDataFrame, it is advisable to specify in the name of the commit `[DF]`. So I would suggest a better name for your commit to be `[skip-ci][DF] Fix typos and grammar mistakes in df002 tutorials`. I changed the name of the PR to that. You can check how to rename a commit [here](https://docs.github.com/en/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/changing-a-commit-message). Similar comment applies for the other tutorial fixes. Please change the name of the PR there (from the web browser), and also on the commit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11006#issuecomment-1192525434:836,message,message,836,https://root.cern,https://github.com/root-project/root/pull/11006#issuecomment-1192525434,1,['message'],['message']
Integrability,"Good question, but unfortunately I have to admit I don't really know why. I didn't have that much time to investigate but needed a fix for 6.28 for which I'm already late. The TFoam class is quite fundamental to RooFit, and the memory increase has affected many users. All I had was this hint by valgrind when checked the reproducer in the commit message:; ```; Conditional jump or move depends on uninitialised value(s); at 0x402E09: TStorage::UpdateIsOnHeap(unsigned int const volatile&, unsigned int volatile&) (TStorage.h:132); by 0x501B33D: TDirectory::TDirectory() (in /usr/lib64/root/libCore.so.6.26.10); by 0x5816D81: TDirectoryFile::TDirectoryFile() (in /usr/lib64/root/libRIO.so.6.26.10); by 0x5833AF8: TFile::TFile(char const*, char const*, char const*, int) (in /usr/lib64/root/libRIO.so.6.26.10); by 0xE2D86A6: TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (in /usr/lib64/root/libCling.so.6.26.10); by 0xE2D9A17: TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,; allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) (in /usr/lib64/root/libCling.so.6.26.10); by 0x4FF098E: TROOT::InitInterpreter() (in /usr/lib64/root/libCore.so.6.26.10); by 0x4FF0C9E: ROOT::Internal::GetROOT2() (in /usr/lib64/root/libCore.so.6.26.10); by 0x510209C: ROOT::TGenericClassInfo::GetClass() (in /usr/lib64/root/libCore.so.6.26.10); by 0x90B67CA: TFoamCell::Class() (in /usr/lib64/root/libFoam.so.6.26.10); by 0x504BE7A: TRef::operator=(TObject*) (in /usr/lib64/root/libCore.so.6.26.10); by 0x90B126F: TFoamCell::Fill(int, TFoamCell*, TFoamCell*, TFoamCell*) (in /usr/lib64/root/libFoam.so.6.26.10); Uninitialised value was created by a stack allocation; at 0xE2D8106: TCling::LoadPCM(std::__cxx11::basic_string<",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12061#issuecomment-1397463096:347,message,message,347,https://root.cern,https://github.com/root-project/root/pull/12061#issuecomment-1397463096,2,"['depend', 'message']","['depends', 'message']"
Integrability,"Got also hit by this issue. ; The following change in `/opt/homebrew/Cellar/root/6.30.02/share/root/cmake/ROOTConfig.cmake` (around line 131) seems to have worked for me. ```; if(ROOT_vdt_FOUND AND NOT TARGET VDT::VDT); if(ROOT_builtin_vdt_FOUND); function(find_builtin_vdt); # the function is to create a scope (could use block() but requires CMake>=3.25); set(CMAKE_PREFIX_PATH ${ROOT_INCLUDE_DIRS} ${ROOT_LIBRARY_DIR}); find_dependency(Vdt); endfunction(); find_builtin_vdt(); endif(); endif(); ```. If confirmed, could be integrated into the `ROOTConfig.cmake.in` ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14113#issuecomment-1907960204:526,integrat,integrated,526,https://root.cern,https://github.com/root-project/root/issues/14113#issuecomment-1907960204,1,['integrat'],['integrated']
Integrability,Gradient interfaces templated. Chi2 gradient parallelized and vectorized.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/793:9,interface,interfaces,9,https://root.cern,https://github.com/root-project/root/pull/793,1,['interface'],['interfaces']
Integrability,"Great regarding the 6.24. As for the interface, there are Unuran methods (HINV and NINV) that do not require PDF, only CDF. This is why I proposed a constructor which only sets the `fOwnFunc` and let all 3 xxDF functions be optional. I see there is a ctor accepting TF1 pointers that can be used in this case, but it sets unconditionally the `fOwnFunc`. With that in mind, my proposed ctor has to be:; ```cpp; TUnuranContDist(bool copyFunc);; ```; i.e. without a default value for copyFunc. So for the case when the user wants only CDF and not to copy it in TUnuranContDist, a new ctor or a method to set `fOwnFunc` is needed anyway. For the case where the user wants to set all 3 xxDF functions indeed the ctor is there, my point is just that the user code looks a bit ugly:; ```cpp; TUnuranContDist dist(pdf, &dpdf, false, true);; dist.SetCdf(cdf);; ```; compared to:; ```cpp; TUnuranContDist dist(pdf, dpdf, cdf, false, true);; ```; or:; ```cpp; TUnuranContDist dist(true);; dist.SetPdf(pdf);; dist.SetDpdf(dpdf);; dist.SetCdf(cdf);; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8196#issuecomment-849392582:37,interface,interface,37,https://root.cern,https://github.com/root-project/root/issues/8196#issuecomment-849392582,1,['interface'],['interface']
Integrability,"Great, thanks! Can you update the commit message (`git commit --amend; git push -f`) to include these findings? That makes the motivation for the change much clearer!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5474#issuecomment-629037999:41,message,message,41,https://root.cern,https://github.com/root-project/root/pull/5474#issuecomment-629037999,1,['message'],['message']
Integrability,"HI Rahul, thanks for the PR! Here is what I would do to get started with the missing bullet points:. 1. added tutorials. A tutorial that showcases the Taylor expansion feature is definitely welcome! I would show the 1D case, where you Taylor expand let's say a 4th degree polynomial at different orders and plot the Taylor expansions together with the original Polynomial. At 4th order, the Taylor expansion should match with the original. 2. added unit test. For sure we need a unit test for these new features. It's always good to start with some closure tests:; * check that a one dimensional RooPolyFunc wrapped in a PDF behaves the same as a RooPolynomial; * check that the Taylor expansion of a 2nd order 1D RooPolyFunc at 2nd order matches the original Polynomial; * same check as in the provious bullet point, but n-dimensional case (2D is enough). 3. analytical integral. Let's deal with this later, I still need to think more about this. We should start with the unit tests anyway. Let me know on Mattermost if you need any help with the unit tests or tutorials! In the meantime I will start reviewing the code in this PR and also make the suggestions necessary to make everything compile without error and warning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9184#issuecomment-951757561:608,wrap,wrapped,608,https://root.cern,https://github.com/root-project/root/pull/9184#issuecomment-951757561,1,['wrap'],['wrapped']
Integrability,Hadd improve help message and Doxygen documentation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12844:18,message,message,18,https://root.cern,https://github.com/root-project/root/pull/12844,1,['message'],['message']
Integrability,"Handle unknown feature and/or option, addressing the issue #7662 on Windows. Gives something like:; ```; C:\Users\sftnight>root-config --flags; --flags: Unknown option or argument!. Usage: root-config [options]. --arch Print the architecture (compiler/OS); --platform Print the platform (OS); --libs Print regular ROOT libraries; --glibs Print regular + GUI ROOT libraries; --evelibs Print regular + GUI + Eve libraries; --cflags Print compiler flags and header path; --bindir Print the executable directory; --libdir Print the library directory; --incdir Print the header directory; --etcdir Print the configuration directory; --tutdir Print the tutorials directory; --srcdir Print the top of the original source directory; --auxlibs Print auxiliary libraries; --config Print arguments used for configuration with CMake; --features Print list of all supported features; --has-<feature> Test if <feature> is compiled in; --version Print the ROOT version; --git-revision Print the ROOT git revision number; --python-version Print the Python version used by ROOT; --python2-version Print the Python2 version used by PyROOT; --python3-version Print the Python3 version used by PyROOT; --ncpu Print number of available (hyperthreaded) cores; --cc Print alternative C compiler specified when ROOT was built; --cxx Print alternative C++ compiler specified when ROOT was built; --f77 Print alternative Fortran compiler specified when ROOT was built; --ld Print alternative Linker specified when ROOT was built; --help Print this message. C:\Users\sftnight>root-config --has-feet; --has-feet: unknown feature!. C:\Users\sftnight>root-config --has-feet --has-pyroot; --has-feet: unknown feature! yes; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7663:1522,message,message,1522,https://root.cern,https://github.com/root-project/root/pull/7663,1,['message'],['message']
Integrability,"Handler::Connect(long) (in /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdCl.so.2.0.0); ==2505== by 0x3FCF7B48: XrdCl::Stream::EnableLink(XrdCl::PathID&) (in /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdCl.so.2.0.0); ==2505== by 0x3FCF7DEC: XrdCl::Stream::Send(XrdCl::Message*, XrdCl::OutgoingMsgHandler*, bool, long) (in /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdCl.so.2.0.0); ==2505== by 0x3FD202FC: XrdCl::MessageUtils::SendMessage(XrdCl::URL const&, XrdCl::Message*, XrdCl::ResponseHandler*, XrdCl::MessageSendParams const&, XrdCl::LocalFileHandler*) (in /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdCl.so.2.0.0); ==2505== by 0x3FD2AC91: XrdCl::FileStateHandler::IssueRequest(XrdCl::URL const&, XrdCl::Message*, XrdCl::ResponseHandler*, XrdCl::MessageSendParams&) (in /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdCl.so.2.0.0); ==2505== by 0x3FD2E324: XrdCl::FileStateHandler::Open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned short, unsigned short, XrdCl::ResponseHandler*, unsigned short) (in /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdCl.so.2.0.0); ==2505== by 0x3FD27325: XrdCl::File::Open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, XrdCl::OpenFlags::Flags, XrdCl::Access::Mode, XrdCl::ResponseHandler*, unsigned short) (in /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdCl.so.2.0.0); ==2505== by 0x3FD274BC: XrdCl::File::Open(std::__cxx11::basic_string<char, std::char_t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-759513859:1790,Message,Message,1790,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-759513859,2,['Message'],"['Message', 'MessageSendParams']"
Integrability,"Having a TBB dependency in core should be a ""big"" move (making the availability of TBB a pre-requirement to build ROOT). On your original (RDataFrame if I recall correctly) use case, what is the performance and scaling differences between the 3 cases; * Current; * std::shared_mutex; * ""TBBUnique"". ? (Some form of those results should also probably make it into the commit log before merging).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-742913420:13,depend,dependency,13,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-742913420,1,['depend'],['dependency']
Integrability,"Having the detailed list of includes is the superior solution, for many reasons: dependency tracking, smaller directories searched, IDEs. We don't pay per character in the compiler invocation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5170#issuecomment-600571482:81,depend,dependency,81,https://root.cern,https://github.com/root-project/root/pull/5170#issuecomment-600571482,1,['depend'],['dependency']
Integrability,"Having trouble parsing what the actual error in from the error log. The log records failing with ""error MSB6006"" but not much else. Maybe @bellenot can help with some insight?. (This [SO thread](https://stackoverflow.com/questions/13118947/error-msb6006-cmd-exe-exited-with-code-1) indicates that it's maybe related to missing dependencies?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2983#issuecomment-439112535:327,depend,dependencies,327,https://root.cern,https://github.com/root-project/root/pull/2983#issuecomment-439112535,1,['depend'],['dependencies']
Integrability,"Hello @HannaOlvhammar,. the ``` don't work in commit messages (at least the terminal and github don't react to them). I would recommend to remove them to make the commit message more readable. They are good for markdown-enabled things like the discussion on github or mattermost, though. 🙂 ; You're doing great with the commit message BTW. It's very informative. Maybe don't promise to do xxx in the message, though. If you don't manage to do it for some reason, the message will for all eternity promise that you will.; You could e.g. say ""this change will allow for vectorising xxxx""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11171#issuecomment-1211679837:53,message,messages,53,https://root.cern,https://github.com/root-project/root/pull/11171#issuecomment-1211679837,5,['message'],"['message', 'messages']"
Integrability,"Hello @Harshalzzzzzzz !. In this case we need to inspect the model content and when we find two different nodes with the same name we emit a warning or an error message. ; This could be done when calling `pdf.fitTo`, i.e. before creating the RooNLLVar object or during its creation. ; See https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooAbsPdf.cxx#L1292. For inspecting the computational tree graph, you can look at functions like `RooAbsArg::servers()` or `RooAbsArg::getComponets`. Thank you for your offer to contribute to RooFit. Lorenzo. P.S. If you look for something easier, we have maybe this old issue, easier to fix and it is has some relation to the work you have done on the Pythonization. See https://sft.its.cern.ch/jira/browse/ROOT-2784",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7417#issuecomment-809977135:161,message,message,161,https://root.cern,https://github.com/root-project/root/issues/7417#issuecomment-809977135,1,['message'],['message']
Integrability,"Hello @Harshalzzzzzzz ,; basically what the description says: currently, if you construct a `TFile` directly (i.e. not going through the factory function `TFile::Open`) the constructor errors out if some protocol must be used to access the file (e.g. `root://` or `http://`) -- like in the first example in the description. The reason why this does not work is not very important, the point is that `TFile(""root://..."")` fails and the right thing to do instead is `TFile::Open(""root://..."")`. So if the TFile constructor fails with that ""file ... does not exist"" error, _before_ printing that error we want to check whether the filename contains `""://""` and if it does we want to print a _different_ error message that does not say ""file ... does not exist"" but instead it points users to using ""TFile::Open"" instead (as in the issue description). You can use a debugger or grep the source code for the error message text to see where the relevant logic resides.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10039#issuecomment-1091668804:204,protocol,protocol,204,https://root.cern,https://github.com/root-project/root/issues/10039#issuecomment-1091668804,3,"['message', 'protocol']","['message', 'protocol']"
Integrability,"Hello @amcdouga! Sorry for the late reply. Thanks for noticing the IO for the `RooMomentMorphND` doesn't work. That gave me the idea to just remove this class, because the code is almost an exact duplicate of the [RooMomentMorphFuncND](https://root.cern.ch/doc/master/classRooMomentMorphFuncND.html), only that the base class is `RooAbsReal` instead of `RooAbsPdf`. So if you want to have an object that is a RooAbsPdf and that you can write to a file, just use the RooMomentMorphFuncND wrapped in a [RooWrapperPdf](https://root.cern.ch/doc/master/classRooWrapperPdf.html).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11876#issuecomment-1378834704:487,wrap,wrapped,487,https://root.cern,https://github.com/root-project/root/issues/11876#issuecomment-1378834704,1,['wrap'],['wrapped']
Integrability,"Hello @aphecetche,. replacing an existing keyword with another one may break compatibility with existing users. Even if `Filter` sounds more appropriate, I would avoid doing that. Pushing the concepts of AliRoot and AliPhysics into ROOT is wrong. This is ALICE stuff and should not get ""too much"" into ROOT's code. _""too much"" = the AliEn interface was inside ROOT already (wrongly, IMHO), and this dataset manager has been added to ROOT solely because it requires AliEn only to work._. To me those patches reflect your quite specific use case. What is it you'd like to achieve, and that cannot be done with the tools you have?. Cheers. d.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/63#issuecomment-99135034:339,interface,interface,339,https://root.cern,https://github.com/root-project/root/pull/63#issuecomment-99135034,1,['interface'],['interface']
Integrability,"Hello @bluehood , thanks for advise. I will surely do the same and raise a new PR with proper commit messages for every step. So I am closing this PR. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/696#issuecomment-311609694:101,message,messages,101,https://root.cern,https://github.com/root-project/root/pull/696#issuecomment-311609694,1,['message'],['messages']
Integrability,"Hello @couet, . thank you for looking into it. SWAN indeed swallows the message informing about the nan values. The following script should run (I forgot to include the numpy import before):; ```; import ROOT; import numpy as np. canvas = ROOT.TCanvas(f""test_canvas"", ""title"", 400, 400); canvas.Draw(); canvas.cd(). num_values = 5; g = ROOT.TGraph(num_values,; np.arange(num_values, dtype='float'),; np.full(num_values, fill_value=np.nan)); g.SetMarkerSize(2); g.SetMarkerStyle(2); g.DrawClone('AP'); ```. Running the script from the command line as you suggested indeed produces the expected error message:; ```; $ python3 nan.py; TCanvas::ResizePad:0: RuntimeWarning: Inf/NaN propagated to the pad. Check drawn objects.; TCanvas::ResizePad:0: RuntimeWarning: test_canvas height changed from 0 to 10; ```. Running the same code in a SWAN cell produces only the following message: ; ```; Welcome to JupyROOT 6.26/08; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12296#issuecomment-1438482858:72,message,message,72,https://root.cern,https://github.com/root-project/root/issues/12296#issuecomment-1438482858,3,['message'],['message']
Integrability,"Hello @guitargeek Sir, while Installing Root to my Ubuntu VM 18.04, during the building of the file ""cmake --build . -- -j3"" the build stops and shows this error every time at the 49% of the build. I have tried to start the process multiple times and even increase space in my Oracle VM but nothing seemed to work. CMake Error at /home/viren/Root CERN/root/AFTERIMAGE-prefix/src/AFTERIMAGE-stamp/AFTERIMAGE-install-RelWithDebInfo.cmake:16 (message):; Command failed: 2. '/usr/bin/make' 'install'. See also. /home/viren/Root CERN/root/AFTERIMAGE-prefix/src/AFTERIMAGE-stamp/AFTERIMAGE-install-*.log. CMakeFiles/AFTERIMAGE.dir/build.make:73: recipe for target 'AFTERIMAGE-prefix/src/AFTERIMAGE-stamp/AFTERIMAGE-install' failed; make[2]: *** [AFTERIMAGE-prefix/src/AFTERIMAGE-stamp/AFTERIMAGE-install] Error 1; CMakeFiles/Makefile2:280: recipe for target 'CMakeFiles/AFTERIMAGE.dir/all' failed; make[1]: *** [CMakeFiles/AFTERIMAGE.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; [ 49%] Built target move_artifacts; [ 49%] Built target clang-tblgen; Makefile:151: recipe for target 'all' failed; make: *** [all] Error 2",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8758#issuecomment-974903531:440,message,message,440,https://root.cern,https://github.com/root-project/root/issues/8758#issuecomment-974903531,1,['message'],['message']
Integrability,"Hello @hcmidt, discussed a bit with my colleagues about what we'd need to do in this PR to set a good precedent for the RooFit pythonizations. 1. We should better stick with the `CamelCase` instead casting to of `lower_case` with underscore. True, it's less pythonic, but it would also mean we'd have to duplicate the documentation for pyROOT with the new parameter names. If we keep the same argument names as in C++, the C++ documentation is still useful.; 2. Please extend your test such that it covers also the case where one mixes the C++-style arguments with the keyword arguments, e.g. `fitTo(self.data, Range=""sideband"", ROOT.RooFit.Save=True)`; 3. Rename the `test/rooabspdf` directory you created to `test/roofit`, otherwise it's a bit too granular; 4. Create also a `_roofit` subdirectory directory in the `ROOT/pythonization` directory where you put your `_rooabspdf.py ` file. The underscore at the beginning is to mark that this is not part of the ""public"" interface. I suppose you also need to create a new `__init__.py` file in the same directory. That would be enough for this PR I think. Here are some thoughts on what to do as we proceed (of course you can do some of it also in this PR if you like). We probably will have some common helper classes for RooFit pythonizations at some point, as there are reoccurring patterns, like the `RooCmdArg` pattern you saw in [`fitTo`](https://root.cern.ch/doc/master/classRooAbsPdf.html#a8f802a3a93467d5b7b089e3ccaec0fa8). Then, I'd suggest to we don't create a new `@pythonization()` function every RooFit class we pythonize in the future, because that would mean to pattern-match all class names one after the other. Maybe we can have a single `@pythonization()` in `ROOT/pythonization/_roofit/__init__.py` that checks if the class has a name starting with `Roo`. If it does, it will call all the roofit pythonization functions that we create. As we add more pythonizations, we probably have to add some doxygen text if the pythonized inte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7314#issuecomment-790082105:971,interface,interface,971,https://root.cern,https://github.com/root-project/root/pull/7314#issuecomment-790082105,1,['interface'],['interface']
Integrability,"Hello @sinnfashen, thank you very much for your PR!. I have rebased it on master, fixed the conflicts and ran your demo in `PTKDTree.C`. Unfortunately, depending on the number of `MAXN`, the code was either crashing, or the parallelization even resulted in a slowdown. As pointed out by @lmoneta and @dpiparo, to merge this it would be necessary to demonstrate a clear speedup in at least some usecases, and even better to show that these usecases also correspond to real-world problems. Since these concerns were not addressed and there was no further reply to the last comment of @lmoneta, I assume that you, @sinnfashen, have moved on from the project and I'll close this PR. Still, if you ever feel like playing with this again, and you can show that the parallelized algorithms performance scales well with the number of threads and gives the correct results, feel free to reopen this PR or open a new one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2202#issuecomment-1808849990:152,depend,depending,152,https://root.cern,https://github.com/root-project/root/pull/2202#issuecomment-1808849990,1,['depend'],['depending']
Integrability,"Hello Hans, ; Thank you for your proposal. I think is a good improvement, the current situation I agree is a bit messy and what you propose is a good step forward. ; We should see if we do not enable too many messages in printlevel=1, which is often used.; I think also level 3 is used often (for example when fitting histograms in ROOT with the verbose option). In that case we might want to use instead level 2 and keep level 3 only for debugging. . Some work will also be needed to clean-up some of the debug messages. Thanks for opening this issue, ; Best regards. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6421#issuecomment-697458482:209,message,messages,209,https://root.cern,https://github.com/root-project/root/issues/6421#issuecomment-697458482,2,['message'],['messages']
Integrability,"Hello Sergey,, Danillo. Thank you for your suggestions (that we took into consideration ), feedback and prompt response. There is a new suggestion on how to solve this issue. Please check:. <https://its.cern.ch/jira/browse/SPI-2532>; its.cern.ch<https://its.cern.ch/jira/browse/SPI-2532>; [X]<https://its.cern.ch/jira/browse/SPI-2532>. We will keep you informed.; Best regards,; Ilias. On 14 Mar 2024, at 09:32, Sergey Linev ***@***.***> wrote:. @cogevito<https://github.com/cogevito>. Can you try to install libbsd-dev on your node?. —; Reply to this email directly, view it on GitHub<https://github.com/root-project/root/issues/14958#issuecomment-1996852848>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/ADMB4TR5V47G7UK252MEENDYYFODFAVCNFSM6AAAAABEUNYYK6VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTSOJWHA2TEOBUHA>.; You are receiving this because you were mentioned.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14958#issuecomment-1996872551:887,Message,Message,887,https://root.cern,https://github.com/root-project/root/issues/14958#issuecomment-1996872551,1,['Message'],['Message']
Integrability,"Hello Sergey,. I'm using version 3.7.3-1 of `nlohmann/json.hpp`. Here is the output from the apt -s install nlohmann-json3-dev command. ```; Reading package lists... Done; Building dependency tree ; Reading state information... Done; nlohmann-json3-dev is already the newest version (3.7.3-1).; 0 upgraded, 0 newly installed, 0 to remove and 36 not upgraded.; ```. Dear Bertrand,. I will definitely disable root7 and try to recompile ROOT. Thank you for this suggestion. With best regards,; Denys.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12492#issuecomment-1473294498:181,depend,dependency,181,https://root.cern,https://github.com/root-project/root/issues/12492#issuecomment-1473294498,1,['depend'],['dependency']
Integrability,"Hello both of you!; Thank you so much for the quick reply!; I went through my text again and didn't notice it repeated itself...! Sorry for that!. Considering the suggestion from @dpiparo , I have checked all the dependencies. Some I had to install, but now they are all in the system. I have tried to go through the cmake again and got the same problems. You suggest me to try from scratch again. I can do this simply by deleting the folders I have created for the installation and redo the process in the page ""build from source""?. I have tried the workaround suggested by @ferdymercury ! Firstly I have tried the snap version and nothing happened. Same errors. Now I have downloaded the pre-compiled version and I can use it, open canvases and browsers with no problem. I will run some macros to compare with the outputs I had previously and check if everything is according to what I had. Eventhough it is already working, I am willing to try and build it from source if that can help you somehow figuring out some kind of challanges you would like to improve in further versions! Please let me know if I can be of any use!. Thank you very much once again! It is always amazing to receive this kind of comprehensible support :))))",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14479#issuecomment-1916915766:213,depend,dependencies,213,https://root.cern,https://github.com/root-project/root/issues/14479#issuecomment-1916915766,1,['depend'],['dependencies']
Integrability,"Hello!. ROOT-R is now supported with JupyROOT, the problem was a message from ; R ""error c stack usage is too close to the limit"".; It was fixed using module resource from python to set unlimited stack size in multithread execution,; anyway the stack in OS will be the limit. ""see ulimit -s"" for Gnu/Linux. Best.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/139:65,message,message,65,https://root.cern,https://github.com/root-project/root/pull/139,1,['message'],['message']
Integrability,"Hello,. The `TCollection.h` header file cannot be included at the same time as the standard `span` header file. This bug impacts all the headers that include `TCollection.h` including `TCanvas.h`. Here is a minimal example to reproduce the bug when compiled with GCC 12.2.0 in C++20, with ROOT 6.26.06:. ```cpp; #include <span>; #include <TCollection.h>; ```. and here is the output:. ```; Consolidate compiler generated dependencies of target main; [ 50%] Building CXX object CMakeFiles/main.dir/main.cpp.o; In file included from /usr/include/TCollection.h:33,; from /tmp/scratchpad/main.cpp:2:; /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid; 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]); | ^~; /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:; /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous; 188 | return std::span<U>(arr, arr + N);; | ^~~~; In file included from /usr/include/ROOT/RSpan.hxx:33,; from /usr/include/ROOT/RRangeCast.hxx:17:; /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’; 155 | class span {; | ^~~~; In file included from /tmp/scratchpad/main.cpp:1:; /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’; 56 | class span;; | ^~~~; /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token; 188 | return std::span<U>(arr, arr + N);; | ^; /usr/include/ROOT/RRangeCast.hxx: At global scope:; /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid; 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]); | ^~; /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:; /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous; 227 | return std::span<U>(arr, arr + N);; | ^~~~; /usr/include/ROOT/span.hxx:155:7: note: candidates are",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11587:421,depend,dependencies,421,https://root.cern,https://github.com/root-project/root/issues/11587,1,['depend'],['dependencies']
Integrability,"Hello,. This is a follow-up to the [discussion on the Forum](https://root-forum.cern.ch/t/is-there-a-wrapper-for-trandom-derivatives-to-provide-the-std-uniformrandombitgenerator-interface/43842). I realised that what I labelled myself as the solution indeed answers to the original problem, but does not solve my actual problem: I have an object of `TRandom`-derived class shared among several other objects and in one place I would like to wrap this object in the std `UniformRandomBitGenerator` interface or preferably use it directly. This cannot be done with `TMVA::RandomGenerator` because it holds its own instance of TRandom-like. So maybe ROOT devs could consider adding the required typedef, 2 static methods and the `operator()` returning `UInt` directly to the base class (`TRandom` or `ROOT::Math::TRandomEngine`) to make it std library compatible out of the box?. Cheers,; Antoni",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7979:101,wrap,wrapper-for-trandom-derivatives-to-provide-the-std-uniformrandombitgenerator-interface,101,https://root.cern,https://github.com/root-project/root/issues/7979,3,"['interface', 'wrap']","['interface', 'wrap', 'wrapper-for-trandom-derivatives-to-provide-the-std-uniformrandombitgenerator-interface']"
Integrability,"Hello. I noticed a weird feature in root 6.24.00, when trying to fit a model using a RooSimultaneous pdf. . Am I doing something forbidden in root 6.24.00 ?. Best,. Jean-Baptiste. ### Describe the bug; I have a model with a single category, describing the shape of a distribution, with three unconstrained nuisance parameters, one constrained nuisance parameter and one parameter of interest. The three unconstrained NP describe the shape of the background and the background yield. The poi is proportional to the signal yield. The dataset is a background only dataset. . I can do the fit with as pdf : model_had1A = RooProdPdf (fsb_had1A, constbias_had1A) where; fsb = ns x fs + nb x fb, fs and fb are signal and background pdf, ns contains the poi, nb is free floating. It runs; smoothly even if we are close to the unphysical region (poi < 0). (Probably many error messages from the exploration of the unphysical region have been removed from the output.); I can also try a fit with the pdf : simPdf = RooSimultaneous (indexCat=had1A, had1A=model_had1A) : this is virtually the same pdf, but this time embeded in a RooSimultaneous object. The fit fails. Between the two root versions, one things that appeared weird to me is that fsb_had1A does not seem to be; normalized when embeded in the RooSimultaneous in root 6.24.00. Maybe that is fine, but this is different from; what I see in root 6.22.02. ### Expected behavior; I would expect exactly the same results in both fits, with a best fit poi = 0 and a reasonable uncertainty.; This is what I see in root-6.22.02. In root 6.24.00 the fit with a RooSimultaneous fails. . ### To Reproduce; I put the code here /afs/cern.ch/user/j/jdevivi/public/ISSUEROOFIT. In root-6.24.00, I just do ; root.exe testWSsimulvsprod.C. In root-6.22.02, I do; root.exe load.C testWSsimulvsprod.C; since I use a RooCrystalBall from root-6.24 and did not put the code in the workspace. Log files can be found in the same directory. ### Setup; ROOT version : 6.24.00; ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8307:868,message,messages,868,https://root.cern,https://github.com/root-project/root/issues/8307,1,['message'],['messages']
Integrability,Hello. Sorry to hear you experienced this issue. A configuration warning seems suspicious; ```; -- Cling version (from VERSION file): ROOT_1.0~dev; CMake Warning at interpreter/cling/lib/Interpreter/CMakeLists.txt:278 (MESSAGE):; Cannot determine location of C++ headers for runtime.; ```; Is any other ROOT version or any other series of CMake configuration working on your system?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14337#issuecomment-1890406125:219,MESSAGE,MESSAGE,219,https://root.cern,https://github.com/root-project/root/issues/14337#issuecomment-1890406125,1,['MESSAGE'],['MESSAGE']
Integrability,Here an example from the failure above how the diagnostics look like:. ```; Full path to requirements.txt: /home/sftnight/build/workspace/root-pullrequests-build/root/requirements.txt; Details about not matched dependencies:; - The 'numba>=0.47.0' distribution was not found and is required by the application; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5408#issuecomment-654701951:211,depend,dependencies,211,https://root.cern,https://github.com/root-project/root/pull/5408#issuecomment-654701951,1,['depend'],['dependencies']
Integrability,Here are the failing tests (without the `-fno-threadsafe-statics` flag):; ```; 7 - gtest-core-meta-test-testHashRecursiveRemove (Failed); 104 - gtest-tree-treeplayer-test-treetreeplayertestUnit (Failed); 105 - gtest-tree-treeplayer-test-dataframe-friends (Failed); 106 - gtest-tree-treeplayer-test-dataframe-alias (Failed); 107 - gtest-tree-treeplayer-test-dataframe-cache (Failed); 108 - gtest-tree-treeplayer-test-dataframe-callbacks (Failed); 110 - gtest-tree-treeplayer-test-dataframe-interface (Failed); 112 - gtest-tree-treeplayer-test-dataframe-regression (Failed); 113 - gtest-tree-treeplayer-test-dataframe-simple (Failed); 114 - gtest-tree-treeplayer-test-dataframe-snapshot (Failed); 116 - gtest-tree-treeplayer-test-datasource-more (Failed); 125 - tutorial-dataframe-tdf001_introduction (Failed); 126 - tutorial-dataframe-tdf002_dataModel (Failed); 127 - tutorial-dataframe-tdf003_profiles (Failed); 128 - tutorial-dataframe-tdf004_cutFlowReport (Failed); 129 - tutorial-dataframe-tdf005_fillAnyObject (Failed); 130 - tutorial-dataframe-tdf006_ranges (Failed); 131 - tutorial-dataframe-tdf007_snapshot (Failed); 132 - tutorial-dataframe-tdf008_createDataSetFromScratch (Failed); 133 - tutorial-dataframe-tdf009_FromScratchVSTTree (Failed); 134 - tutorial-dataframe-tdf010_trivialDataSource (Failed); 135 - tutorial-dataframe-tdf011_ROOTDataSource (Failed); 136 - tutorial-dataframe-tdf012_DefinesAndFiltersAsStrings (Failed); ```; With errors like:; ```; 131: Processing C:/Users/bellenot/git/master/tutorials/dataframe/tdf003_profiles.C...; 131: IncrementalExecutor::executeFunction: symbol '_Init_thread_header' unresolved while linking function '??__Eid@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@YAXXZcling_module_10_'!; 131: You are probably missing the definition of _Init_thread_header; 131: Maybe you need to load the corresponding shared library?; 131: IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while li,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1607#issuecomment-364363584:489,interface,interface,489,https://root.cern,https://github.com/root-project/root/pull/1607#issuecomment-364363584,1,['interface'],['interface']
Integrability,"Here is a relevant [issue](https://gitlab.kitware.com/cmake/cmake/-/issues/17735) where this is discussed more in depth. One of the [comments](https://gitlab.kitware.com/cmake/cmake/-/issues/17735#note_487572) in this issue explains the rationale behind overriding `find_package` quite well. If there is a better solution that can work the way the current solution does (i.e. works also for LLVM without having to change its calls to `find_package(ZLIB)`, for example), we can implement it. However, so far I have not found a another way to do it. Maybe now that the required version of CMake is newer than 3.11, we may be able to improve things by using the [FetchContent](https://cmake.org/cmake/help/latest/module/FetchContent.html) module. It may also be possible to use [CMAKE_DISABLE_FIND_\<PackageName\>](https://cmake.org/cmake/help/v3.10/variable/CMAKE_DISABLE_FIND_PACKAGE_PackageName.html) to skip checking for packages if that doesn't force packages to be considered not found when `<PackageName_FOUND>` is then also set by hand. The reality, though, is that CMake still kinda sucks for managing optionally bundled dependencies like ROOT wants to support. As for the undocumented nature of the feature, it's sad but, like the [CDash test measurements](https://cmake.org/cmake/help/latest/command/ctest_test.html?#additional-test-measurements) that were undocumented for a long time, if you offer it, people will try to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8633#issuecomment-898406007:1127,depend,dependencies,1127,https://root.cern,https://github.com/root-project/root/issues/8633#issuecomment-898406007,1,['depend'],['dependencies']
Integrability,"Here is a suggestion for a class to input and output JSON data. It is _not_ meant for (`T`)object serialisation (there's `TBufferJSON` for that) - but for use cases where one wants to import or export JSON data into ROOT-based code. Examples could be . - Input and output of HEPData data. For example, one may want to read in some table via JSON and visualize, or one has produced a result one wants to upload to HEPData ; - Interoperability with Python. Python has support for many data format - not least JSON. . The attached class `TJSON` allows for this in a relatively straight forward manner. For example, one can do . ```c++; TJSON null;; TJSON b(true);; TJSON s(""RawString"");; TJSON s2(std::string(""C++String""));; TJSON i(42);; TJSON f(3.14);; TJSON a = TJSON::Array();; TJSON o = TJSON::Object();; ```; for null, boolean, string, numbers (int and float), arrays or objects (associative container). . A more complex object can be created like . ```c++ ; TJSON o2 = std::map<std::string,TJSON>{; {""key1"",""value""},; {""key2"",true},; {""key3"",; {""key4"", TJSON::Array(""This"",""is"",""an"",""array""),; ""key5"",; {""boolean"", true}; }; }; };; ```. and elements are accessed via `operator[]` . ```c++; assert o2[""key1""] == ""value"";; assert o2[""key3""][""key4""][1] == ""is""; ```. One can loop over arrays or objects via `TJSON::ArrayRange` or `TJSON::ObjectRange` respectively. . ```c++; TJSON a = TJSON::Array();; TJSON o = TJSON::Object();. for (size_t i = 0; i < 4; i++); a[i] = ""Test""+std::to_string(i);. o[""key0""] = ""value1"";; o[""key1""] = a;; o[""key2""] = 123;. std::cout << ""Array: "" << std::endl;; for (auto& e : a.ArrayRange()); std::cout << e << std::endl;. std::cout << ""Object: "" << std::endl;; for (auto& kv : o.ObjectRange()); std::cout << ""o["" << kv.first << ""] = "" << kv.second << std::endl;; ```. JSON can be read and written to streams . ```c++; std::cout << ""=== Loading ==="" << std::endl;; std::string s(""{\""key1\"":\""string\"",""; 		"" \""key2\"": true,""; 		"" \""key3\"": 1234,""; 		"" \""key4\"":null}"");.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6889:425,Interoperab,Interoperability,425,https://root.cern,https://github.com/root-project/root/issues/6889,1,['Interoperab'],['Interoperability']
Integrability,"Here is a target vs. non-target more realistic example:. * [UseFile based](https://github.com/GooFit/zachFitRooFit/blob/master/CMakeLists.txt); * [Target based - after patch](https://github.com/GooFit/zachFitRooFit/blob/newroot/CMakeLists.txt). You'll see that the target based method is now as readable and clean as the non-target based approach, and being target based, scales to more complicated examples and libraries much more gracefully. Also, since the targets already solve dependencies, the user does not need to list `RooFitCore` in the target based version, while missing that in the UseFile version is a symbol missing error when compiling!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1959#issuecomment-385680755:482,depend,dependencies,482,https://root.cern,https://github.com/root-project/root/pull/1959#issuecomment-385680755,1,['depend'],['dependencies']
Integrability,"Here is an example comparing the new options ""SAME0"" and ""SAMES0"" (on the right side) to the default one ""SAME"" and ""SAMES"" (on the left) [test1.C.txt](https://github.com/root-project/root/files/2680271/test1.C.txt), the options are printed on the plots. And here is how they look from my locally complied version:; ![c1](https://user-images.githubusercontent.com/17641689/50006820-f6549000-ffe9-11e8-8345-232bce21326e.png). Note that, even the ""default"" options, there is a fix applied to show the correct range in the palette axises.; Without this fix, i.e, in the root-6.14/08, they look this:; ![c2](https://user-images.githubusercontent.com/17641689/50007174-10db3900-ffeb-11e8-8685-61320aea8103.png). I actually forgot to update the help document. Sorry...shall I add it in a new commit, or maybe you prefer to do it to make sure it's well integrated with other parts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3150#issuecomment-447334380:846,integrat,integrated,846,https://root.cern,https://github.com/root-project/root/pull/3150#issuecomment-447334380,1,['integrat'],['integrated']
Integrability,"Here is the current status:; ```; C:\root-dev\build\x64\relwithdebinfo>ctest -VV -C RelWithDebInfo -R gh-14462-gh14462regression; UpdateCTestConfiguration from :C:/root-dev/build/x64/relwithdebinfo/DartConfiguration.tcl; Parse Config file:C:/root-dev/build/x64/relwithdebinfo/DartConfiguration.tcl; Add coverage exclude regular expressions.; UpdateCTestConfiguration from :C:/root-dev/build/x64/relwithdebinfo/DartConfiguration.tcl; Parse Config file:C:/root-dev/build/x64/relwithdebinfo/DartConfiguration.tcl; Test project C:/root-dev/build/x64/relwithdebinfo; Constructing a list of tests; Ignore test: test-tcollex; Ignore test: roottest-cling-parsing-semicolon; Ignore test: roottest-root-rint-TabCom; Ignore test: roottest-root-rint-BackslashNewline; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 2338; Start 2338: gtestC--root-dev-git-roottest-root-tree-readrules-gh-14462-gh14462regression. 2338: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/root-dev/build/x64/relwithdebinfo/roottest/root/tree/readrules/gh-14462/RelWithDebInfo/gh14462regression.exe"" ""-DCWD=C:/root-dev/build/x64/relwithdebinfo/roottest/root/tree/readrules/gh-14462"" ""-DSYS=C:/root-dev/build/x64/relwithdebinfo"" ""-P"" ""C:/root-dev/build/x64/relwithdebinfo/RootTestDriver.cmake""; 2338: Working Directory: C:/root-dev/build/x64/relwithdebinfo/roottest/root/tree/readrules/gh-14462; 2338: Environment variables:; 2338: ROOT_HIST=0; 2338: Test timeout computed to be: 1500; 2338: Running main() from C:\root-dev\build\x64\relwithdebinfo\googletest-prefix\src\googletest\googletest\src\gtest_main.cc; 2338: [==========] Running 1 test from 1 test suite.; 2338: [----------] Global test environment set-up.; 2338: [----------] 1 test from ReadRules; 2338: [ RUN ] ReadRules.CustomReadRuleWithSpace; 2338: Error in TCling::LoadPCM ROOT PCM C:\root-dev\build\x64\relwithdebin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9354#issuecomment-2370611327:882,depend,dependency,882,https://root.cern,https://github.com/root-project/root/issues/9354#issuecomment-2370611327,2,['depend'],['dependency']
Integrability,"Here's a full log from `valgrind`, maybe @vgvassilev has an idea? [ppc64-valgrind.log](https://github.com/root-project/root/files/6545182/ppc64-valgrind.log) I just verified, there are no errors reported on x86. What caught my eye is:; ```; Conditional jump or move depends on uninitialised value(s); at 0x128E6D58: clang::Parser::TryAltiVecToken(clang::DeclSpec&, clang::SourceLocation, char const*&, unsigned int&, bool&) (Parser.h:854); ```; and; ```; Conditional jump or move depends on uninitialised value(s); at 0x128E6ECC: clang::Parser::TryAltiVecVectorToken() (Parser.h:865); ```; which are two methods specific to AltiVec / PowerPC, so it's possible that there's a problem related to the platform...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8072#issuecomment-848589093:266,depend,depends,266,https://root.cern,https://github.com/root-project/root/issues/8072#issuecomment-848589093,2,['depend'],['depends']
Integrability,"Here's an explanation that at least satisfies me: I added a `module->dump();` to `IncrementalJIT::addModule()` so that I can see what code is handed over to LLVM when just starting `./bin/root -q -l`. My understanding is that this comes from the dicts that are loaded on startup. Looking for `GetPoolSize`, here's the relevant part of the LLVM IR:; ```llvm; ; Function Attrs: noinline uwtable; define i32 @_ZNK4ROOT8Internal9TExecutor11GetPoolSizeEv(%""class.ROOT::Internal::TExecutor""*) #0 align 2 {; ; contains calls to; %seq = call i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""* %9); %thread = call i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""* %13); %process = call i32 @_ZNK4ROOT16TProcessExecutor11GetPoolSizeEv(%""class.ROOT::TProcessExecutor""* %17); }. ; Function Attrs: noinline nounwind uwtable; define linkonce_odr i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""*) #1 comdat align 2 {; ; ...; }. declare i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""*) #2; ```. So the dict contains the definition of `Executor::GetPoolSize()`, which is not `inline`, and references `TThreadExecutor::GetPoolSize()` defined in `libImt.so`, but obviously not in the dict. This symbol remains unresolved during JIT, leading to the error message we're seeing. Notice that `TSequentialExecutor::GetPoolSize()` is `linkonce_odr` due to being `inline`. When adding the `inline` keyword to `TExecutor::GetPoolSize()` (thanks Philippe for the less intrusive proposal), all these functions disappear from the loaded `llvm::Module` because unused `linkonce_odr` are dropped (recursively) before passing to JIT. So in essence I think this is not about symbols not being exported or inlined by the compiler, but what we need is the semantics of `inline` that the function can be dropped from the `llvm::Module`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7033#issuecomment-760022478:1369,message,message,1369,https://root.cern,https://github.com/root-project/root/pull/7033#issuecomment-760022478,1,['message'],['message']
Integrability,"Here's simpler reproducer for https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/154832/testReport/projectroot/runtutorials/tutorial_multicore_mp101_fillNtuples/ ; ```; ❯ cat Demo.C; void Demo() {; auto X = ROOT::TSeqI(42);; } ; ```. The error message is:; ```. Processing Demo.C...; In module 'Core':; /home/jun/dev/root/Debug/include/ROOT/TSeq.hxx:67:10: error: instantiation of 'ROOT::TSeq<int>' is different in different modules; class TSeq {; ^; In module 'std' imported from input_line_1:1:; /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/type_traits:1910:13: error: 'std::__make_signed_selector<int, true, false>::__type' from module 'std.type_traits' is not present in definition of 'std::__make_signed_selector<int, true, false>' provided earlier; using __type; ^; /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/type_traits:1901:11: note: definition has no member '__type'; class __make_signed_selector;; ^; /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/type_traits:1966:12: error: 'std::make_signed<int>' has different definitions in different modules; defined here; struct make_signed; ^; /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/type_traits:1966:12: note: definition in module 'std.type_traits' is here; In module 'Core':; /home/jun/dev/root/Debug/include/ROOT/TSeq.hxx:79:7: error: multiple overloads of 'TSeq' instantiate to the same signature 'void (int)'; TSeq(T theEnd): fBegin(), fEnd(theEnd), fStep(1) {; ^; /home/jun/dev/root/Debug/Demo.C:2:12: note: in instantiation of template class 'ROOT::TSeq<int>' requested here; auto X = ROOT::TSeqI(42);; ^; /home/jun/dev/root/Debug/include/ROOT/TSeq.hxx:79:7: note: previous declaration is here; TSeq(T theEnd): fBegin(), fEnd(theEnd), fStep(1) {; ^; /home/jun/dev/root/Debug/include/ROOT/TSeq.hxx:82:7: error: multiple overloads of 'TSeq' instantiate to the same signature 'void (int, int, int)'; TSeq(T theBegin, T theEnd, T th",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910#issuecomment-1253760320:266,message,message,266,https://root.cern,https://github.com/root-project/root/pull/10910#issuecomment-1253760320,1,['message'],['message']
Integrability,"Hey Lorenzo!. Certainly, I will start Right now. This PR is considerably more complex and currently includes copy pasted parts from the merged PRs (I had to do it for temporary tests before we had merged them as the convolutional layer depends on them). As a result a simple rebase and conflict fix would be simple, but would also leave a very messy history. What I can do instead is start a new branch from the updated master and carefully choose the new changes with better messages. I should be able to do that within 1-2 days and it will yield a clean history. Unless w are in a big hurry I plan to go with th me second approach but please let me know if you prefer the first one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2216#issuecomment-402624497:236,depend,depends,236,https://root.cern,https://github.com/root-project/root/pull/2216#issuecomment-402624497,2,"['depend', 'message']","['depends', 'messages']"
Integrability,"Hey, can you return back the line because *_.rdicts are installing somewhere else following two commit messages https://github.com/root-project/root/commit/5cad428dc71929b9f4c202fadfe5934513cd978a and https://github.com/root-project/root/commit/8afa8841936b35167515789f40934d660c6455ab",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4751#issuecomment-573055861:103,message,messages,103,https://root.cern,https://github.com/root-project/root/pull/4751#issuecomment-573055861,1,['message'],['messages']
Integrability,"Hi - this is an excellent start but I'd like to offer a few considerations given that not everyone uses root files these days. Specifically, friend trees are not a widely accepted concept outside of TTrees and RNtuple. It is, however, easy to abstract away from this so that this metadata specification is more universal. In coffea, we didn't go all the way to formalizing it in a schema since there are many details but you can see the basic validation we do here:; https://github.com/CoffeaTeam/coffea/blob/master/coffea/processor/executor.py#L1353; We allow forms like:; ```; fileset = { ""dataset"" : [""some"", ""list"", ""of"", ""files""], ...}; # and; fileset = { ""dataset"": { ""files"": [""file1"", ""file2"", ...], ""treename"": ""Events"", ""metadata"": { ""stuff"": ""about stuff""}, ...}, { .... } }; ```; depending on user need.; I think optional and union types are very convenient here since not every user will need or want to specify all components of the full schema on each use (but uniformizing the description when needed is very important). . To repeat from above here is the suggested metadata requirements (with annotations).; """"""; This new standard schema should support a few key features of the definition of a dataset:. * Specify groups of several input files, each with associated metadata; * Decide what term to use instead of ""groups"" (dataset is probably best); * Cover TTree but plan for RNTuple support (metadata should not care about file formats, your program does); * Should support friend trees per group *** (see below); * Should support entry ranges per group (why? this makes little operational sense from the POV of an analyst); * No indexed friend trees (at least for now) *** (also); """"""; This specification of requirements mixes things that are describing the data (metadata) and and how to react to it (something in a program, not part of the schema). I believe a clean factorization along these lines is very important to creating a well-adopted schema if you intend to develop a ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11624#issuecomment-1293743624:792,depend,depending,792,https://root.cern,https://github.com/root-project/root/issues/11624#issuecomment-1293743624,1,['depend'],['depending']
Integrability,Hi ; The PR looks good to me. Thank you for this nice contribution !; The only question is if we want to have this new integrator already the default in this new release or having it as optional and this will give us more time to test it. It could be enabled maybe every time batch evaluation is enabled.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6632#issuecomment-708545648:119,integrat,integrator,119,https://root.cern,https://github.com/root-project/root/pull/6632#issuecomment-708545648,1,['integrat'],['integrator']
Integrability,"Hi @AlkaidCheng ,. Thanks for reaching out! I am not sure I understand where the problem stands. You are purposely injecting a different namespace at runtime, so I don't see how the package can act in order to prevent the wrong namespace being used. The error is unfortunately not clear as to which call site is provoking the lookup to `ROOT.Math.Internal`. Judging by your short snippet, I can imagine that one place could be [here](https://github.com/root-project/root/blob/a29e81cb1cd217ca2096a44d01fb273e085b4e8b/bindings/experimental/distrdf/python/DistRDF/HeadNode.py#L457), but as you can see the correct full namespace is being called there. Can you give more context as to what is your use case so I can better understand how to help?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15035#issuecomment-2015329409:115,inject,injecting,115,https://root.cern,https://github.com/root-project/root/issues/15035#issuecomment-2015329409,1,['inject'],['injecting']
Integrability,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. ; So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right?; If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,; Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6677#issuecomment-713589532:201,integrat,integration,201,https://root.cern,https://github.com/root-project/root/issues/6677#issuecomment-713589532,1,['integrat'],['integration']
Integrability,"Hi @Axel-Naumann, I let @stwunsch have the last word, but wouldn't something like; ```.cpp; std::string TInterpreter::PrintValue(string_view, void*); ```; the one we are looking for?; Actually the interface above can be ""emulated"" by a function done more or less like this:; ```.cpp; std::string MyPrintValue(string_view clName, void *obj); {; std::string res;; std::sstream printValueInvocation;; printValueInvocation << ""*("" << &res << "") = cling::printValue(( "" << clName << ""*) "" << obj << "");"";; gInterpreter->Calc(printValueInvocation.str.c_str());; return res;; }; ```; i.e. invoking the value printing in the interpreted world to fill a string built in the compiled world which is then returned.; It's then like the value has been printed at the ROOT prompt, but instead its value has been captured and reprinted by Python.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2097#issuecomment-392606646:197,interface,interface,197,https://root.cern,https://github.com/root-project/root/pull/2097#issuecomment-392606646,1,['interface'],['interface']
Integrability,"Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with; deterministic checksum that is not dependent on timestamp or hostname or; anything: Create a file with the same content twice on different; machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:; The file is created in one place at one time and not incrementally over; a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4083:421,depend,dependent,421,https://root.cern,https://github.com/root-project/root/pull/4083,2,['depend'],['dependent']
Integrability,"Hi @HannaOlvhammar and @guitargeek,. the things you discussed in the review are great, but I would recommend a few changes in commit messages in addition. Two examples:; `replaced loop -->`; ```; [RF] Modernise a loop in RooXXX; ```. Or:; ```; test; forgot to save parenthesis; ```; *Just an example, I'm not saying that it applies for this commit:*; ```; [RF] Improve type safety using static_range_cast. The previous loop was using C-style casts for all items. Now, static_cast; is employed for all elements. ; ```; or something like that. Make sure that your first sentence is short (about 80 characters) for git's short preview, include an empty line, and then discuss details (if necessary). Have a look into `git rebase -i` to beautify the commits.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10947#issuecomment-1181672850:133,message,messages,133,https://root.cern,https://github.com/root-project/root/pull/10947#issuecomment-1181672850,1,['message'],['messages']
Integrability,"Hi @Harshalzzzzzzz ,; ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null; - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior; - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7047#issuecomment-771507725:58,interface,interface,58,https://root.cern,https://github.com/root-project/root/issues/7047#issuecomment-771507725,3,"['interface', 'wrap']","['interface', 'wrapped']"
Integrability,"Hi @MrCarroll!; Thanks for considering this. The new distributed RDataFrame python module will support Apache Spark as a backend for distributing applications to a cluster of nodes. Through Spark, it will depend on Java and py4j. But rather than required, these are optional dependencies restricted to the python runtime of that specific part of ROOT. Users that do not whish to use distributed RDataFrame may turn the new build option OFF, furthermore if the dependencies are not installed the option will be switched OFF during the build process automatically (or it will trigger a configuration error only if the option `fail-on-missing` is enabled). That said, I believe you are correct in pointing out the dependencies section of our website. I will make sure to explain these optional dependecies there, along with the release notes and the tutorials that will follow",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7406#issuecomment-793505307:205,depend,depend,205,https://root.cern,https://github.com/root-project/root/pull/7406#issuecomment-793505307,5,['depend'],"['depend', 'dependecies', 'dependencies']"
Integrability,"Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D . The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6676#issuecomment-937759611:300,synchroniz,synchronization,300,https://root.cern,https://github.com/root-project/root/issues/6676#issuecomment-937759611,1,['synchroniz'],['synchronization']
Integrability,"Hi @ShamrockLee , thank you for opening this, the request makes absolute sense, but this might be a bit complicated for multi-thread Snapshots, where we need to write to the file from multiple threads and to do so we have to wrap the TFile in a `unique_ptr` and pass it to `TBufferMerger` (which would then close the file when it's done..). Can you elaborate on your usecase a bit more please? Why do you have the file where Snapshot writes already open, and why is it an annoyance to reopen it after Snapshot is done? Are you writing to the TDirectory before you pass it to Snapshot, or do you have it open in read mode?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9225#issuecomment-957961345:225,wrap,wrap,225,https://root.cern,https://github.com/root-project/root/issues/9225#issuecomment-957961345,1,['wrap'],['wrap']
Integrability,"Hi @ShirinGolpayeganiCern ,; RDataFrame should print errors and also exit with an error status for the case you describe, is that not the case for you?. I tried to reproduce the problem but I get a noisy error:. ```cpp; #include <ROOT/RDataFrame.hxx>. int main() {; {; ROOT::RDataFrame(10); .Define(""x"", [] { return 1; }); .Define(""y"", [] { return 1; }); .Snapshot(""t"", ""f1.root"");. ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Snapshot(""t"", ""f2.root"");. ROOT::RDataFrame(10); .Define(""x"", [] { return 1; }); .Define(""y"", [] { return 1; }); .Snapshot(""t"", ""f3.root"");; }. ROOT::EnableImplicitMT();; ROOT::RDataFrame df(""t"", {""f1.root"", ""f2.root"", ""f3.root""});; df.Snapshot(""t"", ""fmerged.root"");; }; ```. yields:. ```; ~/S/w/gh9366 rootcompile repro.cpp && ./repro; g++ -g -Wall -Wextra -Wpedantic -o ""repro"" ""repro.cpp"" $(root-config --cflags --libs); Error in <TTreeReaderValueBase::CreateProxy()>: The tree does not have a branch called y. You could check with TTree::Print() for available branches.; terminate called after throwing an instance of 'std::runtime_error'; what(): An error was encountered while processing the data. TTreeReader status code is: 6; fish: Job 1, './repro' terminated by signal SIGABRT (Abort); ```. As RDataFrame does not support processing disappearing/appearing branches (in Snapshots or any other method) everything seems to be working as expected here. I'd like to figure out why your colleagues don't see these error messages and the exception being thrown, but I would need help on your side to reproduce the issue. Cheers,; Enrico",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9366#issuecomment-1006422425:1458,message,messages,1458,https://root.cern,https://github.com/root-project/root/issues/9366#issuecomment-1006422425,1,['message'],['messages']
Integrability,"Hi @TomasDado , thanks for the report. We started integrating Ubuntu 24.10 (#16611) and confirm that with system packages the compilation is successful, even if some debugging is still needed for a few tests - you should be able to use xrootd and davix from the system.; We'll come up with a solution for clad and the builtins soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16654#issuecomment-2408386071:50,integrat,integrating,50,https://root.cern,https://github.com/root-project/root/issues/16654#issuecomment-2408386071,1,['integrat'],['integrating']
Integrability,"Hi @VanyaBelyaev ,; I ran your reproducer with LCG97apython3(ROOT 6.20/06) and LCG98python3(ROOT 6.22/00).; With the latter it seems that the call to `dill.dumps` is executed but I get a different error with a long stacktrace, I report the main parts:; ```; ...; input_line_38:16:29: error: allocating an object of abstract class type 'TInterpreter'; *ret = new (arena) TInterpreter[nary];; ^; Error in <TClingCallFunc::make_ctor_wrapper>: Failed to compile; ...; Error in <TClingCallFunc::ExecDefaultConstructor>: Called with no wrapper, not implemented!; Error in <TClingClassInfo::New()>: Call of default constructor failed to return an object for class: TInterpreter; Error in <TClass::New>: cannot create object of class TInterpreter; Error in <TBufferFile::ReadObject>: could not create object of class TInterpreter; TBufferFile::WriteObjectAny:0: RuntimeWarning: since TROOT has no public constructor; 	which can be called without argument, objects of this class; 	can not be read with the current library. You will need to; 	add a default constructor before attempting to read it. <class cppyy.gbl.TH1D at 0x560bc237aa20>. Error in atexit._run_exitfuncs:; Traceback (most recent call last):; File ""/home/vpadulan/Programs/rootproject/rootinstall/v6-22-00-patches/lib/ROOT/__init__.py"", line 119, in cleanup; backend.gROOT.EndOfProcessCleanups(); ReferenceError: attempt to access a null-pointer; ```. The line `<class cppyy.gbl.TH1D at 0x560bc237aa20>` is there because I added a print to your reproducer just to check that `dill.loads` is executed. Actually this is the simplest command to reproduce the same stacktrace:. ```; python -c ""import ROOT; import dill; print(type(dill.loads(dill.dumps(ROOT.TH1D()))))""; ```. So it's possible that something in the new pyroot (default since 6.22) fixes the `dill` issue but triggers this other error.; @etejedor any thoughts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6370#issuecomment-696687077:530,wrap,wrapper,530,https://root.cern,https://github.com/root-project/root/issues/6370#issuecomment-696687077,1,['wrap'],['wrapper']
Integrability,"Hi @VanyaBelyaev!. I guess you can't share all the data and scripts to reproduce the problem, but could you please post the full stack trace of the segmentation fault? I would also be helpful to see your code around the call to `plotOn`. With which command arguments are you calling `plotOn`?. And as @eguiraud said, please indicate if this problem also happens with the C++ interface, if you can easily check this.; Thanks a lot, I hope we can fix this issue quickly!. Cheers,; Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8474#issuecomment-864056089:375,interface,interface,375,https://root.cern,https://github.com/root-project/root/issues/8474#issuecomment-864056089,1,['interface'],['interface']
Integrability,"Hi @VanyaBelyaev, thanks for posting about this!. As explained in [this PR](https://github.com/root-project/root/pull/11909/files) and later also dicussed in [this forum post](https://root-forum.cern.ch/t/retreiving-the-calculation-strategy-of-a-roonll/55715/2), saving test statistics objects to ROOT files like `RooNLLVar` is now prohibited since ROOT 6.28. It only technically seemed to work without error, but in fact the read-back RooNLLVars are corrupted and give wrong results when you read them back even for simple Gaussian cases, as I showed in the description of the linked PR. This and other reasons lead us to the decision to disallow the IO of `RooNLLVar` and other test statistics classes. From your warnings and error messages, it seems like you're trying to do IO of the RooNLLVar. Is there a way you can avoid this in your workflow? As I said it's not allowed anymore and in older ROOT versions it was not reliable. What people usually do is to save the pdf and the datasets in a RooWorkspace, and maybe a `ModelConfig` to simplify the NLL creation when reading back the data and pdf. Is that not an option for your?. Certainly I was not expecting that the removal of this accidental and buggy IO feature would cause some friction with some users, so I'm happy to help you finding an alternative and better solution!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13280#issuecomment-1644053557:734,message,messages,734,https://root.cern,https://github.com/root-project/root/issues/13280#issuecomment-1644053557,1,['message'],['messages']
Integrability,"Hi @aandvalenzuela, unfortunately I am not allowed to run the reproducer:; ```; Singularity> cmsRun /cvmfs/cms-ib.cern.ch/week1/el8_amd64_gcc11/cms/cmssw/CMSSW_13_3_ROOT6_X_2023-08-07-2300/src/Alignment/OfflineValidation/test/inspectData_cfg.py unitTest=True trackCollection=ALCARECOTkAlCosmicsCTF0T; adding the max pT filter; 16-Aug-2023 08:33:46 CEST Initiating request to open file root://eoscms.cern.ch//eos/cms/store/data/Commissioning2022/Cosmics/ALCARECO/TkAlCosmics0T-PromptReco-v1/000/348/776/00000/96538f53-2088-422c-91a5-841d735a81a8.root; 16-Aug-2023 08:33:47 CEST Initiating request to open file root://xrootd-cms.infn.it//store/data/Commissioning2022/Cosmics/ALCARECO/TkAlCosmics0T-PromptReco-v1/000/348/776/00000/96538f53-2088-422c-91a5-841d735a81a8.root; ----- Begin Fatal Exception 16-Aug-2023 08:33:48 CEST-----------------------; An exception of category 'FallbackFileOpenError' occurred while; [0] Constructing the EventProcessor; [1] Constructing input source of type PoolSource; [2] Calling RootInputFileSequence::initTheFile(); [3] Calling StorageFactory::open(); [4] Calling XrdFile::open(); Exception Message:; Failed to open the file 'root://xrootd-cms.infn.it//store/data/Commissioning2022/Cosmics/ALCARECO/TkAlCosmics0T-PromptReco-v1/000/348/776/00000/96538f53-2088-422c-91a5-841d735a81a8.root'; Additional Info:; [a] Calling RootInputFileSequence::initTheFile(): fail to open the file with name root://eoscms.cern.ch//eos/cms/store/data/Commissioning2022/Cosmics/ALCARECO/TkAlCosmics0T-PromptReco-v1/000/348/776/00000/96538f53-2088-422c-91a5-841d735a81a8.root; [b] Input file root://xrootd-cms.infn.it//store/data/Commissioning2022/Cosmics/ALCARECO/TkAlCosmics0T-PromptReco-v1/000/348/776/00000/96538f53-2088-422c-91a5-841d735a81a8.root could not be opened.; [c] XrdCl::File::Open(name='root://xrootd-cms.infn.it//store/data/Commissioning2022/Cosmics/ALCARECO/TkAlCosmics0T-PromptReco-v1/000/348/776/00000/96538f53-2088-422c-91a5-841d735a81a8.root', flags=0x10, permission",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13429#issuecomment-1680042106:1126,Message,Message,1126,https://root.cern,https://github.com/root-project/root/issues/13429#issuecomment-1680042106,1,['Message'],['Message']
Integrability,"Hi @amadio . This PR breaks the Cuda installation. We don't have Cuda integration builds, so can you please check it or notify me before merging it so I can check it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3446#issuecomment-467839862:70,integrat,integration,70,https://root.cern,https://github.com/root-project/root/pull/3446#issuecomment-467839862,1,['integrat'],['integration']
Integrability,"Hi @amadio! I thought we had addressed this problem by making the unreleased `zeromq` interface only a dependency at ROOT build time, and the libraries are linked statically against this unreleased `zeromq` library. So it should not matter what is installed on the system, as long as the builtins are used for building. What exactly is the problem you have at configuration times in these LCG builds? I can't see the full log. I hope it's just one of your configurations checks that doesn't work in your environment and we can fix that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078#issuecomment-981734381:86,interface,interface,86,https://root.cern,https://github.com/root-project/root/pull/9078#issuecomment-981734381,2,"['depend', 'interface']","['dependency', 'interface']"
Integrability,"Hi @amadio, I think I found the problem. We simply need to add dependencies on libVecOps.so. For the dependency of PyROOT on VecOps, we can discuss a solution together with @etejedor. I have an idea on how to solve this relying on the fact that a TVec has the same layout of a vector with a custom allocator.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1896#issuecomment-383410777:63,depend,dependencies,63,https://root.cern,https://github.com/root-project/root/pull/1896#issuecomment-383410777,2,['depend'],"['dependencies', 'dependency']"
Integrability,"Hi @amadio, the situation also changed a bit because we deprecated `xproofd`, which still depended on xrootd 4. I think we should just assume now that XRootD will be at least version 5, since version 4 is EOL for two years already and we have no non-deprecated featured depending on XRootD 4. @andresailer, would this fix your issues?; * https://github.com/root-project/root/issues/12631; * https://github.com/root-project/root/issues/11750. @amadio, does that make sense from the XRootD perspective?. @Axel-Naumann, what do you think? This does add some extra step when we want to resurrect the XRootD 4 dependent features, but this would not be easy anyway (if they even work with eos 4 also being EOL)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13752#issuecomment-1790570878:90,depend,depended,90,https://root.cern,https://github.com/root-project/root/pull/13752#issuecomment-1790570878,3,['depend'],"['depended', 'dependent', 'depending']"
Integrability,"Hi @amadio,; very nice. Some high level comments before diving into the details:; - We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...); - We need to check if the inheritance from TObject is always needed; - We need to put the public interface in the ROOT::Experimental namespace ; - We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server; - We need to check in the dtor of the server if all clients are alive, if not throw; - We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise; - We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client; - In general, new headers are put in the inc/ROOT directory and have the hxx extension (see TThreadedObject, TThreadedExecutor, TDataFrame....)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/533#issuecomment-299412984:338,interface,interface,338,https://root.cern,https://github.com/root-project/root/pull/533#issuecomment-299412984,2,['interface'],['interface']
Integrability,"Hi @aphecetche , we will try and integrate it if it works. Thanks a lot!; @gen740 maybe you can also give it a try and let us know?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14113#issuecomment-1907991061:33,integrat,integrate,33,https://root.cern,https://github.com/root-project/root/issues/14113#issuecomment-1907991061,1,['integrat'],['integrate']
Integrability,"Hi @bbockelm ,. nice job. ; For the serialisation std::atomic<T> might not be hard to achieve given its layout. From the second part of your message, I do not understand if the work is finished or not: can you elaborate?; Do you have runtime reduction figures for CMS Reco, stemming from an actual Fall16 reco job or back-of-the-envelope calculations ?; A clarification: the main developer behind IMT capabilities is @etejedor . Cheers,; D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/277#issuecomment-251866756:141,message,message,141,https://root.cern,https://github.com/root-project/root/pull/277#issuecomment-251866756,1,['message'],['message']
Integrability,"Hi @bellenot , first of all a couple clarifications:. * as per my EDIT2 above, the test is also broken on (at least some) linux platforms (for example, my own machine), but it doesn't run in the nightlies, weirdly.; * your explanation is about why `maxTasksPerFile` is zero. I was asking about `clustersInThisFileSize`, which does not depend on `GetImplicitMTPoolSize()`, but also turns out to be zero. As per my EDIT3 above, it's now clear that `clustersInThisFileSize` is zero because the input file for this test has zero clusters. That's a bit surprising, hence my original question and my request for a comment in the code of the test in EDIT3. Ok cool so #4947 and this PR are meant to fix this same issue. Which solution we want to adopt depends on whether `TTreeProcessorMT` usage, by design and (currently missing) docs, should always be preceeded by a call to `EnableImplicitMT` or not. We are discussing that in the PPP channel on mattermost, as soon as we have an answer that we agree upon, we'll also know what fix to adopt for this failing test. To be clarified why the test does not run in the nightlies for certain platforms (EDIT: other than windows), but that's a different topic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4953#issuecomment-583762217:335,depend,depend,335,https://root.cern,https://github.com/root-project/root/pull/4953#issuecomment-583762217,2,['depend'],"['depend', 'depends']"
Integrability,"Hi @bellenot ,. > it might be an issue with Clang itself. That is exactly the point. clang produces wrong math in libraries/executables with anything higher than -O1. That affects at least some routines in ROOT. The code I've posted above is a standalone code, despite it is based on code from ROOT. On the ROOT side one can only change the compilation flags for clang in the official releases. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6677#issuecomment-712937528:194,rout,routines,194,https://root.cern,https://github.com/root-project/root/issues/6677#issuecomment-712937528,1,['rout'],['routines']
Integrability,"Hi @bellenot, Hi @Axel-Naumann,. :-(. [ 77%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o; [ 77%] Linking CXX executable src/rootcling_stage1; [ 77%] Built target MetaCling; Scanning dependencies of target Cling; [ 77%] Linking CXX shared library ../../../lib/libCling.so; /usr/bin/ld: cannot find -lcladPlugin; /usr/bin/ld: cannot find -lcladDifferentiator; collect2: error: ld returned 1 exit status; gmake[2]: *** [core/metacling/src/CMakeFiles/Cling.dir/build.make:193: lib/libCling.so] Error 1; gmake[1]: *** [CMakeFiles/Makefile2:26939: core/metacling/src/CMakeFiles/Cling.dir/all] Error 2; gmake[1]: *** Waiting for unfinished jobs....; [ 77%] Built target rootcling_stage1; gmake: *** [Makefile:152: all] Error 2. please switch off clad on linker level, too. Georg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-871995878:239,depend,dependencies,239,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-871995878,1,['depend'],['dependencies']
Integrability,"Hi @bluehood , this PR was meant to trigger discussion and I appreciate a lot the idea of a `DataDescription` config object. I think the current proposal needs to be abandoned and some brain power needs to be invested into the new interface. I will be back with something more concrete in that direction.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3035#issuecomment-441319502:231,interface,interface,231,https://root.cern,https://github.com/root-project/root/pull/3035#issuecomment-441319502,1,['interface'],['interface']
Integrability,"Hi @bluehood ,; In #2201 and in #2591, we discussed what is the appropriate interface for asking Interpreter printing. Possible options were ""Use printValue and declare RuntimePrintValue.h at Cling startup time"" or to ""Use gInterpreter->Evaluate"", and people prefered latter. This Evaluate interface is a bit tedious than calling printValue, but it saves startup time as we don't have to declare one more header. So when you want to print something from Interpreter, it'll be nice if you could use this interface :); ```; auto value = gInterpreter->CreateTemporary();; ￼ if (gInterpreter->Evaluate(<something you want to print>, *value) == 1 /*success*/); ￼ str = value->ToTypeAndValueString().second;; ￼ delete value;; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2644#issuecomment-422838018:76,interface,interface,76,https://root.cern,https://github.com/root-project/root/pull/2644#issuecomment-422838018,3,['interface'],['interface']
Integrability,"Hi @bluehood, ; answers in revrese order.; I am not a fan of adapting to old interfaces accepting pointers and a fan of value semantics but I think that adding a method which correspods to *_ptr::get is a good thing. - It would be cheap to add Reset . But for example, TDF is the only entity that should fill these ptrs. What does Reset actually mean? To what TDF is the pointer linked?; - Comparison with nullptr (and implicit conversion): it would not be too much used, but cheap to add. Do you have a usecase in mind.; - Assignments: I agree.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1855#issuecomment-381094370:77,interface,interfaces,77,https://root.cern,https://github.com/root-project/root/pull/1855#issuecomment-381094370,1,['interface'],['interfaces']
Integrability,"Hi @bluehood,. great. Once we are happy with both implementations we integrate them in the code base. Then we can revamp your reproducer and make it a test (if test_snapshotNfiles is not more or less the same thing).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/828#issuecomment-319747705:69,integrat,integrate,69,https://root.cern,https://github.com/root-project/root/pull/828#issuecomment-319747705,1,['integrat'],['integrate']
Integrability,"Hi @breitwieserCern ,; the functionality now looks good. Could you add a test in roottest about the new functionality?; This one should:; - Generate a dictionary with a selection xml; - Have a macro that loads it and checks that the custom streamer works fine; In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:; ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer; MACRO customStreamer.C; OUTREF customStreamer.ref; DEPENDS ${GENERATE_REFLEX_TEST}); ```; This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with.; Do not hesitate to contact me privately if you need more info!. Cheers,; D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/864#issuecomment-325595999:743,DEPEND,DEPENDS,743,https://root.cern,https://github.com/root-project/root/pull/864#issuecomment-325595999,1,['DEPEND'],['DEPENDS']
Integrability,"Hi @cburgard and @gartrog, thanks a lot for these developments! I have only a few comments inline. Besides that, please do a few things before we can merge (I would like to merge this as soon as possible, tomorrow or on Friday. If you have more you can always do a followup PR):. 1. You moved the `JSONInterface` to a public header now, so it's not a `RooFit::Detail` anymore (I understand now that the user needs the interface to implement custom importers/exporters). But still, it's an interface under heavy development and we need to make that clear to the user that they can't rely too much on the stability of this interface. Therefore, can you please change the namespace to `RooFit::Experimental`?; 2. Please give the PR a meaningful title, and the first commit a good commit message, optimally not only a title but also a body where you explain what you did. When merging, I will squash the commits and only the first commit message will be taken, so please consider that.; 3. Make sure that all C++ sources are formatted with `clang-format` and the python sources with `black --line-length=120`. Let me know when this is done, then we can ask the CI to test once again and then merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9482#issuecomment-1016939443:418,interface,interface,418,https://root.cern,https://github.com/root-project/root/pull/9482#issuecomment-1016939443,5,"['interface', 'message']","['interface', 'message']"
Integrability,"Hi @don4get ,. Yes indeed, having a ROOT deployment on pip would ease the integration with the rest of the Python packaging ecosystem. It is definitely not trivial, but it's on our radar. Cheers,; Vincenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14890#issuecomment-1980834982:74,integrat,integration,74,https://root.cern,https://github.com/root-project/root/issues/14890#issuecomment-1980834982,1,['integrat'],['integration']
Integrability,"Hi @dpiparo , on this topic #1888 adds libVecOps as a dependency of libTreePlayer.; The failures in that PR should have been fixed by commit 62fca2cbef, so I just restarted the tests to check it's now green.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1896#issuecomment-383412746:54,depend,dependency,54,https://root.cern,https://github.com/root-project/root/pull/1896#issuecomment-383412746,1,['depend'],['dependency']
Integrability,"Hi @dpiparo ,. 1. I tested MainEvent.cxx with 500~50000 events on my desktop running Ubuntu 14.04. I repeated 10 runs for each test case and ~3% is average performance drop. I did not have a chance to run CMSSW skimming job. I am actually not familiar with CMSSW yet. 2. What you were saying is correct. Since my case only needs one thread to invoke TThreadExecutor, using tbb task_group run interface likely spends too much time on scheduler's receive_and_steal function (from the profiling results).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1010#issuecomment-330564042:392,interface,interface,392,https://root.cern,https://github.com/root-project/root/pull/1010#issuecomment-330564042,1,['interface'],['interface']
Integrability,"Hi @dpiparo ,; you are right, `Exec` and `Finalize` could also be no-op. I explicitly specified that `Initialize` and `InitTask` can be no-op in the doc because those two ""feel"" like they should be doing something important, given their name. I thought users would know what they want to put in `Exec` and `Finalize`, but they might be confused by `Initialize` and `InitTask`. I can reword it if you think it's unclear. The only method that doesn't have to be present is `PartialResult`. The others are required, at least for now. In the future we could add some logic to `TActionImpl<T>` that implements `Initialize`, `InitTask`, `Exec` and `Finalize` as no-op if they are not implemented in `T`. It doesn't even look [that ugly](https://godbolt.org/g/RZHkAy). A humble suggestion for the tutorial (thanks!): wrapping THn in a custom TDF action :grin:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1905#issuecomment-383709026:810,wrap,wrapping,810,https://root.cern,https://github.com/root-project/root/pull/1905#issuecomment-383709026,1,['wrap'],['wrapping']
Integrability,"Hi @dpiparo, since there are no commit or PR descriptions: what was the reason to add this `spectrum` option? As far as I can see, it makes the build configuration more complicated with no tangible benefit, such as avoiding optional external dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3935#issuecomment-1826753548:242,depend,dependencies,242,https://root.cern,https://github.com/root-project/root/pull/3935#issuecomment-1826753548,1,['depend'],['dependencies']
Integrability,"Hi @dpiparo,. > We perhaps need different names for the classes for a better programming model (ideas for the keywords: Buffer, Merge, Parallel, Server, Client, Async ...). I would prefer to not discuss names. I think it's just easier if you and Philippe propose the names, and then I can rename the classes accordingly. I have no strong opinion on what to name them. > We need to check if the inheritance from TObject is always needed. You are right, it's probably not needed. I left them as they were in the imported code. If not inheriting from TObject is desirable, I would prefer to avoid it too. > We need to put the public interface in the ROOT::Experimental namespace. Done in my last push. I still need to move the appropriate things into Internal and Detail, though. > We need to return shtd_ptr to the clients bookkept by the server as weak_ptr by the server. In order to use either unique_ptr or shared_ptr, the constructor/destructor for the client needs to be public. What I did was to return a raw pointer, and only the server is able to create/destroy clients.; That way we have full control. If others have a different preference, I can change the details of the implementation. > We need to check in the dtor of the server if all clients are alive, if not throw. This is done now. Since only the server can create/destroy clients, there is no need to throw. The server just destroys the clients before itself gets destroyed. > We need to put the helper components (e.g. structs not intended to be used by the user) in ROOT::Internal if they do not appear in the interface, in ROOT::Detail otherwise. Yes, I will do that and push again soon. Only the ClientInfo and ThreadFileMerger classes have to be moved. I may fuse ThreadFileMerger into the server class if I can instead, so that we will have no need for either the ThreadFileMerger or ClientInfo anymore. > We need to hide all the methods which are not necessary for the user, e.g. the ctor of the client; In general, new header",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/533#issuecomment-299445910:630,interface,interface,630,https://root.cern,https://github.com/root-project/root/pull/533#issuecomment-299445910,1,['interface'],['interface']
Integrability,"Hi @egpbos, thanks for the review! You are right, the batch mode stuff should better be tested somewhere else, so I removed some commits from this PR. What is left in this PR is the question about the constrain settings that might not make sense. Let's discuss this in the next RooFit meeting then!. What I ultimately want to achieve is that RooFit prints errors if you have constrained settings that statistically don't make sense, to reduce the potential for user error. That means we can't have ""unphysical"" fits in our tests too, otherwise they would fail eventually from these error messages.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11804#issuecomment-1339003559:588,message,messages,588,https://root.cern,https://github.com/root-project/root/pull/11804#issuecomment-1339003559,1,['message'],['messages']
Integrability,Hi @eguiraud I see similar behavior to [this issue](https://github.com/root-project/root/issues/10216) when using TTreeProcessorMT on xrootd-streamed files when using ROOT 6.22/08. Just wanted to check that this fix will also work for my issue before we try integrating >= 6.28/00 into our workflow. Edit: sorry for bumping such an old thread btw,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10217#issuecomment-1370084730:258,integrat,integrating,258,https://root.cern,https://github.com/root-project/root/pull/10217#issuecomment-1370084730,1,['integrat'],['integrating']
Integrability,"Hi @eguiraud and @Axel-Naumann,. Actually, this is an instance of vexing parse. Specifically, in the context where `bool(foo)` appears, it is parsed as a variable declaration with superfluous parenthesis, i.e. same as `bool foo`. Because definition shadowing is enabled, it replaces the old definition (of type `int`) and value-initializes it to `false`, which explains your first reported result.; Moreover, using `!!bool(foo)` disambiguates the input, which is now parsed as an expression and correctly prints `true`. The behavior seen in the second report is again due to vexing parse, and `bool(foo[0])` is parsed as the declaration `bool foo[0];`. Again, switching off definition shadowing gives:; ```; ROOT_prompt_3:1:6: error: redefinition of 'foo' with a different type: 'bool ([0]' vs 'const char *'; bool(foo[0]); ^; ROOT_prompt_1:1:13: note: previous definition is here; const char *foo = ""foo"";; ```; In this case, the output `(bool ([0]) @0x55c4ba66f180` is the address of the `bool [0]` object (whose size should be `1`). > Also note that the last example is missing a closing `)` for the type... Also, as can be seen above, the diagnostic message provided by Clang has one extra `(`, which I think should not be there. Now, what can we do about this? IMHO, while I think _that_ is the correct parsing, we should be probably issuing a warning. Any opinions on this? . Cheers,; Javier.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8304#issuecomment-865019504:1154,message,message,1154,https://root.cern,https://github.com/root-project/root/issues/8304#issuecomment-865019504,1,['message'],['message']
Integrability,"Hi @ellert , LGTM, could you add the description of the changes you did (copy-paste from the PR description) to the message of the commit so that we do not forget what this was about? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2276#issuecomment-406258378:116,message,message,116,https://root.cern,https://github.com/root-project/root/pull/2276#issuecomment-406258378,1,['message'],['message']
Integrability,"Hi @ellert , thank you for the explanations! I would go ahead with it, but first I would add an explanation to the commit message about the change of scope when running with the `makeimage.py` script, which motivates the changes. The changes to the tutorials could even be in a separate commit that included also the explanation about the list comprehension in Python3.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3434#issuecomment-475208696:122,message,message,122,https://root.cern,https://github.com/root-project/root/pull/3434#issuecomment-475208696,1,['message'],['message']
Integrability,"Hi @elusian, thank you so much as always for reporting this!. I haven't solved the problem yet, but just to track my progress here: the underlying problem is that the integrals of a derived PDF (like the `RooRealSumPdf` in your case) somehow have their client-server interface messed up. Here is a reproducer:. ```C++; void repro() {; using namespace RooFit;; RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);; RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));; RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};; integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};; integ2->Print(""v"");; }; ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):; ```; (0x7ffc9b9bf798,-S) RooRealVar::x """"; (0x7ffc9b9bf240,--) RooGaussian::gauss """"; (0x7ffc9b9bff68,V-) RooProduct::par_mod """"; (0x55ac531cd470,V-) RooConstVar::2 ""2""; ```. The integral of the `RooGenericPdf` should have the same value servers, but it doesn't:; ```; (0x7ffc9b9bf798,-S) RooRealVar::x """"; (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """"; (0x7ffc9b9bfb80,V-) RooRealVar::par """"; (0x55ac51984c50,V-) RooConstVar::10 ""10""; (0x55ac531cd470,V-) RooConstVar::2 ""2""; ```. For some reason, the direct value server, which is `par_mod` is **skipped** now, misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it wrong. I need to fix this problem with the value servers registered for integrals on RooRealSumPdfs. Further notes:. * The problem has always been there in RooFit, it's just that the BatchMode uncovered it; * Naturally, the problem is somehow in `getValueAndShapeServers` in [Roo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11578#issuecomment-1281427464:267,interface,interface,267,https://root.cern,https://github.com/root-project/root/issues/11578#issuecomment-1281427464,1,['interface'],['interface']
Integrability,"Hi @etejedor,; > will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory?. TDataFrame is completely agnostic regarding file reading, entry chunking etc. The only thing TDF sees are the batches of entry ranges that `TDataSource::GetEntryRanges` returns -- one task is spawned for each of the range. So basically every decision in this regard is in the hands of `TDataSource`. > does this mean that after each of these reads there will be a synchronization barrier?. Yes. I didn't feel like implementing a one-producer-many-consumers thread-safe queue 😅 but it can always be done later if we want/need it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1219#issuecomment-338629908:505,synchroniz,synchronization,505,https://root.cern,https://github.com/root-project/root/pull/1219#issuecomment-338629908,1,['synchroniz'],['synchronization']
Integrability,"Hi @ferdymercury . If you like, one can integrate this functionality into `RBrowser`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11295#issuecomment-1298187965:40,integrat,integrate,40,https://root.cern,https://github.com/root-project/root/issues/11295#issuecomment-1298187965,1,['integrat'],['integrate']
Integrability,"Hi @greenc-FNAL,. Thanks for this request. I will try to reply inline directly to some of the concerns and try to give some public-friendly outline the bigger picture as I see it. > Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. I am not sure if that is the case at least for the next 10 years. I see this can be an issue if we start shipping module files (`bmi`s or equivalent) instead of header files. However, in practice that won't be the case in near future because the compiler vendors cannot agree on a common file format and make it standard. Until then, there will be always some sort of a textual header file which can be processed with our clang-based rootcling and build a pcm file as basis for our dictionaries. . > My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. Clang has at least 5 different ""flavors"" of modules. One of them is the C++20 modules as described by the C++ standard. At the moment you start using C++ 20 you could use the `import`/`export` constructs and you will be able to use that feature for encapsulation purposes. There is not enough project transitions which are bigger than toy examples. One of the challenges is how we discover module dependencies. That is, we need extra tooling to decide how to split the source files into modules. In practice we need to pre-lex all of the content before the build system can start processing project files. The community is discussing scanners (such as clang scan-deps), daemons (the gcc implementation), protocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/ta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13536#issuecomment-1693395998:398,depend,depend,398,https://root.cern,https://github.com/root-project/root/issues/13536#issuecomment-1693395998,2,['depend'],"['depend', 'dependencies']"
Integrability,"Hi @guitargeek , thanks a lot for the reply and sorry for the late message. For the first and second point, thanks a lot for the explanation. I may misunderstood the way cppyy works previously, now it seems quite reasonable to me!. For the third one, I prepared a workspace and also attached the code that we use (The dataset named `obsData` contained in the file is an asimov one). We are using a framework named WSMaker and I just picked up the fitting code. It is a bit long and hope it won't bring too much trouble to you. Here is the command we use for fit:; `root -l -b -q '$WORKDIR/FitCrossCheckForLimits.C+(FitToAsimov,1.0,0.0,true,""ws.root"",""output/"",""combined"",""ModelConfig"",""obsData"",false,false)'; `. The file is a bit large so here is the [gdrive link](https://drive.google.com/drive/folders/1BXT1w2-NeXdjs-dbGRdpRYmQ4iuPQfiE?usp=sharing). Thanks a lot in advance for your time!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15479#issuecomment-2110156231:67,message,message,67,https://root.cern,https://github.com/root-project/root/issues/15479#issuecomment-2110156231,1,['message'],['message']
Integrability,"Hi @guitargeek , this pull request add the tutorials for the lagrangian morphing class and also; add an example for the factory interface. The are some accompanying fixes as listed below.; Please take a look and let me know if this looks good !. ## This Pull request:. - Add two tutorials `rf711_lagrangianmorph` and `rf712_lagrangianmorphfit` to demonstrate ; the usage of the `RooLagrangianMorphFunc` class; - The PR also includes an update to `rf512_wsfactory_oper` showing an example for the new; options of `taylorexpand` and `lagrangianmorph`; ; ## Changes or fixes:; - formatting of `tutorials/roofit/rf710_roopoly.py`; - The attribute for new physics couplings in the `RooLagrangianMorphFunc` class is changed ; from `NP` to `NewPhysics` to avoid confusion with other abbreviations; - The `lagrangianmorph` factory interface is update to accept arguments in any order. ## Checklist:. - [ ] tested changes locally. Cheers,; Rahul",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9665:128,interface,interface,128,https://root.cern,https://github.com/root-project/root/pull/9665,2,['interface'],['interface']
Integrability,"Hi @guitargeek ,; Thanks for your response. Unfortunately as I mentioned in the description, I am also seeing a seg fault when using the RooMomentMorphFuncND class (though the error message is not the same as above related to the Grid being saved). ; I am only able to write this class to a workspace using the 1D versions - **not** the ND. . Below you can find the example code I'm using to test the RooMomentMorphFuncND class, which creates the seg fault. ; ```c++; #include <iostream>; #include <fstream>; #include<TRandom.h>. float input_lambda(float width){; 	return -6.347e-07*width*width+0.0015*width+1.835;; }. void exampleND_v2(){; auto myy = new RooRealVar(""myy"", ""myy"", 110., 155.);. 	myy->setBins(450.);. 	auto w = new RooWorkspace(""w"");. 	auto hist_1 = new TH1F(""hist_1_125"",""hist_1_125"", 450, 110., 155.);; 	for(double i=0; i<10000; i++){hist_1->Fill(gRandom->Gaus(125., input_lambda(1.)));}; 	auto hist_400 = new TH1F(""hist_400_125"",""hist_400_125"", 450, 110., 155.);; 	for(double i=0; i<10000; i++){hist_400->Fill(gRandom->Gaus(125., input_lambda(400.)));}; 	hist_1->Scale(1./hist_1->Integral());; 	hist_400->Scale(1./hist_400->Integral());. 	auto data_sig_1 = new RooDataHist(""data_sig_1"", ""data_sig_1"", RooArgList(*myy), hist_1);; 	auto data_sig_400 = new RooDataHist(""data_sig_400"", ""data_sig_400"", RooArgList(*myy), hist_400);. auto hist_func_1 = new RooHistFunc(""hist_func_1"", ""hist_func_1"", RooArgList(*myy), *data_sig_1);; auto hist_func_400 = new RooHistFunc(""hist_func_400"", ""hist_func_400"", RooArgList(*myy), *data_sig_400);. 	std::vector<float> Lambda_list = {1., 400.};; 	auto Lambda = RooRealVar(""lambda"", ""lambda"", 1., 400.);. 	auto paramVec = TVectorD(2);. 	for (int j = 0; j < 2; ++j){; 		paramVec[j] = Lambda_list[j];; 	}. 	auto morph_ND = new RooMomentMorphFuncND(""morph_ND"",""morph_ND"", Lambda, RooArgList(*myy), RooArgList(*hist_func_1, *hist_func_400), paramVec, RooMomentMorphFuncND::Linear);. 	morph_ND->Print();; 	w->import(*morph_ND);; 	w->Print();; 	w->writeToF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11876#issuecomment-1384255590:182,message,message,182,https://root.cern,https://github.com/root-project/root/issues/11876#issuecomment-1384255590,1,['message'],['message']
Integrability,"Hi @hageboeck, thank you very much for the review! I will fix the typo in the commit message in the end once I `--autosquash` the fixup commits. I addressed all of your comments, but for one comment I'm not sure if I made the right choice. My hesitation concerns the new member variables in `RooAbsOptTestStatistic` that relate to the batched mode: I don't know if they should take part in the IO or not. On one hand, I don't know why flags about how the test statistic is evaluated need to be stored. On the other hand, the `_batchEvaluations` flag that is currently in `RooNLLVar` and that this PR moves to `RooAbsOptTestStatistic` [is not excluded from the IO](https://github.com/root-project/root/blob/master/roofit/roofitcore/inc/RooNLLVar.h#L82). I guess you had a good reason for this choice, so I kept the new flags in `RooAbsOptTestStatistic` also for the IO. You think this is the right choice?. Since you mentioned IO: I also increased the class version of `RooNLLVar` since the `_batchEvaluations` flag got moved out of the class.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7344#issuecomment-791485041:85,message,message,85,https://root.cern,https://github.com/root-project/root/pull/7344#issuecomment-791485041,1,['message'],['message']
Integrability,"Hi @hageboeck, thanks for the review! I have addressed most of your comments and tried to justify whenever I didn't do something, which was mostly because I think it should be done in separate PRs (new tutorial, removing dependecy of RooFitCore tests on RooFit). I think this PR implements now all the functionality requested by @will-cern in https://github.com/root-project/root/issues/8123, so it would be good if you Will could confirm this. In a later PR, I'm then going to implement what was not required to solve the issue but what is still useful for ROOT nonetheless (also mentioned in the PR description):; 1. make it possible to specify the global observables when generating a dataset:; `model.generate(x, 1000, GlobalObservables(g))`; 2. make it possible to also sample global observable values when generating a toy dataset:; `model.generate({x, g}, 1000, GlobalObservables(g))`; 3. Add a tutorial to show all the new functionality related to global observables",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8878#issuecomment-917953348:221,depend,dependecy,221,https://root.cern,https://github.com/root-project/root/pull/8878#issuecomment-917953348,1,['depend'],['dependecy']
Integrability,"Hi @hahnjo , I found some time to look into it and have a question since the build system around the dict generation is a bit complicated: where would be the place to add library dependencies for rootcling_stage1 ?; specifically the problem is:; `; [ 78%] Linking CXX executable src/rootcling_stage1; [ 78%] Built target Cling; ld: error: undefined symbol: procstat_open_sysctl; >>> referenced by rootcling_impl.cxx; >>> ../dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o:(GetExePath()). ld: error: undefined symbol: kinfo_getproc; >>> referenced by rootcling_impl.cxx; >>> ../dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o:(GetExePath()). ld: error: undefined symbol: procstat_getpathname; >>> referenced by rootcling_impl.cxx; >>> ../dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o:(GetExePath()); c++: error: linker command failed with exit code 1 (use -v to see invocation); gmake[2]: *** [core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/build.make:319: core/rootcling_stage1/src/rootcling_stage1] Error 1; gmake[1]: *** [CMakeFiles/Makefile2:43752: core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/all] Error 2; gmake: *** [Makefile:156: all] Error 2; `",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12787#issuecomment-1551552492:179,depend,dependencies,179,https://root.cern,https://github.com/root-project/root/issues/12787#issuecomment-1551552492,1,['depend'],['dependencies']
Integrability,"Hi @hahnjo, thanks for the clarification. Now I understand what you mean. > Sorry if my current take on the matter sounds a bit disappointing. I'd be happy to have a chat about possible ways around the issues, but I probably can't put much of my time on CUDA support in Cling... This is not disappointing. It just means that I need another strategy ;-) It's good to know that it's probably not efficient to backport the code, so I can save time. Besides, the need for the feature has also decreased a bit since we found a workaround for [clad](https://github.com/vgvassilev/clad). This was the main reason why I wanted to implement this feature. Therefore I think will start with reengineering of `nvlink`. It is also needed, I can implement it with with Clang and later integrate it in Cling when it is updated to LLVM 12/13.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8112#issuecomment-842555367:771,integrat,integrate,771,https://root.cern,https://github.com/root-project/root/issues/8112#issuecomment-842555367,1,['integrat'],['integrate']
Integrability,"Hi @hahnjo,. It is new error message, which signals that chrome or firefox browser are missing to run these tests properly. I could add extra checks in the RCanvas::SaveAs method that it do nothing in such case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13097#issuecomment-1611028795:29,message,message,29,https://root.cern,https://github.com/root-project/root/pull/13097#issuecomment-1611028795,1,['message'],['message']
Integrability,"Hi @henryiii, thanks for the contributions. I think that the tcmalloc space after the -L is something we need to fix. However, I'm not quite so sure about adding `ROOT::Flags` and `ROOT::Libraries`. These will be moving targets that may cause more trouble than they fix. We need to fix ROOT to only really pass required flags, not recommended flags. GeantV, for example, cannot compile against ROOT sometimes, because they inherit bad flags (think C++ standard). Also, `ROOT::Libraries` is quite generic and may or may not contain what the user needs, so if dependent projects use that rather than individual targets, they will certainly run into problems. However, for things like using `ROOT::RooFit` as convenience target already including `RooFitCore`, I think we should add the targets. With proper target dependencies, users will probably not need to list all targets, but only the ones used directly. So, if `ROOT::Math` requires `ROOT::Core`, that will be added automatically if you link against `ROOT::Math`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1959#issuecomment-387355022:558,depend,dependent,558,https://root.cern,https://github.com/root-project/root/pull/1959#issuecomment-387355022,2,['depend'],"['dependencies', 'dependent']"
Integrability,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13808#issuecomment-1893308958:508,integrat,integrating,508,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1893308958,2,"['integrat', 'synchroniz']","['integrating', 'synchronized']"
Integrability,"Hi @linev, here we are. Please let me know about JS. there is no button (from github interface) to PR in root-project/jsroot ; So I just changed files contained in ./js/gpad here. maybe it needs to be rebuilt ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13212#issuecomment-1625664610:85,interface,interface,85,https://root.cern,https://github.com/root-project/root/pull/13212#issuecomment-1625664610,1,['interface'],['interface']
Integrability,"Hi @lmoneta ,. I am very sorry for the long delay. . I have added the mathematical formula of the function in latex format in the documentation as requested (it is quite a long expression fully written out). In terms of ""It would be also nice if you re-write the commits history in one or a couple of commits merging them."". I don't think I have the permissions to be able to do this in this pull request (if I do I cannot see how to do it). We could close this pull request and I can do it on my own branch and then submit another pull request, or I think you have permissions to do it when accepting the merge by selecting ""Squash and merge"". In which case a commit message summarizing everything is:. ""Define BreitWignerRelativistic(Double_t x, Double_t median, Double_t gamma) in TMath.h and then calculate in TMath.cxx, a similar non relativistic function BreitWigner already exists in the same location which was used as a template. A tutorial BreitWigner.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case"". In terms of the test I apologise but I've looked at the example and I don't really understand how to implement it. Given that the BreitWigner function that already exists in TMath does not seem to have a test itself I would prefer to go ahead with potentially adding it later as you suggest. Thanks for your help,; Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9926#issuecomment-1145063061:668,message,message,668,https://root.cern,https://github.com/root-project/root/pull/9926#issuecomment-1145063061,1,['message'],['message']
Integrability,"Hi @lmoneta @couet . I checked the [current documentation](https://root.cern.ch/root/htmldoc/guides/users-guide/MathLibraries.html#numerical-integration), and the point `15.8.3.1 Using ROOT::Math::IntegratorMultiDim` actually shows an example of the IntegratorMultiDim and the usage of different algorithms. . There is a typo, probably caused by copypasting: `Here is a code example on how to use the ROOT::Math::IntegratorOneDim class`, actually it is an example of `IntegratorMultiDim`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7740#issuecomment-1943742763:141,integrat,integration,141,https://root.cern,https://github.com/root-project/root/issues/7740#issuecomment-1943742763,5,"['Integrat', 'integrat']","['IntegratorMultiDim', 'IntegratorOneDim', 'integration']"
Integrability,"Hi @lmoneta, thanks for the review! You are right, it's not a sustainable solution to duplicate the interfaces if we want to accept `std::string` more generally in RooFit. I have updated the PR with a new intermediate class that can be used for the interfaces. The intermediate class, `RooStringView`, is simply a wrapper around `const char*` that can also be constructed from a `std::string`. Note that this is different from `std::string_view`, which is not null-terminated and therefore needs a copy when turned into a `const char*`, so we couldn't use that in RooFit interfaces without introducing superfluous copies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9747#issuecomment-1024992856:100,interface,interfaces,100,https://root.cern,https://github.com/root-project/root/pull/9747#issuecomment-1024992856,4,"['interface', 'wrap']","['interfaces', 'wrapper']"
Integrability,"Hi @lmoneta, this is just a ping in case you didn't see the other message -- there is obviously no rush, though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7087#issuecomment-769735462:66,message,message,66,https://root.cern,https://github.com/root-project/root/pull/7087#issuecomment-769735462,1,['message'],['message']
Integrability,"Hi @lmoneta, yes you are right it's conceptually not ideal that these are static functions of `RooRealSumPdf`. But that's where they are now, and the public interface is still clean because they are all private anyway. I did this PR (and the previous one) only to be able to close the corresponding GitHub issues, and I would like to spend not more time right now in refactoring private code. The right way would probably be to move the static function in another private `.cxx` file, but I think this has no priority now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10851#issuecomment-1170571534:157,interface,interface,157,https://root.cern,https://github.com/root-project/root/pull/10851#issuecomment-1170571534,1,['interface'],['interface']
Integrability,"Hi @mcgordon91!. I think @pcanal is right. It is very likely that you and your colleague didn't correctly synchronize you even selection, and a bit far-fetched that this is a ROOT bug. And since your reproducer is not standalone, we also can't verify if this is an actual ROOT problem or not. I'll therefore close this issue and encourage you to a bit more synchronization work with your colleague :slightly_smiling_face: Feel free to ask questions in the ROOT forum about ROOT/PyROOT usage. The GitHub issue tracker is more for confirmed bugs in ROOT, improvement suggestions, and feature requests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14215#issuecomment-1883019769:106,synchroniz,synchronize,106,https://root.cern,https://github.com/root-project/root/issues/14215#issuecomment-1883019769,2,['synchroniz'],"['synchronization', 'synchronize']"
Integrability,"Hi @minimeu1 ,; a new fresh build, starting from clean directories seems required. First step: did you make sure all the dependencies for kubuntu are installed? https://root.cern/install/dependencies/#ubuntu-and-other-debian-based-distributions",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14479#issuecomment-1915461816:121,depend,dependencies,121,https://root.cern,https://github.com/root-project/root/issues/14479#issuecomment-1915461816,2,['depend'],['dependencies']
Integrability,"Hi @oshadura , thanks for the investigation! One thing I do not understand is that both on an old gcc, 4.9/4.8, and on gcc 6, *-Ofast* seems to define *__FAST_MATH__*, at least on lxplus7:; ```; $ cat a.C ; #ifdef __FAST_MATH__; aaaa; #endif; $ g++ -o a -c a.C -O2; $ g++ -o a -c a.C -Ofast; a.C:2:1: error: ‘aaaa’ does not name a type; aaaa; ^~~~; $ g++ -v; Using built-in specs.; COLLECT_GCC=g++; COLLECT_LTO_WRAPPER=/cvmfs/sft.cern.ch/lcg/external/gcc/6.2.0native/x86_64-centos7/bin/../libexec/gcc/x86_64-pc-linux-gnu/6.2.0/lto-wrapper; Target: x86_64-pc-linux-gnu; Configured with: ../gcc-6.2.0/configure --prefix=/build/pmendez-sftnight/install-620native -with-system-zlib --disable-multilib --enable-languages=all; Thread model: posix; gcc version 6.2.0 (GCC) ; $ source /cvmfs/sft.cern.ch/lcg/external/gcc/4.9.1/x86_64-slc6/setup.sh; $ g++ -v; Using built-in specs.; COLLECT_GCC=g++; COLLECT_LTO_WRAPPER=/cvmfs/sft.cern.ch/lcg/external/gcc/4.9.1/x86_64-slc6/bin/../libexec/gcc/x86_64-unknown-linux-gnu/4.9.1/lto-wrapper; Target: x86_64-unknown-linux-gnu; Configured with: ../gcc-4.9.1/configure --prefix=/build/hegner/gcc/gcc-install --with-mpfr=/afs/cern.ch/sw/lcg/external/mpfr/3.1.2/x86_64-slc6-gcc48-opt --with-gmp=/afs/cern.ch/sw/lcg/external/gmp/5.1.1/x86_64-slc6-gcc48-opt --with-mpc=/afs/cern.ch/sw/lcg/external/mpc/1.0.1/x86_64-slc6-gcc48-opt --enable-libstdcxx-time --enable-lto --with-isl=/build/hegner/gcc/isl/isl-install --with-cloog=/afs/cern.ch/sw/lcg/external/cloog/0.18.0/x86_64-slc6-gcc48-opt --enable-languages=c,c++,fortran,go; Thread model: posix; gcc version 4.9.1 (GCC) ; $ g++ -o a -c a.C -Ofast; a.C:2:1: error: ‘aaaa’ does not name a type; aaaa; ^; $ g++ -o a -c a.C -O2; ```; I see your fix works, I am just trying to understand all the details here since we are looking for the cause of this since a while :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/971#issuecomment-328953619:531,wrap,wrapper,531,https://root.cern,https://github.com/root-project/root/pull/971#issuecomment-328953619,2,['wrap'],['wrapper']
Integrability,"Hi @oshadura, Can you please take a look at the failures for duplicate rules for the LZ4 library?; I think they are relevant (not to these changes, but still relevant for LZ4 integration nonetheless).; In the mean time, I will make the PR build the classic build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1063#issuecomment-332562017:175,integrat,integration,175,https://root.cern,https://github.com/root-project/root/pull/1063#issuecomment-332562017,1,['integrat'],['integration']
Integrability,"Hi @pcanal, happy New Year! Sorry I missed your comment just before the holiday break. I have updated the last commit message to not only include the commit hash in `master`, but also the commit title. Is that okay now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9478#issuecomment-1006440676:118,message,message,118,https://root.cern,https://github.com/root-project/root/pull/9478#issuecomment-1006440676,1,['message'],['message']
Integrability,"Hi @pcanal, our AddressSanitizer build reports a `heap-buffer-overflow`: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit 2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does `TMath::BinarySearch` return in case the element is not found?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12650#issuecomment-1517450219:343,message,message,343,https://root.cern,https://github.com/root-project/root/pull/12650#issuecomment-1517450219,1,['message'],['message']
Integrability,"Hi @pcanal, please find a stacktrace below. It is one single thread recursively locking a mutex.; This is an issue I had before, also after a change in cling.; I rebuilt ROOT from scratch and retested again, I believe it was an artifact of a bad build. Probably some dependencies missing. I'd ask @Axel-Naumann to merge [this PR of mine](https://github.com/Axel-Naumann/root/pull/196) into this branch of his. I'll trigger another round of tests (as soon as possible) just to be sure everything works as intended, then everything is green as far as I'm concerned. Thanks again for the fix!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/972#issuecomment-328848872:267,depend,dependencies,267,https://root.cern,https://github.com/root-project/root/pull/972#issuecomment-328848872,1,['depend'],['dependencies']
Integrability,"Hi @pcanal,. to complement the answer of @bluehood"" TString tokenises, we are using here a simple lexer.; @bluehood : the suggestion of treating names in strings to jit with a procedure similar to the one adopted for entities in files, ""dynamic scopes"", has not been forgotten.; It is not clear to me how to put it in place though. On the other hand, this step goes in the direction of integrating more cling in the handling of ""code strings"". For example, if the strategy explored in this PR demonstrates to be reliable, we could potentially imagine to hook in the lexer used by clang.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3324#issuecomment-458026173:386,integrat,integrating,386,https://root.cern,https://github.com/root-project/root/pull/3324#issuecomment-458026173,1,['integrat'],['integrating']
Integrability,"Hi @rlalik ,. If I'm not mistaken, the reason could be that the graphic format is not supported with the build you have. I also think this is an issue of confusing message and is fixed in the master. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6985#issuecomment-758130452:164,message,message,164,https://root.cern,https://github.com/root-project/root/issues/6985#issuecomment-758130452,1,['message'],['message']
Integrability,"Hi @sawenzel, I'm happy that you found a solution! Indeed, the builtin dependencies of ROOT are not really meant to be used externally, and you did the right thing by adding an external TBB to your environment!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9599#issuecomment-1861405690:71,depend,dependencies,71,https://root.cern,https://github.com/root-project/root/issues/9599#issuecomment-1861405690,1,['depend'],['dependencies']
Integrability,"Hi @sinnfashen , very nice exercise. Since a while ROOT adopts for internal parallelisation the usage of low level interfaces which allow to leverage on the internally spawned TBB pool, for example [TThreadExecutor](https://root.cern.ch/doc/v610/classROOT_1_1TThreadExecutor.html): I don't think the usage of TThread is the way to go. Said that, what is the advantage of the parallelisation? Is there a usecase you were trying to improve?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2202#issuecomment-397642089:115,interface,interfaces,115,https://root.cern,https://github.com/root-project/root/pull/2202#issuecomment-397642089,1,['interface'],['interfaces']
Integrability,"Hi @siscia ,; Could you, please, be more explicit? When extending the VMC interfaces we take care about backward compatibility. Which was the virtual method which caused the problem in your user code?; And also do you build your code against tagged versions of Root and VMC packagages (what is the recommended way), or against development versions (master branches)?; Thank you,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3513#issuecomment-516772892:74,interface,interfaces,74,https://root.cern,https://github.com/root-project/root/pull/3513#issuecomment-516772892,1,['interface'],['interfaces']
Integrability,"Hi @stwunsch , congrats! Very nice - and delivered extremely quickly: it was not obvious. Let's start from the points you mention as ""todos"" - I would order them as follows in terms of priority:; - More tests? Corner-cases missed?; - These tests could also foresee error cases; - More error-handling?; - What about not supported datatypes? Currently implemented for float, double, int, unsigned int, long, unsigned long. This is dependent on the memory adption feature of #1777 for std.vector.; - Infere the final datatype of the numpy array in a clever way (currently double is the default). Implicit type conversion is done by the lambda passed to TDataFrame in the backend.; - Apply clang-format. For the non supported data types, I think we should error out gracefully, but I let @etejedor comment.; For the common type: can we use http://en.cppreference.com/w/cpp/types/common_type ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1856#issuecomment-381247313:429,depend,dependent,429,https://root.cern,https://github.com/root-project/root/pull/1856#issuecomment-381247313,1,['depend'],['dependent']
Integrability,"Hi @subham73, sorry for the late answer! In this case, you should build ROOT with the builtin LZMA library. This can be enabled with the `builtin_lzma` cmake option:. https://github.com/root-project/root/blob/master/cmake/modules/RootBuildOptions.cmake#L99. The call to cmake would look like `cmake -Dbuiltin_lzma=ON` then. If you get further problems with the dependencies, you can try to just enable the build of all dependencies with the `builtin_all` option. By the way, you should consider also building with the `testing` to build the unit tests as well. I can let you know how to run the RooFit unit tests once you managed to build ROOT then. Let me know how it goes :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8777#issuecomment-1027473882:361,depend,dependencies,361,https://root.cern,https://github.com/root-project/root/issues/8777#issuecomment-1027473882,2,['depend'],['dependencies']
Integrability,"Hi @toicca , thank you for the report!. About `RVecF` in the signature not working while `RVec<float>` does, I think that was reported in https://github.com/root-project/root/issues/11294 and it should be fixed by https://github.com/root-project/root/pull/11553 . That PR is waiting on a review from me, I'll get to it as soon as possible. About `numba` not being able to interpret a Python function that uses `ROOT.RVec`: that's technically a limitation of numba, and [there is some work](https://indico.cern.ch/event/1106990/contributions/4991292/) towards having numba understand PyROOT-wrapped C++, but for now ""PyROOT things"" (or cppyy-wrapped C++, if you want) is not part of the subset of Python that numba can deal with.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12234#issuecomment-1419269830:590,wrap,wrapped,590,https://root.cern,https://github.com/root-project/root/issues/12234#issuecomment-1419269830,2,['wrap'],['wrapped']
Integrability,"Hi @wdconinc and @bellenot! It would be nice if we could fix the issue without the added complexity of an additional flag. Wouter, you're probably using the `fail-on-missing` option to build ROOT, right? The flag to make sure that the features don't get quietly disabled at configuration time. The connectivity check doesn't make sense with `fail-on-missing=ON`, because a missing dependency will cause a configuration failure either way. More on this in the description of the PR that I opened:; * https://github.com/root-project/root/pull/15467. Would that PR fix your issue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11603#issuecomment-2102480923:381,depend,dependency,381,https://root.cern,https://github.com/root-project/root/issues/11603#issuecomment-2102480923,1,['depend'],['dependency']
Integrability,"Hi @wwdws1, thanks for the report!. Unfortunately we had to take out the interface between ROOT and `fftw3` out of the released binaries, because it was not license compatible with `fftw3`. Installing `fftw3` doesn't help, because the relevant `TVirtualFFT` plugins won't be there. I have suggested a solution to fix this for the next release:; https://github.com/root-project/root/pull/14174",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14162#issuecomment-1838715040:73,interface,interface,73,https://root.cern,https://github.com/root-project/root/issues/14162#issuecomment-1838715040,1,['interface'],['interface']
Integrability,"Hi @ynikitenko, thanks for the request! There are several reasons for not supporting PyPy. PyROOT, which is building on top of cppyy, is very deeply connected to the CPython implementation of CPyCppyy. Just like the CPython version of cppyy, PyROOT consists of a Python module and a compiled CPython extension (`libROOTPythonization`). And you can't use CPython extensions in PyPy. So to support PyPy, we would have to rewrite [all this code](https://github.com/root-project/root/tree/master/bindings/pyroot/pythonizations/src), and work closely with the cppyy team to make sure it's PyPy implementation also provides the interfaces that PyROOT expects. That would be a *huge* amount of work with no usecase to justify it. And there are so many alternative of fast analysis frameworks that people are trying out right now: RDataFrame, NumPy, numba, awkward arrays, etc. And let's not forget that pypy has it's limitations! It only supports a restricted subset of Python, and it would require large efforts to port PyROOT to this. One final point: the future of PyPy development is not very clear. Right now, they don't support Python 3.11 yet, for example. Builds are only available for [Python 3.9 and Python 3.10](https://www.pypy.org/download_advanced.html). So investing in PyPy compatibility is also risky because of that. Imagine we would spend half a year trying to support it, and then PyPy would not be maintained anymore :(. I'll therefore close this issue as ""not planned"". tldr; the HEP community is gravitation towards other C++ native of jit-based Python packages to speed up analysis, and at this point investing in pypy is not worth it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8110#issuecomment-2148504771:622,interface,interfaces,622,https://root.cern,https://github.com/root-project/root/issues/8110#issuecomment-2148504771,1,['interface'],['interfaces']
Integrability,"Hi @ywkao, following up on my last comment, what would be motivation for the backports? Are you using these older ROOT version in production and this is a crucial fix? Or you're using ROOT on your laptop and if would be easy to update to 6.34 risk-free? How we proceed depends also on that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16773#issuecomment-2457457327:269,depend,depends,269,https://root.cern,https://github.com/root-project/root/pull/16773#issuecomment-2457457327,1,['depend'],['depends']
Integrability,"Hi Attila, to link commits to a JIRA issue, it's enough to just add the issue name somewhere in the commit message. I usually add `Fixes ROOT-NNNN` to the end of the message. That's already enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2829#issuecomment-432203621:107,message,message,107,https://root.cern,https://github.com/root-project/root/pull/2829#issuecomment-432203621,2,['message'],['message']
Integrability,"Hi Attila,. This is a know limitation. The work-around is to wrap the `std::array` by another class (for which you need to declare a dictionary). How urgently would you need the proper implementation?. Cheers,; Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12007#issuecomment-1379522766:61,wrap,wrap,61,https://root.cern,https://github.com/root-project/root/issues/12007#issuecomment-1379522766,1,['wrap'],['wrap']
Integrability,"Hi Axel and Lorenzo,. I take the code and I put it in one commit to let review it easy.; In resume the changes are ; -> Now you can use R functions in C++ very easy using the class TRFunctionImport, that have overloaded operators to use objects like functions that receives template arguments and return TRObjects.; -> Documentation updated in http://oproject.org/tiki-index.php?page=ROOT+R+Users+Guide#Import; -> added documentation in doxygen; -> new propieties for TRDataFrame with operators. You can see the output of documentation in; http://files.oproject.org/root/rootdoc/html/group___r.html; users guide in markdown integrate to doxygen ; http://files.oproject.org/root/rootdoc/html/md__home_omazapa_root_bindings_r_doc_users-guide__r_o_o_t_r__users__guide.html. I have the code now in http://github.com/oprojects/root. Best Regards; O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/83:624,integrat,integrate,624,https://root.cern,https://github.com/root-project/root/pull/83,1,['integrat'],['integrate']
Integrability,"Hi Axel, thank you for your reply,. > Is R__ASSERT the right tool here?. Well, I suppose you could throw an exception too and that would be fine (maybe it complicates the future standalone C library?). To maintain the current behaviour under `NDEBUG` we would have to inspect all uses of `R__ASSERT`. A quick search says `RNTuple` has 103 right now: ; ```shell; max@max-VirtualBox:~/projects/rootdev/root/tree/ntuple$ rg R__ASSERT | wc -l; 103; ```; (for sure some of these are better implemented using exceptions a la https://github.com/root-project/root/pull/8511). My opinion is that `R__ASSERT` is the right tool when you want to ensure preconditions in a low developer friction way without changing the function interface by throwing exceptions. > Do we have any estimate on how representative this is for ROOT and user code?. I'm not really sure, this was more of a comment on how I use `R__ASSERT` than anything else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8587#issuecomment-872426138:717,interface,interface,717,https://root.cern,https://github.com/root-project/root/pull/8587#issuecomment-872426138,1,['interface'],['interface']
Integrability,"Hi Axel,. The fixes are ready and the documentation in doxygen is ready ; http://files.oproject.org/root/rootdoc/html/group___r.html; users guide in markdown integrate to doxygen ; http://files.oproject.org/root/rootdoc/html/md__home_omazapa_root_bindings_r_doc_users-guide__r_o_o_t_r__users__guide.html. Best regards",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/74#issuecomment-127150589:158,integrat,integrate,158,https://root.cern,https://github.com/root-project/root/pull/74#issuecomment-127150589,1,['integrat'],['integrate']
Integrability,"Hi Brian. I like the more elegant way to handle the library/executable dependencies to builtins, which as pointed are still necessary. I do not known what did we bought with `BUILD_BYPRODUCTS`, specially for the makefile case. My suspicion is that to would work if the ExternalProject macro is used in the same subdirectory that the byproducts are used. In any case, I guess it does not do any damage. ; I have merged your commits to the master as well as some minor changes to keep the treatment uniform for all builtins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/323#issuecomment-273161620:71,depend,dependencies,71,https://root.cern,https://github.com/root-project/root/pull/323#issuecomment-273161620,1,['depend'],['dependencies']
Integrability,"Hi Brian. Thanks for your suggestion. I'll have a look at the implications of the BUILD_PRODUCTS, and eventually apply it everywhere. The only concern is that you need to know the a priori what are the libraries and headers produced by building the external. ; Until now we have handled the dependencies by adding the following statements in the package that have a dependence to the builtin libraries:; ```; if(builtin_xrootd); ROOT_ADD_BUILTIN_DEPENDENCIES(Netx XROOTD); endif(); ```; In this example the target `Netx` depends on the libraries produced by the target `XROOTD`, which is using the `ExternalProject`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/323#issuecomment-272866548:291,depend,dependencies,291,https://root.cern,https://github.com/root-project/root/pull/323#issuecomment-272866548,3,['depend'],"['dependence', 'dependencies', 'depends']"
Integrability,"Hi Carsten, looks great so far. Three things, two optional ones:; - I left some comments to modernise the iterators.; - Did I miss something or is RooPower implementing the same as RooPolynomial?; - I believe we have a solution to resolve the PDF-Function duality, but that is better discussed in person.; - [Optional] Analytical integrals. Since we know how to integrate these, the integrals (at least over `x`) should probably be implemented. This gets around triggering numeric integrals. I can send you a unit test class that runs the numeric against the analytical integral and compares. Interested? This should speed up the norms quite a bit.; - [Optional, but nice to have] Could you send me plots of the two? I would like to include them on the webpage and try to make it look like this:; https://root.cern.ch/doc/master/classRooJohnson.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4015#issuecomment-507164679:362,integrat,integrate,362,https://root.cern,https://github.com/root-project/root/pull/4015#issuecomment-507164679,1,['integrat'],['integrate']
Integrability,"Hi Carsten,. here are some answers:. > general coding style. I like the const-correctness fixes. Can you bundle them in an extra PR, and we merge them before the rest gets merged? This is a code improvement, anyway. The addition of functions such as `GetPreprocess...()` can probably added as well. > packaging: Should these new files continue to live in RooStats, or should they go to a new subpackage of RooFit?. All YML/JSON-related things would best go into something that can be switched on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`?; > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting?. I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes.; > build system: Is the way I encoded the optional dependency acceptable?. I don't know. @oshadura? @Axel-Naumann ?; > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant?. As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:; > ; > lack of functionality - more things will be added over time; > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added!; > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code?. It would be good if every function and class had documentation. They are best placed in the implementation like in; https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5151#issuecomment-598765709:864,interface,interface,864,https://root.cern,https://github.com/root-project/root/pull/5151#issuecomment-598765709,2,"['depend', 'interface']","['dependency', 'interface']"
Integrability,"Hi Danilo,; I'm also for the ""one line solution"". As Axel said, we'll make `cling::printValue()` interface available.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2644#issuecomment-423149460:97,interface,interface,97,https://root.cern,https://github.com/root-project/root/pull/2644#issuecomment-423149460,1,['interface'],['interface']
Integrability,"Hi Enric, ; Thank you very much! ; Indeed it is a kind of problem; I rely on pickling in my project for two cases:. 1. implicitely, where I use the `parallel python`/`multiprocess`/`multiprocessing`/`pathos` to split the task into subtasks that can be executed in parallel in different processes or even on different nodes. Behind the scene such stuff relies on serialization/deserialization of objects via `pickle` or `dill`; 2. explicitely where I store my data into custom `shelve`-like database, that relies on serialization of objects via pickling. - for (1) I do not know if I can properly inject ""import ROOT"" into the code flow at all vital occurances. ; - for (2) of course I can pre-import `ROOT` for all manipulations with custom database, but it is rather unnatural solution. E.g. opening a (originally `ROOT`-blind) database I need to know that it contains some `ROOT`-objects, and in this case use `import ROOT` before accessing objects from the database. Currently I've added `import ROOT` just in the code of database, but it is not a perfect solution. It is acceptable as kind of a temporary patch, but if possible I'd like to avoid it in the long-term future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6552#issuecomment-709078495:596,inject,inject,596,https://root.cern,https://github.com/root-project/root/issues/6552#issuecomment-709078495,1,['inject'],['inject']
Integrability,"Hi Enrico, great work! I understand it will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory? And then the partial ranges will be computed with that portion size plus the number of slots. We could even make the portion size configurable by the user (to control the memory usage of the DS), which at the same time allows to control the granularity of the computations. My only doubt is: if we allow to read a source little by little, does this mean that after each of these reads (and the corresponding processing of the read entries) there will be a synchronization barrier, after which the next portion will be read and the tasks for that portion will be spawned?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1219#issuecomment-338593393:618,synchroniz,synchronization,618,https://root.cern,https://github.com/root-project/root/pull/1219#issuecomment-338593393,1,['synchroniz'],['synchronization']
Integrability,"Hi Guys,. * Added support to check if R interface is running in the thread of event loop, to avoid segfault in scientific linux running tests.; * Fixed some datatypes according to coding conventions. Cheers,; Omar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/446:40,interface,interface,40,https://root.cern,https://github.com/root-project/root/pull/446,1,['interface'],['interface']
Integrability,"Hi Guys,. According to the new design of TMVA the interfaces TMVAGui, TMVAMultiClassGui and TMVARegGui needs an update to support the new format that is stored the results.; In this pull requests I have the code to updated TMVAGui to do visualization of two class classification.; lets see http://oproject.org/tiki-index.php?page=TMVA#TMVAGuis. I will continue working to updated TMVAMultiClassGui and TMVARegGui.; NOTE: all requirements accorded in the meeting was implemented. Best Regards. Omar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/143:50,interface,interfaces,50,https://root.cern,https://github.com/root-project/root/pull/143,1,['interface'],['interfaces']
Integrability,"Hi Hans, ; Thank you for the update. ; Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:; ```; Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1; Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9; Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000; Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9; Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16; Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22; Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34; Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41; Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-732288624:64,message,message,64,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-732288624,1,['message'],['message']
Integrability,"Hi Ivan, thank you, I have some doubts about the changes:. - I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call; - the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10705#issuecomment-1148383295:187,message,message,187,https://root.cern,https://github.com/root-project/root/pull/10705#issuecomment-1148383295,2,['message'],['message']
Integrability,"Hi John,. > The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting > issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. . Yes and the way it was resolved (presumedly by the web interface) is sub-optimal. The history of master looks like:; ```; * 203703f - (71 minutes ago) coverity 61577: fix resource leak delete [] c — John Harvey; * e815eaa - (2 hours ago) coverity 61279: fix copy/paste error — John Harvey; * ed09395 - (6 days ago) resolving merge conflicts — John Harvey; |\ ; | * 6c63896 - (6 days ago) Fix for failing test (too strict tolerances for floating point values) — Guilherme Amadio; | * 9d6ac44 - (7 days ago) Data members used as array size must be static. — Philippe Canal; | * 27d58ca - (7 days ago) - Allows any number of options - Small mods in the online help - Spell check — Olivier Couet; ....; | * | | | | 7db5e8c - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey; ....; * | | | | | 96fa411 - (20 hours ago) Downgrade to C++11 — Philippe Canal (origin/master, origin/HEAD); ....; * | a18c480 - (8 weeks ago) Coverity 94053: fixed uninitialised class members — John Harvey; ```. So for example the commit ""Coverity 94053: fixed uninitialised class members"" is twice in your master's history (that is because the merge/resolve conflict rather than having done a rebase). At this point the best is to do some manual intervention on your repository to 'clean-up' your master. . This would include:; * make a branch out of your master to make sure to not lose anything:; ```git branch masterApril2017 203703f```; * do a hard reset of master to match origin/master; ```git checkout master; git reset --hard origin/master```; * Re-apply the commit with a merge conflict.; ```git diff 6c63896..ed09395 math/mathmore/test/testInterpolation.cxx | patch -p1; git commit -m ""Redo: removed duplicate increment in for loop (c627ce92488abd79)""```; * cherry-pick the",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/524#issuecomment-297096018:271,interface,interface,271,https://root.cern,https://github.com/root-project/root/pull/524#issuecomment-297096018,1,['interface'],['interface']
Integrability,"Hi Jonas; thank you for your answer!. I switched to LCG dev3 to test on master and noticed that the fitted parameter value is equal to what it was in 6.26.04+batchmode, so still different from no batchmode or batchmode in 6.24.06; It is also still dependent on label mapping (the likelihood too). Is this expected?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10991#issuecomment-1189350472:248,depend,dependent,248,https://root.cern,https://github.com/root-project/root/issues/10991#issuecomment-1189350472,1,['depend'],['dependent']
Integrability,"Hi Larry,. wow, great.; Before merging, I'd have two observations to discuss:; o I wonder if this can be integrated with the eventsSelector tool; o I wonder if one could list the branches, both included and excluded, as a semicolon separated list, e.g. ""muons;muons_calib;ak6_jets;ak6_calib_jets"" so to be able to pick just the information needed for a quick (or not so quick) analysis. Cheers,; Danilo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/150#issuecomment-205270982:105,integrat,integrated,105,https://root.cern,https://github.com/root-project/root/pull/150#issuecomment-205270982,1,['integrat'],['integrated']
Integrability,Hi Mattias. I do not think this works. The DEPENDS in ROOT_ADD_TEST() is intended for adding dependencies between tests. The solution is probably adding a 'pre-command' to the test `test-stressproof` that builds the target `TestData` before running the actual test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/402#issuecomment-287565335:43,DEPEND,DEPENDS,43,https://root.cern,https://github.com/root-project/root/pull/402#issuecomment-287565335,2,"['DEPEND', 'depend']","['DEPENDS', 'dependencies']"
Integrability,"Hi Oksana, `[Modulariz.]` looks a bit awkward. I'd remove, as the commit message is clear without it. If you want to keep it, maybe consider not abbreviating. We know you are working on modularization, but someone that doesn't know might be more confused than helped by the tag.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2425#issuecomment-410149743:73,message,message,73,https://root.cern,https://github.com/root-project/root/pull/2425#issuecomment-410149743,1,['message'],['message']
Integrability,"Hi Olivier,. Does CERN have any AlmaLinux servers that you can login to? I see for example nightly builds for EL9, /cvmfs/sft.cern.ch/lcg/views/dev3/latest/*el9*; It looks to me like the problem goes with the machine where one runs ROOT, not with the machine which is used for display, so you may be able to ssh from your laptop to a server to reproduce the problem. Thank you for your reply,; Andrei. ________________________________________; From: Olivier Couet ***@***.***>; Sent: Tuesday, August 15, 2023 2:49 AM; To: root-project/root; Cc: Andrei Gaponenko; Author; Subject: Re: [root-project/root] clip edit in GL viewer is still broken (Issue #13418). I tried again on my Mac with master and I can move it along the 3 axes. I do not have an AlmaLinux machine to test. —; Reply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_root-2Dproject_root_issues_13418-23issuecomment-2D1678546562&d=DwMCaQ&c=gRgGjJ3BkIsb5y6s49QqsA&r=O47fc5vzDTR2V_gla4Ub0Q&m=r7ZxRaIgpeCJw_ue5BfGS1dtdno4mPpIqRvhqmrMmWfcSlc9fTv67sVSdCikkDZU&s=OXQyaxyvkLYVHTLmK02k3UQCsjzsftHmIrnsEg5N3Ek&e=>, or unsubscribe<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_notifications_unsubscribe-2Dauth_AAXVCGWHOEXNDBZN3P62EOLXVMSYJANCNFSM6AAAAAA3I665NU&d=DwMCaQ&c=gRgGjJ3BkIsb5y6s49QqsA&r=O47fc5vzDTR2V_gla4Ub0Q&m=r7ZxRaIgpeCJw_ue5BfGS1dtdno4mPpIqRvhqmrMmWfcSlc9fTv67sVSdCikkDZU&s=HbmOErQ57tTo8HANo7zUUFprpz03lcgq1YaOrYnVHkg&e=>.; You are receiving this because you authored the thread.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13418#issuecomment-1679002466:1524,Message,Message,1524,https://root.cern,https://github.com/root-project/root/issues/13418#issuecomment-1679002466,1,['Message'],['Message']
Integrability,"Hi Olivier,. I had a similar situation with a Fermilab server and requested computing support to install missing libraries. I do not have a CERN account so can't open a ticket for lxplus9, but it makes sense to install the libraries there to make the machine usable with ROOT. Andrei. ________________________________________; From: Olivier Couet ***@***.***>; Sent: Tuesday, August 15, 2023 9:27 AM; To: root-project/root; Cc: Andrei Gaponenko; Author; Subject: Re: [root-project/root] clip edit in GL viewer is still broken (Issue #13418). Gl does not seem properly installed there:. $ glxgears; libGL error: No matching fbConfigs or visuals found; libGL error: failed to load driver: swrast; Error: glXCreateContext failed. —; Reply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_root-2Dproject_root_issues_13418-23issuecomment-2D1679025586&d=DwMCaQ&c=gRgGjJ3BkIsb5y6s49QqsA&r=O47fc5vzDTR2V_gla4Ub0Q&m=pYI_UukDspkvToM08be43rqW1Ini373CaTW7YzYzXvzaAbgFN1hfOxDILOY5LkIt&s=ejeOXHRM6NnnTa4TA470cGD4wj63fFxBITffmOQ02lc&e=>, or unsubscribe<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_notifications_unsubscribe-2Dauth_AAXVCGSO4HWIKORE7ZRV24LXVOBONANCNFSM6AAAAAA3I665NU&d=DwMCaQ&c=gRgGjJ3BkIsb5y6s49QqsA&r=O47fc5vzDTR2V_gla4Ub0Q&m=pYI_UukDspkvToM08be43rqW1Ini373CaTW7YzYzXvzaAbgFN1hfOxDILOY5LkIt&s=Qa0IvEvjeyrinJUtkFkmyfcNPybfsSDQQI7cpx17nBw&e=>.; You are receiving this because you authored the thread.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13418#issuecomment-1679169141:1476,Message,Message,1476,https://root.cern,https://github.com/root-project/root/issues/13418#issuecomment-1679169141,1,['Message'],['Message']
Integrability,"Hi Olivier,; thanks for taking a look at this! Indeed this tutorial depends on pyspark, which is one of our optional runtime dependencies since 6.24, as also described in [requirements.txt](https://github.com/root-project/root/blob/master/requirements.txt). I can run the tutorial on my machine and it also works on our CI nodes where I installed `pyspark`, so I think it's probably some issue with `\macro_code` and similar magic we use for the tutorials, I'm not very familiar with those",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7802#issuecomment-817826921:68,depend,depends,68,https://root.cern,https://github.com/root-project/root/issues/7802#issuecomment-817826921,2,['depend'],"['dependencies', 'depends']"
Integrability,"Hi Omar, ; Very nice contribution. Thank you !. I was trying to test it, but it fails to compile, when generating the dictionary, because it misses the location of ipopt header file at the dictionary generation. . But, I see the header file IpoptMinimizer.h depends of ipopt headers. Can we remove this dependency and keep only at the source file level, by just using forward declarations ? ; This is done for example in MathMore for GSL. ; This will reduce the compile time dependency. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3249#issuecomment-454810244:258,depend,depends,258,https://root.cern,https://github.com/root-project/root/pull/3249#issuecomment-454810244,3,['depend'],"['dependency', 'depends']"
Integrability,"Hi Otto,; Have you some comments on my last message ?; Cheers,; Olivier",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3552#issuecomment-524862681:44,message,message,44,https://root.cern,https://github.com/root-project/root/pull/3552#issuecomment-524862681,1,['message'],['message']
Integrability,"Hi Patrick, thanks a lot for these excellent developments! I will start the Jenkins tests to see if the CI can build it. To successfully integrate these developments, we should split the changes up into smaller PRs, as discussed in the RooFit weekly meeting. We could, for example, chunk it like this:. 1. First PR with changes to `math` only (`mathcore` and `minuit2`). Please ensure that no commit in this PR doesn't touch both math packages at the same time if not necessary. As far as I understood, the changes to `mathcore` and `minuit2` factorize, and you can make a commit for `mathcore` and then one or more for `minuit2`.; 2. Second PR with the new `roofit` packages `multiprocess` and `roofitZMQ`, again with separate commits for the individual packages. I guess you'd have to exclude the multiprocessing test that depends on roofit at that point, though. In this PR, we can also discuss in more detail how to manage the zero MQ dependency.; 3. Third PR with the rest, integrating the new `multiprocess` and `roofit/ZMQ` packages into RooFit. Feel free to split it up further if you think that's better. Some general things to consider in the new PRs:. * It seems unfeasible to rewrite the commit history in this PR to something that factorizes as proposed above. I guess you need to create new commits from the diff that only affect single packages.; * Please avoid mixing code formatting changes with actual changes in the same commit.; * Even better, avoid code formatting changes altogether. We want to eventually use a well-defined clang-format style (specified in [this file](https://github.com/root-project/root/blob/master/.clang-format)), so changing the formatting in your PRs to something that is not compliant with the clang-format style is not meaningful.; * If your developments introduce new files (in particular the new `roofit` packages), please apply the ROOT clang-format style, so we don't have to touch these files again later just for the sake of reformatting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8294#issuecomment-854587983:137,integrat,integrate,137,https://root.cern,https://github.com/root-project/root/pull/8294#issuecomment-854587983,4,"['depend', 'integrat']","['dependency', 'depends', 'integrate', 'integrating']"
Integrability,"Hi Patrick, thanks for the explanation, things make more sense for me now! Interesting that you also experimented with making the full RooAbsMinimizer templated. I agree that making the RooAbsMinimizer a templated class is not the best solution, but I still think we can even avoid the templated constructor, making the code more clear and reducing compile time/binary size. You already have this nice `FcnMode` enum class which I think is great because enum class is typesafe while enum is not. Taking this enum, you could have a RooMinimizer constructor with the signature:; ```; RooMinimizer(RooAbsReal &function, FcnMode fcnMode);; ```; Then depending on `fcnMode`, you can create the correct function instance. You would not even have to check for the `logic_error`, because with the enum class is is ensured that the value is either `classic` or `gradient`. You would just need a little helper struct to make the `RooMinimizer::create()` function work, something to translate from the function class to the FcnMode:. ```C++; class RooMinimizer { ; ; ... ; private: ; ; template <typename MinimizerFcn ; struct GetFcnMode { ; static const FcnMode value = FcnMode::classic; ; }; ; ; ... ; ; } ; ; ; template<> ; struct RooMinimizer::GetFcnMode<RooGradMinimizerFcn> { ; static const FcnMode value = FcnMode::gradient; ; }; ; ; ; // static function ; template <typename MinimizerFcn> ; std::unique_ptr<RooMinimizer> RooMinimizer::create(RooAbsReal &function) { ; return std::make_unique<RooMinimizer>(function, GetFcnMode<MinimizerFcn>::value); ; } ; ```. Would this approach also work with your upcoming developments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8596#issuecomment-879770741:646,depend,depending,646,https://root.cern,https://github.com/root-project/root/pull/8596#issuecomment-879770741,1,['depend'],['depending']
Integrability,"Hi Philippe, . The error message is still clear, because we get the output of clang compilation. For example by doing: . ```; TF1 f(""f"",""sinn(x)+cos(x)""); ```. we get ; ```; input_line_11:2:65: error: use of undeclared identifier 'sinn'; Double_t TFormula____id8191511338914148949(Double_t *x){ return sinn(x[0])+TMath::Cos(x[0]) ; }; ^; Error in <TFormula::PrepareEvalMethod>: Can't compile function TFormula____id8191511338914148949 prototype with arguments Double_t*; Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling; Error in <TFormula::ProcessFormula>: Formula ""sinn(x)+cos(x)"" is invalid !; (TF1 &) Name: f Title: sinn(x)+cos(x); ```. Before we were getting also an extra message as ; ```; Error in <TFormula::ProcessFormula>: Could not find sinn function with 1 argument(s); ```. which could be useful, but not really needed",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2017#issuecomment-391022050:25,message,message,25,https://root.cern,https://github.com/root-project/root/pull/2017#issuecomment-391022050,2,['message'],['message']
Integrability,"Hi Philippe,. I dont understand this at all. I am using the standard web interface and every time I ask for a new Pull Request it just edits the existing one.; No-one has been able to explain to me why.; Even if I create a new branch, I guess the same behaviour will continue surely. The merge conflict was just because Pere intervened to correct a fix I had made (just a formatting issue) but he did it directly in the main repository and in a way that left my ‘origin’ out of sync. It seems I am the only one using 3 copies of the repository (local, origin and upstream), and the only one making PRs. Or is this not true?. John. > On 25 Apr 2017, at 17:28, Philippe Canal <notifications@github.com> wrote:; > ; > 2 of the commits were fixing merge conflicts, the last 2 are real bugs fixed today.; > ; > This is actually the problem (it creates a 'parallel' history where all your commits are there twice (up to the merge commit). I recommend you start from 'scratch' a new branch and cherry-pick your new commits.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/pull/524#issuecomment-297068253>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AYA2ysZHd0OiOdW6MP2-SjBSw4mRBt4Gks5rzhEugaJpZM4NHlfA>.; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/524#issuecomment-297071671:73,interface,interface,73,https://root.cern,https://github.com/root-project/root/pull/524#issuecomment-297071671,1,['interface'],['interface']
Integrability,"Hi Philippe,. I just pushed in another commit, fixing the formatting and changing to have TTree::TClusterIterator::Previous(). I also added a gtest, which was requested by Vassil. . I still haven't changed the interface, because I have no good idea of how to do it. I guess we want to keep GetMaxVirtualSize() < 0 to determine how many clusters to retain, but use something else to trigger the pre-fetching of complete cluster. What would that be? I saw fBits mentioned, but didn't really understand the context. Can you walk me through that?. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/796#issuecomment-323832023:210,interface,interface,210,https://root.cern,https://github.com/root-project/root/pull/796#issuecomment-323832023,1,['interface'],['interface']
Integrability,"Hi Philippe,; ; > it might be impossible to avoid synonyms that are semantically distincts ... a good example is two free standings (not attached to any directory) histograms that happens to have the same name in two distinct and independent part of the code (e.g. two CMSSW modules). Good point. I admit that did not really think to this case. > The other major problem is that it unnecessary tie (via that global mutex) all the 'parallel' histogram, this means that the overall scalability is inherently decreased. > Rather than a completely global state, wouldn't it make sense to have a wrapper object (for example TThreadedObject) be the holder of the lock and list for a single set of related histogram.; > This would both reduce contention and guarantees that the histograms are really related. I agree on this and TThreadedObject could be the place where to control this. The drawback is that we would then not have a solution outside TThreadedObject, i.e. we will have to find a way to force the use of TThreadedObject in MT cases. > A 3rd significant problem (but fixeable) is that the operation covered by the ReadWrite lock are not atomic (and/or trivial) and for the look of it could plausibly indirectly request the ROOT global lock and thus can lead to deadlocks (from some other code that hold the ROOT global locks and request the Write part of the ReadWrite lock). Not sure to understand, you mean FindObject?; I will have a closer look. > A 4th deficiency is that once activated for one histogram it seems to apply to all histogram. i.e. as far as can tell if you one parallel histograms and 10,000 single-thread histograms, filling the single-thread histogram still has to go through the multi-thread registration/mechanism. Ok, a solution 'per histogram' would also address this. Thanks for going deep into it,; Gerri",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/902#issuecomment-325703398:591,wrap,wrapper,591,https://root.cern,https://github.com/root-project/root/pull/902#issuecomment-325703398,1,['wrap'],['wrapper']
Integrability,"Hi Rod,. What does. ```; LD_PRELOAD=/srv/workDir/96340ef3-75b1-46cf-8910-8a2f76b7068c/$LIB/wrapper.so; ```. do? That would be my first suspect. Since `$LD_LIBRARY_PATH` lists our software directories in the correct order, based on just that XRootD **should** be found under:. ```; [bash][thor]:~ > ls -l /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrd*; lrwxrwxrwx 1 cvmfs cvmfs 19 Sep 10 13:12 /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdAppUtils.so -> libXrdAppUtils.so.1; lrwxrwxrwx 1 cvmfs cvmfs 23 Sep 10 13:12 /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdAppUtils.so.1 -> libXrdAppUtils.so.1.0.0; -rwxr-xr-x 1 cvmfs cvmfs 74512 Sep 10 03:19 /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdAppUtils.so.1.0.0; -rwxr-xr-x 1 cvmfs cvmfs 18432 Sep 10 03:19 /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdBlacklistDecision-4.so; -rwxr-xr-x 1 cvmfs cvmfs 82136 Sep 10 03:21 /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdBwm-4.so; -rwxr-xr-x 1 cvmfs cvmfs 13552 Sep 10 03:19 /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdCksCalczcrc32-4.so; lrwxrwxrwx 1 cvmfs cvmfs 17 Sep 10 13:12 /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdClient.so -> libXrdClient.so.2; lrwxrwxrwx 1 cvmfs cvmfs 21 Sep 10 13:12 /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdClient.so.2 -> libXrdClient.so.2.0.0; -rwxr-xr-x 1 cvmfs cvmfs 663320 Sep 10 03:19 /cvmfs/a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-744308661:91,wrap,wrapper,91,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-744308661,1,['wrap'],['wrapper']
Integrability,"Hi Sergey, . The class `TJSON` is indeed similar to the library of _nlohmann_ except a whole lot more lean (_nlohmann_ is 14,748 lines of code, while `TJSON` is 962 lines of code - as per `sloccount`). _nhlohmann_ tries to be very general and in fact expands upon the JSON standard, while `TJSON` tries to be as simple as possible. . Also, for `TJSON` I tried to do a bit of ROOT integration. For example, one can get arrays as `TArrayD` or `TArrayI` if possible, or one can assign from `TParameter<T>`. This is simple to make life a little easier for people. . That said, I have no particular preference for either. However, you should consider in the build system to use system available installation of _nlohmann_ instead of using built-in copy. You really don't want different versions of the same code floating around on a given machine. . Yours,. Christian",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6889#issuecomment-736290535:380,integrat,integration,380,https://root.cern,https://github.com/root-project/root/issues/6889#issuecomment-736290535,1,['integrat'],['integration']
Integrability,"Hi Sir !; Thank you so much for your reply; My Details are as follows; Distributor ID: Ubuntu; Description: Ubuntu 23.04; Release: 23.04; i have downloaded the root file; root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying; to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>; wrote:. > Which version of ROOT, which platform (which Linux distribution, which; > version), how did you configure, what's your compiler?; > Why do you build from source rather than just conda install root or snap; > install root-framework or dnf install root or taking one of the binary; > releases <https://root.cern/releases/release-63000/>?; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14102#issuecomment-1825909875:1069,Message,Message,1069,https://root.cern,https://github.com/root-project/root/issues/14102#issuecomment-1825909875,1,['Message'],['Message']
Integrability,"Hi Vassil,. > I think it may be a better approach if we expand the transitive dependencies. Eg. if we have Core<-RIO<-Blah and you specify only RIO, the system should automatically expand Core. The dependencies I am adding in this pull request are not transitive, they are *direct* dependencies created because a library header or source includes a header from the other library. Each commit should have in its message the reason why the dependency is necessary, and I will amend those that don't later. Expanding all dependencies and linking them explicitly probably won't help here, it will just create a lot of unnecessary overlinking. The same is true for optional dependencies, I don't see how expanding all dependencies can help, since the optional dependency is the ""RIO"" from your example, i.e., a direct dependency, even if optional.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4299#issuecomment-526039359:78,depend,dependencies,78,https://root.cern,https://github.com/root-project/root/pull/4299#issuecomment-526039359,10,"['depend', 'message']","['dependencies', 'dependency', 'message']"
Integrability,"Hi Vassil,. Could you enhance the commit message with a short explanation of why the fear in the comment are no longer a problem and/or what does D40901 do :) ?. Thanks,; Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1547#issuecomment-359567742:41,message,message,41,https://root.cern,https://github.com/root-project/root/pull/1547#issuecomment-359567742,1,['message'],['message']
Integrability,"Hi Vincenzo,. I mean the ROOT virtual machine which can be mounted on a virtual box. It; is suggested in; https://github.com/root-project/training/tree/master/BasicCourse. Best,; Fatemeh. On Mon, Jan 30, 2023 at 10:24 AM Vincenzo Eduardo Padulano <; ***@***.***> wrote:. > Hi @Fesfandi <https://github.com/Fesfandi> ,; >; > I am not completely sure what you mean by ""ROOT VM"" and I don't think; > there is any release package shipped via cernbox. To install ROOT, please; > follow the installation instructions at https://root.cern/install; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/12158#issuecomment-1408253053>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AUIK6LJT2ZNRYY7QOILGZTLWU6CF7ANCNFSM6AAAAAAUKZAASY>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12158#issuecomment-1408267830:861,Message,Message,861,https://root.cern,https://github.com/root-project/root/issues/12158#issuecomment-1408267830,1,['Message'],['Message']
Integrability,"Hi Xavi, ; Can you remind me please what this PR brings in addition ? ; I see a re-arrange of the functions implementing the fit methods, but in addition what else was changed ? The commits message are short",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2723#issuecomment-602545372:190,message,message,190,https://root.cern,https://github.com/root-project/root/pull/2723#issuecomment-602545372,1,['message'],['message']
Integrability,"Hi Xavier,. I would very much like to be able to use ROOT together with the latest oneAPI beta, if at all possible. Since oneAPI comes (amongst many other things) with TBB, if I want to use ROOT reliably in that environment, it should really use oneAPI's TBB version. (In the past this worked quite well for my tests.). Wanting to hide the public TBB dependency from your interfaces is a good goal. But I would not do it with a forward declaration. Even in case the class would not be hidden behind version specific namespaces. If you do need to use the TBB class in the interface of the class, then tough luck. Then the class can just not hide its dependence on TBB, and that's the end of it. You could however try to design the class such that it would not have to directly reference the `tbb::task_arena` type at all in its interface. Then you could cleanly hide the include of this type into the source file. Long story short: TBB is changing its interface, as we've been warned for a while. If ROOT wants to be able to use multiple versions of TBB at the same time, it must stop relying on explicit names like `tbb::interface7::task_arena`... Cheers,; Attila",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6174#issuecomment-673331218:351,depend,dependency,351,https://root.cern,https://github.com/root-project/root/pull/6174#issuecomment-673331218,6,"['depend', 'interface']","['dependence', 'dependency', 'interface', 'interfaces']"
Integrability,"Hi `root-project/root`!. This is a one-off automatically generated pull request from LGTM.com :robot:. You might have heard that we’ve integrated LGTM’s underlying CodeQL analysis engine natively into GitHub. The result is [**GitHub code scanning**](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)!. With LGTM fully integrated into code scanning, we are focused on improving CodeQL within the native GitHub code scanning experience. In order to take advantage of current and future improvements to our analysis capabilities, we suggest you enable code scanning on your repository. Please take a look at our [blog post for more information](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/). This pull request enables code scanning by adding an auto-generated [`codeql.yml` workflow file for GitHub Actions](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/setting-up-code-scanning-for-a-repository#setting-up-code-scanning-manually) to your repository — take a look! We tested it before opening this pull request, so all should be working :heavy_check_mark:. In fact, you might already have seen some alerts appear on this pull request!. Where needed and if possible, we’ve adjusted the configuration to the needs of your particular repository. But of course, you should feel free to tweak it further! Check [this page](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#editing-a-code-scanning-workflow) for detailed documentation. Questions? Check out the FAQ below!. ### FAQ; <details>; <summary>Click here to expand the FAQ section</summary>. #### How often will the code scanning analysis run?; By default, code scanning will trigger a scan with the CodeQL engine on the following events:; * On every pull req",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11808:135,integrat,integrated,135,https://root.cern,https://github.com/root-project/root/pull/11808,2,['integrat'],['integrated']
Integrability,"Hi all! To assess the situation, I tried to build ROOT with CUDNN 9.0 myself, and it is actually a *huge* interface change!. I wouldn't recommend to anyone to do this migration without the help of CI tests, which we don't have for anything CUDA-related. Just for reference, the previous migration to CUDNN 8.0 wasn't done by a core ROOT developer but indeed generously by the Arch package maintainer @kgizdov in 2020:; https://github.com/root-project/root/pull/6058; Of the 3350 lines of code in `tmva/tmva/src/DNN/Architectures/Cudnn`, a significant fraction had to be changed. Therefore, we need to have a discussion: should `cudnn` even be enabled in any build of ROOT?. I have a few more data points, besides the observation that it's only packagers that seem to care about `cudnn=ON`:; * All questions about ""cudnn"" on the forum are about build problems, not actual usage: https://root-forum.cern.ch/search?q=cudnn; * On indico, it also doesn't seem like it's used much: https://indico.cern.ch/search/?q=cudnn&sort=mostrecent; * There is only one presentation about this work (a [summer student talk](https://indico.cern.ch/event/833883/contributions/3494481/attachments/1897066/3136480/SFT_Talk.pdf)). For 3350 lines of code in ROOT where we don't know if they are used, the support burden is very high. IMHO, you, @andresailer and @lahwaacz should consider going for `cudnn=OFF`, and we should only continue to invest in this ROOT component once an actual user complains about its absence either here on GitHub or on the forum. @lmoneta and @dpiparo, what is your opinion?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15413#issuecomment-2123646791:106,interface,interface,106,https://root.cern,https://github.com/root-project/root/issues/15413#issuecomment-2123646791,1,['interface'],['interface']
Integrability,"Hi everyone!. I am a GSoC student working on introducing Recurrent Neural Networks in TMVA. This is the first part of commits which introduces the `RNNLayer` class as well as `RecurrentNet` wrapper along with their respective methods (Forward, Backward etc). I will soon add tests for different functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/685:190,wrap,wrapper,190,https://root.cern,https://github.com/root-project/root/pull/685,2,['wrap'],['wrapper']
Integrability,"Hi everyone,; the problem arises because `/cvmfs/sft.cern.ch/lcg/releases/LCG_102/ROOT/6.26.04/x86_64-centos7-gcc11-opt/ROOT-env.sh` (or I guess whatever setupATLAS is doing) is not exporting the CMAKE_PREFIX_PATH to all dependencies.; exporting CMAKE_PREFIX_PATH to point to the folder for nlohmann_json fixes this. I.e., this works; ```; export PATH=/cvmfs/sft.cern.ch/lcg/contrib/CMake/3.23.1/Linux-x86_64/bin/:$PATH; source /cvmfs/sft.cern.ch/lcg/releases/LCG_102/ROOT/6.26.04/x86_64-centos7-gcc11-opt/ROOT-env.sh; export CMAKE_PREFIX_PATH=$JSONMCPP__HOME:$CMAKE_PREFIX_PATH. cat > CMakeLists.txt << EOF; cmake_minimum_required(VERSION 3.20); project(test); find_package( ROOT REQUIRED COMPONENTS Core RIO MathCore Matrix HistFactory RooFitCore RooFit Hist RooStats Minuit2 Minuit). EOF. mkdir -p build; cd build; cmake ..; ```. Cheers,; Andre",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10963#issuecomment-1186933339:221,depend,dependencies,221,https://root.cern,https://github.com/root-project/root/issues/10963#issuecomment-1186933339,1,['depend'],['dependencies']
Integrability,"Hi please check here:; https://root-forum.cern.ch/t/6-24-00-does-not-complile-on-redhat-8-3/45161. details:. Hello,; I’m running into problems compiling root 6.24.00:. $ cmake -Dclad=OFF -DCMAKE_INSTALL_PREFIX=…/root_install …/root-6.24.00; $ cmake --build . – install -j8. …; [ 76%] Linking CXX static library …/…/…/…/lib/libclingInterpreter.a; [ 76%] Built target clingInterpreter; Scanning dependencies of target CLING; [ 76%] Built target CLING; Scanning dependencies of target LLVMRES; [ 76%] Copying LLVM resource and header files; [ 76%] Built target LLVMRES; (stucks…). $ cmake --build . --install; [ 0%] Built target AFTERIMAGE; [ 0%] Built target OPENUI5; [ 0%] Built target LZMA; [ 0%] Performing download step (download, verify and extract) for ‘VDT’; (stucks). seems that vdt uses network access, which I do not have (not mentioned in the docs).; I think I do not need it anyhow…. so again:; $ rm -rf *; $ cmake -Dclad=OFF -Dvdt=OFF -DCMAKE_INSTALL_PREFIX=…/root_install …/root-6.24.00; $ cmake --build . --install; …; [ 79%] Generating G__Thread.cxx, …/…/lib/Thread.pcm; [ 79%] Generating G__forward_listDict.cxx, …/…/lib/libforward_listDict.rootmap; [ 79%] Generating G__vectorDict.cxx, …/…/lib/libvectorDict.rootmap; In file included from input_line_7:21:; /srv/ussapc/home/ussapc/sw/root_build/include/ROOT/TReentrantRWLock.hxx:26:10: fatal error: ‘tbb/enumerable_thread_specific.h’ file not found; #include “tbb/enumerable_thread_specific.h”; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; Error: /srv/ussapc/home/ussapc/sw/root_build/core/rootcling_stage1/src/rootcling_stage1: compilation failure (/srv/ussapc/home/ussapc/sw/root_build/lib/libThreaddb2bde6cdd_dictUmbrella.h); gmake[2]: *** [core/thread/CMakeFiles/G__Thread.dir/build.make:109: core/thread/G__Thread.cxx] Error 1; gmake[1]: *** [CMakeFiles/Makefile2:27339: core/thread/CMakeFiles/G__Thread.dir/all] Error 2; gmake[1]: *** Waiting for unfinished jobs…. I found out that tbb is required by imt, so again; $ rm -rf *; $ cmake -D",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292:393,depend,dependencies,393,https://root.cern,https://github.com/root-project/root/issues/8292,2,['depend'],['dependencies']
Integrability,"Hi sorry for the late reply, I tried and it works for ROOT 6.32 (I am finally able to see the right color in the loaded canvas), while with ROOT 6.30 I get ; ```; /test/./load_new.C:6:18: error: use 'template' keyword to treat 'Get' as a dependent template name; auto cnv = file->Get<TCanvas>(""c1"");; ^; template ; /test/./load_new.C:6:1: error: Syntax error; auto cnv = file->Get<TCanvas>(""c1"");; ^; FunctionDecl 0x5af6325fe230 <input_line_8:1:1, /test/./load_new.C:14:1> input_line_8:1:6 __cling_Un1Qu30 'void (void *)'; |-ParmVarDecl 0x5af6325fe178 <col:22, col:28> col:28 vpClingValue 'void *'; |-CompoundStmt 0x5af6326e1a70 <col:42, /test/./load_new.C:14:1>; | |-DeclStmt 0x5af6326de478 <line:3:1, col:35>; | | `-VarDecl 0x5af63264d6a8 <col:1, col:34> col:8 f 'TFile *' cinit; | | `-CXXNewExpr 0x5af6326de418 <col:12, col:34> 'TFile *' CXXMethod 0x5af6326db188 'operator new' 'void *(size_t)'; | | `-CXXConstructExpr 0x5af6326ddee0 <col:16, col:34> 'TFile':'TFile' 'void (const char *, Option_t *, const char *, Int_t)'; | | |-ImplicitCastExpr 0x5af6326dde68 <col:22> 'const char *' <ArrayToPointerDecay>; | | | `-StringLiteral 0x5af63264d788 <col:22> 'const char[11]' lvalue ""c_new.root""; | | |-CXXDefaultArgExpr 0x5af6326dde80 <<invalid sloc>> 'const char *'; | | |-CXXDefaultArgExpr 0x5af6326ddea0 <<invalid sloc>> 'const char *'; | | `-CXXDefaultArgExpr 0x5af6326ddec0 <<invalid sloc>> 'Int_t':'int'; | |-DeclStmt 0x5af6326df820 <line:6:1, col:36>; | | `-VarDecl 0x5af6326de508 <col:1, col:35> col:6 used cnv 'auto' cinit; | | `-CallExpr 0x5af6326df7c8 <col:12, col:35> '<dependent type>'; | | |-CXXDependentScopeMemberExpr 0x5af6326df6b0 <col:12, col:29> '<dependent type>' lvalue ->Get; | | | `-DeclRefExpr 0x5af6326de680 <col:12> '<dependent type>' lvalue Var 0x5af6326de578 'file' '<dependent type>'; | | `-StringLiteral 0x5af6326df7a8 <col:31> 'const char[3]' lvalue ""c1""; | |-CallExpr 0x5af6326df8c0 <line:8:1, col:11> '<dependent type>'; | | `-CXXDependentScopeMemberExpr 0x5af6326df87",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16560#issuecomment-2402546592:238,depend,dependent,238,https://root.cern,https://github.com/root-project/root/issues/16560#issuecomment-2402546592,1,['depend'],['dependent']
Integrability,"Hi there,. I am wondering what is going on with my bug report. I always need to fix the RootMacro.cmake (see first message) in order to work whenever I update ROOT. Best,; Andreas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10062#issuecomment-1379933531:115,message,message,115,https://root.cern,https://github.com/root-project/root/issues/10062#issuecomment-1379933531,1,['message'],['message']
Integrability,"Hi! :) RGL cmake file has already listed the dependency on ASImage before this. There are functions in TGLViewer that use TImage to export screenshots and to load textures. I assume the problem now is that there is an explicit include of stuff from TASImage. Should we just make this dependency explicit in the initial configure / cmake run?. Vincenzo also commented (in the above PR discussion or on MM) that builtin asimage is now always used, there is no external option. And asimage includes fallback implementations of all commonly use graphics file formats. How does TImage work if there is no TASImage? I guess it all just silently fails. And there is no other implementation of the TImage interface. I vote for cmake-time dependency -- as an error or to exclude RGL if asimage=off.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16250#issuecomment-2313078046:45,depend,dependency,45,https://root.cern,https://github.com/root-project/root/issues/16250#issuecomment-2313078046,4,"['depend', 'interface']","['dependency', 'interface']"
Integrability,"Hi! Nothing will happen to the old C++ code. The point of this PR is to have the possibility in C++ to use each command only one time. This is to make it consistent with the pyROOT interface, where the commands will be passed as keyword arguments that can't be repeated. I was just saying that after this PR, we could easily resolve ROOT-2784 by issuing a warning when any command argument is repeated, since now every command that can be repeated has also an aggregate alternative (`Link`, `Import`, and `Slice`). I guess we can even detect if the repeated command is one of these three commands and then suggest the `std::map` alternative in the warning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8406#issuecomment-860531734:181,interface,interface,181,https://root.cern,https://github.com/root-project/root/pull/8406#issuecomment-860531734,1,['interface'],['interface']
Integrability,"Hi! Since I didn't get feedback yet, I decided to just merge the refactor to check the consistency without the try-catch hack. If you need the public interface after all, fee free to open a new PR about that once this one is merged :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13748#issuecomment-1816424024:150,interface,interface,150,https://root.cern,https://github.com/root-project/root/pull/13748#issuecomment-1816424024,1,['interface'],['interface']
Integrability,"Hi, . A regression was introduced in TMutiGraph with a log scale; I found a commit that seems to be linked to my problem [https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604](https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604). my OS is debian10 x86_64 with gcc8.3. here is sample script to reproduce the bug :. ```; void multigraph(); {; auto c1 = new TCanvas(""c1"",""multigraph"",700,500);; c1->SetGrid();; c1->SetLogx();; c1->SetLogy();; auto *mg = new TMultiGraph();; std::vector<double> x1;; std::vector<double> sig1;; std::vector<double> sig2;; for (double E=1e-4;E<2e7;E*=1.1); {; 		x1.push_back(E);; 		sig1.push_back(10*pow(E,-0.1));; 		sig2.push_back(15*pow(E,-0.15));; 		}; auto g1 = new TGraph(x1.size(), x1.data(), sig1.data());; mg->Add(g1);; auto g2 = new TGraph(x1.size(), x1.data(), sig2.data());; mg->Add(g2);; mg->SetTitle(""; E (eV);#sigma (b)"");; mg->GetXaxis()->CenterTitle(true);; mg->GetYaxis()->CenterTitle(true);; mg->Draw(""AL"");; c1->SaveAs(""multigraph.pdf"");; }; ```. It works fine on versions 6.14.08, 6.18.04 and 6.20.06; TMultiGraph scale is wrong with versions 6.22.08, 6.24.06.; There is also an error message at the console (negative value for log scale). ```; Processing multigraph.C...; Error in <THistPainter::PaintInit>: log scale requested with a negative argument (-1.720339); Info in <TCanvas::Print>: pdf file multigraph.pdf has been created; ```. I remove the patch [https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604](https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604) on version 6.24.06 and it works again. thanks in advance",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9011:1187,message,message,1187,https://root.cern,https://github.com/root-project/root/issues/9011,1,['message'],['message']
Integrability,"Hi, ; Thank you for applying the changes in the code and to provide a tutorial and a test program. ; I have one more comment:; I still don't like having to pass a double** in the interface (in this case in the constructor). As you see that makes the code not nice (you see that also Travis complained). Since there is no easy solution for this, I would use std::vector<std::vector>> which gives the advantage that you could make it simply directly from a 2D initializer list. Otherwise my second preference is to use a simple double or float pointer and one assumes a proper order of the data. (e.g. raw major). . I would prefer having std::vector<std::vector<double>> for the contained type instead of std::vector<TArrayD>. . Thank you again for your changes and I hope we can merge this PR soon. Sorry for my delay in reviewing it . Lorenzo; Thank you if you can apply the ch",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3452#issuecomment-563254077:179,interface,interface,179,https://root.cern,https://github.com/root-project/root/pull/3452#issuecomment-563254077,1,['interface'],['interface']
Integrability,"Hi, ; Thank you for reporting this bug !; It looks to be a problem in a routine developed by HEP people, but it never came to GSL, it is copied inside Mathmore, ; see https://root.cern/doc/master/complex__quartic_8h_source.html. If I change the code in ROOT::Math::Polynomial::FindRoots to use the generic GSL function, gsl_poly_complex_solve, it ; works fine. This uses an iterative procedure instead of the analytical solution. GSL does not provide a function to solve analytically quartic equations. ; Probably we should change the code in Polynomial and forget about that quartic implementation until somebody fixes it. ; I am not sure if it is used somewhere else (e.g. CLHEP). Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6900#issuecomment-737131560:72,rout,routine,72,https://root.cern,https://github.com/root-project/root/issues/6900#issuecomment-737131560,1,['rout'],['routine']
Integrability,"Hi, ; There is some documentation in the ROOT Users guide, see ; https://root.cern.ch/root/htmldoc/guides/users-guide/ROOTUsersGuide.html#numerical-integration. Maybe it is not too visible, and I agree @couet we should probably include in the DOxygen description of the Integration classes. ; We are also missing a tutorial on the INtegratorMultiDim and we should add one before closing this issue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7740#issuecomment-810332566:148,integrat,integration,148,https://root.cern,https://github.com/root-project/root/issues/7740#issuecomment-810332566,3,"['INtegrat', 'Integrat', 'integrat']","['INtegratorMultiDim', 'Integration', 'integration']"
Integrability,"Hi, ; Yes I have tried and noticed some differences in the output produced when fitting in ROOT. Probably the MInimizer interface used in ROOT needs to be adapted for the new loggiing levels. ; I would prefer doing this and having a fix there ready before merging this one, so I can commit after merging this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-725449092:120,interface,interface,120,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-725449092,1,['interface'],['interface']
Integrability,"Hi, @guitargeek (Jonas)! Great news, I never imagined this would be fixed so soon! I understand that an architectural change will require big work and much testing (depending on how much is already covered).; I don't know whether I shall close it now or when you PR is accepted; feel free to close. Thanks again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8000#issuecomment-827149197:165,depend,depending,165,https://root.cern,https://github.com/root-project/root/issues/8000#issuecomment-827149197,1,['depend'],['depending']
Integrability,"Hi, Attila. We discussed this for a while ourselves, and we designed the classes in the way it was more convenient for ROOT, willing to play the price of adapting to a change of interfaces in tbb when it happens. Of course, we might be wrong and we will review our choices :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6174#issuecomment-673343619:178,interface,interfaces,178,https://root.cern,https://github.com/root-project/root/pull/6174#issuecomment-673343619,1,['interface'],['interfaces']
Integrability,"Hi, Danilo. I missed the inheritance chain comment the first time, although I seriously considered your feedback. My justification for changing the executors in 6.12 is that If we can reduce the damage to user code (e.g. reducing the time a soon to be changed interface is exposed and providing the new one) we should go for it. But I'm not taking a hard stance on this and that's why I opened the PR, to discuss it :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1312#issuecomment-343753485:260,interface,interface,260,https://root.cern,https://github.com/root-project/root/pull/1312#issuecomment-343753485,1,['interface'],['interface']
Integrability,"Hi, Danilo. This was the case in the first of the commits. But it wouldn't work over c; arrays, f.e. We decided to remove the other interface for consistency. This way is also closer to std::accumulate. On Thu, Apr 6, 2017, 22:42 Danilo Piparo <notifications@github.com> wrote:. > *@dpiparo* commented on this pull request.; > ------------------------------; >; > In math/mathcore/inc/Math/Util.h; > <https://github.com/root-project/root/pull/485#discussion_r110262637>:; >; > > }; >; > - void Add(const std::vector<T> &elements); > + /// Iterate over a datastructure referenced by a pointer and accumulate on the exising result; > + template <class Iterator>; > + void Add(const Iterator begin, const Iterator end); >; > @xvallspl <https://github.com/xvallspl>, @lmoneta; > <https://github.com/lmoneta> : is it really better to have begin and end; > here? Can't we pass something to iterate on? With range based looping this; > would not imply any code change in the body of the methods.; >; > —; > You are receiving this because you were mentioned.; >; >; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/pull/485#pullrequestreview-31425116>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AA0748psnJDZpWu_rkRmWiQYRdhLEACDks5rtU5LgaJpZM4M1zlr>; > .; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/485#issuecomment-292315133:132,interface,interface,132,https://root.cern,https://github.com/root-project/root/pull/485#issuecomment-292315133,1,['interface'],['interface']
Integrability,"Hi, I am one of the iminuit developers (https://github.com/iminuit/iminuit). We are glad that Minuit2 is still usable as a package separate from ROOT and thank the ROOT developers for that. It makes our life much easier. The iminuit package is build by copying the Minuit2 code in ROOT and building a Cython wrapper around it. Because we compile and use the Minuit2 code outside of the ROOT build environment, we found and fixed some bugs, which we would like to merge upstream in ROOT as well. Each of the two commits in this PR fixes one issue. The first is rather trivial, `MnPrint` is used unconditionally, even though the corresponding header `MnPrint.h` is only included if certain compiler flags are set. The second one is a change in the interface of the `MinimumBuilder` base class. We run Minuit using the `MnMigrad` class. Without this change, there is no way to change the print level in a particular instance of MnMigrad. The change does not violate the logical constness of MinimumBuilder.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1677:308,wrap,wrapper,308,https://root.cern,https://github.com/root-project/root/pull/1677,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"Hi, I am reopening this as I still need it for my project (dealing with huge amounts of integer waveform data, so TH1I goes into overflow) as suggested by @guitargeek (thanks!). The controversy was about TH1L vs TH1L64, or rather the underlying types: TArrayL vs TArrayL64. Or rather, why do have Long_t vs Long64_t. In my opinion, trying to fix the TArrayL vs TArrayL64 controversy is out of scope for this PR, or too much to ask for my purpose (I am suggesting a new feature, but do not want to be in charge of fixing old designs that were not the right ones). Or, if it should be fixed, it should go into a separate PR by someone else. That being said, I do not think we should wait X years more for that preliminary PR to be merged until this one is done. Also, TH1 is gonna be replaced somehow in templated ROOT7, so I do not think it is worth to invest too much time in fixing old interfaces. So I think providing this new functionality 'as is' wouldn't harm anyone and it would be helpful for (at least) two or three users. What are your thoughts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8546#issuecomment-1814425550:887,interface,interfaces,887,https://root.cern,https://github.com/root-project/root/pull/8546#issuecomment-1814425550,1,['interface'],['interfaces']
Integrability,"Hi, I don't understand what temporary gcc's message refers to?. - `GetColumnType` returns a `string` by value that is taken in as a `const string &` by `TypeName2TypeID`, so everything should be fine there; - `TypeName2TypeID` returns a `const type_info &` that is conditionally assigned to a `const auto &` and that should also be ok: the `const type_info &` is produced by expressions such as `typeid(bool)` and that value should have static lifetime. Help?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12085#issuecomment-1401948860:44,message,message,44,https://root.cern,https://github.com/root-project/root/pull/12085#issuecomment-1401948860,1,['message'],['message']
Integrability,"Hi, I had to rebase to change the code format to pass the clang-tools code analysis check (is this new? I didn't have to do this in my previous pull request which had the same formatting as this PR which it is now unhappy with. Also weirdly one of the things it required was in LinkDef.h putting a space before and after ""+"" which isn't consistent with the other lines. Also it required some very weird/bad formatting for calling the function ""plotTwoTGraphs"" in the tutorial added, I think it is trying to reduce the number of characters per line, but it does it in a quite poor way. Also the command that the script ""https://github.com/root-project/root/blob/master/.ci/format_script.sh"" which does this format check says to run to rebase is incorrect. It says to do:. ```; git rebase -i -x ""git-clang-format-7 master && git commit -a --allow-empty --fixup=HEAD"" --strategy-option=theirs origin/master; git rebase --autosquash -i master; ```; But this does not run and complains that master does not exist. It should be; ```; git rebase -i -x ""git-clang-format-8 origin/master && git commit -a --allow-empty --fixup=HEAD"" --strategy-option=theirs origin/master; git rebase --autosquash -i origin/master; ```; [i.e. master-> origin/master]; ). This rebase added some spurious commit messages. When (/if) this pull request is accepted, could you please select ""squash and merge"", it's a lot simpler than me having to rebase and squashing manually in the terminal (which last time I tried I messed up so bad I ended up just having to delete my fork and start over), the title of the PR works as a commit message for the full thing ""Add Relativistic Voigt Function to TMath"". Thanks in advance for any help,; Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11049#issuecomment-1194998699:1284,message,messages,1284,https://root.cern,https://github.com/root-project/root/pull/11049#issuecomment-1194998699,2,['message'],"['message', 'messages']"
Integrability,"Hi, I think this doesn't need a mention in the release notes because these constructors are only used internally in the `RooChi2Var::create` and apparently no user uses them (their interface was also changed already in 6.26 to use the `Configuration` struct, and there were no complaints).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10566#issuecomment-1130156866:181,interface,interface,181,https://root.cern,https://github.com/root-project/root/pull/10566#issuecomment-1130156866,1,['interface'],['interface']
Integrability,"Hi, I tried on osx but it would be nice to have a look. The error is quite clear; ```; 104: build/include/ROOT/TDataFrame.hxx:264:53: error: no type named 'BranchTypes_t' in '(lambda at buildinclude/ROOT/TDataFrame.hxx:683:25)'; 104: typename BranchTypes_t = typename Helper::BranchTypes_t>; 104: ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~; 104: build/include/ROOT/TDataFrame.hxx:684:37: note: in instantiation of default argument for 'TDataFrameAction<(lambda at build/include/ROOT/TDataFrame.hxx:683:25), ROOT::Detail::TDataFrameBranchBase>' required here; 104: using DFA_t = ROOT::Internal::TDataFrameAction<decltype(fillLambda), Proxied>;; 104: ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; 104: root/tutorials/dataframe/tdf101_h1Analysis.C:129:37: note: in instantiation of function template specialization 'ROOT::Experimental::TDataFrameInterface<ROOT::Detail::TDataFrameBranchBase>::Histo2D<float, float>' requested here; 104: auto h2ARP = selectedAddedBranch.Histo2D<float, float>(TH2F(""h2"",""ptD0 vs Dm_d"",30,0.135,0.165,30,-3,6), ""dm_d"", ""h2_y"");; 104: ^; 104: In file included from input_line_10:1:; 104: In file included from root/tutorials/dataframe/tdf101_h1Analysis.C:11:; 104: build/include/ROOT/TDataFrame.hxx:685:11: error: no matching member function for call to 'Book'; 104: df->Book(std::make_shared<DFA_t>(std::move(fillLambda), bl, fProxiedPtr));; 104: ~~~~^~~~; 104: root/tutorials/dataframe/tdf101_h1Analysis.C:129:37: note: in instantiation of function template specialization 'ROOT::Experimental::TDataFrameInterface<ROOT::Detail::TDataFrameBranchBase>::Histo2D<float, float>' requested here; 104: auto h2ARP = selectedAddedBranch.Histo2D<float, float>(TH2F(""h2"",""ptD0 vs Dm_d"",30,0.135,0.165,30,-3,6), ""dm_d"", ""h2_y"");; ```; after a quick look, it seems it's looking for a dependent type even if the actual type is a lambda.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/366#issuecomment-282562121:1791,depend,dependent,1791,https://root.cern,https://github.com/root-project/root/pull/366#issuecomment-282562121,1,['depend'],['dependent']
Integrability,"Hi, I've added the README.md file for libcmaes support in root/math/cmaes as requested. Though I'm not certain this is the correct place for the readme. Please let me know what is the current status on this PR. I am able to rebase with current head as needed for integration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/40#issuecomment-68676676:263,integrat,integration,263,https://root.cern,https://github.com/root-project/root/pull/40#issuecomment-68676676,1,['integrat'],['integration']
Integrability,"Hi, I've found this proposal in scope of https://github.com/spack/spack/issues/22616 investigation.; I'd vote for such improvement and can help with it from TBB side. First, I can confirm that TBB 2021 (now it's oneTBB 2021) has CMake build system. Second, oneTBB integration to CMake project may be done in two major ways:; 1. Source integration (`add_subdirectory`) - oneTBB is just built from sources together with user project.; 2. Binary integration (`find_package`) - user project relies on pre-built oneTBB, it is supported through TBBConfig files inside oneTBB packages, for some distributions/versions it will work out-of-the-box, but for others it may require additional CMake variable to be set. [Here ](https://github.com/oneapi-src/oneTBB/blob/master/cmake/README.md#tbbconfig---integration-of-binary-packages)is a short description of binary integration. The (1) way is supported only starting from oneTBB 2021, while the (2) way was [introduced](https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration) in TBB 2017 U7 and slightly changed in oneTBB 2021. What way is preferable? In theory we can think about some kind of mixed approach.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7063#issuecomment-813264138:264,integrat,integration,264,https://root.cern,https://github.com/root-project/root/issues/7063#issuecomment-813264138,6,['integrat'],"['integration', 'integration-of-binary-packages']"
Integrability,"Hi, Philippe,. Just an update to the issue, ; after having upgraded the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:; run the demo macro of TApplication, Error messages are as following,; ```; Fatal in <operator new>: with std::align_val_t is not implemented yet; aborting; #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc; entry=0x7ffeb2a715a8, options=options; entry=0, usage=usage; entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30; #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc; entry=0x7ffeb2a715a8, options=options; entry=0) at ./posix/waitpid.c:38; #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171; #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so; #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so; #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so; #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so; #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so; #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so; #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so; #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so; #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13511#issuecomment-1867607489:251,message,messages,251,https://root.cern,https://github.com/root-project/root/issues/13511#issuecomment-1867607489,1,['message'],['messages']
Integrability,"Hi, Thank you @ShamrockLee very much for this contribution!; As a general comment, if this implementation is equivalent, just more efficient than the existing one, then we could just replace it. ; If you think both are useful, we could have two internal (protected) functions for the implementation, but expose them in the same interface eventually adding an option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11949#issuecomment-1361431156:328,interface,interface,328,https://root.cern,https://github.com/root-project/root/pull/11949#issuecomment-1361431156,1,['interface'],['interface']
Integrability,"Hi, hard coding anything related to Athena into ROOT seems weird to me. Maybe the wrapper should take some generic value and then set application specific variables like ROOT_MAX_THREADS?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9805#issuecomment-1030581022:82,wrap,wrapper,82,https://root.cern,https://github.com/root-project/root/issues/9805#issuecomment-1030581022,1,['wrap'],['wrapper']
Integrability,"Hi, if correctness of our code depends on the order of header inclusion we are in for __a lot__ of pain in the future. Could we put something like the following in `RMakeUnique.hxx` instead?. ```c++; #ifdef WIN32; #include <memory> // our supported windows versions always ship with make_unique; #else; // rest of the file; #endif; ```. Also, @dpiparo does this mean that `RMakeUnique.hxx` breaks any build in which `<memory>` already defines `make_unique`? It would be weird we didn't notice, probably I don't understand this failure well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1203#issuecomment-337961364:31,depend,depends,31,https://root.cern,https://github.com/root-project/root/pull/1203#issuecomment-337961364,1,['depend'],['depends']
Integrability,"Hi, it was changed to `unsigned long` because `std::size_t` is platform dependent, as explained by @pcanal here: https://github.com/root-project/root/pull/9374#issuecomment-985770700. So actually it was causing the stream warnings. The issue here can be solved by using `std::numeric_limits<unsigned long>::max()` instead, I will fix that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9468#issuecomment-998006522:72,depend,dependent,72,https://root.cern,https://github.com/root-project/root/issues/9468#issuecomment-998006522,1,['depend'],['dependent']
Integrability,"Hi, most of cmssw tests passed but for few relvals we get runtime errors like [a]. [a] https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-7b6638/42123/runTheMatrix-results/140.063_RunZeroBias2022D/step3_RunZeroBias2022D.log; ```#--------------------------------------------------------------------------; cling JIT session error: In graph cling-module-926-jitted-objectbuffer, section .text._ZNK4reco10HitPattern23numberOfLostTrackerHitsENS0_11HitCategoryE: relocation target ""_ZN4reco10HitPattern16missingHitFilterEt"" at address 0x4000968500f0 is out of range of Page21 fixup at 0x4001a7270114 (_ZNK4reco10HitPattern23numberOfLostTrackerHitsENS0_11HitCategoryE, 0x4001a727010c + 0x8); ----- Begin Fatal Exception 11-Oct-2024 15:08:51 CEST-----------------------; An exception of category 'FatalRootError' occurred while; [0] Processing Event run: 357735 lumi: 53 event: 87840020 stream: 0; [1] Running path 'dqmoffline_1_step'; [2] Prefetching for module NanoAODDQM/'nanoDQM'; [3] Prefetching for module SimplePATTauFlatTableProducer/'boostedTauTable'; [4] Prefetching for module PATObjectCrossLinker/'linkedObjects'; [5] Prefetching for module PATMuonRefSelector/'finalMuons'; [6] Prefetching for module PATMuonUserDataEmbedder/'slimmedMuonsWithUserData'; [7] Calling method for module EvaluateMuonMVAID/'muonMVAID'; Additional Info:; [a] Fatal Root Error: @SUB=TClingCallFunc::make_wrapper; Failed to compile; ==== SOURCE BEGIN ====; #pragma clang diagnostic push; #pragma clang diagnostic ignored ""-Wformat-security""; __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))); extern ""C"" void __cf_365(void* obj, int nargs, void** args, void* ret); {; if (ret) {; new (ret) (double) (((const reco::TrackBase*)obj)->validFraction());; return;; }; else {; (void)(((const reco::TrackBase*)obj)->validFraction());; return;; }; }; #pragma clang diagnostic pop; ==== SOURCE END ====. ----- End Fatal Exception -------------------------------------------------; Anot",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16401#issuecomment-2407514028:145,integrat,integration,145,https://root.cern,https://github.com/root-project/root/pull/16401#issuecomment-2407514028,1,['integrat'],['integration']
Integrability,"Hi, not a reviewer either but just offering my two cents to make the PR review more smooth:; - Make sure your PR can actually compile. As @bluehood mentioned, there are many rebasing artifacts throughout the code. Also make sure your code passes clang-format.; - What bugs/issues does this PR actually solve? You mentioned in the previous PR #776 that they ""fixes include additions of new classes as well as genuine bugfixes."", could you elaborate what bugfixes these are? (This would be nice to have in your commit messages); - Some test for whatever you are trying to fix would be great, this PR adds >4600 LOC without one single test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/792#issuecomment-316689045:516,message,messages,516,https://root.cern,https://github.com/root-project/root/pull/792#issuecomment-316689045,1,['message'],['messages']
Integrability,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things.; ```; my_data = rvec; ```; Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas; ```; my_data = numpy.asarray(rvec); ```; Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example; ```; process = psutil.Process(). ROOT.gInterpreter.Declare(""""""; auto create_rvec(unsigned int n) {; //return std::array<unsigned int, 3>({n, n, n});; return ROOT::RVec<unsigned int>({n, n, n});; }; """"""); df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""); rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():; return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(); print(mem0). for v2 in rvecs:; n = v2; mem2 = get_mem_usage(); print(mem2); ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14981#issuecomment-2006250778:271,depend,depends,271,https://root.cern,https://github.com/root-project/root/issues/14981#issuecomment-2006250778,1,['depend'],['depends']
Integrability,"Hi, thanks for the PR first of all!. Yes, it would be nice to fix that, I see now that the `RooEffGenContext` header and source almost correctly follow the ROOT clang-format style correctly:; https://github.com/root-project/root/blob/master/.clang-format. (well, the header not really, but it also doesn't have that many lines). I think your PR is a good opportunity to correctly format them for good! Could you add an initial commit to this PR where you `clang-format` these files first? You can write in the commit message something like ""this reformatting is done now because the files will be changed in the following commit, and the differences to the ROOT code style were already minor"". And then, on top of the reformatting commit, you could make the commit with your actual new function (and code format again). Does that sound good to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12178#issuecomment-1410207241:517,message,message,517,https://root.cern,https://github.com/root-project/root/pull/12178#issuecomment-1410207241,1,['message'],['message']
Integrability,"Hi, thanks for the question!. The standard way of do this in ROOT is to use [TParameter](https://root.cern.ch/doc/v612/classTParameter.html) or an `std::` container, as also discussed here:; https://root-forum.cern.ch/t/writing-simple-variable-in-root-files/11094/5. For example:; ```C++; void write() {. TParameter<int> x1{""x1"", 5};; std::vector<int> x2{4};. std::unique_ptr<TFile> file{TFile::Open(""myfile.root"", ""RECREATE"")};. file->WriteObject(&x1, ""x1"");; file->WriteObject(&x2, ""x2"");; }; ```; Therefore, having this functionality is redundant as therefore it was removed. If you still need to use `RooInt` in your framework for backwards compatibility, please just copy-paste its source code into your framework. It's very simple:; * https://github.com/root-project/root/blob/v6-28-00-patches/roofit/roofitcore/inc/RooInt.h; * https://github.com/root-project/root/blob/v6-28-00-patches/roofit/roofitcore/src/RooInt.cxx; You can even remove the sorting interface if you don't need it. Are these possible ways forward? I would be very reluctant to bring this class back, because RooFit is for statistical analysis. Using its classes to store metadata in a ROOT file is really not the idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16380#issuecomment-2335109569:959,interface,interface,959,https://root.cern,https://github.com/root-project/root/issues/16380#issuecomment-2335109569,1,['interface'],['interface']
Integrability,"Hi, thanks for the reply, indeed, in this case the histograms do have 0 uncertainties. I was just surprised by the 0 probability. I think an error message would help, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13697#issuecomment-1751001556:147,message,message,147,https://root.cern,https://github.com/root-project/root/issues/13697#issuecomment-1751001556,1,['message'],['message']
Integrability,"Hi, thanks for the review!. Yes, sure, that would have also been an option and I was thinking about that when originally implementing `RooDataSet.from_numpy()` last year. The reason why I didn't go for it because then the dataset range is not synchronized anymore with the variable range of the model, which brings you back to the clipping problem: when the NLL iterates over the dataset to evaluate the PDF, the data values will be clipped inside the variable range.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11531#issuecomment-1274638119:243,synchroniz,synchronized,243,https://root.cern,https://github.com/root-project/root/pull/11531#issuecomment-1274638119,1,['synchroniz'],['synchronized']
Integrability,"Hi, the documentation at https://root.cern.ch/doc/v608/classTH3.html#ad6e3388d1f127f018941f932a50a3e2d says:; `The given values (x,y,z) must be between first bin center and last bin center for each coordinate`. Because 0.002 is below the first bin center, you get the error message. I guess you are rather looking for an 'extrapolate' function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10678#issuecomment-1143413456:274,message,message,274,https://root.cern,https://github.com/root-project/root/issues/10678#issuecomment-1143413456,1,['message'],['message']
Integrability,"Hi, these are four commits with very non-descriptive names that change a total of 23 files.; The first commit only adds almost 2000 loc in 22 files, making this very hard to review.; Please modify your history so that the smallest self-consistent changes are each in their own commit,; with a descriptive short message and a useful longer description:; ```; what this commit does: add/fix/remove/change. explanation of why these changes were necessary,; and whatever else is useful to the reviewer/people who; will look at this in the future; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/696#issuecomment-311605786:311,message,message,311,https://root.cern,https://github.com/root-project/root/pull/696#issuecomment-311605786,1,['message'],['message']
Integrability,"Hi, this happens because the overlap checking in TGeo relies on navigation functionality for shapes and TGeoTesselated is just a mesh wrapper that does not provide navigation, so it wrongly used its bounding box functionality. Geometries with tessellations should only be used for conversions/visualization. I am providing a protection as PR for skipping overlap checks if a partner is a tessellation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11784#issuecomment-1328791369:134,wrap,wrapper,134,https://root.cern,https://github.com/root-project/root/issues/11784#issuecomment-1328791369,1,['wrap'],['wrapper']
Integrability,"Hi, this has been discussed a few times and the outcome of the discussion was always that we want a generic `TExecutor` that might run things concurrently or not depending on a policy parameter, but we don't want `TThreadExecutor` to have a sequential mode (it makes the name a misnomer).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6298#issuecomment-686465798:162,depend,depending,162,https://root.cern,https://github.com/root-project/root/pull/6298#issuecomment-686465798,1,['depend'],['depending']
Integrability,"Hi,. # This Pull request: . This PR comes from this [forum thread](https://root-forum.cern.ch/t/use-root-io-as-library-in-a-c-stand-alone-project/55539/5). This tutorial is a minimal working example about how to create a ROOT dictionary for a custom class, and its use for writing and reading a TTree. Further changes may be needed before full integration into ROOT project. ## Changes or fixes:. New folder added, `tutorials/tree/dictionary`. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13205:344,integrat,integration,344,https://root.cern,https://github.com/root-project/root/pull/13205,1,['integrat'],['integration']
Integrability,"Hi,. I am new to root and trying to wrap my head around some of its features. I thought a good place to start would be to work on this issue. I started by pythonizing `fitTo` and I'd like to send you a pull request. I take it that I should provide some tests for the feature, but I could not find any resources regarding the testing conventions in python for root. If there are any specific guidelines, please let me know, otherwise I'll just send you a pull request and you can take a look if it is really necessary. Cheers",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7217#issuecomment-785392761:36,wrap,wrap,36,https://root.cern,https://github.com/root-project/root/issues/7217#issuecomment-785392761,1,['wrap'],['wrap']
Integrability,"Hi,. I got the error message that TBranch is missing, but it never threw an exception handling, in fact in my case, i even had a cout at the end of the scripts which stated the script has ran fine and I always got that. Meaning, the run was never terminated due to the error....; I really want to help, but i dont know how, i sent the github link of my script, also the data I have used, but you dont have access to them, so pls tell me how can I help you exactly?. Regards,. Shirin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9366#issuecomment-1006425835:21,message,message,21,https://root.cern,https://github.com/root-project/root/issues/9366#issuecomment-1006425835,1,['message'],['message']
Integrability,"Hi,. I need to install ROOT 6.16 in my laptop (macOS Monterey M1 chip), but it's becoming so difficult due to the installation of TBB, and it also cannot detect the arm architecture (so when I configure the cmake building, I get ```Targeting X86```). . Regarding the TBB issue, this is the output; ```cmake; -- TBB download command succeeded. See also /Users/apereiro/root-histfact-test/new_build/TBB-prefix/src/TBB-stamp/TBB-download-*.log; [ 0%] No update step for 'TBB'; [ 0%] No patch step for 'TBB'; [ 0%] No configure step for 'TBB'; [ 0%] Performing build step for 'TBB'; CMake Error at /Users/apereiro/root-histfact-test/new_build/TBB-prefix/src/TBB-stamp/TBB-build-RelWithDebInfo.cmake:49 (message):; Command failed: 2. 'make' 'compiler=clang' 'CXXFLAGS= -mno-rtm -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX12.1.sdk' 'CPLUS=/Library/Developer/CommandLineTools/usr/bin/c++' 'CONLY=/Library/Developer/CommandLineTools/usr/bin/cc'. See also. /Users/apereiro/root-histfact-test/new_build/TBB-prefix/src/TBB-stamp/TBB-build-*.log; ```. I have been following [this](https://github.com/root-project/root/pull/6120/commits) pull request made by Axel and I made the same changes from the commits, but it's not sufficient to fix the whole problem. . Also I tried to configure with ```-Dbuiltin_tbb=OFF``` since I have the latest tbb from homebrew, but I get; ```cmake; -- Found TBB: /opt/homebrew; CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1159 (if):; if given arguments:. ""VERSION_LESS"" ""2018""; ```. Can you point me to a solution, or propagate the patches you have been developing to older versions like this one?. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10370:699,message,message,699,https://root.cern,https://github.com/root-project/root/issues/10370,1,['message'],['message']
Integrability,"Hi,. OK. Yes, this is highly dependent on AliRoot/AliPhysics. . What is currently in production in the SAF is a procedure to get a filtering be performed at the same time data is being staged (*). I’ve deployed on SAF my own root version with those changes and I’m happy with the way it work, but it’s really awkward for the user because they cannot use the same root version for the staging and for their analysis (and they must play with datasetmanager cache of the queries to get the right files…). That’s why I’d want to have it « officially » in Root. To way to trigger such a filtering is to add bit and pieces to the file names generated by the TDataSetManager, e.g. :. const char\* query = ""Find;FileName=AliESDs.root;BasePath=/alice/data/2011/LHC11h/000169838/ESDs/pass2_muon;Filter=ESDMUON;Aliphysics=vAN-20150213"";. gProof->ShowDataSet(query);; will generate filenames as : . alien:///alice/data/2011/LHC11h/000169838/ESDs/pass2_muon/11000169838080.42/AliESDs.FILTER_ESDMUON_WITH_ALIPHYSICS_vAN-20150213.root alien:///alice/data/2011/LHC11h/000169838/ESDs/pass2_muon/11000169838080.42/AliESDs.FILTER_ESDMUON_WITH_ALIPHYSICS_vAN-20150213.root. On the workers the staging script is deciphering the filename in order to call. $ALICE_PHYSICS/aaf-stage-and-filter --from source_url --to destination_url --filter filtername . where :; ALICE_PHYSICS points to (cvmfs version of) vAN-20150213, ; source_url is alien:///alice/data/2011/LHC11h/000169838/ESDs/pass2_muon/11000169838080.42/AliESDs.root alien:///alice/data/2011/LHC11h/000169838/ESDs/pass2_muon/11000169838080.42/AliESDs.root; filter name is ESDMUON . Hope this clarifies the intent (more bla at http://aphecetche.github.io/aafu/doc/#Datafiltering http://aphecetche.github.io/aafu/doc/#Datafiltering). . If the dataset manager can be easily provided to users without having it in Root, I’m all for it. . Regards,. > Le 5 mai 2015 à 18:40, Dario Berzano notifications@github.com a écrit :; > ; > Hello @aphecetche https://github.com/aphe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/63#issuecomment-99143966:29,depend,dependent,29,https://root.cern,https://github.com/root-project/root/pull/63#issuecomment-99143966,1,['depend'],['dependent']
Integrability,"Hi,. On Thursday 2015-09-03 10:56, xantares wrote:. > Forgive me but your objections do not seem rock-solid:; > - '""distutils.sysconfig"" is far from robust as claimed' : afaik it; > works very well from 2.6-2.7, 3.1,3.2, 3.3 to 3.4. sure, on Linux. Did you try all main platforms? (And do add at least p2.5,; as that for sure is still in use.). > - ""package as a whole gets split, which risks that one part gets updated; > whereas another doesn't"": how would that be possible for users ? a; > decent package manager should handle that well. A package manager can install wherever it wants and can make its own; adjustment (simply copy over the two files, or put symlinks); this will; affect users building from source. I don't worry about package managers,; only about the latter users. As to 'how': the common case mixing; installations (e.g. from packagers and building from source), versions; (different pythons), system upgrades (that wipe out site-packages), or; simply a user doing 'rm -rf' for only half the installation. Users are; very, very inventive in creating trouble. :P None of that if all of ROOT; is kept in a single directory. So the only upside there seems to be is removing of this teeny-weeny; inconvenience of having to setup PYTHONPATH if you install in /usr/local.; But A) most from-source builders don't do that, they use bin/thisroot.sh,; which sets up PYTHONPATH; and B) installing in /usr/local is not; recommended to begin with, b/c of the same problem with remnants. Debugging a setup problem is very time consuming and frustrating: the; error messages are spurious and only occur on the user's machine to which; I have no access. In sum, I see no upside to speak of, but do see enormous downsides. And; if you really believe otherwise: sign that blood contract. Best regards,. ## Wim. WLavrijsen@lbl.gov -- +1 (510) 486 6411 -- www.lavrijsen.net",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/73#issuecomment-137538771:1574,message,messages,1574,https://root.cern,https://github.com/root-project/root/pull/73#issuecomment-137538771,2,"['contract', 'message']","['contract', 'messages']"
Integrability,"Hi,. There is already a TMathBase.h that could be used for that. That said. It might make sense to keep TMath.h as is and to introduce TMathVec.h which has the extra dependency and is use in code that expects/wants to support vector code. Cheers,; Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/466#issuecomment-290387466:166,depend,dependency,166,https://root.cern,https://github.com/root-project/root/pull/466#issuecomment-290387466,1,['depend'],['dependency']
Integrability,"Hi,. This PR cannot be merged since the test is failing. Could you please have a look @will-cern ?; ```; Running main() from /googletest-release-1.11.0/googletest/src/gtest_main.cc; [==========] Running 3 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 3 tests from Projections; [ RUN ] Projections.Issue_6658_2D; [ OK ] Projections.Issue_6658_2D (175 ms); [ RUN ] Projections.Issue_6658_3D; [ OK ] Projections.Issue_6658_3D (0 ms); [ RUN ] Projections.Issue_6658_Profile2D; /root/src/core/testsupport/src/TestSupport.cxx:89: Failure; Failed; Received unexpected diagnostic of severity 2000 at 'TROOT::Append' reading 'Replacing existing TH1: x (Potential memory leak).'.; Suppress those using ROOT/TestSupport.hxx; [ FAILED ] Projections.Issue_6658_Profile2D (1 ms); [----------] 3 tests from Projections (176 ms total); ; [----------] Global test environment tear-down; [==========] 3 tests from 1 test suite ran. (176 ms total); [ PASSED ] 2 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] Projections.Issue_6658_Profile2D; ; 1 FAILED TEST; CMake Error at /root/src/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16194#issuecomment-2285889101:1151,message,message,1151,https://root.cern,https://github.com/root-project/root/pull/16194#issuecomment-2285889101,1,['message'],['message']
Integrability,"Hi,. When compiling and attempting to run the Celeritas example (see https://github.com/celeritas-project/celeritas) with a build of ROOT v6.26/00 with gcc 11 we get the following errors:; ```; Error in <TCling::RegisterModule>: Dictionary trigger function for libCore not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libMathCore not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libThread not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libRIO not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libNet not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libTree not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libceleritas_root not found; Error in <TClass::LoadClassInfo>: no interpreter information for class celeritas::ImportData is available even though it has a TClass initialization routine.; ```; A simple use of root works fine (eg. simple.root is created just fine). However loading the celeritas library:; ```; root[0] .L path_to_celeritas_build/libceleritas_root.so; ```; leads to a weird error about not find `path_to_root_installation/*bin*/libNet_rdict.pcm`. We trace is down to the line in `TCling.cxx`:; ```; std::string dyLibName = cling::DynamicLibraryManager::getSymbolLocation(triggerFunc);; ```; for `libNet` returning the name of executable (`blahblah/bin/root.exe`). However loading the slightly simpler library `libceleritas.root` (which is used by `libceleritas_root.so`), works just fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10162:959,rout,routine,959,https://root.cern,https://github.com/root-project/root/issues/10162,1,['rout'],['routine']
Integrability,"Hi,. While trying to compile some code which uses ROOT::Math::PxPyPzMVector, I run into; ```; In file included from v6-22-06/install/include/Math/Vector4D.h:12:; v6-22-06/install/include/Math/GenVector/PxPyPzE4D.h:154:17: error: call to function 'sqrt' that is neither visible in the template definition nor found by argument-dependent lookup; return sqrt(mm);; ^; v6-22-06/install/include/Math/GenVector/PxPyPzM4D.h:108:14: note: in instantiation of member function 'ROOT::Math::PxPyPzE4D<double>::M' requested here; fM = v.M();. ```. In the header files all standard functions should be prefixed with `std::`. I guess this is a remnant from days when there were `using namespace std` statements in the headers... Cheers,; Antoni",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7905:326,depend,dependent,326,https://root.cern,https://github.com/root-project/root/issues/7905,1,['depend'],['dependent']
Integrability,"Hi,. apologies, I realise that in the post above I wasn't terribly specific about what we needed. A bit more concretely, would it be possible to prepare a new version of ROOT, e.g. 6.28/08 which includes Scott's fix? We will then ask for this to be included in a new LCG104b release. Please could you give us a time estimate for how long this will take to prepare? This will enable us to plan more widely for our transition to AL9/LCG104/gcc13. Thanks a lot and sorry for the previous vague message!. James, John, Nick",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13410#issuecomment-1750752949:491,message,message,491,https://root.cern,https://github.com/root-project/root/issues/13410#issuecomment-1750752949,1,['message'],['message']
Integrability,"Hi,. the LHCb point of view on the issue is that we must be able to know which code we executed, mostly for debugging purposes (understanding why the trigger application took a specific decision counts as debugging for me). When you have an application that can decide which version of a function to run depending on something you cannot control, like the specific CPU on the Grid node or the time of the day, makes the debugging much more tricky (at some point we started storing in each event the binary id and the CPU type used for that event), so we decided that we do not want this kind of automatic dispatching: an application compiled to run on a Nehalem equivalent CPU should run only instructions valid for Nehalem processors, even if the actual CPU can do better. Our approach is that we still have some functions that have different implementations for different instructions sets (basically scalar, sse4.2 and avx2), but we chose at compile time which one to use by adding something like `-mavx2` or `-march=haswell` to the compile flags. And yes, it should be a cmake flag, but you are most welcome to have also the `ARCH=dynamic` option. OTOH you are talking about RooFit and AFAIK we do not use it in trigger, reconstruction or simulation software, but it is only used for the analysis, and there we have less constraints, as it has become common practice to use Conda based installations, so builds and versions decoupled from our production software.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7361#issuecomment-791253985:304,depend,depending,304,https://root.cern,https://github.com/root-project/root/issues/7361#issuecomment-791253985,1,['depend'],['depending']
Integrability,"Hi,. yes, my objections are all documented in that jira report. I strongly; vote 'no'. If anyone wants to go ahead anyway, then sign a contract in; blood that you'll maintain it and help confused users from here on out. Best regards,; Wim. On Thursday 2015-09-03 05:08, Axel Naumann wrote:. > Date: Thu, 03 Sep 2015 05:08:04 -0700; > From: Axel Naumann notifications@github.com; > Reply-To: root-mirror/root; > <reply+00613b66d70f8ce7beaed1a94ac44c0adf0329085ffc340492cf0000000111fffa2; > 492a169ce05d53aeb@reply.github.com>; > To: root-mirror/root root@noreply.github.com; > Cc: wlav WLavrijsen@lbl.gov; > Subject: Re: [root] install python module to site-dir (ROOT-3316) (#73); > ; > @wlav should have a look as seemed to have good reasons against such a change on https://sft.its.cern.ch/jira/browse/ROOT-3316.; > ; > ---; > ; > Reply to this email directly or view it on GitHub:; > https://github.com/root-mirror/root/pull/73#issuecomment-137418303. ## . WLavrijsen@lbl.gov -- +1 (510) 486 6411 -- www.lavrijsen.net",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/73#issuecomment-137500468:135,contract,contract,135,https://root.cern,https://github.com/root-project/root/pull/73#issuecomment-137500468,1,['contract'],['contract']
Integrability,"Hi,; After some more thinking, I believe we have to close this and rethink the all thing.; I found particularly tricky this point raised by Philippe:. > a good example is two free standings (not attached to any directory) histograms that happens to have the same name in two distinct and independent part of the code (e.g. two CMSSW modules). Supporting this case makes basically impossible to have an identifier for the histogram. In this moment I do not see how we can synchronize objects that we cannot somehow tag being together. In PROOF we somehow implicitly assumed that this could not happen (PROOF is not supporting it). > Rather than a completely global state, wouldn't it make sense to have a wrapper object (for example TThreadedObject) be the holder of the lock and list for a single set of related histogram. This looked an appealing idea. However, it means that the member of a TThreadedObject has to know that is part of a TThreadedObject (which is not the case now) or that we should have a specialized TThreadedObject for histograms that does some settings on the histograms to steer the special behavior. And remains the fact that people will be forced to use a TThreadedObject (which may be ok). Perhaps it is also worth to investigate if we can find an improved bin-finding algorithm that gives consistent binnings in the first place that can be merged. That would solve the problem at the roots. Cheers,; Gerri",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/902#issuecomment-325917665:471,synchroniz,synchronize,471,https://root.cern,https://github.com/root-project/root/pull/902#issuecomment-325917665,2,"['synchroniz', 'wrap']","['synchronize', 'wrapper']"
Integrability,"Hi,; I ran into a memory leak training a BDT yesterday.; Strangely only when running through the root_numpy interface.; The problem appears to scale with number of training events (somewhere between 6.4k and 12.8k training events I run out of RAM); Valgrind/memcheck pointed into `TMVA::DecisionTree::TrainNodeFast` (assuming I read the output correctly. valgrind gave me some 370k lines and i tried with diff'ing a many-event run with a few-event run to get rid of unrelated issues); since this is in an if IMT block, I tried rebuilding root without IMT => tada leak gone.; So diffing the if and else blocks of the preprocessor if (i.e. two different `TMVA::DecisionTree::TrainNodeFast` implementations) I noticed these lines commented out. This patch does not fix the original problem for me, and I'm still on the chase, but the change looks right to me. EDIT: I should add, this does not seem to be a general root_numpy issue because other TMVA methods don't see the issue. the memory only starts exploding during the BDT training. I don't see the issue with tmva through pyroot either. so I really need all three root_numpy+IMT+BDT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2836:108,interface,interface,108,https://root.cern,https://github.com/root-project/root/pull/2836,1,['interface'],['interface']
Integrability,"Hi,; I see these messages in the xrootd code; https://github.com/xrootd/xrootd; but it is beyond me to find the problem. Maybe it is time to include Andy; etc. Cheers,; Rod. On Mon, 11 Jan 2021 at 17:19, rdschaffer <notifications@github.com> wrote:. > Well looking at the debug logs, all failed jobs die after ""kXR_protocol""; > and before "" and before ""Sending out kXR_login request"". I haven't been; > able to download logs from too many successful jobs. But I have three - two; > reading from RAL and one reading in LAPP. I give a link to the log files; > and the last DEBUG line of the failed jobs and the same line plus the next; > for the successful jobs. So perhaps a question of what is happening in the; > code between these two points?; >; > see you, RD; >; > Successful RAL:; >; >; > https://bigpanda.cern.ch//media/filebrowser/667e8363-d9bb-4ebd-800f-79d3495d1b3a/panda/tarball_PandaJob_4925629005_RAL/payload.stdout; >; > [2020-12-18 14:20:13.919081 +0000][Debug ][XRootDTransport ] [; > xrootd.echo.stfc.ac.uk:1094 #0.0] kXR_protocol successful (type: server; > [], protocol version 400); > [2020-12-18 14:20:13.919352 +0000][Debug ][XRootDTransport ] [; > xrootd.echo.stfc.ac.uk:1094 #0.0] Sending out kXR_login request,; > username: tatls002, cgi: ?xrd.cc=uk&xrd.tz=0&xrd.appname=runH4lAnalRun2&; > xrd.info=&xrd.hostname=tatls002-2010227.0-lcg2237.gridpp.rl.ac.uk&xrd.rn=v4.10.0,; > dual-stack: false, private IPv4: true, private IPv6: false; >; > Successful UK WATERLOO:; >; >; > https://bigpanda.cern.ch//media/filebrowser/772fff72-3e22-499f-8a3f-aa8956ea5636/panda/tarball_PandaJob_4926186410_RAL/payload.stdout; >; > [2020-12-19 00:45:02.375203 +0000][Debug ][XRootDTransport ] [; > xrootd.echo.stfc.ac.uk:1094 #0.0] kXR_protocol successful (type: server; > [], protocol version 400); > [2020-12-19 00:45:02.375430 +0000][Debug ][XRootDTransport ] [; > xrootd.echo.stfc.ac.uk:1094 #0.0] Sending out kXR_login request,; > username: tatls002, cgi: ?xrd.cc=uk&xrd.tz=0&xrd.appname=run",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-758074953:17,message,messages,17,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-758074953,1,['message'],['messages']
Integrability,"Hi,; I think using mathematical functions coming from libm without wrapping them within the ROOT ones is ok. We do the same in PROOF: to get random socket numbers we leverage the STL random number generator rather than the Math one to avoid dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/466#issuecomment-290334427:67,wrap,wrapping,67,https://root.cern,https://github.com/root-project/root/pull/466#issuecomment-290334427,2,"['depend', 'wrap']","['dependencies', 'wrapping']"
Integrability,"Hi,; I thought the wrapper would be under suspicion at some stage, so disabled; it in; https://bigpanda.cern.ch/job?pandaid=4946999888. == Conditional jump or move depends on uninitialised value(s); ==2512== at 0x4F01099: TStorage::UpdateIsOnHeap(unsigned int const; volatile&, unsigned int volatile&) (in; /srv/workDir/usr/HZZAnalRun2Code/1.0.0/InstallArea/x86_64-centos7-gcc8-opt/lib/libH4lAnalysisRun2Lib.so); ==2512== by 0x5A78179: TInetAddress::TInetAddress() (in; /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libCore.so); ==2512== by 0x5B81DD5: TUnixSystem::GetHostByName(char const*) (in; /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libCore.so); ==2512== by 0x5ABC6E2: TSystem::IsPathLocal(char const*) (in; /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libCore.so); ==2512== by 0x53D12DC: TFile::GetType(char const*, char const*,; TString*) (in /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libRIO.so); ==2512== by 0x53D2847: TFile::Open(char const*, char const*, char; const*, int, int) (in; /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libRIO.so); ==2512== by 0x403275: main (in; /srv/workDir/usr/HZZAnalRun2Code/1.0.0/InstallArea/x86_64-centos7-gcc8-opt/bin/runH4lAnalRun2); ==2512== Uninitialised value was created by a stack allocation; ==2512== at 0x5ABC43E: TSystem::IsPathLocal(char const*) (in; /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libCore.so); ==2512==; ==2512== Conditional jump or move depends on uninitialised value(s); ==2512== at 0x4F01099: TStorage::UpdateIsOnHeap(unsigned int const; volatile&, unsigned int volatile&) (in; /srv/workDir/usr/HZZAnalRun2Cod",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-759537229:19,wrap,wrapper,19,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-759537229,2,"['depend', 'wrap']","['depends', 'wrapper']"
Integrability,"Hi,; I'm trying to use lambda expressions to define TF1 objects.; Inside python I run the following code:; `from ROOT import TF1`; `f = TF1('f', lambda x: x[0], 0, 1)`; `f.Draw()`. but I get a blank canvas and this error:; ```; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/home/daniel/alice/sw/ubuntu2004_x86-64/ROOT/v6-24-06-13/lib/ROOT/_application.py"", line 68, in displayhook; gInterpreter.EndOfLineAction(); TypeError: void TInterpreter::EndOfLineAction() =>; TypeError: callable was deleted; ```. I'm using pyroot inside the AliPhysics environment. I tested these lines on 4 different machines that use different versions of python: 3.6, 3.7, 3.8 and 3.9. Only with the two older versions it runs as expected. For python 3.8 and 3.9 the error message is the same. Do you know what might be the cause of this behavior with newer versions of python?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9465:784,message,message,784,https://root.cern,https://github.com/root-project/root/issues/9465,1,['message'],['message']
Integrability,"Hi,; It is easy to bring ping to work!; But that does not necessarily mean that wget works.; Georg; Von meinem iPhone gesendet. > Am 21.06.2021 um 12:13 schrieb Bertrand Bellenot ***@***.***>:; > ; > ﻿; > There is a ugly workaround to check for network:; > ; > execute_process(; > COMMAND ping www.github.com -n 2 -w 1000; > RESULT_VARIABLE NO_CONNECTION; > ); > And then use NO_CONNECTION like for example:; > ; > if(NO_CONNECTION EQUAL 1); > message(STATUS ""No internet connection, disabling 'builtin_tbb' option""); > set(builtin_tbb OFF CACHE BOOL ""Disabled because there no internet connection"" FORCE); > set(imt OFF CACHE BOOL ""Disabled because 'builtin_tbb' was set but there no internet connection"" FORCE); > else(); > ...; > I quickly tried and the principle works, but I'll need time to make it working properly and that will complexify (again) CMake; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or unsubscribe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-865289345:444,message,message,444,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-865289345,1,['message'],['message']
Integrability,"Hi,; It is interesting that this job fails with the same segfault, although it; does not use directio for the inputs; https://bigpanda.cern.ch/job?pandaid=4946328705. It has some hardwired TFile open from RD. [2021-01-12 06:55:54.209757 -0500][Debug ][PostMaster ]; Creating new channel to: this-will-totally-fail:1094 1 stream(s); [2021-01-12 06:55:54.209835 -0500][Debug ][PostMaster ]; [this-will-totally-fail:1094 #0] Stream parameters: Network Stack:; IPAuto, Connection Window: 120, ConnectionRetry: 5, Stream Error; Window: 1800; [2021-01-12 06:55:54.209937 -0500][Debug ][TaskMgr ]; Registering task: ""TickGeneratorTask for: this-will-totally-fail:1094""; to be run at: [2021-01-12 06:56:09 -0500]; [2021-01-12 06:55:54.209976 -0500][Debug ][ExDbgMsg ]; [this-will-totally-fail:1094] MsgHandler created: 0x3171890 (message:; kXR_open (file: , mode: 00, flags: kXR_open_read kXR_async kXR_retstat; ) ).; [2021-01-12 06:55:54.210005 -0500][Dump ][PostMaster ]; [this-will-totally-fail:1094 #0] Sending message kXR_open (file: ,; mode: 00, flags: kXR_open_read kXR_async kXR_retstat ) (0x31933e0); through substream 0 expecting answer at 0; [2021-01-12 06:55:54.210582 -0500][Error ][Utility ] Unable; to resolve this-will-totally-fail:1094: Name or service not known; [2021-01-12 06:55:54.210595 -0500][Error ][PostMaster ]; [this-will-totally-fail:1094 #0] Unable to resolve IP address for the; host; [2021-01-12 06:55:54.210610 -0500][Error ][XRootD ]; [this-will-totally-fail:1094] Unable to send the message kXR_open; (file: , mode: 00, flags: kXR_open_read kXR_async kXR_retstat ):; [FATAL] Invalid address; [2021-01-12 06:55:54.210651 -0500][Debug ][ExDbgMsg ]; [this-will-totally-fail:1094] Destroying MsgHandler: 0x3171890.; Error in <TNetXNGFile::Open>: [FATAL] Invalid address; [2021-01-12 06:55:54.211229 -0500][Debug ][Utility ]; Monitor library name not set. No monitoring. The TFile is expected to fail, but why the segfault?; The jobs ran on native CentOS, so the singularity conta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-758618647:822,message,message,822,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-758618647,1,['message'],['message']
Integrability,"Hi,; It is overloading some network related commands to provide a record of what; users are remote accessing. It creates; https://bigpanda.cern.ch//media/filebrowser/5e40cf5d-179e-4126-ad56-e0bb0173cbd5/panda/tarball_PandaJob_4911855304_CERN/pandatracerlog.txt. 2020-12-04 18:55:07.949713 : INFO connect:; ::2001:1458:301:62:0:0:1094 cmd: runH4lAnalRun2. where IPv6 always rings alarm bells with me. This would be a; node/site,RSE dependence. Cheers,. Rod. On Mon, 14 Dec 2020 at 10:31, Attila Krasznahorkay <notifications@github.com>; wrote:. > Hi Rod,; >; > What does; >; > LD_PRELOAD=/srv/workDir/96340ef3-75b1-46cf-8910-8a2f76b7068c/$LIB/wrapper.so; >; > do? That would be my first suspect. Since $LD_LIBRARY_PATH lists our; > software directories in the correct order, based on just that XRootD; > *should* be found under:; >; > [bash][thor]:~ > ls -l /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrd*; > lrwxrwxrwx 1 cvmfs cvmfs 19 Sep 10 13:12 /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdAppUtils.so -> libXrdAppUtils.so.1; > lrwxrwxrwx 1 cvmfs cvmfs 23 Sep 10 13:12 /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdAppUtils.so.1 -> libXrdAppUtils.so.1.0.0; > -rwxr-xr-x 1 cvmfs cvmfs 74512 Sep 10 03:19 /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdAppUtils.so.1.0.0; > -rwxr-xr-x <http://atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdAppUtils.so.1.0.0-rwxr-xr-x> 1 cvmfs cvmfs 18432 Sep 10 03:19 /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdBlacklistDecision-4.so; > -rwxr-xr-x <http://atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/Inst",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-744315185:431,depend,dependence,431,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-744315185,2,"['depend', 'wrap']","['dependence', 'wrapper']"
Integrability,"Hi,; Letting the valgrind output go to stdout, it looks completely different; /afs/cern.ch/user/w/walkerr/public/RD_valgrid_stdout.log. I`ll try with this; --suppressions=valgrind-root.supp; to see if it reduces it. Cheers,; Rod. On Wed, 13 Jan 2021 at 18:53, Rodney Walker <; rodney.walker@physik.uni-muenchen.de> wrote:. > Hi,; > Sure; > /afs/cern.ch/user/w/walkerr/public/valg.log_nowrapper; > I have no idea what the binary junk is in there. I run it like this; >; > valgrind --log-file=../valg.log --leak-check=full --trace-children=yes; > --track-origins=yes --error-limit=no; > usr/HZZAnalRun2Code/1.0.0/InstallArea/x86_64-centos7-gcc8-opt/bin/runH4lAnalRun2; > $@; >; > but have no experience of valgrind so open to corrections.; >; > Cheers,; > Rod.; >; >; > On Wed, 13 Jan 2021 at 18:47, Axel Naumann <notifications@github.com>; > wrote:; >; >> Can you share the while valgrind report without wrapper? The error you; >> quote is intentional (and part of the ROOT suppression file).; >>; >> —; >> You are receiving this because you were mentioned.; >> Reply to this email directly, view it on GitHub; >> <https://github.com/root-project/root/issues/6948#issuecomment-759611858>,; >> or unsubscribe; >> <https://github.com/notifications/unsubscribe-auth/ABNFVRQSF742BV7R7BKKHV3SZXMDPANCNFSM4U2MLUJA>; >> .; >>; >; >; > --; > Tel. +49 89 289 14152; >. -- ; Tel. +49 89 289 14152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-759984606:903,wrap,wrapper,903,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-759984606,1,['wrap'],['wrapper']
Integrability,"Hi,; My apologies if i shouldn't post in this forum. I have a similar problem, i.e. a bus error on my MacBook Air M2 Sonoma 14.5 (Xcode 15.4 / clang 15.0.0) - root 6.30/06 ; (I've tried the binaries from the 'official' distribution, from homebrew and even recompiling the sources). If I run root from Terminal.app it gives me a bus error with the same ""message"" as TheCodeEater on April 3rd. . root [0] new TBrowser(). *** Break *** bus error; [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info); [/System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO] PNGReadPlugin::InitializePluginData(IIOImageReadSession*, IIODictionary*, IIODictionary*, CGImageMetadata*, CGColorSpace**, ReadPluginData&, PNGPluginData&, __CFDictionary*) (no debug info). But i **don't get** a bus error IF: ; a) I run root as regular user from an xterm ; b) I run ""sudo root"" from the Mac's Terminal.App. Any help is appreciated.; Francesco",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15129#issuecomment-2127806901:353,message,message,353,https://root.cern,https://github.com/root-project/root/issues/15129#issuecomment-2127806901,1,['message'],['message']
Integrability,"Hi,; RD thinks this is the relevant part .... ==2505== at 0x4C2D257: __strncmp_sse42 (vg_replace_strmem.c:649); ==2505== by 0x4E36472: connect (in; /srv/workDir/e8d1c011-6cad-4b4c-b0ad-5b9f65b33eb0/lib64/wrapper.so); ==2505== by 0x3F7B62B8: XrdNetConnect::Connect(int, sockaddr const*,; int, int) (in /cvmfs/; atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdUtils.so.2.0.0; ). /afs/cern.ch/user/w/walkerr/public/valg.log. Cheers,; Rod. On Tue, 12 Jan 2021 at 20:06, Rodney Walker <; rodney.walker@physik.uni-muenchen.de> wrote:. > Hi,; > I can run with valgrind now. https://bigpanda.cern.ch/job?pandaid=4946556588; > ends with; > ==2505== by 0x3FD274BC: XrdCl::File::Open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, XrdCl::OpenFlags::Flags, XrdCl::Access::Mode, unsigned short) (in /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdCl.so.2.0.0); >; > but maybe I did not have the right arguments. I tried again with; >; > --trace-children=yes --track-origins=yes --error-limit=no; > Should be; > https://bigpanda.cern.ch/job?pandaid=4946562660; >; > Cheers,; >; > Rod.; >; >; > On Tue, 12 Jan 2021 at 14:49, Attila Krasznahorkay <; > notifications@github.com> wrote:; >; >> In AnalysisBase-21.2.91 we used XRootD 4.8.4.; >>; >> And @#$% me... How did I not remember this earlier?!? Is this not all; >> about; >>; >> https://its.cern.ch/jira/browse/ATLASG-1546; >>; >> [image: Screenshot from 2021-01-12 14-46-12]; >> <https://user-images.githubusercontent.com/30694331/104322255-0438b000-54e5-11eb-897e-8d1ae2a125d4.png>; >>; >> ? I.e. it may not be the XRootD version after all, but the version of; >> ROOT... However, if this *is* the case, then AnalysisBase-21.2.140+; >> should *not* show the issue anymore. 🤔; >>; >> —; >> You are receiving this because you were mentioned.; >> Reply to this email directly, view it ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-759275653:204,wrap,wrapper,204,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-759275653,1,['wrap'],['wrapper']
Integrability,"Hi,; Right, I had a typo.; /afs/cern.ch/user/w/walkerr/public/RD_valgrid_stdout.log; /afs/cern.ch/user/w/walkerr/public/RD_valgrid_stdout_supp.log. The latter has an attempt to suppress the root known messages, and has; the slightly promising. [2021-01-14 04:10:07.044153 -0500][Debug ][XRootDTransport ]; [dcgftp.usatlas.bnl.gov:1096 #0.0] Sending out kXR_login request,; username: usatlas3, cgi:; ?xrd.cc=us&xrd.tz=-5&xrd.appname=runH4lAnalRun2&xrd.info=&xrd.hostname=acas1060.usatlas.bnl.gov&xrd.rn=v4.10.0,; dual-stack: false, private IPv4: false, private IPv6: false; [2021-01-14 04:10:07.046851 -0500][Dump ][AsyncSock ]; [dcgftp.usatlas.bnl.gov:1096 #0.0] Wrote a message: (0x3cc60ff0), 134; bytes; [2021-01-14 04:10:07.052644 -0500][Dump ][XRootDTransport ] [msg:; 0x3cbf39a0] Expecting 49 bytes of message body; [2021-01-14 04:10:07.053325 -0500][Dump ][AsyncSock ]; [dcgftp.usatlas.bnl.gov:1096 #0.0] Received message header, size: 8; [2021-01-14 04:10:07.053800 -0500][Dump ][AsyncSock ]; [dcgftp.usatlas.bnl.gov:1096 #0.0] Received a message of 57 bytes; [2021-01-14 04:10:07.058654 -0500][Debug ][XRootDTransport ]; [dcgftp.usatlas.bnl.gov:1096 #0.0] Logged in, session:; 7b7dbbd4cfaff647f020363a59db1b5c; [2021-01-14 04:10:07.059797 -0500][Debug ][XRootDTransport ]; [dcgftp.usatlas.bnl.gov:1096 #0.0] Authentication is required:; &P=gsi,v:10400,c:ssl,ca:f5f0dfc2; ==2495== Can't extend stack to 0x414a7fc8 during signal delivery for thread 2:; ==2495== no stack segment; ==2495==; ==2495== Process terminating with default action of signal 11; (SIGSEGV): dumping core; ==2495== Access not within mapped region at address 0x414A7FC8; ==2495== at 0x6703DF7: vfprintf (in /usr/lib64/libc-2.17.so); ==2495== If you believe this happened as a result of a stack; ==2495== overflow in your program's main thread (unlikely but; ==2495== possible), you can try to increase the size of the; ==2495== main thread stack using the --main-stacksize= flag.; ==2495== The main thread stack size used in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-760074314:201,message,messages,201,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-760074314,4,['message'],"['message', 'messages']"
Integrability,"Hi,; Sure; /afs/cern.ch/user/w/walkerr/public/valg.log_nowrapper; I have no idea what the binary junk is in there. I run it like this. valgrind --log-file=../valg.log --leak-check=full --trace-children=yes; --track-origins=yes --error-limit=no; usr/HZZAnalRun2Code/1.0.0/InstallArea/x86_64-centos7-gcc8-opt/bin/runH4lAnalRun2; $@. but have no experience of valgrind so open to corrections. Cheers,; Rod. On Wed, 13 Jan 2021 at 18:47, Axel Naumann <notifications@github.com> wrote:. > Can you share the while valgrind report without wrapper? The error you; > quote is intentional (and part of the ROOT suppression file).; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/6948#issuecomment-759611858>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABNFVRQSF742BV7R7BKKHV3SZXMDPANCNFSM4U2MLUJA>; > .; >. -- ; Tel. +49 89 289 14152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-759615449:532,wrap,wrapper,532,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-759615449,1,['wrap'],['wrapper']
Integrability,"Hi,; We are trying to test latest ROOT 6.28 patches (commit 36349764e9) and ROOT master (commit 84d6328434) branch changes in cmssw. Though root itself builds fine in both cases but we get CMSSW build errors [a]. Note that we did not see such errors with ROOT 6.28-patches commit b684439239. Looks like rootcling and `c++20` issue. Is it a known issue?. [a] ; https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-394617/32404/build.log; ```; >> Checking EDM Class Version for src/DataFormats/L1GlobalCaloTrigger/src/classes_def.xml in libDataFormatsL1GlobalCaloTrigger.so; /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'; module ""bits/uses_allocator_args.h"" [optional] {; ^; /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here; #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc; ^; ```. this is the stack trace we see when this error occurs; ```; ===========================================================; There was a crash (kSigAbort).; This is the entire stack trace of all threads:; ===========================================================; #0 0x00002b4bd10da72b in waitpid () from /lib64/libc.so.6; #1 0x00002b4bd103bcf7 in do_system () from /lib64/libc.so.6; #2 0x00002b4bd1d2345c in TUnixSystem::Exec (this=0x7472d0, shellcmd=0xc1f5720 ""/pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/etc/gdb-backtrace.sh 43811 1>&2"") at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:418,integrat,integration,418,https://root.cern,https://github.com/root-project/root/issues/12771,1,['integrat'],['integration']
Integrability,"Hi,; We are trying to update root 6.24 branch (commit https://github.com/root-project/root/commit/7c0cfaca4c70c7394328547c05e00028b0079a03) in CMSSW special integration builds (https://github.com/cms-sw/cmsdist/pull/6746/files ) but looks like pyROOT fails/hangs for some special dictionaries. . While building cmssw , we use https://github.com/cms-sw/cmssw/blob/master/FWCore/Utilities/scripts/edmCheckClassVersion to check for root dictionaries class versions. This works for most of our dictionaries e.g following two run fine ( https://github.com/cms-sw/cmssw/blob/master/DataFormats/TauReco/src/classes_def_hlt.xml, https://github.com/cms-sw/cmssw/blob/master/DataFormats/TauReco/src/classes_def_1.xml ); ```; > src/FWCore/Utilities/scripts/edmCheckClassVersion -l libDataFormatsTauReco.so -x src/DataFormats/TauReco/src/classes_def_hlt.xml; > src/FWCore/Utilities/scripts/edmCheckClassVersion -l libDataFormatsTauReco.so -x src/DataFormats/TauReco/src/classes_def_1.xml; ```; but it fails/hangs for https://github.com/cms-sw/cmssw/blob/master/DataFormats/TauReco/src/classes_def_2.xml; ```; > src/FWCore/Utilities/scripts/edmCheckClassVersion -l libDataFormatsTauReco.so -x src/DataFormats/TauReco/src/classes_def_2.xml; ```; Most of the times the above command just hangs with error https://muzaffar.web.cern.ch/root624/err1.log but once I was able to get this error https://muzaffar.web.cern.ch/root624/err.log . Can you please look in to it and see if this log helps? . In case you want to try it yourself then you go to cmsdev25 and do; ```; >cd /build/muz/r624/w/tmp/BUILDROOT/ea8220342d406ab7dbc2d210a1e9351b/opt/cmssw/slc7_amd64_gcc900/cms/cmssw/CMSSW_11_3_ROOT624_X_2021-03-25-1100; >cmsenv; >/build/muz/r624/w/tmp/BUILDROOT/ea8220342d406ab7dbc2d210a1e9351b/opt/cmssw/slc7_amd64_gcc900/cms/cmssw/CMSSW_11_3_ROOT624_X_2021-03-25-1100/src/FWCore/Utilities/scripts/edmCheckClassVersion -l libDataFormatsTauReco.so -x /build/muz/r624/w/tmp/BUILDROOT/ea8220342d406ab7dbc2d210a1e9351b/opt/cmss",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718:157,integrat,integration,157,https://root.cern,https://github.com/root-project/root/issues/7718,1,['integrat'],['integration']
Integrability,"Hi,; first of all thank you for your contribution. I am in no position to actually review the content of the pull request, but it seems you are adding two commits with unclear descriptions that change 37 files and 4000+ lines -- making it a hard PR to review. If you have time and it sounds reasonable to you, it might be desirable to split the PR in commits containing small self-contained logical changes (with a descriptive commit message). Perhaps more importantly, it seems some rebasing artifacts like; ```; +<<<<<<< HEAD; ```; were left in the code. Cheers,; Enrico",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/792#issuecomment-316685899:434,message,message,434,https://root.cern,https://github.com/root-project/root/pull/792#issuecomment-316685899,1,['message'],['message']
Integrability,"Hi,; still not working:; It detects a working connection: . t$ cmake -DCMAKE_INSALL_PREFIX=../root-inst-test ../root-check-internet-connection; -- The C compiler identification is GNU 8.3.1; -- The CXX compiler identification is GNU 8.3.1; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: /usr/bin/git (found version ""2.27.0""); -- Checking internet connectivity...; -- Yes. I'm trying this manually:. $ wget --timeout=10 https://root.cern.ch/files/dummy.txt; --2021-06-24 13:20:37-- https://root.cern.ch/files/dummy.txt; Resolving root.cern.ch (root.cern.ch)... 137.138.18.236, 2001:1458:201:ee::100:6; Connecting to root.cern.ch (root.cern.ch)|137.138.18.236|:443... connected.; Unable to establish SSL connection.; ussapc@warlv0010/~$ echo $?; 4. man of wget says:; EXIT STATUS; Wget may return one of several error codes if it encounters problems. 0 No problems occurred.; 1 Generic error code.; 2 Parse error---for instance, when parsing command-line options, the .wgetrc or .netrc...; 3 File I/O error.; 4 Network failure.; 5 SSL verification failure.; 6 Username/password authentication failure.; 7 Protocol errors.; 8 Server issued an error response. I would recommend STATUS != 0 instead of STATUS=6. As you can see above name resolution is working, but the connection is blocked by the firewall. Georg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-867634208:1582,Protocol,Protocol,1582,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-867634208,1,['Protocol'],['Protocol']
Integrability,"Hi; few comments after digging a bit in the code... . - it looks the problem is not in the RooDataHist itself but it's in the plotOn function. If you check the RooDataHist content, bin content is equal to the original histogram. The problem looks coming from this line [0]: if you comment it then the plot looks good.; - the plotting problem occurs also when you get a PDF from the RooDataHist using RooHistPdf. If you compare the PDF with the original histogram (scaled to have integral equal to one), the fixed size bin histogram looks good while the variable size bin histogram doesn't. In this case I didn't find how to fix the problem (the RooHistPdf code is a lot more complicated than the RooDataHist routine) but checking the behaviour of the PDF (i.e fitting the PDF to the RooDataHist), everything looks ok both for the fixed and variable size histogram. See the attached modified version of the previous code to see the PDF begaviour mentioned above. Best. Attilio. [0] https://github.com/root-project/root/blob/b8b0a8150325be271b45038dd81b751cb8a7a41d/roofit/roofitcore/src/RooHist.cxx#L434. ```using namespace RooFit;. int nEntries = 1000000;. void myTestRooDataHist() {. const int nBin=100;; double xbins[nBin+1];; const float left_Val = 150;; const float rightVal = 1150; ; const float logxmin = TMath::Log10(left_Val);; const float logxmax = TMath::Log10(rightVal);; const double dxLog = (logxmax-logxmin)/nBin;; for (int i=0;i<=nBin;i++) xbins[i] = TMath::Power(10., logxmin + i * dxLog);. TF1 *f1 = new TF1(""f1"",""expo(0)"",left_Val,rightVal);; f1->SetParameters(1e2,-1e-2);. RooRealVar mInv(""mInv"",""m [GeV]"",150,1150);; RooRealVar expo(""expo"", ""expo"", -1.0, -0.00001);; RooExponential fitExpoFun(""background"", ""background"", mInv, expo);. TH1D *h1 = new TH1D(""h1"","""",nBin,left_Val,rightVal);; h1->FillRandom(""f1"",nEntries);; RooDataHist hist_test1(""hist_test1"",""hist_test1"",mInv,h1,1);; TCanvas *cExpo1 = new TCanvas(""cExpo1"","""",600,600);; gPad->SetLogx();; gPad->SetLogy();; auto plot",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16028#issuecomment-2277514164:708,rout,routine,708,https://root.cern,https://github.com/root-project/root/issues/16028#issuecomment-2277514164,1,['rout'],['routine']
Integrability,"HistFactory is spamming messages to cout when hist2workspace runs.; - A new message topic HistFactory was added to RooFit's message streams,; which allows to suppress these messages.; - ObjectHandling messages are now automatically suppressed when HistFactory runs.; - Documentation of ParamHistFunction improved a bit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3913:24,message,messages,24,https://root.cern,https://github.com/root-project/root/pull/3913,5,['message'],"['message', 'messages']"
Integrability,"Histo1D(""x"")->DrawClone(); IncrementalExecutor::executeFunction: symbol '_ZSt4moveIRN4ROOT8Internal3RDF15RColumnRegisterEEONSt16remove_referenceIT_E4typeEOS6_' unresolved while linking [cling interface function]!; You are probably missing the definition of std::remove_reference<ROOT::Internal::RDF::RColumnRegister&>::type&& std::move<ROOT::Internal::RDF::RColumnRegister&>(ROOT::Internal::RDF::RColumnRegister&); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZSt4moveIRSt10shared_ptrIN4ROOT6Detail3RDF13RJittedDefineEEEONSt16remove_referenceIT_E4typeEOS8_' unresolved while linking [cling interface function]!; You are probably missing the definition of std::remove_reference<std::shared_ptr<ROOT::Detail::RDF::RJittedDefine>&>::type&& std::move<std::shared_ptr<ROOT::Detail::RDF::RJittedDefine>&>(std::shared_ptr<ROOT::Detail::RDF::RJittedDefine>&); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E' unresolved while linking [cling interface function]!; You are probably missing the definition of void std::_Destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocato",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6439#issuecomment-1833762580:561,interface,interface,561,https://root.cern,https://github.com/root-project/root/issues/6439#issuecomment-1833762580,2,['interface'],['interface']
Integrability,"Histo1D(""x"")->DrawClone(); IncrementalExecutor::executeFunction: symbol '_ZSt4swapIP4TH1DENSt9enable_ifIXsr6__and_ISt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SE_' unresolved while linking [cling interface function]!; You are probably missing the definition of std::enable_if<__and_<std::__not_<std::__is_tuple_like<TH1D*> >, std::is_move_constructible<TH1D*>, std::is_move_assignable<TH1D*> >::value, void>::type std::swap<TH1D*>(TH1D*&, TH1D*&); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZSt11make_sharedIN4ROOT8Internal3RDF13RJittedActionEJRNS0_6Detail3RDF12RLoopManagerERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISE_EERNS2_15RColumnRegisterESI_EESt10shared_ptrINSt9enable_ifIXntsr8is_arrayIT_EE5valueESN_E4typeEEDpOT0_' unresolved while linking [cling interface function]!; You are probably missing the definition of std::shared_ptr<std::enable_if<!is_array<ROOT::Internal::RDF::RJittedAction>::value, ROOT::Internal::RDF::RJittedAction>::type> std::make_shared<ROOT::Internal::RDF::RJittedAction, ROOT::Detail::RDF::RLoopManager&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, ROOT::Internal::RDF::RColumnRegister&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6439#issuecomment-1573184913:689,interface,interface,689,https://root.cern,https://github.com/root-project/root/issues/6439#issuecomment-1573184913,2,['interface'],['interface']
Integrability,"Hi，. This PR should be able to work. Let me know if there is any more test I should do?. Zhe; Get Outlook for iOS<https://aka.ms/o0ukef>; ________________________________; From: Philippe Canal <notifications@github.com>; Sent: Friday, December 15, 2017 11:58:35 PM; To: root-project/root; Cc: Zhe Zhang; Mention; Subject: Re: [root-project/root] Use TTaskGroup interface to unzip baskets in parallel. (#1010). Hi,. What is the current status?. Thanks,; Philippe. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/root-project/root/pull/1010#issuecomment-352041416>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AFNlv-BHdUVdXZimUdINFb9yBtGjbgbpks5tApcrgaJpZM4PbhS5>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1010#issuecomment-352102770:361,interface,interface,361,https://root.cern,https://github.com/root-project/root/pull/1010#issuecomment-352102770,1,['interface'],['interface']
Integrability,"Hm... you have a point. OTOH, all Vc-aware header files should include Vc. It seems that we have `R__HAS_VC` option for that. You could wrap the headers in `ifdef R__HAS_VC`. Yes, only members can trigger a build :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/394#issuecomment-286430243:136,wrap,wrap,136,https://root.cern,https://github.com/root-project/root/pull/394#issuecomment-286430243,1,['wrap'],['wrap']
Integrability,"Hmm, I already did what I quoted in my last comment.; Now if I did:; git rebase upstream/master; ->; Applying: cppcheck: fix some reports; Applying: fix warnings for catch; julien@debian:~/projects/root$ git push; Username for 'https://github.com': serval2412; Password for 'https://serval2412@github.com': ; To https://github.com/serval2412/root; ! [rejected] master -> master (non-fast-forward); error: failed to push some refs to 'https://github.com/serval2412/root'; hint: Updates were rejected because the tip of your current branch is behind; hint: its remote counterpart. Integrate the remote changes (e.g.; hint: 'git pull ...') before pushing again.; hint: See the 'Note about fast-forwards' in 'git push --help' for details.; What should I do then?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1435#issuecomment-361205718:579,Integrat,Integrate,579,https://root.cern,https://github.com/root-project/root/pull/1435#issuecomment-361205718,1,['Integrat'],['Integrate']
Integrability,"Hmm, this is fishy. It was my impression that the PrintMatrix macro actually wasn't used in active code anywhere (maybe only true for master at the time of integration and not for the snapshot at 6.14?).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2983#issuecomment-439092676:156,integrat,integration,156,https://root.cern,https://github.com/root-project/root/pull/2983#issuecomment-439092676,1,['integrat'],['integration']
Integrability,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```; [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/; -- The CXX compiler identification is GNU 11.3.1; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/c++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):; Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY); Call Stack (most recent call first):; /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE); /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args); /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package); /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency); CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred!; See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"".; [bash][pcadp04]:buildtest >; ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14163#issuecomment-1840438213:604,message,message,604,https://root.cern,https://github.com/root-project/root/issues/14163#issuecomment-1840438213,1,['message'],['message']
Integrability,"Hmm... That in principle looks fine... So okay, your test job **is** relevant. Unfortunately I'm running out of ideas. The XRootD build in `AnalysisBaseExternals` does depend on a couple of libraries from the OS. But these should only be things that are part of HEP_OSlibs. So the worker nodes should not really have different versions of them... ```; [bash][lxplus730]:~ > ldd -r /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrd*.so | grep "" /lib"" | sed ""s/\(.*\) (0x.*)/\1/g"" | sort | uniq ; 	libc.so.6 => /lib64/libc.so.6; 	libcom_err.so.2 => /lib64/libcom_err.so.2; 	libcrypt.so.1 => /lib64/libcrypt.so.1; 	libcrypto.so.10 => /lib64/libcrypto.so.10; 	libcurl.so.4 => /lib64/libcurl.so.4; 	libdl.so.2 => /lib64/libdl.so.2; 	libfreebl3.so => /lib64/libfreebl3.so; 	libgssapi_krb5.so.2 => /lib64/libgssapi_krb5.so.2; 	libidn.so.11 => /lib64/libidn.so.11; 	libk5crypto.so.3 => /lib64/libk5crypto.so.3; 	libkeyutils.so.1 => /lib64/libkeyutils.so.1; 	libkrb5.so.3 => /lib64/libkrb5.so.3; 	libkrb5support.so.0 => /lib64/libkrb5support.so.0; 	liblber-2.4.so.2 => /lib64/liblber-2.4.so.2; 	libldap-2.4.so.2 => /lib64/libldap-2.4.so.2; 	libm.so.6 => /lib64/libm.so.6; 	libnspr4.so => /lib64/libnspr4.so; 	libnss3.so => /lib64/libnss3.so; 	libnssutil3.so => /lib64/libnssutil3.so; 	libpcre.so.1 => /lib64/libpcre.so.1; 	libplc4.so => /lib64/libplc4.so; 	libplds4.so => /lib64/libplds4.so; 	libpthread.so.0 => /lib64/libpthread.so.0; 	libresolv.so.2 => /lib64/libresolv.so.2; 	librt.so.1 => /lib64/librt.so.1; 	libsasl2.so.3 => /lib64/libsasl2.so.3; 	libselinux.so.1 => /lib64/libselinux.so.1; 	libsmime3.so => /lib64/libsmime3.so; 	libssh2.so.1 => /lib64/libssh2.so.1; 	libssl.so.10 => /lib64/libssl.so.10; 	libssl3.so => /lib64/libssl3.so; 	libz.so.1 => /lib64/libz.so.1; [bash][lxplus730]:~ >; ```. Could the version of some of these not be ""well defined"" on the grid nodes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-746514897:168,depend,depend,168,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746514897,1,['depend'],['depend']
Integrability,"Hmmh, but then I'd need to stream path information with every REveText object, now only the font name is streamed. It is indeed a reasonable thing to check if the font files exist before object's json is sent over to the client --- but creating a font during the streaming traversal would be pushing it a bit. Is it possible to register custom prefixes and callbacks from REveManager (via RWebWindow) so they can be handled when requests come in? Like: http://server/sdf-fonts/. I went through the code a bit (but clearly do not have the full picture) ... one way would be to add THttpServer::fActiveLocations, where instead of replacement string one provides a lambda [](TString& prefix, TString& reminder, THttpRequest& req, THttpServer &srv) so one can then do appropriate lookup in the callback, potentially generating the font, and then calling srv->SendFile() (or sending back the default font, if the desired one can not be found/generated). I think this functionality could be useful for other cases in REve, where semi-static data needs to be provided. The font-generation code in REveText invokes TGL generator through the interpreter now, via gROOT->ProcessLine(), to avoid dependency of REve on RGL. Is this OK to do from a request handler thread or should cross-thread request to the main thread be made (and request told to try again in N seconds)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15812#issuecomment-2176441216:1185,depend,dependency,1185,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2176441216,1,['depend'],['dependency']
Integrability,"Honestly -- indeed, this should be a ROOT-internal interface. There's so many ""magic"" pieces here that I'm suspicious it's actually useful to others. That said, I found the comment about backward compat of *ABI* strange. The backward compatibility of _API_ is indeed more appealing (assuming we don't want to make this an internal API completely). To keep the API compatible, we can always provide both the old and new API (where the old implementation is just a shim to the new API). Heck, it might make since to put the cleaned-up API in a `ROOT::Internal` namespace and then leave the old API for backward compat.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4060#issuecomment-510894439:51,interface,interface,51,https://root.cern,https://github.com/root-project/root/pull/4060#issuecomment-510894439,1,['interface'],['interface']
Integrability,"How costly is regenerating lib/modules.idx, and which targets depend on this file (i.e. what gets rebuild just because this file got regenerated)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7125#issuecomment-912938424:62,depend,depend,62,https://root.cern,https://github.com/root-project/root/issues/7125#issuecomment-912938424,1,['depend'],['depend']
Integrability,How did you discover that this was needed? GetCollectionEntryName is a protected/internal routine that is never called will a nullptr. Maybe an assert or something is more appropriate improvement?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6634#issuecomment-709390383:90,rout,routine,90,https://root.cern,https://github.com/root-project/root/pull/6634#issuecomment-709390383,1,['rout'],['routine']
Integrability,"How is it accidental? It was totally on purpose, solving other occurrences of this exact same issue. I suppose, because i have not seen any issue / error message / backtrace, so all I can do is guess and assume :-) Can you please provide some details on the issue you try to fix? Can you please rebase this branch onto master? We do not allow merge commits (unless fast forward).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8717#issuecomment-885080317:154,message,message,154,https://root.cern,https://github.com/root-project/root/pull/8717#issuecomment-885080317,1,['message'],['message']
Integrability,How much will it help ATLAS if I fix this reproducer? What is the actual failure's error message?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12406#issuecomment-1542907415:89,message,message,89,https://root.cern,https://github.com/root-project/root/issues/12406#issuecomment-1542907415,1,['message'],['message']
Integrability,"How would we do that with Define?. Is it not possible to store these indexes in the trees when they are produced? If not, currently you have three possible solutions that I can think of:. - calculate the index from the value of `rdfentry_`, knowing how many entries are in each tree and their ordering inside the TChain; - store some unique identifier in each tree when it's produced (even a timestamp works, and although it's not elegant you don't have to worry about having that same value stored in each event because it will compress almost perfectly, occupying very little extra space on disk). With that unique identifier per tree you can build another tree that serves as a lookup table between id and index. It will have two branches, `id` and `index`, with the first taking the values of the ids of each tree and the second being an index from 0 to nTrees-1. Then you can use `TTree::BuildIndex` and `TChain::AddFriend` to add that lookup table tree as a friend of the original chain and thanks to `BuildIndex` the correct value of `index` will be returned for each event depending on the value of `id` in the original chain. More info at https://root.cern/manual/trees/#indexing-trees; - do a pass on each input tree to calculate whatever other quantities you need to calculate (let's call these trees `aux1`, `aux2` etc.), then make a TChain out of the original trees, another TChain out of the `aux` trees, and then add the second chain as a friend of the first (effectively creating a single large ""virtual"" TTree with everything in it). The simplest solution: with the upcoming `DefinePerSample` method you can solve this more easily, but the feature will only be merged in ROOT master in a few days ([PR here](https://github.com/root-project/root/pull/8841)). With `DefinePerSample` you could write something like this:. ```cpp; df.DefinePerSample(""index"", ""GetIndex(rdfsampleinfo_.AsString())""); ```. where `rdfsampleinfo_.AsString()` will be of the form `<filename>/<treename>`. I exp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9030#issuecomment-929346153:1364,depend,depending,1364,https://root.cern,https://github.com/root-project/root/issues/9030#issuecomment-929346153,1,['depend'],['depending']
Integrability,"However, if I run with `ctest --output-on-failure -R roottest-root-dataframe` then tests pass, so I guess some test dependencies may be missing? Certainly looks like I run into the same problem as in #7366.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936#issuecomment-823925412:116,depend,dependencies,116,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-823925412,1,['depend'],['dependencies']
Integrability,"I added the TH1 changes, this leads to a lot of warnings,; I guess this comes from implementations expecting the old interfaces.; Should I keep the old interfaces as well so whatever was implementing them to ""see"" what's expected ? (excuse my ignorance but I haven't been coding consistently for some time to remember this much by heart)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7193#issuecomment-786729943:117,interface,interfaces,117,https://root.cern,https://github.com/root-project/root/pull/7193#issuecomment-786729943,2,['interface'],['interfaces']
Integrability,"I added the error message to the commit log, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9725#issuecomment-1023164434:18,message,message,18,https://root.cern,https://github.com/root-project/root/pull/9725#issuecomment-1023164434,1,['message'],['message']
Integrability,"I addition to the fix for the one-line printing, I would like to get one last commit in, https://github.com/root-project/root/pull/6705/commits/bcd7adeddf2997feb588ec1c61a67e0247cdb92f. I think the warning levels need to be tweaked for some messages (but this can be done in later PRs). I just did this here for VariableMetricBuilder, because these are rather prominent messages. I changed two warnings into info messages, because the reported issue is not so severe that it warrants a warning, and it is something that happens fairly often in my experience. On the other hand, I promoted a warning to an error message. If VariableMetricBuilder cannot run at all because the initial EDM is negative, I would consider this an error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-732211063:241,message,messages,241,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-732211063,4,['message'],"['message', 'messages']"
Integrability,"I agree that it is an unfortunate circumstance to have the test not passing. However, I still urge you to consider the effect on debugability removing strict tests will have. I have wasted a lot of time trying to track down a subtle bug due to loose tests which left me unable to determine where the bug came from. Conversely, setting tests strictly and tracing discrepancies, I found a different bug in the Kahan sum: #11940. Unit tests especially should be as strict as possible. In absence of unit tests (which unfortunately is the case for the parts of RooFit I worked on), strict ""integration"" tests like these are the closest I could get. Note also that it was simply part of my original assignment: to ensure users can trust the new parallelized methods, I built them to be bit-wise exactly equal to the old methods. So, I know from experience how tedious it is to trace down these bit-wise differences to their actual concrete source, but also think that because we are dealing with scientific software, precision, robustness, reliability and interpretability (of components and hence the whole) are important. Of course, performance is an important factor too, but it's just one of the aspects. We want the end-results of experiments to be accurate and explainable, right? I personally at least don't like when I have to sell a ""because of floating point errors"", because I've been bitten by them a few times now. Now, I'm also well aware that the project only has a given amount of resources and I myself am currently more or less out of resources (I can spend only my free time), so my vote probably doesn't count strongly :) If I could be of more practical help in this, I would definitely be happy to, but I also don't have a non-x86 machine, so it's not feasible for me to do much right now. So, feel free to make a call on this as you all best see fit!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12389#issuecomment-1538758017:586,integrat,integration,586,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1538758017,1,['integrat'],['integration']
Integrability,"I agree that the interface is somewhat dangerous but the docs clearly mention its limitations. However, dangerous or not, this is currently broken and should be fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14135#issuecomment-1830160591:17,interface,interface,17,https://root.cern,https://github.com/root-project/root/pull/14135#issuecomment-1830160591,1,['interface'],['interface']
Integrability,"I agree that the test should probably not use `echo` for that but we should probably fix the interface, too. Is `Value::isVoid` not being checked in the `echo` interface? I am not sure I understand how it worked before and how the PR you mentioned broke it..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13282#issuecomment-1642121018:93,interface,interface,93,https://root.cern,https://github.com/root-project/root/pull/13282#issuecomment-1642121018,2,['interface'],['interface']
Integrability,"I agree that there is a problem, and it comes from the fact that you cannot easily depend on Vdt via targets when Vdt is builtin. CMake complains about headers in the interface which are in the build directory in that case, so a lot of workarounds are needed and no workaround works reliably across CMake versions. When I last touched this, we decided to use variables and rely on the fact that vdt headers were installed into the same place as ROOT headers when Vdt was builtin. However, when Vdt and ROOT are installed separately and into different locations, this doesn't work so well indeed. Fixing this is overdue, but we unfortunately have to keep it working for both builtin/external Vdt. I think that the solution proposed by @krasznaa is in the right direction.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11797#issuecomment-1338982945:83,depend,depend,83,https://root.cern,https://github.com/root-project/root/issues/11797#issuecomment-1338982945,2,"['depend', 'interface']","['depend', 'interface']"
Integrability,"I agree with you @guitargeek , TVectorT is a legacy class and I would not change its interface. It is better to add the constructor from the initialiser list directly in the TGraph",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9968#issuecomment-2076933777:85,interface,interface,85,https://root.cern,https://github.com/root-project/root/pull/9968#issuecomment-2076933777,1,['interface'],['interface']
Integrability,"I agree, that is the best way to go in theory. In practice, I'm dealing with time constraints that will make this challenging. The timeline for including `ppoll` into libzmq would be a liability, because even though I'm not worried it will not be accepted (it is actually quite a simple addition, especially in the way that [a libzmq maintainer suggests here](https://github.com/zeromq/libzmq/issues/4220)), delaying this PR to wait for that one will probably result in extra merging efforts for the later RooFit PRs that depend on this one. In any case, if this is the way we must go (and I can totally understand that you would want it this way), I will do my best to split up the other PRs as much as possible, so that those can be merged independently asap and merging conflicts will hopefully be minimized.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8385#issuecomment-870483338:522,depend,depend,522,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870483338,1,['depend'],['depend']
Integrability,"I already told Axel I was ""playing"" with clang-tidy. Here are some first results, basically low-hanging fruits only. I also included some of my own TMVA patches (more progress bars / unordered_map) and code modernization for TMVA. Biggest improvement is probably the missing TString move assignment operator, that makes sorting a vector<TString> much much faster if the strings are too long for short string optimization. Most of these patches can be applied in any order, they do not depend on each other. We can discuss the large modernize-loops commit. I didn't have enough time to go through the loop variable names. The autogenerated names are not always the best (especially if the name ""i"" is generated). Nevertheless I wanted to push all these changes before SB52 :-)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1585:485,depend,depend,485,https://root.cern,https://github.com/root-project/root/pull/1585,1,['depend'],['depend']
Integrability,I also added the dependencies for rootcling regarding the BUILTINS. This should prevent the unlikely case that rootcling starts before the BUILTINS are ready (which is more likely once we don't have to build LLVM anymore).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/752#issuecomment-314473282:17,depend,dependencies,17,https://root.cern,https://github.com/root-project/root/pull/752#issuecomment-314473282,1,['depend'],['dependencies']
Integrability,I also found the culprit of the new CI failures. It's the Python [tblib](https://github.com/ionelmc/python-tblib) package (a dependency of Dask) that specifically treats the serialization/deserialization of exceptions. A new release appeared on Oct 22th and that somehow forces the serialization of the `std::runtime_error` thrown in the RDataFrame event loop. Downgrading to the previous tblib version makes the problem disappear on the alma9 CI image that I'm testing with. This confirms the necessity of this hotfix since we have to deal with the updated dependency.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13926#issuecomment-1777619648:125,depend,dependency,125,https://root.cern,https://github.com/root-project/root/pull/13926#issuecomment-1777619648,2,['depend'],['dependency']
Integrability,"I also thought that Cppyy was handling the construction via the customization of `tp_call` in class proxies, but it turns out there is an `__init__` method injected in class proxies (which is a `CPPOverload`). So in principle it should be possible to inject a pythonisation such as the one Enrico proposed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3424#issuecomment-463226835:156,inject,injected,156,https://root.cern,https://github.com/root-project/root/pull/3424#issuecomment-463226835,2,['inject'],"['inject', 'injected']"
Integrability,"I always run with the gnuinstall option, and I see no failures. But I don't have as many tests in total as you. For my 6.08.04 build I have (see: https://kojipkgs.fedoraproject.org//packages/root/6.08.04/1.fc25/data/logs/x86_64/build.log):. 100% tests passed, 0 tests failed out of 602. This is with a few tests requiring network access disabled. make test 'ARGS=-j16 --output-on-failure -E ""test-stressIOPlugins-.*|tutorial-tree-run_h1analysis|tutorial-multicore-imt001_parBranchProcessing|tutorial-multicore-mp103_processSelector|tutorial-multicore-imt101_parTreeProcessing""'. But those few disabled tests do not account for the difference between 602 and 1395. I disable all the builtin options (except for llvm), and build using the versions of external dependencies that are available in the distribution. Can you elaborate on what you mean by ""because the ROOT libraries are expected in different place""? When running the test suite in the build tree, the libraries are expected to be in the same place independently of the gnuinstall option (i.e. in ${CMAKE_BINARY_DIR}/lib). The location of the built targets in the build tree are supposed to not depend on whether the gnuinstall option is on or off.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/130#issuecomment-273462003:758,depend,dependencies,758,https://root.cern,https://github.com/root-project/root/pull/130#issuecomment-273462003,2,['depend'],"['depend', 'dependencies']"
Integrability,"I am a little concerned about the basic idea. If I understood correctly, there is a (unique) global registry where the histogram are identified based on their 'full path name' (beside the fact that GetNameForRanges seems both brittle and currently seems on first reading 'wrong'/'not-as-intended'). I see two major problems, one is that the 'full path name' may never be really unique i.e. it might be impossible to avoid synonyms that are semantically distincts ... a good example is two free standings (not attached to any directory) histograms that happens to have the same name in two distinct and independent part of the code (e.g. two CMSSW modules). The other major problem is that it unnecessary tie (via that global mutex) all the 'parallel' histogram, this means that the overall scalability is inherently decreased. Rather than a completely global state, wouldn't it make sense to have a wrapper object (for example TThreadedObject) be the holder of the lock and list for a single set of related histogram.; This would both reduce contention and guarantees that the histograms are really related. A 3rd significant problem (but fixeable) is that the operation covered by the ReadWrite lock are not atomic (and/or trivial) and for the look of it could plausibly indirectly request the ROOT global lock and thus can lead to deadlocks (from some other code that hold the ROOT global locks and request the Write part of the ReadWrite lock). A 4th deficiency is that once activated for one histogram it *seems* to apply to all histogram. i.e. as far as can tell if you one parallel histograms and 10,000 single-thread histograms, filling the single-thread histogram still has to go through the multi-thread registration/mechanism. And that remind me, that another challenge for the 'unique registry' solution is to understand its scalability where reaching 10 to 100 thousands histograms. Thanks,; Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/902#issuecomment-325689991:899,wrap,wrapper,899,https://root.cern,https://github.com/root-project/root/pull/902#issuecomment-325689991,1,['wrap'],['wrapper']
Integrability,"I am a little confused on how that affects path length. . The idea of that patch was that if we specify no_cxxmodule we should not expect targets that depend on it to have modules as the “dependee” would include the other headers making a mess. We should be fine reverting this change, if indeed is broken. We should be able to propagate the NO_CXXMODULE option through the dependency chain by hand.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12561#issuecomment-1489916860:151,depend,depend,151,https://root.cern,https://github.com/root-project/root/pull/12561#issuecomment-1489916860,3,['depend'],"['depend', 'dependee', 'dependency']"
Integrability,"I am all for removing unnecessary code. I did not infer from the description that this was about ""out of date"" file rather than missing files. My concern is that I do not know (and ""was developed to cover some failures in both cms and root. "" is not specific enough to help me here :) ) that we actually have any actual case in routine ROOT or CMSSW testing to cover this case. If you can point me to where it is tested (and/or the problem(s) description that were fix by this). In particular if the test is about a file references by the module becoming newer than the produced module ( unless we specifically added a test for it), I can not see how the automated testing would triggered the (previously?) failing case. TLDR: I do not know that the testing we had done so far prove that the patch is no longer needed (but I of course could be wrong or mis-informed).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633#issuecomment-1151400413:328,rout,routine,328,https://root.cern,https://github.com/root-project/root/pull/10633#issuecomment-1151400413,1,['rout'],['routine']
Integrability,"I am back. Could you elaborate on what you would like to have as a separate function? I did some more cleanup and now it would be basically mean wrapping a couple of lines, forwarding a bunch of stuff, which would look ugly, IMHO. On a separate note, in O2 I wrote [a more complete wrapper](https://github.com/AliceO2Group/AliceO2/blob/96cae760a908ef18d960d925c188c6c101232757/Framework/Foundation/include/Framework/Signpost.h) which basically just forwards things on macOS to the underlying API and invokes a user provided logging function on Linux. Would you be interested in adopting a cleaned up version of it in ROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13146#issuecomment-1669195142:145,wrap,wrapping,145,https://root.cern,https://github.com/root-project/root/pull/13146#issuecomment-1669195142,2,['wrap'],"['wrapper', 'wrapping']"
Integrability,"I am confused. I don't see how TMath.h depends on Vc and why you need to link against Vc. @dpiparo, one disadvantage of using functions from STL by qualified names is Vc. This doesn't allow users that include Vc (or any other vectorization library using the ADL pattern) to vectorize their code. I do not like duplicating constants lib Pi all over the place. Let's discuss that in person.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/466#issuecomment-290338132:39,depend,depends,39,https://root.cern,https://github.com/root-project/root/pull/466#issuecomment-290338132,1,['depend'],['depends']
Integrability,"I am just showing you, so you can write documentation. Since none of the ROOT macros have documentation, maybe it's something that can be written for the CMake integration page on the website, maybe?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8308#issuecomment-856205222:160,integrat,integration,160,https://root.cern,https://github.com/root-project/root/issues/8308#issuecomment-856205222,1,['integrat'],['integration']
Integrability,"I am looking into this PR, but ROOT doesn't compile anymore in C++17 after LLVM update (I think, I found why -- testing). The patch to change __cplusplus__ is no more needed as exact same thing is already in newer integrated LLVM.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/591#issuecomment-307160423:214,integrat,integrated,214,https://root.cern,https://github.com/root-project/root/pull/591#issuecomment-307160423,1,['integrat'],['integrated']
Integrability,"I am not in favor to introduce yet a new keyword. The `legacy` keyword, seems to me, is the right one. Maybe the message should be improved a bit. Just a matter of taste. Let see... The current message is:. _TSpectrum is a legacy interface: it is not recommended to use it in new code. There will be no bug fixes nor new developments._. The ""key"" word here is: ""not recommended to use it in NEW code"". reading between the lines it means: you can still use this class but it is not recommended to base new development on it. That's exactly what it is. You propose:. _TSpectrum is a legacy interface: you can use it, as there is no one-to-one replacement interface planned/known. There will be no bug fixes nor new developments._. You removed the fact we do not recommend using it in new code, I do not think it is a good idea, and you add the info that there is ""no known replacement""... fine. But this can be said in the body of the doc. No need for the new keyword `unmaintained`. I am afraid a such new keyword will be used only for TSpectrum. That will add complexity for no real gain.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11315#issuecomment-1237742081:113,message,message,113,https://root.cern,https://github.com/root-project/root/pull/11315#issuecomment-1237742081,5,"['interface', 'message']","['interface', 'message']"
Integrability,"I am not proposing to change a constructor, but rather add the one I proposed + the missing methods. In general I rather prefer interfaces with references not pointers and limited number of parameters, but if for some reason you do not like the constructor + 2 methods I am proposing, then fine. As for `TF1`, I have an impression, that the math libraries go into the direction of `ROOT::Math::` interfaces, so maybe there is no point in encouraging use of `TF1` for this kind of tasks (i.e. tasks going beyond drawing and `TH1::Fit`), but I understand the consistency argument in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8196#issuecomment-849484632:128,interface,interfaces,128,https://root.cern,https://github.com/root-project/root/issues/8196#issuecomment-849484632,2,['interface'],['interfaces']
Integrability,"I am not sure how we can fix this issue. The cmake `ExternalProject_Add` is meant to operate on projects which are not changed in tree. There seems to be an option: BUILD_ALWAYS <bool> which says "" Enabling this option forces the build step to always be run. This can be the easiest way to robustly ensure that the external project's own build dependencies are evaluated rather than relying on the default success timestamp-based method. This option is not normally needed unless developers are expected to modify something the external project's build depends on in a way that is not detectable via the step target dependencies (e.g. SOURCE_DIR is used without a download method and developers might modify the sources in SOURCE_DIR)."". That would fix this problem but introduce another one -- clad would be rebuilt every time one types `make`. ROOT has good amount of uses of `ExternalProject_Add` and that kind of issue is not only specific to clad. . I think we have several options: a) close the bug and ignore that type of errors (which can waste dev debug time); b) add BUILD_ALWAYS and waste a lot of user/dev time; c) check if it is feasible to somehow track changes in the source code within the regular cmake (which probably has proven hard and people added the BUILD_ALWAYS option).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7977#issuecomment-931950718:344,depend,dependencies,344,https://root.cern,https://github.com/root-project/root/issues/7977#issuecomment-931950718,3,['depend'],"['dependencies', 'depends']"
Integrability,"I am not sure if that's a direction worth pursuing. `GetClassSharedLibsForModule` is meant to return the Module/Library that ""contains"" (for some definition of it) the C++ entity except the ones for Core. That exception was done because it was bound to how we organize dependencies in ACLiC and so on. I believe this interface is (or should be) internal to the dictionary system. It might be easier to make a new interface that includes core by calling `GetClassSharedLibs` and if that does not return anything but `TClass::GetClass(""TUrl"")` returns something we should assume it is in `Core.so`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14747#issuecomment-1985252712:269,depend,dependencies,269,https://root.cern,https://github.com/root-project/root/pull/14747#issuecomment-1985252712,3,"['depend', 'interface']","['dependencies', 'interface']"
Integrability,"I am not sure what is the use-case here but generally building something that has an execution engine and llvm in it as a shared library is a bad idea. This is because the symbols of llvm get incorporated in the binary/library and if that binary loads something like libMessa which contains a copy of llvm becomes a huge mess, unless you provide some sort of symbol versioning. Please think twice about your use-case before building as a shared library. You can get cling as a shared library through the [CppInterOp](https://github.com/compiler-research/CppInterOp) project. As part of this PR we can probably accept changes in terms of missing dependencies. That is, adding to the list of dependent libraries (such as your change about libclangSerialization).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15563#issuecomment-2125546066:645,depend,dependencies,645,https://root.cern,https://github.com/root-project/root/pull/15563#issuecomment-2125546066,2,['depend'],"['dependencies', 'dependent']"
Integrability,"I am not sure what you mean by 'executing ""hsimple_C.so""' ... . Depending what you means, the information is either in the implementation of TSystem::CompileMacro or the usage of TCling__CompileMacro. Either way, I bet the 'right' answer is not a callback but a variation of what we already do, just with different input. See my previous comment for hints of what to look for. (i.e. ACLiC pass all rootmap files to the rootcling invocation and gets back a list of library to load).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2187#issuecomment-396915330:64,Depend,Depending,64,https://root.cern,https://github.com/root-project/root/pull/2187#issuecomment-396915330,1,['Depend'],['Depending']
Integrability,"I am now testing this, and see the following error:; ```; Scanning dependencies of target G__Core; [ 67%] Generating G__Core.cxx, ../../lib/libCore.rootmap; In file included from input_line_1:1:; In file included from /usr/lib/gcc/x86_64-pc-linux-gnu/7.3.0/include/g++-v7/new:40:; In file included from /usr/lib/gcc/x86_64-pc-linux-gnu/7.3.0/include/g++-v7/exception:142:; In file included from /usr/lib/gcc/x86_64-pc-linux-gnu/7.3.0/include/g++-v7/bits/exception_ptr.h:38:; /usr/lib/gcc/x86_64-pc-linux-gnu/7.3.0/include/g++-v7/bits/cxxabi_init_exception.h:38:10: fatal error: 'stddef.h' file not found; #include <stddef.h>; ^~~~~~~~~~; In file included from input_line_4:2:; In file included from /usr/lib/gcc/x86_64-pc-linux-gnu/7.3.0/include/g++-v7/stdlib.h:30:; In file included from /home/amadio/build/external-llvm/etc/cling/lib/clang/5.0.1/include/stdlib.h:8:; /usr/include/stdlib.h:31:10: fatal error: 'stddef.h' file not found; #include <stddef.h>; ^~~~~~~~~~; Error: Error loading the default header files.; gmake[2]: *** [core/base/CMakeFiles/G__Core.dir/build.make:435: core/base/G__Core.cxx] Error 1; gmake[1]: *** [CMakeFiles/Makefile2:8972: core/base/CMakeFiles/G__Core.dir/all] Error 2; gmake[1]: *** Waiting for unfinished jobs....; [ 67%] Built target Cling; gmake: *** [Makefile:152: all] Error 2; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1632#issuecomment-366987713:67,depend,dependencies,67,https://root.cern,https://github.com/root-project/root/pull/1632#issuecomment-366987713,1,['depend'],['dependencies']
Integrability,"I am sorry, but I do not think we can merge this. The artificial dependency also means that things that don't need to be rebuilt if you modify files will be rebuilt after this change. My machine is not so powerful and I never had problems with this, except for when using ICC and building multiple sources of ROOT at the same time with 4 threads each.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1516#issuecomment-359391487:65,depend,dependency,65,https://root.cern,https://github.com/root-project/root/pull/1516#issuecomment-359391487,1,['depend'],['dependency']
Integrability,"I am trying to install root-v6.26.00 in ubuntu 22. The required packages are unable to be installed. I receive an error:. saras@saras:~$ sudo apt-get install libglew1.5-dev; Reading package lists... Done; Building dependency tree... Done; Reading state information... Done; E: Unable to locate package libglew1.5-dev; E: Couldn't find any package by glob 'libglew1.5-dev'; E: Couldn't find any package by regex 'libglew1.5-dev'. Another problem that I am getting is that, when I run ""cmake --build . -- -j8"" after configuring root, following error ocurrs in the middle of the process and the process stops. . CMake Error at /home/saras/product/root/builtins/xrootd/XROOTD-prefix/src/XROOTD-stamp/XROOTD-build-Release.cmake:49 (message):; Command failed: 2; '/usr/bin/gmake'; See also; /home/saras/product/root/builtins/xrootd/XROOTD-prefix/src/XROOTD-stamp/XROOTD-build-*.log",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11530#issuecomment-1377010734:214,depend,dependency,214,https://root.cern,https://github.com/root-project/root/pull/11530#issuecomment-1377010734,2,"['depend', 'message']","['dependency', 'message']"
Integrability,"I am trying to use a custom libbsd build, but there doesn't seem to be a way to indicate a path to search for this dependency. Would it be possible to add something like that in the CMakeLists?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14958#issuecomment-2057817528:115,depend,dependency,115,https://root.cern,https://github.com/root-project/root/issues/14958#issuecomment-2057817528,1,['depend'],['dependency']
Integrability,"I am uncertain about the missing separation of ""error code"" and ""payload value"" for some value types. E.g. `RStatus<FILE*>` versus `RStatus<std::string>` (where the string is read from a file) seem similar: the value represents the result of a potentially failing operation. But in the latter case the value does not encode failure, while in the former it does (the `FILE*` being `== nullptr`). Maybe that's just me, but maybe that calls for something similar to `llvm::Expected` that then handles the error case internally. Especially for pointers that might be a better interface, forcing a validity check.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4683#issuecomment-564973874:572,interface,interface,572,https://root.cern,https://github.com/root-project/root/pull/4683#issuecomment-564973874,1,['interface'],['interface']
Integrability,"I applied clang-format-7, now it should be good. It would be great to merge this quickly, because I have a few other patches prepared that depend on this change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6917#issuecomment-739258667:139,depend,depend,139,https://root.cern,https://github.com/root-project/root/pull/6917#issuecomment-739258667,1,['depend'],['depend']
Integrability,"I assume you are talking about EmuTLS.cpp?; The original is from compiler-rt, which poached it from gcc.; Keeping the indentation at 4 makes it easier to re-integrate when updates occur. BTW, could you look at https://github.com/root-project/cling/pull/174",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/745#issuecomment-313452158:157,integrat,integrate,157,https://root.cern,https://github.com/root-project/root/pull/745#issuecomment-313452158,1,['integrat'],['integrate']
Integrability,"I believe PyPy has its own cppyy builtin module and PyROOT works on top of its own fork of cppyy, for which we haven't tested (or so far aimed for) compatibility with PyPy. Regarding the error you see, please check if the ROOT installation you are using has been built for that Python version (2.7). It could also be some environment/installation issue. How did you install ROOT?. On the other hand, to speed up analysis, the recommended interface in ROOT (which you can also use from Python) is RDataFrame:. https://root.cern/doc/master/classROOT_1_1RDataFrame.html. Even when used from Python, pretty much everything happens in C++ (in particular, the event loop is C++). It also has implicit parallelisation on a multicore machine. If there is some Python code that you'd like to use in conjunction with RDataFrame, there is the `Numba.Declare` feature:. https://root.cern.ch/doc/master/pyroot004__NumbaDeclare_8py.html. which will try to JIT with Numba the Python function you decorate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8110#issuecomment-834139469:438,interface,interface,438,https://root.cern,https://github.com/root-project/root/issues/8110#issuecomment-834139469,1,['interface'],['interface']
Integrability,"I believe failures were due to pushing while the build was running. Everything passed before and I only changed the commit message with latest push. In any case, I will monitor the incrementals and revert if any more problems show up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/953#issuecomment-327763248:123,message,message,123,https://root.cern,https://github.com/root-project/root/pull/953#issuecomment-327763248,1,['message'],['message']
Integrability,"I believe it might depend on the Python version indeed. I am able to reproduce the inheritance error (`KeyError: 'fProofChain'`) with Python2.7 and 3.6.8, but not with 3.8.2 and 3.7.7.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6467#issuecomment-702240329:19,depend,depend,19,https://root.cern,https://github.com/root-project/root/issues/6467#issuecomment-702240329,1,['depend'],['depend']
Integrability,"I believe the real issue here is about user experience. Suppose I'm a mac user, I only use safari and don't even have chrome installed. I have been using ROOT for 10+ years, I want to see my plot in a canvas. Now the default canvas is the web canvas, so it will go through the only browser it can find on my machine, safari. That breaks functionality w.r.t. how I was using the canvas before. So, that's something we want to fix, right?. In general, I would imagine that at the very least for the three most commonly used browsers i.e. Chrome, Safari, Firefox (Edge even?) we should be able to provide exactly the same functionality to users. Writing in the documentation that they need to install google chrome on their machine in order to have a properly working canvas is not an option in my opinion. Practically, that would imply that ROOT has a dependency on Chrome and I don't think that's what we want",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14051#issuecomment-1813149328:850,depend,dependency,850,https://root.cern,https://github.com/root-project/root/issues/14051#issuecomment-1813149328,1,['depend'],['dependency']
Integrability,"I believe this is what happens:; - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation.; - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals.; - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6315:218,integrat,integrated,218,https://root.cern,https://github.com/root-project/root/pull/6315,1,['integrat'],['integrated']
Integrability,"I believe this one can be merged after the builds.; The only pending change would be to move the logic for the array interface configuration to C++, if possible. A source to check is [this](https://stackoverflow.com/questions/10161609/class-property-using-python-c-api).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1871#issuecomment-382352200:117,interface,interface,117,https://root.cern,https://github.com/root-project/root/pull/1871#issuecomment-382352200,1,['interface'],['interface']
Integrability,"I can reproduce this in our software stack (SHiP/snd@snd) as well, where ROOTSYS etc. are all set for dependencies that need ROOT at build and/or run-time (using ALICE's alibuild). ROOT and its `ROOTConfig.cmake` are found without issues, but the new way to deal with VDT breaks anyone trying to user `ROOTConfig.cmake`. In our case, we use the `builtin_vdt` build option when building ROOT from source. This is a clear regression from 6.28.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14163#issuecomment-1837223379:102,depend,dependencies,102,https://root.cern,https://github.com/root-project/root/issues/14163#issuecomment-1837223379,1,['depend'],['dependencies']
Integrability,"I can reproduce with Enrico's reproducer, but not with:. ```python; import ROOT; print(ROOT.gSystem.GetIncludePath()). ROOT.gInterpreter.ProcessLine(""""""; auto v = std::vector<int>();; """"""); print(ROOT.gSystem.GetIncludePath()); ```. So it could be related to the use of the TCling interfaces.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7108#issuecomment-769651474:281,interface,interfaces,281,https://root.cern,https://github.com/root-project/root/issues/7108#issuecomment-769651474,1,['interface'],['interfaces']
Integrability,I cannot make any assumption about the preferred usage of const operator() and my code base is definitely using both. I would favour to get best possible performance in both cases. Adding these interfaces should not be a problem.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/166#issuecomment-223249617:194,interface,interfaces,194,https://root.cern,https://github.com/root-project/root/pull/166#issuecomment-223249617,1,['interface'],['interfaces']
Integrability,I cannot reproduce this locally (I get other `Conditional jump or move depends on uninitialised value(s)`) and was generally under the impression that this is a frequent false positive of Valgrind *if building with compiler optimizations*. You may try with a full `Debug` build of ROOT (including `LLVM_BUILD_TYPE=Debug`) if you are down to investigating.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16123#issuecomment-2255461773:71,depend,depends,71,https://root.cern,https://github.com/root-project/root/issues/16123#issuecomment-2255461773,1,['depend'],['depends']
Integrability,"I cannot reproduce, even the Create interface changed. @jblomer can this issue be closed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8581#issuecomment-2117677727:36,interface,interface,36,https://root.cern,https://github.com/root-project/root/issues/8581#issuecomment-2117677727,1,['interface'],['interface']
Integrability,"I changed the test. Before we were also testing the ""line"" number according to the interpreter, which can be platform dependent. Now we are independent from that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15368#issuecomment-2374976966:118,depend,dependent,118,https://root.cern,https://github.com/root-project/root/pull/15368#issuecomment-2374976966,1,['depend'],['dependent']
Integrability,"I checked once again - there are many images now integrated in openui5 libraries, but I do not have chance to select them out.; Therefore I will merge as is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6708#issuecomment-717060405:49,integrat,integrated,49,https://root.cern,https://github.com/root-project/root/pull/6708#issuecomment-717060405,1,['integrat'],['integrated']
Integrability,"I confirm that these changes break `tutorial-multicore-imt101_parTreeProcessing` on Windows, with different error messages:; ```; 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C...; 768: Assertion failed: LexLevel == 0 && ""cannot use lookahead while lexing"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Lex/Preprocessor.h, line 1874; 768: Assertion CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):; 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C...; 768: Assertion failed: CurDiagID == std::numeric_limits<unsigned>::max() && ""Multiple diagnostics in flight at once!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/Basic/Diagnostic.h, line 1545; 768: Assertion failed: (*I)->isCompleCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):; 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C...; 768: Assertion failed: (!m_Consumer->getTransaction() || (m_Consumer->getTransaction() == T)) && ""Cannot release different T"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\IncrementalParser.cpp, line 538; 768: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):; 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C...; 768: Assertion failed: CurLexerKind != CLK_CachingLexer && ""already in caching lex mode"", file C:\root-dev\git\master\interpreter\llvm-project\clang\lib\Lex\PPCaching.cpp, line 99; 768: Assertion failed: CCMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):; 768: error code: Exit code 0xc0000409. 768: Processing C:/root-dev/git/master/tutorials/multicore/imt101_parTreeProcessing.C...; 768: Assertion failed: is(tok::raw_identifier), file C:\r",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14200#issuecomment-1903602682:114,message,messages,114,https://root.cern,https://github.com/root-project/root/pull/14200#issuecomment-1903602682,3,['message'],"['message', 'messages']"
Integrability,"I continue to be convinced that #1053 is of little relevance in practice: if there is a signal and we break things even worse then just let the kernel kill that process: we tried our best to be helpful but failed. I believe #1053 (from 2017) is and indication that we don't have the resources to completely handle this case in a allocation-free way. And if we cannot do it completely we can as well just give up on it. While that's certainly a discussion we can continue on #1053 (or over lunch) I am convinced that we should not create logical dependencies here, on something that sits around since 5 years. In my implementation I will try to move the backtrace strings to reduce the memory allocations needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10366#issuecomment-1122815784:545,depend,dependencies,545,https://root.cern,https://github.com/root-project/root/pull/10366#issuecomment-1122815784,1,['depend'],['dependencies']
Integrability,"I created a minimal example for testing purposes. [streamer.zip](https://github.com/root-project/root/files/7885164/streamer.zip). It issues this warning:; `streamer/TGeoArb8.cxx:22: warning: documented symbol 'void TGeoArb8::Streamer' was not declared or defined.`. and the output does not show the function. ![image](https://user-images.githubusercontent.com/10653970/149848810-daba8c17-11b6-459d-aa66-02229cbb1afa.png). If I change in the Doxyfile PREDEFINED to empty, and EXPAND_ONLY_PREDEF = NO, then the warning disappears and the doxygen output looks correct. ![image](https://user-images.githubusercontent.com/10653970/149848761-52c81fd7-5cc1-491f-b59b-8fbb19793f46.png). However, I saw that in the full docu build we get still some other message even when changing that:; ```; /opt/root_src/core/meta/src/TStreamerElement.cxx:1085: warning: no uniquely matching class member found for ; void TStreamerLoop::Streamer(TBuffer &R__b); ```. So not sure either...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9596#issuecomment-1014960537:747,message,message,747,https://root.cern,https://github.com/root-project/root/issues/9596#issuecomment-1014960537,1,['message'],['message']
Integrability,I did a relatively big change with commit [5726d5f](https://github.com/root-project/root/pull/16090/commits/5726d5f15a8640bfee4f87e572ff615a53829774); the commit message describes the details.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16090#issuecomment-2252378641:162,message,message,162,https://root.cern,https://github.com/root-project/root/pull/16090#issuecomment-2252378641,1,['message'],['message']
Integrability,"I did a very quick test linking a test `example` target to an install of a `foo` project whose targets have the `cxx_auto_type` compile feature in their interface features (so C++11). When linking to these targets, I found:. 1) Just `target_link_libraries(example foo::foo)`, the `-std=c++11` flag is appended to the compilation flags of the `example` sources.; 2) Adding `target_compile_features(example PUBLIC cxx_std_14)` uses `-std=c++14` in the flags.; 3) Setting `CMAKE_CXX_STANDARD 14` instead of using `target_compile_features` has the same effect. The reverse also applies - linking to a C++14 imported target, but requiring C++11 in the project does result in C++14 flags applied to the compilation of the project (so behaviour is ""newest standard wins"").",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1466#issuecomment-351737830:153,interface,interface,153,https://root.cern,https://github.com/root-project/root/pull/1466#issuecomment-351737830,1,['interface'],['interface']
Integrability,"I did tests with gcc 4.8.4 (disabling error message); It works with all my tests.; Seems to be, bogus functionality is not used by TBufferJSON.; I will provide modified version soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1462#issuecomment-351692546:44,message,message,44,https://root.cern,https://github.com/root-project/root/pull/1462#issuecomment-351692546,1,['message'],['message']
Integrability,"I did the same ""style"" of integration as was done for roottest repository",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1142:26,integrat,integration,26,https://root.cern,https://github.com/root-project/root/pull/1142,1,['integrat'],['integration']
Integrability,I didn't even know about the other bug you point out there! But I agree that removing invisible state dependence in the imports would be very desirable. I don't want my code to stop working because someone deletes the orphaned `import ROOT` statement. We actually have linting in ATLAS that would complain about code which is written this way.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14097#issuecomment-1824699590:102,depend,dependence,102,https://root.cern,https://github.com/root-project/root/issues/14097#issuecomment-1824699590,1,['depend'],['dependence']
Integrability,"I didn't find those 3 libraries (had `libCore.so` and `libRIO.so`), installed them by `sudo dnf install root-gui-browserv7-6.28.02-1.fc37.x86_64`, and it's working now.; Command `TBrowser b` returns; ```; root [0] TBrowser b. ROOT comes with a web-based browser, which is now being started. ; Revert to TBrowser by setting ""Browser.Name: TRootBrowser"" in rootrc file or; by starting ""root --web=off""; Web-based TBrowser can be used in batch mode when starting with ""root -b --web=server:8877""; Find more info on https://root.cern/for_developers/root7/#rbrowser; Info in <THttpEngine::Create>: Starting HTTP server on port 9426; (TBrowser &) Name: Browser Title: ROOT Object Browser; root [1] kf.kio.core: Malformed JSON protocol file for protocol: ""trash"" , number of the ExtraNames fields should match the number of ExtraTypes fields; ```. I think it's resolved now. One last question though - is there any way to download the tutorials in bulk, and set `$ROOTSYS` and other possibly lacking things like that? I think installing ROOT by `sudo dnf install root` doesn't do that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12721#issuecomment-1532933487:720,protocol,protocol,720,https://root.cern,https://github.com/root-project/root/issues/12721#issuecomment-1532933487,2,['protocol'],['protocol']
Integrability,I discovered this by accident when working on [CbmRoot](https://git.cbm.gsi.de/computing/cbmroot). Basically I created a branch with the setup from the reproducer and was greeted with that error message. The base class in that case is pretty old code. I assume nobody ever bothered to update the link def and that's why the '+' was missing in the first place. However it took me some time to figure out that this was the problem and caused quite a bit of headache. That's why I wrote it would be nice if Root would abort with a better error message here. Becomes trivial to fix then.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10240#issuecomment-1082385261:195,message,message,195,https://root.cern,https://github.com/root-project/root/issues/10240#issuecomment-1082385261,2,['message'],['message']
Integrability,"I do not like this idea.; If one plot `RLine` then one expects just black color.; If one plot 10 lines - just 10 lines with black color.; If all colors will be automatic, then depending on number of primitives, one will get different results.; After recent changes one can do:; ```; line->AttrLine().SetColor(RColor::AutoColor());; ```; Maybe one can just introduce `RColor::kAuto` constant.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7958#issuecomment-838688653:176,depend,depending,176,https://root.cern,https://github.com/root-project/root/issues/7958#issuecomment-838688653,1,['depend'],['depending']
Integrability,I do not quite understand why don’t we put a TCling::printValue routine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2664#issuecomment-423661491:64,rout,routine,64,https://root.cern,https://github.com/root-project/root/pull/2664#issuecomment-423661491,1,['rout'],['routine']
Integrability,I do not think that splitting PR on 6 sub-PRs help and make it easy. ; Especially if you want to have warning message defined in one place. Where?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14189#issuecomment-1845262984:110,message,message,110,https://root.cern,https://github.com/root-project/root/pull/14189#issuecomment-1845262984,1,['message'],['message']
Integrability,I do not want to argue this *ad infinitum*. Adding such a wrapper macro with a different name is a no go for me because it won't prevent people from using plain `add_subdirectory()` which would lead to breakage. This also goes in the opposite direction than we want to go for using modern CMake in ROOT as discussed in the workshop. A better approach that could also work is to modify the `ROOT_STANDARD_LIBRARY_PACKAGE()` macro to do the extra stuff needed for the sub-packages.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2406#issuecomment-424304630:58,wrap,wrapper,58,https://root.cern,https://github.com/root-project/root/pull/2406#issuecomment-424304630,1,['wrap'],['wrapper']
Integrability,"I don't know if I'm misinterpreting something, but I noticed something very interesting:; For this compilation error, clang gives a note message:; ```; /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type; ```; Is this enum type `EProperty` really only range from 0 - 63?; clangd told me that the definition of first case `kIsClass` is from ; https://github.com/root-project/root/blob/master/core/meta/inc/TDictionary.h#L64 , ; but if I try the below cases, it told me that *this enum type `EProperty`* from ; https://github.com/root-project/root/blob/master/core/cont/inc/TVirtualCollectionProxy.h#L49 ???. That may said, the compiler got confused about these two types that have same name?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11148#issuecomment-1208301795:137,message,message,137,https://root.cern,https://github.com/root-project/root/pull/11148#issuecomment-1208301795,1,['message'],['message']
Integrability,"I don't know if here is the right place, but I have problems building Garfield++. The error is the following:. > CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):; > Could NOT find Vdt (missing: VDT_INCLUDE_DIR); > Call Stack (most recent call first):; > /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE); > /usr/ROOT/lib/x86_64-linux-gnu/cmake/ROOT/modules/FindVdt.cmake:63 (find_package_handle_standard_args); > /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package); > /usr/ROOT/lib/x86_64-linux-gnu/cmake/ROOT/ROOTConfig.cmake:156 (find_dependency); > CMakeLists.txt:71 (find_package). The build of ROOT succeed with no error. I'm building root and then Garfield in docker under `ubuntu:22.04`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14474#issuecomment-1927627737:199,message,message,199,https://root.cern,https://github.com/root-project/root/pull/14474#issuecomment-1927627737,1,['message'],['message']
Integrability,"I don't know, if I am able to fix it in the array interface.; Where is this array interface actually defined and where is the adoption mechanism implemented?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3528#issuecomment-472345513:50,interface,interface,50,https://root.cern,https://github.com/root-project/root/pull/3528#issuecomment-472345513,2,['interface'],['interface']
Integrability,"I don't like the idea of changing the public interface. What about making TVector3 a friend of TLorentzVector. This makes much more sense to me, in this case you can asses from TLorentzVector the internal data of TVector3. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/166#issuecomment-223250156:45,interface,interface,45,https://root.cern,https://github.com/root-project/root/pull/166#issuecomment-223250156,1,['interface'],['interface']
Integrability,"I don't think 62b55ed9 is equivalent: what about e.g. the prompt showing `cling$` (that's not a wrapper), or async operations spawned by the wrapper? I don't see that this code needs fixing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3588#issuecomment-476605004:96,wrap,wrapper,96,https://root.cern,https://github.com/root-project/root/pull/3588#issuecomment-476605004,2,['wrap'],['wrapper']
Integrability,"I don't think randomizing will increase test coverage. In any case, some tests depend on others, so running them in random order will cause them to fail. For example, in the TBufferMerger tests, one test writes in parallel to a file and a later test checks the data integrity of the file. If the second test is run before the first, it will fail, which is what happened above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4029#issuecomment-507949722:79,depend,depend,79,https://root.cern,https://github.com/root-project/root/pull/4029#issuecomment-507949722,1,['depend'],['depend']
Integrability,"I don't think the issue is with `copy_if_different` - I bet you'd see the same behavior if you were to use `copy` instead. My guess is that this is caused by CMake determining that the `DEPENDENCY` is older than the target, thus no need to run the command. What happens if you simply remove the DEPENDENCY, such that `copy_if_different` (which should *not* look at filestamps) is run unconditionally?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9804#issuecomment-1029077291:186,DEPEND,DEPENDENCY,186,https://root.cern,https://github.com/root-project/root/pull/9804#issuecomment-1029077291,2,['DEPEND'],['DEPENDENCY']
Integrability,I don't think this fixes the issue at the right end. I'd rather not have class layouts depend on `NDEBUG` - which is what we have now in the master. Okay to close?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/530#issuecomment-297645210:87,depend,depend,87,https://root.cern,https://github.com/root-project/root/pull/530#issuecomment-297645210,1,['depend'],['depend']
Integrability,"I don't think we have an explicit test for this patch. We did some archeology. The commit message is rather poor and dates back to 234fd515ed3893629e1e170e5c497688c81281b9. We could only indirectly guess what was trying to do and the best description of the code that was failing and we tried to fix is these 2 failing tests: `clang/test/Modules/module-file-modified.c` and `clang/test/Modules/explicit-build-missing-files.cpp`. Given what fails in these tests and the age of this change I find it highly unlikely that cmssw won't be able to catch such a setup. At that point, I don't think we are much more informed than you and we are hoping that dropping this change is reasonable to move forward. The good thing is that this is an atomic commit which is easy to bisect if something somewhere starts failing...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633#issuecomment-1151512564:90,message,message,90,https://root.cern,https://github.com/root-project/root/pull/10633#issuecomment-1151512564,1,['message'],['message']
Integrability,"I don't understand what your comment has to do with this patch? The bottom line: removing the `std::` keeps these names dependent, delaying the lookup to the point where Vc's overload of `std::sqrt` is defined (namely to the template instantiation).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/445#issuecomment-287713050:120,depend,dependent,120,https://root.cern,https://github.com/root-project/root/pull/445#issuecomment-287713050,1,['depend'],['dependent']
Integrability,"I dont see any stack here, but ""/Users/marcomeyer/Software/root/20230831/include/ROOT/RDF/InterfaceUtils.hxx"".; Is it possible to have root returning some more lines to know which line in my code is causing the issue ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13656#issuecomment-1729599261:90,Interface,InterfaceUtils,90,https://root.cern,https://github.com/root-project/root/issues/13656#issuecomment-1729599261,1,['Interface'],['InterfaceUtils']
Integrability,"I faced another problem.; From https://root.cern.ch/doc/master/mathmoreIntegration_8C.html I copy. #include ""Math/Integrator.h""; ...; ROOT::Math::Integrator ig(f1 );. but I don't know what the class ""Integrator"" is. In the documentation it is absent!. https://root.cern.ch/doc/master/group__Integration.html. I think it should either be added to the documentation or removed from ROOT and tutorials if it's obsolete. O, thanks to the web documentation, I see in the tutorial that it points to https://root.cern.ch/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html . However, I initially used tutorials from my ROOT package, and they gave no clue where to look for the Integrator.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7440#issuecomment-820603357:114,Integrat,Integrator,114,https://root.cern,https://github.com/root-project/root/issues/7440#issuecomment-820603357,4,['Integrat'],['Integrator']
Integrability,I feel like we are losing capability here. In my point of view we have a layering problem with the no-rtti option which can be resolved by using C-like interfaces in TCling. That’d be probably too much work for not big benefits except for binary sizes. In that respect no one has really complained. Iirc the size on windows was a lot more…. I suspect that when/if we adopt libInterOp that will be solved in a better way..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11147#issuecomment-1774901148:152,interface,interfaces,152,https://root.cern,https://github.com/root-project/root/pull/11147#issuecomment-1774901148,1,['interface'],['interfaces']
Integrability,"I figured out the reason of my apparent 'instability' in results. Rather than a problem with the ROOT build, it was actually a variation in the way I generated/created the library needed to emulated the ATLAS libraries. The original 2 files contains respectively 1 and 2 ATLAS classes derived from the RooAbsPdf and because the objects of that type are added to a compiled list, they must be created properly (otherwise you get type detection errors .. in part because RooAbsPdf is an abstract class). In order to generate this library, I use TFile::MakeProject (which almost works, I have to add an implementation for the abstract functions by hand). Part of the this MakeProject is to generate a LinkDef file. Because the output of MakeProject should not depend on the ROOT version, I generated the libraries with an arbitrary version of ROOT (and did not pay attention which one at the time, but it was different on different machine and upon seeing the weird crash, I may have regenerated the project on the machine I was using at the time). The issue is that a particular commit (e8eb7875c73ea00bedf11c022a055d50ec5f081d, part of the new PR) change whether the dictionary was requested (in the LinkDef file) for the pair that was causing the problem (pair<string,RooArgSet>) ... and having an explicit dictionary for that pair works around the problem introduced by the first wave of pair related changes. . Now that this is clarified, I can confirm that https://github.com/root-project/root/pull/10230 is solving this problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10282#issuecomment-1089498573:757,depend,depend,757,https://root.cern,https://github.com/root-project/root/issues/10282#issuecomment-1089498573,1,['depend'],['depend']
Integrability,"I finally figured out what the problem was in 6.26 specifically. In the numeric integration of the PDF, the new BatchMode was used, but it still had some bugs in ROOT 6.26. That's why we didn't see the problem in 6.24. And in ROOT master, we also didn't see it because the problem with the BatchMode got fixed. To fix the problem also in 6.26, I opened a PR where the BatchMode is disabled for the numeric integration of the PDF:; https://github.com/root-project/root/pull/11961",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11760#issuecomment-1366150423:80,integrat,integration,80,https://root.cern,https://github.com/root-project/root/issues/11760#issuecomment-1366150423,2,['integrat'],['integration']
Integrability,"I found a ""fix"" for this issue, commenting these lines allows rootcling to run without the error message:. https://github.com/hahnjo/root/blob/2f4eb60b90ed83bb369325a687bce83f2a773b7a/core/dictgen/src/rootcling_impl.cxx#L3841-L3843. https://github.com/hahnjo/root/blob/2f4eb60b90ed83bb369325a687bce83f2a773b7a/core/dictgen/src/rootcling_impl.cxx#L4200-L4206",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156#issuecomment-1659010221:97,message,message,97,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1659010221,1,['message'],['message']
Integrability,"I found how to disable the sanitizer with `__declspec(no_sanitize_address),` but it doesn't prevent `heap-use-after-free` at run-time. So my solution (hack) for the time being is the following:; ```; diff --git a/core/base/src/TObject.cxx b/core/base/src/TObject.cxx; index 1fdabcc2fd..c5358d1f21 100644; --- a/core/base/src/TObject.cxx; +++ b/core/base/src/TObject.cxx; @@ -117,11 +127,15 @@ bool DeleteChangesMemoryImpl(); // can guess this is always the case and we can rely on the changes to fBits made; // by ~TObject to detect use-after-delete error (and print a message rather than; // stop the program with a segmentation fault); +#ifndef __SANITIZE_ADDRESS__; if ( *o_fbits != 0x01000000 ) {; // operator delete tainted the memory, we can not rely on TestBit(kNotDeleted); return true;; }; return false;; +#else; + return true;; +#endif; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9445#issuecomment-2378694443:569,message,message,569,https://root.cern,https://github.com/root-project/root/issues/9445#issuecomment-2378694443,1,['message'],['message']
Integrability,"I give up, I'll forward declare tbb::interface7::task_arena and ask the TBB developers about the chances for the interface-dependent name to change in the near future",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5582#issuecomment-637365744:113,interface,interface-dependent,113,https://root.cern,https://github.com/root-project/root/pull/5582#issuecomment-637365744,1,['interface'],['interface-dependent']
Integrability,"I guess something wrong happens when one calls std::chrono::floor by basename (i.e. without namespace prefix). The statement above ends up with using of 'using namespace' with consequent calling of the bare floor template (without prefix). Well, let's reproduce it by ourselves:. ```; #include ""Vc/vector.h""; #include <chrono>. void foo() {; std::chrono::nanoseconds dur;; std::chrono::floor<std::chrono::seconds>(dur);; }. $ c++ $(root-config --cflags) -std=c++17 -c a.cpp ; $ ; ```; Look, floor for std::chrono::duration works, unlike the example in the original message. Now let's rewrite it a bit:. ```; #include ""Vc/vector.h""; #include <chrono>. void foo() {; using namespace std::chrono;. nanoseconds dur;; floor<seconds>(dur);; }. $ c++ $(root-config --cflags) -std=c++17 -c a.cpp ; In file included from a.cpp:1:; In file included from /Users/telzhov/opt/root/include/Vc/vector.h:32:; /Users/telzhov/opt/root/include/Vc/scalar/../common/../sse/../scalar/vector.h:50:5: error: static_assert failed due to requirement 'std::is_arithmetic<std::chrono::duration<long long, std::ratio<1, 1>>>::value' ""Vector<T> only accepts arithmetic builtin types as template parameter T.""; static_assert(std::is_arithmetic<T>::value,; ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~; a.cpp:8:20: note: in instantiation of template class 'Vc_1::Vector<std::chrono::duration<long long>, Vc_1::VectorAbi::Scalar>' requested here; floor<seconds>(dur);; ^; a.cpp:8:5: note: while substituting deduced template arguments into function template 'floor' [with T = std::chrono::duration<long long>]; floor<seconds>(dur);; ^; 1 error generated.; ```; In fact, floor for time_point is just a tiny wrapper for floor for duration, which calls bare floor, and that's where compilation fails:. ```; #if _LIBCPP_STD_VER > 14; template <class _ToDuration, class _Clock, class _Duration>; typename enable_if; <; __is_duration<_ToDuration>::value,; time_point<_Clock, _ToDuration>; >::type; floor(const time_point<_Clock, _Duration>& __t); {; retu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11934#issuecomment-1357943189:565,message,message,565,https://root.cern,https://github.com/root-project/root/issues/11934#issuecomment-1357943189,1,['message'],['message']
Integrability,"I guess, there is nobody who can implement all these methods for all SQL plugins.; But we need to indicate problem if somebody tries to call GetTimeStamp, which is not implemented.; I will merge your PR and add error messages to TSQLStatement methods afterwards",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3961#issuecomment-507171663:217,message,messages,217,https://root.cern,https://github.com/root-project/root/pull/3961#issuecomment-507171663,1,['message'],['messages']
Integrability,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that.; ; > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued.; > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating.; > Maybe we could add a Warning there before line 146, like; > ; > ```; > if (!st.IsValid()) { ; > print.Warn(""Invalid Hessian - exit the minimization"");; > break; ; > }; > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6762#issuecomment-741736428:347,interface,interface,347,https://root.cern,https://github.com/root-project/root/pull/6762#issuecomment-741736428,1,['interface'],['interface']
Integrability,"I had this problem before when trying multiprocessing in the Fitting. I checked with Axel and, If I recall correctly, it was due to adding MultiProc as a dependency in MathCore. I still kept the patch from then and I updated my roottest PR accordingly: root-project/roottest#106",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1312#issuecomment-344309527:154,depend,dependency,154,https://root.cern,https://github.com/root-project/root/pull/1312#issuecomment-344309527,1,['depend'],['dependency']
Integrability,"I have a couple of Debian/Ubuntu packages which depend (and build-depend) on ROOT; the only clean way to support those is to have a ROOT *package* (or package set) as well. Running `cmake` and `make` by hand succeeds while putting exactly the same instructions into a `debian/rules` file (as `override`s for the default debhelper build steps) results in failure(s). Dropping debhelper, and going back to an old-style `binary` target, might be the last resort, but I'm trying to avoid this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10777#issuecomment-1169632086:48,depend,depend,48,https://root.cern,https://github.com/root-project/root/issues/10777#issuecomment-1169632086,2,['depend'],['depend']
Integrability,"I have a general comment about adding this extra level of parallelism to the branch reading. While it might indeed help in cases where there is only one top-level branch that is split in sub-branches, it could also bring ""too much"" parallelism in some other cases. The performance of the top-level branch parallelism heavily depends on the granularity of the branches. For small branches, the creation of a task does not really pay off. I fear this problem might be exacerbated if we also operate in sub-branches. Moreover, as we offer it now, we won't have any way for the user to select how deep in parallelisation terms they want to go, meaning every time we run GetEntry with IMT on all the parallelism levels will be activated. On the other hand, another thing that hindered performance in the top-level branch parallelism was synchronization. Now there is one synchronization point per entry, which can be problematic if there is load unbalance (that is why we sorted the branches by time). Adding a second level of parallelism means we will have one more synchronization point per top-level branch and we don't know how this can impact performance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1468#issuecomment-352709176:325,depend,depends,325,https://root.cern,https://github.com/root-project/root/pull/1468#issuecomment-352709176,4,"['depend', 'synchroniz']","['depends', 'synchronization']"
Integrability,"I have implemented all requested changes by reviewers @amadio, @Axel-Naumann and @guitargeek. Additionally, bugs have been fixed, build system works and CI passes. I rebased the whole thing into three commits corresponding to the actual three additions: ZeroMQ dependency handling (including builtin), `RooFitZMQ` and `RooFit::MultiProcess`. I think this ready to merge, unless you have some final review suggestions. ~Edit: while you do your final reviewing, I will fix the code style, to make that CI check pass as well ;)~ Done. ~Edit 2: need to rebase on master as well...~ Done!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078#issuecomment-977929627:261,depend,dependency,261,https://root.cern,https://github.com/root-project/root/pull/9078#issuecomment-977929627,1,['depend'],['dependency']
Integrability,"I have modified the initial commit to include the `IgnoreSignal` call in `TXXSystem::Abort` before throwing the signal, in order to avoid the infinite recursion cases. Regarding the two doubts:. > Should it print a stack trace? (This may or may not be useful for an assert). In the end I have not moved the return after `StackTrace`, so with this solution we don't print the stack trace for an unexpected `SIGABRT`. In the case of an assert, the assert failure itself is still notified with a message that tells you the file and line where it happened, so perhaps we don't need a stack trace. > When on the prompt, should it recover or stop the process? (probably stop the process but then again we don't stop the process for other 'bad' state: SigBus, SigSegmentationViolation, SigIllegalInstruction, SigFloatingException). The current solution stops the process. If a `SIGABRT` was thrown it's because a critical (unrecoverable) error happened, so it makes sense to stop. When I use the ROOT prompt and get a SigSegmentionViolation, it does not stop, I get back to the prompt and if I try to run something I usually get another seg fault.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5034#issuecomment-589630499:493,message,message,493,https://root.cern,https://github.com/root-project/root/pull/5034#issuecomment-589630499,1,['message'],['message']
Integrability,"I have not done anything with it in at least 10 years, so yeah, you no; longer have to upstream the changes. Thanks!; Sasha. On Mon, Jan 22, 2024 at 8:10 AM ferdymercury ***@***.***>; wrote:. > For me the change is fine. Thanks. Perhaps a question at this point: what; > is the point of offering the option of having a builtin afterimage if we; > know it does not work?; >; > Good question. Maybe @couet <https://github.com/couet> knows why we have; > this option?; >; > I guess that in the past, bugs found by the ROOT team were backported to; > the upstream repo, see e.g.:; >; > https://salsa.debian.org/debian/afterstep/-/blame/69faf352072daddf6e311dea3717734a45c6ac2d/libAfterImage/asimage.c; > (see copyright from Valeriy Onouchin from CERN); > https://root.cern.ch/root/v520/Version520.news.html; >; > But upstream is now completely frozen, at least 4 years; > https://github.com/afterstep/afterstep, right @sashavasko; > <https://github.com/sashavasko> ?.; > So... (unless someone wants to upstream the changes again to that Github; > repo), maybe we could mark the builtin_afterimage option as deprecated now; > and remove it in a later release.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/pull/14396#issuecomment-1904072642>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AABZMAJ4DAFJ64LSLUGLVXDYPZXNXAVCNFSM6AAAAABCCE6WTWVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTSMBUGA3TENRUGI>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14396#issuecomment-1904701854:1530,Message,Message,1530,https://root.cern,https://github.com/root-project/root/pull/14396#issuecomment-1904701854,1,['Message'],['Message']
Integrability,"I have not yet tried building llvm. Will try later this week. nvc++ has an implementation for std::par which allows seamless execution of both CPUs and NVIDIA GPUs (depending on a compile time flag). This could be a huge win for GPU portability (once other manufactures create the AMD/Intel backends), and allows much simpler user access to GPUs without having to learn CUDA (or hip, dpc++, etc). I was trying to compile some parts of a project with gcc and the bits that use std::par with nvc++, but immediately got some runtime segfaults at startup, so tried to compile the whole thing (including ROOT) with nvc++.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9036#issuecomment-933532217:165,depend,depending,165,https://root.cern,https://github.com/root-project/root/issues/9036#issuecomment-933532217,1,['depend'],['depending']
Integrability,"I have now avoided the interpreter call, which caused some performance regression. Then I did some benchmarking with:; ```bash; perf stat -r 100 -B python -c 'import ROOT; ROOT._finalSetup()'; ```; It takes about 0.45 seconds. But there is no significant difference with or without this PR (seems to depend on what else is running on my system at that moment I guess), sometimes one is faster sometimes the other.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15788#issuecomment-2160789690:300,depend,depend,300,https://root.cern,https://github.com/root-project/root/pull/15788#issuecomment-2160789690,1,['depend'],['depend']
Integrability,"I have opened a PR to fix the problem in RooRealIntegral. It's a first step, but it will probably take more time before this gets merge, as the RooRealIntegral is not covered that well by unit tests yet, and I want to first write more tests for the part of the code that I changed. I already have added one test based on your example, but I still need to cover the case where the integrated function has shape clients.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11578#issuecomment-1282263018:380,integrat,integrated,380,https://root.cern,https://github.com/root-project/root/issues/11578#issuecomment-1282263018,1,['integrat'],['integrated']
Integrability,"I have other problem building libAfterImage - in error output I see following message; ```; ar: libdeps specified more than once; ```; It caused by argument `l` in `ar clq` command. ; Argument `l` means library linking to static `libAfterImage.a` library, but there is no any library linked.; Seems to be `ar` on my latest OpenSUSE installation is too strict about this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7345#issuecomment-789807508:78,message,message,78,https://root.cern,https://github.com/root-project/root/issues/7345#issuecomment-789807508,1,['message'],['message']
Integrability,"I have question. Does `roottest` runs `cmake --build . --target cling-test` when the cling interpreter code is changed? From time to time I see, that commits are merged regardless of whether the CI fails.; If I understand Cling's workflow correctly, changes are integrated and tested in ROOT and automatically streamed down to Cling after the merge in ROOT. So, if `roottest` does not run the integrated tests in cling, it is possible that the Cling CI is bypassed, or I'm wrong?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6957:262,integrat,integrated,262,https://root.cern,https://github.com/root-project/root/issues/6957,2,['integrat'],['integrated']
Integrability,"I have split the PR into two commits, and extended the commit message for the commit that changes the tutorials.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3434#issuecomment-475229873:62,message,message,62,https://root.cern,https://github.com/root-project/root/pull/3434#issuecomment-475229873,1,['message'],['message']
Integrability,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```; $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu; Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b; Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu; 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec; Testing Method DL with SGD Optimizer for CPU backend:; libc++abi: __cxa_guard_acquire detected recursive initialization; CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:; 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed); Errors while running CTest; ```. When running all the TMVA tests:; ```; $ ctest -R ""^TMVA"" -j6; ...; 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:; 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed); 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed); 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed); 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed); 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed); 	362 - TMVA-DNN-Regression-Cpu (Failed); 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed); Errors while running CTest; ```; All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13002#issuecomment-1594949419:652,message,message,652,https://root.cern,https://github.com/root-project/root/issues/13002#issuecomment-1594949419,1,['message'],['message']
Integrability,"I have tried the following in `cmake/modules/SearchInstalledSoftware.cmake`:. ```; #---Check for OpenGL installation-------------------------------------------------------; if(opengl); message(STATUS ""Looking for OpenGL""); if(APPLE); set(CMAKE_FIND_FRAMEWORK FIRST); find_package(OpenGL); set(CMAKE_FIND_FRAMEWORK LAST); else(); find_package(OpenGL); endif(); ```; It seems it finds the right OPgengl GL like that. I am now compiling to see it really fixes the GL graphics",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16523#issuecomment-2377075629:185,message,message,185,https://root.cern,https://github.com/root-project/root/issues/16523#issuecomment-2377075629,1,['message'],['message']
Integrability,"I have tried to make with two canvases (two gifs), but problem with ""synchronization"" in browser (gif1 ""start animating"" in different time as gif2, see on this temporary [site](http://alice.saske.sk/rootdoc2/html/classTHistPainter.html#HP30)), must be as one animated gif. I think there are only two possibilities:; * create a new animation with width for example 900; * or set width in source ```\image html hlHisto3.gif ""Highlight mode"" width=900```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1839#issuecomment-383957885:69,synchroniz,synchronization,69,https://root.cern,https://github.com/root-project/root/pull/1839#issuecomment-383957885,1,['synchroniz'],['synchronization']
Integrability,"I have updated the PR by rebasing on master, refreshing the version in the deprecation macros, and dropping the GCC 5 workaround because the minimum supported version is GCC 8 anyway:; https://root.cern/install/dependencies/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7234#issuecomment-1894623389:211,depend,dependencies,211,https://root.cern,https://github.com/root-project/root/pull/7234#issuecomment-1894623389,1,['depend'],['dependencies']
Integrability,"I introduced those targets because I thought we actually have; dependencies between the different rootcling invocations because; of the C++ modules. After some discussion with Axel, it turns out; we actually always have dependencies here, as the dictionaries; should regenerate the dictionary when one of the referenced; libraries/headers change (as the declarations in there change,; which might influence the current dictionary). We can just safely remove this, the actual dependency which is; ARG_DEPENDENCIES is still in the custom command dependencies; (currently the ROOTCLING_ targets where just a no-op that was; supposed to activated in a later commit when we remove the; ARG_DEPENDENCIES and replace it with the ROOTCLING_; dependencies if runtime_modules was set to ON).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/963:63,depend,dependencies,63,https://root.cern,https://github.com/root-project/root/pull/963,5,['depend'],"['dependencies', 'dependency']"
Integrability,"I just added an additional commit that adds functionality around error handling. It catches a corner case that may be relevant to the failing tests (so I hope it will add useful information from the prints in the CI runs), but that I think in any case should be checked for, because it's about a fit that failed but that Minuit reports as successful. See commit message for more info.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15797#issuecomment-2166147635:362,message,message,362,https://root.cern,https://github.com/root-project/root/pull/15797#issuecomment-2166147635,1,['message'],['message']
Integrability,"I just checked on my Manjaro with cmake 3.20, and it seems to be working, even though messages are misleading:; ```; -- Could NOT find Python3 (missing: Python3_NumPy_INCLUDE_DIRS NumPy) (found version ""3.9.4""); -- Could NOT find Python2 (missing: Python2_NumPy_INCLUDE_DIRS NumPy) (found version ""2.7.18""); -- Found GCC. Major version 10, minor version 2; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed; -- Looking for pthread_create in pthreads; -- Looking for pthread_create in pthreads - not found; -- Looking for pthread_create in pthread; -- Looking for pthread_create in pthread - found; -- Found Threads: TRUE ; -- Performing Test GLIBCXX_USE_CXX11_ABI; -- Performing Test GLIBCXX_USE_CXX11_ABI - Success; -- ROOT Platform: linux; -- ROOT Compiler: GNU 10.2.0; -- ROOT Processor: x86_64; -- ROOT Architecture: linuxx8664gcc; -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'); -- Compiler Flags: -std=c++14 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG; -- ROOT default compression algorithm: zlib; -- PyROOT will be built for versions 3.9.4 (Main) and 2.7.18; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8097#issuecomment-832873148:86,message,messages,86,https://root.cern,https://github.com/root-project/root/issues/8097#issuecomment-832873148,1,['message'],['messages']
Integrability,"I just did a git pull to get the latest version.; Now I get:; ```; $ make; /Applications/CMake.app/Contents/bin/cmake -S/Users/couet/git/zevis -B/Users/couet/git/zevis-build --check-build-system CMakeFiles/Makefile.cmake 0; /Applications/CMake.app/Contents/bin/cmake -E cmake_progress_start /Users/couet/git/zevis-build/CMakeFiles /Users/couet/git/zevis-build/CMakeFiles/progress.marks; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/Makefile2 all; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/ZevLib.dir/build.make CMakeFiles/ZevLib.dir/depend; [ 1%] Generating G__ZevLib.cxx, libZevLib_rdict.pcm, libZevLib.rootmap; /Applications/CMake.app/Contents/bin/cmake -E env LD_LIBRARY_PATH=/Users/couet/git/couet-root-bin/lib:/Users/couet/git/couet-root-bin/lib /Users/couet/git/couet-root-bin/bin/rootcling -v2 -f G__ZevLib.cxx -s /Users/couet/git/zevis-build/libZevLib.dylib -rml libZevLib.dylib -rmf /Users/couet/git/zevis-build/libZevLib.rootmap -inlineInputHeader -IZevLib/inc -I/Users/couet/git/couet-root-bin/include -I/Users/couet/git/zevis ZevLib/dict/ZevLib_Classes.hh /Users/couet/git/zevis/ZevLib/dict/LinkDef.hh; input_line_12:3:10: fatal error: 'ZFTD.h' file not found; #include ""ZFTD.h""; ^~~~~~~~; Error: /Users/couet/git/couet-root-bin/bin/rootcling: compilation failure (/Users/couet/git/zevis-build/libZevLib99e3c8e971_dictUmbrella.h); make[2]: *** [G__ZevLib.cxx] Error 1; make[1]: *** [CMakeFiles/ZevLib.dir/all] Error 2; make: *** [all] Error 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6344#issuecomment-693238080:586,depend,depend,586,https://root.cern,https://github.com/root-project/root/issues/6344#issuecomment-693238080,1,['depend'],['depend']
Integrability,"I just noticed a compile error for the RooRealL.cxx test file that I introduced in the modernization commit (the second in this PR). I did an interactive rebase to fix this. Also included the RooMinimizer / MinuitFcnGrad circular dependency fix in that modernization/clean-up commit. To clean up this thread, I'll hide all bot messages starting from that previously buggy commit until now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8700#issuecomment-915080044:230,depend,dependency,230,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-915080044,2,"['depend', 'message']","['dependency', 'messages']"
Integrability,"I just realized that it's probably safer to use the change tracker because then you are not tracking the dependency on the observables, only the parameters. It should not happen that someone changes the observable value between two likelihood evaluations, but who knows :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10832#issuecomment-1167783258:105,depend,dependency,105,https://root.cern,https://github.com/root-project/root/pull/10832#issuecomment-1167783258,1,['depend'],['dependency']
Integrability,"I know this is not a small change, so any comments are welcome!. Background:; RooCintUtils was providing a wrapper between Cint and roofit. This implementation is very old, and is; using Cint iteration interface a lot. Recently we were trying to kill; RooCintUtils code where its using iteration and to change them to new; Cling interface in order to improve the performance. RooCintUtils is an utility class, so this is internal namespace which is only used inside roofit.; Since there are just 3 methods left, this RooCintUtils is no longer; worth spending a file. Let's delete this and migrate methods to; RooFactoryWSTool.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1722:107,wrap,wrapper,107,https://root.cern,https://github.com/root-project/root/pull/1722,3,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"I left for now the check on the list, actually that list contains now only two items since only `TChain` needs an explicit insertion of pythonizations. According to the behaviour of inheritance of pythonizations, user subclasses of `TTree` will inherit the pythonizations defined by `TTree` as long as they do not redefine the corresponding methods in C++. If that is the case, they can always re-inject such pythonizations if they are interested, similarly to what we do with `TChain`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2799#issuecomment-432211756:397,inject,inject,397,https://root.cern,https://github.com/root-project/root/pull/2799#issuecomment-432211756,1,['inject'],['inject']
Integrability,"I may be missing something but I seem to be unable to compile ROOT 6.28/04 with c++14. I use. ```; cmake ../root/root-6.28.04/ -DCMAKE_CXX_VERSION=14; ```. And get the following confirmation at the end of the cmake output. ```; System Linux-3.10.0-1160.88.1.el7.x86_64; Processor 36 core Intel(R) Xeon(R) CPU E5-2695 v4 @ 2.10GHz (x86_64); Build type Release; Compiler GNU 6.3.0; Compiler flags:; C -pipe -Wall -W -pthread -O3 -DNDEBUG; C++ -std=c++14 -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG; Linker flags:; Executable -rdynamic; Module; Shared -Wl,--no-undefined -Wl,--hash-style=""both""; ```; As far as I can tell, gcc6.3.0 should have full c++14 capability. However, eventually I get the following errors:. ```; Consolidate compiler generated dependencies of target Dictgen; Consolidate compiler generated dependencies of target ClingUtils; Consolidate compiler generated dependencies of target MetaCling; [ 78%] Built target ClingUtils; [ 78%] Built target Dictgen; Consolidate compiler generated dependencies of target rootcling_stage1; [ 78%] Built target rootcling_stage1; [ 78%] Built target MetaCling; [ 78%] Generating G__Core.cxx, ../lib/Core.pcm; [ 78%] Linking CXX shared library ../../../lib/libCling.so; /home/root-build/etc/cling/std.modulemap:462:12: error: header 'bits/invoke.h' not found; header ""bits/invoke.h""; ^; input_line_1:1:10: note: submodule of top-level module 'std' implicitly imported here; #include <new>; ^; Warning in cling::IncrementalParser::CheckABICompatibility():; Failed to extract C++ standard library version.; While building module 'Core':; While building module 'Cling_Runtime' imported from input_line_2:1:; While building module 'Cling_Runtime_Extra' imported from /home/root-build/etc/cling/Interpreter/RuntimeUniverse.h:27:; /home/root-build/etc/cling/std.modulemap:462:12: error: header 'bits/invoke.h' not found; header ""bits/invoke.h""; ^; /home/root-build/etc/cling/Interpreter/DynamicExprInfo.h:13:10: note: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13453:786,depend,dependencies,786,https://root.cern,https://github.com/root-project/root/issues/13453,4,['depend'],['dependencies']
Integrability,I meant it was gSystem->Load ing even when gSystem->DynamicPathName fails. Changed commit message,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2167#issuecomment-396272102:90,message,message,90,https://root.cern,https://github.com/root-project/root/pull/2167#issuecomment-396272102,1,['message'],['message']
Integrability,"I misspellt the commit message. That was supposed to say ""Vc sqrt error fix""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7909#issuecomment-822667524:23,message,message,23,https://root.cern,https://github.com/root-project/root/pull/7909#issuecomment-822667524,1,['message'],['message']
Integrability,"I modified the error message in the last commit after pushing, so will merge this by hand to not waste resources on another Jenkins run.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4096#issuecomment-512261682:21,message,message,21,https://root.cern,https://github.com/root-project/root/pull/4096#issuecomment-512261682,1,['message'],['message']
Integrability,"I overlooked the issue with the llvm conversion routines. I've inserted a better fix. For the second issue, I think it might be a good idea to do it as a post PR merge commit because it requires some changes in the test suites of both ROOT and cling.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/589#issuecomment-305762721:48,rout,routines,48,https://root.cern,https://github.com/root-project/root/pull/589#issuecomment-305762721,1,['rout'],['routines']
Integrability,"I personally do not think that the runtime of rootcling is the problem here, but rather the dependency tree. Of course making anything faster is good.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6432#issuecomment-2074853520:92,depend,dependency,92,https://root.cern,https://github.com/root-project/root/issues/6432#issuecomment-2074853520,1,['depend'],['dependency']
Integrability,I propose to merge now and revert once dependency is vanishes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5439#issuecomment-618428518:39,depend,dependency,39,https://root.cern,https://github.com/root-project/root/pull/5439#issuecomment-618428518,1,['depend'],['dependency']
Integrability,I proposed a PR to restore those two files. > Knowing that there is all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? [8ef5d04](https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006) . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. I let @guitargeek comment on that particular commit.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13387#issuecomment-2223223384:350,protocol,protocol,350,https://root.cern,https://github.com/root-project/root/issues/13387#issuecomment-2223223384,1,['protocol'],['protocol']
Integrability,"I pushed a new version with some further cleanups (unused or unfinished code, reducing common code for priority queue). I also made sure to be as thread-safe as possible (use of `static thread_local` instead of `static` as well as protecting the safety-cache writing with a mutex)... although I mind the cost of doing so. However, please note that the original code itself is not thread-safe since it has state modified by routines called from TGeoNavigator. This will not be addressed here because it has nothing to do with the proposed changes. Until then, one should potentially forbid use of TGeoParallelWorld in combination with multiple TGeoNavigators.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442#issuecomment-2358266984:423,rout,routines,423,https://root.cern,https://github.com/root-project/root/pull/16442#issuecomment-2358266984,1,['rout'],['routines']
Integrability,"I re-tried on (macos,linux) x (.class, .Class) x ("""", ""TTree""). Of all the 8 combinations, only one crashes for me, which is `.Class` on macos:; `Assertion failed: (!T->isDependentType() && ""should not see dependent types here""), function getTypeInfoImpl, file TypeNodes.inc, line 35.`. Perhaps this is possible to fix and memorialised in a nice test. I am adding more brain power to the item to try and find a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10140#issuecomment-1925597970:206,depend,dependent,206,https://root.cern,https://github.com/root-project/root/issues/10140#issuecomment-1925597970,1,['depend'],['dependent']
Integrability,I realize now that this should probably go into `TApplication` - it's part of its public interface. Thus please don't merge...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1444#issuecomment-350638792:89,interface,interface,89,https://root.cern,https://github.com/root-project/root/pull/1444#issuecomment-350638792,1,['interface'],['interface']
Integrability,"I rebase PR doing:; - adjust warning message, putting there full URL, ; - add protection for ""TreeViewer.Name"" rootrc parameter; - provide initializer for TROOT webdisplay flags in header file",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14189#issuecomment-1845330562:37,message,message,37,https://root.cern,https://github.com/root-project/root/pull/14189#issuecomment-1845330562,1,['message'],['message']
Integrability,"I recommend not sourcing `thisroot.sh` multiple times in the same shell. That will mess up your environment. This is not related to install/uninstall. If you install ROOT somewhere with `make install`, just add `<prefix>/bin` to your `$PATH` and `<prefix>/lib` to your `$PYTHONPATH` and you should never need to `source thisroot.sh`. Also, if you install your own multiple versions of ROOT with `make install`, I recommend installing into an empty directory, not `/usr/local` where Homebrew may have installed it. Then you can just `rm -rf` if needed to uninstall. If you install into `/usr/local` with a package manager, just use the package manager to uninstall. Installing with `make install` a custom ROOT that overwrites another installation with a package manager is going to get you into trouble and `make uninstall` will not help much. With the uninstall target, if you change configuration before uninstalling, you may have half-uninstalled ROOT left over (e.g by enabling/disabling `pyroot_experimental` between make install/make uninstall), or may remove important files from other packages depending on what builtins you had enabled when you built ROOT. CMake has this disabled by default for this reason, and I'm reluctant to provide this uninstall target in ROOT for the same reason.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3405#issuecomment-462681306:1102,depend,depending,1102,https://root.cern,https://github.com/root-project/root/pull/3405#issuecomment-462681306,1,['depend'],['depending']
Integrability,I removed the dependence on the symlink PR because there seems to be more to it. That should make this PR lighter.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6007#issuecomment-656612588:14,depend,dependence,14,https://root.cern,https://github.com/root-project/root/pull/6007#issuecomment-656612588,1,['depend'],['dependence']
Integrability,"I run `fedora37` image on my machine - all webgui tests work properly. From the log output produce by headless chromimum, I see only one additional message on github actions:; ```; [0816/133157.889292:ERROR:headless_command_handler.cc(357)] Abnormal renderer termination.; ```; But why it happens, that is missing - I have no idea. ; Most probably some configuration of host system (from github) affects docker image and makes problem running chromium. I will try to add `--no-sandbox` argument to the headless chrome, maybe it be better.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13466#issuecomment-1682166103:148,message,message,148,https://root.cern,https://github.com/root-project/root/pull/13466#issuecomment-1682166103,1,['message'],['message']
Integrability,"I said this in my original comments, I am not sure that adding a `ROOT::Libraries` target will help much. It goes against modern CMake usage, and now even things like dataframe can be disabled during configuration, so if someone links against `ROOT::Libraries` to get dataframe, it might not be there. ROOT library targets propagate C++ standard, include directories, and link dependencies now, so I think that it's best to use those when linking instead of a generic target that may or may not contain the libraries you need. We still have the old style `${ROOT_LIBRARIES}` that contains what `root-config --libs` contains if one wants to go that route. However, I'm not keen to make it easy for users to potentially overlink/underlink their code by adding the generic target. If you don't mind, I think it's best to close this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1959#issuecomment-509585352:377,depend,dependencies,377,https://root.cern,https://github.com/root-project/root/pull/1959#issuecomment-509585352,2,"['depend', 'rout']","['dependencies', 'route']"
Integrability,"I see some activies about this issue. I compiled ROOT from scratch with AppleClang15 on my Macbook Pro M1 Max (2022) and I see this very same error message. Any quick fix or plan to solve this ?; ```; ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths!; Invoking:; LC_ALL=C ccache -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'; Results was:; With exit code 0; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10556#issuecomment-1931298699:148,message,message,148,https://root.cern,https://github.com/root-project/root/issues/10556#issuecomment-1931298699,1,['message'],['message']
Integrability,"I see that the arrays of input observables get hardcoded into the generated the function. This is not acceptable, because often you have thousands of events, which I tried out too. The `fitTo` time gets slow very quicky when you increase the number of events. I think the effort of generating a function where the observables are passed as input arrays instead would really pay off. You already know how to retrieve the observable values via `RooAbsData::getBatches`. Is it possible to save these arrays in the wrapper and then pass them to the generated function?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11773#issuecomment-1343439599:511,wrap,wrapper,511,https://root.cern,https://github.com/root-project/root/pull/11773#issuecomment-1343439599,1,['wrap'],['wrapper']
Integrability,I see that the ubuntu2004 build works fine without the PCH dependency. ; See output [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/165830/consoleFull). There is then something strange on that old platform. Let's disable tmva-sofie there and we ignore this error. ; Please @amadio go ahead merging these changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10690#issuecomment-1404267114:59,depend,dependency,59,https://root.cern,https://github.com/root-project/root/pull/10690#issuecomment-1404267114,1,['depend'],['dependency']
Integrability,"I see the test passes in the CI, so it could be a problem with my environment. ; The hanging test is `TestMPMessenger.StressPubSub`; Here are the last lines of the log:; ```[ RUN ] TestMPMessenger.SigStop; first send message to queue...; PID 493293 sends M2Q 1; sleep for 2 seconds...; PID 493330 receives M2Q 1; received 1 on queue; SIGSTOPping all children...; send another message to queue...; PID 493293 sends M2Q 2; sleep for 2 seconds...; SIGCONT queue and worker 1...; sleep for 2 seconds...; PID 493330 receives M2Q 2; received 2 on queue; PID 493330 sends Q2M 3; SIGCONT worker 2...; PID 493293 receives Q2M 3; Messenger dtor on PID 493293; handled Terminated on PID 493330; handled Terminated on PID 493328; handled Terminated on PID 493329; Messenger dtor on PID 493330; Messenger dtor on PID 493328; Messenger dtor on PID 493329; [ OK ] TestMPMessenger.SigStop (6004 ms); [ RUN ] TestMPMessenger.StressPubSub; Messenger dtor on PID 493525; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078#issuecomment-979231373:217,message,message,217,https://root.cern,https://github.com/root-project/root/pull/9078#issuecomment-979231373,2,['message'],['message']
Integrability,"I see these build failures on `alma9`:; ```; Scanning dependencies of target G__TMVAUtils; Consolidate compiler generated dependencies of target G__TMVAUtils; [ 98%] Building CXX object tmva/tmva/CMakeFiles/G__TMVAUtils.dir/G__TMVAUtils.cxx.o; [ 98%] Linking CXX executable TestRModelParserPyTorch; /usr/bin/ld: cannot find -lblas; ```; But these problems are not related to this PR, which only changes the `requirements.txt`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15275#issuecomment-2066606878:54,depend,dependencies,54,https://root.cern,https://github.com/root-project/root/pull/15275#issuecomment-2066606878,2,['depend'],['dependencies']
Integrability,"I see your issue with thread safety. However, your proposed solutions will not work for the following reasons. The assignment of the static variable in GetRootSys depends on the environment variable ROOTSYS (as does the others since they depend on GetRootSys). If the static variables are assigned at initialization time, these assignments will be done when the program is loaded before the program starts. But at this point the value of the ROOTSYS environment variable is not always set to the correct value. If the program is started without ROOTSYS set, TUnixSystem::Init will initialize it. The assignment of the static variable in GetRootSys must therefore be done after this. I have added calls to all the functions in the TROOT constructor, after the call to InitSystem. This way all the static variables get assigned by the TROOT constructor (which I believe is run single threaded). All subsequent calls to the functions will then not change the value of the static variables and are therefore thread safe. Will this work?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/130#issuecomment-215662452:163,depend,depends,163,https://root.cern,https://github.com/root-project/root/pull/130#issuecomment-215662452,2,['depend'],"['depend', 'depends']"
Integrability,"I see, in this case, you can go with the code snippet I pasted above. Since you open the ntuple without your own model, RNTuple needs to generate the model from the on-disk information. The call to `r->GetModel()` calls `RNTupleDescriptor::GenerateModel()`, which in turn uses `RFieldBase::Create()` with the on-disk type string. So you do exercise the type-erased `RRVecField`. More generally, perhaps it _is_ correct to make at least `GenerateValue` and `CaptureValue` non-const (`DestroyValue` could probably be const). An `RFieldValue` emerges from a field, it is linked to it, and it is meant to alter the field's state through reading and writing data. We could possibly add a `const` method like `virtual void *RFieldBase::GenerateType() const;` to just construct the type that is wrapped by the field. (Without such a function, a work-around is to clone the field and generate an `RFieldValue` on the clone.) I'm not sure if it is really necessary. Framework code that uses the type-erased reading API will most likely receive a `void *` pointer from somewhere else. The framework can then use `RNTupleModel::CreateBareEntry()` and `REntry::CaptureValueUnsafe()` to read into that `void *`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10408#issuecomment-1117593717:788,wrap,wrapped,788,https://root.cern,https://github.com/root-project/root/issues/10408#issuecomment-1117593717,1,['wrap'],['wrapped']
Integrability,"I see. I changed the formatting in some cases, but I guess you mean that some messages are not shown which should be shown or something is not shown that was shown before? Let me know how I can help.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-726263874:78,message,messages,78,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-726263874,1,['message'],['messages']
Integrability,"I still get exactly the error described in the summary with `master`:; ```; ----------------------------------------------------------------------------; | Welcome to ROOT 6.31/01 https://root.cern |; | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Feb 05 2024, 07:24:23 |; | From heads/ntuple-RPageNullSink@v6-31-01-913-gfdecca9b4d |; | With clang version 16.0.6 (Red Hat 16.0.6-2.module_el8.9.0+3621+df7f7146) |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ----------------------------------------------------------------------------. root [0] .rawInput; Using raw input; root [1] std::vector<short> getV() { return {42}; }; root [2] .rawInput; Not using raw input; root [3] getV()[0].foo(); ROOT_prompt_3:1:10: error: member reference base type 'value_type' (aka 'short') is not a structure or union; getV()[0].foo(); ~~~~~~~~~^~~~; root [4] getV()[0]; IncrementalExecutor::executeFunction: symbol '_ZSt8_DestroyIPssEvT_S1_RSaIT0_E' unresolved while linking [cling interface function]!; You are probably missing the definition of void std::_Destroy<short*, short>(short*, short*, std::allocator<short>&); Maybe you need to load the corresponding shared library?; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7970#issuecomment-1926373568:1044,interface,interface,1044,https://root.cern,https://github.com/root-project/root/issues/7970#issuecomment-1926373568,1,['interface'],['interface']
Integrability,"I strongly favour a quick integration of this PR but, @pcanal before integrating I think there are other steps besides the suggested doc + tutorials + tests. For example a double check by @amadio about the CMake code to find arrow and arrow itself in our externals and/or inclusion of arrow in the built-ins (needs discussion). ; @ktf, the tutorials for this TDS should go in https://github.com/root-project/root/tree/master/tutorials/dataframe . You can punch in the C++ and Python version of the example you'd like to propose: ROOT will pick them up as tests for the CI and the doc machinery will put them on the web https://root.cern/doc/master/group__tutorial__tdataframe.html accessible also as rendered notebooks and notebooks runable in [SWAN](https://swan.cern.ch).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1712#issuecomment-371738541:26,integrat,integration,26,https://root.cern,https://github.com/root-project/root/pull/1712#issuecomment-371738541,2,['integrat'],"['integrating', 'integration']"
Integrability,"I suppose the proposed can work but require a synchronization step of sort. The thread handling file number n, must wait until the file number [0,n-1] have been open before starting to process entries ; the file opening can be in parallel (somewhat) but still if an arbitrary file inside the chain is much smaller than the other, the thread processing it will have to wait a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12190#issuecomment-1411036768:46,synchroniz,synchronization,46,https://root.cern,https://github.com/root-project/root/issues/12190#issuecomment-1411036768,1,['synchroniz'],['synchronization']
Integrability,"I talked to Pere, the `move_header` dependency is indeed the correct way to implement a custom target. Normally, the dependency is hidden inside `ROOT_LINKER_LIBRARY`. So the dependency on the CUDA dependent target mirrors this function (which can't be used in our case). @lmoneta From my point of view, this PR is merging ready!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/283#issuecomment-258095948:36,depend,dependency,36,https://root.cern,https://github.com/root-project/root/pull/283#issuecomment-258095948,4,['depend'],"['dependency', 'dependent']"
Integrability,"I tested this in a private repository, but unfortunately I can only check the final integration after merging...",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8654:84,integrat,integration,84,https://root.cern,https://github.com/root-project/root/pull/8654,1,['integrat'],['integration']
Integrability,"I think I can follow. That would mean that we accept the cost of allocating strings (stack frame, error message) in the RStatus class in case of errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4683#issuecomment-564991984:104,message,message,104,https://root.cern,https://github.com/root-project/root/pull/4683#issuecomment-564991984,1,['message'],['message']
Integrability,"I think Yuka is right, the `cling::printValue()` interface is too tempting to force people to go through `cling::Value::print()`. We currently do that to trigger the inclusion of the ""generic overloads"" header into cling. I proposed to Yuka to move the header inclusion of `cling::valuePrinterInternal::printValueInternal()` into a new function that will be called by `TCling()` (and `printValueInternal()`) to ensure ROOT has that header always included at startup. This will allow ROOT to invoke `cling::printValue()` directly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2644#issuecomment-423098163:49,interface,interface,49,https://root.cern,https://github.com/root-project/root/pull/2644#issuecomment-423098163,1,['interface'],['interface']
Integrability,"I think gcc does the same, I see this when debugging heavily templated code -- sometimes (rarely) `int` appears in error messages in place of a type that could not be determined.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8470#issuecomment-866620948:121,message,messages,121,https://root.cern,https://github.com/root-project/root/issues/8470#issuecomment-866620948,1,['message'],['messages']
Integrability,I think https://github.com/root-project/root/compare/99093d95f7...78228fee3b were the changes which caused this issue. There were no issues with root commit 99093d95f7 but once we integrated 78228fee3b then cmssw unit test started to show slowness,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11637#issuecomment-1292113871:180,integrat,integrated,180,https://root.cern,https://github.com/root-project/root/issues/11637#issuecomment-1292113871,1,['integrat'],['integrated']
Integrability,"I think it is better for you to ask help on the ROOT forum instead of on the issues section on Github. Actually, you have already posted a message on the forum [here](https://root-forum.cern.ch/t/permission-denied/52089/2).; So I think, this issue and [this one](https://github.com/root-project/root/issues/11626) should be closed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11636#issuecomment-1291593248:139,message,message,139,https://root.cern,https://github.com/root-project/root/issues/11636#issuecomment-1291593248,1,['message'],['message']
Integrability,"I think it is fine to change the test as the new code fit better the intent. However, it also hides a real issue:; ```; root [0] class ABC;; root [1] void func(ABC*) {}; root [2] class ABC { int a; }; root [3] ABC a; (ABC &) @0x10ad87068; root [4] func(&a); IncrementalExecutor::executeFunction: symbol '_ZN11__cling_N514funcEPN11__cling_N523ABCE' unresolved while linking [cling interface function]!; You are probably missing the definition of __cling_N51::func(__cling_N52::ABC*); Maybe you need to load the corresponding shared library?; ```. humm ... On the other hand this code might be actually solved by this PR. Nonetheless. Since the prompt and `ProcessLine` are very similar, it sounds like user could easily (inadvertently) fall in the pattern in the test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9782#issuecomment-1030056862:380,interface,interface,380,https://root.cern,https://github.com/root-project/root/pull/9782#issuecomment-1030056862,1,['interface'],['interface']
Integrability,"I think it may be a better approach if we expand the transitive dependencies. Eg. if we have `Core<-RIO<-Blah` and you specify only `RIO`, the system should automatically expand `Core`. Then we can choose if we want to enforce our cmake to enumerate all dependencies explicitly (because we will be able to issue a proper diagnostic). Expansion of transitive dependencies will free the non-expert users of our macros of enumerating all libraries and their dependencies (which they might not be aware of). And more importantly, it will free our cmake lists of:; ```; set deps(); if (option); set( deps ${deps} libOpt1); endif(option). ...; DEPENDENCIES ${deps}; ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4299#issuecomment-525784496:64,depend,dependencies,64,https://root.cern,https://github.com/root-project/root/pull/4299#issuecomment-525784496,5,"['DEPEND', 'depend']","['DEPENDENCIES', 'dependencies']"
Integrability,"I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? . > Users do not use make project . MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So *yes* this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-659011045:268,depend,dependent,268,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-659011045,1,['depend'],['dependent']
Integrability,"I think it would have been better to squash these commits instead of pushing 18 intermediate commits with messages such as ""clarify""...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9629#issuecomment-1041176258:106,message,messages,106,https://root.cern,https://github.com/root-project/root/pull/9629#issuecomment-1041176258,1,['message'],['messages']
Integrability,"I think it's a good point not to have too many nobs for turning on and off parallelism. How about we expose the `SetTaskScheduler()` interface from `RNTupleReader` and `RNTupleWriter`. So you'd either use all of IMT, or you explicitly diverge in RNTuple by providing your own task scheduler.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8334#issuecomment-856888414:133,interface,interface,133,https://root.cern,https://github.com/root-project/root/pull/8334#issuecomment-856888414,1,['interface'],['interface']
Integrability,"I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14034#issuecomment-1821703597:108,synchroniz,synchronization,108,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1821703597,1,['synchroniz'],['synchronization']
Integrability,"I think that still means that label sizes are not being correctly accounted for, with font precision 43 one should change from e.g. 0.1 label size to some number of pixels like 20, right? In this case, the pre-font-precision size is still there, whatever its value (unless the conversion is entirely implicit, which is... well... I need to use this to harmonize labels across adjacent pads that do not share the same heights/widths, so avoiding attempts to match the fontprecision 42 sizes on those is the purpose of going to precision 43). For the alignment, that was my mistake, I thought it was 10*vAlign + hAlign, and that's wrong, so it's working as expected. I'll see what I can do from python, that's going to involve a fair amount of wrapping and ctypes, it looks like. Also, is that only going to work once the axis has been added to the paint list with Draw()? i.e. return inapplicable/incorrect numbers of labels beforehand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10279#issuecomment-1084490685:742,wrap,wrapping,742,https://root.cern,https://github.com/root-project/root/issues/10279#issuecomment-1084490685,1,['wrap'],['wrapping']
Integrability,"I think that we need to add a signature of `ROOT::Experimental::RNTupleImporter::Create` that let the user over-ride the default name (what ever it is). For the default behavior I see only 2 sensible behavior:; * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree` and leave it at that.; or; * Use the user provided name, if none, use the `TChain` name, if not set, use the first `TTree`. In the later case (i.e. we guessed the name) throw an exception if encountering a different name. Note that the 2nd behavior might actually be the prefer one ... depending on what we do if/when we encounter a `TTree` which a different structure. (I.e. we reject `TTree` with a different structure, we ought to reject the name. If we accept `TTree` with a different structure, we ought to ignore the name). `hadd` for example let some differences slides (like added branches being ignored) and use the first file as the decider of the structure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13088#issuecomment-1611967270:593,depend,depending,593,https://root.cern,https://github.com/root-project/root/issues/13088#issuecomment-1611967270,1,['depend'],['depending']
Integrability,"I think the PR goes into the right direction. Please use just 1 simple event instead of 1000, because we are really testing only if the compression setting gets applied. The `ntuple_zip` unit tests are _not_ really relevant here -- they test the compression routines themselves and not if the correct compression settings were used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5179#issuecomment-620674511:258,rout,routines,258,https://root.cern,https://github.com/root-project/root/pull/5179#issuecomment-620674511,1,['rout'],['routines']
Integrability,"I think the default should be not to overwrite all symbols when a library is loaded, the best example of why is that would mean loading **libX.dylib** could insert it's `operator new` into the JIT for and whether it did so or not is entirely dependent on whether `operator new` was used prior to loading **libX.dylib** or not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/744#issuecomment-313395388:242,depend,dependent,242,https://root.cern,https://github.com/root-project/root/pull/744#issuecomment-313395388,1,['depend'],['dependent']
Integrability,"I think there's a potentially nasty backward incompatibility issue arising from this commit: https://github.com/root-project/root/commit/90ba866a65bd44e74a995aa330e0a950114443d6#diff-896028fd27621f8bfe9d0774c5529e27df523e5bd7fcfe2ac54f6fd1ced316f9. Details of how the problem appeared to me are below, but I will say that the problem went away when I compiled 6.22 branch with the `_value` data member removed (since it masks the RooAbsReal one). I am guessing here that a RooConstVar version 2 written to disk isn't properly loaded as a RooConstVar version 1. But what is odd is that under some circumstances it seems that the const var value is correctly loaded -- it seems connected to if the arg is ""dirty"" or not. Sorry for being a bit vague, I dont fully understand why it is sometimes a problem and sometimes not but the problem goes away when the above commit is effectively ported back into 6.22. The issue first appeared for me when I opened a workspace (I wanted to attach to this issue but it wont let me attach a root file) created in 6.23.01 in 6.22.00 ... the only warning I get is: . ```; Warning in <TStreamerInfo::BuildOld>: Cannot convert RooRealVarSharedProperties::_altBinning from type: unordered_map<string,RooAbsBinning*> to type: RooLinkedList, skip element; ```. But when I tried to evaluate the pdf in the workspace like this:. ```; RooWorkspace* w = f1.Get<RooWorkspace>(""Test"");; auto func = w->pdf(""SR_model"");; auto obs = w->var(""obs_x_SR"");; func->getVal(*obs);; ```. I got this:. ```; message : p.d.f normalization integral is zero or negative: 0; server values: !funcList=(L_x_bkg_SR_overallSyst_x_StatUncert = 47.1,L_x_sig_SR_overallSyst_x_StatUncert = 3.82), !coefList=(binWidth_obs_x_SR_0 = 5.5,binWidth_obs_x_SR_1 = 5.5); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7646:1518,message,message,1518,https://root.cern,https://github.com/root-project/root/issues/7646,1,['message'],['message']
Integrability,"I think this PR is not needed, with #7017. I have tested and I did not get any error. Only this message when starting root:; ```; Module cuda not found.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6999#issuecomment-758479941:96,message,message,96,https://root.cern,https://github.com/root-project/root/pull/6999#issuecomment-758479941,1,['message'],['message']
Integrability,"I think this cannot be merged as is, since using the .cxx files for dependencies creates a race condition with the custom command that writes them out (multiple targets depending on the same custom command). I will try to find another solution to this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4329#issuecomment-527323573:68,depend,dependencies,68,https://root.cern,https://github.com/root-project/root/pull/4329#issuecomment-527323573,2,['depend'],"['dependencies', 'depending']"
Integrability,"I think this is ready for review. My intent is to fix the segfault and provide scaffolding for RNTuple merges in this PR and follow up with the actual implementation PRs. . @pcanal are you comfortable with the error message printed on an attempted merge for non-inheriting objects? . ```text; hadd Target file: ../merged.root; hadd compression setting for all output: 1; hadd Source file 1: ntuple1.root; hadd Source file 2: ntuple2.root; hadd Sources and Target have different compression levels; hadd merging will be slower; hadd Target path: ../merged.root:/; Fatal in <TFileMerger::MergeRecursive>: Merging objects that don't inherit from TObject is unimplemented (key: ntuple in file ntuple2.root); aborting; grep: warning: GREP_OPTIONS is deprecated; please use an alias or script; #0 0x00007f2dfd7ec07a in __GI___waitpid (pid=20605, stat_loc=stat_loc; entry=0x7fffc72e6c90, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29; #1 0x00007f2dfd764fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007f2dfe92beb6 in TUnixSystem::StackTrace() () from /home/max/projects/root/new-errors/lib/libCore.so; #3 0x00007f2dfe7fe1aa in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/max/projects/root/new-errors/lib/libCore.so; #4 0x00007f2dfe8b9be8 in ErrorHandler () from /home/max/projects/root/new-errors/lib/libCore.so; #5 0x00007f2dfe810e29 in TObject::Fatal(char const*, char const*, ...) const () from /home/max/projects/root/new-errors/lib/libCore.so; #6 0x00007f2dfeed49e3 in TFileMerger::MergeRecursive(TDirectory*, TList*, int) () from /home/max/projects/root/new-errors/lib/libRIO.so; #7 0x00007f2dfeed2e41 in TFileMerger::PartialMerge(int) () from /home/max/projects/root/new-errors/lib/libRIO.so; #8 0x0000000000406c8d in main::{lambda(TFileMerger&, int, int)#2}::operator()(TFileMerger&, int, int) const [clone .constprop.0] (); #9 0x0000000000404ccd in main (); #10 0x00007f2dfd740830 in __libc_start_main (main=0x403f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6008#issuecomment-662581836:216,message,message,216,https://root.cern,https://github.com/root-project/root/pull/6008#issuecomment-662581836,1,['message'],['message']
Integrability,"I think this is the correct fix for #1677; the non-const version of `Minimizer()` was missing from the interface. `Builder()` already has both const and non-const versions, so this should be enough to fix the chain `MnMigrad.Minimizer().Builder().SetPrintLevel(...)`. @HDembinski please check.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1946:103,interface,interface,103,https://root.cern,https://github.com/root-project/root/pull/1946,1,['interface'],['interface']
Integrability,"I think we can go for the PR to Cppyy and see what is the opinion of Wim on this issue. The tricky point is the dependency we introduce between CPyCppyy and ROOT, although only if a macro is defined.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3455#issuecomment-465633729:112,depend,dependency,112,https://root.cern,https://github.com/root-project/root/pull/3455#issuecomment-465633729,1,['depend'],['dependency']
Integrability,"I think we should close this issue, many / most of the dependencies are correct and `make` being slow when there is nothing to do is exactly the motivation to use Ninja. So not much to improve from the ROOT side of things.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8624#issuecomment-934436116:55,depend,dependencies,55,https://root.cern,https://github.com/root-project/root/issues/8624#issuecomment-934436116,1,['depend'],['dependencies']
Integrability,"I thought (in theory) using fixed width integer would be more reliable because 8 bits are 8 bits for i386, x86-64, ARM, and so on (Ok, assuming we have the same definition of ""bit"" for all of the platforms). > The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling.; > ; > Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement.; > (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different).; > ; > So for better or worse you need to use:; > ; > ```; > char i;; > TFile f (file_name.c_str ());; > TTree *t = (TTree*)f.Get (""tree"");; > t->SetBranchAddress (""i"", &i);; > ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7565#issuecomment-801737090:573,depend,depending,573,https://root.cern,https://github.com/root-project/root/issues/7565#issuecomment-801737090,1,['depend'],['depending']
Integrability,"I thought the rationale is spelled out in the original post?. > They are dependant on the OS (DYLD* on macOS, LD_LIBRARY_PATH on Linux, etc); > LD_LIBRARY_PATH/etc modify the system's search path for dynamic libraries, which can result in all sorts of bad things.; >; > We would like to have a dedicated environment variable, that is; > - OS independant.; > - does only affect ROOT. Why would that exclude Windows? Either we ""buy"" the rationale and agree that this is a useful feature (and that would then include Windows) or we think it's not needed, but then it shouldn't be needed on any platform. What am I missing / misunderstanding?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7031#issuecomment-800435989:73,depend,dependant,73,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-800435989,1,['depend'],['dependant']
Integrability,"I thought this was already working :slightly_smiling_face: But okay, if it's not working I agree we should support this :+1: This will help a lot in making C++ interfaces feel more pythonic without writing explicit pythonization wrappers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16406#issuecomment-2344728956:160,interface,interfaces,160,https://root.cern,https://github.com/root-project/root/issues/16406#issuecomment-2344728956,2,"['interface', 'wrap']","['interfaces', 'wrappers']"
Integrability,I thought we could not freely use stuff from TBB?. EDIT: it's tricky not to introduce a header dependency on TBB when using template classes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8715#issuecomment-884814182:95,depend,dependency,95,https://root.cern,https://github.com/root-project/root/pull/8715#issuecomment-884814182,1,['depend'],['dependency']
Integrability,"I took the chance to also move the function to a better header, since we discussed that `InterfaceUtils` is for stuff which `RInterface` depends from and not the other way around.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13162:89,Interface,InterfaceUtils,89,https://root.cern,https://github.com/root-project/root/pull/13162,2,"['Interface', 'depend']","['InterfaceUtils', 'depends']"
Integrability,"I tried out option 3 and it gives pretty good results, using your comparison method as documented in your commit message here https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed:. ```; value_old value_new diff_abs diff_rel; param; -1.00 0.9000000000 0.9000000000 0.0000000000 0.00E+00; -0.95 0.9047424331 0.9049857073 0.0002432742 2.69E-04; -0.85 0.9140836603 0.9146805378 0.0005968775 6.53E-04; -0.75 0.9230659064 0.9237960815 0.0007301751 7.91E-04; -0.65 0.9317147727 0.9323668386 0.0006520658 7.00E-04; -0.55 0.9402402768 0.9406592464 0.0004189696 4.46E-04; -0.45 0.9489635592 0.9490771800 0.0001136208 1.20E-04; -0.35 0.9582539443 0.9580809519 -0.0001729925 -1.81E-04; -0.25 0.9684763536 0.9681198120 -0.0003565416 -3.68E-04; -0.15 0.9799490728 0.9795779479 -0.0003711248 -3.79E-04; -0.05 0.9929118716 0.9927339847 -0.0001778869 -1.79E-04; 0.05 1.0075044778 1.0077339847 0.0002295068 2.28E-04; 0.15 1.0237554038 1.0245779479 0.0008225442 8.03E-04; 0.25 1.0415811263 1.0431198120 0.0015386857 1.48E-03; 0.35 1.0607956204 1.0630809519 0.0022853314 2.15E-03; 0.45 1.0811302458 1.0840771800 0.0029469342 2.73E-03; 0.55 1.1022639865 1.1056592464 0.0033952598 3.08E-03; 0.65 1.1238640449 1.1273668386 0.0035027937 3.12E-03; 0.75 1.1456367871 1.1487960815 0.0031592944 2.76E-03; 0.85 1.1673890440 1.1696805378 0.0022914938 1.96E-03; 0.95 1.1890997634 1.1899857073 0.0008859439 7.45E-04; 1.00 1.2000000000 1.2000000000 0.0000000000 0.00E+00; ```. The difference is slightly worse, half an order of magnitude I'd guesstimate, but perhaps this is not such a big deal. The implementation that produced these ""new"" results:. 1. It uses your `interpolate6thDegree`.; 2. On the call site in `flexibleInterp`, I removed the `log`s, the `exp` and I added a `1 +`, which is also done in the old algorithm before returning. Indeed, I saw that when I did not add it, the absolute difference of the first results was exactly `-1`. So, in the end the calling line becomes `return total",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13749#issuecomment-1746603106:113,message,message,113,https://root.cern,https://github.com/root-project/root/issues/13749#issuecomment-1746603106,1,['message'],['message']
Integrability,"I tried to reproduce this issue with the following C++ script:; ```; void nan(){; auto g = new TGraph ();; g->AddPoint(0,TMath::QuietNaN());; g->AddPoint(1,TMath::QuietNaN());; g->AddPoint(2,TMath::QuietNaN());; g->AddPoint(3,TMath::QuietNaN());; g->AddPoint(4,TMath::QuietNaN());; g->Draw(""APL"");; }; ```; Like you it gives me a blank canvas but in parallel, I get the following messages in the terminal output:; ```; root [0] ; Processing nan.C...; Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1; Warning in <TCanvas::ResizePad>: Inf/NaN propagated to the pad. Check drawn objects.; Warning in <TCanvas::ResizePad>: c1 height changed from 0 to 10; ``` ; So it is pretty clear that there NaNs in the data. ; The message even invites the user to check the ""drawn objects"". I do not think we can do more than that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12296#issuecomment-1431275163:380,message,messages,380,https://root.cern,https://github.com/root-project/root/issues/12296#issuecomment-1431275163,2,['message'],"['message', 'messages']"
Integrability,"I understand where `PySequence_Check` is coming from (there is e.g. a standard Python `iterator` that will try indexing an object from 0 with integers), but for C++ bound containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:; ```; import cppyy. cppyy.cppdef(""""""\; struct MyStruct {};; MyStruct* fff = nullptr;; """"""). def is_sequence(obj):; try:; obj[0]; return True; except TypeError as e:; print(e); return False. print(is_sequence(cppyy.gbl.fff)); ```; which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15161#issuecomment-2057616934:276,protocol,protocol,276,https://root.cern,https://github.com/root-project/root/issues/15161#issuecomment-2057616934,2,['protocol'],['protocol']
Integrability,"I understand your point from the developer point of view. But from the user point of view:. There have been so many many users asking this question. When so many people ask this question, it means that the message is ambiguous. It's not a one-case. https://root-forum.cern.ch/t/which-package-or-class-supersede-the-tspectrum-for-searching-peaks/51459; https://root-forum.cern.ch/t/if-tspectrum-class-is-legacy-code-another-code-for-tspectrum/50833; https://root-forum.cern.ch/t/question-about-tspectrum-alternatives/48447; https://root-forum.cern.ch/t/question-about-tspectrum-alternatives/48447; https://root-forum.cern.ch/t/alternative-for-tspectrum/49984. Also, saying that it is not recommended is a bit aggressive when there is no replacement for it, which is why in my opinion so many people ask the question. The result is that developers lose most time answering the questions in the forum. If one would say, do not use TTreeReaderArray, use RDataFrame, that would be fine. In any case, I agree with your point of adding more info in the body doc, as you commented here: https://root-forum.cern.ch/t/alternative-for-tspectrum/49984/3?u=ferhue. Still, my opinion is that the wording could be fixed on the first place. If the label were just 'interface will not receive new bug fixes', instead of 'not recommended', it would be less ambiguous and no one would ask further questions in the forum. And as a user, I still use TSpectrum in new developments. There is no alternative to it for my use cases.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11315#issuecomment-1237786012:206,message,message,206,https://root.cern,https://github.com/root-project/root/pull/11315#issuecomment-1237786012,2,"['interface', 'message']","['interface', 'message']"
Integrability,"I understand, but the dependency must vanish before the next release if I understood Axel and Lorenzo correctly.; @Axel-Naumann @lmoneta ?. So I'm not sure if we introduce it now, it might end up in the next release. How do we make sure that this is taken care of?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5439#issuecomment-618454397:22,depend,dependency,22,https://root.cern,https://github.com/root-project/root/pull/5439#issuecomment-618454397,1,['depend'],['dependency']
Integrability,"I used ""xtrace"", and I got messages printed when I use kAnyModifier, but none without it. ```; _root [1] 000:<:0549: 12: Request(102): ChangeKeyboardControl values={auto-repeat-mode=On(0x01)}; 000:>:0549: Event KeyPress(2) keycode=0x36 time=0x174cf013 root=0x00000185 event=0x07e000e7 child=None(0x00000000) root-x=939 root-y=542 event-x=54 event-y=38 state=Control,Mod2 same-screen=true(0x01); CTRL+C key pressed!; 0x7ffdd1322ea0 0 20; 000:>:0549: Event KeyRelease(3) keycode=0x36 time=0x174cf0b3 root=0x00000185 event=0x07e000e7 child=None(0x00000000) root-x=939 root-y=542 event-x=54 event-y=38 state=Control,Mod2 same-screen=true(0x01); 0x7ffdd1322ea0 1 20_; ```. Now to the funny part. I added the following to the mask:; `kKeyShiftMask | kKeyLockMask | kKeyControlMask | kKeyMod1Mask | kKeyMod2Mask | kKeyMod3Mask | kKeyMod4Mask | kKeyMod5Mask | kButton1Mask | kButton2Mask | kButton3Mask | kButton4Mask | kButton5Mask | kButton6Mask | kButton7Mask`. and it still didn't work. Then I added `| kAnyModifier`, and it worked. Then I removed all of them and replace with just `kKeyControlMask`. And then it worked. So now it works perfectly as it should and lets me even more confused. It seems there is something fishy going on with X11 being let in an undefined state that somehow playing around was enough to 'reset it'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8665#issuecomment-879702063:27,message,messages,27,https://root.cern,https://github.com/root-project/root/issues/8665#issuecomment-879702063,1,['message'],['messages']
Integrability,"I used the github web interface to resolve some conflicts. It inserted a merge commit, we need to repair that, please do not merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/632#issuecomment-307770896:22,interface,interface,22,https://root.cern,https://github.com/root-project/root/pull/632#issuecomment-307770896,1,['interface'],['interface']
Integrability,"I want too, but actually it make the TreeTable one row more than it should, and break the breadcrumbs; I sended a message on Slack to have help from SAP, but i still have no answer; As soon as i have free time, or an answer i will try to find a solution, and apply it back. But i believe that for the user experience, it is better to have the Splitter, more than the two scrollbars, and the nor usable breadcrumbs. This is a temporary fix until we can debug the SplitApp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4591#issuecomment-547359502:114,message,message,114,https://root.cern,https://github.com/root-project/root/pull/4591#issuecomment-547359502,1,['message'],['message']
Integrability,"I was looking into ways to improve the target-based usage of ROOT in CMake. I found the missing `INTERFACE_INCLUDE_DIRECTORIES` has already been added to master (Yay!), but there are still other additions that could really help a user trying to use targets:. | New target | Usage |; |---|---|; | `ROOT::Libraries` | This is the target equivalent of `ROOT_LIBRARIES`, and links all common and requested components. |; | ~~`ROOT::Flags`~~ | ~~The target equivalent of `ROOT_*_FLAGS`, `ROOT_DEFINITIONS`, and `ROOT_EXE_LINKER_FLAGS`. Adds the flags that ROOT recommends; this is a smart target and will add `C`, `CXX`, and `FORTRAN` flags as needed depending on the target you link to.~~ |. ~~I have added `_LIST` versions of `FLAGS` variables, since CMake expects the flags to be a real list in most cases (really everywhere except in the `CMAKE_CXX_FLAGS` variable itself). Actually changing them to CMake lists directly might break users code, so this way is safer.~~. Target based approach before (showing the old INCLUDE issue too). ```cmake; cmake_minimum_required(VERSION 3.4). project(RootSimpleExample LANGUAGES CXX); find_package(ROOT CONFIG REQUIRED COMPONENTS RooFit RooFitCore); # Note: Symbols missing compiling error if user forgets RooFitCore!. # Already fixed in ROOT master; set_property(TARGET ROOT::Core PROPERTY; INTERFACE_INCLUDE_DIRECTORIES ""${ROOT_INCLUDE_DIRS}""). # Fix for ROOT_*_FLAGS not actually being a CMake list; separate_arguments(ROOT_CXX_FLAGS); separate_arguments(ROOT_EXE_LINKER_FLAGS). # Setting up the recommended ROOT flags; add_library(ROOT::Flags IMPORTED INTERFACE); set_property(TARGET ROOT::Flags APPEND PROPERTY; INTERFACE_COMPILE_OPTIONS ${ROOT_CXX_FLAGS}); set_property(TARGET ROOT::Flags APPEND PROPERTY; INTERFACE_COMPILE_DEFINITIONS ${ROOT_DEFINITIONS}); #set_property(TARGET ROOT::Flags APPEND PROPERTY; # INTERFACE_LINK_LIBRARIES ${ROOT_EXE_LINKER_FLAGS}). # Adding an exectuable program and linking to needed ROOT libraries; add_executable(RootSimple",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1959:646,depend,depending,646,https://root.cern,https://github.com/root-project/root/pull/1959,1,['depend'],['depending']
Integrability,I was running some compilation benchmarks on a haswell machine and it looks like in `-j12` mode we are not scaling well even if llvm is out of our way. I suspect we still have a bridge in the graph around cling/rootcling. I.e. I was expecting better compilation speedup...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1632#issuecomment-365877943:178,bridg,bridge,178,https://root.cern,https://github.com/root-project/root/pull/1632#issuecomment-365877943,1,['bridg'],['bridge']
Integrability,"I went through all comments, closed the ones I fixed and left some further comments for follow up discussion. The fixes I made so far are summarized in the commit message. The obvious big things still are `KahanSum` and adding lots of documentation. I will do these (and the other remaining todo's in the first post above this PR, https://github.com/root-project/root/pull/8700#issue-692681999) after my holidays.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8700#issuecomment-884989115:163,message,message,163,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-884989115,1,['message'],['message']
Integrability,I will close this PR for now because it doesn't have a high priority. Much more development time will have to be invested to make the analytical integration actually faster than the numerical integration here (maybe with the help of KD-trees.).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8019#issuecomment-831321209:145,integrat,integration,145,https://root.cern,https://github.com/root-project/root/pull/8019#issuecomment-831321209,2,['integrat'],['integration']
Integrability,I will fix that commit message. Thanks for finding that!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11096#issuecomment-1428280077:23,message,message,23,https://root.cern,https://github.com/root-project/root/pull/11096#issuecomment-1428280077,1,['message'],['message']
Integrability,I will investigate this tomorrow. It seems a bug if we depend on Vc types there.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/466#issuecomment-290243337:55,depend,depend,55,https://root.cern,https://github.com/root-project/root/pull/466#issuecomment-290243337,1,['depend'],['depend']
Integrability,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44); [GCC 8.3.0] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import ROOT; >>> from ROOT import TMVA; Traceback (most recent call last):; File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA; from libROOTPythonizations import AsRTensor; ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA; raise Exception('Failed to pythonize the namespace TMVA'); Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09; Python 3.7.3 (default, Jul 25 2020, 13:03:44); [GCC 8.3.0] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import ROOT; >>> from ROOT import TMVA; >>>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4561#issuecomment-718345054:148,message,message,148,https://root.cern,https://github.com/root-project/root/pull/4561#issuecomment-718345054,1,['message'],['message']
Integrability,I will look at it. I prefer to have a self consistent doc. Having it with the doc reduces the dependencies in case the remote website is down.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10067#issuecomment-1061593943:94,depend,dependencies,94,https://root.cern,https://github.com/root-project/root/issues/10067#issuecomment-1061593943,1,['depend'],['dependencies']
Integrability,"I will try to reproduce the issue.; In the meantime, if you want to try something on your side, and if you need a full `Debug` build (i.e. with all external dependencies also built in `Debug` mode), make sure to enable the `winrtdebug` option (`-Dwinrtdebug=ON`) to link everything with the `Debug` runtime libraries, or build everything in `RelWithDebInfo` mode.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12738#issuecomment-1532893258:157,depend,dependencies,157,https://root.cern,https://github.com/root-project/root/issues/12738#issuecomment-1532893258,1,['depend'],['dependencies']
Integrability,"I wonder why CMake doesn't notice ""no network access""; this sounds like a good feature for it to have... I'd propose we do not offer builtins that require network access if we detect that no network is present, along the lines of https://stackoverflow.com/questions/62214621/how-to-check-for-internet-connection-with-cmake-automatically-prevent-fails-if. If you then do `-Dfail-on-missing=On -Dimt` and builtin-tbb gets turned off, and no system tbb is found, you'd get a nice error message. I find this more helpful than adding another config option. Is that an acceptable approach?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-863178474:483,message,message,483,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-863178474,1,['message'],['message']
Integrability,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:; ```c++; MnPrint::AddFilter(""MnHesse"");; ```; To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:; ```c++; MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");; ```; To only match the beginning of the prefix string, use ""^"". For example,; ```c++; MnPrint::AddFilter(""^MnHesse"");; ```; only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:; ```c++; MnPrint::AddFilter(""Gradient"");; ```; to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-733046580:332,message,messages,332,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-733046580,4,['message'],['messages']
Integrability,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:; ```; Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0.; ```; I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:; ```; Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0.; ```; or even ""just""; ```; Info in ROOT.RDF: Starting event loop number 0.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7008#issuecomment-756867365:77,message,message,77,https://root.cern,https://github.com/root-project/root/issues/7008#issuecomment-756867365,10,"['message', 'rout']","['message', 'messages', 'routine']"
Integrability,"I would avoid including the code in ROOT. Wrapper for GSL exists, I would use those if needed, see ; https://www.thesalmons.org/john/random123/releases/latest/docs/index.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14564#issuecomment-1940697880:42,Wrap,Wrapper,42,https://root.cern,https://github.com/root-project/root/issues/14564#issuecomment-1940697880,1,['Wrap'],['Wrapper']
Integrability,"I would like to have a posibility to build only the math libraries or that they are split out from the main project, as we don't want to use root as an application but are writing simulations in c++ and would not like to build our own math lib. . At the moment it is possible to build the math libs one by one but the c++ interpreter is build as a dependency of them (also some dependency that uses openssl) which is not needed to use the pure math libs. This increases build times unreasonably. I just build the MathMore target. For this Target about 97% of the compile steps where made up of compiling the interpretor.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6617:348,depend,dependency,348,https://root.cern,https://github.com/root-project/root/issues/6617,2,['depend'],['dependency']
Integrability,"I would like to suggest to drop the ""From Guilherme:"" part from the commit message (I don't like my name in it like that), and add a [`Suggested-by: `](https://git.wiki.kernel.org/index.php/CommitMessageConventions) tag instead, or just drop it entirely, it's just a minor change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3866#issuecomment-496146795:75,message,message,75,https://root.cern,https://github.com/root-project/root/pull/3866#issuecomment-496146795,1,['message'],['message']
Integrability,"I would love to, but you just edited the GitHub comment and not the commit itself. Could you update the message there?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5221#issuecomment-604872807:104,message,message,104,https://root.cern,https://github.com/root-project/root/pull/5221#issuecomment-604872807,1,['message'],['message']
Integrability,"I would not know where your impression could come from, @vgvassilev . As we had discussed, and as the commit and PR message say, master is sufficiently different from llvm9 to make a backport unreasonably (for me) involved. Thanks for confirming that this ought to work in master, @hahnjo !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8044#issuecomment-831705558:116,message,message,116,https://root.cern,https://github.com/root-project/root/pull/8044#issuecomment-831705558,1,['message'],['message']
Integrability,"I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14987#issuecomment-2001914193:93,depend,dependencies,93,https://root.cern,https://github.com/root-project/root/issues/14987#issuecomment-2001914193,1,['depend'],['dependencies']
Integrability,"I would suggest instead generalizing this instead of attaching it to a platform X11 or cocoa:; If 'asimage=OFF', then skip this message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15042#issuecomment-2016843986:128,message,message,128,https://root.cern,https://github.com/root-project/root/pull/15042#issuecomment-2016843986,1,['message'],['message']
Integrability,"I wrote that test the first week that I worked in the ROOT team, and I had not much of a clue about RooFit or ROOT :laughing: I don't remember anything in detail. In hindsight, it's probably because these RooFit objects reference each other and something used to depend on the order of destruction. I randomly saw this again today and figured it's probably not needed anymore.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16067#issuecomment-2239387042:263,depend,depend,263,https://root.cern,https://github.com/root-project/root/pull/16067#issuecomment-2239387042,1,['depend'],['depend']
Integrability,"I'd be also in favour of merging this version now and later adapt it to the LLVM upgrade. Once it's in master we'll be able to use it also from CVMFS (depending on where we test, e.g. SWAN, this makes logistics easier).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10685#issuecomment-1148562254:151,depend,depending,151,https://root.cern,https://github.com/root-project/root/pull/10685#issuecomment-1148562254,1,['depend'],['depending']
Integrability,"I'd be very happy to walk you through and hear your ideas! I don't like that we have this dualism of GH workflow steps vs the python script running steps - I'd prefer that any invocation of a binary is from GH steps rather than Python `subprocess`. That's certainly one of the things I see as problematic. For the rest I'm all ears!. Maybe I'll do another presentation at the ROOT meeting where I introduce people to the interface, and then a PPP where I explain the implementation and pick up comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13488#issuecomment-1685987956:421,interface,interface,421,https://root.cern,https://github.com/root-project/root/pull/13488#issuecomment-1685987956,1,['interface'],['interface']
Integrability,"I'd like to discuss the lib dependency at the team meeting on Monday. Can we hold back with the merge until after that discussion? (Disclaimer: I don't have an opinion yet, but I think we should discuss this.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/567#issuecomment-301111361:28,depend,dependency,28,https://root.cern,https://github.com/root-project/root/pull/567#issuecomment-301111361,1,['depend'],['dependency']
Integrability,"I'd like to hear Axel's opinion on the change, as it's user-facing and hard to remove once it's in. Qt is usually seen as a model for how to handle CMake integration (at least Qt5), and they don't have a generic target like this, you have to link against specific Qt components. Granted, ROOT is no Qt, things are a lot more integrated, but I think that if the dependencies for each component come in automatically, there will be less of a need for a target with everything in it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1959#issuecomment-387766583:154,integrat,integration,154,https://root.cern,https://github.com/root-project/root/pull/1959#issuecomment-387766583,3,"['depend', 'integrat']","['dependencies', 'integrated', 'integration']"
Integrability,"I'd like to wrap this up. Maybe I am naive but, as pointed out by Rene on [JIRA](https://sft.its.cern.ch/jira/browse/ROOT-2956), isn't this understood? We are trying to increment by one a single precision floating point number and at some point, the gap between 2 subsequent 32bit fp numbers is larger than 1...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6671#issuecomment-1861799490:12,wrap,wrap,12,https://root.cern,https://github.com/root-project/root/issues/6671#issuecomment-1861799490,1,['wrap'],['wrap']
Integrability,"I'd prefer keeping this in `Internal` for the time being. We can always make it more public (e.g., move to `Detail`) but it's hard to go the other way round. The outside users, currently, is us. And we implicitly accept that this interface can break anytime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16786#issuecomment-2446454862:230,interface,interface,230,https://root.cern,https://github.com/root-project/root/pull/16786#issuecomment-2446454862,1,['interface'],['interface']
Integrability,I'd rather rename the existing `build/` dir. IIUC it's not part of ROOT's public interface?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8009#issuecomment-828605443:81,interface,interface,81,https://root.cern,https://github.com/root-project/root/pull/8009#issuecomment-828605443,1,['interface'],['interface']
Integrability,I'll close it for now because it depends on https://github.com/root-project/root/pull/7616.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7344#issuecomment-811340365:33,depend,depends,33,https://root.cern,https://github.com/root-project/root/pull/7344#issuecomment-811340365,1,['depend'],['depends']
Integrability,I'll fix the compilation and provide a test for this interface.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11271#issuecomment-1232103123:53,interface,interface,53,https://root.cern,https://github.com/root-project/root/issues/11271#issuecomment-1232103123,1,['interface'],['interface']
Integrability,"I'll send the tests results which have been requested soon, and likely arrange things so that the TBB dependency here is optional. (Probably anyone who cares about threading efficiency is anyways building with implicit multithreading enabled.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-744062720:102,depend,dependency,102,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-744062720,1,['depend'],['dependency']
Integrability,"I'm a little confused as the same tests seems to have been quoted as `passed` and `failed` in the same log. I struggle to find the exact definition of each test as well. I looked through the relevant files, but the structure is not clear to me. Also, last time when I spoke with @amadio about the future of ROOT, he said you guys discussed making sure people outside of CERN can contribute. Unfortunately, I had to use my CERN login to see the test logs. I also don't know how to replicate the tests in my environment. Do they depend on files hosted somewhere? Could you give me some docs to read so I can find my way around?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9271#issuecomment-967115318:527,depend,depend,527,https://root.cern,https://github.com/root-project/root/pull/9271#issuecomment-967115318,1,['depend'],['depend']
Integrability,"I'm aware of this. This is mostly caused by dictionary dependencies. I have a prototype that fixes this; I need to invest some dev time to get this into PR quality. I.e. thanks for the the report, problem acknowledged!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6432#issuecomment-708253715:55,depend,dependencies,55,https://root.cern,https://github.com/root-project/root/issues/6432#issuecomment-708253715,1,['depend'],['dependencies']
Integrability,"I'm closing this PR, as most of the interface changes that were part of it were landed in https://github.com/root-project/root/pull/13208. For the optimized allocation / deallocation, I think we should be taking a look to `tbb_allocator<T>` instead, which uses TBB's scalable allocator if available or otherwise reverts to `malloc` (see https://oneapi-src.github.io/oneTBB/main/tbb_userguide/Which_Dynamic_Libraries_to_Use.html). That should be a different PR though! I'll leave it into your capable hands, @jblomer!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12279#issuecomment-1700944645:36,interface,interface,36,https://root.cern,https://github.com/root-project/root/pull/12279#issuecomment-1700944645,1,['interface'],['interface']
Integrability,"I'm confused, `RSealedPageHelper` already makes it `public`, just via a wrapper function, no? Sure, it's in the `Internal` namespace, but if we want it `public` I don't really see the difference to `Detail::RPageSource`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14403#issuecomment-1912189173:72,wrap,wrapper,72,https://root.cern,https://github.com/root-project/root/pull/14403#issuecomment-1912189173,1,['wrap'],['wrapper']
Integrability,"I'm going to close this draft, since it includes some merge routine sketches we shouldn't merge yet, but the discussions may be useful for future reference. There are a couple PRs that spun off from this one (#5805, #5831) related to `RField` names. The new PR implementing field descriptor iterators (and only those) is #5848.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5768#issuecomment-642325217:60,rout,routine,60,https://root.cern,https://github.com/root-project/root/pull/5768#issuecomment-642325217,1,['rout'],['routine']
Integrability,"I'm looking into the facade to fix [ROOT-10629](https://sft.its.cern.ch/jira/browse/ROOT-10629). However, we can improve in the lookup logic. Especially to throw more meaningful error messages. In short: Imho, stacking `try` blocks is not a good idea. The behaviour now:. ```bash; >>> import ROOT; >>> ROOT.foo; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/home/stefan/builds/root-dev/lib/python3.8/ROOT/_facade.py"", line 171, in _getattr; return getattr(self, name); File ""/home/stefan/builds/root-dev/lib/python3.8/ROOT/_facade.py"", line 144, in _fallback_getattr; raise AttributeError(""Failed to import {} from ROOT"".format(name)); AttributeError: Failed to import foo from ROOT; ```. The behaviour before:. ```bash; >>> import ROOT; >>> ROOT.foo; Traceback (most recent call last):; File ""/home/stefan/builds/root-dev/lib/python3.8/ROOT/_facade.py"", line 137, in _fallback_getattr; return getattr(gbl_namespace, name); AttributeError: <namespace cppyy.gbl at 0x5641444c41f0> has no attribute 'foo'. Full details:; type object '' has no attribute 'foo'; 'foo' is not a known C++ class; 'foo' is not a known C++ template; 'foo' is not a known C++ enum. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/home/stefan/builds/root-dev/lib/python3.8/ROOT/_facade.py"", line 140, in _fallback_getattr; return getattr(gbl_namespace.ROOT, name); AttributeError: <namespace cppyy.gbl.ROOT at 0x564145da5680> has no attribute 'foo'. Full details:; type object 'ROOT' has no attribute 'foo'; 'ROOT::foo' is not a known C++ class; 'foo' is not a known C++ template; 'foo' is not a known C++ enum. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/home/stefan/builds/root-dev/lib/python3.8/ROOT/_facade.py"", line 173, in _getattr; return getattr(self, name); File ""/home/stefan/builds/root-dev/lib/python3.8/ROOT/_fac",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5187:184,message,messages,184,https://root.cern,https://github.com/root-project/root/pull/5187,1,['message'],['messages']
Integrability,"I'm making another attempt, just not compiling the fortran wrapper because we don't need it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15508#issuecomment-2112336272:59,wrap,wrapper,59,https://root.cern,https://github.com/root-project/root/pull/15508#issuecomment-2112336272,1,['wrap'],['wrapper']
Integrability,"I'm marking this as critical because I don't know the implications of not specifying module dependencies to `rootcling`. It seems to break some cases for me (even though I don't understand what the length of the build directory name has to do with it...), even though all CI setups seem to work (by chance?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12561#issuecomment-1486553935:92,depend,dependencies,92,https://root.cern,https://github.com/root-project/root/pull/12561#issuecomment-1486553935,1,['depend'],['dependencies']
Integrability,"I'm not 100% sure about this, but #7767 does not seem to be ABI compatible with the current head of `v6-24-00-patches`. Or is it?. Testing an ABI compatible change, while a bit cumbersome, would be doable. But testing a change that's not ABI compatible would require rebuilding pretty much all our code. Including all the parts of LCG that depend on ROOT. That we are just not set up to be able to do. :frowning:. But Scott may have a different view...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7657#issuecomment-811286109:340,depend,depend,340,https://root.cern,https://github.com/root-project/root/issues/7657#issuecomment-811286109,1,['depend'],['depend']
Integrability,"I'm not sure if this is the one (stressInterpreter - ctest) @vgvassilev @dpiparo :. Current Master:; ```bash; dvalapar@emmanouil:~/work/root/builddir (master)$ ctest -R tectest -R test-stressinterpreter* --verbose; UpdateCTestConfiguration from :/home/dvalapar/work/root/builddir/DartConfiguration.tcl; Parse Config file:/home/dvalapar/work/root/builddir/DartConfiguration.tcl; Add coverage exclude regular expressions.; UpdateCTestConfiguration from :/home/dvalapar/work/root/builddir/DartConfiguration.tcl; Parse Config file:/home/dvalapar/work/root/builddir/DartConfiguration.tcl; Test project /home/dvalapar/work/root/builddir; Constructing a list of tests; Ignore test: test-stressproof; Ignore test: roottest-cling-parsing-semicolon; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 338; Start 338: test-stressinterpreter. 338: Test command: /usr/bin/cmake ""-DCMD=/home/dvalapar/work/root/builddir/test/stressInterpreter"" ""-DPRE=/usr/bin/cmake^-E^copy^/home/dvalapar/work/root/test/stressInterpreter.cxx^/home/dvalapar/work/root/builddir/test/stressInterpreter.cxx"" ""-DSYS=/home/dvalapar/work/root/builddir"" ""-P"" ""/home/dvalapar/work/root/builddir/RootTestDriver.cmake""; 338: Environment variables: ; 338: ROOT_HIST=0; 338: Test timeout computed to be: 1500; 338: ****************************************************************************; 338: * Starting stress INTERPRETER *; 338: ****************************************************************************; 338: FuncCall ................................................................ OK; 338: STLDict ................................................................. OK; 338: Reflection .............................................................. OK; 338: NestedStatements ........................................................ OK; 338: ********************************************************",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14267#issuecomment-1915174574:866,depend,dependency,866,https://root.cern,https://github.com/root-project/root/pull/14267#issuecomment-1915174574,2,['depend'],['dependency']
Integrability,"I'm not sure why the CI is unable to perform the rebase for `ROOT-ubuntu16/nortcxxmod`,. ```; CMake Error at /mnt/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1083 (message):; Rebase of matthewfeickert-backport/xrootd-5.4.3 branch on top of; v6-26-00-patches failed!; ```. but everything else seems to be working.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10755#issuecomment-1155522978:193,message,message,193,https://root.cern,https://github.com/root-project/root/pull/10755#issuecomment-1155522978,1,['message'],['message']
Integrability,"I'm quite baffled every time I come in contact with it, how you guys manage to survive with such a testing infrastructure. :confused: I did have a fork of [roottest](https://github.com/root-project/roottest) from a long time ago. https://github.com/krasznaa/roottest. What I didn't have was it being up to date with the main repository. Plus, did I see correctly in your copy-pasted error message that the CI complained about not finding a branch in my roottest fork with the same name as the branch that I opened this PR from? :confused: What the heck? Is it really expected that one would create a branch in both repositories to make a modification to ROOT?. After some deliberation I updated the PR as you can see. The setup that you guys have with `ROOTConfig.cmake` being generated twice, and one of them possibly being used already during the main configuration is... unique... (Just so that I stay PC...) I've seen similar configurations being used for header-only libraries in the past, but never for anything that needed an actual build before becoming usable. In any case, making `ROOTConfig.cmake` skip `find_dependency(Vdt)` if `VDT::VDT` is already available as a target, was the most robust thing that I could come up with...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11844#issuecomment-1339364132:389,message,message,389,https://root.cern,https://github.com/root-project/root/pull/11844#issuecomment-1339364132,1,['message'],['message']
Integrability,"I'm sorry have continued this discussion for **so long**, but this is the final interface that you can use!!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2698#issuecomment-424875381:80,interface,interface,80,https://root.cern,https://github.com/root-project/root/pull/2698#issuecomment-424875381,1,['interface'],['interface']
Integrability,"I'm sorry to barge in on this PR and if this concern has already been raised, but in a lot of places `R__ASSERT` provides a final guard against UB where the cost of a single if branch will always be negligible, i.e. in compression routines:; https://github.com/root-project/root/blob/4118c0cb6db03998ae77f56f57cc372ac150c9df/tree/ntuple/v7/inc/ROOT/RNTupleZip.hxx#L98-L100. What about a `R__DEBUG_ASSERT` macro with this behaviour?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8587#issuecomment-872335491:231,rout,routines,231,https://root.cern,https://github.com/root-project/root/pull/8587#issuecomment-872335491,1,['rout'],['routines']
Integrability,"I'm surprised it works with the `extern template` after it has been used :sweat_smile: maybe move the `extern template class RSimpleField<bool>` line before `class RField<bool> final : public RSimpleField<bool>`, just to be sure it stays that way. For the commit message, can you please use my `jonas.hahnfeld@cern.ch` email address? Thanks for adding me :smiley:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16284#issuecomment-2304273663:263,message,message,263,https://root.cern,https://github.com/root-project/root/pull/16284#issuecomment-2304273663,1,['message'],['message']
Integrability,"I'm totally +1 for using target-based CMake, and I believe I have fixed the issue of ROOT picking up its own headers here:; https://github.com/root-project/root/pull/8709 (needs rebasing). This fixed it at least for many builtins. There still might be more builtins that have the same problem, but let's go one step at a time. I solved the VDT-related part a bit differently. If I rebased, the diff would approximately read (done manually, sorry for possible indentation errors):; ```diff; DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT extra-headers); set(vdt ON CACHE BOOL ""Enabled because builtin_vdt enabled (${vdt_description})"" FORCE); set_property(GLOBAL APPEND PROPERTY ROOT_BUILTIN_TARGETS VDT); - add_library(VDT::VDT STATIC IMPORTED GLOBAL); - set_target_properties(VDT::VDT; - PROPERTIES; - IMPORTED_LOCATION ""${VDT_LIBRARIES}""; - INTERFACE_INCLUDE_DIRECTORIES ""${VDT_INCLUDE_DIRS}""; + add_library(VDT IMPORTED SHARED); + add_dependencies(VDT BUILTIN_VDT); + set_target_properties(VDT PROPERTIES IMPORTED_LOCATION ""${VDT_LIBRARIES}""); + target_include_directories(VDT INTERFACE $<BUILD_INTERFACE:${VDT_INCLUDE_DIR}> $<INSTALL_INTERFACE:include/>); ); endif(); endif(); ```; Whether the target is declared global, static or shared, I'm not sure if it makes a big difference. I'm happy to call it `VDT::VDT`, though. I think the important part was to switch the include directories via generator expressions, and to use **SYSTEM** includes instead of includes in `FindVDT`. #11844 is missing the usage of the `VDT::VDT` target in RooFit and in tmva, but that would come into effect after a rebase of #8709. I guess therefore that we could proceed with merging #11844 if it's green, and then I rebase #8709, so I have to do the rebase work only once. Does that sound reasonable for @amadio, @krasznaa, @bellenot ?. ### Edit ; And to be clear, for `SearchInstalledSoftware` I would leave everything as proposed in Attila's commit but the change to `target_include_directories` with the two ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11797#issuecomment-1339660363:1083,INTERFACE,INTERFACE,1083,https://root.cern,https://github.com/root-project/root/issues/11797#issuecomment-1339660363,1,['INTERFACE'],['INTERFACE']
Integrability,"I'm trying to build root (v6.24.06) with nvc++ from NVIDIA's nvhpc project (ver 21.9), as I get runtime segfaults when I build a project with nvc++ and link it against root built with gcc 9.3.0. However, building root fails during cmake (3.21.3) with; ```; CMake Warning at cmake/modules/CheckCompiler.cmake:12 (message):; Unsupported compiler: NVHPC.; Call Stack (most recent call first):; CMakeLists.txt:130 (include). nvc++-Error-Unknown switch: -; CMake Error at cmake/modules/CheckCompiler.cmake:129 (if):; if given arguments:. ""STRGREATER"" ""201703L"". Unknown arguments specified; Call Stack (most recent call first):; CMakeLists.txt:130 (include); ```. so it looks like nvc++ doesn't know about the `__cplusplus` macro. If I hack around this, cmake finishes, but then the compilation dies with ; ```; [ 27%] Building CXX object interpreter/llvm/src/lib/Support/CMakeFiles/LLVMSupport.dir/GraphWriter.cpp.o; ""/bld4/atlas/root/src_6.24/interpreter/llvm/src/lib/Support/ErrorHandling.cpp"", line 116: error: the global scope has no ""write""; ssize_t written = ::write(2, MessageStr.data(), MessageStr.size());; ^; ```; and; ```; NVC++-F-0000-Internal compiler error. get_call_sptr(): indirect call not via LDA/ACON 154 (/bld4/atlas/root/src_6.24/interpreter/llvm/src/lib/DebugInfo/DWARF/DWARFContext.cpp: 193); NVC++/x86-64 Linux 21.9-0: compilation aborted; make[2]: *** [interpreter/llvm/src/lib/DebugInfo/DWARF/CMakeFiles/LLVMDebugInfoDWARF.dir/DWARFContext.cpp.o] Error 2; make[2]: *** Waiting for unfinished jobs....; [ 52%] Built target obj.clang-tblgen; make[1]: *** [interpreter/llvm/src/lib/DebugInfo/DWARF/CMakeFiles/LLVMDebugInfoDWARF.dir/all] Error 2; CMake Error at /bld4/atlas/root/bld.v6-24-06_nvhpc_c17/TBB-prefix/src/TBB-stamp/TBB-build-Release.cmake:49 (message):; Command failed: 2. 'make' 'cpp0x=1' 'CXXFLAGS= -mno-rtm' 'CPLUS=/opt/nvidia/hpc_sdk/Linux_x86_64/21.9/compilers/bin/nvc++' 'CONLY=/opt/nvidia/hpc_sdk/Linux_x86_64/21.9/compilers/bin/nvc' 'LDFLAGS='; ```. Has anyone tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9036:312,message,message,312,https://root.cern,https://github.com/root-project/root/issues/9036,1,['message'],['message']
Integrability,"I'm trying to compile ROOT v6.24/06 on Void Linux with musl libc, however the build fails with the following error message:; ```cc; /builddir/root-6.24.06/core/clib/src/mmapsup.c:47:15: error: conflicting types for 'getpagesize'; 47 | extern size_t getpagesize PARAMS ((void));; | ^~~~~~~~~~~; In file included from /builddir/root-6.24.06/core/clib/res/mmprivate.h:56,; from /builddir/root-6.24.06/core/clib/src/mmapsup.c:26:; /usr/include/unistd.h:163:5: note: previous declaration of 'getpagesize' was here; 163 | int getpagesize(void);; | ^~~~~~~~~~~; ```. The relevant part of `mmapsup.c` is:; ```c; #if defined(R__LINUX) && !defined(R__GLIBC) && !defined(__CYGWIN__) \; || (defined(__CYGWIN__) && (CYGWIN_VERSION_API_MAJOR > 0 || CYGWIN_VERSION_API_MINOR < 213)); extern size_t getpagesize PARAMS ((void));; #else; extern int getpagesize PARAMS ((void));; #endif; ```. My understanding is that as musl doesn't define `R__GLIBC`, the condition resolves in favor of declaring `getpagesize` return value as `size_t`. However, this conflicts with the declaration present in `unistd.h` (which is included several lines above this), which declares it as `int` (in accordance with the POSIX standard). The same code snippet also causes error during `core/clib/src/mvalloc.c` compilation. It's not entirely clear to me why should `getpagesize` be declared in the first place, as it is declared in the included `unistd.h` file - my guess is for some kind of compatibility, although POSIX dropped it twenty years ago and Cygwin seems to have implemented it at least four years ago, likely more, I am not sure how this works on Windows - let alone as `size_t`. Thus my suggestion is to remove the above code block from both of the mentioned files entirely, which seems to fix the problem for me (at least until the compilation fails on another problem, which I haven't analyzed yet; and I'm still able to compile for glibc too) and my question is: would it break anything crucial (as I mentioned, `getpagesi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9253:115,message,message,115,https://root.cern,https://github.com/root-project/root/issues/9253,1,['message'],['message']
Integrability,"I'm with Vassil here: Things are completely broken right now, there is really not much you can describe being fixed here other than *what* is changed, which is very obvious in this case from the diff and should never be in the commit message anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12292#issuecomment-1461784959:234,message,message,234,https://root.cern,https://github.com/root-project/root/pull/12292#issuecomment-1461784959,1,['message'],['message']
Integrability,"I'm working inside CentOS7 container that does not have any OpenSSL installed this prevents linking ""random"" OpenSSL. I did full rebuild - all dependencies including compiler, OpenSSL (downloaded and built tag openssl-3.1.0 from https://github.com/openssl/openssl.git) and ROOT 6.28.02 with aforementioned ""fix"". ROOT did compile and proper OpenSSL library is linked.; ```; > ldd libRHTTP.so; ...; libssl.so.3 => /sw/slc7_x86-64/AliEn-Runtime/v2.19-le-local2/lib/libssl.so.3 (0x00007f0b72d85000); ...; > openssl version; OpenSSL 3.1.0 14 Mar 2023 (Library: OpenSSL 3.1.0 14 Mar 2023); ```; What is interesting, the `libssl.so.3` file with name `libssl.so.3.1` has not been created during OpenSSL build and in [OpenSSL Configure file](https://github.com/openssl/openssl/blob/openssl-3.1.0/Configure) in section apitable there is no mention of new 3.1.0 API. Either the authors have forgotten to add it there or they have decided not to increase API version. In file [VERSION.dat](https://github.com/openssl/openssl/blob/openssl-3.1.0/VERSION.dat) there is proper version 3.1.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12766#issuecomment-1536577420:143,depend,dependencies,143,https://root.cern,https://github.com/root-project/root/issues/12766#issuecomment-1536577420,1,['depend'],['dependencies']
Integrability,"I'm working on a fix. The bug affects the cases when an element is added to a mixture having already that element (defined via the interface taking an element, and not A/Z).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11272#issuecomment-1231788532:131,interface,interface,131,https://root.cern,https://github.com/root-project/root/issues/11272#issuecomment-1231788532,1,['interface'],['interface']
Integrability,"I've added a commit which acquires the `ROOT::gCoreMutex` in the C++ wrapper code. However, the runtime of following code goes up by a factor of 10 :/ But no segfaults (which you get without the lock!) ;). ```python; import ROOT; ROOT.ROOT.EnableImplicitMT(). @ROOT.DeclareCppCallable([""float""], ""float""); def f(x):; return 2.0 * x; print(f.__cpp_wrapper__). df = ROOT.ROOT.RDataFrame(10000000).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT::f(x)""); print(df.Mean(""y"").GetValue()); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3488#issuecomment-468659798:69,wrap,wrapper,69,https://root.cern,https://github.com/root-project/root/pull/3488#issuecomment-468659798,1,['wrap'],['wrapper']
Integrability,"I've been able reproduce this on my desktop (CentOS7, gcc 8.3) when building ROOT from source. The parameter that makes it fail is `-DCMAKE_CXX_STANDARD=17` (C++ 14 works fine). The reason is: when passing a Python callable as a parameter of a function (e.g. the `TF1` constructor in your example) cppyy automatically generates a C++ wrapper for it. As part of the wrapper generation, cppyy jits Python headers, some of which still use (in Python2) the `register` keyword, which causes an error in C++ 17. For example, when running your reproducer with dev3 these errors appear first:. ```; In file included from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3python2/Thu/ROOT/HEAD/x86_64-centos7-gcc8-opt/include/CPyCppyy/API.h:30:; In file included from /cvmfs/sft.cern.ch/lcg/releases/Python/2.7.16-3adfa/x86_64-centos7-gcc8-opt/include/python2.7/Python.h:88:; /cvmfs/sft.cern.ch/lcg/releases/Python/2.7.16-3adfa/x86_64-centos7-gcc8-opt/include/python2.7/unicodeobject.h:534:5: error: ISO C++17 does not allow 'register' storage class specifier [-Wregister]; register PyObject *obj, /* Object */; ^~~~~~~~~; ```. this is what ultimately causes the `TF1` constructor error, since the C++ wrapper for the Python callable can't be generated. The errors above start appearing with 6.24 as a result of the LLVM upgrade. But it's legit that they appear, the Python2 headers are just old and not updated anymore.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8152#issuecomment-849596617:334,wrap,wrapper,334,https://root.cern,https://github.com/root-project/root/issues/8152#issuecomment-849596617,3,['wrap'],['wrapper']
Integrability,"I've been trying to reproduce the behaviour in an interactive pbuilder root, with the previous dependencies, but running `cmake` with minimal options, and `make -j 1`.; Embarrassingly, I seem to get over the ""71% (`rootcling`) point"" - although the percentages may be misleading (the following is copied from `script` output, so it contains ANSI sequences):; ```; [ 50%] .[32m.[1mLinking CXX executable ../bin/rootcling.[0m; cd /build/root-cds-6.26.04.sg/.build/main && /usr/bin/cmake -E cmake_link_script CMakeFiles/rootcling.dir/link.txt --verbose=1 ; /usr/bin/c++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -rdynamic CMakeFiles/rootcling.dir/src/rootcling.cxx.o -o ../bin/rootcling -Wl,-rpath,/build/root-cds-6.26.04.sg/.build/lib: ../lib/libRIO.so ../lib/libCling.so ../lib/libThread.so ../lib/libCore.so -Wl,--unresolved-symbols=ignore-in-object-files; cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling rootcint; cd /build/root-cds-6.26.04.sg/.build/bin && ln -f rootcling genreflex; make[2]: Leaving directory '/build/root-cds-6.26.04.sg/.build'; [ 50%] Built target rootcling; ```; and end up with a completely different error:; ```; [ 85%] Generating G__MathMore.cxx, ../../lib/MathMore.pcm; cd /build/root-cds-6.26.04.sg/.build/math/mathmore && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/root-cds-6.26.04.sg/.build/lib: ROOTIGNOREPREFIX=1 /build/root-cds-6.26.04.sg/.build/bin/rootcling -rootbuild -v2 -f G__MathMore.cxx -cxxmodule -s /build/root-cds-6.26.04.sg/.build/lib/libMathMore.so -m MathCore.pcm -excludePath /build/root-cds-6.26.04.sg -excludePath /build/root-cds-6.26.04.sg/.build/ginclude -excludePath /build/root-cds-6.26.04.sg/.build/externals -excludePath /build/root-cds-6.26.04.sg/.build/builtins -compilerI/usr/include/c++/11 -compilerI/usr/include/x86_64-linux-gnu/c++/11 -compilerI/usr/include/c++/11/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/11/include -compi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10777#issuecomment-1161349757:95,depend,dependencies,95,https://root.cern,https://github.com/root-project/root/issues/10777#issuecomment-1161349757,1,['depend'],['dependencies']
Integrability,"I've just got the same behaviour.; Fortunately, you pointed to the line. > -- PyROOT will be built for versions 3.10.10 (Main) and 2.7.18. which is important for me, I absolutely must have Python 2 support, because that is our ROOT version on the cluster. But this message is very distracting. Why was this issue closed? Is it ROOT problem or of another program, how do we know that? Was there a bug filed to another program?. I don't know what `Tumbleweed` is, I use Arch Linux and installed Python 2 from AUR and trying to install ROOT from the latest source. I think if ROOT uses this build method, it would be great if it could be somehow fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8097#issuecomment-1529014824:265,message,message,265,https://root.cern,https://github.com/root-project/root/issues/8097#issuecomment-1529014824,1,['message'],['message']
Integrability,"I, _OI) [with bool _IsMove = false; _II = long unsigned int*; _OI = long unsigned int*]’ at /usr/include/c++/14/bits/stl_algobase.h:548:42,; inlined from ‘constexpr _OI std::__copy_move_a(_II, _II, _OI) [with bool _IsMove = false; _II = long unsigned int*; _OI = long unsigned int*]’ at /usr/include/c++/14/bits/stl_algobase.h:555:31,; inlined from ‘constexpr _OI std::copy(_II, _II, _OI) [with _II = long unsigned int*; _OI = long unsigned int*]’ at /usr/include/c++/14/bits/stl_algobase.h:651:7,; inlined from ‘constexpr std::vector<bool, _Alloc>::iterator std::vector<bool, _Alloc>::_M_copy_aligned(const_iterator, const_iterator, iterator) [with _Alloc = std::allocator<bool>]’ at /usr/include/c++/14/bits/stl_bvector.h:1342:28,; inlined from ‘constexpr void std::vector<bool, _Alloc>::_M_reallocate(size_type) [with _Alloc = std::allocator<bool>]’ at /usr/include/c++/14/bits/vector.tcc:1059:40,; inlined from ‘constexpr void std::vector<bool, _Alloc>::reserve(size_type) [with _Alloc = std::allocator<bool>]’ at /usr/include/c++/14/bits/stl_bvector.h:1130:17,; inlined from ‘ROOT::Internal::RDF::BuildAction<char, unsigned char, int, unsigned int, short int, short unsigned int, double, float, long long int, long long unsigned int, bool, ROOT::Detail::RDF::RLoopManager>(const ROOT::RDF::ColumnNames_t&, const ; std::shared_ptr<SnapshotHelperArgs>&, unsigned int, std::shared_ptr<ROOT::Detail::RDF::RLoopManager>, ActionTags::Snapshot, const RColumnRegister&)::<lambda()>’ at tree/dataframe/inc/ROOT/RDF/InterfaceUtils.hxx:270:20:; /usr/include/c++/14/bits/stl_algobase.h:452:30: warning: ‘void* __builtin_memmove(void*, const void*, long unsigned int)’ forming offset 8 is out of the bounds [0, 8] [-Warray-bounds=]; 452 | __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);; | ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; ```. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16360:2823,Interface,InterfaceUtils,2823,https://root.cern,https://github.com/root-project/root/issues/16360,1,['Interface'],['InterfaceUtils']
Integrability,"I. See https://setuptools.pypa.io/en/latest/pkg_resources.html; import pkg_resources; Attempting requirement 'numpy>=1.4.1'; Attempting requirement 'scikit-learn'; Attempting requirement 'xgboost'; Attempting requirement 'tensorflow'; Attempting requirement 'torch'; Attempting requirement 'numba>=0.47.0; python_version < ""3.11""'; Attempting requirement 'numba>=0.57.0; python_version >= ""3.11"" and python_version < ""3.12""'; Attempting requirement 'cffi>=1.9.1'; Attempting requirement 'notebook>=4.4.1'; Attempting requirement 'metakernel>=0.20.0'; Ignore dependency pyspark>=2.4; Ignore dependency dask>=2022.08.1; python_version >= ""3.8""; Ignore dependency distributed>=2022.08.1; python_version >= ""3.8""; .; ----------------------------------------------------------------------; Ran 1 test in 0.149s. OK; ```. And here is the output with ctest:; ```; AILED (errors=1); Attempting requirement 'numpy>=1.4.1'; Attempting requirement 'scikit-learn'; Attempting requirement 'xgboost'; Attempting requirement 'tensorflow'; Attempting requirement 'torch'; Attempting requirement 'numba>=0.47.0; python_version < ""3.11""'; Attempting requirement 'numba>=0.57.0; python_version >= ""3.11"" and python_version < ""3.12""'; Attempting requirement 'cffi>=1.9.1'; Attempting requirement 'notebook>=4.4.1'; Attempting requirement 'metakernel>=0.20.0'; Ignore dependency pyspark>=2.4; Ignore dependency dask>=2022.08.1; python_version >= ""3.8""; Ignore dependency distributed>=2022.08.1; python_version >= ""3.8"". Full path to requirements.txt: /home/rembserj/code/root/requirements.txt; Details about not matched dependencies:; - The 'tensorflow' distribution was not found and is required by the application; - The 'torch' distribution was not found and is required by the application; - The 'metakernel>=0.20.0' distribution was not found and is required by the application; CMake Error at /home/rembserj/code/root/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ```. Needs backport up to 6.28.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15272:2027,depend,dependency,2027,https://root.cern,https://github.com/root-project/root/pull/15272,5,"['depend', 'message']","['dependencies', 'dependency', 'message']"
Integrability,I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBrowser.h TBrowserImp.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TCanvasImp.h TColorGradient.h TColor.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TDatime.h TDirectory.h TEnv.h TError.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TGuiFactory.h TInetAddress.h TInspectorImp.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjectSpy.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQObject.h TRedirectOutputGuard.h TRefCnt.h TRef.h TRegexp.h TRemoteObject.h TROOT.h TRootIOCtor.h TStopwatch.h TStorage.h TString.h TStringLong.h TStyle.h TSysEvtHandler.h TSystemDirectory.h TSystemFile.h TSystem.h TTask.h TThreadSlots.h TTime.h TTimer.h TTimeStamp.h TUri.h T,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3586:5021,Message,MessageTypes,5021,https://root.cern,https://github.com/root-project/root/pull/3586,1,['Message'],['MessageTypes']
Integrability,"IIUC a NullStmt would mean `if (true) {1;;}`. I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6644#issuecomment-713611104:515,interface,interfaces,515,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713611104,1,['interface'],['interfaces']
Integrability,"IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so?. Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2187#issuecomment-396919765:304,depend,dependency,304,https://root.cern,https://github.com/root-project/root/pull/2187#issuecomment-396919765,1,['depend'],['dependency']
Integrability,"ILD/root-6.24.00/io/io/src/TKey.cxx:217; #13 0x00007fff84a8ff84 in TFile::Init (this=0x1536420a0, create=<optimized out>) at /builddir/build/BUILD/root-6.24.00/io/io/src/TFile.cxx:613; #14 0x00007fff84a92070 in TFile::TFile (this=0x1536420a0, fname1=<optimized out>, option=<optimized out>, ftitle=<optimized out>, compress=<optimized out>) at /builddir/build/BUILD/root-6.24.00/io/io/src/TFile.cxx:489; #15 0x00007fff745b06a8 in ?? (); #16 0x00007fff745b0050 in ?? (); #17 0x00007fff7fb4c810 in cling::IncrementalExecutor::executeWrapper (this=0x153618cf0, function=..., returnValue=0x7ffff78b83b0) at /builddir/build/BUILD/root-6.24.00/interpreter/cling/lib/Interpreter/IncrementalExecutor.cpp:376; #18 0x00007fff7fa85a50 in cling::Interpreter::RunFunction (this=0x1536176e0, FD=0x15490a240, res=0x7ffff78b83b0) at /usr/include/c++/10/bits/basic_string.h:907; #19 0x00007fff7fa8f2b4 in cling::Interpreter::EvaluateInternal (this=0x1536176e0, input=..., CO=..., V=0x7ffff78b83b0, wrapPoint=<optimized out>) at /builddir/build/BUILD/root-6.24.00/interpreter/cling/lib/Interpreter/Interpreter.cpp:1391; #20 0x00007fff7fa8fd74 in cling::Interpreter::echo (this=0x1536176e0, input=""hsimple() /* '.x' tries to invoke a function with the same name as the macro */"", V=0x7ffff78b83b0) at /builddir/build/BUILD/root-6.24.00/interpreter/cling/lib/Interpreter/Interpreter.cpp:1043; #21 0x00007fff7fbe224c in cling::MetaSema::actOnxCommand (this=0x153fa8a00, file=..., args=..., result=0x7ffff78b83b0) at /builddir/build/BUILD/root-6.24.00/interpreter/cling/lib/MetaProcessor/MetaSema.cpp:145; #22 0x00007fff7fbf2c10 in cling::MetaParser::isXCommand (this=0x153f66eb0, actionResult=; 0x7ffff78b81b0: cling::MetaSema::AR_Success, resultValue=0x7ffff78b83b0) at /builddir/build/BUILD/root-6.24.00/interpreter/cling/lib/MetaProcessor/MetaParser.cpp:319; #23 0x00007fff7fbf50b0 in cling::MetaParser::isCommand (this=0x153f66eb0, actionResult=; 0x7ffff78b81b0: cling::MetaSema::AR_Success, resultValue=0x7ffff78b83b0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8072#issuecomment-844784432:8351,wrap,wrapPoint,8351,https://root.cern,https://github.com/root-project/root/issues/8072#issuecomment-844784432,1,['wrap'],['wrapPoint']
Integrability,"IMHO we should fix the invocation of printValue in RDF to use the official cling interface, instead of making cling slower to start up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2591#issuecomment-419002708:81,interface,interface,81,https://root.cern,https://github.com/root-project/root/pull/2591#issuecomment-419002708,1,['interface'],['interface']
Integrability,"IMO it's okay to remove `pyroot_experimental` without deprecation for 6.22: it was experimental until 6.22. It would certainly help users to check whether `pyroot_experimental` is set, and if so, issue an error message. A simple `if(pyroot_experimental) message(FATAL_ERROR ""pyroot_experimental is now called pyroot! Please reconfigure with -Dpyroot=On"")` will do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5772#issuecomment-638212832:211,message,message,211,https://root.cern,https://github.com/root-project/root/pull/5772#issuecomment-638212832,2,['message'],['message']
Integrability,"IMO, the unittest should depend as little as possible on environment. They should be written in such a manner that they don't need to tweak environment variables and so on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/451#issuecomment-292160463:25,depend,depend,25,https://root.cern,https://github.com/root-project/root/pull/451#issuecomment-292160463,1,['depend'],['depend']
Integrability,"INS1_13RJittedActionEEEPSt8weak_ptrIT_ERKSt10shared_ptrIS5_E' unresolved while linking [cling interface function]!; You are probably missing the definition of std::weak_ptr<ROOT::Internal::RDF::RJittedAction>* ROOT::Internal::RDF::MakeWeakOnHeap<ROOT::Internal::RDF::RJittedAction>(std::shared_ptr<ROOT::Internal::RDF::RJittedAction> const&); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT8Internal3RDF16MakeSharedOnHeapI4TH1DEEPSt10shared_ptrIT_ERKS6_' unresolved while linking [cling interface function]!; You are probably missing the definition of std::shared_ptr<TH1D>* ROOT::Internal::RDF::MakeSharedOnHeap<TH1D>(std::shared_ptr<TH1D> const&); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT6Detail3RDF13MakeResultPtrI4TH1DEENS_3RDF10RResultPtrIT_EERKSt10shared_ptrIS6_ERNS1_12RLoopManagerES8_INS_8Internal3RDF11RActionBaseEE' unresolved while linking [cling interface function]!; You are probably missing the definition of ROOT::RDF::RResultPtr<TH1D> ROOT::Detail::RDF::MakeResultPtr<TH1D>(std::shared_ptr<TH1D> const&, ROOT::Detail::RDF::RLoopManager&, std::shared_ptr<ROOT::Internal::RDF::RActionBase>); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZSteqI4TH1DEbRKSt10shared_ptrIT_EDn' unresolved while linking [cling interface function]!; You are probably missing the definition of bool std::operator==<TH1D>(std::shared_ptr<TH1D> const&, decltype(nullptr)); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT8Internal3RDF16MakeSharedOnHeapINS_6Detail3RDF9RNodeBaseEEEPSt10shared_ptrIT_ERKS8_' unresolved while linking [cling interface function]!; You are probably missing the definition of std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RD",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6439#issuecomment-1573184913:5132,interface,interface,5132,https://root.cern,https://github.com/root-project/root/issues/6439#issuecomment-1573184913,1,['interface'],['interface']
Integrability,INSTALL_DOCDIR=/nix/store/4csvzgc3216rdp2lndklpcqr67w5mcc5-root-6.28.00/share/doc/ROOT -DCMAKE_INSTALL_INFODIR=/nix/store/4csvzgc3216rdp2lndklpcqr67w5mcc5-root-6.28.00/share/info -DCMAKE_INSTALL_MANDIR=/nix/store/4csvzgc3216rdp2lndklpcqr67w5mcc5-root-6.28.00/share/man -DCMAKE_INSTALL_OLDINCLUDEDIR=/nix/store/4csvzgc3216rdp2lndklpcqr67w5mcc5-root-6.28.00/include -DCMAKE_INSTALL_INCLUDEDIR=/nix/store/4csvzgc3216rdp2lndklpcqr67w5mcc5-root-6.28.00/include -DCMAKE_INSTALL_SBINDIR=/nix/store/4csvzgc3216rdp2lndklpcqr67w5mcc5-root-6.28.00/sbin -DCMAKE_INSTALL_BINDIR=/nix/store/4csvzgc3216rdp2lndklpcqr67w5mcc5-root-6.28.00/bin -DCMAKE_INSTALL_NAME_DIR=/nix/store/4csvzgc3216rdp2lndklpcqr67w5mcc5-root-6.28.00/lib -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_OSX_SYSROOT= -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_STRIP=/nix/store/1y8i61anhs9hh1g5x3zw2fvdbivwixzg-gcc-wrapper-11.3.0/bin/strip -DCMAKE_RANLIB=/nix/store/1y8i61anhs9hh1g5x3zw2fvdbivwixzg-gcc-wrapper-11.3.0/bin/ranlib -DCMAKE_AR=/nix/store/1y8i61anhs9hh1g5x3zw2fvdbivwixzg-gcc-wrapper-11.3.0/bin/ar -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_INSTALL_PREFIX=/nix/store/4csvzgc3216rdp2lndklpcqr67w5mcc5-root-6.28.00 -Drpath=ON -Dbuiltin_llvm=OFF -Dbuiltin_freetype=OFF -Dbuiltin_gtest=OFF -Dbuiltin_nlohmannjson=OFF -Dbuiltin_openui5=OFF -Dalien=OFF -Dbonjour=OFF -Dcastor=OFF -Dchirp=OFF -Dclad=OFF -Ddavix=ON -Ddcache=OFF -Dfail-on-missing=ON -Dfftw3=OFF -Dfitsio=OFF -Dfortran=OFF -Dgnuinstall=ON -Dimt=ON -Dgfal=OFF -Dgviz=OFF -Dhdfs=OFF -Dhttp=ON -Dkrb5=OFF -Dldap=OFF -Dmonalisa=OFF -Dmysql=OFF -Dodbc=OFF -Dopengl=ON -Doracle=OFF -Dpgsql=OFF -Dpythia6=OFF -Dpythia8=OFF -Drfio=OFF -Droot7=OFF -Dsqlite=OFF -Dssl=ON -Dtmva=ON -Dvdt=OFF -Dwebgui=OFF -Dxml=ON -Dxrootd=ON -DC_INCLUDE_DIRS=/nix/store/nasgvbblxi25r6y1s82il4m0m4ghib68-glibc-2.35-224-dev/include ; -- The C compiler identification is GNU 11.3.0; -- The CXX compiler identification is GNU 11.3.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - don,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12153#issuecomment-1429284232:3637,wrap,wrapper-,3637,https://root.cern,https://github.com/root-project/root/pull/12153#issuecomment-1429284232,1,['wrap'],['wrapper-']
Integrability,"Ideally I'd like to follow the GCC diag format to some extent:; ```; <source>:1:1: error: DIAG; ```; and that suggests we should have the source line first. OTOH - the compiler is talking to the user providing the source, i.e. the user's input is that source, and that's what the compiler is referring to. For `RLogger` the situation is different, and the source line is merely the context provided to the developer. So yes, I now agree 100% and never thought of this major difference. Thanks a lot for pointing that out! I suggest:. ```; Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0.; ```; Is that any better? I'd prefer to put the message last, because the message might be multi-line, and I don't like either of these options:. 1) file in new line:; ```; Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0.; [tree/dataframe/src/RLoopManager.cxx:658]; Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): And some more info.; [tree/dataframe/src/RLoopManager.cxx:660]; ```; It's hard to tell where that file belong to - is that *after* the `Info in...` line? Or before?. 2) file attached to last line:; ```; Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run(): Starting event loop number 0.; Some value: 17; Other value: 42 [tree/dataframe/src/RLoopManager.cxx:658]; ```; That gets rid of the ordering ambiguity, but makes it kinda weird, because it's messing with the output - is the other value `""42 [tree/dataframe/src/RLoopManager.cxx:658]""` or `42`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7008#issuecomment-756846075:722,message,message,722,https://root.cern,https://github.com/root-project/root/issues/7008#issuecomment-756846075,2,['message'],['message']
Integrability,"If I understood Axel correctly, RooFit is not allowed to depend on mathmore. So if there's a dependency, it's a blocker for the next release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5439#issuecomment-618463351:57,depend,depend,57,https://root.cern,https://github.com/root-project/root/pull/5439#issuecomment-618463351,2,['depend'],"['depend', 'dependency']"
Integrability,"If I'm not mistaken,; ```; v[{0, 0, 1, 1}]; ```; and; ```; RVec<int> s1 = {0, 0, 1, 1};; v[s1];; ```; do two different things (first is fancy indexing, second is selection). I find this very surprising. Also; ```; RVec<unsigned int> idx = {2,1,0,0};; v[idx];; ```; does selection instead of fancy indexing (i.e. `2` is converted to `true`). This is also very surprising. Have I misuderstood?. EDIT:; > Am I right that there's no other option to solve this in C++?. Depends what you mean by ""solve"" :smile: there are various options each with its tradeoffs",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2621#issuecomment-421958106:465,Depend,Depends,465,https://root.cern,https://github.com/root-project/root/pull/2621#issuecomment-421958106,1,['Depend'],['Depends']
Integrability,"If a dependency is added multiple times, but proven to be satisfied only once, RooCmdArg rejects the command.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2950:5,depend,dependency,5,https://root.cern,https://github.com/root-project/root/pull/2950,1,['depend'],['dependency']
Integrability,"If components are not specified, we should assume nlohmann_json is not required. Propagating the dependency on nlohmann_json just for the sake of one ROOT feature (ROOTEve) that might be used is unreasonable. We can expect from the users that link against ROOTEve to list this component explicitly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16703:97,depend,dependency,97,https://root.cern,https://github.com/root-project/root/pull/16703,1,['depend'],['dependency']
Integrability,"If one of the pdfs in a RooProdPdf is extended, it should not be; considered to be extracted as a constraint term. Also, fix; `RooProdPdf::getConnectedParameters()` which should not consider the; extended pdf as disconnected, as the expected events of this RooProdPdf; depend on it. Closes this old Jira ticket:; https://sft.its.cern.ch/jira/browse/ROOT-7604. FYI, @will-cern, sorry that it took almost 10 years :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13025:269,depend,depend,269,https://root.cern,https://github.com/root-project/root/pull/13025,1,['depend'],['depend']
Integrability,"If possible, this should be replaced by the automatic wrapping of Python callables provided by new cppyy (work started by @vepadulano).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6055:54,wrap,wrapping,54,https://root.cern,https://github.com/root-project/root/pull/6055,1,['wrap'],['wrapping']
Integrability,"If the G__X filenames don't match with a module called X, then; CMake can't find the right dependencies and we get race conditions.; This patch fixes all a few more typos that caused those problems. Found by our debug code in RootNewMacros (which is now nearly silent).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/769:91,depend,dependencies,91,https://root.cern,https://github.com/root-project/root/pull/769,1,['depend'],['dependencies']
Integrability,"If the method `__str__` is already defined on the C++ side, don't inject; the cling based pretty printing. Related to ROOT-10967. @etejedor You see any performance implications with the check added below? Do we trigger lookups with the `dir(...)`? Just to be sure :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6119:66,inject,inject,66,https://root.cern,https://github.com/root-project/root/pull/6119,1,['inject'],['inject']
Integrability,If this is a case - we need to add same dependency in 6.20 branch,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5203#issuecomment-603102808:40,depend,dependency,40,https://root.cern,https://github.com/root-project/root/pull/5203#issuecomment-603102808,1,['depend'],['dependency']
Integrability,"If we call TCling::Load on an already loaded library we dlclose and dlopen the library. However, currently we do not have a facility to 'reload'/undo the effect of TCling::LoadPCM. This patch adds a section in the dictionary for de-registration which is reverse to TCling::RegisterModule -- TCling::UnRegisterModule. It tracks down which library is being reloaded and does not trigger a re-read of the rdict pcm. The current stub is can be further expanded to undo the effects caused by TCling::RegisterModule and/or improve the TCling shutdown by running the interpreter-dependent shutdown of the dictionary. The intent of this patch is to fix the failing OSX tests with. Error in <TCling::LoadPCM>: ROOT PCM /.../libTree_rdict.pcm file does not exist; Info in <TCling::LoadPCM>: In-memory ROOT PCM candidate /.../libASImageGui_rdict.pcm; Info in <TCling::LoadPCM>: In-memory ROOT PCM candidate /.../libASImage_rdict.pcm",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5420:572,depend,dependent,572,https://root.cern,https://github.com/root-project/root/pull/5420,1,['depend'],['dependent']
Integrability,"If we don't fix this, then maybe we just add a error that building from a directory that contains `*?+` isn't supported. Otherwise users just get really cryptic error messages.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/923#issuecomment-326573127:167,message,messages,167,https://root.cern,https://github.com/root-project/root/pull/923#issuecomment-326573127,1,['message'],['messages']
Integrability,"If we follow the route to disable all unnecessary binaries coming from builtins, here also the commit to disable them for lzma.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7542:17,rout,route,17,https://root.cern,https://github.com/root-project/root/pull/7542,1,['rout'],['route']
Integrability,"If we have dependencies which we expect to build (like in this case); we should use DEPENDENCIES. LIBRARIES is a terrible misnomer and we probably should; fix that. This patch teaches rootcling to build the pcms in order and; particularly, ROOTWebDisplay.pcm before the WebGui6.pcm",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3000:11,depend,dependencies,11,https://root.cern,https://github.com/root-project/root/pull/3000,2,"['DEPEND', 'depend']","['DEPENDENCIES', 'dependencies']"
Integrability,"If we have; ```; root_generate_dictionary(HitClassesRootInterfaces; ${CMAKE_CURRENT_SOURCE_DIR}/demo-geant-integration/HitRootIO.hh; ${CMAKE_CURRENT_SOURCE_DIR}/demo-geant-integration/SensitiveHit.hh; NOINSTALL; MODULE demo-geant-integration; DEPENDENCIES Celeritas::accel ${Geant4_LIBRARIES} Celeritas::corecel ; LINKDEF ""${CMAKE_CURRENT_SOURCE_DIR}/demo-geant-integration/HitClassesLinkDef.h""; ); ```; `root_generate_dictionary` will call (if they are proper target at that point) `get_property(dep_include_dirs TARGET ${dep} PROPERTY INCLUDE_DIRECTORIES)`. However there is 2 problems.; (a) It ignores [INTERFACE_INCLUDE_DIRECTORIES](https://cmake.org/cmake/help/latest/prop_tgt/INTERFACE_INCLUDE_DIRECTORIES.html) and [INTERFACE_SYSTEM_INCLUDE_DIRECTORIES](https://cmake.org/cmake/help/latest/prop_tgt/INTERFACE_SYSTEM_INCLUDE_DIRECTORIES.html); the former is used by `Geant4` (as it should) to publish its installed directories. (b) It fails the properties contains cmake generator expressions that does not expand yet. For example `$<INSTALL_INTERFACE:include>`; it fails badly because it then passed to rootcling a `-I` followed by 'nothing' hence shallowing the next arguments.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12263:107,integrat,integration,107,https://root.cern,https://github.com/root-project/root/issues/12263,5,"['DEPEND', 'integrat']","['DEPENDENCIES', 'integration']"
Integrability,"If widget URL includes sensitive information,; one just put it into local file and start browser with such local HTML file. ; Internally its will redirect to normal http server. This is most easy way to hide secret information from the system.; Exactly this method used by Jupyter. . Now it possible to enforce unique key (single-time-token) authentication for web widgets.; In such case URL to connect web widgets always has include `?key=` parameter - which generated new every time; new URL string is requested. Attempt to connect with same key twice will fail. To support such functionality, `GetWindowUrl()` add to all web-based widgets to let use such capability also; from `RBrowser` which integrate all existing widgets together. In addition to that jupyter does, ROOT adds secret session key (after `#` symbol), which remains only on client side.; This session key together with connection key are used to create ~~MD5~~ HMAC/SHA256 checksum, which is sends to server instead as connection request. While connection request may be retried many times, new request will get new number and therefore new ~~MD5~~ HMAC checksum. Once connection is accepted - same key cannot be use for new connection, but still will be used for ~~MD5~~ HMAC packets signs. To solve main-in-the-middle problem, each data packet is signed with ~~md5~~ HMAC checksum. Each packet includes sequence counter, which also protected by ~~md5~~ HMAC checksum. Therefore even if anybody gain control over http traffic between; client and server, it only be able to observe traffic but will not be able manipulate it - as long as secret session; key is not gained by other means. Also re-submitting same packets will not be possible - while packet with; already used counter will not be accepted. HTTP sniffing can only catch connection request and try to use it faster than normal client.; But even if connection gained by sniffer - it will not be able use it. To use connection, each packet ; should be signed by ~~md5~~ H",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14136:697,integrat,integrate,697,https://root.cern,https://github.com/root-project/root/pull/14136,1,['integrat'],['integrate']
Integrability,"If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13538:48,depend,depends,48,https://root.cern,https://github.com/root-project/root/pull/13538,2,"['depend', 'interface']","['depends', 'interface']"
Integrability,"If you follow the link in my previous post you can check out flamegraphs for master vs patched TTreeReader, and you can see a reduction of the time spent in `SetEntryBase` (from 4% to 2.5%) and `ProxyRead` changing name to `ProxyReadTemplate`. > We also know of a significant overhead for TTreeReaderArray. True, I will be away next week but afterwards I can profile one such usecase. > the flamegraph does not show a factor 2 between TTreeReader and TTree interfaces. You are right, if we trust these measurements to this point -- it's probably something worth checking",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3216#issuecomment-455185710:457,interface,interfaces,457,https://root.cern,https://github.com/root-project/root/pull/3216#issuecomment-455185710,1,['interface'],['interfaces']
Integrability,"If you like to have a look into this, I would be happy to guide you. But feel free to tell me if you have to do other stuff, then I'll take over. The array interface is added in `ROOT.py:243`, however no need to change something there. Following the code path, you can look for `AddArrayInterface` in `bindings/pyroot/src/Pythonize.cxx`. Still no need to fix something there ;) Finally, you end up in `STLVectorArrayInterface` and `RVecArrayInterface` in as well in `Pythonize.cxx`. There, the C++ object (a `std::vector` in your case) is read out and the `__array_interface__` dict is added to the Python object, which carries all information needed by numpy to adopt the memory (see [here](https://docs.scipy.org/doc/numpy/reference/arrays.interface.html)). In short: You would need to cover the case of `vector.size() == 0` in `STLVectorArrayInterface` properly. Following code tells me, that the size field is already set properly, but it seems that numpy fails with the `""data"": (0, False)` set in the `__array_interface__`. ```python; >>> import ROOT; >>> x = ROOT.std.vector(""float"")(); >>> x.__array_interface__; {'shape': (0L,), 'version': 3, 'data': (0, False), 'typestr': '<f4'}; ```. So what is the correct thing to do there that `numpy.asarray` returns an empty numpy array?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3528#issuecomment-472348941:156,interface,interface,156,https://root.cern,https://github.com/root-project/root/pull/3528#issuecomment-472348941,2,['interface'],['interface']
Integrability,"If you plot a shifted RooHistPdf, it doesn't look good. Probably because it is sampled at the wrong points, the numeric bin integrator doesn't work in this case, or both. This is a problem that comes up relatively often in the ROOT forum, the last time here:; https://root-forum.cern.ch/t/roofit-in-root-6-28-04/55267. By looking for the keyword ""shift"" in the RooFit forum, one can see that this problem also came up in the past already:; https://root-forum.cern.ch/search?expanded=true&q=shift%20%23roofit-and-roostats; For example here:; https://root-forum.cern.ch/t/how-to-implement-a-horizontal-shift-for-roohistpdf/16787/6. I think I can approximately reproduce the workflow of the user that posted on the forum with this code. ```C++; void repro(); {; using namespace RooFit;. RooRealVar x(""x"", """", 1000, 1500);; x.setBins(50);. RooRealVar shift(""shift"", """", 10.0, -100, 100);. RooFormulaVar xShifted(""x_shifted"", ""x - shift"", {x, shift});; // Doesn't work better either...; // RooLinearVar xShifted(""x_shifted"", """", x, RooConst(1.0), shift);. std::vector<std::unique_ptr<RooDataHist>> templateHists;; RooArgSet pdfs;; RooArgSet yields;. // Fill the templates; for (std::size_t i = 0; i < 2; ++i) {; auto suffix = std::to_string(i);. TF1 pdf(""pdf"", ""gaus"", x.getMin(), x.getMax());; pdf.SetParameters(1, 1200 + 100 * i, 50);; pdf.Print();; TH1D h(""h"", """", x.numBins(), x.getMin(), x.getMax());; h.FillRandom(""pdf"", 10000);. templateHists.emplace_back(std::make_unique<RooDataHist>((""template_data_hist_"" + suffix).c_str(), """", x, &h));; pdfs.addOwned(; *new RooHistPdf((""template_hist_pdf_"" + suffix).c_str(), """", xShifted, x, *templateHists.back(), 0));; yields.addOwned(*new RooRealVar((""n_"" + suffix).c_str(), """", 1000, 100, 100000));; }. // Construct final model; RooAddPdf model(""model"", """", pdfs, yields);. std::unique_ptr<RooDataHist> data{model.generateBinned(x)};. // If the range is larger than the variable range, the problem is even amplified; model.fitTo(*data, Range(0.0, 5000));.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13030:124,integrat,integrator,124,https://root.cern,https://github.com/root-project/root/issues/13030,1,['integrat'],['integrator']
Integrability,"If you print a default numeric integrator config object, it will tell; you for the RooImproperIntegrator1D:. ```; *** RooImproperIntegrator1D ***; Capabilities: [1-D] [OpenEnded]; Configuration:; (Depends on 'RooIntegrator1D'); ```. However, in almost all of the code branches, it does not use the; `RooIntegrator1D` of the given numeric integrator configuration, but; falls back to the default by not forwarding the configuration to the; created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create; a new configuration object with the required summation rule for the; `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11074:31,integrat,integrator,31,https://root.cern,https://github.com/root-project/root/pull/11074,4,"['Depend', 'integrat']","['Depends', 'integrator']"
Integrability,"If your framework is in Python and not in C++, you can also declare the class to the interpreter when you need it:; ```python; ROOT.gInterpreter.Declare("""""". class RooInt : public TNamed {; public:. RooInt() = default;; RooInt(Int_t value) : _value(value) {}; RooInt(const RooInt& other) : TNamed(other), _value(other._value) {}. // double cast operator; inline operator Int_t() const { return _value ; }; RooInt& operator=(Int_t value) { _value = value ; return *this ; }. protected:. Int_t _value = 0; ///< Payload; ClassDefOverride(RooInt,1) // Container class for Int_t; };. """"""); ```. You can change the interface as you like, as long as you don't change the data members.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16380#issuecomment-2335111479:609,interface,interface,609,https://root.cern,https://github.com/root-project/root/issues/16380#issuecomment-2335111479,1,['interface'],['interface']
Integrability,"Implement a basic buffered page sink, to try and coalesce column page writes within a single cluster. The buffered sink `RPageSinkBuf` wraps another page sink, e.g. `RPageSinkFile` and buffers calls to the inner sink's `CommitPage` method.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7783:135,wrap,wraps,135,https://root.cern,https://github.com/root-project/root/pull/7783,1,['wrap'],['wraps']
Integrability,"Implement proper handling of canvas window size and canvas drawing area size. By default web browser with given window size/position will be started. Depending from context menu,; status line, other layout components drawing area will be reduced to some value and always adjust to that area. With the call `TCanvas::SetCanvasSize(width,height)` one can fix drawing area to exact value, which does not change with web browser resize. One can toggle state either with context menu or by calling ``c1->SetCanvasSize(0,0)`. All browser window position/size changes are reflected in the TCanvas members. Provide JSROOT with new resize logic, also includes support of TLatex in 3D plots",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13268:150,Depend,Depending,150,https://root.cern,https://github.com/root-project/root/pull/13268,1,['Depend'],['Depending']
Integrability,"Implementation of the C++ side of RTensor. This PR replaces #2593. In addition, a second commit adds the feature `TMVA::Experimental::AsTensor`, which reads out an `RDataFrame` node as an `RTensor`. See the tutorials for examples or the short snipplets below. **RTensor basics:**; ```cpp; using namespace TMVA::Experimental;. // Create an RTensor from existing data; float data[] = {1, 2, 3, 4, 5, 6};; RTensor<float> x(data, {2, 3});; std::cout << x << std::endl;; // { { 1, 2, 3 }, { 4, 5, 6 } }. // Reshape the tensor without touching the data; x.Reshape({1, 6});; std::cout << x << std::endl;; // { { 1, 2, 3, 4, 5, 6 } }. // Remove dimensions of 1; x.Squeeze();; std::cout << x << std::endl;; // { 1, 2, 3, 4, 5, 6 }. // Add dimensions; x.ExpandDims(0);; std::cout << x << std::endl;; // { { 1, 2, 3, 4, 5, 6 } }. // Transpose the tensor; x.Transpose();; std::cout << x << std::endl;; // { {1}, {2}, {3}, {4}, {5}, {6} }. // Extract slices as new RTensor objects; x.Reshape({2, 3});; std::cout << x << std::endl;; // { { 1, 3, 5 }, { 2, 4, 6 } }. auto y = x.Slice({-1, 0});; std::cout << y << std::endl;; // { 1, 2 }. auto z = x.Slice({0, -1});; std::cout << z << std::endl;; // { 1, 3, 5 }. // STL iterator interface and range-based loops; for(auto &v: x) v++;; std::cout << x << std::endl;; // { { 2, 4, 6 }, { 3, 5, 7 } }; ```. **TMVA::Experimental::AsTensor usage:**. ```cpp; ROOT::RDataFrame df(5);; auto df2 = df.Define(""x"", ""1.f*rdfentry_"").Define(""y"", ""-1.f*rdfentry_"");; auto x = TMVA::Experimental::AsTensor<float>(df2);; std::cout << x << std::endl;; // { { 0, -0 }, { 1, -1 }, { 2, -2 }, { 3, -3 }, { 4, -4 } }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3221:1213,interface,interface,1213,https://root.cern,https://github.com/root-project/root/pull/3221,1,['interface'],['interface']
Integrability,"Implemented tessellated shape in TGeo, as a wrapper shape without navigation functionality, allowing future conversions to/from Geant4 and VecGeom done by frameworks such as DD4HEP. Currently missing navigation functionality, but having ROOT/GDML persistence support and visualization.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4817:44,wrap,wrapper,44,https://root.cern,https://github.com/root-project/root/pull/4817,1,['wrap'],['wrapper']
Integrability,"Implements `RooLinkedList::begin()`, `end()`, `rbegin()`, `rend()` and; extends the `RooLinkedListIterImpl` interface to support range-based; loops for the `RooLinkedList`. Range-based loops on `RooLinkedList` are also used in some places in; RooFit to test this new feature. In particular the function; `RooCmdConfig::process` is used in basically every RooFit script. This commit also adds `RooLinkedList::size()` and `empty()` for better compatibility with STL containers and automatic pythonizations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8842:108,interface,interface,108,https://root.cern,https://github.com/root-project/root/pull/8842,1,['interface'],['interface']
Integrability,"Improve `TWebCanvas` communication, more use of control messages",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13285:56,message,messages,56,https://root.cern,https://github.com/root-project/root/pull/13285,1,['message'],['messages']
Integrability,Improve diagnostics when interface called with wrong arguments.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1724:25,interface,interface,25,https://root.cern,https://github.com/root-project/root/pull/1724,1,['interface'],['interface']
Integrability,"Improve error message when the requested type doesn't match the on-disk type:; ```cpp; // underlying column is a double; auto view = ntuple->GetView<float>(""myDouble"");; ```. Before:; ```; Unexpected column type: Real64 of column #0 for field myDouble; ```; After:; ```; On-disk type `Real64` of column #0 for field `myDouble` is not convertible to requested type `Real32`; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8227:14,message,message,14,https://root.cern,https://github.com/root-project/root/pull/8227,1,['message'],['message']
Integrability,"Improve logging:; * Add button in menu bar to show the highest severity message; * Show client log message in Dialog instead of popover. Add simple window management: in view menu add items to switch sides, make single, and hide/show views",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9515:72,message,message,72,https://root.cern,https://github.com/root-project/root/pull/9515,2,['message'],['message']
Integrability,"Improve the error message when you try to build NumPy arrays with types; that the interpreter doesn't know about. Running the reproducer from the JIRA ticket, one now gets this output:; ```txt; TClass::Init:0: RuntimeWarning: no dictionary for class Foo is available; { ""a"", ""b"", ""foo"", ""foo.a"", ""foo.b"" }; Traceback (most recent call last):; File ""/home/rembserj/root-support/jira/ROOT-10930/reproducer.py"", line 13, in <module>; print(df.AsNumpy()); ^^^^^^^^^^^^; File ""/home/rembserj/spaces/master/install/lib/root/ROOT/_pythonization/_rdataframe.py"", line 243, in RDataFrameAsNumpy; raise RuntimeError(; RuntimeError: The column named ""foo"" is of type ""Foo"", which is not known to the ROOT interpreter. Please load the corresponding header files or dictionaries.; ```. This was the output before:; ```txt; TClass::Init:0: RuntimeWarning: no dictionary for class Foo is available; { ""a"", ""b"", ""foo"", ""foo.a"", ""foo.b"" }; Traceback (most recent call last):; File ""/home/rembserj/root-support/jira/ROOT-10930/reproducer.py"", line 5, in <module>; print(df.AsNumpy()); ^^^^^^^^^^^^; File ""/home/rembserj/spaces/master/install/lib/root/ROOT/_pythonization/_rdataframe.py"", line 236, in RDataFrameAsNumpy; result_ptrs[column] = df.Take[column_type](column); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^; TypeError: Could not find ""Take<Foo>"" (set cppyy.set_debug() for C++ errors):; Failed to instantiate ""Take<Foo>(std::string)""; ```. Closes the following Jira issue:; https://its.cern.ch/jira/browse/ROOT-10930",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16281:18,message,message,18,https://root.cern,https://github.com/root-project/root/pull/16281,1,['message'],['message']
Integrability,Improved error message on wrong exit code in test driver,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/904:15,message,message,15,https://root.cern,https://github.com/root-project/root/pull/904,1,['message'],['message']
Integrability,Improvements and new interfaces in KahanSum,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/485:21,interface,interfaces,21,https://root.cern,https://github.com/root-project/root/pull/485,1,['interface'],['interfaces']
Integrability,"Improves the interplay of `RPage`, `RPageAllocator`, `RPagePool`, and `RPageSource/Sink`. - The `RPageAllocator` becomes an abstract interface for creating pages and allocating the page buffer.; - There is currently one concrete implementation, the `RPageAllocatorHeap`; - Pages are movable only and release the page buffer on destruction using the page allocator that created them; - The page pool owns pages and hands out `RPageRef` objects, which are proxies for the use counter (reference counter) of the page; - The `RPageRef` class is movable only and decreases the reference counter of the page in the page pool on destruction; - Remove the `RPageStorage::ReleasePage()` method; - `RPageSource::LoadPage` hands out `RPageRef` objects from their page pool",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16164:133,interface,interface,133,https://root.cern,https://github.com/root-project/root/pull/16164,1,['interface'],['interface']
Integrability,"Imt has a header-only dependency on MultiProc, which causes the linker; to discard said dependency on some platforms. By creating an extra symbol; dependency (for instance outlining the constructor using TProcessExecutor); we stabilize the linking.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7070:22,depend,dependency,22,https://root.cern,https://github.com/root-project/root/pull/7070,3,['depend'],['dependency']
Integrability,"In CMSSW; - we use `oneapi::tbb::global_control` to set the process' maximum number of threads usable by TBB; - we create a top-level `oneapi::tbb::task_arena` (with the same number of threads), and all data processing is run within one `task_arena::execute()` call; - every call to ROOT I/O is isolated with `oneapi::tbb::this_task_arena::isolate()` call. By adding (or using) a global task arena to ROOT, does this mean, if multiple `TFile`s are writing concurrently, can their tasks be intermingled? Our guess is that ROOT's global task arena would trump the use of `this_task_arena::isolate()`, and allow such intermingling, but we don't really know. We are concerned that by sharing one task arena for unrelated activities it would cause synchronization of those activities because of task stealing. (assuming the explicit arena would trump the `this_task_arena::isolate()` call)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14807#issuecomment-1965316725:743,synchroniz,synchronization,743,https://root.cern,https://github.com/root-project/root/pull/14807#issuecomment-1965316725,1,['synchroniz'],['synchronization']
Integrability,"In RooAbsPdf, the following check is done to check if the normalization; set has changed:; ```C++; RooFit::getUniqueId(nset) != RooFit::getUniqueId(_normSet); ```. This works, but like the previous pointer comparison it still gives; false results if the `_normSet` was replaced buy another RooArgSet at; the same memory location. The problem can be reproduced with this code:. ```C++; using namespace RooFit;. // Create observables; RooRealVar x(""x"", ""x"", -5, 5);; RooRealVar y(""y"", ""y"", -5, 5);. // Create signal pdf gauss(x)*gauss(y); RooGaussian gx(""gx"", ""gx"", x, RooConst(0), RooConst(1));; RooGaussian gy(""gy"", ""gy"", y, RooConst(0), RooConst(1));; RooProdPdf sig(""sig"", ""sig"", {gx, gy});. // Create composite pdf; RooAddPdf model(""model"", ""model"", RooArgList(sig), RooConst(100.));. // The results of the last two lines depend on the order of execution; // which should not be the case!; std::cout << model.getVal(x) << std::endl;; std::cout << model.getVal({x, y}) << std::endl;; ```. The solution would be to replace the `_normSet` member directly with; its unique ID value, but then it could not be used anymore. Hence we; need both. This commit also adds a new private `RooAbsPdf` member functions to set; the `_normSet` together with the new `_normSetId` member, and one; protected `isActiveNormSet(RooArgSet const*)` function. The latter; function is comparing the input to the current `_normSet`, but shortcuts; to `false` is the ID does not match with the last `_normSet` ID. Like; this, we avoid dereferencing invalid `_normSet` pointers. This change is mainly done to fix several of the ASAN build failures in; RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11176:825,depend,depend,825,https://root.cern,https://github.com/root-project/root/pull/11176,1,['depend'],['depend']
Integrability,"In RooDataSet, there are constructors to create a dataset as a subset of; another RooDataSet or a TTree, passing either a cut string or a; RooFormulaVar as the cut variable. There were two implementations for the cut string and the RooFormulaVar; case, but it's better to implement one in terms of the other to avoid; code duplication and divergence. The RooFormulaVar version has to be implemented in terms of the cut; string version, because the cut string version is more general: it can; also take an empty string, signifying no cut. Removing functions from the public interface of the data store classes is; okay, because as implementation details of the RooFit dataset classes; they are not supposed to be public anyway.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10506:573,interface,interface,573,https://root.cern,https://github.com/root-project/root/pull/10506,1,['interface'],['interface']
Integrability,"In RooFit, there are many functions that return pointers that are owned; by the caller. We can't change this interface anymore, but we can wrap; the return values transparently in a raw pointer wrapper that is called; a `RooFit::Owner`. On the C++ side, this helps to analyze your code and detect potential; memory leaks. On the Python side, we can tell cppyy to take ownership; of the object if the pointer is wrapped in a owning pointer such as the; `RooFit::Owner`. This is more flexible and convenient than the existing; cppyy way of flagging the CPPOverloads on the Python side with the; `__creates__ = True` attribute for at least two reasons:. 1. This flag can't be applied at the granularity of indivirual C++; overloads; 2. It's only on the Python side, so if you want to flag these functions; in C++ as well as in Python you have to do some bookkeeping. A unit test was implemented to check that the `RooFit::Owner` behaves in; Python as expected, and that there is no memory leaking when using; functions that return them. As a first example, the `RooFit::Owner` is used in the highly used; function `RooAbsPdf::generate`, so we also get quite some test coverage; from the tutorials. In the future after this initial effort, the remaining RooFit functions; should be migrated to fix many memory leaks in PyROOT user code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9392:109,interface,interface,109,https://root.cern,https://github.com/root-project/root/pull/9392,4,"['interface', 'wrap']","['interface', 'wrap', 'wrapped', 'wrapper']"
Integrability,"In SPlots, `RooAbsArg::attachDataSet()` is called on the input pdf,; redirecting the parameters of the pdf to the RooRealVars in the dataset.; This is not reversed, leaving the pdf in a corrupt state when the; dataset gets deleted. This can happen in particular if the SPlots object; created an owning clone of the dataset, attaches the pdf, and then goes; out of scope. This commit suggests to not attach the pdf to the dataset, as it is not; necessary. When looping over the dataset and evaluating the pdf later,; the pdf variables get synced with the dataset variables anyway. This was; done via `RooStats::SetParameters`, which is just a wrapper around; `RooAbsCollection::assign()`. I suggest to use `assign()` directly to make; more explicit to the reader what happens. It was verified that SPlot still works correctly, by looking at the output of; the `roostats/rs301_splot.C` tutorial, which is unaffected by this PR. Closes Jira issue [ROOT-8018](https://sft.its.cern.ch/jira/browse/ROOT-8018). A simpler reproducer of the problem based on the notebook in the Jira; issue is this one:. ```Python; import ROOT. bdt = ROOT.RooRealVar(""BDT"", ""some awesome BDT"", 0.0, 1.0); mass = ROOT.RooRealVar(""mass"", ""invariant mass"", 5100.0, 5300, ""MeV/c^{2}""). sigyield = ROOT.RooRealVar(""sigyield"", ""signal yield"", 100, 0, 100000); bkgyield = ROOT.RooRealVar(""bkgyield"", ""background yield"", 900, 0, 100000). bmassPDF = ROOT.RooGaussian(; ""bmass"",; ""B mass shape"",; mass,; ROOT.RooFit.RooConst(5200.0),; ROOT.RooFit.RooConst(20.0),; ); bkgmPDF = ROOT.RooExponential(; ""bkgmass"", ""bkg mass shape"", mass, ROOT.RooFit.RooConst(-1.0 / 200.0); ); combmPDF = ROOT.RooAddPdf(; ""fullmasspdf"",; ""full mass pdf"",; ROOT.RooArgList(bmassPDF, bkgmPDF),; ROOT.RooArgList(sigyield, bkgyield),; ). toydata = combmPDF.generate(ROOT.RooArgSet(bdt, mass), 10000); ROOT.SetOwnership(toydata, True). set1 = ROOT.RooArgList(sigyield, bkgyield); set2 = ROOT.RooArgList(). def make_splot(toydata):; smalldata = toydata.reduce(ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10811:642,wrap,wrapper,642,https://root.cern,https://github.com/root-project/root/pull/10811,1,['wrap'],['wrapper']
Integrability,"In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: ; ```; tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service; tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/Ra",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9792:165,message,message,165,https://root.cern,https://github.com/root-project/root/issues/9792,10,['message'],['message']
Integrability,"In `RooProdPdf::getConstraints()`, the full computation graph was; traversed two or three times for each component pdf, depending on the; code branch. There were calls to `pdf->dependsOnValue()` and; `pdf->getParameters(&observables)`, but both are very expensive for; large computation graphs because they check if any of the observables is; in the server list of any RooAbsArg in the graph. It is much cheaper to call `pdf->getParameters(nullptr)` to get all; value server variables of a pdf, and then use `overlaps` to check if the; pdf depends on observables or constrained parameters. To get then the set of actual parameters, it is suggested to use; `tmp.remove(observables)`, which is is cheap for RooArgSets because of; the hash-assisted find by name. This commit speeds up the `createNLL()` call for the ATLAS Higgs; combination workspace by 30 %. Here one can see the flamegraphs for createNLL in the ATLAS Higgs combination fit [before this commit](https://rembserj.web.cern.ch/rembserj/flamegraphs/perf_before_11015.svg) and [after](https://rembserj.web.cern.ch/rembserj/flamegraphs/perf_after_11015.svg).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11015:120,depend,depending,120,https://root.cern,https://github.com/root-project/root/pull/11015,3,['depend'],"['depending', 'depends', 'dependsOnValue']"
Integrability,"In a conditional fit, it happens that the value normalization integrals can; be different for every event because a pdf is conditional on another; observable. That's why the integral also has to be evaluated with the batch; interface in general, which this PR implements.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7742:224,interface,interface,224,https://root.cern,https://github.com/root-project/root/pull/7742,1,['interface'],['interface']
Integrability,In case of exception in JavaScript painting code show warning sign and let easily see associated log message. Before some printout was done in browser console which is not easily accessible by users.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16424:101,message,message,101,https://root.cern,https://github.com/root-project/root/pull/16424,1,['message'],['message']
Integrability,In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. Occasionally when loading a shared object the dynamic linker will tell us if something is missing (via dlerror) but only on the intialization path. This patch fixes ROOT-10637.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5235:138,depend,dependencies,138,https://root.cern,https://github.com/root-project/root/pull/5235,1,['depend'],['dependencies']
Integrability,"In civetweb socket handler check different operation codes; According to RFC6455, all not-supported codes should be handled as; failure. Means application should get close message for the socket. Prevent getting close message twice. This PR fixes #9207",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9209:172,message,message,172,https://root.cern,https://github.com/root-project/root/pull/9209,2,['message'],['message']
Integrability,"In cmssw we see that depending on the invoking code the trigger function is; resolved sometimes with the symlink-ed path and sometimes without. This can be observed in the cmssw biglib setup where all plugin libraries; are assembled into a single library to yield performance improvement of (10%). This is seen in cms-sw/cmsdist#5172 where libHistPainter_rdict.pcm is not; found in the fPendingRdicts because it was registered with the 'other'; path. cc: @davidlange6, @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4288:21,depend,depending,21,https://root.cern,https://github.com/root-project/root/pull/4288,1,['depend'],['depending']
Integrability,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13815#issuecomment-1766925765:239,message,messages,239,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1766925765,1,['message'],['messages']
Integrability,"In gcc 11, core/meta/src/TEnumConstant.cxx cannot be built.; Error message:; ```; /tmp/root-6.22.06/core/foundation/inc/ROOT/libcpp_string_view.h:275:63: error: ‘numeric_limits’ is not a member of ‘std’; 275 | size_type max_size() const _NOEXCEPT { return (_VSTD::numeric_limits<size_type>::max)(); }; | ^~~~~~~~~~~~~~; ```; This is because <limits> is not explicitly included by core/foundation/inc/ROOT/libcpp_string_view.h. It can be built if the header is included.; https://github.com/root-project/root/blob/71e0b990b889ff292be5bfa79d1f85e15440eaa5/core/foundation/inc/ROOT/RWrap_libcpp_string_view.h#L40-L45",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8513:67,message,message,67,https://root.cern,https://github.com/root-project/root/issues/8513,1,['message'],['message']
Integrability,"In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,; and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not; take a `bool optConst` argument anymore. Ths is because the value of; the argument that was passed by the RooMinimizer instance was always a; member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because; `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration; such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11695:220,Synchroniz,Synchronize,220,https://root.cern,https://github.com/root-project/root/pull/11695,1,['Synchroniz'],['Synchronize']
Integrability,"In https://github.com/root-project/root/pull/7616, it was not taken care that the `RooNLLVar` constructor interface changes were backwards compatible, since the affected constructors were considered as internal. However, this caused problems for users nonetheless, hence the interface was changed to be backwards compatible. Closing https://github.com/root-project/root/issues/8976.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8986:106,interface,interface,106,https://root.cern,https://github.com/root-project/root/pull/8986,2,['interface'],['interface']
Integrability,"In my other computer, I get now a difference of 4 pixels using latest ROOT master. So it seems to me that this is not a small rounding error. - Interactive mode: 598x576 pixels; - Batch mode: 596x572 pixels. Could it be just an outdated calibration from many years ago? See this https://github.com/root-project/root/commit/c3de92f4d1ad4372febc81955a877345d4de3a9c. Check out this code below. It seems there is always the same offset on my current computer. Whenever I run in batch mode, I get 4 pixels difference wrt batch mode. My hypothesis is that this could solved if those numbers are adapted, potentially depending on Windows / Mac with an if. It could be even added as a roottest. ```cpp; #include <TCanvas.h>; #include <TROOT.h>; #include <iostream>; void test_pixels() {; for(Int_t w=500;w<=900;w++) {; for(Int_t h=500;h<=600;h++) {; TCanvas *c = new TCanvas(""c1"",""c1"",w,h);; Int_t diffw = w-c->GetWw();; Int_t diffh = h-c->GetWh();; if(!gROOT->IsBatch()) {; if (diffw !=2 || diffh !=24); std::cout << diffw << "" "" << diffh << "" "" << w << "" "" << h << std::endl;; }; else {; if (diffw !=4 || diffh !=28); std::cout << diffw << "" "" << diffh << "" "" << w << "" "" << h << std::endl;; }; delete c;; }; }; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11004#issuecomment-1471869803:611,depend,depending,611,https://root.cern,https://github.com/root-project/root/issues/11004#issuecomment-1471869803,1,['depend'],['depending']
Integrability,"In older cppyy, template instanciations are cached by fully-qualified; name directly in the namespace. Therefore, no extra code is required to; cover template instances in the pythonization code. With the new cppyy, this is not the case anymore, and instances are; instead cached in the `_instatiations` attribute of the template class [1]. This commit considers this, in a way that is backwards compatible also; with the older cppyy version that ROOT currently uses. A second commit in this PR removes some not so Pythonic ""C++-style"" code from PyROOT. [1] https://github.com/wlav/cppyy/commit/f2e1ea783afd2e4f195b6cbaf09d72b9fa3cd865. Spinoff of the bigger synchronization PR for easier review:; https://github.com/root-project/root/pull/14507",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14940:659,synchroniz,synchronization,659,https://root.cern,https://github.com/root-project/root/pull/14940,1,['synchroniz'],['synchronization']
Integrability,"In order to be able to build unit test support also outside of a ROOT; build (e.g. for standalone roottest or for user tests), the unit test; support library needs to be visible outside of ROOT. Therefore, it is; moved to `core/testsupport`, and now installed and exported under the; name `ROOT::TestSupport` when testing is enabled. A warning message was added to `ROOT_ADD_GTEST` in case this library isn't; found when a new gtest is defined. Fix #9507. ## For reviewers; - [x] I'm not happy with the naming. The folder is `core/test_support`, the library `ROOT::ROOTTestSupport`, but the namespace and the header are historically named `ROOTUnitTestSupport`. Which one?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9528:344,message,message,344,https://root.cern,https://github.com/root-project/root/pull/9528,1,['message'],['message']
Integrability,In order to fix ROOT-10034 a new Executor class has been created.; The class wraps the TExecutor types of ROOT and create in MT running a TThreadExecutor or a TSequentialExecutor. ; This allows to use exactly same code in all TMVA depending on sequential or MT running. ; In addition now the TMVA::Config can control the MT running. The behaviour is the following: ; - ROOT::IsImplicitMTEnabled() = false TMVA uses TSequentialExecutor (no MT); - ROOT::IsImplicitMTEnabled() = true TMVA uses TThreadExecutor with the number of threads provided in ROOT::EnableImplicitMT; - TMVA::gConfig.EnableMT(nthreads) : run MT using TThreadExecutor with nthreads (if the ROOT thread pool has not been created before) otherwise use existing pool; - TMVA::gConfig.DisableMT() - delete TThreadExecutor if it has been created (i.e. release the thread pool) and use TSequentialExecutor,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3585:77,wrap,wraps,77,https://root.cern,https://github.com/root-project/root/pull/3585,2,"['depend', 'wrap']","['depending', 'wraps']"
Integrability,"In order to:; - make the build system less entangled and more maintainable ; - give a solution to the bug mentioned in https://github.com/root-project/root/pull/4939; we move the search for Python installation in a new script called SearchRootCoreDeps, where also the search for main Root dependencies will happen at some point. The misleading 'python' option, which was basically enabling pyroot, is deprecated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4945:289,depend,dependencies,289,https://root.cern,https://github.com/root-project/root/pull/4945,1,['depend'],['dependencies']
Integrability,"In our analysis package we obtain a segfault without traceback when calling InheritsFrom() on an object derived from a TObject. The awkward issue is dependent on the ordering of the objects and dictionaries in the shared library. ; Note: important is the fact, that another class has a static member of that TClass(). The compiled object of the other class can then not be linked before the Dictionary-object of the first class. Maybe it's just my ignorance of a deeper understanding of the whole concept, or maybe it is a bug somewhere. A rather minimum example is attached would look like:; int main() { ; TMyDerivedClass::Class()->InheritsFrom(TObject::Class());; }. Please run `make all`, then `test1` (works) and `test2` does not work, while the difference is only in the order of the objects in the shared library.; I have included into that example another class that works well (as it is not a static member elsewhere.); I have included a Dump() call, and one recognizes the differences for identical objects in the two shared libraries (e.g. fTitle="""", *fData=0, ...). [root_issue.tar.gz](https://github.com/root-project/root/files/5405256/root_issue.tar.gz). We tested with root 6.20 and gcc9.2 (from lcg) and 6.22 and gcc4.8, both on EL7.; The code previously worked well with ROOT 5.34.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6670:149,depend,dependent,149,https://root.cern,https://github.com/root-project/root/issues/6670,1,['depend'],['dependent']
Integrability,"In particular, all creations and deletions of `shared_ptr`s have been removed from the event loop. This is a long due optimization that required several changes in the internal behaviour of TDataFrame{Impl,Action,Branch,Filter}. Unfortunately all changes are entangled, so the third commit is quite fat. The main change to the internal logic is that `TDataFrame{Action,Branch,Filter}` now store a tuple of `TDataFrameValue`s rather than (possibly null) shared pointers to `TTreeReaderValueBase`.; `TDataFrameValue` offers a transparent, unified interface to the different kinds of values that the nodes must handle: temporary columns, to be evaluated on-the-fly, `TTreeReaderArray`s that must be converted to `array_view`s and `TTreeReaderValue`s.; `TDataFrameValue` also incorporates validity checks on the value types, e.g. that arrays read via `TTreeReaderArray` are actually contiguous in memory and that the type of a temporary column is the same as the type expected by the node that makes use of it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/442:545,interface,interface,545,https://root.cern,https://github.com/root-project/root/pull/442,1,['interface'],['interface']
Integrability,"In pass through mode, the RooRealIntegral should have registered the; function as a value server, because we directly depend on its value. It's important to do this correctly, because the new BatchMode uses the; value server interface to analyze the computation graph. Furthermore, it is now ensured that in pass-through mode, no servers are; registered other than the actual function and the additional factorized; observables. There are also some other commits to ensure no invalid proxies are created; via copy/move assignment and construction. Final commit in this PR does some code modernization of the RooRealIntegral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11129:118,depend,depend,118,https://root.cern,https://github.com/root-project/root/pull/11129,2,"['depend', 'interface']","['depend', 'interface']"
Integrability,"In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```; $: cmake -Dpyroot-python2=ON; [...]; CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):; Building ROOT with Python 2 support is deprecated. The support for Python 2; will be removed in ROOT version 6.32.; Call Stack (most recent call first):; CMakeLists.txt:169 (include); ```. ```; $: python -c ""import ROOT""; /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32.; ""ROOT version 6.32."", category=DeprecationWarning); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13606:359,message,message,359,https://root.cern,https://github.com/root-project/root/pull/13606,1,['message'],['message']
Integrability,"In preparation of moving TError to foundation, this PR removes the direct use of gEnv and gSystem from TError. The functionality is implemented by helper functions instead, which are registered and de-registered upon creation and destruction gEnv and gSystem. The three tasks implemented by helpers are. - Read the ROOT environment in order to get the value of `Root.ErrorIgnoreLevel`; - Get the last system error message; - Abort the process",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5855:414,message,message,414,https://root.cern,https://github.com/root-project/root/pull/5855,1,['message'],['message']
Integrability,In principle I agree with Philippe: the cost of checking out root.git and building only the minuit2 subset is minimal. But we're not going to make a deal breaker out of this: as long as our (esp maintenance) cost of integrating your approach is minimal we should just merge it. Guilherme will guide you through the implementation issues should there be any left.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1680#issuecomment-370741281:216,integrat,integrating,216,https://root.cern,https://github.com/root-project/root/pull/1680#issuecomment-370741281,1,['integrat'],['integrating']
Integrability,"In roottest (sorry, that repo has issues disabled), test dependencies specified as shown below do not work:. ```cmake; if(NOT MSVC OR win_broken_tests); ROOTTEST_GENERATE_REFLEX_DICTIONARY(One One.h SELECTION One_selection.xml NO_ROOTMAP); set(depends ${GENERATE_REFLEX_TEST}). ROOTTEST_GENERATE_REFLEX_DICTIONARY(Two Two.h SELECTION Two_selection.xml NO_ROOTMAP); set(depends ${depends} ${GENERATE_REFLEX_TEST}). ROOTTEST_ADD_TEST(execLoadLibs; MACRO execLoadLibs.C; OUTREF execLoadLibs.oref; ERRREF execLoadLibs.eref; DEPENDS ${depends}); endif(); ```; I had the `execLoadLibs` test failing for me until I ran all three tests by hand. That's from `roottest/root/meta/ROOT-5694/CMakeLists.txt`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7978:57,depend,dependencies,57,https://root.cern,https://github.com/root-project/root/issues/7978,6,"['DEPEND', 'depend']","['DEPENDS', 'dependencies', 'depends']"
Integrability,"In some case when calling `RooAddPdf::generate` an evaluation of the RooAddPdf happens without the normalisation set defined, causing the priting of a Warning message. Since in this case the evaluation result is not used we can suppress this message. ; Here is the example code reproducing this:; ```; void testRooAddPdfGenerate() {. RooWorkspace w(""w"");. w.factory(""Gaussian::f1(x[0,10],m1[3,0,10],s1[1,0,10])"");; w.factory(""Gaussian::f2(x,m2[7,0,10],s2[0.5,0,10])"");; w.factory(""SUM::sigPdf(n1[1000,0,100000]*f1, n2[1000,0,100000]*f2)"");; w.factory(""Gaussian::bkgPdf(x,mb[5,0,10],sb[7,0,10])"");; w.factory(""sum::ns(n1,n2)"");; w.factory(""SUM::model(ns*sigPdf,nb[2000,0,100000]*bkgPdf)"");; ; auto x = w.var(""x"");; auto pdf = w.pdf(""model"");. auto data = pdf->generate(*x);. ; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10235:159,message,message,159,https://root.cern,https://github.com/root-project/root/pull/10235,2,['message'],['message']
Integrability,"In some cases with template instantiation from pyroot together with RDF code which should fail to compile with clear error messages leads instead to cryptic output. Even worse, execution continues and gives undefined results. Example. ```python; import ROOT. ret = ROOT.gInterpreter.Declare('#include ""test.h""'). print(""declare ret"", ret). print(""creating helper""); helper = ROOT.helper[ROOT.std.vector[""double""]](). d = ROOT.ROOT.RDataFrame(1000). print(""Define with helper""); d = d.Define(""fx"", helper, []); print(""done define""). res = d.Sum(""fx""). print(res.GetValue()); ```. ```cpp; template <typename T>; class helper {. public:. helper() {}. std::size_t operator() () {; const double res = 0.;; res = T{0, 0}.size();; return res;; }. };; ```. Note the assignment to ```const double``` which should fail to compile. output (centos stream 8, root 6.26/10); ```; declare ret True; creating helper; Define with helper; IncrementalExecutor::executeFunction: symbol '_ZN6helperISt6vectorIdSaIdEEEclEv' unresolved while linking symbol '__cf_13'!; You are probably missing the definition of helper<std::vector<double, std::allocator<double> > >::operator()(); Maybe you need to load the corresponding shared library?; done define; 9.408421539373414e+16; ```. (if the spurious const is removed then instead one gets the correct output of 2000 and no error message)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11854:123,message,messages,123,https://root.cern,https://github.com/root-project/root/issues/11854,2,['message'],"['message', 'messages']"
Integrability,"In the Belle2 Software the libraries are linked with `--as-needed`; linker arguments and in conjunction with the weird loading order (binary; depends on ROOT, load python, load library depending on ROOT) we seem to; run into problems that libCling is unloaded earlier than expected. Since the `TCling_UnloadMarker` was introduced for Belle2 and removal; doesn't seem to cause any problems we discussed in [ROOT-10659](https://sft.its.cern.ch/jira/browse/ROOT-10659) to remove; this again and it so far all tests on our software stack didn't show any; problems with that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5548:142,depend,depends,142,https://root.cern,https://github.com/root-project/root/pull/5548,2,['depend'],"['depending', 'depends']"
Integrability,"In the ROOT 6.26 development cycle, the RooProdPdf was partially rewritten in moden C++ with less manual memory allocation to improve performance (PR #7907). In that PR, a unit test that verifies the RooProdPdf can correctly deal with factorizing PDFs was implemented. However, that test used an arbitrary PDF where the correct factorization was checked in a rather crude way: check by hashing the content of the RooProdPdf cache element for a given normalization set that said PR doesn't change any behavior (the reference hash was hardcoded in the unit test). This commit suggests a better alternative for the unit test, checking for a multidimensional product pdf of factorizing uniform pdfs that the pdf values for differenc normalization sets is as expected. This should cover the same functionality and is less fragile and implementation dependend than hashing the cache elements. This closes GitHub issue #12430, as the rewritten test is not affected anymore by the problem reported in that issue. The commit also removed the `RooProdPdf::writeCacheToStream()` function that was an implementation detail of the old unit test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12447:844,depend,dependend,844,https://root.cern,https://github.com/root-project/root/pull/12447,1,['depend'],['dependend']
Integrability,"In the RooBatchCompute CPU library, all scalar inputs have to be copied; n times into a buffer that is as long as the SIMD registers, to allow; for vectorization in all cases. To avoid frequent memory allocations, this buffer was made a `static`; variable in the original implementation of the batchcompute library,; which of course made it non-threadsafe. This is now hitting us, because RooFit needs to be able to do multiple; fits concurrently. This is a requirement for CMSSW, and a blocker for; ROOT master adoption in CMSSW since the new CPU backend is the default:; https://github.com/cms-sw/cmsdist/pull/9034. This commit fixes the concurrency problem by doing the buffering in the; DataMaps that are used in the `RooFit::Evaluator`. Like this, multiple; computation graphs can be concurrently evaluated. It was tested with the ATLAS benchmarks in `rootbench` that the fitting; performance remains the same. This PR also makes some code style and memory management improvements documented in the commit messages. It also updates the documentation to make clear the new CPU backend is now the default, which was not done in this PR:; https://github.com/root-project/root/pull/14742",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14877:1011,message,messages,1011,https://root.cern,https://github.com/root-project/root/pull/14877,1,['message'],['messages']
Integrability,"In the RooChi2Var, there was another case of inconsistency between; constructors that seemingly do the same but actually don't. A RooChi2Var should be created with the constructors that take RooFit; command arguments. However, there were also other constructors used by; the RooFit test statistic implementation details (i.e. in; `RooAbsOptTestStatistic::create`) that when used with default aruments; behave inconsistently with the command arg constructors: the default; error type is different, and errors will be estimated from the pdf and; not from the data. This lead to the confusing situation that when creates a `RooChi2Var`; without any command arguments, the default error mode is suddenly; different. This inconsistency should be removed by having only the; command argument constructors part of the public interface. Making these constructors private should not be a problem. There were; already considered implementaiton details before, and their interface; was already changed anyway to use the configuration structs in 6.26.; Nobody has complained about that so far. Closes #10557.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10566:818,interface,interface,818,https://root.cern,https://github.com/root-project/root/pull/10566,2,['interface'],['interface']
Integrability,"In the RooPoisson integration code, it is hardcoded to return 1.0 if the upper boundary is infinite. But this should only be done if the lower boundary is not greater than zero. Closes #10868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11697:18,integrat,integration,18,https://root.cern,https://github.com/root-project/root/pull/11697,1,['integrat'],['integration']
Integrability,"In the RooRealIntegral and RooGenProdProj classes, the normalization sets were so far not forwarded to the servers, which resulted in undefined normalization sets for integrated PDFs as reported in #11476. A unit test that covers #11476 and the related JIRA issue ROOT-9436 is also implemented. Closes #11476.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11696:167,integrat,integrated,167,https://root.cern,https://github.com/root-project/root/pull/11696,1,['integrat'],['integrated']
Integrability,"In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12699:89,integrat,integration,89,https://root.cern,https://github.com/root-project/root/pull/12699,4,['integrat'],['integration']
Integrability,"In the `RooRealIntegral` constructor, there was a `O(N^2)` operation on; the computation graph, checking the dependency of the top-level function; on each other node. This is very expensive in the numer of RooAbsArgs N; is large. Instead of calling `dependsOnValue` for each leaf node, which is; very expensive because it's a recursive function, the value server; leaves are all put in a RooArgSet before the leaf iteration to check; quickly if a leaf is also a value server. This change speeds up the `createNLL` step of large models like the; ATLAS Higgs combination by at least a factor of two or three. In the same PR, I also bring a little other commit, where the ownership of the `cloneSet` in `cloneTree` is released before removing the top node element, in order to avoid ownership ambiguities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10959:109,depend,dependency,109,https://root.cern,https://github.com/root-project/root/pull/10959,2,['depend'],"['dependency', 'dependsOnValue']"
Integrability,"In the `getParameters()` implementation of the RooFitDriver wrapper,; there was a call to `RooAbsArg::getParameters()`, which is expensive. It's better to let the Driver figure out what the parameters are, given; that it already stores all the information to figure this out very; quickly. This speeds up the likelihood creation for ATLAS Higgs combination; models by about 20 % when using the BatchMode. This commit also fixes some memory leaks in the `compileForNormSet()` implementations that were put there on purpose in lack of a better solution at the time, but now they are not needed anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13020:60,wrap,wrapper,60,https://root.cern,https://github.com/root-project/root/pull/13020,1,['wrap'],['wrapper']
Integrability,"In the `master` nightlies on Ubuntu 22.04, we see some warnings caused by civentweb:; https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2204,SPEC=soversion,V=master/lastBuild/parsed_console/. ```; warning: ‘SHA1_Init’ is deprecated: Since OpenSSL 3.0 [-Wdeprecated-declarations]; 12345 | SHA1_Init(&sha_ctx);; warning: ‘SHA1_Update’ is deprecated: Since OpenSSL 3.0 [-Wdeprecated-declarations]; warning: ‘SHA1_Final’ is deprecated: Since OpenSSL 3.0 [-Wdeprecated-declarations]; ```. Usage of these deprecated functions has been removed in the civetweb master branch:; https://github.com/civetweb/civetweb/pull/1072. Hence, once civetweb 1.16 is out, the code should by synchronized again with the ROOT repository to avoid these warnings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10403:726,synchroniz,synchronized,726,https://root.cern,https://github.com/root-project/root/issues/10403,1,['synchroniz'],['synchronized']
Integrability,"In the course of reducing dependencies in `TError.[hxx|cxx]`, replace the `TVirtualMutex` type of `gErrorMutex` by `std::mutex`. Note the other changes. - `gErrorMutex` is not exported anymore (@Axel-Naumann this breaks backwards-compatibility _if_ anyone is actually using the symbol... what do you think?); - `gErrorMutex` is not a pointer anymore but it is a global, though anonymous-namespaced, `std::mutex`; this means init-time construction of a non-PoD type, which might be a problem. We get around taking the big ROOT lock for initializing the pointer though.; - Slight adjustments to the includes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5762:26,depend,dependencies,26,https://root.cern,https://github.com/root-project/root/pull/5762,1,['depend'],['dependencies']
Integrability,"In the current development cycle leading up to ROOT 6.28, there was some performance regression in RooStats tutorials like `HybridInstructional.C`, which can be seen for example in this CI bot comment:. https://github.com/root-project/root/pull/11740#issuecomment-1333720963. For some reason, there are now numeric integrals in the log that don't pop up in ROOT 6.26:; ```; [#1] INFO:NumericIntegration -- RooRealIntegral::init(py_Int[b]) using numeric integrator RooIntegrator1D to calculate Int(b); [#1] INFO:NumericIntegration -- RooRealIntegral::init(px_Int[b]) using numeric integrator RooIntegrator1D to calculate Int(b); [#1] INFO:NumericIntegration -- RooRealIntegral::init([py_X_prior_b_X_px]_Norm[b]_denominator_Int[b]) using numeric integrator RooIntegrator1D to calculate Int(b); [#1] INFO:NumericIntegration -- RooRealIntegral::init(py_Int[b]) using numeric integrator RooIntegrator1D to calculate Int(b); [#1] INFO:NumericIntegration -- RooRealIntegral::init(px_Int[b]) using numeric integrator RooIntegrator1D to calculate Int(b); ```. RooFit in ROOT master needs to be fixed again such that these integrals don't happen. Since this is a performance regression, the priority to fix this is high. A simpler script to reproduce the performance regression outside of RooStats is this one:; ```C++; void repro(); {; RooWorkspace w;; w.factory(""Poisson::px(x[150,0,500],b[100,0,300])"");; w.factory(""Poisson::py(y[100,0,500],prod::taub(tau[1.],b))"");; w.factory(""Uniform::prior_b(b)"");; w.factory(""PROD::foo(px|b,py,prior_b)"");. RooRealVar& x = *w.var(""x"");; RooRealVar& b = *w.var(""b"");; RooAbsPdf& foo = *w.pdf(""foo"");. std::unique_ptr<RooAbsReal> integ{foo.createIntegral({b}, {b, x})};. for(int i = 0; i < 10; ++i) {; x.setVal(i % 500);. std::cout << integ->getVal() << std::endl;; }; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11814:453,integrat,integrator,453,https://root.cern,https://github.com/root-project/root/issues/11814,5,['integrat'],['integrator']
Integrability,"In the current implementation of `RooDataSet::reduceEng`, the dataset; itself was queried to get the weight variable used in the reduced; dataset. This didn't work with the `RooCompositeDataStore`, because a; dataset with this data store doesn't have a weight variable, as these; are encapsulated in the components of the composite store. Hence,; reducing a weighted dataset with a RooCompositeDataStore yields an; unweighted dataset, which is a bug. To fix this problem, this commit implements a separate reduction logic; for the RooCompositeDataStore: the components are now reduced; individually, instead of naively creating a RooCompositeDataStore from a; RooVectorDataStore/RooTreeDataStore. To avoid further code branches in; RooDataSet, a new virtual function `RooAbsDataStore::reduce` is; introduced. The first two commits update the data reduction implementation details such the bugfix is easier to implement (see commit messages for more details). This closes https://github.com/root-project/root/issues/6951.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10397:931,message,messages,931,https://root.cern,https://github.com/root-project/root/pull/10397,1,['message'],['messages']
Integrability,"In the discussion thread to JIRA ticket ROOT-10864, Axel suggested the removal of the option to disable minuit2 as a possible solution. I think this is a very good idea good idea, because:. * Minuit2 only depends on `Hist` and `MathCore` anyway. * Now that Minuit2 is the default for *all* minimization in ROOT, building ROOT without Minuit2 changes the behavior of ROOT way too much, in a ways that people that set `minuit2=OFF` probably are not intending or aware of. This closes the following JIRA ticket:; https://sft.its.cern.ch/jira/browse/ROOT-10864",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14100:205,depend,depends,205,https://root.cern,https://github.com/root-project/root/pull/14100,1,['depend'],['depends']
Integrability,"In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:; ```; Direct leak of 16 byte(s) in 1 object(s) allocated from:; #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599); #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370; #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108; ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15477:1124,Interface,InterfaceUtils,1124,https://root.cern,https://github.com/root-project/root/pull/15477,1,['Interface'],['InterfaceUtils']
Integrability,"In the light of discussions and our latest understanding, the PR title has been changed together with the commit message to more properly reflect the purpose of the changes, which is to make `TString::kNPOS` definition standard-compliant. The fact it may also help in the situation highlighted by the CMS issue is a byproduct of a fix which is anyway needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14261#issuecomment-1861030852:113,message,message,113,https://root.cern,https://github.com/root-project/root/pull/14261#issuecomment-1861030852,1,['message'],['message']
Integrability,"In the meantime I ran into another issue that concerns empty directories. In the files I'm trying to merge, it rarely happens that a directory/tree is empty because no events have been selected (for that specific selection). In such a case `TFileMerger` raises a seg fault (vanilla `hadd` From tags/v6-20-04@v6-20-04); ```; #6 0x00007faa3fd0e43e in TFileMerger::MergeRecursive(TDirectory*, TList*, int) () from /cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/libRIO.so; #7 0x00007faa3fd0d29c in TFileMerger::PartialMerge(int) () from /cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/libRIO.so; #8 0x0000000000405e9a in main (); ```; Trying my local version built with debug symbols and running gdb didn't yield further info. I was a bit puzzled to see this, since I could swear that I successfully merged files with empty directories in the past. And in fact, it works with root `6.18.00` from `/cvmfs/sft.cern.ch/lcg/views/LCG_96/x86_64-centos7-gcc8-opt` (without complaining - maybe there should be a message with default verbosity settings). ; I diff'ed `hadd.cxx` as well as the `TFileMerger` source and header files between master and v6-18-00-patches, but did not see anything that would lead to these seg-faults. Do you have an idea where this could come from?. Since this is only loosely related to the actual PR, it might not be the right place to discuss this. I can post it elsewhere if that would make sense.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5995#issuecomment-656582698:1048,message,message,1048,https://root.cern,https://github.com/root-project/root/pull/5995#issuecomment-656582698,1,['message'],['message']
Integrability,"In the next version (v6.26, being released in a few weeks) an exception is thrown on top of the error message that is currently printed. Then in a future version users will be able to tell RDF what default values to use for disappearing/reappearing branches, which gives users a way to deal with this case more nicely. For now, I am afraid the best workaround is to not read or write such branches from RDF (if you only read/write well-behaved branches everything works), either by fixing the trees themselves or by only Snapshotting a subset of the columns. I'm closing this in favor of #8704 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9366#issuecomment-1006463581:102,message,message,102,https://root.cern,https://github.com/root-project/root/issues/9366#issuecomment-1006463581,1,['message'],['message']
Integrability,"In the past, it was possible to build the [roottest suite](https://github.com/root-project/roottest) standalone, just having ROOT sourced in your environment. This possibility is also advertised in the README.md of roottest. After https://github.com/root-project/root/commit/56c6ace5340003a9135d565f4d5fa68be67aa0d5, it is not possible anymore to do that, because the unit tests depend on the `ROOTUnitTestSupport` library which is only available at ROOT compile time. Maybe a possible solution is to install the `ROOTUnitTestSupport` library as part of ROOT? I don't know what's the best solution here, so I'm only opening an issue for now. But I think this need to be fixed before the next ROOT release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9507:379,depend,depend,379,https://root.cern,https://github.com/root-project/root/issues/9507,1,['depend'],['depend']
Integrability,"In this PR I implement the skeleton of the batch compute library as well as the new class RooFitDriver, which manages all the computations that need to be done in a fit and redirects them to the RooBatchCompute library. RooFitDriver: scans the computation graph for the dependencies, handles the memory needed for the computations, schedules the order of the computations (in the future it will also schedule multi-threaded computations). In other words it ""drives"" the computation library. RooBatchCompute: the library responsible for performing the actual computations. Each instance of it (eg RooBatchCompute_AVX, RooBatchCompute_CUDA etc) has architecture-specific code. To use it, one (a PDF or another RooAbsReal class) should call rbc::dispatch() and provide the enum name of the computing function to be used, the array in which the output should be store, the number of events and an rbc::DataMap object which holds the values for every parameter and observable in the fit model.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8240:270,depend,dependencies,270,https://root.cern,https://github.com/root-project/root/pull/8240,1,['depend'],['dependencies']
Integrability,"In this PR:. - Protection against null pointer dereference if fOff==nullptr.; - Better error messages if the images cannot be loaded. . Tag @couet . Also, I've tried to compile ROOT version with -Dgminimal=ON but it turns out one needs also -Dasimage=ON to make it for ROOT possible to load the standard pixmaps. Would that make sense to include the support of these pixmaps into -Dgminimal ?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6714:93,message,messages,93,https://root.cern,https://github.com/root-project/root/pull/6714,1,['message'],['messages']
Integrability,In this case - just merge it. Logically circular dependency is resolved,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3702#issuecomment-483708792:49,depend,dependency,49,https://root.cern,https://github.com/root-project/root/pull/3702#issuecomment-483708792,1,['depend'],['dependency']
Integrability,"In this context, the smart-ptr could stay just within the scope of this routine and pass the raw pointer down to the callees ... which is completely semantically correct since those routine do not take ownership of the buffers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2361#issuecomment-408908921:72,rout,routine,72,https://root.cern,https://github.com/root-project/root/pull/2361#issuecomment-408908921,2,['rout'],['routine']
Integrability,"In v6-30 we no longer record the kIsOnHeap and kNotDeleted, however older version of ROOT do not yet set them properly when reading. This leads to spurrious error message like:. ```; Error in <TList::Clear>: A list is accessing an object (0x2d77b50) already deleted (list name = TList); ```. But also failure in some case where action is not taken because the object is incorrect thought to be already deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12845:163,message,message,163,https://root.cern,https://github.com/root-project/root/pull/12845,1,['message'],['message']
Integrability,"In working in #8709, several RooFit issues were found. They often concern cmake and misconfigured dependencies, but also a few code things.; Here, I collected them in a branch to facilitate reviewing #8709 later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12536:98,depend,dependencies,98,https://root.cern,https://github.com/root-project/root/pull/12536,1,['depend'],['dependencies']
Integrability,"In writing a paper I noticed that although I promised that users can exchange the integrator of RooBinSamplingPdf,; they cannot. They can only alter options of the existing integrator.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6921:82,integrat,integrator,82,https://root.cern,https://github.com/root-project/root/pull/6921,2,['integrat'],['integrator']
Integrability,Include New Deep Learning Module with support for CNN.; Integrate the development of the 2017 GSOC students.; For the moment this PR does not include the RNN and the DAE,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1826:56,Integrat,Integrate,56,https://root.cern,https://github.com/root-project/root/pull/1826,1,['Integrat'],['Integrate']
Integrability,"Include `gsl_integration.h` in RooFitMore instead of copy-pasting code from gsl. The linking is done in the same was as in `math/mathmore/CMakeLists.txt`. This should add no additional dependency compilcations, because RooFitMore already linked against MathMore, which requires GSL to be present. The copy-pasted code was present in that file for at least 19 years now:; https://github.com/root-project/root/blob/11067c129e04ea8ec9f620b66ee89ab03c726174/roofitcore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx. Probably it was easier in that time to copy-paste than to manage the dependencies correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13701:185,depend,dependency,185,https://root.cern,https://github.com/root-project/root/pull/13701,2,['depend'],"['dependencies', 'dependency']"
Integrability,"Include two new status values, may cause problem when; showing error messages for such value",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7219:69,message,messages,69,https://root.cern,https://github.com/root-project/root/pull/7219,1,['message'],['messages']
Integrability,Includes moving CommitCluster out of the public RFieldBase interface.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14591:59,interface,interface,59,https://root.cern,https://github.com/root-project/root/pull/14591,1,['interface'],['interface']
Integrability,Incorrect Dependency on VDT,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11797:10,Depend,Dependency,10,https://root.cern,https://github.com/root-project/root/issues/11797,1,['Depend'],['Dependency']
Integrability,Increase gDebug level needed for too frequent messages in TFoamVect.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6835:46,message,messages,46,https://root.cern,https://github.com/root-project/root/pull/6835,1,['message'],['messages']
Integrability,"Increase the speed of BDT training. For regression analysis with Grad boosting, the speed gain is almost 2x.; For multiclass the gain depends on the number of multiclasses.; For classification: haven't done the test. Non BDT algorithms will also be faster (assuming the progress bar is enabled).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/100:134,depend,depends,134,https://root.cern,https://github.com/root-project/root/pull/100,1,['depend'],['depends']
Integrability,"Indeed testing these downstream packages will likely need Vc, and we cannot know where that is, so that's a case for `ROOT_INCLUDE_PATH`. The second part of this issue is about the error message. @vgvassilev do you agree that; ```; <<< cling interactive line includer >>>: fatal error: module file '/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT-HEAD-build/lib/Vc.pcm' not found: module file not found; ```; isn't equivalent to ""ROOT cannot find Vc/Vc.h; please provide the include path by adding it to `ROOT_INCLUDE_PATH`""?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594#issuecomment-1031255059:187,message,message,187,https://root.cern,https://github.com/root-project/root/issues/9594#issuecomment-1031255059,1,['message'],['message']
Integrability,Indeed the figures are included in the Primer using [this script](https://github.com/root-project/web/blob/main/_includes/figure_jsroot) based on jsroot. It might be that jsroot interface has changed. Let me ask @linev. Note that all the figures in the Manual also disappeared: https://root.cern/manual/graphs/#drawing-a-graph that's normal are they are included the same way.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10346#issuecomment-1091136901:178,interface,interface,178,https://root.cern,https://github.com/root-project/root/issues/10346#issuecomment-1091136901,1,['interface'],['interface']
Integrability,"Indeed, as @eguiraud has mentioned, this behaviour is not present anymore in ROOT >= 6.22, where ROOT does not parse the command line arguments by default. This is documented here:. https://root.cern/manual/python/#user-interface. (see `IgnoreCommandLineOptions` option).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7161#issuecomment-776082640:220,interface,interface,220,https://root.cern,https://github.com/root-project/root/issues/7161#issuecomment-776082640,1,['interface'],['interface']
Integrability,"Indeed, but for that we would need to change the public interfaces of (at least) `TLatex` and `TMathText`.; So now my question is the following: do we simply fix the compilation warnings/errors on Windows, or do we want to make it working with all possible characters, requiring new interfaces with `char32_t`?. I'll let @couet comment on that (BTW, it doesn't work on Linux or Mac either).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13091#issuecomment-1614327543:56,interface,interfaces,56,https://root.cern,https://github.com/root-project/root/issues/13091#issuecomment-1614327543,2,['interface'],['interfaces']
Integrability,"Indeed, making the library static will make it trickier to handle this case. I will go another route in fixing the described issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4722#issuecomment-571559865:95,rout,route,95,https://root.cern,https://github.com/root-project/root/pull/4722#issuecomment-571559865,1,['rout'],['route']
Integrability,"Indeed, they were not virtual before 23d8612, but they were originally, see e.g. https://github.com/root-project/root/blob/73fd43959e45e0e9e1d2537b93615cb2a58b9c03/roofit/roofitcore/inc/RooDataHist.h#L161. They were changed in 2019 in the following commit: https://github.com/root-project/root/commit/155032e6b4de3e4a50434cfe0b9e9286bc048fa7. The commit message doesn't say why. At this point, the integration with RooFitExtensions may have already broken subtly. `RooExpandedDataHist::get_wgt` was still virtual (_edit: actually doesn't matter that it was virtual, I guess, it was just shadowing_), so from this point it would be shadowing `RooDataHist::get_wgt`: it would no longer be relegated to from inside `RooDataHist` as it would before 155032e, but would only be called from inside RooFitExtensions, leading to two different `get_wgt` calls. I'm not sure how much of a difference this has made in practice in the past three years, as I'm not a user of RooFitExtensions. Maybe @cburgard can say more (or find someone who knows).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11736#issuecomment-1319839498:354,message,message,354,https://root.cern,https://github.com/root-project/root/pull/11736#issuecomment-1319839498,2,"['integrat', 'message']","['integration', 'message']"
Integrability,"Indeed, this should return -1. Note that I am missing something to reproduce the problem. It my question it returns -1 which any error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12326#issuecomment-1431722533:135,message,message,135,https://root.cern,https://github.com/root-project/root/issues/12326#issuecomment-1431722533,1,['message'],['message']
Integrability,"Indeed, this solution only improves the error message to solve the problem of ; 1. losing the information of the error reported by the `TTF` library function (for us it was `0x17` = `bad pixel size`); 2. not knowing the context of the call (input values). In our case it was enough additional information to identify the origin of the error as being a bad input value and exclude troubles at the `libTTF` packages level such as missing package(s) or mismatching versions (or also in the `tsize` calculation or in `libTTF`, but these were anyway unlikely given the 20+ years of usage). It would probably be helpful to have in addition some info on the call stack, but I do not know enough of `ROOT` core methods to propose anything there.; As I could track the source of the bad values in our code with the old-school ""add temp printouts around calls from top to bottom"" method, I must confess I stopped my investigation here :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14592#issuecomment-1929667487:46,message,message,46,https://root.cern,https://github.com/root-project/root/issues/14592#issuecomment-1929667487,1,['message'],['message']
Integrability,"Indeed, we cannot do that; that's I suppose what @jblomer tried to express with. > As long as we don't leak the interface to users. But until we have a usecase for such a queue that cannot live in `src/` I guess we can survive with tbb.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8715#issuecomment-887282836:112,interface,interface,112,https://root.cern,https://github.com/root-project/root/pull/8715#issuecomment-887282836,1,['interface'],['interface']
Integrability,Indeed. The message (that provokes the failure) appears because NDEBUG is now undefined in the PR build (as originally intended and fix today by @Axel-Naumann),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5133#issuecomment-598914326:12,message,message,12,https://root.cern,https://github.com/root-project/root/pull/5133#issuecomment-598914326,1,['message'],['message']
Integrability,"Independently from testing by ALICE, I believe this change is correct and I went ahead and synchronized it into a tag in our fork of the LLVM monorepo. @vgvassilev can you review please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15004#issuecomment-2031466432:91,synchroniz,synchronized,91,https://root.cern,https://github.com/root-project/root/pull/15004#issuecomment-2031466432,1,['synchroniz'],['synchronized']
Integrability,"Info about my system:. [shell] uname -a; Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v; ; Using built-in specs. ; COLLECT_GCC=g++; COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper; OFFLOAD_TARGET_NAMES=hsa:nvptx-none; Target: x86_64-suse-linux; Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux; Thread model: posix; gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1162#issuecomment-335749330:296,wrap,wrapper,296,https://root.cern,https://github.com/root-project/root/pull/1162#issuecomment-335749330,1,['wrap'],['wrapper']
Integrability,Initial python command line interface to TSimpleAnalysis.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/236:28,interface,interface,28,https://root.cern,https://github.com/root-project/root/pull/236,1,['interface'],['interface']
Integrability,"Inject the ""_tls_array"" constant (0x2C) symbol to avoid unresolved symbol er…",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1804:0,Inject,Inject,0,https://root.cern,https://github.com/root-project/root/pull/1804,1,['Inject'],['Inject']
Integrability,Injecting class span inside the std namespace is asking for problem,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13042:0,Inject,Injecting,0,https://root.cern,https://github.com/root-project/root/issues/13042,1,['Inject'],['Injecting']
Integrability,"Instead of looking for libraries resolving each unresolved symbol,; just load each lib resolving symbols: this will allow subsequent; missing symbols to be resolved from the loaded library quickly,; without touching disk. When loading an existing ACLiC library, and if we expect it; to contain the dependencies (explicit linking), just load itt,; instead of trying to (re-)determine its dependencies from its; undefined symbols: the outcome should be just the library; dependencies we expect the library to know already.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8017:298,depend,dependencies,298,https://root.cern,https://github.com/root-project/root/pull/8017,3,['depend'],['dependencies']
Integrability,"Instead of using one `RPageSinkBuf` per context, implement a synchronizing page sink that compresses pages and writes them through to storage, but only commits them when the context's cluster is ready. This uses much less memory, but results in higher lock contention and very fragmented files. ---. We likely don't want to merge this because buffered writing offers better scalability *and* allows to reorder pages, resulting in better read performance. But for future reference, this is how it could be implemented.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14939:61,synchroniz,synchronizing,61,https://root.cern,https://github.com/root-project/root/pull/14939,1,['synchroniz'],['synchronizing']
Integrability,"Instr,std::default_delete<llvm::GIMatchDagInstr>> *)' [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; interpreter\llvm\src\utils\TableGen\GlobalISel\GIMatchDag.cpp(51,11): message : note: qualification adjustment (const/volatile) may be causing the ambiguity [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; interpreter\llvm\src\utils\TableGen\GlobalISel\GIMatchDag.cpp(85,11): error C2666: 'llvm::format': overloaded functions have similar conversions [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; interpreter\llvm\src\include\llvm/Support/Format.h(124,29): message : could be 'llvm::format_object<const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>> *> llvm::format<const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>>*>(const char *,const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>> *const &)' [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\format(3526,20): message : or 'std::wstring std::format<const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>>*>(const std::basic_format_string<wchar_t,const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>> *>,const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>> *&&)' [found using argument-dependent lookup] [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; interpreter\llvm\src\utils\TableGen\GlobalISel\GIMatchDag.cpp(85,11): message : 'std::wstring std::format",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12523:6365,message,message,6365,https://root.cern,https://github.com/root-project/root/pull/12523,1,['message'],['message']
Integrability,"Integrals of derived PDFs have their client-server interface messed up,; and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++; void repro() {; using namespace RooFit;; RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);; RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));; RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};; integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};; integ2->Print(""v"");; }; ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):; ```; (0x7ffc9b9bf798,-S) RooRealVar::x """"; (0x7ffc9b9bf240,--) RooGaussian::gauss """"; (0x7ffc9b9bff68,V-) RooProduct::par_mod """"; (0x55ac531cd470,V-) RooConstVar::2 ""2""; ```. The integral of the `RooGenericPdf` should have the same value servers,; but it doesn't. Instead, it uses the leaves of the computation graph:; ```; (0x7ffc9b9bf798,-S) RooRealVar::x """"; (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """"; (0x7ffc9b9bfb80,V-) RooRealVar::par """"; (0x55ac51984c50,V-) RooConstVar::10 ""10""; (0x55ac531cd470,V-) RooConstVar::2 ""2""; ```. That means, the direct value server `par_mod` is **skipped** now,; misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the; `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it; wrong. That's why this commit suggests to change the logic in `RooRealIntegral`; to always add the next direct value servers that don't depend on the; integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the; mathematically direct value servers and not the computation graph leaves; is also implemented. Closes https://github.com/root-project/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11597:51,interface,interface,51,https://root.cern,https://github.com/root-project/root/pull/11597,1,['interface'],['interface']
Integrability,Integrate Bitshuffle pre-conditioner for LZ4,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6221:0,Integrat,Integrate,0,https://root.cern,https://github.com/root-project/root/pull/6221,1,['Integrat'],['Integrate']
Integrability,Integrate [Bitshuffle pre-conditioner](https://github.com/kiyo-masui/bitshuffle) to LZ4 compression algorithm.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6221:0,Integrat,Integrate,0,https://root.cern,https://github.com/root-project/root/pull/6221,1,['Integrat'],['Integrate']
Integrability,Integrate clad,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1563:0,Integrat,Integrate,0,https://root.cern,https://github.com/root-project/root/pull/1563,1,['Integrat'],['Integrate']
Integrability,Integrated with some enhancements in master.; Please follow https://sft.its.cern.ch/jira/browse/ROOT-7132 for more information.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/25#issuecomment-77367830:0,Integrat,Integrated,0,https://root.cern,https://github.com/root-project/root/pull/25#issuecomment-77367830,1,['Integrat'],['Integrated']
Integrability,Integrated. Sorry for the delay!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/299#issuecomment-267061213:0,Integrat,Integrated,0,https://root.cern,https://github.com/root-project/root/pull/299#issuecomment-267061213,1,['Integrat'],['Integrated']
Integrability,Integrated. Thanks Mattias!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/142#issuecomment-195925914:0,Integrat,Integrated,0,https://root.cern,https://github.com/root-project/root/pull/142#issuecomment-195925914,1,['Integrat'],['Integrated']
Integrability,Integrated. Thanks Michael!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/60#issuecomment-195923200:0,Integrat,Integrated,0,https://root.cern,https://github.com/root-project/root/pull/60#issuecomment-195923200,1,['Integrat'],['Integrated']
Integrability,Integrated. Thanks Omar for the revision of the text!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/131#issuecomment-195926782:0,Integrat,Integrated,0,https://root.cern,https://github.com/root-project/root/pull/131#issuecomment-195926782,1,['Integrat'],['Integrated']
Integrability,Integrated. Thanks Paul.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/147#issuecomment-202067772:0,Integrat,Integrated,0,https://root.cern,https://github.com/root-project/root/pull/147#issuecomment-202067772,1,['Integrat'],['Integrated']
Integrability,"Integrating a RooAbsRealLValue like a RooRealVar doesn't work in RooFit,; which one can check with this code:. ```C++; RooRealVar x{""x"", ""x"", 2.0, -5.0, 5.0};; std::unique_ptr<RooAbsReal> xint{x.createIntegral(x)};; xint->Print();; ```. The integral of x from -5 to 5 should be zero, but the integral object; only returns the current value of the variable. Some users expect the integral to work, and give the same result as; this, which correctly prints out zero:. ```C++; RooRealVar x{""x"", ""x"", 2.0, -5.0, 5.0};; RooProduct xId{""xId"", ""xId"", RooArgList{x}};; std::unique_ptr<RooAbsReal> xint{xId.createIntegral(x)};; xint->Print();; ```. This is assumed in two RooFit unit tests:. * [testRooWrapperPdf](https://github.com/root-project/root/blob/master/roofit/roofitcore/test/testRooWrapperPdf.cxx#L27); * [testNestedPDFs](https://github.com/guitargeek/roottest/blob/master/root/roofitstats/vectorisedPDFs/testNestedPDFs.cxx#L45) in roottest. Both tests **work only by chance** because the stored x value is the; same as its integral! As soon as the x value or limits would change, the; results don't make sense anymore. As the integration of RooAbsRealLValues never worked correctly and was; not used anywhere outside artificial unit tests, this commit suggests so; prohibit the integration of RooAbsRealLValues by throwing an exception; if `RooAbsRealLValue::createIntegral()` is called. Related to https://github.com/root-project/roottest/pull/894.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11162:0,Integrat,Integrating,0,https://root.cern,https://github.com/root-project/root/pull/11162,3,"['Integrat', 'integrat']","['Integrating', 'integration']"
Integrability,Integration of Qt5Web and CEF Web Displays for ROOT 7,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1663:0,Integrat,Integration,0,https://root.cern,https://github.com/root-project/root/pull/1663,1,['Integrat'],['Integration']
Integrability,Integration of all different layers in one Deep Learning module.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/817:0,Integrat,Integration,0,https://root.cern,https://github.com/root-project/root/pull/817,1,['Integrat'],['Integration']
Integrability,Integration of improvements suggested by running clang-tidy on the CrossValidation class.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2630:0,Integrat,Integration,0,https://root.cern,https://github.com/root-project/root/pull/2630,1,['Integrat'],['Integration']
Integrability,Integration of rootbench repository into ROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1142:0,Integrat,Integration,0,https://root.cern,https://github.com/root-project/root/pull/1142,1,['Integrat'],['Integration']
Integrability,"Intel Compiler cannot compile this piece of code:. static constexpr unsigned attrIdxToArrayIdx(unsigned Index) {; // MSVC warns about '~0U + 1' wrapping around when this is called on; // FunctionIndex, so cast to int first.; return static_cast<int>(Index) + 1;; }. int main(int, char**) {. static_assert(attrIdxToArrayIdx(~0U) == 0U, ""FOO"");; return 0;; }. The problem can be worked around by including the uncessary cast in an #ifdef; for MSVC, which is the only compiler that needs it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1372:144,wrap,wrapping,144,https://root.cern,https://github.com/root-project/root/pull/1372,1,['wrap'],['wrapping']
Integrability,"Interesting that it never worked in the reproducer. It came in on our side at some point certainly. We don't have the logs of the earlier runs unfortunately. Philippe, do you think TFileMerger should fail fully instead of ""just"" printing the message?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14963#issuecomment-2018389664:242,message,message,242,https://root.cern,https://github.com/root-project/root/issues/14963#issuecomment-2018389664,1,['message'],['message']
Integrability,"Interesting to see the versions on our build nodes ;) We have now a nice error report like this:. ```; Full path to requirements.txt: /mnt/build/workspace/root-pullrequests-build/root/requirements.txt; Details about not matched dependencies:; - numba 0.47.0 is installed but numba>=0.48.0 is required; - The 'notebook>=4.4.1' distribution was not found and is required by the application; - The 'metakernel>=0.20.0' distribution was not found and is required by the application; ```. I'll go there on Monday and lower the requirements accordingly and/or update/install the packages on the nodes. But for potential reviewers, I would keep the infrastructure as it is!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5408#issuecomment-619165872:228,depend,dependencies,228,https://root.cern,https://github.com/root-project/root/pull/5408#issuecomment-619165872,1,['depend'],['dependencies']
Integrability,"Introduce yet another layer of abstraction in ROpaqueTaskArena,; a class inheriting from tbb::task_arena that will allow us to keep; tbb hidden from ROOT interfaces while solving the issue of having to; forward-declare tbb::task_arena in an interface-dependent way. Thanks @Axel-Naumann !",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7062:154,interface,interfaces,154,https://root.cern,https://github.com/root-project/root/pull/7062,2,['interface'],"['interface-dependent', 'interfaces']"
Integrability,"Introduces an RNTupleDescriptor directory class that stores the field structure, the attached columns and their structure, as well as the cluster structure. The descriptor can be used independently of the concrete page storage implementation. Serialization and deserialization of header and footer does not depend on libCore. Along the way, this PR also straightens up naming: field names are now relative to their parent fields, i.e. fields are identified by (name, parent id). Columns have no names anymore. Columns are identified by (field id, column index). At some point we can add the possibility to address nested fields by a fully qualified name, e.g. in views. At the moment that's not yet necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4134:307,depend,depend,307,https://root.cern,https://github.com/root-project/root/pull/4134,1,['depend'],['depend']
Integrability,"Introduces the ""trivially constructible"" and ""trivially destructible"" traits for the types wrapped by an RField. Maintaining these traits allows for optimizations when reading collections: for collections of simple types (e.g., `int`s, `float`s), we don't need to call the element constructors and destructors when the collection changes size from event to event. For the vector-heavy ATLAS OpenData benchmark, this results in a 5-10% performance improvement both with RDF and with RNTuple views (hot disk cache, zstd compressed input). Fixes #10520",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11628:91,wrap,wrapped,91,https://root.cern,https://github.com/root-project/root/pull/11628,1,['wrap'],['wrapped']
Integrability,Introduces the RFieldBase::RDeleter functor that can destroy a value created by an RField. The deleter interface is virtual and RField descendents implement their own version of it. The deleter works without the corresponding field and therefore is the basis to hand out shared pointers to objects in the RValues returned by the field. Also switches to new and delete for allocation instead of malloc/free.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14380:103,interface,interface,103,https://root.cern,https://github.com/root-project/root/pull/14380,1,['interface'],['interface']
Integrability,"Introducing RTreeViewer, integrated with RBrowser. Activated when `TTree` item clicked in the browser. Main features:; 1. Edit draw expressions, cut, options; 2. Input help branch/leafs names as suggested items; 3. Select dialog with fulllist and search over branch list; 4. Drawing performed into recent canvas created in `RBrowser`. Several changes in RBrowser to let implement special features required by tree viewer - ; like activate canvas widget after tree draw. ![tree_draw0](https://user-images.githubusercontent.com/4936580/195348575-b207f199-35fc-4cd6-8d09-d2894c5dba16.png); ![tree_draw1](https://user-images.githubusercontent.com/4936580/195348581-30ca4aae-9d27-4f42-98e7-dc5b596cbefc.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11548:25,integrat,integrated,25,https://root.cern,https://github.com/root-project/root/pull/11548,1,['integrat'],['integrated']
Integrability,"Introducing a class acting as a heterogenuous container to store; metadata. Since the intended use case would be obtaining metadata from; json files, the nlohmann::json is used as the underlying container.; This required an extra dependency in tree/dataframe. The RDatasetSpec now only has attributes (treenames, fileglobs, friendinfo,; entryrange, groupinfo), getters and only a single ctor taking a RSpecBuilder.; The user is no longer supposed to build a RDatasetSpec directly.; Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable; methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group; information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group.; In the RLoopManager ctor (accepting a RDatasetSpec) the globs are; expanded and the group sizes are updated. However, group positioning; remains relevant to the global TChain in RLoopManager and hence; currently accesing groups/metadata requires global TTreeProcessorMT; chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---; Example of a valid json file to be parsed:; ```json; {; 	""groups"": [{; 			""tag"": ""SIMULATED"",; 			""trees"": [""tree"", ""subTree"", ""subTree""],; 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],; 			""metadata"": {; 				""year"": 2040,; 				""lumi"": 3.14,; 				""edeposit"": 19.0,; 				""datatype"": ""MC""; 			}; 		},; 		{; 			""tag"": ""REAL"",; 			""trees"": [""subTreeA""],; 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],; 			""metadata"": {; 				""year"": 2012,; 				""century"": 20,; 				""experiment"": ""CMS""; 			}; 		},; 		{; 			""tag"": ""BLABLA"",; 			""trees"": [""subTreeA""],; 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],; 			""metadata"": {; 				""year"": 2030,; 				""century"": 20,; 				""experiment"":",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11526:230,depend,dependency,230,https://root.cern,https://github.com/root-project/root/pull/11526,1,['depend'],['dependency']
Integrability,Is it good practice to rely on shared-object-level transitive linking in any case?. I think users should either use proper cmake targets that bring in their dependencies (namely `ROOT::ROOTDataFrame` in this case) or list all dependencies explicitly...?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7569#issuecomment-801291653:157,depend,dependencies,157,https://root.cern,https://github.com/root-project/root/pull/7569#issuecomment-801291653,2,['depend'],['dependencies']
Integrability,Is it new problem with 6.22 ? This code (TGLFormat) is not recent and has not been changed recently.; The error messages you get would suggest X11 is not properly installed (or not found by the ROOT; install procedure) on your machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6368#issuecomment-694088881:112,message,messages,112,https://root.cern,https://github.com/root-project/root/issues/6368#issuecomment-694088881,1,['message'],['messages']
Integrability,"Is it possible to determine the exact version of xrootd client that is being used? Unfortunately, the crash happens before the client logs in so I cannot see it from logs. The server reported protocol version `500` in the xrootd handshake.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-746391241:192,protocol,protocol,192,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746391241,1,['protocol'],['protocol']
Integrability,Is support of old rootmaps needed? It is not sufficient to have name-> library mapping in ROOT6 as forward declarations need to be injected in the interpreter in order to trigger the hook we exploit to autoload(parse).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1581#issuecomment-362593369:131,inject,injected,131,https://root.cern,https://github.com/root-project/root/pull/1581#issuecomment-362593369,1,['inject'],['injected']
Integrability,Is the error message about out of date pcm inverted ?,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7704:13,message,message,13,https://root.cern,https://github.com/root-project/root/issues/7704,1,['message'],['message']
Integrability,Is the error message coming from the worker? I.e. the RDataFrame object built by the map function does not pick up the friend?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7584#issuecomment-801857538:13,message,message,13,https://root.cern,https://github.com/root-project/root/issues/7584#issuecomment-801857538,1,['message'],['message']
Integrability,"Is there a way for me to look at the failures?. Get Outlook for iOS<https://aka.ms/o0ukef>; ________________________________; From: phsft-bot <notifications@github.com>; Sent: Friday, February 2, 2018 5:55:48 PM; To: root-project/root; Cc: Zhe Zhang; Mention; Subject: Re: [root-project/root] Use TTaskGroup interface to unzip baskets in parallel. (#1010). Build failed on centos7/gcc49.; See console output<https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16202/console>. Failing tests:. * projectroot.roottest.cling.typedef.roottest_cling_typedef_assertFuncArray<https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16202/testReport/projectroot.roottest.cling/typedef/roottest_cling_typedef_assertFuncArray/>; * projectroot.roottest.python.basic.roottest_python_basic_overload<https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16202/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/>; * projectroot.roottest.python.cling.roottest_python_cling_api<https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16202/testReport/projectroot.roottest.python/cling/roottest_python_cling_api/>; * projectroot.roottest.python.basic.roottest_python_basic_basic<https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16202/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/>; * projectroot.roottest.python.basic.roottest_python_basic_operator<https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16202/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/>; * projectroot.roottest.cling.template.separateDict.roottest_cling_template_separateDict_make<https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16202/testReport/projectroot.roottest.cling.template/separateDict/roottest_cling_template_separateDict_make/>; * projectroot.roottest.python.basic.roottest_python_basic_datatype<https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16202/testReport/projectroot.roottest.python/basic/roottest_pyth",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1010#issuecomment-362756051:308,interface,interface,308,https://root.cern,https://github.com/root-project/root/pull/1010#issuecomment-362756051,1,['interface'],['interface']
Integrability,"It also fails (for me) on v6.16 patch branch. And Indeed, I do not expect it to work. `Merge` is not part of the `TObject` interface and thus the wrapper need to access the function from the outside at the level of the class (yes, we could find the first base where it is declared public but I don't recall that we implemented this).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14963#issuecomment-2018350309:123,interface,interface,123,https://root.cern,https://github.com/root-project/root/issues/14963#issuecomment-2018350309,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"It appears ROOT already depends on at least GTest 1.10.0, by using the following in some places without compatibility code:; * `GTEST_SKIP`; * `TestWithParam` with non-default constructible type; * The new ""test suite"" naming instead of the old ""test case"" (I found at least `TYPED_TEST_SUITE` and `SetUpTestSuite` + `TearDownTestSuite`). Given that an older version is only found on EL8, where we have been using `builtin_gtest` since a while, I propose to drop the remaining compatibility code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15355:24,depend,depends,24,https://root.cern,https://github.com/root-project/root/pull/15355,1,['depend'],['depends']
Integrability,"It depends if warning appears with clang or not. . With original code clang also got same pragma and disables warning, after your PR ""false positive"" warnings can be reported by clang.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4869#issuecomment-578746202:3,depend,depends,3,https://root.cern,https://github.com/root-project/root/pull/4869#issuecomment-578746202,1,['depend'],['depends']
Integrability,"It depends on the log level of root and i think other factors (i don't see it always). however, i've put it also in the code to make it very explicit that there's a file at the end :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6102#issuecomment-666978185:3,depend,depends,3,https://root.cern,https://github.com/root-project/root/pull/6102#issuecomment-666978185,1,['depend'],['depends']
Integrability,It does not appear to be a SWAN specific issue. The message-swallowing also happens in locally-run Jupyter notebooks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12296#issuecomment-1438629862:52,message,message-swallowing,52,https://root.cern,https://github.com/root-project/root/issues/12296#issuecomment-1438629862,1,['message'],['message-swallowing']
Integrability,"It fails at least since ROOT 6.18; It works well in ROOT 5.34; I did some debugging and it seems the problem is in metacling, the ""params"" argument is lost deep inside the TClingCallFunc routines. It is correct here:. 10 TCling::Execute TCling.cxx 5281 0x7efc7f542288 ; params = """"time"","""","""",(Long64_t)kMaxEntries,(Long64_t)0"". ![image](https://github.com/root-project/root/assets/10653970/58028b65-7f08-442b-9f23-8cc1cf1cf0ab). with gDebug=6:. ```; gDebug = 6;; root [3] TKey Reading 2703 bytes at address 3905912; StreamerInfoAction, class:TTree, name=TNamed, fType[0]=67, TStreamerBase, bufpos=58, arr=0x555a6d864fe0, offset=0 (); StreamerInfoAction, class:TNamed, name=TObject, fType[0]=66, TStreamerBase, bufpos=64, arr=0x555a6d864fe0, offset=0 (); StreamerInfoAction, class:TNamed, name=fName, fType[1]=65, TStreamerString, bufpos=74, arr=0x555a6d864fe0, offset=16 (); StreamerInfoAction, class:TNamed, name=fTitle, fType[2]=65, TStreamerString, bufpos=79, arr=0x555a6d864fe0, offset=40 (); Module 'RIO' already loaded for 'TBufferFile'; Module 'RIO' already loaded for 'TBufferFile'; Info in <TBufferFile::ReadClassBuffer>: For class: TNamed has read 32 bytes; ReadBuffer, class:TTree, name=TAttLine, fType[0]=0, TStreamerBase, bufpos=94, arr=0x555a6d864fe0, offset=64; ReadBuffer, class:TAttLine, name=fLineColor, fType[0]=22, TStreamerBasicType, bufpos=100, arr=0x555a6d865020, offset=8; Info in <TBufferFile::ReadClassBuffer>: For class: TAttLine has read 8 bytes; ReadBuffer, class:TTree, name=TAttFill, fType[0]=0, TStreamerBase, bufpos=106, arr=0x555a6d864fe0, offset=80; ReadBuffer, class:TAttFill, name=fFillColor, fType[0]=22, TStreamerBasicType, bufpos=112, arr=0x555a6d865030, offset=8; Info in <TBufferFile::ReadClassBuffer>: For class: TAttFill has read 6 bytes; ReadBuffer, class:TTree, name=TAttMarker, fType[0]=0, TStreamerBase, bufpos=116, arr=0x555a6d864fe0, offset=96; ReadBuffer, class:TAttMarker, name=fMarkerColor, fType[0]=22, TStreamerBasicType, bufpos=122, arr=0x555a6",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15963#issuecomment-2200648481:187,rout,routines,187,https://root.cern,https://github.com/root-project/root/issues/15963#issuecomment-2200648481,1,['rout'],['routines']
Integrability,"It fixes next Jira issue https://sft.its.cern.ch/jira/browse/ROOT-10640 (where looks like OpenGL works only with X11 for ROOT) and since Glew depends on OpenGL, then it is transitively depends on X11: http://cdash.cern.ch/buildSummary.php?buildid=866822 (build was built with `-Dbuiltin_glew=ON -Dx11=OFF`). Fixes: https://github.com/root-project/root/pull/5524",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5524:142,depend,depends,142,https://root.cern,https://github.com/root-project/root/pull/5524,2,['depend'],['depends']
Integrability,"It happens often that one passes a temporary RooArgSet to the; RooCmdArg constructor, where the RooCmdArg is itself a temporary that is; passed to a RooFit function. The RooCmdArg contains only pointers to the; RooArgSets, so this pattern relies on the RooArgSet being kept alive; until the function end. In code, this pattern would look like this statement:; ```C++; func(RooCmdArg{RooArgSet{}});; ```. In C++, this works because the temporaries survive until the statement; end. But in Python, the inner temporary RooArgSet will be destructed; after the RooCmdArg has been constructed, leaving the RooCmdArg with; dangling pointers. To solve this problem, all the functions that can create a RooCmdArg; from a RooArgSet are overloaded with versions accepting rvalue; references. These overloads are indeed used for temporaries both in C++; and Python. In the rvalue reference versions, the temporaries are moved; into a vector of std::unique_ptr<TObject>. The constructed RooCmdArg; then takes ownership of this vector wrapped in a shared_ptr. This addresses Jira issues [ROOT-5022](https://sft.its.cern.ch/jira/browse/ROOT-5022), [ROOT-9861](https://sft.its.cern.ch/jira/browse/ROOT-9861), and [ROOT-4373](https://sft.its.cern.ch/jira/browse/ROOT-4373). Here some examples of C++ and Python code that work after this change:. ```C++; void minimal_example() {; using namespace RooFit;. RooRealVar x(""x"",""x"", 0.0, 1.0);. RooDataSet data{};. RooCmdArg * arg = new RooCmdArg(ProjWData(x, data));. ((RooArgSet*)arg->getObject(0))->Print();. std::cout << dynamic_cast<RooArgSet const*>(arg->getObject(0)) << std::endl;. delete arg;. }; ```. ```Python; import ROOT. x = ROOT.RooRealVar(""x"", ""x title"", 0, 0, 10). arg = ROOT.RooFit.NormSet( ROOT.RooArgSet(x) ); arg.getObject(0)[""x""].Print(); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8032:1021,wrap,wrapped,1021,https://root.cern,https://github.com/root-project/root/pull/8032,1,['wrap'],['wrapped']
Integrability,It has to be looked case by case. Another option is to make Minuit2 not depend on the headers from Math at all. I will take a look just in case.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1680#issuecomment-369583293:72,depend,depend,72,https://root.cern,https://github.com/root-project/root/pull/1680#issuecomment-369583293,1,['depend'],['depend']
Integrability,"It is a dependency of ROOTDataFrame which is already included in; ROOT_LIBRARIES, so we want it there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7569:8,depend,dependency,8,https://root.cern,https://github.com/root-project/root/pull/7569,4,['depend'],['dependency']
Integrability,It is a synchronization of revert commits with branch 6.14 patches.; Next PR will generalize a switch between compression algorithms.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2889:8,synchroniz,synchronization,8,https://root.cern,https://github.com/root-project/root/pull/2889,1,['synchroniz'],['synchronization']
Integrability,"It is base class for TBufferText and TBufferFile, combining common methods of both. It implements methods to work with objects map and some other virtual methods, defined in TBuffer interface. In TBufferFile **nullptr** replaces 0 (where it make sense) and ``printf()`` replaced with ``Info()``; Also clang format applied to the sources (excluding TBufferFile), use. As a next step, one can put following methods in TBufferIO:; * ReadClassBuffer; * WriteClassBuffer; * ReadClassEmulated; * ApplySequence. But here one need tiny virtual interface to use proper actions list for TBufferText or TBufferFile.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1661:182,interface,interface,182,https://root.cern,https://github.com/root-project/root/pull/1661,2,['interface'],['interface']
Integrability,"It is broken by design, there is no way that this interface can; be used in a safe way. Just get rid of it.# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12166:50,interface,interface,50,https://root.cern,https://github.com/root-project/root/pull/12166,1,['interface'],['interface']
Integrability,"It is confusing to the users that the chi2 fit is by default not extended, even if the pdf is extended. Because this is what happens in normal likelihood fits. This commit makes that behavior consistent and explains it in the release notes. Also, a new error message is added for the case you forcing a non extended fit on a pdf that must be extended, because this is guaranteed to give wrong results. This change addresses the confusion on the forum:; https://root-forum.cern.ch/t/failing-chi2-fit/56309",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13638:259,message,message,259,https://root.cern,https://github.com/root-project/root/pull/13638,1,['message'],['message']
Integrability,"It is indeed a (unintended) pattern in the remote protocols (class derived from TFile) that the option are not properly passed/stored. For example:; ```; TDavixFile::TDavixFile(const char *url, Option_t *opt, const char *ftitle, Int_t compress) : TFile(url, ""WEB""),; d_ptr(new TDavixFileInternal(fUrl, opt)); {; (void) ftitle;; (void) compress;; Init(kFALSE);; }; ```; where 'opt' is not passed to the `TFile` constructor but only to the internal object. Later the `Init` is (of course) not finding the options. For this case, this could be solved setting `fOption` to opt before calling `Init`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10742#issuecomment-1155780013:50,protocol,protocols,50,https://root.cern,https://github.com/root-project/root/issues/10742#issuecomment-1155780013,1,['protocol'],['protocols']
Integrability,"It is just debug mode, the consequence of a race condition on gDebug would ""only"" be that some message may or may not be printed when intended. So it is likely fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6875#issuecomment-735955797:95,message,message,95,https://root.cern,https://github.com/root-project/root/pull/6875#issuecomment-735955797,1,['message'],['message']
Integrability,It is not ABI compatible per se but for your purpose it is sufficiently so. The code in cling/llvm is only used/access from libCling which should only be accessed through the TIntepre ter interface (i.e. no user code should need to be rebuild).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7657#issuecomment-811290392:188,interface,interface,188,https://root.cern,https://github.com/root-project/root/issues/7657#issuecomment-811290392,1,['interface'],['interface']
Integrability,It is not crash as well for me. But if I try to move title using my mouse - I get corrupted drawing (as on screenshot) and; lot of error messages.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14032#issuecomment-1801794203:137,message,messages,137,https://root.cern,https://github.com/root-project/root/issues/14032#issuecomment-1801794203,1,['message'],['messages']
Integrability,"It is not recommended to link directly to the Python libraries, but instead, use `-undefined dynamic_lookup` (macOS flag). Depending on how Python was built, using dynamic or static links to the libPython, a direct link can cause it to segfault. This uses that method, and was a necessary change for the conda-forge package for Python 3 macOS. See, for example:; https://pybind11.readthedocs.io/en/stable/compiling.html#building-manually. Note: This might be reasonable to do for Linux too, but maybe with the appropriate flags. The current patch is as conservative as possible. Discussion has moved here: <https://sft.its.cern.ch/jira/browse/ROOT-9950>",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3396:123,Depend,Depending,123,https://root.cern,https://github.com/root-project/root/pull/3396,1,['Depend'],['Depending']
Integrability,It is not used in TVirtualX interfaces.; It is re-declared in TGLUtil.h include.; Was introduced 14 years ago with the commit:. https://github.com/root-project/root/commit/fc7ab2b. In my mind - it is wrong place,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2908:28,interface,interfaces,28,https://root.cern,https://github.com/root-project/root/pull/2908,1,['interface'],['interfaces']
Integrability,"It is possible to set ranges for a `RooCategory`, suggesting that this; is a possible way to select only a subset of channels in a simultaneous; fit. However, this was not working so far, and this commit implements; that. This commit implements that feature for both the old test statistic; classes and the new BatchMode. As now it also makes sense to fit to a range that is not defined for the; observables but for the categories only, the message that is printed; when your observables don't define the range is demoted from a warning; to an info message. The debug message that was printed when channels are not selected also; got removed, because it had some overhead from `sumEntries`, the; debugging prints are rarely used, and the message is not true anymore; because chanels might also be skipped now becauese the are not selected; in the category range. Also, a new unit test is implemented that verifies the `RooFit::Range()`; command argument for fitTo can be used to select specific components; from a RooSimultaneous. Closes issue https://github.com/root-project/root/issues/8231. Two additional commits in this PR make some improvements to the `RooAbsTestStatistic` code, as described in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11785:441,message,message,441,https://root.cern,https://github.com/root-project/root/pull/11785,4,['message'],['message']
Integrability,"It is still an issue on both Windows 64 bit and 32 bit as of April 2024. Here is the relevant output:; ```; 2206/2226 Test #2197: gtestC--ROOT-CI-roottest-root-tree-readrules-gh-14462-gh14462regression ...........................***Failed 1.06 sec; Running main() from C:\ROOT-CI\build\googletest-prefix\src\googletest\googletest\src\gtest_main.cc; [==========] Running 1 test from 1 test suite.; [----------] Global test environment set-up.; [----------] 1 test from ReadRules; [ RUN ] ReadRules.CustomReadRuleWithSpace; C:\ROOT-CI\src\core\testsupport\src\TestSupport.cxx(76): error: Failed; Received unexpected diagnostic of severity 3000 at 'TCling::LoadPCM' reading 'ROOT PCM C:\ROOT-CI\build\roottest\root\tree\readrules\gh-14462\Release\gh14462regressionDict_rdict.pcm file does not exist'.; Suppress those using ROOT/TestSupport.hxx; [ FAILED ] ReadRules.CustomReadRuleWithSpace (883 ms); [----------] 1 test from ReadRules (883 ms total); ; [----------] Global test environment tear-down; [==========] 1 test from 1 test suite ran. (883 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] ReadRules.CustomReadRuleWithSpace; ; 1 FAILED TEST; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9354#issuecomment-2046160417:1233,message,message,1233,https://root.cern,https://github.com/root-project/root/issues/9354#issuecomment-2046160417,1,['message'],['message']
Integrability,It looks like the clang tidy errors reported by continuous-integration/travis-ci/pr are not related to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3847#issuecomment-495597401:59,integrat,integration,59,https://root.cern,https://github.com/root-project/root/pull/3847#issuecomment-495597401,1,['integrat'],['integration']
Integrability,"It looks more complicated that what I thought with missing dependencies. I'll need to create a dedicated VM not to mess-up the environment of our build nodes, so it will take a bit of time...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10283#issuecomment-1085527103:59,depend,dependencies,59,https://root.cern,https://github.com/root-project/root/issues/10283#issuecomment-1085527103,1,['depend'],['dependencies']
Integrability,"It looks okay:; ```; $ cat /proc/sys/kernel/threads-max; 7897651; $ cat /proc/sys/kernel/pid_max ; 4194304; $ cat /proc/sys/vm/max_map_count; 262144; ```; ```; jupyter-pcanal-rootdevel:quick-devel pcanal$ ulimit -a; real-time non-blocking time (microseconds, -R) unlimited; core file size (blocks, -c) unlimited; data seg size (kbytes, -d) unlimited; scheduling priority (-e) 0; file size (blocks, -f) unlimited; pending signals (-i) 3948825; max locked memory (kbytes, -l) 8192; max memory size (kbytes, -m) unlimited; open files (-n) 1048576; pipe size (512 bytes, -p) 8; POSIX message queues (bytes, -q) 819200; real-time priority (-r) 0; stack size (kbytes, -s) 8192; cpu time (seconds, -t) unlimited; max user processes (-u) 4194304; virtual memory (kbytes, -v) unlimited; file locks (-x) unlimited; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16552#issuecomment-2383251376:580,message,message,580,https://root.cern,https://github.com/root-project/root/issues/16552#issuecomment-2383251376,1,['message'],['message']
Integrability,"It may be a good idea to make dataframe optional and disable (or require it to be off) on 32bits machines. The proliferation of these things not availble on 32bits will only get more and more complicated. We already have a few other places where this needs to be checked. It's better to have a `dataframe` option than keeping in sync all the 32bit checks everywhere (i.e. which tests to run, which tutorials to veto, which optional components that depend on dataframe and cannot be build as a consequence, etc). @dpiparo @bluehood What are your thoughts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3957#issuecomment-501664021:448,depend,depend,448,https://root.cern,https://github.com/root-project/root/pull/3957#issuecomment-501664021,1,['depend'],['depend']
Integrability,"It may make sense to register such include paths as ""private"" and adjust the interface of `gSystem->GetIncludePath` (cc:pcanal). In principle we do not need this injected include path when runtime_cxxmodules are on and we might just drop that part from dictionary generation. There might be some code out there that was relying on this gray area include path. I'd defer that to @Axel-Naumann.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7108#issuecomment-769975888:77,interface,interface,77,https://root.cern,https://github.com/root-project/root/issues/7108#issuecomment-769975888,2,"['inject', 'interface']","['injected', 'interface']"
Integrability,It probably depends on which builtins you enable?; I also see this for builtin_XROOTD; ```; gmake[4]: *** read jobs pipe: Bad file descriptor. Stop.; gmake[4]: *** Waiting for unfinished jobs....; gmake[3]: *** [Makefile:146: all] Error 2; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16733#issuecomment-2432536621:12,depend,depends,12,https://root.cern,https://github.com/root-project/root/issues/16733#issuecomment-2432536621,1,['depend'],['depends']
Integrability,"It seems deeper problems exists. In my study, I need to sample a 3D multi-variate gaussian distribution. For comparison, I set correlation to zero, so that I can simply sample three independent variables. The results using unuran and the one using three indepent variables are incompatible, even with above mentioned dirty fix. Currently I switch to alternative methods, yet it might be useful to understand what is the problem. I think some unit test and integration test should be implemented.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10222#issuecomment-1079823051:456,integrat,integration,456,https://root.cern,https://github.com/root-project/root/issues/10222#issuecomment-1079823051,1,['integrat'],['integration']
Integrability,It seems that Decl->isUsed() was not a good way to decide whether if a decl is interesting or not because; ```; [yuka@yuka-arch module-release]$ root -l -b; root [0] gMinuit; IncrementalExecutor::executeFunction: symbol 'gMinuit' unresolved while linking [cling interface function]!; ```; we couldn't resolve gMinuit with this patch :(,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2009#issuecomment-391741036:262,interface,interface,262,https://root.cern,https://github.com/root-project/root/pull/2009#issuecomment-391741036,1,['interface'],['interface']
Integrability,"It seems that VecCore is a wrapper over Vc, however ROOT uses Vc in the context; of VecCore but also standalone. Adapt CMake to only try to load the Vc module when the Vc option is on as VecCore; might have not exposed Vc... This change improves root-project/root@f2ac9b349f",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9572:27,wrap,wrapper,27,https://root.cern,https://github.com/root-project/root/pull/9572,1,['wrap'],['wrapper']
Integrability,"It seems that the exported targets in ROOT 6.26 changed. Some software ([corryvreckan](https://gitlab.cern.ch/corryvreckan/corryvreckan)) that was compiling without issues in older root versions encounters issues when running cmake (3.22.3). . I believe that this is related to missing exported CMake targets. ### Describe the bug. CMake Error at src/core/CMakeLists.txt:73 (ADD_LIBRARY):; Target ""CorryvreckanCore"" links to target ""Threads::Threads"" but the target; was not found. Perhaps a find_package() call is missing for an IMPORTED; target, or an ALIAS target is missing?; ; ; CMake Error at src/core/CMakeLists.txt:73 (ADD_LIBRARY):; Target ""CorryvreckanCore"" links to target ""OpenMP::OpenMP_CXX"" but the; target was not found. Perhaps a find_package() call is missing for an; IMPORTED target, or an ALIAS target is missing?; ; ; CMake Error at src/core/CMakeLists.txt:73 (ADD_LIBRARY):; Target ""CorryvreckanCore"" links to target ""MPI::MPI_CXX"" but the target was; not found. Perhaps a find_package() call is missing for an IMPORTED; target, or an ALIAS target is missing?. The dependency seems to be pulled in via Minuit2. . The following additions to the CMakeLists of the project fix the issue:. ```; if(NOT TARGET Threads::Threads); find_package(Threads); endif(); if(NOT TARGET MPI::MPI_CXX); find_package(MPI); endif(); if(NOT TARGET OpenMP::OpenMP_CXX); find_package(OpenMP); endif(); ```. ### Setup. Compiling from source. Tested in master and using 6.26/00. Using archlinux, using CMake 3.22.3. The issue seems to only be present on archlinux, probably because for other OSs, the dependencies are handled internally rather than being imported (?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10283:1086,depend,dependency,1086,https://root.cern,https://github.com/root-project/root/issues/10283,2,['depend'],"['dependencies', 'dependency']"
Integrability,"It seems the `UNREACHABLE` is connected to the issue regarding `__builtin_pow`, at least that is the builtin function that Clad's generated code tries to cast into a function pointer. The failure of `roottest-root-io-compression-make` was because I was building without `builtin_zstd` and the compressed size was different than expected. From that point of view, the build fixes are complete. Note that the backport still needs to be synchronized to https://github.com/root-project/llvm-project/ before merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15900#issuecomment-2182262756:434,synchroniz,synchronized,434,https://root.cern,https://github.com/root-project/root/pull/15900#issuecomment-2182262756,1,['synchroniz'],['synchronized']
Integrability,"It seems to me one can now do:; ```; root [0] ROOT::IsImplicitMTEnabled(); (bool) false; root [1] TMVA::gConfig().EnableMT(4); root [2] ROOT::IsImplicitMTEnabled(); (bool) false; root [3] TMVA::gConfig().GetThreadExecutor().GetPoolSize(); (unsigned int) 4; ```; It could be expected that TMVA IMT implies ROOT IMT. And; ```; root [0] ROOT::EnableImplicitMT(4); root [1] TMVA::gConfig().GetThreadExecutor().GetPoolSize(); (unsigned int) 1; ```; Here the user may expect that TMVA uses IMT, however an extra `TMVA::gConfig().EnableMT()` is required. Are these two situations desirable? If not, the documentation of `ROOT::EnableImplicitMT` should be updated to indicate that TMVA IMT is controlled through a separate interface (`TMVA::gConfig()`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3585#issuecomment-476266847:715,interface,interface,715,https://root.cern,https://github.com/root-project/root/pull/3585#issuecomment-476266847,1,['interface'],['interface']
Integrability,It simplifies some interfaces and removes one extra responsibility from the column readers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11307:19,interface,interfaces,19,https://root.cern,https://github.com/root-project/root/pull/11307,1,['interface'],['interfaces']
Integrability,"It turns out that RNTuple data should better not be stored in custom directories because. 1. It is hard to get the TBrowser integration correctly; the TBrowser can only know the special status of the directory when looking at the object, looking at its key is not enough; 2. All the page keys get added to the directory's key list, which is inefficient. Instead, RNTuple will be changed to replicate the TTree approach: an ntuple is represented by a single, small `RNTuple` object, but the actual page data is stored in anonymous keys.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4651:124,integrat,integration,124,https://root.cern,https://github.com/root-project/root/pull/4651,1,['integrat'],['integration']
Integrability,"It turns out that just calling every function like this; ```; functionname[<template args>](args); ```; doesn't always result in correct code. In a concrete example, PyROOT is currently not able to generate a; valid wrapper for comparing libc++ std::vector<int>::iterator objects.; The wrapper becomes invalid by over-specifying the template arguments; and trying to call:; ```; std::__1::operator==<int *, int *>(a, b); ```. Now we first try to cast such functions to the correct type before; we start doing a lookup, e.g. above example would be:. ```; ((bool (&)(const std::__wrap_iter<int*>&,const std::__wrap_iter<int*>&))std::__1::operator==<int*, int*>)(i,i)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/614:216,wrap,wrapper,216,https://root.cern,https://github.com/root-project/root/pull/614,2,['wrap'],['wrapper']
Integrability,"It uses RBrowser and RBrowsable functionality to select some files or input new file SaveAs.; Provide sync and async modes. Actual ui5 coding should be implemented by @Falcort . Now RFileDialog starts its own window, later adapter will be provided to use RFileDialog inside other widgets - like RCanvas or RBrowser. Provide simple tutorial macro.; For meaningful async mode I add `RDirectory::Remove(name)` method (@Axel-Naumann)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4607:223,adapter,adapter,223,https://root.cern,https://github.com/root-project/root/pull/4607,1,['adapter'],['adapter']
Integrability,It was a dependency when building it using the old version 1.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6233:9,depend,dependency,9,https://root.cern,https://github.com/root-project/root/pull/6233,1,['depend'],['dependency']
Integrability,"It was not good to have this signature in RooAbsData, because the; implementations in RooDataHist and RooDataSet were inconsistent. The RooDataSet indeed took the weight error as the third argument, but; the RooDataHist version instead took the sum of weights squared, which; is equivalent to the squared weight error. That means using `RooAbsData::add(row, weight, weightError)` results in; different weight uncertainties depending on which data implementation; you use. This should not happen. It probably didn't happen to many; people, but I was affected by this when implementing; `RooAbsData::split()` (see https://github.com/root-project/root/pull/12459/commits/909d2564045d1cdb99865c4da6b7e79e463b548f). The solution to this problem it to remove the `add(row, weight,; weightError)` from the virtual RooAbsData interface. The `add(row,; weight)` signature can stay, because this one is implemented; consistently in RooDataSet and RooDataHist.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12479:423,depend,depending,423,https://root.cern,https://github.com/root-project/root/pull/12479,2,"['depend', 'interface']","['depending', 'interface']"
Integrability,"It would also be nice to have a bit more consistent interface. Right now pdf and cdf can be passed via references, while dpdf only as a pointer; pdf and dpdf via constructor, while cdf requires method call. Could you add the following:; ```; TUnuranContDist(bool copyFunc=false); SetPdf(const ROOT::Math::IGenFunction& pdf, bool isLogPdf=false); SetDpdf(const ROOT::Math::IGenFunction& dpdf); ```; ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8196#issuecomment-844083817:52,interface,interface,52,https://root.cern,https://github.com/root-project/root/issues/8196#issuecomment-844083817,1,['interface'],['interface']
Integrability,"It would also help if the NLL in RooFit for binned fits is reformulated such that the normalization integral is only approximated by evaluating at the bin centers. Like this, the average binning effects are cancelling out because they appear both in the numerator and denominator. Only bin-dependent binning effects are remaining then. Besides reducing binning effects, this would improve numerical fit stability because no numeric integration of the PDF function needs to be done in the integral is not known analytically. More detail with the mathematical background can be found on the ROOT forum:; https://root-forum.cern.ch/t/minimized-nll-not-corresponding-to-best-chi2/50120/22",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11951:290,depend,dependent,290,https://root.cern,https://github.com/root-project/root/issues/11951,2,"['depend', 'integrat']","['dependent', 'integration']"
Integrability,"It would be nice to have it in the master soon. Actually I have yet another request: a multidimensional mode (I think I didn't mention it earlier). For now I had to move to the lower level which is not exactly great. To summarize, I ask for the following new features:. 1. Set dpdf and cdf; 2. Set multidimensional mode `SetMode(const double* mode)`; 3. Support for `_chg_truncated`, i.e. range of sampled numbers, which could be narrower than the domain (this needs first support in `TUnuran`, then in the sampler); 4. Documentation of passing method-specific parameters via the string API or even better an interface making it easier to build the respective string (`SetParameter(const std::string& name, const double val)` and similar methods for other types of parameters)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7332#issuecomment-862384249:609,interface,interface,609,https://root.cern,https://github.com/root-project/root/issues/7332#issuecomment-862384249,1,['interface'],['interface']
Integrability,"It would greatly help memory safety if ROOT could use more smart pointers in its interfaces. However, the automatic downcasting of returned values is only working for raw pointers. It should work for smart pointers as well. For example, right now this doesn't work:; ```Python; class ClassA {; public:. ClassDef(ClassA, 0);; };. class ClassB : public ClassA {; public:; void helloB() {}. ClassDef(ClassB, 0);; };. ClassA *fooRawPtr() { return new ClassB{}; }. std::unique_ptr<ClassA> fooUniquePtr() { return std::make_unique<ClassB>(); }; ```; Output:; ```txt; <class cppyy.gbl.ClassB at 0x5e1ddf85ed20>; Traceback (most recent call last):; File ""/home/rembserj/repro.py"", line 30, in <module>; out_2.helloB(); ^^^^^^^^^^^^; AttributeError: 'ClassA' object has no attribute 'helloB'; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16210:81,interface,interfaces,81,https://root.cern,https://github.com/root-project/root/issues/16210,1,['interface'],['interfaces']
Integrability,"It's AST supposed to depend on NDEBUG, so having this as a module is; wrong.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/537:21,depend,depend,21,https://root.cern,https://github.com/root-project/root/pull/537,1,['depend'],['depend']
Integrability,"It's a bit more involved than that, from what I could understand from debugging: `RooRealIntegral` searches for the clients of the integration variables, and the plot variables have none (clone of the dataset variables?). ; Overriding the projection variables by passing `Project` to the pdf plot solves this, and then it becomes an actual pointer comparison problem as you say.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12646#issuecomment-1519887890:131,integrat,integration,131,https://root.cern,https://github.com/root-project/root/issues/12646#issuecomment-1519887890,1,['integrat'],['integration']
Integrability,"It's a proposal, totally open to discussion. I found myself in need of this piece of code several times and I always thought it would be cool to have it as a single call instead of having to remember those three lines. You can see it a nicer and useful way for writing nCPUs dependent, processor-agnostic code. I would say it's better than replicating the current process of getting the number of CPUs all over the place. This function will be helpful when parallelizing without IMT/tbb, where you may still be in need of knowing the number of threads you can use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1018#issuecomment-330673548:275,depend,dependent,275,https://root.cern,https://github.com/root-project/root/pull/1018#issuecomment-330673548,1,['depend'],['dependent']
Integrability,"It's already associated with `tmva`! But we could do sth like this as well:. ```; if(tmva AND imt); message(STATUS ""Looking for BLAS for optional parts of TMVA""); find_package(BLAS); endif(); ```. As well, the previous output `-- Looking for BLAS for optional parts of TMVA` indicates that the warning is connected to an optional part of TMVA.; The output if BLAS is not found looks like this: `-- A library with BLAS API not found. Please specify library location.`. The reason why I brought up this PR: If you want to run the BLAS dependent CPU implementation of the DNN, it's not trivial to debug (without altering cmake code) why it is not build though you've set all cmake flags correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/301#issuecomment-261918626:100,message,message,100,https://root.cern,https://github.com/root-project/root/pull/301#issuecomment-261918626,2,"['depend', 'message']","['dependent', 'message']"
Integrability,"It's better if the RDataFrame doesn't depend on `nlohmann::json` for this reason:. If you build ROOT **without** the builtin nlohmannjson, it finds the json header with `find_package(nlohmann_json)`, which is fine. However, if the `nlohmann/json.hpp` header is not in the default include path, one is now forced to also do `find_package(nlohmann_json)` in every compiled project that uses RDataFrame!. This happened to one of our students recently, which is why I got aware of the problem. On most Linux systems, this is not a problem because `json.hpp` is in a standard location, but for macOS this doesn't seem to be the case necessarily.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14043:38,depend,depend,38,https://root.cern,https://github.com/root-project/root/pull/14043,1,['depend'],['depend']
Integrability,"It's not a problem right now, just worried about the future. Some adventurous user may some day take the cloned functor and try to call DoEval when the RooAbsMinimizerFcn is already gone. Making sure it still exists could be done with a `weak_ptr`, but then you need to put the thing itself in a `shared_ptr` as well, which may give off a mixed message...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12348#issuecomment-1439871567:345,message,message,345,https://root.cern,https://github.com/root-project/root/pull/12348#issuecomment-1439871567,1,['message'],['message']
Integrability,"It's not great that we have to consider all these redundant overloads. I would suggest getting rid of them first, to keep the interface clean and consistent:; * https://github.com/root-project/root/pull/16443; ; What do you think, @lmoneta?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16437#issuecomment-2353578161:126,interface,interface,126,https://root.cern,https://github.com/root-project/root/pull/16437#issuecomment-2353578161,1,['interface'],['interface']
Integrability,"It's not just the opt pragma - `Declare()` also disables the interpreter extensions, like nullptr check. We'd need a new interpreter interface for this selection of features: yes autoparsing + autoloading, no to the other interpreter extensions. I'm not in love with that solution either.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3061#issuecomment-443612738:133,interface,interface,133,https://root.cern,https://github.com/root-project/root/pull/3061#issuecomment-443612738,1,['interface'],['interface']
Integrability,"It's not your fault, but you opened Pandora's box 🙂; - No c-style casts in any code that gets touched after 2018; - `assert(0)` is useless in production code. Please throw `std::invalid_argument`.; - Don't use legacy iterators and don't define variables outside of the loop.; - Instead, use something like this:; ```c++; for (unsigned int i = 0; i < inFuncList.size(); ++i) {; auto func = static_cast<RooAbsArg*>(inFuncList[i]);; auto coef = static_cast<RooAbsArg*>(inCoefList[i]);; ...; ```; or directly `dynamic_cast` to the required types. If one of those doesn't exist or has the wrong type, issue an error message and throw. _Originally posted by @hageboeck in https://github.com/root-project/root/pull/8368#discussion_r647458786_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8374:611,message,message,611,https://root.cern,https://github.com/root-project/root/issues/8374,1,['message'],['message']
Integrability,"It's your decision about how you organize your work, but maybe it would be better to simply suggest to users to. - submit bugs to github; - ask questions on the forum. Why I wrote that github is better for ""feedback"", is because its issues are integrated with push and pull releases, and they won't be lost (as forum reports can be), they will stay open until closed or fixed. . Maybe you can invent a better wording for that paragraph.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7334#issuecomment-789011675:244,integrat,integrated,244,https://root.cern,https://github.com/root-project/root/pull/7334#issuecomment-789011675,1,['integrat'],['integrated']
Integrability,Iterating again with Axel we agreed that the problem with filename/line number adding noise mostly goes away by putting the actual message indented in a new line. E.g. I would find this much much more readable that what we currently have:. ```; [Info][ROOT.RDF][void ROOT::Detail::RDF::RLoopManager::Run()][../tree/dataframe/src/RLoopManager.cxx:705]; The actual message; which can be multi-line; ```. (where the first line could be displayed e.g. in gray if we are printing to a tty to help the reader distinguish context from content),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7008#issuecomment-1061629486:131,message,message,131,https://root.cern,https://github.com/root-project/root/issues/7008#issuecomment-1061629486,2,['message'],['message']
Integrability,"Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```; df.AsNumpy(); ---------------------------------------------------------------------------; AttributeError Traceback (most recent call last); <ipython-input-10-e856f5516a02> in <module>(); ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude); 429 else:; 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object); --> 431 for i, x in enumerate(cpp_reference):; 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy.; 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'; ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4718:878,wrap,wrapping,878,https://root.cern,https://github.com/root-project/root/pull/4718,1,['wrap'],['wrapping']
Integrability,"Just a change of commit message, should not change the outcome of the tests",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7041#issuecomment-760749364:24,message,message,24,https://root.cern,https://github.com/root-project/root/pull/7041#issuecomment-760749364,1,['message'],['message']
Integrability,"Just a fly-by comment. While reading the PR description I initially thought that `RooAbsReal::doEval` could maybe just be called `RooAbsReal::eval`, but then I also read there is another function called `RooAbsReal::evaluate`. What is the difference between the two interfaces?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13939#issuecomment-1780158604:266,interface,interfaces,266,https://root.cern,https://github.com/root-project/root/pull/13939#issuecomment-1780158604,1,['interface'],['interfaces']
Integrability,Just fixing a typo in the commit messages.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13665#issuecomment-1725180696:33,message,messages,33,https://root.cern,https://github.com/root-project/root/pull/13665#issuecomment-1725180696,1,['message'],['messages']
Integrability,"Just for completion, I have a Clang16 with MacOS 14.2.1. Could you point me a specific commit or you just compiled the master version recently ? ; ```; -- Found OpenGL: /Library/Developer/CommandLineTools/SDKs/MacOSX14.2.sdk/System/Library/Frameworks/OpenGL.framework; -- Looking for GLEW; -- Found GLEW: /opt/homebrew/lib/cmake/glew/glew-config.cmake; CMake Error at cmake/modules/SearchInstalledSoftware.cmake:615 (message):; Please enable builtin Glew due bug in latest CMake (use cmake option; -Dbuiltin_glew=ON).; Call Stack (most recent call first):; CMakeLists.txt:298 (include); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14483#issuecomment-1919050085:417,message,message,417,https://root.cern,https://github.com/root-project/root/issues/14483#issuecomment-1919050085,1,['message'],['message']
Integrability,"Just for documentation purposes, I am having fun with this at the moment; ```; 503: /home/vpadulan/Programs/rootproject/rootsrc/core/testsupport/src/TestSupport.cxx:108: Failure; 503: Failed ; 503: ROOT::TestSupport::CheckDiagsRAII: Expected diagnostic message missing: ; 503: severity: kError ; 503: received: 0 times (required, fullMatch) ; 503: origin: ""Setup()"" ; 503: message: Branch 'col1' is not available from tree 't' in file '/home/vpadulan/Programs/rootproject/rootbuild/makeproxy-error-check-testing/tree/tree; player/test/DisappearingBranch1.root'. ; 503: ; 503: /home/vpadulan/Programs/rootproject/rootsrc/core/testsupport/src/TestSupport.cxx:113: Failure; 503: Failed ; 503: ROOT::TestSupport::CheckDiagsRAII: Unexpected diagnostic message:; 503: severity: kError ; 503: origin: ""Setup()"" ; 503: message: Branch 'col1' is not available from tree 't' in file '/home/vpadulan/Programs/rootproject/rootbuild/makeproxy-error-check-testing/tree/tree; player/test/DisappearingBranch1.root'.; ```. UPDATE:. This was due to a spurious `\n` character in the error message which is not visible when printed by ctest",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16377#issuecomment-2334129931:253,message,message,253,https://root.cern,https://github.com/root-project/root/pull/16377#issuecomment-2334129931,5,['message'],['message']
Integrability,"Just for my curiosity because it's not explained in the commit message: You are adding `include_directories(${ROOT_SOURCE_DIR}/tutorials)` in `test/CMakeLists.txt`, I suppose this is to fix https://github.com/root-project/root/pull/13571#issuecomment-1700410866. I was expecting that this happens when PROOF is disabled - where is that directory added before / otherwise?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13571#issuecomment-1713361097:63,message,message,63,https://root.cern,https://github.com/root-project/root/pull/13571#issuecomment-1713361097,1,['message'],['message']
Integrability,"Just for the record, all the Jenkins builds passed, but I just rewrote the commit message so Jenkins is rebuilding it without any changes. Any objections to get this merged?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/898#issuecomment-325612049:82,message,message,82,https://root.cern,https://github.com/root-project/root/pull/898#issuecomment-325612049,1,['message'],['message']
Integrability,"Just one last thing, can you edit the commit message to be more explicit about what you did? You can mention that the None -> null pointer conversion is no longer implemented in Cppyy, so that we can't pass the result of `Draw` to `AddEntry`. Anyway, `AddEntry` should receive the function object and not None, which is what is implemented now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4072#issuecomment-510413004:45,message,message,45,https://root.cern,https://github.com/root-project/root/pull/4072#issuecomment-510413004,1,['message'],['message']
Integrability,"Just pushed a fix that removes `ROOT_ADD_BUILTIN_DEPENDENCIES`. Note that this branch retains the current race condition in `ROOT_ADD_BUILTIN_DEPENDENCIES`: the external build produces the header files, but the individual source files are not dependent on the outcome of the external build. For example, `TDavixFile.cxx.o` is in reality dependent on `TDavixFile.cxx` and `davix.hpp`; however, if `davix.hpp` is the output of the `DAVIX` external project, there's no CMake dependency forcing `DAVIX` to be built before `TDavixFile.cxx.o`. There *is* a CMake dependency for `libRDAVIX.so` on `DAVIX`. So, we do the library dependencies correctly but not the header file dependencies. This was true before this PR and continues to be true. I'll look into that next.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/323#issuecomment-272958138:243,depend,dependent,243,https://root.cern,https://github.com/root-project/root/pull/323#issuecomment-272958138,6,['depend'],"['dependencies', 'dependency', 'dependent']"
Integrability,"Just realized that #1353 does the switch to the Keras 2.x interface (partially) in the tutorial. Please merge this first, then I'll rebase this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1629#issuecomment-367266407:58,interface,interface,58,https://root.cern,https://github.com/root-project/root/pull/1629#issuecomment-367266407,1,['interface'],['interface']
Integrability,Just rebased to fix a typo in the commit message,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14588#issuecomment-1927660796:41,message,message,41,https://root.cern,https://github.com/root-project/root/pull/14588#issuecomment-1927660796,1,['message'],['message']
Integrability,"Just tested with latest ROOT (master) and roottest (master) with both VS 2019 and VS 2022:; ```; C:\Users\bellenot\build\x64\release>ctest -VV -C Release -R nullderef; UpdateCTestConfiguration from :C:/Users/bellenot/build/x64/release/DartConfiguration.tcl; Parse Config file:C:/Users/bellenot/build/x64/release/DartConfiguration.tcl; Add coverage exclude regular expressions.; UpdateCTestConfiguration from :C:/Users/bellenot/build/x64/release/DartConfiguration.tcl; Parse Config file:C:/Users/bellenot/build/x64/release/DartConfiguration.tcl; Test project C:/Users/bellenot/build/x64/release; Constructing a list of tests; Ignore test: test-tcollex; Ignore test: roottest-cling-parsing-semicolon; Ignore test: roottest-root-rint-TabCom; Ignore test: roottest-root-rint-BackslashNewline; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 972; Start 972: roottest-cling-exception-nullderef-e. 972: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Users/bellenot/build/x64/release/bin/root.exe^-l^-b^-q^--ptrcheck^-e^int*p=nullptr^-e^*p"" ""-DOUT=C:/Users/bellenot/build/x64/release/roottest/cling/exception/nullderef-e.log"" ""-DCWD=C:/Users/bellenot/build/x64/release/roottest/cling/exception"" ""-DRC=1"" ""-DDIFFCMD=C:/Python39-32/python.exe^C:/Users/bellenot/git/roottest/scripts/custom_diff.py"" ""-DSYS=C:/Users/bellenot/build/x64/release"" ""-DENV=ROOTSYS=C:/Users/bellenot/build/x64/release#PYTHONPATH=C:/Users/bellenot/build/x64/release/bin"" ""-P"" ""C:/Users/bellenot/build/x64/release/RootTestDriver.cmake""; 972: Environment variables:; 972: ROOT_HIST=0; 972: Test timeout computed to be: 300; 972: -- TEST COMMAND --; 972: cd C:/Users/bellenot/build/x64/release/roottest/cling/exception; 972: C:/Users/bellenot/build/x64/release/bin/root.exe -l -b -q --ptrcheck -e 'int*p=nullptr' -e '*p'; 972: -- BEGIN TEST OUTPUT --; 972:; 972: (int *) nullptr; 972:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9742#issuecomment-1025965371:915,depend,dependency,915,https://root.cern,https://github.com/root-project/root/issues/9742#issuecomment-1025965371,2,['depend'],['dependency']
Integrability,"Just to add, I think the actual timing gain depends heavily on the use-case and software environment. In the end, for us, this is not even the decisive factor. What is more important is the reduction of noise processes when we do profiling/monitoring and a less heavy burden on process management in the /proc space. Our data taking workflows have O(100) of ""microservices"" that link to ROOT. Just starting up this system created O(1000) calls to ""c++, ... "" to find out some paths. This problem is now essentially gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12613#issuecomment-1496243386:44,depend,depends,44,https://root.cern,https://github.com/root-project/root/pull/12613#issuecomment-1496243386,1,['depend'],['depends']
Integrability,"Just to clarify, the second call is totally fine and the first call is creating a problem for RDF because of https://github.com/root-project/root/issues/10742 . Even then, it seemed weird that calling `EndOfProcessCleanups` twice, and once before the destructor of object at local scope is even called, was ""everything working as intended"". That's why I opened the issue. If Python's or PyROOT's teardown sequence unloads libraries that might be needed by EndOfProcessCleanups then I agree with Vincenzo that maybe the best we can do is run it once before Python's teardown (maybe with a comment that explains the issue, if the scenario in the commit message of https://github.com/root-project/root/commit/7a592f5d62dda6c76f230bfa6fd879e5fa80582a does not really need the early EndOfProcessCleanups call as Vincenzo mentioned).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10753#issuecomment-1155757108:651,message,message,651,https://root.cern,https://github.com/root-project/root/pull/10753#issuecomment-1155757108,1,['message'],['message']
Integrability,"Ks/MacOSX.sdk/usr/include; /Library/Developer/CommandLineTools/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<built-in>"" 1; # 1 ""<built-in>"" 3; # 409 ""<built-in>"" 3; # 1 ""<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. sftnight@macphsft18 ~ % clang++ -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: x86_64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1""; ""/Library/Developer/CommandLineTools/usr/bin/clang"" -cc1 -triple x86_64-apple-macosx14.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=all; -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=2 -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu penryn -tune-cpu generic -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1 -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include -internal-isystem /Library/Developer/CommandLineTools/usr/lib/clang/16/include -internal-externc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorder-init-list -Wno-impl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16494#issuecomment-2373214590:5470,contract,contract,5470,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590,1,['contract'],['contract']
Integrability,"Ks/MacOSX12.1.sdk/usr/include -compilerI/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -I/Users/suter_a/Applications/root/root_exec/include -I/opt/local/include -I/Users/suter_a/Applications/musrfit/src/include -I/Users/suter_a/Applications/musrfit/src/classes PUserFcnBase.h /Users/suter_a/Applications/musrfit/src/include/PUserFcnBaseLinkDef.h; cd /Users/suter_a/Applications/musrfit/build && /opt/local/bin/cmake -E cmake_depends ""Unix Makefiles"" /Users/suter_a/Applications/musrfit /Users/suter_a/Applications/musrfit/src/classes /Users/suter_a/Applications/musrfit/build /Users/suter_a/Applications/musrfit/build/src/classes /Users/suter_a/Applications/musrfit/build/src/classes/CMakeFiles/PUserFcnBase.dir/DependInfo.cmake --color=; Dependee ""/Users/suter_a/Applications/musrfit/build/src/classes/CMakeFiles/PUserFcnBase.dir/DependInfo.cmake"" is newer than depender ""/Users/suter_a/Applications/musrfit/build/src/classes/CMakeFiles/PUserFcnBase.dir/depend.internal"".; Dependee ""/Users/suter_a/Applications/musrfit/build/src/classes/CMakeFiles/CMakeDirectoryInformation.cmake"" is newer than depender ""/Users/suter_a/Applications/musrfit/build/src/classes/CMakeFiles/PUserFcnBase.dir/depend.internal"".; Scanning dependencies of target PUserFcnBase; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f src/classes/CMakeFiles/PUserFcnBase.dir/build.make src/classes/CMakeFiles/PUserFcnBase.dir/build; ... And all the further root_generate_dictionary work as well. Does this help?. Cheers,; Andreas. PS: Machine I have tested it on: ; Darwin Kernel Version 21.3.0: Wed Jan 5 21:37:58 PST 2022; root:xnu-8019.80.24~20/RELEASE_ARM64_T8101 arm64. ________________________________. Paul Scherrer Institut. Dr. Andreas Suter; Laboratory for Muon-Spin Spectroscopy; Swiss Muon Source SµS; WLGA/119; Forschungsstrasse 111; CH - 5232 Villigen PSI; Switzerland. Tel.: +41 (0)56 310 4238; ________________________________. > On 7 Mar 2022, at 20:08, Axel Naum",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10062#issuecomment-1061481610:4496,depend,depend,4496,https://root.cern,https://github.com/root-project/root/issues/10062#issuecomment-1061481610,1,['depend'],['depend']
Integrability,"L=OFF -Dminuit:BOOL=ON -Dminuit2:BOOL=ON -Dmlp:BOOL=OFF -Dmonalisa:BOOL=OFF -Dmysql:BOOL=OFF -Dodbc:BOOL=OFF -Dopengl:BOOL=OFF -Doracle:BOOL=OFF -Dpgsql:BOOL=OFF -Dpythia6:BOOL=OFF -Dpythia8:BOOL=OFF -Dqt:BOOL=OFF -Dqtgsi:BOOL=OFF -Dr:BOOL=OFF -Drfio:BOOL=OFF -Droofit:BOOL=ON -Droot7:BOOL=OFF -Druby:BOOL=OFF -Dsapdb:BOOL=OFF -Dshadowpw:BOOL=OFF -Dspectrum:BOOL=OFF -Dsqlite:BOOL=OFF -Dsrp:BOOL=OFF -Dssl:BOOL=OFF -Dtable:BOOL=OFF -Dtbb:BOOL=OFF -Dtcmalloc:BOOL=OFF -Dtmva:BOOL=OFF -Dunuran:BOOL=ON -Dvc:BOOL=OFF -Dvdt:BOOL=ON -Dveccore:BOOL=OFF -Dvmc:BOOL=OFF -Dwebui:BOOL=OFF -Dx11:BOOL=OFF -Dxft:BOOL=OFF -Dxml:BOOL=ON -Dxrootd:BOOL=OFF -Dpyroot:BOOL=ON -DCMAKE_CXX_STANDARD:STRING=17; ```; I got the following warning when building Celeritas' root dictionary (possibly unimportant):; ```; [1/4] Generating CeleritasRootInterface.cxx, libceleritas_io_rdict.pcm, libceleritas_io.rootmap; Disabling gnu++: clang has no __float128 support on this target!; Disabling gnu++: clang has no __float128 support on this target!; ```; and at runtime:; ```; info: Opening ROOT file at /ccs/home/s3j/.local/src/celeritas-summit/test/io/data/geant-exporter-data.root; Disabling gnu++: clang has no __float128 support on this target!; Error in <TCling::RegisterModule>: Dictionary trigger function for libCore not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libMathCore not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libThread not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libRIO not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libNet not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libTree not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libceleritas_io not found; Error in <TClass::LoadClassInfo>: no interpreter information for class celeritas::ImportData is available even though it has a TClass initialization routine.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10162#issuecomment-1109820171:3660,rout,routine,3660,https://root.cern,https://github.com/root-project/root/issues/10162#issuecomment-1109820171,1,['rout'],['routine']
Integrability,"LGTM if the bots are green. I'd expect, in long term, to avoid calling the entire routine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/912#issuecomment-326300629:82,rout,routine,82,https://root.cern,https://github.com/root-project/root/pull/912#issuecomment-326300629,1,['rout'],['routine']
Integrability,"LGTM now, but as we've discussed offline, it might be useful to put the RNG adaptor in `TMath` or similar, so that other parts of ROOT may use `TRandom{1,2,3}` where a standard generator is needed, or even add the proper interfaces directly into `TRandom{1,2,3}` so that they can be used directly to replace a standard generator.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1628#issuecomment-365628534:221,interface,interfaces,221,https://root.cern,https://github.com/root-project/root/pull/1628#issuecomment-365628534,1,['interface'],['interfaces']
Integrability,"LGTM, I would perhaps change the message of the first commit: ""We enclose the parallel_for and parallel_reduce invocation in a task_arena::isolate because we want to prevent work stealing."" since it is not work stealing in general what we want to prevent (it will still happen), but the interleaving of two first-level tasks in the same thread/slot, by making sure a worker thread will not pick other tasks while waiting for the second-level tasks to finish.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2934#issuecomment-436625130:33,message,message,33,https://root.cern,https://github.com/root-project/root/pull/2934#issuecomment-436625130,1,['message'],['message']
Integrability,"Last argument in strncpy is length of destination buffer and should not depend from length of source string. Fixes warning from gcc14:; ```; git/webgui/core/meta/src/TClass.cxx:701:20: warning: ‘char* strncpy(char*, const char*, size_t)’ specified bound depends on the length of the source argument [-Wstringop-truncation]; 701 | strncpy(line + kvalue, *ppointer, std::min( i, kline - kvalue));; | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; git/webgui/core/meta/src/TClass.cxx:691:20: note: length computed here; 691 | i = strlen(*ppointer);; | ~~~~~~^~~~~~~~~~~; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16358:72,depend,depend,72,https://root.cern,https://github.com/root-project/root/pull/16358,2,['depend'],"['depend', 'depends']"
Integrability,"Last push only fixed a typo in the commit message (that I found when opening the PR but forgot to push); cancelled the CI jobs, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15001#issuecomment-2003939094:42,message,message,42,https://root.cern,https://github.com/root-project/root/pull/15001#issuecomment-2003939094,1,['message'],['message']
Integrability,"Latest commit addresses all comments. Examples from the build nodes:; Failure example: [ROOT-performance-centos8-multicore/default](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/109377/console) (pyspark is not installed on this system); ```; 13:04:01 -- Looking for PySpark; 13:04:01 -- Looking for PySpark dependency: Java; 13:04:01 -- Found Java: /usr/bin/java (found suitable version ""1.8.0.275"", minimum required is ""1.8"") found components: Runtime ; 13:04:01 -- Found Java /usr/bin/java; 13:04:01 -- Java version 1.8.0_275; 13:04:01 -- Python package 'pyspark' could not be imported with /usr/bin/python; 13:04:01 Traceback (most recent call last):; 13:04:01 File ""<string>"", line 1, in <module>; 13:04:01 ModuleNotFoundError: No module named 'pyspark'; 13:04:01 ; 13:04:01 CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; 13:04:01 Could NOT find PySpark (missing: PySpark_HOME) (Required is at least; 13:04:01 version ""2.4""); 13:04:01 Call Stack (most recent call first):; 13:04:01 /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); 13:04:01 cmake/modules/FindPySpark.cmake:55 (find_package_handle_standard_args); 13:04:01 cmake/modules/SearchInstalledSoftware.cmake:16 (_find_package); 13:04:01 cmake/modules/SearchInstalledSoftware.cmake:1876 (find_package); 13:04:01 CMakeLists.txt:219 (include); ```. Success example: [ROOT-fedora30/default](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/109385/consoleFull) ; ```; 13:05:04 -- Looking for PySpark; 13:05:04 -- Looking for PySpark dependency: Java; 13:05:04 -- Found Java: /usr/bin/java (found suitable version ""1.8.0.252"", minimum required is ""1.8"") found components: Runtime ; 13:05:04 -- Found Java /usr/bin/java; 13:05:04 -- Java version 1.8.0_252; 13:05:04 -- Found PySpark: /usr/local/lib/python3.7/site-packages/pyspark (found suitable version ""3.0.1"", minimum required is ""2.4"") ; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7371#issuecomment-792725234:334,depend,dependency,334,https://root.cern,https://github.com/root-project/root/pull/7371#issuecomment-792725234,3,"['depend', 'message']","['dependency', 'message']"
Integrability,Latest commit addresses suggestions (shortened build option name) and improves on the logic to find pyspark and its dependencies. This is ready for review now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7371#issuecomment-791928486:116,depend,dependencies,116,https://root.cern,https://github.com/root-project/root/pull/7371#issuecomment-791928486,1,['depend'],['dependencies']
Integrability,"Launching the Python tutorials from the 'tutorials/launcher.py' module injected; the `__main__` namespace in the tutorial itself. In general it is not a problem,; but it can sometimes hide errors like the one fixed by; https://github.com/root-project/root/pull/10177 . Using a rootlogon file serves; the same purpose and the tutorials can thus be launched by simply calling; 'python tutorialname.py'.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10207:71,inject,injected,71,https://root.cern,https://github.com/root-project/root/pull/10207,1,['inject'],['injected']
Integrability,"Let me quote my answer from yesterday:. > That commit is about PR builds; in this issue, I'm discussing builds after pushes to branches. So maybe PR builds are now doing better than before, but that's entirely besides the point: A build triggered by a push to a branch should build exactly what was pushed, not some later commit. > AFAICT they still use a `git pull` of the branch name, which may get you different commits depending on when the job is scheduled to start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14061#issuecomment-1953621192:423,depend,depending,423,https://root.cern,https://github.com/root-project/root/issues/14061#issuecomment-1953621192,1,['depend'],['depending']
Integrability,"Let's see how this goes now that we are back on the old externals... I would prefer avoiding the smart pointers with ROOT 6 interfaces, because I'm sure there are corner cases where it will lead to problems, and I pointed out some of it in previous comments. Other than that, I once this PR is ready for merge, the typos, etc, should be amended into the right commits.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1073#issuecomment-333487667:124,interface,interfaces,124,https://root.cern,https://github.com/root-project/root/pull/1073#issuecomment-333487667,1,['interface'],['interfaces']
Integrability,"Like this, people can get the test support library for using `ROOT_ADD_GTEST` with the automatic ROOT output checking, without having to build all of ROOTs tests itself (`testing=ON`). Off by default to not force a build dependency on gtest. Closes #16612. Important to fix the LCG and CMSSW nightlies.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16625:221,depend,dependency,221,https://root.cern,https://github.com/root-project/root/pull/16625,1,['depend'],['dependency']
Integrability,"Link to compilation error:; https://epsft-jenkins.cern.ch/view/ROOT%20Nightly/job/root-nightly-master/1977/LABEL=mac1012,SPEC=noimt/parsed_console/. The error is due to a bug in clang3.5, reproducible in isolation:; https://godbolt.org/z/jtYXv6. The workaround is to avoid specifying the template parameters of a; template base class -- the full type is injected in the derived class; anyway (thanks Axel!).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3098:354,inject,injected,354,https://root.cern,https://github.com/root-project/root/pull/3098,1,['inject'],['injected']
Integrability,"Link with patch is broken. I will close the issue, since users can use it via the GSL interface",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14564#issuecomment-1940728327:86,interface,interface,86,https://root.cern,https://github.com/root-project/root/issues/14564#issuecomment-1940728327,1,['interface'],['interface']
Integrability,"List of relevant PR missing in the release notes for 6.24. - XROOTD #7380 ; - TMVA : optimizer options : #7318; - ChangeLabel: #7294; - Buffer Merger improvements : #7286; - Eve7: The first implementation of log view #7270; - TMVA: Update Keras tutorials using tensorflow.keras #7255; - builtins: Zstd 1.4.8 #7214; - RooFit: warning message for RooAddPdf without norm set: #7129 ; - RooFit: Improve plotting of RooBinSamplingPdf. #7110; - Hist: Fixes and improvements for the TKDE class #7096; - Fix a memory leak in TF1::Copy #7035; - Fix for new version of cudnn version 8 #7003; - Minuit2: Use Numerical gradient as input to the seed generator when using external gradients in Minuit2 #7001; - TF1: Enable using Automatic differentiation for computing Parameter Gradient in TF1 #6956; - Math: Fix correction factor for Confidence level in ROOT::Fit::FitResult #6902; - TMVA: Implement MethodCategory::GetMulticlassValues() #6886; - Hist: Add THistRange class defining a generic histogram range and its iterator #6795; - TMVA: Support for Keras 2.4 (tf.keras) #6793; - Eve-7: Add example of calorimeter representation of REveDataCollection #6783; - Math: Fix BinData copy constructor #6776; - [tmva] Add possibility to make ROC curve for the training dataset from TMVA::Factory #6724; - Math: Changes in TRandom3::GetSeed #6723; - Minuit2: new Minuit2 logging #6705; - ntuple] Several interface improvements (unique pointer, const) #6655; - Optimize TPrincipal::AddRow function #6630",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7858:333,message,message,333,https://root.cern,https://github.com/root-project/root/issues/7858,2,"['interface', 'message']","['interface', 'message']"
Integrability,Load dependent libraries as part of AutoLoading.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5486:5,depend,dependent,5,https://root.cern,https://github.com/root-project/root/pull/5486,1,['depend'],['dependent']
Integrability,"Loading a library that is needed to resolve symbols (as done by this PR) means that libraries linked against that library are loaded as a side-effect, without TCling / TSystem seeing it. TClingTest's `gInterpreter->GetSharedLibDeps(""libTreePlayer"")` thus doesn't report all actual library dependencies but only a subset. This isn't an issue for explicit linking, though (neither for implicit linking, which will load all libraries separately and thus enumerate them), but it's a potential correctness concern and an inconsistency for explicit vs implicit linking / loading.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8017#issuecomment-953811441:289,depend,dependencies,289,https://root.cern,https://github.com/root-project/root/pull/8017#issuecomment-953811441,1,['depend'],['dependencies']
Integrability,Lock is now outside the loop in teh case of the tensor interface to evaluate a model,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16616#issuecomment-2399195352:55,interface,interface,55,https://root.cern,https://github.com/root-project/root/pull/16616#issuecomment-2399195352,1,['interface'],['interface']
Integrability,"Log when running with valgrind:. ```; Conditional jump or move depends on uninitialised value(s); in TUrl::TUrl(char const*, bool) in /opt/root_src/core/base/src/TUrl.cxx:76; 1: TStorage::UpdateIsOnHeap(unsigned int const volatile&, unsigned int volatile&) in /opt/root_src/core/base/inc/TStorage.h:124; 2: TObject::TObject() in /opt/root_src/core/base/inc/TObject.h:260; 3: TUrl::TUrl(char const*, bool) in /opt/root_src/core/base/src/TUrl.cxx:76; 4: TSystem::FindHelper(char const*, void*) in /opt/root_src/core/base/src/TSystem.cxx:746; 5: TUnixSystem::OpenDirectory(char const*) in /opt/root_src/core/unix/src/TUnixSystem.cxx:1362; 6: TCling::LoadLibraryMap(char const*) in /opt/root_src/core/metacling/src/TCling.cxx:5737; 7: TCling::Initialize() in /opt/root_src/core/metacling/src/TCling.cxx:1660; 8: TROOT::InitInterpreter() in /opt/root_src/core/base/src/TROOT.cxx:2116; 9: ROOT::Internal::GetROOT2() in /opt/root_src/core/base/src/TROOT.cxx:389; 10: ROOT::GetROOT() in /opt/root_src/core/base/src/TROOT.cxx:471; 11: TApplication::TApplication(char const*, int*, char**, void*, int) in /opt/root_src/core/base/src/TApplication.cxx:153; 12: TRint::TRint(char const*, int*, char**, void*, int, bool, bool) in /opt/root_src/core/rint/src/TRint.cxx:174; 13: main in /opt/root_src/main/src/rmain.cxx:81; Uninitialised value was created by a stack allocation 1: TSystem::FindHelper(char const*, void*) in /opt/root_src/core/base/src/TSystem.cxx:734. Conditional jump or move depends on uninitialised value(s); in TUrl::TUrl(char const*, bool) in /opt/root_src/core/base/src/TUrl.cxx:76; 1: TStorage::UpdateIsOnHeap(unsigned int const volatile&, unsigned int volatile&) in /opt/root_src/core/base/inc/TStorage.h:124; 2: TObject::TObject() in /opt/root_src/core/base/inc/TObject.h:260; 3: TUrl::TUrl(char const*, bool) in /opt/root_src/core/base/src/TUrl.cxx:76; 4: TApplication::GetOptions(int*, char**) in /opt/root_src/core/base/src/TApplication.cxx:479; 5: TApplication::TApplication(char const*,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7236#issuecomment-1949072327:63,depend,depends,63,https://root.cern,https://github.com/root-project/root/issues/7236#issuecomment-1949072327,1,['depend'],['depends']
Integrability,"Looking at the error message, it seems `FWCoreFramework` has not been built yet when trying to build `CalibTrackerRecords`. Do you know why that is, has there been another error? This *may* propagate to weird redefinition errors...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11765#issuecomment-1326547512:21,message,message,21,https://root.cern,https://github.com/root-project/root/issues/11765#issuecomment-1326547512,1,['message'],['message']
Integrability,"Looking at the history, commit https://github.com/root-project/root/commit/378f961faf3ccc2f3272c27c7f45b38479ad3693#diff-b7e4b08bc7e019d35a141d4c27ebc7e748b5f4580d6f9d840dda0c70cc185cbe is actually wrong, it replaced a public dependency on Vdt with a private (and build-time only) dependency. The last time I touched this file was in commit 7d88a0fc8b0fa604b5fee0174fdac88885cc6f5f, when we had something similar to your option 2 in place.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11797#issuecomment-1339095394:226,depend,dependency,226,https://root.cern,https://github.com/root-project/root/issues/11797#issuecomment-1339095394,2,['depend'],['dependency']
Integrability,"Looking back at my emails, I found that the routine comes from the LHCb RICH code and it was proposed to GSL, but it was never merged there at the end.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6900#issuecomment-737154393:44,rout,routine,44,https://root.cern,https://github.com/root-project/root/issues/6900#issuecomment-737154393,1,['rout'],['routine']
Integrability,"Looking deeper - I think the correct approach would be to remove `ROOT_ADD_BUILTIN_DEPENDENCIES` and just depend on the `BUILD_BYPRODUCTS` attribute. Reduces a bunch of custom code, making the ROOT build easier to understand (and does a small reduction in the complexity of the build).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/323#issuecomment-272890943:106,depend,depend,106,https://root.cern,https://github.com/root-project/root/pull/323#issuecomment-272890943,1,['depend'],['depend']
Integrability,"Looking into it a bit more, I think the right fix is indeed to move `CheckCompiler` above `RootBuildOptions`, and then fix the problem with Windows. That problem is a circular dependency:. 1. `RootBuildOptions.cmake` depends on `CheckCompiler.cmake`, because e.g. the default value of the `root7` option (set in `RootBuildOptions`) depends on the value of `CMAKE_CXX_STANDARD` (set in `CheckCompiler`); 2. however, `CheckCompiler.cmake` includes `SetUpWindows.cmake`, which uses `CMAKE_INSTALL_INCLUDEDIR` in a couple of install commands. `CMAKE_INSTALL_INCLUDEDIR` is set by `RootInstallDirs` which is included by `RootBuildOptions`, completing the circle. @amadio suggested moving the `install` commands Windows needs from `SetUpWindows` to `RootConfiguration`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6406#issuecomment-696701809:176,depend,dependency,176,https://root.cern,https://github.com/root-project/root/issues/6406#issuecomment-696701809,3,['depend'],"['dependency', 'depends']"
Integrability,"Looks alright, but @Axel-Naumann or @couet need to ack the renaming of files. Why is it necessary to use `DEPENDENCIES` rather than `LIBRARIES`? As far as I know, that just adds an explicit dependency on the dictionary generation in addition to the library linking.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2999#issuecomment-440272694:106,DEPEND,DEPENDENCIES,106,https://root.cern,https://github.com/root-project/root/pull/2999#issuecomment-440272694,2,"['DEPEND', 'depend']","['DEPENDENCIES', 'dependency']"
Integrability,"Lorenzo wanted to move all MathMore stuff into RooFitMore. Did you try to add this dependency only to RooFitMore? If that's not enough, there stuff needs to be moved to RooFitMore.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5439#issuecomment-618424398:83,depend,dependency,83,https://root.cern,https://github.com/root-project/root/pull/5439#issuecomment-618424398,1,['depend'],['dependency']
Integrability,Made TFile Error message more accurate,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10656:17,message,message,17,https://root.cern,https://github.com/root-project/root/pull/10656,1,['message'],['message']
Integrability,"Made it explicit that the builtin GSL build should use `-fPIC`. Without it the build, at least on SLC6 with GCC 6.2 would fail to link against the generated GSL library, with messages like:. ```; [100%] Linking CXX shared library ../../lib/libMathMore.so; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(blas.o): relocation R_X86_64_32 against `.rodata' can not be used when making a shared object; recompile with -fPIC; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(deriv.o): relocation R_X86_64_32 against `.rodata' can not be used when making a shared object; recompile with -fPIC; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(eval.o): relocation R_X86_64_32 against `.rodata' can not be used when making a shared object; recompile with -fPIC; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(lt1-init.o): relocation R_X86_64_32 against `.rodata' can not be used when making a shared object; recompile with -fPIC; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(integ.o): relocation R_X86_64_32 against `.rodata' can not be used when making a shared object; recompile with -fPIC; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(error.o): relocation R_X86_64_32 against `.rodata' can not be used when making a shared object; recompile with -fPIC; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(stream.o): relocation R_X86_64_32 against `.rodata' can not be used when making a shared object; recompile with -fPIC; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(strerror.o): relocation R_X86_64_32S against `.rodata' can not be used when making a shared object; recompile with -fPIC; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(qag.o): relocation R_X86_64_32S against",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1996:175,message,messages,175,https://root.cern,https://github.com/root-project/root/pull/1996,1,['message'],['messages']
Integrability,"Made the `RIO` library's dependence on `libatomic` public. Unfortunately the previous incantation was not transitive. The clients were not set up to link against libatomic themselves as well. And with [TFile.h](https://github.com/root-project/root/blob/master/io/io/inc/TFile.h#L129-L132) publicly exposing a dependence on `std::atomic`, and multiple classes implemented in the project that inherit from `TFile` (and are built into other libraries), this really is a must. This ties to both #4561 (where I described ARM's explicit dependence on `libatomic` ""in certain situations""), and also to #6432 (ROOT's CMake configuration could really do with a significant cleanup/rewrite). Unfortunately such errors will keep coming back if we can not set up a centralised test for this. Any chance that that could be done?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6609:25,depend,dependence,25,https://root.cern,https://github.com/root-project/root/pull/6609,3,['depend'],['dependence']
Integrability,Main changes are done - I fully remove RDrawingOpts and simplify class organizations around drawables. I need some more days to make I/O for RCanvas . I introduced RIOShared class for that. It is wrapper for shared_ptr.; There is method with collects all these objects from RCanvas and one could reassign shared_ptr after reading of RCanvas. This is the idea. Half of tutorials already works,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4352#issuecomment-531247017:196,wrap,wrapper,196,https://root.cern,https://github.com/root-project/root/pull/4352#issuecomment-531247017,1,['wrap'],['wrapper']
Integrability,Make IMT an optional dependency.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5448:21,depend,dependency,21,https://root.cern,https://github.com/root-project/root/pull/5448,1,['depend'],['dependency']
Integrability,Make ReadClass error message more verbose,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/911:21,message,message,21,https://root.cern,https://github.com/root-project/root/pull/911,1,['message'],['message']
Integrability,Make TRandom compatible with the std UniformRandomBitGenerator interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7979:63,interface,interface,63,https://root.cern,https://github.com/root-project/root/issues/7979,1,['interface'],['interface']
Integrability,"Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g.; ```c++; [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`; void g() { f(); }. f(); // but this should not; ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:; - [X] tested changes locally; - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12654:101,depend,depends,101,https://root.cern,https://github.com/root-project/root/pull/12654,3,"['Wrap', 'depend', 'wrap']","['WrapInput', 'depends', 'wrapped']"
Integrability,"Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g.; ```c++; [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`; void g() { f(); }. f(); // but this should not; ```. This PR is a backport of #12654.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12703:101,depend,depends,101,https://root.cern,https://github.com/root-project/root/pull/12703,2,"['depend', 'wrap']","['depends', 'wrapped']"
Integrability,Make configuration fail when dependencies are not found and fail-on-missing=ON,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3975:29,depend,dependencies,29,https://root.cern,https://github.com/root-project/root/pull/3975,1,['depend'],['dependencies']
Integrability,Make fit chunking dependent on IMT pool size,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2039:18,depend,dependent,18,https://root.cern,https://github.com/root-project/root/pull/2039,1,['depend'],['dependent']
Integrability,Make sure the CI build all math packages (even GPL ones) in PR builds and add also tmva-sofie and r interface on node where ; these can be built (where protobuf and r installations exist),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14836:100,interface,interface,100,https://root.cern,https://github.com/root-project/root/pull/14836,1,['interface'],['interface']
Integrability,"Make sure the y position of a window is not negative (hiding the title bar) and add missing dependencies on the `iconv`, `glib`, and `gdk` source code",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9866:92,depend,dependencies,92,https://root.cern,https://github.com/root-project/root/pull/9866,1,['depend'],['dependencies']
Integrability,Make sure we're using the macOS-native framework version in the OpenGL case. See:; * https://cmake.org/cmake/help/latest/module/FindOpenGL.html#macos-specific; * https://github.com/root-project/root/blob/master/cmake/modules/SearchInstalledSoftware.cmake#L22. This avoids indirectly picking up a X11 dependency by using some other OpenGL installed on the system.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15435:300,depend,dependency,300,https://root.cern,https://github.com/root-project/root/pull/15435,1,['depend'],['dependency']
Integrability,"Many people pythonized the RooWorkspace themselves by adding a new; attribute `_import` that calls getattr(self, ""import"") under the; hood. However, `_import` is now the reference to the original cppyy; overload, and resetting it with a wrapper around `import` would cause; infinite recursions! We prevent resetting that attribute here, which; is a clearer error to the user than an infinite call stack involving; the internal pythonization code. The ""official"" way of calling `RooWorkspace::import()` in PyROOT is now `RooWorkspace.Import`. Should be backported to the 6.26 release if possible, so that people are not caught by surprise.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9896:237,wrap,wrapper,237,https://root.cern,https://github.com/root-project/root/pull/9896,1,['wrap'],['wrapper']
Integrability,"Many thanks. Jiang Yi ***@***.***> 于 2023年6月5日周一 05:15写道：. > @jalopezg-git <https://github.com/jalopezg-git> Sorry for the late reply.; > I am still trying to fix some corner cases while avoiding too intrusive; > changes. I will update the pull request soon.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/pull/11265#issuecomment-1576431258>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ACN3SSVEF3GLBPRSV2CHAELXJWPUNANCNFSM573UE76Q>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11265#issuecomment-1577084075:572,Message,Message,572,https://root.cern,https://github.com/root-project/root/pull/11265#issuecomment-1577084075,1,['Message'],['Message']
Integrability,"Mathcore has no dependency on libRint, so this is maybe for Vassil to understand what is happening with the modules.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10271#issuecomment-1083045604:16,depend,dependency,16,https://root.cern,https://github.com/root-project/root/issues/10271#issuecomment-1083045604,1,['depend'],['dependency']
Integrability,Maybe I was not precise - compiler cannot find `snprintf`. It is seen in error messages,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11861#issuecomment-1348105789:79,message,messages,79,https://root.cern,https://github.com/root-project/root/pull/11861#issuecomment-1348105789,1,['message'],['messages']
Integrability,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, ....; * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this; ```c++; MN_INFO_MSG(""MnHesse: Some foo happened"");; [...]; MN_INFO_MSG(""MnHesse: Some bar happened"");; [...]; int n = 5;; MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");; ```; Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope.; ```c++; MnPrint print(""MnHesse""); // appears once at the beginning of a long method; [...]; print.Info(""Some foo happened"");; [...]; print.Info(""Some bar happened"");; [...]; int n = 5;; print.Info(""Frobinated"", n, ""glorps"");; ```; The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step.; * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read.; * In very few isolated cases I removed redundant messages. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-719713799:305,message,messages,305,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-719713799,3,['message'],['messages']
Integrability,Maybe it can be made more clear but the message comes from [here](https://github.com/root-project/root/blob/bd200315c50ac1520f75f959a852c6d3333f8aa9/core/base/src/TApplication.cxx#L147). I guess this error can occur for many more reasons than a macro called `main.cpp`. So it will not be easy to make it clearer there. Maybe @Axel-Naumann or @pcanal can comment.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11707#issuecomment-1315426448:40,message,message,40,https://root.cern,https://github.com/root-project/root/issues/11707#issuecomment-1315426448,1,['message'],['message']
Integrability,"Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZN5cling7runtime8internal15LifetimeHandlerD1Ev' unresolved while linking function '_GLOBAL__sub_I_cling_module_16'!; You are probably missing the definition of cling::runtime::internal::LifetimeHandler::~LifetimeHandler(); Maybe you need to load the corresponding shared library?; root [3] .q. $ root -l; root [0] ROOT::VecOps::RVec<double> v {2., 3., 1.};; root [1] auto firstTwo2 = Take(v, 2);; ROOT_prompt_1:1:1: error: Syntax error; auto firstTwo2 = Take(v, 2);; ^; FunctionDecl 0x2b43f38 <input_line_9:1:1, ROOT_prompt_1:3:1> input_line_9:1:6 __cling_Un1Qu31 'void (void *)'; |-ParmVarDecl 0x2b43e80 <col:22, col:28> col:28 vpClingValue 'void *'; |-CompoundStmt 0x2b442c0 <col:42, ROOT_prompt_1:3:1>; | |-DeclStmt 0x2b442a0 <line:1:1, col:28>; | | `-VarDecl 0x2b44018 <col:1, col:27> col:6 firstTwo2 'auto' cinit; | | `-CallExpr 0x2b44270 <col:18, col:27> '<dependent type>'; | | |-DeclRefExpr 0x2b441f0 <col:18> '<dependent type>' lvalue Var 0x2b44158 'Take' '<dependent type>'; | | |-DeclRefExpr 0x2b44230 <col:23> 'ROOT::VecOps::RVec<double>':'ROOT::VecOps::RVec<double>' lvalue Var 0x2230488 'v' 'ROOT::VecOps::RVec<double>':'ROOT::VecOps::RVec<double>'; | | `-IntegerLiteral 0x2b44250 <col:26> 'int' 2; | `-NullStmt 0x2b442b8 <line:2:1>; |-AnnotateAttr 0x2b440f0 <<invalid sloc>> R""ATTRDUMP(__ResolveAtRuntime)ATTRDUMP""; `-AnnotateAttr 0x2b441c0 <<invalid sloc>> R""ATTRDUMP(__ResolveAtRuntime)ATTRDUMP""; <<<NULL>>>; root [2] .q. ```. ### Setup. 1. ROOT version; * 6.22/08. ```; ROOT Version: 6.22/08; Built for linuxx8664gcc on Mar 10 2021, 14:20:04; From tags/v6-22-08@v6-22-08; ```. * 6.25/01; ```; ROOT Version: 6.25/01; Built for linuxx8664gcc on Jan 01 1980, 00:00:00; From @; ```. 2. Operating system: NixOS, a linux distribution; * `nix-info -m`; - system: `""x86_64-linux""`; - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`; - multi-user?: `yes`; - sandbox: `ye",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9261:10690,depend,dependent,10690,https://root.cern,https://github.com/root-project/root/issues/9261,3,['depend'],['dependent']
Integrability,"Memory leak in TFile::WriteObjectAny, depending on data type",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7236:38,depend,depending,38,https://root.cern,https://github.com/root-project/root/issues/7236,1,['depend'],['depending']
Integrability,"Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description).; It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:; ```c++; // runNumIntValidation.C. #include <RooFormulaVar.h>; #include <RooNumIntConfig.h>; #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label); {; RooRealVar x{""x"", ""x"", 0, 10};; RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;; RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {; cfg.method2D().setLabel(label.c_str());; }; if (ndim == 1) {; cfg.method1D().setLabel(label.c_str());; }. RooArgSet iset{x};; if (ndim > 1); iset.add(y);; std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};; double val = integ->getVal();; std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;; }. void runNumIntValidation(); {; RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};; std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {; testIntegrationMethod(1, label);; }. for (auto const &label : methods2d) {; testIntegrationMethod(2, label);; }; }; ```. The output with this PR is the same as with ROOT master:; ```; RooIntegrator1D:; 488.294986988088. RooSegmentedIntegrator1D:; 488.294680086881. RooAda",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13384:328,integrat,integration,328,https://root.cern,https://github.com/root-project/root/pull/13384,2,['integrat'],['integration']
Integrability,Merged locally without using GitHub's interface.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1809#issuecomment-380144057:38,interface,interface,38,https://root.cern,https://github.com/root-project/root/pull/1809#issuecomment-380144057,1,['interface'],['interface']
Integrability,Merged master into feature branch to integrate new `ntuple_types.cxx` test,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5619#issuecomment-634876552:37,integrat,integrate,37,https://root.cern,https://github.com/root-project/root/pull/5619#issuecomment-634876552,1,['integrat'],['integrate']
Integrability,"Merged, thanks! I applied the patch locally, so GitHub's interface got confused. Closing this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/891#issuecomment-325422715:57,interface,interface,57,https://root.cern,https://github.com/root-project/root/pull/891#issuecomment-325422715,1,['interface'],['interface']
Integrability,"Merging this depends on https://github.com/root-project/root/pull/13273, so marking as draft. FWIW the roottest failures are because some references need updates (https://github.com/root-project/roottest/pull/992), but not needed for testing here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13850#issuecomment-1761301310:13,depend,depends,13,https://root.cern,https://github.com/root-project/root/pull/13850#issuecomment-1761301310,1,['depend'],['depends']
Integrability,Message Passing Interface for ROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/730:0,Message,Message,0,https://root.cern,https://github.com/root-project/root/pull/730,2,"['Interface', 'Message']","['Interface', 'Message']"
Integrability,Message from Windows build is misleading - build was done without any error,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10688#issuecomment-1144545822:0,Message,Message,0,https://root.cern,https://github.com/root-project/root/pull/10688#issuecomment-1144545822,1,['Message'],['Message']
Integrability,"Message produced by JSROOT and printed out in the qtweb plugin. It is side effect of canvas rendering in the beginning when HTML elements not yet fully layouted. To disable such debug messages, one should insert following line into `ExampleMain.cpp` line:. ROOT::Experimental::RLogManager::Get().SetVerbosity(ROOT::Experimental::ELogLevel::kFatal);. QApplication myapp(argc, argv2); // Qt application. And also add include of:. #include ""ROOT/RLogger.hxx""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14300#issuecomment-1876985250:0,Message,Message,0,https://root.cern,https://github.com/root-project/root/issues/14300#issuecomment-1876985250,2,"['Message', 'message']","['Message', 'messages']"
Integrability,Messages are not identical - only reference on the issue on `root.cern` website.; `TROOT::PrintWebIssuseWarning()` will have to print different output.; But I will try to add such method in following PR. In `TRootBrowser::ExecPlugin` IsWebGUI is checked. I will add check for gROOT->IsWebDisplay() . `rootbrowse.py` invokes default TBrowser - checks already done in correspondent factory classes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14241#issuecomment-1899923978:0,Message,Messages,0,https://root.cern,https://github.com/root-project/root/pull/14241#issuecomment-1899923978,1,['Message'],['Messages']
Integrability,Methods from TH1 that are using GetNbinsX and GetNbinsY that do not make sense for a TH2Poly and will compute sometiung wrong. They are re-implemented now in TH2Poly and an error message is printed. . This fixes ROOT-7139,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3904:179,message,message,179,https://root.cern,https://github.com/root-project/root/pull/3904,1,['message'],['message']
Integrability,"Minuit migrad minimization: 1. the setup phase where the initial gradient is calculated and 2. the line search phases. To make the above possible, a few bugs had to be fixed:; - `RooAbsL` classes have `evaluatePartition` which allows you to specify the range of events and components over which to evaluate the likelihood. This had some bugs: the extended term and possible subsidiary components were added for each partition, leading to N duplicates (for N partitions). Commits 3db2e0dd36478813cfb534451f459348e8d90da9 and c2a8bc9df029f65ee575e140825af6c509860538.; - As a result of this fix, which reorders some terms in the sum, the LikelihoodGradientJob test was failing for a specific case due to increased floating point differences. We would like to add back in an option for retaining bit-wise exact same results in the future, but since the minimization still converges to the same value within the desired precision, for now we leave it like this, since the user can still pick the old ways if they prefer their exact old results. Commit b7f7fa7b705e2dfb767187dce3f6a32275f30d9e.; - `LikelihoodJob` had a bug where it didn't reset its `result` sum variable to zero before doing a new sum. Commits 042e1577d8c303d532016537e7467d6e2fbfcd9c and 44197a2a64f77b47587e5ee200d360c4514b8098. Finally, I made a mini optimization in `LikelihoodJob` by using `publish_from_master_to_workers` more efficiently, which reduces communication overhead slightly (and makes the code a bit cleaner). Also in commit 567b7988d56b6c1db6102d857b523fc2da607dbc. Note that although this is a bit of a big PR, the commits are factored out into the above list of changes, so I hope this makes it easy to review. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). Documentation not yet updated, I will check if this is necessary (I didn't think so, because it doesn't actually add much to the user interface, all the classes were already there, they just didn't work before like this).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10966:2256,interface,interface,2256,https://root.cern,https://github.com/root-project/root/pull/10966,1,['interface'],['interface']
Integrability,"Minuit2 uses the Pimpl idiom with a shared_ptr to avoid frequent copies, but the implementation is not good. The full interface of each class is duplicated, which is not necessary and makes the code confusing and difficult to change. This patch simplifies the implementation but keeps the semantics the same. This patch is a precursor of some improvements that I have prepared.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7882:118,interface,interface,118,https://root.cern,https://github.com/root-project/root/pull/7882,1,['interface'],['interface']
Integrability,Minuit2: Explained delgam warning messages in info,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11652:34,message,messages,34,https://root.cern,https://github.com/root-project/root/pull/11652,1,['message'],['messages']
Integrability,Missing Rint dependency for rootcling,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11686:13,depend,dependency,13,https://root.cern,https://github.com/root-project/root/issues/11686,1,['depend'],['dependency']
Integrability,Missing clad dependency.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16668:13,depend,dependency,13,https://root.cern,https://github.com/root-project/root/issues/16668,1,['depend'],['dependency']
Integrability,Missing dependency or clean up in TMVA test/tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16553:8,depend,dependency,8,https://root.cern,https://github.com/root-project/root/issues/16553,1,['depend'],['dependency']
Integrability,Missing dependency when building roottest as part of ROOT.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9600:8,depend,dependency,8,https://root.cern,https://github.com/root-project/root/issues/9600,1,['depend'],['dependency']
Integrability,"Model& model, experimental::__ROOT::basic_string_view<char,char_traits<char> > vName, experimental::__ROOT::basic_string_view<char,char_traits<char> > wName) =>; 887: TypeError: takes at least 3 arguments (2 given); 887: ROOT::RDF::RResultPtr<TH1D> ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void>::Histo1D(experimental::__ROOT::basic_string_view<char,char_traits<char> > vName, experimental::__ROOT::basic_string_view<char,char_traits<char> > wName) =>; 887: TypeError: could not convert argument 1; 887: ROOT::RDF::RResultPtr<TH1D> ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void>::Histo1D(const ROOT::RDF::TH1DModel& model = {"""", """", 128U, 0., 0.}, experimental::__ROOT::basic_string_view<char,char_traits<char> > vName = """") =>; 887: TypeError: could not convert argument 2; 887: Failed to instantiate ""Histo1D(ROOT::RDF::TH1DModel*,std::string)""; 887: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 887: error code: 1; 887:; 887:; 10/16 Test #887: tutorial-dataframe-df014_CSVDataSource-py ................***Failed 5.75 sec; test 888; Start 888: tutorial-dataframe-df016_vecOps-py. 888: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df016_vecOps.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 888: Environment variables:; 888: ROOT_HIST=0; 888: Test timeout computed to be: 1500; 888: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 888: error code: -529697949; 888:; 888:; 11/16 Test #888: tutorial-dataframe-df016_vecOps-py .......................***Failed 4.51 sec; test 889; Start 889: tutorial-dataframe-df017_vecOpsHEP-py. 889: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python3",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6083#issuecomment-665456331:10737,message,message,10737,https://root.cern,https://github.com/root-project/root/pull/6083#issuecomment-665456331,1,['message'],['message']
Integrability,"More info in the commit descriptions. This should fix the compiler errors reported on the forum:; https://root-forum.cern.ch/t/error-compiling-with-ubuntu-20-04-4-lts/49097. Should be backported to 6.26. This PR also suggests a slight change to the HistFactory::JSONTool interface which is not necessarily a bugfix, but it's better to hide away the `JSONTool::Export` function as of 6.26.02 such that people don't start using it and we we are stuck with that interface.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10082:271,interface,interface,271,https://root.cern,https://github.com/root-project/root/pull/10082,2,['interface'],['interface']
Integrability,Move TDavixFileInternal out of the public interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/295:42,interface,interface,42,https://root.cern,https://github.com/root-project/root/pull/295,1,['interface'],['interface']
Integrability,"Move declaration of ESockOptions and ESendRecvOptions enums from TSocket.h to TSystem.h, to get rid of this include dependencies in CMake:; include_directories(${CMAKE_SOURCE_DIR}/net/net/inc)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3274:116,depend,dependencies,116,https://root.cern,https://github.com/root-project/root/pull/3274,1,['depend'],['dependencies']
Integrability,"Move root-project/cling#469. This depends on PR #11360. cc: @sarabellei, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11474:34,depend,depends,34,https://root.cern,https://github.com/root-project/root/pull/11474,1,['depend'],['depends']
Integrability,Move the commit to PR #5252 to integrate the test with the root cause of the issue,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5256#issuecomment-606630138:31,integrat,integrate,31,https://root.cern,https://github.com/root-project/root/pull/5256#issuecomment-606630138,1,['integrat'],['integrate']
Integrability,"Move the fRoofit classes depending on GSL in a new library libRooFitMore. The classes are: . - AdaptiveGauss and GausKronrod 1D integrator from Roofitcore; - Legendre, non-central chi2 and SphArmonic pdf",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4536:25,depend,depending,25,https://root.cern,https://github.com/root-project/root/pull/4536,2,"['depend', 'integrat']","['depending', 'integrator']"
Integrability,Moved TPDGCode.h (used in 'pythia6' and 'pythia8') from 'vmc' to to 'eg'; this makes all other libraries in 'montecarlo' not dependent on 'vmc',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3691:125,depend,dependent,125,https://root.cern,https://github.com/root-project/root/pull/3691,1,['depend'],['dependent']
Integrability,Moving OCC-dependent headers out of the way,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3069:11,depend,dependent,11,https://root.cern,https://github.com/root-project/root/pull/3069,1,['depend'],['dependent']
Integrability,"Moving `RooMath` to RooBatchCompute caused linker errors for users that; we want to avoid: RooBatchCompute is a RooFit implementation detail and; we don't want poeple to link against it. For this reason, RooMath is moved back into RooFitCore, and the; Faddeeva implementation that is also used in RooBatchCompute is split; off into a new file `faddeeva_impl.h` that is not part of the public; interface.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10359:393,interface,interface,393,https://root.cern,https://github.com/root-project/root/pull/10359,1,['interface'],['interface']
Integrability,"Multi-range fits in RooFit are more complicated than they should be. In principle, all that is required is to change the normalization range of the PDF to the union of the ranges. There is a RooAbdPdf interface to suggest that this could be done easily like this:; ```C++; pdf.setNormRange(""range1,range2""); ```. But this doesn't work well for RooAddPdfs, which is probably why it was chosen to implement mulit-range fits as a sum of separate RooNLLVars. But in this case, the PDFs are normalized separately, and extra terms need to be introduced to correct for that. This resulted in lots of complicated code, and still there are issues like #11447, i.e. is still doesn't work for simultaneous fits. That's why I decided to fix the `setNormRange()` for RooAddPdfs, and then starting from that re-implement multi-ranged fits in both the new BatchMode and the old RooFit based on that. . Closes #11447.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11455:201,interface,interface,201,https://root.cern,https://github.com/root-project/root/pull/11455,1,['interface'],['interface']
Integrability,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`.; 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change; 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? ; 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13134#issuecomment-1637626198:69,depend,depend,69,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1637626198,2,['depend'],"['depend', 'dependency']"
Integrability,My bad! I didn't check if RVec implements the *full* std::vector interface. 😅,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6170#issuecomment-673447274:65,interface,interface,65,https://root.cern,https://github.com/root-project/root/pull/6170#issuecomment-673447274,1,['interface'],['interface']
Integrability,"My concern, that we breaking interfaces which are made public 5 years ago - through RZip.h. ; If we don't care about potential users - just remove RZip.h completely from public space.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4060#issuecomment-510890003:29,interface,interfaces,29,https://root.cern,https://github.com/root-project/root/pull/4060#issuecomment-510890003,1,['interface'],['interfaces']
Integrability,"My reasoning for removing usage of `std::string_view` is that using `const std::string&` avoids copying memory and only requires C++11, while `std::string_view` requires C++17 or a backport. Moreover, along with the extra requirements of `std::string_view`, when it is passed by value it uses a pointer + length, which means possibly twice the size of just a reference. If we are not using the editing potential of `std::string_view`, or even worse, are just using it to actually make a copy of the data inside, then I see no real advantage in using it relative to just using a reference to `std::string` in the interface that basically does the same job better without adding the extra requirements of a higher C++ standard and/or a backport.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/804#issuecomment-318633601:612,interface,interface,612,https://root.cern,https://github.com/root-project/root/pull/804#issuecomment-318633601,1,['interface'],['interface']
Integrability,"My suggestion to try to fix this issue is the following:. ```diff; --- a/builtins/lz4/CMakeLists.txt; +++ b/builtins/lz4/CMakeLists.txt; @@ -44,7 +44,7 @@ set(LZ4_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR} CACHE INTERNAL """" FORCE); add_library(lz4 STATIC ${LZ4_PUBLIC_HEADERS} ${LZ4_PRIVATE_HEADERS} ${LZ4_SOURCES}); set_target_properties(lz4 PROPERTIES C_VISIBILITY_PRESET hidden POSITION_INDEPENDENT_CODE ON); target_include_directories(lz4 INTERFACE $<BUILD_INTERFACE:${LZ4_INCLUDE_DIR}>); -target_link_libraries(lz4 PRIVATE xxHash::xxHash); +target_include_directories(lz4 PRIVATE $<BUILD_INTERFACE:${xxHash_INCLUDE_DIR}>); ; add_library(LZ4::LZ4 ALIAS lz4); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13739#issuecomment-1740750211:441,INTERFACE,INTERFACE,441,https://root.cern,https://github.com/root-project/root/pull/13739#issuecomment-1740750211,1,['INTERFACE'],['INTERFACE']
Integrability,"My two cents. The root cause of the problem is understood and it is what you mentioned. However, the way this presents to users is that if they run the following code on a large-enough inputs:. ```python; >>> f = ROOT.TFile('DYJetsToLL.root'); >>> t = f.Get('Events'); >>> t.Draw('GenPart_pdgId'); ```. users _silently_ get a completely wrong histogram:. ![image](https://github.com/root-project/root/assets/10999034/1d53b401-cf13-471c-bf6f-908835845b20). instead of the histogram they _should_ get:. ![image](https://github.com/root-project/root/assets/10999034/4bfc1d5d-e7e6-450a-b3c0-783cfccbda3a). Even if you are lucky enough that the histogram is so wrong that you spot the problem immediately, it is then very difficult to go from ""my histogram is wrong"" to ""low floating point precision makes `Fill` effectively a no-op inside `TTree::Draw`"". So difficult that I do not think one can reasonably expect users to diagnose the issue themselves. With that said, new interfaces already moved to TH1D by default instead of TH1F, and TTree::Draw cannot be changed to produce a TH1D for the backward-compat issues Axel listed above, so the only remaining option, AFAICT, is to add a check after every `Fill` or deprecate `TTree::Draw`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6671#issuecomment-1861816430:970,interface,interfaces,970,https://root.cern,https://github.com/root-project/root/issues/6671#issuecomment-1861816430,1,['interface'],['interfaces']
Integrability,"NetxNG needs the include directory for XRootD, but when XRootD is enabled as a builtin, the include directory points to the build directory and causes CMake to fail with an [error](http://cdash.cern.ch/viewConfigure.php?buildid=570698) like the one below:; ```; CMake Error in net/netxng/CMakeLists.txt:; Target ""NetxNG"" INTERFACE_INCLUDE_DIRECTORIES property contains path:. ""${BUILDDIR}/include/xrootd"". which is prefixed in the build directory.; ```; This is a blocker to move to modern CMake constructs (using targets and properties) for targets that use headers of builtins in their own headers, as we cannot create imported or exported targets with proper dependencies.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2727:662,depend,dependencies,662,https://root.cern,https://github.com/root-project/root/pull/2727,1,['depend'],['dependencies']
Integrability,New issues are now reported *only* on GitHub. We keep Jira open for existing issues. We will close Jira issue submission to the public in about a year; until then there's a message telling people to go to GitHub instead.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/1#issuecomment-689470223:173,message,message,173,https://root.cern,https://github.com/root-project/root/issues/1#issuecomment-689470223,1,['message'],['message']
Integrability,"New member functions of RooFit classes were introduced exclusively to PyROOT for better interoperability between RooFit and Numpy and Pandas:. 1. `RooDataSet.from_numpy`: Import a RooDataSet from a dictionary of numpy arrays (static method); 2. `RooDataSet.to_numpy`: Export a RooDataSet to a dictionary of numpy arrays; 3. `RooDataSet.from_pandas`: Import a RooDataSet from a Pandas dataframe (static method); 4. `RooDataSet.to_pandas`: Export a RooDataSet to a Pandas dataframe; 5. `RooRealVar.bins`: Get bin boundaries for a `RooRealVar` as a NumPy array. - Unit tests were implemented that make closure tests for weighted and unweighted datasets, and also test if the support for `RooAbsCategory` works; - Besides implementing these functions as pythonizations, this PR makes some changes to the `RooVectorDataStore` interface to enable this data import/export functionality; - Some changes were made to the RooFit pythonization infrastructure to support static methods in the Python mirror classes; - A new tutorial was written to showcase these features; - Release notes were added; - Windows tests are disabled for now because they fail for reasons that I don't understand (see draft PR #8784). This is part of the feature set presented at ACAT 2021 and promised for the next ROOT release. The equivalent import/export functions for `RooDataHist` will follow later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9346:88,interoperab,interoperability,88,https://root.cern,https://github.com/root-project/root/pull/9346,2,"['interface', 'interoperab']","['interface', 'interoperability']"
Integrability,New printValue() integration,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/75:17,integrat,integration,17,https://root.cern,https://github.com/root-project/root/pull/75,1,['integrat'],['integration']
Integrability,New warning message (for reference):; ![Screenshot from 2024-02-09 11-19-18](https://github.com/root-project/root/assets/29475282/cb204f9e-b92b-4bdb-ac5b-d5f7dfe87333),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14645#issuecomment-1935824057:12,message,message,12,https://root.cern,https://github.com/root-project/root/pull/14645#issuecomment-1935824057,1,['message'],['message']
Integrability,"Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see; https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf input files) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date.; This is https://gitlab.kitware.com/cmake/cmake/-/issues/24003. For anything with ""./configure"", force the timestamp as stored in the tar file. (cherry picked from commit e79ef2e76ea8e20c9e4edc28844b97f82122033f). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11752:283,depend,dependencies,283,https://root.cern,https://github.com/root-project/root/pull/11752,1,['depend'],['dependencies']
Integrability,"Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see; https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11742:283,depend,dependencies,283,https://root.cern,https://github.com/root-project/root/pull/11742,1,['depend'],['dependencies']
Integrability,"Nice catch. Thanks. The commit message could be made even better by explaining what was wrong with the previous implementation; for example by mentioning which test was failing and how. This would allow to make sure that future attempt to make a similar change do not suffer the same problems. Cheers,; Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1728#issuecomment-372414223:31,message,message,31,https://root.cern,https://github.com/root-project/root/pull/1728#issuecomment-372414223,1,['message'],['message']
Integrability,Ninja shows dependency issues in our build system; fix those first before switching to Ninja. This reverts commit fcfca4ccdaf97099a180e154c60bc3c621abfafe. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13591:12,depend,dependency,12,https://root.cern,https://github.com/root-project/root/pull/13591,1,['depend'],['dependency']
Integrability,"No ;) I'm judging from the commits associated to this PR. Most likely you have to force push to this branch. Actually, I'm not sure if you change only the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5221#issuecomment-604883243:162,message,message,162,https://root.cern,https://github.com/root-project/root/pull/5221#issuecomment-604883243,1,['message'],['message']
Integrability,"No actual behavior change is expected. CollectionProxy's `next wrapper/implementation` for Bitset is seemingly currently unused (hence the problem was not seen), however it will be used start in the next set of PRs introducing more Writing StreamerInfoActions (hence the existing bitset test will serve as tests). Related roottest PR: https://github.com/root-project/roottest/pull/1189",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16495:63,wrap,wrapper,63,https://root.cern,https://github.com/root-project/root/pull/16495,1,['wrap'],['wrapper']
Integrability,No problem!. Fixed changed to https://github.com/root-project/root/pull/8270 plus another PR that will come after the required interface to `TInterpreter` is added.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8152#issuecomment-850385438:127,interface,interface,127,https://root.cern,https://github.com/root-project/root/issues/8152#issuecomment-850385438,1,['interface'],['interface']
Integrability,"No we didn't but I guess that means this is not so important to them. I'll think about it if the interface in this PR can be further improved along the lines of what @pcanal suggested, but I already have an idea on how to do this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16175#issuecomment-2309976601:97,interface,interface,97,https://root.cern,https://github.com/root-project/root/pull/16175#issuecomment-2309976601,1,['interface'],['interface']
Integrability,"No, I still getting same messages. [See here](https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/6189/testReport/projectroot.roottest.root.meta.rootcling-modules/module-dep-order/roottest_root_meta_rootcling_modules_module_dep_order_cxxmodules_implicit_build_error/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5613#issuecomment-631429543:25,message,messages,25,https://root.cern,https://github.com/root-project/root/pull/5613#issuecomment-631429543,1,['message'],['messages']
Integrability,"No, I think since you can change your CMakefile, I would leave it as a; feature request. Bertrand Bellenot ***@***.***> schrieb am Di., 16. Mai 2023,; 09:56:. > Since it's a CMake issue and not really a ROOT one, I guess we can close; > this?; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/12744#issuecomment-1549178519>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAJGF4UWYKGI2V3ROOOCLADXGMXKNANCNFSM6AAAAAAXRSRNGY>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12744#issuecomment-1549451083:569,Message,Message,569,https://root.cern,https://github.com/root-project/root/issues/12744#issuecomment-1549451083,1,['Message'],['Message']
Integrability,"No. As i mentioned earlier, this only showed up in a bit of way-obsolete code (wrapping AIDA histograms) which I just removed. So this doesn't affect us at all now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6345#issuecomment-692721209:79,wrap,wrapping,79,https://root.cern,https://github.com/root-project/root/issues/6345#issuecomment-692721209,1,['wrap'],['wrapping']
Integrability,"No. I dont think the problem is understood. In my software I link with another library compiled with the system libraries which have a recent libpng.; At run time ROOT finds the old ones from libpng inside imagemagic. It is not too hard to update the lib png. Do you want me to write what I do?. G. > On Dec 5, 2023, at 2:52 PM, Axel Naumann ***@***.***> wrote:; > ; > ; > @unelg <https://github.com/unelg> just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch <https://root-forum.cern.ch/> - thanks!; > ; > —; > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/issues/13825#issuecomment-1840834891>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAVOOJIRSHYYX74ALYJ55JLYH4RIZAVCNFSM6AAAAAA5W3TU4SVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQNBQHAZTIOBZGE>.; > You are receiving this because you were mentioned.; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13825#issuecomment-1840841385:427,message,message,427,https://root.cern,https://github.com/root-project/root/issues/13825#issuecomment-1840841385,1,['message'],['message']
Integrability,Nope :) It still has some good things in it. Depends on #3896,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3873#issuecomment-498838832:45,Depend,Depends,45,https://root.cern,https://github.com/root-project/root/pull/3873#issuecomment-498838832,1,['Depend'],['Depends']
Integrability,"Nope, I tried, only CTRL+C prints the message ""CTRL+C pressed"". Shift+C does not. `if (event->fState & kKeyControlMask)`. is evaluating to true only if Ctrl+C is pressed. But then it's a mistery why it does not work with GrabKey. Could you point at which function in `TUnixSystem` should I run the debugger to see what happens?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8665#issuecomment-879387281:38,message,message,38,https://root.cern,https://github.com/root-project/root/issues/8665#issuecomment-879387281,1,['message'],['message']
Integrability,"Not quite. The issues was seen as result differing on two different machine but being always the same on the same machine. The two machines have different number of core and thus the chunking was different even in the case where the user requested only a single core to be used on both machine. The related issue is, of course, the question of *why* the end result depends on the chunking and whether this indicates a severe flaw in the algorithm used or is 'simply' case of visible but 'normal' numerical error/uncertainty being propagated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2039#issuecomment-390711669:365,depend,depends,365,https://root.cern,https://github.com/root-project/root/pull/2039#issuecomment-390711669,1,['depend'],['depends']
Integrability,"Not sure if it applies here, but a common ""template trickery"" is to have a type-punned base class that provides enough functionality to cater for the hot paths during the event loop. We already use this in RNTuple, for example with `RFieldBase` that can be conveniently passed around if you only need its interface functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15116#issuecomment-2288491682:305,interface,interface,305,https://root.cern,https://github.com/root-project/root/pull/15116#issuecomment-2288491682,1,['interface'],['interface']
Integrability,"Not sure it will catch this kind of dependency, but yes, we should check the consistency of the build rules.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1374#issuecomment-347621468:36,depend,dependency,36,https://root.cern,https://github.com/root-project/root/pull/1374#issuecomment-347621468,1,['depend'],['dependency']
Integrability,Not trivial solution will be fully integrate building of libAfterImage into ROOT cmake.; But this is too much work.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16129#issuecomment-2255341012:35,integrat,integrate,35,https://root.cern,https://github.com/root-project/root/pull/16129#issuecomment-2255341012,1,['integrat'],['integrate']
Integrability,"Not yet, I'm in the process of shuffling around the dependencies such that root can still build without tbb.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-761119696:52,depend,dependencies,52,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-761119696,1,['depend'],['dependencies']
Integrability,"Note that `XrdClient` is the old client from XRootD 4.x, which is already out of support (and EOS 4.x will also go out of support soon). `XrdClient` was removed from the XRootD repository in the XRootD 5.0 release. I think that this is a good time to review the code, drop obsolete things, require at least XRootD 5.x, use `XRootDConfig.cmake` shipped by XRootD, and drop `FindXROOTD.cmake` from ROOT. If `XRootDConfig.cmake` doesn't have something ROOT needs, please let me know and I will fix it for the next patch or feature release, depending on what it is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12631#issuecomment-1740452464:537,depend,depending,537,https://root.cern,https://github.com/root-project/root/issues/12631#issuecomment-1740452464,1,['depend'],['depending']
Integrability,"Note that we observed the same type of crash in some other places as well in ATLAS, which could also be handled by cleaning up the dictionaries of the affected libraries. So the error has an upside as well. (Though a simple error message from ROOT would've been more welcome. :stuck_out_tongue:). (I mainly just wrote this comment to get notifications about this issue's evolution... :wink:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7657#issuecomment-805575762:230,message,message,230,https://root.cern,https://github.com/root-project/root/issues/7657#issuecomment-805575762,1,['message'],['message']
Integrability,"Note, I only slightly edited commit messages, no need to retest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/953#issuecomment-327744491:36,message,messages,36,https://root.cern,https://github.com/root-project/root/pull/953#issuecomment-327744491,1,['message'],['messages']
Integrability,"Note: In the documentation here: https://root.cern.ch/how/integrate-root-my-project-cmake. There's a typo: `ROOT_CC_FLAGS ` is mentioned instead of `ROOT_C_FLAGS`, but there is no CC flags variable. That documentation is not in this repo, so can't fix it here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1959#issuecomment-385674159:58,integrat,integrate-root-my-project-cmake,58,https://root.cern,https://github.com/root-project/root/pull/1959#issuecomment-385674159,1,['integrat'],['integrate-root-my-project-cmake']
Integrability,"Note: `THnSparseT<TArrayL>` was removed because its underlying type (`long`)'s size depends on the platforms (32 vs 64 bits).; However, it would have been much to either leave it as is or mark it as deprecated. We need to fix this and make sure older files can be read. In the long term, you should consider moving to the newer `THnSparseT<TArrayL64>` which guarantees the 64 bits on all platforms (we should also make sure that we update our code to that `THnSparseT<TArrayL>` can be read into a `THnSparseT<TArrayL64>` (by adding the relevant renaming rule if need be).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15874#issuecomment-2173954150:84,depend,depends,84,https://root.cern,https://github.com/root-project/root/issues/15874#issuecomment-2173954150,1,['depend'],['depends']
Integrability,"Note: some of the reference files were updated with 'best guesses' and over-shot the correction. ; The only case I found of increase is https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169840/testReport/projectroot.roottest.root.io/treeForeign/roottest_root_io_treeForeign_testForeignDraw/; where the actual increase is:; ```; --- a/root/io/treeForeign/testForeignDrawZLIB_builtinzlib.ref; +++ b/root/io/treeForeign/testForeignDrawZLIB_builtinzlib.ref; @@ -4,7 +4,7 @@ Warning in <TClass::Init>: no dictionary for class Wrapper is available; Warning in <TClass::Init>: no dictionary for class MyClass is available; ******************************************************************************; *Tree :T : T *; -*Entries : 2 : Total = 4215 bytes File Size = 1465 *; +*Entries : 2 : Total = 4215 bytes File Size = 1470 *; * : : Tree compression factor = 1.08 *; ******************************************************************************; ```; I am not sure whether it is worth trying to investigate (since it is small, it is the only case and it is the (older?) buitin zlib)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12439#issuecomment-1458508601:544,Wrap,Wrapper,544,https://root.cern,https://github.com/root-project/root/pull/12439#issuecomment-1458508601,1,['Wrap'],['Wrapper']
Integrability,"Now I'm doing another thing, and return again to this issue. I want to make a 3-dimensional fit, but some pdfs depend only on z, so I multiply them by uniform pdfs on x and y. I mean RooUniform for the whole domain of a variable, not what I proposed in https://github.com/root-project/root/issues/7880. So I create a uniform distribution like that. RooUniform u_nt_x(""u_nt_x"", ""u_nt_x"", x);; RooUniform u_nt_y(""u_nt_y"", ""u_nt_y"", y);; RooProdPdf uxy_nt(""uxy_nt"", ""uxy_nt"", RooArgList(u_nt_x, u_nt_y));. So I have 5 pdfs for which I need to create a separate uniform distribution on (x, y), which in turn requires creation of new pdfs on x (and on y), which are all uniform and absolutely the same. This leads to 15 new lines of code, which is not that much, but seems redundant (as names and titles of the uniform distribution on all x) and even more error-prone (because of very similar code). Maybe there must be a way to explicitly allow same pdfs, if you know that they are really identical ones with same parameters? Say a new class, RooRefPdf, RooCopyPdf, ... .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8000#issuecomment-830081883:111,depend,depend,111,https://root.cern,https://github.com/root-project/root/issues/8000#issuecomment-830081883,1,['depend'],['depend']
Integrability,"Now Imt depends on MultiProc (https://github.com/root-project/root/pull/7040), so MultiProc gets loaded when importing ROOT in python and needs to be whitelisted",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7048:8,depend,depends,8,https://root.cern,https://github.com/root-project/root/pull/7048,1,['depend'],['depends']
Integrability,"Now TMVA does not have anymore dependency on Cuda at the header file.; In principle one could have MethodDL depending on Cuda tensor, but this is not needed if single event evaluation is not done on GPU.; With this PR now the Cuda headers are included from TMVA source files . This PR should avoid the problem of ROOT-10980 and #6999 should not be anymore needed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7017:31,depend,dependency,31,https://root.cern,https://github.com/root-project/root/pull/7017,2,['depend'],"['dependency', 'depending']"
Integrability,Now both TCanvas or RCanvas can be used in RBrowser.; In both cases very similar code is used for embedding - some extension of interface was required.; On client side code is mostly identical.; For the moment TCanvas is default while RCanvas has some problem on client side with update,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4499:128,interface,interface,128,https://root.cern,https://github.com/root-project/root/pull/4499,1,['interface'],['interface']
Integrability,Now committed as https://github.com/llvm/llvm-project/commit/6415f424bc2a3bbb4f2fd7bb67863968ac3c19f6; rebased and adapted the commit message.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7757#issuecomment-815489313:134,message,message,134,https://root.cern,https://github.com/root-project/root/pull/7757#issuecomment-815489313,1,['message'],['message']
Integrability,"Now that #5297 is merged, we can activate this, and fix the few tests that actually need diagnostic messages.; @Axel-Naumann @eguiraud ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5591#issuecomment-639301827:100,message,messages,100,https://root.cern,https://github.com/root-project/root/pull/5591#issuecomment-639301827,1,['message'],['messages']
Integrability,"Now that I see this issue (https://its.cern.ch/jira/projects/ROOT/issues/ROOT-8915) can we perhaps also provide a template for the commit messages, and close the issue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14410#issuecomment-1915646158:138,message,messages,138,https://root.cern,https://github.com/root-project/root/pull/14410#issuecomment-1915646158,1,['message'],['messages']
Integrability,"Now, we create TBB tasks for compression whenever `TTree::Fill` is called and a basket must be compressed. In CMS, we saw significant speedup on KNL and high-core-count Xeons by doing this over the existing basic write IMT (likely because we have some branches that are flushed to disk much more frequently than targeted by the auto-flush routines).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/321:339,rout,routines,339,https://root.cern,https://github.com/root-project/root/pull/321,1,['rout'],['routines']
Integrability,NullDeref check changed from injection of if(stmt) to a runtime call.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/112:29,inject,injection,29,https://root.cern,https://github.com/root-project/root/pull/112,1,['inject'],['injection']
Integrability,"OK @MarkusFrankATcernch looks good, LGTM and we can commit separately your macro in the test suite, but let's do this Monday to check how to integrate it properly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11060#issuecomment-1199231161:141,integrat,integrate,141,https://root.cern,https://github.com/root-project/root/pull/11060#issuecomment-1199231161,1,['integrat'],['integrate']
Integrability,"OK I think this is problematic for the above (technical) issues that need to be solved before this can be merged (symbols leaking *in* and out), and for sustainability reasons, such as ""your"" zmq library having security issues - who will be aware of this and update our copy?. If someone proposes your addition to upstream zmq, once its integrated, and possibly slightly adjusted as part of the integration, who will sort out the differences, and how to we keep ""old zmq + extension"" *and* ""new zmq"" working?. IMO the right steps are:; 1. get your extension into zmq; 2. *then* we integrate your PR where we require a minimal zmq version which offers your new functions. We can then use zmq as regular ""builtin"", i.e. we take the system one if it's new enough, else people can use the official package that we pull ""into"" ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8385#issuecomment-870477797:337,integrat,integrated,337,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870477797,3,['integrat'],"['integrate', 'integrated', 'integration']"
Integrability,"OK thanks, I understand better now. When you invalidate the contract with the linker, just as when you rely on undefined behavior, the results are not reliable anymore. Even though your code seems to suggest that it's because of ROOT that's *not* the case: the use of some other library, other code, might just as well cause problems. Please remove the two symbols with the same name and your problems will vanish. The fact that ROOT is triggering it doesn't mean that it's causing it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8256#issuecomment-851285161:60,contract,contract,60,https://root.cern,https://github.com/root-project/root/issues/8256#issuecomment-851285161,1,['contract'],['contract']
Integrability,OK thanks. So then my current understanding is that we cannot use any distro packages for any of this for the time being: Ubuntu does not have a dedicated zppzmq; Fedora's depends on zeromq version 4.3.4 and thus cannot be used. We need to revisit this as the upcoming zeromq version makes it into distros.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9430#issuecomment-993479184:172,depend,depends,172,https://root.cern,https://github.com/root-project/root/issues/9430#issuecomment-993479184,1,['depend'],['depends']
Integrability,"OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. If you change your mind, just re-open this PR and I'll resolve any conflicts on it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11863#issuecomment-1344487042:204,depend,dependabot,204,https://root.cern,https://github.com/root-project/root/pull/11863#issuecomment-1344487042,4,['depend'],['dependabot']
Integrability,"OK, I'll check what to do on Windows and MacOS (i.e. all non-X platforms since `fontconfig` depends on X)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8357#issuecomment-867706753:92,depend,depends,92,https://root.cern,https://github.com/root-project/root/issues/8357#issuecomment-867706753,1,['depend'],['depends']
Integrability,"OK, great. Now, if you could also remove CUDA_INCLUDE_DIRECTORIES the bug; is fixed and the; build system a bit cleaner. I am unsure about the hackieness of the solution, as I understand it this; is the way it is done in Root. On 2 November 2016 at 10:07, Stefan Wunsch notifications@github.com wrote:. > Yep, adding move_headers as dependency of dnn_cuda solves the problem.; > Here is the code:; > ; > #---Handle CUDA dependent code. -----------------; > if(CUDA_FOUND); > CUDA_INCLUDE_DIRECTORIES(${ROOT_INCLUDE_DIRS}); > CUDA_ADD_LIBRARY(dnn_cuda ${DNN_CUDA_FILES}); > set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DDNNCUDA""); > set(DNN_CUDA_LIBRARIES dnn_cuda ${CUDA_CUBLAS_LIBRARIES}); > add_dependencies(dnn_cuda move_headers); > set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -DDNNCUDA""); > else(); > set(DNN_CUDA_LIBRARIES); > endif(); > ; > This solutions seems pretty hacky for me, shouldn't a library be build; > with links to the headers in the source directory? Actually, I think that; > I'm missing something in the build system.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/root-mirror/root/pull/283#issuecomment-257809100, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AGnOhTHxNjmACDlkEFuRr4gm6Ac8iHqMks5q6FLcgaJpZM4KdRgw; > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/283#issuecomment-258047962:333,depend,dependency,333,https://root.cern,https://github.com/root-project/root/pull/283#issuecomment-258047962,2,['depend'],"['dependency', 'dependent']"
Integrability,"OK, merging this and backporting once confirmed that it works with the DD4hep integration",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11272#issuecomment-1232648464:78,integrat,integration,78,https://root.cern,https://github.com/root-project/root/issues/11272#issuecomment-1232648464,1,['integrat'],['integration']
Integrability,"OK, the error message at the beginning looks spurious. According to the upload status at the end of the build:; ```; With the provided path, there will be 1 file uploaded; Starting artifact upload; For more detailed logs during the artifact upload process, enable step-debugging: https://docs.github.com/actions/monitoring-and-troubleshooting-workflows/enabling-debug-logging#enabling-step-debug-logging; Artifact name is valid!; Container for artifact ""Test Results Windows x64 Release"" successfully created. Starting upload of file(s); Total size of all the files uploaded is 661143 bytes; File upload process has finished. Finalizing the artifact upload; Artifact has been finalized. All files have been successfully uploaded!. The raw size of all the files that were specified for upload is 580[24](https://github.com/root-project/root/actions/runs/7871756907/job/21475661171?pr=14657#step:7:25)97 bytes; The size of all the files that were uploaded is 661143 bytes. This takes into account any gzip compression used to reduce the upload size, time and storage. Note: The size of downloaded zips can differ significantly from the reported size. For more information see: https://github.com/actions/upload-artifact#zipped-artifact-downloads . Artifact Test Results Windows x64 Release has been successfully uploaded!; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14657#issuecomment-1947882129:14,message,message,14,https://root.cern,https://github.com/root-project/root/pull/14657#issuecomment-1947882129,1,['message'],['message']
Integrability,"OT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; .dot file generated with RooAbsArg::graphVizTree produces an invalid .dot file if the graph title contains spaces. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; RooAbsArg::graphVizTree should produce a valid .dot file even when the names of the elements contain spaces. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; ROOT macro, save to graphvizMWE.C and run with `root graphvizMWE.C`:; ```; void graphvizMWE(void){; // Create a simple dependency tree; RooRealVar x{};; RooRealVar sigma{};; RooRealVar mu{};. RooGaussian Gaussian(""my_gaussian"", ""Gaussian"", x, mu, sigma);; RooGaussian GaussianWithSpace(""my gaussian"", ""Gaussian"", x, mu, sigma);. // Create GraphViz trees; Gaussian.graphVizTree(""tree_example.dot"");; GaussianWithSpace.graphVizTree(""tree_example2.dot""); // Produces invalid output; }; ```; Then attempt to convert the produced `.dot` files to images using; `dot -Tpng tree_example.dot -o example1.png # Produces an image`; `dot -Tpng tree_example2.dot -o example2.png # Error!`. The first of these will produce a .png image, the second will fail with a message like: `Error: tree_example2.dot: syntax error in line 1 near 'gaussian'`. Can be fixed by enclosing the graph title in quotes: i.e. changing line 1 of `tree_example2.dot` from; `digraph my gaussian{`; to; `digraph ""my gaussian""{`. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7067:1183,depend,dependency,1183,https://root.cern,https://github.com/root-project/root/issues/7067,1,['depend'],['dependency']
Integrability,"OT/TCanvas.hxx:19:; 14:16:07 /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/TPad.hxx:23:10: fatal error: cyclic dependency in module 'ROOTGraphicsPrimitives': ROOTGraphicsPrimitives -> ROOTGpadv7 -> ROOTGraphicsPrimitives; 14:16:07 #include ""ROOT/TDrawingAttr.hxx""; 14:16:07 ^; 14:16:07 In file included from input_line_13:10:; 14:16:07 /mnt/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/TLine.hxx:23:10: fatal error: could not build module 'ROOTGpadv7'; 14:16:07 #include <ROOT/TPadPainter.hxx>; 14:16:07 ~~~~~~~~^; 14:16:07 Error: /mnt/build/jenkins/workspace/root-pullrequests-build/build/bin/rootcling: compilation failure (/mnt/build/jenkins/workspace/root-pullrequests-build/build/lib/libROOTGraphicsPrimitivesd47c8c6918_dictUmbrella.h); 14:16:07 [7257/9834] Linking CXX shared library lib/libMatrix.so; ```. @couet, this error shows two problems. First is that we *must* build a dictionary before we use a header file. We are likely missing a build dependency on `ROOTGpadv7`. I believe you are trying to fix the second problem. Namely, `TLine.hxx` includes `TPadPainter.hxx` which includes `TDisplayItem.hxx` and you end up with the cycle `ROOTGraphicsPrimitives -> ROOTGpadv7 -> ROOTGraphicsPrimitives`. It seems that `ROOTGraphicsPrimitives` is a foundational module. Its header `TLine.hxx` should not depend on headers in `ROOTGpadv7`. @Teemperor is right, `TLine.hxx` should not depend on `TPadPainter.hxx`. You can break that loop by introducing a forward declarations of `TPadPainter.hxx` entities where necessary if definitions are not required. This is how the current master's modulemap looks like (maybe this helps to see the cycle).; ```; module ""ROOTGraphicsPrimitives"" {; requires cplusplus; module ""ROOT/TColor.hxx"" { header ""ROOT/TColor.hxx"" export * }; module ""ROOT/TDisplayItem.hxx"" { header ""ROOT/TDisplayItem.hxx"" export * }; module ""ROOT/TDrawingAttr.hxx"" { header ""ROOT/TDrawingAttr.hxx"" export * }; module ""ROOT/TDrawingOpts",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2091#issuecomment-392598607:1979,depend,dependency,1979,https://root.cern,https://github.com/root-project/root/pull/2091#issuecomment-392598607,1,['depend'],['dependency']
Integrability,"OT::Internal::ExecutionPolicy::kMultiprocess, 8);; ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map; x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map; x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map; x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map; x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map; ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | ; ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |; TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |; TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |; TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |; TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |; TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doubl",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6327:1478,interface,interfaces,1478,https://root.cern,https://github.com/root-project/root/pull/6327,2,['interface'],['interfaces']
Integrability,"OT::TGenericClassInfo::CreateRuleSet (this=0x2b4bf40eb840 <ROOT::GenerateInitInstanceLocal(reco::btag::TrackData const*)::instance>, vect=..., ProcessReadRules=true) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TGenericClassInfo.cxx:319; #40 0x00002b4bd1cd26bd in ROOT::TGenericClassInfo::GetClass (this=0x2b4bf40eb840 <ROOT::GenerateInitInstanceLocal(reco::btag::TrackData const*)::instance>) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TGenericClassInfo.cxx:286; #41 0x00002b4bd1cac20b in TClass::GetClass (name=0xc24d320 ""reco::btag::TrackData"", load=true, silent=false, hint_pair_offset=0, hint_pair_size=0) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TClass.cxx:3039; #42 0x00002b4bd1cabf33 in TClass::GetClass (name=0xc24d320 ""reco::btag::TrackData"", load=true, silent=false) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TClass.cxx:2970; #43 0x00002b4bf68090a5 in ?? (); #44 0x0000000000000001 in ?? (); #45 0x00000001951b6c50 in ?? (); #46 0x00007ffd951b6840 in ?? (); #47 0x00007ffd951b6948 in ?? (); #48 0x00007ffd951b6910 in ?? (); #49 0x00002b4bd18990fd in WrapperCall (method=47604637311029, nargs=140727105054640, args_=0x7ffd951b6760, self=0x7ffd951b6750, result=0x7ffd951b6748) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:774; ===========================================================; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:26566,Wrap,WrapperCall,26566,https://root.cern,https://github.com/root-project/root/issues/12771,1,['Wrap'],['WrapperCall']
Integrability,Object using TNumSlots instead. [-Wdeprecated-declarations] ; - include/ROOT/TThreadedObject.hxx:207:56: warning: ‘ROOT::TThreadedObject&lt;TH1F&gt;::fgMaxSlots’ is deprecated: will be removed in ROOT v6.24: Superior interface exists: construct TThreadedObject using TNumSlots instead. [-Wdeprecated-declarations] ; - include/ROOT/TThreadedObject.hxx:207:33: warning: ‘ROOT::TThreadedObject&lt;T&gt;::fgMaxSlots’ is deprecated: will be removed in ROOT v6.24: Superior interface exists: construct TThreadedObject using TNumSlots instead. [-Wdeprecated-declarations] ; - include/ROOT/TThreadedObject.hxx:207:33: warning: ‘ROOT::TThreadedObject&lt;T&gt;::fgMaxSlots’ is deprecated: will be removed in ROOT v6.24: Superior interface exists: construct TThreadedObject using TNumSlots instead. [-Wdeprecated-declarations] ; - include/ROOT/TThreadedObject.hxx:207:56: warning: ‘ROOT::TThreadedObject&lt;TH1F&gt;::fgMaxSlots’ is deprecated: will be removed in ROOT v6.24: Superior interface exists: construct TThreadedObject using TNumSlots instead. [-Wdeprecated-declarations] ; - include/ROOT/TThreadedObject.hxx:207:33: warning: ‘ROOT::TThreadedObject&lt;T&gt;::fgMaxSlots’ is deprecated: will be removed in ROOT v6.24: Superior interface exists: construct TThreadedObject using TNumSlots instead. [-Wdeprecated-declarations] ; - include/ROOT/TThreadedObject.hxx:207:33: warning: ‘ROOT::TThreadedObject&lt;T&gt;::fgMaxSlots’ is deprecated: will be removed in ROOT v6.24: Superior interface exists: construct TThreadedObject using TNumSlots instead. [-Wdeprecated-declarations] ; - include/ROOT/TThreadedObject.hxx:207:33: warning: ‘ROOT::TThreadedObject&lt;T&gt;::fgMaxSlots’ is deprecated: will be removed in ROOT v6.24: Superior interface exists: construct TThreadedObject using TNumSlots instead. [-Wdeprecated-declarations] ; - include/ROOT/TThreadedObject.hxx:207:33: warning: ‘ROOT::TThreadedObject&lt;T&gt;::fgMaxSlots’ is deprecated: will be removed in ROOT v6.24: Superior interface exists: constr,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5049#issuecomment-596563785:1567,interface,interface,1567,https://root.cern,https://github.com/root-project/root/pull/5049#issuecomment-596563785,1,['interface'],['interface']
Integrability,Object.hxx:207:56: warning: ‘ROOT::TThreadedObject&lt;TH1F&gt;::fgMaxSlots’ is deprecated: will be removed in ROOT v6.24: Superior interface exists: construct TThreadedObject using TNumSlots instead. [-Wdeprecated-declarations] ; - include/ROOT/TThreadedObject.hxx:207:33: warning: ‘ROOT::TThreadedObject&lt;T&gt;::fgMaxSlots’ is deprecated: will be removed in ROOT v6.24: Superior interface exists: construct TThreadedObject using TNumSlots instead. [-Wdeprecated-declarations] ; - include/ROOT/TThreadedObject.hxx:207:33: warning: ‘ROOT::TThreadedObject&lt;T&gt;::fgMaxSlots’ is deprecated: will be removed in ROOT v6.24: Superior interface exists: construct TThreadedObject using TNumSlots instead. [-Wdeprecated-declarations] ; - include/ROOT/TThreadedObject.hxx:207:56: warning: ‘ROOT::TThreadedObject&lt;TH1F&gt;::fgMaxSlots’ is deprecated: will be removed in ROOT v6.24: Superior interface exists: construct TThreadedObject using TNumSlots instead. [-Wdeprecated-declarations] ; - include/ROOT/TThreadedObject.hxx:207:33: warning: ‘ROOT::TThreadedObject&lt;T&gt;::fgMaxSlots’ is deprecated: will be removed in ROOT v6.24: Superior interface exists: construct TThreadedObject using TNumSlots instead. [-Wdeprecated-declarations] ; - include/ROOT/TThreadedObject.hxx:207:33: warning: ‘ROOT::TThreadedObject&lt;T&gt;::fgMaxSlots’ is deprecated: will be removed in ROOT v6.24: Superior interface exists: construct TThreadedObject using TNumSlots instead. [-Wdeprecated-declarations] ; - include/ROOT/TThreadedObject.hxx:207:33: warning: ‘ROOT::TThreadedObject&lt;T&gt;::fgMaxSlots’ is deprecated: will be removed in ROOT v6.24: Superior interface exists: construct TThreadedObject using TNumSlots instead. [-Wdeprecated-declarations] ; - include/ROOT/TThreadedObject.hxx:207:33: warning: ‘ROOT::TThreadedObject&lt;T&gt;::fgMaxSlots’ is deprecated: will be removed in ROOT v6.24: Superior interface exists: construct TThreadedObject using TNumSlots instead. [-Wdeprecated-declarations] . And 2 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5049#issuecomment-596563785:1818,interface,interface,1818,https://root.cern,https://github.com/root-project/root/pull/5049#issuecomment-596563785,4,['interface'],['interface']
Integrability,Oh and maybe it would be good to have a shorter commit message with maximum 72 characters,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14440#issuecomment-1911752472:55,message,message,55,https://root.cern,https://github.com/root-project/root/pull/14440#issuecomment-1911752472,1,['message'],['message']
Integrability,"Oh, I just discovered that Github mailed me just a part of your message, so I didn't got your suggestion about leaving the space allocated. I therefore deleted fX and fY in the new version of my patch and created a little test script:. ```; void TGraphTest(); {; TCanvas *c = new TCanvas();; TGraph *g = new TGraph();; g->Draw();. for (int i = 0; i < 100; i++) {; g->RemoveAllPoints();; for (int k = 0; k < 100; k++) {; g->AppendPoint(k/10., sin(k/10. + i/4.));; }; c->Update();; gSystem->Sleep(20);; }; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/39#issuecomment-64418331:64,message,message,64,https://root.cern,https://github.com/root-project/root/pull/39#issuecomment-64418331,1,['message'],['message']
Integrability,"Oh, I was not on my mind that I introduced this new dependecy on `gtest`! I have to discuss with the other ROOT core team members if we really want this. But I think nowadays, `gtest` is available basically everywhere.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16612#issuecomment-2396288139:52,depend,dependecy,52,https://root.cern,https://github.com/root-project/root/issues/16612#issuecomment-2396288139,1,['depend'],['dependecy']
Integrability,"Oh, and I think with `MapV()` being so close to `Map()`, we can make `Map()` a wrapper of `MapV()` and expect (hopefully) the compiler to optimize away the dummy `nItems` calculation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8210#issuecomment-844936847:79,wrap,wrapper,79,https://root.cern,https://github.com/root-project/root/pull/8210#issuecomment-844936847,1,['wrap'],['wrapper']
Integrability,"Ok I see now that this PR already addresses some of my comments in #7314 :smile: . Still:; - I would not change the convention for the naming of the test files. Just `classname_testedfunctionality.py`, without the `test_` prefix.; - It could be a good moment to add Doxygen documentation to the Roofit classes. Example for [TTree](https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/pythonization/_ttree.py#L11-L131).; - To be discussed the reorganization with just one pythonizor function in `__init__.py`. A priori it is not bad since the modularity is preserved with one separate Python module and class per C++ class to be pythonized, but the way the pythonizations are injected can be a bit limiting (e.g. what happens if you want to add a pythonization in C++, or preserve the original class method you are replacing).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7753#issuecomment-820251767:714,inject,injected,714,https://root.cern,https://github.com/root-project/root/pull/7753#issuecomment-820251767,1,['inject'],['injected']
Integrability,Ok the `#ifdef` is not catching this toolchain. Seems to be Centos7 from a previous message -- are you using the default system compiler or are you getting it from devtoolset?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7115#issuecomment-776693977:84,message,message,84,https://root.cern,https://github.com/root-project/root/issues/7115#issuecomment-776693977,1,['message'],['message']
Integrability,"Ok the issue seems to be the `0` in the `'data'` entry of the dict. . probably this is interpreted as None if it is zero and numpy tries to read the data trough the buffer interface of the object. > If this key is not present (or returns None), then memory sharing will be done through the buffer interface of the object itself. ```python; import numpy; class empty_test:; 	__array_interface__ = \; {'shape': (0L,), ; 'version': 3, ; 'data': (1, False), ; 'typestr': '<f4'}. print(numpy.asarray(empty_test())); ```. so something like. ```c++; if(cobj->empty()){; PyDict_SetItemString(dict, ""data"",; PyTuple_Pack(2, PyLong_FromLong(reinterpret_cast<long>(-1)), Py_False));; }; ```. in the Pythonization.cxx; should fix this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3528#issuecomment-472365934:172,interface,interface,172,https://root.cern,https://github.com/root-project/root/pull/3528#issuecomment-472365934,2,['interface'],['interface']
Integrability,"Ok you can always construct something that fails, but the relevance is still debatable if nobody injects into `std::Detail`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8828#issuecomment-2372395169:97,inject,injects,97,https://root.cern,https://github.com/root-project/root/issues/8828#issuecomment-2372395169,1,['inject'],['injects']
Integrability,"Ok, I did the apt install as you suggested (with the admin account) and I now get:; ```; $ qhelpgenerator; Missing input file name. Usage:. qhelpgenerator <file> [options]. -o <output-file> Generates a Qt compressed help; called <output-file> (*.qch) for the; Qt help project <file> (*.qhp).; Generates a Qt help collection; called <output-file> (*.qhc) for the; Qt help collection project <file> (*.qhcp).; If this option is not specified; a default name will be used; (*.qch for *.qhp and *.qhc for *.qhcp).; -c Checks whether all links in HTML files; point to files in this help project.; -s Suppresses status messages.; -v Displays the version of ; qhelpgenerator. ```; So I guess it is installed ... should I relaunch the ref guide build ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-1009987639:613,message,messages,613,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-1009987639,1,['message'],['messages']
Integrability,"Ok, after a bit more investigation into the generated `build.ninja`, scratch the above comment. It seems inter-target dependencies also cover the source files. That is, if target `foo` is a dependency of `bar`, then `foo` must be complete before the first source file of `bar` is compiled. I thus pushed a commit that finishes the cleanup:; * All dependencies are correct. When a library file is listed as a dependency of something, the project which generates this file has it correctly listed in `BUILD_BYPRODUCTS`.; * Built-in dependencies of an executable or library can be listed in the respective ROOT macro. Putting it in a macro allows us to skip the redundant `if(builtin_foo)` code blocks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/323#issuecomment-273022008:118,depend,dependencies,118,https://root.cern,https://github.com/root-project/root/pull/323#issuecomment-273022008,5,['depend'],"['dependencies', 'dependency']"
Integrability,"Ok, all tests pass now on all platforms. I don't see any traces for missing dependencies anymore (e.g. multiple `Generating G__*` messages for the same target).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/752#issuecomment-314544742:76,depend,dependencies,76,https://root.cern,https://github.com/root-project/root/pull/752#issuecomment-314544742,2,"['depend', 'message']","['dependencies', 'messages']"
Integrability,"Ok, but there is a double delete, and with a bit of `CLING_DEBUG=1` I think I was able to guess what is going on:. `cmssw/DataFormats/TrackCandidate/interface/TrajectoryStopReasons.h` has the following `static const std::string` array: https://github.com/cms-sw/cmssw/blob/86e051b0c241cba35601a6095391324b1e4bfd7b/DataFormats/TrackCandidate/interface/TrajectoryStopReasons.h#L24-L40; ```c++; namespace StopReasonName {; static const std::string StopReasonName[] = {; ""UNINITIALIZED"", // 0; ""MAX_HITS"", // 1; ""MAX_LOST_HITS"", // 2; ""MAX_CONSECUTIVE_LOST_HITS"", // 3; ""LOST_HIT_FRACTION"", // 4; ""MIN_PT"", // 5; ""CHARGE_SIGNIFICANCE"", // 6; ""LOOPER"", // 7; ""MAX_CCC_LOST_HITS"", // 8; ""NO_SEGMENTS_FOR_VALID_LAYERS"", // 9; ""SEED_EXTENSION"", // 10; ""NOT_STOPPED"" // 11 (be careful, NOT_STOPPED needs to be the last,; // its index differs from the enumeration value); };; };; ```. That header + `static const std::string` array are `#include`d into multiple dictionaries / Cling transactions and eventually double-deleted. Standalone reproducer in pure ROOT:; ```; $ gdb --args root.exe -q -e 'namespace NS { static const std::string Reason[] = { ""stopped"" }; }' -e 'NS::Reason[0]' -e 'NS::Reason[0]'; [...]; (gdb) b cling::IncrementalExecutor::runAndRemoveStaticDestructors; Function ""cling::IncrementalExecutor::runAndRemoveStaticDestructors"" not defined. ; Make breakpoint pending on future shared library load? (y or [n]) y ; Breakpoint 1 (cling::IncrementalExecutor::runAndRemoveStaticDestructors) pending.; (gdb) r; [...]; Breakpoint 1, cling::IncrementalExecutor::runAndRemoveStaticDestructors (this=0x46d3f0, T=0x1c44750); 180 assert(T && ""Must be set"");; (gdb) b free; Breakpoint 2 at 0x7ffff4497e0c: free. (6 locations) ; (gdb) commands ; Type commands for breakpoint(s) 2, one per line. ; End with a line saying just ""end"". ; >printf ""free(%p)\n"", $rdi ; >continue ; >end ; (gdb) c; ```. This now jumps from one `runAndRemoveStaticDestructors` to the next and collects the pointers that are passe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13429#issuecomment-1688088967:149,interface,interface,149,https://root.cern,https://github.com/root-project/root/issues/13429#issuecomment-1688088967,2,['interface'],['interface']
Integrability,"Ok, can I at least ask to write it in the commit message :)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14590#issuecomment-1932208194:49,message,message,49,https://root.cern,https://github.com/root-project/root/pull/14590#issuecomment-1932208194,1,['message'],['message']
Integrability,"Ok, if `libGL` already depends from `libAfterImage` - then it is fine. You may add simple gtest-based code directly for `libGL` - then it will be automatically tested on all platforms.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15812#issuecomment-2252647669:23,depend,depends,23,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2252647669,1,['depend'],['depends']
Integrability,"Ok, that's close. @etejedor or @vepadulano are the experts in any case. ROOT itself does the job regarding error messages in case of NaN.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12296#issuecomment-1438633131:113,message,messages,113,https://root.cern,https://github.com/root-project/root/issues/12296#issuecomment-1438633131,1,['message'],['messages']
Integrability,"Ok, the solution that we suggest is that the test support library will only be built if gtest is found on the system or `builtin_gtest` is switched on. Like this, we don't force a dependency on `gtest`, but if you want the test support library from ROOT without building all tests with `testing=ON`, then you can get it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16612#issuecomment-2396408609:180,depend,dependency,180,https://root.cern,https://github.com/root-project/root/issues/16612#issuecomment-2396408609,1,['depend'],['dependency']
Integrability,"Ok. Is that possible to remake the std.pcm?; rm /Users/couet/git/couet-root-bin/lib/std.pcm ; make -C /Users/couet/git/couet-root-bin/ . or similar?. There are similar reports of this error message, I haven't found anything that is close enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6344#issuecomment-693433582:190,message,message,190,https://root.cern,https://github.com/root-project/root/issues/6344#issuecomment-693433582,1,['message'],['message']
Integrability,"Okay, I just noticed that you wrote you cannot reproduce on lxplus, so I'm not doing something entirely wrong. The two most likely causes are that you have some local `.rootrc` file (try with `root -n`), or that both lxplus and me are missing some optional dependencies that activate some problematic loading. From CMake, I get: `asimage builtin_afterimage builtin_clang builtin_cling builtin_ftgl builtin_gl2ps builtin_glew builtin_llvm builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix exceptions gdml http imt mathmore mlp minuit2 mysql opengl pgsql pyroot pythia8 roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd` Maybe you have some additional packages here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8828#issuecomment-899445642:257,depend,dependencies,257,https://root.cern,https://github.com/root-project/root/issues/8828#issuecomment-899445642,1,['depend'],['dependencies']
Integrability,"Okay, here are the dependencies at the moment (and users for the first few); ```; Fit; ParameterSettings.h (Minuit, Minuit2, RooFit, and MathCore). Math; Error.h (Hist) -> Might not be used in Minuit2?; FitMethodFunction.h (MathCore, MathMore, Minuit2); Functor.h (Lots of uses, including tutorial); GenAlgoOptions.h (MathCore, MathMore); IFunction.h; IFunctionfwd.h; IOptions.h; Minimizer.h; MinimizerOptions.h; Util.h; WrappedFunction.h; WrappedParamFunction.h. Math; GenAlgoOptions.cxx; MinimizerOptions.cxx",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1680#issuecomment-369583839:19,depend,dependencies,19,https://root.cern,https://github.com/root-project/root/pull/1680#issuecomment-369583839,3,"['Wrap', 'depend']","['WrappedFunction', 'WrappedParamFunction', 'dependencies']"
Integrability,"Old proxy classes constantly require casting when the pointee of the; proxy is used. Now, the correct type is stored, and constness of the; public interface has been improved.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5501:147,interface,interface,147,https://root.cern,https://github.com/root-project/root/pull/5501,1,['interface'],['interface']
Integrability,"Old versions of Vdt (0.4.1 and below) do not export version information, but ROOT needs 0.4.0 at least, because of the vdt/tanh.h header, so we deduce the version based on the existence of that header and require the minimum version that ROOT needs. This file now also creates an imported; target that can be used within ROOT to link against VDT with dependencies taken care of automatically. Fixes [ROOT-9885](https://sft.its.cern.ch/jira/browse/ROOT-9885).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3827:351,depend,dependencies,351,https://root.cern,https://github.com/root-project/root/pull/3827,1,['depend'],['dependencies']
Integrability,"On 02/10/17 11:43, Guilherme Amadio wrote:; >; > Let's see how this goes now that we are back on the old externals...; >; > I would prefer avoiding the smart pointers with ROOT 6 interfaces, ; > because I'm sure there are corner cases where it will lead to ; > problems, and I pointed out some of it in previous comments.; >; > Other than that, I once this PR is ready for merge, the typos, etc, ; > should be amended into the right commits.; >; I am not sure I understand in which commit the typo fix will go.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > <https://github.com/root-project/root/pull/1073#issuecomment-333487667>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/AGNuUxFmbbOXWlPg2lV0qNy3rDTPoYFmks5soLArgaJpZM4Pn4OQ>.; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1073#issuecomment-333489320:179,interface,interfaces,179,https://root.cern,https://github.com/root-project/root/pull/1073#issuecomment-333489320,1,['interface'],['interfaces']
Integrability,On Mac it is not working from python - let do it from C++ . Define special method and call it via pyroot interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13760:105,interface,interface,105,https://root.cern,https://github.com/root-project/root/pull/13760,1,['interface'],['interface']
Integrability,"On MacOS this simple code using std::sort of RooAbsArg crashed because std::sort MacOS implementation goes to element outside of the collection. ; This simple code reproduced the problem by crashing on MacOS. ```; std::vector<RooAbsArg*> v;; int n = 38;. for (int i = 0; i < n; ++i) {; TString name = TString::Format(""a_%d"",i);; v.push_back( new RooRealVar (name, name, 10,0,20) );; }. std::sort(v.begin(), v.end(), [](RooAbsArg*a, RooAbsArg*b) { return a->dependsOn(*b); } );; ```; ; The PR with the simple check avoid a crash observed running the example in ; https://root-forum.cern.ch/t/upper-limit-for-signal-strength-on-off-problem-multiple-independent-runs/44657",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8111:457,depend,dependsOn,457,https://root.cern,https://github.com/root-project/root/pull/8111,1,['depend'],['dependsOn']
Integrability,"On Ubuntu 22, gcc 11.2 with get the apparently spurious message:; ```; aliceesdProjectSource.cxx: In copy constructor ‘AliESDkink::AliESDkink(const AliESDkink&)’:; aliceesdProjectSource.cxx:992:54: warning: writing 16 bytes into a region of size 8 [-Wstringop-overflow=]; 992 | for (Int_t i=0;i<4;i++) (&(fTPCdensity[0][0]))[i] = (&(rhs.fTPCdensity[0][0]))[i];; | ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; In file included from aliceesdProjectHeaders.h:20,; from aliceesdProjectSource.cxx:3:; AliESDkink.h:36:26: note: destination object ‘AliESDkink::fTPCdensity’ of size 8; 36 | Float_t fTPCdensity[2][2]; //tpc cluster density before and after kink; | ^~~~~~~~~~~; ^~~~~~~~~~~; ```; I.e. complaining about having only 8 bytes when 16 are reserved. We work around this issue by using:; ```; for (Int_t i=0;i<4;i++) reinterpret_cast<Float_t*>(fTPCdensity)[i] = (&(rhs.fTPCdensity[0][0]))[i];; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11556:56,message,message,56,https://root.cern,https://github.com/root-project/root/pull/11556,1,['message'],['message']
Integrability,"On Windows, the `TMVA_Higgs_Classification.C` tutorial gives the; following error:. ```; Processing C:/build/night/LABEL/windows10/SPEC/default/V/master/root/tutorials/tmva/TMVA_Higgs_Classification.C...; In file included from input_line_10:1:; C:\build\night\LABEL\windows10\SPEC\default\V\master\root\tutorials\tmva\TMVA_Higgs_Classification.C:322:27: error: no member named 'Python_Executable' in namespace 'TMVA'; gSystem->Exec(TMVA::Python_Executable() + "" make_higgs_model.py"");; ~~~~~~^; CMake Error at C:/build/night/LABEL/windows10/SPEC/default/V/master/build/RootTestDriver.cmake:227 (message):; error code: 1; ```. Using the same trick to get the Python executable name via; `gROOT->ProcessLine` that is also used in the other TMVA tutorials like; `TMVA_CNN_Classification.C` should fix the problem. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/testReport/projectroot/runtutorials/tutorial_tmva_TMVA_Higgs_Classification/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10379:595,message,message,595,https://root.cern,https://github.com/root-project/root/pull/10379,1,['message'],['message']
Integrability,"On Windows, we currently cannot generate all modules due to crashes, so some dictionaries are generated with the option `NO_CXXMODULE`. This information needs to be propagated and taken into account when those dictionaries are, in turn, specified as dependencies. This re-implements the logic reverted in commit 2d7373d47e (see the message for details) and closes #12591.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12602:250,depend,dependencies,250,https://root.cern,https://github.com/root-project/root/pull/12602,2,"['depend', 'message']","['dependencies', 'message']"
Integrability,On `file:\\` I hesitate on whether this is a user request to use the posix interface no matter what or whether the performance difference between `posix-eos` and `xrootd-eos` is always so great that we should make the right choice for the user.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11644#issuecomment-1309008527:75,interface,interface,75,https://root.cern,https://github.com/root-project/root/pull/11644#issuecomment-1309008527,1,['interface'],['interface']
Integrability,On el9 with the following config (and package from uscms cvmfs for non-builtin dependencies):; ```; cxx17 asimage builtin_clang builtin_cling builtin_gl2ps builtin_gtest builtin_llvm builtin_lz4 ; builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_xxhash builtin_zlib builtin_zstd clad; dataframe davix fitsio gdml http imt mysql opengl pyroot roofit root7 rpath runtime_cxxmodules; shared sqlite ssl tmva tmva-cpu tmva-pymva tpython spectrum vdt x11 xml xrootd; ```; In particular the following for compressions:; ```; builtin_lz4 builtin_lzma builtin_zlib builtin_zstd; ```; ```; cmslpc-el9-heavy01:src (master) pcanal$ uname -a; Linux cmslpc-el9-heavy01.fnal.gov 5.14.0-427.28.1.el9_4.x86_64 #1 SMP; PREEMPT_DYNAMIC Fri Aug 2 03:44:10 EDT 2024 x86_64 x86_64 x86_64; GNU/Linux; ```; The test 18 and 43 produced a PNG file that slight smaller that expected:; ```; Test 18: TGaxis 2.................................................. OK; PDF output................................................ OK; JPG output................................................ OK; PNG output......................................... 18 FAILED; Result = 15655; Reference = 16076; Error = 421 (was 350); C file result............................................. OK; ```; ```; Test 43: Divided pads and TLatex................................... OK; PDF output................................................ OK; JPG output................................................ OK; PNG output......................................... 43 FAILED; Result = 24855; Reference = 25421; Error = 566 (was 300); C file result............................................. OK; ```. Visual inspection of the png files showed no differences.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16492:79,depend,dependencies,79,https://root.cern,https://github.com/root-project/root/pull/16492,1,['depend'],['dependencies']
Integrability,"On macOS, we rely on the `textutil` executable to set some packaging metadata. However, we can't assume that it's always present. For example, in the nix packages build, it is not available, and there is a hack that disables setting the package metadata:; https://github.com/nixos/nixpkgs/blob/848699d4c1f669af01918b7cfdb438329667ddc2/pkgs/applications/science/misc/root/default.nix#L145. However, the `CPACK_PACKAGE_DESCRIPTION_FILE` and; `CPACK_RESOURCE_FILE_README` metadata that depends on `textutil` is optional and not crucial. It's used only in rare situations, like creating Windows installers automatically. See also the description here:; https://cmake.org/cmake/help/latest/module/CPack.html. It would be more appropriate to not fail the configuration if `textutil` is not found, but instead just to skip setting this metadata.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16433:483,depend,depends,483,https://root.cern,https://github.com/root-project/root/pull/16433,1,['depend'],['depends']
Integrability,"On the jenkins build node the error appears likely because of '-Dsoversion=""On""' and the following. One test that fails is 'runload.C' in roottest/root/treeformula/sync. There we have (essentially):; ```; {; gROOT->ProcessLine("".L loadcode.C+"");; ...; TTree *t; _file0->GetObject(""t"",t);; }; ```; The use of TTree means that before executing the script libTree is laoded.; During the execution of CompileMacro, the depend library are loaded (see for example the collection line [3363](https://github.com/root-project/root/blob/f32d06e70ce357b53050a25eecd5186859021e30/core/base/src/TSystem.cxx#L3363) .; And in this case the result is:; ```; loadcode_C.so libTree.6.21.01.so libTree.so; ```; which coupled with the ***new*** feature that gSystem->Load first dlclose the library then reopen it means that libTree is dlclose 2 or 3 times (one for both the versioned and unversioned version). This behavior is a **very significant** departure from the existing behavior (where, because the libraries were added to the link line, the library were never reloaded). Reloading arbitrary depend library is never a good idea since they (are likely to) include static object that may do things that are **essential** to do only once (initialization, connection to db). Technically CompileMacro could (as it does elsewhere) first check if the library is loaded. But still several questions:. 1) Why is libTree listed twice in the list of depend library?. 2) When should gSystem->Load automatically reload a library, if ever?. @Axel-Naumann @vgvassilev opinions?. PS. Even-though the set of test would be fixed by updating gSystem->Load and/or CompileMacro, the PR is still likely necessary for the case where CompileMacro generates a pcm (and thus need to support reload) or the case where the user explicitly unload a library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5420#issuecomment-618042721:415,depend,depend,415,https://root.cern,https://github.com/root-project/root/pull/5420#issuecomment-618042721,3,['depend'],['depend']
Integrability,"On top of what we have already and a bit more of pyroot testing, I need to figure out what to do with the signatures. The fact that the size of bins is an integer and not a size_t is a problem for initialiser lists. Now one would do in Python:; ``` py; v = ROOT.std.vector('double')(); for i in [0,1,2,3,4,5]: v.push_back(i); tdf.Histo1D(('myhisto', 'myhisto', int(v.size()), v.data()),""mycol""); ```; that cast is bad. What would be desirable would be:; ``` py; tdf.Histo1D(('myhisto', 'myhisto', v.size(), v.data()),""mycol""); ```; or even; ``` py; tdf.Histo1D(('myhisto', 'myhisto', v),""mycol""); ```; The last but one line involves a change in the interface (which makes it incompatible with the one of TH*) while the last one also a change in PyROOT for implicit conversions to array_view<T>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1294#issuecomment-342848318:649,interface,interface,649,https://root.cern,https://github.com/root-project/root/pull/1294#issuecomment-342848318,1,['interface'],['interface']
Integrability,"Once TBB used inside thread, one should provide that dependency",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8024:53,depend,dependency,53,https://root.cern,https://github.com/root-project/root/pull/8024,1,['depend'],['dependency']
Integrability,"Once TBB used inside thread, one should provide that dependency. Partially solves #8022. Need to be applied also for 6.24 branch",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8023:53,depend,dependency,53,https://root.cern,https://github.com/root-project/root/pull/8023,1,['depend'],['dependency']
Integrability,"One cannot run tutorial without ""davix"" plugin.; But even after I enable it - it crashes with following messages:; ```; terminate called after throwing an instance of 'ROOT::Experimental::RException'; what(): expected RNTuple named 'GlobalTempData' but instead found '' in file 'GlobalLandTemperaturesByCity.root' (unchecked RResult access!); At:; ROOT::Experimental::RResult<ROOT::Experimental::RNTuple> ROOT::Experimental::Internal::RMiniFileReader::GetNTupleBare(std::string_view) [/home/linev/git/webgui/tree/ntuple/v7/src/RMiniFile.cxx:996]; ```; May be @jblomer can comment?. Regarding `RCanvas` - there are two instances of them.; Why one need to call `Update/Modify` only for first one?. Again, it is only demonstration of very special functionality, should not be present in this tutorial.; If tutorial does not work, I will have to fix such drawing by other means.; For instance, in current master subpads in RCanvas are broken - but I will fix it very soon",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6808#issuecomment-745146481:104,message,messages,104,https://root.cern,https://github.com/root-project/root/pull/6808#issuecomment-745146481,1,['message'],['messages']
Integrability,"One challenge (see the related unfinished PR: https://github.com/root-project/root/pull/1053) is that it is always ""risky"" to make memory allocation (or any other 'can fail' operation) within a signal handling routine. I would strongly recommend that the capture the stack-trace be attempted in a separate PR. (And it would be even better if #1053 was first completed).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10366#issuecomment-1122806975:210,rout,routine,210,https://root.cern,https://github.com/root-project/root/pull/10366#issuecomment-1122806975,1,['rout'],['routine']
Integrability,"One have to provide connection id when accepting file dialog request from client.; This allows to use file dialogs for window with multiple connections at the same time. In eve7 use `RWebWindow` methods to avoid direct dependency from `RBrowser`. `RFileDialog` also used in `RBrowser`, `RCanvas`, `TWebCanvas`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13154:219,depend,dependency,219,https://root.cern,https://github.com/root-project/root/pull/13154,1,['depend'],['dependency']
Integrability,One meta point. I am not sure whether a global setting (as opposed to a per tree) setting is the right interface. (As is the setting is inherently non-thread safe and another thread could switch during the creation of a TTree) ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1003#issuecomment-329969189:103,interface,interface,103,https://root.cern,https://github.com/root-project/root/pull/1003#issuecomment-329969189,1,['interface'],['interface']
Integrability,One more thing before merging: ; can you maybe add in the commit message a note that this is just a visual change and it has no effect,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5368#issuecomment-614703276:65,message,message,65,https://root.cern,https://github.com/root-project/root/pull/5368#issuecomment-614703276,1,['message'],['message']
Integrability,"One need virtual method in `TVirtualIndex` to extract Ndim from the; `TTreeFormula`. Otherwise one has link `Tree` lib again `TreePlayer` and; `Hist`, making circular dependency",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5246:167,depend,dependency,167,https://root.cern,https://github.com/root-project/root/pull/5246,1,['depend'],['dependency']
Integrability,"One option is to add a pythonization to your vector class to use the `__getitem__` of `std::vector`. Something like this:; ```python; import cppyy. cppyy.cppdef(r""""""; template <typename TYPE>; struct vec : public std::vector<TYPE> {; vec<TYPE>& operator()(int ){return *this;}; };. using my_tmp = vec<double>;; """"""). def pythonizor(klass, name):; if name.startswith('vec<double>'):; klass.__getitem__ = cppyy.gbl.std.vector('double').__getitem__. cppyy.py.add_pythonization(pythonizor). b = cppyy.gbl.my_tmp(); b.emplace_back(); print(b[0]); ```. It would need to be generalized to that the template parameter is parsed (here I just show the example for double). Note that the pythonizations are injected lazily: only when your class is actually used for the first time, the injection will happen. More info here:; https://cppyy.readthedocs.io/en/latest/pythonizations.html#python-callbacks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7179#issuecomment-778279150:696,inject,injected,696,https://root.cern,https://github.com/root-project/root/issues/7179#issuecomment-778279150,2,['inject'],"['injected', 'injection']"
Integrability,"One thing RDF could do is:; ```; chain->SetBranchStatus(""*"", kFALSE);; for( name : list_of_names_of_used_top_level_used) ; chain->SetBranchStatus(std::string(name ) + ""*"", kTRUE);; ```; This would have the side effect to have all the TTree interface ignore the unused branches (that includes not copying them as part of CloneTree).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7727#issuecomment-821198734:240,interface,interface,240,https://root.cern,https://github.com/root-project/root/issues/7727#issuecomment-821198734,1,['interface'],['interface']
Integrability,"Only register RooFitCuda as a link dependency, just like; RooFitMultiprocess. This should close https://github.com/root-project/root/issues/13415.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13417:35,depend,dependency,35,https://root.cern,https://github.com/root-project/root/pull/13417,1,['depend'],['dependency']
Integrability,"Only remaining open review question: is Minuit still a dependency? https://github.com/root-project/root/pull/8596#discussion_r663897546. Other than that I addressed everything. Let's see whether it compiles :). Note: we still need to merge #8567 and then rebase this PR on that, so don't merge yet please.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8596#issuecomment-880927548:55,depend,dependency,55,https://root.cern,https://github.com/root-project/root/pull/8596#issuecomment-880927548,1,['depend'],['dependency']
Integrability,"Opening and closing a TFile in python3.11 occasionally fails. Fresh build of ROOT version 27.01 with newest python (3.11) on macOS. Sometimes the MWE below will fail, and sometimes it will succeed:. ```; if __name__ == ""__main__"": ; with TFile(""file1.root"", ""recreate"") as outfile: ; h = ROOT.TH1F() ; outfile.Close(); ```. about half the time it gives the following error output:. `; *** Break *** segmentation violation; [/Users/austindestcroix/packages/root_py311_v6_26.10/myInstall_p311/lib/libCore.so] TUnixSystem::DispatchSignals(ESignals) (no debug info); [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info); [/Users/austindestcroix/packages/root_py311_v6_26.10/myInstall_p311/lib/libcppyy_backend3_11.so] WrapperCall(long, unsigned long, void*, void*, void*) (no debug info); [/Users/austindestcroix/packages/root_py311_v6_26.10/myInstall_p311/lib/libcppyy_backend3_11.so] WrapperCall(long, unsigned long, void*, void*, void*) (no debug info); [/Users/austindestcroix/packages/root_py311_v6_26.10/myInstall_p311/lib/libcppyy_backend3_11.so] Cppyy::CallConstructor(long, unsigned long, unsigned long, void*) (no debug info); [/Users/austindestcroix/packages/root_py311_v6_26.10/myInstall_p311/lib/libcppyy3_11.so] CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (no debug info); [/Users/austindestcroix/packages/root_py311_v6_26.10/myInstall_p311/lib/libcppyy3_11.so] CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (no debug info); [/Users/austindestcroix/packages/root_py311_v6_26.10/myInstall_p311/lib/libcppyy3_11.so] CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (no debug info); [/Users/austindestcroix/packages/root_py311_v6_26.10/myInstall_p311/lib/libcppyy3_11.so] CPyCppyy::CPPConstructor::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (no debug info); [/Users/austindestcroix/packages/root_py311_v6_26.10/myInstall_p311/lib/libcppyy3_11.so] CPyCppyy::(anonymous namespa",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11823:730,Wrap,WrapperCall,730,https://root.cern,https://github.com/root-project/root/issues/11823,2,['Wrap'],['WrapperCall']
Integrability,Original commit message:. The Sema::LookupConstructor is not iteration safe. When looking up a ctor the modules infrasturcture deserializes more ctor; candidates in the body of the function causing the internal vector implementation; to rellocate and invalidate the pointers. This workaround should address the failures reported by LCG. The real fix is being processed here https://reviews.llvm.org/D91524 and we; after being merged we should be able to backport it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7350:16,message,message,16,https://root.cern,https://github.com/root-project/root/pull/7350,1,['message'],['message']
Integrability,"Original commit message:; ""; The current logic of pseudo-automatic modulemap discovery is a little fragile; as it mounts a virtual file named module.modulemap in the location where the; a give system library header is found (cuda.h, etc). However, if the libraries; are squashed into a single folder then we end up mounting a file over another; virtual file. This should be a hard error, however, on systems such as OSX some; libraries already come with modulemap files and we should just not mount our; predefined ones. This makes it very difficult to distinguish when to issue the; hard error. While this patch is not a solution for the general when the modulemaps are; automatically discovered (-fimplicit-module-maps), we can use the real file; stems in cases where we are called with -fno-implicit-module-maps. As a side effect this fixes the *non-recommended* squashing of library header; files into a single folder.; """,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5178:16,message,message,16,https://root.cern,https://github.com/root-project/root/pull/5178,1,['message'],['message']
Integrability,"Original commit message:; ""Constify. NFC.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1373:16,message,message,16,https://root.cern,https://github.com/root-project/root/pull/1373,1,['message'],['message']
Integrability,"Original commit message:; ""[cxxmodules] Don't complain about redeclaration of declared annotated enum. Extend c14934e to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml; DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type; ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;; ^; DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here; enum L1GtObject {; ^. cc: @oshadura, @davidlange6, @smuzaffar, @mrodozov",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5059:16,message,message,16,https://root.cern,https://github.com/root-project/root/pull/5059,3,"['interface', 'message']","['interface', 'message']"
Integrability,"Original commit message:; ""[modules] Print input files when -module-file-info file switch is passed. This patch improves traceability of duplicated header files which end up in multiple pcms.; """,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2491:16,message,message,16,https://root.cern,https://github.com/root-project/root/pull/2491,1,['message'],['message']
Integrability,"Original commit message:; ""[tblgen] Remove uses of std::ptr_fun, it's removed in C++17."". @davidlt, does that fix ROOT-9085?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1297:16,message,message,16,https://root.cern,https://github.com/root-project/root/pull/1297,1,['message'],['message']
Integrability,"Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:; ```; Commit to a primary definition for a class when we load its first; member. Previously, we wouldn't do this if the first member loaded is within a; definition that's added to a class via an update record, which happens; when template instantiation adds a class definition to a declaration; that was imported from an AST file. This would lead to classes having member functions whose getParent; returned a class declaration that wasn't the primary definition, which; in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because; the setup required to get us into the broken state is very subtle, but; have confirmed that this fixes it.; ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:; ```; Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed.; ```; which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13370:9,message,message,9,https://root.cern,https://github.com/root-project/root/pull/13370,1,['message'],['message']
Integrability,"Original message:; ""[cmake] Use CLANG_BINARY_DIR to determine the build directory. The patch puts the ClangConfig.cmake in the expected location when clang is; embedded into a framework.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1536:9,message,message,9,https://root.cern,https://github.com/root-project/root/pull/1536,1,['message'],['message']
Integrability,"Originally, I used https://github.com/GooFit/Minuit2 - that uses a python script to re-copy the changed files from the ROOT sources. Being a git repository, it also easily is included as a submodule in the `/extern` folder for GooFit, for example. After meeting and talking with @lmoneta a couple of days ago over a coffee, he outlined the procedure I initially implemented. He showed me the old ""build"" directory, with an old bash script that copied the necessary files out. He wanted me to make a new folder to eventually replace his build folder. The idea is that you could create source distributions that would be packaged and made available as downloads to continue the outdated ones available here: http://project-mathlibs.web.cern.ch/project-mathlibs/minuit/release/download.html. I added this though `make package_source`, and included `make package` for binary distributions as well. The integrated version does look a bit better, though it is a bit more invasive and not nearly as well separated. I do need to copy to `/inc/Math`, etc, since a source distribution needs to be in the source directory. Everything is copied to `INSTALL_PREFIX/include` when it's installed or packaged for a binary distribution. As for use, a git only solution really is not feasible, unfortunately, with any method that does not include git submodules. The current methods for a user are:. * Install beforehand from one of the downloadable packages, either building a source package or installing a binary package. This is the way some people will get it, but not ideal for a modern package that wants to have minimal dependencies.; * Have CMake download and build the package with `ExternalProject` - probably the best solution for now, still not as nice for something like GooFit that already has all dependencies as git submodules.; * Check out all of ROOT as a submodule, then `add_subdirectory(extern/root/math/minuit2)`. Much more disk space usage that needed, but otherwise also a decent solution. Migh",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1680#issuecomment-369601161:898,integrat,integrated,898,https://root.cern,https://github.com/root-project/root/pull/1680#issuecomment-369601161,1,['integrat'],['integrated']
Integrability,"Other generic request: it is required to write meaningful commit messages and squash ""non functional"" changes (like remove one empty line and etc.).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5179#issuecomment-601124789:65,message,messages,65,https://root.cern,https://github.com/root-project/root/pull/5179#issuecomment-601124789,1,['message'],['messages']
Integrability,Other todos (potentially convert into issues):. - Document in the RDF doxygen introduction; - Integrate into the `df10*` tutorials,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6380#issuecomment-696097350:94,Integrat,Integrate,94,https://root.cern,https://github.com/root-project/root/pull/6380#issuecomment-696097350,1,['Integrat'],['Integrate']
Integrability,Otherwise one has to set dependency from ProofPlayer lib,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5240:25,depend,dependency,25,https://root.cern,https://github.com/root-project/root/pull/5240,1,['depend'],['dependency']
Integrability,"Otherwise the externals are built in x86_64 mode and are not compatible with the rest of the libraries. The error message is then something like:; ```; ld: warning: ignoring file lib/liblzma.a, building for macOS-arm64 but attempting to link with file built for macOS-x86_64; ```. See also https://discourse.cmake.org/t/building-application-using-externalproject-add-on-m1-cpu/4931/7",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12887:114,message,message,114,https://root.cern,https://github.com/root-project/root/pull/12887,1,['message'],['message']
Integrability,Otherwise variable `ROOT_qt5web_FOUND` will be set and depend project may try to build libraries which using it,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12872:55,depend,depend,55,https://root.cern,https://github.com/root-project/root/pull/12872,2,['depend'],['depend']
Integrability,"Ouch - that's terrible (and I remember now having stepped into this pitfall before). It's ""simulating"" `TCollection::AddAt(idx, val)`. We need to choose between breaking backward compatibility and fixing interface expectation :-/ I really don't know what to do here. I'd even argue that we should remove the function altogether, as the cleanest solution. I will close this in favor of removal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7824#issuecomment-817702408:204,interface,interface,204,https://root.cern,https://github.com/root-project/root/pull/7824#issuecomment-817702408,1,['interface'],['interface']
Integrability,"Our CMake code modifies `find_package` to ignore any ROOT builtins, such that the builtin LLVM doesn't find and use system versions of the builtin dependencies. This is a bit hacky, but fortunately this needs to be done only when builtins are used. Therefore, this commit suggests to only do this redefinition of `find_package` if any builtins are used. This closes #8633, where it was requested to avoid this hack for the sake of being compatible with the `vcpkg` package manager. Although the hack is not completely removed, it is removed for the case where not builtins are used, which is probably what is done when using a C++ package manager to manage dependencies.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16274:147,depend,dependencies,147,https://root.cern,https://github.com/root-project/root/pull/16274,2,['depend'],['dependencies']
Integrability,Our current understanding is that we lack the following Python packages for the optional runtime dependencies of TMVA; ```; tensorflow ; keras; torch; sklearn; xgboost; sonnet; graph_nets; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14553#issuecomment-1941552355:97,depend,dependencies,97,https://root.cern,https://github.com/root-project/root/issues/14553#issuecomment-1941552355,1,['depend'],['dependencies']
Integrability,"Output lines are in wrong order when running CTest on Windows x64, as shown below:; ```; 1397: -- BEGIN TEST OUTPUT --; 1397:; 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C...; 1397: WithDtor(): 1; 1397: Ident: IAmWithDtor!; 1397: Now deleting TInterpreterValue; 1397: ~WithDtor() 0; 1397: Now all WithDor should be gone; we have 0 left; 1397: About to return a WithDtor; 1397:; 1397: -- END TEST OUTPUT --; 1397: -- BEGIN OUTDIFF OUTPUT --; 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021; 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022; 1397: @@ -1,7 +1,7 @@; 1397:; 1397: WithDtor():1; 1397: -AbouttoreturnaWithDtor; 1397: Ident:IAmWithDtor!; 1397: NowdeletingTInterpreterValue; 1397: ~WithDtor()0; 1397: NowallWithDorshouldbegone;wehave0left; 1397: +AbouttoreturnaWithDtor; 1397:; 1397: -- END OUTDIFF OUTPUT --; 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):; 1397: compare 'stdout' error: 1; 1397:; 1397:; 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec; ```; The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position).; This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9944:1074,message,message,1074,https://root.cern,https://github.com/root-project/root/issues/9944,1,['message'],['message']
Integrability,"Over the years we have a pathological issue with cling when it calls directly; compiler API. Most of the API assume they are called from code residing in a; text file. This code has valid source locations which can be used for; comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling; should have an interface which gives a pseudo-valid, commonly-rooted unique; source location. We are bitten by this fact when preloading modules as if we have diagnostics; they cannot be ordered due to the fact that the compared decls from two; different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have; this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4339:401,interface,interface,401,https://root.cern,https://github.com/root-project/root/pull/4339,1,['interface'],['interface']
Integrability,"Overall goals:; - fix currently broken dependencies, e.g. touch a header in histfactory does not regenerate its dictionary;; - simplify G__Core CMake setup;; - remove unnecessary dictionaries;; - reduce dependencies / occasions to rebuild dictionaries, e.g. touch hist/hist/src/TH1.cxx and the dictionaries of libraries depending on libHist were rebuild, and so was the PCH. I see an issue with runtime_cxxmodules; let's see what Jenkins says!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3371:39,depend,dependencies,39,https://root.cern,https://github.com/root-project/root/pull/3371,3,['depend'],"['dependencies', 'depending']"
Integrability,"P.S.: The commit message references a geom PR, it should close https://github.com/root-project/root/issues/10984",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13751#issuecomment-1740176300:17,message,message,17,https://root.cern,https://github.com/root-project/root/pull/13751#issuecomment-1740176300,1,['message'],['message']
Integrability,PR #5914 should give us a better message what misses a dependency on Hist...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5800#issuecomment-648259207:33,message,message,33,https://root.cern,https://github.com/root-project/root/pull/5800#issuecomment-648259207,2,"['depend', 'message']","['dependency', 'message']"
Integrability,"PSt10shared_ptrIT_ERKS6_' unresolved while linking [cling interface function]!; You are probably missing the definition of std::shared_ptr<TH1D>* ROOT::Internal::RDF::MakeSharedOnHeap<TH1D>(std::shared_ptr<TH1D> const&); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT6Detail3RDF13MakeResultPtrI4TH1DEENS_3RDF10RResultPtrIT_EERKSt10shared_ptrIS6_ERNS1_12RLoopManagerES8_INS_8Internal3RDF11RActionBaseEE' unresolved while linking [cling interface function]!; You are probably missing the definition of ROOT::RDF::RResultPtr<TH1D> ROOT::Detail::RDF::MakeResultPtr<TH1D>(std::shared_ptr<TH1D> const&, ROOT::Detail::RDF::RLoopManager&, std::shared_ptr<ROOT::Internal::RDF::RActionBase>); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZSteqI4TH1DEbRKSt10shared_ptrIT_EDn' unresolved while linking [cling interface function]!; You are probably missing the definition of bool std::operator==<TH1D>(std::shared_ptr<TH1D> const&, decltype(nullptr)); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT8Internal3RDF16MakeSharedOnHeapINS_6Detail3RDF9RNodeBaseEEEPSt10shared_ptrIT_ERKS8_' unresolved while linking [cling interface function]!; You are probably missing the definition of std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZStneIN4ROOT8Internal3RDF11RActionBaseEEbRKSt10shared_ptrIT_EDn' unresolved while linking [cling interface function]!; You are probably missing the definition of bool std::operator!=<ROOT::Internal::RDF::RActionBase>(std::shared_ptr<ROOT::Internal::RDF::RActionBase> const&, decltype(nullptr)); Maybe you need to load the corresponding shared library?; root [2]; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6439#issuecomment-1573184913:5925,interface,interface,5925,https://root.cern,https://github.com/root-project/root/issues/6439#issuecomment-1573184913,2,['interface'],['interface']
Integrability,"Part of the RooFit code modernization, avoiding the use of unnecessary; wrapper classes and using a simple templated struct instead. The change in this PR is thoroughly tested by `stressRooFit`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10115:72,wrap,wrapper,72,https://root.cern,https://github.com/root-project/root/pull/10115,1,['wrap'],['wrapper']
Integrability,"Partial fix of #8708.; In a setup where ROOT was installed in a system directory, ROOT was picking up headers from that directory instead of its own. . ## How to reproduce:; 1. `echo '#error This is the wrong header' > /my/include/directory/RooSpan.h` (or a few other headers).; 2. Install some builtins into that directory, e.g. VDT; 3. `cmake -DCMAKE_PREFIX_PATH=/my/include/directory/ <root>` to create a dependency to that include directory.; 4. Build. The problem only becomes visible when `A` depends on `B and C`, and `B` depends on something in `/system/include/`, and `C` is installed in those system includes as well. This generates a compile command such as:; ```; -I.../core/x -I.../core/y -I.../core/... -I.../A/include -I.../B/include -I/system/include/ -I.../C/include ...; ```. ## In this PR:; - Includes for VDT and XROOTD are fixed by making them `IMPORTED` targets, so their includes have lowest precedence.; - Some cheating where include directories are copied around between targets is removed. CMake should handle this.; - Some dependency and target management is simplified (or rather modernised with target-based cmake); - A broken dependency in RooFit is fixed, which was previously hidden by the cheating with include directories. ## What remains to be done:; It is likely that more builtins (or rather `FindXXX` have to be converted to `IMPORTED` targets, so they don't provoke this error again. A broken configuration can be detected by; 1. Having CMake pick up a dependency in some common directory; 2. Either; - Placing a lot of `#error`-ROOT headers in there or; - Searching `compile_commands.json` for `-I/my/include/directory/`; 3. Fixing the `FindXXX` for this dependency.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8709:408,depend,dependency,408,https://root.cern,https://github.com/root-project/root/pull/8709,7,['depend'],"['dependency', 'depends']"
Integrability,"Partially solves: [ROOT-10915](https://its.cern.ch/jira/browse/ROOT-10915). Reasoning from the ticket:; > It seems most header files are not added to the library targets that compose ROOT. This is most imminent to me when I create a Visual Studio project by CMake. Almost all header files are missing in the solution explorer. > While this still allows to build ROOT, the IDE experience is severly limited. Automatic code refactoring and static analysis fails to a large degree, because the headers are not considered part of the project. E.g. the clang-tidy integration in Visual Studio cannot fix any header files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6014:559,integrat,integration,559,https://root.cern,https://github.com/root-project/root/pull/6014,1,['integrat'],['integration']
Integrability,"Parts of this were accessed through redefining private/protected as public; which, besides of being a nasty hack, does not work with gcc-5. TColor had a static bool member fgInitDone that is now a local static in InitializeColors(). I just added a bool argument force=kFALSE as this was a minimal change. If desired, I can do the following:; . Split InitializeColors() into initial part that does the check is-init-done and the actual initialization code that is private.; . Introduce new static function InitializeColorsForce() that skips the check.; This way the interface to InitializeColors() will not change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/99:565,interface,interface,565,https://root.cern,https://github.com/root-project/root/pull/99,1,['interface'],['interface']
Integrability,"Personally I avoid merging parameters, the GNU/getopts standards might allow it, but I personally think it's a source of confusion for new users. Regardless I'll do it, but @lmoneta has mentioned on the forums that he might be making a seperate PR swapping the protocol from HTTP to HTTPS, since this actually seems to be what the redirect is doing to begin with. Incidentally every instance of curl in this PR does seem to be using http. Alternative he proposed `data = TFile.Open('http://root.cern.ch/files/tmva_class_example.root')`. Personally I think the best approach would be to use both, since it ensures the security guarantees of HTTPS whilst also proactively fixing any potential redirects in the future just on the off chance. Would you like me to handle HTTPS in this PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7725#issuecomment-809361845:261,protocol,protocol,261,https://root.cern,https://github.com/root-project/root/pull/7725#issuecomment-809361845,1,['protocol'],['protocol']
Integrability,"Personally I wouldn't do this: TSpectrum has no alternative (no, RooFit doesn't do peak finding), we get questions about it on the forum occasionally, and it also doesn't have any external dependencies. To me, this is a good candidate to stay as ""legacy"". We don't remove it and don't disable it, but also don't make an effort to maintain it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16351#issuecomment-2323502062:189,depend,dependencies,189,https://root.cern,https://github.com/root-project/root/pull/16351#issuecomment-2323502062,1,['depend'],['dependencies']
Integrability,Please consider adding a copy/paste of the warning message in the commit log and/or explicit what the warning was about.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16630#issuecomment-2400952330:51,message,message,51,https://root.cern,https://github.com/root-project/root/pull/16630#issuecomment-2400952330,1,['message'],['message']
Integrability,"Please let me know how you want to proceed, in particular:. * One PR / Three PR; * Start integration from bug fix branch / Start integration from master branch; * It would also be nice to bump arrow to 0.11.1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3236#issuecomment-453117406:89,integrat,integration,89,https://root.cern,https://github.com/root-project/root/pull/3236#issuecomment-453117406,2,['integrat'],['integration']
Integrability,Please note this is not the master but an experimental branch. We believe we have the right replacement (see the commit message).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/543#issuecomment-298656027:120,message,message,120,https://root.cern,https://github.com/root-project/root/pull/543#issuecomment-298656027,1,['message'],['message']
Integrability,"Please read my commit messages on this subject, where I explain why I am making the changes to use includes from the source directory. In particular, see commit 084303671a6cc2184ccfa6c1f7153b5415a50792.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5170#issuecomment-600595943:22,message,messages,22,https://root.cern,https://github.com/root-project/root/pull/5170#issuecomment-600595943,1,['message'],['messages']
Integrability,"Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; I was build ROOT from source on a FreeBSD VM.; after command: cmake -Dall=ON -Dcuda=OFF -Dalien=OFF -Doracle=OFF ../root-6.26.06,; I got a warning:; Looking for XROOTD; -- Found Xrootd version num: 4.10.0 (setting -DROOTXRDVERS=400100000); -- libXrdMain not found: xproofd will be a wrapper around xrootd; -- include_dirs: /usr/local/include/xrootd;/usr/local/include/xrootd/private; -- libraries: /usr/local/lib/libXrdUtils.so;/usr/local/lib/libXrdClient.so;/usr/local/lib/libXrdCl.so; CMake Warning (dev) at /usr/local/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:438 (message):; The package name passed to `find_package_handle_standard_args` (PkgConfig); does not match the name of the calling package (Arrow). This can lead to; problems in calling code that expects `find_package` result variables; (e.g., `_FOUND`) to follow a certain pattern.; Call Stack (most recent call first):; /usr/local/share/cmake/Modules/FindPkgConfig.cmake:99 (find_package_handle_standard_args); cmake/modules/FindArrow.cmake:39 (include); cmake/modules/SearchInstalledSoftware.cmake:17 (_find_package); cmake/modules/SearchInstalledSoftware.cmake:1040 (find_package); CMakeLists.txt:245 (include); This warning is for project developers. Use -Wno-dev to suppress it. I just ignored it.; after command: cmake --build . --target install, everything goes well and then it stopped with following message. [ 52%] Generating G__Core.cxx, ../lib/Core.pcm; #0 0x00000000044aaf65 llvm::sys::PrintStackTrace(llvm::raw_ostream&) Signals.cpp:0:0; #1 0x00000000044a91b6 llvm::sys::RunSignalHandlers() Signals.cpp:0:0; #2 0x00000000044ab726 SignalHandler(int) Signals",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11430:971,message,message,971,https://root.cern,https://github.com/root-project/root/issues/11430,1,['message'],['message']
Integrability,Please see commit messages for full explanation of the changes. Failing test: http://cdash.cern.ch/testDetails.php?test=24129853&build=345069,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/512:18,message,messages,18,https://root.cern,https://github.com/root-project/root/pull/512,1,['message'],['messages']
Integrability,Please see commit messages for more details.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4330:18,message,messages,18,https://root.cern,https://github.com/root-project/root/pull/4330,1,['message'],['messages']
Integrability,"Please see commit messages for more information. Note: For the regular binary releases, `-Drpath=ON -DCMAKE_INSTALL_RPATH='$ORIGIN/../lib'` should be added to our Jenkins jobs in order to use relative `RUNPATH` and not require setting `LD_LIBRARY_PATH` afterwards for using ROOT.; The only setup that will be really required later would be setting `PYTHONPATH` to the same as `root-config --libdir` before trying to `import ROOT` from Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6735:18,message,messages,18,https://root.cern,https://github.com/root-project/root/pull/6735,1,['message'],['messages']
Integrability,Please see commit messages for more information. This probably also fixes [ROOT-9139](https://sft.its.cern.ch/jira/browse/ROOT-9139).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1419:18,message,messages,18,https://root.cern,https://github.com/root-project/root/pull/1419,1,['message'],['messages']
Integrability,"Please, if you can, do the PR. I actually don't understand where it should go, `v6-28-00-patches` branch of ROOT?. I have one more observation. When I don't modify the cmake, then as expected I get during configuration message; ```; Not able to recognize SSL version 3.1.0, disable SSL; ```; and `civetweb` is built with `-DNO_SSL` but `libssl.so.3` still gets linked. As I understand, this is because the `libRHTTP.so` is linked to `libNet.so` which links `libssl.so.3`. This is quite misleading as looking at `ldd libRHTTP.so` one can come to conclusion that it has been built with support of openssl even though this is not the case. I understand that this can't be avoided, it is just an observation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12766#issuecomment-1542123980:219,message,message,219,https://root.cern,https://github.com/root-project/root/issues/12766#issuecomment-1542123980,1,['message'],['message']
Integrability,Plus additional cleanup of interface in THttpServer class. Changing arguments order in TWebWindow::Send() methods. Address most comments from #1785,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1852:27,interface,interface,27,https://root.cern,https://github.com/root-project/root/pull/1852,1,['interface'],['interface']
Integrability,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling.; * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214); * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7518#issuecomment-808738232:459,message,messages,459,https://root.cern,https://github.com/root-project/root/issues/7518#issuecomment-808738232,2,"['inject', 'message']","['injected', 'messages']"
Integrability,"Possibly relevant: the last messages are:; ```Console; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for art::detail::are_cv_compatible<const arttest::StringProduct,const arttest::StringProduct*>. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for arttest::addr; Info in <TInterpreter::TCling::AutoLoad>: Trying to autoload for arttest::addr; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for arttest::addr; ```; There is in fact no `arttest::addr`. There _is_, however a `SFINAE` pair of function templates:; ```C++; namespace art {; namespace detail {; template <typename TO, typename FROM>; constexpr std::enable_if_t<are_cv_compatible<TO, FROM>::value,; std::add_pointer_t<std::remove_pointer_t<TO>>>; addr(FROM& from);. template <typename TO, typename FROM>; constexpr std::enable_if_t<!are_cv_compatible<TO, FROM>::value &&; are_cv_compatible<FROM, TO>::value,; std::add_pointer_t<std::remove_pointer_t<TO>>>; addr(FROM& from);; }; }; ```; defined in the same header as `art::detail::are_cv_compatible<...>(...)` (https://github.com/art-framework-suite/canvas/blob/c9ac983e2794a4391b1d6038842fec377e6a6884/canvas/Utilities/ensurePointer.h#L32#L48)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9583#issuecomment-1015707866:28,message,messages,28,https://root.cern,https://github.com/root-project/root/issues/9583#issuecomment-1015707866,1,['message'],['messages']
Integrability,"Prevent the following error when running the test with VS 2022 v17.9.0:; ```; 779: Processing C:/root-dev/git/master/tutorials/multicore/mt201_parallelHistoFill.C...; 779: [runStaticInitializersOnce]: Failed to materialize symbols: { (main, { ?_Swap@?$_Ptr_base@VTH1F@@@std@@IEAAXAEAV12@@Z,; [...]; 779: [runStaticInitializersOnce]: Failed to materialize symbols: { (main, { __orc_init_func.cling-module-9 }) }; 779: cling JIT session error: Failed to materialize symbols: { (main, { ?mt201_parallelHistoFill@@YAHXZ }) }; 779: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):; 779: error code: 1; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14783:596,message,message,596,https://root.cern,https://github.com/root-project/root/pull/14783,1,['message'],['message']
Integrability,"Previously if a message (for example warning of duplicate dictionary) happened during intialization, it would trigger the initialization of gROOT and could trigger a nested Warning. for example due to the duplicate rootmap file entry and would cause a dead lock (recursiverly taking the non recursive lock GetErrorMutex().",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11384:16,message,message,16,https://root.cern,https://github.com/root-project/root/pull/11384,1,['message'],['message']
Integrability,"Previously if a user with Python2 didn't have pyspark installed on the system it would trigger the wrong error; ```; File ""/home/vpadulan/Programs/rootproject/rootinstall/devrelease/lib/DistRDF/Backends/Spark/Backend.py"", line 22, in <module>; except ModuleNotFoundError:; NameError: name 'ModuleNotFoundError' is not defined; ```; Switch to the base class `ImportError` which is Python2 compatible, also improve the error message to include the link to the installation guide for pyspark (this works equally for Python2 and Python3):; ```; File ""/home/vpadulan/Programs/rootproject/rootinstall/devrelease/lib/DistRDF/Backends/Spark/Backend.py"", line 23, in <module>; raise ImportError((""cannot import module 'pyspark'. Refer to ""; ImportError: cannot import module 'pyspark'. Refer to https://spark.apache.org/docs/latest/api/python/getting_started/install.html for instructions on how to install PySpark on your system.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7705:423,message,message,423,https://root.cern,https://github.com/root-project/root/pull/7705,1,['message'],['message']
Integrability,"Previously the modules were only a environment variable, so we never; had any CMake code that added the correct dependencies here. Now we; do have runtime_cxxmodules, and we can actually properly add a; dependency here.; Without this patch a deleted C++ module file actually will never be regenerated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1038:112,depend,dependencies,112,https://root.cern,https://github.com/root-project/root/pull/1038,2,['depend'],"['dependencies', 'dependency']"
Integrability,Previously we had some strange dependency net with multiple commands; that sometimes lead to only having half a modulemap in the build dir.; Now there is only one target that depends on the generated modulemap; and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/541:31,depend,dependency,31,https://root.cern,https://github.com/root-project/root/pull/541,4,['depend'],"['dependency', 'depends']"
Integrability,Print instructive error message if builtin_llvm=off,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1509:24,message,message,24,https://root.cern,https://github.com/root-project/root/pull/1509,1,['message'],['message']
Integrability,"Print status message during cmake if PyMVA is not build and python is activated but numpy is not found. Otherwise, a missing numpy drops PyMVA silently (and confuses the user).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/272:13,message,message,13,https://root.cern,https://github.com/root-project/root/pull/272,1,['message'],['message']
Integrability,"Printing a welcome message when importing a module is uncommon in Python and quite old fashioned. If one wants to see the ROOT version, one can always print `ROOT.__version__` like for many other modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14661:19,message,message,19,https://root.cern,https://github.com/root-project/root/pull/14661,1,['message'],['message']
Integrability,"Prior to this change, TProcessID::RecursiveRemove would call TExMap::Remove without checking whether the object was in that map or not. In addition TExMap::Remove complains if it can not be found.; This resulted in spurious error message when the number of TProcessID increased passed 255 but some of the object with lower index TProcessID were deleted. See https://root-forum.cern.ch/t/resetting-tprocessid-objectcount-in-multihtreading-environment/38899; for a concrete example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5446:230,message,message,230,https://root.cern,https://github.com/root-project/root/pull/5446,1,['message'],['message']
Integrability,"Probably compatibility with other ROOT interfaces. But indeed I don't think we need to support this `TComplex` class that much. I have opened a PR to address this issue though, so it can be closed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13730#issuecomment-1738868130:39,interface,interfaces,39,https://root.cern,https://github.com/root-project/root/issues/13730#issuecomment-1738868130,1,['interface'],['interfaces']
Integrability,"Probably due to historical reasons, the Minuit2 code uses several systems to report errors, warnings, and debug info. Some of these only work when certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way); ```c++; if (PrintLevel() > 1) {; MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);; }; ```; Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set; ```c++; #ifdef WARNINGMSG; MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");; #endif; ```; Use of DEBUG and std::cout; ```c++; #ifdef DEBUG; std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;; #endif; ```; The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors; - level 1: all of level 0 + warnings; - level 2: all of level 1 + info; - level 3: all of level 2 + debug. and add the corresponding macros; ```c++; MN_WARN_MSG; MN_WARN_MSG2; MN_WARN_VAL; MN_WARN_VAL2; MN_DEBUG_MSG; MN_DEBUG_MSG2; MN_DEBUG_VAL; MN_DEBUG_VAL2; ```; in addition to the existing MN_INFO_* and MN",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6421:678,message,messages,678,https://root.cern,https://github.com/root-project/root/issues/6421,1,['message'],['messages']
Integrability,"Probably this is just a style preference, but given that we might want to implement similar approaches for other tests, wouldn't it be cleaner to specify the dependency on the xml target from the `ROOT_ADD_TEST` call? imho it looks more sustainable with the perspective of wanting to disable tests that need specific targets of the build system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16675#issuecomment-2411268091:158,depend,dependency,158,https://root.cern,https://github.com/root-project/root/pull/16675#issuecomment-2411268091,1,['depend'],['dependency']
Integrability,"Probably, but I'm a bit confused about the error message: Why would Cling output MSVC style error messages?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15321#issuecomment-2082084564:49,message,message,49,https://root.cern,https://github.com/root-project/root/issues/15321#issuecomment-2082084564,2,['message'],"['message', 'messages']"
Integrability,"Problem with changing of public interfaces - the changes themself.; RZip.h was introduced 5 years ago, but R__Zip (and several other) C functins exists for many years.; And some old ROOT-based apps may just import these symbols even without direct include of RZip.h.; See how changes looked when RZip.h was introduced:; https://github.com/root-project/root/commit/54aaba7dd8a877168f80b0dacb08748ea1d8fe28#diff-0e44fcc38860ef8d08ab17825437332e; In my mind it may end up in big problems. ; I do not see here any performance gain.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4060#issuecomment-509808702:32,interface,interfaces,32,https://root.cern,https://github.com/root-project/root/pull/4060#issuecomment-509808702,1,['interface'],['interfaces']
Integrability,"Problem with files globing - it takes alll files. ; But depending on compiled ROOT components, some pythonization files should be excluded.; It is already happens with `dataframe` component here.; Some time ago we redo all c++ cmake files to avoid files globing - I guess here we also should avoid it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8509#issuecomment-866732469:56,depend,depending,56,https://root.cern,https://github.com/root-project/root/pull/8509#issuecomment-866732469,1,['depend'],['depending']
Integrability,Prompt error message and stop the event loop instead.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3746:13,message,message,13,https://root.cern,https://github.com/root-project/root/pull/3746,1,['message'],['message']
Integrability,"Proof of concept of ROOT working with HPX as a backend. Includes one commit for the build system and another one that applies the necessary changes in the code, specifically to TThreadExecutor, and proposes an interface to specify the backend to run with when calling EnableImplicitMT. As suggested, making the choice of using hpx (instead of tbb) at runtime allows for an easier integration of the hpx library in ROOT. Drawbacks at this point: . - Can't choose the size of the threadpool. HPX always proceeds with as many as physical cores.; - Breaks all RDataFrame tests that run with a specified number of cores/slots.; - Requires `#include <hpx/hpx_main.hpp>` in the script with the main.; - Compilation becomes more cumbersome, ending up with something like: ``g++ myProgram.cpp `root-config --cflags --libs` `pkg-config --cflags --libs hpx_application` - DHPX_APPLICATION_NAME=myProgram -o myProgram.out``; - Performance (benchmarking at the moment). This PR requires HPX to be installed. If someone wants to give it a try, @amadio was so kind to build HPX into the Gentoo prefix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5364:210,interface,interface,210,https://root.cern,https://github.com/root-project/root/pull/5364,2,"['integrat', 'interface']","['integration', 'interface']"
Integrability,Propagate the path to cuda to the TMVA-dependent Genetic dictionary.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6999:39,depend,dependent,39,https://root.cern,https://github.com/root-project/root/pull/6999,1,['depend'],['dependent']
Integrability,Proper check for destruction of global interface object,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/476:39,interface,interface,39,https://root.cern,https://github.com/root-project/root/pull/476,1,['interface'],['interface']
Integrability,"Proposal to add a `requirements.txt` file and a corresponding test checking the dependencies also by the version requirement. The test throws an error for each dependency seperately due to the `SubTest`. A single exception looks like this:. ```; 3: pkg_resources.VersionConflict: (xgboost 0.80 (/home/stefan/.local/lib/python3.8/site-packages), Requirement.parse('xgboost>=0.81')); ```. @eguiraud @Axel-Naumann @etejedor @oshadura Ping :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5408:80,depend,dependencies,80,https://root.cern,https://github.com/root-project/root/pull/5408,2,['depend'],"['dependencies', 'dependency']"
Integrability,Protobuf now generates its own CMake config files. The new config files are necessary because Protobuf has grown a dependence on abseil-cpp.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14144:115,depend,dependence,115,https://root.cern,https://github.com/root-project/root/pull/14144,1,['depend'],['dependence']
Integrability,"Provide RFileDialog class. Can be used standalone or embed into other widgets.; Used now in RBrowser to implement SaveAs functionality for edited file. Key feature - sharing of web connection of RBrowser also for RFileDialog.; Includes changes in RWebWindow classes and in JSROOT,; but opens a lot of possibility for MDI interface developments in the future!. Now code is ready to be merged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4662:321,interface,interface,321,https://root.cern,https://github.com/root-project/root/pull/4662,1,['interface'],['interface']
Integrability,"Provide access to whether the enum is a scoped enum through TEnum::Property().; Add an interface to determine the underlying type of an enum, as EDataType.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4031:87,interface,interface,87,https://root.cern,https://github.com/root-project/root/pull/4031,1,['interface'],['interface']
Integrability,"Public interface creating an interpreter transaction, needs locking. I attach a stack trace from a condor job running with the latest nightly build a Python script (AGC benchmark), which led to the change in this PR. I'm not sure how to create a simple reproducer/test yet unfortunately. [htcondor-worker-trace.txt](https://github.com/root-project/root/files/12642962/htcondor-worker-trace.txt)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13657:7,interface,interface,7,https://root.cern,https://github.com/root-project/root/pull/13657,1,['interface'],['interface']
Integrability,"Put it into graf2d/gpad. For the moment it is not possible to add v7 TText into graf2d/graf due to cross-referencing between libGpad and libGraf in that case. Normally libGpad linked against libGraf, but if one adds v7 TText into libGraf, one need several v7 classes (including TCanvas) from libGpad. One gets circular dependency. Should be resolved after Axel redesigns draw attributes container. . Also include JSROOT code for FitPanel and TText. Update docu for THttpServer and JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1235:319,depend,dependency,319,https://root.cern,https://github.com/root-project/root/pull/1235,1,['depend'],['dependency']
Integrability,PyROOT does not really need to link against all libraries listed as dependencies in the CMakeLists.txt file. Some of the libraries should be loaded on demand at runtime. Related JIRA issues:; - https://sft.its.cern.ch/jira/browse/ROOT-9728; - https://sft.its.cern.ch/jira/browse/ROOT-9729,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2800:68,depend,dependencies,68,https://root.cern,https://github.com/root-project/root/pull/2800,1,['depend'],['dependencies']
Integrability,"Python2 headers still use the register keyword, which causes; issues when compiling ROOT with C++ 17, since that is also the; standard that will be used for jitting. In particular, when cppyy generates a C++ wrapper for a Python; callable parameter, CPyCppyy/API.h is jitted and so are the; Python headers. In Python2 with C++17, such jitting fails and,; as a result, the C++ wrapper can't be generated. This commit ignores -Wregister when in Python2 and C++ 17. Fixes #8152",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8263:208,wrap,wrapper,208,https://root.cern,https://github.com/root-project/root/pull/8263,2,['wrap'],['wrapper']
Integrability,"RBrowserDataCleanup derives from TObject, so it is necessary to add a `ClassDef` call as per; https://root.cern/manual/io_custom_classes/#the-classdef-macro. Also, the class is for internal use, so move it to `Internal` namespace. Generate the corresponding dictionary in Linkdef.h for proper class streaming. This seems to fix `roottest-root-core-execStatusBitsCheck` related to #13058 , but maybe the current status of these changes needs to be revisited. It seems weird to me that we need a class that depends from `TObject` in the new webgui, (especially because this adds a nasty `#include <TObject.h>` which wasn't even present before, I wonder how it compiled) but I'm maybe missing something here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13257:505,depend,depends,505,https://root.cern,https://github.com/root-project/root/pull/13257,1,['depend'],['depends']
Integrability,RConfigure module / dictionary dependency,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5782:31,depend,dependency,31,https://root.cern,https://github.com/root-project/root/pull/5782,1,['depend'],['dependency']
Integrability,"RD says it is line 1244 that causes a sigsegv. https://gitlab.cern.ch/HZZ/HZZSoftware/HZZAnalRun2Code/-/blob/changes-for-v25-fJVT/H4lAnalysisRun2/Root/H4lAnalRun2Init.cxx. At least nothing of the ATH_MSG_ERROR in the subsequent lines makes it into; the log. I`m not sure how close I can get to that in my test. Cheers,; Rod. On Wed, 16 Dec 2020 at 16:50, Attila Krasznahorkay <notifications@github.com>; wrote:. > Hmm... That in principle looks fine... So okay, your test job *is*; > relevant.; >; > Unfortunately I'm running out of ideas. The XRootD build in; > AnalysisBaseExternals does depend on a couple of libraries from the OS.; > But these should only be things that are part of HEP_OSlibs. So the worker; > nodes should not really have different versions of them...; >; > [bash][lxplus730]:~ > ldd -r /cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrd*.so | grep "" /lib"" | sed ""s/\(.*\) (0x.*)/\1/g"" | sort | uniq; > 	libc.so.6 => /lib64/libc.so.6; > 	libcom_err.so.2 => /lib64/libcom_err.so.2; > 	libcrypt.so.1 => /lib64/libcrypt.so.1; > 	libcrypto.so.10 => /lib64/libcrypto.so.10; > 	libcurl.so.4 => /lib64/libcurl.so.4; > 	libdl.so.2 => /lib64/libdl.so.2; > 	libfreebl3.so => /lib64/libfreebl3.so; > 	libgssapi_krb5.so.2 => /lib64/libgssapi_krb5.so.2; > 	libidn.so.11 => /lib64/libidn.so.11; > 	libk5crypto.so.3 => /lib64/libk5crypto.so.3; > 	libkeyutils.so.1 => /lib64/libkeyutils.so.1; > 	libkrb5.so.3 => /lib64/libkrb5.so.3; > 	libkrb5support.so.0 => /lib64/libkrb5support.so.0; > 	liblber-2.4.so.2 => /lib64/liblber-2.4.so.2; > 	libldap-2.4.so.2 => /lib64/libldap-2.4.so.2; > 	libm.so.6 => /lib64/libm.so.6; > 	libnspr4.so => /lib64/libnspr4.so; > 	libnss3.so => /lib64/libnss3.so; > 	libnssutil3.so => /lib64/libnssutil3.so; > 	libpcre.so.1 => /lib64/libpcre.so.1; > 	libplc4.so => /lib64/libplc4.so; > 	libplds4.so => /lib64/libplds4.so; > 	libpthread.so.0 => /lib64/libpthread.so.0; > 	libresolv.so.2 => /lib64/l",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-746590859:590,depend,depend,590,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746590859,1,['depend'],['depend']
Integrability,"RNINGMSG is set; ```c++; #ifdef WARNINGMSG; MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");; #endif; ```; Use of DEBUG and std::cout; ```c++; #ifdef DEBUG; std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;; #endif; ```; The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors; - level 1: all of level 0 + warnings; - level 2: all of level 1 + info; - level 3: all of level 2 + debug. and add the corresponding macros; ```c++; MN_WARN_MSG; MN_WARN_MSG2; MN_WARN_VAL; MN_WARN_VAL2; MN_DEBUG_MSG; MN_DEBUG_MSG2; MN_DEBUG_VAL; MN_DEBUG_VAL2; ```; in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes?. This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6421:2051,message,messages,2051,https://root.cern,https://github.com/root-project/root/issues/6421,1,['message'],['messages']
Integrability,"RNTupleWriter::CommitCluster (this=0xd7486120, commitClusterGroup=true) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTuple.cxx:370; #12 0xf7e2c674 in ROOT::Experimental::RNTupleWriter::~RNTupleWriter (this=0xd7486120, __in_chrg=<optimized out>) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTuple.cxx:327; #13 0x56560f58 in std::default_delete<ROOT::Experimental::RNTupleWriter>::operator() (__ptr=0xd7486120, this=<optimized out>) at /usr/include/c++/13/bits/unique_ptr.h:100; #14 0x565606cf in std::default_delete<ROOT::Experimental::RNTupleWriter>::operator() (__ptr=<optimized out>, this=<optimized out>) at /usr/include/c++/13/bits/unique_ptr.h:94; #15 std::unique_ptr<ROOT::Experimental::RNTupleWriter, std::default_delete<ROOT::Experimental::RNTupleWriter> >::~unique_ptr (this=0xffde8b50, __in_chrg=<optimized out>) at /usr/include/c++/13/bits/unique_ptr.h:405; #16 RNTuple_LargeFile2_Test::TestBody (this=0x57246b80) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_extended.cxx:260; #17 0xf7d7159c in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) [clone .constprop.0] () from /lib/libgtest.so.1.13.0; #18 0xf7d5cf46 in testing::Test::Run() () from /lib/libgtest.so.1.13.0; #19 0xf7d5d17a in testing::TestInfo::Run() () from /lib/libgtest.so.1.13.0; #20 0xf7d5d327 in testing::TestSuite::Run() () from /lib/libgtest.so.1.13.0; #21 0xf7d6a95b in testing::internal::UnitTestImpl::RunAllTests() () from /lib/libgtest.so.1.13.0; #22 0xf7d695cb in testing::UnitTest::Run() () from /lib/libgtest.so.1.13.0; #23 0xf7d1e137 in main () from /lib/libgtest_main.so.1.13.0; #24 0xf6837969 in __libc_start_call_main () from /lib/libc.so.6; #25 0xf6837a2c in __libc_start_main_impl () from /lib/libc.so.6; #26 0x56560e0b in _start (); CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ~~~",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12427:12388,message,message,12388,https://root.cern,https://github.com/root-project/root/issues/12427,1,['message'],['message']
Integrability,"ROOT can't autoparse classes inside namespaces with the rootmap; system (as the loading callbacks don't correctly land where; they are supposed to land with our injected namespaces). As this; turns out to be a feature of some kind, let's preload TMVA/TreePlayer; to fix all failing tests that are related to this feature/bug with; modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1355:161,inject,injected,161,https://root.cern,https://github.com/root-project/root/pull/1355,1,['inject'],['injected']
Integrability,"ROOT can't autoparse classes inside namespaces with the rootmap; system (as the loading callbacks don't correctly land where; they are supposed to land with our injected namespaces). As this; turns out to be a feature of some kind, let's preload; TMVA/TreePlayer/Graf to fix all failing tests that are related; to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading; without regressin in performance. 2. replace the rootmap system with something else like attaching; all C++ modules on startup. Note that we already do something like this in normal ROOT by; including these packages into the PCH which also makes those; decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1396:161,inject,injected,161,https://root.cern,https://github.com/root-project/root/pull/1396,2,"['depend', 'inject']","['depends', 'injected']"
Integrability,ROOT cannot read compiler includes when compiled with a ccache compiler wrapper,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10556:72,wrap,wrapper,72,https://root.cern,https://github.com/root-project/root/issues/10556,1,['wrap'],['wrapper']
Integrability,ROOT crashes with no helpful error messages if a TApplication is not present and tree->StartViewer() is called,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6743:35,message,messages,35,https://root.cern,https://github.com/root-project/root/issues/6743,1,['message'],['messages']
Integrability,"ROOT failed to build for aarch64, the build error is; ```; Processing hsimple.C...; cling JIT session error: Failed to materialize symbols: { (<Process Symbols>, { DW.ref.__gxx_personality_v0 }) }; ninja: build stopped: subcommand failed.; error: Bad exit status from /data/cmsbld/jenkins_a/workspace/ib-run-pr-tests/testBuildDir/tmp/rpm-tmp.3N7prC (%build); ```. See https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-b2e919/41190/externals/root/6.33.01-1689b1f60f821828a7e2948d6cf5f908/log for detail root build log",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15696#issuecomment-2326544365:426,integrat,integration,426,https://root.cern,https://github.com/root-project/root/pull/15696#issuecomment-2326544365,1,['integrat'],['integration']
Integrability,"ROOT injects forward declarations of entities as trampolines to resolve the full definitions and load the corresponding library. This allows the ROOT users to 'just' type a name and the interpreter will resolve its definition and dlopen the library describing it. There is a well-known (not well understood until now) limitation with this system: we cannot load entities in namespaces. Namely, if we type `ROOT::TDF::TDataFrame;` the system won't be able to resolve it. This is because we enable the system to load only the contents of namespaces from the forward declarations. For example,; ```cpp; // rootmap file; namespace ROOT{ namespace Experimental { class TDataFrame; } } // #1. // real code; namespace ROOT{ namespace Experimental { class TDataFrame {}; } } // #2. [root] ROOT::Experimental::TDataFrame d; // #3; ```; `#1` is piped at root/interpreter start up; we find the DeclContext and flag it. `#3` triggers a lookup and `#includes #2`. The problem is that we do not issue a lookup in `#2`. The effect is that we practically cannot autoload entities from namespaces. Turning it 'just' on breaks performance and starts loading irrelevant libraries. This is because clang eagerly deserializes template specialization declarations for the decl context in question when computing linkage information in CodeGen. All heavy lifting is done in [D41416](https://reviews.llvm.org/D41416) and landed in e51a2b9de4. It enables finer-grained template specialization deserialization removing the effect of loading irrelevant libraries. The performance impact will be seen shortly after we land this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1547:5,inject,injects,5,https://root.cern,https://github.com/root-project/root/pull/1547,1,['inject'],['injects']
Integrability,ROOT master based CMSSW releases also show the same resulsts:; - https://github.com/cms-sw/cmsdist/pull/6778#issuecomment-811474459 without #7752 . There is no hanging at build time but we see runtime crashes (https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-46d8cb/13898/runTheMatrix-results/1001.0_RunMinBias2011A+RunMinBias2011A+TIER0EXP+ALCAEXP+ALCAHARVDSIPIXELCALRUN1+ALCAHARVD1+ALCAHARVD2+ALCAHARVD3+ALCAHARVD4+ALCAHARVD5/step3_RunMinBias2011A+RunMinBias2011A+TIER0EXP+ALCAEXP+ALCAHARVDSIPIXELCALRUN1+ALCAHARVD1+ALCAHARVD2+ALCAHARVD3+ALCAHARVD4+ALCAHARVD5.log); - https://github.com/cms-sw/root/pull/152#issuecomment-811584967 with #7752 . No build or runtime errors but there are comparison differences.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-811655818:268,integrat,integration,268,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-811655818,1,['integrat'],['integration']
Integrability,ROOT recompilation speed with CMake and dependencies,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8624:40,depend,dependencies,40,https://root.cern,https://github.com/root-project/root/issues/8624,1,['depend'],['dependencies']
Integrability,"ROOT's ""dynamic path"" has some environment variables to control it. Those environment variables have some issues:. * They are dependant on the OS (DYLD* on macOS, LD_LIBRARY_PATH on Linux, etc); * LD_LIBRARY_PATH/etc modify the system's search path for dynamic libraries, which can result in all sorts of bad things. We would like to have a dedicated environment variable, that is; * OS independant.; * does only affect ROOT. Let's name it ROOT_LIBRARY_PATH (suggestion on mattermost.web.cern.ch). It was suggested to put this into `system.rootrc` and/or `.rootrc`. This has some issues:. * `.rootrc` is good for a per user solution. We would like to have a package level solution.; * `system.rootrc` is usually a place for the local sysadmin to modify. It could be used by a distribution package to put ""defaults"". But that's not really nice.; * Finally, `.rootrc` entries replace `system.rootrc` entries. So any package level configuration would be gone the moment, that the user sets `Unix.*.Root.DynamicPath`. So getting the above mentioned environment variable to work at a package level, means to put it into TUnixSystem.cpp. cc: @dennisklein",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7031:126,depend,dependant,126,https://root.cern,https://github.com/root-project/root/pull/7031,1,['depend'],['dependant']
Integrability,ROOT-10637: Resolve dependencies and relink if explicit linking is on,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5235:20,depend,dependencies,20,https://root.cern,https://github.com/root-project/root/pull/5235,1,['depend'],['dependencies']
Integrability,"ROOT-7921; When using the RooCustomizer factory interface, deep trees couldn't be; reused in subsequent expressions. ROOT-10670; Due to changes somewhere in math, the RooMinimizer in ROOT 6.20 falls; back to Minuit after using minimize() with a different minimiser.; minim.minimize(""Minuit2"");; minim.hesse(); // Users expected minuit2 here, but now minuit. The usual behaviour was restored by remembering the choice of minimiser; in `minimize`, which apparently happened behind the scenes in math in; the past.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5337:48,interface,interface,48,https://root.cern,https://github.com/root-project/root/pull/5337,1,['interface'],['interface']
Integrability,ROOT-9216: Move mathcore tests that depend on RooFit into test/roofit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2016:36,depend,depend,36,https://root.cern,https://github.com/root-project/root/pull/2016,1,['depend'],['depend']
Integrability,ROOT-9729: Remove unused library dependencies from PyROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2800:33,depend,dependencies,33,https://root.cern,https://github.com/root-project/root/pull/2800,1,['depend'],['dependencies']
Integrability,"ROOT::Detail::RDF::RLoopManager*, std::basic_string_view<char, std::char_traits<char> >, unsigned int, ROOT::Internal::RDF::RColumnRegister const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (RFilterBase.cxx:22); ==270704== by 0x19821393: ???; ==270704== by 0x5EF4C44: Cppyy::CallO(long, void*, unsigned long, void*, unsigned long) (clingwrapper.cxx:887); ==270704== by 0x5E37DA3: GILCallO(long, void*, CPyCppyy::CallContext*, unsigned long) (Executors.cxx:86); ==270704== ; ==270704== Conditional jump or move depends on uninitialised value(s); ==270704== at 0x5E02D73: std::char_traits<char>::compare(char const*, char const*, unsigned long) (char_traits.h:346); ==270704== by 0x5E0709A: __gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (basic_string.h:6236); ==270704== by 0x63262E2: std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (stl_function.h:356); ==270704== by 0x271AAC41: std::__detail::_Hashtable_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10092#issuecomment-1064001383:224100,depend,depends,224100,https://root.cern,https://github.com/root-project/root/issues/10092#issuecomment-1064001383,1,['depend'],['depends']
Integrability,"ROOT::Internal::TCheckHashRecursiveRemoveConsistency::TCheckHashRecursiveRemoveConsistency() (TCheckHashRecursiveRemoveConsistency.h:53); ==92602== by 0x45DE53F: ROOT::Internal::TCheckHashRecursiveRemoveConsistency::Check(TClass&) (TCheckHashRecursiveRemoveConsistency.h:241); ==92602== by 0x45D6AB3: TClass::SetRuntimeProperties() (TClass.cxx:6157); ==92602== by 0x45DC8A3: TClass::HasConsistentHashMember() (TClass.h:501); ==92602== by 0x45DB3BB: ROOT::Internal::HasConsistentHashMember(TClass&) (TClass.cxx:7321); ==92602== by 0x455B6B7: TPair::CheckTObjectHashConsistency() const (TMap.h:124); ==92602== by 0x454CB07: TObject::CheckedHash() (TObject.h:326); ==92602== by 0x454CC2B: THashTable::GetCheckedHashValue(TObject*) const (THashTable.h:95); ==92602== by 0x4549833: THashTable::Add(TObject*) (THashTable.cxx:96); ==92602== by 0x4558607: TMap::Add(TObject*, TObject*) (TMap.cxx:66); ==92602== ; ==92602== Conditional jump or move depends on uninitialised value(s); ==92602== at 0x1293AD8C: clang::Parser::TryAltiVecToken(clang::DeclSpec&, clang::SourceLocation, char const*&, unsigned int&, bool&) (Parser.h:854); ==92602== by 0x129233FB: clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::LateParsedAttrList*) (ParseDecl.cpp:3312); ==92602== by 0x1291FDE3: clang::Parser::ParseSpecifierQualifierList(clang::DeclSpec&, clang::AccessSpecifier, clang::Parser::DeclSpecContext) (ParseDecl.cpp:2455); ==92602== by 0x12913B5F: clang::Parser::ParseTypeName(clang::SourceRange*, clang::DeclaratorContext, clang::AccessSpecifier, clang::Decl**, clang::ParsedAttributes*) (ParseDecl.cpp:55); ==92602== by 0x116EEC9F: cling::ParseProto::Parse(llvm::SmallVectorImpl<clang::Expr*>&, llvm::StringRef const&, cling::LookupHelper::DiagSetting, clang::Parser&, cling::Interpreter const*, cling::LookupHelper&) (LookupHelper.cpp:1678); ==92602== by 0x116EEB8F: cling::ParseProto::opera",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9297#issuecomment-979895686:10732,depend,depends,10732,https://root.cern,https://github.com/root-project/root/issues/9297#issuecomment-979895686,1,['depend'],['depends']
Integrability,ROOT::Math::IMultiGenFunctionTempl&lt;double&gt;’ ; - [2023-01-06T12:13:57.553Z] /data/sftnight/workspace/root-pullrequests-build/build/include/Math/IFunctionfwd.h:38:42: error: conflicting declaration ‘typedef using IBaseFunctionMultiDim = class ROOT::Math::IBaseFunctionMultiDimTempl&lt;double&gt; ROOT::Math::IMultiGenFunction’ ; - [2023-01-06T12:13:57.553Z] /data/sftnight/workspace/root-pullrequests-build/root/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodGradientWrapper.h:24:7: error: conflicting declaration ‘struct RooMinimizer’ ; - [2023-01-06T12:13:57.553Z] /data/sftnight/workspace/root-pullrequests-build/root/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodGradientWrapper.h:30:7: error: conflicting declaration ‘struct RooFit::TestStatistics::RooAbsL’ ; - [2023-01-06T12:13:57.553Z] /data/sftnight/workspace/root-pullrequests-build/root/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodGradientWrapper.h:31:8: error: conflicting declaration ‘struct RooFit::TestStatistics::WrapperCalculationCleanFlags’ ; - [2023-01-06T12:13:57.553Z] /data/sftnight/workspace/root-pullrequests-build/root/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodGradientWrapper.h:37:46: error: ‘RooAbsL’ was not declared in this scope ; - [2023-01-06T12:13:57.553Z] /data/sftnight/workspace/root-pullrequests-build/root/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodGradientWrapper.h:37:53: error: template argument 1 is invalid ; - [2023-01-06T12:13:57.553Z] /data/sftnight/workspace/root-pullrequests-build/root/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodGradientWrapper.h:38:46: error: ‘WrapperCalculationCleanFlags’ was not declared in this scope ; - [2023-01-06T12:13:57.553Z] /data/sftnight/workspace/root-pullrequests-build/root/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodGradientWrapper.h:38:74: error: template argument 1 is invalid ; - [2023-01-06T12:13:57.553Z] /data/sftnight/workspace/root-pullrequests-build/root/roofit/roofitcore/inc/RooFit,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11981#issuecomment-1373555060:1447,Wrap,WrapperCalculationCleanFlags,1447,https://root.cern,https://github.com/root-project/root/pull/11981#issuecomment-1373555060,1,['Wrap'],['WrapperCalculationCleanFlags']
Integrability,"ROOT::TestSupport checks info/warning/error messages during unit tests. Previously, it would generate one global failure irrespective of how many messages have been received, or how many were missing. It would then list all messages that are being checked, irrespective of whether they were received or not. Now, each missing or unexpected message generates a dedicated test failure. ## Before; ```; ../../../root-src/core/testsupport/src/TestSupport.cxx:93: Failure; Failed; ROOT::TestSupport::CheckDiagsRAII: Unexpected diagnostic messages received.; ../../../root-src/core/testsupport/src/TestSupport.cxx:96: Failure; Failed; ROOT::TestSupport::CheckDiagsRAII: Diagnostic message missing.; -------------------------; Pre-registered messages:; kError	1x received	(required, subMatch)	'prepareMethod' msg='Can't compile function TFormula'; kError	0x received	(required, fullMatch)	'TFormula::InputFormulaIntoCling' msg='Error compiling formula expression in Cling____'; kError	1x received	(required, subMatch)	'TFormula::ProcessFormula' msg=' is invalid'; kError	1x received	(required, subMatch)	'TFormula::ProcessFormula' msg='has not been matched in the formula expression'; kError	2x received	(required, subMatch)	'cling' msg='undeclared identifier'; Unexpected messages received:; kError	'TFormula::InputFormulaIntoCling' msg='Error compiling formula expression in Cling'; -------------------------; ```. ## After; ```; ../../../root-src/core/testsupport/src/TestSupport.cxx:96: Failure; Failed; ROOT::TestSupport::CheckDiagsRAII: Expected diagnostic message missing:; severity: kError; received: 0 times (required, fullMatch)	; origin: ""TFormula::InputFormulaIntoCling""; message: Error compiling formula expression in Cling____. ../../../root-src/core/testsupport/src/TestSupport.cxx:101: Failure; Failed; ROOT::TestSupport::CheckDiagsRAII: Unexpected diagnostic message:; severity: kError; origin: ""TFormula::InputFormulaIntoCling""; message: Error compiling formula expression in Cling; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12469:44,message,messages,44,https://root.cern,https://github.com/root-project/root/pull/12469,12,['message'],"['message', 'messages']"
Integrability,ROOT_HEAD failed with error message: Fail to detect cryptographic random generator,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14958:28,message,message,28,https://root.cern,https://github.com/root-project/root/issues/14958,1,['message'],['message']
Integrability,"ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists.; This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice.; See the result of $ grep -r ""Generating G__Imt"" core/imt; core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap""; core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:; $ grep -r ""Generating G__Imt"" core/imt; core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:; [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap; Scanning dependencies of target G__Imt; [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap; [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o; g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory; g++: fatal error: no input files; compilation terminated.; core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed; make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1; [ 73%] Built target G__Imt; make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors.; CMakeFiles/Makefile2:18311: recipe for target 'core/imt",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3636:46,depend,dependency,46,https://root.cern,https://github.com/root-project/root/pull/3636,2,['depend'],"['depend', 'dependency']"
Integrability,ROOT_STANDARD_LIBRARY_PACKAGE passes all DEPENDENCIES to roocling via ROOT_GENERATE_DICTIONARY. This is part of PR #5443,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5449:41,DEPEND,DEPENDENCIES,41,https://root.cern,https://github.com/root-project/root/pull/5449,1,['DEPEND'],['DEPENDENCIES']
Integrability,Range synchronization for histograms filled in parallel in auto-bin mode,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/902:6,synchroniz,synchronization,6,https://root.cern,https://github.com/root-project/root/pull/902,1,['synchroniz'],['synchronization']
Integrability,Re-Implement methods in TH2Poly from TH1 or TH2 to emit an error message.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3904:65,message,message,65,https://root.cern,https://github.com/root-project/root/pull/3904,1,['message'],['message']
Integrability,"Re-enable many tests on Windows, depending on the c++ standard (14/17) and the architecture (x86/x64)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10406:33,depend,depending,33,https://root.cern,https://github.com/root-project/root/pull/10406,1,['depend'],['depending']
Integrability,"Reason why it searched - it uses in public interfaces in following libraries:; * `ROOTEve`,; * `RooFitJSONInterface`; * `RooFitMultiProcess`. Without external `nlohmann_json` is not possible to link with these libraries. ; If ROOT build with external `nlohmann_json`, such external `nlohmann_json` must be provided.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14188#issuecomment-1843267314:43,interface,interfaces,43,https://root.cern,https://github.com/root-project/root/issues/14188#issuecomment-1843267314,1,['interface'],['interfaces']
Integrability,"Rebase PR #1396. Original PR comment:; ""ROOT can't autoparse classes inside namespaces with the rootmap; system (as the loading callbacks don't correctly land where; they are supposed to land with our injected namespaces). As this; turns out to be a feature of some kind, let's preload; TMVA/TreePlayer/Graf to fix all failing tests that are related; to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. figure out how to fix this bug in the rootmap-based loading; without regressin in performance. replace the rootmap system with something else like attaching; all C++ modules on startup. Note that we already do something like this in normal ROOT by; including these packages into the PCH which also makes those; decls available in the normal clang lookup.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1697:201,inject,injected,201,https://root.cern,https://github.com/root-project/root/pull/1697,1,['inject'],['injected']
Integrability,"Rebased/improved version of #4966. Several parameters can be configured via rootrc file:; ```; WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore; WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called; WebEve.HTimeout: 200 # timeout in ms for elements highlight; WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset; WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact; ```; Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: ; * Provide single-click mouse handler, used for tracks/jets selection; In `Three` viewer: ; * Improve highlight handling in plain three.js mode; * provide position-dependent context menu; In `RCore` viewer:; * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4972:769,depend,dependent,769,https://root.cern,https://github.com/root-project/root/pull/4972,1,['depend'],['dependent']
Integrability,Recent force push was just to fix a typo in the first commit message.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8751#issuecomment-982536582:61,message,message,61,https://root.cern,https://github.com/root-project/root/pull/8751#issuecomment-982536582,1,['message'],['message']
Integrability,"Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true!. This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12561:52,depend,depending,52,https://root.cern,https://github.com/root-project/root/pull/12561,5,['depend'],"['dependencies', 'dependency', 'depending', 'depends']"
Integrability,"Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value; and shape servers of integrals was rewritten. However, the new; implementation analyzed the computation graph by pointer, which caused a; wrong list of servers if one passed clones of the integration variables; to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable; wrongly being registered as a value server of the integral. This made; the reproducer code in the issue thread very slow, because the integral; was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11662:333,integrat,integration,333,https://root.cern,https://github.com/root-project/root/pull/11662,2,['integrat'],['integration']
Integrability,Redirect TFile::Open() calls to XRootD protocol if possible,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11644:39,protocol,protocol,39,https://root.cern,https://github.com/root-project/root/pull/11644,1,['protocol'],['protocol']
Integrability,Refactor dependency between head node and its backend,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10560:9,depend,dependency,9,https://root.cern,https://github.com/root-project/root/pull/10560,1,['depend'],['dependency']
Integrability,Refactored reference guide webpage of RDataFrame. See each commit message for the parts that have been changed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9606:66,message,message,66,https://root.cern,https://github.com/root-project/root/pull/9606,1,['message'],['message']
Integrability,"Reformulation of https://github.com/root-project/root/pull/12480. ---. Both `Foo<double>` and `Foo<Double32_t>` have the same typeid.; Before this commit, TClass::GetClass(typeid(Foo)) would return; whatever was registered last. This is not ""stable""; it depends on which; branch is accessed first, or which TClass::GetClass call happens first, or; which library is loaded first. Make this more reporducible by consistently preferring types will less; Double32_t / Float16_t occurrences in the typename. While at this, only remove a TClass from the typeid=>TClass map if it; really is the value for the typename. ---. This PR fixes #12509",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15599:254,depend,depends,254,https://root.cern,https://github.com/root-project/root/pull/15599,1,['depend'],['depends']
Integrability,"Regarding the **include problem**:. Run with this CMake/make commands on **ROOT master branch**:. ```; cmake .. \; -Dalien=OFF -Dcuda=ON \; -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-8.0 \; -DCMAKE_CXX_COMPILER=/usr/bin/g++-4.9 \; -DCMAKE_C_COMPILER=/usr/bin/gcc-4.9. make -j10 VERBOSE=1 # Multi-thread!; ```. Here the error:. ```; /usr/users/wunsch/root_master/tmva/tmva/src/DNN/Architectures/Cuda/CudaMatrix.cu:16:52: fatal error: TMVA/DNN/Architectures/Cuda/CudaMatrix.h: No such file or directory; #include ""TMVA/DNN/Architectures/Cuda/CudaMatrix.h""; ^; compilation terminated.; CMake Error at dnn_cuda_generated_CudaMatrix.cu.o.cmake:209 (message):; Error generating; /usr/users/wunsch/root_master/build/tmva/tmva/CMakeFiles/dnn_cuda.dir/src/DNN/Architectures/Cuda/./dnn_cuda_generated_CudaMatrix.cu.o. make[2]: *** [tmva/tmva/CMakeFiles/dnn_cuda.dir/src/DNN/Architectures/Cuda/dnn_cuda_generated_CudaMatrix.cu.o] Error 1; make[1]: *** [tmva/tmva/CMakeFiles/dnn_cuda.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; make: *** [all] Error 2; ```. And now here the verbose make output (stdout grep 'nvcc'):. ```; /usr/local/cuda-8.0/bin/nvcc -M -D__CUDACC__ /usr/users/wunsch/root_master/tmva/tmva/src/DNN/Architectures/Cuda/CudaMatrix.cu -o /usr/users/wunsch/root_master/build/tmva/tmva/CMakeFiles/dnn_cuda.dir/src/DNN/Architectures/Cuda/dnn_cuda_generated_CudaMatrix.cu.o.NVCC-depend -ccbin /usr/bin/gcc-4.9 -m64 --std c++11 -Xcompiler ,\""-pipe\"",\""-m64\"",\""-Wshadow\"",\""-Wall\"",\""-W\"",\""-Woverloaded-virtual\"",\""-fsigned-char\"",\""-fPIC\"",\""-pthread\"",\""-O2\"",\""-g\"",\""-DNDEBUG\"" -DNVCC -I/usr/local/cuda-8.0/include -I/usr/users/wunsch/root_master/build/include -I/usr/local/cuda-8.0/include; ```. Now, if I run it with only **one** thread (`make -j1 VERBOSE=1`), everything runs fine (but the verbose output has not changed):. ```; /usr/local/cuda-8.0/bin/nvcc -M -D__CUDACC__ /usr/users/wunsch/root_master/tmva/tmva/src/DNN/Architectures/Cuda/CudaMatrix.cu -o /usr/users/wunsch/roo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/283#issuecomment-257136223:641,message,message,641,https://root.cern,https://github.com/root-project/root/pull/283#issuecomment-257136223,1,['message'],['message']
Integrability,"Reimplemented the numpy array interface for the experimental pyroot. I've pushed the setup mostly to python, which makes the code much nicer compared to the implementation in the ""standard"" pyroot. This PR sits on top of #2467 (and therefore blocked by #2449).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2468:30,interface,interface,30,https://root.cern,https://github.com/root-project/root/pull/2468,1,['interface'],['interface']
Integrability,Reject all but the first auto auto attempt per wrapper (ROOT-8828).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/710:47,wrap,wrapper,47,https://root.cern,https://github.com/root-project/root/pull/710,1,['wrap'],['wrapper']
Integrability,Related forum post: https://root-forum.cern.ch/t/reading-root-files-with-minimal-dependencies/58899/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6471#issuecomment-2046653559:81,depend,dependencies,81,https://root.cern,https://github.com/root-project/root/issues/6471#issuecomment-2046653559,1,['depend'],['dependencies']
Integrability,"Related to #11245 . The `-O` option of hadd can be used to force the recompression of the whole target tree (including branches and baskets) to the compression algorithm set with `-f` option. This is not clear in the current `hadd` help message.; The first commit updates the help for the `-O` option, most probably this can be further improved so suggestions are welcome!. Other commits are style changes to the message for a clearer output and code. After this PR:; ```; $: hadd -h; usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]; [-cachesize CACHESIZE]; [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]; [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]; TARGET SOURCES. OPTIONS:; -a Append to the output; -k Skip corrupt or non-existent files, do not exit; -T Do not merge TTree objects; -O If hadd is used to merge TTree objects, compress the whole target tree; (including its branches and baskets) with the desired compression; algorithm. This can be set for example through the '-f' option; -v Explicitly set the verbosity level: 0 request no output, 99 is the; default; -j Parallelize the execution in multiple processes; -dbg Parallelize the execution in multiple processes in debug mode (Does; not delete partial files stored inside working directory); -d Carry out the partial multiprocess execution in the specified; directory; -n Open at most 'maxopenedfiles' at once (use 0 to request to use the; system maximum); -cachesize Resize the prefetching cache use to speed up I/O operations (use 0 to; disable); -experimental-io-features Used with an argument provided, enables the corresponding experimental; feature for output trees; -f Gives the ability to specify the compression level of the target file; (by default 4); -fk Sets the target file to contain the baskets with the same compression; as the input files (unless -O is specified). Compresses the meta data; using the compression level specified in the first input or the; compression setting after f",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11254:237,message,message,237,https://root.cern,https://github.com/root-project/root/pull/11254,2,['message'],['message']
Integrability,"Related to the previous comment. Since people often call `fitTo` many times in a row, are we sure that there is no ""memory leak""? I guess these compiled functions take quite some time in memory if you do a fit 100 times. Can you clean up all the stuff that you declared to the interpreter when the wrapper gets out of scope?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11773#issuecomment-1343420510:298,wrap,wrapper,298,https://root.cern,https://github.com/root-project/root/pull/11773#issuecomment-1343420510,1,['wrap'],['wrapper']
Integrability,"Related to this problems, there was also a question on the forum:; * https://root-forum.cern.ch/t/roofit-numcpu-in-pyroot/57424. Then, there is also the possibility to build ROOT with the `std::unique_ptr` interfaces already:; * https://root.cern/doc/master/release-notes.html#compile-your-code-with-memory-safe-interfaces",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11397#issuecomment-1848591204:206,interface,interfaces,206,https://root.cern,https://github.com/root-project/root/issues/11397#issuecomment-1848591204,2,['interface'],['interfaces']
Integrability,Remove TMath dependencies from TTimestamp.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/466:13,depend,dependencies,13,https://root.cern,https://github.com/root-project/root/pull/466,1,['depend'],['dependencies']
Integrability,Remove Tree dependency from libMultiProc,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1847:12,depend,dependency,12,https://root.cern,https://github.com/root-project/root/pull/1847,1,['depend'],['dependency']
Integrability,Remove a remaining MathMore dependency from roofit/roofit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5452:28,depend,dependency,28,https://root.cern,https://github.com/root-project/root/pull/5452,1,['depend'],['dependency']
Integrability,"Remove class hierarchy in RFieldValue. The templated, type-safe; inherited classes made the design vulnerable to slicing, because the; RField interface uses the base class. Instead, we use now templated; constructors and templated member functions in RFieldValue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3829:142,interface,interface,142,https://root.cern,https://github.com/root-project/root/pull/3829,1,['interface'],['interface']
Integrability,Remove dependencies of TUnixSystem & TWinNTSystem on net/net/inc,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3274:7,depend,dependencies,7,https://root.cern,https://github.com/root-project/root/pull/3274,1,['depend'],['dependencies']
Integrability,"Remove dependency from TBufferFile.; Now simply duplicate some code from TBufferFile in TBufferXML.; This is last version, which is fully compatible with previous XML I/O. Next steps - introduce TBufferText class, which will be base for JSON and XML classes.; Several methods will be shared between these two classes.; And both XML and JSON will use text actions for objects streaming, ; which may lead into incompatible changes in XML format.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1481:7,depend,dependency,7,https://root.cern,https://github.com/root-project/root/pull/1481,1,['depend'],['dependency']
Integrability,Remove dependency from dask_jobqueue,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11374:7,depend,dependency,7,https://root.cern,https://github.com/root-project/root/pull/11374,1,['depend'],['dependency']
Integrability,"Remove deprecated interfaces, fix and prepare macros for 6.34",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14059:18,interface,interfaces,18,https://root.cern,https://github.com/root-project/root/pull/14059,1,['interface'],['interfaces']
Integrability,"Remove deprecated python option, added an info message",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5857:47,message,message,47,https://root.cern,https://github.com/root-project/root/pull/5857,1,['message'],['message']
Integrability,Remove extra single quote in error message to avoid confusion what the actual class name is.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10099:35,message,message,35,https://root.cern,https://github.com/root-project/root/pull/10099,1,['message'],['message']
Integrability,Remove gEnv and gSystem dependencies from TError,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5855:24,depend,dependencies,24,https://root.cern,https://github.com/root-project/root/pull/5855,1,['depend'],['dependencies']
Integrability,Remove imt and multiproc (unsupported) dependencies on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1106:39,depend,dependencies,39,https://root.cern,https://github.com/root-project/root/pull/1106,1,['depend'],['dependencies']
Integrability,Remove not needed fatal message (fixing ##8280),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8348:24,message,message,24,https://root.cern,https://github.com/root-project/root/pull/8348,1,['message'],['message']
Integrability,Remove not needed fatal message (fixing #8280),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8341:24,message,message,24,https://root.cern,https://github.com/root-project/root/pull/8341,1,['message'],['message']
Integrability,Remove splash screen to avoid `root.exe` dependence on x11 or cocoa,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15056:41,depend,dependence,41,https://root.cern,https://github.com/root-project/root/pull/15056,1,['depend'],['dependence']
Integrability,"Remove the call to `gSystem->Load(""libMathCore"")` to try to remove dependency between the Rint and Mathcore c++ modules",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10330:67,depend,dependency,67,https://root.cern,https://github.com/root-project/root/pull/10330,1,['depend'],['dependency']
Integrability,Remove the deprecated Oracle interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14828:29,interface,interface,29,https://root.cern,https://github.com/root-project/root/pull/14828,1,['interface'],['interface']
Integrability,Remove the deprecated Pythia 6 interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14823:31,interface,interface,31,https://root.cern,https://github.com/root-project/root/pull/14823,1,['interface'],['interface']
Integrability,Remove the redundant dependencies from the target. This fixes a cxxmodules; nightly builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1741:21,depend,dependencies,21,https://root.cern,https://github.com/root-project/root/pull/1741,1,['depend'],['dependencies']
Integrability,"Remove the usage of `RResult`-related function as the returned importer object is not wrapped in it anymore. Also point to the tutorial, and mention the specification for type compatibility.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13950:86,wrap,wrapped,86,https://root.cern,https://github.com/root-project/root/pull/13950,1,['wrap'],['wrapped']
Integrability,Removed circular dependencies in 'montecarlo':,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3691:17,depend,dependencies,17,https://root.cern,https://github.com/root-project/root/pull/3691,1,['depend'],['dependencies']
Integrability,"Removed the fallback to `main()`. The message now reads:; ```; warning: Failed to call `LHCb002(1, (const char**)nullptr)` to execute the macro. Add this function or rename the macro. Falling back to `.L`.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4244#issuecomment-523009077:38,message,message,38,https://root.cern,https://github.com/root-project/root/pull/4244#issuecomment-523009077,1,['message'],['message']
Integrability,"Removed the false comment and moved the `unique_ptr` declaration above `TextInputHolder`, in case `TextInputHolder::~TextInputHolder()` still access it (in the future). However, I am thinking about enhancing CLI completion support of cling. Such as tab completion. Currently cling only prints completion suggestion but does not complete the input buffer for the user when only single unambiguous completion exists. Also the completion does not recognize meta command like `.x`, `.L` so it does not try to complete its arguments (paths). And the path does not expand `~` to home dir.; @Axel-Naumann , do you think it is a good idea for cling to adopt `llvm::LineEditor` ? (https://llvm.org/doxygen/classllvm_1_1LineEditor.html) ; Or building cling's own readline/libedit wrapper? ; `core/textinput/src/textinput/doc/textinput.txt` states that `textinput` is created to avoid depending on readline/libedit in year 2011.; Is it still true today 2022? cling highly depends on llvm now so it should be fine to adopt `llvm::LineEditor` (created in 2013. `textinput` predates it).; I have a prototype cling with the above enhanced completion support based on libedit but I will only create PR if cling (and all root components currently using `textinput` ) are open to such changes and dependency. I can refactor to use `llvm::LineEditor` instead. It is not too hard since the latter is also a libedit wrapper.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11274#issuecomment-1232115062:770,wrap,wrapper,770,https://root.cern,https://github.com/root-project/root/pull/11274#issuecomment-1232115062,5,"['depend', 'wrap']","['dependency', 'depending', 'depends', 'wrapper']"
Integrability,Removed unnecesary dependencies from ROOT's object files.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/791:19,depend,dependencies,19,https://root.cern,https://github.com/root-project/root/pull/791,1,['depend'],['dependencies']
Integrability,Removes MarkovChain interfaces that are one-time used in `MCMCInterval` . Now obtain the reduced markov chain data (also as Hist ) by calling `reduce` on the RooDataSet (which can be directly accessed through `MarkovChain::GetAsConstDataSet`). . Updates all `reduce` and `reduceEng`methods to const across `RooAbsData` and other RooFit classes with overrides.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16334:20,interface,interfaces,20,https://root.cern,https://github.com/root-project/root/pull/16334,1,['interface'],['interfaces']
Integrability,"Removes ambiguity in case a column name ends with a dot, which incidentally is something that causes ""unknown column name"" error messages commonly enough. Sibling PR in roottest: https://github.com/root-project/roottest/pull/917",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11772:129,message,messages,129,https://root.cern,https://github.com/root-project/root/pull/11772,1,['message'],['messages']
Integrability,Removing source code dependency on Graf3d for Core. Code is dead and look like not used anywhere.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2408:21,depend,dependency,21,https://root.cern,https://github.com/root-project/root/pull/2408,1,['depend'],['dependency']
Integrability,Removing the loading the list of function changes the semantic of the return value and indeed as Danilo points we need to understand *how* this routine (Cppyy::GetNumMethods) is used before knowing whether this is the best improvement.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1743#issuecomment-372645644:144,rout,routine,144,https://root.cern,https://github.com/root-project/root/pull/1743#issuecomment-372645644,1,['rout'],['routine']
Integrability,"Removing this patch will produce a problem with this macro:; ```; {; auto c1 = new TCanvas(""c1"",""multigraph"",700,500);; c1->SetGrid();; auto *mg = new TMultiGraph();; std::vector<double> x1;; std::vector<double> sig1;; std::vector<double> sig2;; for (double E=1e-4;E<2e7;E*=1.1) {; x1.push_back(E);; sig1.push_back(10*pow(E,-0.1));; sig2.push_back(15*pow(E,-0.15));; }; auto g1 = new TGraph(x1.size(), x1.data(), sig1.data());; mg->Add(g1);; auto g2 = new TGraph(x1.size(), x1.data(), sig2.data());; mg->Add(g2);; mg->SetTitle(""; E (eV);#sigma (b)"");; // comment or uncomment the following line to get diffrent plot; // mg->GetXaxis()->CenterTitle(true);; mg->Draw(""AL"");; }; ```; Without this patch you get a different X range depending if you center the X title or not. I guess we should keep the patch and understand why in log scale it crashes (it should be protected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9011#issuecomment-957818254:728,depend,depending,728,https://root.cern,https://github.com/root-project/root/issues/9011#issuecomment-957818254,1,['depend'],['depending']
Integrability,Removing usage of enum is easy in favor of using builtin strings to distinguish operation type in distributed RDataFrame. This also avoids an extra dependency for Python2,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7772:148,depend,dependency,148,https://root.cern,https://github.com/root-project/root/pull/7772,1,['depend'],['dependency']
Integrability,"Rename TBasket::Reset to TBasket::WriteReset; Add TBasket::ReadResetBuffer which will shrink the buffer is it is currently significantly larger; than it is needed to any of the next 10 baskets. [Improvement for ROOT-10927, in this exact reported case this gain an additional 25 MB per TTree but really is depend on the size of the last baskets]",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6036:305,depend,depend,305,https://root.cern,https://github.com/root-project/root/pull/6036,1,['depend'],['depend']
Integrability,"Renderer specific code has been moved to GlViewer classes:; * GlViewer is the ""base class""; * GlViewerJSRoot for JSRoot GeoPainter; * GlViewerThree for THREE.js; * GlViewerRCore for the experimental RenderCore interface (just starting)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4970:210,interface,interface,210,https://root.cern,https://github.com/root-project/root/pull/4970,1,['interface'],['interface']
Integrability,Replace fwd decl of json with wrapper type,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11196:30,wrap,wrapper,30,https://root.cern,https://github.com/root-project/root/pull/11196,1,['wrap'],['wrapper']
Integrability,"Replace the RooLinkedList in the central collections of RooFit (RooArgSet, RooArgList) with a std::vector. This speeds up the tutorials of RooFit/RooStats by 10 to 20 %.; The interface with respect to iterators and size() now resembles an STL container. When iterating on the updated collections, only begin(), end() and range-based for loops should be used. The legacy RooFit iterators are still supported, but should not be used, since they are slower. They were flagged with the `R__SUGGEST_ALTERNATIVE` macro. **For Reviewers**; Reviews are most appreciated in `RooAbsCollection.h` (interfaces) and maybe `RooAbsCollection.cxx`. This is the central change.; All other changes are mostly places where old iterators have been replaced by new iterators to make RooFit faster.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3345:175,interface,interface,175,https://root.cern,https://github.com/root-project/root/pull/3345,2,['interface'],"['interface', 'interfaces']"
Integrability,"Replace the RooLinkedList in the central collections of RooFit (RooArgSet, RooArgList, RooRefCountList) with a std::vector. This speeds up the tutorials of RooFit/RooStats by 10 to 20 %.; The interface with respect to iterators and size() now resembles an STL container. When iterating on the updated collections, only begin(), end() and range-based for loops should be used. The legacy RooFit iterators are still supported, but should not be used, since they are slower. They were flagged with the R__SUGGEST_ALTERNATIVE macro. This PR is identical to #3345, but more improvements were added on top of the branch used there. This is to test if the test failures on centos7 persist.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3380:192,interface,interface,192,https://root.cern,https://github.com/root-project/root/pull/3380,1,['interface'],['interface']
Integrability,"Replacing tbb::task_scheduler_init for tbb::task_arena. It does not change current ROOT MT behaviour. Description in the commit message:. > replace TPoolManager by RTaskArenaWrapper; > ; > Replace all uses of TPoolManager, based on the deprecated; > tbb_task_scheduler_init and its implicit task_arena, by explicit; > manipulation of our own central instance of task_arena, as; > suggested by intel:; > https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf; > ; > Work out some gymnastics to keep tbb out of the headers,; > encapsulating it within the new RTaskArenaWrapper class. Couldn't; > find a solution for the forward-declaration tbb::task_arena, which; > is an alias of a versioned namespace dependent class that we are; > forced to forward declare instead (tbb::interface7::tbb_task_arena).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5582:128,message,message,128,https://root.cern,https://github.com/root-project/root/pull/5582,2,"['depend', 'message']","['dependent', 'message']"
Integrability,"Reproduce #5069 again - something went wrong when I want to merge it. Simple search for following includes were done:. * `TSystem.h`; * `TStyle.h`; * `TClass.h`; * `TEnv.h`; * `TObjString.h`; * `TObjArray.h`; * `TList.h`. These are relative ""big"" includes, therefore can improve compilation and dependencies. Let see which tests are affected",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5071:295,depend,dependencies,295,https://root.cern,https://github.com/root-project/root/pull/5071,1,['depend'],['dependencies']
Integrability,"Reproducer:. ```; root [0] auto x = std::make_pair(42, 84);; root [1] auto *xp = &x;; root [2] TTree t(""t"", ""t""); (TTree &) Name: t Title: t; root [3] t.Branch(""x"", &xp); Error in <HandleInterpreterException>: Trying to dereference null pointer or trying to call routine taking non-null arguments; Execution of your code was aborted.; In module 'Core':; /home/blue/ROOT/dev/cmake-build-foo/include/TClass.h:635:38: warning: null passed to a callee that requires a non-null argument [-Wnonnull]; size_t hint_offset = ((char*)&(p->second)) - (char*)p;; ^; root [4] t.Branch(""x"", &x); Error in <HandleInterpreterException>: Trying to dereference null pointer or trying to call routine taking non-null arguments; Execution of your code was aborted.; /home/blue/ROOT/dev/cmake-build-foo/include/TClass.h:635:38: warning: null passed to a callee that requires a non-null argument [-Wnonnull]; size_t hint_offset = ((char*)&(p->second)) - (char*)p;; ^; ```. Note the ""Execution of your code was aborted"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11215:263,rout,routine,263,https://root.cern,https://github.com/root-project/root/issues/11215,2,['rout'],['routine']
Integrability,"Result after grepping ""inline"" for all the registered passes (for -O1):; ```; Module passes:; always-inline; inliner-wrapper; inliner-ml-advisor-release; print<inline-advisor>; inliner-wrapper-no-mandatory-first; partial-inliner; scc-oz-module-inliner; module-inline. Module analyses:; inline-advisor. CGSCC passes with params:; inline<only-mandatory>. Function passes:; partially-inline-libcalls; print<inline-cost>; print<inliner-size-estimator>. Function passes with Params:; ee-instrument<post-inline>. Function analyses:; inliner-size-estimator; ```. Corresponding passes:. ```; Module passes:; always-inline - AlwaysInlinerPass // Not disabled; inliner-wrapper - ModuleInlinerWrapperPass; inliner-ml-advisor-release - ModuleInlinerWrapperPass; print<inline-advisor> - InlineAdvisorAnalysisPrinterPass; inliner-wrapper-no-mandatory-first - ModuleInlinerWrapperPass; partial-inliner - PartialInlinerPass; scc-oz-module-inliner - buildInlinerPipeline; module-inline - ModuleInlinerPass; Module analyses:; inline-advisor - InlineAdvisorAnalysis; CGSCC passes with params:; inline<only-mandatory> - InlinerPass; Function passes:; partially-inline-libcalls - PartiallyInlineLibCallsPass ; print<inline-cost> - InlineCostAnnotationPrinterPass; print<inliner-size-estimator> - InlineSizeEstimatorAnalysisPrinterPass; Function passes with Params:; ee-instrument<post-inline> - EntryExitInstrumenterPass // Not disabled; Function analyses:; inliner-size-estimator - InlineSizeEstimatorAnalysis; ```. Passes disabled with the callback:; ```; ModuleInlinerWrapperPass; InlineAdvisorAnalysisPrinterPass; PartialInlinerPass; buildInlinerPipeline; ModuleInlinerPass; InlinerPass; InlineAdvisorAnalysis; PartiallyInlineLibCallsPass; InlineCostAnnotationPrinterPass; InlineSizeEstimatorAnalysisPrinterPass; InlineSizeEstimatorAnalysis; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14267#issuecomment-1906191855:117,wrap,wrapper,117,https://root.cern,https://github.com/root-project/root/pull/14267#issuecomment-1906191855,4,['wrap'],"['wrapper', 'wrapper-no-mandatory-first']"
Integrability,"Result from the discussion in today's PPP:. Option 1:; - The `Range` node will always stay single threaded and nothing changes here; - We add a new overload for the ctor which takes the range, similar to the `TEntryList` version (but more user friendly); - Upside: Simple to understand; - Downside: Yet another ctor overload, which needs to be implemented for all existing interfaces, e.g. the factory functions. Option 2:; - We let `Range` run with MT enabled if (and just if) the `Range` node is the only one in the graph and the first one after the root node; - Upside: Not another ctor overload; - Downside: Confusing for the user (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7702:373,interface,interfaces,373,https://root.cern,https://github.com/root-project/root/issues/7702,1,['interface'],['interfaces']
Integrability,Reuse component from `RBrowser`. Provide plugin to load file dialog on demand.; Avoids hard dependency from RBrowser libs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13118:92,depend,dependency,92,https://root.cern,https://github.com/root-project/root/pull/13118,1,['depend'],['dependency']
Integrability,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6153:44,depend,dependencies,44,https://root.cern,https://github.com/root-project/root/pull/6153,1,['depend'],['dependencies']
Integrability,"Revert ""Fix logic of handling dependencies when NO_CXXMODULE is specified""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5883:30,depend,dependencies,30,https://root.cern,https://github.com/root-project/root/pull/5883,1,['depend'],['dependencies']
Integrability,"Revert ""[RDF] Fix a dependency issue for an RDF test.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5730:20,depend,dependency,20,https://root.cern,https://github.com/root-project/root/pull/5730,1,['depend'],['dependency']
Integrability,"RooAbsArg::cloneTree()` to RooHelpers; cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`; 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers; f4fc140268 [RF] Remove RooMomentMorphND; d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10; 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper.; 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument; 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext; ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew.; 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation; c51376731b [RF][NFC] Fix typo.; 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off.; 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit.; 98d004c200 [RF] Fix visibility of the res/ directories.; e97347056c [RF] Make RooBatchCompute dependency public.; 4483b01b7f [RF] Add initial interface and implementation for code-squashing.; f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer; 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; bf4990c5d4 [RF] Exclude RooHistError from IO; 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; f355c3ced4 [RF] Code-format `testRooDataHist.cxx`; 3fd99f7679 [RF] Enable AD code-gen test for RooFit.; a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext; 1367091",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12723:2346,depend,dependency,2346,https://root.cern,https://github.com/root-project/root/pull/12723,5,['depend'],['dependency']
Integrability,"RooFit categories were using the class `RooCatType (: public TObject)`; instead of an integer to represent category states. It contains an integer; and a char[256], which can store a part of the category name.; This prevents fast batch access, and increases the overhead for data storage; and data loading. From now on, categories are represented as integers.; Every state index also has a state name attached, but instead of storing; it in each row of the dataset, the mapping from state index to; state name is now stored in the category class. **For reviewers**:; Although there is a lot of noise, that's mostly getting rid of unnecessary classes. The user-facing interfaces are stable (to be proven by the fact that all the rest of RooFit still compiles, and that tutorials run).; This is the chance to modernise/improve the `RooCategory` interface. It would be nice if you could specifically look at `RooCategory.h`, maybe in conjunction with the modernised tutorial on how they can be used in the future:; https://github.com/hageboeck/root/blob/cleanupCategories/tutorials/roofit/rf404_categories.C. More details what happened:; - Replace RooCatType by an integer.; - Replace names saved in each instance of RooCatType by a map in; RooAbsCategory that maps state numbers to strings. This saves 64 bytes; + the size of TObject for each event, and makes loading strings in each; event unnecessary.; - Convert RooVectorDataStore from saving RooCatType to integers of; category states.; - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Provide new interfaces for categories to work without RooCatType.; - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since; derived category classes might need to recompute their shapes if one; of their input categories change.; - Add function to define multiple category states at once with; initialiser lists. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen.; - Stop including RooCatType wh",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5219:667,interface,interfaces,667,https://root.cern,https://github.com/root-project/root/pull/5219,2,['interface'],"['interface', 'interfaces']"
Integrability,"RooFit contains a number of functions that cannot be used as PDFs since; they don't have automatic normalisation. When wrapped into the wrapper; PDF, functions can be used in the same way as PDFs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4383:119,wrap,wrapped,119,https://root.cern,https://github.com/root-project/root/pull/4383,2,['wrap'],"['wrapped', 'wrapper']"
Integrability,"RooFit currently includes the `RooCBShape` and `RooDSCBShape` to; represent the family of crystal ball distributions. The `RooCBShape`; only has a left tail, and `RooDSCBShape` has two independently; parametrized tails. Some users also want a crystal ball where the width of the Gaussian; core is different on the left and the right side (see e.g. Jira ticket; [ROOT-10388](https://sft.its.cern.ch/jira/browse/ROOT-10388)). To make the RooFit code more maintainable and also cover the use case; of an asymmetric Gaussian core, this commit implements a new; `RooCrystalBall` class that should cover all classes of crystal ball; shapes, such that `RooCBShape` and `RooDSCBShape` are in principle not; necessary anymore. The new features of the `RooCrystalBall` class that make it different; from `RooDSCBShape` are:. - possibility to set sigma of left side and right side of Gaussian; core separately. - code modernization and using `std::` math functions. - three constructors: fully parametrized, symmetric Gaussian core; (to replace `RooDSCBShape`), only left tail (to replace; `RooCBShape`). - useage of inlined helper functions to avoid code duplication. It is also carefully tested in `testRooCrystalBal`:. - test the fully parameterized case. - test the constructor for left-tail only case and compare values; with `RooCBShape`. - test the constructor with symmetric Gaussian core and compare; values with `RooDSCBShape`. - test the constructor for right-tail only and symmetric tails. - test integration with many possible combinations integration; ranges to cover all branches of integration code",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7257:1498,integrat,integration,1498,https://root.cern,https://github.com/root-project/root/pull/7257,3,['integrat'],['integration']
Integrability,"RooFit uses doubles everywhere else, so if importing a model from JSON; should give the same biswise results as creating the model in the; workspace factory language, `double` needs to be used in the JSON; interface too. There is also another commit that fixes a typo, and another commit that adds an easy way to fill lists via the JSON interface in order to reduce the number of lines of code needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12223:206,interface,interface,206,https://root.cern,https://github.com/root-project/root/pull/12223,2,['interface'],['interface']
Integrability,RooRealIntegral was configured to forcefully select all components when integrating.; This is not desired if single components should be projected out. The default has been; set to not select all components. This fixes ROOT-10098.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3905:72,integrat,integrating,72,https://root.cern,https://github.com/root-project/root/pull/3905,1,['integrat'],['integrating']
Integrability,RooRealIntegral was configured to forcefully select all components when integrating.; This is not desired if single components should be projected out. The default has been; set to not select all components. This fixes ROOT-10098. (cherry picked from commit 68f2aea99f92e9e90e345658d154164c3c96fa82),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3948:72,integrat,integrating,72,https://root.cern,https://github.com/root-project/root/pull/3948,1,['integrat'],['integrating']
Integrability,RooRealIntegral was configured to forcefully select all components when integrating.; This is not desired if single components should be projected out. The default has been; set to not select all components. This is meant to fix ROOT-10098.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3908:72,integrat,integrating,72,https://root.cern,https://github.com/root-project/root/pull/3908,1,['integrat'],['integrating']
Integrability,"RooResolutionModels can accept RooAbsRealLValue as convolution variable,; but the function convVar() just returned a c-style cast to RooRealVar&.; Removing this required generalising a few other interfaces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4975:195,interface,interfaces,195,https://root.cern,https://github.com/root-project/root/pull/4975,1,['interface'],['interfaces']
Integrability,"RooStringVar is a class to store string values. It limits the number of; characters that can be stored, leading to a crash when trying to plot; ranges with long names. This limitation was removed by implementing; equivalent functionality with a class that just wraps a std::string. It further had an unnecessary base class, which was removed, and where; possible, #includes of RooStringVar itself were removed. It should not; be used whenever possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5003:261,wrap,wraps,261,https://root.cern,https://github.com/root-project/root/pull/5003,1,['wrap'],['wraps']
Integrability,"Root has two different ways to configure the build - the traditional configure script and cmake. The builds generated by the two systems are similar, but far from equivalent. Historically the configure script has been more feature complete and some things that the configure script is able to do are either missing or broken in the cmake build. However, new features are often only added to the cmake build. This has resulted in that today neither of the two is able to build root with a complete set of features. The cmake build is more standard and behaves in a more predictive way, e.g. it understands CFLAGS, LDFLAGS and friends which the configure script never did. It also integrates the test suite in the build and allows for running ""make test"", a feature that the configure script is missing. So the cmake build is in many ways better, if it wasn't for those missing and broken things mentioned earlier. This pull request is an attempt to address those missing and broken issues (though it fixes a few things for the configure script as well). Also contains a fix for ROOT-7326.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/153:679,integrat,integrates,679,https://root.cern,https://github.com/root-project/root/pull/153,1,['integrat'],['integrates']
Integrability,"Rootbench depends on copy assignment for the `Sample` class. After implementing move semantics to speed up hist2workspace, the copy assignment had been implicitly deleted. This was fixed, and a gtest has been added. Further, HistRef, a member of Sample, is now movable, and the histograms given back by Sample are now `const TH1*` instead of `TH1*`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3339:10,depend,depends,10,https://root.cern,https://github.com/root-project/root/pull/3339,1,['depend'],['depends']
Integrability,Rootcling builds a set of modules implicitly based on #including of a header; contained in the nominated module. The build system has no way to track such; dependencies and even if it could there would be no rule to execute to; regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated; modules and delete them (to regenerate them). A more sustainable solution is to; request each module to be built explicitly which requires a bit of refactoring; in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4219:156,depend,dependencies,156,https://root.cern,https://github.com/root-project/root/pull/4219,1,['depend'],['dependencies']
Integrability,Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to; get the TCling's instance of the cling interpreter. This in turn might; need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing; system modules such as libc and stl to be loaded. This criples rootcling; and whenever it #includes a header file we get an error that we included; a module from ROOT which depends on modules stl but it is not accessible; through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1395:419,depend,depends,419,https://root.cern,https://github.com/root-project/root/pull/1395,1,['depend'],['depends']
Integrability,Roottest_cling_functionTemplate_testcint is a pre-existing 'missing' dependency rebuild.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2834#issuecomment-432441664:69,depend,dependency,69,https://root.cern,https://github.com/root-project/root/pull/2834#issuecomment-432441664,2,['depend'],['dependency']
Integrability,"Running `ROOT.TParameter[""char""]().Print()` triggers the following backtrace:. ```; #6 0x00007f5aa1508536 in cling::Interpreter::EvaluateInternal (this=0x55c3b6db88f0, ; input=""TParameter<char>::kMultiply;"", CO=..., V=0x7ffeae65ef40, wrapPoint=45); at /home/axel/build/root/master2/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1379; #7 0x00007f5aa1506307 in cling::Interpreter::process (this=0x55c3b6db88f0, ; input=""TParameter<char>::kMultiply;"", V=0x7ffeae65ef40, T=0x0, disableValuePrinting=false); at /home/axel/build/root/master2/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:840; #8 0x00007f5aa175d89a in cling::MetaProcessor::process (this=0x55c3b78351a0, input_line=..., ; compRes=@0x7ffeae65eefc: cling::Interpreter::kSuccess, result=0x7ffeae65ef40, disableValuePrinting=false); at /home/axel/build/root/master2/src/interpreter/cling/lib/MetaProcessor/MetaProcessor.cpp:341; #9 0x00007f5aa12b19c0 in HandleInterpreterException (metaProcessor=0x55c3b78351a0, ; input_line=0x55c3bb82fd10 ""TParameter<char>::kMultiply;"", ; compRes=@0x7ffeae65eefc: cling::Interpreter::kSuccess, result=0x7ffeae65ef40); at /home/axel/build/root/master2/src/core/metacling/src/TCling.cxx:2448; #10 0x00007f5aa12b265d in TCling::ProcessLine (this=0x55c3b6cef830, ; line=0x55c3bb8310e0 ""TParameter<char>::kMultiply;"", error=0x0); at /home/axel/build/root/master2/src/core/metacling/src/TCling.cxx:2608; #11 0x00007f5aa710b936 in Cppyy::GetDatamemberOffset (scope=18, idata=3); at /home/axel/build/root/master2/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1995; #12 0x00007f5aa7288e96 in CPyCppyy::BuildScopeProxyDict (scope=18, pyclass=0x55c3bb8545f0); at /home/axel/build/root/master2/src/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:353; #13 0x00007f5aa728a648 in CPyCppyy::CreateScopeProxy (name=""TParameter<char>"", parent=0x55c3b870c0b0); at /home/axel/build/root/master2/src/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:681; #14 0x00007f5aa7265443 i",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10724:234,wrap,wrapPoint,234,https://root.cern,https://github.com/root-project/root/issues/10724,1,['wrap'],['wrapPoint']
Integrability,"Running doxygen might give you a warning message about qhelpgenerator. It could be the path, see https://stackoverflow.com/a/49751322",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-902818366:41,message,message,41,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-902818366,1,['message'],['message']
Integrability,"S I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```; cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \; -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \; -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \; -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \; -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/; ninja; ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since forever. I performed the build on Ubuntu 20.04 with GCC 9, but that should make little difference to the overall behaviour. ## Additio",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6432:2532,depend,depend,2532,https://root.cern,https://github.com/root-project/root/issues/6432,1,['depend'],['depend']
Integrability,"SPlot; Failed to load module Hbook; Failed to load module RooFit; Failed to load module RCsg; Failed to load module RooStats; Failed to load module RooFitRDataFrameHelpers; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module ROOTTMVASofie; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module MathMore; Failed to load module RooFitHS3; Failed to load module Foam; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; RunTest: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Lex/Lexer.cpp:3940: bool clang::Lexer::LexTokenInternal(clang::Token&, bool): Assertion `Result.is(tok::eof) && ""Preprocessor did not set tok:eof""' failed.; Aborted (core dumped); ```; Even though Vc.pcm is sitting right next to MathCore.pcm; export ROOT_INCLUDE_PATH does solve this problem (see the other tests in the repeater), but at least to me this behaviour or at least the error message seems questionable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594#issuecomment-1029801305:4412,message,message,4412,https://root.cern,https://github.com/root-project/root/issues/9594#issuecomment-1029801305,1,['message'],['message']
Integrability,SXSystem.h TUnixSystem.h /Users/ktf/src/sw/SOURCES/ROOT/alice-v6-32-04/0/core/base/inc/LinkDef.h; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: While building module 'Core':; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: While building module 'std' imported from input_line_1:1:; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: While building module '_wctype' imported from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/wctype.h:31:; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: While building module '__wctype' imported from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/_wctype.h:36:; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: In file included from <module-includes>:1:; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/___wctype.h:72:10: fatal error: cyclic dependency in module 'std': std -> _wctype -> __wctype -> std; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: #include <ctype.h>; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: ^; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/_wctype.h:36:10: fatal error: could not build module '__wctype'; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: #include <_types/_wctrans_t.h>; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: ~~~~~~~~^; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: While building module 'Core':; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: While building module 'std' imported from input_line_1:1:; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: In file included from <module-includes>:1:; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1/algorithm:1804:; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: In file included from /Applications/Xcode.app/Contents/Develope,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16449:9770,depend,dependency,9770,https://root.cern,https://github.com/root-project/root/issues/16449,1,['depend'],['dependency']
Integrability,"Same operating system as @mkrzewic.; Slightly newer master version of ROOT @615eaf63. When running `cmake ../root -DCMAKE_CXX_STANDARD=17 -DCMAKE_BUILD_TYPE=RelWithDebInfo`, the following error is reported:. ```shell; [...]; -- Building Cling as part of ROOT; CMake Error at interpreter/cling/CMakeLists.txt:196 (message):; NVPTX backend is not activated. Please enable it via -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"". -- Configuring incomplete, errors occurred!; ```. When running `cmake ../root -DCMAKE_CXX_STANDARD=17 -DCMAKE_BUILD_TYPE=RelWithDebInfo -DLLVM_TARGETS_TO_BUILD=""host;NVPTX""`, the following error is reported:. ```shell; [...]; -- Building Cling as part of ROOT; -- Cling version (from VERSION file): ROOT_1.0~dev; CMake Error at interpreter/llvm-project/llvm/cmake/modules/LLVM-Config.cmake:138 (message):; Target host is not in the set of libraries.; Call Stack (most recent call first):; interpreter/llvm-project/llvm/cmake/modules/LLVM-Config.cmake:256 (llvm_expand_pseudo_components); interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake:641 (llvm_map_components_to_libnames); interpreter/cling/CMakeLists.txt:426 (llvm_add_library); interpreter/cling/lib/Interpreter/CMakeLists.txt:60 (add_cling_library). -- Configuring incomplete, errors occurred!; ```. Removing the ""host"" string from the list LLVM_TARGETS_TO_BUILD, seems to fix the issue, as running `cmake ../root -DCMAKE_CXX_STANDARD=17 -DCMAKE_BUILD_TYPE=RelWithDebInfo -DLLVM_TARGETS_TO_BUILD=""NVPTX""` results in successful build configuration. Following this, ROOT successfully compiles almost all the way up to 100%:; ```shell; [ 98%] Linking CXX executable ../../bin/hist2workspace; [ 98%] Linking CXX shared library ../../lib/libRooFitHS3.so; [ 98%] Built target hist2workspace; [100%] Built target RooFitHS3; [100%] Linking CXX shared library ../../lib/libRooFitXRooFit.so; [100%] Built target RooFitXRooFit; [100%] Built target onepcm; [100%] Generating lib/modules.idx; Abort trap (core dumped); --- lib/modules",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13865#issuecomment-1779361849:313,message,message,313,https://root.cern,https://github.com/root-project/root/issues/13865#issuecomment-1779361849,2,['message'],['message']
Integrability,"See [godbolt](https://www.godbolt.org/#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:c%2B%2B,selection:(endColumn:1,endLineNumber:10,positionColumn:1,positionLineNumber:10,selectionStartColumn:1,selectionStartLineNumber:10,startColumn:1,startLineNumber:10),source:'template+%3Cclass+...T%3E%0Astruct+P+%7B%7D%3B%0A%0Atemplate+%3Cclass+ONE,+template+%3Cclass+O_%3E+class...+T%3E%0Astruct+U:+T%3CONE%3E...+%7B%0A++++using+u+%3D+P%3Ctypename+T%3CONE%3E::t...%3E%3B%0A%7D%3B%0A%0AU%3Cint%3E+u%3B%0A'),l:'5',n:'0',o:'C%2B%2B+source+%231',t:'0'),(h:compiler,i:(compiler:vcpp_v19_latest_x64,deviceViewOpen:'1',filters:(b:'0',binary:'1',binaryObject:'1',commentOnly:'0',debugCalls:'1',demangle:'0',directives:'0',execute:'1',intel:'0',libraryCode:'0',trim:'1'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:c%2B%2B,libs:!(),options:'',overrides:!(),selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:'5',n:'0',o:'+x64+msvc+v19.latest+(Editor+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:output,i:(compilerName:'x64+msvc+v19.latest',editorid:1,fontScale:14,fontUsePx:'0',j:1,wrap:'1'),l:'5',n:'0',o:'Output+of+x64+msvc+v19.latest+(Compiler+%231)',t:'0')),header:(),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13015#issuecomment-1591487417:1240,wrap,wrap,1240,https://root.cern,https://github.com/root-project/root/pull/13015#issuecomment-1591487417,1,['wrap'],['wrap']
Integrability,See also https://chris.beams.io/posts/git-commit for the usual conventions around git commit messages. To play nice with `git --oneline` or other ways to visualize git logs it should look something like this:. ```; [DF] Use FromSpec in df106_HiggstoFourLeptons.py tutorial. Now one RDF is used instead of a number of individual ones; and users can see what a dataset specification file looks like; and how to access the metadata information.; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12929#issuecomment-1573963050:93,message,messages,93,https://root.cern,https://github.com/root-project/root/pull/12929#issuecomment-1573963050,1,['message'],['messages']
Integrability,"See also this discussion here:; https://github.com/root-project/root/pull/15812#issuecomment-2252107168. The PR #15812 introduced a direct dependency of `graf3d/gl` on TASImage, which is only built if `asimage=ON`. It would be better if the PNG export would be done via the `TImage` plugin system, so there is no dependency at build time. Or if this can't be done, at least error out at configuration time if one attempts to build with this combination of flags. Here is the culprit:; https://github.com/root-project/root/blob/master/graf3d/gl/src/TGLSdfFontMaker.cxx#L198. @osschar @linev . See also:; * https://root.cern.ch/doc/master/classTASImage.html; * https://root.cern/doc/master/imgconv_8C.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16250:139,depend,dependency,139,https://root.cern,https://github.com/root-project/root/issues/16250,2,['depend'],['dependency']
Integrability,"See cms-sw/cmssw#33361. Fixes #8048. Now, set the start point of the filling to be the end of the previous filling rather than the start of the current cluster (which can sometimes; be before the end of the previous filling). Issue: The error message was inaccurate, it did not take into account jagged filling of the TTreeCache. In this case, the cache was filled with a little more than one cluster and when it needs to do the next refill it restarted from the cluster start boundary of that partially downloaded cluster which is “indeed” within the range of the last TreeCache fill (i.e. the error). We did not see the problem with a local file because the TTreeCache usage is different. CMSSW take note of whether prefetching (asynchronous reads) is available for a while or not. In the setup CMSSW has, the prefetching (asynchronous reads) is available for the local file but not for the network/remote file. In addition when prefetching (asynchronous reads) is not available, CMSSW uses multiple TTreeCache for a given TTree while it uses only one when prefetching (asynchronous reads) is available. This results in the pattern of filling to be different between the 2 cases.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8049:243,message,message,243,https://root.cern,https://github.com/root-project/root/pull/8049,1,['message'],['message']
Integrability,See commit message for more details.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4342:11,message,message,11,https://root.cern,https://github.com/root-project/root/pull/4342,1,['message'],['message']
Integrability,"See https://reviews.llvm.org/D39416 for more details. Original commit message:. The MultiplexExternalSemaSource doesn't correctly overload the getModule function,; causing the multiplexer to not forward this call as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1257:70,message,message,70,https://root.cern,https://github.com/root-project/root/pull/1257,1,['message'],['message']
Integrability,"See in-code comment for more details. Note: this bug is routinely seen on the CI, where it causes occasional failures to the tests in question. Despite this solution being very suboptimal (the bug is most likely still present in many places of our codebase and can be encountered by users in the wild) we should at least be able to remove the random CI failures on our side. A proper solution would be nice, but it seems hard to come up with one that doesn't have big performance implications. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16412:56,rout,routinely,56,https://root.cern,https://github.com/root-project/root/pull/16412,1,['rout'],['routinely']
Integrability,"See more details in the commit messages. This is a followup to https://github.com/root-project/root/pull/8878, and the first commit silences a harmless error message that appeared after https://github.com/root-project/root/commit/d5c3c5885726d11d14b59249e601e81ecfe8021d.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9795:31,message,messages,31,https://root.cern,https://github.com/root-project/root/pull/9795,2,['message'],"['message', 'messages']"
Integrability,"See the commit messages for more details. The first commit in this PR partly fixes https://github.com/root-project/root/issues/9196. Simple code to reproduce the issue that this PR is fixing:; ```C++; #include ""RooRealVar.h"". #include ""TSystem.h"". void reproducer(); {; ProcInfo_t pinfo;; for(std::size_t i = 0; i < 10000; ++i) {. RooRealVar x(""x"",""x"",0);; RooRealVar y(x);. if(i % 500 == 0) {; gSystem->GetProcInfo(&pinfo);; std::cout << i << "" memory usage "" << pinfo.fMemResident; << "" "" << pinfo.fMemVirtual << std::endl;; }. }; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9270:15,message,messages,15,https://root.cern,https://github.com/root-project/root/pull/9270,1,['message'],['messages']
Integrability,See the discussion in the commit messages. This should fix #6360.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6364:33,message,messages,33,https://root.cern,https://github.com/root-project/root/pull/6364,1,['message'],['messages']
Integrability,See the individual commit messages.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8729:26,message,messages,26,https://root.cern,https://github.com/root-project/root/pull/8729,1,['message'],['messages']
Integrability,"See the linked PR for a hack to fix the issue. Looking at the issue in a debug build, I could find out that cppyy is the culprit. The issue is that if you import ROOT in another process (and the import happens in a previously pickled function), then cppyy is not there and some random INCREF on the cppyy module segfaults because of accessing a nullptr. It's to be discussed how to fix this properly since the implicit contracts done by pickle are not clear to me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6765#issuecomment-730306449:419,contract,contracts,419,https://root.cern,https://github.com/root-project/root/issues/6765#issuecomment-730306449,1,['contract'],['contracts']
Integrability,Seeing how many places this code needed to be copied lets me thing it would be worthwhile to refactor the code to read and write axes in the HistFactory implementation to re-use the readBinnedData functionality from RooWSJSONFactoryTool via some to-be-defined interface. What do you think @guitargeek ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13078#issuecomment-1603097931:260,interface,interface,260,https://root.cern,https://github.com/root-project/root/pull/13078#issuecomment-1603097931,1,['interface'],['interface']
Integrability,"Seems to be, cling/llvm9 have problems to parse OCCI headers. ; With enabled oracle hsimple.C crashes making some message about accessing libOracle module; In any case such form is preferable for plugins",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7465:114,message,message,114,https://root.cern,https://github.com/root-project/root/pull/7465,1,['message'],['message']
Integrability,"Sergey, semi-related, have been running with valgrind (root supressions on), and this came up:; ```; root [1] ==975849== Thread 8 civetweb-worker:; ==975849== Conditional jump or move depends on uninitialised value(s); ==975849== at 0x4CD6584: R__longest_match (ZDeflate.c:430); ==975849== by 0x4CD6EA8: R__Deflate (ZDeflate.c:677); ==975849== by 0x4CD6084: R__memcompress (Bits.c:329); ==975849== by 0x22699978: THttpCallArg::CompressWithGzip() (THttpCallArg.cxx:420); ==975849== by 0x22693E4F: begin_request_handler(mg_connection*, void*) (TCivetweb.cxx:467); ==975849== by 0x226CCE61: handle_request (civetweb.c:14331); ==975849== by 0x226BCF09: handle_request_stat_log (civetweb.c:6544); ==975849== by 0x226D3421: process_new_connection (civetweb.c:18629); ==975849== by 0x226D4038: worker_thread_run (civetweb.c:19036); ==975849== by 0x226D416F: worker_thread (civetweb.c:19097); ==975849== by 0x535D896: start_thread (pthread_create.c:444); ==975849== by 0x53E48C3: clone (clone.S:100). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15812#issuecomment-2170680580:184,depend,depends,184,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2170680580,1,['depend'],['depends']
Integrability,"Set the environment for the tutorials, which is the eventual ROOT_environ plus some environment variables related to limiting the number of threads used by NumPy.; See: https://stackoverflow.com/questions/30791550/limit-number-of-threads-in-numpy. Possibly related to #16552, but the main motivation is to avoid an excessive number of threads when running the RooFit tutorials for simulation based inference. So far, the environment was set inside these tutorials, but this is distracting to users who look at these tutorials. Also, make sure that the same environment is used for all tutorials that are wrapped in `ROOT_ADD_TEST`. Furthermore, remove unused helper function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16717:604,wrap,wrapped,604,https://root.cern,https://github.com/root-project/root/pull/16717,1,['wrap'],['wrapped']
Integrability,SetErrorDef was not implemented for the FCNGradAdapter used to wrap the user functions in the Minuit interface. This causes that the current set ErrorDef was not used when minimizing but the one set when constructed the function. This fixes issue #12338,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12339:63,wrap,wrap,63,https://root.cern,https://github.com/root-project/root/pull/12339,2,"['interface', 'wrap']","['interface', 'wrap']"
Integrability,"Several browsable components depends from libraries, which only build when -Droot7=ON specified. These; are RCanvas and RNtuple. Therefore check root7; before building them. Fixes #16449",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16459:29,depend,depends,29,https://root.cern,https://github.com/root-project/root/pull/16459,1,['depend'],['depends']
Integrability,"Several browsable components depends from libraries, which only build when -Droot7=ON specified. These; are RCanvas and RNtuple. Therefore check root7; before building them. Solves #16449",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16461:29,depend,depends,29,https://root.cern,https://github.com/root-project/root/pull/16461,1,['depend'],['depends']
Integrability,"Several small issues came up in the forum, and this is a collection of documentation updates, a few safety checks added to roofit and more understandable warning/error messages. Further, the class RooRealProxy (kind of a pointer with extra functionality) has been replaced by a templated class, as it always requires casting when the pointed-to object is used. Since it is internal to RooFit, this should not affect users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4739:168,message,messages,168,https://root.cern,https://github.com/root-project/root/pull/4739,1,['message'],['messages']
Integrability,"Shouldn't all unit-test be independent? If you see a failure in a test, shouldn't it be reproducible by itself? You could have hidden dependencies between the tests. That's at least the statement from the [gtest guys](https://groups.google.com/d/msg/googletestframework/A_Z_8Ctihmw/quG7RurEz_YJ). But I agree that it does not increase the test coverage substantially.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4029#issuecomment-507959360:134,depend,dependencies,134,https://root.cern,https://github.com/root-project/root/pull/4029#issuecomment-507959360,1,['depend'],['dependencies']
Integrability,"Signed-off-by: Stephan Lachnit <stephanlachnit@debian.org>. # This Pull request:. ## Changes or fixes:. Fix for #12152. Requires #12153. The idea is the following:. - add `libbsd` option & `find_packge` module defining `LIBBSD::libbsd` target; - define `R__USE_LIBBSD` in `RConfigure.h` if `libbsd` enabled; - adjust `strlcpy` to include `bsd/string.h` if `R__USE_LIBBSD` defined; - add `LIBBSD::libbsd` to the public linking interface of `Clib`. Unfortunately, this does not work. The reason here is that (for some reason beyond me) `rootcling_stage1`, `libCling.so`, `bin/root` and probably more don't link to `Clib` as *target* but instead fetch the *target object* directly. Relevant CMake documentation:; - [`$<TARGET_OBJECTS:tgt`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:TARGET_OBJECTS); - [Object Libraries](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#object-libraries); - [Linking Object Libraries](https://cmake.org/cmake/help/v3.13/command/target_link_libraries.html#linking-object-libraries). Example using `rootcling_stage1`:. Currently in CMake:; ```cmake; ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx; $<TARGET_OBJECTS:Clib>; $<TARGET_OBJECTS:ClingUtils>; $<TARGET_OBJECTS:Dictgen>; $<TARGET_OBJECTS:Foundation_Stage1>; LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}; NOINSTALL); ```; I link against the `Clib` object library, but ignores any target properties like for example this line:; ```cmake; # alternative for strlcpy on linux, see https://github.com/root-project/root/issues/12152; if(libbsd); target_link_libraries(Clib PUBLIC LIBBSD::libbsd); endif(); ```. I don't see why using the `Clib` target directly should break anything? It's linked also directly, the only difference is that target properties are ignored which shouldn't be the case. I added a commit with this approach and it seems to work. ## Checklist:. - [ ] tested changes locally; - [ ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12154:426,interface,interface,426,https://root.cern,https://github.com/root-project/root/pull/12154,1,['interface'],['interface']
Integrability,"Silence a zillion of compilation warnings like:; ```; warning C4267: 'initializing': conversion from 'size_t' to 'UInt_t', possible loss of data; ```; From Microsoft:; Compiler Warning (level 3) C4267; 'var' : conversion from 'size_t' to 'type', possible loss of data; The compiler detected a conversion from size_t to a smaller type.; To fix this warning, use size_t instead of type. Alternatively, use an integral type that is at least as large as size_t.; (size_t is unsigned __int64 or unsigned integer, depending on the target platform)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9197:508,depend,depending,508,https://root.cern,https://github.com/root-project/root/pull/9197,1,['depend'],['depending']
Integrability,"Silence many `Warnings C4624` like for example:; ```; 04:42:17 C:\build\night\LABEL\windows64\SPEC\default\V\master\root\interpreter\llvm\src\include\llvm/Support/type_traits.h(79,1): warning C4624: 'llvm::detail::copy_construction_triviality_helper<T>': destructor was implicitly defined as deleted [C:\build\night\LABEL\windows64\SPEC\default\V\master\build\interpreter\cling\lib\Utils\obj.clingUtils.vcxproj]; 04:42:17 with; 04:42:17 [; 04:42:17 T=clang::FixItHint; 04:42:17 ]; 04:42:17 C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits(585): message : see reference to class template instantiation 'llvm::detail::copy_construction_triviality_helper<T>' being compiled [C:\build\night\LABEL\windows64\SPEC\default\V\master\build\interpreter\cling\lib\Utils\obj.clingUtils.vcxproj]; 04:42:17 with; 04:42:17 [; 04:42:17 T=clang::FixItHint; 04:42:17 ]; 04:42:17 C:\build\night\LABEL\windows64\SPEC\default\V\master\root\interpreter\llvm\src\include\llvm/Support/type_traits.h(100): message : see reference to class template instantiation 'std::is_copy_constructible<llvm::detail::copy_construction_triviality_helper<T>>' being compiled [C:\build\night\LABEL\windows64\SPEC\default\V\master\build\interpreter\cling\lib\Utils\obj.clingUtils.vcxproj]; 04:42:17 with; 04:42:17 [; 04:42:17 T=clang::FixItHint; 04:42:17 ]; 04:42:17 C:\build\night\LABEL\windows64\SPEC\default\V\master\root\interpreter\llvm\src\include\llvm/ADT/SmallVector.h(312): message : see reference to class template instantiation 'llvm::is_trivially_copy_constructible<T>' being compiled [C:\build\night\LABEL\windows64\SPEC\default\V\master\build\interpreter\cling\lib\Utils\obj.clingUtils.vcxproj]; 04:42:17 with; 04:42:17 [; 04:42:17 T=clang::FixItHint; 04:42:17 ]; 04:42:17 C:\build\night\LABEL\windows64\SPEC\default\V\master\root\interpreter\llvm\src\include\llvm/ADT/SmallVector.h(1168): message : see reference to class template instantiation 'llvm::SmallVectorImpl<T>' bei",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12379:598,message,message,598,https://root.cern,https://github.com/root-project/root/pull/12379,1,['message'],['message']
Integrability,"Silent the following zillion of warnings on Windows:; ```; C:\Users\sftnight\git\master\interpreter\llvm\src\include\llvm/Support/type_traits.h(97,1): warning C4624: 'llvm::detail::trivial_helper<T>': destructor was implicitly defined as deleted [C:\Users\sftnight\build\relwithdebinfo\interpreter\cling\lib\Interpreter\obj.clingInterpreter.vcxproj]; with; [; T=clang::Sema::ModuleScope; ]; C:\Users\sftnight\git\master\interpreter\llvm\src\include\llvm/Support/type_traits.h(150): message : see reference to class template instantiation 'llvm::detail::trivial_helper<T>' being compiled [C:\Users\sftnight\build\relwithdebinfo\interpreter\cling\lib\Interpreter\obj.clingInterpreter.vcxproj]; with; [; T=clang::Sema::ModuleScope; ]; C:\Users\sftnight\git\master\interpreter\llvm\src\include\llvm/ADT/SmallVector.h(315): message : see reference to class template instantiation 'llvm::is_trivially_copyable<T>' being compiled [C:\Users\sftnight\build\relwithdebinfo\interpreter\cling\lib\Interpreter\obj.clingInterpreter.vcxproj]; with; [; T=clang::Sema::ModuleScope; ]; C:\Users\sftnight\git\master\interpreter\llvm\src\include\llvm/ADT/SmallVector.h(837): message : see reference to class template instantiation 'llvm::SmallVectorImpl<T>' being compiled [C:\Users\sftnight\build\relwithdebinfo\interpreter\cling\lib\Interpreter\obj.clingInterpreter.vcxproj]; with; [; T=clang::Sema::ModuleScope; ]; C:\Users\sftnight\git\master\interpreter\llvm\src\tools\clang\include\clang/Sema/Sema.h(1724): message : see reference to class template instantiation 'llvm::SmallVector<clang::Sema::ModuleScope,16>' being compiled [C:\Users\sftnight\build\relwithdebinfo\interpreter\cling\lib\Interpreter\obj.clingInterpreter.vcxproj]; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7446:482,message,message,482,https://root.cern,https://github.com/root-project/root/pull/7446,4,['message'],['message']
Integrability,"Simple search for following includes were done:. * `TSystem.h`, ; * `TStyle.h`; * `TClass.h`; * `TEnv.h`; * `TObjString.h`; * `TObjArray.h`; * `TList.h`. These are relative ""big"" includes, therefore can improve compilation and dependencies. Let see which tests are affected",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5069:227,depend,dependencies,227,https://root.cern,https://github.com/root-project/root/pull/5069,1,['depend'],['dependencies']
Integrability,Simplify CMake integration of LLVM,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13221:15,integrat,integration,15,https://root.cern,https://github.com/root-project/root/pull/13221,1,['integrat'],['integration']
Integrability,Simplify the platform-dependent part of a couple of add_custom_command,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12341:22,depend,dependent,22,https://root.cern,https://github.com/root-project/root/pull/12341,1,['depend'],['dependent']
Integrability,"Since I haven't had a chance to cleanly address the TBB dependency issue, and since the other change is much more important performance-wise, I've split that off into a separate PR here which should be possible to merge quickly: https://github.com/root-project/root/pull/7105",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-768422376:56,depend,dependency,56,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-768422376,1,['depend'],['dependency']
Integrability,"Since ROOT 6.30, we are not building ROOT with the `math/fftw`; subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and; fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for; FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work; again in this situation: the routine that uses fftw is declared; on-the-fly to the interpreter. This will work if the user has an; external install of `fftw3`, which is usually available in all Linux; distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:; ```txt; input_line_21:1:10: fatal error: 'fftw3.h' file not found; #include ""fftw3.h""; ^~~~~~~~~; [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header.; You have three options to fix this problem:; 1) Install fftw3 on your system so that the interpreter can find it; 2) In case fftw3.h is installed somewhere else,; tell ROOT with gInterpreter->AddIncludePath() where to find it; 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,; such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'; what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14174:108,interface,interface,108,https://root.cern,https://github.com/root-project/root/pull/14174,3,"['interface', 'rout']","['interface', 'routine', 'routines']"
Integrability,"Since glew.h is directly used/included in ROOT's public interfaces, the correct way will be to ship it as well with ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5583:56,interface,interfaces,56,https://root.cern,https://github.com/root-project/root/pull/5583,1,['interface'],['interfaces']
Integrability,"Since https://github.com/nlohmann/json/pull/3590, the `basic_json` class and the `json` `using`-declaration are located in a ""versioned, ABI-tagged inline namespace"". This makes it impossible to forward declare the type in `REveElement.hxx`.; Instead introduce a new struct `REveJsonWrapper` that just wraps a `json` object (after including the full `nlohmann/json.hpp`). As the `struct` is under our control, we can easily forward declare the type and use it for method arguments. Fixes #11130",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11196:302,wrap,wraps,302,https://root.cern,https://github.com/root-project/root/pull/11196,1,['wrap'],['wraps']
Integrability,"Since rf408 depends on RDF, it make sense to veto it when RDF is off.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7385:12,depend,depends,12,https://root.cern,https://github.com/root-project/root/pull/7385,1,['depend'],['depends']
Integrability,"Since the distributed RDataFrame feature is experimental let's give it access to more modern features of the Python language. 3.7 seems a good compromise between maturity (released in October 2018) and features (typing, dataclasses). **NOTE**:; I'm uncertain about whether giving a message at configure time that DistRDF is active in the build process. I have put a simple message for now, could be changed or removed. Let me know your opinions",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9060:282,message,message,282,https://root.cern,https://github.com/root-project/root/pull/9060,2,['message'],['message']
Integrability,"Since the proper creation of the TClass will require the dictionary for all its component let; load all the dependent library too. Note that even with explicit linking, the dictionary may; not be loaded as part of the 'main' library when the dictionary is a library separate from the; classes' code (see ATLAS setup for example). This solves ROOT-10663.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5486:108,depend,dependent,108,https://root.cern,https://github.com/root-project/root/pull/5486,1,['depend'],['dependent']
Integrability,"Since we enabled warnings by default in rootcling, which pointed; out a bunch of warnings in the code base, we also set rootcling; into a mode in which it is unable to ever fail. The reason for this is this faulty if statement. If we enable warnings,; we set the errorIgnoreLevel to kWarning. But this if statement only records; any errors if the errorIgnoreLevel is NOT kWarning (which is between; kThrowOnWarning and kError). The new if statements only checks if the the printed message is an error; or higher (which would include any kind of fatal error). If the errorIgnoreLevel; is set higher, we already correctly filter this at the start of the method; where we return on filtered messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/831:481,message,message,481,https://root.cern,https://github.com/root-project/root/pull/831,2,['message'],"['message', 'messages']"
Integrability,"Since we have applied #2611 a Warning is not anymore needed. In case we could add an Info message that Sumw2() is called, if you think this information is important. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2610#issuecomment-461814613:90,message,message,90,https://root.cern,https://github.com/root-project/root/pull/2610#issuecomment-461814613,1,['message'],['message']
Integrability,"Skip CI for the moment, i need to test it a bit more. Naming is probably not ideal. Introduce a new R__NEW_TBB macro to address the change in interface in TBB 2021 and adapt the forward declaration of task_arena accordingly. Deals with the problem @mrodozov reported in issue https://github.com/root-project/root/issues/6933 and by @krasznaa in PR https://github.com/root-project/root/pull/6174 (in whose conversation I first noticed the problem and then immediately forgot about what the real issue was and focused on the code, apologies for that). *Note*: This does not solve the ideal situation in which we can live not forward declaring `tbb::task_arena` and keep tbb hidden from the public interfaces, but patches ROOT to work with the new OneAPI and TBB versions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7059:142,interface,interface,142,https://root.cern,https://github.com/root-project/root/pull/7059,2,['interface'],"['interface', 'interfaces']"
Integrability,"Snapshot, Cache, Define and Filter did not check that the types of; columns used as arguments in jitted code were valid (in particular,; that the type of custom columns was correctly understood by cling).; This patch provides a function that performs the validity check,; GetValidatedArgTypes, that is used everywhere instead of GetColumnTypes; (now unused and therefore deleted) and ColumnName2ColumnTypeName. An exception with a user-friendly error message is thrown in case of; error, which fixes ROOT-10458.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5595:451,message,message,451,https://root.cern,https://github.com/root-project/root/pull/5595,1,['message'],['message']
Integrability,"So I think it's well defined what we mean by the range of a discrete variable - each value is declared as either being in the range or not in the range. RooFit already supports this for RooCategory, so that's all well and good. I do think it makes sense then to think about the behaviour of fits when such a range is declared. It's actually possible my original jira issue might have been referring to a case where I had a PDF that wasn't a RooSimultaneous but was dependent on a RooCategory and it wasn't handled correctly, I'd have to look back at it and remind myself. But for sure in the case of the RooCategory being the index category of a RooSimultaneous I think it makes total sense for the RooSimultaneous to be 'reduced' to just the channels that are in the range.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8231#issuecomment-1163101737:465,depend,dependent,465,https://root.cern,https://github.com/root-project/root/issues/8231#issuecomment-1163101737,1,['depend'],['dependent']
Integrability,"So I think what we agreed on on Mattermost: We want the thingy, but no checks at configure time (because it's not a build time dependency). We still have to iterate how exactly we want to check at test time the dependencies, but I think at a first shot, the current impl is good enough. Feel free to argue :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5408#issuecomment-618263073:127,depend,dependency,127,https://root.cern,https://github.com/root-project/root/pull/5408#issuecomment-618263073,2,['depend'],"['dependencies', 'dependency']"
Integrability,"So depending on #6148 #6079 and this all seems to work:; ```; $ env CTEST_OUTPUT_ON_FAILURE=1 ctest -R TMVA; Test project /build/root/src/build-cuda; ...; 100% tests passed, 0 tests failed out of 71. Label Time Summary:; tutorial = 132.26 sec*proc (18 tests). Total Test time (real) = 287.13 sec; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6058#issuecomment-671365564:3,depend,depending,3,https://root.cern,https://github.com/root-project/root/pull/6058#issuecomment-671365564,1,['depend'],['depending']
Integrability,"So far changing to a function and PARENT_SCOPING the gensrdict seems to work. I added the `IF(TARGET ...)` parts in the last push, this would let me do what I want without adding any additional option to the function. I am not sure about that not affecting existing uses of REFLEX_GENERATE_DICTIONARY. > Can't we make this call to target_sources(edm4hep PRIVATE edm4hep.cxx) internal to REFLEX_GENERATE_DICTIONARY, this way you won't need an extra switch and things are a little more consistent and controlled by the routine supposed to handle dictionary generation?. That `target_sources` call is not what made we want a new switch, though. I don't I understand which code should be re-used where from the link to ROOT_GENERATE_DICTIONARY",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5019#issuecomment-588141834:517,rout,routine,517,https://root.cern,https://github.com/root-project/root/pull/5019#issuecomment-588141834,1,['rout'],['routine']
Integrability,So far we had this patch in our local fork but we would prefer to have it integrated into the mainstream repository.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12613#issuecomment-1496144896:74,integrat,integrated,74,https://root.cern,https://github.com/root-project/root/pull/12613#issuecomment-1496144896,1,['integrat'],['integrated']
Integrability,So far we only trigger an assertion in LLVM when we can't find the; modulemap file which is not very user-friendly. With this patch; we actually prints an error message in this situation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/527:161,message,message,161,https://root.cern,https://github.com/root-project/root/pull/527,1,['message'],['message']
Integrability,"So far, ROOT, in particular the `roofit_multiprocess` feature was depending on a feature developed by @egpbos that was not part of the ZeroMQ 4.3.4 release yet. Therefore, it was a bit awkward to check if ZeroMQ had that feature. Now that it's released, we can just do a proper cmake version check. The only caveat is that ZeroMQ needs to be built with `-DENABLE_DRAFTS`; to work for `roofit_multiprocess`, which is explained in the build; options documentation. Also, move some compilation flags to specifically RooFitZMQ, where they; are needed. This PR superseeds two other PRs:; * https://github.com/root-project/root/pull/13995; * https://github.com/root-project/root/pull/9473",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14003:66,depend,depending,66,https://root.cern,https://github.com/root-project/root/pull/14003,1,['depend'],['depending']
Integrability,"So far, deprecated RooFit code has been moved into [roofit/roofitcore/inc/RooFitLegacy](https://github.com/root-project/root/tree/master/roofit/roofitcore/inc/RooFitLegacy) and [roofit/roofitcore/src/RooFitLegacy](https://github.com/root-project/root/tree/master/roofit/roofitcore/src/RooFitLegacy). But to really separate the legacy code from the current RooFit, we want to introduce a new library called RooFitLegacy in a new `roofit/roofitlegacy` directory. This new library would depend on RooFitCore. RooFitCore could only have an interface dependency on RooFitLegacy to make sure that the code using RooFitLegacy classes still links. In CMake, this would look like:. ```cmake; target_link_libraries(RooFitCore INTERFACE RooFitLegacy); ```. Or maybe we can even leave this dependency out, leading to a more aggressive deprecation by making old code not link anymore. Once the RooFitLegacy library becomes large enough to visibly impact compile time, we can also make building the legacy library optional by introducing a new `roofitlegacy` cmake flag.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8759:484,depend,depend,484,https://root.cern,https://github.com/root-project/root/issues/8759,5,"['INTERFACE', 'depend', 'interface']","['INTERFACE', 'depend', 'dependency', 'interface']"
Integrability,"So far, the `ParamHistFunc` BatchMode implementation was still; sub-uptimal because it used the non-vectorized interface of the; RooDataHist. Using the new `RooAbsBinning::binNumbers()` function too look up; multiple bin indices at once, the implementaiton can be improved and; sped. In the three-dimensional many-bin case, the new implementation is a bit; more than three times faster than the old one. This should benefit; HistFactory fits with many bins. A new `testParamHistFunc` unit test was also introduced to validate the; results of a ParamHistFunc both with and without the batch mode,; comparing to manually computed reference results.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11170:111,interface,interface,111,https://root.cern,https://github.com/root-project/root/pull/11170,1,['interface'],['interface']
Integrability,"So far, the signature for the function that is called for the vectorized evaluation was this one:. ```c++; void RooAbsReal::computeBatch(double* output, size_t nEvents,; RooFit::Detail::DataMap const& dataMap) const; ```. This commit is suggesting a new signature:. ```c++; void doEval(RooFit::EvalContext & ctx) const;; ```. The idea is to make the signature as short as possible, so it doesn't have to be changed anymore if more information needs to be passed. That's why the only parameter is now an `EvalContext` object, reminicint of the old `RunContext` object that fulfilled this task in the very first implementation of the BatchMode by Stephan. The name is now simply `doEval`, because the overloaded term ""Batch"" should be dropped. It needed to be something with ""evaluate"", because there is also `RooAbsReal::evaluate()` and we are talking about ""evaluation backends"". The motivation to change this interface now is because I want to write a documentation for developers (like CMS combine mainteiners) on how to use these new interfaces. And if they start to use it, the interfaces should not change anymore. Than's why I'm doing this change now, which I had in mind already for some time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13939:910,interface,interface,910,https://root.cern,https://github.com/root-project/root/pull/13939,3,['interface'],"['interface', 'interfaces']"
Integrability,"So far, the whole HistFactory package was not built if `xml=OFF`, even; if only one part of HistFactory uses TXML: the `ConfigParser` class and; it's executable wrapper `hist2workspace`. With this commit, we only refrain from building the ConfigParser and the; hist2workspace executable if `xml=OFF`, but still build the rest of; HistFactory. The reason for doing this now was the RooFitHS3 package: it depends on; HistFactory, but doesn't use the XML-specific classes. After this; commit, RooFitHS3 builds also with `xml=OFF`. The RooStats tutorials that depend on `hist2workspace` are now also; disabled if XML is not ON. This PR should fix the compiler errors reported on the forum:; https://root-forum.cern.ch/t/installing-root-error-on-ubuntu/49146",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10104:161,wrap,wrapper,161,https://root.cern,https://github.com/root-project/root/pull/10104,3,"['depend', 'wrap']","['depend', 'depends', 'wrapper']"
Integrability,"So if a library A depends on library B, and we load A without loading B first wouldn't we get the same callback allowing us to resolve that dependency?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2135#issuecomment-394478073:18,depend,depends,18,https://root.cern,https://github.com/root-project/root/pull/2135#issuecomment-394478073,2,['depend'],"['dependency', 'depends']"
Integrability,So removing the sofie build breaks many dependencies. I'll check with @lmoneta how to fix that correctly once he's back.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13055#issuecomment-1610869466:40,depend,dependencies,40,https://root.cern,https://github.com/root-project/root/issues/13055#issuecomment-1610869466,1,['depend'],['dependencies']
Integrability,"So that's because `std::sqrt` doesn't have an overload for Vc types. The solution is the following:; ```c++; T SomeFunc() {; using std::sqrt;; return sqrt(fX);; }; ```; i.e. keep `sqrt` unqualified such that ADL (argument-dependent lookup, fixing Vc) can happen, but make `std::sqrt` available through the local (!) `using namespace std::` or better yet `using std::sqrt` if that builds everywhere.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7909#issuecomment-822573883:222,depend,dependent,222,https://root.cern,https://github.com/root-project/root/pull/7909#issuecomment-822573883,1,['depend'],['dependent']
Integrability,So the error is:; ```; CMake Error at CMakeLists.txt:86 (message):; Found unsupported version: LLVM 2.13.2;. Please set LLVM_DIR pointing to the llvm version 5.0 to 16.0.x build or; installation folder. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14492#issuecomment-1919544338:57,message,message,57,https://root.cern,https://github.com/root-project/root/issues/14492#issuecomment-1919544338,1,['message'],['message']
Integrability,"So the upstream change has been merged. How can I ask for a proper backport? I have the impression building PRs to the v6-28-00-patches branch does not always work. Shall I try with master first? However, wouldn't doing that create troubles with the later integration of the LLVM upstream?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13641#issuecomment-1744333339:256,integrat,integration,256,https://root.cern,https://github.com/root-project/root/pull/13641#issuecomment-1744333339,1,['integrat'],['integration']
Integrability,"So this change at least breaks when searching for nested namespaces, close it now...; ```; Processing /data/sftnight/workspace/root-pullrequests-build/root/tutorials/dataframe/df014_CSVDataSource.C...; In file included from input_line_10:1:; /data/sftnight/workspace/root-pullrequests-build/root/tutorials/dataframe/df014_CSVDataSource.C:30:20: error: no member named 'RDF' in namespace 'ROOT'; auto df = ROOT::RDF::MakeCsvDataFrame(fileName);; ~~~~~~^; CMake Error at /data/sftnight/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):; error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10969#issuecomment-1186049678:550,message,message,550,https://root.cern,https://github.com/root-project/root/pull/10969#issuecomment-1186049678,1,['message'],['message']
Integrability,"So with and without this PR, same result with VS 2022 v17.5.4 (x64):; ```; C:\Users\bellenot\build\x64\release>ctest -VV -C Release -R tutorial-v7-ntuple-ntpl007_mtFill; UpdateCTestConfiguration from :C:/Users/bellenot/build/x64/release/DartConfiguration.tcl; Parse Config file:C:/Users/bellenot/build/x64/release/DartConfiguration.tcl; Add coverage exclude regular expressions.; UpdateCTestConfiguration from :C:/Users/bellenot/build/x64/release/DartConfiguration.tcl; Parse Config file:C:/Users/bellenot/build/x64/release/DartConfiguration.tcl; Test project C:/Users/bellenot/build/x64/release; Constructing a list of tests; Ignore test: test-tcollex; Ignore test: roottest-cling-parsing-semicolon; Ignore test: roottest-root-rint-TabCom; Ignore test: roottest-root-rint-BackslashNewline; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 910; Start 910: tutorial-v7-ntuple-ntpl007_mtFill. 910: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Users/bellenot/build/x64/release/bin/root.exe^-b^-l^-q^C:/Users/bellenot/git/master/tutorials/v7/ntuple/ntpl007_mtFill.C"" ""-DSYS=C:/Users/bellenot/build/x64/release"" ""-DENV=ROOTSYS=C:/Users/bellenot/build/x64/release#PYTHONPATH=C:/Users/bellenot/build/x64/release/bin#PYTHIA8=C:/libs/x64/pythia8/8.3.03#PYTHIA8DATA=C:/libs/x64/pythia8/8.3.03/share/Pythia8/xmldoc"" ""-P"" ""C:/Users/bellenot/build/x64/release/RootTestDriver.cmake""; 910: Environment variables:; 910: ROOT_HIST=0; 910: Test timeout computed to be: 1200; 910:; 910: Processing C:/Users/bellenot/git/master/tutorials/v7/ntuple/ntpl007_mtFill.C...; 910: Warning in <[ROOT.NTuple] Warning C:\Users\bellenot\git\master\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __cdecl ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOption",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13264#issuecomment-1649597994:917,depend,dependency,917,https://root.cern,https://github.com/root-project/root/pull/13264#issuecomment-1649597994,2,['depend'],['dependency']
Integrability,"So you mean that 'somehow' wrapper.so is fabricating this incorrect string, or it might be coming in from XrdNetConnect::Connect?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-759523877:27,wrap,wrapper,27,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-759523877,1,['wrap'],['wrapper']
Integrability,Solves conflicting behaviours between classes depending on tbb. See more here: https://indico.cern.ch/event/607814/contributions/2466931/attachments/1409778/2155811/TScheduler.pdf,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/337:46,depend,depending,46,https://root.cern,https://github.com/root-project/root/pull/337,1,['depend'],['depending']
Integrability,Some RooAbsArg member functions were replaced a long time ago with drop-in alternatives that everyone uses since forever. We might as well deprecate these member functions now to slim down the interface.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16430:193,interface,interface,193,https://root.cern,https://github.com/root-project/root/pull/16430,1,['interface'],['interface']
Integrability,"Some RooFit classes used the RooRealVar or RooAbsRealLValue types for; some of their parameters in the constructor, which is not as flexible as; RooRealVar because they are further down in the dependency hierachy. This commit sustitutes `RooRealVar` in for some of these cases that were; encountered when investigating RooFit problems reported in the forum.; More precisely, I wanted to use a `RooFormulaVar` in a `RooDecay` which; was not possible before but now it is.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7325:193,depend,dependency,193,https://root.cern,https://github.com/root-project/root/pull/7325,1,['depend'],['dependency']
Integrability,"Some RooFit functions, in particular the ones related to; multiprocessing, created many files directly in the `/tmp` directory.; Some users and @hageboeck found that this was unnessecarily polluting; the `/tmp` directory and the files should rather go into a subdirectory. This commit suggests to use the subdirectory `/tmp/roofit` for add; temporary RooFit files that get created during multiprocessing and; testing. The path for temporary RooFit files can now be retrieved with a new; `RooFit::tmpPath()` function that is not exposted by the user but only; meant to be used by the RooFit implementations. The first time; `RooFit::tmpPath()` is called, it will check if the directory exists and; create it if it doesn't. This new function goes into a new package; `roofit/common` that is meant to be at the base of the RooFit dependency; graph, meaning all of `roofitcore`, `multiprocess`, and `roofitZMQ` can; depend on the `common` package to get the temporary files path.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9504:827,depend,dependency,827,https://root.cern,https://github.com/root-project/root/pull/9504,2,['depend'],"['depend', 'dependency']"
Integrability,"Some boost histogram utility functions have trouble being called from PyROOT. I've traced this back to what looks like a name normalization problem. Unfortunately I did not manage to put together a standalone example without the boost histogram dependency. Consider the following test case:. test.c; ```cpp; #include ""TInterpreter.h""; #include ""TClass.h""; #include ""TMethod.h""; #include <iostream>; #include <boost/histogram.hpp>. int test() {; auto ns = TClass::GetClass(""boost::histogram"");; auto meth = ns->GetMethodWithPrototype(""make_histogram"", ""boost::histogram::axis::regular<>&&"");. std::cout << ""meth->GetReturnTypeName(): "" << meth->GetReturnTypeName() << std::endl;; std::cout << ""meth->GetReturnTypeNormalizedName(): "" << meth->GetReturnTypeNormalizedName() << std::endl;. auto cl = TClass::GetClass(meth->GetReturnTypeNormalizedName().c_str());; std::cout << ""cl: "" << cl << std::endl;. return 0;; }; ```. output:; ```; meth->GetReturnTypeName(): boost::histogram::histogram<tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> >,boost::histogram::unlimited_storage<allocator<char> > >; meth->GetReturnTypeNormalizedName(): boost::histogram::histogram<tuple<regular<double,use_default,use_default,use_default> >,unlimited_storage<allocator<char> > >; cl: 0; (int) 0; ```. So note that the normalized return type is missing the ```boost::histogram``` namespace for the template arguments of the std::tuple. (and then obviously trying to lookup the type again fails). This prevents properly calling this function and other similar ones from PyROOT because the normalized return type is used e.g. here https://github.com/root-project/root/blob/4483b01b7f4bad47332f98d773dbd9b8c7f36b9d/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1515",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12548:245,depend,dependency,245,https://root.cern,https://github.com/root-project/root/issues/12548,1,['depend'],['dependency']
Integrability,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6676#issuecomment-716447711:425,synchroniz,synchronization,425,https://root.cern,https://github.com/root-project/root/issues/6676#issuecomment-716447711,1,['synchroniz'],['synchronization']
Integrability,"Some details on why to use the Executor:; - When ROOT doesn't have IMT enabled, it will fall back to single-thread computation.; - It integrates well into tbb scheduling. If ROOT runs with other tbb things in the same process, one can configure the number of threads that ROOT uses.; - It listens to `ROOT::EnableImplicitMT(N)`. When done, the feature should be announced in release notes and documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7874#issuecomment-819579739:134,integrat,integrates,134,https://root.cern,https://github.com/root-project/root/issues/7874#issuecomment-819579739,1,['integrat'],['integrates']
Integrability,"Some further information from my own observations:. Somehow despite the fact that the model yield is >> the data yield, the reported FCN keeps getting smaller (see the MINUIT output below). This is true even when upper limits are extended to outrageous values. I have further tried eliminating the gaussian constraints on `Lumi` and `alpha_BFD1` as the source of the problem by reconstructing the likelihood using only the `RooRealSumPdf` which should not contain the constraints themselves, only the functions which depend on the observables or which normalize those same functions. The behavior is the same. More MINUIT output (print level 0):; ```; ********** ** 1 **SET PRINT 1 ********** ********** ** 2 **SET NOGRAD ********** PARAMETER DEFINITIONS: NO. NAME VALUE STEP SIZE LIMITS 1 Lumi 1.00000e+00 3.00000e-01 0.00000e+00 3.00000e+00 2 Nmu 5.00000e+04 2.49995e+04 1.00000e+00 1.00000e+06 3 RawRDst 4.03350e-02 1.99999e-02 1.00000e-06 2.00000e-01 4 alpha_BFD1 0.00000e+00 6.00000e-01 -3.00000e+00 3.00000e+00 ********** ** 3 **SET ERR 0.5 ********** ********** ** 4 **SET PRINT 1 ********** ********** ** 5 **SET STR 2 ********** NOW USING STRATEGY 2: MAKE SURE MINIMUM TRUE, ERRORS CORRECT ********** ** 6 **MIGRAD 2000 1 ********** FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4. START MIGRAD MINIMIZATION. STRATEGY 2. CONVERGENCE WHEN EDM .LT. 1.00e-03 MINUIT WARNING IN HESSE ============== Negative diagonal element 3 in Error Matrix MINUIT WARNING IN HESSE ============== 2456.94 added to diagonal of error matrix EIGENVALUES OF SECOND-DERIVATIVE MATRIX: -7.1929e+00 9.6978e-01 1.0000e+00 9.2231e+00 MINUIT WARNING IN HESSE ============== MATRIX FORCED POS-DEF BY ADDING 7.202092 TO DIAGONAL. FCN=-0.464708 FROM HESSE STATUS=NOT POSDEF 31 CALLS 32 TOTAL EDM=6.13113e+08 STRATEGY= 2 ERR MATRIX NOT POS-DEF EXT PARAMETER APPROXIMATE STEP FIRST NO. NAME VALUE ERROR SIZE DERIVATIVE 1 Lumi 1.00000e+00 1.33665e-03 2.14402e-03 -1.26169e+05 2 Nmu 5.00000e+04 1.26146e+03 1.18624e",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12729#issuecomment-1527705616:517,depend,depend,517,https://root.cern,https://github.com/root-project/root/issues/12729#issuecomment-1527705616,1,['depend'],['depend']
Integrability,"Some improvements in the RooFit build configuration to avoid that information that is only necessary for RooFit at build time is leaking into the public user interface. In particular, it is not necessary to define these `R__HAS_<*>` flags in the public ROOT config only to use them in the private `.cxx` sources. This should be avoided and instead be done with defines in the build configuration. * Move stressRooFit and stressRooStats to `roofit` directory; * Remove `R__HAS_ROOFIT_MULTIPROCESS` from ROOT configuration; * No need to check `R__HAS_MATHMORE` in roofitmore sources; * Avoid need for `R__HAS_CUDA`. More detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13915:158,interface,interface,158,https://root.cern,https://github.com/root-project/root/pull/13915,1,['interface'],['interface']
Integrability,"Some libraries are layered can depend on other libraries on a private paths. That is, libA can depend on libB which is neither on the LD_LIBRARY_PATH nor on a known system path. The posix linker injects ""variables"" such as @rpath which is expanded at link time to resolve the libraries on a relative path. Prior to this patch, cling's Dyld-based symbol resolution could not trace down such cases causing failures in symbol resolution when a symbol is only defined in libB (a private library). This patch implements the basic posix linker substitutions allowing cling's Dyld-based symbol resolution implementation to follow more closely the linker rules. ## Performance. |platform|test|master|PRv1|PRv2| mem master|mem PRv2|; |:--------|:---|:---------:|:-----------:|:-----------:|:-----------:|:-----------:|; |ubu20|roottest-python-pythonizations|6.5|6.55|6.65|342076|347168|; |ubu20|roottest-cling|112.8|114.53|181.26|411048|416036|; |ubu20|roottest-python|148.5|136.26|144.72|394292|397120|; |ubu20|roottest-root-hist|16.78|17.35|15.45|465156|235084|; |ubu20|roottest-root-math|28.28|27.89|27.40|424072|371256|; |ubu20|roottest-root-tree|462.84|510.59|465.79|796512|797992|; |ubu20|roottest-root-treeformula|117.53|129.16|114.44|261184|260168|; |ubu20|root-io-stdarray|66.90|67.89|65.71|263424|255120|; |ubu20|roottest-root-treeformula|117.55|129.10|; |osx 10.15|roottest-python-pythonizations|17.25|16.06|; |osx 10.15|roottest-cling|346.06|343.46|; |osx 10.15|roottest-root-hist|36.06|36.22|; |osx 10.15|roottest-root-math|49.78|52.42|; |osx 10.15|root-io-stdarray|119.32|118.73|. That PR should reduce the number of `stat` calls improving #7774. Kudos Alexander Penev (@alexander-penev).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6969:31,depend,depend,31,https://root.cern,https://github.com/root-project/root/pull/6969,3,"['depend', 'inject']","['depend', 'injects']"
Integrability,"Some of the TMVA tutorials run in parallel and rely on the same generated file. Typically, one tutorial may depend on another one that generates the file. The top level ones did not depend on each other, thus running in parallel and causing a race condition. This PR should solve this issue by making them depend on each other.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/426:108,depend,depend,108,https://root.cern,https://github.com/root-project/root/pull/426,3,['depend'],['depend']
Integrability,"Some platforms have problems (rightfully so!) in finding symbols; from libCling.so, which is dlopened with RTLD_LOCAL. libCling should; me made available to RuntimeDyld, but priority should be given to; the main binary, i.e. the ""traditional"" symbol resolution. This is; achieved by injecting libCling as a symbol source into the; DynLibManager *after* the initialization of cling::Interpreter. This fixes e.g. ROOT-10499, by resolving to the process's `cout`,; not the ""copy"" in libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6108:283,inject,injecting,283,https://root.cern,https://github.com/root-project/root/pull/6108,1,['inject'],['injecting']
Integrability,"Some speedups to targeted RooFit classes to speed up the RooFit tests such that the performance gain with the batch mode is more prominent relatively (as this PR removes unnecessary overhead that affected both the batch mode and the scalar mode). More detail in the commit messages. All changes are tested by the stressRooFit suite, including the multidimentional case in the RooNDKeysPdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10671:273,message,messages,273,https://root.cern,https://github.com/root-project/root/pull/10671,1,['message'],['messages']
Integrability,Some time ago we adjust cmake files so that when building ROOT libraries we using headers from source directories and not headers from `$ROOTSYS/include`. This makes dependencies between ROOT components more clear. I just checked $ROOTSYS/include - there are 1476 files. And going this way we will double number of files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16327#issuecomment-2346961309:166,depend,dependencies,166,https://root.cern,https://github.com/root-project/root/issues/16327#issuecomment-2346961309,1,['depend'],['dependencies']
Integrability,Some users get the `RooMinimizer::getMultiGenFcn()` to get a pointer to; the fit function object passed to minuit to do their own routines before; doing the actual Minimization. The parameters settings should better be; synchronized before returning. @cburgard,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10643:130,rout,routines,130,https://root.cern,https://github.com/root-project/root/pull/10643,2,"['rout', 'synchroniz']","['routines', 'synchronized']"
Integrability,Something funny is happening with the payload injected in cling. All but one test pass. I am debugging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3033#issuecomment-441320544:46,inject,injected,46,https://root.cern,https://github.com/root-project/root/pull/3033#issuecomment-441320544,1,['inject'],['injected']
Integrability,"Sometime happens that `zoombox == 0` and ROOT crashes.; It happens in our QtROOT interface, where event sequence could be slightly different as with normal X.; Would be nice, if patch also will go into 6.10 branch",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1061:81,interface,interface,81,https://root.cern,https://github.com/root-project/root/pull/1061,1,['interface'],['interface']
Integrability,Sometimes we set the memory of `cling::Value` using an interface which does not capture well the type information.; See https://github.com/root-project/root/pull/11252/files#r991306302,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12116:55,interface,interface,55,https://root.cern,https://github.com/root-project/root/issues/12116,1,['interface'],['interface']
Integrability,"Sorry _last thing_, I promise: can you add a line in the 6.26 release notes about this please? So we don't depend on me remembering :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7562#issuecomment-820219095:107,depend,depend,107,https://root.cern,https://github.com/root-project/root/pull/7562#issuecomment-820219095,1,['depend'],['depend']
Integrability,"Sorry for my late reply. Thank you very much for your answer. . I think using TArayD is an improvement than using double pointers, but I don't see any reason why not using a more standard std::vector. ; I understand also for the interface your preference for an API similar to the current TGraphAsymmError. Thank you for explaining the meaning of SetDimensionEY, I think the name is not super clear, I would maybe just call it SetEY. ; One comment on the passed array, I think the pointers should be passed as cont , since they will not be modified. . One other comment I have , I will not have a method to Set the error dimension. I think it will be better instead a AddError method that will increment by one the dimension and add all the point errors. This I think it will be more useful",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3452#issuecomment-558161625:229,interface,interface,229,https://root.cern,https://github.com/root-project/root/pull/3452#issuecomment-558161625,1,['interface'],['interface']
Integrability,Sorry for the 2nd messages there was a github 'snag' (was not seeing my own message nor your response). I still have to digest your response.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2483#issuecomment-414337744:18,message,messages,18,https://root.cern,https://github.com/root-project/root/pull/2483#issuecomment-414337744,2,['message'],"['message', 'messages']"
Integrability,Sorry for the late reply. ; I agree with your changes. I think also the Info message needs to be fixed. I'll do this as well. ; I'll commit this fix also in 6.12,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1183#issuecomment-349972577:77,message,message,77,https://root.cern,https://github.com/root-project/root/pull/1183#issuecomment-349972577,1,['message'],['message']
Integrability,"Sorry for the naive question, but does your example work with 6.24.06?. I have changed .rootrc, and the environment shows. `Gui.Factory: web [Local]`. as expected, but when I run your commands, no http server creation message is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9645#issuecomment-1020354280:218,message,message,218,https://root.cern,https://github.com/root-project/root/issues/9645#issuecomment-1020354280,1,['message'],['message']
Integrability,"Sorry, I forgot about the typo in the commit message :disappointed:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14473#issuecomment-1915259130:45,message,message,45,https://root.cern,https://github.com/root-project/root/pull/14473#issuecomment-1915259130,1,['message'],['message']
Integrability,"Sorry, I'm not sure how to remove merge message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5081#issuecomment-594011446:40,message,message,40,https://root.cern,https://github.com/root-project/root/pull/5081#issuecomment-594011446,1,['message'],['message']
Integrability,"Sorry, overlooked a dependency that needed changing ... should be fixed now",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10516#issuecomment-1117027552:20,depend,dependency,20,https://root.cern,https://github.com/root-project/root/pull/10516#issuecomment-1117027552,1,['depend'],['dependency']
Integrability,"Sorta. If (and it look like it here) it succeeded in writing it, it did not in a likely platform dependent manners (i.e. recording the complete set of implementation dependent class hierarchy in the currently used std library). We had a similar problem for `std::unique_ptr` which we solved by the I/O ""ignoring"", per se, the implementation and treating it memory content almost the same as a raw pointer. We could to do something similar for std::atomic but that would circumvent the thread-safety parts; so the real solution needs more thoughts :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9371#issuecomment-985367859:97,depend,dependent,97,https://root.cern,https://github.com/root-project/root/issues/9371#issuecomment-985367859,2,['depend'],['dependent']
Integrability,"Speaking of `std::pair`, it might not be related but I just now spotted an error message which wasn't present with 6.20 when calling `GetStreamerInfo()` on two of our classes:. ```; TStreamerInfo::BuildOld:0: RuntimeWarning: Cannot convert pair<int,array<vector<Belle2::TOPPDFCollection::Gaussian>,512> >::second from type: array<vector<Belle2::TOPPDFCollection::Gaussian>,512> to type: vector<Belle2::TOPPDFCollection::Gaussian>, skip element; TStreamerInfo::BuildOld:0: RuntimeWarning: Cannot convert pair<int,array<float,512> >::second from type: array<float,512> to type: array<float,512>, skip element; ```; where the members in the class are `std::map<int, array<...>>` (Gaussian is just a struct of 3 floats). Now this could be something different but it does strike me as odd because it also happens for `std::pair`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7960#issuecomment-833273551:81,message,message,81,https://root.cern,https://github.com/root-project/root/issues/7960#issuecomment-833273551,1,['message'],['message']
Integrability,"Speaking with my Gentoo hat here, but for a distro, I think there's mostly no problem (I didn't have to make any changes to the package for ROOT). However, other software will likely see failures if they try to parse the version for whatever reason. But semantic versioning is much more than the format of the version number itself, so I'm wondering if ROOT will now really control which kinds of changes will make it to patch releases such that they don't change any interface in a way that code compiled for ROOT 6.30.00 still works without recompilation with 6.30.XX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14068#issuecomment-1830057296:468,interface,interface,468,https://root.cern,https://github.com/root-project/root/issues/14068#issuecomment-1830057296,1,['interface'],['interface']
Integrability,Specifically this fixes the one described at:; https://sft.its.cern.ch/jira/browse/ROOT-9773?focusedCommentId=87824&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-87824; where the issue was that adding a single branch did not close the learning and 'worth' provoke a learning; prefill. We solved this by distinguishing at the interface level adding branch manual and adding branch as; part of the learning. We can now avoid the LearningPrefill during manual adds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3007:357,interface,interface,357,https://root.cern,https://github.com/root-project/root/pull/3007,3,['interface'],['interface']
Integrability,Speed-up CNN and RNN tutorials in TMVA (use less epochs) and add some fixes for IMT and to not use root-config in the python versions. ; Add also a dependency in the Python tutorials on the C++ to avoid conflicts with the same file name. Remove not needed veto for the no-imt case for the TMVA_CNN_Classification.C tutorial introduced in #13712,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13818:148,depend,dependency,148,https://root.cern,https://github.com/root-project/root/pull/13818,1,['depend'],['dependency']
Integrability,"Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO; * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7; * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree; * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7; * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class.; For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4767:153,depend,depends,153,https://root.cern,https://github.com/root-project/root/pull/4767,6,['depend'],"['depend', 'dependency', 'depending', 'depends']"
Integrability,"Spun off from [discussion](https://github.com/root-project/root/pull/5934/commits/6f3ec9372b011536fc314eef0835508a07d2513b#r448782416) on #5934, this PR lets us wrap move-only types in `RResult`. We add a new method `Unwrap()` to obtain the inner type by value. The caller takes ownership of the inner type, and for move-only types the `RResult` is left in an unspecified state. I decided against adding safeguards against double-moves for now because it would result in false-positive messages for types without move specializations (e.g. `return std::move(42)`). Instead, we should make clear through documentation and examples that `Unwrap()` consumes the `RResult`. . The existing const-ref access method `Get()` has been renamed `Inspect()` following Mozilla's `RResult`-like type [here](https://searchfox.org/mozilla-central/source/mfbt/Result.h#90-91). `Get()` has caused some confusion in code review and we've been looking for alternative names. . Example: ; ```cpp; auto TestMoveOnly = []() -> RResult<std::unique_ptr<int>> {; return std::make_unique<int>(1);; };; auto res = TestMoveOnly();. // Using Inspect to make a copy won't compile; // auto copy_inner = res.Inspect();. // This will compile, but we only have read-only access; const auto& copy_inner = res.Inspect();; EXPECT_EQ(1, *copy_inner);. // Instead, Unwrap is required to get ownership of the move-only type; auto move_inner = res.Unwrap();; EXPECT_EQ(1, *move_inner);; move_inner.reset();; move_inner = std::make_unique<int>(2);; EXPECT_EQ(2, *move_inner);; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5985:161,wrap,wrap,161,https://root.cern,https://github.com/root-project/root/pull/5985,2,"['message', 'wrap']","['messages', 'wrap']"
Integrability,Spurious error message when reading a `char` from a `TTreeReader<signed char>`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11837:15,message,message,15,https://root.cern,https://github.com/root-project/root/issues/11837,1,['message'],['message']
Integrability,"Starting from the `debian:sid` Docker image, create the following environment:; ```; apt update && apt dist-upgrade; apt install cmake gcc g++ git libxrootd-client-dev ninja-build python3; ```; Then clone `root.git` and configure + build with; ```; cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -Dx11=OFF ../root/; ninja; ```; Afterwards try executing `./bin/root.exe tutorials/dataframe/df103_NanoAODHiggsAnalysis.C`. It will hang and setting `XRD_LOGLEVEL=Debug` reveals:; ```; [2023-02-06 12:00:28.136048 +0000][Debug ][XRootDTransport ] [eospublic.cern.ch:1094.0] Sending authentication data; [2023-02-06 12:00:28.137346 +0000][Debug ][XRootDTransport ] [eospublic.cern.ch:1094.0] Trying to authenticate using krb5; [2023-02-06 12:00:28.137406 +0000][Debug ][XRootDTransport ] [eospublic.cern.ch:1094.0] Cannot get credentials for protocol krb5: Seckrb5: No or invalid credentials; No credentials cache found (p=xrootd/eospublic.cern.ch@CERN.CH).; [2023-02-06 12:00:28.137968 +0000][Debug ][XRootDTransport ] [eospublic.cern.ch:1094.0] Trying to authenticate using gsi; [2023-02-06 12:00:32.761097 +0000][Debug ][XRootDTransport ] [eospublic.cern.ch:1094.0] Cannot get credentials for protocol gsi: Secgsi: ErrParseBuffer: unknown CA: cannot verify server certificate: kXGS_init; ```. Instead, installing the `xrootd-client` package and running; ```; xrdcp root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod_skimmed/SMHiggsToZZTo4L.root .; ```; works just fine - the `Debug` log shows that it proceeds with `Trying to authenticate using uni` (after `Cannot get credentials for protocol gsi` was also signaled kind of immediately).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12231:831,protocol,protocol,831,https://root.cern,https://github.com/root-project/root/issues/12231,3,['protocol'],['protocol']
Integrability,Still depending on #1394,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1396#issuecomment-366982658:6,depend,depending,6,https://root.cern,https://github.com/root-project/root/pull/1396#issuecomment-366982658,1,['depend'],['depending']
Integrability,"Still needs a check whether injecting `RTLD_DEFAULT` is needed at all, or whether `ExposeHiddenSharedLibrarySymbols` and calls can be removed completely.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6108#issuecomment-667885089:28,inject,injecting,28,https://root.cern,https://github.com/root-project/root/pull/6108#issuecomment-667885089,1,['inject'],['injecting']
Integrability,"Stop, stop, stop!. It's much easier, all the code is already there! See this:. | `auto pulls = frame->pullHist();` | `auto pulls = frame->pullHist(nullptr, nullptr, true);` |; | ---- | ---- |; | ![canvas-2](https://user-images.githubusercontent.com/16205615/108338626-c2cbac80-71d6-11eb-8858-d239bf1a74ab.png) | ![canvas](https://user-images.githubusercontent.com/16205615/108338402-80a26b00-71d6-11eb-831d-6d815858616a.png) |. So,. ## Revised version of what has to happen; - Change the default arguments of [pullHist](https://root.cern.ch/doc/master/classRooPlot.html#a7d216156856479ed6b7952823d987532) and [residHist](https://root.cern.ch/doc/master/classRooPlot.html#a0d3911db1f4e0ba5cfcf9e182eea3ed0) to `average = true`.; - Update documentation to clarify that by default, the curve will be integrated over all bins.; - Mention the change in the [Release notes](https://github.com/root-project/root/blob/master/README/ReleaseNotes/v624/index.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7239#issuecomment-781222004:797,integrat,integrated,797,https://root.cern,https://github.com/root-project/root/issues/7239#issuecomment-781222004,1,['integrat'],['integrated']
Integrability,Strips the RNTuple unit test utility header and the unit test library dependencies from unnecessary baggage. Follow-up from https://github.com/root-project/root/pull/13342#discussion_r1277816509,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13351:70,depend,dependencies,70,https://root.cern,https://github.com/root-project/root/pull/13351,1,['depend'],['dependencies']
Integrability,"Suggest to squash on merge. The commit message could look like:; ```; [RF] Extend RooChebychev to arbitrary orders. Instead of hard-coding the polynomials to 7th order, a more scalable implementation; based on the recursive definition of the polynomials is used.; The computation time grows linearly with the order of the polynomials. FMA is used if supported by the underlying architecture/compiler.; Otherwise, the code falls back to normal floating point arithmetic.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3775#issuecomment-490553124:39,message,message,39,https://root.cern,https://github.com/root-project/root/pull/3775#issuecomment-490553124,1,['message'],['message']
Integrability,Super cool! The real amazing feature here is the automatic wrapping of python functions as C++ functions...and PyROOT automatically lets you go back!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3488#issuecomment-468651905:59,wrap,wrapping,59,https://root.cern,https://github.com/root-project/root/pull/3488#issuecomment-468651905,1,['wrap'],['wrapping']
Integrability,"Super helpful, @bluehood ! Two things:. - the code you profiled is using `TTreeReaderValue` which is he case that Philippe was targeting. We *also* know of a significant overhead for `TTreeReaderArray`. - the flamegraph does not show a factor 2 between `TTreeReader` and `TTree` interfaces. This suggests that the `TTreeReader` does strictly more work to get the same result, i.e. does unnecessary `TTree` / `TBranch` operations!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3216#issuecomment-455183145:279,interface,interfaces,279,https://root.cern,https://github.com/root-project/root/pull/3216#issuecomment-455183145,1,['interface'],['interfaces']
Integrability,"Super nice! The [report](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/130368/testReport/projectroot.tree.tree/test/gtest_tree_tree_test_testTOffsetGeneration/) says ""Expected messages:"" - but it's not obvious whether ""expected"" as in ""required"" or in ""optional"". Maybe use one of the latter two words to make it obvious?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5591#issuecomment-974879979:203,message,messages,203,https://root.cern,https://github.com/root-project/root/pull/5591#issuecomment-974879979,1,['message'],['messages']
Integrability,Support INTERFACE include directories in ROOT_GENERATE_DICTIONARY,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/942:8,INTERFACE,INTERFACE,8,https://root.cern,https://github.com/root-project/root/pull/942,1,['INTERFACE'],['INTERFACE']
Integrability,"Support for user defined sensitive detectors; new TVirtualMC::NIELEdep(); clean-up:; Details:; o TVirtualMCSensitiveDetector: the interface class for a user sensitive detector; o New functions in TVirtualMC:; void SetSensitiveDetector(const TString &volName, TVirtualMCSensitiveDetector *sd);; TVirtualMCSensitiveDetector *GetSensitiveDetector(const TString &volName) const;; void SetExclusiveSDScoring(Bool_t exclusiveSDScoring);; o New function in TVirtualMCApplication:; void ConstructSensitiveDetectors();; - Added new TVirtualMC::NIELEdep() function; - Removed default implementation for TVirtualMC::TrackPosition/Momentum with Float_t arguments",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1892:130,interface,interface,130,https://root.cern,https://github.com/root-project/root/pull/1892,1,['interface'],['interface']
Integrability,"Sure, I agree with this, but there may be thousands of unitless rotations/translations in a GDML file, do you expect each one to issue a warning, or to just get the message at the first encounter, telling the user in case of using cm/deg defaults to check all transformations, or use G4 defaults?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11781#issuecomment-1329323251:165,message,message,165,https://root.cern,https://github.com/root-project/root/issues/11781#issuecomment-1329323251,1,['message'],['message']
Integrability,"Sure, I will reword the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1069#issuecomment-332882619:31,message,message,31,https://root.cern,https://github.com/root-project/root/pull/1069#issuecomment-332882619,1,['message'],['message']
Integrability,"Sure, OTOH, it will be nop because the quoted issue was resolved on our side, too. The issue suggests that we have:; ```; module M1 {; umbrella ""NonExistent"" // expected-error here.; module * { export * }; }. module M2 {; umbrella ""Existent""; module * { export *}; }; ```. We always create a folder GL, so AFAICT we are not hitting this warning. Looks like the PR and the commit message were misnomers :( Fixing...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1348#issuecomment-345745506:379,message,message,379,https://root.cern,https://github.com/root-project/root/pull/1348#issuecomment-345745506,1,['message'],['message']
Integrability,"Sure, feel free to get back to me when you have a proposed fix and I'll see if it works :). I did a test locally on a clean 20.04 VM with the most minimal set of dependencies installed and the problem didn't occur there, so I'd guess it only appears with a particular configuration that I just happen to have being lucky with. If it helps, you can see the exact list of packages [here](https://github.com/MrCarroll/root-snap/blob/6925e2516007943701ce934eb5da03c7cac07fd4/snap/snapcraft.yaml#L30), which are installed on top of an LXC container of Ubuntu 20.04",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7406#issuecomment-793595045:162,depend,dependencies,162,https://root.cern,https://github.com/root-project/root/pull/7406#issuecomment-793595045,1,['depend'],['dependencies']
Integrability,"Sure, makes sense. There were also more messages from other core folders that I hadn't time yet to submit.; Should I submit more separate issues for each core subfolder, or just a single one? Or you would just take a look by running clang-tidy yourself on other core subdirectories?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411#issuecomment-794215305:40,message,messages,40,https://root.cern,https://github.com/root-project/root/issues/7411#issuecomment-794215305,1,['message'],['messages']
Integrability,"Sure. I will look at it. Get Outlook for iOS<https://aka.ms/o0ukef>; ________________________________; From: Philippe Canal <notifications@github.com>; Sent: Saturday, December 16, 2017 4:33:34 AM; To: root-project/root; Cc: Zhe Zhang; Mention; Subject: Re: [root-project/root] Use TTaskGroup interface to unzip baskets in parallel. (#1010). github claims there is now a conflict in TTree. Can you rebase on master and update the branch?. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/root-project/root/pull/1010#issuecomment-352105016>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AFNlv2SlkSXAPbNMZplkfYbezPn-qxX4ks5tAteegaJpZM4PbhS5>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1010#issuecomment-352105655:293,interface,interface,293,https://root.cern,https://github.com/root-project/root/pull/1010#issuecomment-352105655,1,['interface'],['interface']
Integrability,Synchronize commit 52e1488840 to the monorepo.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15001:0,Synchroniz,Synchronize,0,https://root.cern,https://github.com/root-project/root/pull/15001,1,['Synchroniz'],['Synchronize']
Integrability,Synchronize construction of TApplication,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/35:0,Synchroniz,Synchronize,0,https://root.cern,https://github.com/root-project/root/pull/35,1,['Synchroniz'],['Synchronize']
Integrability,Synchronizes with this upstream commit and directly makes use of the new; API to avoid a patch:; https://github.com/wlav/CPyCppyy/commit/993b17bce2f43516a85931b40035ac7252e2ab7e,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15788:0,Synchroniz,Synchronizes,0,https://root.cern,https://github.com/root-project/root/pull/15788,1,['Synchroniz'],['Synchronizes']
Integrability,T-prefix/src && /usr/local/bin/cmake -P /mnt/build/workspace/root-pullrequests-build/build/VDT-prefix/src/VDT-stamp/VDT-download-Release.cmake && /usr/local/bin/cmake -E touch /mnt/build/workspace/root-pullrequests-build/build/VDT-prefix/src/VDT-stamp/VDT-download ; - CMake Error at VDT-stamp/VDT-download-Release.cmake:16 (message): ; - FAILED: cd /mnt/build/workspace/root-pullrequests-build/build/TBB-prefix/src && /usr/local/bin/cmake -P /mnt/build/workspace/root-pullrequests-build/build/TBB-prefix/src/TBB-stamp/TBB-download-Release.cmake && /usr/local/bin/cmake -E touch /mnt/build/workspace/root-pullrequests-build/build/TBB-prefix/src/TBB-stamp/TBB-download ; - CMake Error at TBB-stamp/TBB-download-Release.cmake:16 (message): ; - FAILED: cd /mnt/build/workspace/root-pullrequests-build/build/XROOTD-prefix/src && /usr/local/bin/cmake -P /mnt/build/workspace/root-pullrequests-build/build/XROOTD-prefix/src/XROOTD-stamp/XROOTD-download-Release.cmake && /usr/local/bin/cmake -E touch /mnt/build/workspace/root-pullrequests-build/build/XROOTD-prefix/src/XROOTD-stamp/XROOTD-download ; - CMake Error at XROOTD-stamp/XROOTD-download-Release.cmake:16 (message): ; - FAILED: cd /mnt/build/workspace/root-pullrequests-build/build/VC-prefix/src && /usr/local/bin/cmake -P /mnt/build/workspace/root-pullrequests-build/build/VC-prefix/src/VC-stamp/VC-download-Release.cmake && /usr/local/bin/cmake -E touch /mnt/build/workspace/root-pullrequests-build/build/VC-prefix/src/VC-stamp/VC-download ; - CMake Error at VC-stamp/VC-download-Release.cmake:16 (message): ; - FAILED: cd /mnt/build/workspace/root-pullrequests-build/build/VECCORE-prefix/src && /usr/local/bin/cmake -P /mnt/build/workspace/root-pullrequests-build/build/VECCORE-prefix/src/VECCORE-stamp/VECCORE-download-Release.cmake && /usr/local/bin/cmake -E touch /mnt/build/workspace/root-pullrequests-build/build/VECCORE-prefix/src/VECCORE-stamp/VECCORE-download ; - CMake Error at VECCORE-stamp/VECCORE-download-Release.cmake:16 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4097#issuecomment-512765959:1374,message,message,1374,https://root.cern,https://github.com/root-project/root/pull/4097#issuecomment-512765959,3,['message'],['message']
Integrability,T14:59:27.382Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/tree/dataframe/test/datasource_root.cxx:74:12: warning: 'RRootDS' is deprecated: will be removed in ROOT v6.24: RRootDS will be removed from the public namespace. Please use standard RDataFrame constructors and interfaces instead [-Wdeprecated-declarations] ; - [2020-04-30T14:59:27.382Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/tree/dataframe/test/datasource_root.cxx:94:12: warning: 'RRootDS' is deprecated: will be removed in ROOT v6.24: RRootDS will be removed from the public namespace. Please use standard RDataFrame constructors and interfaces instead [-Wdeprecated-declarations] ; - [2020-04-30T14:59:27.382Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/tree/dataframe/test/datasource_root.cxx:124:41: warning: 'RRootDS' is deprecated: will be removed in ROOT v6.24: RRootDS will be removed from the public namespace. Please use standard RDataFrame constructors and interfaces instead [-Wdeprecated-declarations] ; - [2020-04-30T14:59:27.382Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/tree/dataframe/test/datasource_root.cxx:137:41: warning: 'RRootDS' is deprecated: will be removed in ROOT v6.24: RRootDS will be removed from the public namespace. Please use standard RDataFrame constructors and interfaces instead [-Wdeprecated-declarations] ; - [2020-04-30T14:59:27.382Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/tree/dataframe/test/datasource_root.cxx:155:41: warning: 'RRootDS' is deprecated: will be removed in ROOT v6.24: RRootDS will be removed from the public namespace. Please use standard RDataFrame constructors and interfaces instead [-Wdeprecated-declarations] ; - [2020-04-30T14:59:27.382Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/tree/dataframe/test/datasource_root.cxx:170:41: warning: 'RRootDS' is deprecated: will be removed in ROOT v6.24: RRootDS will be removed from the public namespace. Please ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5516#issuecomment-621922856:2108,interface,interfaces,2108,https://root.cern,https://github.com/root-project/root/pull/5516#issuecomment-621922856,1,['interface'],['interfaces']
Integrability,"T::RDF::RRootDS::RRootDS(std::string_view, std::string_view)’ is deprecated: will be removed in ROOT v6.24: RRootDS will be removed from the public namespace. Please use standard RDataFrame constructors and interfaces instead [-Wdeprecated-declarations] ; - [2020-04-30T14:17:12.054Z] /build/workspace/root-pullrequests-build/root/tree/dataframe/test/datasource_root.cxx:56:34: warning: ‘ROOT::RDF::RRootDS::RRootDS(std::string_view, std::string_view)’ is deprecated: will be removed in ROOT v6.24: RRootDS will be removed from the public namespace. Please use standard RDataFrame constructors and interfaces instead [-Wdeprecated-declarations] ; - [2020-04-30T14:17:12.054Z] /build/workspace/root-pullrequests-build/root/tree/dataframe/test/datasource_root.cxx:74:34: warning: ‘ROOT::RDF::RRootDS::RRootDS(std::string_view, std::string_view)’ is deprecated: will be removed in ROOT v6.24: RRootDS will be removed from the public namespace. Please use standard RDataFrame constructors and interfaces instead [-Wdeprecated-declarations] ; - [2020-04-30T14:17:12.054Z] /build/workspace/root-pullrequests-build/root/tree/dataframe/test/datasource_root.cxx:94:34: warning: ‘ROOT::RDF::RRootDS::RRootDS(std::string_view, std::string_view)’ is deprecated: will be removed in ROOT v6.24: RRootDS will be removed from the public namespace. Please use standard RDataFrame constructors and interfaces instead [-Wdeprecated-declarations] ; - [2020-04-30T14:17:12.054Z] /build/workspace/root-pullrequests-build/root/tree/dataframe/test/datasource_root.cxx:124:67: warning: ‘ROOT::RDF::RRootDS::RRootDS(std::string_view, std::string_view)’ is deprecated: will be removed in ROOT v6.24: RRootDS will be removed from the public namespace. Please use standard RDataFrame constructors and interfaces instead [-Wdeprecated-declarations] ; - [2020-04-30T14:17:12.054Z] /build/workspace/root-pullrequests-build/root/tree/dataframe/test/datasource_root.cxx:137:67: warning: ‘ROOT::RDF::RRootDS::RRootDS(std::string_view, s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5516#issuecomment-621886081:1526,interface,interfaces,1526,https://root.cern,https://github.com/root-project/root/pull/5516#issuecomment-621886081,1,['interface'],['interfaces']
Integrability,TBufferFile: remove stray quote in error message,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10099:41,message,message,41,https://root.cern,https://github.com/root-project/root/pull/10099,1,['message'],['message']
Integrability,"TCP_NODELAY, (char*)val, &optlen) == -1) {; | ^~~~~~~; | |; | int*; In file included from /builddir/root-6.24.06/core/unix/src/TUnixSystem.cxx:101:; /usr/include/sys/socket.h:348:50: note: initializing argument 5 of 'int getsockopt(int, int, int, void*, socklen_t*)'; 348 | int getsockopt (int, int, int, void *__restrict, socklen_t *__restrict);; | ^~~~~~~~~~~~~~~~~~~~~; ```; is the next error. The problem stems from the fact, that the condition for using `socklen_t` is (among others) glibc:; ```c; #if (defined(R__AIX) && !defined(_AIX43)) || \; (defined(R__SUNGCC3) && !defined(__arch64__)); # define USE_SIZE_T; #elif defined(R__GLIBC) || defined(R__FBSD) || \; (defined(R__SUNGCC3) && defined(__arch64__)) || \; defined(R__OBSD) || defined(MAC_OS_X_VERSION_10_4) || \; (defined(R__AIX) && defined(_AIX43)) || \; (defined(R__SOLARIS) && defined(_SOCKLEN_T)); # define USE_SOCKLEN_T; #endif; ```; [Here](https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xsh_chap02.html#tag_22_02_10_06) is some context:; > All socklen_t types were originally (in BSD UNIX) of type int. During the development of POSIX.1-2017, it was decided to change all buffer lengths to size_t, which appears at face value to make sense. When dual mode 32/64-bit systems came along, this choice unnecessarily complicated system interfaces because size_t (with long) was a different size under ILP32 and LP64 models. Reverting to int would have happened except that some implementations had already shipped 64-bit-only interfaces. The compromise was a type which could be defined to be any size by the implementation: socklen_t. I am not sure how to approach this, because the standardization of `socklen_t` seems fairly recent, but in the long run, avoiding this whole types dance altogether and simply using explicit `socklen_t` seems to make most sense and will make for a simpler code. I will appreciate any comments, especially regarding any compatibility issues this might cause - else I will add this to the PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9253#issuecomment-963600314:6865,interface,interfaces,6865,https://root.cern,https://github.com/root-project/root/issues/9253#issuecomment-963600314,2,['interface'],['interfaces']
Integrability,"TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35; 1148: #72 0x7f7b0e2265db in TBufferJSON::StoreObject(void const*, TClass const*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:708:7; 1148: #73 0x7f7ad3c6329b in ROOT::Experimental::RCanvasPainter::CreateSnapshot[abi:cxx11](ROOT::Experimental::RDrawable::RDisplayContext&) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:739:20; 1148: #74 0x7f7ad3c669ad in ROOT::Experimental::RCanvasPainter::ProduceBatchOutput(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:461:20; 1148: #75 0x7f7afc354443 in ROOT::Experimental::RCanvas::SaveAs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/jhahnfel/ROOT/src/graf2d/gpadv7/src/RCanvas.cxx:176:21; 1148: #76 0x7f7afeafe017 (<unknown module>); 1148: #77 0x7f7b121bc8c9 in WrapperCall(long, unsigned long, void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13; 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9; 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1; 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19; 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29; 1148: #82 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/b",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11629:12525,Wrap,WrapperCall,12525,https://root.cern,https://github.com/root-project/root/issues/11629,1,['Wrap'],['WrapperCall']
Integrability,TClassEdit::ResolveTypedef add support for unknown::wrapper<int>,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4471:52,wrap,wrapper,52,https://root.cern,https://github.com/root-project/root/pull/4471,1,['wrap'],['wrapper']
Integrability,"TCling::Load reloads the library the `system` optional parameter is false. If the library is not marked as `system` TCling reloads it if was alread loaded. That is, it dlcloses and dlopens the library instead of doing nothing. There is no point in reloading our library dependencies. The regression was introduced in 9b6df8c originated from https://github.com/root-project/root/commit/e649f59e3160f829bc1a4813f8aa73bdd16b6cff",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5485:270,depend,dependencies,270,https://root.cern,https://github.com/root-project/root/pull/5485,1,['depend'],['dependencies']
Integrability,"TClingCallFunc provides an interface between compiled and interpreted code. That is, we can create at compile time a function to be called by the interpreter and get back its result into compiled code. To do that we require connecting to a function declaration available in the interpreter and calling it by setting input arguments. However, the input arguments are set with the SetArg which can resolve to a type and argument representation different from the signature of the interpreter function we will call. This is practically not a problem integral types because their representation is mostly the same. The problem becomes visible when we call SetArg with a `double` and the function signature expects a `float`. That works out of the box when the compiler can see both ends and insert proper representation casts. Unfortunately, when crossing the compiler/interpreter boundary we use `void*` and that information is lost. This patch adds some representation adjustments so that the compiled code (SetArg) and the interpreted code (CallFunc) can agree on the memory representation before calling. Fixes #14405",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14853:27,interface,interface,27,https://root.cern,https://github.com/root-project/root/pull/14853,1,['interface'],['interface']
Integrability,"TClingCallFunc provides an interface between compiled and interpreted code. That is, we can create at compile time a function to be called by the interpreter and get back its result into compiled code. To do that we require connecting to a function declaration available in the interpreter and calling it by setting input arguments. However, the input arguments are set with the SetArg which can resolve to a type and argument representation different from the signature of the interpreter function we will call. This is practically not a problem integral types because their representation is mostly the same. The problem becomes visible when we call SetArg with a double and the function signature expects a float. That works out of the box when the compiler can see both ends and insert proper representation casts. Unfortunately, when crossing the compiler/interpreter boundary we use void* and that information is lost. This patch adds some representation adjustments so that the compiled code (SetArg) and the interpreted code (CallFunc) can agree on the memory representation before calling. Fixes https://github.com/root-project/root/issues/14405",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14888:27,interface,interface,27,https://root.cern,https://github.com/root-project/root/pull/14888,1,['interface'],['interface']
Integrability,TContextMenuImp.h TControlBarImp.h TDatime.h TDirectory.h TEnv.h TError.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TGuiFactory.h TInetAddress.h TInspectorImp.h TMD5.h TMacro.h TMathBase.h TMemberInspector.h TMessageHandler.h TNamed.h TObjString.h TObject.h TObjectSpy.h TPRegexp.h TParameter.h TPluginManager.h TPoint.h TProcessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQObject.h TROOT.h TRedirectOutputGuard.h TRef.h TRefCnt.h TRegexp.h TRemoteObject.h TRootIOCtor.h TStopwatch.h TStorage.h TString.h TStringLong.h TStyle.h TSysEvtHandler.h TSystem.h TSystemDirectory.h TSystemFile.h TTask.h TThreadSlots.h TTime.h TTimeStamp.h TTimer.h TUUID.h TUri.h TUrl.h TVersionCheck.h TVirtualAuth.h TVirtualFFT.h TVirtualGL.h TVirtualMonitoring.h TVirtualMutex.h TVirtualPS.h TVirtualPad.h TVirtualPadEditor.h TVirtualPadPainter.h TVirtualPerfStats.h TVirtualQConnection.h TVirtualRWMutex.h TVirtualTableInterface.h TVirtualViewer3D.h TVirtualX.h Rtypes.h GuiTypes.h MessageTypes.h KeySymbols.h Buttons.h strlcpy.h snprintf.h TArray.h TArrayC.h TArrayD.h TArrayF.h TArrayI.h TArrayL.h TArrayL64.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ROOT/TSeq.hxx ESTLType.h RStringView.h TClassEdit.h ROOT/RArrayView.hxx ROOT/RMakeUnique.hxx ROOT/RNotFn.hxx ROOT/RStringView.hxx ROOT/TypeTraits.hxx ROOT/rhysd_array_view.hxx TUnixSystem.h TClingRuntime.h root_std_complex.h TBaseClass.h TClass.h TClassGenerator.h TClassMenuItem.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnum.h TEnumConstant.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctionTe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1632#issuecomment-366989771:1997,Message,MessageTypes,1997,https://root.cern,https://github.com/root-project/root/pull/1632#issuecomment-366989771,1,['Message'],['MessageTypes']
Integrability,TDavixFile: add support for cross-protocol metalinks,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1352:34,protocol,protocol,34,https://root.cern,https://github.com/root-project/root/pull/1352,1,['protocol'],['protocol']
Integrability,"TFile's ctor's error message should point to TFile::Open when filename contains ""://""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10039:21,message,message,21,https://root.cern,https://github.com/root-project/root/issues/10039,1,['message'],['message']
Integrability,TFormula already supports gradient calculation using clad. This commit extends that support for hessian calculation. Thus the hessian generation is done by clad and TFormula wraps it in a trampoline function.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8371:174,wrap,wraps,174,https://root.cern,https://github.com/root-project/root/pull/8371,1,['wrap'],['wraps']
Integrability,"TFormula generates a function on the fly along with a trampoline function; which ensures uniform calling of it. Once compiled, the function can be; called on different data and multiple times. We extend this concept by computing the gradient of the nominated function.; The gradient generation is done by clad and TFormula wraps it in a similar; easy-to-call trampoline function. Patch by Aleksandr Efremov(@efremale) and me!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2745:323,wrap,wraps,323,https://root.cern,https://github.com/root-project/root/pull/2745,1,['wrap'],['wraps']
Integrability,"TIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #6 ROOT::Experimental::RClassField::RClassField (this=0x7ffc9edb22f0, fieldName=..., className=..., classp=<optimized out>) at /usr/include/c++/13/bits/new_allocator.h:88; #7 0x00007f3e5fcafc66 in ROOT::Experimental::RClassField::RClassField (this=this; entry=0x7ffc9edb22f0, fieldName=""klass"", className=""8G325Y212U"") at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RField.cxx:841; #8 0x0000558efca002c2 in ROOT::Experimental::RField<TestEBO, void>::RField (name=..., this=0x7ffc9edb22f0) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/inc/ROOT/RField.hxx:643; #9 RNTuple_TClassEBO_Test::TestBody (this=<optimized out>) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_types.cxx:387; #10 0x00007f3e5fc02eb3 in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) [clone .constprop.0] () from /lib64/libgtest.so.1.13.0; #11 0x00007f3e5fbef17e in testing::Test::Run() () from /lib64/libgtest.so.1.13.0; #12 0x00007f3e5fbef385 in testing::TestInfo::Run() () from /lib64/libgtest.so.1.13.0; #13 0x00007f3e5fbef4d7 in testing::TestSuite::Run() () from /lib64/libgtest.so.1.13.0; #14 0x00007f3e5fbfc090 in testing::internal::UnitTestImpl::RunAllTests() () from /lib64/libgtest.so.1.13.0; #15 0x00007f3e5fbfae98 in testing::UnitTest::Run() () from /lib64/libgtest.so.1.13.0; #16 0x00007f3e5fbac116 in main () from /lib64/libgtest_main.so.1.13.0; #17 0x00007f3e5f048b4a in __libc_start_call_main () from /lib64/libc.so.6; #18 0x00007f3e5f048c0b in __libc_start_main_impl () from /lib64/libc.so.6; #19 0x0000558efc9fc045 in _start (); ===========================================================; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 139; ~~~",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12428:11432,message,message,11432,https://root.cern,https://github.com/root-project/root/issues/12428,1,['message'],['message']
Integrability,"TMVA, fix warning messages",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/193:18,message,messages,18,https://root.cern,https://github.com/root-project/root/pull/193,1,['message'],['messages']
Integrability,"TMath.cxx:3186:51: error: ‘x’ was not declared in this scope ; - /mnt/build/workspace/root-pullrequests-build/root/math/mathcore/src/TMath.cxx:3186:63: error: expected primary-expression before ‘mean’ ; - /mnt/build/workspace/root-pullrequests-build/root/math/mathcore/src/TMath.cxx:3186:78: error: expected primary-expression before ‘gamma’ ; - /mnt/build/workspace/root-pullrequests-build/root/math/mathcore/src/TMath.cxx:3201:34: error: ‘ROOT::Double_v TMath::Gaus’ redeclared as different kind of symbol ; - /mnt/build/workspace/root-pullrequests-build/root/math/mathcore/src/TMath.cxx:3201:34: error: ‘Double_v’ is not a member of ‘TMath::ROOT’ ; - /mnt/build/workspace/root-pullrequests-build/root/math/mathcore/src/TMath.cxx:3201:44: error: ‘x’ was not declared in this scope . And 30 more. ### Warnings:; - /mnt/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:686:14: warning: ‘char* strncpy(char*, const char*, size_t)’ specified bound depends on the length of the source argument [-Wstringop-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:5203:14: warning: ‘char* strncpy(char*, const char*, size_t)’ specified bound depends on the length of the source argument [-Wstringop-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:4757:26: warning: ‘char* strncpy(char*, const char*, size_t)’ output may be truncated copying 10 bytes from a string of length 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-400583007:1808,depend,depends,1808,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-400583007,1,['depend'],['depends']
Integrability,"TMath.cxx:3296:25: error: expected primary-expression before ‘&gt;’ token ; - /mnt/build/workspace/root-pullrequests-build/root/math/mathcore/src/TMath.cxx:3296:27: error: ‘mask2’ was not declared in this scope ; - /mnt/build/workspace/root-pullrequests-build/root/math/mathcore/src/TMath.cxx:3297:25: error: expected primary-expression before ‘&gt;’ token ; - /mnt/build/workspace/root-pullrequests-build/root/math/mathcore/src/TMath.cxx:3297:27: error: ‘mask3’ was not declared in this scope ; - /mnt/build/workspace/root-pullrequests-build/root/math/mathcore/src/TMath.cxx:3307:4: error: ‘MaskedAssign’ was not declared in this scope ; - /mnt/build/workspace/root-pullrequests-build/root/math/mathcore/src/TMath.cxx:3307:33: error: expected primary-expression before ‘&gt;’ token . And 62 more. ### Warnings:; - /mnt/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:686:14: warning: ‘char* strncpy(char*, const char*, size_t)’ specified bound depends on the length of the source argument [-Wstringop-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:5203:14: warning: ‘char* strncpy(char*, const char*, size_t)’ specified bound depends on the length of the source argument [-Wstringop-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:4757:26: warning: ‘char* strncpy(char*, const char*, size_t)’ output may be truncated copying 10 bytes from a string of length 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-401591340:1734,depend,depends,1734,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-401591340,1,['depend'],['depends']
Integrability,"TROOT.cxx:465); ==92602== by 0x441EDD7: TApplication::TApplication(char const*, int*, char**, void*, int) (TApplication.cxx:153); ==92602== by 0x40DC873: TRint::TRint(char const*, int*, char**, void*, int, bool) (TRint.cxx:147); ==92602== ; ==92602== Conditional jump or move depends on uninitialised value(s); ==92602== at 0x40E0FA8: TStorage::UpdateIsOnHeap(unsigned int const volatile&, unsigned int volatile&) (TStorage.h:132); ==92602== by 0x40E11A3: TObject::TObject() (TObject.h:245); ==92602== by 0x44FFCCF: TUrl::TUrl(char const*, bool) (TUrl.cxx:76); ==92602== by 0x4420F6B: TApplication::GetOptions(int*, char**) (TApplication.cxx:483); ==92602== by 0x441EF9B: TApplication::TApplication(char const*, int*, char**, void*, int) (TApplication.cxx:177); ==92602== by 0x40DC873: TRint::TRint(char const*, int*, char**, void*, int, bool) (TRint.cxx:147); ==92602== by 0x100011BF: main (rmain.cxx:80); ==92602== ; ==92602== Conditional jump or move depends on uninitialised value(s); ==92602== at 0x40E0FA8: TStorage::UpdateIsOnHeap(unsigned int const volatile&, unsigned int volatile&) (TStorage.h:132); ==92602== by 0x40E11A3: TObject::TObject() (TObject.h:245); ==92602== by 0x4438EB3: TNamed::TNamed() (TNamed.h:36); ==92602== by 0x44526DF: TDirectory::TDirectory() (TDirectory.cxx:47); ==92602== by 0x5FE37F3: TDirectoryFile::TDirectoryFile() (TDirectoryFile.cxx:61); ==92602== by 0x6005D3F: TFile::TFile(char const*, char const*, char const*, int) (TFile.cxx:317); ==92602== by 0x6066567: TMemFile::TMemFile(char const*, TMemFile::ZeroCopyView_t const&) (TMemFile.cxx:114); ==92602== by 0x1134EF0F: TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (TCling.cxx:1857); ==92602== by 0x11351253: TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9297#issuecomment-979895686:5887,depend,depends,5887,https://root.cern,https://github.com/root-project/root/issues/9297#issuecomment-979895686,1,['depend'],['depends']
Integrability,TSystem interface improvements,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4874:8,interface,interface,8,https://root.cern,https://github.com/root-project/root/pull/4874,1,['interface'],['interface']
Integrability,TWebCanvas - use TVirtualPS interface for custom objects drawings,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2862:28,interface,interface,28,https://root.cern,https://github.com/root-project/root/pull/2862,1,['interface'],['interface']
Integrability,"Take a model with completely independent identical observables that have both a signal and a background component:; ```; p(x,y) = p(x) * p(y) = (s(x) + b(x)) * (s(y) + b(y)) ; ```; It should be equivalent to define this as a sum of products:; ```; p(x,y) = s(x,y) + b(x,y) = s(x) * s(y) + b(x) * b(y); ```; All sums in these expressions are normalized sums. However, in RooFit, you get different probabilities depending on how you define the model, either as a product of sums or sum of products. The case of sum of products seems to be wrong, as it doesn't factorize correctly. This can be reproduced with the following script:. ```C++; using namespace RooFit;. // Create observables; RooRealVar x(""x"", ""x"", -5, 5);; RooRealVar y(""y"", ""y"", -5, 5);. // Gaussian signal in x and y; RooGaussian gx(""gx"", ""gx"", x, RooConst(0), RooConst(1));; RooGaussian gy(""gy"", ""gy"", y, RooConst(0), RooConst(1));. // Polynomial background in x and y; RooPolynomial px(""px"", ""px"", x, RooArgSet(-0.1, 0.004));; RooPolynomial py(""py"", ""py"", y, RooArgSet(-0.1, 0.004));. // Normalization sets to try for model evaluation; RooArgSet nsetx{x};; RooArgSet nsety{y};; RooArgSet nsetxy{x, y};. {; // Formulate model as a product of sums; RooAddPdf modelx(""modelx"", ""modelx"", {gx, px}, RooConst(0.1));; RooAddPdf modely(""modely"", ""modely"", {gy, py}, RooConst(0.1));; RooProdPdf model(""model"", ""model"", {modelx, modely});. std::cout << ""Product of sums:"" << std::endl;. std::cout << ""p(x) = "" << modelx.getVal(nsetx) << std::endl;; std::cout << ""p(y) = "" << modely.getVal(nsety) << std::endl;; std::cout << ""p(x) * p(y) = "" << model.getVal(nsetxy) << std::endl;; std::cout << std::endl;; }. {; // Formulate model as a sum of products; RooProdPdf sig(""sig"", ""sig"", {gx, gy});; RooProdPdf bkg(""bkg"", ""bkg"", {px, py});; RooAddPdf model(""model"", ""model"", {sig, bkg}, RooConst(0.1));. std::cout << ""Sum of products:"" << std::endl;. std::cout << ""p(x) = "" << model.getVal(nsetx) << std::endl;; std::cout << ""p(y) = "" << model.getVal(ns",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11177:410,depend,depending,410,https://root.cern,https://github.com/root-project/root/issues/11177,1,['depend'],['depending']
Integrability,"Talking again about the proposed interface:; ```c++; auto graph = new TGraph({0, 1, 2}, {1, 2, 3);; ```; I mean it looks nice and is probably useful for unit tests, but is it really helping our users?. If you have data that you want to plot, when do you hardcode it in initializer lists instead of reading it from files or getting it programmatically as the output of your analysis?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7151#issuecomment-2080462521:33,interface,interface,33,https://root.cern,https://github.com/root-project/root/issues/7151#issuecomment-2080462521,1,['interface'],['interface']
Integrability,Template WrappedMultiTF1 keeping backwards compatibility and adding a templated std::function interface for TF1. This is the first in a series of PR for the integration of the vectorization + parallelization of the fit in ROOT.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/346:94,interface,interface,94,https://root.cern,https://github.com/root-project/root/pull/346,2,"['integrat', 'interface']","['integration', 'interface']"
Integrability,Temporary revert of new discovery routine,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3733:34,rout,routine,34,https://root.cern,https://github.com/root-project/root/pull/3733,1,['rout'],['routine']
Integrability,Test depending on histfactory are run even if histfactory is not build,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6911:5,depend,depending,5,https://root.cern,https://github.com/root-project/root/issues/6911,1,['depend'],['depending']
Integrability,Test error/warning/info messages in RDF tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5845:24,message,messages,24,https://root.cern,https://github.com/root-project/root/pull/5845,1,['message'],['messages']
Integrability,"Test failed due to failure of uploading test results to cdash, it seems:; ```; 05:58:48 100% tests passed, 0 tests failed out of 1038; ```. Two minutes later:. ```; 06:00:58 Error message was: Operation too slow. Less than 1 bytes/sec transferred the last 120 seconds; 06:00:58 Problems when submitting via HTTP; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1010#issuecomment-365151906:180,message,message,180,https://root.cern,https://github.com/root-project/root/pull/1010#issuecomment-365151906,1,['message'],['message']
Integrability,"Testing `./tree/dataframe/test/dataframe_simple --gtest_filter=Seq/RDFSimpleTests.FillWithCustomClassJitted/0`, the result with `git-bisect` is:; ```; 7fa32c7a727b0a24fdbd90304b4f7ab3460b2b94 is the first bad commit; commit 7fa32c7a727b0a24fdbd90304b4f7ab3460b2b94; Author: Enrico Guiraud <enrico.guiraud@cern.ch>; Date: Mon Jan 24 18:42:07 2022 +0100. [DF] Fix jitted actions that depend on systematic variations. For this to work we need RJittedAction to propagate dependencies; on systematic variations to VariationsFor. tree/dataframe/inc/ROOT/RDF/RInterface.hxx | 3 ++-; tree/dataframe/inc/ROOT/RDF/RJittedAction.hxx | 3 ++-; tree/dataframe/src/RJittedAction.cxx | 7 ++++++-; tree/dataframe/test/dataframe_vary.cxx | 12 ++++++++++++; 4 files changed, 22 insertions(+), 3 deletions(-); ```. Indeed, commit 7fa32c7a727b0a24fdbd90304b4f7ab3460b2b94 crashes while the parent a2f0788202cca41393bcb68f58970428fd7e18da works. Edit: I think I have a patch...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10007#issuecomment-1056810851:382,depend,depend,382,https://root.cern,https://github.com/root-project/root/issues/10007#issuecomment-1056810851,2,['depend'],"['depend', 'dependencies']"
Integrability,"Tests has been augmented and refactored to avoid code duplication. There's one issue that I'm not sure how to solve: random access iterators are required to support the forms `it + n` as well as `n + it` (where `n` in our case is of type `std::ptrdiff_t`. The second form requires the definition of a free-standing `operator+`, which I implemented this way:. ```c++; template <typename T>; auto operator+(std::ptrdiff_t n, const typename TTreeReaderArray<T>::iterator &it); -> decltype(it + n); {; return it + n;; }; ```. Problem: in the definition above `T` cannot be deduced from the dependent type `iterator`, so this overload is never considered. Any idea how to work around this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1259#issuecomment-343112197:586,depend,dependent,586,https://root.cern,https://github.com/root-project/root/pull/1259#issuecomment-343112197,1,['depend'],['dependent']
Integrability,"Thank you @eguiraud for the comment, I have added your main points to the commit message. I agree there are still potential performance penalties in DistRDF (although much less so than it used to be) and for now we can remove this dead part of the codebase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13232#issuecomment-1632022809:81,message,message,81,https://root.cern,https://github.com/root-project/root/pull/13232#issuecomment-1632022809,1,['message'],['message']
Integrability,"Thank you @guitargeek and @wlav for the quick and informative responses. These are totally understandable difficulties, and I'm looking forward to the future!. Unfortunately the usage of templates is quite baked-in for this library, which tries to allow users to write their own C++ classes and input (but also retrieve) them in a data analysis workflow. Ultimately, however, I guess this is not a complete showstopper as I could just resort to ```cppyy.cppdef()``` where things work, and write a manual wrapper Python interface around it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15062#issuecomment-2026813311:504,wrap,wrapper,504,https://root.cern,https://github.com/root-project/root/issues/15062#issuecomment-2026813311,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"Thank you @vepadulano !. I'm happy to do another pass, but I'd rather do so after the tests are added: it takes me around half a day of work to go through a PR this size, I'd like to reduce the amount of passes... :sweat_smile: . (the warnings are real and the test failure is because of an expected error message that needs to be updated in the test -- or the new message needs to match the old one)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12363#issuecomment-1581188983:306,message,message,306,https://root.cern,https://github.com/root-project/root/pull/12363#issuecomment-1581188983,2,['message'],['message']
Integrability,"Thank you for the PR! I want to try it out on my Mac, but I never get to that same error actually, I am greeted by this one much before that (and multiple times); ```; CMake Error in core/clingutils/CMakeLists.txt:; The custom command generating. /Users/vpadulan/Programs/rootproject/rootbuild/gh-14595-minimal/core/clingutils/dummy.cxx. is attached to multiple targets:. vectorDict; listDict; forward_listDict; dequeDict; mapDict; map2Dict; unordered_mapDict; multimapDict; multimap2Dict; unordered_multimapDict; setDict; unordered_setDict; multisetDict; unordered_multisetDict; complexDict; valarrayDict. but none of these is a common dependency of the other(s). This is not; allowed by the Xcode ""new build system"".; ```. Did you not get this error as well? That would be surprising",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14595#issuecomment-1932346175:637,depend,dependency,637,https://root.cern,https://github.com/root-project/root/issues/14595#issuecomment-1932346175,1,['depend'],['dependency']
Integrability,"Thank you for the suggestion, @Dr15Jones . I think that works nicely. I like that we can now exchange the mechanics of the token without changing the interface. We'll use the model ID as a safety check. This PR now include a patch to the RNTupleModel id management.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14531#issuecomment-1933863300:150,interface,interface,150,https://root.cern,https://github.com/root-project/root/pull/14531#issuecomment-1933863300,1,['interface'],['interface']
Integrability,Thank you for the workaround. . But with this we ignore all warnings. As this geometry warning is anticipated shouldn't their messages console log level be reduced to info or debug?. ```js; js/modules/gpad/RPadPainter.mjs:410: console.warn(`Hide canvas while geometry too small w=${rect.width} h=${rect.height}`);; js/modules/gpad/TPadPainter.mjs:601: console.warn(`Hide canvas while geometry too small w=${rect.width} h=${rect.height}`);; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14300#issuecomment-1878315618:126,message,messages,126,https://root.cern,https://github.com/root-project/root/issues/14300#issuecomment-1878315618,1,['message'],['messages']
Integrability,"Thank you very much @langenbruch for the tutorial and the PR updates! I will take it from here, integrating the tutorial and maybe writing some tests, and then I'll merge the PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14751#issuecomment-1986092078:96,integrat,integrating,96,https://root.cern,https://github.com/root-project/root/pull/14751#issuecomment-1986092078,1,['integrat'],['integrating']
Integrability,"Thank you very much for this, this is obviously much nicer than our horrible solution and highly appreciated. I cannot judge everything since I'm not familiar enough with these details. One thing different to our hack which I don't see here is the name of the file. We set `fName` to a hardcoded constant (empty didn't work) so that we're not dependent on the name of the file on creation. (for example I can create a file with `mkstemp()`, write and then rename and I will get the same checksum as writing directly to the final name). At the very least it would be necessary to be able to construct the file with the same name in different directories and still obtain the checksum but I would prefer if the filename doesn't have any affect on the checksum. . I would be fine if I can set the name after creating the file but it looks to me that the first key with the file metadata is written right in the beginning and a later change might not have the desired effect?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4253#issuecomment-524211456:343,depend,dependent,343,https://root.cern,https://github.com/root-project/root/pull/4253#issuecomment-524211456,1,['depend'],['dependent']
Integrability,"Thank you!; However, I've heard that new ROOT drops support for Python 2.; So I'm not sure whether this is the way I wanted. But still it is good to; compile ROOT with several Python versions, so thanks again for that update. Jonas Rembser ***@***.***> schrieb am Mi., 3. Apr. 2024,; 20:45:. > The problem should be fixed with this PR:; > #14703 <https://github.com/root-project/root/pull/14703>; >; > The version Python that ROOT was compiled with is now not hardcoded in the; > library names anymore, so using ROOT with newer Python that the one a build; > time is totally possible!; >; > @ynikitenko <https://github.com/ynikitenko>, feel free to open a new; > issue should you have similar problems.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/12744#issuecomment-2035339828>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAJGF4WRQUBWZ2PKIGT5XM3Y3RE3VAVCNFSM6AAAAAAXRSRNG2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDAMZVGMZTSOBSHA>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12744#issuecomment-2035395948:1080,Message,Message,1080,https://root.cern,https://github.com/root-project/root/issues/12744#issuecomment-2035395948,1,['Message'],['Message']
Integrability,"Thank you. And one more point.; The include directives. #include ""Math/Integrator.h"". or the namespace. Math::. give absolutely no hint where one should look for the class Integrator (or another one from that namespace). Is it MathCore, MathMore or what? Maybe it would be better to maintain the docs also in accord with code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7440#issuecomment-821018950:71,Integrat,Integrator,71,https://root.cern,https://github.com/root-project/root/issues/7440#issuecomment-821018950,2,['Integrat'],['Integrator']
Integrability,"Thank you. So if I understand correctly : ; for n_s times RooHistPdf, it behaves as for the case RooHistPdf for the method : getVal() ; -> OK : it gives a result ""normalized to 1"". But if we decide *not to normalize* the RooDataHist used to create the RooHistPdf,; the RooHistPdf -> getVal() will return a value normalized to the number of events of the RooDataHist : so in this case it gives a *non-normalized result*. This is strange since it is stated : ""The histogram distribution is explicitly normalized by RooHistPdf and can have an arbitrary number of real or discrete dimensions. "". Indeed, with my minimum example where you may put the option option_normalize_hist=0 (with the fix that you kindly found of <=55 bins); we get :; value_pdf total=39.9713; which represents : pdf->getVal()*bin_width. so in this case, we don't need to multiply by the number of events to obtain a prediction !!; The value of the pdf is not inside [0, 1]. So, depending whether the RooDataHist that was used in order to construct the RooHistPdf, was normalized or not normalized, the RooHistPdf->getVal() returns a normalized or a not normalised result,; in contradiction with the sentence that roofit is expected to do it : the sentence : ""The histogram distribution is explicitly normalized by RooHistPdf and can have an arbitrary number of real or discrete dimensions. "" of https://root.cern.ch/doc/master/classRooHistPdf.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7991#issuecomment-826921480:948,depend,depending,948,https://root.cern,https://github.com/root-project/root/issues/7991#issuecomment-826921480,1,['depend'],['depending']
Integrability,"Thanks @JRS296 ! I'm not sure we need / want this, tbh: it's a really system specific implementation and it will have to be in a library that I'd like to replace anyway. And creating a test for it will be non-trivial :-) So I'd actually prefer to still with whatever the shell provides. Makes sense?. But yes *please* contribute! You could start with imlpementing; ```c++; static std::unique_ptr<TFile> OpenU(const char *name, Option_t *option = """",; const char *ftitle = """", Int_t compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault,; Int_t netopt = 0);; ```; internally calling `TFile::Open` but returning a `unique_ptr`. The name is subject to discussion but we want this interface in any case. This would allow you to exercise the contribution procedure! I'd recommend a Linux docker container for improved build speed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13958#issuecomment-1782934211:692,interface,interface,692,https://root.cern,https://github.com/root-project/root/issues/13958#issuecomment-1782934211,1,['interface'],['interface']
Integrability,"Thanks @amadio for the extensive input! Let me address it point by point:. First: the current choice for ""built-in only"". The built-in is there for two reasons: 1) as a dependency, obviously, but 2) also because the full source is needed to build `zmq::ppoll`. `ppoll` was written as an extension to libzmq itself. In the ideal world, I would have committed this back to libzmq (which they are open to, and which I'll do later, see https://github.com/zeromq/libzmq/issues/4220), but haven't had time yet. The interim solution is to just ship it with ROOT, but this requires (part of) the libzmq source to build against. We can do this in two ways: a) just include the necessary libzmq files or b) get them externally on the fly. I actually went with option a) first. However, when people started trying out this branch on their machines, it turned out that the `conda` libzmq build (which I was using in my dev setup) had a more favorable configuration than for instance most Linux native builds, especially because those native builds lack CMake configuration files. That latter fact made me decide to just make the built-in dependency the default; this way I wouldn't have to figure out how to best detect libzmq on each platform (or find / cobble together a good and freely licensed FindZeroMQ.cmake, but the general feeling around the ZeroMQ community is that this is a waste of effort, because the CMake config files that come along with libzmq itself already solve this finding problem; it's just unfortunate that the Linux distro's won't include them...). So in the end, because of time constraints, I made the choice to prioritize other things over putting a lot of effort into this dependency which will probably end up different in the near future anyway (because of the ppoll PR, which will make things a lot easier on the ROOT side). So, long story, I hope it is clear. Do you think that given this (temporary) situation, the choice for built-in only is acceptable?. Then about the RooFitZ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8385#issuecomment-870411730:169,depend,dependency,169,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870411730,1,['depend'],['dependency']
Integrability,"Thanks @amadio for the suggestion!. `PassAsVec<N, T>(func)` is a callable that takes N arguments of type T,; passes them to func as a collection (`func({v1, v2, ...}`) and returns; the result of the call to `func`. This helper makes it possible to pass several columns of the same; type to a callable that accepts a vector of that type. Example usage:; ```c++; bool myVecFunc(std::vector<float> args);; df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});; ```. @stwunsch could this be interesting for the new TMVA interfaces?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2295:531,interface,interfaces,531,https://root.cern,https://github.com/root-project/root/pull/2295,1,['interface'],['interfaces']
Integrability,"Thanks @dpiparo and @imaxoi . Suggestion integrated, merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2865#issuecomment-433935732:41,integrat,integrated,41,https://root.cern,https://github.com/root-project/root/pull/2865#issuecomment-433935732,1,['integrat'],['integrated']
Integrability,Thanks @etejedor for noticing the error messages I missed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1309:40,message,messages,40,https://root.cern,https://github.com/root-project/root/pull/1309,1,['message'],['messages']
Integrability,"Thanks @saisoma123 for all your wonderful PRs! Could you, in the future:; - set @vgvassilev (our cpt expert) as reviewer?; - assign cpt PRs to @vgvassilev ?; - add to the title of the PR `[skip-ci]` (because ROOT doesn't have tests for cpt there's no need to run ROOT's continuous integration suite); - use a tag in the commit title that signals *where* the change is happening, e.g. `[cling-cpt] Edited verbose output flag` or similar?. Thanks, much appreciated!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10738#issuecomment-1153519304:281,integrat,integration,281,https://root.cern,https://github.com/root-project/root/pull/10738#issuecomment-1153519304,1,['integrat'],['integration']
Integrability,Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7075#issuecomment-764675439:55,rout,routine,55,https://root.cern,https://github.com/root-project/root/pull/7075#issuecomment-764675439,2,"['inject', 'rout']","['injected', 'routine']"
Integrability,"Thanks Philippe - I shall try that; ________________________________; From: Philippe Canal ***@***.***; Sent: 27 February 2023 18:50; To: root-project/root; Cc: Sunanda Banerjee; Mention; Subject: Re: [root-project/root] Getting a crash while reading a Root Tree (Issue #12370). Alternatively you can run valgrind to get more information on this kind of failure:. valgrind --suppressions=$ROOTSYS/etc/valgrind-root.supp --log-file=val.01.log myexecutable myargs. —; Reply to this email directly, view it on GitHub<https://github.com/root-project/root/issues/12370#issuecomment-1446778005>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/ABGMZOSBSY5NDNIO7K6JZEDWZTSPBANCNFSM6AAAAAAVFHT3OU>.; You are receiving this because you were mentioned.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12370#issuecomment-1447781427:759,Message,Message,759,https://root.cern,https://github.com/root-project/root/issues/12370#issuecomment-1447781427,1,['Message'],['Message']
Integrability,"Thanks Philippe. After further consideration, i think you're right. I had indeed been concerned about a possible deadlock, but i had thought; that it was probably ok because a similar change was working fine; in production. But (a), i had forgotten about the dlopen lock and (b),; they weren't exactly the same change. As i alluded to above, we didn't; want to have a custom patch to ROOT, so for production we address this; race by wrapping dlopen. But in that case, the core lock is acquired; _before_ the call to dlopen, not after. So, what is to be done?. There is probably only one code path in ATLAS that was giving us problems.; The Gaudi plugin manager was being used to load one of the POOL libraries; that happened to include ROOT dictionary information. I could; acquire the ROOT core lock around this (and one or two other places; where i known that Gaudi components may be loaded after event processing; starts). However, there are many other places where shared libraries; could potentially be loaded. While those probably don't matter...; the original bug here was quite opaque, taking several months; to completely track down. So i'm loathe to leave open any possibility; that it could bite us again. We could add locking within TClassTable. This is perhaps an attractive; way forward, as it should make it much easier to ensure that usages; of TClassTable are correct. A drawback is that is hard to then ensure; that we don't have something else that is also supposed to be protected; by the core mutex. Nevertheless, i could try to prepare a change; to do this if it sounds good. However, that's not the end of the problems. If this analysis is correct, then we _already_ have potential deadlock; problems, as there is nothing to prevent the initialization code of a; shared library (which can be arbitrary used code) from calling into ROOT; in a way that would acquire the core mutex. So code which would look; innocent to the user would have a chance of deadlocking.; I'm not sure ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11263#issuecomment-1231069071:433,wrap,wrapping,433,https://root.cern,https://github.com/root-project/root/pull/11263#issuecomment-1231069071,1,['wrap'],['wrapping']
Integrability,"Thanks a lot @wlav! . > That will give you different answers depending on whether the sequence has 0 or N elements, though. That's correct. Currently, we'll tag a sequence with 0 elements as not a sequence but the idea in this context is that if there are no elements there is nothing interesting to pythonize so we basically skip that object. > But there are plenty more worrisome things in that code. :). :no_mouth: :grinning:. > Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API. I think this would be the best/ most robust approach. Then we can replace the ad-hoc check we currently do w/ that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15161#issuecomment-2061616984:61,depend,depending,61,https://root.cern,https://github.com/root-project/root/issues/15161#issuecomment-2061616984,1,['depend'],['depending']
Integrability,"Thanks a lot for opening the PR, @devajithvs!. I have measured the runtime of all PyROOT tests without and with this PR, and there is no significant difference (see results at the end of this post). Given that the CI is also green, I would suggest you polish up the implementation a little bit and open a PR upstream:; https://github.com/wlav/CPyCppyy. ```txt; Test name Before After; pyunittests-pyroot-root-module 0.57 s 0.57 s; pyunittests-pyroot-pyz-decorator 0.47 s 0.48 s; pyunittests-pyroot-pyz-pretty-printing 0.81 s 0.81 s; test-import-numpy 0.10 s 0.10 s; pyunittests-pyroot-pyz-array-interface 1.06 s 1.05 s; pyunittests-pyroot-pyz-stl-vector 0.79 s 0.77 s; pyunittests-pyroot-pyz-stl-set 0.81 s 0.82 s; pyunittests-pyroot-pyz-tobject-contains 0.49 s 0.49 s; pyunittests-pyroot-pyz-tobject-comparisonops 0.50 s 0.49 s; pyunittests-pyroot-pyz-tclass-dynamiccast 0.49 s 0.48 s; pyunittests-pyroot-pyz-tcontext-contextmanager 0.53 s 0.52 s; pyunittests-pyroot-pyz-tdirectory-attrsyntax 0.52 s 0.52 s; pyunittests-pyroot-pyz-tdirectoryfile-attrsyntax-get 0.54 s 0.52 s; pyunittests-pyroot-pyz-tfile-attrsyntax-get-writeobject-open 0.63 s 0.62 s; pyunittests-pyroot-pyz-tfile-constructor 0.49 s 0.49 s; pyunittests-pyroot-pyz-tfile-context-manager 0.58 s 0.59 s; pyunittests-pyroot-pyz-ttree-branch-attr 0.80 s 0.80 s; pyunittests-pyroot-pyz-ttree-iterable 0.75 s 0.75 s; pyunittests-pyroot-pyz-ttree-setbranchaddress 0.86 s 0.85 s; pyunittests-pyroot-pyz-ttree-branch 0.79 s 0.78 s; pyunittests-pyroot-pyz-th1-operators 0.56 s 0.56 s; pyunittests-pyroot-pyz-th2 0.50 s 0.50 s; pyunittests-pyroot-pyz-tgraph-getters 0.68 s 0.67 s; pyunittests-pyroot-pyz-tcollection-len 0.50 s 0.50 s; pyunittests-pyroot-pyz-tcollection-listmethods 0.50 s 0.50 s; pyunittests-pyroot-pyz-tcollection-operators 0.50 s 0.50 s; pyunittests-pyroot-pyz-tcollection-iterable 0.49 s 0.50 s; pyunittests-pyroot-pyz-tseqcollection-itemaccess 0.51 s 0.51 s; pyunittests-pyroot-pyz-tseqcollection-listmethods 0.52 s 0.52 s; ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16000#issuecomment-2215185086:595,interface,interface,595,https://root.cern,https://github.com/root-project/root/pull/16000#issuecomment-2215185086,1,['interface'],['interface']
Integrability,"Thanks a lot for your comment!. > * sometimes I would have found useful to be able to pass python number anywhere a RooAbsReal is required, although I suspect this may require a pythonization for each pdf. Yes, I would like this too, but it's technically not easy to implement without changing the source for all PDFs. Maybe I will have an idea at some point as I learn more about PyROOT, but for now I have none. > * `RooSimultaneous` map constructor does not accept a python dictionary yet. That's a very good idea!. > * one thing that surprised me a couple of times at the beginning is that `RooAbsArg` does not keep its servers alive from the python GC so you actually need the same workarounds as in C++ (importing frequently to a workspace).; However, I suspect that if they did keep servers alive, server redirection would likely lead to desync between the C++ and python views of the graph. That's a pretty good idea too. I guess one can simply create new Python references to each server that are set as an attribute of the server, such that they are always kept alive. But you're right, server redirection would break this, unless there are Pythonizations for that one too.... So I still need to think if this is worth it, also considering that users can also use the RooWorkspace factory interface to create PDFs, which doesn't have this problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11421#issuecomment-1257762156:1299,interface,interface,1299,https://root.cern,https://github.com/root-project/root/issues/11421#issuecomment-1257762156,1,['interface'],['interface']
Integrability,"Thanks for all the insights! We are still learning how to cope with all the different interfaces. It is possible that at some point all this extra configuration will be collected in a single place to make it easier for new users to activate from distributed RDataFrame directly. It would be amazing if you could try again your reproducer with the next nightlies if you have time, thank you so much :smile: !; Let's continue the discussion in private for other topics",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9429#issuecomment-993713171:86,interface,interfaces,86,https://root.cern,https://github.com/root-project/root/issues/9429#issuecomment-993713171,1,['interface'],['interfaces']
Integrability,"Thanks for being willing to help here - I do understand the pain... We have thousands and thousands of user C++ files (macros) that rely on ROOT's `using namespace std`. We have that since the birth of ROOT, and we intentionally implemented it again for cling / ROOT6. We can do ""The Right Thing"" and annoy the hell out of the vast majority of our users, or have those people who are annoyed by this (and thus by definition have some expertise in coding) work around this ""feature"" of ROOT. Both are bad options, but IMHO the first is worse. As I said, we're considering replacing it with a bunch of `using std::cout` etc - but that might not help you, if `std::any` is part of the list. ROOT's `using namespace std` is even required for some (at least old) files to be read, so its suppression has more consequences than just at the prompt. We don't have a feature to ""dump cling input"" - because much of cling's input is actually synthetic AST, and code that gets unloaded again, or code that is injected without proper code context, e.g. `std::vector<MyClass>` might be looked up by some part of cling, the I/O, or PyROOT, and that's not valid code by itself, yet has very visible effects on cling, triggering instantiation etc. If you have an idea of how to approximate this let me know!. I'm looking forward to seeing a reproducer of the actual problem - if all fails, just tell me how to reproduce it within LHCb's software stack, as far as I can use it not being a member of LHCb.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8370#issuecomment-858748476:998,inject,injected,998,https://root.cern,https://github.com/root-project/root/issues/8370#issuecomment-858748476,1,['inject'],['injected']
Integrability,"Thanks for checking. It doesn't fail for Linux on your end? Doesn't the command exit ROOT without any message?. On Ubuntu 22.04 and ROOT 6.30.04, `.Class` silently crashes. (It exits ROOT, you are no longer in the prompt, but no crash is shown with the binary release). If I compile in debug mode, then I get with 6.31.01 the same as you:; ```; struct std::_Head_base<_Idx, _Head, true>; SIZE: (NA) FILE: tuple LINE: -1; List of member variables: -------------------------------------------------; root.exe: /home/user/build/build-root-Desktop-Debug/interpreter/llvm-project/llvm/tools/clang/include/clang/AST/TypeNodes.inc:73: clang::TypeInfo clang::ASTContext::getTypeInfoImpl(const clang::Type*) const: Assertion `!T->isDependentType() && ""should not see dependent types here""' failed.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10140#issuecomment-1929000488:102,message,message,102,https://root.cern,https://github.com/root-project/root/issues/10140#issuecomment-1929000488,2,"['depend', 'message']","['dependent', 'message']"
Integrability,"Thanks for comments!; @phsft-bot This is actually depending on #1720, I have to fix this first",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1722#issuecomment-371804642:50,depend,depending,50,https://root.cern,https://github.com/root-project/root/pull/1722#issuecomment-371804642,1,['depend'],['depending']
Integrability,Thanks for fixing the root 6.24 build issues for ppc64le with gcc9.3 ( https://github.com/root-project/root/issues/9297) but looks like we still have build issues with GCC 10.3 and 11.2. We get build errors like [a] full build log is available at https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-8678b1/21211/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/log . FYI @vgvassilev @hahnjo. [a] https://github.com/cms-sw/cmsdist/pull/7500#issuecomment-992272002; ```; /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/slc7_ppc64le_gcc10/external/gcc/10.3.0-84898dea653199466402e67d73657f10/bin/g++ -DGTEST_HAS_RTTI=0 -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -Iinterpreter/llvm/src/tools/clang/lib/Lex -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/lib/Lex -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/include -Iinterpreter/llvm/src/tools/clang/include -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/slc7_ppc64le_gcc10/external/libxml2/2.9.10-32fb6ccc7a5c1482269c150e9287ec24/include/libxml2 -Iinterpreter/llvm/src/include -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/include -D__ROOFIT_NOBANNER -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-semantic-interposition -fPIC -fvisibility-inlines-hidden -Werror=date-time -std=c++1z -w -fdiagnostics-color -ffunction-sections -fdata-sections -fno-common -Woverloaded-virtual -fno-strict-aliasing -O3 -DNDEBUG -fvisibility,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9424:305,integrat,integration,305,https://root.cern,https://github.com/root-project/root/issues/9424,1,['integrat'],['integration']
Integrability,Thanks for integrating the comments. Perhaps the merge commit can be avoided?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2756#issuecomment-428693967:11,integrat,integrating,11,https://root.cern,https://github.com/root-project/root/pull/2756#issuecomment-428693967,1,['integrat'],['integrating']
Integrability,"Thanks for noting this problem. Note that the first new Error message is inaccurate. For example,; ```; gInterpreter->GenerateDictionary(""std::vector<TNamed*>"","""");; ```; works perfectly. And in my opinion the 2nd error message might be too noisy for this kind of error. Either way, my understanding of the problem is simply a missing nullptr checking which was apply to 'just' TCint.cxx at a time we had both TCint and TCintWithCling.cxx:; ```; commit 40ff05f286d494f930c00d81942b845f240a74f9; Author: Axel Naumann <Axel.Naumann@cern.ch>; Date: Thu Jan 19 09:46:31 2012 +0000. Fix Coverity 39060 (deref of 0 ptr); ; ; git-svn-id: http://root.cern.ch/svn/root/trunk@42716 27541ba8-7e3a-0410-8455-c3a389f83636. diff --git a/core/meta/src/TCint.cxx b/core/meta/src/TCint.cxx; index 311e2f2d99..b9babb70e6 100644; --- a/core/meta/src/TCint.cxx; +++ b/core/meta/src/TCint.cxx; @@ -1165,6 +1165,7 @@ Int_t TCint::GenerateDictionary(const char *classes, const char *includes /* = 0; // gInterpreter->GenerateDictionary(""myclass"",""myclass.h;myhelper.h"");; ; if (classes == 0 || classes[0] == 0) return 0;; + if (!includes) includes = """";; ; // Split the input list; std::vector<std::string> listClasses;; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1724#issuecomment-371907648:62,message,message,62,https://root.cern,https://github.com/root-project/root/pull/1724#issuecomment-371907648,2,['message'],['message']
Integrability,"Thanks for opening this issue!. The training part of TMVA is not developed anymore, that's why this issue was not be addressed. Sorry for not giving any feedback and leaving it in limbo state for so long. See also: https://indico.cern.ch/event/1356068/contributions/5709442/attachments/2811744/4907885/ML4EP_Feedback.pdf. Quote from slide 4:; > We want to support experiments inference (C++) for cases that are difficult to; implement or require heavy dependencies.; We don’t want to compete with existing industry tools for training.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7092#issuecomment-2046133207:452,depend,dependencies,452,https://root.cern,https://github.com/root-project/root/issues/7092#issuecomment-2046133207,1,['depend'],['dependencies']
Integrability,"Thanks for providing us with a deadline by when you need this. It's on our radar (I was just discussing this with Scott, without having seen your comment!) and we will make sure to address this soon. I don't know whether we can still address this before 6.30 though; instead we will be able to integrate a fix in the next patch release of 6.28 and 6.30/02. I hope that's okay?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13410#issuecomment-1743413245:294,integrat,integrate,294,https://root.cern,https://github.com/root-project/root/issues/13410#issuecomment-1743413245,1,['integrat'],['integrate']
Integrability,"Thanks for quick reaction!. First, how I installed root - I followed; instructions on https://root.cern/install/,; originally fulfilling all required dependencies; for suse and up to the end. All went smoothly.; At the end I issued the command source ../root_install/bin/thisroot.sh; and strted root. After invoking root; I entered the command new TBroser( it is shown in bug report); and it crashed!; Waiting for you response, V.Kurbatov. On 2020-10-15 10:46, Enric Tejedor wrote:; > Thank you for the report @kurbatov-lang [1] ! Could you please provide; > a reproducer of how you get that crash?; > ; > --; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub [2], or unsubscribe; > [3].; > ; > Links:; > ------; > [1] https://github.com/kurbatov-lang; > [2] ; > https://github.com/root-project/root/issues/6645#issuecomment-708966537; > [3] ; > https://github.com/notifications/unsubscribe-auth/AQQ2QXOW4N6DHNM6LMQUBYDSK2SDTANCNFSM4SRTOZQQ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6645#issuecomment-708987106:150,depend,dependencies,150,https://root.cern,https://github.com/root-project/root/issues/6645#issuecomment-708987106,1,['depend'],['dependencies']
Integrability,"Thanks for reporting this! I'm on it. It's another classic RooFit bug. RooFit should consider all RooAbsArgs with the same name as equivalent, but sometimes it doesn't. Here, cloning the observables, which is done in the plotting, messes up something in the integral creation:. ```C++; #include <RooConstVar.h>; #include <RooDataSet.h>; #include <RooGaussian.h>; #include <RooLinearVar.h>; #include <RooRealVar.h>. void repro(); {; using namespace RooFit;. RooRealVar x{""x"", """", 0, 1};; RooRealVar y{""y"", """", 0, 1};. RooLinearVar x2{""x2"", """", x, RooConst(1), RooConst(0)};; RooLinearVar y2{""y2"", """", y, RooConst(1), RooConst(0)};. // RooGaussian can integrate over x or mu, but not both still, the issue is; // visible regardless; RooGaussian gauss{""g"", """", x2, y2, RooConst(0.2)};. // works fine, numerical integral only for the 2D normalization integral,; // and its over y2 (meaning that the RooLinearVar integral works) but not in; // the y projection if the pdf supported 2D integrals, there would be no; // numerical integrals at all; std::unique_ptr<RooAbsReal> integral{gauss.createIntegral({y}, {x, y})};; integral->Print();. RooRealVar xCopy{x};; RooRealVar yCopy{y};. // numerical integral over y (unwanted); std::unique_ptr<RooAbsReal> integral2{gauss.createIntegral({yCopy}, {xCopy, yCopy})};; integral2->Print();; }; ```. I suppose the fix will be a small change in RooRealIntegral to compare something by name and not by pointer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12646#issuecomment-1519882661:650,integrat,integrate,650,https://root.cern,https://github.com/root-project/root/issues/12646#issuecomment-1519882661,1,['integrat'],['integrate']
Integrability,"Thanks for taking a look Oksana, commit message updated!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5405#issuecomment-617261492:40,message,message,40,https://root.cern,https://github.com/root-project/root/pull/5405#issuecomment-617261492,1,['message'],['message']
Integrability,"Thanks for the PR Simon!. @lmoneta, could you have a look at this?. The bugfix is quite important, more details in the referenced forum post. One thing to be aware of is that it contains a minor change to the interface of the TDataLoader that affects the GSoC students working on the TMVA::DNN.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/779#issuecomment-316057090:209,interface,interface,209,https://root.cern,https://github.com/root-project/root/pull/779#issuecomment-316057090,1,['interface'],['interface']
Integrability,"Thanks for the attention to it. Maybe I was too enthusiastic in the context of displayed objects and interactive root sessions. I'm not an expert, but still learning. Th RDirectory looks interesting. Subroutines leaving global objects lying around still seems funny. It could be convenient for casual scripting. As an example of a main routine, and a subroutine that ""makes"" a TCanvas that persists after a .x, I'd be inclined to skin the cat this way:. ```; // my_subroutines.C; void my_subroutine(unique_ptr<TCanvas> &x) {; x.reset() // TCanvas requires the extra step, see note below.; x.reset(new TCanvas());; // .. do something with it.; }; ```. ```; //make_canvas.C; namespace root_global { ; unique_ptr<TCanvas> c1;; }. void make_canvas() {; // we decide at the top level to use a global here:; my_subroutine(root_global::c1);. //This one doesn't use a global and will die, our choice; unique_ptr<TCanvas> local_canvas;; my_subroutine(local_canvas);; }; ```; or if being a little more lazy, I'd likely use static instead of the namespace, but the root interpreter doesn't respect translation unit boundaries well. Really I'd use a class though in case I need to add more global things easily:. ```; //display.h. class display {; private:; unique_ptr<TCanvas> c1;; public:; void make_canvas() {; c1.reset(); ; c1.reset(new TCanvas());; }; };; ```; And use it like:; ```; //make_display.C; #include ""display.h"". namespace root_global { ; display my_display;; }. // main routine:; void make_display() { ; // This one will stick around; root_global::my_display.make_canvas();. // This one wont. ; display local_display;; local_display.make_canvas();; }; ```. There are two main differences compared to the PR. 1) I'm not letting the subroutine allocate heap objects that aren't handled explicitly by the caller. 2) I'm using standard C++ that even works fine right now in root 6. That's nice because it's easier to learn, recognize, understand, and apply elsewhere. Maybe it's a bonus that syntax f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7305#issuecomment-787621241:336,rout,routine,336,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-787621241,1,['rout'],['routine']
Integrability,Thanks for the catch. Actually I don’t understand why this PR is not integrated. It seems to be a more extensive version of my change. I will update my PR with the d3 name change I missed and discuss with Lorenzo how to best respond to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1520#issuecomment-408066118:69,integrat,integrated,69,https://root.cern,https://github.com/root-project/root/pull/1520#issuecomment-408066118,1,['integrat'],['integrated']
Integrability,Thanks for the comment! The added dependency in RooFitCore was an accident. I will change that back,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11880#issuecomment-1348512409:34,depend,dependency,34,https://root.cern,https://github.com/root-project/root/pull/11880#issuecomment-1348512409,1,['depend'],['dependency']
Integrability,"Thanks for the comment. At this point this issue seems to conflate two things: ; 1. The dependencies of python tests. This should have been addressed by #16555 ; 2. The missing symbols. If 1. is confirmed to be solved, I would say that at least this issue ought to be closed and one about missing symbols opened. However, even if an issue dedicated to the missing symbols is opened, it's not clear, at least to me, how the problem can be reproduced. So far we have no indication of it in our CI: can it be due to a somewhat imprecise formulation of the python dependencies in the `requirements.txt` file that affects your platform?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16553#issuecomment-2384870116:88,depend,dependencies,88,https://root.cern,https://github.com/root-project/root/issues/16553#issuecomment-2384870116,2,['depend'],['dependencies']
Integrability,"Thanks for the comments! I will change things a little bit to address these concerns. What made me weary now is that the compiler doesn't suggest any `override` keywords for the RDF-related member functions in the RooAbsDataHelper. So what I think is that it's probably not even necessary to inherit from `RActionImpl`! Maybe that was just done by the original author for convenience. I think this dependency can actually be avoided without changing and RDF code. ...or maybe not, but I'll check",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16606#issuecomment-2394997637:398,depend,dependency,398,https://root.cern,https://github.com/root-project/root/pull/16606#issuecomment-2394997637,1,['depend'],['dependency']
Integrability,"Thanks for the detailed analysis, @eguiraud! I will see what happens when remove the special case to not strip the protocol part. Should be fine, since this goes into `TFile::Open` but better get confirmation from @pcanal as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11644#issuecomment-1297265726:115,protocol,protocol,115,https://root.cern,https://github.com/root-project/root/pull/11644#issuecomment-1297265726,1,['protocol'],['protocol']
Integrability,"Thanks for the great comments @guitargeek! All the ones I didn't comment on I agree with, so will implement those soon. I agree that it has become quite a complex class. It would be nice if things could be refactored at some time. However, part of it is also inevitable, I fear, because `RooMinimizer` has to bridge between two rather different frameworks, that of Minuit2 and RooFit, and now due to all the parallel processing work will have to deal with even more stuff than before. By the way, just as a historical aside: at some point I had turned `RooMinimizer` into a fully templated class, which made it even more horrible to maintain and time consuming to develop (since the header had to be recompiled on every change). I managed to trim the template horror down to just the constructor by introducing `RooAbsMinimizerFcn`. That introduced its own complexity here and there, as we discussed above :) But it was better in the end, I think. Note that the sole reason the template parameter is still necessary in the constructor is that the `MinimizerFcn` needs the proper constructor inside the `RooMinimizer` constructor. I like your suggestion of also using the template class argument instead of the `dynamic_cast` using `std::is_same`, but this is not strictly necessary like using the proper constructor is. By the way, note also that in the upcoming TestStatistics PR, there will be yet another `RooMinimizer` constructor, also with template arguments, but different ones, namely the concrete calculator classes for the likelihood and gradient. Maybe it would be better to discuss this design aspect further in that PR, because then we have the full picture.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8596#issuecomment-879703750:309,bridg,bridge,309,https://root.cern,https://github.com/root-project/root/pull/8596#issuecomment-879703750,1,['bridg'],['bridge']
Integrability,"Thanks for the nice example. It works on Ubuntu, too.; (Sorry, my last message was an error on my side, I was passing a nullptr as myButton). Why is SetText() leading to a crash?. Maybe we could add a short comment here in the documentation:; https://root.cern/doc/master/classTGTextButton.html#aa2d8b609e96fb43c0a11b6b9ece52c83. ""If you use a signal-slot connection with inline argument passed as (text) value, use ChangeText instead of SetText"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7195#issuecomment-779120010:71,message,message,71,https://root.cern,https://github.com/root-project/root/issues/7195#issuecomment-779120010,1,['message'],['message']
Integrability,"Thanks for the pull request! A PR was just submitted that includes your changes. For the optimisation suggestion, feel free to implement it should you have the time. Otherwise I will integrate it when I have some spare time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/454#issuecomment-297075413:183,integrat,integrate,183,https://root.cern,https://github.com/root-project/root/pull/454#issuecomment-297075413,1,['integrat'],['integrate']
Integrability,"Thanks for the quick feedback!. I've tried with `client.wait_for_workers(1)` before creating the RDF, but it doesn't have the expected effect: it just waits forever after printing `DEBUG:Starting job: 12241446.0` (debugging activated with `import logging; logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG)`). I can see the job in `condor_q` come and go, but the blocking call is never released for some reason (note that I'm not a Dask expert by any means). I'll try again once #9431 is merged; in particular I'm interested in using Dask's [adaptive worker management](https://jobqueue.dask.org/en/latest/advanced-tips-and-tricks.html#how-to-handle-job-queueing-system-walltime-killing-workers), so that the exact number of submitted jobs is not fixed a priori but automatically adapts to the workload...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9429#issuecomment-992593304:300,message,message,300,https://root.cern,https://github.com/root-project/root/issues/9429#issuecomment-992593304,1,['message'],['message']
Integrability,"Thanks for the review @Axel-Naumann!; > ```; > extern { enum {k; }; };; > struct { enum {k; }; };; > namespace { enum {k; }; }; > inline namespace N { enum {k; }; }; > ```; This change only applies to DeclExtractor; as per the current implementation, `extern ...` and `namespace { ... }` decls are not wrapped (thus, not decl-extracted). However, `struct { enum { ... } } foo` is. In this case, lookup works as usual if the `CXXRecordDecl` is moved out of the wrapper (as it is a `DeclContext` itself).; For completeness, I have added a test case for that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9789#issuecomment-1028300025:302,wrap,wrapped,302,https://root.cern,https://github.com/root-project/root/pull/9789#issuecomment-1028300025,2,['wrap'],"['wrapped', 'wrapper']"
Integrability,"Thanks for the review @eguiraud , regarding :. > the _extra_args relay logic could be documented a bit better (I'm not sure MethodTemplateWrapper's init method needs to take extra_args as argument, but MethodTemplateGetter's docs should mention that the extra_args are passed when constructing the wrapper_class instance. I think this is already clear enough in the docs of `__get__` in `MethodTemplateGetter`:; ```; Returns:; instance of MethodTemplateWrapper subclass: contains a handle to; the original implementation of the method template that is; bound to `instance` and, possibly, some extra arguments to be; used when receiving a call.; ```; also `_extra_args` is documented as:; ```; _extra_args (tuple): extra arguments to be used by the wrapper object; when receiving a call.; ```; And the extra args need to be passed when constructing the getter, so they can be passed to the wrapper (the user that is pythonizing a class only deals with the getter).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10341#issuecomment-1094750476:748,wrap,wrapper,748,https://root.cern,https://github.com/root-project/root/pull/10341#issuecomment-1094750476,2,['wrap'],['wrapper']
Integrability,"Thanks for the review! By reusing the buffer, one can evaluate RooHistPdfs and RooHistFuncs without additional memory: first, the output buffer of the HIstPdf is filled with the bin indices, and then you look up the values in the RooHistPdf at these indices. The alternative to cover this usecase would be to use an integer, and then use `reinterpret_cast` in the RooHistPdf/Func. Maybe that is nicer, and actually requires less casting around inside the `binNumbers` implementation. So I think I'll change that, thanks!. By the way, the alternative was `int` instead of `size_t`, because all the rest of the binning interface uses `int`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11151#issuecomment-1209009330:617,interface,interface,617,https://root.cern,https://github.com/root-project/root/pull/11151#issuecomment-1209009330,1,['interface'],['interface']
Integrability,"Thanks for the review!. > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14074#issuecomment-1818475645:53,depend,dependent,53,https://root.cern,https://github.com/root-project/root/pull/14074#issuecomment-1818475645,1,['depend'],['dependent']
Integrability,"Thanks for the review!; I have downgraded the deprecation messages, just mentioning the alternative. How do you like it now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14754#issuecomment-1949917116:58,message,messages,58,https://root.cern,https://github.com/root-project/root/pull/14754#issuecomment-1949917116,1,['message'],['messages']
Integrability,"Thanks for the reviews, @hageboeck and @lmoneta!. I'll merge it after https://github.com/root-project/root/pull/8167 so I can use the improved RooArgSet constructor from iterators that Stephan introduced in that PR. I also will update the changes to the RooFit collection classes in this PR to avoid using the `std::span` ROOT backport in the interface, as advised by @hageboeck (see https://github.com/root-project/root/pull/8167#discussion_r646480340).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7907#issuecomment-856230037:343,interface,interface,343,https://root.cern,https://github.com/root-project/root/pull/7907#issuecomment-856230037,1,['interface'],['interface']
Integrability,"Thanks for these changes. I apologise for coming back to them so late. ; I would like to hear also what @pcanal has to say about the mechanics of the code, however the change seems a net improvement with respect to the current situation. I would like to start pointing out a few aspects of the PR which could be improved before merging (if consensus in the review is reached):; - There is one test failure, on all platforms but windows: do you need help to figure out why the test is failing?; - The number of commits seem to high, can they be squashed together into fewer commits (one commit) with clear commit messages?; - There is no test for the functionality: can one or more tests be added in roottest? If you need some examples, we can dig them out for you (in the `root/meta/` directory one should have plenty of examples)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14813#issuecomment-2038169206:612,message,messages,612,https://root.cern,https://github.com/root-project/root/pull/14813#issuecomment-2038169206,1,['message'],['messages']
Integrability,"Thanks for this attempt. There are a few issues remaining and those of course will have to be understood. On top of those, I would like to ask, if possible, to check that there is no lookup triggered by the new name discovering routine: we want to avoid slowdowns+memory allocations due to unwanted accesses to the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14676#issuecomment-1943375264:228,rout,routine,228,https://root.cern,https://github.com/root-project/root/pull/14676#issuecomment-1943375264,1,['rout'],['routine']
Integrability,"Thanks for this detailed report! I do not really understand how your ""proposed solution"" is different from what we had before. It looks like you only changed the way the error message is printed. Maybe I missed something...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14592#issuecomment-1929074051:176,message,message,176,https://root.cern,https://github.com/root-project/root/issues/14592#issuecomment-1929074051,1,['message'],['message']
Integrability,Thanks for working on this. There are a few things we can improve in this PR:; * Could you add more meaningful commit messages?; * Please update the Copyright information as in the other files in ROOT.; * Please migrate the tests to use gtest. It is much easier to understand what exactly you are testing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/689#issuecomment-310905317:118,message,messages,118,https://root.cern,https://github.com/root-project/root/pull/689#issuecomment-310905317,1,['message'],['messages']
Integrability,"Thanks for you comments @lmoneta.; I'm sorry for my late reply but since nothing happened here for over a month, I stopped watching. The reason I used double pointers for the 2D arrays was to have the most low level datatype possible, have full felxibility and stay consistent with the other TGraph classes which are all using pointers for 1D arrays. Nevertheless I understand your concerns since double pointers for arrays are a rather dirty way of programming. I think it might be a good compromise to use the ROOT array wrapper class TArrayD. Then the two dimensional Arrays could be represented by an 1D array of TArrayD objects. The functions SetPointEY, SetPointEYL and SetPointEYH were implemented by me to keep full consistency with the TGraphAsymmErrors class. They are overloaded with one version taking the point and an array in which case the array cointains all errors of the named point for the different dimensions. My idea was to alter the TGraphAsymmErrors notation as little as possible so TGraphAsymmErrors::SetPointEY(i, el, eh) would translate to TGraphMultiErrors::SetPointEY(i, &el, &ey) in the case of only one error dimension which would be equal to a TGraphAsymmErrors. The idea of the function SetDimensionEY, SetDimensionEYL and SetDimensionEYH is basically the same. They set the errors of all points in the given dimension. My idea was to think of a way to convert from multiple TGraphAsymmErrors objects to one single TGraphMultiErrors object like in this small example:; ```; TGraphAsymmErrors* statisticErrors = ...; TGraphAsymmErrors* systematicErrors = ... TGraphMultiErrors* theGraph = new TGraphMultiErrors(statisticErrors->GetN(), 2, statisticErrors->GetX(), statisticErrors->GetY(), statisticErrors->GetEXlow(), statisticErrors->GetEXhigh());; theGraph->SetDimensionEY(0, statisticErrors->GetEYlow(), statisticErrors->GetEYhigh());; theGraph->SetDimensionEY(1, systematicErrors->GetEYlow(), systematicErrors->GetEYhigh());; ```. But again I see your point since ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3452#issuecomment-516408489:523,wrap,wrapper,523,https://root.cern,https://github.com/root-project/root/pull/3452#issuecomment-516408489,1,['wrap'],['wrapper']
Integrability,"Thanks for your PR, @guiguem !. After a discussion within the team we decided not to apply it for the following reasons:; - RooFit is not even enabled by default. If we reconsider that ROOT should really be built with RooFit then we will revisit your PR (or something similar).; - it is fairly trivial to add `RooFit` to CMake's `find_package` https://root.cern.ch/how/integrate-root-my-project-cmake / to add a `-lRooFit` behind `root-config --libs`, so adding this to our build system doesn't appear to be a huge simplification for users. I hope this explanation reduces a bit the frustration that our decision might cause - we do appreciate your suggestion especially as it's a PR!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1002#issuecomment-330508193:369,integrat,integrate-root-my-project-cmake,369,https://root.cern,https://github.com/root-project/root/pull/1002#issuecomment-330508193,1,['integrat'],['integrate-root-my-project-cmake']
Integrability,"Thanks for your comment, Sergey - this is exactly what we were after and why we do it already now for 6.18!. We are not aware of current users of the ODBC interfaces. The post you mentioned seems more of a test balloon - it would be interesting to hear whether it's actually used. We can either ""undeprecate"" it and add tests (!) or remove it - it has been deprecated for one release now. And IIRC even *building* the ODBC part is becoming increasingly tricky with current distros...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3232#issuecomment-452745969:155,interface,interfaces,155,https://root.cern,https://github.com/root-project/root/pull/3232#issuecomment-452745969,1,['interface'],['interfaces']
Integrability,Thanks for your prompt reply @vepadulano.; I changed it to Bool_t because I thought that it was preferred to use types defined in `Rtypes.h` in public interfaces.; Now that I look more in detail at the coding convention recommendations I see that this only applies to data that might be written to disk.; I can revert it; do you prefer that I make another commit on top or should I squash them?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13748#issuecomment-1739610736:151,interface,interfaces,151,https://root.cern,https://github.com/root-project/root/pull/13748#issuecomment-1739610736,1,['interface'],['interfaces']
Integrability,"Thanks for your proposal! We won't need `std::shared_ptr<std::vector<Double_t>>` as datatype; `std::vector<Double_t>` would be enough as this allows cheap move operations. Then again, so does `Double_t *`. Did you consider simply implementing a move operator for `TGraph`?. We must avoid all backward incompatible interface changes. I didn't look in detail but the amount of code changes here suggests that this isn't the case for this draft?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9610#issuecomment-1056797487:314,interface,interface,314,https://root.cern,https://github.com/root-project/root/pull/9610#issuecomment-1056797487,1,['interface'],['interface']
Integrability,"Thanks for your quick review!; I'll try to work on your suggestions asap so you can integrate them.; Also, do you want me to do the same PR on Cling project?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/113#issuecomment-162328523:84,integrat,integrate,84,https://root.cern,https://github.com/root-project/root/pull/113#issuecomment-162328523,1,['integrat'],['integrate']
Integrability,"Thanks to @cwiel for pointing out the issue. I've refactored the code and reduced code duplication massively. The bug is fixed by writing a pointer unequal zero in the array interface since numpy does not take this as exception. Actually, it does not matter at all what is written in the `""data""` field of the array interface since it is never accessed. Edit: Added a backport for experimental pyroot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3535:174,interface,interface,174,https://root.cern,https://github.com/root-project/root/pull/3535,2,['interface'],['interface']
Integrability,Thanks to Tomas Dado for noticing that this was broken. We should ensure that ROOT always builds with this flag. See also:; * https://root.cern/doc/v632/release-notes.html#compile-your-code-with-memory-safe-interfaces; * https://github.com/root-project/root/blob/master/roofit/roofitcore/inc/RooFit/Config.h#L16,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15946:207,interface,interfaces,207,https://root.cern,https://github.com/root-project/root/pull/15946,1,['interface'],['interfaces']
Integrability,"Thanks! I don't think the `RooRealAnalytic` is used, or at least it should not be used. And if people use it, they can do the same as I did here, wrapping an integral in a `RooRealBinding`. But a good point anyway, I'll mention it in the release notes!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13334#issuecomment-1660023335:146,wrap,wrapping,146,https://root.cern,https://github.com/root-project/root/pull/13334#issuecomment-1660023335,1,['wrap'],['wrapping']
Integrability,"Thanks! I'll merge and backport this asap, just force-pushed a final time here to fix some typos in the commit message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12079#issuecomment-1400399292:111,message,message,111,https://root.cern,https://github.com/root-project/root/pull/12079#issuecomment-1400399292,1,['message'],['message']
Integrability,Thanks! Is there a page explaining the dependencies? I tried and I get this error:; `ImportError: No module named nbformat`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-910349680:39,depend,dependencies,39,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-910349680,1,['depend'],['dependencies']
Integrability,"Thanks! You are right, the message is quite cryptic for users... I hope I can improve the situation in the next release, maybe even find the underlying reason for this proxy desync. But for 6.28 I didn't have much time, and I still needed to do something that doesn't throw anymore, and at least now it gives a warning that is useful for us developers to debug the problem. Actually you can kind of thee if RooFit does the right thing because the warning prints out the proxy contents. From the names of the factors of the product, you can guess which one was probably meant to serve the `RooProduct`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12046#issuecomment-1387168423:27,message,message,27,https://root.cern,https://github.com/root-project/root/pull/12046#issuecomment-1387168423,1,['message'],['message']
Integrability,"Thanks! You're right, it's not that necessary, but having this interface more general would have avoided the question on the forum to begin with. And I think every change that would have prevented a question is a good change, to avoid more duplicate questions in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13266#issuecomment-1659938360:63,interface,interface,63,https://root.cern,https://github.com/root-project/root/pull/13266#issuecomment-1659938360,1,['interface'],['interface']
Integrability,"Thanks!; It's not deprecated, but rather part of a legacy interface. No alternative exists at the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14765#issuecomment-2032719816:58,interface,interface,58,https://root.cern,https://github.com/root-project/root/issues/14765#issuecomment-2032719816,1,['interface'],['interface']
Integrability,Thanks!; So I guess the easiest solution would be to add nlohmann-json to https://root.cern/install/dependencies/ and we're all set.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14188#issuecomment-1845007333:100,depend,dependencies,100,https://root.cern,https://github.com/root-project/root/issues/14188#issuecomment-1845007333,1,['depend'],['dependencies']
Integrability,"Thanks, @Axel. Just FYI, I plan to update the `README/INSTALL` file due to [ROOT-9488](https://sft.its.cern.ch/jira/browse/ROOT-9488) and [ROOT-9333](https://sft.its.cern.ch/jira/browse/ROOT-9333), that's why I'm pointing the message there. Then we can point https://root.cern/building-root to the updated documentation (or just repeat the same information in the website).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4132#issuecomment-523877678:226,message,message,226,https://root.cern,https://github.com/root-project/root/pull/4132#issuecomment-523877678,1,['message'],['message']
Integrability,"Thanks, @egpbos and @jspaaks ! Validation succeeds now. > suggest to add a GitHub Actions workflow. AFAICT we need this to be integrated with our release workflow. Once that's a GH Action we can also migrate the `CITATION.cff` generation and validation there. I *think* it's fairly hard to break the file given that it's generated by a script; I also dislike the pile of dependencies of `cffconvert` for a simple thing like validation, IMO it's too heavy to add it to the script producing `CITATION.cff`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8626#issuecomment-876311455:126,integrat,integrated,126,https://root.cern,https://github.com/root-project/root/pull/8626#issuecomment-876311455,2,"['depend', 'integrat']","['dependencies', 'integrated']"
Integrability,"Thanks, @eguiraud . I don't see this as a reason to complain if `ROOT_MAX_THREADS` is set to a value higher than what the TBB arena will use in the end - also because it's already fairly involved to figure out what that number will be... If I got you wrong and / or my above statement is incorrect then we will add that error message in a subsequent PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13057#issuecomment-1611048723:326,message,message,326,https://root.cern,https://github.com/root-project/root/pull/13057#issuecomment-1611048723,1,['message'],['message']
Integrability,"Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM?. As an example, in `core/rootcling_stage1/CMakeLists.txt` we have; ```CMake; ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx; [...]; LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}; NOINSTALL); ```. `CLING_LIBRARIES` comes from `interpreter/CMakeLists.txt`:; ```CMake; set(CLING_LIBRARIES clingInterpreter;clingMetaProcessor;clingUtils CACHE STRING """"); ```. And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:; ```CMake; set(LIBS; clingUtils; [...]; ). set(LLVM_LINK_COMPONENTS; analysis; [...]; ```. I'd hope that this can get used also for builtin LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156#issuecomment-1667698745:93,depend,dependency,93,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1667698745,3,['depend'],"['depend', 'dependencies', 'dependency']"
Integrability,"Thanks, @vepadulano, for checking the release notes. Please let me merge, I want to update the commit message adding the link above to it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11655#issuecomment-1301004251:102,message,message,102,https://root.cern,https://github.com/root-project/root/pull/11655#issuecomment-1301004251,1,['message'],['message']
Integrability,"Thanks, Bertrand. Just got several error messages in my previous PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5119#issuecomment-596946102:41,message,messages,41,https://root.cern,https://github.com/root-project/root/pull/5119#issuecomment-596946102,1,['message'],['messages']
Integrability,"Thanks. I understand. Maybe it depends on the use case, in some cases it could be useful. Maybe we can add a function to enable it SetEnableScrolling(), and leave it disabled by default?. Firefox also has this setting in about:config to disable or enable it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7272#issuecomment-784937198:31,depend,depends,31,https://root.cern,https://github.com/root-project/root/pull/7272#issuecomment-784937198,1,['depend'],['depends']
Integrability,"Thanks. I've had a quick look -- so your approach is to say that the global observables get added to the dataset in the same way you would list your observables, but then you have a way to flag which of the observables are the global ones?. I guess I was imagining instead that the global observables would be truly independent of the observables. So e.g. I would have code like:. ```; RooDataSet ds(""data"",""data"", RooArgSet{a,b,c}, RooFit::GlobalObservables(RooArgSet({x,y,z}));; ds.getGlobals(); // return RooArgSet* to global observables, or null pointer if Dataset has no global observables attached; ds.getGlobals()->setRealValue(""x"",4); // changing the value in the global observables; ```. Do you think that sort of interface will cause problems though?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8123#issuecomment-838595643:723,interface,interface,723,https://root.cern,https://github.com/root-project/root/issues/8123#issuecomment-838595643,1,['interface'],['interface']
Integrability,"That breakpoint indeed never trips, but it's definitely injecting null ptr checks from somewhere:; (see the presence of ```cling_runtime_internal_throwIfInvalidPointer ()``` in the stack trace). And also confirmed that my real use case runs much slower (boost histogram template instantiations from pyroot). ```python; import ROOT; ROOT.gInterpreter.ProcessLine("".O3""). import time. ROOT.gInterpreter.Declare(""""""; template <typename T>; double templateTest() {; double *d = nullptr;; return *d;; }; """"""). print(""sleep""); time.sleep(5); # I stop here manually and insert the breakpoint; print(""instantiating template""). ROOT.templateTest[""double""](); ```. ```; (wmassdevrolling) [bendavid@lxplus8s10 wmassdev]$ python testnullptr.py ; sleep; instantiating template. Thread 2 (Thread 0x7f23282e3640 (LWP 13939) ""python""):; #0 0x00007f2343ecc8ca in __futex_abstimed_wait_common64 () from /usr/lib/libpthread.so.0; #1 0x00007f2343ec6574 in pthread_cond_timedwait. GLIBC_2.3.2 () from /usr/lib/libpthread.so.0; #2 0x00007f23441ba0d3 in ?? () from /usr/lib/libpython3.10.so.1.0; #3 0x00007f23441d85a2 in PyEval_RestoreThread () from /usr/lib/libpython3.10.so.1.0; #4 0x00007f23442f7cfd in ?? () from /usr/lib/libpython3.10.so.1.0; #5 0x00007f23441e8b23 in ?? () from /usr/lib/libpython3.10.so.1.0; #6 0x00007f23441de55f in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.10.so.1.0; #7 0x00007f23441e9538 in _PyFunction_Vectorcall () from /usr/lib/libpython3.10.so.1.0; #8 0x00007f23441dc328 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.10.so.1.0; #9 0x00007f23441e9538 in _PyFunction_Vectorcall () from /usr/lib/libpython3.10.so.1.0; #10 0x00007f23441d9ca5 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.10.so.1.0; #11 0x00007f23441e9538 in _PyFunction_Vectorcall () from /usr/lib/libpython3.10.so.1.0; #12 0x00007f23441d9ca5 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.10.so.1.0; #13 0x00007f23441f4cc5 in ?? () from /usr/lib/libpython3.10.so.1.0; #14 0x00007f23442da4f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9112#issuecomment-1011105337:56,inject,injecting,56,https://root.cern,https://github.com/root-project/root/issues/9112#issuecomment-1011105337,1,['inject'],['injecting']
Integrability,"That depends on how often we'd rebuild `rootcling_stage1` even though there was no need, i.e. we rebuild only due to the artificial order dependency. Do you have an estimate, @ellert ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1516#issuecomment-359757642:5,depend,depends,5,https://root.cern,https://github.com/root-project/root/pull/1516#issuecomment-359757642,2,['depend'],"['dependency', 'depends']"
Integrability,That depends on the implementation. If during the serialization you create a map member-name => value-as-string then it's easy to find dupe member names.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8181#issuecomment-842303270:5,depend,depends,5,https://root.cern,https://github.com/root-project/root/pull/8181#issuecomment-842303270,1,['depend'],['depends']
Integrability,That depends on when it's in a mergable state. Especially those https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/108798/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_treeprocessormt_remotefiles/ and friends seem relevant (IIRC @vepadulano had fixed this in the past?); @eguiraud confirmed that the rdf override / overwrite tests are already fixed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7335#issuecomment-790683439:5,depend,depends,5,https://root.cern,https://github.com/root-project/root/pull/7335#issuecomment-790683439,1,['depend'],['depends']
Integrability,"That doesn't really answer any of my two questions: There are other parties than us using the libc++ modulemap, notably Apple. Why don't they see this problem? And what is special about the two installations alluded to in the commit message, when it's working in the CI?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16494#issuecomment-2370376079:233,message,message,233,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2370376079,1,['message'],['message']
Integrability,"That was a miss-click (closing and reopening)! . That update isn't critical, because i use distribution with gcc-9. I just have tried to install root on a newer machine with gcc-11 and that issue came up. I'm using v6.16 since it has qt and qtgsi modules for easy integration in Qt applications.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9517#issuecomment-1010271846:264,integrat,integration,264,https://root.cern,https://github.com/root-project/root/pull/9517#issuecomment-1010271846,1,['integrat'],['integration']
Integrability,"That will be hard to respect, because that means unless we introduce a new `testsupport=OFF` configuration flag, gtest would always be a dependency of ROOT with `-fail-on-missing=ON` then. I don't see at the moment how I can respect all of these constraints:. 1. Keep configuration simple by not introducing new build flags; 2. Make `ROOT_ADD_GTEST` fully usable in downstream code even if ROOT was not built with unit tests; 3. Don't add `gtest` as an unavoidable build dependency of ROOT if you have `fail-on-missin=ON`; 4. Respect `fail-on-missing`. Which of these constraints should be relaxed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16612#issuecomment-2396463790:137,depend,dependency,137,https://root.cern,https://github.com/root-project/root/issues/16612#issuecomment-2396463790,2,['depend'],['dependency']
Integrability,"That will solve the build issue which is just a symptom. However, it will not solve the same problem at deployment time. It seems to be equivalent to removing the `root.exe -l -b -q tutorials/hsimple.C` check altogether. Even if we decided to go that route, I am not sure if we have that information in the right places in the build system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594#issuecomment-1025636393:251,rout,route,251,https://root.cern,https://github.com/root-project/root/issues/9594#issuecomment-1025636393,1,['rout'],['route']
Integrability,"That would be a good interface. There would always be a practical limit on the number of items that one could view, but suppose we just don't want to specify it (and risk running out of memory in extreme cases). Can `nItems = -1` or `nItems < 0` mean ""send me everything""? The function would still change `nItems` in place to tell the caller how many items are actually in the `const T*` that it returns. Also, who owns the `const T*` memory? Would deleting the `RNTupleView` free that `const T*`?. Might the `const T*` a concatenation of multiple pages, or is this still granular at the page level? If it can be a concatenation of multiple pages, then it would be a different buffer from the one the `RNTupleView` manages internally. If it could be _either a view or a copy_, then the `RNTupleView` must own it because this object would have the most information to keep track of whether its internal buffer-freeing frees the `const T*`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7112#issuecomment-825682200:21,interface,interface,21,https://root.cern,https://github.com/root-project/root/pull/7112#issuecomment-825682200,1,['interface'],['interface']
Integrability,"That's a good question. I did not see a practical use case for this in first place. It seems it has been introduced quite long ago in root-project/root@64e9dbe5c72c0ccc8a942e8cec19fbdfe81200bd However, it did not have any documentation (besides the commit message) and I doubt it was picked up by the users. The rootmaps are not deprecated by the release in the usual meaning of deprecation. From this release onward the rootmap files should be considered a legacy feature. We should limit their use because we have a superior system. I do not think the deprecation is premature. It will give us a better understanding if we need this option. If we do we should have something similar with modules, if we don't it would reduce the complexity of rootcling.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4716#issuecomment-570138706:256,message,message,256,https://root.cern,https://github.com/root-project/root/pull/4716#issuecomment-570138706,1,['message'],['message']
Integrability,"That's exactly the right observation! In fact the `ClassDef` and LinkDef entry for `RooMomentMorphND::Grid` is missing, so users could not do IO with it. Therefore, we have the nice opportunity to make the `RooMomentMorphND` consistent with the `RooMomentMorphFuncND` (for which the `Grid2` LinkDef entry exists) without breaking backwards compatibility. And if we see that these classes are just the same besides using a different base class, we can even remove `RooMomentMorphND` and tell users to use `RooMomentMorphFuncND` with the `RooPdfWrapper` adapter, like we do for many other classes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12000#issuecomment-1378797114:552,adapter,adapter,552,https://root.cern,https://github.com/root-project/root/pull/12000#issuecomment-1378797114,1,['adapter'],['adapter']
Integrability,That's great! Out of curiousity: How does the error message look like for `Filter('x = 0')`?\; And I don't think that this breaks any existing code. Writing back to the input arguments is clearly a super weird thing in RDF and would rely on implementation details that are not visible to the user.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6526#issuecomment-702072629:52,message,message,52,https://root.cern,https://github.com/root-project/root/pull/6526#issuecomment-702072629,1,['message'],['message']
Integrability,"That's great! Yes indeed the main purpose of the new test was to check that unknown arguments are kept by default and accessible to you. The case where unknown arguments are not accepted already calls `Terminate()` internally and we check that by looking at what's printed in `stderr`. The other case that needed calling `app.Run` then injecting something like `.q` it's unfeasible right now, but I take your confirmation that everything works well as a green light to close this issue. Thanks again for reporting and all your help, I will also make sure to backport the fixes so that you can benefit from them already in the next patch release :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10090#issuecomment-1068891196:336,inject,injecting,336,https://root.cern,https://github.com/root-project/root/issues/10090#issuecomment-1068891196,1,['inject'],['injecting']
Integrability,"That's how it works:. C++ code:. ``` cpp; PyRunString(""callbacks = [ }"", ""Stupid typo here"");; ```. Command line message:. ``` bash; <WARNING> : Failed to run python code: callbacks = [}; <WARNING> : Python error message:; File ""<string>"", line 1; callbacks = [ }; ^; SyntaxError: unexpected EOF while parsing; <FATAL> : Stupid typo here; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/278#issuecomment-251905535:113,message,message,113,https://root.cern,https://github.com/root-project/root/pull/278#issuecomment-251905535,2,['message'],['message']
Integrability,"That's true, the logo is nice! But wow, I just took a quick look, and this logo feature is not lightweight at all! It even adds a X11 / cocoa dependency for the ROOT interpreter that would be gone otherwise. Then there are also workarounds for cxxmodules, some `ifdefs`, etc. I'm checking in a PR what the implications for removing it would be.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14819#issuecomment-2018796159:142,depend,dependency,142,https://root.cern,https://github.com/root-project/root/issues/14819#issuecomment-2018796159,1,['depend'],['dependency']
Integrability,"That's what's written here:. ""; GitHub Actions usage is free for public repositories and self-hosted runners. For private repositories, each GitHub account receives a certain amount of free minutes and storage, depending on the product used with the account. By default, your account will have a spending limit of $0, which prevents additional usage of minutes or storage after you reach these limits. If you increase your spending limit above the default of $0, you will be billed for any minutes or storage beyond the limits, also called overages. GitHub charges usage to the account that owns the repository where the workflow is run. Any coupons on your account do not apply to GitHub Actions overages.; "". IIUC, there is no quota for public repos but the wording is very convoluted so maybe there is another interpretation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6720#issuecomment-719450116:211,depend,depending,211,https://root.cern,https://github.com/root-project/root/pull/6720#issuecomment-719450116,1,['depend'],['depending']
Integrability,"The ""Math/Error.h"" header is not shipped with standalone Minuit2. It is not a perfect solution to just ship it with Minuit2, because the Error.h header behaves differently depending on the `MATHCORE_STANDALONE` macro being defined or not. The code would only work correctly if the user defines the `MATHCORE_STANDALONE` herself in the user code that uses standalone Minuit2, which would be annoying. Instead, this commit proposes another solution to the problem: for all headers also used in Minuit2 standalone, MathCore; moves the definitions of all functions that use `Math/Error.h` out of the header files in the cxx files. Like this, the `Math/Error.h` is only a build dependency of standalone Minuit2, and the user doesn't need to define the `MATHCORE_STANDALONE` macro for it to work. Including the ""Math/Util.h"" header needs to be avoided for similar reasons (it's about another preprocessor macro related to `veccore`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13646:172,depend,depending,172,https://root.cern,https://github.com/root-project/root/pull/13646,2,['depend'],"['dependency', 'depending']"
Integrability,"The ""continuous-integration/travis-ci/pr"" test worked now. Are the Jenkins tests expected to work?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5159#issuecomment-628618973:16,integrat,integration,16,https://root.cern,https://github.com/root-project/root/pull/5159#issuecomment-628618973,1,['integrat'],['integration']
Integrability,"The CI build error detection logic is not very clever.; I quoted the error the PR is fixing in the git commit message.; The CI build puts the commit message from the PR in the CI build log.; Then scans the log for errors and tags the quoted error in the commit message as a failure...; The log actually says: 100% tests passed, 0 tests failed out of 1120",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8366#issuecomment-856589322:110,message,message,110,https://root.cern,https://github.com/root-project/root/pull/8366#issuecomment-856589322,3,['message'],['message']
Integrability,"The CI warnings and error are not related to the changes in this PR. They seem to be related to the external dependencies TBB, CFITSIO, and GSL.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9157#issuecomment-948684699:109,depend,dependencies,109,https://root.cern,https://github.com/root-project/root/pull/9157#issuecomment-948684699,1,['depend'],['dependencies']
Integrability,"The CMake build is now much more heavily integrated with the folder structure. This has the positive side that less copying is going on, and the downside that it has to fill in the source directory with the items it needs from ROOT (they are ignored and easy to clean with `make purge`, though). Like before, you can build in place or make a redistributable source package. Only added one `.gitignore`. Haven't really touched the ROOT Minuit2 build system, though some fixes would be good there too, but that's a later PR. (Instructions have not been updated to new version yet, and not as well tested yet). I can revert to the old system if that's better. The original reason for using CMake to do the copy also was because that avoided having to write a `.sh` file, and was more portable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1680#issuecomment-369603935:41,integrat,integrated,41,https://root.cern,https://github.com/root-project/root/pull/1680#issuecomment-369603935,1,['integrat'],['integrated']
Integrability,"The Core module is now just called `Core`, and no longer `libCore.so`,; which leads to the confusing PCM file name `libCore.so.pcm` which is 75%; just boilerplate prefixes and suffixes. This also make the error; messages from clang more readable now as they use the same module name.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/878:212,message,messages,212,https://root.cern,https://github.com/root-project/root/pull/878,1,['message'],['messages']
Integrability,The EnableAutoLoading interface needs to know about the internal TCling implementation to safely enable the autoloading facility in ROOT. Calling this interface cannot be user responsibility as he/she should not know the initialization details of TCling. Make this interface a nop and add a deprecation warning. This should resolve ROOT-10514 and ROOT-10528.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4868:22,interface,interface,22,https://root.cern,https://github.com/root-project/root/pull/4868,3,['interface'],['interface']
Integrability,"The GitHub interface strips GPG signatures from the commits. I usually merge on my laptop and push, and that way it's as if I pressed merge, but I can keep the GPG signatures. As for the commit, if you look at the date, you'll see it's from a while ago, when I was working on I/O optimizations. I was just trying to improve readability and test range for with ROOT containers. Yes, it works :-) So, I guess we should be trying to use this more than the usual while loop. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/908#issuecomment-326009755:11,interface,interface,11,https://root.cern,https://github.com/root-project/root/pull/908#issuecomment-326009755,1,['interface'],['interface']
Integrability,"The Oracle interface was deprecated in ROOT 6.30 and scheduled for removal in 6.32. As we are now in the 6.32 development cycle, everything related to `oracle` can be removed. See also 1c74d59d.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14828:11,interface,interface,11,https://root.cern,https://github.com/root-project/root/pull/14828,1,['interface'],['interface']
Integrability,The PR depends on #5285 to implement the `Numba` namespace lazily.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5310#issuecomment-610223161:7,depend,depends,7,https://root.cern,https://github.com/root-project/root/pull/5310#issuecomment-610223161,1,['depend'],['depends']
Integrability,"The PROOF interface in RooFit/RooStats didn't work anymore for a long time, so nobody will be suprised if this is removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14993:10,interface,interface,10,https://root.cern,https://github.com/root-project/root/pull/14993,1,['interface'],['interface']
Integrability,"The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15543:884,depend,depend,884,https://root.cern,https://github.com/root-project/root/pull/15543,1,['depend'],['depend']
Integrability,"The Pythia 6 interface was deprecated in ROOT 6.30 and scheduled for removal in 6.32. As we are now in the 6.32 development cycle, everything related to `pythia6` can be removed. See also 1c74d59d.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14823:13,interface,interface,13,https://root.cern,https://github.com/root-project/root/pull/14823,1,['interface'],['interface']
Integrability,The RDF dependencies were cleaned up in commit 8d7fa5f87c and commit f215692b3d removed the RDF unit test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16292:8,depend,dependencies,8,https://root.cern,https://github.com/root-project/root/pull/16292,1,['depend'],['dependencies']
Integrability,"The RException class is supposed to serve as base class for all ROOT; exceptions. It contains an `RError` member with diagnostic information.; The `RResult<T>` class can be used as a return value of operations that; may fail. The `RResult<T>` object wraps either a valid value or an `RError`.; If an error state remains unchecked, the `RResult` class will throw an; exception on destruction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4683:250,wrap,wraps,250,https://root.cern,https://github.com/root-project/root/pull/4683,1,['wrap'],['wraps']
Integrability,"The RNTupleUtil standard library should contain data transformation and inspection tools for RNTuples. To start with, it contains the stub class RNTupleImporter that will convert TTrees to RNTuple. In the future, we may add, e.g., visualization and debugging tools. While the RNTuple core library should remain light on dependencies, the RNTupleUtil library may depend on Tree, graphics, RDF and the rest of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11753:320,depend,dependencies,320,https://root.cern,https://github.com/root-project/root/pull/11753,2,['depend'],"['depend', 'dependencies']"
Integrability,"The ROOT file datasource, `RRootDS`, was a proof of concept to show that RDF's generic data-source API could cover cases as complex as ROOT files. However, it never reached feature parity with the no-datasource, integrated TTree reading case (nor it was meant to). In this PR:. 1. Make ROOT::MakeRootDataFrame equal to standard constructors: ; RRootDS does not support the same set of features as ""standard"" RDF,; and this can be very surprising, see e.g.; https://root-forum.cern.ch/t/chaining-rdataframe-define-does-not-work-in-some-cases/38213; With this change, ROOT::MakeRootDataFrame returns a ""normal"" RDF, with; all expected features. This resolves ROOT-10596.; 2. Remove MakeROOTDatFrame tutorials:; `MakeRootDataFrame` is not a feature we want to advertise. RDataFrame's class constructors provide same or better functionality.; 3. Deprecate RRootDS's constructor:; users should not be constructing RRootDS directly anyway. They should; do so via `MakeRootDataFrame`, which from the next version will instead; construct a standard dataframe with no datasource.; We deprecate RRootDS's constructor as an extra cautionary measure,; so we can move RRootDS out of the public namespace and into the; internal namespace soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5516:212,integrat,integrated,212,https://root.cern,https://github.com/root-project/root/pull/5516,1,['integrat'],['integrated']
Integrability,The ROOT-ubuntu16/rtcxxmod. failure is due to 'stale' dependencies in the build system (the file has been removed from the repository).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4399#issuecomment-533575316:54,depend,dependencies,54,https://root.cern,https://github.com/root-project/root/pull/4399#issuecomment-533575316,1,['depend'],['dependencies']
Integrability,"The RapidYAML of the RooFit JSON interface is now always disabled because it doesn't work anymore for RooFitHS3. The `nlohmann_json` interface is always used and works well, hence rapidyaml was not tested anymore and the code was rotting until it didn't work. The relevant code is still left in the CMakeLists.txt in case someone wants to revive the RapilYAML backend. Closes #15118. Backport of https://github.com/root-project/root/pull/15247.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15260:33,interface,interface,33,https://root.cern,https://github.com/root-project/root/pull/15260,6,['interface'],['interface']
Integrability,"The RapidYAML of the RooFit JSON interface is now always disabled because it doesn't work anymore for RooFitHS3. The `nlohmann_json` interface is always used and works well, hence rapidyaml was not tested anymore and the code was rotting until it didn't work. The relevant code is still left in the CMakeLists.txt in case someone wants to revive the RapilYAML backend. Closes #15118. Should be backported up to 6.28.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15247:33,interface,interface,33,https://root.cern,https://github.com/root-project/root/pull/15247,2,['interface'],['interface']
Integrability,"The RooBatchCompute library should not need to know about the data map; implementation. It does not depend on the architecture, and also there; are often incompatibilities when using `std::map` (or; `std::unordered_map`) with nvcc with the standard library headers on the; system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10590:100,depend,depend,100,https://root.cern,https://github.com/root-project/root/pull/10590,1,['depend'],['depend']
Integrability,"The RooCmdArg has 2 slots for arbitrary TObject payloads, and 2 slots for RooArgSet payloads. Which slot is used depends on the position of the argset in the [RooCmdArg constructor](https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooCmdArg.cxx#L79), which was changed in this PR to use the 1st TObject slot instead of the RooArgSet slot. Now, using RooCmdConfig::decodeObjOnTheFly works, but that also means we have to use `defineObject` instead of `defineSet` in other places. Alternatively, I could have implemented a new function `RooCmdConfig::decodeSetOnTheFly`, but I didn't think this interface extension was necessary because we already store RooArgSets in the TObject slots on most other occasions (see for example [ProjWData()](https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooGlobalFunc.cxx#L46)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8299#issuecomment-852229545:113,depend,depends,113,https://root.cern,https://github.com/root-project/root/pull/8299#issuecomment-852229545,2,"['depend', 'interface']","['depends', 'interface']"
Integrability,"The RooHistPdf and RooHistFunc should be able to do analytic integration if the input is a linear transformation of a variable using RooLinearVar. This makes the fits faster where one wants to shift a template on the x-axis, which is for example talked about in this forum post: https://root-forum.cern.ch/t/roofit-pdf-normalization-integration/53905",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12482:61,integrat,integration,61,https://root.cern,https://github.com/root-project/root/pull/12482,2,['integrat'],['integration']
Integrability,"The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13336:58,wrap,wrapper,58,https://root.cern,https://github.com/root-project/root/pull/13336,5,"['depend', 'integrat', 'wrap']","['dependencies', 'integration', 'wrapper']"
Integrability,"The RooMinimizer interface does not allow for changing the number of points on a likelihood contour.; By promoting this parameter to a default argument, this is now accessible to the user.; Doxygen was updated accordingly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3327:17,interface,interface,17,https://root.cern,https://github.com/root-project/root/pull/3327,1,['interface'],['interface']
Integrability,"The RooProdPdf is not trivial to deal with in BatchMode, because its; actual servers depend on the normalization set. One should rather think of the RooProdPdf as something like a caching; PDF, but instead of creating a cached HistPdf for a given normalization; set, it creates an internal computation graph representing the; normalized product for a given normalization set. This internal computation graph is not expsed via the usual; client-server interface. However, this is strictly required for the new; BatchMode: internal computation graphs are not allowed because the; RooFitDriver would not be able to manage memory copies between host and; device, and also schedeuling. For this reason, BatchMode support is removed from the RooProdPdf class.; We only keep a `RooProdPdf::calculateBatch` function that can be used to; evaluated a given cache element when all the internal args are contained; in the BatchMode data map. To correctly evaluate these computation graphs in the batchMode, a new; class is introduced that wraps them with the correct client-server; interface. Instances of this class are then created for each ProdPdf in; the original computation graph, and the ProdPdfs are replaced with these; objects. This means all the different RooProdPdf cache configurations are now; correctly dealt with in the BatchMode, making the; `RooProdPdf/TestProdPdf.CachingOpt` unit test also pass with the; BatchMode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11400:85,depend,depend,85,https://root.cern,https://github.com/root-project/root/pull/11400,4,"['depend', 'interface', 'wrap']","['depend', 'interface', 'wraps']"
Integrability,"The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++; RooWorkspace ws;; ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");; RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};; integral->Print(""v"");; std::cout << integral->getVal() << std::endl;; ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13334:227,wrap,wrapping,227,https://root.cern,https://github.com/root-project/root/pull/13334,1,['wrap'],['wrapping']
Integrability,"The RooRealMPFE class is an implementation detail of the old RooFit multiprocessing. It should not be part of the public interface, and also not have a `ClassDef` that allows you to do IO with it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16346:121,interface,interface,121,https://root.cern,https://github.com/root-project/root/pull/16346,1,['interface'],['interface']
Integrability,The TBB dependency in Thread was not intended to leak to user code. Instead the header file ROOT/TReentrantRWLock.hxx needs to become a private header (move from inc/ROOT to src).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8022#issuecomment-828800284:8,depend,dependency,8,https://root.cern,https://github.com/root-project/root/issues/8022#issuecomment-828800284,1,['depend'],['dependency']
Integrability,"The TFile objects need to be closed before the ROOT files can be; deleted. Otherwise, we get errors such as these on Windows 10:. ```; Traceback (most recent call last):; File ""C:/build/night/LABEL/windows10/SPEC/default/V/master/root/tutorials/pyroot/pyroot006_tcontext_context_manager.py"", line 56, in <module>; os.remove(""pyroot006_file_{}.root"".format(i)); PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'pyroot006_file_1.root'; CMake Error at C:/build/night/LABEL/windows10/SPEC/default/V/master/build/RootTestDriver.cmake:227 (message):; error code: 1; ```. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/testReport/projectroot/runtutorials/tutorial_pyroot_pyroot006_tcontext_context_manager_py/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10378:597,message,message,597,https://root.cern,https://github.com/root-project/root/pull/10378,1,['message'],['message']
Integrability,"The TRandom3 generator was observed to fail; a very simple test on the SetSeed/GetSeed interface:. ```; gRandom->SetSeed(11);; auto a = gRandom->GetSeed();; gRandom->SetSeed(12);; auto b = gRandom->GetSeed();; assert(a != b);; ```. Indeed a `GetSeed()` following any `SetSeed(seed)` call always returns the magic number 624. This is because in the current implementation. `GetSeed() { return fMT[fCount624]; }`. we access memory location `fMT[624]` which does not exist in fMT ... and so the value of fCount624 is returned, which happens to be `624`. This commit fixes this bug by imposing an index range between 0 and 623.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14135:87,interface,interface,87,https://root.cern,https://github.com/root-project/root/pull/14135,1,['interface'],['interface']
Integrability,"The UI says:; > Input 'version' has been deprecated with message: The version property will not be supported after October 1, 2019. Use node-version instead. Also bump to the latest NodeJS version 16.x which will become the next LTS version in October and be supported until 2024 (12.x will go EOL in April 2022, next year).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8680:57,message,message,57,https://root.cern,https://github.com/root-project/root/pull/8680,1,['message'],['message']
Integrability,"The [TDirectory::WriteObject](https://github.com/root-project/root/blob/35b5aaef38b6635e131e7d93a0c96f69bb293b9d/core/base/inc/TDirectory.h#L265-L268) method allows writing objects to files. If the written object actually has a title, this should be discarded because the function doesn't manage it as a TObject-derived instance on purpose. For example, the program below:. ```cpp; int main(){; TFile f{""myfile.root"",""recreate""};; TH1F h{""myhistoname"",""myhistotitle"",100,0,100};; f.WriteObject(&h, h.GetName());; f.Close();; }; ```. When executed creates a file where the object ""h"" gets the default title ""object title"":. ```bash; $ rootls -l myfile.root; TH1F Aug 21 10:41 2021 myhistoname;1 ""object title""; ```. This is because The [TKey constructor that accepts a void pointer](https://github.com/root-project/root/blob/35b5aaef38b6635e131e7d93a0c96f69bb293b9d/io/io/src/TKey.cxx#L299-L300) calls the parent TNamed constructor with a default title, because in general there is no guarantee the object has the interface `GetTitle(),SetTitle()` and there is no extra ""title"" parameter to the constructor. This commit provides a solution by creating a new overload for `TDirectory::WriteObject`, using SFINAE to make it available for types that are derived from TObject. The method redirects to `WriteTObject` instead of `WriteObjectAny`. This way, the correct TKey constructor is called that uses the actual object title. As a result, the example above will now output a file like this:. ```; $ rootls -l myfile.root; TH1F Aug 21 11:00 2021 myhistoname;1 ""myhistotitle""; ```. The already present method is modified with SFINAE as well, to only be available if the type T of the template is not derived from TObject.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8934:1013,interface,interface,1013,https://root.cern,https://github.com/root-project/root/pull/8934,1,['interface'],['interface']
Integrability,"The [TKey constructor that accepts a void pointer](https://github.com/root-project/root/blob/35b5aaef38b6635e131e7d93a0c96f69bb293b9d/io/io/src/TKey.cxx#L299-L300) calls the parent TNamed constructor with a default title, because in general there is no guarantee the object has the interface `GetTitle(),SetTitle()` and there is no extra ""title"" parameter to the constructor. This leads though to some weird situations when using the [TDirectory::WriteObject](https://github.com/root-project/root/blob/35b5aaef38b6635e131e7d93a0c96f69bb293b9d/core/base/inc/TDirectory.h#L265-L268) method to write objects to files. If the written object actually has a title, this would be discarded because the function doesn't manage it as a TObject-derived instance on purpose. For example, the program below:. ```cpp; #include <TFile.h>; #include <TH1F.h>. int main(){; TFile f{""myfile.root"",""recreate""};; TH1F h{""myhistoname"",""myhistotitle"",100,0,100};; f.WriteObject(&h, h.GetName());; f.Close();; }; ```. When executed creates a file where the object ""h"" gets the default title ""object title"":. ```bash; $ rootls -l myfile.root; TH1F Aug 21 10:41 2021 myhistoname;1 ""object title""; ```. This commit adds an extra check in the TKey constructor above. If the object is derived from TNamed, then we know that it has a title (either empty or provided by the user), so we should use that instead of ""object title"". It could be interesting to have a way to; generalise this to classes that have a `GetTitle(), SetTitle()` interface, but it would be more difficult. After this commit, the example; above outputs a file that contains the histogram object with the correct title:. ```bash; $ rootls -l myfile.root; TH1F Aug 21 11:00 2021 myhistoname;1 ""myhistotitle""; ```. ## Note; This commit provides an idea of a fix, if there's a faster way to get to the object title that doesn't involve all those casts it would be great :smile:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8879:282,interface,interface,282,https://root.cern,https://github.com/root-project/root/pull/8879,2,['interface'],['interface']
Integrability,"The [documentation](https://cmake.org/cmake/help/latest/command/enable_language.html) says:. > Enable a language (CXX/C/Fortran/etc); >; >**enable_language(<lang> [OPTIONAL] )**; >This command enables support for the named language in CMake. This is the same as the; >project command but does not create any of the extra variables that are created by the; >project command. Example languages are CXX, C, Fortran.; >; >This command must be called in file scope, not in a function call. Furthermore, **it must; >be called in the highest directory common to all targets using the named language**; >directly for compiling sources or indirectly through link dependencies. It is simplest to; >enable all needed languages in the top-level directory of a project.; >; >The **OPTIONAL** keyword is a placeholder for future implementation and **does not currently work**. So, should we just add this logic directly into the top `CMakeLists.txt` file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/891#issuecomment-325334622:654,depend,dependencies,654,https://root.cern,https://github.com/root-project/root/pull/891#issuecomment-325334622,1,['depend'],['dependencies']
Integrability,"The _column model_ turned into an unnecessary wrapper for the column type. The patch replaces the use of the column model by using directly the column type. Along with it, some unused flags of the column information in the header are removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15991:46,wrap,wrapper,46,https://root.cern,https://github.com/root-project/root/pull/15991,1,['wrap'],['wrapper']
Integrability,"The `#include <ROOT/TPadPos.hxx> ` seems to be gone, but the `#include <ROOT/TPad.hxx>` is still a wrong dependency it seems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2091#issuecomment-392058496:105,depend,dependency,105,https://root.cern,https://github.com/root-project/root/pull/2091#issuecomment-392058496,1,['depend'],['dependency']
Integrability,The `.ref` file in roottest now depends on the presence of `root7`... I'll see how to inject this knowledge in roottest,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13090#issuecomment-1665296956:32,depend,depends,32,https://root.cern,https://github.com/root-project/root/pull/13090#issuecomment-1665296956,2,"['depend', 'inject']","['depends', 'inject']"
Integrability,"The `Blas.h` header is only used by the tmva-cpu implementation, so it should be made private by moving it to `src`. The problem with having it in `inc` was that this header included GSL, and therefore GSL appeared to be a public dependency of TMVA, which is not true. Closes #14263.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14330:230,depend,dependency,230,https://root.cern,https://github.com/root-project/root/pull/14330,1,['depend'],['dependency']
Integrability,"The `CheckGradient()` interface was removed, since it had no effect as you said:; https://github.com/root-project/root/commit/94549da66304cd9a94a256620abb09e5fbd1079d. It's also on our radar that numeric gradients are still used for things like the seeding step. We're working towards making Minuit 2 ""numeric gradient free"" as well. If you think this should be tracked separately, feel free to re-open a new issue about this specific subject! Thanks for your input.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8716#issuecomment-2353661996:22,interface,interface,22,https://root.cern,https://github.com/root-project/root/issues/8716#issuecomment-2353661996,1,['interface'],['interface']
Integrability,"The `RPyROOTApplication` is a `TApplication` that sets up the nuts and bolts for interactive ROOT use from Python, closely following `TRint`. This PR adds the basic behaviour for `TApplication` implemented in C++, i.e. parsing of arguments, configuration of some ROOT globals and setup of an error message handler that is able to translate ROOT warnings into Python warnings. The custom parsing of arguments can be disabled by the user by specifying a configuration option after importing ROOT:; ```python; import ROOT; ROOT.PyConfig.IgnoreCommandLineOptions = True; ```. Moreover, this PR also brings in some logic that is located in `ROOT.py` in the current PyROOT. Such logic makes it possible to use ROOT interactive graphics from Python. The graphics are activated only if the batch mode is off, and they are configured by means of hooks: no thread is explicitly created to process the GUI events as before. The batch mode can be activated by doing:; ```python; import ROOT; ROOT.gROOT.SetBatch(True); ```; or in the command line:; ```bash; > python my_script.py -b; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3731:298,message,message,298,https://root.cern,https://github.com/root-project/root/pull/3731,1,['message'],['message']
Integrability,"The `RRawFileTFile` wraps an open `TFile`, but does not take ownership. This enables opening `RNTuple` anchors from `TFile`s that are not natively supported by `RRawFile`, for example `TMemFile` as used by `TBufferMerger`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14867:20,wrap,wraps,20,https://root.cern,https://github.com/root-project/root/pull/14867,1,['wrap'],['wraps']
Integrability,The `Require*` tests are testing that we correctly check for error conditions -- that should not depend on ST vs MT (but as you saw it might happen that if we check in each thread we get the error message printed N times),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10715#issuecomment-1152086743:97,depend,depend,97,https://root.cern,https://github.com/root-project/root/pull/10715#issuecomment-1152086743,2,"['depend', 'message']","['depend', 'message']"
Integrability,"The `RooAbsBinning` interface for bin index lookups was changed to; enable vectorized implementations. Instead of having the override; `RooAbsBinning::binNumber()`, the binning implementations now have to; override the `RooAbsBinning::binNumbers()` function to evaluate the bin; indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate; the accregation of bin indices over multiple dimensions, and it uses a; `double` ouput vector such that the caller can reuse the output buffer; for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms; of the vectorized version, such that we automatically get wide test; coverage. It was verified that this doesn't come with a performance; overhead. This will greatly facilitate the vectorization of the RooHistPdf and; RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11151:20,interface,interface,20,https://root.cern,https://github.com/root-project/root/pull/11151,2,['interface'],['interface']
Integrability,"The `RooAbsL` class is implemented for four kinds of likelihoods: binned, unbinned, ""subsidiary"" (an optimization for numerical stability that gathers components like global observables) and ""sum"" (over multiple components of the other types). These classes provide ways to compute their components in parallelizable chunks that can be used by the calculator classes as they see fit. On top of the likelihood classes, we also provide for convenience a set of likelihood builders. The calculator ""`...Wrapper`"" classes are abstract interfaces. These can be implemented for different kinds of algorithms, or with different kinds of optimization ""back-ends"" in mind. In an upcoming PR, we will introduce the fork-based multi-processing implementation based on `RooFit::MultiProcess`. Other possible implementations could use the GPU or external tools like TensorFlow. The coupling of all these classes to `RooMinimizer` is made via the `MinuitFcnGrad` class, which owns the `...Wrappers` that calculate the likelihood components. ## Todo:. There are still a couple of things that require attention, which I hope the reviewers can help me with:. 1. I have a Kahan summation helper class. This should probably be replaced with the new Kahan summation class in ROOT itself, but I didn't get to this yet. Maybe it is not urgent to do now, up for discussion.; 2. `likelihood_builders.cxx` is still missing the top level entry point function. This should be quite a simple function: it should just check whether the pdf is binned, unbinned or sum and has subsidiary terms. All the building blocks are already present, so it is just a matter of building it, but didn't get to it yet.; 3. `optional_parameter_types.h`: maybe we could replace this with @guitargeek's new configuration structs.; 4. `testRooRealL.getValRooAddition` fails because it doesn't know `RooFormulaVar`... I'm not sure what this means, but I vaguely remember that (I think) @hageboeck and @cburgard were talking about this, so I was hoping",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8700:1274,Wrap,Wrappers,1274,https://root.cern,https://github.com/root-project/root/pull/8700,1,['Wrap'],['Wrappers']
Integrability,"The `RooAbsReal::createIntegral()` function returns an owning pointer,; so the return value needs to be wrapped in an `std::unique_ptr`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9477:104,wrap,wrapped,104,https://root.cern,https://github.com/root-project/root/pull/9477,1,['wrap'],['wrapped']
Integrability,The `RooCFunction*Binding` classes and the associated `RooFit::bindFunction()` and `RooFit::bindPdf()` functions are deprecated and will be removed in ROOT 6.32. Their functionality is redundant with the `RooFormulaVar` and `RooGenericPdf` that should be used instead. This is another deprecation done in the spirit of avoiding duplicate interfaces and user confusion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11983:338,interface,interfaces,338,https://root.cern,https://github.com/root-project/root/pull/11983,1,['interface'],['interfaces']
Integrability,"The `RooEffProd` class contains some caching logic to always provide a; normalization set to the integrated pdf. However, this should better not; be done, because as the the former documentation sais it ""breaks the; default RooAbsPdf normalization handling"". It is also inconsistent,; because, other RooFit classes like `RooProduct` don't do that. Also, it is not the task of the RooEffProd to protect pdfs from being; evaluated without normalization set if their shape depends on it. The; concerned pdfs (like RooAddPdf) already do that themselves. The reason why this is removed now it that the caching of normalization; integrals doesn't work with the new RooFit batch mode. This commit is tested by the `stressRooFit` unit test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10100:97,integrat,integrated,97,https://root.cern,https://github.com/root-project/root/pull/10100,2,"['depend', 'integrat']","['depends', 'integrated']"
Integrability,"The `RooGenFunction` was only a lightweight adaptor that exports a RooAbsReal as a `ROOT::Math::IGenFunction`. The same can be easily achieved with the generic `ROOT::Math::Functor1D`, so in the spirit of not duplicating interfaces, the `RooGenFunction` is removed. The same goes for the `RooMultiGenFunction`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11981:221,interface,interfaces,221,https://root.cern,https://github.com/root-project/root/pull/11981,1,['interface'],['interfaces']
Integrability,"The `RooGrid` is a utility class for the `RooMCIntegrator`, which doesn't support IO itself. Therefore, it doesn't make sense to have a `ClassDef(1)` macro. It is only putting the unnecessary burden of keeping backwards compatibility on the developers. Therefore, this commit suggests to leave out the `ClassDef` macro out of `RooGrid`, and also remove the unnecessary base classes `TObject` and `RooPrintable`. There is only one printing function that makes sense anyway, which is kept without implementing the full `RooPrintable` interface.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11963:532,interface,interface,532,https://root.cern,https://github.com/root-project/root/pull/11963,1,['interface'],['interface']
Integrability,"The `RooRealIntegral` class is smart enough to figure out which; variables the function the integrated function doesn't depend on and; trivially integrates them itself by multiplying with the variable; definition range. However, if the integration range is a subrange of the variable range,; this was not considered. This resulted in wrong results. for integrals; like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend; on x. These kind of integrals can occur in the projections that the; RooAddPdf does, so it's important that they work, and fixing this; partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which; also used these kind of integrals. Without this fix, the `Integrate()`; feature for `chi2FitTo()` was completely broken, which can be seen in; the output of the `rf609` tutorial with any previous ROOT version. The; tutorial looks okay by chance, because the function is dominted by the; quadratic term in `x` that is constant in the fit. But if one makes this; a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set; constant to begin with, to sweep the bug under the rug. Now, the; tutorials are updated to have the quadratic coefficient floating too.; And also `stressRooFit`, since the reference file has to be updated; anyway. To demonstrate that things work correctly now, a new unit test was; implemented that does the closure check of the `integrate()` feature of; the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12011:92,integrat,integrated,92,https://root.cern,https://github.com/root-project/root/pull/12011,7,"['Integrat', 'depend', 'integrat']","['Integrate', 'depend', 'integrate', 'integrated', 'integrates', 'integration']"
Integrability,"The `RooSTLRefCountList` is used in the `RooAbsArg` client server ; interface, which is why speeding up lookup operations is very important ; for large models. ; ; With this commit: ; ; The `RooSTLRefCountList` is used in the `RooAbsArg` client server; interface, which is why speeding up lookup operations is very important; for large models. With this commit:. * A `RooSTLRefCountList` has an additinal member that tracks the; ordering of the elements by `RooAbsArg::namePtr()` address. * Subsequently, looking up elements by name pointer is much faster. * Care was taken to handle the case where elements already in the; collection get renamed (see inline documentation and unit test). * The `RooSTLRefCountList` can notice if it was read from IO and; determine the ordering before doing any lookups. As far as I can tell, this change has now drawbacks other than some; increased memory usage. The order of the elements is still the same, so; no user code should be affected.; ; As far as I can tell, this change has now drawbacks other than some ; increased memory usage. The order of the elements is still the same, so ; no user code should be affected. Benchmark before this commit ([profile](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/VHbb-STXS_mu__createNLL)):; ```; ---------------------------------------------------------------------------------; Benchmark Time CPU Iterations; ---------------------------------------------------------------------------------; VHbb-STXS_mu__createNLL/0/iterations:1 14.1 s 14.0 s 1. ```; Benchmark after this commit ([profile](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/VHbb-STXS_mu__createNLL_2)):; ```; ---------------------------------------------------------------------------------; Benchmark Time CPU Iterations; ---------------------------------------------------------------------------------; VHbb-STXS_mu__createNLL/0/iterations:1 5.13 s 5.13 s 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9403:68,interface,interface,68,https://root.cern,https://github.com/root-project/root/pull/9403,2,['interface'],['interface']
Integrability,"The `TestGauss` unit tests in roottest are failing with Jonas' ROOT; build (gcc 10 on Arch Linux). The failure was tracked down to a; `nullptr` dereferencing in when accessing `RunContext::spans`. The origin of the `nullptr` is in `RooVectorDataStore::getBatches`,; where the `unordered_map` with pointers to the variables is filled via; `unordered_map::emplace`. For some reason, the key becomes a nullptr; *right after emplacing* ([link to code](https://github.com/root-project/root/blob/https://github.com/root-project/root/blob/9296e5ed912b3010456fa4b50db77f2c4c97a09a/roofit/roofitcore/src/RooVectorDataStore.cxx#L1345/roofit/roofitcore/src/RooVectorDataStore.cxx#L1345)). For some other reason, wrapping the `RooAbsReal const*` pointer in a; struct that is used as the key for `RunContext::spans` solves the; problem. This is implemented in this commit. This PR is more of a draft PR for now, because before merging I would really like to understand what's going on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8590:701,wrap,wrapping,701,https://root.cern,https://github.com/root-project/root/pull/8590,1,['wrap'],['wrapping']
Integrability,"The `_chg_truncated` functions, e.g. `unur_hinv_chg_truncated` and `unur_tdr_chg_truncated`, change the range of sampled random variables without expensive reinitialization of the generator. So first one initializes the generator with a pdf with a domain (xmin, xmax) and later changes the range in which numbers are actually sampled from (xmin, xmax) to (xmin1, xmax1) which is a sub-range of (xmin, xmax). For methods which do not support this functionality the only option is to change the domain and reinitialize the generator. My use case is that I have a pdf for which I need to change the sampling range for every sample, because it depends on kinematic limits for the given event, although the pdf does not change. Obviously reinitializing the generator would be very costly for the performance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7332#issuecomment-880485959:640,depend,depends,640,https://root.cern,https://github.com/root-project/root/issues/7332#issuecomment-880485959,1,['depend'],['depends']
Integrability,"The `bool` columns in RDF are special, because the Take action returns a `std::vector<bool>`, which has an implementation-depended memory layout for space optimization. Therefore, I suggest supporting taking `bool` columns as `unsigned char` with `Take()`, such that in `RDataFrameAsNumpy` the values can be directly taken as bytes. This avoids superfluous copying in the code, and keeps the special logic in the pythonization side minimal. Closes #8639.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15180:122,depend,depended,122,https://root.cern,https://github.com/root-project/root/pull/15180,1,['depend'],['depended']
Integrability,"The `c++ --print-file-name` command now seems to work, and it is indeed the more appropriate way to get the location of the asan shared library on MacOS. Also fix the following problems occurring when building on MacOS with -Dasan=ON. Error:; ```; CMake Error at cmake/modules/CheckAtomic.cmake:59 (message):; Host compiler appears to require libatomic, but cannot find it.; ```; Fix: fix typos in asan symbols (extra `_`) and specify correct linker flag (-U). Error:; ```; error: static AddressSanitizer runtime is not supported on darwin; ```; Fix: remove `-static-libsan` flag. This is required by latest MacOS Xcode",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16499:299,message,message,299,https://root.cern,https://github.com/root-project/root/pull/16499,1,['message'],['message']
Integrability,"The `computeCategoryOldStyle` function in the RooMultiCategory class; gave wrong results in case the multi-category uses categories where the; ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for; assertions in debug mode, this caused unnecessary assertion failures as; reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in; `RooMultiCategory::evaluate()` clearly demonstrated that the old-style; implementation is wrong. As the new implementation is already tested for a few releases now, the; most sustainable way to fix the wrong assertion failure is to simply; remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated; `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that; deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11117:791,interface,interfaces,791,https://root.cern,https://github.com/root-project/root/pull/11117,1,['interface'],['interfaces']
Integrability,"The `dnn_cuda` library is only an intermediate library that is not meant to be installed with ROOT, so it needs to be static since TMVA needs to export its dependencies and if this library is shared; the dependency won't be there after a `make install'. Therefore the error in CMake:. ```; CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""TMVA"" which requires target ""dnn_cuda"" that is not in the export set.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3066:156,depend,dependencies,156,https://root.cern,https://github.com/root-project/root/pull/3066,2,['depend'],"['dependencies', 'dependency']"
Integrability,"The `file://` prefix is lost here:. https://github.com/root-project/root/blob/8cc176c9ee7dde3b72501a2b657534bc6bd10418/tree/tree/src/TChain.cxx#L485. (this is in `TChain::AddFile` but `TChain::Add` also ends up here). `basename` is the file name stripped of the `file://` prefix and it is what's used to form the file name that's passed to the `TChainElement` constructor later (which is what stores the information about each sub-tree in the chain). It looks like special-casing `file://` is a deliberate choice, here's where just for `file://` we take the URL without the protocol:. https://github.com/root-project/root/blob/8cc176c9ee7dde3b72501a2b657534bc6bd10418/tree/tree/src/TChain.cxx#L2159",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11644#issuecomment-1297193223:574,protocol,protocol,574,https://root.cern,https://github.com/root-project/root/pull/11644#issuecomment-1297193223,1,['protocol'],['protocol']
Integrability,"The `math/mlp` library is very small and has no dependencies outside the minimal ROOT:; https://github.com/root-project/root/blob/master/math/mlp/CMakeLists.txt. Therefore, I think it's not worth it to have an extra build option to disable this component. Removing build options helps in reducing the test matrix and user confusion.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13862:48,depend,dependencies,48,https://root.cern,https://github.com/root-project/root/pull/13862,1,['depend'],['dependencies']
Integrability,"The `root-project:v6-24-00-patches` branch has been compared to `v6-23-01-RF-binSampling`, by means of 3 different kind of fits to (ATLAS) analytic models: 'small' and 'large' fits without RooBinSamplingPdf, and one analytic-PDF fit with the RooBinSamplingPdf functionality activated. ; Fit results are identical and (real/cpu) runtimes are not significantly different. In particular, for the small fit we have 0.01 min (real runtime) against both tags. For the large one we have 0.10 min in 6.24 vs. 0.08 min in 6.23. ; For the fit with analytical-PDF integration we observe 5.03 and 6.03 min in 6.24 and 6.23, respectively.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8579#issuecomment-872987646:553,integrat,integration,553,https://root.cern,https://github.com/root-project/root/pull/8579#issuecomment-872987646,1,['integrat'],['integration']
Integrability,"The `test.cmake` script is meant to automate some of the standard configure, build, test, install cycle during development, but also for continuous integration. The script can be generically called as; ```sh; ctest -VV -S test.cmake; ```; from the top directory of the repository. There are several options to customize the build, the main ones are:. | Option | Description |; |----------------------|-------------|; | -DCOVERAGE=1 | Enables test coverage analysis with gcov; | -DMEMCHECK=1 | Enables memory checking with valgrind; | -DSTATIC_ANALYSIS=1 | Enables static analysis with clang-tidy; | -DINSTALL=1 | Enables an extra step to call make install; | -DCDASH=1 | Enables submission to CDash (needs CTestConfig.cmake). When enabling coverage, a report is generated by default in the `coverage/` directory inside the build directory. The results can be viewed by opening the file `html/coverage_details.html`. This step can be disabled by passing `-DGCOVR=0` to `ctest`. It is recommended to use a debug build to generate the coverage analysis. The configuration can be specified directly on the command line via the `-C` option. For example, to run a coverage build in debug mode, with less verbose output, and showing test output when a test failure happens, one can run:; ```sh; ctest -V --output-on-failure -C Debug -DCOVERAGE=1 -S test.cmake; ```; Some environment variables can also influence the behavior of the script, like `CC`, `CXX`, `CMAKE_GENERATOR`, `CTEST_CONFIGURATION_TYPE`, `CMAKE_BUILD_PARALLEL_LEVEL`, `CTEST_PARALLEL_LEVEL`, `CMAKE_ARGS`, `CDASH`, `DESTDIR`, `BASE_REF`, `HEAD_REF`, and GitHub Actions environment variables. These are mostly self-explanatory and can be used to override the provided defaults. For example, to build with the clang compiler and use Ninja as CMake generator, one can run:; ```sh; env CC=clang CXX=clang++ CMAKE_GENERATOR=Ninja ctest -V -S test.cmake; ```; Finally, the script tries to load configuration files from the `.ci/` subdirectory in t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14999:148,integrat,integration,148,https://root.cern,https://github.com/root-project/root/pull/14999,1,['integrat'],['integration']
Integrability,"The analytical integral code of the `RooTruthModel` was making the wrong assumption that if one uses the single-sided bases, the minimum x value is always at zero (or the maximum value at zero, for the case of the flipped bases). This resulted in wrong integral values when integrating over a subrange, as reported here on the forum:. https://root-forum.cern.ch/t/possible-bug-in-integration-of-roobdecay-and-rooabsanaconvpdf/56968. This commit rewrites the RooTruthModel analytical integral code to also consider these cases. To avoid that with the additional code branches the code becomes too verbose, the code was refactored to use a helper function for evaluating indefinite integrals of symmetric or asymmetric basis functions. The refactored code is tested by the integration tests in `stressRooFit`, and the problem that was reported on the forum is covered by a new unit test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14021:274,integrat,integrating,274,https://root.cern,https://github.com/root-project/root/pull/14021,3,['integrat'],"['integrating', 'integration', 'integration-of-roobdecay-and-rooabsanaconvpdf']"
Integrability,"The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework.; Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:; ```; OVERVIEW: rootcling; USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>; ; OPTIONS:; ; Generic Options:; ; -help - Display available options (-help-hidden for more); -help-list - Display list of available options (-help-list-hidden for more); -version - Display the version of this program; ; rootcling common options:; ; -D=<string> - Specify defined macros.; -I=<string> - Specify an include path.; -W=<string> - Specify compiler diagnostics options.; -c - Deprecated, legacy flag which is ignored.; -cxxmodule - Generate a C++ module.; -excludePath=<string> - Do not store the <path> in the dictionary.; -f - Overwrite <file>s.; -failOnWarnings - Fail if there are warnings.; -inlineInputHeader - Does not generate #include <header> but expands the header content.; -interpreteronly - Generate minimal dictionary for interactivity (without IO information).; -m=<string> - The list of dependent modules of the dictionary.; -multiDict - If this library has multiple separate LinkDef files.; -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH.; -p - Deprecated, legacy flag which is ignored.; -rmf=<string> - Generate a rootmap file with the specified name.; -rml=<string> - Generate rootmap file.; -s=<string> - The path to the library of the built dictionary.; -selSyntaxOnly - Check the selection syntax only.; -split - Sp",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4171:541,message,messages,541,https://root.cern,https://github.com/root-project/root/pull/4171,1,['message'],['messages']
Integrability,"The array interface now inferes the size of the data-type with `sizeof` by itself. This fixes [this](https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-master/1703/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=slc6-i686/testReport/junit/projectroot.bindings.pyroot/test/pyunittests_pyroot_array_interface/) failure for `long` types on 32bit sytems not being 8 bytes long.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1925:10,interface,interface,10,https://root.cern,https://github.com/root-project/root/pull/1925,1,['interface'],['interface']
Integrability,The bare file container is only used for testing and therefore should not be part of the public interface.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14761:96,interface,interface,96,https://root.cern,https://github.com/root-project/root/pull/14761,1,['interface'],['interface']
Integrability,"The batched evaluation mode in the RooBinIntegrator was still; implemented with the old `getValues()` interface. Nowadays,; `getValues()` can still be used, but it's not the intended entry point; to the batched evaluation anymore. There is still a compatibility layer,; but it has lots of overhead because the new `RooFitDriver` is created; everytime `getValues()` is called. Therefore, it is better to disable the batched evaluation code path for; now. Until the `RooRealBinding` is refactored to not create a new; RooFitDriver everytime `getValues()` is called. Two other minor changes are also done in this PR in the first two commits. For more detail, see the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11912:102,interface,interface,102,https://root.cern,https://github.com/root-project/root/pull/11912,1,['interface'],['interface']
Integrability,"The behaviour seems to be compiler dependent. On my machine (gcc7), it is picked up.; Edit: Interesting, `FillColl(bool&& v, COLL& c)` is not picked up :thinking:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3169#issuecomment-446963967:35,depend,dependent,35,https://root.cern,https://github.com/root-project/root/pull/3169#issuecomment-446963967,1,['depend'],['dependent']
Integrability,The benchmark is running and integrated in the dashboard here: https://rootbnch-grafana-test.cern.ch/d/G2qrd2SWk/rdataframe?orgId=1,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7651#issuecomment-810068200:29,integrat,integrated,29,https://root.cern,https://github.com/root-project/root/pull/7651#issuecomment-810068200,1,['integrat'],['integrated']
Integrability,"The branch created from a leaflist (your case) do not support schema evolution. To make matter worse the C/C++ typedef (int8_t for example) appeared slightly differently to CINT that they appear to Cling. Even the trivial part of the schema evolution that you would need here (maybe), i.e. allow to read 'char' from either 'signed char' or 'unsigned char' depending on the platform or compiler setting (deciding the signness of char) is not implement.; (technically the typeinfo for 'char', 'signed char' and 'unsigned char' are different). So for better or worse you need to use:; ```; char i;; TFile f (file_name.c_str ());; TTree *t = (TTree*)f.Get (""tree"");; t->SetBranchAddress (""i"", &i);; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7565#issuecomment-801302726:356,depend,depending,356,https://root.cern,https://github.com/root-project/root/issues/7565#issuecomment-801302726,1,['depend'],['depending']
Integrability,"The build on ROOT-fedora30/cxx14 fails for no reason, all test have passed but the build is declared UNSTABLE for some unknown reason. @Axel-Naumann any idea? I've seen this message on other builds in the past.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4835#issuecomment-578726534:174,message,message,174,https://root.cern,https://github.com/root-project/root/pull/4835#issuecomment-578726534,1,['message'],['message']
Integrability,"The builtin Vdt and Vc builds, when enabled, cause some targets to depend on libraries (`libvdt.so`, `libVc.a`) that are the output of the `ExternalProject` command. However, unless they are explicitly listed as outputs (as done in this patch), the build tool may not know how to generate them. Typically, this isn't a problem because the builtins are done sufficiently early in the build and it's nearly impossible to hit the Vc dependency before the library is installed. `make` is satisfied as long the library is on disk by time it hits the later rule, even if it has no clue how it got there. However, some build tools (such as `ninja`) explicitly check for missing libraries and refuse to attempt the build because no rule explicitly builds the missing library. As far as I can tell, the `BUILD_BYPRODUCTS` attribute was added in CMake 3.2; as ROOT already requires 3.4.3, this patch should not be a problem. @pcanal @karies",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/323:67,depend,depend,67,https://root.cern,https://github.com/root-project/root/pull/323,2,['depend'],"['depend', 'dependency']"
Integrability,The call to `ROOT.TClass.GetClass(name)` https://github.com/cms-sw/cmssw/blob/master/FWCore/Utilities/scripts/edmCheckClassVersion#L129 failed for class `reco::PFTau` https://github.com/cms-sw/cmssw/blob/master/DataFormats/TauReco/interface/PFTau.h,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-809949439:231,interface,interface,231,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-809949439,1,['interface'],['interface']
Integrability,"The case @smuzaffar quoted above is actually CPU-only code (even if it uses Alpaka), so the problem is not specific to CUDA/ROCm. The full build log shows a crash also in DataFormats/Histograms package, that is completely independent from GPUs or Alpaka, and that the dictionary generation succeeds for many CUDA-dependent classes. https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-8fe9c7/41033/build-logs/DataFormats/Histograms/log.html; ```; 0.	Program arguments: /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/lcg/root/6.33.01-a252d5032aa4f9a2fc7dcaab3fac8b9f/bin/rootcling -reflex -f tmp/el8_amd64_gcc12/src/DataFormats/Histograms/src/DataFormatsHistograms/a/DataFormatsHistograms_xr.cc -inlineInputHeader -failOnWarnings -rmf tmp/el8_amd64_gcc12/src/DataFormats/Histograms/src/DataFormatsHistograms/a/DataFormatsHistograms_xr.rootmap -rml libDataFormatsHistograms.so -m DataFormatsCommon_xr_rdict.pcm -m DataFormatsProvenance_xr_rdict.pcm -DCMS_DICT_IMPL -D_REENTRANT -DGNUSOURCE -D__STRICT_ANSI__ -DGNU_GCC -D_GNU_SOURCE -DTBB_USE_GLIBCXX_VERSION=120301 -DTBB_SUPPRESS_DEPRECATED_MESSAGES -DTBB_PREVIEW_RESUMABLE_TASKS=1 -DTBB_PREVIEW_TASK_GROUP_EXTENSIONS=1 -DBOOST_SPIRIT_THREADSAFE -DPHOENIX_THREADSAFE -DBOOST_MATH_DISABLE_STD_FPCLASSIFY -DBOOST_UUID_RANDOM_PROVIDER_FORCE_POSIX -DCMSSW_GIT_HASH=\""CMSSW_14_1_ROOT6_X_2024-08-19-2300\"" -DPROJECT_NAME=\""CMSSW\"" -DPROJECT_VERSION=\""CMSSW_14_1_ROOT6_X_2024-08-19-2300\"" -Isrc -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/pcre/8.43-e34796d17981e9b6d174328c69446455/include -isystem/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/boost/1.80.0-7ac88d918a6883d593abc133ee0eb2e9/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/bz2lib/1.0.6-d065ccd79984efc6d4660f410e4c81de/include -I/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc12/external/lib",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16232#issuecomment-2329311081:313,depend,dependent,313,https://root.cern,https://github.com/root-project/root/pull/16232#issuecomment-2329311081,2,"['depend', 'integrat']","['dependent', 'integration']"
Integrability,The change is on the cmake hotspot used by virtually everybody. The risk to make an error here is high due to the complexity of the routine. Taking such risk weeks before the release should be very well weighted with the actual gain. It seems to me that the gain is not big enough to justify taking this direction for the release branch.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4763#issuecomment-574165892:132,rout,routine,132,https://root.cern,https://github.com/root-project/root/pull/4763#issuecomment-574165892,1,['rout'],['routine']
Integrability,"The change looks fine to me, thanks for proposing it. Maybe a doubt, which could be clarified by C++ experts (@silverweed @hahnjo) do you know whether we can prevent *at compile time* with an error/warning the situation where a user defines a default c'tor for classes ultimately inheriting from TObject?; If that's not possible, should we also think about a way to check this at dictionary generation level via the Clang interface, when we have the entire AST at disposal?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16218#issuecomment-2285348825:422,interface,interface,422,https://root.cern,https://github.com/root-project/root/pull/16218#issuecomment-2285348825,1,['interface'],['interface']
Integrability,"The change of the interface of TGDMLWrite is in conflict with old DD4hep versions. To temporarily overcome this problem the old interface is kept. ; The old interface however should be removed when standard installations use a compatible pairs of DD4hep and ROOT >= 6.20. DD4hep when using ROOT 6.20.0 or greater will only use the new interface, where a partial tree is exported to GDML identified by it's TGeoNode instance.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4163:18,interface,interface,18,https://root.cern,https://github.com/root-project/root/pull/4163,4,['interface'],['interface']
Integrability,"The cling argument `--cuda-path` is necessary if the CUDA SDK is not installed under `/usr/local/cuda`, e.g. on HPC systems. The integration tests are also updated to handle a CUDA SDK under a non-standard location. # Additional diagnostic. To find the bug, I also add some diagnostic functions for the PTX compiler. 1. Now error messages are prefixed in CUDA mode to better decide which of the two compiler pipelines is causing the error. example; ```; - example before:; error: cannot find CUDA installation. Provide its path via --cuda-path, or pass -nocudainc to build without CUDA includes.; error: cannot find libdevice for sm_20. Provide path to different CUDA installation via --cuda-path, or pass -nocudalib to build without linking with libdevice.; error: cannot find CUDA installation. Provide its path via --cuda-path, or pass -nocudainc to build without CUDA includes. - example after:; cling: error: cannot find CUDA installation. Provide its path via --cuda-path, or pass -nocudainc to build without CUDA includes.; cling-ptx: error: cannot find libdevice for sm_20. Provide path to different CUDA installation via --cuda-path, or pass -nocudalib to build without linking with libdevice.; cling-ptx: error: cannot find CUDA installation. Provide its path via --cuda-path, or pass -nocudainc to build without CUDA includes.; ```. 2. Now, the class `cudaIncrementalDeviceCompiler` available through reflection via the `gCling` object.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6707:129,integrat,integration,129,https://root.cern,https://github.com/root-project/root/pull/6707,2,"['integrat', 'message']","['integration', 'messages']"
Integrability,"The code has been cleaned, the requested changes done and the number of commits reduced and with better messages. This PR is far from being finished, but these latest changes should make following development easier and the addition of new vectorized implementations more clear.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/655#issuecomment-325232794:104,message,messages,104,https://root.cern,https://github.com/root-project/root/pull/655#issuecomment-325232794,1,['message'],['messages']
Integrability,"The code; ```; if (${CMAKE_MINIMUM_REQUIRED_VERSION} VERSION_GREATER_EQUAL ""3.10.0""); message(FATAL_ERROR ""Remove this condition""); ```; in the ROOT CMakeLists introduced in #6605 breaks the CMake configuration if another package sets a higher minimum version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8280:86,message,message,86,https://root.cern,https://github.com/root-project/root/issues/8280,1,['message'],['message']
Integrability,"The command executed by root is:; ```; gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf; ```; I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```; root [5] c1->Print(""Test.pdf"",""EmbedFonts"");; Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created; GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected!; Since the release of version 9.11 of Ghostscript we recommend you do not set; -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'.; Treating this as a missing 'endobj', output may be incorrect.; **** Error: Encountered 'obj' while expecting 'endobj'.; Treating this as a missing 'endobj', output may be incorrect.; GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected!; Since the release of version 9.11 of Ghostscript we recommend you do not set; -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13560#issuecomment-1697296935:381,message,message,381,https://root.cern,https://github.com/root-project/root/issues/13560#issuecomment-1697296935,1,['message'],['message']
Integrability,The commit message seems pretty clear to me. Can you suggest something?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12276#issuecomment-1427114379:11,message,message,11,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1427114379,1,['message'],['message']
Integrability,"The connection check only makes sense for `fail-on-missing=OFF`, where the result is used to decide whether to download a missing dependency as a builtin from the internet, or to disable the feature that has the missing dependency. With `fail-on-missing=ON`, it doesn't matter because disabling features is not allowed. Therefore, we can skip the connection check to save some configuration overhead and just assume we have internet: if a builtin can't be downloaded there will be a configuration failure either way. Closes #11603 without introducing an additional flag. To be backported to 6.32, because it will improve the packaging of the release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15467:130,depend,dependency,130,https://root.cern,https://github.com/root-project/root/pull/15467,2,['depend'],['dependency']
Integrability,"The context is; ```; 17:06:38 [10689/11146] Running utility command for SofieCompileModels_ONNX; 17:06:38 error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'; 17:06:38 fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found; 17:06:38 FAILED: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.util ; ```; This didn't happen before with my changes. It looks like TMVA/Sofie is trying to build a test that needs the PCH before the PCH is created (i.e. that particular test should depend on the PCH being built and it's currently not). That is, the equivalent of. https://github.com/root-project/root/blob/master/tmva/sofie/test/CMakeLists.txt#L96-L103. is missing for `SofieCompileModels_ONNX`. Maybe @lmoneta has seen this problem before?; This test seems to have [other problems](https://mattermost.web.cern.ch/root/pl/ckkqimfxxpbefeq4rrcn3t5dpy) as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10690#issuecomment-1401704523:631,depend,depend,631,https://root.cern,https://github.com/root-project/root/pull/10690#issuecomment-1401704523,1,['depend'],['depend']
Integrability,"The core part of tmva/sofie does not depend on protobuffer and it is used in pymva to parse a model from Keras to Tmva::Sofie format. ; It is now always built as tmva, while only sofie_parser is built when protobuf is found.; This PR fixes the problem seed when building pymva when protobuf is not found",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8930:37,depend,depend,37,https://root.cern,https://github.com/root-project/root/pull/8930,1,['depend'],['depend']
Integrability,"The ctor of `GSLMCIntegrator` creates a `GSLRngWrapper` instance on the heap and calls its `Allocate()` member function which in turn allocates memory for a GSL random number generator via `gsl_rng_alloc()`. When the `GSLMCIntegrator` instance goes out of scope, its dtor is invoked which deletes the `GSLRngWrapper` pointer and thus invokes its dtor as well. However, `~GSLRngWrapper()` frees the allocated memory only if `fOwn` pointer is set to true, which is only set so in the assignment operator, but not in the `Allocate()` member function. Therefore, the `GSLMCIntegrator` class is leaking memory. This poses a problem, when doing a large number of integrations inside a for loop. The leak was discovered by running valgrind and inspecting the code. Minimal example:; ```cpp; #include <Math/GSLMCIntegrator.h> // ROOT::Math::GSLMCIntegrator. /* built with:. g++ -ggdb3 -Og `root-config --cflags` mcintegrator.cpp -o mcintegrator \; `root-config --libs` -lMathMore. */. int; main(); {; for(unsigned i = 0; i < 20000; ++i); {; ROOT::Math::GSLMCIntegrator vegas(""vegas"", 0., 1.e-1, 10);; }; return 0;; }; ```. Before fix:; ```; valgrind --tool=memcheck --leak-check=full --show-leak-kinds=definite \; --undef-value-errors=no ./mcintegrator. ==12320== Memcheck, a memory error detector; ==12320== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==12320== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info; ==12320== Command: ./mcintegrator; ==12320==; ==12320==; ==12320== HEAP SUMMARY:; ==12320== in use at exit: 100,655,858 bytes in 44,260 blocks; ==12320== total heap usage: 67,782 allocs, 23,522 frees, 101,539,078 bytes allocated; ==12320==; ==12320== 99,089,984 (319,984 direct, 98,770,000 indirect) bytes in 19,999 blocks are definitely lost in loss record 3,515 of 3,515; ==12320== at 0x4C2BE7F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so); ==12320== by 0xAD090F2: gsl_rng_alloc (in /usr/lib/libgsl.so.23.0.0); ==12320== by 0x8223765: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/928:657,integrat,integrations,657,https://root.cern,https://github.com/root-project/root/pull/928,1,['integrat'],['integrations']
Integrability,"The current code goes through different codepaths depending on the platform. One of the codepaths relies on a non-standard extension (variable-length arrays) and the other manually allocates and frees a char array.; Using a std::string, while losing a bit of performance on Linux/Mac, simplifies and unifies the codepaths and avoids using non-standard C++ (which in turns enable building with -Werror).; The perf hit is most likely negligible, especially given the use of dynamic_cast in the same block.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16476:50,depend,depending,50,https://root.cern,https://github.com/root-project/root/pull/16476,1,['depend'],['depending']
Integrability,"The current implementation of the PyMVA interface in `PyMethodBase` has following problem:. We are using currently a global local python namespace for **all** instances of **all** PyMVA method. So you can easily interfere with an other method running in the same factory. Most likely, this happens if you book two instances of the same method in one factory. We can solve this by introducing **private** local python namespaces. In this version, we are sharing the global namespaces with all instances of a PyMVA method (and ofc the running python instance), but create a seperate local namespace for each instance. So you can do whatever you want in your method/instance and you don't interfere with others.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/308:40,interface,interface,40,https://root.cern,https://github.com/root-project/root/pull/308,1,['interface'],['interface']
Integrability,"The current logic for processing TTree/TChain datasets with IMT and when a TTreeIndex is involved requires a copy of each index in each thread, since their state depends on the TTree/TChain they are attached to. Previously, the copy was done via `TObject::Clone` which inevitably makes use of I/O functions, i.e. serialising/deserialising the TTreeIndex/TChainIndex, thus making the copy more costly than necessary. This commit introduces overloads of `Clone` for TTreeIndex and TChainIndex enabling their copy in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14812:162,depend,depends,162,https://root.cern,https://github.com/root-project/root/pull/14812,1,['depend'],['depends']
Integrability,The dataframe tutorials json spec files were not displayed properly. Moreover there was no direct correspondence between the code source and the json file. Those files do not have any doc in them. This PR makes a direct link to the GitHub source file. The dependency between source code and json is therefore more obvious.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14959:256,depend,dependency,256,https://root.cern,https://github.com/root-project/root/pull/14959,1,['depend'],['dependency']
