quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Deployability,"ement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglUInt4Attribute, SOFA_TEMPLATE3(OglAttribute, 4, GL_UNSIGNED_INT, SOFA_TEMPLATE2(sofa::type::Vec, 4, unsigned int)))sofa::gl::component::shader::OglUInt4Attribute; OglAttribute< 4, GL_UNSIGNED_INT, sofa::type::Vec< 4, unsigned int > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE3(OglAttribute, size, type, sofa::type::Vec< 4, unsigned int >), core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglAttribute< 4, GL_UNSIGNED_INT, sofa::type::Vec< 4, unsigned int > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglAttribute< 4, GL_UNSIGNED_INT, sofa::type::Vec< 4, unsigned int > >protected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglAttribute() overridesofa::gl::component::shader::OglAttribute< 4, GL_UNSIGNED_INT, sofa::type::Vec< 4, unsigned int > >protected; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglUInt4Attribute()sofa::gl::component::shader::OglUInt4Attributeinlinevirtual; ~ShaderElement() overridesofa::co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_u_int4_attribute-members.html:16245,update,updateVisual,16245,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_u_int4_attribute-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_u_int4_attribute-members.html,2,['update'],['updateVisual']
Deployability,"emented from sofa::core::behavior::ForceField< DataTypes >. ◆ addDForce(). template<class DataTypes > . void sofa::component::mechanicalload::UniformVelocityDampingForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::mechanicalload::UniformVelocityDampingForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::UniformVelocityDampingForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). inlineoverridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the sa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_uniform_velocity_damping_force_field.html:20883,update,update,20883,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_uniform_velocity_damping_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_uniform_velocity_damping_force_field.html,1,['update'],['update']
Deployability,"emented in sofa::simulation::graph::DAGNode. ◆ findLinkDestClass(). sofa::core::objectmodel::Base * sofa::simulation::Node::findLinkDestClass ; (; const sofa::core::objectmodel::BaseClass * ; destType, . const std::string & ; path, . const sofa::core::objectmodel::BaseLink * ; link . ). overridevirtual . Implements sofa::core::objectmodel::BaseNode. ◆ getAnimationLoop(). core::behavior::BaseAnimationLoop * sofa::simulation::Node::getAnimationLoop ; (; ); const. overridevirtual . Reimplemented from sofa::core::objectmodel::BaseNode. ◆ getChild(). Node * sofa::simulation::Node::getChild ; (; const std::string & ; name); const. Find a child node given its name. . ◆ getChildren(). sofa::core::objectmodel::BaseNode::Children sofa::simulation::Node::getChildren ; (; ); const. overridevirtual . Get children nodes. ; Get parent node (or nullptr if no hierarchy or for root node) ; Implements sofa::core::objectmodel::BaseNode. ◆ getCollisionPipeline(). core::collision::Pipeline * sofa::simulation::Node::getCollisionPipeline ; (; ); const. overridevirtual . Reimplemented from sofa::core::objectmodel::BaseNode. ◆ getContext() [1/2]. const core::objectmodel::BaseContext * sofa::simulation::Node::getContext ; (; ); const. overridevirtual . Get this node context. ; Implements sofa::core::objectmodel::BaseNode. ◆ getContext() [2/2]. core::objectmodel::BaseContext * sofa::simulation::Node::getContext ; (; ). overridevirtual . Get this node context. ; Implements sofa::core::objectmodel::BaseNode. ◆ getDebug(). bool sofa::simulation::Node::getDebug ; (; ); const. ◆ getMechanicalState(). core::behavior::BaseMechanicalState * sofa::simulation::Node::getMechanicalState ; (; ); const. overridevirtual . Mechanical Degrees-of-Freedom. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getMeshTopologyLink(). core::topology::BaseMeshTopology * sofa::simulation::Node::getMeshTopologyLink ; (; SearchDirection ; dir = SearchUp); const. overridevirtual . Mesh Topology (unified interface",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:38484,Pipeline,Pipeline,38484,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,1,['Pipeline'],['Pipeline']
Deployability,"ementinlineprotected; ShaderElementType enum namesofa::core::visual::ShaderElement; shaderssofa::gl::component::shader::OglShaderElementprotected; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< DataTypes >inlineprotected; ~ShaderElement() overridesofa::core::visual::ShaderElementinlineprotected; ~VisualModel() overridesofa::core::visual::VisualModelinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_variable-members.html:13384,update,updateVisual,13384,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_variable-members.html,2,['update'],['updateVisual']
Deployability,"ements sofa::core::behavior::ForceField< DataTypes >. ◆ applyTetrahedronCreation(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::applyTetrahedronCreation ; (; const sofa::type::vector< Index > & ; tetrahedronAdded, . const sofa::type::vector< core::topology::BaseMeshTopology::Tetrahedron > & ; , . const sofa::type::vector< sofa::type::vector< Index > > & ; , . const sofa::type::vector< sofa::type::vector< SReal > > & ;  . ). Method to update See alsod_edgeInfo when a new Tetrahedron is created. Will be set as callback in the EdgeData . d_edgeInfo when TETRAHEDRAADDED event is fired to create a new spring in created Tetrahedron. . ◆ applyTetrahedronDestruction(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::applyTetrahedronDestruction ; (; const sofa::type::vector< Index > & ; tetrahedronRemoved). Method to update See alsod_edgeSprings when a triangle is removed. Will be set as callback in the EdgeData . d_edgeInfo when TETRAHEDRAREMOVED event is fired to remove spring if needed or update adjacent Tetrahedron. . ◆ buildDampingMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; ). finalvirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ buildStiffnessMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::buildStiffnessMatrix ; (; sofa::core::behavior::StiffnessMatrix * ; matrix). overridevirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ createEdgeRestInformation(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::createEdgeRestInformation ; (; Index ; edgeIndex, . EdgeRestInformation &",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html:25794,update,update,25794,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html,1,['update'],['update']
Deployability,"emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::collision::Pipeline; sofa::type::vector< Intersection * > intersectionMethods;  ; sofa::type::vector< BroadPhaseDetection * > broadPhaseDetections;  ; sofa::type::vector< NarrowPhaseDetection * > narrowPhaseDetections;  ; sofa::type::vector< ContactManager * > contactManagers;  ; sofa::type::vector< CollisionGroupManager * > groupManagers;  ; Intersection * intersectionMethod;  ; BroadPhaseDetection * broadPhaseDetection;  ; NarrowPhaseDetection * narrowPhaseDetection;  ; ContactManager * contactManager;  ; CollisionGroupManager * groupManager;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, Base",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:12862,Pipeline,Pipeline,12862,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,1,['Pipeline'],['Pipeline']
Deployability,"emove all lights of the LightManager. More...;  ; void restoreDefaultLight (core::visual::VisualParams *vparams);  ; void handleEvent (sofa::core::objectmodel::Event *event) override;  Handle an event. More...;  ;  Public Member Functions inherited from sofa::core::visual::VisualManager;  SOFA_CLASS (VisualManager, VisualModel);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void drawTransparent (const VisualParams *);  Display transparent surfaces. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const type::Quat< SReal >);  ; virtual void applyScale (const SReal, const SReal, const SReal);  ; virtual void exportOBJ (std::string, std::ostream *, std::ostream *, sofa::Index &, sofa::Index &, sofa::Index &, int &);  Append this mesh to an OBJ format ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_light_manager.html:4620,update,updateVisual,4620,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_light_manager.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_light_manager.html,1,['update'],['updateVisual']
Deployability,"emplate Reference . #include <kdTree.h>; Detailed Description; template<class Coord>; class sofa::helper::kdTree< Coord >; This class implements classical kd tree for nearest neighbors search; the tree is rebuild from points by calling build(p); N nearest points from point x (in terms of euclidean distance) are retrieved with getNClosest(distance/index_List , x , N); Caching may be used to speed up retrieval: if dx< (d(n)-d(0))/2, then the closest point is in the n-1 cached points (updateCachedDistances is used to update the n-1 distances) see for instance: [zhang92] report and [simon96] thesis for more details. AuthorBenjamin Gilles . Classes; struct  TREENODE;  . Protected Attributes; type::vector< TREENODE > tree;  ; unsigned int firstNode;  . Public Member Functions; bool isEmpty () const;  ; void build (const VecCoord &positions);  update tree (to be used whenever positions have changed) More...;  ; void build (const VecCoord &positions, const type::vector< unsigned int > &ROI);  update tree based on positions subset (to be used whenever points p have changed) More...;  ; void getNClosest (distanceSet &cl, const Coord &x, const VecCoord &positions, const unsigned int n) const;  get an ordered set of n distance/index pairs between positions and x More...;  ; unsigned int getClosest (const Coord &x, const VecCoord &positions) const;  get the index of the closest point between positions and x More...;  ; bool getNClosestCached (distanceSet &cl, distanceToPoint &cacheThresh_max, distanceToPoint &cacheThresh_min, Coord &previous_x, const Coord &x, const VecCoord &positions, const unsigned int n) const;  use distance caching to accelerate closest point computation when positions are fixed (see simon96 thesis) More...;  . Protected Member Functions; void print (const unsigned int index);  ; unsigned int build (UIlist &list, unsigned char direction, const VecCoord &positions);  ; void closest (distanceSet &cl, const Coord &x, const unsigned int &currentnode, const VecC",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1kd_tree.html:1294,update,update,1294,api/master/sofa/html/classsofa_1_1helper_1_1kd_tree.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1kd_tree.html,2,['update'],['update']
Deployability,"emplate<class DataTypes > . sofa::core::behavior::PairInteractionConstraint< DataTypes >::PairInteractionConstraint ; (; MechanicalState< DataTypes > * ; mm1 = nullptr, . MechanicalState< DataTypes > * ; mm2 = nullptr . ). explicitprotected . ◆ ~PairInteractionConstraint(). template<class DataTypes > . sofa::core::behavior::PairInteractionConstraint< DataTypes >::~PairInteractionConstraint. overrideprotected . Function details. ◆ buildConstraintMatrix() [1/2]. template<class TDataTypes > . virtual void sofa::core::behavior::PairInteractionConstraint< TDataTypes >::buildConstraintMatrix ; (; const ConstraintParams * ; cParams, . DataMatrixDeriv & ; c1, . DataMatrixDeriv & ; c2, . unsigned int & ; cIndex, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2 . ). pure virtual . Construct the Jacobian Matrix; Parameters. c1and c2 are the results constraint sparse matrix ; cIndexis the index of the next constraint equation: when building the constraint matrix, you have to use this index, and then update it ; x1and x2 are the position vectors used for constraint equation computation ; cParamsdefines the state vectors to use for positions and velocities. Also defines the order of the constraint (POS, VEL, ACC). This is the method that should be implemented by the component ; Implemented in sofa::component::constraint::lagrangian::model::UnilateralLagrangianConstraint< DataTypes >, sofa::component::constraint::lagrangian::model::UnilateralLagrangianConstraint< sofa::defaulttype::StdVectorTypes >, sofa::component::constraint::lagrangian::model::SlidingLagrangianConstraint< DataTypes >, sofa::component::constraint::lagrangian::model::BilateralLagrangianConstraint< DataTypes >, sofa::component::constraint::lagrangian::model::BilateralLagrangianConstraint< sofa::defaulttype::StdVectorTypes >, sofa::component::constraint::lagrangian::model::BilateralLagrangianConstraint< DataTypes >, and sofa::component::constraint::lagrangian::model::BilateralLagrangianConstraint< sofa::defa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_constraint.html:22201,update,update,22201,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_constraint.html,1,['update'],['update']
Deployability,"en corresponding entries, or the infinity if the matrices have different sizes. More...;  ; static Real epsilon ();  the smallest real number More...;  ; static Real infinity ();  Infinity. More...;  ; static bool isSmall (Real r, Real ratio=1.);  true if the magnitude of r is less than ratio*epsilon More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const Vector2 &m2);  return the maximum difference between corresponding entries, or the infinity if the vectors have different sizes More...;  ; static Real vectorMaxDiff (const sofa::type::Vec< N, Real > &m1, const sofa::type::Vec< N, Real > &m2);  return the maximum difference between corresponding entries More...;  ;  Static Protected Member Functions inherited from sofa::testing::NumericTest< _DataTypes::Real >; static float norm (float a);  ; static double norm (double a);  ; static Real norm (T a);  . Attribute details. ◆ patchStruct. template<typename _DataTypes > . PatchTestStruct<DataTypes> sofa::AffinePatch_sofa_test< _DataTypes >::patchStruct. Structure which contains current node and pointers to the mechanical object and the affine constraint. . ◆ root. template<typename _DataTypes > . simulation::Node::SPtr sofa::AffinePatch_sofa_test< _DataTypes >::root. Root of the scene graph. . ◆ simulation. template<typename _DataTypes > . simulation::Simulation* sofa::AffinePatch_sofa_test< _DataTypes >::simulation. Tested simulation. . ◆ testedRotation. template<typename _DataTypes > . type::Mat<3,3,Real> sofa::AffinePatch_sofa_test< _DataTypes >::testedRotation. Tested Rotation: random rotation matrix. . ◆ testedTranslation. template<typename _DataTypes > . Coord sofa::AffinePatch_sofa_test< _DataTypes >::testedTranslation. Tested Translation: random translation. . Function details. ◆ compareSimulatedToTheoreticalPositions(). template<typename _DataTypes > . bool sofa::AffinePatch_sofa_test< _DataTypes >::compareSimulatedToTheoreticalPositions ; (; double ; convergenceAccuracy, . double ; d",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1_affine_patch__sofa__test.html:4401,patch,patchStruct,4401,api/master/sofa/html/structsofa_1_1_affine_patch__sofa__test.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1_affine_patch__sofa__test.html,3,"['Patch', 'patch']","['PatchTestStruct', 'patchStruct']"
Deployability,"ename std::enable_if_t< T::spatial_dimensions > = 3, int > . void sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::applyEdgeMassCreation ; (; Index ; edgeIndex, . MassType & ; EdgeMass, . const core::topology::BaseMeshTopology::Edge & ; , . const sofa::type::vector< Index > & ; , . const sofa::type::vector< SReal > & ;  . ). protected . Method to update See alsod_vertexMass using mass matrix coefficient when a new Triangle is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TRIANGLESADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Triangle is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TRIANGLESREMOVED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a new Quad is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Quad is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSREMOVED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a new Tetrahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Tetrahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAREMOVED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a new Hexahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when HEXAHEDRAADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Hexahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the m",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html:38582,update,update,38582,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,1,['update'],['update']
Deployability,"enamedData< bool > _showVonMisesStressPerNode;  ; core::objectmodel::RenamedData< bool > _showVonMisesStressPerNodeColorMap;  ; core::objectmodel::RenamedData< bool > _showVonMisesStressPerElement;  ; core::objectmodel::RenamedData< bool > _updateStiffness;  ; Data< std::string > d_showStressColorMap;  Color map used to show stress values. More...;  ; Data< float > d_showStressAlpha;  Alpha for vonMises visualisation. More...;  ; Data< bool > d_showVonMisesStressPerNode;  draw points showing vonMises stress interpolated in nodes More...;  ; Data< bool > d_showVonMisesStressPerNodeColorMap;  draw elements showing vonMises stress interpolated in nodes More...;  ; Data< bool > d_showVonMisesStressPerElement;  draw triangles showing vonMises stress interpolated in elements More...;  ; Data< Real > d_showElementGapScale;  draw gap between elements (when showWireFrame is disabled) [0,1]: 0: no gap, 1: no element More...;  ; Data< bool > d_updateStiffness;  update structures (precomputed in init) using stiffness parameters in each iteration (set listening=1) More...;  ; type::vector< type::Vec< 6, Real > > elemDisplacements;  ; bool updateVonMisesStress;  ; Plasticity such as ""Interactive Virtual Materials"", Muller & Gross, GI 2004; Data< Real > d_plasticMaxThreshold;  ; Data< Real > d_plasticYieldThreshold;  Plastic Yield Threshold (2-norm of the strain) More...;  ; Data< Real > d_plasticCreep;  Plastic Creep Factor * dt [0,1]. Warning this factor depends on dt. More...;  ;  Public Attributes inherited from sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >; Data< VecReal > d_poissonRatio;  FEM Poisson Ratio in Hooke's law [0,0.5[. More...;  ; Data< VecReal > d_youngModulus;  FEM Young's Modulus in Hooke's law. More...;  ; SingleLink< BaseLinearElasticityFEMForceField< DataTypes >, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > l_topology;  Link to be set to the topology container in ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedron_f_e_m_force_field.html:4795,update,update,4795,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedron_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedron_f_e_m_force_field.html,1,['update'],['update']
Deployability,"ence . #include <PointSplatModel.h>. Inheritance diagram for sofa::gl::component::rendering3d::PointSplatModel:. [legend]. Public Member Functions;  SOFA_CLASS (PointSplatModel, core::visual::VisualModel);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; virtual bool isTransparent ();  ; void drawTransparent (const core::visual::VisualParams *vparams) override;  Display transparent surfaces. More...;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void fwdDraw (VisualParams *);  Called before objects in the current branch are displayed. More...;  ; virtual void bwdDraw (VisualParams *);  Called after objects in the current branch are displayed. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void ap",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_point_splat_model.html:1280,update,updateVisual,1280,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_point_splat_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_point_splat_model.html,2,['update'],"['update', 'updateVisual']"
Deployability,"enerate::MergePoints< DataTypes > Class Template Reference . #include <MergePoints.h>. Inheritance diagram for sofa::component::engine::generate::MergePoints< DataTypes >:. [legend]; Detailed Description; template<class DataTypes>; class sofa::component::engine::generate::MergePoints< DataTypes >; This class merge 2 coordinate vectors. . Public Attributes; bool initDone;  ; Data< VecCoord > f_X1;  position coordinates of the degrees of freedom of the first object More...;  ; Data< VecCoord > f_X2;  Rest position coordinates of the degrees of freedom of the second object. More...;  ; Data< SetIndex > f_X2_mapping;  Mapping of indices to inject position2 inside position1 vertex buffer. More...;  ; Data< SetIndex > f_indices1;  Indices of the points of the first object. More...;  ; Data< SetIndex > f_indices2;  Indices of the points of the second object. More...;  ; Data< VecCoord > f_points;  position coordinates resulting from the merge More...;  ; Data< bool > f_noUpdate;  do not update the output at each time step (false) More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_i",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_points.html:1294,update,update,1294,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_points.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_points.html,1,['update'],['update']
Deployability,"ent time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_collision_model.html:12254,update,updateInternal,12254,api/master/sofa/html/classsofa_1_1core_1_1_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_collision_model.html,2,['update'],['updateInternal']
Deployability,"ent time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an in",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_generic_constraint_correction.html:7372,update,updateInternal,7372,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_generic_constraint_correction.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_generic_constraint_correction.html,1,['update'],['updateInternal']
Deployability,"ent when a new Quad is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Quad is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSREMOVED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a new Tetrahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Tetrahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAREMOVED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a new Hexahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when HEXAHEDRAADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Hexahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when HEXAHEDRAREMOVED event is fired. Method to initialize . MassType when a new Edge is created to compute mass coefficient matrix. Will be set as creation callback in the EdgeData . d_edgeMass . ◆ applyEdgeMassCreation() [2/2]. template<class DataTypes , class GeometricalTypes = DataTypes> . template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::applyEdgeMassCreation ; (; Index ; , . MassType & ; EdgeMass, . const core::topology::BaseMeshTopology::Edge & ; , . const sofa::type::vector< Index > & ; , . const sofa::type::vector< SReal > & ;  . ). ◆ applyEdgeMassDestruction(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::applyEdgeMassDestruction ; (; Index ; id, . MassT",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html:39428,update,update,39428,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,1,['update'],['update']
Deployability,"ent::mapping::nonlinear::RigidMapping< TIn, TOut >protected; SPtr typedefsofa::core::objectmodel::Base; StiffnessSparseMatrixEigen typedefsofa::component::mapping::nonlinear::RigidMapping< TIn, TOut >protected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; testMechanicalState(BaseState *state)sofa::core::BaseMappingprotected; toModelsofa::core::Mapping< TIn, TOut >protected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateK(const core::MechanicalParams *mparams, core::ConstMultiVecDerivId childForceId) overridesofa::component::mapping::nonlinear::RigidMapping< TIn, TOut >virtual; updateK(const core::MechanicalParams *, core::ConstMultiVecDerivId)sofa::component::mapping::nonlinear::RigidMapping< TIn, TOut >virtual; updateK(const core::MechanicalParams *mparams, core::ConstMultiVecDerivId childForceId)sofa::component::mapping::nonlinear::RigidMapping< TIn, TOut >virtual; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateOmega(typename InDeriv::Rot &omega, const OutDeriv &out, const OutCoord &rotatedpoint)sofa::component::mapping::nonlinear::RigidMapping< TIn, TOut >; updateOmega(typename InDeriv::Rot &omega, const OutDeriv &out, const OutCoord &rotatedpoint)sofa::component::mapping::nonlinear::RigidMapping< TIn, TOut >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; Vector typedefsofa::component::mapping::nonlinear::RigidMapping< TIn, TOut >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseMapping() overridesofa::core::BaseMappingprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~Mapping() overridesofa::core::Mapping< T",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping-members.html:23809,update,updateLinks,23809,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping-members.html,1,['update'],['updateLinks']
Deployability,"ent::mechanicalload::ConstantForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; mat, . SReal ; k, . unsigned int & ; offset . ). overridevirtual . Constant force has null variation. ; Reimplemented from sofa::core::behavior::ForceField< DataTypes >. ◆ buildDampingMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::ConstantForceField< DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; ). inlinefinalvirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ buildStiffnessMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::ConstantForceField< DataTypes >::buildStiffnessMatrix ; (; core::behavior::StiffnessMatrix * ; matrix). overridevirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ checkForce(). template<class DataTypes > . bool sofa::component::mechanicalload::ConstantForceField< DataTypes >::checkForce ; (; const Deriv & ; force). protected . Functions checking inputs before update. . ◆ checkForces(). template<class DataTypes > . bool sofa::component::mechanicalload::ConstantForceField< DataTypes >::checkForces ; (; const VecDeriv & ; forces). protected . ◆ computeForceFromForcesVector(). template<class DataTypes > . sofa::core::objectmodel::ComponentState sofa::component::mechanicalload::ConstantForceField< DataTypes >::computeForceFromForcesVector ; (; const VecDeriv & ; forces). protected . ◆ computeForceFromSingleForce(). template<class DataTypes > . sofa::core::objectmodel::ComponentState sofa::component::mechanicalload::ConstantForceField< DataTypes >::computeForceFromSingleForce ; (; const Deriv ; singleForce). protected . Functions computing and updating the constant force vector. . ◆ computeForceFromTotalForce(). template<class DataTypes > . sofa::core::objectmodel::ComponentState sofa::component::mechanicalload::ConstantForceField< DataTypes >::computeForceFromTotalForce ; (; const Deriv & ; totalForce). protected . ◆ draw(). templat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_constant_force_field.html:25770,update,update,25770,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_constant_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_constant_force_field.html,1,['update'],['update']
Deployability,"ent::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >. ◆ init(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >.; Reimplemented in sofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedronFEMForceFieldAndMass< DataTypes >, and sofa::component::solidmechanics::fem::nonuniform::HexahedronCompositeFEMForceFieldAndMass< DataTypes >. ◆ initTextures(). template<class DataTypes > . virtual void sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >::initTextures ; (; ). inlinevirtual . ◆ integrateMass(). template<class DataTypes > . HexahedronFEMForceFieldAndMass< DataTypes >::Real sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >::integrateMass ; (; int ; signx, . int ; signy, . int ; signz, . Real ; l0, . Real ; l1, . Real ; l2 . ). ◆ isDiagonal(). template<class DataTypes > . bool sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >::isDiagonal ; (; ); const. inlineoverridevirtual . Implements sofa::core::behavior::BaseMass. ◆ reinit(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >::reinit. overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >.; Reimplemented in sofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedronFEMForceFieldAndMass< DataTypes >, and sofa::component::solidmechanics::fem::nonuniform::HexahedronCompositeFEMForceFieldAndMass< DataTypes >. ◆ setDensity(). template<class ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass.html:39742,integrat,integrateMass,39742,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass.html,1,['integrat'],['integrateMass']
Deployability,"ent::solidmechanics::spring::FastTriangularBendingSprings< DataTypes >::applyTriangleCreation ; (; const sofa::type::vector< Index > & ; triangleAdded, . const sofa::type::vector< core::topology::BaseMeshTopology::Triangle > & ; , . const sofa::type::vector< sofa::type::vector< Index > > & ; , . const sofa::type::vector< sofa::type::vector< SReal > > & ;  . ). protected . Method to update See alsod_edgeSprings when a new triangle is created. Will be set as callback in the EdgeData . d_edgeSprings when TRIANGLESADDED event is fired to create a new spring between new created triangles. . ◆ applyTriangleDestruction(). template<class DataTypes > . void sofa::component::solidmechanics::spring::FastTriangularBendingSprings< DataTypes >::applyTriangleDestruction ; (; const sofa::type::vector< Index > & ; triangleRemoved). protected . Method to update See alsod_edgeSprings when a triangle is removed. Will be set as callback in the EdgeData . d_edgeSprings when TRIANGLESREMOVED event is fired to remove spring if needed or update pair of triangles. . ◆ buildDampingMatrix(). template<class _DataTypes > . void sofa::component::solidmechanics::spring::FastTriangularBendingSprings< _DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; ). finalvirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ buildStiffnessMatrix(). template<class _DataTypes > . void sofa::component::solidmechanics::spring::FastTriangularBendingSprings< _DataTypes >::buildStiffnessMatrix ; (; core::behavior::StiffnessMatrix * ; matrix). overridevirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ draw(). template<class DataTypes > . void sofa::component::solidmechanics::spring::FastTriangularBendingSprings< DataTypes >::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ getEdgeInfo(). template<class _DataTypes > . sofa::core::t",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs.html:27088,update,update,27088,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs.html,1,['update'],['update']
Deployability,"ent::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::applyTetrahedronCreation ; (; const sofa::type::vector< Index > & ; tetrahedronAdded, . const sofa::type::vector< core::topology::BaseMeshTopology::Tetrahedron > & ; , . const sofa::type::vector< sofa::type::vector< Index > > & ; , . const sofa::type::vector< sofa::type::vector< SReal > > & ;  . ). Method to update See alsod_edgeInfo when a new Tetrahedron is created. Will be set as callback in the EdgeData . d_edgeInfo when TETRAHEDRAADDED event is fired to create a new spring in created Tetrahedron. . ◆ applyTetrahedronDestruction(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::applyTetrahedronDestruction ; (; const sofa::type::vector< Index > & ; tetrahedronRemoved). Method to update See alsod_edgeSprings when a triangle is removed. Will be set as callback in the EdgeData . d_edgeInfo when TETRAHEDRAREMOVED event is fired to remove spring if needed or update adjacent Tetrahedron. . ◆ buildDampingMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; ). finalvirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ buildStiffnessMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::buildStiffnessMatrix ; (; sofa::core::behavior::StiffnessMatrix * ; matrix). overridevirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ createEdgeRestInformation(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::createEdgeRestInformation ; (; Index ; edgeIndex, . EdgeRestInformation & ; ei, . const core::topology::BaseMeshTopology::Edge & ; edge, . const sofa::type::vector< Index > & ; , . const sofa::type::vec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html:25972,update,update,25972,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html,1,['update'],['update']
Deployability,"ent::topology::container::dynamic::EdgeSetTopologyModifiervirtual; splitEdgesProcess(sofa::type::vector< EdgeID > &indices, const sofa::type::vector< sofa::type::vector< SReal > > &baryCoefs, const bool removeIsolatedPoints=true)sofa::component::topology::container::dynamic::EdgeSetTopologyModifiervirtual; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; swapEdges(const sofa::type::vector< sofa::type::vector< EdgeID > > &edgesPairs)sofa::component::topology::container::dynamic::EdgeSetTopologyModifiervirtual; swapEdgesProcess(const sofa::type::vector< sofa::type::vector< EdgeID > > &edgesPairs)sofa::component::topology::container::dynamic::EdgeSetTopologyModifiervirtual; swapPoints(const Index i1, const Index i2)sofa::component::topology::container::dynamic::PointSetTopologyModifiervirtual; TopologyModifier()sofa::core::topology::TopologyModifierinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseTopologyObject() overridesofa::core::topology::BaseTopologyObjectinlineprotected; ~EdgeSetTopologyModifier() overridesofa::component::topology::container::dynamic::EdgeSetTopologyModifierinlineprotected; ~PointSetTopologyModifier() overridesofa::component::topology::container::dynamic::PointSetTopologyModifierinlineprotected; ~TopologyModifier() overridesofa::core::topology::TopologyModifierinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_topology_modifier-members.html:20157,update,updateInternal,20157,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_topology_modifier-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_topology_modifier-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"entId) const;  . Protected Member Functions;  NonUniformHexahedralFEMForceFieldAndMass ();  ; virtual void computeMechanicalMatricesByCondensation (ElementStiffness &K, ElementMass &M, Real &totalMass, const int elementIndex);  condensate matrice from finest level to the actual mechanical level More...;  ; void initLarge (const int i);  ; void initPolar (const int i);  ; void addMBKdx (const core::MechanicalParams *mparams, core::MultiVecDerivId dfId) override;  ; virtual void computeCorrection (ElementMass &);  Limit the conditioning number of each mbkMatrix as defined by maxConditioning (in derived classes). More...;  ;  Protected Member Functions inherited from sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >;  HexahedralFEMForceFieldAndMass ();  ; virtual void computeElementMasses ();  compute the mass matrices More...;  ; Real integrateVolume (int signx, int signy, int signz, Real l0, Real l1, Real l2);  ; virtual void computeElementMass (ElementMass &Mass, Real &totalMass, const type::fixed_array< Coord, 8 > &nodes);  compute the mass matrix of an element More...;  ; void computeParticleMasses ();  ; void computeLumpedMasses ();  ;  Protected Member Functions inherited from sofa::core::behavior::Mass< DataTypes >;  Mass (MechanicalState< DataTypes > *mm=nullptr);  ;  ~Mass () override;  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedral_f_e_m_force_field_and_mass.html:22469,integrat,integrateVolume,22469,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedral_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedral_f_e_m_force_field_and_mass.html,1,['integrat'],['integrateVolume']
Deployability,"ented from sofa::core::behavior::ForceField< DataTypes >. ◆ addDForce(). template<class DataTypes > . void sofa::component::mechanicalload::DiagonalVelocityDampingForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::mechanicalload::DiagonalVelocityDampingForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::DiagonalVelocityDampingForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). inlineoverridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the s",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_diagonal_velocity_damping_force_field.html:20559,update,update,20559,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_diagonal_velocity_damping_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_diagonal_velocity_damping_force_field.html,1,['update'],['update']
Deployability,"entprotected; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglFloat2Variable, OglVariable< type::Vec2f >)sofa::gl::component::shader::OglFloat2Variable; OglVariable< type::Vec2f >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::Vec2f >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::Vec2f >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglFloat2Variable()sofa::gl::component::shader::OglFloat2Variableinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< type::Vec2f >inlineprotected; ~ShaderElement() overridesofa::core::visual::ShaderElement",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float2_variable-members.html:13520,update,updateVisual,13520,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float2_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float2_variable-members.html,1,['update'],['updateVisual']
Deployability,"entprotected; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglFloat3Variable, OglVariable< type::Vec3f >)sofa::gl::component::shader::OglFloat3Variable; OglVariable< type::Vec3f >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::Vec3f >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::Vec3f >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglFloat3Variable()sofa::gl::component::shader::OglFloat3Variableinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< type::Vec3f >inlineprotected; ~ShaderElement() overridesofa::core::visual::ShaderElement",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float3_variable-members.html:13520,update,updateVisual,13520,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float3_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float3_variable-members.html,1,['update'],['updateVisual']
Deployability,"entprotected; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglFloat4Variable, OglVariable< type::Vec4f >)sofa::gl::component::shader::OglFloat4Variable; OglVariable< type::Vec4f >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::Vec4f >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::Vec4f >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglFloat4Variable()sofa::gl::component::shader::OglFloat4Variableinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< type::Vec4f >inlineprotected; ~ShaderElement() overridesofa::core::visual::ShaderElement",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float4_variable-members.html:13520,update,updateVisual,13520,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float4_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float4_variable-members.html,2,['update'],['updateVisual']
Deployability,"eometry::ElementType::UNKNOWN;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (SimpleTesselatedHexaTopologicalMapping, sofa::core::topology::TopologicalMapping);  ; void init () override;  Initializes the target BaseTopology from the source BaseTopology. More...;  ; void updateTopologicalMappingTopDown () override;  Translates the TopologyChange objects from the source to the target. More...;  ;  Public Member Functions inherited from sofa::core::topology::TopologicalMapping;  SOFA_ABSTRACT_CLASS (TopologicalMapping, objectmodel::BaseObject);  ; virtual void setTopologies (In *from, Out *to);  Specify the input and output models. More...;  ; void setPathInputObject (const std::string &o);  Set the path to the objects mapped in the scene graph. More...;  ; void setPathOutputObject (const std::string &o);  ; In * getFrom ();  Accessor to the INPUT topology of the TopologicalMapping : More...;  ; Out * getTo ();  Accessor to the OUTPUT topology of the TopologicalMapping : More...;  ; virtual void updateTopologicalMappingBottomUp ();  Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topology : More...;  ; virtual bool propagateFromInputToOutputModel ();  Return true if this mapping is able to propagate topological changes from input to output mode",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_hexa_topological_mapping.html:2616,update,updateTopologicalMappingTopDown,2616,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_hexa_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_hexa_topological_mapping.html,1,['update'],['updateTopologicalMappingTopDown']
Deployability,"eometry::Triangle & ; , . collision::geometry::Point & ;  . ). delete . ◆ testIntersection() [20/22]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testIntersection ; (; collision::geometry::Triangle & ; e2, . collision::geometry::Point & ; e1, . const core::collision::Intersection * ; currentIntersection . ). ◆ testIntersection() [21/22]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testIntersection ; (; collision::geometry::Triangle & ; , . collision::geometry::Sphere & ;  . ). delete . ◆ testIntersection() [22/22]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testIntersection ; (; collision::geometry::Triangle & ; e2, . collision::geometry::Sphere & ; e1, . const core::collision::Intersection * ; currentIntersection . ). ◆ testValidity() [1/4]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testValidity ; (; collision::geometry::Line & ; l, . const type::Vec3 & ; PQ . ); const. ◆ testValidity() [2/4]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testValidity ; (; collision::geometry::Point & ; p, . const type::Vec3 & ; PQ . ); const. ◆ testValidity() [3/4]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testValidity ; (; collision::geometry::Sphere & ; , . const type::Vec3 & ;  . ); const. inline . These methods check the validity of a found intersection. According to the local configuration around the found intersected primitive, we build a ""Region Of Interest"" geometric cone. Pertinent intersections have to belong to this cone, others are not taking into account anymore. . ◆ testValidity() [4/4]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testValidity ; (; collision::geometry::Triangle & ; t, . const type::Vec3 & ; PQ . ); const. sofacomponentcollisiondetectionintersectionLocalMinDistance; Generated on Mon Nov 11 2024 02:19:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_local_min_distance.html:38847,configurat,configuration,38847,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_local_min_distance.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_local_min_distance.html,1,['configurat'],['configuration']
Deployability,"eprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::topology::container::dynamic::TetrahedronSetTopologyContainer; TriangleID typedefsofa::component::topology::container::dynamic::TetrahedronSetTopologyContainer; TrianglesAroundEdge typedefsofa::component::topology::container::dynamic::TriangleSetTopologyContainer; TrianglesAroundVertex typedefsofa::component::topology::container::dynamic::TriangleSetTopologyContainer; TriangleSetTopologyContainer()sofa::component::topology::container::dynamic::TriangleSetTopologyContainerprotected; TrianglesInTetrahedron typedefsofa::component::topology::container::dynamic::TetrahedronSetTopologyContainer; unlinkTopologyHandlerToData(core::topology::TopologyHandler *topologyHandler, sofa::geometry::ElementType elementType) overridesofa::component::topology::container::dynamic::TetrahedronSetTopologyContainervirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecEdgeID typedefsofa::component::topology::container::dynamic::EdgeSetTopologyContainer; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecTetraID typedefsofa::component::topology::container::dynamic::TetrahedronSetTopologyContainer; VecTriangleID typedefsofa::component::topology::container::dynamic::TriangleSetTopologyContainer; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseTopologyObject() overridesofa::core::topology::BaseTopologyObjectinlineprotected; ~EdgeSetTopologyContainer() overridesofa::compo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_container-members.html:43171,update,updateLinks,43171,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_container-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_container-members.html,1,['update'],['updateLinks']
Deployability,"er data . ◆ d_mapOrient. template<class In , class Out > . core::topology::PointData< sofa::type::vector<MappingOrientData > > sofa::component::mapping::linear::BarycentricMapperTetrahedronSetTopologyRigid< In, Out >::d_mapOrient. protected . mapper data for mapped frames . ◆ map. template<class In , class Out > . sofa::core::objectmodel::RenamedData<sofa::type::vector<MappingData > > sofa::component::mapping::linear::BarycentricMapperTetrahedronSetTopologyRigid< In, Out >::map. protected . ◆ mapOrient. template<class In , class Out > . sofa::core::objectmodel::RenamedData<sofa::type::vector<MappingOrientData > > sofa::component::mapping::linear::BarycentricMapperTetrahedronSetTopologyRigid< In, Out >::mapOrient. protected . ◆ matrixJ. template<class In , class Out > . MatrixType* sofa::component::mapping::linear::BarycentricMapperTetrahedronSetTopologyRigid< In, Out >::matrixJ. protected . ◆ updateJ. template<class In , class Out > . bool sofa::component::mapping::linear::BarycentricMapperTetrahedronSetTopologyRigid< In, Out >::updateJ. protected . Constructor details. ◆ BarycentricMapperTetrahedronSetTopologyRigid(). template<class In , class Out > . sofa::component::mapping::linear::BarycentricMapperTetrahedronSetTopologyRigid< In, Out >::BarycentricMapperTetrahedronSetTopologyRigid ; (; core::topology::BaseMeshTopology * ; fromTopology, . core::topology::BaseMeshTopology * ; _toTopology . ). protected . TEMP. . ◆ ~BarycentricMapperTetrahedronSetTopologyRigid(). template<class In , class Out > . virtual sofa::component::mapping::linear::BarycentricMapperTetrahedronSetTopologyRigid< In, Out >::~BarycentricMapperTetrahedronSetTopologyRigid ; (; ). inlineprotectedvirtual . Function details. ◆ addPointInTetra(). template<class In , class Out > . BarycentricMapperTetrahedronSetTopologyRigid< In, Out >::Index sofa::component::mapping::linear::BarycentricMapperTetrahedronSetTopologyRigid< In, Out >::addPointInTetra ; (; const Index ; index, . const SReal * ; baryCoords .",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_barycentric_mapper_tetrahedron_set_topology_rigid.html:4698,update,updateJ,4698,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_barycentric_mapper_tetrahedron_set_topology_rigid.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_barycentric_mapper_tetrahedron_set_topology_rigid.html,1,['update'],['updateJ']
Deployability,er – SOFA. SOFA - Topic Tag: Cpp controller. /cpp-make-error; . /feed; ; cpp make error – SOFA. SOFA - Topic Tag: cpp make error. /cpp-plugins; . /feed; ; cpp plugins – SOFA. SOFA - Topic Tag: cpp plugins. /crash; . /feed; ; crash – SOFA. SOFA - Topic Tag: crash. /crevice; . /feed; ; crevice – SOFA. SOFA - Topic Tag: crevice. /cube; . /feed; ; cube – SOFA. SOFA - Topic Tag: cube. /cuda; . /feed; ; Cuda – SOFA. SOFA - Topic Tag: Cuda. /cuda-benchmark; . /feed; ; CUDA Benchmark – SOFA. SOFA - Topic Tag: CUDA Benchmark. /cutfem; . /feed; ; cutFEM – SOFA. SOFA - Topic Tag: cutFEM. /cut-soft-body; . /feed; ; cut soft body – SOFA. SOFA - Topic Tag: cut soft body. /cutting; . /feed; ; cutting – SOFA. SOFA - Topic Tag: cutting. /cutting-simulation; . /feed; ; Cutting Simulation – SOFA. SOFA - Topic Tag: Cutting Simulation. /damping; . /feed; ; damping – SOFA. SOFA - Topic Tag: damping. /damping-force-field-integration; . /feed; ; damping force field integration – SOFA. SOFA - Topic Tag: damping force field integration. /damping-gravity-fallspeed-eulerimplicitsolver-constantforcefield; . /feed; ; Damping Gravity fallspeed EulerImplicitSolver ConstantForceField – SOFA. SOFA - Topic Tag: Damping Gravity fallspeed EulerImplicitSolver ConstantForceField. /data; . /feed; ; Data – SOFA. SOFA - Topic Tag: Data. /data-component; . /feed; ; Data Component – SOFA. SOFA - Topic Tag: Data Component. /datadisplay-pointdata-c; . /feed; ; DataDisplay pointData C++ – SOFA. SOFA - Topic Tag: DataDisplay pointData C++. /debian-package-cmake; . /feed; ; debian package cmake – SOFA. SOFA - Topic Tag: debian package cmake. /debug; . /feed; ; debug – SOFA. SOFA - Topic Tag: debug. /default-shader; . /feed; ; default shader – SOFA. SOFA - Topic Tag: default shader. /deformable; . /feed; ; deformable – SOFA. SOFA - Topic Tag: deformable. /deformable-object; . /feed; ; Deformable object – SOFA. SOFA - Topic Tag: Deformable object. /deformation; . /feed; ; deformation – SOFA. SOFA - Topic Tag: deforma,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:438990,integrat,integration,438990,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['integrat'],['integration']
Deployability,"er)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseMechanicalState, BaseState)sofa::core::behavior::BaseMechanicalState; sofa::core::BaseState::SOFA_ABSTRACT_CLASS(BaseState, objectmodel::BaseObject)sofa::core::BaseState; SOFA_BASE_CAST_IMPLEMENTATION(BaseMechanicalState)sofa::core::behavior::BaseMechanicalState; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; vAlloc(const ExecParams *params, VecCoordId v, const core::VecIdProperties &properties={})=0sofa::core::behavior::BaseMechanicalStatepure virtual; vAlloc(const ExecParams *params, VecDerivId v, const core::VecIdProperties &properties={})=0sofa::core::behavior::BaseMechanicalStatepure virtual; vAvail(const ExecParams *params, VecCoordId &v)=0sofa::core::behavior::BaseMechanicalStatepure virtual; vAvail(const ExecParams *params, VecDerivId &v)=0sofa::core::behavior::BaseMechanicalStatepure virtual; vDot(const ExecParams *params, ConstVecId a, ConstVecId b)=0sofa::core::behavior::BaseMechanicalStatepure virtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; vFree(const ExecParams *params, VecCoordId v)=0sofa::core::behavior::BaseMechanicalStatepure virtual; vFree(const ExecParams *params, VecDerivId v)=0sofa::core::behavior::Ba",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state-members.html:15155,update,updateLinks,15155,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state-members.html,1,['update'],['updateLinks']
Deployability,"er)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Index, sofa::Index)sofa::component::engine::select::IndicesFromValues< T >; SOFA_CLASS(SOFA_TEMPLATE(IndicesFromValues, T), core::DataEngine)sofa::component::engine::select::IndicesFromValues< T >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Value typedefsofa::component::engine::select::IndicesFromValues< T >; VecData typedefsofa::core::objectmodel::Base; VecIndex typedefsofa::component::engine::select::IndicesFromValues< T >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecValue typedefsofa::component::engine::select::IndicesFromValues< T >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_indices_from_values-members.html:12443,update,update,12443,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_indices_from_values-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_indices_from_values-members.html,1,['update'],['update']
Deployability,"er)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Index, sofa::Index)sofa::component::engine::select::ValuesFromIndices< T >; SOFA_CLASS(SOFA_TEMPLATE(ValuesFromIndices, T), core::DataEngine)sofa::component::engine::select::ValuesFromIndices< T >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Value typedefsofa::component::engine::select::ValuesFromIndices< T >; ValuesFromIndices()sofa::component::engine::select::ValuesFromIndices< T >protected; VecData typedefsofa::core::objectmodel::Base; VecIndex typedefsofa::component::engine::select::ValuesFromIndices< T >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecValue typedefsofa::component::engine::select::ValuesFromIndices< T >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmode",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_indices-members.html:12271,update,update,12271,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_indices-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_indices-members.html,1,['update'],['update']
Deployability,"er, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setTransformation(const sofa::type::Matrix4 &t)sofa::core::loader::MeshLoaderinline; setTranslation(SReal dx, SReal dy, SReal dz)sofa::core::loader::MeshLoaderinline; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(MeshLoader, BaseLoader)sofa::core::loader::MeshLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(MeshGmshLoader, sofa::core::loader::MeshLoader)sofa::component::io::mesh::MeshGmshLoader; sofa::core::loader::MeshLoader::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; Tetrahedron typedefsofa::core::loader::MeshLoader; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::loader::MeshLoader; updateElements()sofa::core::loader::MeshLoadervirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMesh()sofa::core::loader::MeshLoadervirtual; updateNormals()sofa::core::loader::MeshLoadervirtual; updatePoints()sofa::core::loader::MeshLoadervirtual; Vec3 typedefsofa::core::loader::MeshLoader; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseLoader() overridesofa::core::loader::BaseLoaderprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_mesh_gmsh_loader-members.html:16723,update,updateElements,16723,api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_mesh_gmsh_loader-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_mesh_gmsh_loader-members.html,6,['update'],"['updateElements', 'updateInternal', 'updateLinks', 'updateMesh', 'updateNormals', 'updatePoints']"
Deployability,"er. ; Reimplemented from sofa::core::behavior::OdeSolver. ◆ getSolutionIntegrationFactor() [2/2]. SReal sofa::component::odesolver::backward::StaticSolver::getSolutionIntegrationFactor ; (; int ; outputDerivative, . SReal ; dt . ); const. inline . ◆ getVelocityIntegrationFactor(). SReal sofa::component::odesolver::backward::StaticSolver::getVelocityIntegrationFactor ; (; ); const. inlineoverridevirtual . Given a displacement as computed by the linear system inversion, how much will it affect the velocity; This method is used to compute the compliance for contact corrections For Euler methods, it is typically dt. ; Reimplemented from sofa::core::behavior::OdeSolver. ◆ SOFA_CLASS2(). sofa::component::odesolver::backward::StaticSolver::SOFA_CLASS2 ; (; StaticSolver ; , . sofa::core::behavior::OdeSolver ; , . sofa::core::behavior::LinearSolverAccessor ;  . ). ◆ solve(). void sofa::component::odesolver::backward::StaticSolver::solve ; (; const sofa::core::ExecParams * ; , . SReal ; , . sofa::core::MultiVecCoordId ; , . sofa::core::MultiVecDerivId ;  . ). overridevirtual . Main computation method.; Specify and execute all computation for timestep integration, i.e. advancing the state from time t to t+dt, putting the resulting position and velocity in the provided vectors. ; Implements sofa::core::behavior::OdeSolver. ◆ squared_increment_norms(). auto sofa::component::odesolver::backward::StaticSolver::squared_increment_norms ; (; ); const -> const std::vector<SReal> & . inline . The list of squared correction increment norms (dx.dot(dx) = ||dx||^2) of every newton iterations of the last solve call. . ◆ squared_residual_norms(). auto sofa::component::odesolver::backward::StaticSolver::squared_residual_norms ; (; ); const -> const std::vector<SReal> & . inline . The list of squared residual norms (r.dot(r) = ||r||^2) of every newton iterations of the last solve call. . sofacomponentodesolverbackwardStaticSolver; Generated on Mon Nov 11 2024 02:56:13 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_static_solver.html:21065,integrat,integration,21065,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_static_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_static_solver.html,1,['integrat'],['integration']
Deployability,"er::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglMatrix2x3Variable, OglMatrix2Variable)sofa::gl::component::shader::OglMatrix2x3Variable; sofa::gl::component::shader::OglMatrix2Variable::SOFA_CLASS(OglMatrix2Variable, OglVariable< type::vector< float > >)sofa::gl::component::shader::OglMatrix2Variable; OglVariable< type::vector< float > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< float > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; transposesofa::gl::component::shader::OglMatrix2Variable; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< float > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglMatrix2Variable()sofa::gl::component::shader::OglMatrix2Variableinlinevirtual; ~OglMatrix2x3Variable() overridesofa::gl::component::shader::OglMatrix2x3Variableinline; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix2x3_variable-members.html:14013,update,updateVisual,14013,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix2x3_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix2x3_variable-members.html,2,['update'],['updateVisual']
Deployability,"er::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglMatrix2x4Variable, OglMatrix2Variable)sofa::gl::component::shader::OglMatrix2x4Variable; sofa::gl::component::shader::OglMatrix2Variable::SOFA_CLASS(OglMatrix2Variable, OglVariable< type::vector< float > >)sofa::gl::component::shader::OglMatrix2Variable; OglVariable< type::vector< float > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< float > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; transposesofa::gl::component::shader::OglMatrix2Variable; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< float > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglMatrix2Variable()sofa::gl::component::shader::OglMatrix2Variableinlinevirtual; ~OglMatrix2x4Variable() overridesofa::gl::component::shader::OglMatrix2x4Variableinline; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix2x4_variable-members.html:14013,update,updateVisual,14013,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix2x4_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix2x4_variable-members.html,2,['update'],['updateVisual']
Deployability,"er::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglMatrix3x2Variable, OglMatrix2Variable)sofa::gl::component::shader::OglMatrix3x2Variable; sofa::gl::component::shader::OglMatrix2Variable::SOFA_CLASS(OglMatrix2Variable, OglVariable< type::vector< float > >)sofa::gl::component::shader::OglMatrix2Variable; OglVariable< type::vector< float > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< float > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; transposesofa::gl::component::shader::OglMatrix2Variable; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< float > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglMatrix2Variable()sofa::gl::component::shader::OglMatrix2Variableinlinevirtual; ~OglMatrix3x2Variable() overridesofa::gl::component::shader::OglMatrix3x2Variableinline; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix3x2_variable-members.html:14013,update,updateVisual,14013,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix3x2_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix3x2_variable-members.html,2,['update'],['updateVisual']
Deployability,"er::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglMatrix3x4Variable, OglMatrix2Variable)sofa::gl::component::shader::OglMatrix3x4Variable; sofa::gl::component::shader::OglMatrix2Variable::SOFA_CLASS(OglMatrix2Variable, OglVariable< type::vector< float > >)sofa::gl::component::shader::OglMatrix2Variable; OglVariable< type::vector< float > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< float > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; transposesofa::gl::component::shader::OglMatrix2Variable; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< float > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglMatrix2Variable()sofa::gl::component::shader::OglMatrix2Variableinlinevirtual; ~OglMatrix3x4Variable() overridesofa::gl::component::shader::OglMatrix3x4Variableinline; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix3x4_variable-members.html:14013,update,updateVisual,14013,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix3x4_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix3x4_variable-members.html,2,['update'],['updateVisual']
Deployability,"er::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglMatrix4x2Variable, OglMatrix2Variable)sofa::gl::component::shader::OglMatrix4x2Variable; sofa::gl::component::shader::OglMatrix2Variable::SOFA_CLASS(OglMatrix2Variable, OglVariable< type::vector< float > >)sofa::gl::component::shader::OglMatrix2Variable; OglVariable< type::vector< float > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< float > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; transposesofa::gl::component::shader::OglMatrix2Variable; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< float > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglMatrix2Variable()sofa::gl::component::shader::OglMatrix2Variableinlinevirtual; ~OglMatrix4x2Variable() overridesofa::gl::component::shader::OglMatrix4x2Variableinline; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4x2_variable-members.html:14013,update,updateVisual,14013,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4x2_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4x2_variable-members.html,2,['update'],['updateVisual']
Deployability,"er::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglMatrix4x3Variable, OglMatrix2Variable)sofa::gl::component::shader::OglMatrix4x3Variable; sofa::gl::component::shader::OglMatrix2Variable::SOFA_CLASS(OglMatrix2Variable, OglVariable< type::vector< float > >)sofa::gl::component::shader::OglMatrix2Variable; OglVariable< type::vector< float > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< float > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; transposesofa::gl::component::shader::OglMatrix2Variable; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< float > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglMatrix2Variable()sofa::gl::component::shader::OglMatrix2Variableinlinevirtual; ~OglMatrix4x3Variable() overridesofa::gl::component::shader::OglMatrix4x3Variableinline; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4x3_variable-members.html:14013,update,updateVisual,14013,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4x3_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4x3_variable-members.html,2,['update'],['updateVisual']
Deployability,"er::dynamic::EdgeSetTopologyModifiervirtual; splitEdgesProcess(sofa::type::vector< EdgeID > &indices, const sofa::type::vector< sofa::type::vector< SReal > > &baryCoefs, const bool removeIsolatedPoints=true)sofa::component::topology::container::dynamic::EdgeSetTopologyModifiervirtual; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; swapEdges(const sofa::type::vector< sofa::type::vector< EdgeID > > &edgesPairs)sofa::component::topology::container::dynamic::EdgeSetTopologyModifiervirtual; swapEdgesProcess(const sofa::type::vector< sofa::type::vector< EdgeID > > &edgesPairs)sofa::component::topology::container::dynamic::EdgeSetTopologyModifiervirtual; swapPoints(const Index i1, const Index i2)sofa::component::topology::container::dynamic::PointSetTopologyModifiervirtual; TopologyModifier()sofa::core::topology::TopologyModifierinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseTopologyObject() overridesofa::core::topology::BaseTopologyObjectinlineprotected; ~DynamicSparseGridTopologyModifier() overridesofa::component::topology::container::dynamic::DynamicSparseGridTopologyModifierinlineprotected; ~EdgeSetTopologyModifier() overridesofa::component::topology::container::dynamic::EdgeSetTopologyModifierinlineprotected; ~HexahedronSetTopologyModifier() overridesofa::component::topology::container::dynamic",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier-members.html:26846,update,updateInternal,26846,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier-members.html,1,['update'],['updateInternal']
Deployability,"er::dynamic::EdgeSetTopologyModifiervirtual; splitEdgesProcess(sofa::type::vector< EdgeID > &indices, const sofa::type::vector< sofa::type::vector< SReal > > &baryCoefs, const bool removeIsolatedPoints=true)sofa::component::topology::container::dynamic::EdgeSetTopologyModifiervirtual; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; swapEdges(const sofa::type::vector< sofa::type::vector< EdgeID > > &edgesPairs)sofa::component::topology::container::dynamic::EdgeSetTopologyModifiervirtual; swapEdgesProcess(const sofa::type::vector< sofa::type::vector< EdgeID > > &edgesPairs)sofa::component::topology::container::dynamic::EdgeSetTopologyModifiervirtual; swapPoints(const Index i1, const Index i2)sofa::component::topology::container::dynamic::PointSetTopologyModifiervirtual; TopologyModifier()sofa::core::topology::TopologyModifierinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseTopologyObject() overridesofa::core::topology::BaseTopologyObjectinlineprotected; ~EdgeSetTopologyModifier() overridesofa::component::topology::container::dynamic::EdgeSetTopologyModifierinlineprotected; ~HexahedronSetTopologyModifier() overridesofa::component::topology::container::dynamic::HexahedronSetTopologyModifierinlineprotected; ~PointSetTopologyModifier() overridesofa::component::topology::container::dynamic::PointSetTop",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_modifier-members.html:26223,update,updateInternal,26223,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_modifier-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_modifier-members.html,1,['update'],['updateInternal']
Deployability,"er::dynamic::EdgeSetTopologyModifiervirtual; splitEdgesProcess(sofa::type::vector< EdgeID > &indices, const sofa::type::vector< sofa::type::vector< SReal > > &baryCoefs, const bool removeIsolatedPoints=true)sofa::component::topology::container::dynamic::EdgeSetTopologyModifiervirtual; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; swapEdges(const sofa::type::vector< sofa::type::vector< EdgeID > > &edgesPairs)sofa::component::topology::container::dynamic::EdgeSetTopologyModifiervirtual; swapEdgesProcess(const sofa::type::vector< sofa::type::vector< EdgeID > > &edgesPairs)sofa::component::topology::container::dynamic::EdgeSetTopologyModifiervirtual; swapPoints(const Index i1, const Index i2)sofa::component::topology::container::dynamic::PointSetTopologyModifiervirtual; TopologyModifier()sofa::core::topology::TopologyModifierinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseTopologyObject() overridesofa::core::topology::BaseTopologyObjectinlineprotected; ~EdgeSetTopologyModifier() overridesofa::component::topology::container::dynamic::EdgeSetTopologyModifierinlineprotected; ~PointSetTopologyModifier() overridesofa::component::topology::container::dynamic::PointSetTopologyModifierinlineprotected; ~QuadSetTopologyModifier() overridesofa::component::topology::container::dynamic::QuadSetTopologyModifie",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_topology_modifier-members.html:22808,update,updateInternal,22808,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_topology_modifier-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_topology_modifier-members.html,1,['update'],['updateInternal']
Deployability,"er::getSystemInverseBaseMatrix ; (; ). inlinevirtual . Get the linear system inverse matrix, or nullptr if this solver does not build it. . ◆ getSystemLHBaseVector(). virtual linearalgebra::BaseVector* sofa::core::behavior::LinearSolver::getSystemLHBaseVector ; (; ). inlinevirtual . Get the linear system left-hand term vector, or nullptr if this solver does not build it. ; Reimplemented in sofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager >. ◆ getSystemRHBaseVector(). virtual linearalgebra::BaseVector* sofa::core::behavior::LinearSolver::getSystemRHBaseVector ; (; ). inlinevirtual . Get the linear system right-hand term vector, or nullptr if this solver does not build it. ; Reimplemented in sofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager >. ◆ hasUpdatedMatrix(). virtual bool sofa::core::behavior::LinearSolver::hasUpdatedMatrix ; (; ). inlinevirtual . Indicate if the solver updated the system after the last call of setSystemMBKMatrix (should return true if isParallelSolver return false) . ◆ init_partial_solve(). virtual void sofa::core::behavior::LinearSolver::init_partial_solve ; (; ). inlinevirtual . ◆ invertSystem(). virtual void sofa::core::behavior::LinearSolver::invertSystem ; (; ). inlinevirtual . Invert the system, this method is optional because it's called when solveSystem() is called for the first time. ; Reimplemented in sofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager >. ◆ isAsyncSolver(). virtual bool sofa::core::behavior::LinearSolver::isAsyncSolver ; (; ). inlinevirtual . Indicate if the solver update the system in parallel. ; Reimplemented in sofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager >. ◆ partial_solve(). virtual void sofa::core::behavior::LinearSolver::partial_solve ; (; std::list< linearalgebra::BaseMatrix::Index > & ; , . std::list< linearalgebra::BaseMatrix::Index > & ; , . bool ;  . ). inlinevirtual . ◆ r",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver.html:21013,update,updated,21013,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver.html,1,['update'],['updated']
Deployability,"er; const unsigned int max_num_files;  ; sofa::type::vector< std::string > files;  ; std::string path;  . Public Member Functions;  QMenuFilesRecentlyOpened (const std::string &configFile);  ;  ~QMenuFilesRecentlyOpened () override;  ; void openFile (const std::string &file) override;  ; QMenu * createWidget (QWidget *parent, const std::string &=std::string(""Recently Opened Files ...""));  ; QMenu * getMenu ();  ;  Public Member Functions inherited from sofa::gui::common::FilesRecentlyOpenedManager;  FilesRecentlyOpenedManager (const std::string &configFile);  ; virtual ~FilesRecentlyOpenedManager ();  ; virtual std::string getFilename (unsigned int idx) const;  ; unsigned int getMaxNumFiles () const;  ; const std::string & getPath () const;  ; void setPath (const std::string &p);  ; const sofa::type::vector< std::string > & getFiles () const;  ; void setFiles (const type::vector< std::string > &f);  . Protected Member Functions; void updateWidget ();  ;  Protected Member Functions inherited from sofa::gui::common::FilesRecentlyOpenedManager; void writeFiles () const;  . Attribute details. ◆ menuRecentlyOpenedFiles. QMenu* sofa::gui::qt::QMenuFilesRecentlyOpened::menuRecentlyOpenedFiles. protected . Constructor details. ◆ QMenuFilesRecentlyOpened(). sofa::gui::qt::QMenuFilesRecentlyOpened::QMenuFilesRecentlyOpened ; (; const std::string & ; configFile). inline . ◆ ~QMenuFilesRecentlyOpened(). sofa::gui::qt::QMenuFilesRecentlyOpened::~QMenuFilesRecentlyOpened ; (; ). inlineoverride . Function details. ◆ createWidget(). QMenu * sofa::gui::qt::QMenuFilesRecentlyOpened::createWidget ; (; QWidget * ; parent, . const std::string & ; name = std::string(""Recently Opened Files ..."") . ). ◆ getMenu(). QMenu* sofa::gui::qt::QMenuFilesRecentlyOpened::getMenu ; (; ). inline . ◆ openFile(). void sofa::gui::qt::QMenuFilesRecentlyOpened::openFile ; (; const std::string & ; file). overridevirtual . Reimplemented from sofa::gui::common::FilesRecentlyOpenedManager. ◆ updateWidget(). vo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_menu_files_recently_opened.html:1506,update,updateWidget,1506,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_menu_files_recently_opened.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_menu_files_recently_opened.html,2,['update'],['updateWidget']
Deployability,"erationType() overridesofa::gui::component::AddFrameButtonSettinginlinevirtual; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTopologyChange(core::topology::Topology *t)sofa::core::objectmodel::BaseObjectvirtual; hasDataChanged(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; hasField(const std::string &attribute) constsofa::core::objectmodel::Basevirtual; hasTag(Tag t) constsofa::core::objectmodel::Base; init() overridesofa::core::objectmodel::ConfigurationSettingvirtual; initData(::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags)sofa::core::objectmodel::Baseinline; initData(Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData(Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseprotected; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags)sofa::core::objectmodel::Baseprotected; initData0(Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=fa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_add_frame_button_setting-members.html:5885,Configurat,ConfigurationSettingvirtual,5885,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_add_frame_button_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_add_frame_button_setting-members.html,1,['Configurat'],['ConfigurationSettingvirtual']
Deployability,"erence delta and error threshold More...;  . Detailed Description; This file organization:; PRIVATE DECLARATION (the class that are only used internally); PRIVATE DEFINITION (the implementation of the private classes); PUBLIC DEFINITION (the implementation of the public classes). This file is providing an API to combine gtest and msg_* API. The underlying idea is to be able to test sofa's message.; The API is composed of two macro:; EXPECT_MSG_EMIT(...);; EXPECT_MSG_NOEMIT(...);. The first one generates a gtest failure when a message of a given type is not emitted. So You need to use it express that the good behavior from the object is to rise a message.; The second one generates a gtest failure when a message of a given type is emitted.; Examples of use: for(BaseLoader* b : objectlist) { EXPECT_MESSAGE_NOEMIT(Warning); EXPECT_MESSAGE_EMIT(Error); b->load(""Invalid file""); }; To work the API need to a specific handler to be install in the messaging system. This means that we need to install the message handler using. This is not done automatically To not add something with a linear time complexity in the process.; Example of installation: MessageDispatcher::addHandler( MainGtestMessageHandler::getInstance() ) ;; NB: This is done automatically if you are inhering from Sofa_test. ; Function Documentation. ◆ cleanup(). SOFA_TESTING_API void sofa::testing::cleanup ; (; ). Clean up the resources used by the Sofa.Testing library, as well as its dependencies: SofaDefaultType, SofaHelper. . ◆ copyFromData(). template<class Vector , class ReadData > . void sofa::testing::copyFromData ; (; Vector & ; v, . const ReadData & ; d . ). Resize the Vector and copy it from the Data. . ◆ copyToData(). template<class WriteData , class Vector > . void sofa::testing::copyToData ; (; WriteData & ; d, . const Vector & ; v . ). Copy the Vector to the Data. They must have the same size. . ◆ createCoord(). template<class DataTypes > . DataTypes::Coord sofa::testing::createCoord ; (; const sofa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html:3893,install,install,3893,api/master/sofa/html/namespacesofa_1_1testing.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1testing.html,2,['install'],['install']
Deployability,"erial::VerondaWestman< DataTypes >::Name = ""VerondaWestman"". staticconstexpr . Function details. ◆ applyElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes >::applyElasticityTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . const MatrixSym & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the Elasticity Tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ deriveSPKTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes >::deriveSPKTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the second Piola Kirchhoff stress tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ ElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes >::ElasticityTensor ; (; StrainInformation< DataTypes > * ; sinfo, . const MaterialParameters< DataTypes > & ; param, . Matrix6 & ; outputTensor . ). inlineoverridevirtual . Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ getStrainEnergy(). template<class DataTypes > . Real sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes >::getStrainEnergy ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ;  . ). inlineoverridevirtual . returns the strain energy of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. sofacomponentsol",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_veronda_westman.html:3206,configurat,configuration,3206,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_veronda_westman.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_veronda_westman.html,1,['configurat'],['configuration']
Deployability,ermining if the include file pthread.h exists failed. /develope-a-new-fem-plugin; . /feed; ; [SOLVED] Develop a new FEM plugin – SOFA. /page; . /14; ; SOFA - Topic: [SOLVED] Develop a new FEM plugin. /4; ; SOFA - Topic: [SOLVED] Develop a new FEM plugin. SOFA - Topic: [SOLVED] Develop a new FEM plugin. /difference-between-master-and-stable-versions; ; SOFA - Topic: [SOLVED] difference between master and stable versions. /differences-between-animationloops; . /feed; ; [SOLVED] Differences between AnimationLoops – SOFA. SOFA - Topic: [SOLVED] Differences between AnimationLoops. /difficulties-compiling-my-own-sofa-plugins-on-windows; ; SOFA - Topic: [SOLVED] Difficulties compiling my own SOFA plugins on Windows. /difficulty-compiling-applications-tutorials; ; SOFA - Topic: [SOLVED] Difficulty compiling applications/tutorials. /diffussion-for-tetrahedral-mesh; . /feed; ; [SOLVED] Diffusion for tetrahedral mesh – SOFA. SOFA - Topic: [SOLVED] Diffusion for tetrahedral mesh. /discover-the-new-release-v20-12; . /feed; ; Discover the new release v20.12! – SOFA. SOFA - Topic: Discover the new release v20.12!. /discover-the-new-release-v21-06; . /feed; ; Discover the new release v21.06! – SOFA. SOFA - Topic: Discover the new release v21.06!. /dlls-error-when-building-sofa-in-windows10; ; SOFA - Topic: DLLs error when building SOFA in Windows10. /dockerized-sofa-ros-2-sofarosconnector-etc; ; SOFA - Topic: Dockerized Sofa + ROS 2 + SofaROSConnector etc. /document-about-xml-grammar; ; SOFA - Topic: [SOLVED] Document about xml grammar. /documentation-for-attachconstraint; ; SOFA - Topic: [SOLVED] Documentation for attachconstraint?. /documentation-of-sofa-has-been-updated; ; SOFA - Topic: Documentation of SOFA has been updated!. /documents-of-classes-and-functions; ; SOFA - Topic: [SOLVED] Documents of classes and functions. /does-dir-notfound-bad; ; SOFA - Topic: [SOLVED] does DIR-NOTFOUND bad?. /does-sofa-have-intention-of-developing-mobile-application; . /feed; ; [SOLVED] Does ,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:288717,release,release-,288717,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['release'],['release-']
Deployability,"erride;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; virtual bool load () final;  ; virtual void applyTransformation (sofa::type::Matrix4 const &T);  Apply Homogeneous transformation to the positions. More...;  ; virtual void updateMesh ();  ; virtual void updateElements ();  ; virtual void updatePoints ();  ; virtual void updateNormals ();  ; void setTranslation (SReal dx, SReal dy, SReal dz);  ; void setRotation (SReal rx, SReal ry, SReal rz);  ; void setScale (SReal sx, SReal sy, SReal sz);  ; void setTransformation (const sofa::type::Matrix4 &t);  ; virtual Vec3 getTranslation () const;  ; virtual Vec3 getRotation () const;  ; virtual Vec3 getScale () const;  ; virtual sofa::type::Matrix4 getTransformation () const;  ;  Public Member Functions inherited from sofa::core::loader::BaseLoader;  SOFA_ABSTRACT_CLASS (BaseLoader, objectmodel::BaseObject);  ; void setFilename (std::string f);  ; const std::string & getFilename ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const overr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_grid_mesh_creator.html:7213,update,updateMesh,7213,api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_grid_mesh_creator.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_grid_mesh_creator.html,44,['update'],"['updateElements', 'updateMesh', 'updateNormals', 'updatePoints']"
Deployability,"ers . sofa::gl::component::shader::OglOITShader Class Reference . #include <OglOITShader.h>. Inheritance diagram for sofa::gl::component::shader::OglOITShader:. [legend]. Static Public Attributes; static const std::string PATH_TO_OIT_ACCUMULATION_VERTEX_SHADERS = ""shaders/orderIndependentTransparency/accumulation.vert"";  ; static const std::string PATH_TO_OIT_ACCUMULATION_FRAGMENT_SHADERS = ""shaders/orderIndependentTransparency/accumulation.frag"";  . Public Member Functions;  SOFA_CLASS (OglOITShader, sofa::gl::component::shader::OglShader);  ; sofa::gl::GLSLShader * accumulationShader ();  ;  Public Member Functions inherited from sofa::gl::component::shader::OglShader;  SOFA_CLASS2 (OglShader, core::visual::Shader, core::visual::VisualModel);  ; void doInitVisual (const core::visual::VisualParams *) override;  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void parse (core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void start () override;  Start the shader. More...;  ; void stop () override;  Stop the shader. More...;  ; bool isActive () override;  ; unsigned int getNumberOfShaders ();  ; unsigned int getCurrentIndex ();  ; void setCurrentIndex (const unsigned int index);  ; void addDefineMacro (const unsigned int index, const std::string &name, const std::string &value);  ; void setTexture (const unsigned int index, const char *name, unsigned short unit);  ; void setInt (const unsigned int index, const char *name, int i);  ; void setInt2 (const unsigned int index, const char *name, int i1, int i2);  ; void setInt3 (const unsigned int index, const char *name, int i1, int i2, int i3);  ; void setInt4 (const unsigned int index, const char *name, int i1, ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_o_i_t_shader.html:1227,Update,Update,1227,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_o_i_t_shader.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_o_i_t_shader.html,1,['Update'],['Update']
Deployability,"ersection::MinProximityIntersectionvirtual; testIntersection(SphereType1 &sph1, SphereType2 &sph2)=deletesofa::component::collision::detection::intersection::MinProximityIntersection; sofa::component::collision::detection::intersection::DiscreteIntersection::testIntersection(collision::geometry::Sphere &sph1, collision::geometry::Sphere &sph2, const core::collision::Intersection *currentIntersection)sofa::component::collision::detection::intersection::DiscreteIntersectionvirtual; sofa::component::collision::detection::intersection::DiscreteIntersection::testIntersection(collision::geometry::Sphere &sph1, collision::geometry::Sphere &sph2)=deletesofa::component::collision::detection::intersection::DiscreteIntersectionvirtual; testIntersectionSphere(SphereType1 &sph1, SphereType2 &sph2, const SReal alarmDist)sofa::component::collision::detection::intersection::DiscreteIntersectioninlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; useContinuous() constsofa::core::collision::Intersectioninlinevirtual; useLineLinesofa::component::collision::detection::intersection::MinProximityIntersection; useLinePointsofa::component::collision::detection::intersection::MinProximityIntersection; usePointPointsofa::component::collision::detection::intersection::MinProximityIntersection; useProximity() const overridesofa::component::collision::detection::intersection::BaseProximityIntersectioninlinevirtual; useSphereTrianglesofa::component::collision::detection::intersection::MinProximityIntersection; useSurfaceNormalssofa::component::collision::detection::intersection::MinProximityIntersection; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::B",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_min_proximity_intersection-members.html:16833,update,updateInternal,16833,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_min_proximity_intersection-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_min_proximity_intersection-members.html,1,['update'],['updateInternal']
Deployability,"ersection::NewProximityIntersectionvirtual; testIntersection(SphereType1 &sph1, SphereType2 &sph2)=deletesofa::component::collision::detection::intersection::NewProximityIntersection; sofa::component::collision::detection::intersection::DiscreteIntersection::testIntersection(collision::geometry::Sphere &sph1, collision::geometry::Sphere &sph2, const core::collision::Intersection *currentIntersection)sofa::component::collision::detection::intersection::DiscreteIntersectionvirtual; sofa::component::collision::detection::intersection::DiscreteIntersection::testIntersection(collision::geometry::Sphere &sph1, collision::geometry::Sphere &sph2)=deletesofa::component::collision::detection::intersection::DiscreteIntersectionvirtual; testIntersectionSphere(SphereType1 &sph1, SphereType2 &sph2, const SReal alarmDist)sofa::component::collision::detection::intersection::DiscreteIntersectioninlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; useContinuous() constsofa::core::collision::Intersectioninlinevirtual; useLineLinesofa::component::collision::detection::intersection::NewProximityIntersection; useProximity() const overridesofa::component::collision::detection::intersection::BaseProximityIntersectioninlinevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseIntersector()sofa::core::collision::BaseIntersectorinline; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseProximityIntersection() overridesofa::component::collision::detection::intersection::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_new_proximity_intersection-members.html:16533,update,updateInternal,16533,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_new_proximity_intersection-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_new_proximity_intersection-members.html,1,['update'],['updateInternal']
Deployability,"ert a string to a wstring. More...;  ; static std::string narrowString (const std::wstring &ws);  Convert a wstring to a string. More...;  ; static std::string downcaseString (const std::string &s);  Convert a string to lower case. More...;  ; static std::string upcaseString (const std::string &s);  Convert a string to upper case. More...;  ; static const std::string & getExecutablePath ();  Get the path of the executable that is currently running. More...;  ; static const std::string & getExecutableDirectory ();  Get the path to the directory of the executable that is currently running. More...;  ; static const std::string & getUserLocalDirectory ();  Get the path to the current user local config directory. More...;  ; static const std::string & getSofaUserLocalDirectory ();  Get the path to the SOFA directory into the current user local config directory. More...;  ; static const std::string & getSofaPathPrefix ();  Get the path to the ""root"" path of Sofa (i.e. the build directory or the installation prefix). More...;  ; static const std::string getSofaPathTo (const std::string &pathFromBuildDir);  Construct a path based on the build dir path of Sofa. More...;  ; static std::map< std::string, std::string > readBasicIniFile (const std::string &path);  Read a file written in a very basic ini-like format. More...;  . Function details. ◆ downcaseString(). std::string sofa::helper::Utils::downcaseString ; (; const std::string & ; s). static . Convert a string to lower case. . ◆ getExecutableDirectory(). const std::string & sofa::helper::Utils::getExecutableDirectory ; (; ). static . Get the path to the directory of the executable that is currently running. . ◆ getExecutablePath(). const std::string & sofa::helper::Utils::getExecutablePath ; (; ). static . Get the path of the executable that is currently running. ; Note that this function uses various non-portable tricks to achieve its goal, and it might not be the most reliable thing ever written. . ◆ getSofaPathPrefix()",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html:1502,install,installation,1502,api/master/sofa/html/classsofa_1_1helper_1_1_utils.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_utils.html,2,['install'],['installation']
Deployability,ertyDockMoved ; (; Qt::DockWidgetArea ; a). protectedslot . ◆ quit. void sofa::gui::qt::RealGUI::quit ; (; ). signal . ◆ redraw. void sofa::gui::qt::RealGUI::redraw ; (; ). overrideslot . refresh the visualization window . ◆ registerViewer(). void sofa::gui::qt::RealGUI::registerViewer ; (; common::BaseViewer * ; _viewer). overridevirtual . Used to directly replace the current viewer. ; Reimplemented from sofa::gui::common::BaseGUI. ◆ reload. void sofa::gui::qt::RealGUI::reload ; (; ). signal . ◆ removeViewer(). void sofa::gui::qt::RealGUI::removeViewer ; (; ). virtual . ◆ resetScene. void sofa::gui::qt::RealGUI::resetScene ; (; ). virtualslot . ◆ resetView. virtual void sofa::gui::qt::RealGUI::resetView ; (; ). inlinevirtualslot . ◆ saveView. virtual void sofa::gui::qt::RealGUI::saveView ; (; ). inlinevirtualslot . ◆ sceneGraphViewDirtynessChanged. void sofa::gui::qt::RealGUI::sceneGraphViewDirtynessChanged ; (; bool ; isDirty). protectedvirtualslot . Update the SceneGraph update button to reflect the dirtiness status. . ◆ sceneGraphViewLockingChanged. void sofa::gui::qt::RealGUI::sceneGraphViewLockingChanged ; (; bool ; isLocked). protectedvirtualslot . Update the SceneGraph update button to reflect the locking status. . ◆ screenshot. void sofa::gui::qt::RealGUI::screenshot ; (; ). virtualslot . ◆ setBackgroundColor(). void sofa::gui::qt::RealGUI::setBackgroundColor ; (; const sofa::type::RGBAColor & ; c). overridevirtual . Reimplemented from sofa::gui::common::BaseGUI. ◆ setBackgroundImage(). void sofa::gui::qt::RealGUI::setBackgroundImage ; (; const std::string & ; i). overridevirtual . Reimplemented from sofa::gui::common::BaseGUI. ◆ setDt. void sofa::gui::qt::RealGUI::setDt ; (; const QString & ; value). virtualslot . ◆ setDumpState(). void sofa::gui::qt::RealGUI::setDumpState ; (; bool ; b). overridevirtual . Reimplemented from sofa::gui::common::BaseGUI. ◆ setExportGnuplot. void sofa::gui::qt::RealGUI::setExportGnuplot ; (; bool ; exp). virtualslot . ◆ setExp,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_real_g_u_i.html:19428,update,update,19428,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_real_g_u_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_real_g_u_i.html,3,"['Update', 'update']","['Update', 'update']"
Deployability,"es > . sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForceField ; (; SReal ; _ks = 100.0, . SReal ; _kd = 5.0 . ). protected . ◆ SpringForceField() [2/2]. template<class DataTypes > . sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SpringForceField ; (; MechanicalState * ; object1, . MechanicalState * ; object2, . SReal ; _ks = 100.0, . SReal ; _kd = 5.0 . ). protected . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df1, . DataVecDeriv & ; df2, . const DataVecDeriv & ; dx1, . const DataVecDeriv & ; dx2 . ). overridevirtual . Compute the force derivative given a small displacement from the position and velocity used in the previous call to addForce().; The derivative should be directly derived from the computations done by addForce. Any forces neglected in addDForce will be integrated explicitly (i.e. using its value at the beginning of the timestep).; If the ForceField can be represented as a matrix, this method computes $ df += kFactor K dx + bFactor B dx $; This method must be implemented by the component, and is usually called by the generic PairInteractionForceField::addDForce() method.; To support old components that implement the deprecated addForce method without scalar coefficients, it defaults to using a temporaty vector to compute $ K dx $ and then manually scaling all values by kFactor. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; f1, . DataVecDeriv & ; f2, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2, . const DataVecDeriv & ; v1, . const DataVecDeriv & ; v2 . ). overridevirtual . Given the current pos",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field.html:31322,integrat,integrated,31322,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field.html,1,['integrat'],['integrated']
Deployability,"es > . void sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::addMToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; mat, . SReal ; mFact, . unsigned int & ; offset . ). overridevirtual . Add Mass contribution to global Matrix assembling. ; Reimplemented from sofa::core::behavior::Mass< DataTypes >. ◆ applyEdgeMassCreation() [1/2]. template<class DataTypes , class GeometricalTypes = DataTypes> . template<typename T = GeometricalTypes, typename std::enable_if_t< T::spatial_dimensions > = 3, int > . void sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::applyEdgeMassCreation ; (; Index ; edgeIndex, . MassType & ; EdgeMass, . const core::topology::BaseMeshTopology::Edge & ; , . const sofa::type::vector< Index > & ; , . const sofa::type::vector< SReal > & ;  . ). protected . Method to update See alsod_vertexMass using mass matrix coefficient when a new Triangle is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TRIANGLESADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Triangle is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TRIANGLESREMOVED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a new Quad is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Quad is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSREMOVED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a new Tetrahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Tetrahedron is removed. Will be set as callback in the PointD",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html:38099,update,update,38099,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,1,['update'],['update']
Deployability,"es > . void sofa::component::mechanicalload::QuadPressureForceField< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ initQuadInformation(). template<class DataTypes > . void sofa::component::mechanicalload::QuadPressureForceField< DataTypes >::initQuadInformation. protected . ◆ isPointInPlane(). template<class DataTypes > . bool sofa::component::mechanicalload::QuadPressureForceField< DataTypes >::isPointInPlane ; (; Coord ; p). protected . ◆ selectQuadsAlongPlane(). template<class DataTypes > . void sofa::component::mechanicalload::QuadPressureForceField< DataTypes >::selectQuadsAlongPlane. protected . ◆ selectQuadsFromString(). template<class DataTypes > . void sofa::component::mechanicalload::QuadPressureForceField< DataTypes >::selectQuadsFromString. protected . ◆ setDminAndDmax(). template<class DataTypes > . void sofa::component::mechanicalload::QuadPressureForceField< DataTypes >::setDminAndDmax ; (; const SReal ; _dmin, . const SReal ; _dmax . ). inline . ◆ setNormal(). template<class DataTypes > . void sofa::component::mechanicalload::QuadPressureForceField< DataTypes >::setNormal ; (; const Coord ; n). inline . ◆ setPressure(). template<class DataTypes > . void sofa::component::mechanicalload::QuadPressureForceField< DataTypes >::setPressure ; (; Deriv ; _pressure). inline . ◆ SOFA_CLASS(). template<class DataTypes > . sofa::component::mechanicalload::QuadPressureForceField< DataTypes >::SOFA_CLASS ; (; SOFA_TEMPLATE(QuadPressureForceField< DataTypes >, DataTypes) ; , . SOFA_TEMPLATE(core::behavior::ForceField, DataTypes) ;  . ). ◆ updateQuadInformation(). template<class DataTypes > . void sofa::component::mechanicalload::QuadPressureForceField< DataTypes >::updateQuadInformation. protected . sofacomponentmechanicalloadQuadPressureForceField; Generated on Mon Nov 11 2024 02:53:36 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_quad_pressure_force_field.html:29384,update,updateQuadInformation,29384,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_quad_pressure_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_quad_pressure_force_field.html,2,['update'],['updateQuadInformation']
Deployability,"es >. ◆ init() [3/3]. template<class DataTypes > . void sofa::component::constraint::lagrangian::correction::UncoupledConstraintCorrection< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ reinit(). template<class DataTypes > . void sofa::component::constraint::lagrangian::correction::UncoupledConstraintCorrection< DataTypes >::reinit. overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ resetContactForce(). template<class DataTypes > . void sofa::component::constraint::lagrangian::correction::UncoupledConstraintCorrection< DataTypes >::resetContactForce. overridevirtual . Implements sofa::core::behavior::BaseConstraintCorrection. ◆ resetForUnbuiltResolution(). template<class DataTypes > . void sofa::component::constraint::lagrangian::correction::UncoupledConstraintCorrection< DataTypes >::resetForUnbuiltResolution ; (; SReal * ; f, . std::list< unsigned int > & ;  . ). overridevirtual . Reimplemented from sofa::core::behavior::BaseConstraintCorrection. ◆ setConstraintDForce(). template<class DataTypes > . void sofa::component::constraint::lagrangian::correction::UncoupledConstraintCorrection< DataTypes >::setConstraintDForce ; (; SReal * ; df, . int ; begin, . int ; end, . bool ; update . ). overridevirtual . Reimplemented from sofa::core::behavior::BaseConstraintCorrection. ◆ SOFA_CLASS(). template<class TDataTypes > . sofa::component::constraint::lagrangian::correction::UncoupledConstraintCorrection< TDataTypes >::SOFA_CLASS ; (; SOFA_TEMPLATE(UncoupledConstraintCorrection< TDataTypes >, TDataTypes) ; , . SOFA_TEMPLATE(sofa::core::behavior::ConstraintCorrection, TDataTypes) ;  . ). sofacomponentconstraintlagrangiancorrectionUncoupledConstraintCorrection; Generated on Mon Nov 11 2024 02:34:44 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_uncoupled_constraint_correction.html:30923,update,update,30923,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_uncoupled_constraint_correction.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_uncoupled_constraint_correction.html,1,['update'],['update']
Deployability,"es >::getInverse ; (; std::string ; name). static . ◆ getInverseMap(). template<class TDataTypes > . static std::map<std::string, InverseStorage>& sofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< TDataTypes >::getInverseMap ; (; ). inlinestatic . ◆ hasConstraintNumber(). template<class DataTypes > . bool sofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< DataTypes >::hasConstraintNumber ; (; int ; index). overridevirtual . Reimplemented from sofa::core::behavior::BaseConstraintCorrection. ◆ loadCompliance(). template<class DataTypes > . bool sofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< DataTypes >::loadCompliance ; (; std::string ; fileName). protected . Load compliance matrix from memory or external file according to fileName. ; ReturnsLoading success. . ◆ releaseInverse(). template<class DataTypes > . void sofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< DataTypes >::releaseInverse ; (; std::string ; name, . InverseStorage * ; inv . ). static . ◆ resetContactForce(). template<class DataTypes > . void sofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< DataTypes >::resetContactForce. overridevirtual . Implements sofa::core::behavior::BaseConstraintCorrection. ◆ resetForUnbuiltResolution(). template<class DataTypes > . void sofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< DataTypes >::resetForUnbuiltResolution ; (; SReal * ; f, . std::list< unsigned int > & ;  . ). overridevirtual . Reimplemented from sofa::core::behavior::BaseConstraintCorrection. ◆ rotateConstraints() [1/5]. SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_CORRECTION_API void sofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< defaulttype::Rigid3Types >::rotateConstraints ; (; bool ; back). ◆ rotateConstraints() [2/5]. template<class DataTypes > . void sofa::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_precomputed_constraint_correction.html:35862,release,releaseInverse,35862,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_precomputed_constraint_correction.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_precomputed_constraint_correction.html,1,['release'],['releaseInverse']
Deployability,"es >; MechanicalState< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; MechanicalState< DataTypes >::SOFA_CLASS(SOFA_TEMPLATE(State, DataTypes), BaseState)sofa::core::State< DataTypes >; SOFA_CLASS2(SOFA_TEMPLATE(MechanicalState, DataTypes), BaseMechanicalState, SOFA_TEMPLATE(State, DataTypes))sofa::core::behavior::MechanicalState< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; State()sofa::core::State< DataTypes >protected; storeResetState() overridesofa::component::statecontainer::MechanicalObject< DataTypes >virtual; swapValues(const sofa::Index idx1, const sofa::Index idx2)sofa::component::statecontainer::MechanicalObject< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; translationsofa::component::statecontainer::MechanicalObject< DataTypes >protected; translation2sofa::component::statecontainer::MechanicalObject< DataTypes >protected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; vsofa::component::statecontainer::MechanicalObject< DataTypes >; vAlloc(const core::ExecParams *params, core::VecCoordId v, const core::VecIdProperties &properties={}) overridesofa::component::statecontainer::MechanicalObject< DataTypes >virtual; vAlloc(const core::ExecParams *params, core::VecDerivId v, const core::VecIdProperties &properties={}) overridesofa::component::statecontainer::MechanicalObject< DataTypes >virtual; vAllocImpl(core::TVecId< vtype, core::V_WRITE > v, const core::VecIdProperties &properties)sofa::component::statecontainer::MechanicalObject< DataTypes >protected; vAvail(const core::ExecParams *params, core::VecCoordId &v) overridesofa::component::statecontainer::MechanicalObject< DataTypes >virtual; vAvail(const core::ExecParams *params, core::VecDerivId &v) overridesofa::component::statecontainer::MechanicalObject< DataTypes >virtual; vAvailImpl(core::TVecId< vtype, core::V_WRITE > &v, sofa::type::v",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object-members.html:27491,update,updateLinks,27491,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object-members.html,1,['update'],['updateLinks']
Deployability,"es >; SOFA_CLASS(SOFA_TEMPLATE(TriangularBiquadraticSpringsForceField, DataTypes), SOFA_TEMPLATE(core::behavior::ForceField, DataTypes))sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >; ForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; triangleInfosofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >protected; TriangularBiquadraticSpringsForceField()sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >protected; updateInternal()sofa::core::objectmodel::BaseObject; updateLameCoefficients()sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMatrixsofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >protected; VecCoord typedefsofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field-members.html:19630,update,updateInternal,19630,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field-members.html,1,['update'],['updateInternal']
Deployability,"es at index outputIndex by the ones at inputIndex. More...;  ; void swapValues (const sofa::Index idx1, const sofa::Index idx2);  Exchange values at indices idx1 and idx2. More...;  ; void renumberValues (const sofa::type::vector< sofa::Index > &index);  Reorder values according to parameter. More...;  ; void computeWeightedValue (const sofa::Index i, const sofa::type::vector< sofa::Index > &ancestors, const sofa::type::vector< double > &coefs);  Replace the value at index by the sum of the ancestors values weithed by the coefs. More...;  ; void forcePointPosition (const sofa::Index i, const sofa::type::vector< double > &m_x);  Force the position of a point (and force its velocity to zero value) More...;  ; void getIndicesInSpace (sofa::type::vector< sofa::Index > &indices, Real xmin, Real xmax, Real ymin, Real ymax, Real zmin, Real zmax) const override;  Get the indices of the particles located in the given bounding box. More...;  ; bool addBBox (SReal *minBBox, SReal *maxBBox) override;  update the given bounding box, to include this More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible=false) override;  Bounding Box computation method. More...;  ; virtual std::list< ConstraintBlock > constraintBlocks (const std::list< unsigned int > &indices) const override;  Express the matrix L in term of block of matrices, using the indices of the lines in the MatrixDeriv container. More...;  ; SReal getConstraintJacobianTimesVecDeriv (unsigned int line, core::ConstVecId id) override;  Compute the error given a state vector and a line of the Jacobian (line in vector C) More...;  ; void handleStateChange () override;  ; bool pickParticles (const core::ExecParams *params, double rayOx, double rayOy, double rayOz, double rayDx, double rayDy, double rayDz, double radius0, double dRadius, std::multimap< double, std::pair< sofa::core::behavior::BaseMechanicalState *, int > > &particles) override;  ; bool isIndependent () const;  if this mechanical object sto",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:8838,update,update,8838,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['update'],['update']
Deployability,"es). protected . Method to update. ; See alsod_edgeSprings when a point is removed. Will be set as callback when POINTSREMOVED event is fired . ◆ applyPointRenumbering(). template<class DataTypes > . void sofa::component::solidmechanics::spring::FastTriangularBendingSprings< DataTypes >::applyPointRenumbering ; (; const sofa::type::vector< Index > & ; pointToRenumber). protected . Method to update. ; See alsod_edgeSprings when points are renumbered. Will be set as callback when POINTSRENUMBERING event is fired . ◆ applyTriangleCreation(). template<class DataTypes > . void sofa::component::solidmechanics::spring::FastTriangularBendingSprings< DataTypes >::applyTriangleCreation ; (; const sofa::type::vector< Index > & ; triangleAdded, . const sofa::type::vector< core::topology::BaseMeshTopology::Triangle > & ; , . const sofa::type::vector< sofa::type::vector< Index > > & ; , . const sofa::type::vector< sofa::type::vector< SReal > > & ;  . ). protected . Method to update See alsod_edgeSprings when a new triangle is created. Will be set as callback in the EdgeData . d_edgeSprings when TRIANGLESADDED event is fired to create a new spring between new created triangles. . ◆ applyTriangleDestruction(). template<class DataTypes > . void sofa::component::solidmechanics::spring::FastTriangularBendingSprings< DataTypes >::applyTriangleDestruction ; (; const sofa::type::vector< Index > & ; triangleRemoved). protected . Method to update See alsod_edgeSprings when a triangle is removed. Will be set as callback in the EdgeData . d_edgeSprings when TRIANGLESREMOVED event is fired to remove spring if needed or update pair of triangles. . ◆ buildDampingMatrix(). template<class _DataTypes > . void sofa::component::solidmechanics::spring::FastTriangularBendingSprings< _DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; ). finalvirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ buildStiffnessMatrix(). template<class _DataTypes > . void sofa::component",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs.html:26444,update,update,26444,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs.html,1,['update'],['update']
Deployability,"es1, DataTypes2 >::MixedInteractionConstraint ; (; MechanicalState< DataTypes1 > * ; mm1 = nullptr, . MechanicalState< DataTypes2 > * ; mm2 = nullptr . ). protected . ◆ ~MixedInteractionConstraint(). template<class DataTypes1 , class DataTypes2 > . sofa::core::behavior::MixedInteractionConstraint< DataTypes1, DataTypes2 >::~MixedInteractionConstraint. overrideprotected . Function details. ◆ buildConstraintMatrix() [1/2]. template<class TDataTypes1 , class TDataTypes2 > . virtual void sofa::core::behavior::MixedInteractionConstraint< TDataTypes1, TDataTypes2 >::buildConstraintMatrix ; (; const ConstraintParams * ; cParams, . DataMatrixDeriv1 & ; c1, . DataMatrixDeriv2 & ; c2, . unsigned int & ; cIndex, . const DataVecCoord1 & ; x1, . const DataVecCoord2 & ; x2 . ). pure virtual . Construct the Jacobian Matrix; Parameters. c1and c2 are the results constraint sparse matrix ; cIndexis the index of the next constraint equation: when building the constraint matrix, you have to use this index, and then update it ; x1and x2 are the position vectors used for constraint equation computation ; cParamsdefines the state vectors to use for positions and velocities. Also defines the order of the constraint (POS, VEL, ACC). This is the method that should be implemented by the component . ◆ buildConstraintMatrix() [2/2]. template<class DataTypes1 , class DataTypes2 > . void sofa::core::behavior::MixedInteractionConstraint< DataTypes1, DataTypes2 >::buildConstraintMatrix ; (; const ConstraintParams * ; cParams, . MultiMatrixDerivId ; cId, . unsigned int & ; cIndex . ). overridevirtual . Construct the Jacobian Matrix; Parameters. cIdis the result constraint sparse matrix Id ; cIndexis the index of the next constraint equation: when building the constraint matrix, you have to use this index, and then update it ; cParamsdefines the state vectors to use for positions and velocities. Also defines the order of the constraint (POS, VEL, ACC) . Implements sofa::core::behavior::BaseConstraintS",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_constraint.html:22167,update,update,22167,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_constraint.html,1,['update'],['update']
Deployability,"eset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(ContextObject, BaseObject)sofa::core::objectmodel::ContextObject; SOFA_CLASS(Gravity, core::objectmodel::ContextObject)sofa::component::mechanicalload::Gravity; sofa::core::objectmodel::ContextObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ContextObject() overridesofa::core::objectmodel::ContextObjectinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_gravity-members.html:10053,update,updateInternal,10053,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_gravity-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_gravity-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"esetState()sofa::core::objectmodel::BaseObjectvirtual; Tetra typedefsofa::core::topology::Topology; TetrahedraAroundEdge typedefsofa::core::topology::BaseMeshTopology; TetrahedraAroundTriangle typedefsofa::core::topology::BaseMeshTopology; TetrahedraAroundVertex typedefsofa::core::topology::BaseMeshTopology; Tetrahedron typedefsofa::core::topology::Topology; TetrahedronID typedefsofa::core::topology::Topology; TetraID typedefsofa::core::topology::Topology; Topology()sofa::core::topology::Topologyinlineprotected; TopologyContainer()sofa::core::topology::TopologyContainerinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; unlinkTopologyHandlerToData(TopologyHandler *topologyHandler, sofa::geometry::ElementType elementType)sofa::core::topology::TopologyContainervirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseTopologyObject() overridesofa::core::topology::BaseTopologyObjectinlineprotected; ~Topology()sofa::core::topology::Topologyinlineprotectedvirtual; ~TopologyContainer() overridesofa::core::topology::TopologyContainerprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_container-members.html:23460,update,updateInternal,23460,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_container-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_container-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"esetState()sofa::core::objectmodel::BaseObjectvirtual; Tetra typedefsofa::core::topology::Topology; TetrahedraAroundEdge typedefsofa::core::topology::BaseMeshTopology; TetrahedraAroundTriangle typedefsofa::core::topology::BaseMeshTopology; TetrahedraAroundVertex typedefsofa::core::topology::BaseMeshTopology; Tetrahedron typedefsofa::core::topology::Topology; TetrahedronID typedefsofa::core::topology::Topology; TetraID typedefsofa::core::topology::Topology; Topology()sofa::core::topology::Topologyinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; updateHexahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateTetrahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; UV typedefsofa::component::topology::container::constant::MeshTopology; UVID typedefsofa::component::topology::container::constant::MeshTopology; validHexahedrasofa::component::topology::container::constant::MeshTopologyprotected; validTetrahedrasofa::component::topology::container::constant::MeshTopologyprotected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology-members.html:33123,update,updateInternal,33123,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology-members.html,1,['update'],['updateInternal']
Deployability,"esh the visualization window More...;  ; virtual void exportOBJ (sofa::simulation::Node *node, bool exportMTL=true);  ; virtual void dumpState (bool);  ; virtual void displayComputationTime (bool);  ; virtual void setExportGnuplot (bool);  ; virtual void setExportVisitor (bool);  ; virtual void displayProflierWindow (bool);  ; virtual void currentTabChanged (int index);  ; virtual void popupOpenFileSelector ();  This open popup the file selection windows. More...;  ; virtual void fileReload ();  ; virtual void fileExit ();  ; virtual void helpAbout ();  ; virtual void editRecordDirectory ();  ; virtual void editGnuplotDirectory ();  ; virtual void showDocBrowser ();  ; virtual void showAbout ();  ; virtual void showPluginManager ();  ; virtual void showMouseManager ();  ; virtual void showVideoRecorderManager ();  ; virtual void showWindowDataGraph ();  ; virtual void toolsDockMoved ();  . Protected Slots; virtual void changeViewer ();  ; virtual void updateViewerList ();  ; virtual void onSceneGraphRefreshButtonClicked ();  Update the scenegraph and activate the automatic refresh. More...;  ; virtual void sceneGraphViewDirtynessChanged (bool isDirty);  Update the SceneGraph update button to reflect the dirtiness status. More...;  ; virtual void sceneGraphViewLockingChanged (bool isLocked);  Update the SceneGraph update button to reflect the locking status. More...;  ; void propertyDockMoved (Qt::DockWidgetArea a);  ; void appendToDataLogFile (QString);  ; void docBrowserVisibilityChanged (bool);  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::gui::common::BaseGUI; static std::string mGuiName = """";  ; static std::string configDirectoryPath = ""."";  ; static std::string screenshotDirectoryPath = ""."";  ; static const char * mProgramName = nullptr;  ; static ArgumentParser * mArgumentParser = nullptr;  . Attribute details. ◆ background. WDoubleLineEdit* sofa::gui::qt::RealGUI::background[3]. protected . ◆ backgroundImage. QLineEdit* so",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_real_g_u_i.html:8409,update,updateViewerList,8409,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_real_g_u_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_real_g_u_i.html,3,"['Update', 'update']","['Update', 'updateViewerList']"
Deployability,esistance-in-a-simple-model; ; SOFA - Topic: [SOLVED] How to implement mechanical resistance in a simple model. /how-to-import-numpy-is-python-scripting-of-sofa; ; SOFA - Topic: [SOLVED] How to import numpy in python scripting of SOFA?. /how-to-import-sofa-in-softrobot; ; SOFA - Topic: How to import sofa in SoftRobot. /how-to-import-volume-mesh-from-matlab-iso2mesh-toolkit; ; SOFA - Topic: [SOLVED] How to import volume mesh from Matlab iso2mesh toolkit?. /how-to-incise-3d-object; . /page; . /10; ; SOFA - Topic: [SOLVED] How to incise 3d object. /11; ; SOFA - Topic: [SOLVED] How to incise 3d object. /3; ; SOFA - Topic: [SOLVED] How to incise 3d object. /5; ; SOFA - Topic: [SOLVED] How to incise 3d object. SOFA - Topic: [SOLVED] How to incise 3d object. /how-to-increase-fps-of-a-scene-including-more-than-20000-tetrahedral-mesh; ; SOFA - Topic: [SOLVED] How to increase FPS of a scene including more than 20000 tetrahedral mesh. /how-to-integrate-the-new-fem-methods-into-sofa-engine; ; SOFA - Topic: How to integrate the new FEM methods into SOFA engine. /how-to-interact-with-3d-deformable-objects-in-sofa; ; SOFA - Topic: How to interact with 3D deformable objects in SOFA. /how-to-know-the-collision-force-or-energy; ; SOFA - Topic: How to know the collision force or energy. /how-to-learn-mesh-editing-programming; . /feed; ; [SOLVED] How to learn mesh editing programming? – SOFA. SOFA - Topic: [SOLVED] How to learn mesh editing programming?. /how-to-learn-using-sofa; ; SOFA - Topic: How to learn using SOFA. /how-to-look-at-the-example-of-the-source-codec; ; SOFA - Topic: [SOLVED] How to look at the example of the source code(c++) ?. /how-to-make-a-6dof-simulation-act-like-a-4dof-make-3d-act-like-2d-simulation; ; SOFA - Topic: How to make a 6DOF simulation act like a 4DOF (make 3d act like 2d simulation)?. /how-to-make-a-modal-analysis; ; SOFA - Topic: how to: Make a modal analysis. /how-to-make-a-pythonscript-controller-with-sofapython3; ; SOFA - Topic: [SOLVED] How to make,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:324707,integrat,integrate-the-new-fem-methods-into-sofa-engine,324707,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['integrat'],"['integrate', 'integrate-the-new-fem-methods-into-sofa-engine']"
Deployability,"esofa::core::CollisionModelprotected; Size typedefsofa::core::CollisionModel; SOFA_ABSTRACT_CLASS(CollisionModel, objectmodel::BaseObject)sofa::core::CollisionModel; SOFA_CLASS(SOFA_TEMPLATE(LineCollisionModel, TDataTypes), core::CollisionModel)sofa::component::collision::geometry::LineCollisionModel< TDataTypes >; sofa::core::CollisionModel::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPHERE_TYPE enum valuesofa::core::CollisionModel; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; TETRAHEDRON_TYPE enum valuesofa::core::CollisionModel; TLine< DataTypes > classsofa::component::collision::geometry::LineCollisionModel< TDataTypes >friend; topologysofa::component::collision::geometry::LineCollisionModel< TDataTypes >protected; Topology typedefsofa::core::CollisionModel; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; TRIANGLE_TYPE enum valuesofa::core::CollisionModel; updateFromTopology()sofa::component::collision::geometry::LineCollisionModel< TDataTypes >protectedvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; userDatasofa::core::CollisionModelprotected; VecCoord typedefsofa::component::collision::geometry::LineCollisionModel< TDataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::collision::geometry::LineCollisionModel< TDataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; velocity(sofa::Index index) constsofa::component::collision::geometry::LineCollisionModel< TDataTypes >inline; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model-members.html:18015,update,updateFromTopology,18015,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model-members.html,1,['update'],['updateFromTopology']
Deployability,"esofa::core::objectmodel::Baseprotected; m_oldAttributessofa::core::objectmodel::Base; m_vecDatasofa::core::objectmodel::Baseprotected; m_vecLinksofa::core::objectmodel::Baseprotected; MapData typedefsofa::core::objectmodel::Base; MapLink typedefsofa::core::objectmodel::Base; MyClass typedefsofa::core::objectmodel::Base; namesofa::core::objectmodel::Base; narrowPhaseDetectionsofa::core::collision::Pipelineprotected; narrowPhaseDetectionssofa::core::collision::Pipelineprotected; notMuted() constsofa::core::objectmodel::Baseinline; parse(BaseObjectDescription *arg) overridesofa::core::objectmodel::BaseObjectvirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; parseFields(const std::list< std::string > &str)sofa::core::objectmodel::Base; parseFields(const std::map< std::string, std::string * > &str)sofa::core::objectmodel::Basevirtual; Pipeline()sofa::core::collision::Pipelineprotected; PipelineImpl()sofa::simulation::PipelineImplprotected; Ptr typedefsofa::core::objectmodel::Base; reinit()sofa::core::objectmodel::BaseObjectvirtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(objectmodel::BaseNode *node) overridesofa::core::collision::Pipelinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset() overridesofa::simulation::PipelineImplvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObje",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html:9512,Pipeline,PipelineImplprotected,9512,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,1,['Pipeline'],['PipelineImplprotected']
Deployability,"essor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  AbstractTransformMatrixEngine ();  ;  ~AbstractTransformMatrixEngine () override;  ; void doUpdate () override=0;  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_abstract_transform_matrix_engine.html:12654,update,update,12654,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_abstract_transform_matrix_engine.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_abstract_transform_matrix_engine.html,1,['update'],['update']
Deployability,"essor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  TopologyModifier ();  Constructor. More...;  ;  ~TopologyModifier () override;  Destructor. More...;  ; void addTopologyChange (const TopologyChange *topologyChange);  Adds a TopologyChange object to the list of the topology this object describes. More...;  ; void addStateChange (const TopologyChange *topologyChange);  Adds a StateChange object to the list of the topology this object describes. More...;  ;  Protected Member Functions inherited from sofa::core::topology::BaseTopologyObject;  BaseTopologyObject ();  ;  ~BaseTopologyObject () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; vo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_modifier.html:11431,update,update,11431,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_modifier.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_modifier.html,1,['update'],['update']
Deployability,"essor< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(PositionBasedDynamicsProjectiveConstraint, DataTypes), SOFA_TEMPLATE(sofa::core::behavior::ProjectiveConstraintSet, DataTypes))sofa::component::constraint::projective::PositionBasedDynamicsProjectiveConstraint< DataTypes >; sofa::core::behavior::ProjectiveConstraintSet::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ProjectiveConstraintSet, DataTypes), BaseProjectiveConstraintSet, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ProjectiveConstraintSet< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; stiffnesssofa::component::constraint::projective::PositionBasedDynamicsProjectiveConstraint< DataTypes >; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::constraint::projective::PositionBasedDynamicsProjectiveConstraint< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::constraint::projective::PositionBasedDynamicsProjectiveConstraint< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; velocitysofa::component::constraint::projective::PositionBasedDynamicsProjectiveConstraint< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseProjectiveConstraintSet() overridesofa::core::behavior::BaseProjectiveConstraintSetinlineprotected; ~PositionBasedDynamicsProjectiveConstraint()sofa::co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_position_based_dynamics_projective_constraint-members.html:17588,update,updateLinks,17588,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_position_based_dynamics_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_position_based_dynamics_projective_constraint-members.html,1,['update'],['updateLinks']
Deployability,"essorinlineprotected; StiffnessMatrix typedefsofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; StrainDisplacement typedefsofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >; toLameParameters(_2DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; toLameParameters(_3DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Transformation typedefsofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >; TriangleFEMForceField()sofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >protected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >; VecElement typedefsofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecMaterialStiffness typedefsofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >; VecReal typedefsofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecStrainDisplacement typedefsofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::cor",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangle_f_e_m_force_field-members.html:23304,update,updateLinks,23304,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangle_f_e_m_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangle_f_e_m_force_field-members.html,1,['update'],['updateLinks']
Deployability,"estors values weithed by the coefs. ; Sum of the coefs should usually equal to 1.0 . ◆ constraintBlocks(). template<class DataTypes > . std::list< core::behavior::BaseMechanicalState::ConstraintBlock > sofa::component::statecontainer::MechanicalObject< DataTypes >::constraintBlocks ; (; const std::list< unsigned int > & ; indices); const. overridevirtual . Express the matrix L in term of block of matrices, using the indices of the lines in the MatrixDeriv container. ; Reimplemented from sofa::core::behavior::BaseMechanicalState. ◆ copyFromBaseVector(). template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::copyFromBaseVector ; (; core::VecId ; dest, . const linearalgebra::BaseVector * ; src, . unsigned int & ; offset . ). overridevirtual . Copy data to a local vector the state stored in a global BaseVector Parameters. offsetthe offset in the BaseVector where the scalar values will be used. It will be updated to the first scalar value after the ones used by this operation when this method returns . Implements sofa::core::behavior::BaseMechanicalState. ◆ copyToBaseMatrix(). template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::copyToBaseMatrix ; (; linearalgebra::BaseMatrix * ; dest, . core::ConstMatrixDerivId ; src, . unsigned int & ; offset . ). overridevirtual . Copy data to a global BaseMatrix from the state stored in a local vector. ; Implements sofa::core::behavior::BaseMechanicalState. ◆ copyToBaseVector(). template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::copyToBaseVector ; (; linearalgebra::BaseVector * ; dest, . core::ConstVecId ; src, . unsigned int & ; offset . ). overridevirtual . Copy data to a global BaseVector the state stored in a local vector Parameters. offsetthe offset in the BaseVector where the scalar values will be used. It will be updated to the first scalar value after the ones used by this operation when this ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:52275,update,updated,52275,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['update'],['updated']
Deployability,"estruction ; (; const sofa::type::vector< EdgeID > & ; edgeRemoved). protected . Method to update See alsod_vertexMass when a Edge is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when EDGESREMOVED event is fired. . ◆ applyPointCreation(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::applyPointCreation ; (; PointID ; pointIndex, . MassType & ; m, . const Point & ; , . const sofa::type::vector< PointID > & ; , . const sofa::type::vector< SReal > & ;  . ). protected . Method to initialize See alsoMassVector when a new Point is created. Will be set as creation callback in the PointData . d_vertexMass . ◆ applyPointDestruction(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::applyPointDestruction ; (; Index ; id, . MassType & ; VertexMass . ). protected . Method to update See alsod_vertexMass when a Point is removed. Will be set as destruction callback in the PointData . d_vertexMass . ◆ buildDampingMatrix(). template<class DataTypes , class GeometricalTypes = DataTypes> . void sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; ). inlineoverridevirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ buildMassMatrix(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::buildMassMatrix ; (; sofa::core::behavior::MassMatrixAccumulator * ; matrices). overridevirtual . Reimplemented from sofa::core::behavior::BaseMass. ◆ buildStiffnessMatrix(). template<class DataTypes , class GeometricalTypes = DataTypes> . void sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::buildStiffnessMatrix ; (; core::behavior::StiffnessMatrix * ; ). inlineoverridevirtual . Reimplemented from sofa::core::behavior::Bas",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html:35764,update,update,35764,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,1,['update'],['update']
Deployability,"et an attribute given its name (return defaultVal if not present) More...;  ; virtual float getAttributeAsFloat (const std::string &attr, const float defaultVal=0.0);  Docs is in .h. More...;  ; virtual int getAttributeAsInt (const std::string &attr, const int defaultVal=0.0);  Docs is in .h. More...;  ; virtual void setAttribute (const std::string &attr, const std::string &val);  Set an attribute. Override any existing value. More...;  ; virtual std::string getFullName ();  Get the full name of this object (i.e. concatenation if all the names of its ancestors and itself) More...;  ; virtual void logError (const std::string &s);  ; virtual void logErrors (const std::vector< std::string > &e);  ; std::vector< std::string > const & getErrors () const;  ; virtual void clearErrors ();  . Protected Member Functions; virtual void updateSceneGraph (sofa::core::BaseMapping *multiMapping, const type::vector< simulation::Node * > &ancestorInputs, type::vector< simulation::Node * > &otherInputs, type::vector< simulation::Node * > &outputs)=0;  ;  Protected Member Functions inherited from sofa::simulation::xml::BaseElement; virtual bool setParent (BaseElement *newParent);  Change this node's parent. Note that this method is protected as it should be called by the parent's addChild/removeChild methods. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::xml::BaseElement; std::map< std::string, std::string > replaceAttribute;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObjectDescription; AttributeMap attributes;  ; std::vector< std::string > errors;  ;  Static Public Member Functions inherited from sofa::simulation::xml::BaseElement; static BaseElement * Create (const std::string &nodeClass, const std::string &name, const std::string &type);  ; template<class Node > ; static Node * create (Node *, std::pair< std::string, std::string > arg);  . Constructor details. ◆ BaseMultiMappingElement(). sofa::simulation::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html:5377,update,updateSceneGraph,5377,api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1xml_1_1_base_multi_mapping_element.html,2,['update'],['updateSceneGraph']
Deployability,"et the input model and return true, otherwise do nothing and return false. ; Reimplemented in sofa::core::Mapping< TIn, TOut >, sofa::core::Mapping< In, Out >, and sofa::core::Mapping< defaulttype::Vec3Types, DataTypes >. ◆ setMassesMapped(). void sofa::core::BaseMapping::setMassesMapped ; (; bool ; b). virtual . ◆ setMatricesMapped(). void sofa::core::BaseMapping::setMatricesMapped ; (; bool ; b). virtual . ◆ setNonMechanical(). void sofa::core::BaseMapping::setNonMechanical ; (; ). virtual . ◆ setTo(). bool sofa::core::BaseMapping::setTo ; (; BaseState * ; to). virtual . If the type is compatible set the output model and return true, otherwise do nothing and return false. ; Reimplemented in sofa::core::Mapping< TIn, TOut >, sofa::core::Mapping< In, Out >, and sofa::core::Mapping< defaulttype::Vec3Types, DataTypes >. ◆ SOFA_ABSTRACT_CLASS(). sofa::core::BaseMapping::SOFA_ABSTRACT_CLASS ; (; BaseMapping ; , . objectmodel::BaseObject ;  . ). ◆ testMechanicalState(). bool sofa::core::BaseMapping::testMechanicalState ; (; BaseState * ; state). protected . ◆ updateK(). virtual void sofa::core::BaseMapping::updateK ; (; const MechanicalParams * ; , . ConstMultiVecDerivId ;  . ). inlinevirtual . Compute the geometric stiffness matrix based on given child forces K = dJ^T * outForce Default implementation does nothing, corresponding to a linear mapping. ; Reimplemented in sofa::component::mapping::nonlinear::RigidMapping< TIn, TOut >, sofa::component::mapping::nonlinear::BaseNonLinearMapping< TIn, TOut, HasStabilizedGeometricStiffness >, sofa::component::mapping::nonlinear::BaseNonLinearMapping< TIn, TOut, true >, sofa::component::mapping::nonlinear::BaseNonLinearMapping< TIn, TOut, false >, sofa::component::mapping::nonlinear::RigidMapping< TIn, TOut >, sofa::component::mapping::nonlinear::DistanceMultiMapping< TIn, TOut >, and sofa::component::mapping::nonlinear::RigidMapping< TIn, TOut >. sofacoreBaseMapping; Generated on Mon Nov 11 2024 03:14:09 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_base_mapping.html:32533,update,updateK,32533,api/master/sofa/html/classsofa_1_1core_1_1_base_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_base_mapping.html,2,['update'],['updateK']
Deployability,"etInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(TopologyModifier, BaseTopologyObject)sofa::core::topology::TopologyModifier; sofa::core::topology::BaseTopologyObject::SOFA_CLASS(BaseTopologyObject, core::objectmodel::BaseObject)sofa::core::topology::BaseTopologyObject; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; TopologyModifier()sofa::core::topology::TopologyModifierinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseTopologyObject() overridesofa::core::topology::BaseTopologyObjectinlineprotected; ~TopologyModifier() overridesofa::core::topology::TopologyModifierinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_modifier-members.html:10651,update,updateInternal,10651,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_modifier-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_modifier-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"etSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(Indices2ValuesMapper, DataTypes), sofa::core::DataEngine)sofa::component::engine::transform::Indices2ValuesMapper< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::engine::transform::Indices2ValuesMapper< DataTypes >; VecCoord typedefsofa::component::engine::transform::Indices2ValuesMapper< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~Indices2ValuesMapper() overridesofa::component::engine::transform::Indices2ValuesMapper< DataTypes >inlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_indices2_values_mapper-members.html:12928,update,updateInternal,12928,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_indices2_values_mapper-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_indices2_values_mapper-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"etSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(NormalsFromPoints, DataTypes), core::DataEngine)sofa::component::engine::generate::NormalsFromPoints< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; trianglessofa::component::engine::generate::NormalsFromPoints< DataTypes >; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; useAnglessofa::component::engine::generate::NormalsFromPoints< DataTypes >; VecCoord typedefsofa::component::engine::generate::NormalsFromPoints< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~NormalsFromPoints() overridesofa::component::engine::generate::N",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_normals_from_points-members.html:12649,update,updateAllInputsIfDirty,12649,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_normals_from_points-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_normals_from_points-members.html,1,['update'],['updateAllInputsIfDirty']
Deployability,"etails. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). overridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their cont",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_f_e_m_force_field.html:26091,update,update,26091,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_f_e_m_force_field.html,1,['update'],['update']
Deployability,"ethod to warn if Data has not been filled at constructor. More...;  ; virtual bool createWidgets ()=0;  ; virtual void setDataReadOnly (bool readOnly)=0;  This method is called after createWidgets to configure whether the created widgets should be read-only. More...;  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  . Static Public Member Functions; template<class T > ; static T * create (T *, const CreatorArgument &arg);  ; static DataWidget * CreateDataWidget (const DataWidget::CreatorArgument &dwarg);  . Protected Member Functions; virtual void readFromData ()=0;  The implementation of this method tells how the widget reads the value of the data. More...;  ; virtual void writeToData ()=0;  . Signals; void WidgetDirty (bool);  ; void DataOwnerDirty (bool);  ; void dataValueChanged (QString dataValueString);  . Public Slots; void updateDataValue ();  ; void updateWidgetValue ();  ; void setWidgetDirty (bool b=true);  ; void fillFromData ();  . Attribute details. ◆ baseData. core::objectmodel::BaseData* sofa::gui::qt::DataWidget::baseData. protected . ◆ counter. int sofa::gui::qt::DataWidget::counter. protected . ◆ dirty. bool sofa::gui::qt::DataWidget::dirty. protected . ◆ m_isFilled. bool sofa::gui::qt::DataWidget::m_isFilled. protected . tell if DataWidget has been filled from Data true by default . ◆ m_toFill. bool sofa::gui::qt::DataWidget::m_toFill. protected . bool to warn action is needed to fill Data, false by default . Constructor details. ◆ DataWidget(). sofa::gui::qt::DataWidget::DataWidget ; (; QWidget * ; parent, . const char * ; name, . MyData * ; d . ). ◆ ~DataWidget(). sofa::gui::qt::DataWidget::~DataWidget ; (; ). override . Function details. ◆ create(). template<class T > . static T* sofa::gui::qt::DataWidget::create ; (; T * ; , . const CreatorArgument & ; arg . ). inlinestatic . ◆ CreateDataWidget(). DataWidget * sofa::gui::qt::DataWidget",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_widget.html:2323,update,updateDataValue,2323,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_widget.html,4,['update'],"['updateDataValue', 'updateWidgetValue']"
Deployability,"etrahedralTensorMassForceField, DataTypes), SOFA_TEMPLATE(core::behavior::ForceField, DataTypes))sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >; ForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; TetrahedralTensorMassForceField()sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >protected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLameCoefficients()sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMatrixsofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >protected; VecCoord typedefsofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecType typedefsofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseObject() overridesofa::core::objectmod",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field-members.html:18730,update,updateLinks,18730,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field-members.html,1,['update'],['updateLinks']
Deployability,"etricalTypes >::checkTotalMassInit. virtual . ◆ checkVertexMass(). template<class DataTypes , class GeometricalTypes > . bool sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::checkVertexMass. virtual . ◆ clear(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::clear. virtual . ◆ computeMass(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::computeMass. Compute the mass from input values. . ◆ copyVertexMass(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::copyVertexMass. Copy the vertex mass scalar (in case of CudaTypes) . ◆ doUpdateInternal(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::doUpdateInternal. overridevirtual . Implementation of the internal update. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ draw(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ getElementMass() [1/2]. template<class DataTypes , class GeometricalTypes > . SReal sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::getElementMass ; (; Index ; index); const. overridevirtual . Get the mass relative to the DOF at index. ; Implements sofa::core::behavior::BaseMass. ◆ getElementMass() [2/2]. template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::getElementMass ; (; Index ; index, . linearalgebra::BaseMatrix * ; m . ); const. overridevirtual . Get the matrix relative to the DOF at",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html:44313,update,update,44313,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,1,['update'],['update']
Deployability,"eturn true if the timer output string has a json string and the timer is setup to output json. . ◆ closeGUI(). int sofa::gui::batch::BatchGUI::closeGUI ; (; ). overridevirtual . Close the GUI. ; Implements sofa::gui::common::BaseGUI. ◆ CreateGUI(). BaseGUI * sofa::gui::batch::BatchGUI::CreateGUI ; (; const char * ; name, . sofa::simulation::NodeSPtr ; groot = nullptr, . const char * ; filename = nullptr . ). static . ◆ currentSimulation(). sofa::simulation::Node * sofa::gui::batch::BatchGUI::currentSimulation ; (; ). overridevirtual . Get the rootNode of the sofa scene. ; Implements sofa::gui::common::BaseGUI. ◆ exportJson(). void sofa::gui::batch::BatchGUI::exportJson ; (; const std::string & ; timerOutputStr, . int ; iterationNumber . ); const. protected . Export a text file (with json extension) containing the timer output string. . ◆ mainLoop(). int sofa::gui::batch::BatchGUI::mainLoop ; (; ). overridevirtual . Implements sofa::gui::common::BaseGUI. ◆ OnNbIterChange(). void sofa::gui::batch::BatchGUI::OnNbIterChange ; (; const common::ArgumentParser * ; argumentParser, . const std::string & ; strValue . ). static . ◆ redraw(). void sofa::gui::batch::BatchGUI::redraw ; (; ). overridevirtual . Update the GUI. ; Implements sofa::gui::common::BaseGUI. ◆ RegisterGUIParameters(). int sofa::gui::batch::BatchGUI::RegisterGUIParameters ; (; common::ArgumentParser * ; argumentParser). static . ◆ resetScene(). void sofa::gui::batch::BatchGUI::resetScene ; (; ). ◆ setScene(). void sofa::gui::batch::BatchGUI::setScene ; (; sofa::simulation::NodeSPtr ; groot, . const char * ; filename = """", . bool ; temporaryFile = false . ). overridevirtual . Register the scene in our GUI. ; Implements sofa::gui::common::BaseGUI. ◆ startDumpVisitor(). void sofa::gui::batch::BatchGUI::startDumpVisitor ; (; ). protected . ◆ stopDumpVisitor(). void sofa::gui::batch::BatchGUI::stopDumpVisitor ; (; ). protected . sofaguibatchBatchGUI; Generated on Mon Nov 11 2024 03:19:18 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1batch_1_1_batch_g_u_i.html:7453,Update,Update,7453,api/master/sofa/html/classsofa_1_1gui_1_1batch_1_1_batch_g_u_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1batch_1_1_batch_g_u_i.html,1,['Update'],['Update']
Deployability,"ex edgeIndex, EdgeRestInformation &, const core::topology::BaseMeshTopology::Edge &e, const sofa::type::vector< Index > &, const sofa::type::vector< SReal > &);  ; void applyTriangleCreation (const sofa::type::vector< Index > &triangleAdded, const sofa::type::vector< core::topology::BaseMeshTopology::Triangle > &, const sofa::type::vector< sofa::type::vector< Index > > &, const sofa::type::vector< sofa::type::vector< SReal > > &);  ; void applyTriangleDestruction (const sofa::type::vector< Index > &triangleRemoved);  ;  TriangularTensorMassForceField ();  second Lame coefficient More...;  ; virtual ~TriangularTensorMassForceField ();  ; sofa::core::topology::EdgeData< sofa::type::vector< EdgeRestInformation > > & getEdgeInfo ();  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Bas",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field.html:16777,update,update,16777,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field.html,1,['update'],['update']
Deployability,"ex typedefsofa::core::topology::BaseMeshTopology; Tetrahedron typedefsofa::core::topology::Topology; TetrahedronID typedefsofa::core::topology::Topology; TetraID typedefsofa::core::topology::Topology; Topology()sofa::core::topology::Topologyinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; Type enum namesofa::component::topology::container::grid::SparseGridTopology; UP enum valuesofa::component::topology::container::grid::SparseGridRamificationTopology; updateEdges()sofa::component::topology::container::grid::SparseGridTopologyprotectedvirtual; updateHexahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMesh()sofa::component::topology::container::grid::SparseGridTopology; updateQuads()sofa::component::topology::container::grid::SparseGridTopologyprotectedvirtual; updateTetrahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; UV typedefsofa::component::topology::container::constant::MeshTopology; UVID typedefsofa::component::topology::container::constant::MeshTopology; validHexahedrasofa::component::topology::container::constant::MeshTopologyprotected; validTetrahedrasofa::component::topology::container::constant::MeshTopologyprotected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; voxelizeTriangleMesh(helper::io::Mesh *mesh, sofa::core::sptr< RegularGridTopology > regularGrid, ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_multiple_topology-members.html:50587,update,updateInternal,50587,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_multiple_topology-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_multiple_topology-members.html,2,['update'],['updateInternal']
Deployability,"ext, core::objectmodel::BaseObjectDescription *arg);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  ProximityROI ();  ;  ~ProximityROI () override;  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_proximity_r_o_i.html:14506,update,update,14506,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_proximity_r_o_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_proximity_r_o_i.html,1,['update'],['update']
Deployability,"ext, objectmodel::BaseObjectDescription *arg);  ; static std::string shortName (const T *ptr=nullptr, objectmodel::BaseObjectDescription *arg=nullptr);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field.html:18009,update,update,18009,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field.html,1,['update'],['update']
Deployability,"eyRivlin< DataTypes >, sofa::component::solidmechanics::fem::hyperelastic::material::Costa< DataTypes >, sofa::component::solidmechanics::fem::hyperelastic::material::BoyceAndArruda< DataTypes >, and sofa::component::solidmechanics::fem::hyperelastic::material::STVenantKirchhoff< DataTypes >. ◆ deriveSPKTensor(). template<class DataTypes > . virtual void sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >::deriveSPKTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . MatrixSym & ;  . ). inlinevirtual . computes the second Piola Kirchhoff stress tensor of the current configuration ; Reimplemented in sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes >, sofa::component::solidmechanics::fem::hyperelastic::material::STVenantKirchhoff< DataTypes >, sofa::component::solidmechanics::fem::hyperelastic::material::StableNeoHookean< DataTypes >, sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes >, sofa::component::solidmechanics::fem::hyperelastic::material::NeoHookean< DataTypes >, sofa::component::solidmechanics::fem::hyperelastic::material::MooneyRivlin< DataTypes >, sofa::component::solidmechanics::fem::hyperelastic::material::Costa< DataTypes >, and sofa::component::solidmechanics::fem::hyperelastic::material::BoyceAndArruda< DataTypes >. ◆ ElasticityTensor(). template<class DataTypes > . virtual void sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >::ElasticityTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . Matrix6 & ;  . ). inlinevirtual . Reimplemented in sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes >, sofa::component::solidmechanics::fem::hyperelastic::material::StableNeoHookean< DataTypes >, sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes >, sofa::com",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_hyperelastic_material.html:3315,configurat,configuration,3315,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_hyperelastic_material.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_hyperelastic_material.html,1,['configurat'],['configuration']
Deployability,"f element (corresponding with the shader) More...;  ; Data< unsigned int > indexShader;  Name of element (corresponding with the shader) More...;  ; std::set< OglShader * > shaders;  Shader to use the element with. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::gl::component::shader::OglAttribute< 2, GL_UNSIGNED_INT, sofa::type::Vec< 2, unsigned int > >;  OglAttribute ();  ;  ~OglAttribute () override;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_u_int2_attribute.html:16297,update,update,16297,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_u_int2_attribute.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_u_int2_attribute.html,2,['update'],['update']
Deployability,"f element (corresponding with the shader) More...;  ; Data< unsigned int > indexShader;  Name of element (corresponding with the shader) More...;  ; std::set< OglShader * > shaders;  Shader to use the element with. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::gl::component::shader::OglAttribute< 3, GL_UNSIGNED_INT, sofa::type::Vec< 3, unsigned int > >;  OglAttribute ();  ;  ~OglAttribute () override;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_u_int3_attribute.html:16297,update,update,16297,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_u_int3_attribute.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_u_int3_attribute.html,2,['update'],['update']
Deployability,"f element (corresponding with the shader) More...;  ; Data< unsigned int > indexShader;  Name of element (corresponding with the shader) More...;  ; std::set< OglShader * > shaders;  Shader to use the element with. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::gl::component::shader::OglAttribute< 4, GL_UNSIGNED_INT, sofa::type::Vec< 4, unsigned int > >;  OglAttribute ();  ;  ~OglAttribute () override;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_u_int4_attribute.html:16297,update,update,16297,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_u_int4_attribute.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_u_int4_attribute.html,2,['update'],['update']
Deployability,f-medfit-2019; ; SOFA – SOFA partner of MedFIT 2019. /sofa-presented-at-medteq-2018-in-montreal; ; SOFA – SOFA presented at MedTeq 2018 in Montreal. /sofa-presented-in-webinar-radiologie-numerique-french; ; SOFA – SOFA presented in webinar “Radiologie Numérique” [French]. /sofa-soon-on-github; ; SOFA – SOFA soon on GitHub. /sofa-stc5-coming-soon; ; SOFA – SOFA STC#5 in Strasbourg. /sofa-technical-committee-3-upcoming-raise-your-expectations; ; SOFA – SOFA Technical Committee #3 upcoming: raise your expectations!. /sofa-technologies-exhibited-amd-learning-day-in-paris; ; SOFA – SOFA technologies exhibited @ AMD Learning Day in Paris. /sofa-training-discover-and-learn-sofa-at-ismar2017; ; SOFA – SOFA training: discover and learn SOFA at ISMAR 2017. /sofa-v16-12-has-been-released; ; SOFA – SOFA v16.12 has been released!. /sofa-v17-06-has-been-released; ; SOFA – SOFA v17.06 has been released!. /sofa-v17-12-has-been-released; ; SOFA – SOFA v17.12 has been released!. /sofa-v18-06-has-been-released; ; SOFA – SOFA v18.06 has been released!. /sofa-v18-12-has-been-released; ; SOFA – SOFA v18.12 has been released!. /sofa-v19-06-has-been-released; ; SOFA – SOFA v19.06 has been released!. /sofa-v19-12-has-been-released; ; SOFA – SOFA v19.12 has been released!. /sofa-v20-06-has-been-released; ; SOFA – SOFA v20.06 has been released!. /sofa-v20-12-has-been-released; ; SOFA – SOFA v20.12 has been released!. /sofa-v21-06-has-been-released; ; SOFA – SOFA v21.06 has been released!. /sofa-v21-12-has-been-released; ; SOFA – SOFA v21.12 has been released!. /sofa-v22-06-has-been-released; ; SOFA – SOFA v22.06 has been released!. /sofa-v22-12-has-been-released; ; SOFA – SOFA v22.12 has been released!. /sofa-v23-06-has-been-released; ; SOFA – SOFA v23.06 has been released!. /sofa-v23-12-has-been-released; ; SOFA – SOFA v23.12 has been released!. /sofa-v24-06-has-been-released; ; SOFA – SOFA v24.06 has been released!. /sofa-week-2018-experience; ; SOFA – SOFA Week 2018 Experience. /sofa-week-2,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:8885,release,released,8885,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['release'],['released']
Deployability,"f. template<class DataTypes , class GeometricalTypes = DataTypes> . Real sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::m_massLumpingCoeff. protected . ◆ m_massTopologyType. template<class DataTypes , class GeometricalTypes = DataTypes> . sofa::geometry::ElementType sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::m_massTopologyType. protected . The type of topology to build the mass from the topology. . ◆ m_topology. template<class DataTypes , class GeometricalTypes = DataTypes> . template<typename T = GeometricalTypes, typename std::enable_if_t< T::spatial_dimensions > = 3, int > . sofa::core::topology::BaseMeshTopology* sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::m_topology. protected . Initial value:= 0 >; void applyEdgeMassHexahedronDestruction(const sofa::type::vector<Index>& ); sofa::type::vector< Index >. Pointer to the topology container. Will be set by link. ; Method to update See alsod_edgeMass using mass matrix coefficient when a new Triangle is created. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when TRIANGLESADDED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a Triangle is removed. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when TRIANGLESREMOVED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a new Quad is created. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when QUADSADDED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a Quad is removed. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when QUADSREMOVED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a new Tetrahedron is created. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when TETRAHEDRAADDED event is fired. Method to update . d_e",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html:33010,update,update,33010,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,1,['update'],['update']
Deployability,"fa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglIntAttribute, SOFA_TEMPLATE3(OglAttribute, 1, GL_INT, int))sofa::gl::component::shader::OglIntAttribute; OglAttribute< 1, GL_INT, int >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE3(OglAttribute, size, type, int), core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglAttribute< 1, GL_INT, int >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglAttribute< 1, GL_INT, int >protected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglAttribute() overridesofa::gl::component::shader::OglAttribute< 1, GL_INT, int >protected; ~OglIntAttribute()sofa::gl::component::shader::OglIntAttributeinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~ShaderElement() overridesofa::core::visual::ShaderElementinlineprotected; ~VisualModel() overridesofa::core::visual:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_attribute-members.html:14917,update,updateVisual,14917,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_attribute-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_attribute-members.html,2,['update'],['updateVisual']
Deployability,"fa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, typename TCollisionModel::InDataTypes >; Index typedefsofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, typename TCollisionModel::InDataTypes >; InMechanicalState typedefsofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, typename TCollisionModel::InDataTypes >; MCollisionModel typedefsofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, typename TCollisionModel::InDataTypes >; MMechanicalState typedefsofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, typename TCollisionModel::InDataTypes >; modelsofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, typename TCollisionModel::InDataTypes >; Real typedefsofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, typename TCollisionModel::InDataTypes >; resize(Size)sofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, typename TCollisionModel::InDataTypes >inlinevirtual; setCollisionModel(MCollisionModel *model)sofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, typename TCollisionModel::InDataTypes >inline; update()sofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, typename TCollisionModel::InDataTypes >inlinevirtual; updateX0()sofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, typename TCollisionModel::InDataTypes >inline; updateXfree()sofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, typename TCollisionModel::InDataTypes >inlinevirtual; VecCoord typedefsofa::component::collision::response::mapper::BaseContactMapper< TCollisionModel::InDataTypes >; ~BaseContactMapper()sofa::component::collision::response::mapper::BaseContactMapper< TCollisionModel::InDataTypes >inlinevirtual.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_identity_contact_mapper_3_01_t_colea66f08c794ef83dd6ab9a1d9751b385.html:3790,update,update,3790,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_identity_contact_mapper_3_01_t_colea66f08c794ef83dd6ab9a1d9751b385.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_identity_contact_mapper_3_01_t_colea66f08c794ef83dd6ab9a1d9751b385.html,2,['update'],"['update', 'updateXfree']"
Deployability,"fa::component::constraint::projective::AttachProjectiveConstraint< DataTypes >; PairInteractionProjectiveConstraintSet< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(PairInteractionProjectiveConstraintSet, DataTypes), BaseInteractionProjectiveConstraintSet, SOFA_TEMPLATE2(PairStateAccessor, DataTypes, DataTypes))sofa::core::behavior::PairInteractionProjectiveConstraintSet< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; sofa::StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; sofa::core::behavior::StateAccessor::StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; templateName(const T *ptr=nullptr)sofa::component::constraint::projective::AttachProjectiveConstraint< DataTypes >inlinestatic; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::constraint::projective::AttachProjectiveConstraint< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::constraint::projective::AttachProjectiveConstraint< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~AttachProjectiveConstraint() overridesofa::component::constraint::projective::AttachProjectiveConstraint< DataTypes >protected; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseProjectiveConstraintSet() overridesofa::core::behavior::BaseProjectiveConstraintSetinlineprotected; ~PairInteractionProjectiveConstraintSet() overridesofa::co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_attach_projective_constraint-members.html:22066,update,updateLinks,22066,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_attach_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_attach_projective_constraint-members.html,1,['update'],['updateLinks']
Deployability,"fa::component::mapping::linear::SubsetMapping< TIn, TOut >; matrixJsofa::component::mapping::linear::SubsetMapping< TIn, TOut >protected; MatrixType typedefsofa::component::mapping::linear::SubsetMapping< TIn, TOut >; MBloc typedefsofa::component::mapping::linear::SubsetMapping< TIn, TOut >; NIn enum valuesofa::component::mapping::linear::SubsetMapping< TIn, TOut >; NOut enum valuesofa::component::mapping::linear::SubsetMapping< TIn, TOut >; Out typedefsofa::component::mapping::linear::SubsetMapping< TIn, TOut >; OutCoord typedefsofa::component::mapping::linear::SubsetMapping< TIn, TOut >; OutDataMatrixDeriv typedefsofa::component::mapping::linear::SubsetMapping< TIn, TOut >; OutDataVecCoord typedefsofa::component::mapping::linear::SubsetMapping< TIn, TOut >; OutDataVecDeriv typedefsofa::component::mapping::linear::SubsetMapping< TIn, TOut >; OutDeriv typedefsofa::component::mapping::linear::SubsetMapping< TIn, TOut >; OutMatrixDeriv typedefsofa::component::mapping::linear::SubsetMapping< TIn, TOut >; OutVecCoord typedefsofa::component::mapping::linear::SubsetMapping< TIn, TOut >; OutVecDeriv typedefsofa::component::mapping::linear::SubsetMapping< TIn, TOut >; postInit()sofa::component::mapping::linear::SubsetMapping< TIn, TOut >; Real typedefsofa::component::mapping::linear::SubsetMapping< TIn, TOut >; SetIndex typedefsofa::component::mapping::linear::SubsetMapping< TIn, TOut >; SOFA_CLASS(SOFA_TEMPLATE2(SubsetMapping, TIn, TOut), SOFA_TEMPLATE2(LinearMapping, TIn, TOut))sofa::component::mapping::linear::SubsetMapping< TIn, TOut >; sofa::component::mapping::linear::crtp::CRTPLinearMapping::SOFA_CLASS(SOFA_TEMPLATE(CRTPLinearMapping, TMapping), TMapping)sofa::component::mapping::linear::crtp::CRTPLinearMapping< TMapping >; SubsetMapping()sofa::component::mapping::linear::SubsetMapping< TIn, TOut >protected; updateJsofa::component::mapping::linear::SubsetMapping< TIn, TOut >protected; ~SubsetMapping()sofa::component::mapping::linear::SubsetMapping< TIn, TOut >virtual.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_subset_mapping-members.html:5627,update,updateJsofa,5627,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_subset_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_subset_mapping-members.html,1,['update'],['updateJsofa']
Deployability,"fa::component::visual::BaseCamera; STEREO_INTERLACED enum valuesofa::component::visual::BaseCamera; STEREO_NONE enum valuesofa::component::visual::BaseCamera; STEREO_SIDE_BY_SIDE enum valuesofa::component::visual::BaseCamera; STEREO_SIDE_BY_SIDE_HALF enum valuesofa::component::visual::BaseCamera; STEREO_TOP_BOTTOM enum valuesofa::component::visual::BaseCamera; STEREO_TOP_BOTTOM_HALF enum valuesofa::component::visual::BaseCamera; StereoMode enum namesofa::component::visual::BaseCamera; StereoStrategy enum namesofa::component::visual::BaseCamera; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; TOEDIN enum valuesofa::component::visual::BaseCamera; toRay() constsofa::component::visual::BaseCamera; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; translate(const type::Vec3 &t)sofa::component::visual::BaseCamera; translateLookAt(const type::Vec3 &t)sofa::component::visual::BaseCamera; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateOutputData()sofa::component::visual::BaseCameraprotected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; viewportPointToRay(const type::Vec3 &p)sofa::component::visual::BaseCamera; viewportToScreenPoint(const type::Vec3 &p) constsofa::component::visual::BaseCamera; viewportToWorldPoint(const type::Vec3 &p)sofa::component::visual::BaseCamera; worldToCameraCoordinates(const type::Vec3 &p)sofa::component::visual::BaseCamera; worldToCameraTransform(const type::Vec3 &v)sofa::component::visual::BaseCamera; worldToScreenCoordinates(const type::Vec3 &p)sofa::component::visual::BaseCamera; worldToScreenPoint(const type::Vec3 &p)sofa::component::visual::BaseCamera; worldToViewportPoint(const type::Vec3 &p)sofa::component::visual::BaseCamera; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; wri",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_base_camera-members.html:17748,update,updateLinks,17748,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_base_camera-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_base_camera-members.html,2,['update'],['updateLinks']
Deployability,"fa::core::State::SOFA_CLASS(SOFA_TEMPLATE(State, TDataTypes), BaseState)sofa::core::State< TDataTypes >; SOFA_CLASS2(VisualModelImpl, core::visual::VisualModel, sofa::core::visual::VisualState< defaulttype::Vec3Types >)sofa::component::visual::VisualModelImpl; sourceFactorsofa::gl::component::rendering3d::OglModelprotected; SPtr typedefsofa::core::objectmodel::Base; srgbTexturingsofa::component::visual::VisualModelImpl; State()sofa::core::State< TDataTypes >protected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; texsofa::gl::component::rendering3d::OglModelprotected; TexCoord typedefsofa::component::visual::VisualModelImpl; texturenamesofa::component::visual::VisualModelImpl; texturessofa::gl::component::rendering3d::OglModelprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; trianglesRevisionsofa::gl::component::rendering3d::OglModelprotected; update()sofa::gl::component::rendering3d::MergeVisualModelsinlineprotected; updateBuffers() overridesofa::gl::component::rendering3d::OglModelvirtual; updateEdgesIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateQuadsIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateTrianglesIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateVertexBuffer()sofa::gl::component::rendering3d::OglModel; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; useEdgessofa::gl::component::rendering3d::OglModelprotected; useQuadssofa::gl::component::rendering3d::OglModelprotected; useTopologysofa::component::visual::VisualModelImpl; useTrianglessofa::gl::component::rendering3d::OglModelprotected; vbosofa::gl::component::rendering3d::OglModelprotected; VBOGenDonesofa::gl::component::rendering3d::OglModelprotected; Vec3Real typedefsofa::component::visual::Visu",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models-members.html:27314,update,updateBuffers,27314,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models-members.html,1,['update'],['updateBuffers']
Deployability,"fa::core::behavior::Mass::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(Mass, DataTypes), SOFA_TEMPLATE(ForceField, DataTypes), BaseMass)sofa::core::behavior::Mass< DataTypes >; ForceField< DataTypes >::SOFA_CLASS2(SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; TMassType typedefsofa::component::mass::UniformMass< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; UniformMass()sofa::component::mass::UniformMass< DataTypes >protected; updateFromTotalMass()sofa::component::mass::UniformMass< DataTypes >; updateFromVertexMass()sofa::component::mass::UniformMass< DataTypes >; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::mass::UniformMass< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::mass::UniformMass< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseMass() override=defaultsofa::core::behavior::BaseMassprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ForceField() overridesofa::core::behavior::ForceField< DataTypes >protected; ~Mass() overridesofa::core::behavior::Mass< DataTypes >protected; ~SingleStateAccessor() override=defaultsofa::core::behavior::Sin",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_uniform_mass-members.html:22988,update,updateLinks,22988,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_uniform_mass-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_uniform_mass-members.html,1,['update'],['updateLinks']
Deployability,"fa::core::behavior::PairStateAccessor< DataTypes1, DataTypes2 >; SOFA_ABSTRACT_CLASS2(SOFA_TEMPLATE(PairInteractionForceField, DataTypes), BaseInteractionForceField, SOFA_TEMPLATE2(PairStateAccessor, DataTypes, DataTypes))sofa::core::behavior::PairInteractionForceField< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(JointSpringForceField, DataTypes), SOFA_TEMPLATE(core::behavior::PairInteractionForceField, DataTypes))sofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >; PairInteractionForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; Spring typedefsofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; Vector typedefsofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~JointSpringForceField()sofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >protectedvirtual; ~PairInteract",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_joint_spring_force_field-members.html:20189,update,updateLinks,20189,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_joint_spring_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_joint_spring_force_field-members.html,1,['update'],['updateLinks']
Deployability,"fa::core::behavior::PairStateAccessor< DataTypes1, DataTypes2 >; SOFA_ABSTRACT_CLASS2(SOFA_TEMPLATE(PairInteractionForceField, DataTypes), BaseInteractionForceField, SOFA_TEMPLATE2(PairStateAccessor, DataTypes, DataTypes))sofa::core::behavior::PairInteractionForceField< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(VectorSpringForceField, DataTypes), SOFA_TEMPLATE(core::behavior::PairInteractionForceField, DataTypes))sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >; PairInteractionForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; springArraysofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; useTopologysofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >protected; VecCoord typedefsofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VectorSpringForceField()sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >protected; VectorSpringForceField(MechanicalState *_object)sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >protected; VectorSpringForceField(MechanicalState *_object1, MechanicalState *_object2)sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >protected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeData",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_vector_spring_force_field-members.html:19496,update,updateLinks,19496,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_vector_spring_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_vector_spring_force_field-members.html,1,['update'],['updateLinks']
Deployability,"fa::core::behavior::SingleStateAccessor::SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< DataTypes >; sofa::core::behavior::StateAccessor::SOFA_ABSTRACT_CLASS(StateAccessor, objectmodel::BaseObject)sofa::core::behavior::StateAccessor; SOFA_CLASS(SOFA_TEMPLATE(AverageCoord, DataTypes), core::DataEngine)sofa::component::engine::analyze::AverageCoord< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::engine::analyze::AverageCoord< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecIndex typedefsofa::component::engine::analyze::AverageCoord< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~AverageCoord() overridesofa::component::engine::analyze::AverageCoord< DataTypes >inlineprotected; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~SingleStateAccessor() override=defaultsofa::core::behavior::SingleStateAccessor< DataTypes >protected; ~StateAccessor() overrid",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_average_coord-members.html:13798,update,updateLinks,13798,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_average_coord-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_average_coord-members.html,1,['update'],['updateLinks']
Deployability,"fa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(OdeSolver, objectmodel::BaseObject)sofa::core::behavior::OdeSolver; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(EulerImplicitSolver, sofa::core::behavior::OdeSolver, sofa::core::behavior::LinearSolverAccessor)sofa::component::odesolver::backward::EulerImplicitSolver; solve(const core::ExecParams *params, SReal dt, sofa::core::MultiVecCoordId xResult, sofa::core::MultiVecDerivId vResult) overridesofa::component::odesolver::backward::EulerImplicitSolvervirtual; sofa::core::behavior::OdeSolver::solve(const core::ExecParams *params, SReal dt)sofa::core::behavior::OdeSolverinlinevirtual; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; xsofa::component::odesolver::backward::EulerImplicitSolverprotected; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OdeSolver() overridesofa::core::behavior::OdeSolverprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_euler_implicit_solver-members.html:12510,update,updateInternal,12510,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_euler_implicit_solver-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_euler_implicit_solver-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"fa::core::objectmodel::BaseObject. ◆ init(). template<class DataTypes > . void sofa::component::engine::select::ValuesFromPositions< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ reinit(). template<class DataTypes > . void sofa::component::engine::select::ValuesFromPositions< DataTypes >::reinit. overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_CLASS(). template<class DataTypes > . sofa::component::engine::select::ValuesFromPositions< DataTypes >::SOFA_CLASS ; (; SOFA_TEMPLATE(ValuesFromPositions< DataTypes >, DataTypes) ; , . core::DataEngine ;  . ). ◆ updateValues(). template<class DataTypes > . void sofa::component::engine::select::ValuesFromPositions< DataTypes >::updateValues ; (; TempData & ; _data). protected . ◆ updateVectors(). template<class DataTypes > . void sofa::component::engine::select::ValuesFromPositions< DataTypes >::updateVectors ; (; TempData & ; _data). protected . ◆ valueFromEdge(). template<class DataTypes > . ValuesFromPositions< DataTypes >::Real sofa::component::engine::select::ValuesFromPositions< DataTypes >::valueFromEdge ; (; const Edge & ; e, . const TempData & ; data . ). protected . ◆ valueFromPoint(). template<class DataTypes > . ValuesFromPositions< DataTypes >::Real sofa::component::engine::select::ValuesFromPositions< DataTypes >::valueFromPoint ; (; const PointID & ; pid, . const TempData & ; data . ). protected . ◆ valueFromPosition(). template<class DataTypes > . ValuesFromPositions< DataTypes >::Real sofa::component::engine::select::ValuesFromPositions< DataTypes >::valueFromPosition ; (; const CPos & ; p, . const TempData & ; data . ). protected . ◆ valueFromTetrahedron(). template<class DataTypes > . ValuesFromPositions< DataTypes >::Real sofa::component::engine::s",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions.html:24206,update,updateVectors,24206,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions.html,1,['update'],['updateVectors']
Deployability,"fa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setTopologies(In *from, Out *to)sofa::core::topology::TopologicalMappingvirtual; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(TopologicalMapping, objectmodel::BaseObject)sofa::core::topology::TopologicalMapping; SOFA_CLASS(IdentityTopologicalMapping, sofa::core::topology::TopologicalMapping)sofa::component::topology::mapping::IdentityTopologicalMapping; sofa::core::topology::TopologicalMapping::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; toModelsofa::core::topology::TopologicalMapping; TopologicalMapping()sofa::core::topology::TopologicalMappingprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateTopologicalMappingBottomUp()sofa::core::topology::TopologicalMappinginlinevirtual; updateTopologicalMappingTopDown() overridesofa::component::topology::mapping::IdentityTopologicalMappingvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~IdentityTopologicalMapping() overridesofa::component::topology::mapping::IdentityTopologicalMappingprotected; ~TopologicalMapping() overridesofa::core::topology::TopologicalMappinginlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_identity_topological_mapping-members.html:12313,update,updateInternal,12313,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_identity_topological_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_identity_topological_mapping-members.html,4,['update'],"['updateInternal', 'updateLinks', 'updateTopologicalMappingBottomUp', 'updateTopologicalMappingTopDown']"
Deployability,"fa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(ClusteringEngine, DataTypes), core::DataEngine)sofa::component::engine::analyze::ClusteringEngine< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VD typedefsofa::component::engine::analyze::ClusteringEngine< DataTypes >; VecCoord typedefsofa::component::engine::analyze::ClusteringEngine< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VI typedefsofa::component::engine::analyze::ClusteringEngine< DataTypes >; VVD typedefsofa::component::engine::analyze::ClusteringEngine< DataTypes >; VVI typedefsofa::component::engine::analyze::ClusteringEngine< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ClusteringEngine() overridesofa::component::engine::analyze::ClusteringEngine< DataTypes >inline; ~DataE",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_clustering_engine-members.html:13257,update,updateLinks,13257,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_clustering_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_clustering_engine-members.html,1,['update'],['updateLinks']
Deployability,"fa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseController, core::objectmodel::BaseObject)sofa::core::behavior::BaseController; SOFA_CLASS(Controller, core::behavior::BaseController)sofa::component::controller::Controller; sofa::core::behavior::BaseController::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~Controller() overridesofa::component::controller::Controllerprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1controller_1_1_controller-members.html:10827,update,updateInternal,10827,api/master/sofa/html/classsofa_1_1component_1_1controller_1_1_controller-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1controller_1_1_controller-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"fa::core::topology::BaseMeshTopology; TetrahedraAroundTriangle typedefsofa::core::topology::BaseMeshTopology; TetrahedraAroundVertex typedefsofa::core::topology::BaseMeshTopology; Tetrahedron typedefsofa::core::topology::Topology; TetrahedronID typedefsofa::core::topology::Topology; TetraID typedefsofa::core::topology::Topology; TextCoords2D typedefsofa::component::topology::container::grid::GridTopology; Topology()sofa::core::topology::Topologyinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; updateHexahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateTetrahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; UV typedefsofa::component::topology::container::constant::MeshTopology; UVID typedefsofa::component::topology::container::constant::MeshTopology; validHexahedrasofa::component::topology::container::constant::MeshTopologyprotected; validTetrahedrasofa::component::topology::container::constant::MeshTopologyprotected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~Topology()sofa:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_cylinder_grid_topology-members.html:38365,update,updateLinks,38365,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_cylinder_grid_topology-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_cylinder_grid_topology-members.html,4,['update'],['updateLinks']
Deployability,"fa::core::topology::BaseMeshTopology; TetrahedraAroundVertex typedefsofa::core::topology::BaseMeshTopology; Tetrahedron typedefsofa::core::topology::Topology; TetrahedronID typedefsofa::core::topology::Topology; TetraID typedefsofa::core::topology::Topology; Topology()sofa::core::topology::Topologyinlineprotected; TopologyContainer()sofa::core::topology::TopologyContainerinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; unlinkTopologyHandlerToData(core::topology::TopologyHandler *topologyHandler, sofa::geometry::ElementType elementType) overridesofa::component::topology::container::dynamic::HexahedronSetTopologyContainervirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3i typedefsofa::component::topology::container::dynamic::MultilevelHexahedronSetTopologyContainer; VecData typedefsofa::core::objectmodel::Base; VecEdgeID typedefsofa::component::topology::container::dynamic::EdgeSetTopologyContainer; VecHexaID typedefsofa::component::topology::container::dynamic::HexahedronSetTopologyContainer; VecLink typedefsofa::core::objectmodel::Base; VecQuadID typedefsofa::component::topology::container::dynamic::QuadSetTopologyContainer; VecSlaves typedefsofa::core::objectmodel::BaseObject; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectpr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_multilevel_hexahedron_set_topology_container-members.html:46620,update,updateInternal,46620,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_multilevel_hexahedron_set_topology_container-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_multilevel_hexahedron_set_topology_container-members.html,1,['update'],['updateInternal']
Deployability,"fa::core::topology::BaseMeshTopology; TetrahedraAroundVertex typedefsofa::core::topology::BaseMeshTopology; Tetrahedron typedefsofa::core::topology::Topology; TetrahedronID typedefsofa::core::topology::Topology; TetraID typedefsofa::core::topology::Topology; Topology()sofa::core::topology::Topologyinlineprotected; TopologyContainer()sofa::core::topology::TopologyContainerinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; unlinkTopologyHandlerToData(core::topology::TopologyHandler *topologyHandler, sofa::geometry::ElementType elementType) overridesofa::component::topology::container::dynamic::HexahedronSetTopologyContainervirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecEdgeID typedefsofa::component::topology::container::dynamic::EdgeSetTopologyContainer; VecHexaID typedefsofa::component::topology::container::dynamic::HexahedronSetTopologyContainer; VecLink typedefsofa::core::objectmodel::Base; VecQuadID typedefsofa::component::topology::container::dynamic::QuadSetTopologyContainer; VecSlaves typedefsofa::core::objectmodel::BaseObject; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseTopologyObject() overridesofa::core::topology::BaseTopologyObjectinlineprotected; ~EdgeS",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_container-members.html:42978,update,updateInternal,42978,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_container-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_container-members.html,1,['update'],['updateInternal']
Deployability,"fa::core::topology::BaseMeshTopology; TetrahedraAroundVertex typedefsofa::core::topology::BaseMeshTopology; Tetrahedron typedefsofa::core::topology::Topology; TetrahedronID typedefsofa::core::topology::Topology; TetraID typedefsofa::core::topology::Topology; Topology()sofa::core::topology::Topologyinlineprotected; TopologyContainer()sofa::core::topology::TopologyContainerinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; unlinkTopologyHandlerToData(core::topology::TopologyHandler *topologyHandler, sofa::geometry::ElementType elementType) overridesofa::component::topology::container::dynamic::HexahedronSetTopologyContainervirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; valuesIndexedInRegularGridsofa::component::topology::container::dynamic::DynamicSparseGridTopologyContainer; valuesIndexedInTopologysofa::component::topology::container::dynamic::DynamicSparseGridTopologyContainer; VecData typedefsofa::core::objectmodel::Base; VecEdgeID typedefsofa::component::topology::container::dynamic::EdgeSetTopologyContainer; VecHexaID typedefsofa::component::topology::container::dynamic::HexahedronSetTopologyContainer; VecLink typedefsofa::core::objectmodel::Base; VecQuadID typedefsofa::component::topology::container::dynamic::QuadSetTopologyContainer; VecSlaves typedefsofa::core::objectmodel::BaseObject; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; voxelSizesofa::component::topology::container::dynamic::DynamicSparseGridTopologyContainer; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; wr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_container-members.html:44301,update,updateInternal,44301,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_container-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_container-members.html,1,['update'],['updateInternal']
Deployability,"fa::core::visual::ShaderElement; shaderssofa::gl::component::shader::OglShaderElementprotected; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglTexturePointer, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglTexturePointer; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; textureUnitsofa::gl::component::shader::OglTexturePointerprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; unbind()sofa::gl::component::shader::OglTexturePointer; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglTexturePointer() overridesofa::gl::component::shader::OglTexturePointerprotected; ~ShaderElement() overridesofa::core::visual::ShaderElementinlineprotected; ~VisualModel() overridesofa::core::visual::VisualModelinlineprot",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture_pointer-members.html:13342,update,updateLinks,13342,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture_pointer-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture_pointer-members.html,2,['update'],['updateLinks']
Deployability,"fa::core::visual::ShaderElement; shaderssofa::gl::component::shader::OglShaderElementprotected; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglFloatVectorVariable, OglVariable< type::vector< float > >)sofa::gl::component::shader::OglFloatVectorVariable; OglVariable< type::vector< float > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< float > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< float > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglFloatVectorVariable()sofa::gl::component::shader::OglFloatVectorVariableinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariabl",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector_variable-members.html:13542,update,updateInternal,13542,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector_variable-members.html,2,['update'],['updateInternal']
Deployability,"fa::gl::component::rendering3d::MergeVisualModels::d_nbInput. number of input visual models to merge . ◆ vl_input. core::objectmodel::VectorLinks< LinkVisualModel, MergeVisualModels > sofa::gl::component::rendering3d::MergeVisualModels::vl_input. Constructor details. ◆ MergeVisualModels(). sofa::gl::component::rendering3d::MergeVisualModels::MergeVisualModels ; (; ). inlineprotected . ◆ ~MergeVisualModels(). sofa::gl::component::rendering3d::MergeVisualModels::~MergeVisualModels ; (; ). inlineoverrideprotected . Function details. ◆ init(). void sofa::gl::component::rendering3d::MergeVisualModels::init ; (; void ; ). inlineoverridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::component::visual::VisualModelImpl. ◆ parse(). void sofa::gl::component::rendering3d::MergeVisualModels::parse ; (; sofa::core::objectmodel::BaseObjectDescription * ; arg). inlineoverridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::component::visual::VisualModelImpl. ◆ parseFields(). void sofa::gl::component::rendering3d::MergeVisualModels::parseFields ; (; const std::map< std::string, std::string * > & ; str). inlineoverridevirtual . Assign the field values stored in the given map of name -> value pairs. ; Reimplemented from sofa::core::objectmodel::Base. ◆ reinit(). void sofa::gl::component::rendering3d::MergeVisualModels::reinit ; (; ). inlineoverridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_CLASS(). sofa::gl::component::rendering3d::MergeVisualModels::SOFA_CLASS ; (; MergeVisualModels ; , . Inherit ;  . ). ◆ update(). void sofa::gl::component::rendering3d::MergeVisualModels::update ; (; ). inlineprotected . sofaglcomponentrendering3dMergeVisualModels; Generated on Mon Nov 11 2024 03:18:56 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models.html:33551,update,update,33551,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models.html,2,['update'],['update']
Deployability,"fa::gl::component::shader::OglFloatAttribute Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::gl::component::shader::OglFloatAttribute Class Reference . #include <OglAttribute.h>. Inheritance diagram for sofa::gl::component::shader::OglFloatAttribute:. [legend]; Detailed Description; FLOAT ATTRIBUTE . Public Member Functions;  SOFA_CLASS (OglFloatAttribute, SOFA_TEMPLATE3(OglAttribute, 1, GL_FLOAT, float));  ;  OglFloatAttribute ();  ; virtual ~OglFloatAttribute ();  ;  Public Member Functions inherited from sofa::gl::component::shader::OglAttribute< 1, GL_FLOAT, float >;  SOFA_CLASS2 (SOFA_TEMPLATE3(OglAttribute, size, type, float), core::visual::VisualModel, OglShaderElement);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void doInitVisual (const core::visual::VisualParams *vparams) override;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdateVisual (const core::visual::VisualParams *vparams) override;  if attributes are not static, update the buffer More...;  ; type::vector< float > * beginEdit ();  ; void endEdit ();  ; const type::vector< float > & getValue () const;  ; void setValue (const type::vector< float > &value);  ; void enable ();  ; void disable ();  ; void bwdDraw (core::visual::VisualParams *) override;  Called after objects in the current branch are displayed. More...;  ; void fwdDraw (core::visual::VisualParams *) override;  Called before objects in the current branch are displayed. More...;  ; void setUsage (unsigned int usage);  ; ShaderElementType getSEType () const override;  Returns the type of shader element (texture, macro, variable, or attribute) More...;  ; const core::objectmodel::BaseData * getSEValue () const override;  ; core::objectmodel::BaseData * getSEValue () override;  ; int ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_attribute.html:1032,Update,Update,1032,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_attribute.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_attribute.html,1,['Update'],['Update']
Deployability,"fa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(IndicesFromValues, T), core::DataEngine);  ;  SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER (Index, sofa::Index);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_indices_from_values.html:2847,update,update,2847,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_indices_from_values.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_indices_from_values.html,1,['update'],['update']
Deployability,"fa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(ValuesFromIndices, T), core::DataEngine);  ;  SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER (Index, sofa::Index);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_indices.html:2555,update,update,2555,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_indices.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_indices.html,1,['update'],['update']
Deployability,"fa::type::Vec4f);  ;  SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER (Vec3d, sofa::type::Vec3d);  ;  Axis (SReal len=1.0_sreal);  ;  Axis (const type::Vec3 &len);  ;  Axis (const type::Vec3 &center, const Quaternion &orient, const type::Vec3 &length);  ;  Axis (const type::Vec3 &center, const double orient[4][4], const type::Vec3 &length);  ;  Axis (const double *mat, const type::Vec3 &length);  ;  Axis (const type::Vec3 &center, const Quaternion &orient, SReal length=1.0_sreal);  ;  Axis (const type::Vec3 &center, const double orient[4][4], SReal length=1.0_sreal);  ;  Axis (const double *mat, SReal length=1.0_sreal);  ;  ~Axis ();  ; void update (const type::Vec3 &center, const Quaternion &orient=Quaternion());  ; void update (const type::Vec3 &center, const double orient[4][4]);  ; void update (const double *mat);  ; void draw (const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red());  ; void draw (const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=delete;  ; void draw (const double *mat, const type::Vec3 &length, const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=delete;  . Static Public Member Functions; static void draw (const type::Vec3 &center, const Quaternion &orient, const type::Vec3 &length, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red());  ; static void draw (const type::Vec3 &center, const double orient[4][4], const type::Vec3 &length, const type::RGBAColor &colorX=type::RGBAColor::red(), const type::RGBAColor &colorY=type::RGBAColor::green(), const type::RGBAColor &colorZ=type::RGBAColor::red());  ; static void draw (const double *mat, const t",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis.html:1033,update,update,1033,api/master/sofa/html/classsofa_1_1gl_1_1_axis.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis.html,6,['update'],['update']
Deployability,"fault constructor does not initialize the transform. . ◆ Transform() [2/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const Vec & ; origin, . const Rot & ; orientation . ). Origin of the child in parent coordinates, orientation of the child wrt to parent. ; Define using standard conventions. . ◆ Transform() [3/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const Rot & ; q, . const Vec & ; o . ). WARNING: using Featherstone's conventions (see class documentation) ; Define using Featherstone's conventions. . ◆ Transform() [4/4]. template<class TReal > . sofa::type::Transform< TReal >::Transform ; (; const SpatialVector< TReal > & ; v). Origin of the child in the parent coordinate system and the orientation of the child wrt the parent (i.e. standard way) ; Define as a given SpatialVector integrated during one second. The spatial vector is given in parent coordinates.; Define child as a given SpatialVector<TReal> integrated during one second, starting from the parent (used for time integration). The spatial vector is given in parent coordinates. . Function details. ◆ backProjectPoint(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectPoint ; (; const Vec & ; pointInParent); const. Project point from parent coordinates to this coordinates. . ◆ backProjectVector(). template<class TReal > . auto sofa::type::Transform< TReal >::backProjectVector ; (; const Vec & ; vectorInParent); const. Projected a vector (i.e. a direction or a displacement) from parent coordinates to child coordinates. . ◆ clear(). template<class TReal > . void sofa::type::Transform< TReal >::clear. Reset this to identity. . ◆ CreateSpatialVector(). template<class TReal > . SpatialVector< TReal > sofa::type::Transform< TReal >::CreateSpatialVector. Project a spatial vector from child to parent TODO One should handle differently the transformation of a twist and a wrench ! This applying the adjoint to velocities or its tran",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:6762,integrat,integrated,6762,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html,4,['integrat'],"['integrated', 'integration']"
Deployability,"ference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::visual::VisualModelImpl Class Reference . #include <VisualModelImpl.h>; Abstract class which implements partially VisualModel. ; More... Inheritance diagram for sofa::component::visual::VisualModelImpl:. [legend]; Detailed Description; Abstract class which implements partially VisualModel. ; This class implemented all non-hardware (i.e OpenGL or DirectX) specific functions for rendering. It takes a 3D model (basically a .OBJ model) and apply transformations on it. At the moment, it is only implemented by OglModel for OpenGL systems. . Classes; class  FaceGroup;  . Public Attributes; bool useTopology;  True if list of d_facets should be taken from the attached topology. More...;  ; int lastMeshRev;  Time stamps from the last time the mesh was updated from the topology. More...;  ; bool castShadow;  True if object cast shadows. More...;  ; sofa::core::topology::BaseMeshTopology * m_topology;  ; sofa::core::objectmodel::RenamedData< bool > m_initRestPositions;  ; sofa::core::objectmodel::RenamedData< bool > m_useNormals;  ; sofa::core::objectmodel::RenamedData< bool > m_updateNormals;  ; sofa::core::objectmodel::RenamedData< bool > m_computeTangents;  ; sofa::core::objectmodel::RenamedData< bool > m_updateTangents;  ; sofa::core::objectmodel::RenamedData< bool > m_handleDynamicTopology;  ; sofa::core::objectmodel::RenamedData< bool > m_fixMergedUVSeams;  ; sofa::core::objectmodel::RenamedData< bool > m_keepLines;  ; sofa::core::objectmodel::RenamedData< VecCoord > m_vertices2;  ; sofa::core::objectmodel::RenamedData< VecTexCoord > m_vtexcoords;  ; sofa::core::objectmodel::RenamedData< VecCoord > m_vtangents;  ; sofa::core::objectmodel::RenamedData< VecCoord > m_vbitangents;  ; sofa::core::objectmodel::Rena",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl.html:1083,update,updated,1083,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl.html,1,['update'],['updated']
Deployability,"fficiently by just swapping pointers.; In addition to state vectors, the current constraint system matrix is also stored, containing the coefficient of each constraint defined over the DOFs in this body. . Public Member Functions;  SOFA_CLASS2 (SOFA_TEMPLATE(MechanicalState, TDataTypes), BaseMechanicalState, SOFA_TEMPLATE(State, TDataTypes));  ; Size getCoordDimension () const override;  ; Size getDerivDimension () const override;  ; virtual void getIndicesInSpace (sofa::type::vector< Index > &, Real, Real, Real, Real, Real, Real) const =0;  Get the indices of the particles located in the given bounding box. More...;  ; void copyToBuffer (SReal *dst, ConstVecId src, unsigned n) const override;  ; void copyFromBuffer (VecId dst, const SReal *src, unsigned n) override;  ; void addFromBuffer (VecId dst, const SReal *src, unsigned n) override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseMechanicalState;  SOFA_ABSTRACT_CLASS (BaseMechanicalState, BaseState);  ;  SOFA_BASE_CAST_IMPLEMENTATION (BaseMechanicalState);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; virtual SReal getPX (Index) const;  ; virtual SReal getPY (Index) const;  ; virtual SReal getPZ (Index) const;  ; virtual void beginIntegration (SReal);  Called at the beginning of each integration step. More...;  ; virtual void endIntegration (const ExecParams *params, SReal);  Called at the end of each integration step. More...;  ; virtual void resetForce (const ExecParams *params, VecDerivId f=VecDerivId::force());  Set F = 0. More...;  ; virtual void resetAcc (const ExecParams *params, VecDerivId a=VecDerivId::dx());  Set Acc =0. More...;  ; virtual void accumulateForce (const ExecParams *params, VecDerivId f=VecDerivId::force());  Add stored external forces to F. More...;  ; virtual void resetConstraint (const ConstraintParams *params)=0;  Reset the constraint matrix. More...;  ; virtual void getConstraintJaco",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html:3592,integrat,integration,3592,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html,1,['integrat'],['integration']
Deployability,"ficient when a Triangle is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TRIANGLESREMOVED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a new Quad is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Quad is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSREMOVED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a new Tetrahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Tetrahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAREMOVED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a new Hexahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when HEXAHEDRAADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Hexahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when HEXAHEDRAREMOVED event is fired. Method to initialize . MassType when a new Edge is created to compute mass coefficient matrix. Will be set as creation callback in the EdgeData . d_edgeMass . ◆ applyEdgeMassCreation() [2/2]. template<class DataTypes , class GeometricalTypes = DataTypes> . template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::applyEdgeMassCreation ; (; Index ; , . MassType & ; EdgeMass, . const core::topology::BaseMeshTopology::Edge & ; , . const sofa::type::vector< Index > & ; , . const sofa::type::vector< SReal > & ; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html:39214,update,update,39214,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,1,['update'],['update']
Deployability,"file; ; SOFA - Topic: [SOLVED] Input and Output in SOFA .scn file. /inserting_membrame_between_two_tets_regions; . /feed; ; Inserting membrane between two test regions – SOFA. SOFA - Topic: Inserting membrane between two test regions. /insert-localstiffnessfactor-variable-in-tetrahedronhyperelasticfemforcefield; ; SOFA - Topic: Insert localstiffnessfactor variable in TetrahedronHyperelasticFEMForceField. /insert-strain-stress-curves-of-material-to-describe-mechanical-properties; ; SOFA - Topic: [SOLVED] Insert Strain – Stress Curves of Material to describe mechanical properties. /install-additional-libraries-for-visual-sudio-2019; ; SOFA - Topic: [SOLVED] Install ""Additional libraries"" for Visual Sudio 2019. /installing-cgal-plugin; ; SOFA - Topic: [SOLVED] Installing CGAL Plugin. /installing-plugin-sofapython3; ; SOFA - Topic: [SOLVED] Installing plugin.sofapython3. /installing-sofa-on-mac-osx; . /feed; ; [SOLVED] installing SOFA on mac OSX – SOFA. /page; . /2; ; SOFA - Topic: [SOLVED] installing SOFA on mac OSX. SOFA - Topic: [SOLVED] installing SOFA on mac OSX. /installing-v17-12-from-dmg-package-on-mac-os; ; SOFA - Topic: [SOLVED] Installing v17.12 from DMG package on Mac OS. /install-wants-administrative-privileges; ; SOFA - Topic: [SOLVED] Install wants administrative privileges. /interaction-with-geomagic-touch-using-sofapython3; ; SOFA - Topic: Interaction with Geomagic Touch using SofaPython3. /interactiverecorded-camera; . /feed; ; [SOLVED] Interactive/Recorded Camera – SOFA. /page; . /13; ; SOFA - Topic: [SOLVED] Interactive/Recorded Camera. /4; ; SOFA - Topic: [SOLVED] Interactive/Recorded Camera. SOFA - Topic: [SOLVED] Interactive/Recorded Camera. /interactive-training-system-for-interventional-electrocardiology-procedures; ; SOFA - Topic: [SOLVED] Interactive Training System for Interventional Electrocardiology Procedures. /internal-nodes-displacements-from-surface-displacement; . /feed; ; [SOLVED] Internal nodes’ displacements from surface displacement",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:334957,install,installing,334957,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['install'],['installing']
Deployability,"files on different versions. /sofa-needs-your-support; ; SOFA - Topic: SOFA needs your support. /sofaphysicsapi-improvementsbackward-compatibility; ; SOFA - Topic: SofaPhysicsAPI improvements/backward compatibility. /sofapluginmanager-h-building; ; SOFA - Topic: [SOLVED] SofaPluginManager.h (building). /sofa-plugin-with-some-additional-libraries; ; SOFA - Topic: SOFA plugin with some additional libraries. /sofapython; . /feed; ; [SOLVED] sofa+python – SOFA. /page; . /2; ; SOFA - Topic: [SOLVED] sofa+python. /5; ; SOFA - Topic: [SOLVED] sofa+python. /7; ; SOFA - Topic: [SOLVED] sofa+python. SOFA - Topic: [SOLVED] sofa+python. /sofapython3-compatibility-with-sofapython-and-other-plugins; ; SOFA - Topic: SofaPython3 – Compatibility with SofaPython and other plugins. /sofapython3-controllers-documentation; ; SOFA - Topic: SofaPython3 controllers documentation. /sofapython3-getobjects; ; SOFA - Topic: [SOLVED] SofaPython3 getObjects. /sofapython3-install-fatal-error-filesystem; ; SOFA - Topic: [SOLVED] SofaPython3 Install, fatal error: filesystem. /sofapython3-module-not-found; ; SOFA - Topic: [SOLVED] SofaPython3 module not found. /sofapython3-on-win-11; ; SOFA - Topic: [SOLVED] SofaPython3 on Win 11. /sofapython3-pygame-rendering-example-not-working; ; SOFA - Topic: [SOLVED] SofaPython3 pygame rendering example not working. /sofapython3-seg-fault-with-cvxpy; ; SOFA - Topic: SofaPython3 Seg Fault with CVXPY. /sofapython3-signal-catching; ; SOFA - Topic: SofaPython3 signal catching. /sofapython3-troubles-starting-sofa-gui-from-python-script; ; SOFA - Topic: SofaPython3: Troubles starting Sofa GUI from Python script. /sofapython3-windows-10; ; SOFA - Topic: [SOLVED] SofaPython3 Windows 10. /sofapython3-windows-10-compile-error; ; SOFA - Topic: SofaPython3 windows 10 compile error. /sofapython3-with-python-3-6; ; SOFA - Topic: [SOLVED] SofaPython3 with Python 3.6. /sofapython3-with-sofa-in-windows-10; ; SOFA - Topic: [SOLVED] Sofapython3 with SOFA in Windows 10. /sofapytho",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:394178,install,install-fatal-error-filesystem,394178,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['install'],['install-fatal-error-filesystem']
Deployability,"findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor);  ; MechanicalState< DataTypes > * getMState ();  ; const MechanicalState< DataTypes > * getMState () const;  . Protected Member Functions;  HermiteSplineProjectiveConstraint (core::behavior::MechanicalState< DataTypes > *mstate=nullptr);  ;  ~HermiteSplineProjectiveConstraint ();  ; template<class DataDeriv > ; void projectResponseT (DataDeriv &dx, const std::function< void(DataDeriv &, const unsigned int)> &clear);  ;  Protected Member Functions inherited from sofa::core::behavior::ProjectiveConstraintSet< DataTypes >;  ProjectiveConstraintSet (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ProjectiveConstraintSet () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseProjectiveConstraintSet;  BaseProjectiveConstraintSet ();  ;  ~BaseProjectiveConstraintSet () override;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to kn",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_hermite_spline_projective_constraint.html:16835,update,update,16835,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_hermite_spline_projective_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_hermite_spline_projective_constraint.html,1,['update'],['update']
Deployability,"first;  first index (use if indices are sequential) More...;  ; Data< Index > d_last;  last index (use if indices are sequential) More...;  ; Data< Real > d_radius;  search radius to find corresponding points in case no indices are given More...;  ; Data< bool > d_handleTopologyChange;  Enable support of topological changes for indices (disable if it is linked from SubsetTopologicalMapping::d_pointD2S) More...;  ; Data< bool > d_ignoreNotFound;  True to ignore points that are not found in the input model, they will be treated as fixed points. More...;  ; Data< bool > d_resizeToModel;  True to resize the output MechanicalState to match the size of indices. More...;  ; SubsetMappingInternalData< In, Out > data;  ; SingleLink< SubsetMapping< In, Out >, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > l_topology;  Link to be set to the topology container in the component graph. More...;  . Protected Attributes; eigen_type eigen;  ; js_type js;  ; std::unique_ptr< MatrixType > matrixJ;  ; bool updateJ;  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE2(SubsetMapping, TIn, TOut), SOFA_TEMPLATE2(LinearMapping, TIn, TOut));  ; void postInit ();  ; void clear (Size reserve);  ; int addPoint (Index index);  ; void init () override;  ; virtual ~SubsetMapping ();  ; void apply (const core::MechanicalParams *mparams, OutDataVecCoord &dOut, const InDataVecCoord &dIn) override;  ; void applyJ (const core::MechanicalParams *mparams, OutDataVecDeriv &dOut, const InDataVecDeriv &dIn) override;  ; void applyJT (const core::MechanicalParams *mparams, InDataVecDeriv &dOut, const OutDataVecDeriv &dIn) override;  ; void applyJT (const core::ConstraintParams *, InDataMatrixDeriv &dOut, const OutDataMatrixDeriv &dIn) override;  ; const sofa::linearalgebra::BaseMatrix * getJ () override;  ; const js_type * getJs () override;  ;  Public Member Functions inherited from sofa::component::mapping::linear::crtp::CRTPLinearMapping< TMapping >;  SOFA_C",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_subset_mapping.html:2266,update,updateJ,2266,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_subset_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_subset_mapping.html,1,['update'],['updateJ']
Deployability,"float > &regularMassCoefs);  ;  Protected Member Functions inherited from sofa::component::topology::container::grid::SparseGridRamificationTopology;  SparseGridRamificationTopology (bool _isVirtual=false);  ;  ~SparseGridRamificationTopology () override;  ; bool intersectionSegmentTriangle (type::Vec3 s0, type::Vec3 s1, type::Vec3 t0, type::Vec3 t1, type::Vec3 t2);  ;  Protected Member Functions inherited from sofa::component::topology::container::grid::SparseGridTopology;  SparseGridTopology (bool _isVirtual=false);  ;  SparseGridTopology (type::Vec3i numVertices, type::BoundingBox box, bool _isVirtual=false);  Define using the resolution and the spatial size. The resolution corresponds to the number of points if all the cells were filled. More...;  ; virtual void updateEdges ();  ; virtual void updateQuads ();  ; void launchPropagationFromSeed (const type::Vec3i &point, sofa::core::sptr< RegularGridTopology > regularGrid, type::vector< Type > &regularGrdidTypes, type::vector< bool > &alreadyTested, std::stack< type::Vec3i > &seed) const;  start from a seed cell (i,j,k) the OUTSIDE filling is propagated to neighboor cells until meet a BOUNDARY cell (this function is called from all border cells of the RegularGrid) More...;  ; void propagateFrom (const type::Vec3i &point, sofa::core::sptr< RegularGridTopology > regularGrid, type::vector< Type > &regularGridTypes, type::vector< bool > &alreadyTested, std::stack< sofa::type::Vec< 3, int > > &seed) const;  ; void computeBoundingBox (const type::vector< type::Vec3 > &vertices, SReal &xmin, SReal &xmax, SReal &ymin, SReal &ymax, SReal &zmin, SReal &zmax) const;  ; void voxelizeTriangleMesh (helper::io::Mesh *mesh, sofa::core::sptr< RegularGridTopology > regularGrid, type::vector< Type > &regularGridTypes) const;  ; void buildFromTriangleMesh (sofa::helper::io::Mesh *mesh);  ; void buildFromRegularGridTypes (sofa::core::sptr< RegularGridTopology > regularGrid, const type::vector< Type > &regularGridTypes);  ; void buildF",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_multiple_topology.html:37146,update,updateEdges,37146,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_multiple_topology.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_multiple_topology.html,2,['update'],"['updateEdges', 'updateQuads']"
Deployability,"fnessfactor-variable-in-tetrahedronhyperelasticfemforcefield; ; SOFA - Topic: Insert localstiffnessfactor variable in TetrahedronHyperelasticFEMForceField. /insert-strain-stress-curves-of-material-to-describe-mechanical-properties; ; SOFA - Topic: [SOLVED] Insert Strain – Stress Curves of Material to describe mechanical properties. /install-additional-libraries-for-visual-sudio-2019; ; SOFA - Topic: [SOLVED] Install ""Additional libraries"" for Visual Sudio 2019. /installing-cgal-plugin; ; SOFA - Topic: [SOLVED] Installing CGAL Plugin. /installing-plugin-sofapython3; ; SOFA - Topic: [SOLVED] Installing plugin.sofapython3. /installing-sofa-on-mac-osx; . /feed; ; [SOLVED] installing SOFA on mac OSX – SOFA. /page; . /2; ; SOFA - Topic: [SOLVED] installing SOFA on mac OSX. SOFA - Topic: [SOLVED] installing SOFA on mac OSX. /installing-v17-12-from-dmg-package-on-mac-os; ; SOFA - Topic: [SOLVED] Installing v17.12 from DMG package on Mac OS. /install-wants-administrative-privileges; ; SOFA - Topic: [SOLVED] Install wants administrative privileges. /interaction-with-geomagic-touch-using-sofapython3; ; SOFA - Topic: Interaction with Geomagic Touch using SofaPython3. /interactiverecorded-camera; . /feed; ; [SOLVED] Interactive/Recorded Camera – SOFA. /page; . /13; ; SOFA - Topic: [SOLVED] Interactive/Recorded Camera. /4; ; SOFA - Topic: [SOLVED] Interactive/Recorded Camera. SOFA - Topic: [SOLVED] Interactive/Recorded Camera. /interactive-training-system-for-interventional-electrocardiology-procedures; ; SOFA - Topic: [SOLVED] Interactive Training System for Interventional Electrocardiology Procedures. /internal-nodes-displacements-from-surface-displacement; . /feed; ; [SOLVED] Internal nodes’ displacements from surface displacement – SOFA. /page; . /2; ; SOFA - Topic: [SOLVED] Internal nodes’ displacements from surface displacement. /7; ; SOFA - Topic: [SOLVED] Internal nodes’ displacements from surface displacement. SOFA - Topic: [SOLVED] Internal nodes’ displacements from sur",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:335155,install,install-wants-administrative-privileges,335155,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['install'],['install-wants-administrative-privileges']
Deployability,"for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Protected Member Functions |; Signals |; Public Slots |; List of all members . sofa::gui::qt::QDisplayDataWidget Class Reference . #include <QDisplayDataWidget.h>. Inheritance diagram for sofa::gui::qt::QDisplayDataWidget:. [legend]. Protected Attributes; core::objectmodel::BaseData * data_;  ; ModifyObjectFlags flags_;  ; QDisplayDataInfoWidget * datainfowidget_;  ; DataWidget * datawidget_;  ; unsigned int numWidgets_;  ; QGridLayout * gridLayout_;  . Public Member Functions;  QDisplayDataWidget (QWidget *parent, core::objectmodel::BaseData *data, const ModifyObjectFlags &flags);  ; unsigned int getNumWidgets () const;  ; ModifyObjectFlags flag ();  . Static Protected Member Functions; static QIcon & RefreshIcon ();  . Signals; void WidgetDirty (bool);  ; void WidgetUpdate ();  ; void DataUpdate ();  ; void DataOwnerDirty (bool);  ; void dataValueChanged (QString);  . Public Slots; void UpdateData ();  ; void UpdateWidgets ();  . Attribute details. ◆ data_. core::objectmodel::BaseData* sofa::gui::qt::QDisplayDataWidget::data_. protected . ◆ datainfowidget_. QDisplayDataInfoWidget* sofa::gui::qt::QDisplayDataWidget::datainfowidget_. protected . ◆ datawidget_. DataWidget* sofa::gui::qt::QDisplayDataWidget::datawidget_. protected . ◆ flags_. ModifyObjectFlags sofa::gui::qt::QDisplayDataWidget::flags_. protected . ◆ gridLayout_. QGridLayout* sofa::gui::qt::QDisplayDataWidget::gridLayout_. protected . ◆ numWidgets_. unsigned int sofa::gui::qt::QDisplayDataWidget::numWidgets_. protected . Constructor details. ◆ QDisplayDataWidget(). sofa::gui::qt::QDisplayDataWidget::QDisplayDataWidget ; (; QWidget * ; parent, . core::objectmodel::BaseData * ; data, . const ModifyObjectFlags & ; flags . ). Function details. ◆ DataOwnerDirty. void sofa::gui::qt::QDisplayDataWidget::DataOwnerDirty ; (; bool ; ). signal . ◆ DataUpdate. void sofa::gui::qt::QDisplayDataWidget::DataUpdate ; (; ). signal . ◆ ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_display_data_widget.html:1098,Update,UpdateData,1098,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_display_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_display_data_widget.html,2,['Update'],"['UpdateData', 'UpdateWidgets']"
Deployability,"for sofa::core::DataTrackerDDGNode, including all inherited members. addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; cleanDirty(const core::ExecParams *params=nullptr)sofa::core::DataTrackerDDGNodevirtual; sofa::core::objectmodel::DDGNode::cleanDirty()sofa::core::objectmodel::DDGNode; cleanDirtyOutputsOfInputs()sofa::core::objectmodel::DDGNodeprotected; DataTrackerDDGNode()sofa::core::DataTrackerDDGNodeinline; DDGLinkContainer typedefsofa::core::objectmodel::DDGNode; DDGLinkIterator typedefsofa::core::objectmodel::DDGNode; DDGNode()sofa::core::objectmodel::DDGNode; delInput(DDGNode *n)sofa::core::objectmodel::DDGNode; delOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; doAddInput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doAddOutput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doDelInput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doDelOutput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; getInputs()sofa::core::objectmodel::DDGNode; getOutputs()sofa::core::objectmodel::DDGNode; inputssofa::core::objectmodel::DDGNodeprotected; isDirty() constsofa::core::objectmodel::DDGNodeinline; m_dataTrackersofa::core::DataTrackerDDGNodeprotected; notifyEndEdit()sofa::core::objectmodel::DDGNodevirtual; outputssofa::core::objectmodel::DDGNodeprotected; setDirtyOutputs()sofa::core::objectmodel::DDGNodevirtual; setDirtyValue()sofa::core::objectmodel::DDGNodevirtual; update()=0sofa::core::objectmodel::DDGNodepure virtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual. Generated on Mon Nov 11 2024 03:14:09 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_d_d_g_node-members.html:1902,update,update,1902,api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_d_d_g_node-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_d_d_g_node-members.html,3,['update'],"['update', 'updateAllInputsIfDirty', 'updateIfDirty']"
Deployability,"formMass, DataTypes), SOFA_TEMPLATE(core::behavior::Mass, DataTypes))sofa::component::mass::UniformMass< DataTypes >; sofa::core::behavior::Mass::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(Mass, DataTypes), SOFA_TEMPLATE(ForceField, DataTypes), BaseMass)sofa::core::behavior::Mass< DataTypes >; ForceField< DataTypes >::SOFA_CLASS2(SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; TMassType typedefsofa::component::mass::UniformMass< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; UniformMass()sofa::component::mass::UniformMass< DataTypes >protected; updateFromTotalMass()sofa::component::mass::UniformMass< DataTypes >; updateFromVertexMass()sofa::component::mass::UniformMass< DataTypes >; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::mass::UniformMass< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::mass::UniformMass< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseMass() override=defaultsofa::core::behavior::BaseMassprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ForceField() overridesofa::core::behavior::ForceField< DataTypes >protected; ~Mass() ove",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_uniform_mass-members.html:22864,update,updateFromVertexMass,22864,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_uniform_mass-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_uniform_mass-members.html,1,['update'],['updateFromVertexMass']
Deployability,"framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::gl::GlText Class Reference . #include <glText.h>; Detailed Description; This class, called GlText, allows to render text in OpenGL, always facing the camera in 2D (screen) or in 3D (world coordinates) . Public Member Functions;  GlText ();  Constructor. More...;  ;  GlText (const std::string &text);  Constructor with specified text. More...;  ;  GlText (const std::string &text, const type::Vec3 &position);  Constructor with specified text and position. More...;  ;  GlText (const std::string &text, const type::Vec3 &position, const double &scale);  Constructor with specified text, position and scale. More...;  ;  ~GlText ();  Destructor. More...;  ; void setText (const std::string &text);  Update the text to render. More...;  ; template<typename T > ; void setText (const T &text);  Update the text to render. More...;  ; void update (const type::Vec3 &position);  Update the position used to render the text. More...;  ; void update (const double &scale);  Update the scale used to render the text. More...;  ; void draw ();  Render the text at the defined position and scale. More...;  . Static Public Member Functions; template<typename T > ; static void draw (const T &text, const type::Vec3 &position=type::Vec3(0.0, 0.0, 0.0), const double &scale=1.0);  Render the text at the defined position and scale. More...;  ; static void textureDraw_Overlay (const char *text, const double scale=1.0);  ; static void textureDraw_Indices (const type::vector< type::Vec3 > &positions, const float &scale);  . Constructor details. ◆ GlText() [1/4]. sofa::gl::GlText::GlText ; (; ). Constructor. . ◆ GlText() [2/4]. sofa::gl::GlText::GlText ; (; const std::string & ; text). Constructor with specified text. . ◆ GlText() [3/4]. sofa::gl::GlText::GlText ; (; const std::string & ; text, . const type::Vec3 & ; position . ). Constructor with specified text and position. .",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_gl_text.html:1046,update,update,1046,api/master/sofa/html/classsofa_1_1gl_1_1_gl_text.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_gl_text.html,3,"['Update', 'update']","['Update', 'update']"
Deployability,"fsofa::core::topology::Topology; TetraID typedefsofa::core::topology::Topology; Topology()sofa::core::topology::Topologyinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; Type enum namesofa::component::topology::container::grid::SparseGridTopology; UP enum valuesofa::component::topology::container::grid::SparseGridRamificationTopology; updateEdges()sofa::component::topology::container::grid::SparseGridTopologyprotectedvirtual; updateHexahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMesh()sofa::component::topology::container::grid::SparseGridTopology; updateQuads()sofa::component::topology::container::grid::SparseGridTopologyprotectedvirtual; updateTetrahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; UV typedefsofa::component::topology::container::constant::MeshTopology; UVID typedefsofa::component::topology::container::constant::MeshTopology; validHexahedrasofa::component::topology::container::constant::MeshTopologyprotected; validTetrahedrasofa::component::topology::container::constant::MeshTopologyprotected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; voxelizeTriangleMesh(helper::io::Mesh *mesh, sofa::core::sptr< RegularGridTopology > regularGrid, type::vector< Type > &regularGridTypes) constsofa::component::topology::container::grid::SparseGridTopologyprotected; vox",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_multiple_topology-members.html:50710,update,updateMesh,50710,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_multiple_topology-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_multiple_topology-members.html,2,['update'],['updateMesh']
Deployability,"fs . ). Method to initialize See alsoEdgeRestInformation when a new edge is created. Will be set as creation callback in the EdgeData . d_edgeInfo . ◆ applyTriangleCreation(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >::applyTriangleCreation ; (; Index ; triangleIndex, . TriangleRestInformation & ; tinfo, . const core::topology::BaseMeshTopology::Triangle & ; triangle, . const sofa::type::vector< Index > & ; ancestors, . const sofa::type::vector< SReal > & ; coefs . ). Method to initialize See alsoTriangleRestInformation when a new triangle is created. Will be set as creation callback in the TriangleData . d_triangleInfo . ◆ applyTriangleDestruction(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >::applyTriangleDestruction ; (; Index ; triangleIndex, . TriangleRestInformation & ; tinfo . ). Method to update See alsod_triangleInfo when a triangle is removed. Will be set as destruction callback in the TriangleData . d_triangleInfo . ◆ buildDampingMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; ). finalvirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ draw(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ getEdgeInfo(). template<class DataTypes > . sofa::core::topology::EdgeData<type::vector<EdgeRestInformation> >& sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >::getEdgeInfo ; (; ). inlineprotected . ◆ getLambda(). template<class Data",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field.html:29901,update,update,29901,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field.html,1,['update'],['update']
Deployability,"g &configFile);  ;  ~QMenuFilesRecentlyOpened () override;  ; void openFile (const std::string &file) override;  ; QMenu * createWidget (QWidget *parent, const std::string &=std::string(""Recently Opened Files ...""));  ; QMenu * getMenu ();  ;  Public Member Functions inherited from sofa::gui::common::FilesRecentlyOpenedManager;  FilesRecentlyOpenedManager (const std::string &configFile);  ; virtual ~FilesRecentlyOpenedManager ();  ; virtual std::string getFilename (unsigned int idx) const;  ; unsigned int getMaxNumFiles () const;  ; const std::string & getPath () const;  ; void setPath (const std::string &p);  ; const sofa::type::vector< std::string > & getFiles () const;  ; void setFiles (const type::vector< std::string > &f);  . Protected Member Functions; void updateWidget ();  ;  Protected Member Functions inherited from sofa::gui::common::FilesRecentlyOpenedManager; void writeFiles () const;  . Attribute details. ◆ menuRecentlyOpenedFiles. QMenu* sofa::gui::qt::QMenuFilesRecentlyOpened::menuRecentlyOpenedFiles. protected . Constructor details. ◆ QMenuFilesRecentlyOpened(). sofa::gui::qt::QMenuFilesRecentlyOpened::QMenuFilesRecentlyOpened ; (; const std::string & ; configFile). inline . ◆ ~QMenuFilesRecentlyOpened(). sofa::gui::qt::QMenuFilesRecentlyOpened::~QMenuFilesRecentlyOpened ; (; ). inlineoverride . Function details. ◆ createWidget(). QMenu * sofa::gui::qt::QMenuFilesRecentlyOpened::createWidget ; (; QWidget * ; parent, . const std::string & ; name = std::string(""Recently Opened Files ..."") . ). ◆ getMenu(). QMenu* sofa::gui::qt::QMenuFilesRecentlyOpened::getMenu ; (; ). inline . ◆ openFile(). void sofa::gui::qt::QMenuFilesRecentlyOpened::openFile ; (; const std::string & ; file). overridevirtual . Reimplemented from sofa::gui::common::FilesRecentlyOpenedManager. ◆ updateWidget(). void sofa::gui::qt::QMenuFilesRecentlyOpened::updateWidget ; (; ). protected . sofaguiqtQMenuFilesRecentlyOpened; Generated on Mon Nov 11 2024 03:23:43 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_menu_files_recently_opened.html:2540,update,updateWidget,2540,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_menu_files_recently_opened.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_menu_files_recently_opened.html,4,['update'],['updateWidget']
Deployability,"g &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setTime(double time)sofa::component::playback::ReadTopology; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(CompareTopology, playback::ReadTopology)sofa::component::playback::CompareTopology; sofa::component::playback::ReadTopology::SOFA_CLASS(ReadTopology, core::objectmodel::BaseObject)sofa::component::playback::ReadTopology; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; tetrahedrasofa::component::playback::ReadTopology; TetrahedraErrorsofa::component::playback::CompareTopologyprotected; TotalErrorsofa::component::playback::CompareTopologyprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; trianglessofa::component::playback::ReadTopology; TrianglesErrorsofa::component::playback::CompareTopologyprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ReadTopology() overridesofa::component::playback::ReadTopologyprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_compare_topology-members.html:12195,update,updateInternal,12195,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_compare_topology-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_compare_topology-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"g &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(HausdorffDistance, DataTypes), core::DataEngine)sofa::component::engine::analyze::HausdorffDistance< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::engine::analyze::HausdorffDistance< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~HausdorffDistance() overridesofa::component::engine::analyze::HausdorffDistance< DataTypes >inlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_hausdorff_distance-members.html:13512,update,updateAllInputsIfDirty,13512,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_hausdorff_distance-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_hausdorff_distance-members.html,4,['update'],"['updateAllInputsIfDirty', 'updateIfDirty', 'updateInternal', 'updateLinks']"
Deployability,"g &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Index, sofa::Index)sofa::component::engine::transform::MapIndices< T >; SOFA_CLASS(SOFA_TEMPLATE(MapIndices, T), core::DataEngine)sofa::component::engine::transform::MapIndices< T >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Value typedefsofa::component::engine::transform::MapIndices< T >; VecData typedefsofa::core::objectmodel::Base; VecIndex typedefsofa::component::engine::transform::MapIndices< T >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecValue typedefsofa::component::engine::transform::MapIndices< T >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_map_indices-members.html:12800,update,update,12800,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_map_indices-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_map_indices-members.html,1,['update'],['update']
Deployability,"g &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; MechanicalState< DataTypes > * getMState ();  ; const MechanicalState< DataTypes > * getMState () const;  . Protected Member Functions;  TetrahedronHyperelasticityFEMForceField ();  ;  ~TetrahedronHyperelasticityFEMForceField () override;  ; void testDerivatives ();  ; void updateTangentMatrix ();  ; void instantiateMaterial ();  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inhe",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_f_e_m_force_field.html:18066,update,updateTangentMatrix,18066,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_f_e_m_force_field.html,2,['update'],"['update', 'updateTangentMatrix']"
Deployability,"g &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(StartNavigationButtonSetting, MouseButtonSetting)sofa::gui::component::StartNavigationButtonSetting; sofa::component::setting::MouseButtonSetting::SOFA_CLASS(MouseButtonSetting, core::objectmodel::ConfigurationSetting)sofa::component::setting::MouseButtonSetting; sofa::core::objectmodel::ConfigurationSetting::SOFA_CLASS(ConfigurationSetting, BaseObject)sofa::core::objectmodel::ConfigurationSetting; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; StartNavigationButtonSetting()sofa::gui::component::StartNavigationButtonSettinginlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_start_navigation_button_setting-members.html:9944,Configurat,ConfigurationSetting,9944,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_start_navigation_button_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_start_navigation_button_setting-members.html,1,['Configurat'],['ConfigurationSetting']
Deployability,"g &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(AbstractTransformMatrixEngine, core::DataEngine)sofa::component::engine::transform::AbstractTransformMatrixEngine; sofa::core::DataEngine::SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(InvertTransformMatrixEngine, AbstractTransformMatrixEngine)sofa::component::engine::transform::InvertTransformMatrixEngine; sofa::component::engine::transform::AbstractTransformMatrixEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~AbstractTransformMatrixEngine() overridesofa::component::engine::transform::AbstractTransformMatrixEngineinlineprotected; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~InvertTransformMatrixEngine() overridesofa::component::engine::transform::InvertTransformMatrixEngineinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_invert_transform_matrix_engine-members.html:12653,update,updateIfDirty,12653,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_invert_transform_matrix_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_invert_transform_matrix_engine-members.html,3,['update'],"['updateIfDirty', 'updateInternal', 'updateLinks']"
Deployability,"g &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(AbstractTransformMatrixEngine, core::DataEngine)sofa::component::engine::transform::AbstractTransformMatrixEngine; sofa::core::DataEngine::SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(RotateTransformMatrixEngine, AbstractTransformMatrixEngine)sofa::component::engine::transform::RotateTransformMatrixEngine; sofa::component::engine::transform::AbstractTransformMatrixEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~AbstractTransformMatrixEngine() overridesofa::component::engine::transform::AbstractTransformMatrixEngineinlineprotected; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~RotateTransformMatrixEngine() overridesofa::component::engine::transform::RotateTransformMatrixEngineinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_rotate_transform_matrix_engine-members.html:12729,update,updateIfDirty,12729,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_rotate_transform_matrix_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_rotate_transform_matrix_engine-members.html,3,['update'],"['updateIfDirty', 'updateInternal', 'updateLinks']"
Deployability,"g &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; showInputsofa::component::engine::transform::SmoothMeshEngine< DataTypes >; showOutputsofa::component::engine::transform::SmoothMeshEngine< DataTypes >; SmoothMeshEngine()sofa::component::engine::transform::SmoothMeshEngine< DataTypes >protected; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(SmoothMeshEngine, DataTypes), core::DataEngine)sofa::component::engine::transform::SmoothMeshEngine< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::engine::transform::SmoothMeshEngine< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~SmoothMeshEngine() overridesofa::component::engine::transform::SmoothMeshEngine< DataTypes >inlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_smooth_mesh_engine-members.html:12994,update,updateAllInputsIfDirty,12994,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_smooth_mesh_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_smooth_mesh_engine-members.html,4,['update'],"['updateAllInputsIfDirty', 'updateIfDirty', 'updateInternal', 'updateLinks']"
Deployability,"g &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSystemSolution(core::MultiVecDerivId v) overridesofa::component::linearsystem::CompositeLinearSystem< TMatrix, TVector >virtual; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseMatrixLinearSystem, core::objectmodel::BaseObject)sofa::core::behavior::BaseMatrixLinearSystem; SOFA_CLASS(SOFA_TEMPLATE2(CompositeLinearSystem, TMatrix, TVector), SOFA_TEMPLATE2(TypedMatrixLinearSystem, TMatrix, TVector))sofa::component::linearsystem::CompositeLinearSystem< TMatrix, TVector >; sofa::component::linearsystem::TypedMatrixLinearSystem::SOFA_CLASS(SOFA_TEMPLATE2(TypedMatrixLinearSystem, TMatrix, TVector), sofa::core::behavior::BaseMatrixLinearSystem)sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >; sofa::core::behavior::BaseMatrixLinearSystem::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; Vector typedefsofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_composite_linear_system-members.html:14573,update,updateInternal,14573,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_composite_linear_system-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_composite_linear_system-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"g > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseConstraint, BaseConstraintSet)sofa::core::behavior::BaseConstraint; sofa::core::behavior::BaseConstraintSet::SOFA_ABSTRACT_CLASS(BaseConstraintSet, objectmodel::BaseObject)sofa::core::behavior::BaseConstraintSet; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeLambda(const ConstraintParams *cParams, MultiVecDerivId res, const sofa::linearalgebra::BaseVector *lambda)=0sofa::core::behavior::BaseConstraintpure virtual; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecConstArea typedefsofa::core::behavior::BaseConstraint; VecConstCoord typedefsofa::core::behavior::BaseConstraint; VecConstDeriv typedefsofa::core::behavior::BaseConstraint; VecConstraintBlockInfo typedefsofa::core::behavior::BaseConstraint; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecPersistentID typedefsofa::core::behavior::BaseConstraint; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseConstraint() overridesofa::core::behavior::BaseConstraintinlineprotected; ~BaseConstraintSet() overridesofa::core::behavior::BaseConstraintSetprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_constraint-members.html:12064,update,updateLinks,12064,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_constraint-members.html,1,['update'],['updateLinks']
Deployability,"g > id;  Name of element (corresponding with the shader) More...;  ; Data< unsigned int > indexShader;  Name of element (corresponding with the shader) More...;  ; std::set< OglShader * > shaders;  Shader to use the element with. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::gl::component::shader::OglVariable< type::vector< type::Vec2f > >;  OglVariable ();  ;  ~OglVariable () override;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void in",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector2_variable.html:15611,update,update,15611,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector2_variable.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector2_variable.html,2,['update'],['update']
Deployability,"g > id;  Name of element (corresponding with the shader) More...;  ; Data< unsigned int > indexShader;  Name of element (corresponding with the shader) More...;  ; std::set< OglShader * > shaders;  Shader to use the element with. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::gl::component::shader::OglVariable< type::vector< type::Vec3f > >;  OglVariable ();  ;  ~OglVariable () override;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void in",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector3_variable.html:15611,update,update,15611,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector3_variable.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector3_variable.html,2,['update'],['update']
Deployability,"g > id;  Name of element (corresponding with the shader) More...;  ; Data< unsigned int > indexShader;  Name of element (corresponding with the shader) More...;  ; std::set< OglShader * > shaders;  Shader to use the element with. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::gl::component::shader::OglVariable< type::vector< type::Vec4f > >;  OglVariable ();  ;  ~OglVariable () override;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void in",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector4_variable.html:15611,update,update,15611,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector4_variable.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector4_variable.html,2,['update'],['update']
Deployability,"g all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  SimpleTesselatedTetraTopologicalMapping ();  Constructor. More...;  ;  ~SimpleTesselatedTetraTopologicalMapping () override;  Destructor. More...;  ; void swapOutputPoints (Index i1, Index i2);  ; void removeOutputPoints (const sofa::type::vector< Index > &tab);  ; void renumberOutputPoints (const sofa::type::vector< Index > &tab);  ; void swapOutputTetrahedra (Index i1, Index i2);  ; void removeOutputTetrahedra (const sofa::type::vector< Index > &tab);  ; void setPointSource (int i, int source);  ; void swapInputPoints (Index i1, Index i2);  ; void removeInputPoints (const sofa::type::vector< Index > &tab);  ; void renumberInputPoints (const sofa::type::vector< Index > &tab);  ; void swapInputEdges (Index i1, Index i2);  ; void removeInputEdges (const sofa::type::vector< Index > &tab);  ; void swapInputTetrahedra (Index i1, Index i2);  ; void removeInputTetrahedra (const sofa::type::vector< Index > &tab);  ;  Protected Member Functions inherited from sofa::core::topology::TopologicalMapping;  TopologicalMapping ();  ;  ~TopologicalMapping () override;  ; bool checkTopologyInputTypes ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool h",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_tetra_topological_mapping.html:14818,update,update,14818,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_tetra_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_tetra_topological_mapping.html,1,['update'],['update']
Deployability,"g purposes. More...;  ; void reset () override;  Reset to initial state. More...;  ; void cleanup () override;  ; virtual std::string getContactResponse (core::CollisionModel *model1, core::CollisionModel *model2) override;  ; void removeContacts (const ContactVector &) override;  virtual methods used for cleaning the pipeline after a dynamic graph node deletion. More...;  ; void setDefaultResponseType (const std::string &responseT);  ; std::string getDefaultResponseType () const;  ;  Public Member Functions inherited from sofa::core::collision::ContactManager;  SOFA_ABSTRACT_CLASS (ContactManager, CollisionAlgorithm);  ; virtual const ContactVector & getContacts ();  ; virtual void setIntersectionMethod (Intersection *v);  virtual because subclasses might do precomputations based on intersection algorithms More...;  ; Intersection * getIntersectionMethod () const;  ;  Public Member Functions inherited from sofa::core::collision::CollisionAlgorithm;  SOFA_ABSTRACT_CLASS (CollisionAlgorithm, objectmodel::BaseObject);  ; virtual void setInstance (Instance inst);  Allow to store multiple internal states by specifying a different collision pipeline 'instance'. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_collision_response.html:4918,pipeline,pipeline,4918,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_collision_response.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_collision_response.html,1,['pipeline'],['pipeline']
Deployability,"g(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ startingNode. Node* sofa::simulation::UpdateContextVisitor::startingNode. protected . Constructor details. ◆ UpdateContextVisitor(). sofa::simulation::UpdateContextVisitor::UpdateContextVisitor ; (; const core::ExecParams * ; params). inline . Function details. ◆ getCategoryName(). const char* sofa::simulation::UpdateContextVisitor::getCategoryName ; (; ); const. inlineoverridevirtual . Return a category name for this action. Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ getClassName(). const char* sofa::simulation::UpdateContextVisitor::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor.; Reimplemented in sofa::simulation::UpdateVisualContextVisitor, and sofa::simulation::UpdateSimulationContextVisitor. ◆ isThreadSafe(). bool sofa::simulation::UpdateContextVisitor::isThreadSafe ; (; ); const. inlineoverridevirtual . Specify whether this action can be parallelized. ; Reimplemented from sofa::simulation::Visitor. ◆ processNodeT",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor.html:4805,Update,UpdateContextVisitor,4805,api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor.html,1,['Update'],['UpdateContextVisitor']
Deployability,"g);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions; virtual void updateFromTopology ();  ;  LineCollisionModel ();  ;  Protected Member Functions inherited from sofa::core::CollisionModel;  CollisionModel ();  Constructor. More...;  ;  ~CollisionModel () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model.html:20705,update,update,20705,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model.html,1,['update'],['update']
Deployability,g: Distortion. /dlls-issue; . /feed; ; DLLs issue – SOFA. SOFA - Topic Tag: DLLs issue. /docker; . /feed; ; docker – SOFA. SOFA - Topic Tag: docker. /documentation; . /feed; ; documentation – SOFA. SOFA - Topic Tag: documentation. /documentation-color-alpha; . /feed; ; documentation color alpha – SOFA. SOFA - Topic Tag: documentation color alpha. /doe; . /feed; ; doe – SOFA. SOFA - Topic Tag: doe. /dynamic-systems; . /feed; ; Dynamic systems – SOFA. SOFA - Topic Tag: Dynamic systems. /edge_removal; . /feed; ; edge_removal – SOFA. SOFA - Topic Tag: edge_removal. /eigen; . /feed; ; Eigen – SOFA. SOFA - Topic Tag: Eigen. /elastic; . /feed; ; Elastic – SOFA. SOFA - Topic Tag: Elastic. /elasticity; . /feed; ; elasticity – SOFA. SOFA - Topic Tag: elasticity. /elastoplastic; . /feed; ; Elastoplastic – SOFA. SOFA - Topic Tag: Elastoplastic. /energy; . /feed; ; Energy – SOFA. SOFA - Topic Tag: Energy. /engine-data-update-energy; . /feed; ; engine data update energy – SOFA. SOFA - Topic Tag: engine data update energy. /error; . /feed; ; error – SOFA. SOFA - Topic Tag: error. /error-5; . /feed; ; Error 5 – SOFA. SOFA - Topic Tag: Error 5. /error-determination; . /feed; ; error determination – SOFA. SOFA - Topic Tag: error determination. /event; . /feed; ; event – SOFA. SOFA - Topic Tag: event. /events; . /feed; ; events – SOFA. SOFA - Topic Tag: events. /execution-time; . /feed; ; Execution time – SOFA. SOFA - Topic Tag: Execution time. /experience; . /feed; ; experience – SOFA. SOFA - Topic Tag: experience. /export; . /feed; ; export – SOFA. SOFA - Topic Tag: export. /exporter-obj-files-normals-estimation; . /feed; ; exporter ; OBJ files ; normals estimation – SOFA. SOFA - Topic Tag: exporter ; OBJ files ; normals estimation. /export-mesh; . /feed; ; export mesh – SOFA. SOFA - Topic Tag: export mesh. /external; . /feed; ; external – SOFA. SOFA - Topic Tag: external. /external-data-com-port; . /feed; ; external data COM port – SOFA. SOFA - Topic Tag: external data COM port. /ex,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:441540,update,update,441540,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['update'],['update']
Deployability,"gForceField (SReal _ks=100.0, SReal _kd=5.0);  ;  SpringForceField (MechanicalState *object1, MechanicalState *object2, SReal _ks=100.0, SReal _kd=5.0);  ; virtual std::unique_ptr< SpringForce > computeSpringForce (const VecCoord &p1, const VecDeriv &v1, const VecCoord &p2, const VecDeriv &v2, const Spring &spring);  ; virtual void addSpringForce (Real &potentialEnergy, VecDeriv &f1, const VecCoord &p1, const VecDeriv &v1, VecDeriv &f2, const VecCoord &p2, const VecDeriv &v2, sofa::Index, const Spring &spring);  ; void initializeTopologyHandler (sofa::core::topology::TopologySubsetIndices &indices, core::topology::BaseMeshTopology *topology, sofa::Index mstateId);  ; void updateTopologyIndicesFromSprings ();  ; void updateTopologyIndicesFromSprings_springAdded ();  ; void updateTopologyIndices_springRemoved (unsigned id);  ; void updateSpringsFromTopologyIndices ();  ; void applyRemovedPoints (const sofa::core::topology::PointsRemoved *pointsRemoved, sofa::Index mstateId);  ; void applyRemovedEdges (const sofa::core::topology::EdgesRemoved *edgesRemoved, sofa::Index mstateId);  ;  Protected Member Functions inherited from sofa::core::behavior::PairInteractionForceField< DataTypes >;  PairInteractionForceField (MechanicalState< DataTypes > *mm1=nullptr, MechanicalState< DataTypes > *mm2=nullptr);  ;  ~PairInteractionForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_mesh_spring_force_field.html:21053,update,updateTopologyIndicesFromSprings,21053,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_mesh_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_mesh_spring_force_field.html,18,['update'],"['update', 'updateSpringsFromTopologyIndices', 'updateTopologyIndicesFromSprings']"
Deployability,"geSetTopologyModifiervirtual; swapPoints(const Index i1, const Index i2)sofa::component::topology::container::dynamic::PointSetTopologyModifiervirtual; TopologyModifier()sofa::core::topology::TopologyModifierinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::topology::container::dynamic::TriangleSetTopologyModifier; TriangleID typedefsofa::component::topology::container::dynamic::TriangleSetTopologyModifier; TrianglesAroundEdge typedefsofa::component::topology::container::dynamic::TriangleSetTopologyModifier; TrianglesAroundVertex typedefsofa::component::topology::container::dynamic::TriangleSetTopologyModifier; TriangleSetGeometryAlgorithms classsofa::component::topology::container::dynamic::TriangleSetTopologyModifierfriend; TriangleSetTopologyModifier()sofa::component::topology::container::dynamic::TriangleSetTopologyModifierinlineprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseTopologyObject() overridesofa::core::topology::BaseTopologyObjectinlineprotected; ~EdgeSetTopologyModifier() overridesofa::component::topology::container::dynamic::EdgeSetTopologyModifierinlineprotected; ~PointSetTopologyModifier() overridesofa::component::topology::container::dynamic::PointSetTopologyModifierinlineprotected; ~TopologyModifier() overridesofa::core::topology::TopologyModifierinlineprotected; ~TriangleSetTopologyModifier() overridesofa::component::topology::contai",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_topology_modifier-members.html:24867,update,updateLinks,24867,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_topology_modifier-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_topology_modifier-members.html,1,['update'],['updateLinks']
Deployability,"gesProcess(sofa::type::vector< EdgeID > &indices, const sofa::type::vector< sofa::type::vector< SReal > > &baryCoefs, const bool removeIsolatedPoints=true)sofa::component::topology::container::dynamic::EdgeSetTopologyModifiervirtual; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; swapEdges(const sofa::type::vector< sofa::type::vector< EdgeID > > &edgesPairs)sofa::component::topology::container::dynamic::EdgeSetTopologyModifiervirtual; swapEdgesProcess(const sofa::type::vector< sofa::type::vector< EdgeID > > &edgesPairs)sofa::component::topology::container::dynamic::EdgeSetTopologyModifiervirtual; swapPoints(const Index i1, const Index i2)sofa::component::topology::container::dynamic::PointSetTopologyModifiervirtual; TopologyModifier()sofa::core::topology::TopologyModifierinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseTopologyObject() overridesofa::core::topology::BaseTopologyObjectinlineprotected; ~DynamicSparseGridTopologyModifier() overridesofa::component::topology::container::dynamic::DynamicSparseGridTopologyModifierinlineprotected; ~EdgeSetTopologyModifier() overridesofa::component::topology::container::dynamic::EdgeSetTopologyModifierinlineprotected; ~HexahedronSetTopologyModifier() overridesofa::component::topology::container::dynamic::HexahedronSetTopologyModifierinlineprotected; ~Po",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier-members.html:26899,update,updateLinks,26899,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier-members.html,1,['update'],['updateLinks']
Deployability,"gesProcess(sofa::type::vector< EdgeID > &indices, const sofa::type::vector< sofa::type::vector< SReal > > &baryCoefs, const bool removeIsolatedPoints=true)sofa::component::topology::container::dynamic::EdgeSetTopologyModifiervirtual; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; swapEdges(const sofa::type::vector< sofa::type::vector< EdgeID > > &edgesPairs)sofa::component::topology::container::dynamic::EdgeSetTopologyModifiervirtual; swapEdgesProcess(const sofa::type::vector< sofa::type::vector< EdgeID > > &edgesPairs)sofa::component::topology::container::dynamic::EdgeSetTopologyModifiervirtual; swapPoints(const Index i1, const Index i2)sofa::component::topology::container::dynamic::PointSetTopologyModifiervirtual; TopologyModifier()sofa::core::topology::TopologyModifierinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseTopologyObject() overridesofa::core::topology::BaseTopologyObjectinlineprotected; ~EdgeSetTopologyModifier() overridesofa::component::topology::container::dynamic::EdgeSetTopologyModifierinlineprotected; ~HexahedronSetTopologyModifier() overridesofa::component::topology::container::dynamic::HexahedronSetTopologyModifierinlineprotected; ~PointSetTopologyModifier() overridesofa::component::topology::container::dynamic::PointSetTopologyModifierinlineprotected; ~QuadSetTopologyModif",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_modifier-members.html:26276,update,updateLinks,26276,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_modifier-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_modifier-members.html,1,['update'],['updateLinks']
Deployability,"gesProcess(sofa::type::vector< EdgeID > &indices, const sofa::type::vector< sofa::type::vector< SReal > > &baryCoefs, const bool removeIsolatedPoints=true)sofa::component::topology::container::dynamic::EdgeSetTopologyModifiervirtual; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; swapEdges(const sofa::type::vector< sofa::type::vector< EdgeID > > &edgesPairs)sofa::component::topology::container::dynamic::EdgeSetTopologyModifiervirtual; swapEdgesProcess(const sofa::type::vector< sofa::type::vector< EdgeID > > &edgesPairs)sofa::component::topology::container::dynamic::EdgeSetTopologyModifiervirtual; swapPoints(const Index i1, const Index i2)sofa::component::topology::container::dynamic::PointSetTopologyModifiervirtual; TopologyModifier()sofa::core::topology::TopologyModifierinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseTopologyObject() overridesofa::core::topology::BaseTopologyObjectinlineprotected; ~EdgeSetTopologyModifier() overridesofa::component::topology::container::dynamic::EdgeSetTopologyModifierinlineprotected; ~PointSetTopologyModifier() overridesofa::component::topology::container::dynamic::PointSetTopologyModifierinlineprotected; ~QuadSetTopologyModifier() overridesofa::component::topology::container::dynamic::QuadSetTopologyModifierinlineprotected; ~TopologyModifier() overridesofa:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_topology_modifier-members.html:22861,update,updateLinks,22861,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_topology_modifier-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_topology_modifier-members.html,1,['update'],['updateLinks']
Deployability,"getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  Hexa2QuadTopologicalMapping ();  Constructor. More...;  ;  ~Hexa2QuadTopologicalMapping () override=default;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::topology::TopologicalMapping;  TopologicalMapping ();  ;  ~TopologicalMapping () override;  ; bool checkTopologyInputTypes ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initDat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_hexa2_quad_topological_mapping.html:13037,update,update,13037,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_hexa2_quad_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_hexa2_quad_topological_mapping.html,1,['update'],['update']
Deployability,"getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  InteractiveCamera ();  ;  ~InteractiveCamera () override;  ; void moveCamera (int x, int y);  ; void manageEvent (core::objectmodel::Event *e) override;  ; void processMouseEvent (core::objectmodel::MouseEvent *me);  ; void processKeyPressedEvent (core::objectmodel::KeypressedEvent *kpe);  ; void processKeyReleasedEvent (core::objectmodel::KeyreleasedEvent *kre);  ;  Protected Member Functions inherited from sofa::component::visual::BaseCamera; void updateOutputData ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_interactive_camera.html:16977,update,updateOutputData,16977,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_interactive_camera.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_interactive_camera.html,2,['update'],"['update', 'updateOutputData']"
Deployability,"getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  Quad2TriangleTopologicalMapping ();  Constructor. More...;  ;  ~Quad2TriangleTopologicalMapping () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::topology::TopologicalMapping;  TopologicalMapping ();  ;  ~TopologicalMapping () override;  ; bool checkTopologyInputTypes ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initDat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_quad2_triangle_topological_mapping.html:11882,update,update,11882,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_quad2_triangle_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_quad2_triangle_topological_mapping.html,1,['update'],['update']
Deployability,"getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  Triangle2EdgeTopologicalMapping ();  Constructor. More...;  ;  ~Triangle2EdgeTopologicalMapping () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::topology::TopologicalMapping;  TopologicalMapping ();  ;  ~TopologicalMapping () override;  ; bool checkTopologyInputTypes ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initDat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_triangle2_edge_topological_mapping.html:11869,update,update,11869,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_triangle2_edge_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_triangle2_edge_topological_mapping.html,1,['update'],['update']
Deployability,"getInfos() constsofa::simulation::Visitorinlinevirtual; isThreadSafe() constsofa::simulation::Visitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *node) overridesofa::simulation::UpdateBoundingBoxVisitorvirtual; sofa::simulation::Visitor::processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::UpdateBoundingBoxVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; UpdateBoundingBoxVisitor(const sofa::core::ExecParams *params)sofa::simulation::UpdateBoundingBoxVisitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor-members.html:4092,Update,UpdateBoundingBoxVisitor,4092,api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor-members.html,2,['Update'],['UpdateBoundingBoxVisitor']
Deployability,gie-numerique-french; ; SOFA – SOFA presented in webinar “Radiologie Numérique” [French]. /sofa-soon-on-github; ; SOFA – SOFA soon on GitHub. /sofa-stc5-coming-soon; ; SOFA – SOFA STC#5 in Strasbourg. /sofa-technical-committee-3-upcoming-raise-your-expectations; ; SOFA – SOFA Technical Committee #3 upcoming: raise your expectations!. /sofa-technologies-exhibited-amd-learning-day-in-paris; ; SOFA – SOFA technologies exhibited @ AMD Learning Day in Paris. /sofa-training-discover-and-learn-sofa-at-ismar2017; ; SOFA – SOFA training: discover and learn SOFA at ISMAR 2017. /sofa-v16-12-has-been-released; ; SOFA – SOFA v16.12 has been released!. /sofa-v17-06-has-been-released; ; SOFA – SOFA v17.06 has been released!. /sofa-v17-12-has-been-released; ; SOFA – SOFA v17.12 has been released!. /sofa-v18-06-has-been-released; ; SOFA – SOFA v18.06 has been released!. /sofa-v18-12-has-been-released; ; SOFA – SOFA v18.12 has been released!. /sofa-v19-06-has-been-released; ; SOFA – SOFA v19.06 has been released!. /sofa-v19-12-has-been-released; ; SOFA – SOFA v19.12 has been released!. /sofa-v20-06-has-been-released; ; SOFA – SOFA v20.06 has been released!. /sofa-v20-12-has-been-released; ; SOFA – SOFA v20.12 has been released!. /sofa-v21-06-has-been-released; ; SOFA – SOFA v21.06 has been released!. /sofa-v21-12-has-been-released; ; SOFA – SOFA v21.12 has been released!. /sofa-v22-06-has-been-released; ; SOFA – SOFA v22.06 has been released!. /sofa-v22-12-has-been-released; ; SOFA – SOFA v22.12 has been released!. /sofa-v23-06-has-been-released; ; SOFA – SOFA v23.06 has been released!. /sofa-v23-12-has-been-released; ; SOFA – SOFA v23.12 has been released!. /sofa-v24-06-has-been-released; ; SOFA – SOFA v24.06 has been released!. /sofa-week-2018-experience; ; SOFA – SOFA Week 2018 Experience. /sofa-week-2021-register-now; ; SOFA – SOFA Week 2021: register now!. /sofa-week-2022-register-now; ; SOFA – SOFA Week 2022: register now!. /sofa-week-2023-register-now; ; SOFA – SOFA Week 2023:,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:9071,release,released,9071,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['release'],['released']
Deployability,"gine::TextureInterpolation< DataTypes >protected; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(TextureInterpolation, DataTypes), core::DataEngine)sofa::gl::component::engine::TextureInterpolation< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; standardLinearInterpolation()sofa::gl::component::engine::TextureInterpolation< DataTypes >protected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; TextureInterpolation()sofa::gl::component::engine::TextureInterpolation< DataTypes >protected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateGraph()sofa::gl::component::engine::TextureInterpolation< DataTypes >protected; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::gl::component::engine::TextureInterpolation< DataTypes >; VecCoord2D typedefsofa::gl::component::engine::TextureInterpolation< DataTypes >; VecCoord3D typedefsofa::gl::component::engine::TextureInterpolation< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~TextureInterpolation() overridesofa::gl::component::engine::TextureInterpolation< Data",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1engine_1_1_texture_interpolation-members.html:13835,update,updateInternal,13835,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1engine_1_1_texture_interpolation-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1engine_1_1_texture_interpolation-members.html,1,['update'],['updateInternal']
Deployability,"ginning of the timestep).; If the ForceField can be represented as a matrix, this method computes $ df += kFactor K dx + bFactor B dx $; This method must be implemented by the component, and is usually called by the generic PairInteractionForceField::addDForce() method.; To support old components that implement the deprecated addForce method without scalar coefficients, it defaults to using a temporaty vector to compute $ K dx $ and then manually scaling all values by kFactor. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::GearSpringForceField< DataTypes >::addForce ; (; const sofa::core::MechanicalParams * ; mparams, . DataVecDeriv & ; f1, . DataVecDeriv & ; f2, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2, . const DataVecDeriv & ; v1, . const DataVecDeriv & ; v2 . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes $ f += B v + K x $; This method must be implemented by the component, and is usually called by the generic ForceField::addForce() method. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ addSpring() [1/2]. template<class DataTypes > . void sofa::component::solidmechanics::spring::GearSpringForceField< DataTypes >::addSpring ; (; const Spring & ; s). inline . ◆ addSpring() [2/2]. template<class DataTypes > . void sofa::component::solidmechanics::spring::GearSpringForceField< DataTypes >::addSpring ; (; int ; m1, . int ; m2, . int ; p1, . int ; p2, . Real ; hardKst, . Real ; softKsr, . Real ; hardKsr, . Real ; kd, . Real ; ratio . ). inline . ◆ addSpringDForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::GearSpringForceField< DataTypes >::addSpringDForce ; (; VecDeriv & ; df1, . cons",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_gear_spring_force_field.html:27282,update,update,27282,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_gear_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_gear_spring_force_field.html,1,['update'],['update']
Deployability,"glePressureForceField, DataTypes), SOFA_TEMPLATE(core::behavior::ForceField, DataTypes))sofa::component::mechanicalload::TrianglePressureForceField< DataTypes >; ForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; triangleListsofa::component::mechanicalload::TrianglePressureForceField< DataTypes >; TrianglePressureForceField()sofa::component::mechanicalload::TrianglePressureForceField< DataTypes >protected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateTriangleInformation()sofa::component::mechanicalload::TrianglePressureForceField< DataTypes >protected; VecCoord typedefsofa::component::mechanicalload::TrianglePressureForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::mechanicalload::TrianglePressureForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ForceField() overridesofa::core::behavior::ForceField< DataTypes >protected; ~SingleStateAccessor() override=defaultsofa::core::behavior::SingleStateAccessor< DataTypes >protected; ~StateAccess",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_triangle_pressure_force_field-members.html:17125,update,updateTriangleInformation,17125,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_triangle_pressure_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_triangle_pressure_force_field-members.html,1,['update'],['updateTriangleInformation']
Deployability,"gleStateAccessor, DataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< DataTypes >; sofa::core::behavior::StateAccessor::SOFA_ABSTRACT_CLASS(StateAccessor, objectmodel::BaseObject)sofa::core::behavior::StateAccessor; SOFA_CLASS(SOFA_TEMPLATE(ShapeMatching, DataTypes), core::DataEngine)sofa::component::engine::analyze::ShapeMatching< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; targetPositionsofa::component::engine::analyze::ShapeMatching< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VD typedefsofa::component::engine::analyze::ShapeMatching< DataTypes >; VecCoord typedefsofa::component::engine::analyze::ShapeMatching< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VI typedefsofa::component::engine::analyze::ShapeMatching< DataTypes >; VVI typedefsofa::component::engine::analyze::ShapeMatching< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~ShapeMatching() overridesofa::component::engine::analyze::ShapeMatching< DataTypes >in",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_shape_matching-members.html:14964,update,updateLinks,14964,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_shape_matching-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_shape_matching-members.html,1,['update'],['updateLinks']
Deployability,"gned int &currentnode, const VecCoord &positions, unsigned N) const;  ; void closest (distanceToPoint &cl, const Coord &x, const unsigned int &currentnode, const VecCoord &positions) const;  . Friends; To be Data-zable; std::ostream & operator<< (std::ostream &os, const kdTree< Coord > &);  ; std::istream & operator>> (std::istream &is, kdTree< Coord > &);  . Attribute details. ◆ firstNode. template<class Coord > . unsigned int sofa::helper::kdTree< Coord >::firstNode. protected . ◆ tree. template<class Coord > . type::vector< TREENODE > sofa::helper::kdTree< Coord >::tree. protected . Function details. ◆ build() [1/3]. template<class Coord > . void sofa::helper::kdTree< Coord >::build ; (; const VecCoord & ; positions). update tree (to be used whenever positions have changed) . ◆ build() [2/3]. template<class Coord > . void sofa::helper::kdTree< Coord >::build ; (; const VecCoord & ; positions, . const type::vector< unsigned int > & ; ROI . ). update tree based on positions subset (to be used whenever points p have changed) . ◆ build() [3/3]. template<class Coord > . unsigned int sofa::helper::kdTree< Coord >::build ; (; UIlist & ; list, . unsigned char ; direction, . const VecCoord & ; positions . ). protected . ◆ closest() [1/2]. template<class Coord > . void sofa::helper::kdTree< Coord >::closest ; (; distanceSet & ; cl, . const Coord & ; x, . const unsigned int & ; currentnode, . const VecCoord & ; positions, . unsigned ; N . ); const. protected . ◆ closest() [2/2]. template<class Coord > . void sofa::helper::kdTree< Coord >::closest ; (; distanceToPoint & ; cl, . const Coord & ; x, . const unsigned int & ; currentnode, . const VecCoord & ; positions . ); const. protected . ◆ getClosest(). template<class Coord > . unsigned int sofa::helper::kdTree< Coord >::getClosest ; (; const Coord & ; x, . const VecCoord & ; positions . ); const. get the index of the closest point between positions and x . ◆ getNClosest(). template<class Coord > . void sofa::helper::kdTree<",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1kd_tree.html:3220,update,update,3220,api/master/sofa/html/classsofa_1_1helper_1_1kd_tree.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1kd_tree.html,2,['update'],['update']
Deployability,"gorithms, DataTypes))sofa::component::topology::container::dynamic::EdgeSetGeometryAlgorithms< DataTypes >; sofa::component::topology::container::dynamic::PointSetGeometryAlgorithms::SOFA_CLASS(SOFA_TEMPLATE(PointSetGeometryAlgorithms, DataTypes), core::topology::GeometryAlgorithms)sofa::component::topology::container::dynamic::PointSetGeometryAlgorithms< DataTypes >; sofa::core::topology::GeometryAlgorithms::SOFA_CLASS(GeometryAlgorithms, BaseTopologyObject)sofa::core::topology::GeometryAlgorithms; sofa::core::topology::BaseTopologyObject::SOFA_CLASS(BaseTopologyObject, core::objectmodel::BaseObject)sofa::core::topology::BaseTopologyObject; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3d typedefsofa::component::topology::container::dynamic::EdgeSetGeometryAlgorithms< DataTypes >; VecCoord typedefsofa::component::topology::container::dynamic::EdgeSetGeometryAlgorithms< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::topology::container::dynamic::EdgeSetGeometryAlgorithms< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; writeMSHfile(const char *filename) constsofa::component::topology::container::dynamic::EdgeSetGeometryAlgorithms< DataTypes >inline; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseTopologyObject() overridesofa::core::topolog",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_geometry_algorithms-members.html:19953,update,updateLinks,19953,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_geometry_algorithms-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_geometry_algorithms-members.html,1,['update'],['updateLinks']
Deployability,"gorithms, DataTypes))sofa::component::topology::container::dynamic::EdgeSetGeometryAlgorithms< DataTypes >; sofa::component::topology::container::dynamic::PointSetGeometryAlgorithms::SOFA_CLASS(SOFA_TEMPLATE(PointSetGeometryAlgorithms, DataTypes), core::topology::GeometryAlgorithms)sofa::component::topology::container::dynamic::PointSetGeometryAlgorithms< DataTypes >; sofa::core::topology::GeometryAlgorithms::SOFA_CLASS(GeometryAlgorithms, BaseTopologyObject)sofa::core::topology::GeometryAlgorithms; sofa::core::topology::BaseTopologyObject::SOFA_CLASS(BaseTopologyObject, core::objectmodel::BaseObject)sofa::core::topology::BaseTopologyObject; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3d typedefsofa::component::topology::container::dynamic::EdgeSetGeometryAlgorithms< DataTypes >; VecCoord typedefsofa::component::topology::container::dynamic::HexahedronSetGeometryAlgorithms< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::topology::container::dynamic::EdgeSetGeometryAlgorithms< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; writeMSHfile(const char *filename) constsofa::component::topology::container::dynamic::HexahedronSetGeometryAlgorithms< DataTypes >inline; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseTopologyObject() overridesofa::c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_geometry_algorithms-members.html:29989,update,updateLinks,29989,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_geometry_algorithms-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_geometry_algorithms-members.html,1,['update'],['updateLinks']
Deployability,"gorithms, DataTypes))sofa::component::topology::container::dynamic::EdgeSetGeometryAlgorithms< DataTypes >; sofa::component::topology::container::dynamic::PointSetGeometryAlgorithms::SOFA_CLASS(SOFA_TEMPLATE(PointSetGeometryAlgorithms, DataTypes), core::topology::GeometryAlgorithms)sofa::component::topology::container::dynamic::PointSetGeometryAlgorithms< DataTypes >; sofa::core::topology::GeometryAlgorithms::SOFA_CLASS(GeometryAlgorithms, BaseTopologyObject)sofa::core::topology::GeometryAlgorithms; sofa::core::topology::BaseTopologyObject::SOFA_CLASS(BaseTopologyObject, core::objectmodel::BaseObject)sofa::core::topology::BaseTopologyObject; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3d typedefsofa::component::topology::container::dynamic::EdgeSetGeometryAlgorithms< DataTypes >; VecCoord typedefsofa::component::topology::container::dynamic::QuadSetGeometryAlgorithms< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::topology::container::dynamic::EdgeSetGeometryAlgorithms< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; writeMSHfile(const char *filename) constsofa::component::topology::container::dynamic::QuadSetGeometryAlgorithms< DataTypes >inline; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseTopologyObject() overridesofa::core::topolog",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_geometry_algorithms-members.html:22654,update,updateLinks,22654,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_geometry_algorithms-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_geometry_algorithms-members.html,1,['update'],['updateLinks']
Deployability,"gradients, const VecCoord &goals);  Get the distance for a point set using the computed map. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called af",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_distances.html:6566,update,updateAllInputsIfDirty,6566,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_distances.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_distances.html,1,['update'],['updateAllInputsIfDirty']
Deployability,"gram for sofa::core::collision::CollisionAlgorithm:. [legend]. Protected Attributes; Instance instance;  Current collision 'pipeline' instance, allowing to store multiple internal states. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (CollisionAlgorithm, objectmodel::BaseObject);  ; virtual void setInstance (Instance inst);  Allow to store multiple internal states by specifying a different collision pipeline 'instance'. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool remove",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_algorithm.html:1463,pipeline,pipeline,1463,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_algorithm.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_algorithm.html,1,['pipeline'],['pipeline']
Deployability,"gsForceField, DataTypes), SOFA_TEMPLATE(core::behavior::ForceField, DataTypes))sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >; ForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; triangleInfosofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >protected; TriangularBiquadraticSpringsForceField()sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >protected; updateInternal()sofa::core::objectmodel::BaseObject; updateLameCoefficients()sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMatrixsofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >protected; VecCoord typedefsofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseObject() overridesofa::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field-members.html:19683,update,updateLameCoefficients,19683,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field-members.html,1,['update'],['updateLameCoefficients']
Deployability,"gui::qt::ModifyObjectsignal; createDialog(core::objectmodel::Base *node)sofa::gui::qt::ModifyObject; createDialog(core::objectmodel::BaseData *data)sofa::gui::qt::ModifyObject; data_sofa::gui::qt::ModifyObjectprotected; dataModified(QString)sofa::gui::qt::ModifyObjectsignal; dialogClosed(void *)sofa::gui::qt::ModifyObjectsignal; dialogFlags_sofa::gui::qt::ModifyObjectprotected; dialogTabsofa::gui::qt::ModifyObjectprotected; endDataModification(sofa::core::objectmodel::BaseData *data)sofa::gui::qt::ModifyObjectsignal; endObjectModification(sofa::core::objectmodel::Base *object)sofa::gui::qt::ModifyObjectsignal; getFlags()sofa::gui::qt::ModifyObjectinline; hideData(core::objectmodel::BaseData *data)sofa::gui::qt::ModifyObject; Id_sofa::gui::qt::ModifyObjectprotected; item_sofa::gui::qt::ModifyObjectprotected; m_numMessagessofa::gui::qt::ModifyObjectprotected; m_tabssofa::gui::qt::ModifyObjectprotected; messageEditsofa::gui::qt::ModifyObjectprotected; messageTabsofa::gui::qt::ModifyObjectprotected; ModifyObject(void *Id, QTreeWidgetItem *item_clicked, QWidget *parent, const ModifyObjectFlags &dialogFlags, const char *name=nullptr, bool modal=false, Qt::WindowFlags f=Qt::WindowType::Widget)sofa::gui::qt::ModifyObjectexplicit; nodeNameModification(simulation::Node *)sofa::gui::qt::ModifyObjectsignal; objectUpdated()sofa::gui::qt::ModifyObjectsignal; openExternalBrowser(const QUrl &link)sofa::gui::qt::ModifyObjectslot; parseDataModified()sofa::gui::qt::ModifyObjectprotected; readOnlyData(QTableWidget *widget, core::objectmodel::BaseData *data)sofa::gui::qt::ModifyObject; readOnlyData(QWidget *widget, core::objectmodel::BaseData *data)sofa::gui::qt::ModifyObject; reject() overridesofa::gui::qt::ModifyObjectslot; updateConsole()sofa::gui::qt::ModifyObjectprotected; updateDataWidgets()sofa::gui::qt::ModifyObjectsignal; updateTables()sofa::gui::qt::ModifyObjectslot; updateValues()sofa::gui::qt::ModifyObjectvirtualslot; ~ModifyObject() overridesofa::gui::qt::ModifyObjectinline.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_modify_object-members.html:2525,update,updateConsole,2525,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_modify_object-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_modify_object-members.html,8,['update'],"['updateConsole', 'updateDataWidgets', 'updateTables', 'updateValues']"
Deployability,"gy from the source BaseTopology. More...;  ; void updateTopologicalMappingTopDown () override;  Method called at each topological changes propagation which comes from the INPUT topology to adapt the OUTPUT topology : More...;  ; Index getGlobIndex (Index ind) override;  ; Index getFromIndex (Index ind) override;  ;  Public Member Functions inherited from sofa::core::topology::TopologicalMapping;  SOFA_ABSTRACT_CLASS (TopologicalMapping, objectmodel::BaseObject);  ; virtual void setTopologies (In *from, Out *to);  Specify the input and output models. More...;  ; void setPathInputObject (const std::string &o);  Set the path to the objects mapped in the scene graph. More...;  ; void setPathOutputObject (const std::string &o);  ; In * getFrom ();  Accessor to the INPUT topology of the TopologicalMapping : More...;  ; Out * getTo ();  Accessor to the OUTPUT topology of the TopologicalMapping : More...;  ; virtual void updateTopologicalMappingBottomUp ();  Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topology : More...;  ; virtual bool propagateFromInputToOutputModel ();  Return true if this mapping is able to propagate topological changes from input to output model. More...;  ; virtual bool propagateFromOutputToInputModel ();  Return true if this mapping is able to propagate topological changes from output to input model. More...;  ; virtual bool isTheOutputTopologySubdividingTheInputOne ();  return true if the output topology subdivide the input one. (the topology uses the Loc2GlobVec/Glob2LocMap/In2OutMap structs and share the same DOFs) More...;  ; const std::map< Index, Index > & getGlob2LocMap ();  Accessor to index maps : More...;  ; void dumpGlob2LocMap ();  ; void dumpLoc2GlobVec ();  ; virtual bool checkTopologies ();  Method to check the topology mapping maps regarding the upper topology. More...;  ; virtual void getFromIndex (type::vector< Index > &, const Index) const;  ; const std::map< Index, ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_center_point_topological_mapping.html:2021,update,updateTopologicalMappingBottomUp,2021,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_center_point_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_center_point_topological_mapping.html,1,['update'],['updateTopologicalMappingBottomUp']
Deployability,h exists failed. /develope-a-new-fem-plugin; . /feed; ; [SOLVED] Develop a new FEM plugin – SOFA. /page; . /14; ; SOFA - Topic: [SOLVED] Develop a new FEM plugin. /4; ; SOFA - Topic: [SOLVED] Develop a new FEM plugin. SOFA - Topic: [SOLVED] Develop a new FEM plugin. /difference-between-master-and-stable-versions; ; SOFA - Topic: [SOLVED] difference between master and stable versions. /differences-between-animationloops; . /feed; ; [SOLVED] Differences between AnimationLoops – SOFA. SOFA - Topic: [SOLVED] Differences between AnimationLoops. /difficulties-compiling-my-own-sofa-plugins-on-windows; ; SOFA - Topic: [SOLVED] Difficulties compiling my own SOFA plugins on Windows. /difficulty-compiling-applications-tutorials; ; SOFA - Topic: [SOLVED] Difficulty compiling applications/tutorials. /diffussion-for-tetrahedral-mesh; . /feed; ; [SOLVED] Diffusion for tetrahedral mesh – SOFA. SOFA - Topic: [SOLVED] Diffusion for tetrahedral mesh. /discover-the-new-release-v20-12; . /feed; ; Discover the new release v20.12! – SOFA. SOFA - Topic: Discover the new release v20.12!. /discover-the-new-release-v21-06; . /feed; ; Discover the new release v21.06! – SOFA. SOFA - Topic: Discover the new release v21.06!. /dlls-error-when-building-sofa-in-windows10; ; SOFA - Topic: DLLs error when building SOFA in Windows10. /dockerized-sofa-ros-2-sofarosconnector-etc; ; SOFA - Topic: Dockerized Sofa + ROS 2 + SofaROSConnector etc. /document-about-xml-grammar; ; SOFA - Topic: [SOLVED] Document about xml grammar. /documentation-for-attachconstraint; ; SOFA - Topic: [SOLVED] Documentation for attachconstraint?. /documentation-of-sofa-has-been-updated; ; SOFA - Topic: Documentation of SOFA has been updated!. /documents-of-classes-and-functions; ; SOFA - Topic: [SOLVED] Documents of classes and functions. /does-dir-notfound-bad; ; SOFA - Topic: [SOLVED] does DIR-NOTFOUND bad?. /does-sofa-have-intention-of-developing-mobile-application; . /feed; ; [SOLVED] Does Sofa have intention of developing mobi,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:288761,release,release,288761,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['release'],['release']
Deployability,"h this component is associated. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible=false) override;  . Protected Member Functions; void computeNearestPointMaps (const VecCoord &x1, const VecCoord &x2);  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_nearest_point_r_o_i.html:16559,update,update,16559,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_nearest_point_r_o_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_nearest_point_r_o_i.html,1,['update'],['update']
Deployability,"h(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; for_each(VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; fwdConstraintSet(simulation::Node *node, core::behavior::BaseConstraintSet *cSet)sofa::simulation::CollisionVisitorvirtual; getCategoryName() const overridesofa::simulation::CollisionVisitorinlinevirtual; getClassName() const overridesofa::simulation::CollisionDetectionVisitorinlinevirtual; getInfos() constsofa::simulation::Visitorinlinevirtual; getPrimitiveTestCount() constsofa::simulation::CollisionVisitorinline; isThreadSafe() constsofa::simulation::Visitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processCollisionPipeline(simulation::Node *node, core::collision::Pipeline *obj) overridesofa::simulation::CollisionDetectionVisitorvirtual; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::CollisionVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visito",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor-members.html:3035,Pipeline,Pipeline,3035,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor-members.html,1,['Pipeline'],['Pipeline']
Deployability,"h, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; MechanicalState< DataTypes > * getMState ();  ; const MechanicalState< DataTypes > * getMState () const;  . Protected Member Functions; ForceOutput computeForce (const VecDeriv &v, const EdgeInformation &einfo, const typename EdgeInformation::Spring &spring, Coord direction, Real distance);  ; Mat computeLocalJacobian (EdgeInformation &einfo, const Coord &direction, const ForceOutput &force);  ; void computeSpringForce (VecDeriv &f, const VecCoord &x, const VecDeriv &v, EdgeInformation &einfo, typename EdgeInformation::Spring &spring);  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs.html:18429,update,update,18429,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs.html,1,['update'],['update']
Deployability,"h>. Inheritance diagram for sofa::gui::batch::BatchGUI:. [legend]. Protected Attributes; std::ostringstream m_dumpVisitorStream;  ; sofa::simulation::NodeSPtr groot;  ; std::string filename;  . Static Protected Attributes; static signed int nbIter = BatchGUI::DEFAULT_NUMBER_OF_ITERATIONS;  ; static std::string nbIterInp ="""";  ; static bool hideProgressBar { false };  ;  Static Protected Attributes inherited from sofa::gui::common::BaseGUI; static std::string mGuiName = """";  ; static std::string configDirectoryPath = ""."";  ; static std::string screenshotDirectoryPath = ""."";  ; static const char * mProgramName = nullptr;  ; static ArgumentParser * mArgumentParser = nullptr;  . Public Member Functions; bool canBeDefaultGUI () const override;  ; methods each GUI must implement;  BatchGUI ();  ; void setScene (sofa::simulation::NodeSPtr groot, const char *filename="""", bool temporaryFile=false) override;  Register the scene in our GUI. More...;  ; void resetScene ();  ; int mainLoop () override;  ; void redraw () override;  Update the GUI. More...;  ; int closeGUI () override;  Close the GUI. More...;  ; sofa::simulation::Node * currentSimulation () override;  Get the rootNode of the sofa scene. More...;  ;  Public Member Functions inherited from sofa::gui::common::BaseGUI; virtual void configureGUI (sofa::simulation::NodeSPtr groot);  Use a component setting to configure our GUI. More...;  ; void exportGnuplot (sofa::simulation::Node *node, std::string gnuplot_directory="""");  ; virtual void setDumpState (bool);  ; virtual void setLogTime (bool);  ; virtual void setExportState (bool);  ; virtual void setGnuplotPath (const std::string &);  ; virtual void initViewer (BaseViewer *);  ; virtual void setViewerConfiguration (sofa::component::setting::ViewerSetting *);  ; virtual void setViewerResolution (int, int);  ; virtual void setFullScreen ();  ; virtual void centerWindow ();  ; virtual void setBackgroundColor (const sofa::type::RGBAColor &);  ; virtual void setBackgroundI",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1batch_1_1_batch_g_u_i.html:1400,Update,Update,1400,api/master/sofa/html/classsofa_1_1gui_1_1batch_1_1_batch_g_u_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1batch_1_1_batch_g_u_i.html,1,['Update'],['Update']
Deployability,"hader::OglShaderElementprotected; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglFloatVariable, OglVariable< float >)sofa::gl::component::shader::OglFloatVariable; OglVariable< float >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< float >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< float >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglFloatVariable()sofa::gl::component::shader::OglFloatVariableinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< float >inlineprotected; ~ShaderElement() overridesofa::core::visual::ShaderElementinlineprotecte",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_variable-members.html:13435,update,updateVisual,13435,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_variable-members.html,2,['update'],['updateVisual']
Deployability,"haderssofa::gl::component::shader::OglShaderElementprotected; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglFloatAttribute, SOFA_TEMPLATE3(OglAttribute, 1, GL_FLOAT, float))sofa::gl::component::shader::OglFloatAttribute; OglAttribute< 1, GL_FLOAT, float >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE3(OglAttribute, size, type, float), core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglAttribute< 1, GL_FLOAT, float >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglAttribute< 1, GL_FLOAT, float >protected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglAttribute() overridesofa::gl::component::shader::OglAttribute< 1, GL_FLOAT, float >protected; ~OglFloatAttribute()sofa::gl::component::shader::OglFloatAttributeinlinevirtua",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_attribute-members.html:14867,update,updateInternal,14867,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_attribute-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_attribute-members.html,2,['update'],['updateInternal']
Deployability,"hadowShader.h>. Inheritance diagram for sofa::gl::component::shader::OglShadowShader:. [legend]. Static Protected Attributes; static const std::string PATH_TO_SHADOW_VERTEX_SHADERS = ""shaders/hardShadows/shadowMapping.vert"";  ; static const std::string PATH_TO_SHADOW_FRAGMENT_SHADERS = ""shaders/hardShadows/shadowMapping.frag"";  ; static const std::string PATH_TO_SOFT_SHADOW_VERTEX_SHADERS = ""shaders/softShadows/VSM/variance_shadow_mapping.vert"";  ; static const std::string PATH_TO_SOFT_SHADOW_FRAGMENT_SHADERS = ""shaders/softShadows/VSM/variance_shadow_mapping.frag"";  . Public Member Functions;  SOFA_CLASS (OglShadowShader, sofa::gl::component::shader::OglShader);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void initShaders (unsigned int numberOfLights, bool softShadow);  ;  Public Member Functions inherited from sofa::gl::component::shader::OglShader;  SOFA_CLASS2 (OglShader, core::visual::Shader, core::visual::VisualModel);  ; void doInitVisual (const core::visual::VisualParams *) override;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void parse (core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void start () override;  Start the shader. More...;  ; void stop () override;  Stop the shader. More...;  ; bool isActive () override;  ; unsigned int getNumberOfShaders ();  ; unsigned int getCurrentIndex ();  ; void setCurrentIndex (const unsigned int index);  ; void addDefineMacro (const unsigned int index, const std::string &name, const std::string &value);  ; void setTexture (const unsigned int index, const char *name, unsigned short unit);  ; void setInt (const unsigned int index, const char *name, int i);  ; void setInt2 (const unsigned int index, const char *name, int i1, int i2);  ; v",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shadow_shader.html:1467,Update,Update,1467,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shadow_shader.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shadow_shader.html,1,['Update'],['Update']
Deployability,"hanges ();  ; void setNamePrefix (const std::string &s);  ; std::string getName ();  ; virtual bool registerTopology (sofa::core::topology::BaseMeshTopology *_topology, bool printLog=false);  ; void addCallBack (core::topology::TopologyChangeType type, TopologyChangeCallback callback);  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Additional Inherited Members;  Protected Member Functions inherited from sofa::core::topology::TopologyHandler;  TopologyHandler ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOu",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_data_handler.html:14342,update,updated,14342,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_data_handler.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_data_handler.html,1,['update'],['updated']
Deployability,"hanges ();  ; void setNamePrefix (const std::string &s);  ; std::string getName ();  ; virtual bool registerTopology (sofa::core::topology::BaseMeshTopology *_topology, bool printLog=false);  ; void addCallBack (core::topology::TopologyChangeType type, TopologyChangeCallback callback);  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions;  TopologyHandler ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false Mor",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_handler.html:7853,update,updated,7853,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_handler.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_handler.html,1,['update'],['updated']
Deployability,"hanical states to which this component is associated. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible=false) override;  . Protected Member Functions;  AverageCoord ();  ;  ~AverageCoord () override;  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_average_coord.html:14451,update,update,14451,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_average_coord.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_average_coord.html,1,['update'],['update']
Deployability,"hanicalState< DataTypes > * getMState () const;  . Protected Member Functions;  PartialFixedProjectiveConstraint ();  ; virtual ~PartialFixedProjectiveConstraint ();  ; template<class DataDeriv > ; void projectResponseT (DataDeriv &dx, const std::function< void(DataDeriv &, const unsigned int, const VecBool &)> &clear);  ;  Protected Member Functions inherited from sofa::component::constraint::projective::FixedProjectiveConstraint< DataTypes >;  FixedProjectiveConstraint ();  ; virtual ~FixedProjectiveConstraint ();  ; void checkIndices ();  Function check values of given indices. More...;  ; void computeBBoxForIndices (const type::vector< Index > &indices);  ;  Protected Member Functions inherited from sofa::core::behavior::ProjectiveConstraintSet< DataTypes >;  ProjectiveConstraintSet (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ProjectiveConstraintSet () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseProjectiveConstraintSet;  BaseProjectiveConstraintSet ();  ;  ~BaseProjectiveConstraintSet () override;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_partial_fixed_projective_constraint.html:17370,update,update,17370,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_partial_fixed_projective_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_partial_fixed_projective_constraint.html,1,['update'],['update']
Deployability,"hanicalState< DataTypes >, BaseLink::FLAG_STRONGLINK > mstate;  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(FastTetrahedralCorotationalForceField, DataTypes), SOFA_TEMPLATE(BaseLinearElasticityFEMForceField, DataTypes));  ;  SOFA_ATTRIBUTE_DISABLED ("""", ""v24.12"", ""Use d_youngModulus instead"") DeprecatedAndRemoved f_youngModulus;  ;  FastTetrahedralCorotationalForceField ();  ; virtual ~FastTetrahedralCorotationalForceField ();  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void addForce (const sofa::core::MechanicalParams *, DataVecDeriv &dataF, const DataVecCoord &dataX, const DataVecDeriv &dataV) override;  ; void addDForce (const sofa::core::MechanicalParams *, DataVecDeriv &datadF, const DataVecDeriv &datadX) override;  ; SReal getPotentialEnergy (const core::MechanicalParams *, const DataVecCoord &) const override;  ; void addKToMatrix (sofa::linearalgebra::BaseMatrix *m, SReal kFactor, unsigned int &offset) override;  ; void buildStiffnessMatrix (core::behavior::StiffnessMatrix *matrix) override;  ; void buildDampingMatrix (core::behavior::DampingMatrix *matrix) override;  ; void updateTopologyInformation ();  ; void setRotationDecompositionMethod (const RotationDecompositionMethod m);  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ;  Public Member Functions inherited from sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >;  SOFA_CLASS (SOFA_TEMPLATE(BaseLinearElasticityFEMForceField, DataTypes), SOFA_TEMPLATE(core::behavior::ForceField, DataTypes));  ;  BaseLinearElasticityFEMForceField ();  ; void setPoissonRatio (Real val);  ; void setYoungModulus (Real val);  ; Real getYoungModulusInElement (sofa::Size elementId) const;  ; Real getPoissonRatioInElement (sofa::Size elementId) const;  ;  Public Member Functions inherited from sofa::c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_fast_tetrahedral_corotational_force_field.html:6559,update,updateTopologyInformation,6559,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_fast_tetrahedral_corotational_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_fast_tetrahedral_corotational_force_field.html,1,['update'],['updateTopologyInformation']
Deployability,"hanicalload::SphereForceField< DataTypes >::SphereForceField. protected . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::mechanicalload::SphereForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::mechanicalload::SphereForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::SphereForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). overridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the same large matrix. Each ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_sphere_force_field.html:23820,update,update,23820,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_sphere_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_sphere_force_field.html,1,['update'],['update']
Deployability,"hanics::spring::TriangularQuadraticSpringsForceField< DataTypes >::l_topology. protected . second Lame coefficient ; Link to be set to the topology container in the component graph. . ◆ lambda. template<class DataTypes > . Real sofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >::lambda. protected . ◆ m_topology. template<class DataTypes > . sofa::core::topology::BaseMeshTopology* sofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >::m_topology. protected . Pointer to the current topology. . ◆ mu. template<class DataTypes > . Real sofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >::mu. protected . first Lame coefficient . ◆ triangleInfo. template<class DataTypes > . sofa::core::objectmodel::RenamedData<sofa::type::vector<TriangleRestInformation> > sofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >::triangleInfo. protected . ◆ updateMatrix. template<class DataTypes > . bool sofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >::updateMatrix. protected . Constructor details. ◆ TriangularQuadraticSpringsForceField(). template<class DataTypes > . sofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >::TriangularQuadraticSpringsForceField. protected . ◆ ~TriangularQuadraticSpringsForceField(). template<class DataTypes > . sofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >::~TriangularQuadraticSpringsForceField. protectedvirtual . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. Th",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_quadratic_springs_force_field.html:25237,update,updateMatrix,25237,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_quadratic_springs_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_quadratic_springs_force_field.html,1,['update'],['updateMatrix']
Deployability,"har *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  BaseTopologyObject ();  ;  ~BaseTopologyObject () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field,",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_topology_object.html:9244,update,update,9244,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_topology_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_topology_object.html,1,['update'],['update']
Deployability,"har *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  RequiredPlugin ();  ;  ~RequiredPlugin () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field,",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:11486,update,update,11486,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,2,['update'],['update']
Deployability,"har *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData(Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseprotected; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags)sofa::core::objectmodel::Baseprotected; initData0(Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinlineprotected; insertInNode(objectmodel::BaseNode *node) overridesofa::core::collision::Pipelinevirtual; intersectionMethodsofa::core::collision::Pipelineprotected; intersectionMethodssofa::core::collision::Pipelineprotected; isComponentStateValid() constsofa::core::objectmodel::Baseinline; l_contextsofa::core::objectmodel::BaseObjectprotected; l_mastersofa::core::objectmodel::BaseObjectprotected; l_slavessofa::core::objectmodel::BaseObjectprotected; LinkSlaves typedefsofa::core::objectmodel::BaseObject; m_aliasDatasofa::core::objectmodel::Baseprotected; m_aliasLinksofa::core::objectmodel::Baseprotected; m_definitionSourceFileNamesofa::core::objectmodel::Base; m_definitionSourceFilePossofa::core::objectmodel::Base; m_instanciationSourceFileNamesofa::core::objectmodel::Base; m_instanciationSourceFilePossofa::core::objectmodel::Base; m_internalEnginesofa::core::objectmodel::Baseprotected; m_oldAttributessofa::core::objectmodel::Base; m_vecDatasofa::core::objectmodel::Baseprotected; m_vecLinksofa::core::objectmodel::Baseprotected; MapData typedefsofa::core::objectmodel::Base; MapLink typedefsofa::core::objectmodel::Base; MyClass typedefsofa::core::objectmodel::Base; namesofa::core::objectmodel::Base;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html:7871,Pipeline,Pipelineprotected,7871,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,1,['Pipeline'],['Pipelineprotected']
Deployability,"havior::BaseConstraintCorrectionvirtual; setConstraintDForce(SReal *, int, int, bool)sofa::core::behavior::BaseConstraintCorrectionvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseConstraintCorrection, objectmodel::BaseObject)sofa::core::behavior::BaseConstraintCorrection; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseConstraintCorrection() overridesofa::core::behavior::BaseConstraintCorrectionprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_constraint_correction-members.html:12326,update,updateInternal,12326,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_constraint_correction-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_constraint_correction-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"havior::SingleStateAccessor< DataTypes >inlineexplicitprotected; sofa::SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; sofa::core::behavior::SingleStateAccessor::SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< DataTypes >; sofa::core::behavior::StateAccessor::SOFA_ABSTRACT_CLASS(StateAccessor, objectmodel::BaseObject)sofa::core::behavior::StateAccessor; SOFA_CLASS(SOFA_TEMPLATE(AverageCoord, DataTypes), core::DataEngine)sofa::component::engine::analyze::AverageCoord< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::engine::analyze::AverageCoord< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecIndex typedefsofa::component::engine::analyze::AverageCoord< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~AverageCoord() overridesofa::component::engine::analyze::AverageCoord< DataTypes >inlineprotected; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_average_coord-members.html:13634,update,updateAllInputsIfDirty,13634,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_average_coord-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_average_coord-members.html,1,['update'],['updateAllInputsIfDirty']
Deployability,"he PointData . d_vertexMass to update the mass vector when TRIANGLESREMOVED event is fired. Method to update . d_vertexMass when a new Quad is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSADDED event is fired. Method to update . d_vertexMass when a Quad is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSREMOVED event is fired. Method to update . d_vertexMass when a new Tetrahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAADDED event is fired. Method to update . d_vertexMass when a Tetrahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAREMOVED event is fired. Method to update . d_vertexMass when a new Hexahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when HEXAHEDRAADDED event is fired. Method to update . d_vertexMass when a Hexahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when HEXAHEDRAREMOVED event is fired. . ◆ handleEvent(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::handleEvent ; (; sofa::core::objectmodel::Event * ; ). overridevirtual . Handle an event. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ init() [1/5]. void sofa::component::mass::DiagonalMass< Rigid3Types >::init ; (; void ; ). virtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::behavior::SingleStateAccessor< DataTypes >. ◆ init() [2/5]. void sofa::component::mass::DiagonalMass< Rigid2Types >::init ; (; void ; ). virtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::behavior::SingleStateAccessor< Da",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html:46451,update,update,46451,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,1,['update'],['update']
Deployability,"he beginning of the timestep).; If the ForceField can be represented as a matrix, this method computes $ df += kFactor K dx + bFactor B dx $; This method must be implemented by the component, and is usually called by the generic PairInteractionForceField::addDForce() method.; To support old components that implement the deprecated addForce method without scalar coefficients, it defaults to using a temporaty vector to compute $ K dx $ and then manually scaling all values by kFactor. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::FrameSpringForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; f1, . DataVecDeriv & ; f2, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2, . const DataVecDeriv & ; v1, . const DataVecDeriv & ; v2 . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes $ f += B v + K x $; This method must be implemented by the component, and is usually called by the generic ForceField::addForce() method. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ addSpring() [1/2]. template<class DataTypes > . void sofa::component::solidmechanics::spring::FrameSpringForceField< DataTypes >::addSpring ; (; const Spring & ; s). ◆ addSpring() [2/2]. template<class DataTypes > . void sofa::component::solidmechanics::spring::FrameSpringForceField< DataTypes >::addSpring ; (; int ; m1, . int ; m2, . Real ; softKst, . Real ; softKsr, . Real ; kd . ). ◆ addSpringDForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::FrameSpringForceField< DataTypes >::addSpringDForce ; (; VecDeriv & ; df1, . const VecDeriv & ; dx1, . VecDeriv & ; df2, . const VecDeriv & ; dx2, . int ;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_frame_spring_force_field.html:25899,update,update,25899,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_frame_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_frame_spring_force_field.html,1,['update'],['update']
Deployability,"he beginning of the timestep).; If the ForceField can be represented as a matrix, this method computes $ df += kFactor K dx + bFactor B dx $; This method must be implemented by the component, and is usually called by the generic PairInteractionForceField::addDForce() method.; To support old components that implement the deprecated addForce method without scalar coefficients, it defaults to using a temporaty vector to compute $ K dx $ and then manually scaling all values by kFactor. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; f1, . DataVecDeriv & ; f2, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2, . const DataVecDeriv & ; v1, . const DataVecDeriv & ; v2 . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes $ f += B v + K x $; This method must be implemented by the component, and is usually called by the generic ForceField::addForce() method. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ addSpring() [1/2]. template<class DataTypes > . void sofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >::addSpring ; (; const Spring & ; s). ◆ addSpring() [2/2]. template<class DataTypes > . void sofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >::addSpring ; (; sofa::Index ; m1, . sofa::Index ; m2, . Real ; softKst, . Real ; hardKst, . Real ; softKsr, . Real ; hardKsr, . Real ; blocKsr, . Real ; axmin, . Real ; axmax, . Real ; aymin, . Real ; aymax, . Real ; azmin, . Real ; azmax, . Real ; kd . ). ◆ addSpringDForce(). template<class DataTypes > . void sofa::component::solidmechani",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_joint_spring_force_field.html:28337,update,update,28337,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_joint_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_joint_spring_force_field.html,1,['update'],['update']
Deployability,"he derivative should be directly derived from the computations done by addForce. Any forces neglected in addDForce will be integrated explicitly (i.e. using its value at the beginning of the timestep).; If the ForceField can be represented as a matrix, this method computes $ df += K dx $; This method must be implemented by the component, and is usually called by the generic MixedInteractionForceField::addDForce() method. ; Implements sofa::core::behavior::MixedInteractionForceField< TDataTypes1, TDataTypes2 >. ◆ addForce(). template<class DataTypes1 , class DataTypes2 > . void sofa::component::mechanicalload::InteractionEllipsoidForceField< DataTypes1, DataTypes2 >::addForce ; (; const sofa::core::MechanicalParams * ; mparams, . DataVecDeriv1 & ; f1, . DataVecDeriv2 & ; f2, . const DataVecCoord1 & ; x1, . const DataVecCoord2 & ; x2, . const DataVecDeriv1 & ; v1, . const DataVecDeriv2 & ; v2 . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes $ f += B v + K x $; This method must be implemented by the component, and is usually called by the generic ForceField::addForce() method. ; Implements sofa::core::behavior::MixedInteractionForceField< TDataTypes1, TDataTypes2 >. ◆ addForce2(). template<class DataTypes1 , class DataTypes2 > . void sofa::component::mechanicalload::InteractionEllipsoidForceField< DataTypes1, DataTypes2 >::addForce2 ; (; DataVecDeriv1 & ; f1, . DataVecDeriv2 & ; f2, . const DataVecCoord1 & ; p1, . const DataVecCoord2 & ; p2, . const DataVecDeriv1 & ; v1, . const DataVecDeriv2 & ; v2 . ). virtual . ◆ buildDampingMatrix(). template<typename TDataTypes1 , typename TDataTypes2 > . void sofa::component::mechanicalload::InteractionEllipsoidForceField< TDataTypes1, TDataTypes2 >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; ). finalvirtual . Reimplemented ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_interaction_ellipsoid_force_field.html:25788,update,update,25788,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_interaction_ellipsoid_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_interaction_ellipsoid_force_field.html,1,['update'],['update']
Deployability,"he map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  BarycentricPenalityContact (CollisionModel1 *model1, CollisionModel2 *model2, Intersection *intersectionMethod);  ;  ~BarycentricPenalityContact () override;  ; void setInteractionTags (MechanicalState1 *mstate1, MechanicalState2 *mstate2);  ;  Protected Member Functions inherited from sofa::core::collision::Contact;  Contact ();  ;  ~Contact () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_barycentric_penality_contact.html:11764,update,update,11764,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_barycentric_penality_contact.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_barycentric_penality_contact.html,1,['update'],['update']
Deployability,"he simulation handle a directed acyclic graph? More...;  ;  Public Member Functions inherited from sofa::simulation::Simulation;  Simulation ();  ; virtual ~Simulation ();  ;  Simulation (const Simulation &n)=delete;  ; Simulation & operator= (const Simulation &n)=delete;  ; virtual void print (Node *root)=delete;  Print all object in the graph. More...;  ; virtual void init (Node *root)=delete;  Initialize the objects. More...;  ; virtual void initNode (Node *node)=delete;  Init a node without changing the context of the simulation. More...;  ; virtual void animate (Node *root, SReal dt=0.0)=delete;  Execute one timestep. If dt is 0, the dt parameter in the graph will be used. More...;  ; virtual void updateVisual (Node *root)=delete;  Update the Visual Models: triggers the Mappings. More...;  ; virtual void reset (Node *root)=delete;  Reset to initial state. More...;  ; virtual void initTextures (Node *root)=delete;  Initialize the textures. More...;  ; virtual void updateContext (Node *root)=delete;  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; virtual void updateVisualContext (Node *root)=delete;  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; virtual void computeBBox (Node *root, SReal *minBBox, SReal *maxBBox, bool init=true)=delete;  ; virtual void computeTotalBBox (Node *root, SReal *minBBox, SReal *maxBBox)=delete;  ; virtual void draw (sofa::core::visual::VisualParams *vparams, Node *root)=delete;  Render the scene. More...;  ; virtual void exportOBJ (Node *root, const char *filename, bool exportMTL=true)=delete;  Export a scene to an OBJ 3D Scene. More...;  ; virtual void exportXML (Node *root, const char *fileName=nullptr)=delete;  Print all object in the graph in XML format. More...;  ; virtual void exportGraph (Node *root, const char *filename=nullptr)=delete;  Print all objects in the graph in the given file (format is given by the filename extension) More...;  ;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html:1953,update,updateContext,1953,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html,3,"['Update', 'update']","['Update', 'updateContext']"
Deployability,"he vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  DefaultVisualManagerLoop ();  ;  ~DefaultVisualManagerLoop () override;  ;  Protected Member Functions inherited from sofa::core::visual::VisualLoop;  ~VisualLoop () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_default_visual_manager_loop.html:13852,update,update,13852,api/master/sofa/html/classsofa_1_1simulation_1_1_default_visual_manager_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_default_visual_manager_loop.html,2,['update'],['update']
Deployability,"hedralFEMForceFieldAndMass< DataTypes >. ◆ init(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >.; Reimplemented in sofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedralFEMForceFieldAndMass< DataTypes >, and sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >. ◆ initLarge(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >::initLarge ; (; const int ; i). protected . ◆ initPolar(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >::initPolar ; (; const int ; i). protected . ◆ integrateStiffness(). template<class DataTypes > . HexahedralFEMForceField< DataTypes >::Mat33 sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >::integrateStiffness ; (; int ; signx0, . int ; signy0, . int ; signz0, . int ; signx1, . int ; signy1, . int ; signz1, . const Real ; u, . const Real ; v, . const Real ; w, . const Mat33 & ; J_1 . ). protected . ◆ reinit(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >::reinit. overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject.; Reimplemented in sofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedralFEMForceFieldAndMass< DataTypes >, and sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >. ◆ setMethod(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedralFEMFo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field.html:32642,integrat,integrateStiffness,32642,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field.html,1,['integrat'],['integrateStiffness']
Deployability,"helper::WriteOnlyAccessor< Data< T >> () const;  ; bool read (const std::string &value);  ; void printValue (std::ostream &os) const;  ; std::string getValueString () const;  ; std::string getDefaultValueString () const;  ; std::string getValueTypeString () const;  ; const sofa::defaulttype::AbstractTypeInfo * getValueTypeInfo () const;  ; const void * getValueVoidPtr () const;  ; void * beginEditVoidPtr ();  ; void endEditVoidPtr ();  ; const std::string & getHelp () const;  ; void setHelp (const std::string &val);  ; const std::string & getGroup () const;  ; void setGroup (const std::string &val);  ; const std::string & getWidget () const;  ; void setWidget (const char *val);  ; void setFlag (BaseData::DataFlagsEnum flag, bool b);  ; bool getFlag (BaseData::DataFlagsEnum flag) const;  ; bool isDisplayed () const;  ; bool isReadOnly () const;  ; bool isPersistent () const;  ; bool isAutoLink () const;  ; bool isRequired () const;  ; void setDisplayed (bool b);  ; void setReadOnly (bool b);  ; void setPersistent (bool b);  ; void setAutoLink (bool b);  ; void setRequired (bool b);  ; std::string getLinkPath () const;  ; bool canBeLinked () const;  ; Base * getOwner () const;  ; void setOwner (Base *o);  ; BaseData * getData () const;  ; const std::string & getName () const;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  ; bool isSet () const;  ; void unset ();  ; void forceSet ();  ; int getCounter () const;  ; bool setParent (BaseData *parent, const std::string &path=std::string());  ; bool setParent (const std::string &path);  ; bool validParent (const BaseData *parent);  ; BaseData * getParent () const;  ; void update ();  ; bool copyValueFrom (const BaseData *data);  ; bool updateValueFromLink (const BaseData *data);  ; T * beginEdit ();  ; T * beginWriteOnly ();  ; void endEdit ();  ; void setValue (const T &value);  ; const T & getValue () const;  ; void operator= (const T &value);  ; bool copyValueFrom (const Data< T > *data);  .",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data.html:2341,update,update,2341,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data.html,2,['update'],"['update', 'updateValueFromLink']"
Deployability,"hildren () const override;  Get children nodes. More...;  ; BaseContext * getRootContext () const override;  Get the root context of the graph. More...;  ; Node * setDebug (bool);  ; bool getDebug () const;  ; void printComponents ();  ; const BaseContext * getContext () const override;  Get this node context. More...;  ; BaseContext * getContext () override;  Get this node context. More...;  ; virtual void updateContext ();  Update the whole context values, based on parent and local ContextObjects. More...;  ; virtual void updateSimulationContext ();  Update the simulation context values(gravity, time...), based on parent and local ContextObjects. More...;  ; virtual void initVisualContext ();  Called during initialization to correctly propagate the visual context to the children. More...;  ; void propagateEvent (const sofa::core::ExecParams *params, sofa::core::objectmodel::Event *event) override;  Propagate an event. More...;  ; virtual void updateVisualContext ();  Update the visual context values, based on parent and local ContextObjects. More...;  ; virtual void initialize ();  Must be called after each graph modification. Do not call it directly, apply an InitVisitor instead. More...;  ; virtual void setDefaultVisualContextValue ();  Called after initialization to set the default value of the visual context. More...;  ; virtual Node * findCommonParent (simulation::Node *node2)=0;  return the smallest common parent between this and node2 (returns nullptr if separated sub-graphes) More...;  ; void setSleeping (bool val) override;  override context setSleeping to add notification. More...;  ; virtual void addListener (MutationListener *obj);  ; virtual void removeListener (MutationListener *obj);  ; High-level interface; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void init (const sofa::core::ExecParams *params);  Ini",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:6267,update,updateVisualContext,6267,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,3,"['Update', 'update']","['Update', 'updateVisualContext']"
Deployability,"his Data from the value of its parent. ; Copy the value from another Data.; Note that this is a one-time copy and not a permanent link (otherwise see setParent()) Returnstrue if the copy was successful. . ◆ decodeTypeName(). std::string sofa::core::objectmodel::BaseData::decodeTypeName ; (; const std::type_info & ; t). static . Helper method to decode the type name to a more readable form if possible. . ◆ endEditVoidPtr(). void sofa::core::objectmodel::BaseData::endEditVoidPtr ; (; ). Must be called after beginEditVoidPtr(), after you are finished modifying this Data. ; End edit current value as a void pointer (use getValueTypeInfo to find how to access it) . ◆ forceSet(). void sofa::core::objectmodel::BaseData::forceSet ; (; ). inline . Reset the isSet flag to true, to indicate that the current value has been modified. . ◆ genericCopyValueFrom(). bool sofa::core::objectmodel::BaseData::genericCopyValueFrom ; (; const BaseData * ; parent). protected . Try to update this Data from the value of its parent in ""fast mode"";. ; Update this Data from the value of its parent. . ◆ getCounter(). int sofa::core::objectmodel::BaseData::getCounter ; (; ); const. inline . Return the number of changes since creation This can be used to efficiently detect changes . ◆ getData(). BaseData* sofa::core::objectmodel::BaseData::getData ; (; ); const. inline . This method is needed by DDGNode. . ◆ getDefaultValueString(). virtual std::string sofa::core::objectmodel::BaseData::getDefaultValueString ; (; ); const. pure virtual . Get a string representation of the default value held in this Data. ; Implemented in sofa::core::objectmodel::Data< T >, sofa::core::objectmodel::Data< sofa::type::BoundingBox >, sofa::core::objectmodel::Data< sofa::core::objectmodel::TagSet >, sofa::core::objectmodel::Data< SeqTetrahedra >, sofa::core::objectmodel::Data< sofa::type::Vec< 2, int > >, sofa::core::objectmodel::Data< sofa::type::RGBAColor >, sofa::core::objectmodel::Data< std::map< std::string, sofa::t",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:12807,update,update,12807,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,1,['update'],['update']
Deployability,"his node. ; Implements sofa::core::objectmodel::BaseNode. ◆ initVisualContext(). void sofa::simulation::graph::DAGNode::initVisualContext ; (; ). overridevirtual . Called during initialization to correctly propagate the visual context to the children. ; Reimplemented from sofa::simulation::Node. ◆ moveChild(). void sofa::simulation::graph::DAGNode::moveChild ; (; BaseNode::SPtr ; node). overridevirtual . Move a node in this from another node. ; Implements sofa::simulation::Node. ◆ precomputeTraversalOrder(). void sofa::simulation::graph::DAGNode::precomputeTraversalOrder ; (; const sofa::core::ExecParams * ; params). overridevirtual . compute the traversal order from this Node ; Reimplemented from sofa::simulation::Node. ◆ setDirtyDescendancy(). void sofa::simulation::graph::DAGNode::setDirtyDescendancy ; (; ). protected . bottom-up traversal removing descendancy . ◆ SOFA_CLASS(). sofa::simulation::graph::DAGNode::SOFA_CLASS ; (; DAGNode ; , . simulation::Node ;  . ). ◆ updateContext(). void sofa::simulation::graph::DAGNode::updateContext ; (; ). overridevirtual . Update the whole context values, based on parent and local ContextObjects. ; Reimplemented from sofa::simulation::Node. ◆ updateDescendancy(). void sofa::simulation::graph::DAGNode::updateDescendancy ; (; ). protected . traversal updating the descendancy . ◆ updateSimulationContext(). void sofa::simulation::graph::DAGNode::updateSimulationContext ; (; ). overridevirtual . Update the simulation context values(gravity, time...), based on parent and local ContextObjects. ; Reimplemented from sofa::simulation::Node. Enum details. ◆ VisitedStatus. enum sofa::simulation::graph::DAGNode::VisitedStatus. protected . traversal flags . EnumeratorNOT_VISITED ; VISITED ; PRUNED . Related details. ◆ GetDownObjectsVisitor. friend class GetDownObjectsVisitor. friend . ◆ GetUpObjectsVisitor. friend class GetUpObjectsVisitor. friend . sofasimulationgraphDAGNode; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:40818,update,updateContext,40818,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,12,"['Update', 'update']","['Update', 'updateContext', 'updateDescendancy', 'updateSimulationContext']"
Deployability,"his object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  CompositingVisualLoop ();  ;  ~CompositingVisualLoop () override;  ;  Protected Member Functions inherited from sofa::simulation::DefaultVisualManagerLoop;  DefaultVisualManagerLoop ();  ;  ~DefaultVisualManagerLoop () override;  ;  Protected Member Functions inherited from sofa::core::visual::VisualLoop;  ~VisualLoop () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_compositing_visual_loop.html:14387,update,update,14387,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_compositing_visual_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_compositing_visual_loop.html,1,['update'],['update']
Deployability,"his object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; MechanicalState< DataTypes > * getMState ();  ; const MechanicalState< DataTypes > * getMState () const;  . Protected Member Functions;  PlaneForceField ();  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initDa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_plane_force_field.html:17932,update,update,17932,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_plane_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_plane_force_field.html,1,['update'],['update']
Deployability,"howFPS(). void sofa::gui::qt::RealGUI::showFPS ; (; double ; ). overridevirtual . Force the displayed FPS value (if any) ; Reimplemented from sofa::gui::common::BaseGUI. ◆ showhideElements. void sofa::gui::qt::RealGUI::showhideElements ; (; ). virtualslot . ◆ showMouseManager. void sofa::gui::qt::RealGUI::showMouseManager ; (; ). virtualslot . ◆ showPluginManager. void sofa::gui::qt::RealGUI::showPluginManager ; (; ). virtualslot . ◆ showVideoRecorderManager. void sofa::gui::qt::RealGUI::showVideoRecorderManager ; (; ). virtualslot . ◆ showWindowDataGraph. void sofa::gui::qt::RealGUI::showWindowDataGraph ; (; ). virtualslot . ◆ sleep(). void sofa::gui::qt::RealGUI::sleep ; (; float ; seconds, . float ; init_time . ). inlineprotected . ◆ startDumpVisitor(). void sofa::gui::qt::RealGUI::startDumpVisitor ; (; ). protected . ◆ step. void sofa::gui::qt::RealGUI::step ; (; ). virtualslot . ◆ stepMainLoop(). void sofa::gui::qt::RealGUI::stepMainLoop ; (; ). overridevirtual . Reimplemented from sofa::gui::common::BaseGUI. ◆ stopDumpVisitor(). void sofa::gui::qt::RealGUI::stopDumpVisitor ; (; ). protected . ◆ toolsDockMoved. void sofa::gui::qt::RealGUI::toolsDockMoved ; (; ). virtualslot . ◆ unloadScene(). void sofa::gui::qt::RealGUI::unloadScene ; (; bool ; _withViewer = true). virtual . ◆ update. void sofa::gui::qt::RealGUI::update ; (; ). virtualslot . ◆ updateBackgroundColour. void sofa::gui::qt::RealGUI::updateBackgroundColour ; (; ). virtualslot . ◆ updateBackgroundImage. void sofa::gui::qt::RealGUI::updateBackgroundImage ; (; ). virtualslot . ◆ updateDtEditState. void sofa::gui::qt::RealGUI::updateDtEditState ; (; ). virtualslot . ◆ updateViewerList. void sofa::gui::qt::RealGUI::updateViewerList ; (; ). protectedvirtualslot . Update the viewerMap and create viewer if we haven't yet one (the first of the list) TODO: find a better way to propagate the argument when we construct the viewer . sofaguiqtRealGUI; Generated on Mon Nov 11 2024 03:23:43 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_real_g_u_i.html:24272,update,update,24272,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_real_g_u_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_real_g_u_i.html,21,"['Update', 'update']","['Update', 'update', 'updateBackgroundColour', 'updateBackgroundImage', 'updateDtEditState', 'updateViewerList']"
Deployability,"i-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::sceneutility::AddDataRepository Class Reference . #include <AddResourceRepository.h>; Add a new path to DataRepository. ; More... Inheritance diagram for sofa::component::sceneutility::AddDataRepository:. [legend]; Detailed Description; Add a new path to DataRepository. . Public Member Functions;  SOFA_CLASS (AddDataRepository, BaseAddResourceRepository);  ;  Public Member Functions inherited from sofa::component::sceneutility::BaseAddResourceRepository;  SOFA_ABSTRACT_CLASS (BaseAddResourceRepository, sofa::core::objectmodel::BaseObject);  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; bool updateRepositoryPath ();  ; void cleanup () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMas",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_add_data_repository.html:994,update,updateRepositoryPath,994,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_add_data_repository.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_add_data_repository.html,1,['update'],['updateRepositoryPath']
Deployability,"i::qt::viewer::qt::QtViewer Class Reference . #include <QtViewer.h>. Inheritance diagram for sofa::gui::qt::viewer::qt::QtViewer:. [legend]. Public Attributes; bool _mouseInteractorTranslationMode;  ; bool _mouseInteractorRotationMode;  ; int _translationMode;  ; Quat< SReal > _mouseInteractorCurrentQuat;  ; Vec3 _mouseInteractorAbsolutePosition;  ; Trackball _mouseInteractorTrackball;  . Static Public Attributes; static const std::string VIEW_FILE_EXTENSION = ""view"";  TODO: standardize .view file parameters. More...;  ; static Quat< SReal > _mouseInteractorNewQuat;  ; static bool _mouseTrans = false;  ; static bool _mouseRotate = false;  . Public Member Functions;  QtViewer (QWidget *parent, const char *name="""");  ;  ~QtViewer () override;  ; QWidget * getQWidget () override;  ; bool ready () override;  ; void wait () override;  ask the viewer to resume its activity More...;  ; sofa::simulation::Node * getScene () override;  ; int getWidth () override;  ; int getHeight () override;  ; void UpdateOBJ (void);  ; void moveRayPickInteractor (int eventX, int eventY) override;  RayCasting PickHandler. More...;  ; void ApplyMouseInteractorTransformation (int x, int y);  ; QString helpString () const override;  ; void screenshot (const std::string &filename, int compression_level=-1) override;  ;  Public Member Functions inherited from sofa::gui::qt::viewer::CustomPolicySofaViewer< VisualModelPolicyType >;  CustomPolicySofaViewer ();  ;  ~CustomPolicySofaViewer () override;  ;  Public Member Functions inherited from sofa::gui::qt::viewer::SofaViewer;  SofaViewer ();  ;  ~SofaViewer () override;  ; virtual void removeViewerTab (QTabWidget *);  Optional QTabWidget GUI for a concreate viewer. More...;  ; virtual void configureViewerTab (QTabWidget *);  Optional QTabWidget GUI for a concreate viewer. More...;  ; void captureEvent () override;  ; bool isControlPressed () const;  ; virtual void configure (sofa::component::setting::ViewerSetting *viewerConf) override;  ; const st",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1viewer_1_1qt_1_1_qt_viewer.html:1343,Update,UpdateOBJ,1343,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1viewer_1_1qt_1_1_qt_viewer.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1viewer_1_1qt_1_1_qt_viewer.html,1,['Update'],['UpdateOBJ']
Deployability,"iVecDerivId v)sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >virtual; setSystemSolution(core::MultiVecDerivId v)sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >; setSystemSolution(core::MultiVecDerivId v)sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseMatrixLinearSystem, core::objectmodel::BaseObject)sofa::core::behavior::BaseMatrixLinearSystem; SOFA_CLASS(SOFA_TEMPLATE2(PrecomputedMatrixSystem, TMatrix, TVector), SOFA_TEMPLATE2(linearsystem::TypedMatrixLinearSystem, TMatrix, TVector))sofa::component::linearsolver::preconditioner::PrecomputedMatrixSystem< TMatrix, TVector >; sofa::component::linearsystem::TypedMatrixLinearSystem::SOFA_CLASS(SOFA_TEMPLATE2(TypedMatrixLinearSystem, TMatrix, TVector), sofa::core::behavior::BaseMatrixLinearSystem)sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >; sofa::core::behavior::BaseMatrixLinearSystem::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; Vector typedefsofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_precomputed_matrix_system-members.html:15081,update,updateInternal,15081,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_precomputed_matrix_system-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_precomputed_matrix_system-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"iagram for sofa::gui::common::TopologyOperation:. [legend]. Protected Attributes; int topologicalOperation;  ; double scale;  ; bool volumicMesh;  ; bool firstClick;  ;  Protected Attributes inherited from sofa::gui::common::Operation; PickHandler * pickHandle;  ; sofa::component::setting::MouseButtonSetting::SPtr mbsetting;  ; MOUSE_BUTTON button;  . Public Member Functions;  TopologyOperation ();  ;  ~TopologyOperation () override;  ; void start () override;  ; void execution () override;  This function is called each time the mouse is clicked. More...;  ; void end () override;  ; void endOperation () override;  This function is called after each mouse click. More...;  ; void setTopologicalOperation (int m);  ; void setScale (double s);  ; void setVolumicMesh (bool v);  ; virtual int getTopologicalOperation () const;  ; virtual double getScale () const;  ; virtual bool getVolumicMesh () const;  ;  Public Member Functions inherited from sofa::gui::common::Operation;  Operation (sofa::component::setting::MouseButtonSetting::SPtr s=nullptr);  ; virtual ~Operation ();  ; virtual void configure (PickHandler *picker, MOUSE_BUTTON b);  ; virtual void configure (PickHandler *picker, sofa::component::setting::MouseButtonSetting *s);  ; virtual void wait ();  This function is called when shift key is released. More...;  ; virtual void setSetting (sofa::component::setting::MouseButtonSetting *s);  ; virtual std::string defaultPerformerType ();  ; virtual sofa::gui::component::performer::InteractionPerformer * createPerformer ();  ; virtual void configurePerformer (sofa::gui::component::performer::InteractionPerformer *p);  ; MOUSE_BUTTON getMouseButton () const;  ; std::string getId ();  . Static Public Member Functions; static std::string getDescription ();  ;  Static Public Member Functions inherited from sofa::gui::common::Operation; static MOUSE_BUTTON GetMouseId (unsigned int i);  . Additional Inherited Members;  Public Attributes inherited from sofa::gui::common::Opera",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_topology_operation.html:1660,release,released,1660,api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_topology_operation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_topology_operation.html,2,['release'],['released']
Deployability,"ial Scale of the object. . ◆ d_scaleTex. Data< TexCoord > sofa::component::visual::VisualModelImpl::d_scaleTex. Scale of the texture. . ◆ d_srgbTexturing. Data< bool > sofa::component::visual::VisualModelImpl::d_srgbTexturing. ◆ d_texturename. sofa::core::objectmodel::DataFileName sofa::component::visual::VisualModelImpl::d_texturename. ◆ d_translation. Data< Vec3Real > sofa::component::visual::VisualModelImpl::d_translation. Initial Translation of the object. . ◆ d_translationTex. Data< TexCoord > sofa::component::visual::VisualModelImpl::d_translationTex. Translation of the texture. . ◆ d_triangles. core::topology::TriangleData< VecVisualTriangle > sofa::component::visual::VisualModelImpl::d_triangles. triangles of the model . ◆ d_updateNormals. Data<bool> sofa::component::visual::VisualModelImpl::d_updateNormals. True if normals should be updated at each iteration. . ◆ d_updateTangents. Data<bool> sofa::component::visual::VisualModelImpl::d_updateTangents. True if tangents should be updated at each iteration. . ◆ d_useNormals. Data<bool> sofa::component::visual::VisualModelImpl::d_useNormals. True if normals should be read from file. . ◆ d_vbitangents. core::topology::PointData< VecCoord > sofa::component::visual::VisualModelImpl::d_vbitangents. tangents for normal mapping . ◆ d_vertices2. Data< VecCoord > sofa::component::visual::VisualModelImpl::d_vertices2. vertices of the model (only if vertices have multiple normals/texcoords, otherwise positions are used) . ◆ d_vertNormIdx. Data< type::vector<visual_index_type> > sofa::component::visual::VisualModelImpl::d_vertNormIdx. Similarly this vector store which input normal is used for each vertex If it is empty then each vertex correspond to one normal . ◆ d_vertPosIdx. Data< type::vector<visual_index_type> > sofa::component::visual::VisualModelImpl::d_vertPosIdx. If vertices have multiple normals/texcoords, then we need to separate them This vector store which input position is used for each vertex If it is empty ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl.html:30497,update,updated,30497,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl.html,1,['update'],['updated']
Deployability,"ianConstraint, DataTypes), SOFA_TEMPLATE(sofa::core::behavior::Constraint, DataTypes))sofa::component::constraint::lagrangian::model::UniformLagrangianConstraint< DataTypes >; sofa::core::behavior::Constraint::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(Constraint, DataTypes), BaseConstraint, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::Constraint< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeLambda(const ConstraintParams *cParams, MultiVecDerivId res, const sofa::linearalgebra::BaseVector *lambda) overridesofa::core::behavior::Constraint< DataTypes >virtual; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; UniformLagrangianConstraint()sofa::component::constraint::lagrangian::model::UniformLagrangianConstraint< DataTypes >protected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecConstArea typedefsofa::core::behavior::BaseConstraint; VecConstCoord typedefsofa::core::behavior::BaseConstraint; VecConstDeriv typedefsofa::core::behavior::BaseConstraint; VecConstraintBlockInfo typedefsofa::core::behavior::BaseConstraint; VecCoord typedefsofa::component::constraint::lagrangian::model::UniformLagrangianConstraint< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::constraint::lagrangian::model::UniformLagrangianConstraint< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecPersistentID typedefsofa::core::behavior::BaseConstraint; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_uniform_lagrangian_constraint-members.html:16370,update,updateInternal,16370,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_uniform_lagrangian_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_uniform_lagrangian_constraint-members.html,1,['update'],['updateInternal']
Deployability,"ianConstraint< sofa::defaulttype::StdVectorTypes >, sofa::component::constraint::lagrangian::model::SlidingLagrangianConstraint< DataTypes >, sofa::component::constraint::lagrangian::model::BilateralLagrangianConstraint< DataTypes >, sofa::component::constraint::lagrangian::model::BilateralLagrangianConstraint< sofa::defaulttype::StdVectorTypes >, sofa::component::constraint::lagrangian::model::BilateralLagrangianConstraint< DataTypes >, and sofa::component::constraint::lagrangian::model::BilateralLagrangianConstraint< sofa::defaulttype::StdVectorTypes >. ◆ buildConstraintMatrix() [2/2]. template<class DataTypes > . void sofa::core::behavior::PairInteractionConstraint< DataTypes >::buildConstraintMatrix ; (; const ConstraintParams * ; cParams, . MultiMatrixDerivId ; cId, . unsigned int & ; cIndex . ). overridevirtual . Construct the Jacobian Matrix; Parameters. cIdis the result constraint sparse matrix Id ; cIndexis the index of the next constraint equation: when building the constraint matrix, you have to use this index, and then update it ; cParamsdefines the state vectors to use for positions and velocities. Also defines the order of the constraint (POS, VEL, ACC) . Implements sofa::core::behavior::BaseConstraintSet. ◆ canCreate(). template<class TDataTypes > . template<class T > . static bool sofa::core::behavior::PairInteractionConstraint< TDataTypes >::canCreate ; (; T *& ; obj, . objectmodel::BaseContext * ; context, . objectmodel::BaseObjectDescription * ; arg . ). inlinestatic . Pre-construction check method called by ObjectFactory. Check that DataTypes matches the MechanicalState. . ◆ create(). template<class TDataTypes > . template<class T > . static T::SPtr sofa::core::behavior::PairInteractionConstraint< TDataTypes >::create ; (; T * ; p0, . core::objectmodel::BaseContext * ; context, . core::objectmodel::BaseObjectDescription * ; arg . ). inlinestatic . Construction method called by ObjectFactory. . ◆ getConstraintViolation() [1/4]. template<class TData",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_constraint.html:23703,update,update,23703,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_constraint.html,1,['update'],['update']
Deployability,"iangle is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TRIANGLESREMOVED event is fired. Method to update . d_vertexMass when a new Quad is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSADDED event is fired. Method to update . d_vertexMass when a Quad is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSREMOVED event is fired. Method to update . d_vertexMass when a new Tetrahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAADDED event is fired. Method to update . d_vertexMass when a Tetrahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAREMOVED event is fired. Method to update . d_vertexMass when a new Hexahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when HEXAHEDRAADDED event is fired. Method to update . d_vertexMass when a Hexahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when HEXAHEDRAREMOVED event is fired. . ◆ handleEvent(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::handleEvent ; (; sofa::core::objectmodel::Event * ; ). overridevirtual . Handle an event. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ init() [1/5]. void sofa::component::mass::DiagonalMass< Rigid3Types >::init ; (; void ; ). virtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::behavior::SingleStateAccessor< DataTypes >. ◆ init() [2/5]. void sofa::component::mass::DiagonalMass< Rigid2Types >::init ; (; void ; ). virtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented fro",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html:46382,update,update,46382,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,1,['update'],['update']
Deployability,"iangle typedefsofa::core::topology::BaseMeshTopology; TetrahedraAroundVertex typedefsofa::core::topology::BaseMeshTopology; Tetrahedron typedefsofa::core::topology::Topology; TetrahedronID typedefsofa::core::topology::Topology; TetraID typedefsofa::core::topology::Topology; Topology()sofa::core::topology::Topologyinlineprotected; TopologyContainer()sofa::core::topology::TopologyContainerinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; unlinkTopologyHandlerToData(core::topology::TopologyHandler *topologyHandler, sofa::geometry::ElementType elementType) overridesofa::component::topology::container::dynamic::PointSetTopologyContainervirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseTopologyObject() overridesofa::core::topology::BaseTopologyObjectinlineprotected; ~PointSetTopologyContainer() override=defaultsofa::component::topology::container::dynamic::PointSetTopologyContainerprotected; ~Topology()sofa::core::topology::Topologyinlineprotectedvirtual; ~TopologyContainer() overridesofa::core::topology::TopologyContainerprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_container-members.html:25954,update,updateInternal,25954,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_container-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_container-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"iangleID ind_tb, PointID &ind1, PointID &ind2)sofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >; TriangleID typedefsofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >; triangleNumericalIntegrationsofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >protected; TrianglesAroundEdge typedefsofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >; TrianglesAroundVertex typedefsofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >; TriangleSetGeometryAlgorithms()sofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >inlineprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >; Vec3d typedefsofa::component::topology::container::dynamic::EdgeSetGeometryAlgorithms< DataTypes >; VecCoord typedefsofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; writeMSHfile(const char *filename) constsofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >inline; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~B",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_geometry_algorithms-members.html:32981,update,updateLinks,32981,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_geometry_algorithms-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_geometry_algorithms-members.html,1,['update'],['updateLinks']
Deployability,"iangularBendingSprings< DataTypes >::applyEdgeCreation ; (; Index ; edgeIndex, . EdgeSpring & ; ei, . const core::topology::BaseMeshTopology::Edge & ; , . const sofa::type::vector< Index > & ; , . const sofa::type::vector< SReal > & ;  . ). protected . Method to initialize See alsoEdgeSpring when a new edge is created. Will be set as creation callback in the EdgeData . d_edgeSprings . ◆ applyPointDestruction(). template<class DataTypes > . void sofa::component::solidmechanics::spring::FastTriangularBendingSprings< DataTypes >::applyPointDestruction ; (; const sofa::type::vector< Index > & ; pointIndices). protected . Method to update. ; See alsod_edgeSprings when a point is removed. Will be set as callback when POINTSREMOVED event is fired . ◆ applyPointRenumbering(). template<class DataTypes > . void sofa::component::solidmechanics::spring::FastTriangularBendingSprings< DataTypes >::applyPointRenumbering ; (; const sofa::type::vector< Index > & ; pointToRenumber). protected . Method to update. ; See alsod_edgeSprings when points are renumbered. Will be set as callback when POINTSRENUMBERING event is fired . ◆ applyTriangleCreation(). template<class DataTypes > . void sofa::component::solidmechanics::spring::FastTriangularBendingSprings< DataTypes >::applyTriangleCreation ; (; const sofa::type::vector< Index > & ; triangleAdded, . const sofa::type::vector< core::topology::BaseMeshTopology::Triangle > & ; , . const sofa::type::vector< sofa::type::vector< Index > > & ; , . const sofa::type::vector< sofa::type::vector< SReal > > & ;  . ). protected . Method to update See alsod_edgeSprings when a new triangle is created. Will be set as callback in the EdgeData . d_edgeSprings when TRIANGLESADDED event is fired to create a new spring between new created triangles. . ◆ applyTriangleDestruction(). template<class DataTypes > . void sofa::component::solidmechanics::spring::FastTriangularBendingSprings< DataTypes >::applyTriangleDestruction ; (; const sofa::type::vector< Inde",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs.html:25862,update,update,25862,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs.html,1,['update'],['update']
Deployability,"ias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  BaseAddResourceRepository ();  ;  ~BaseAddResourceRepository () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_base_add_resource_repository.html:11398,update,update,11398,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_base_add_resource_repository.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_base_add_resource_repository.html,1,['update'],['update']
Deployability,"iationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(ConstraintAttachButtonSetting, MouseButtonSetting)sofa::gui::component::ConstraintAttachButtonSetting; sofa::component::setting::MouseButtonSetting::SOFA_CLASS(MouseButtonSetting, core::objectmodel::ConfigurationSetting)sofa::component::setting::MouseButtonSetting; sofa::core::objectmodel::ConfigurationSetting::SOFA_CLASS(ConfigurationSetting, BaseObject)sofa::core::objectmodel::ConfigurationSetting; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ConfigurationSetting() overridesofa::core::objectmodel::Configuratio",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_constraint_attach_button_setting-members.html:10074,Configurat,ConfigurationSetting,10074,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_constraint_attach_button_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_constraint_attach_button_setting-members.html,1,['Configurat'],['ConfigurationSetting']
Deployability,"iations. Keep in mind that the file are still monitored. More...;  . Function details. ◆ addFile() [1/2]. int sofa::helper::system::FileMonitor::addFile ; (; const std::string & ; directoryname, . const std::string & ; filename, . FileEventListener * ; listener . ). static . add a new path and file to monitor and a listener to be triggered in case of change. returns >= 0 if the file was successfully added returns < 0 in case of error. . ◆ addFile() [2/2]. int sofa::helper::system::FileMonitor::addFile ; (; const std::string & ; filename, . FileEventListener * ; listener . ). static . add a new filepath to monitor and a listener to be triggered in case of change. returns >= 0 if the file was successfully added returns < 0 in case of error. . ◆ removeFileListener(). void sofa::helper::system::FileMonitor::removeFileListener ; (; const std::string & ; filename, . FileEventListener * ; listener . ). static . remove the provided listener for a given file If the listener is not existing, do nothing If the listener is nullptr, do nothing If the listener is associated with one or more file...remove all the associations. Keep in mind that the file are still monitored. . ◆ removeListener(). void sofa::helper::system::FileMonitor::removeListener ; (; FileEventListener * ; listener). static . remove the provided listener. If the listener is not existing, do nothing If the listener is nullptr, do nothing If the listener is associated with one or more file...remove all the associations. Keep in mind that the file are still monitored. . ◆ updates(). int sofa::helper::system::FileMonitor::updates ; (; int ; timeout = 1). static . check if the file have changed, colalesc the similar events and notify the listener. timeout is the number of seconds to block the calling process. Can be 0 (in this case it return immediately if there is no event. return -1 in case of error return >= 0 otherwise. . sofahelpersystemFileMonitor; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html:3317,update,updates,3317,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html,4,['update'],['updates']
Deployability,"ibuteList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(MeshSplittingEngine, DataTypes), Inherited)sofa::component::engine::select::MeshSplittingEngine< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; Tetrahedron typedefsofa::component::engine::select::MeshSplittingEngine< DataTypes >; tetrahedronIndicessofa::component::engine::select::MeshSplittingEngine< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::engine::select::MeshSplittingEngine< DataTypes >; triangleIndicessofa::component::engine::select::MeshSplittingEngine< DataTypes >; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::engine::select::MeshSplittingEngine< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~MeshSplittingEngine() overridesofa::component::engine::select::MeshSplittingEngine< Dat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_splitting_engine-members.html:14819,update,update,14819,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_splitting_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_splitting_engine-members.html,1,['update'],['update']
Deployability,"ibutes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(DilateEngine, DataTypes), core::DataEngine);  ;  DilateEngine ();  ;  ~DilateEngine () override;  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_dilate_engine.html:2755,update,update,2755,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_dilate_engine.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_dilate_engine.html,1,['update'],['update']
Deployability,"ic Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::component::setting::MouseButtonSetting;  MouseButtonSetting ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::ConfigurationSetting;  ConfigurationSetting ();  Default constructor. More...;  ;  ~ConfigurationSetting () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_constraint_attach_button_setting.html:12400,update,update,12400,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_constraint_attach_button_setting.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_constraint_attach_button_setting.html,3,"['Configurat', 'update']","['ConfigurationSetting', 'update']"
Deployability,"ic Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::simulation::CollisionAnimationLoop;  CollisionAnimationLoop ();  ;  ~CollisionAnimationLoop () override;  ; virtual void preCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called before the actual collision computation. More...;  ; virtual void internalCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function performing the actual collision computation. More...;  ; virtual void postCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called after the actual collision computation. More...;  ; virtual void computeCollision (const core::ExecParams *params=core::execparams::defaultInstance());  Activate collision pipeline. More...;  ; virtual void integrate (const core::ExecParams *params, SReal dt);  Activate OdeSolvers. More...;  ; const Solvers & getSolverSequence ();  ;  Protected Member Functions inherited from sofa::core::behavior::BaseAnimationLoop;  BaseAnimationLoop ();  ;  ~BaseAnimationLoop () override;  ; void storeResetState () override;  Save the initial state for later uses in reset() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_multi_tag_animation_loop.html:13166,pipeline,pipeline,13166,api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_multi_tag_animation_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_multi_tag_animation_loop.html,1,['pipeline'],['pipeline']
Deployability,"ic const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  MeshBoundaryROI ();  ;  ~MeshBoundaryROI () override;  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_boundary_r_o_i.html:14487,update,update,14487,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_boundary_r_o_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_boundary_r_o_i.html,1,['update'],['update']
Deployability,"ic stiffness matrix of the mapping in the provided matrix object. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; void clear (sofa::Size reserve=0);  ; void setRepartition (sofa::Size value);  ; void setRepartition (sofa::type::vector< sofa::Size > values);  ; void parse (core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void getGlobalToLocalCoords (OutCoord &result, const InCoord &xfrom, const OutCoord &xto);  ; void updateOmega (typename InDeriv::Rot &omega, const OutDeriv &out, const OutCoord &rotatedpoint);  ; void getGlobalToLocalCoords (OutCoord &result, const InCoord &xFrom, const OutCoord &xTo);  ; void updateOmega (typename InDeriv::Rot &omega, const OutDeriv &out, const OutCoord &rotatedpoint);  ; void updateK (const core::MechanicalParams *, core::ConstMultiVecDerivId);  ; const linearalgebra::BaseMatrix * getK ();  ; void updateK (const core::MechanicalParams *mparams, core::ConstMultiVecDerivId childForceId);  ; const linearalgebra::BaseMatrix * getK ();  ;  Public Member Functions inherited from sofa::core::Mapping< TIn, TOut >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE2(Mapping, TIn, TOut), BaseMapping);  ; virtual void setModels (State< In > *from, State< Out > *to);  Specify the input and output models. More...;  ; bool setFrom (BaseState *from) override;  If the type is compatible set the input model and return true, otherwise do nothing and return false. More...;  ; bool setTo (BaseState *to) override;  If the type is compatible set the output model and return true, otherwise do nothing and return false. More...;  ; void setPathInputObject (const std::string &o);  Set the path to the objects mapped in the scene graph. More...;  ; void setPathOutputObject (const std::string &o);  ; State< In > * getFromModel ();  Return the pointer to",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping.html:7711,update,updateOmega,7711,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping.html,4,['update'],"['updateK', 'updateOmega']"
Deployability,"ic. /cimg-error-by-adding-flexible-plugin; ; SOFA - Topic: [SOLVED] CImg error by adding flexible plugin. /citing-sofa-framework; ; SOFA - Topic: Citing SOFA Framework. /clang-error-while-compiling-sofa; ; SOFA - Topic: [SOLVED] Clang error while compiling Sofa. /clarification-of-mapping-gui; ; SOFA - Topic: Clarification of mapping GUI. /clarify-feasibility-in-sofa-dry-fabric-handling; . /feed; ; [SOLVED] Clarify feasibility in SOFA – dry fabric handling – SOFA. SOFA - Topic: [SOLVED] Clarify feasibility in SOFA – dry fabric handling. /cloning_to_make_pull_request; ; SOFA - Topic: [SOLVED] cloning_to_make_pull_request. /cloth-on-a-table-with-collision-and-friction; ; SOFA - Topic: Cloth on a table with Collision and friction. /cmake-based-installer-for-sofa-framework; . /feed; ; CMake-based installer for SOFA framework – SOFA. /page; . /2; ; SOFA - Topic: CMake-based installer for SOFA framework. /5; ; SOFA - Topic: CMake-based installer for SOFA framework. SOFA - Topic: CMake-based installer for SOFA framework. /cmake-cant-find-boost-library; ; SOFA - Topic: CMake can't find Boost Library. /cmake-could-not-find-cpacknsis; ; SOFA - Topic: [SOLVED] CMake could not find CPackNSIS. /cmake-error; . /feed; ; [SOLVED] cmake error : cannot find Eigen3 – SOFA. SOFA - Topic: [SOLVED] cmake error : cannot find Eigen3. /cmake-error-eigen3_dir-not-found; . /feed; ; [SOLVED] CMake Error, ""Eigen3_DIR"" not found – SOFA. SOFA - Topic: [SOLVED] CMake Error, ""Eigen3_DIR"" not found. /cmake-error-in-building-sofa; . /feed; ; [SOLVED] Cmake error in building SOFA : cannot find Eigen3 – SOFA. /page; . /3; ; SOFA - Topic: [SOLVED] Cmake error in building SOFA : cannot find Eigen3. /4; ; SOFA - Topic: [SOLVED] Cmake error in building SOFA : cannot find Eigen3. SOFA - Topic: [SOLVED] Cmake error in building SOFA : cannot find Eigen3. /cmake-error-install-files-given-directory; ; SOFA - Topic: [SOLVED] CMake error install FILES given directory. /cmake-errors-while-configuring; ; SOFA - Topi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:274390,install,installer,274390,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['install'],['installer']
Deployability,"ic: [SOLVED] NewOmniDriver: GNode cannot access protected member. SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. /new-online-support-sessions; ; SOFA - Topic: New: online support sessions!. /new-release-v16-08; . /feed; ; New Release v16.08! – SOFA. SOFA - Topic: New Release v16.08!. /new-release-v16-12; ; SOFA - Topic: New Release v16.12!. /new-release-v17-12; ; SOFA - Topic: New Release v17.12!. /new-release-v18-06; ; SOFA - Topic: New release v18.06!. /new-sofa-technical-member-amc; ; SOFA - Topic: New SOFA technical member: AMC!. /new-to-sofa-here-are-my-thoughts; ; SOFA - Topic: New to sofa. Here are my thoughts. /new-training-session-scheduled; ; SOFA - Topic: New training session scheduled!. /new-tutorials-for-sofa; ; SOFA - Topic: New tutorials for SOFA. /new-version-of-blender-sofa; . /page; . /4; ; SOFA - Topic: New version of Blender SOFA. SOFA - Topic: New version of Blender SOFA. /new-video-tutorial-howto-configure-and-install-on-linux; ; SOFA - Topic: New video tutorial: HowTo configure and install on Linux. /new-website; . /page; . /10; ; SOFA - Topic: New website !. /11; ; SOFA - Topic: New website !. /5; ; SOFA - Topic: New website !. SOFA - Topic: New website !. /no-boost-item-list-after-cmake-configure; ; SOFA - Topic: [SOLVED] No boost item list after cmake configure. /no-collision-between-the-collision-models; . /embed; ; SOFA - Topic: [SOLVED] No collision between the collision models. SOFA - Topic: [SOLVED] No collision between the collision models. /no-createscene-nor-createsceneandcontroller-module-method-found-error; ; SOFA - Topic: [SOLVED] no ""createScene"" nor ""createSceneAndController"" module method found error. /no-module-instaled-python; ; SOFA - Topic: [SOLVED] No module instaled (Python). /no-module-named-stlib; ; SOFA - Topic: “No module named ‘stlib'”. /non-linear-implicit-solver; ; SOFA - Topic: Non linear implicit solver. /non-linear-simulations-voxels-in-sofa; . /feed; ; Non-linear simulations & Voxe",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:355400,install,install-on-linux,355400,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['install'],"['install', 'install-on-linux']"
Deployability,"ic::HexahedralFEMForceField< DataTypes >. ◆ getPotentialEnergy() [3/4]. template<class DataTypes > . SReal sofa::core::behavior::Mass< DataTypes >::getPotentialEnergy. override . $ e = M g x $; This method retrieves the positions vector and call the internal getPotentialEnergy(const MechanicalParams*, const VecCoord&) method implemented by the component. . ◆ getPotentialEnergy() [4/4]. template<class DataTypes > . SReal sofa::core::behavior::Mass< DataTypes >::getPotentialEnergy. override . ◆ init(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >.; Reimplemented in sofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedralFEMForceFieldAndMass< DataTypes >. ◆ integrateVolume(). template<class DataTypes > . HexahedralFEMForceFieldAndMass< DataTypes >::Real sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >::integrateVolume ; (; int ; signx, . int ; signy, . int ; signz, . Real ; l0, . Real ; l1, . Real ; l2 . ). protected . ◆ isDiagonal(). template<class DataTypes > . bool sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >::isDiagonal ; (; ); const. inlineoverridevirtual . Implements sofa::core::behavior::BaseMass. ◆ reinit(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >::reinit. overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >.; Reimplemented in sofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedralFEMForceFieldAndMass< DataTypes >",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field_and_mass.html:40500,integrat,integrateVolume,40500,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field_and_mass.html,1,['integrat'],['integrateVolume']
Deployability,"ic::TriangularFEMForceField< DataTypes >::method. Forcefield intern parameters. . ◆ showFracturableTriangles. template<class DataTypes > . sofa::core::objectmodel::RenamedData<bool> sofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >::showFracturableTriangles. ◆ showStressValue. template<class DataTypes > . sofa::core::objectmodel::RenamedData<bool> sofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >::showStressValue. ◆ showStressVector. template<class DataTypes > . sofa::core::objectmodel::RenamedData<bool> sofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >::showStressVector. ◆ triangleInfo. template<class DataTypes > . sofa::core::objectmodel::RenamedData<sofa::type::vector<TriangleInformation> > sofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >::triangleInfo. ◆ updateMatrix. template<class DataTypes > . bool sofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >::updateMatrix. protected . ◆ vertexInfo. template<class DataTypes > . sofa::core::objectmodel::RenamedData<sofa::type::vector<VertexInformation> > sofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >::vertexInfo. Constructor details. ◆ TriangularFEMForceField(). template<class DataTypes > . sofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >::TriangularFEMForceField. protected . ForceField API. . ◆ ~TriangularFEMForceField(). template<class DataTypes > . sofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >::~TriangularFEMForceField. overrideprotected . Function details. ◆ accumulateForceLarge(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >::accumulateForceLarge ; (; VecCoord & ; f, . const VecCoord & ; p . ). protected . ◆ accumulateForceSmall(). template<class DataTypes > . void sofa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field.html:32073,update,updateMatrix,32073,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field.html,1,['update'],['updateMatrix']
Deployability,"icalForceField< DataTypes >::ConicalForceField. protected . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::mechanicalload::ConicalForceField< DataTypes >::addDForce ; (; const sofa::core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::mechanicalload::ConicalForceField< DataTypes >::addForce ; (; const sofa::core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ buildDampingMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::ConicalForceField< DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; ). finalvirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ buildStiffnessMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::ConicalForceField< DataTypes >::buildStiffnessMatrix ; (; core::behavior::StiffnessMatrix * ; matrix). overridevirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ draw(). template<class DataTypes > . void sofa::component::mechanicalload::ConicalForceField< DataTypes >::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_conical_force_field.html:21293,update,update,21293,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_conical_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_conical_force_field.html,1,['update'],['update']
Deployability,"icalParams *mparams, MultiVecDerivId inForce, ConstMultiVecDerivId outForce)=0;  ; virtual void applyDJT (const MechanicalParams *mparams, MultiVecDerivId inForce, ConstMultiVecDerivId outForce)=0;  Accumulate a change of parent force due to the change of the mapping, for a constant child force. Null for linear mappings. More...;  ; virtual void applyJT (const ConstraintParams *mparams, MultiMatrixDerivId inConst, ConstMultiMatrixDerivId outConst)=0;  Propagate constraint Jacobians upward. More...;  ; virtual void computeAccFromMapping (const MechanicalParams *mparams, MultiVecDerivId outAcc, ConstMultiVecDerivId inVel, ConstMultiVecDerivId inAcc)=0;  ; virtual bool areForcesMapped () const;  ; virtual bool areConstraintsMapped () const;  ; virtual bool areMassesMapped () const;  ; virtual bool areMatricesMapped () const;  ; virtual void setForcesMapped (bool b);  ; virtual void setConstraintsMapped (bool b);  ; virtual void setMassesMapped (bool b);  ; virtual void setMatricesMapped (bool b);  ; virtual void setNonMechanical ();  ; API for global matrix assembly (used in the Compliant plugin); virtual const type::vector< sofa::linearalgebra::BaseMatrix * > * getJs ();  ; virtual void updateK (const MechanicalParams *, ConstMultiVecDerivId);  ; virtual const linearalgebra::BaseMatrix * getK ();  ; virtual void buildGeometricStiffnessMatrix (sofa::core::GeometricStiffnessMatrix *matrices);  Assembles the geometric stiffness matrix of the mapping in the provided matrix object. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (cons",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_base_mapping.html:6102,update,updateK,6102,api/master/sofa/html/classsofa_1_1core_1_1_base_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_base_mapping.html,1,['update'],['updateK']
Deployability,"id sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::applyEdgeCreation ; (; Index ; edgeIndex, . EdgeInformation & ; ei, . const core::topology::BaseMeshTopology::Edge & ; , . const sofa::type::vector< Index > & ; , . const sofa::type::vector< SReal > & ;  . ). Method to initialize See alsoEdgeInformation when a new edge is created. Will be set as creation callback in the EdgeData . d_edgeInfo . ◆ applyPointDestruction(). template<class DataTypes > . void sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::applyPointDestruction ; (; const sofa::type::vector< Index > & ; pointIndices). Method to update. ; See alsod_edgeInfo when a point is removed. Will be set as callback when POINTSREMOVED event is fired . ◆ applyPointRenumbering(). template<class DataTypes > . void sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::applyPointRenumbering ; (; const sofa::type::vector< Index > & ; pointToRenumber). Method to update. ; See alsod_edgeInfo when points are renumbered. Will be set as callback when POINTSRENUMBERING event is fired . ◆ applyQuadCreation(). template<class DataTypes > . void sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::applyQuadCreation ; (; const sofa::type::vector< Index > & ; quadAdded, . const sofa::type::vector< core::topology::BaseMeshTopology::Quad > & ; , . const sofa::type::vector< sofa::type::vector< Index > > & ; , . const sofa::type::vector< sofa::type::vector< SReal > > & ;  . ). Method to update See alsod_edgeInfo when a new quad is created. Will be set as callback in the EdgeData . d_edgeInfo when QUADSADDED event is fired to create a new spring between new created triangles. . ◆ applyQuadDestruction(). template<class DataTypes > . void sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::applyQuadDestruction ; (; const sofa::type::vector< Index > & ; quadRemoved). Method to update See alsod_edgeInfo when a ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs.html:24948,update,update,24948,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs.html,1,['update'],['update']
Deployability,"id sofa::core::objectmodel::RenamedData< T >::setName ; (; const std::string & ; name). inline . ◆ setOriginalData(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setOriginalData ; (; Data< T > * ; data). inline . ◆ setOwner(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setOwner ; (; Base * ; o). inline . ◆ setParent() [1/2]. template<class T = void*> . bool sofa::core::objectmodel::RenamedData< T >::setParent ; (; BaseData * ; parent, . const std::string & ; path = std::string() . ). inline . ◆ setParent() [2/2]. template<class T = void*> . bool sofa::core::objectmodel::RenamedData< T >::setParent ; (; const std::string & ; path). inline . ◆ setPersistent(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setPersistent ; (; bool ; b). inline . ◆ setReadOnly(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setReadOnly ; (; bool ; b). inline . ◆ setRequired(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setRequired ; (; bool ; b). inline . ◆ setValue(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setValue ; (; const T & ; value). inline . ◆ setWidget(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::setWidget ; (; const char * ; val). inline . ◆ unset(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::unset ; (; ). inline . ◆ update(). template<class T = void*> . void sofa::core::objectmodel::RenamedData< T >::update ; (; ). inline . ◆ updateValueFromLink(). template<class T = void*> . bool sofa::core::objectmodel::RenamedData< T >::updateValueFromLink ; (; const BaseData * ; data). inline . ◆ validParent(). template<class T = void*> . bool sofa::core::objectmodel::RenamedData< T >::validParent ; (; const BaseData * ; parent). inline . sofacoreobjectmodelRenamedData; Generated on Mon Nov 11 2024 03:16:00 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data.html:10644,update,update,10644,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_renamed_data.html,4,['update'],"['update', 'updateValueFromLink']"
Deployability,"id(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ UpdateInternalDataVisitor(). sofa::simulation::UpdateInternalDataVisitor::UpdateInternalDataVisitor ; (; const core::ExecParams * ; params). inline . Function details. ◆ getCategoryName(). const char* sofa::simulation::UpdateInternalDataVisitor::getCategoryName ; (; ); const. inlineoverridevirtual . Return a category name for this action. Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ getClassName(). const char* sofa::simulation::UpdateInternalDataVisitor::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ isThreadSafe(). bool sofa::simulation::UpdateInternalDataVisitor::isThreadSafe ; (; ); const. inlineoverridevirtual . Specify whether this action can be parallelized. ; Reimplemented from sofa::simulation::Visitor. ◆ processNodeTopDown(). Visitor::Result sofa::simulation::UpdateInternalDataVisitor::processNodeTopDown ;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html:4917,Update,UpdateInternalDataVisitor,4917,api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html,1,['Update'],['UpdateInternalDataVisitor']
Deployability,"id, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ instance. Instance sofa::core::collision::CollisionAlgorithm::instance. protected . Current collision 'pipeline' instance, allowing to store multiple internal states. . Constructor details. ◆ CollisionAlgorithm(). sofa::core::collision::CollisionAlgorithm::CollisionAlgorithm ; (; ). inlineprotected . Function details. ◆ changeInstance(). virtual void sofa::core::collision::CollisionAlgorithm::changeInstance ; (; Instance ; ). protectedpure virtual . Implemented in sofa::core::collision::Detection, sofa::core::collision::ContactManager, sofa::core::collision::CollisionGroupManager, and sofa::component::collision::response::contact::CollisionResponse. ◆ setInstance(). virtual void sofa::core::collision::CollisionAlgorithm::setInstance ; (; Instance ; inst). inlinevirtual . Allow to store multiple internal states by specifying a different collision pipeline 'instance'. . ◆ SOFA_ABSTRACT_CLASS(). sofa::core::collision::CollisionAlgorithm::SOFA_ABSTRACT_CLASS ; (; CollisionAlgorithm ; , . objectmodel::BaseObject ;  . ). sofacorecollisionCollisionAlgorithm; Generated on Mon Nov 11 2024 03:15:46 for SOFA API by 1.9",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_algorithm.html:13233,pipeline,pipeline,13233,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_algorithm.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_algorithm.html,1,['pipeline'],['pipeline']
Deployability,"id;  Name of element (corresponding with the shader) More...;  ; Data< unsigned int > indexShader;  Name of element (corresponding with the shader) More...;  ; std::set< OglShader * > shaders;  Shader to use the element with. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::gl::component::shader::OglAttribute< 1, GL_UNSIGNED_INT, unsigned int >;  OglAttribute ();  ;  ~OglAttribute () override;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; voi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_u_int_attribute.html:16126,update,update,16126,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_u_int_attribute.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_u_int_attribute.html,2,['update'],['update']
Deployability,"idContactMapper< TCollisionModel, DataTypes >; mappingsofa::component::collision::response::mapper::RigidContactMapper< TCollisionModel, DataTypes >; MCollisionModel typedefsofa::component::collision::response::mapper::RigidContactMapper< TCollisionModel, DataTypes >; MMapping typedefsofa::component::collision::response::mapper::RigidContactMapper< TCollisionModel, DataTypes >; MMechanicalObject typedefsofa::component::collision::response::mapper::RigidContactMapper< TCollisionModel, DataTypes >; MMechanicalState typedefsofa::component::collision::response::mapper::RigidContactMapper< TCollisionModel, DataTypes >; modelsofa::component::collision::response::mapper::RigidContactMapper< TCollisionModel, DataTypes >; nbpsofa::component::collision::response::mapper::RigidContactMapper< TCollisionModel, DataTypes >; outmodelsofa::component::collision::response::mapper::RigidContactMapper< TCollisionModel, DataTypes >; Real typedefsofa::component::collision::response::mapper::RigidContactMapper< TCollisionModel, DataTypes >; resize(Size size)sofa::component::collision::response::mapper::RigidContactMapper< TCollisionModel, DataTypes >inlinevirtual; RigidContactMapper()sofa::component::collision::response::mapper::RigidContactMapper< TCollisionModel, DataTypes >protected; setCollisionModel(MCollisionModel *model)sofa::component::collision::response::mapper::RigidContactMapper< TCollisionModel, DataTypes >inline; update()sofa::component::collision::response::mapper::RigidContactMapper< TCollisionModel, DataTypes >inlinevirtual; updateXfree()sofa::component::collision::response::mapper::RigidContactMapper< TCollisionModel, DataTypes >inlinevirtual; VecCoord typedefsofa::component::collision::response::mapper::RigidContactMapper< TCollisionModel, DataTypes >; VecDeriv typedefsofa::component::collision::response::mapper::RigidContactMapper< TCollisionModel, DataTypes >; ~BaseContactMapper()sofa::component::collision::response::mapper::BaseContactMapper< DataTypes >inlinevirtual.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_rigid_contact_mapper-members.html:3750,update,update,3750,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_rigid_contact_mapper-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_rigid_contact_mapper-members.html,2,['update'],"['update', 'updateXfree']"
Deployability,"idTopology::setYmin ; (; SReal ; val). inline . ◆ setZmax(). void sofa::component::topology::container::grid::SparseGridTopology::setZmax ; (; SReal ; val). inline . ◆ setZmin(). void sofa::component::topology::container::grid::SparseGridTopology::setZmin ; (; SReal ; val). inline . ◆ SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER() [1/3]. sofa::component::topology::container::grid::SparseGridTopology::SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER ; (; BoundingBox ; , . sofa::type::BoundingBox ;  . ). ◆ SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER() [2/3]. sofa::component::topology::container::grid::SparseGridTopology::SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER ; (; Vec3i ; , . sofa::type::Vec3i ;  . ). ◆ SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER() [3/3]. sofa::component::topology::container::grid::SparseGridTopology::SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER ; (; Vector3 ; , . sofa::type::Vec3 ;  . ). ◆ SOFA_CLASS(). sofa::component::topology::container::grid::SparseGridTopology::SOFA_CLASS ; (; SparseGridTopology ; , . MeshTopology ;  . ). ◆ updateEdges(). void sofa::component::topology::container::grid::SparseGridTopology::updateEdges ; (; ). protectedvirtual . ◆ updateMesh(). void sofa::component::topology::container::grid::SparseGridTopology::updateMesh ; (; ). ◆ updateQuads(). void sofa::component::topology::container::grid::SparseGridTopology::updateQuads ; (; ). protectedvirtual . ◆ voxelizeTriangleMesh(). void sofa::component::topology::container::grid::SparseGridTopology::voxelizeTriangleMesh ; (; helper::io::Mesh * ; mesh, . sofa::core::sptr< RegularGridTopology > ; regularGrid, . type::vector< Type > & ; regularGridTypes . ); const. protected . Enum details. ◆ anonymous enum. anonymous enum. EnumeratorUP ; DOWN ; RIGHT ; LEFT ; BEFORE ; BEHIND ; NUM_CONNECTED_NODES . ◆ Type. enum sofa::component::topology::container::grid::SparseGridTopology::Type. EnumeratorOUTSIDE ; INSIDE ; BOUNDARY . sofacomponenttopologycontainergridSparseGridTopology; Generated on Mon Nov 11 2024 03:10:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_topology.html:69061,update,updateEdges,69061,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_topology.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_topology.html,6,['update'],"['updateEdges', 'updateMesh', 'updateQuads']"
Deployability,"idget *parent, const char *name, MyData *d)sofa::gui::qt::DataWidget; dirtysofa::gui::qt::DataWidgetprotected; fillFromData()sofa::gui::qt::DataWidgetslot; getBaseData() constsofa::gui::qt::DataWidgetinline; getBaseData()sofa::gui::qt::DataWidgetinline; getData()sofa::gui::qt::TDataWidget< VectorMaterial >inline; getData() constsofa::gui::qt::TDataWidget< VectorMaterial >inline; isDirty()sofa::gui::qt::DataWidgetinline; isFilled()sofa::gui::qt::DataWidgetinline; m_isFilledsofa::gui::qt::DataWidgetprotected; m_toFillsofa::gui::qt::DataWidgetprotected; MyData typedefsofa::gui::qt::DataWidget; MyTData typedefsofa::gui::qt::TDataWidget< VectorMaterial >; numColumnWidget()sofa::gui::qt::materialdatawidget_h::VectorMaterialDataWidgetinlinevirtual; readFromData()sofa::gui::qt::materialdatawidget_h::VectorMaterialDataWidgetprotectedvirtual; setData(MyTData *d)sofa::gui::qt::TDataWidget< VectorMaterial >inlinevirtual; setData(MyData *d)sofa::gui::qt::TDataWidget< VectorMaterial >; sofa::gui::qt::DataWidget::setData(MyData *d)sofa::gui::qt::DataWidgetvirtual; setDataReadOnly(bool readOnly)sofa::gui::qt::materialdatawidget_h::VectorMaterialDataWidgetvirtual; setFilled(bool value)sofa::gui::qt::DataWidgetinline; setWidgetDirty(bool b=true)sofa::gui::qt::DataWidgetslot; sizeWidget()sofa::gui::qt::DataWidgetinlinevirtual; Tdatasofa::gui::qt::TDataWidget< VectorMaterial >protected; TDataWidget(QWidget *parent, const char *name, MyTData *d)sofa::gui::qt::TDataWidget< VectorMaterial >inline; updateDataValue()sofa::gui::qt::DataWidgetslot; updateVisibility()sofa::gui::qt::DataWidget; updateWidgetValue()sofa::gui::qt::DataWidgetslot; VectorMaterialDataWidget(QWidget *parent, const char *name, Data< type::vector< Material > > *data)sofa::gui::qt::materialdatawidget_h::VectorMaterialDataWidgetinline; WidgetDirty(bool)sofa::gui::qt::DataWidgetsignal; writeToData()sofa::gui::qt::materialdatawidget_h::VectorMaterialDataWidgetprotectedvirtual; ~DataWidget() overridesofa::gui::qt::DataWidget.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1materialdatawidget__h_1_1_vector_material_data_widget-members.html:2960,update,updateDataValue,2960,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1materialdatawidget__h_1_1_vector_material_data_widget-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1materialdatawidget__h_1_1_vector_material_data_widget-members.html,6,['update'],"['updateDataValue', 'updateVisibility', 'updateWidgetValue']"
Deployability,"idmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >, sofa::component::mapping::nonlinear::DistanceMapping< TIn, TOut >, sofa::component::engine::transform::SmoothMeshEngine< DataTypes >, sofa::component::constraint::projective::FixedProjectiveConstraint< DataTypes >, sofa::component::collision::geometry::PointCollisionModel< TDataTypes >, sofa::component::collision::geometry::PointCollisionModel< sofa::defaulttype::StdVectorTypes >, sofa::component::collision::geometry::LineCollisionModel< TDataTypes >, sofa::component::engine::select::BaseROI< DataTypes >, and sofa::component::mechanicalload::PlaneForceField< DataTypes >. ◆ create(). template<class T > . static T::SPtr sofa::core::objectmodel::BaseObject::create ; (; T * ; , . BaseContext * ; context, . BaseObjectDescription * ; arg . ). inlinestatic . Construction method called by ObjectFactory. . ◆ doUpdateInternal(). void sofa::core::objectmodel::BaseObject::doUpdateInternal ; (; ). protectedvirtual . Implementation of the internal update. ; Reimplemented in sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, and sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >. ◆ draw(). virtual void sofa::core::objectmodel::BaseObject::draw ; (; const core::visual::VisualParams * ; ). inlinevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented in sofa::component::constraint::projective::FixedPlaneProjectiveConstraint< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::UniformMass< DataTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::visual::VisualTransform, sofa::gui::component::performer::BaseMouseInter",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:20369,update,update,20369,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,1,['update'],['update']
Deployability,"id addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  MappedObject ();  ; virtual ~MappedObject ();  ;  Protected Member Functions inherited from sofa::core::State< DataTypes >;  State ();  ;  ~State () override;  ;  Protected Member Functions inherited from sofa::core::BaseState;  BaseState ();  ;  ~BaseState () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=tru",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mapped_object.html:14075,update,update,14075,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mapped_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mapped_object.html,1,['update'],['update']
Deployability,"id draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; virtual void addCollisionPairs (const sofa::type::vector< std::pair< core::CollisionModel *, core::CollisionModel * > > &v);  Add a new list of potentially colliding pairs of models. More...;  ; size_t getPrimitiveTestCount () const;  ; const DetectionOutputMap & getDetectionOutputs () const;  ; DetectionOutputVector *& getDetectionOutputs (CollisionModel *cm1, CollisionModel *cm2);  ; bool zeroCollision () const;  ;  Public Member Functions inherited from sofa::core::collision::Detection;  SOFA_CLASS (Detection, CollisionAlgorithm);  ; virtual void setIntersectionMethod (Intersection *v);  virtual because subclasses might do precomputations based on intersection algorithms More...;  ; Intersection * getIntersectionMethod () const;  ;  Public Member Functions inherited from sofa::core::collision::CollisionAlgorithm;  SOFA_ABSTRACT_CLASS (CollisionAlgorithm, objectmodel::BaseObject);  ; virtual void setInstance (Instance inst);  Allow to store multiple internal states by specifying a different collision pipeline 'instance'. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase.html:4606,pipeline,pipeline,4606,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase.html,1,['pipeline'],['pipeline']
Deployability,"id postDrawShadow ();  ; virtual GLuint getShadowMapSize ();  ; const GLfloat * getOpenGLProjectionMatrix ();  ; const GLfloat * getOpenGLModelViewMatrix ();  ; virtual GLuint getDepthTexture ();  ; virtual GLuint getColorTexture ();  ; virtual const sofa::type::Vec3 getPosition ();  ; virtual unsigned short getShadowTextureUnit ();  ; virtual void setShadowTextureUnit (const unsigned short unit);  ; virtual type::Vec3 getDirection ();  ; virtual float getShadowFactor ();  ; virtual float getVSMLightBleeding ();  ; virtual float getVSMMinVariance ();  ; virtual LightType getLightType ()=0;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void fwdDraw (VisualParams *);  Called before objects in the current branch are displayed. More...;  ; virtual void bwdDraw (VisualParams *);  Called after objects in the current branch are displayed. More...;  ; virtual void drawTransparent (const VisualParams *);  Display transparent surfaces. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const S",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_light.html:6554,update,updateVisual,6554,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_light.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_light.html,2,['update'],"['update', 'updateVisual']"
Deployability,"id propagateCollisionEndEvent (const sofa::core::ExecParams *params) const;  ; void collisionDetection (const sofa::core::ExecParams *params) const;  ; void animate (const sofa::core::ExecParams *params, SReal dt) const;  ; void updateSimulationContext (const sofa::core::ExecParams *params, SReal dt, SReal startTime) const;  ; void propagateAnimateEndEvent (const sofa::core::ExecParams *params, SReal dt) const;  ; void updateMapping (const sofa::core::ExecParams *params, SReal dt) const;  ; void computeBoundingBox (const sofa::core::ExecParams *params) const;  ; void propagateAnimateBeginEvent (const sofa::core::ExecParams *params, SReal dt) const;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseAnimationLoop;  BaseAnimationLoop ();  ;  ~BaseAnimationLoop () override;  ; void storeResetState () override;  Save the initial state for later uses in reset() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_default_animation_loop.html:14046,update,update,14046,api/master/sofa/html/classsofa_1_1simulation_1_1_default_animation_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_default_animation_loop.html,2,['update'],['update']
Deployability,"id setEdgeTopologyToDirty ();  ; void cleanEdgeTopologyFromDirty ();  ; const bool & isEdgeTopologyDirty ();  ; virtual EdgesAroundVertex & getEdgesAroundVertexForModification (const PointID i);  Returns a non-const list of Edge indices around the ith DOF for subsequent modification. More...;  ;  Protected Member Functions inherited from sofa::component::topology::container::dynamic::PointSetTopologyContainer;  PointSetTopologyContainer (Size nPoints=0);  ;  ~PointSetTopologyContainer () override=default;  ; void setPointTopologyToDirty ();  ; void cleanPointTopologyFromDirty ();  ; const bool & isPointTopologyDirty () const;  ;  Protected Member Functions inherited from sofa::core::topology::TopologyContainer;  TopologyContainer ();  Constructor. More...;  ;  ~TopologyContainer () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::topology::BaseTopologyObject;  BaseTopologyObject ();  ;  ~BaseTopologyObject () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; vo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_container.html:40741,update,update,40741,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_container.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_container.html,7,['update'],['update']
Deployability,"ield, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; toLameParameters(_2DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; toLameParameters(_3DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Transformation typedefsofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >; update()sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >inlinevirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >; VecElement typedefsofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >; VecElementMass typedefsofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >; VecElementStiffness typedefsofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protected; VecLink typedefsofa::core::objectmodel::Base; VecMaterialStiffness typedefsofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protected; VecReal typedefsofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass-members.html:32639,update,updateLinks,32639,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass-members.html,1,['update'],['updateLinks']
Deployability,"ield, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; toLameParameters(_2DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; toLameParameters(_3DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Transformation typedefsofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >; update()sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >inlinevirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::solidmechanics::fem::nonuniform::HexahedronCompositeFEMForceFieldAndMass< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::fem::nonuniform::HexahedronCompositeFEMForceFieldAndMass< DataTypes >; VecElement typedefsofa::component::solidmechanics::fem::nonuniform::HexahedronCompositeFEMForceFieldAndMass< DataTypes >; VecElementMass typedefsofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >; VecElementStiffness typedefsofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protected; VecLink typedefsofa::core::objectmodel::Base; VecMaterialStiffness typedefsofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protected; VecReal typedefsofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >; VecSlaves typedefs",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_hexahedron_composite_f_e_m_force_field_and_mass-members.html:39372,update,updateLinks,39372,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_hexahedron_composite_f_e_m_force_field_and_mass-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_hexahedron_composite_f_e_m_force_field_and_mass-members.html,1,['update'],['updateLinks']
Deployability,"ield, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; toLameParameters(_2DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; toLameParameters(_3DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Transformation typedefsofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >; update()sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >inlinevirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedronFEMForceFieldAndMass< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedronFEMForceFieldAndMass< DataTypes >; VecElement typedefsofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedronFEMForceFieldAndMass< DataTypes >; VecElementMass typedefsofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >; VecElementStiffness typedefsofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protected; VecLink typedefsofa::core::objectmodel::Base; VecMaterialStiffness typedefsofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protected; VecReal typedefsofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >; VecSlaves typed",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedron_f_e_m_force_field_and_mass-members.html:35126,update,updateLinks,35126,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedron_f_e_m_force_field_and_mass-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedron_f_e_m_force_field_and_mass-members.html,1,['update'],['updateLinks']
Deployability,"ield< DataTypes >::initEdgeInformation. protected . ◆ isPointInPlane(). template<class DataTypes > . bool sofa::component::mechanicalload::EdgePressureForceField< DataTypes >::isPointInPlane ; (; Coord ; p). protected . ◆ selectEdgesAlongPlane(). template<class DataTypes > . void sofa::component::mechanicalload::EdgePressureForceField< DataTypes >::selectEdgesAlongPlane. protected . ◆ selectEdgesFromEdgeList(). template<class DataTypes > . void sofa::component::mechanicalload::EdgePressureForceField< DataTypes >::selectEdgesFromEdgeList. protected . ◆ selectEdgesFromIndices(). template<class DataTypes > . void sofa::component::mechanicalload::EdgePressureForceField< DataTypes >::selectEdgesFromIndices ; (; const type::vector< Index > & ; inputIndices). protected . ◆ selectEdgesFromString(). template<class DataTypes > . void sofa::component::mechanicalload::EdgePressureForceField< DataTypes >::selectEdgesFromString. protected . ◆ setDminAndDmax(). template<class DataTypes > . void sofa::component::mechanicalload::EdgePressureForceField< DataTypes >::setDminAndDmax ; (; const SReal ; _dmin, . const SReal ; _dmax . ). ◆ setNormal(). template<class DataTypes > . void sofa::component::mechanicalload::EdgePressureForceField< DataTypes >::setNormal ; (; const Coord ; n). inline . ◆ setPressure(). template<class DataTypes > . void sofa::component::mechanicalload::EdgePressureForceField< DataTypes >::setPressure ; (; Deriv ; _pressure). inline . ◆ SOFA_CLASS(). template<class DataTypes > . sofa::component::mechanicalload::EdgePressureForceField< DataTypes >::SOFA_CLASS ; (; SOFA_TEMPLATE(EdgePressureForceField< DataTypes >, DataTypes) ; , . SOFA_TEMPLATE(core::behavior::ForceField, DataTypes) ;  . ). ◆ updateEdgeInformation(). template<class DataTypes > . void sofa::component::mechanicalload::EdgePressureForceField< DataTypes >::updateEdgeInformation. protected . sofacomponentmechanicalloadEdgePressureForceField; Generated on Mon Nov 11 2024 02:51:56 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_edge_pressure_force_field.html:31146,update,updateEdgeInformation,31146,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_edge_pressure_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_edge_pressure_force_field.html,2,['update'],['updateEdgeInformation']
Deployability,"ieldDev"". /error-runsofa-exe-can-not-run-after-successfully-build-the-project-in-vs2019; ; SOFA - Topic: [SOLVED] error: runsofa.exe can not run after successfully build the project in VS2019. /errors-appeared-while-compilation-sofa-in-win7; ; SOFA - Topic: [SOLVED] Errors appeared while compilation SOFA in Win7. /errors-in-building-sofa; . /feed; ; [SOLVED] Errors in building SOFA – SOFA. /page; . /10; ; SOFA - Topic: [SOLVED] Errors in building SOFA. /3; ; SOFA - Topic: [SOLVED] Errors in building SOFA. SOFA - Topic: [SOLVED] Errors in building SOFA. /errors-in-qt-creator; . /feed; ; [SOLVED] Issues in Setting up QtCreator – SOFA. SOFA - Topic: [SOLVED] Issues in Setting up QtCreator. /errors-occurred-in-building-with-vs2012-on-win-7-64bit; ; SOFA - Topic: [SOLVED] Errors occurred in building with VS2012 on Win 7 64bit. /errors-when-compiling-cgalplugin-in-vs2017; ; SOFA - Topic: [SOLVED] errors when compiling CGALPLUGIN in VS2017. /errors-when-installing-the-cgal-plugin; ; SOFA - Topic: [SOLVED] Errors when installing the CGAL plugin. /errors-while-building-sofa; ; SOFA - Topic: [SOLVED] Errors while building sofa. /errors-while-building-sofa-python-3; ; SOFA - Topic: Errors While Building Sofa Python 3. /errors-while-building-sofapython3-windows; ; SOFA - Topic: [SOLVED] Errors while building SofaPython3 (Windows). /error-when-compiling-sofapython3; ; SOFA - Topic: [SOLVED] Error when compiling SofaPython3. /error-when-loading-sofapython-plugin; ; SOFA - Topic: Error when loading SofaPython plugin. /error-when-running-scene-in-python-interpreter-with-sofapython3-plugin; ; SOFA - Topic: [SOLVED] Error when running scene in python interpreter with SofaPython3 plugin. /error-while-building-sofa-for-softrobots-plugin-installation; ; SOFA - Topic: Error while building Sofa for SoftRobots plugin installation. /error-while-building-sofa-on-windows-7-qglviewerqt-conflict; ; SOFA - Topic: [SOLVED] Error while building SOFA on Windows 7, QGLViewer/Qt conflict. /error-whil",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:297127,install,installing-the-cgal-plugin,297127,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['install'],"['installing', 'installing-the-cgal-plugin']"
Deployability,"iewMatrix ();  ; virtual GLuint getDepthTexture ();  ; virtual GLuint getColorTexture ();  ; virtual const sofa::type::Vec3 getPosition ();  ; virtual unsigned short getShadowTextureUnit ();  ; virtual void setShadowTextureUnit (const unsigned short unit);  ; virtual type::Vec3 getDirection ();  ; virtual float getShadowFactor ();  ; virtual float getVSMLightBleeding ();  ; virtual float getVSMMinVariance ();  ; virtual LightType getLightType ()=0;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void fwdDraw (VisualParams *);  Called before objects in the current branch are displayed. More...;  ; virtual void bwdDraw (VisualParams *);  Called after objects in the current branch are displayed. More...;  ; virtual void drawTransparent (const VisualParams *);  Display transparent surfaces. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const type::Quat< SReal >);  ; virt",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_light.html:6656,update,updateVisual,6656,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_light.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_light.html,1,['update'],['updateVisual']
Deployability,"ignal; dataValueChanged(QString dataValueString)sofa::gui::qt::DataWidgetsignal; DataWidget(QWidget *parent, const char *name, MyData *d)sofa::gui::qt::DataWidget; dirtysofa::gui::qt::DataWidgetprotected; fillFromData()sofa::gui::qt::DataWidgetslot; getBaseData() constsofa::gui::qt::DataWidgetinline; getBaseData()sofa::gui::qt::DataWidgetinline; getData()sofa::gui::qt::TDataWidget< Material >inline; getData() constsofa::gui::qt::TDataWidget< Material >inline; isDirty()sofa::gui::qt::DataWidgetinline; isFilled()sofa::gui::qt::DataWidgetinline; m_isFilledsofa::gui::qt::DataWidgetprotected; m_toFillsofa::gui::qt::DataWidgetprotected; MaterialDataWidget(QWidget *parent, const char *name, Data< Material > *data)sofa::gui::qt::materialdatawidget_h::MaterialDataWidgetinline; MyData typedefsofa::gui::qt::DataWidget; MyTData typedefsofa::gui::qt::TDataWidget< Material >; numColumnWidget()sofa::gui::qt::materialdatawidget_h::MaterialDataWidgetinlinevirtual; readFromData()sofa::gui::qt::materialdatawidget_h::MaterialDataWidgetprotectedvirtual; setData(MyTData *d)sofa::gui::qt::TDataWidget< Material >inlinevirtual; setData(MyData *d)sofa::gui::qt::TDataWidget< Material >; sofa::gui::qt::DataWidget::setData(MyData *d)sofa::gui::qt::DataWidgetvirtual; setDataReadOnly(bool readOnly)sofa::gui::qt::materialdatawidget_h::MaterialDataWidgetvirtual; setFilled(bool value)sofa::gui::qt::DataWidgetinline; setWidgetDirty(bool b=true)sofa::gui::qt::DataWidgetslot; sizeWidget()sofa::gui::qt::DataWidgetinlinevirtual; Tdatasofa::gui::qt::TDataWidget< Material >protected; TDataWidget(QWidget *parent, const char *name, MyTData *d)sofa::gui::qt::TDataWidget< Material >inline; updateDataValue()sofa::gui::qt::DataWidgetslot; updateVisibility()sofa::gui::qt::DataWidget; updateWidgetValue()sofa::gui::qt::DataWidgetslot; WidgetDirty(bool)sofa::gui::qt::DataWidgetsignal; writeToData()sofa::gui::qt::materialdatawidget_h::MaterialDataWidgetprotectedvirtual; ~DataWidget() overridesofa::gui::qt::DataWidget.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1materialdatawidget__h_1_1_material_data_widget-members.html:3368,update,updateDataValue,3368,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1materialdatawidget__h_1_1_material_data_widget-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1materialdatawidget__h_1_1_material_data_widget-members.html,6,['update'],"['updateDataValue', 'updateVisibility', 'updateWidgetValue']"
Deployability,"ileNameVector::~DataFileNameVector ; (; ). overridedefault . ◆ DataFileNameVector() [5/5]. sofa::core::objectmodel::DataFileNameVector::DataFileNameVector ; (; const Inherit & ; d). delete . Function details. ◆ addPath(). void sofa::core::objectmodel::DataFileNameVector::addPath ; (; const std::string & ; v, . bool ; clear = false . ). ◆ doOnUpdate(). void sofa::core::objectmodel::DataFileNameVector::doOnUpdate ; (; ). overridevirtual . Reimplemented from sofa::core::objectmodel::BaseData. ◆ endEdit(). void sofa::core::objectmodel::DataFileNameVector::endEdit ; (; ). overridevirtual . Reimplemented from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >. ◆ getAbsolutePath(). const std::string & sofa::core::objectmodel::DataFileNameVector::getAbsolutePath ; (; unsigned int ; i); const. virtual . ◆ getFullPath(). const std::string & sofa::core::objectmodel::DataFileNameVector::getFullPath ; (; unsigned int ; i); const. virtual . ◆ getPathType(). PathType sofa::core::objectmodel::DataFileNameVector::getPathType ; (; ); const. ◆ getRelativePath(). const std::string & sofa::core::objectmodel::DataFileNameVector::getRelativePath ; (; unsigned int ; i). virtual . ◆ operator=(). DataFileNameVector& sofa::core::objectmodel::DataFileNameVector::operator= ; (; const DataFileNameVector & ; ). delete . ◆ read(). bool sofa::core::objectmodel::DataFileNameVector::read ; (; const std::string & ; value). overridevirtual . Assign a value to this Data from a string representation. Returnstrue on success. ; Implements sofa::core::objectmodel::BaseData. ◆ setPathType(). void sofa::core::objectmodel::DataFileNameVector::setPathType ; (; PathType ; pathType). ◆ setValueAsString(). void sofa::core::objectmodel::DataFileNameVector::setValueAsString ; (; const std::string & ; v). ◆ updatePath(). void sofa::core::objectmodel::DataFileNameVector::updatePath ; (; ). protected . sofacoreobjectmodelDataFileNameVector; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:15126,update,updatePath,15126,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,2,['update'],['updatePath']
Deployability,"illed;  tell if DataWidget has been filled from Data true by default More...;  ; bool m_toFill;  bool to warn action is needed to fill Data, false by default More...;  . Public Member Functions;  GenericDataWidget (QWidget *parent, const char *name, MyData *d);  ; virtual bool createWidgets ();  ; virtual void setDataReadOnly (bool readOnly);  This method is called after createWidgets to configure whether the created widgets should be read-only. More...;  ; virtual void readFromData ();  The implementation of this method tells how the widget reads the value of the data. More...;  ; virtual void writeToData ();  ;  Public Member Functions inherited from sofa::gui::qt::DataWidget;  DataWidget (QWidget *parent, const char *name, MyData *d);  ;  ~DataWidget () override;  ; virtual void setData (MyData *d);  ; const core::objectmodel::BaseData * getBaseData () const;  BaseData pointer accessor function. More...;  ; core::objectmodel::BaseData * getBaseData ();  ; void updateVisibility ();  ; bool isDirty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  . Static Public Member Functions; template<class RealObject > ; static RealObject * create (RealObject *, CreatorArgument &arg);  ;  Static Public Member Functions inherited from sofa::gui::qt::DataWidget; template<class T > ; static T * create (T *, const CreatorArgument &arg);  ; static DataWidget * CreateDataWidget (const DataWidget::CreatorArgument &dwarg);  . Additional Inherited Members;  Signals inherited from sofa::gui::qt::DataWidget; void WidgetDirty (bool);  ; void DataOwnerDirty (bool);  ; void dataValueChanged (QString dataValueString);  ;  Public Slots inherited from sofa::gui::qt::DataWidget; void updateDataValue ();  ; void update",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_generic_data_widget.html:1650,update,updateVisibility,1650,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_generic_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_generic_data_widget.html,2,['update'],['updateVisibility']
Deployability,"impl. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible=false) override;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called af",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_subset_topology.html:6668,update,updateAllInputsIfDirty,6668,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_subset_topology.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_subset_topology.html,1,['update'],['updateAllInputsIfDirty']
Deployability,"impleTesselatedHexaTopologicalMapping::pointMappedFromHexa. protected . ◆ pointMappedFromPoint. type::vector<sofa::Index> sofa::component::mapping::linear::SimpleTesselatedHexaTopologicalMapping::pointMappedFromPoint. protected . Translates the TopologyChange objects from the source to the target. ; Translates each of the TopologyChange objects waiting in the source list so that they have a meaning and reflect the effects of the first topology changes on the second topology. . Constructor details. ◆ SimpleTesselatedHexaTopologicalMapping(). sofa::component::mapping::linear::SimpleTesselatedHexaTopologicalMapping::SimpleTesselatedHexaTopologicalMapping ; (; ). protected . Constructor. . ◆ ~SimpleTesselatedHexaTopologicalMapping(). sofa::component::mapping::linear::SimpleTesselatedHexaTopologicalMapping::~SimpleTesselatedHexaTopologicalMapping ; (; ). inlineoverrideprotected . Destructor. ; Does nothing. . Function details. ◆ init(). void sofa::component::mapping::linear::SimpleTesselatedHexaTopologicalMapping::init ; (; void ; ). overridevirtual . Initializes the target BaseTopology from the source BaseTopology. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_CLASS(). sofa::component::mapping::linear::SimpleTesselatedHexaTopologicalMapping::SOFA_CLASS ; (; SimpleTesselatedHexaTopologicalMapping ; , . sofa::core::topology::TopologicalMapping ;  . ). ◆ updateTopologicalMappingTopDown(). void sofa::component::mapping::linear::SimpleTesselatedHexaTopologicalMapping::updateTopologicalMappingTopDown ; (; ). inlineoverridevirtual . Translates the TopologyChange objects from the source to the target. ; Translates each of the TopologyChange objects waiting in the source list so that they have a meaning and reflect the effects of the first topology changes on the second topology. ; Implements sofa::core::topology::TopologicalMapping. sofacomponentmappinglinearSimpleTesselatedHexaTopologicalMapping; Generated on Mon Nov 11 2024 02:50:45 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_hexa_topological_mapping.html:18965,update,updateTopologicalMappingTopDown,18965,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_hexa_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_hexa_topological_mapping.html,2,['update'],['updateTopologicalMappingTopDown']
Deployability,"imulation::XMLPrintVisitor::XMLPrintVisitor ; (; const sofa::core::ExecParams * ; params, . std::ostream & ; out . ). inline . Function details. ◆ getClassName(). const char* sofa::simulation::XMLPrintVisitor::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ getLevel(). int sofa::simulation::XMLPrintVisitor::getLevel ; (; ); const. inline . ◆ processBaseObject(). void sofa::simulation::XMLPrintVisitor::processBaseObject ; (; sofa::core::objectmodel::BaseObject * ; obj). ◆ processNodeBottomUp(). void sofa::simulation::XMLPrintVisitor::processNodeBottomUp ; (; simulation::Node * ; ). overridevirtual . Callback method called after child node have been processed and before going back to the parent node. ; Reimplemented from sofa::simulation::Visitor. ◆ processNodeTopDown(). Visitor::Result sofa::simulation::XMLPrintVisitor::processNodeTopDown ; (; simulation::Node * ; ). overridevirtual . Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. ; Reimplemented from sofa::simulation::Visitor. ◆ processObject(). template<class T > . void sofa::simulation::XMLPrintVisitor::processObject ; (; T ; obj). ◆ processObjects(). template<class Seq > . void sofa::simulation::XMLPrintVisitor::processObjects ; (; Seq & ; list). ◆ setLevel(). void sofa::simulation::XMLPrintVisitor::setLevel ; (; int ; l). inline . ◆ treeTraversal(). bool sofa::simulation::XMLPrintVisitor::treeTraversal ; (; TreeTraversalRepetition & ; repeat). overridevirtual . ReturnstreeTraversal returns true if and only if a tree traversal must be enforced (even for a DAG) ; Parameters. repeatTell if a node callback can be executed several times (at each traversal in diamond configurations) . Reimplemented from sofa::simulation::Visitor. sofasimulationXMLPrintVisitor; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html:6983,configurat,configurations,6983,api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html,2,['configurat'],['configurations']
Deployability,"in and max end points are respectively min and max coordinates of the cube on a coordinate axis. min and max are updated with the method update(int i), so min and max have min/max values on the i-th axis after the method update(int i). . Public Attributes; collision::geometry::Cube cube;  ; EndPoint * min {nullptr};  ; EndPoint * max {nullptr};  . Public Member Functions;  DSAPBox (const collision::geometry::Cube &c, EndPoint *mi=nullptr, EndPoint *ma=nullptr);  ; void update (int axis, double alarmDist);  ; double squaredDistance (const DSAPBox &other) const;  ; double squaredDistance (const DSAPBox &other, int axis) const;  Compute the squared distance from this to other on a specific axis. More...;  ; void show () const;  . Attribute details. ◆ cube. collision::geometry::Cube sofa::component::collision::detection::algorithm::DSAPBox::cube. ◆ max. EndPoint* sofa::component::collision::detection::algorithm::DSAPBox::max {nullptr}. ◆ min. EndPoint* sofa::component::collision::detection::algorithm::DSAPBox::min {nullptr}. Constructor details. ◆ DSAPBox(). sofa::component::collision::detection::algorithm::DSAPBox::DSAPBox ; (; const collision::geometry::Cube & ; c, . EndPoint * ; mi = nullptr, . EndPoint * ; ma = nullptr . ). inlineexplicit . Function details. ◆ show(). void sofa::component::collision::detection::algorithm::DSAPBox::show ; (; ); const. inline . ◆ squaredDistance() [1/2]. double sofa::component::collision::detection::algorithm::DSAPBox::squaredDistance ; (; const DSAPBox & ; other); const. ◆ squaredDistance() [2/2]. double sofa::component::collision::detection::algorithm::DSAPBox::squaredDistance ; (; const DSAPBox & ; other, . int ; axis . ); const. Compute the squared distance from this to other on a specific axis. . ◆ update(). void sofa::component::collision::detection::algorithm::DSAPBox::update ; (; int ; axis, . double ; alarmDist . ). sofacomponentcollisiondetectionalgorithmDSAPBox; Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_d_s_a_p_box.html:2256,update,update,2256,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_d_s_a_p_box.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_d_s_a_p_box.html,2,['update'],['update']
Deployability,"in grasping using Phantom omni. /collision-response-between-two-objects; ; SOFA - Topic: Collision response between two objects. /collision-response-with-bending-behaviour; ; SOFA - Topic: Collision response with bending behaviour. /collision-rigid-deformable-objects; ; SOFA - Topic: Collision rigid-deformable objects. /collisions-and-linearmovementconstraint; ; SOFA - Topic: Collisions and LinearMovementConstraint. /combining-meshes-with-different-force-fields; ; SOFA - Topic: Combining meshes with different force fields. /combining-sofa-and-unity; ; SOFA - Topic: Combining SOFA and Unity. /combining-sofa-with-unreal-engine; ; SOFA - Topic: [SOLVED] Combining SOFA with Unreal Engine. /communicationcontroller-data-exchange-format; ; SOFA - Topic: [SOLVED] CommunicationController data exchange format. /companies-are-looking-for-sofa-skilled-engineers; ; SOFA - Topic: Companies are looking for SOFA-skilled engineers!. /compilation-error-when-sofa_dumo_visitor_info-is-toggled; ; SOFA - Topic: [SOLVED] Compilation error when SOFA_DUMP_VISITOR_INFO is toggled. /compilation-error-while-setvalue-to-d_force-in-linearff; ; SOFA - Topic: [SOLVED] Compilation error while setValue to d_force in linearFF. /compilation-warnings; . /page; . /2; ; SOFA - Topic: [SOLVED] Compilation warnings ""unused typedef"". /7; ; SOFA - Topic: [SOLVED] Compilation warnings ""unused typedef"". SOFA - Topic: [SOLVED] Compilation warnings ""unused typedef"". /compiling_advancedtimer; ; SOFA - Topic: [SOLVED] compiling_AdvancedTimer. /compiling-build-ninja-in-ubuntu; ; SOFA - Topic: [SOLVED] compiling build.ninja in ubuntu. /compiling-sofa-v15-12-leapmotion-plugin; . /feed; ; [SOLVED] Compiling SOFA v15.12 + LeapMotion Plugin – SOFA. SOFA - Topic: [SOLVED] Compiling SOFA v15.12 + LeapMotion Plugin. /components-for-quadratic-meshes; . /feed; ; [SOLVED] Components for quadratic meshes – SOFA. /page; . /2; ; SOFA - Topic: [SOLVED] Components for quadratic meshes. /6; ; SOFA - Topic: [SOLVED] Components for q",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:278030,toggle,toggled,278030,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['toggle'],['toggled']
Deployability,"in or core? – SOFA. SOFA - Topic: [SOLVED] Flexible plugin or core?. /floating-behaviour-in-soft-actuators-with-bilateralinteractionconstraint; ; SOFA - Topic: Floating behaviour in soft actuators with BilateralInteractionConstraint. /floating-point-exception; ; SOFA - Topic: [SOLVED] Floating point exception. /floor-as-a-projective-constraint; ; SOFA - Topic: [SOLVED] Floor as a projective constraint. /force-feedback-not-working-correctly-when-using-two-haptic-devices; ; SOFA - Topic: [SOLVED] Force feedback not working correctly when using two haptic devices. /forcefields-adddforce; . /feed; ; [SOLVED] Forcefield’s addDForce – SOFA. /page; . /11; ; SOFA - Topic: [SOLVED] Forcefield’s addDForce. /12; ; SOFA - Topic: [SOLVED] Forcefield’s addDForce. /3; ; SOFA - Topic: [SOLVED] Forcefield’s addDForce. SOFA - Topic: [SOLVED] Forcefield’s addDForce. /forcefields-collisions-and-integration; . /feed; ; [SOLVED] Forcefields, collisions and integration – SOFA. SOFA - Topic: [SOLVED] Forcefields, collisions and integration. /forcefield-with-implicit-iterative-solver; ; SOFA - Topic: [SOLVED] ForceField with implicit iterative solver. /forcefield-with-python-controller; ; SOFA - Topic: ForceField with Python controller. /force-induced-topoligical-modification-of-triangular-mesh; ; SOFA - Topic: [SOLVED] Force Induced Topological Modification of Triangular Mesh. /forceps-assembly; . /feed; ; [SOLVED] Forceps assembly – SOFA. /page; . /15; ; SOFA - Topic: [SOLVED] Forceps assembly. /16; ; SOFA - Topic: [SOLVED] Forceps assembly. /4; ; SOFA - Topic: [SOLVED] Forceps assembly. SOFA - Topic: [SOLVED] Forceps assembly. /forces-not-getting-rendered-with-geomagic-touch; ; SOFA - Topic: [SOLVED] Forces not getting rendered with Geomagic touch. /forces-on-bending-pneunet; ; SOFA - Topic: [SOLVED] Forces on bending pneunet. /forum-help; ; SOFA - Topic: forum help. /forum-is-moving-to-github-discussions; ; SOFA - Topic: WARNING: moving to GitHub Discussions. /free-software-for-volume-m",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:306453,integrat,integration,306453,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['integrat'],['integration']
Deployability,"in the current branch are displayed. More...;  ; void bwdDraw (core::visual::VisualParams *) override;  Called after objects in the current branch are displayed. More...;  ; void handleEvent (sofa::core::objectmodel::Event *) override;  Handle an event. More...;  ; virtual bool isPrerendered ();  ; bool hasFilledFbo ();  ; std::string getOutputName ();  ;  Public Member Functions inherited from sofa::core::visual::VisualManager;  SOFA_CLASS (VisualManager, VisualModel);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void drawTransparent (const VisualParams *);  Display transparent surfaces. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const type::Quat< SReal >);  ; virtual void applyScale (const SReal, const SReal, const SReal);  ; virtual void ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_visual_manager_secondary_pass.html:5833,update,updateVisual,5833,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_visual_manager_secondary_pass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_visual_manager_secondary_pass.html,4,['update'],"['update', 'updateVisual']"
Deployability,"indLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  TransformEngine ();  ;  ~TransformEngine () override;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_transform_engine.html:13893,update,update,13893,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_transform_engine.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_transform_engine.html,1,['update'],['update']
Deployability,"inder ; (; const double * ; mat, . const Vec3 & ; length . ). ◆ Cylinder() [6/8]. sofa::gl::Cylinder::Cylinder ; (; const Vec3 & ; center, . const Quaternion & ; orient, . SReal ; length = 1.0_sreal . ). ◆ Cylinder() [7/8]. sofa::gl::Cylinder::Cylinder ; (; const Vec3 & ; center, . const double ; orient[4][4], . SReal ; length = 1.0_sreal . ). ◆ Cylinder() [8/8]. sofa::gl::Cylinder::Cylinder ; (; const double * ; mat, . SReal ; length = 1.0_sreal . ). ◆ ~Cylinder(). sofa::gl::Cylinder::~Cylinder ; (; ). Function details. ◆ clear(). static void sofa::gl::Cylinder::clear ; (; ). inlinestatic . ◆ draw() [1/7]. void sofa::gl::Cylinder::draw ; (; ). ◆ draw() [2/7]. void sofa::gl::Cylinder::draw ; (; const double * ; mat, . const Vec3 & ; length . ). static . ◆ draw() [3/7]. void sofa::gl::Cylinder::draw ; (; const double * ; mat, . SReal ; length = 1.0_sreal . ). static . ◆ draw() [4/7]. void sofa::gl::Cylinder::draw ; (; const Vec3 & ; center, . const double ; orient[4][4], . const Vec3 & ; length . ). static . ◆ draw() [5/7]. void sofa::gl::Cylinder::draw ; (; const Vec3 & ; center, . const double ; orient[4][4], . SReal ; length = 1.0_sreal . ). static . ◆ draw() [6/7]. void sofa::gl::Cylinder::draw ; (; const Vec3 & ; center, . const Quaternion & ; orient, . const Vec3 & ; length . ). static . ◆ draw() [7/7]. void sofa::gl::Cylinder::draw ; (; const Vec3 & ; center, . const Quaternion & ; orient, . SReal ; length = 1.0_sreal . ). static . ◆ SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(). sofa::gl::Cylinder::SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER ; (; Vector3 ; , . sofa::type::Vec3 ;  . ). ◆ update() [1/3]. void sofa::gl::Cylinder::update ; (; const double * ; mat). ◆ update() [2/3]. void sofa::gl::Cylinder::update ; (; const Vec3 & ; center, . const double ; orient[4][4] . ). ◆ update() [3/3]. void sofa::gl::Cylinder::update ; (; const Vec3 & ; center, . const Quaternion & ; orient = Quaternion() . ). sofaglCylinder; Generated on Mon Nov 11 2024 03:18:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_cylinder.html:3728,update,update,3728,api/master/sofa/html/classsofa_1_1gl_1_1_cylinder.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_cylinder.html,12,['update'],['update']
Deployability,"ine . ◆ getDistanceFromMouse(). SReal sofa::gui::component::performer::BaseMouseInteractor::getDistanceFromMouse ; (; ); const. inline . ◆ getMouseContainer(). virtual core::behavior::BaseMechanicalState* sofa::gui::component::performer::BaseMouseInteractor::getMouseContainer ; (; ). pure virtual . Implemented in sofa::gui::component::performer::MouseInteractor< DataTypes >. ◆ getMouseRayModel(). MouseCollisionModel* sofa::gui::component::performer::BaseMouseInteractor::getMouseRayModel ; (; ). inline . ◆ handleEvent(). void sofa::gui::component::performer::BaseMouseInteractor::handleEvent ; (; core::objectmodel::Event * ; ). overridevirtual . Handle an event. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ isMouseAttached(). bool sofa::gui::component::performer::BaseMouseInteractor::isMouseAttached ; (; ); const. inline . ◆ removeInteractionPerformer(). bool sofa::gui::component::performer::BaseMouseInteractor::removeInteractionPerformer ; (; InteractionPerformer * ; i). ◆ setBodyPicked(). void sofa::gui::component::performer::BaseMouseInteractor::setBodyPicked ; (; BodyPicked ; picked). inline . ◆ setDistanceFromMouse(). void sofa::gui::component::performer::BaseMouseInteractor::setDistanceFromMouse ; (; SReal ; d). inline . ◆ setMouseAttached(). void sofa::gui::component::performer::BaseMouseInteractor::setMouseAttached ; (; bool ; b). inline . ◆ setMouseRayModel(). void sofa::gui::component::performer::BaseMouseInteractor::setMouseRayModel ; (; MouseCollisionModel * ; model). inline . ◆ SOFA_ABSTRACT_CLASS(). sofa::gui::component::performer::BaseMouseInteractor::SOFA_ABSTRACT_CLASS ; (; BaseMouseInteractor ; , . core::BehaviorModel ;  . ). ◆ updatePosition(). void sofa::gui::component::performer::BaseMouseInteractor::updatePosition ; (; SReal ; dt). overridevirtual . Computation of a new simulation step. ; Implements sofa::core::BehaviorModel. sofaguicomponentperformerBaseMouseInteractor; Generated on Mon Nov 11 2024 03:20:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1performer_1_1_base_mouse_interactor.html:17264,update,updatePosition,17264,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1performer_1_1_base_mouse_interactor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1performer_1_1_base_mouse_interactor.html,4,['update'],['updatePosition']
Deployability,"ine's impl. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible) override;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called af",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_smooth_mesh_engine.html:4832,update,updateAllInputsIfDirty,4832,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_smooth_mesh_engine.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_smooth_mesh_engine.html,1,['update'],['updateAllInputsIfDirty']
Deployability,"inearElasticityFEMForceField< DataTypes >; ForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; toLameParameters(_2DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; toLameParameters(_3DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Transformation typedefsofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >; VecElement typedefsofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >; VecElementStiffness typedefsofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protected; VecLink typedefsofa::core::objectmodel::Base; VecMaterialStiffness typedefsofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protected; VecReal typedefsofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; Vector typedefsofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field-members.html:26135,update,updateInternal,26135,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field-members.html,1,['update'],['updateInternal']
Deployability,"iner &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; for_each(VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; getCategoryName() const overridesofa::simulation::UpdateContextVisitorinlinevirtual; getClassName() const overridesofa::simulation::UpdateContextVisitorinlinevirtual; getInfos() constsofa::simulation::Visitorinlinevirtual; isThreadSafe() const overridesofa::simulation::UpdateContextVisitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::UpdateContextVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitor",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor-members.html:2459,Update,UpdateContextVisitorinlinevirtual,2459,api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor-members.html,1,['Update'],['UpdateContextVisitorinlinevirtual']
Deployability,"iner &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; for_each(VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; getCategoryName() const overridesofa::simulation::UpdateMappingVisitorinlinevirtual; getClassName() const overridesofa::simulation::UpdateMappingVisitorinlinevirtual; getInfos() constsofa::simulation::Visitorinlinevirtual; isThreadSafe() const overridesofa::simulation::UpdateMappingVisitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processMapping(simulation::Node *node, core::BaseMapping *obj)sofa::simulation::UpdateMappingVisitor; processMechanicalMapping(simulation::Node *, core::BaseMapping *obj)sofa::simulation::UpdateMappingVisitor; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::UpdateMappingVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simul",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor-members.html:2459,Update,UpdateMappingVisitorinlinevirtual,2459,api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor-members.html,1,['Update'],['UpdateMappingVisitorinlinevirtual']
Deployability,"iner::dynamic::DynamicSparseGridTopologyModifier::~DynamicSparseGridTopologyModifier ; (; ). inlineoverrideprotected . Function details. ◆ addHexahedraProcess() [1/2]. void sofa::component::topology::container::dynamic::DynamicSparseGridTopologyModifier::addHexahedraProcess ; (; const sofa::type::vector< Hexahedron > & ; hexahedra). overridevirtual . Actually Add some hexahedra to this topology. Wrong way to add some hexahedra for the moment ! ; TEMPORARY BUT THIS METHOD MUST NOT BE USED !!; See alsoaddHexahedraWarning ; Reimplemented from sofa::component::topology::container::dynamic::HexahedronSetTopologyModifier. ◆ addHexahedraProcess() [2/2]. void sofa::component::topology::container::dynamic::DynamicSparseGridTopologyModifier::addHexahedraProcess ; (; const sofa::type::vector< Hexahedron > & ; hexahedra, . const sofa::type::vector< unsigned int > & ; indices . ). virtual . Actually Add some hexahedra to this topology. ; This overloaded function updates relation between hexahedra indices in the topology and hexahedra indices in the regular grid.; See alsoaddHexahedraWarning . ◆ init(). void sofa::component::topology::container::dynamic::DynamicSparseGridTopologyModifier::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ removeHexahedraProcess(). void sofa::component::topology::container::dynamic::DynamicSparseGridTopologyModifier::removeHexahedraProcess ; (; const sofa::type::vector< Index > & ; indices, . const bool ; removeIsolatedItems = false . ). overridevirtual . Remove a subset of hexahedra. ; Elements corresponding to these points are removed form the mechanical object's state vectors.; Important : some structures might need to be warned BEFORE the points are actually deleted, so always use method removeEdgesWarning before calling removeEdgesProcess. See alsoremoveHexahedraWarning ; Parameters. removeIsolatedItemsif t",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier.html:31517,update,updates,31517,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier.html,1,['update'],['updates']
Deployability,"ing &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(ProjectiveTransformEngine, DataTypes), core::DataEngine)sofa::component::engine::transform::ProjectiveTransformEngine< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::engine::transform::ProjectiveTransformEngine< DataTypes >; Vec4 typedefsofa::component::engine::transform::ProjectiveTransformEngine< DataTypes >; VecCoord typedefsofa::component::engine::transform::ProjectiveTransformEngine< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_projective_transform_engine-members.html:12794,update,update,12794,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_projective_transform_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_projective_transform_engine-members.html,1,['update'],['update']
Deployability,"ing &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; SOFA_CLASS(VisualLoop, VisualModel)sofa::core::visual::VisualLoop; sofa::core::visual::VisualModel::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateContextStep(sofa::core::visual::VisualParams *)sofa::core::visual::VisualLoopinlinevirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateStep(sofa::core::visual::VisualParams *)sofa::core::visual::VisualLoopinlinevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~VisualLoop() overridesofa::core::visual::VisualLoopinlineprotected; ~VisualModel() overridesofa::core::visual::VisualModelinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_loop-members.html:11414,update,updateInternal,11414,api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_loop-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_loop-members.html,5,['update'],"['updateInternal', 'updateLinks', 'updateStep', 'updateVisual']"
Deployability,"ing &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Real, SReal)sofa::component::engine::transform::ROIValueMapper; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Index, sofa::Index)sofa::component::engine::transform::ROIValueMapper; SOFA_CLASS(ROIValueMapper, Inherited)sofa::component::engine::transform::ROIValueMapper; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~ROIValueMapper() overridesofa::component::engine::transform::ROIValueMapperinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_r_o_i_value_mapper-members.html:12649,update,update,12649,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_r_o_i_value_mapper-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_r_o_i_value_mapper-members.html,5,['update'],"['update', 'updateAllInputsIfDirty', 'updateIfDirty', 'updateInternal', 'updateLinks']"
Deployability,"ing &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(OdeSolver, objectmodel::BaseObject)sofa::core::behavior::OdeSolver; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(VariationalSymplecticSolver, sofa::core::behavior::OdeSolver, sofa::core::behavior::LinearSolverAccessor)sofa::component::odesolver::backward::VariationalSymplecticSolver; solve(const core::ExecParams *params, SReal dt, sofa::core::MultiVecCoordId xResult, sofa::core::MultiVecDerivId vResult) overridesofa::component::odesolver::backward::VariationalSymplecticSolvervirtual; sofa::core::behavior::OdeSolver::solve(const core::ExecParams *params, SReal dt)sofa::core::behavior::OdeSolverinlinevirtual; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VariationalSymplecticSolver()sofa::component::odesolver::backward::VariationalSymplecticSolver; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OdeSolver() overridesofa::core::behavior::OdeSolverprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver-members.html:13368,update,updateInternal,13368,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"ing &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  Indices2ValuesMapper ();  ;  ~Indices2ValuesMapper () override;  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_indices2_values_mapper.html:13688,update,update,13688,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_indices2_values_mapper.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_indices2_values_mapper.html,1,['update'],['update']
Deployability,"ing &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setVoxelSize(const type::Vec3 vSize)sofa::component::io::mesh::VoxelGridLoader; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(VoxelLoader, BaseLoader)sofa::core::loader::VoxelLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(VoxelGridLoader, VoxelLoader)sofa::component::io::mesh::VoxelGridLoader; sofa::core::loader::VoxelLoader::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3i typedefsofa::component::io::mesh::VoxelGridLoader; Vec6i typedefsofa::component::io::mesh::VoxelGridLoader; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VoxelGridLoader()sofa::component::io::mesh::VoxelGridLoaderprotected; VoxelLoader()sofa::core::loader::VoxelLoaderprotected; voxelSizesofa::component::io::mesh::VoxelGridLoader; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseLoader() overridesofa::core::loader::BaseLoaderprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~VoxelGridLoader() overridesofa::component::io::mesh::VoxelGridLoaderprotected; ~VoxelLoader() overridesofa::core::loader::VoxelLoade",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_voxel_grid_loader-members.html:13271,update,updateLinks,13271,api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_voxel_grid_loader-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_voxel_grid_loader-members.html,1,['update'],['updateLinks']
Deployability,"ing &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(GenerateGrid, DataTypes), core::DataEngine)sofa::component::engine::generate::GenerateGrid< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; Tetrahedron typedefsofa::component::engine::generate::GenerateGrid< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::engine::generate::GenerateGrid< DataTypes >; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::engine::generate::GenerateGrid< DataTypes >; Vec3Int typedefsofa::component::engine::generate::GenerateGrid< DataTypes >; VecCoord typedefsofa::component::engine::generate::GenerateGrid< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprot",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_grid-members.html:13458,update,update,13458,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_grid-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_grid-members.html,1,['update'],['update']
Deployability,"ing > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(BaseROI, DataTypes), Inherit)sofa::component::engine::select::BaseROI< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; Tetra typedefsofa::component::engine::select::BaseROI< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::engine::select::BaseROI< DataTypes >; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::engine::select::BaseROI< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecEdge typedefsofa::component::engine::select::BaseROI< DataTypes >; VecHexa typedefsofa::component::engine::select::BaseROI< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecQuad typedefsofa::component::engine::select::BaseROI< DataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecTetra typedefsofa::component::engine::select::BaseROI< DataTypes >; VecTriangle typedefsofa::component::engine::select::BaseROI< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseROI() override=defaultsofa::component::engine::select::Ba",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_base_r_o_i-members.html:18087,update,updateLinks,18087,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_base_r_o_i-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_base_r_o_i-members.html,1,['update'],['updateLinks']
Deployability,ing Grid topology. /carving-into-model-does-not-work-when-using-another-model; ; SOFA - Topic: Carving into model does not work when using another model. /carvingmanager-omnievent-applications-who-wrote-these-can-we-chat; . /page; . /3; ; SOFA - Topic: CarvingManager & OmniEvent applications: who wrote these? Can we chat?. /4; ; SOFA - Topic: CarvingManager & OmniEvent applications: who wrote these? Can we chat?. /5; ; SOFA - Topic: CarvingManager & OmniEvent applications: who wrote these? Can we chat?. SOFA - Topic: CarvingManager & OmniEvent applications: who wrote these? Can we chat?. /c-code-in-tetrahedralcorotationalfemforcefield-cpp-h-inl; ; SOFA - Topic: [SOLVED] C++ code in TetrahedralCorotationalFEMForceField.cpp/.h/.inl. /cgal-configuration; ; SOFA - Topic: CGAL Configuration. /cgal-plugin-4-7-v21-06; ; SOFA - Topic: [SOLVED] CGAL plugin 4.7 v21.06. /cgalplugin-errors-when-i-compiled; ; SOFA - Topic: [SOLVED] comiling errors about CGALplugin. /cgal-plugin-install; ; SOFA - Topic: [SOLVED] CGAL plugin install. /cgalpluginmeshgenerationfromimageerror-in-creating-file-dataoutput-vtu; ; SOFA - Topic: [SOLVED] CGALplugin(MeshGenerationFromImage):Error in creating file data/output.vtu. /change-default-pose-of-scene; ; SOFA - Topic: Change default pose of scene. /change-point-indices-when-using-partiallinearmovementconstraint; ; SOFA - Topic: [SOLVED] Change point indices when using PartialLinearMovementConstraint. /changing-object-positions-after-every-reset; ; SOFA - Topic: [SOLVED] Changing object positions after every reset. /changing-tetra-mesh-topology-collisions; . /feed; ; [SOLVED] changing tetra mesh topology + collisions – SOFA. /page; . /10; ; SOFA - Topic: [SOLVED] changing tetra mesh topology + collisions. /11; ; SOFA - Topic: [SOLVED] changing tetra mesh topology + collisions. /12; ; SOFA - Topic: [SOLVED] changing tetra mesh topology + collisions. /3; ; SOFA - Topic: [SOLVED] changing tetra mesh topology + collisions. SOFA - Topic: [SOLVED] changin,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:272033,install,install,272033,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['install'],['install']
Deployability,"ing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  EulerExplicitSolver ();  ; void updateState (sofa::simulation::common::VectorOperations *vop, sofa::simulation::common::MechanicalOperations *mop, sofa::core::MultiVecCoordId xResult, sofa::core::MultiVecDerivId vResult, const sofa::core::behavior::MultiVecDeriv &acc, SReal dt) const;  ; void assembleSystemMatrix (sofa::simulation::common::MechanicalOperations *mop) const;  ; void solveSystem (core::MultiVecDerivId solution, core::MultiVecDerivId rhs) const;  ;  Protected Member Functions inherited from sofa::core::behavior::OdeSolver;  OdeSolver ();  ;  ~OdeSolver () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::B",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_euler_explicit_solver.html:12631,update,updateState,12631,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_euler_explicit_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_euler_explicit_solver.html,2,['update'],"['update', 'updateState']"
Deployability,ing scene. /problem-about-geomagic-plugin-in-v18-12; ; SOFA - Topic: problem about Geomagic Plugin in v18.12. /problem-adding-uncoupledconstraintcorrection; ; SOFA - Topic: [SOLVED] Problem adding UncoupledConstraintCorrection. /problem-compiling-sofa-v16-08; ; SOFA - Topic: [SOLVED] Problem compiling Sofa v16.08. /problem-compiling-sofa-with-python3; ; SOFA - Topic: Problem Compiling SOFA with Python3. /problem-compiling-sofa-with-python3-2; ; SOFA - Topic: Problem Compiling SOFA with Python3. /problem-configuring-sofa-with-eigen3; ; SOFA - Topic: [SOLVED] Problem configuring SOFA with Eigen3. /problem-downloading-the-source-files-from-git-repositary; ; SOFA - Topic: [SOLVED] Problem downloading the source files from git repositary. /problem-for-beam-mass-simulation; ; SOFA - Topic: Problem for beam-mass simulation. /problem-in-generating-cmake-gui-when-building-sofa; ; SOFA - Topic: [SOLVED] Problem in generating Cmake-gui when building Sofa. /problem-in-installing-cmake; ; SOFA - Topic: [SOLVED] Problem in installing Cmake. /problem-in-installing-stlib; . /feed; ; [SOLVED] Problem in installing STlib – SOFA. SOFA - Topic: [SOLVED] Problem in installing STlib. /problem-in-running-new-version-of-sofa-20-12; ; SOFA - Topic: Problem in running new version of Sofa 20.12. /problem-of-the-variables-control-of-legged-robot-with-flexible-passive-trunk; ; SOFA - Topic: Problem of the Variables Control of Legged Robot with Flexible Passive Trunk. /problems-applying-sofacuda-plugin; ; SOFA - Topic: [SOLVED] Problems applying SofaCUDA plugin. /problems-at-lauching-runsofa; ; SOFA - Topic: [SOLVED] Problems at lauching runSofa. /problems-finding-collision-algorithms; ; SOFA - Topic: [SOLVED] Problems finding collision algorithms. /problems-generating-mesh-with-cgalplugin-and-tetrahedronsettopologycontainer; ; SOFA - Topic: [SOLVED] Problems generating mesh with CGALPlugin and TetrahedronSetTopologyContainer. /problems-importing-sofa-gui-sofapython3; ; SOFA - Topic: Problems im,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:364635,install,installing-cmake,364635,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['install'],"['installing', 'installing-cmake']"
Deployability,"ing, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Static Protected Attributes; static const Real EPSILON = std::numeric_limits<Vertex2Frame<DataTypes>::Real>::epsilon();  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(Vertex2Frame, DataTypes), core::DataEngine);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_vertex2_frame.html:3238,update,update,3238,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_vertex2_frame.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_vertex2_frame.html,1,['update'],['update']
Deployability,ing-sofa-v15-12-leapmotion-plugin; . /feed; ; [SOLVED] Compiling SOFA v15.12 + LeapMotion Plugin – SOFA. SOFA - Topic: [SOLVED] Compiling SOFA v15.12 + LeapMotion Plugin. /components-for-quadratic-meshes; . /feed; ; [SOLVED] Components for quadratic meshes – SOFA. /page; . /2; ; SOFA - Topic: [SOLVED] Components for quadratic meshes. /6; ; SOFA - Topic: [SOLVED] Components for quadratic meshes. /7; ; SOFA - Topic: [SOLVED] Components for quadratic meshes. SOFA - Topic: [SOLVED] Components for quadratic meshes. /composite_objects; ; SOFA - Topic: [SOLVED] composite_objects. /compound-collision-model-for-rigid-bodies; ; SOFA - Topic: [SOLVED] Compound collision model for rigid bodies. /computationtimes-and-batch; ; SOFA - Topic: [SOLVED] ComputationTimes and batch. /compute-forces-programatically; ; SOFA - Topic: Compute forces programatically. /computing-von-mises-constraints-along-rods; ; SOFA - Topic: Computing Von Mises constraints along rods. /configuration-in-cmake-gui; ; SOFA - Topic: [SOLVED] configuration in CMake-GUI. /connecting-sofa-to-an-external-data-com-port; . /feed; ; [SOLVED] Connecting sofa to an external data COM port – SOFA. /page; . /11; ; SOFA - Topic: [SOLVED] Connecting sofa to an external data COM port. /2; ; SOFA - Topic: [SOLVED] Connecting sofa to an external data COM port. /3; ; SOFA - Topic: [SOLVED] Connecting sofa to an external data COM port. /7; ; SOFA - Topic: [SOLVED] Connecting sofa to an external data COM port. /8; ; SOFA - Topic: [SOLVED] Connecting sofa to an external data COM port. SOFA - Topic: [SOLVED] Connecting sofa to an external data COM port. /consistency-of-units-in-sofa; ; SOFA - Topic: [SOLVED] Consistency of units in Sofa. /constrain-and-control-movements-of-an-object; ; SOFA - Topic: Constrain and control movements of an object. /constraining-a-spring; ; SOFA - Topic: [SOLVED] Constraining a spring. /constraint-on-collision-model-points; ; SOFA - Topic: Constraint on collision model points. /constraint-tutorial-sce,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:279630,configurat,configuration-in-cmake-gui,279630,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['configurat'],"['configuration', 'configuration-in-cmake-gui']"
Deployability,"ingForceField() [3/3]. template<class DataTypes > . sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::VectorSpringForceField ; (; MechanicalState * ; _object1, . MechanicalState * ; _object2 . ). protected . ◆ ~VectorSpringForceField(). template<class DataTypes > . sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::~VectorSpringForceField. overrideprotectedvirtual . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df1, . DataVecDeriv & ; df2, . const DataVecDeriv & ; dx1, . const DataVecDeriv & ; dx2 . ). overridevirtual . Compute the force derivative given a small displacement from the position and velocity used in the previous call to addForce().; The derivative should be directly derived from the computations done by addForce. Any forces neglected in addDForce will be integrated explicitly (i.e. using its value at the beginning of the timestep).; If the ForceField can be represented as a matrix, this method computes $ df += kFactor K dx + bFactor B dx $; This method must be implemented by the component, and is usually called by the generic PairInteractionForceField::addDForce() method.; To support old components that implement the deprecated addForce method without scalar coefficients, it defaults to using a temporaty vector to compute $ K dx $ and then manually scaling all values by kFactor. ; Implements sofa::core::behavior::PairInteractionForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::VectorSpringForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; f1, . DataVecDeriv & ; f2, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2, . const DataVecDeriv & ; v1, . const DataVecDeriv & ; v2 . ). overridevirtual . Given the curre",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_vector_spring_force_field.html:27213,integrat,integrated,27213,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_vector_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_vector_spring_force_field.html,1,['integrat'],['integrated']
Deployability,"ingLagrangianConstraint< DataTypes >; PairInteractionConstraint< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeLambda(const ConstraintParams *cParams, sofa::core::MultiVecDerivId res, const sofa::linearalgebra::BaseVector *lambda) overridesofa::component::constraint::lagrangian::model::SlidingLagrangianConstraint< DataTypes >virtual; PairInteractionConstraint< DataTypes >::storeLambda(const ConstraintParams *cParams, Data< VecDeriv > &res1, Data< VecDeriv > &res2, const Data< MatrixDeriv > &j1, const Data< MatrixDeriv > &j2, const sofa::linearalgebra::BaseVector *lambda)sofa::core::behavior::PairInteractionConstraint< DataTypes >protected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecConstArea typedefsofa::core::behavior::BaseConstraint; VecConstCoord typedefsofa::core::behavior::BaseConstraint; VecConstDeriv typedefsofa::core::behavior::BaseConstraint; VecConstraintBlockInfo typedefsofa::core::behavior::BaseConstraint; VecCoord typedefsofa::component::constraint::lagrangian::model::SlidingLagrangianConstraint< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::constraint::lagrangian::model::SlidingLagrangianConstraint< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecPersistentID typedefsofa::core::behavior::BaseConstraint; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseConstraint() overridesofa::core::b",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_sliding_lagrangian_constraint-members.html:19927,update,updateLinks,19927,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_sliding_lagrangian_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_sliding_lagrangian_constraint-members.html,1,['update'],['updateLinks']
Deployability,"ing m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (Visual3DText, core::visual::VisualModel);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doDrawVisual (const core::visual::VisualParams *vparams) override;  ; void drawTransparent (const core::visual::VisualParams *vparams) override;  Display transparent surfaces. More...;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void fwdDraw (VisualParams *);  Called before objects in the current branch are displayed. More...;  ; virtual void bwdDraw (VisualParams *);  Called after objects in the current branch are displayed. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void ap",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual3_d_text.html:2864,update,updateVisual,2864,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual3_d_text.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual3_d_text.html,2,['update'],"['update', 'updateVisual']"
Deployability,"inherited from sofa::core::BaseState;  SOFA_ABSTRACT_CLASS (BaseState, objectmodel::BaseObject);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  . Protected Member Functions; void internalDraw (const core::visual::VisualParams *vparams, bool transparent) override;  Rendering method. More...;  ; void drawGroup (int ig, bool transparent);  ; void drawGroups (bool transparent);  ; virtual void pushTransformMatrix (float *matrix);  ; virtual void popTransformMatrix ();  ; GLenum getGLenum (const char *c) const;  ;  OglModel ();  ;  ~OglModel () override;  ;  Protected Member Functions inherited from sofa::component::visual::VisualModelImpl;  VisualModelImpl ();  Default constructor. More...;  ;  ~VisualModelImpl () override;  Default destructor. More...;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model.html:28188,update,update,28188,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model.html,1,['update'],['update']
Deployability,"init()sofa::core::objectmodel::BaseObjectvirtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1basevtkreader_1_1_base_v_t_k_reader-members.html:10875,update,updateInternal,10875,api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1basevtkreader_1_1_base_v_t_k_reader-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1basevtkreader_1_1_base_v_t_k_reader-members.html,12,['update'],"['updateInternal', 'updateLinks']"
Deployability,"ink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  ConfigurationSetting ();  Default constructor. More...;  ;  ~ConfigurationSetting () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html:9424,update,update,9424,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting.html,1,['update'],['update']
Deployability,"ink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  BaseConstraint ();  ;  ~BaseConstraint () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseConstraintSet;  BaseConstraintSet ();  ;  ~BaseConstraintSet () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper m",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_constraint.html:11737,update,update,11737,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_constraint.html,1,['update'],['update']
Deployability,"ink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; MechanicalState< DataTypes > * getMState ();  ; const MechanicalState< DataTypes > * getMState () const;  . Protected Member Functions;  QuadPressureForceField ();  ; virtual ~QuadPressureForceField ();  ; void selectQuadsAlongPlane ();  ; void selectQuadsFromString ();  ; void updateQuadInformation ();  ; void initQuadInformation ();  ; bool isPointInPlane (Coord p);  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected M",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_quad_pressure_force_field.html:17773,update,updateQuadInformation,17773,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_quad_pressure_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_quad_pressure_force_field.html,2,['update'],"['update', 'updateQuadInformation']"
Deployability,"ink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  ~CollisionGroupManager () override;  Destructor. More...;  ; void changeInstance (Instance inst) override;  ;  Protected Member Functions inherited from sofa::core::collision::CollisionAlgorithm;  CollisionAlgorithm ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_group_manager.html:11650,update,update,11650,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_group_manager.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_group_manager.html,1,['update'],['update']
Deployability,"ink::InitLink< OwnerType > &init)sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>inline; SingleLink(const BaseLink::InitLink< OwnerType > &init, DestPtr val)sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>inline; size() constsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; StorePathsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >static; storePath() constsofa::core::objectmodel::BaseLinkinline; TLink()sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; TLink(const InitLink< OwnerType > &init)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; TraitsContainer typedefsofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; TraitsDestPtr typedefsofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; TraitsValueType typedefsofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; updateCounter()sofa::core::objectmodel::BaseLinkinlineprotected; updateLinks()sofa::core::objectmodel::BaseLink; ValidatorFn typedefsofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; value_type typedefsofa::simulation::NodeSingle< T, duplicate >; ValueType typedefsofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; ~BaseLink()sofa::core::objectmodel::BaseLinkvirtual; ~SingleLink()sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>inlinevirtual; ~TLink() overridesofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single-members.html:10681,update,updateCounter,10681,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single-members.html,4,['update'],"['updateCounter', 'updateLinks']"
Deployability,"inkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Additional Inherited Members;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_line_axis.html:14077,update,update,14077,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_line_axis.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_line_axis.html,2,['update'],['update']
Deployability,"inline; InDataTypes typedefsofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes >; Index typedefsofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes >; InMechanicalState typedefsofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes >; mappingsofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes >; MCollisionModel typedefsofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes >; MMapping typedefsofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes >; MMechanicalObject typedefsofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes >; MMechanicalState typedefsofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes >; modelsofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes >; Real typedefsofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes >; resize(Size)sofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes >inlinevirtual; setCollisionModel(MCollisionModel *model)sofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes >inline; update()sofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes >inlinevirtual; updateX0()sofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes >inline; updateXfree()sofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes >inlinevirtual; VecCoord typedefsofa::component::collision::response::mapper::BaseContactMapper< DataTypes >; ~BaseContactMapper()sofa::component::collision::response::mapper::BaseContactMapper< DataTypes >inlinevirtual.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_identity_contact_mapper-members.html:3497,update,update,3497,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_identity_contact_mapper-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_identity_contact_mapper-members.html,2,['update'],"['update', 'updateXfree']"
Deployability,"inlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglFloatVectorVariable, OglVariable< type::vector< float > >)sofa::gl::component::shader::OglFloatVectorVariable; OglVariable< type::vector< float > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< float > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< float > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglFloatVectorVariable()sofa::gl::component::shader::OglFloatVectorVariableinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< type::vector< float > >inlineprotected; ~ShaderElement() overridesofa::core::visual::ShaderElementinlineprotected; ~VisualModel() overr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector_variable-members.html:13732,update,updateVisual,13732,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector_variable-members.html,2,['update'],['updateVisual']
Deployability,"int a, int b, int c, int d, int e=-1);  Should the diagonal of abcd should be bd instead of ac ? More...;  ; bool needFlip (int p1, int p2, int p3, int p4, int q1, int q2, int q3, int q4);  Is the two given vertices order flipped. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called af",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_mesh_tetra_stuffing.html:5945,update,updateAllInputsIfDirty,5945,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_mesh_tetra_stuffing.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_mesh_tetra_stuffing.html,1,['update'],['updateAllInputsIfDirty']
Deployability,"int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(MergeVectors, VecT), core::DataEngine)sofa::component::engine::generate::MergeVectors< VecT >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Value typedefsofa::component::engine::generate::MergeVectors< VecT >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecValue typedefsofa::component::engine::generate::MergeVectors< VecT >; vf_inputssofa::component::engine::generate::MergeVectors< VecT >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~MergeVectors() overridesofa::component::engine::generate::MergeVe",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_vectors-members.html:12320,update,updateIfDirty,12320,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_vectors-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_vectors-members.html,1,['update'],['updateIfDirty']
Deployability,"int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; SOFA_CLASS(TrailRenderer, core::visual::VisualModel)sofa::component::visual::TrailRenderer< DataTypes >; sofa::core::visual::VisualModel::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeParticlePositions()sofa::component::visual::TrailRenderer< DataTypes >protected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; TrailRenderer()sofa::component::visual::TrailRenderer< DataTypes >protected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~VisualModel() overridesofa::core::visual::VisualModelinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_trail_renderer-members.html:11923,update,updateInternal,11923,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_trail_renderer-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_trail_renderer-members.html,4,['update'],"['updateInternal', 'updateLinks', 'updateVisual']"
Deployability,"int::projective::PlaneProjectiveConstraint< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(PlaneProjectiveConstraint, DataTypes), SOFA_TEMPLATE(sofa::core::behavior::ProjectiveConstraintSet, DataTypes))sofa::component::constraint::projective::PlaneProjectiveConstraint< DataTypes >; sofa::core::behavior::ProjectiveConstraintSet::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ProjectiveConstraintSet, DataTypes), BaseProjectiveConstraintSet, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ProjectiveConstraintSet< DataTypes >; SparseMatrix typedefsofa::component::constraint::projective::PlaneProjectiveConstraint< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::constraint::projective::PlaneProjectiveConstraint< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::constraint::projective::PlaneProjectiveConstraint< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseProjectiveConstraintSet() overridesofa::core::behavior::BaseProjectiveConstraintSetinlineprotected; ~PlaneProjectiveConstraint()sofa::component::constraint::projective::PlaneProjectiveConstraint< DataTypes >protectedvirtual; ~ProjectiveConstraintSet() overridesofa::core::behavior::Project",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_plane_projective_constraint-members.html:18381,update,updateLinks,18381,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_plane_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_plane_projective_constraint-members.html,1,['update'],['updateLinks']
Deployability,"internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ init(). template<class DataTypes > . void sofa::component::engine::select::ValuesFromPositions< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ reinit(). template<class DataTypes > . void sofa::component::engine::select::ValuesFromPositions< DataTypes >::reinit. overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_CLASS(). template<class DataTypes > . sofa::component::engine::select::ValuesFromPositions< DataTypes >::SOFA_CLASS ; (; SOFA_TEMPLATE(ValuesFromPositions< DataTypes >, DataTypes) ; , . core::DataEngine ;  . ). ◆ updateValues(). template<class DataTypes > . void sofa::component::engine::select::ValuesFromPositions< DataTypes >::updateValues ; (; TempData & ; _data). protected . ◆ updateVectors(). template<class DataTypes > . void sofa::component::engine::select::ValuesFromPositions< DataTypes >::updateVectors ; (; TempData & ; _data). protected . ◆ valueFromEdge(). template<class DataTypes > . ValuesFromPositions< DataTypes >::Real sofa::component::engine::select::ValuesFromPositions< DataTypes >::valueFromEdge ; (; const Edge & ; e, . const TempData & ; data . ). protected . ◆ valueFromPoint(). template<class DataTypes > . ValuesFromPositions< DataTypes >::Real sofa::component::engine::select::ValuesFromPositions< DataTypes >::valueFromPoint ; (; const PointID & ; pid, . const TempData & ; data . ). protected . ◆ valueFromPosition(). template<class DataTypes > . ValuesFromPositions< DataTypes >::Real sofa::component::engine::select::ValuesFromPositions< DataTypes >::valueFromPosition ; (; const CPos & ; p, . const TempData & ; data . ). protected . ◆ valueFromTetrahedron(). template<class Da",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions.html:24153,update,updateValues,24153,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions.html,1,['update'],['updateValues']
Deployability,"ion::Simulation::init ; (; Node * ; root). virtualdelete . Initialize the objects. . ◆ initNode(). virtual void sofa::simulation::Simulation::initNode ; (; Node * ; node). virtualdelete . Init a node without changing the context of the simulation. . ◆ initTextures(). virtual void sofa::simulation::Simulation::initTextures ; (; Node * ; root). virtualdelete . Initialize the textures. . ◆ isDirectedAcyclicGraph(). virtual bool sofa::simulation::Simulation::isDirectedAcyclicGraph ; (; ). pure virtual . Can the simulation handle a directed acyclic graph? ; Implemented in sofa::simulation::graph::DAGSimulation. ◆ load(). virtual NodeSPtr sofa::simulation::Simulation::load ; (; const std::string & ; , . bool ; reload = false, . const std::vector< std::string > & ; sceneArgs = std::vector< std::string >(0) . ). virtualdelete . Load a scene from a file. . ◆ operator=(). Simulation& sofa::simulation::Simulation::operator= ; (; const Simulation & ; n). delete . ◆ print(). virtual void sofa::simulation::Simulation::print ; (; Node * ; root). virtualdelete . Print all object in the graph. . ◆ reset(). virtual void sofa::simulation::Simulation::reset ; (; Node * ; root). virtualdelete . Reset to initial state. . ◆ unload(). virtual void sofa::simulation::Simulation::unload ; (; NodeSPtr ; root). virtualdelete . Unload a scene from a Node. . ◆ updateContext(). virtual void sofa::simulation::Simulation::updateContext ; (; Node * ; root). virtualdelete . Update contexts. Required before drawing the scene if root flags are modified. . ◆ updateVisual(). virtual void sofa::simulation::Simulation::updateVisual ; (; Node * ; root). virtualdelete . Update the Visual Models: triggers the Mappings. . ◆ updateVisualContext(). virtual void sofa::simulation::Simulation::updateVisualContext ; (; Node * ; root). virtualdelete . Update contexts. Required before drawing the scene if root flags are modified. . sofasimulationSimulation; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html:7559,update,updateContext,7559,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html,15,"['Update', 'update']","['Update', 'updateContext', 'updateVisual', 'updateVisualContext']"
Deployability,"ion::Visitor; paramssofa::simulation::Visitorprotected; processMapping(simulation::Node *node, core::BaseMapping *obj)sofa::simulation::UpdateMappingVisitor; processMechanicalMapping(simulation::Node *, core::BaseMapping *obj)sofa::simulation::UpdateMappingVisitor; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::UpdateMappingVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; UpdateMappingVisitor(const sofa::core::ExecParams *params)sofa::simulation::UpdateMappingVisitorinline; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor-members.html:4305,Update,UpdateMappingVisitor,4305,api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor-members.html,2,['Update'],"['UpdateMappingVisitor', 'UpdateMappingVisitorinline']"
Deployability,ion; ; SOFA - Topic: New approaches to catheter navigation for interventional radiology simulation. /new-build-system; . /page; . /4; ; SOFA - Topic: New build system. SOFA - Topic: New build system. /new-forum-format; . /feed; ; New forum format! – SOFA. SOFA - Topic: New forum format!. /new-mouse-interaction; . /feed; ; [SOLVED] New Mouse Interaction – SOFA. /page; . /13; ; SOFA - Topic: [SOLVED] New Mouse Interaction. /4; ; SOFA - Topic: [SOLVED] New Mouse Interaction. SOFA - Topic: [SOLVED] New Mouse Interaction. /newomnidriver-gnode-cannot-access-protected-member; . /embed; ; SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. /page; . /3; ; SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. /4; ; SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. /new-online-support-sessions; ; SOFA - Topic: New: online support sessions!. /new-release-v16-08; . /feed; ; New Release v16.08! – SOFA. SOFA - Topic: New Release v16.08!. /new-release-v16-12; ; SOFA - Topic: New Release v16.12!. /new-release-v17-12; ; SOFA - Topic: New Release v17.12!. /new-release-v18-06; ; SOFA - Topic: New release v18.06!. /new-sofa-technical-member-amc; ; SOFA - Topic: New SOFA technical member: AMC!. /new-to-sofa-here-are-my-thoughts; ; SOFA - Topic: New to sofa. Here are my thoughts. /new-training-session-scheduled; ; SOFA - Topic: New training session scheduled!. /new-tutorials-for-sofa; ; SOFA - Topic: New tutorials for SOFA. /new-version-of-blender-sofa; . /page; . /4; ; SOFA - Topic: New version of Blender SOFA. SOFA - Topic: New version of Blender SOFA. /new-video-tutorial-howto-configure-and-install-on-linux; ; SOFA - Topic: New video tutorial: HowTo configure and install on Linux. /new-website; . /page; . /10; ; SOFA - Topic: New website !. /11; ; SOFA - Topic: New website !. /5; ; SOFA - Topic: New website !. SOFA - Topic: New website !. /n,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:354649,release,release-,354649,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['release'],['release-']
Deployability,"ion< DataTypes >protected; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(TextureInterpolation, DataTypes), core::DataEngine)sofa::gl::component::engine::TextureInterpolation< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; standardLinearInterpolation()sofa::gl::component::engine::TextureInterpolation< DataTypes >protected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; TextureInterpolation()sofa::gl::component::engine::TextureInterpolation< DataTypes >protected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateGraph()sofa::gl::component::engine::TextureInterpolation< DataTypes >protected; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::gl::component::engine::TextureInterpolation< DataTypes >; VecCoord2D typedefsofa::gl::component::engine::TextureInterpolation< DataTypes >; VecCoord3D typedefsofa::gl::component::engine::TextureInterpolation< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~TextureInterpolation() overridesofa::gl::component::engine::TextureInterpolation< DataTypes >inlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1engine_1_1_texture_interpolation-members.html:13888,update,updateLinks,13888,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1engine_1_1_texture_interpolation-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1engine_1_1_texture_interpolation-members.html,1,['update'],['updateLinks']
Deployability,"ionModel::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPHERE_TYPE enum valuesofa::core::CollisionModel; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; TETRAHEDRON_TYPE enum valuesofa::core::CollisionModel; Topology typedefsofa::core::CollisionModel; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; TRIANGLE_TYPE enum valuesofa::core::CollisionModel; TriangleCollisionModel()sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >protected; TriangleFlag enum namesofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >; TriangleModelInRegularGrid()sofa::component::collision::geometry::TriangleModelInRegularGridprotected; updateFromTopology()sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >protectedvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateNormals()sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >protectedvirtual; userDatasofa::core::CollisionModelprotected; VecCoord typedefsofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; velocity(sofa::Index index) constsofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >inline; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_model_in_regular_grid-members.html:20632,update,updateLinks,20632,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_model_in_regular_grid-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_model_in_regular_grid-members.html,1,['update'],['updateLinks']
Deployability,"ionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::core::visual::ShaderElement;  ShaderElement ();  ;  ~ShaderElement () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader_element.html:12867,update,update,12867,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader_element.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader_element.html,2,['update'],['update']
Deployability,"ionSourceFilePos(const int)sofa::core::objectmodel::Base; setFilename(std::string f)sofa::core::loader::BaseLoader; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(SceneLoader, BaseLoader)sofa::core::loader::SceneLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseLoader() overridesofa::core::loader::BaseLoaderprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~SceneLoader() overridesofa::core::loader::SceneLoaderinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:10258,update,updateInternal,10258,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"ionSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(OdeSolver, objectmodel::BaseObject)sofa::core::behavior::OdeSolver; SOFA_CLASS(RungeKutta2Solver, sofa::core::behavior::OdeSolver)sofa::component::odesolver::forward::RungeKutta2Solver; sofa::core::behavior::OdeSolver::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; solve(const core::ExecParams *params, SReal dt, sofa::core::MultiVecCoordId xResult, sofa::core::MultiVecDerivId vResult) overridesofa::component::odesolver::forward::RungeKutta2Solvervirtual; sofa::core::behavior::OdeSolver::solve(const core::ExecParams *params, SReal dt)sofa::core::behavior::OdeSolverinlinevirtual; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OdeSolver() overridesofa::core::behavior::OdeSolverprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_runge_kutta2_solver-members.html:10808,update,updateInternal,10808,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_runge_kutta2_solver-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_runge_kutta2_solver-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"ionSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(OdeSolver, objectmodel::BaseObject)sofa::core::behavior::OdeSolver; SOFA_CLASS(RungeKutta4Solver, sofa::core::behavior::OdeSolver)sofa::component::odesolver::forward::RungeKutta4Solver; sofa::core::behavior::OdeSolver::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; solve(const core::ExecParams *params, SReal dt, sofa::core::MultiVecCoordId xResult, sofa::core::MultiVecDerivId vResult) overridesofa::component::odesolver::forward::RungeKutta4Solvervirtual; sofa::core::behavior::OdeSolver::solve(const core::ExecParams *params, SReal dt)sofa::core::behavior::OdeSolverinlinevirtual; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OdeSolver() overridesofa::core::behavior::OdeSolverprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_runge_kutta4_solver-members.html:10808,update,updateInternal,10808,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_runge_kutta4_solver-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_runge_kutta4_solver-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"ions inherited from sofa::core::collision::NarrowPhaseDetection;  SOFA_ABSTRACT_CLASS (NarrowPhaseDetection, Detection);  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; virtual void endNarrowPhase ();  ; size_t getPrimitiveTestCount () const;  ; const DetectionOutputMap & getDetectionOutputs () const;  ; DetectionOutputVector *& getDetectionOutputs (CollisionModel *cm1, CollisionModel *cm2);  ; bool zeroCollision () const;  . Protected Member Functions;  IncrSAP ();  ;  ~IncrSAP () override;  ;  Protected Member Functions inherited from sofa::core::collision::BroadPhaseDetection;  ~BroadPhaseDetection () override=default;  Destructor. More...;  ; void changeInstanceBP (Instance inst) override;  ;  Protected Member Functions inherited from sofa::core::collision::Detection;  Detection ();  ; void changeInstance (Instance inst) override;  ;  Protected Member Functions inherited from sofa::core::collision::CollisionAlgorithm;  CollisionAlgorithm ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplaye",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_incr_s_a_p.html:12659,update,update,12659,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_incr_s_a_p.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_incr_s_a_p.html,1,['update'],['update']
Deployability,"ions;  CollisionResponse ();  ;  ~CollisionResponse () override=default;  ; void changeInstance (Instance inst) override;  ; void contactCreationError (std::stringstream &errorStream, const core::CollisionModel *model1, const core::CollisionModel *model2, std::string &responseUsed);  Write messages in stringstream in case a contact failed to be created. More...;  ; void createNewContacts (const DetectionOutputMap &outputsMap, Size &nbContact);  Create contacts if it has not been created before. More...;  ; void removeInactiveContacts (const DetectionOutputMap &outputsMap, Size &nbContact);  ; void setNumberOfContacts () const;  ;  Protected Member Functions inherited from sofa::core::collision::ContactManager;  ContactManager ();  Constructor. More...;  ;  ~ContactManager () override;  Destructor. More...;  ; void changeInstance (Instance inst) override;  ;  Protected Member Functions inherited from sofa::core::collision::CollisionAlgorithm;  CollisionAlgorithm ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_collision_response.html:15043,update,update,15043,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_collision_response.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_collision_response.html,1,['update'],['update']
Deployability,"ions;  LinkWidget (QWidget *parent, const char *, MyLink *l);  ;  ~LinkWidget () override;  ; virtual void setLink (MyLink *d);  ; const core::objectmodel::BaseLink * getBaseLink () const;  BaseLink pointer accessor function. More...;  ; core::objectmodel::BaseLink * getBaseLink ();  ; void updateVisibility ();  ; bool isDirty ();  ; virtual bool createWidgets ()=0;  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  . Static Public Member Functions; static LinkWidget * CreateLinkWidget (const LinkWidget::CreatorArgument &dwarg);  . Protected Member Functions; virtual void readFromLink ()=0;  The implementation of this method tells how the widget reads the value of the link. More...;  ; virtual void writeToLink ()=0;  . Signals; void WidgetDirty (bool);  ; void LinkOwnerDirty (bool);  ; void LinkBeingChanged ();  . Public Slots; void updateLinkValue ();  ; void updateWidgetValue ();  ; void setWidgetDirty ();  ; void setWidgetDirty (bool b);  . Attribute details. ◆ baseLink. core::objectmodel::BaseLink* sofa::gui::qt::LinkWidget::baseLink. protected . ◆ counter. int sofa::gui::qt::LinkWidget::counter. protected . ◆ dirty. bool sofa::gui::qt::LinkWidget::dirty. protected . Constructor details. ◆ LinkWidget(). sofa::gui::qt::LinkWidget::LinkWidget ; (; QWidget * ; parent, . const char * ; , . MyLink * ; l . ). inline . ◆ ~LinkWidget(). sofa::gui::qt::LinkWidget::~LinkWidget ; (; ). inlineoverride . Function details. ◆ CreateLinkWidget(). LinkWidget * sofa::gui::qt::LinkWidget::CreateLinkWidget ; (; const LinkWidget::CreatorArgument & ; dwarg). static . ◆ createWidgets(). virtual bool sofa::gui::qt::LinkWidget::createWidgets ; (; ). pure virtual . The implementation of this method holds the widget creation and the signal / slot connections. ; Implemented in sofa::gui::qt::QLinkSimpleEdit. ◆ getBaseLink() [1/2]. core::objectmodel::BaseLink* sofa::gui::qt::LinkWidg",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_link_widget.html:1706,update,updateLinkValue,1706,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_link_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_link_widget.html,4,['update'],"['updateLinkValue', 'updateWidgetValue']"
Deployability,"ior::StateAccessor::SOFA_ABSTRACT_CLASS(StateAccessor, objectmodel::BaseObject)sofa::core::behavior::StateAccessor; sofa::core::behavior::SingleStateAccessor::SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(QuadularBendingSprings, DataTypes), SOFA_TEMPLATE(core::behavior::ForceField, DataTypes))sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >; ForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMatrixsofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >protected; VecCoord typedefsofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ForceField() overridesofa::core::behavior::ForceField< DataTypes >pr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs-members.html:18282,update,updateInternal,18282,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs-members.html,1,['update'],['updateInternal']
Deployability,"ior::StateAccessor; SingleStateAccessor< TDataTypes >::SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(SingleStateAccessor, TDataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< TDataTypes >; SOFA_CLASS(SOFA_TEMPLATE(AffineMovementProjectiveConstraint, TDataTypes), SOFA_TEMPLATE(sofa::core::behavior::ProjectiveConstraintSet, TDataTypes))sofa::component::constraint::projective::AffineMovementProjectiveConstraint< TDataTypes >; ProjectiveConstraintSet< TDataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ProjectiveConstraintSet, TDataTypes), BaseProjectiveConstraintSet, SOFA_TEMPLATE(SingleStateAccessor, TDataTypes))sofa::core::behavior::ProjectiveConstraintSet< TDataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::constraint::projective::AffineMovementProjectiveConstraint< TDataTypes >; VecCoord typedefsofa::component::constraint::projective::AffineMovementProjectiveConstraint< TDataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::constraint::projective::AffineMovementProjectiveConstraint< TDataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; x0sofa::component::constraint::projective::AffineMovementProjectiveConstraint< TDataTypes >; xfsofa::component::constraint::projective::AffineMovementProjectiveConstraint< TDataTypes >; ~AffineMovementProjectiveConstraint()sofa::component::co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_affine_movement_projective_constraint-members.html:19440,update,updateInternal,19440,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_affine_movement_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_affine_movement_projective_constraint-members.html,1,['update'],['updateInternal']
Deployability,"ior::StateAccessor; SingleStateAccessor< TDataTypes >::SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(SingleStateAccessor, TDataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< TDataTypes >; SOFA_CLASS(SOFA_TEMPLATE(LinearMovementProjectiveConstraint, TDataTypes), SOFA_TEMPLATE(sofa::core::behavior::ProjectiveConstraintSet, TDataTypes))sofa::component::constraint::projective::LinearMovementProjectiveConstraint< TDataTypes >; ProjectiveConstraintSet< TDataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ProjectiveConstraintSet, TDataTypes), BaseProjectiveConstraintSet, SOFA_TEMPLATE(SingleStateAccessor, TDataTypes))sofa::core::behavior::ProjectiveConstraintSet< TDataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::constraint::projective::LinearMovementProjectiveConstraint< TDataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::constraint::projective::LinearMovementProjectiveConstraint< TDataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; x0sofa::component::constraint::projective::LinearMovementProjectiveConstraint< TDataTypes >; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseProjectiveConstraintSet() overridesofa::core::behavior::BaseProjectiveConstraintSetinlineprotected; ~LinearMovementProjective",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_linear_movement_projective_constraint-members.html:19563,update,updateInternal,19563,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_linear_movement_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_linear_movement_projective_constraint-members.html,1,['update'],['updateInternal']
Deployability,"irectly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was inserted ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ removeInNode(). bool sofa::core::behavior::OdeSolver::removeInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can remove itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was removed ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_ABSTRACT_CLASS(). sofa::core::behavior::OdeSolver::SOFA_ABSTRACT_CLASS ; (; OdeSolver ; , . objectmodel::BaseObject ;  . ). ◆ solve() [1/2]. virtual void sofa::core::behavior::OdeSolver::solve ; (; const core::ExecParams * ; , . SReal ; , . MultiVecCoordId ; , . MultiVecDerivId ;  . ). pure virtual . Main computation method.; Specify and execute all computation for timestep integration, i.e. advancing the state from time t to t+dt, putting the resulting position and velocity in the provided vectors. ; Implemented in sofa::component::odesolver::backward::StaticSolver, sofa::component::odesolver::forward::RungeKutta4Solver, sofa::component::odesolver::forward::RungeKutta2Solver, sofa::component::odesolver::forward::EulerExplicitSolver, sofa::component::odesolver::forward::DampVelocitySolver, sofa::component::odesolver::forward::CentralDifferenceSolver, sofa::component::odesolver::backward::VariationalSymplecticSolver, sofa::component::odesolver::backward::NewmarkImplicitSolver, and sofa::component::odesolver::backward::EulerImplicitSolver. ◆ solve() [2/2]. virtual void sofa::core::behavior::OdeSolver::solve ; (; const core::ExecParams * ; params, . SReal ; dt . ). inlinevirtual . Main computation method.; Specify and execute all computation for timestep integration, i.e. advancing the state from time t to t+dt. . sofacorebehaviorOdeSolver; Generated on Mon Nov 11 2024 03:15:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_ode_solver.html:20165,integrat,integration,20165,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_ode_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_ode_solver.html,1,['integrat'],['integration']
Deployability,"ired(). void sofa::core::objectmodel::BaseData::setRequired ; (; bool ; b). inline . Set whether the Data has to be set by the user for the owner component to be valid. . ◆ setWidget(). void sofa::core::objectmodel::BaseData::setWidget ; (; const char * ; val). inline . Set widget. . ◆ SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME(). template<class T > . sofa::core::objectmodel::BaseData::SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME ; (; ). inline . ◆ typeName(). template<class T > . static std::string sofa::core::objectmodel::BaseData::typeName ; (; ). inlinestatic . Helper method to get the type name of type T. . ◆ unset(). void sofa::core::objectmodel::BaseData::unset ; (; ). inline . Reset the isSet flag to false, to indicate that the current value is the default for this Data. . ◆ update(). void sofa::core::objectmodel::BaseData::update ; (; ). overridevirtual . Update the value of this Data. ; Implements sofa::core::objectmodel::DDGNode. ◆ updateValueFromLink(). bool sofa::core::objectmodel::BaseData::updateValueFromLink ; (; const BaseData * ; data). ◆ validParent(). bool sofa::core::objectmodel::BaseData::validParent ; (; const BaseData * ; parent). virtual . Check if a given Data can be linked as a parent of this data. . Enum details. ◆ anonymous enum. anonymous enum. Default value used for flags. . EnumeratorFLAG_DEFAULT . ◆ DataFlagsEnum. enum sofa::core::objectmodel::BaseData::DataFlagsEnum. Flags that describe some properties of a Data, and that can be OR'd together. . EnumeratorFLAG_NONE Means ""no flag"" when a value is required. . FLAG_READONLY The Data will be read-only in GUIs. . FLAG_DISPLAYED The Data will be displayed in GUIs. . FLAG_PERSISTENT The Data contains persistent information. . FLAG_AUTOLINK The Data should be autolinked when using the src=""..."" syntax. . FLAG_REQUIRED True if the Data has to be set for the owner component to be valid (a warning is displayed at init otherwise) . FLAG_ANIMATION_INSTANCE ; FLA",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:146883,update,updateValueFromLink,146883,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,1,['update'],['updateValueFromLink']
Deployability,"irtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject.; Reimplemented in sofa::simulation::DefaultAnimationLoop. ◆ insertInNode(). bool sofa::core::behavior::BaseAnimationLoop::insertInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can insert itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was inserted ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ removeInNode(). bool sofa::core::behavior::BaseAnimationLoop::removeInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can remove itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was removed ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_ABSTRACT_CLASS(). sofa::core::behavior::BaseAnimationLoop::SOFA_ABSTRACT_CLASS ; (; BaseAnimationLoop ; , . objectmodel::BaseObject ;  . ). ◆ step(). virtual void sofa::core::behavior::BaseAnimationLoop::step ; (; const core::ExecParams * ; params, . SReal ; dt . ). pure virtual . Main computation method.; Specify and execute all computations for computing a timestep, such as one or more collisions and integrations stages. ; Implemented in sofa::simulation::DefaultAnimationLoop, sofa::component::animationloop::MultiTagAnimationLoop, sofa::component::animationloop::MultiStepAnimationLoop, sofa::component::animationloop::FreeMotionAnimationLoop, and sofa::component::animationloop::ConstraintAnimationLoop. ◆ storeResetState(). void sofa::core::behavior::BaseAnimationLoop::storeResetState ; (; ). overrideprotectedvirtual . Save the initial state for later uses in reset() ; Reimplemented from sofa::core::objectmodel::BaseObject. sofacorebehaviorBaseAnimationLoop; Generated on Mon Nov 11 2024 03:15:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_animation_loop.html:16225,integrat,integrations,16225,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_animation_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_animation_loop.html,1,['integrat'],['integrations']
Deployability,"irtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doUpdate ()=0;  Where you put your engine's impl. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_engine.html:12204,update,update,12204,api/master/sofa/html/classsofa_1_1core_1_1_data_engine.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_engine.html,1,['update'],['update']
Deployability,"irtual void sofa::core::topology::TopologyHandler::ApplyTopologyChange ; (; const TopologyChangeElementInfo< Topology::Triangle >::EMoved * ; ). inlinevirtual . ◆ ApplyTopologyChanges(). void sofa::core::topology::TopologyHandler::ApplyTopologyChanges ; (; const std::list< const core::topology::TopologyChange * > & ; _topologyChangeEvents, . const Size ; _dataSize . ). virtual . ◆ getName(). std::string sofa::core::topology::TopologyHandler::getName ; (; ). inline . ◆ getNumberOfTopologicalChanges(). size_t sofa::core::topology::TopologyHandler::getNumberOfTopologicalChanges ; (; ). ◆ handleTopologyChange(). virtual void sofa::core::topology::TopologyHandler::handleTopologyChange ; (; ). inlinevirtual . Reimplemented in sofa::core::topology::TopologyDataHandler< ElementType, VecT >. ◆ isTopologyHandlerRegistered(). bool sofa::core::topology::TopologyHandler::isTopologyHandlerRegistered ; (; ); const. inline . Method to get the information if this topologyHandler is registered into a Topology Container. . ◆ registerTopology(). bool sofa::core::topology::TopologyHandler::registerTopology ; (; sofa::core::topology::BaseMeshTopology * ; _topology, . bool ; printLog = false . ). virtual . Function to link the topological Data with the engine and the current topology. And init everything. This function should be used at the end of the all declaration link to this Data while using it in a component. . ◆ setNamePrefix(). void sofa::core::topology::TopologyHandler::setNamePrefix ; (; const std::string & ; s). inline . ◆ unregisterTopologyHandler(). void sofa::core::topology::TopologyHandler::unregisterTopologyHandler ; (; ). inline . Method to notify that this topologyHandler is not anymore registerd into a Topology Container. . ◆ update(). void sofa::core::topology::TopologyHandler::update ; (; ). overridevirtual . Update this value. ; Implements sofa::core::objectmodel::DDGNode. sofacoretopologyTopologyHandler; Generated on Mon Nov 11 2024 03:16:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_handler.html:21250,update,update,21250,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_handler.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_handler.html,2,['update'],['update']
Deployability,"irtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~VisualModel() overridesofa::core::visual::VisualModelinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_model-members.html:10922,update,updateInternal,10922,api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_model-members.html,4,['update'],"['updateInternal', 'updateLinks', 'updateVisual']"
Deployability,"irty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  . Protected Member Functions; virtual void readFromData ();  Implements how update the widgets knowing the data value. More...;  ; virtual void writeToData ();  Implements how to update the data, knowing the widget value. More...;  . Protected Slots; virtual void raiseDialog ();  . Additional Inherited Members;  Static Public Member Functions inherited from sofa::gui::qt::TDataWidget< std::string >; static RealObject * create (RealObject *, CreatorArgument &arg);  ;  Static Public Member Functions inherited from sofa::gui::qt::DataWidget; template<class T > ; static T * create (T *, const CreatorArgument &arg);  ; static DataWidget * CreateDataWidget (const DataWidget::CreatorArgument &dwarg);  ;  Signals inherited from sofa::gui::qt::DataWidget; void WidgetDirty (bool);  ; void DataOwnerDirty (bool);  ; void dataValueChanged (QString dataValueString);  ;  Public Slots inherited from sofa::gui::qt::DataWidget; void updateDataValue ();  ; void updateWidgetValue ();  ; void setWidgetDirty (bool b=true);  ; void fillFromData ();  . Attribute details. ◆ openFileButton. QPushButton* sofa::gui::qt::DataFileNameWidget::openFileButton. protected . ◆ openFilePath. QLineEdit* sofa::gui::qt::DataFileNameWidget::openFilePath. protected . Constructor details. ◆ DataFileNameWidget(). sofa::gui::qt::DataFileNameWidget::DataFileNameWidget ; (; QWidget * ; parent, . const char * ; name, . core::objectmodel::Data< std::string > * ; data . ). inline . Function details. ◆ createWidgets(). bool sofa::gui::qt::DataFileNameWidget::createWidgets ; (; ). virtual . The implementation of this method holds the widget creation and the signal / slot connections. ; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_file_name_widget.html:3259,update,updateDataValue,3259,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_file_name_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_file_name_widget.html,4,['update'],"['updateDataValue', 'updateWidgetValue']"
Deployability,"is object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  SparseGridTopology (bool _isVirtual=false);  ;  SparseGridTopology (type::Vec3i numVertices, type::BoundingBox box, bool _isVirtual=false);  Define using the resolution and the spatial size. The resolution corresponds to the number of points if all the cells were filled. More...;  ; virtual void updateEdges ();  ; virtual void updateQuads ();  ; void launchPropagationFromSeed (const type::Vec3i &point, sofa::core::sptr< RegularGridTopology > regularGrid, type::vector< Type > &regularGrdidTypes, type::vector< bool > &alreadyTested, std::stack< type::Vec3i > &seed) const;  start from a seed cell (i,j,k) the OUTSIDE filling is propagated to neighboor cells until meet a BOUNDARY cell (this function is called from all border cells of the RegularGrid) More...;  ; void propagateFrom (const type::Vec3i &point, sofa::core::sptr< RegularGridTopology > regularGrid, type::vector< Type > &regularGridTypes, type::vector< bool > &alreadyTested, std::stack< sofa::type::Vec< 3, int > > &seed) const;  ; void computeBoundingBox (const type::vector< type::Vec3 > &vertices, SReal &xmin, SReal &xmax, SReal &ymin, SReal &ymax, SReal &zmin, SReal &zmax) const;  ; void voxelizeTriangleMesh (helper::io::Mesh *mesh, sofa::core::sptr< RegularGridTopology > regularGrid, type::vector< Type > &regularGridTypes) const;  ; void buildFromTriangleMesh (sofa::helper::io::Mesh *mesh);  ; void buildFromRegularGridTypes (sofa::core::sptr< RegularGridTopology > regularGrid, const type::vector< Type > &regularGridTypes);  ; void buildF",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_topology.html:39989,update,updateEdges,39989,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_topology.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_topology.html,2,['update'],"['updateEdges', 'updateQuads']"
Deployability,"is object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; MechanicalState< DataTypes > * getMState ();  ; const MechanicalState< DataTypes > * getMState () const;  . Protected Member Functions;  ConicalForceField ();  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initD",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_conical_force_field.html:16540,update,update,16540,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_conical_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_conical_force_field.html,1,['update'],['update']
Deployability,"is object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; MechanicalState< DataTypes > * getMState ();  ; const MechanicalState< DataTypes > * getMState () const;  . Protected Member Functions;  SphereForceField ();  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initD",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_sphere_force_field.html:17318,update,update,17318,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_sphere_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_sphere_force_field.html,1,['update'],['update']
Deployability,"isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Static Public Member Functions; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  . Protected Member Functions; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Attribute details. ◆ group. std::string sofa::core::objectmodel::BaseData::group {""""}. group . ◆ help. std::string sofa::core::objectmodel::BaseData::help {""""}. Help message. . ◆ m_counter. int sofa::core::objectmodel::BaseData::m_counter. Number of changes since creation. . ◆ m_dataFlags. DataFlags sofa::core::objectmodel::BaseData::m_dataFlags. Flags indicating the purpose and behaviour of this Data. . ◆ m_hasDefaultValue. bool sofa::co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:8096,update,update,8096,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,1,['update'],['update']
Deployability,"isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData(Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseprotected; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags)sofa::core::objectmodel::Baseprotected; initData0(Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinlineprotected; insertInNode(objectmodel::BaseNode *node) overridesofa::core::behavior::BaseAnimationLoopvirtual; integrate(const core::ExecParams *params, SReal dt)sofa::simulation::CollisionAnimationLoopprotectedvirtual; integrationStepssofa::component::animationloop::MultiStepAnimationLoop; internalCollisionComputation(const core::ExecParams *params=core::execparams::defaultInstance())sofa::simulation::CollisionAnimationLoopprotectedvirtual; isComponentStateValid() constsofa::core::objectmodel::Baseinline; l_contextsofa::core::objectmodel::BaseObjectprotected; l_mastersofa::core::objectmodel::BaseObjectprotected; l_nodesofa::core::behavior::BaseAnimationLoop; l_slavessofa::core::objectmodel::BaseObjectprotected; LinkSlaves typedefsofa::core::objectmodel::BaseObject; m_aliasDatasofa::core::objectmodel::Baseprotected; m_aliasLinksofa::core::objectmodel::Baseprotected; m_definitionSourceFileNamesofa::core::objectmodel::Base; m_definitionSourceFilePossofa::core::objectmodel::Base; m_instanciationSourceFileNamesofa::core::objectmodel::Base; m_instanciationSourceFilePossofa::core::objectmodel::Base; m_internalEnginesofa::core::objectmodel::Baseprotected; m_oldAttributessofa::core::objectmodel::Base; m_resetTimesofa::c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_multi_step_animation_loop-members.html:7723,integrat,integrationStepssofa,7723,api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_multi_step_animation_loop-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_multi_step_animation_loop-members.html,1,['integrat'],['integrationStepssofa']
Deployability,iscover-and-learn-sofa-at-ismar2017; ; SOFA – SOFA training: discover and learn SOFA at ISMAR 2017. /sofa-v16-12-has-been-released; ; SOFA – SOFA v16.12 has been released!. /sofa-v17-06-has-been-released; ; SOFA – SOFA v17.06 has been released!. /sofa-v17-12-has-been-released; ; SOFA – SOFA v17.12 has been released!. /sofa-v18-06-has-been-released; ; SOFA – SOFA v18.06 has been released!. /sofa-v18-12-has-been-released; ; SOFA – SOFA v18.12 has been released!. /sofa-v19-06-has-been-released; ; SOFA – SOFA v19.06 has been released!. /sofa-v19-12-has-been-released; ; SOFA – SOFA v19.12 has been released!. /sofa-v20-06-has-been-released; ; SOFA – SOFA v20.06 has been released!. /sofa-v20-12-has-been-released; ; SOFA – SOFA v20.12 has been released!. /sofa-v21-06-has-been-released; ; SOFA – SOFA v21.06 has been released!. /sofa-v21-12-has-been-released; ; SOFA – SOFA v21.12 has been released!. /sofa-v22-06-has-been-released; ; SOFA – SOFA v22.06 has been released!. /sofa-v22-12-has-been-released; ; SOFA – SOFA v22.12 has been released!. /sofa-v23-06-has-been-released; ; SOFA – SOFA v23.06 has been released!. /sofa-v23-12-has-been-released; ; SOFA – SOFA v23.12 has been released!. /sofa-v24-06-has-been-released; ; SOFA – SOFA v24.06 has been released!. /sofa-week-2018-experience; ; SOFA – SOFA Week 2018 Experience. /sofa-week-2021-register-now; ; SOFA – SOFA Week 2021: register now!. /sofa-week-2022-register-now; ; SOFA – SOFA Week 2022: register now!. /sofa-week-2023-register-now; ; SOFA – SOFA Week 2023: register now!. /sofa-week-2024-registration-is-open; ; SOFA – SOFA Week 2024: registration is open!. /soft-robotics-summer-school-in-lille; ; SOFA – Soft-Robotics Summer School in Lille. /softrobots-inverse-plugin-open-source-release; ; SOFA – SoftRobots.Inverse plugin open-source release!. /spin-offs-from-sofa-against-covid-19; ; SOFA – Spin-offs from SOFA against Covid-19. /stc11-join-us-in-june-to-design-the-sofa-roadmap; ; SOFA – STC#11: join us in June to design th,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:9542,release,released,9542,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['release'],['released']
Deployability,"ision::geometry::Sphere &sph1, collision::geometry::Sphere &sph2, OutputVector *)=delete;  ; virtual bool testIntersection (collision::geometry::RigidSphere &sph1, collision::geometry::RigidSphere &sph2)=delete;  ; virtual int computeIntersection (collision::geometry::RigidSphere &sph1, collision::geometry::RigidSphere &sph2, OutputVector *)=delete;  ; virtual bool testIntersection (collision::geometry::Sphere &sph1, collision::geometry::RigidSphere &sph2)=delete;  ; virtual int computeIntersection (collision::geometry::Sphere &sph1, collision::geometry::RigidSphere &sph2, OutputVector *)=delete;  ;  Public Member Functions inherited from sofa::core::collision::Intersection;  SOFA_ABSTRACT_CLASS (Intersection, objectmodel::BaseObject);  ; virtual bool isSupported (core::CollisionElementIterator elem1, core::CollisionElementIterator elem2);  ; virtual bool useProximity () const;  returns true if algorithm uses proximity detection More...;  ; virtual bool useContinuous () const;  returns true if algorithm uses continuous detection More...;  ; virtual SReal getAlarmDistance () const;  Return the alarm distance (must return 0 if useProximity() is false) More...;  ; virtual SReal getContactDistance () const;  Return the contact distance (must return 0 if useProximity() is false) More...;  ; virtual void setAlarmDistance (SReal);  Set the alarm distance (must return 0 if useProximity() is false) More...;  ; virtual void setContactDistance (SReal);  Set the contact distance (must return 0 if useProximity() is false) More...;  ; virtual void beginBroadPhase ();  Actions to accomplish when the broadPhase is started. By default do nothing. More...;  ; virtual void endBroadPhase ();  Actions to accomplish when the broadPhase is finished. By default do nothing. More...;  ; virtual void beginNarrowPhase ();  Actions to accomplish when the narrow Phase is started. By default do nothing. More...;  ; virtual void endNarrowPhase ();  Actions to accomplish when the narrow Phase is fi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_discrete_intersection.html:4775,continuous,continuous,4775,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_discrete_intersection.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_discrete_intersection.html,1,['continuous'],['continuous']
Deployability,"ision::response::mapper::SubsetContactMapper< TCollisionModel, DataTypes >, sofa::component::collision::response::mapper::RigidContactMapper< TCollisionModel, DataTypes >, sofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::CylinderCollisionModel< sofa::defaulttype::Rigid3Types >, TVec3Types >, sofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::RigidSphereModel, TVec3Types >, sofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, typename TCollisionModel::InDataTypes >, sofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes >, sofa::component::collision::response::mapper::IdentityContactMapper< collision::geometry::PointCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >, and sofa::component::collision::response::mapper::IdentityContactMapper< collision::geometry::SphereCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >. ◆ updateXfree(). template<class TDataTypes > . virtual void sofa::component::collision::response::mapper::BaseContactMapper< TDataTypes >::updateXfree ; (; ). pure virtual . Implemented in sofa::component::collision::response::mapper::BarycentricContactMapper< TCollisionModel, TDataTypes >, sofa::component::collision::response::mapper::BarycentricContactMapper< collision::geometry::LineCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >, sofa::component::collision::response::mapper::BarycentricContactMapper< collision::geometry::TetrahedronCollisionModel, DataTypes >, sofa::component::collision::response::mapper::BarycentricContactMapper< collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >, sofa::component::collision::response::mapper::SubsetContactMapper< TCollisionModel, DataTypes >, sofa::component::collision::response::mapper::RigidContactMapper< TCollisionModel, DataTypes >, sofa::component::collision::response::mapper::RigidContactMapper< coll",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_base_contact_mapper.html:10102,update,updateXfree,10102,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_base_contact_mapper.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_base_contact_mapper.html,1,['update'],['updateXfree']
Deployability,isme as well as DataEngines. . Protected Attributes; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; virtual void update ()=0;  Update this value. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Attribute details. ◆ inputs. DDGLinkContainer sofa::core::objectmodel::DDGNode::inputs. protected . ◆ outputs. DDGLinkContainer sofa::core::objectmodel::DDGNode::outputs. protected . Constructor details. ◆ DDGNode(). sofa::core::objectmodel::DDGNode::DDGNode ; (,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html:1898,update,updated,1898,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_d_d_g_node.html,1,['update'],['updated']
Deployability,"ist of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (PrimitiveUpdate, sofa::core::DataEngine);  ;  PrimitiveUpdate (MeshTopology *t);  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called af",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology_1_1_primitive_update.html:2359,update,updateAllInputsIfDirty,2359,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology_1_1_primitive_update.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology_1_1_primitive_update.html,1,['update'],['updateAllInputsIfDirty']
Deployability,"ist of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(MeshClosingEngine, DataTypes), Inherited);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_mesh_closing_engine.html:3027,update,update,3027,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_mesh_closing_engine.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_mesh_closing_engine.html,1,['update'],['update']
Deployability,"ist, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; for_each(VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; getCategoryName() const overridesofa::simulation::UpdateMappingVisitorinlinevirtual; getClassName() const overridesofa::simulation::UpdateMappingVisitorinlinevirtual; getInfos() constsofa::simulation::Visitorinlinevirtual; isThreadSafe() const overridesofa::simulation::UpdateMappingVisitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processMapping(simulation::Node *node, core::BaseMapping *obj)sofa::simulation::UpdateMappingVisitor; processMechanicalMapping(simulation::Node *, core::BaseMapping *obj)sofa::simulation::UpdateMappingVisitor; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::UpdateMappingVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor-members.html:2667,Update,UpdateMappingVisitor,2667,api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor-members.html,1,['Update'],['UpdateMappingVisitor']
Deployability,"ist=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(AbstractTransformMatrixEngine, core::DataEngine)sofa::component::engine::transform::AbstractTransformMatrixEngine; sofa::core::DataEngine::SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(ScaleTransformMatrixEngine, AbstractTransformMatrixEngine)sofa::component::engine::transform::ScaleTransformMatrixEngine; sofa::component::engine::transform::AbstractTransformMatrixEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~AbstractTransformMatrixEngine() overridesofa::component::engine::transform::AbstractTransformMatrixEngineinlineprotected; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~ScaleTransformMatrixEngine() overridesofa::comp",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_scale_transform_matrix_engine-members.html:12616,update,update,12616,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_scale_transform_matrix_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_scale_transform_matrix_engine-members.html,1,['update'],['update']
Deployability,"ist=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseController, core::objectmodel::BaseObject)sofa::core::behavior::BaseController; SOFA_CLASS(SOFA_TEMPLATE(MechanicalStateController, DataTypes), Controller)sofa::component::controller::MechanicalStateController< DataTypes >; sofa::component::controller::Controller::SOFA_CLASS(Controller, core::behavior::BaseController)sofa::component::controller::Controller; sofa::core::behavior::BaseController::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::controller::MechanicalStateController< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::controller::MechanicalStateController< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; Wheel enum valuesofa::component::controller::MechanicalStateController< DataTypes >protected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~Controller() overridesofa::component::controller::Controllerprotected; ~MechanicalStateController() overridesofa::component::controller::MechanicalStateController< DataTypes >inlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1controller_1_1_mechanical_state_controller-members.html:14973,update,updateLinks,14973,api/master/sofa/html/classsofa_1_1component_1_1controller_1_1_mechanical_state_controller-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1controller_1_1_mechanical_state_controller-members.html,1,['update'],['updateLinks']
Deployability,"ist=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Index, sofa::Index)sofa::component::engine::transform::MapIndices< T >; SOFA_CLASS(SOFA_TEMPLATE(MapIndices, T), core::DataEngine)sofa::component::engine::transform::MapIndices< T >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Value typedefsofa::component::engine::transform::MapIndices< T >; VecData typedefsofa::core::objectmodel::Base; VecIndex typedefsofa::component::engine::transform::MapIndices< T >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecValue typedefsofa::component::engine::transform::MapIndices< T >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~MapIndices() overridesofa::component::engine::transform::MapIndices< T >protected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_map_indices-members.html:12956,update,updateInternal,12956,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_map_indices-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_map_indices-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"isual::BaseCamera; STEREO_FRAME_PACKING enum valuesofa::component::visual::BaseCamera; STEREO_INTERLACED enum valuesofa::component::visual::BaseCamera; STEREO_NONE enum valuesofa::component::visual::BaseCamera; STEREO_SIDE_BY_SIDE enum valuesofa::component::visual::BaseCamera; STEREO_SIDE_BY_SIDE_HALF enum valuesofa::component::visual::BaseCamera; STEREO_TOP_BOTTOM enum valuesofa::component::visual::BaseCamera; STEREO_TOP_BOTTOM_HALF enum valuesofa::component::visual::BaseCamera; StereoMode enum namesofa::component::visual::BaseCamera; StereoStrategy enum namesofa::component::visual::BaseCamera; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; TOEDIN enum valuesofa::component::visual::BaseCamera; toRay() constsofa::component::visual::BaseCamera; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; translate(const type::Vec3 &t)sofa::component::visual::BaseCamera; translateLookAt(const type::Vec3 &t)sofa::component::visual::BaseCamera; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateOutputData()sofa::component::visual::BaseCameraprotected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; viewportPointToRay(const type::Vec3 &p)sofa::component::visual::BaseCamera; viewportToScreenPoint(const type::Vec3 &p) constsofa::component::visual::BaseCamera; viewportToWorldPoint(const type::Vec3 &p)sofa::component::visual::BaseCamera; worldToCameraCoordinates(const type::Vec3 &p)sofa::component::visual::BaseCamera; worldToCameraTransform(const type::Vec3 &v)sofa::component::visual::BaseCamera; worldToScreenCoordinates(const type::Vec3 &p)sofa::component::visual::BaseCamera; worldToScreenPoint(const type::Vec3 &p)sofa::component::visual::BaseCamera; worldToViewportPoint(const type::Vec3 &p)sofa::component::visual::BaseCamera; writeDatas(std::map< std::string, std:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_base_camera-members.html:17695,update,updateInternal,17695,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_base_camera-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_base_camera-members.html,2,['update'],['updateInternal']
Deployability,"isual::VisualModel);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doDrawVisual (const core::visual::VisualParams *vparams) override;  ; void drawTransparent (const core::visual::VisualParams *vparams) override;  Display transparent surfaces. More...;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void fwdDraw (VisualParams *);  Called before objects in the current branch are displayed. More...;  ; virtual void bwdDraw (VisualParams *);  Called after objects in the current branch are displayed. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const type::Quat< SReal >);  ; virtual void applyScale (const SReal, const SReal, const SReal);  ; virtual void exportOBJ (std::str",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual3_d_text.html:2966,update,updateVisual,2966,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual3_d_text.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual3_d_text.html,1,['update'],['updateVisual']
Deployability,"isualGrid () override=default;  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doDrawVisual (const core::visual::VisualParams *) override;  ; void doUpdateVisual (const core::visual::VisualParams *) override;  ; void updateGrid ();  ; void buildGrid ();  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void fwdDraw (VisualParams *);  Called before objects in the current branch are displayed. More...;  ; virtual void bwdDraw (VisualParams *);  Called after objects in the current branch are displayed. More...;  ; virtual void drawTransparent (const VisualParams *);  Display transparent surfaces. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const type::Quat< SReal >);  ; virt",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_grid.html:3956,update,updateVisual,3956,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_grid.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_grid.html,1,['update'],['updateVisual']
Deployability,it * _a;  ; QPushButton * _colorButton;  . Public Member Functions;  QRGBAColorPicker (QWidget *parent);  ; void setColor (const type::RGBAColor &color);  ; void setColor (const Vec4f &color);  ; type::RGBAColor getColor () const;  . Signals; void hasChanged ();  . Protected Slots; void updateRGBAColor ();  ; void redrawColorButton ();  ; void raiseQColorDialog ();  . Attribute details. ◆ _a. QLineEdit* sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker::_a. protected . ◆ _b. QLineEdit* sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker::_b. protected . ◆ _colorButton. QPushButton* sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker::_colorButton. protected . ◆ _g. QLineEdit* sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker::_g. protected . ◆ _r. QLineEdit* sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker::_r. protected . ◆ _rgba. QRgb sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker::_rgba. protected . Constructor details. ◆ QRGBAColorPicker(). sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker::QRGBAColorPicker ; (; QWidget * ; parent). Function details. ◆ getColor(). type::RGBAColor sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker::getColor ; (; ); const. ◆ hasChanged. void sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker::hasChanged ; (; ). signal . ◆ raiseQColorDialog. void sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker::raiseQColorDialog ; (; ). protectedslot . ◆ redrawColorButton. void sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker::redrawColorButton ; (; ). protectedslot . ◆ setColor() [1/2]. void sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker::setColor ; (; const type::RGBAColor & ; color). ◆ setColor() [2/2]. void sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker::setColor ; (; const Vec4f & ; color). ◆ updateRGBAColor. void sofa::gui::qt::qrgbacolorpicker_h::QRGBAColorPicker::updateRGBAColor ; (; ). protectedslot . sofaguiqtqrgbacolorpicker_hQRGBAColorPicker; Generated on Mon Nov 11 2024 03:25:44 for SOFA API by 1.9.1 . ,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1qrgbacolorpicker__h_1_1_q_r_g_b_a_color_picker.html:2435,update,updateRGBAColor,2435,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1qrgbacolorpicker__h_1_1_q_r_g_b_a_color_picker.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1qrgbacolorpicker__h_1_1_q_r_g_b_a_color_picker.html,4,['update'],['updateRGBAColor']
Deployability,it-solver; . /feed; ; implicit solver – SOFA. SOFA - Topic Tag: implicit solver. /import-include; . /feed; ; import include – SOFA. SOFA - Topic Tag: import include. /import-mesh; . /feed; ; import mesh – SOFA. SOFA - Topic Tag: import mesh. /incision; . /feed; ; incision – SOFA. SOFA - Topic Tag: incision. /incision2d; . /feed; ; Incision2D – SOFA. SOFA - Topic Tag: Incision2D. /input; . /feed; ; input – SOFA. SOFA - Topic Tag: input. /input-and-output-in-sofa-scn-file; . /feed; ; Input and Output in SOFA .scn file – SOFA. SOFA - Topic Tag: Input and Output in SOFA .scn file. /installation; . /feed; ; installation – SOFA. SOFA - Topic Tag: installation. /installation-error; . /feed; ; Installation error – SOFA. SOFA - Topic Tag: Installation error. /instrument; . /feed; ; instrument – SOFA. SOFA - Topic Tag: instrument. /integrator-optimization-vec-multivec-deriv-coord-types; . /feed; ; integrator optimization vec multivec deriv coord types – SOFA. SOFA - Topic Tag: integrator optimization vec multivec deriv coord types. /interaction; . /feed; ; interaction – SOFA. SOFA - Topic Tag: interaction. /interactions; . /feed; ; interactions – SOFA. SOFA - Topic Tag: interactions. /interventionalradiologycontroller-inl; . /feed; ; InterventionalRadiologyController.inl – SOFA. SOFA - Topic Tag: InterventionalRadiologyController.inl. /is-sofa-right-for-this; . /feed; ; Is SOFA right for this? – SOFA. SOFA - Topic Tag: Is SOFA right for this?. /jacobian; . /feed; ; Jacobian – SOFA. SOFA - Topic Tag: Jacobian. /joint-constraint; . /feed; ; joint constraint – SOFA. SOFA - Topic Tag: joint constraint. /jointspringforcefield; . /feed; ; JointSpringForceField – SOFA. SOFA - Topic Tag: JointSpringForceField. /keyboard; . /feed; ; keyboard – SOFA. SOFA - Topic Tag: keyboard. /keyboard-handle-event-key-pressed; . /feed; ; keyboard handle event key pressed – SOFA. SOFA - Topic Tag: keyboard handle event key pressed. /kill; . /feed; ; kill – SOFA. SOFA - Topic Tag: kill. /knot; . /feed,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:450410,integrat,integrator,450410,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['integrat'],['integrator']
Deployability,"itSurfacePressureForceField. protectedvirtual . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::addKToMatrix ; (; const core::MechanicalParams * ; mparams, . const sofa::core::behavior::MultiMatrixAccessor * ; matrix . ). overridevirtual . Compute the system matrix corresponding to . ; Parameters. mparamsmparams->kFactor() is the coefficient for stiffness contributions (i.e. DOFs term in the ODE) ; matrixthe matrix to add the result to . Implements sofa::core::behavior::BaseForceField. ◆ addKToMatrixT(). template<class DataTypes > . template<class MatrixWriter > . void sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::addKToMatrixT ; (; const core::MechanicalP",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html:32891,update,update,32891,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html,1,['update'],['update']
Deployability,"ited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(DifferenceEngine, TDataType), core::DataEngine);  ;  DifferenceEngine ();  ;  ~DifferenceEngine () override;  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_difference_engine.html:2426,update,update,2426,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_difference_engine.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_difference_engine.html,1,['update'],['update']
Deployability,"itialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doDrawVisual (const core::visual::VisualParams *vparams) override;  ; unsigned int getNbColors ();  ; Color getColor (unsigned int i);  ; template<class Real > ; helper::ColorMap::evaluator< Real > getEvaluator (Real vmin, Real vmax);  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void fwdDraw (VisualParams *);  Called before objects in the current branch are displayed. More...;  ; virtual void bwdDraw (VisualParams *);  Called after objects in the current branch are displayed. More...;  ; virtual void drawTransparent (const VisualParams *);  Display transparent surfaces. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const type::Quat< SReal >);  ; virt",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering2d_1_1_ogl_color_map.html:3627,update,updateVisual,3627,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering2d_1_1_ogl_color_map.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering2d_1_1_ogl_color_map.html,1,['update'],['updateVisual']
Deployability,"itializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; AttachBodyButtonSetting()sofa::gui::component::AttachBodyButtonSettingprotected; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buttonsofa::component::setting::MouseButtonSetting; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; ConfigurationSetting()sofa::core::objectmodel::ConfigurationSettingprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_arrowSizesofa::gui::component::AttachBodyButtonSetting; d_buttonsofa::component::setting::MouseButtonSetting; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; d_showFactorSizesofa::gui::component::AttachBodyButtonSetting; d_stiffnesssofa::gui::component::AttachBodyButtonSetting; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::stri",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_attach_body_button_setting-members.html:2195,Configurat,ConfigurationSetting,2195,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_attach_body_button_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_attach_body_button_setting-members.html,1,['Configurat'],['ConfigurationSetting']
Deployability,"itive semi-definite) More...;  ; static void PSDProjection (Real &A00, Real &A01, Real &A10, Real &A11);  ; static void PSDProjection (type::Mat< 1, 1, Real > &);  ; static void NSDProjection (type::Mat< 3, 3, Real > &A);  project a symmetric 3x3 matrix to a NSD (symmetric, negative semi-definite) More...;  ; static void NSDProjection (type::Mat< 2, 2, Real > &A);  project a symmetric 2x2 matrix to a NSD (symmetric, negative semi-definite) More...;  ; static void NSDProjection (Real &A00, Real &A01, Real &A10, Real &A11);  ; static void NSDProjection (type::Mat< 1, 1, Real > &);  . Function details. ◆ eigenDecomposition() [1/2]. template<typename Real > . void sofa::helper::Decompose< Real >::eigenDecomposition ; (; const type::Mat< 2, 2, Real > & ; A, . type::Mat< 2, 2, Real > & ; V, . type::Vec< 2, Real > & ; diag . ). static . Non-iterative Eigensystem decomposition: eigenvaluesParameters. diagand eigenvectors (columns of; V)of the 2x2 Real Matrix; A. Warningthis method is instable in specific configurations TODO . ◆ eigenDecomposition() [2/2]. template<typename Real > . void sofa::helper::Decompose< Real >::eigenDecomposition ; (; const type::Mat< 3, 3, Real > & ; A, . type::Mat< 3, 3, Real > & ; V, . type::Vec< 3, Real > & ; diag . ). static . Non-iterative & faster Eigensystem decomposition: eigenvaluesParameters. diagand eigenvectors (columns of; V)of the 3x3 Real Matrix; ADerived from Wild Magic Library . ◆ eigenDecomposition_iterative() [1/2]. template<class Real > . void sofa::helper::Decompose< Real >::eigenDecomposition_iterative ; (; const type::Mat< 2, 2, Real > & ; M, . type::Mat< 2, 2, Real > & ; V, . type::Vec< 2, Real > & ; diag . ). static . Eigensystem decomposition: eigenvaluesParameters. diagand eigenvectors (columns of; V)of the 2x2 Real Matrix; MDerived from Wild Magic Library . ◆ eigenDecomposition_iterative() [2/2]. template<class Real > . void sofa::helper::Decompose< Real >::eigenDecomposition_iterative ; (; const type::Mat< 3, 3, Real > &",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html:8160,configurat,configurations,8160,api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_decompose.html,2,['configurat'],['configurations']
Deployability,"itor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; for_each(VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; getCategoryName() const overridesofa::simulation::UpdateContextVisitorinlinevirtual; getClassName() const overridesofa::simulation::UpdateContextVisitorinlinevirtual; getInfos() constsofa::simulation::Visitorinlinevirtual; isThreadSafe() const overridesofa::simulation::UpdateContextVisitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::UpdateContextVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; startingNodesofa::simulation::UpdateContextVisitorprotected; subsetsToManagesofa::simulation::Visi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor-members.html:2835,Update,UpdateContextVisitorvirtual,2835,api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor-members.html,1,['Update'],['UpdateContextVisitorvirtual']
Deployability,"itorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; for_each(VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; getCategoryName() constsofa::simulation::Visitorinlinevirtual; getClassName() constsofa::simulation::Visitorinlinevirtual; getInfos() constsofa::simulation::Visitorinlinevirtual; isThreadSafe() constsofa::simulation::Visitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *node) overridesofa::simulation::UpdateBoundingBoxVisitorvirtual; sofa::simulation::Visitor::processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::UpdateBoundingBoxVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefso",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor-members.html:2828,Update,UpdateBoundingBoxVisitorvirtual,2828,api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor-members.html,1,['Update'],['UpdateBoundingBoxVisitorvirtual']
Deployability,"itprotected; sofa::SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; sofa::core::behavior::SingleStateAccessor::SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< DataTypes >; sofa::core::behavior::StateAccessor::SOFA_ABSTRACT_CLASS(StateAccessor, objectmodel::BaseObject)sofa::core::behavior::StateAccessor; SOFA_CLASS(SOFA_TEMPLATE(AverageCoord, DataTypes), core::DataEngine)sofa::component::engine::analyze::AverageCoord< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::engine::analyze::AverageCoord< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecIndex typedefsofa::component::engine::analyze::AverageCoord< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~AverageCoord() overridesofa::component::engine::analyze::AverageCoord< DataTypes >inlineprotected; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~SingleStateAccessor(",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_average_coord-members.html:13690,update,updateIfDirty,13690,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_average_coord-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_average_coord-members.html,1,['update'],['updateIfDirty']
Deployability,"ivatives()sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >protected; Tetra typedefsofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >; Tetrahedron typedefsofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >; TetrahedronHyperelasticityFEMForceField()sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >protected; TetraID typedefsofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; TrianglesInTetrahedron typedefsofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateTangentMatrix()sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >protected; VecCoord typedefsofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >; VecElement typedefsofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseObject() overridesofa::core::objectmodel",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_f_e_m_force_field-members.html:20589,update,updateTangentMatrix,20589,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_f_e_m_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_f_e_m_force_field-members.html,1,['update'],['updateTangentMatrix']
Deployability,"ix * createMappedMatrix (const behavior::BaseMechanicalState *state1, const behavior::BaseMechanicalState *state2, func_createMappedMatrix) override;  ; void disable () override;  ;  Public Member Functions inherited from sofa::core::BaseMapping;  SOFA_ABSTRACT_CLASS (BaseMapping, objectmodel::BaseObject);  ; virtual bool isLinear () const;  ; virtual bool isMechanical () const;  Return true if this mapping should be used as a mechanical mapping. More...;  ; virtual bool sameTopology () const;  ; virtual const sofa::linearalgebra::BaseMatrix * getJ (const MechanicalParams *);  ; virtual const sofa::linearalgebra::BaseMatrix * getJ ();  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; virtual bool areForcesMapped () const;  ; virtual bool areConstraintsMapped () const;  ; virtual bool areMassesMapped () const;  ; virtual bool areMatricesMapped () const;  ; virtual void setForcesMapped (bool b);  ; virtual void setConstraintsMapped (bool b);  ; virtual void setMassesMapped (bool b);  ; virtual void setMatricesMapped (bool b);  ; virtual void setNonMechanical ();  ; virtual const type::vector< sofa::linearalgebra::BaseMatrix * > * getJs ();  ; virtual void updateK (const MechanicalParams *, ConstMultiVecDerivId);  ; virtual const linearalgebra::BaseMatrix * getK ();  ; virtual void buildGeometricStiffnessMatrix (sofa::core::GeometricStiffnessMatrix *matrices);  Assembles the geometric stiffness matrix of the mapping in the provided matrix object. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect d",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mapping.html:7643,update,updateK,7643,api/master/sofa/html/classsofa_1_1core_1_1_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mapping.html,1,['update'],['updateK']
Deployability,"ix, you have to use this index, and then update it ; x1and x2 are the position vectors used for constraint equation computation ; cParamsdefines the state vectors to use for positions and velocities. Also defines the order of the constraint (POS, VEL, ACC). This is the method that should be implemented by the component ; Implements sofa::core::behavior::PairInteractionConstraint< TDataTypes >. ◆ buildConstraintMatrix() [2/2]. SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_MODEL_API void sofa::component::constraint::lagrangian::model::BilateralLagrangianConstraint< Rigid3Types >::buildConstraintMatrix ; (; const ConstraintParams * ; cParams, . DataMatrixDeriv & ; c1, . DataMatrixDeriv & ; c2, . unsigned int & ; cIndex, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2 . ). virtual . Construct the Jacobian Matrix; Parameters. c1and c2 are the results constraint sparse matrix ; cIndexis the index of the next constraint equation: when building the constraint matrix, you have to use this index, and then update it ; x1and x2 are the position vectors used for constraint equation computation ; cParamsdefines the state vectors to use for positions and velocities. Also defines the order of the constraint (POS, VEL, ACC). This is the method that should be implemented by the component ; Implements sofa::core::behavior::PairInteractionConstraint< TDataTypes >. ◆ bwdInit() [1/2]. SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_MODEL_API void sofa::component::constraint::lagrangian::model::BilateralLagrangianConstraint< Rigid3Types >::bwdInit ; (; ). virtual . Initialization method called at graph creation and modification, during bottom-up traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ bwdInit() [2/2]. template<class DataTypes > . void sofa::component::constraint::lagrangian::model::BilateralLagrangianConstraint< DataTypes >::bwdInit ; (; ). inlineoverridevirtual . Initialization method called at graph creation and modification, during bottom-up traversal. ; Reimplemente",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_bilateral_lagrangian_constraint.html:33065,update,update,33065,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_bilateral_lagrangian_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_bilateral_lagrangian_constraint.html,1,['update'],['update']
Deployability,"ization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ invert(). template<class Matrix , class Vector > . void sofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager >::invert ; (; Matrix & ; ). inlineoverridevirtual . Implements sofa::component::linearsolver::BaseMatrixLinearSolver< Matrix, Vector >. ◆ invertSystem(). template<class Matrix , class Vector > . void sofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager >::invertSystem ; (; ). overridevirtual . Invert the system, this method is optional because it's call when solveSystem() is called for the first time. ; Reimplemented from sofa::core::behavior::LinearSolver. ◆ isAsyncSolver(). template<class Matrix , class Vector > . bool sofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager >::isAsyncSolver ; (; ). inlineoverridevirtual . Indicate if the solver update the system in parallel. ; Reimplemented from sofa::core::behavior::LinearSolver. ◆ partial_solve(). template<class Matrix , class Vector > . virtual void sofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager >::partial_solve ; (; Matrix & ; , . Vector & ; , . Vector & ; , . ListIndex & ; , . ListIndex & ;  . ). inlineprotectedvirtual . newPartially solve the system . ◆ prepareVisitor() [1/2]. template<class Matrix , class Vector > . void sofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager >::prepareVisitor ; (; simulation::BaseMechanicalVisitor * ; v). inline . ◆ prepareVisitor() [2/2]. template<class Matrix , class Vector > . void sofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager >::prepareVisitor ; (; simulation::Visitor * ; v). inline . ◆ rebuildSystem(). template<class Matrix , class Vector > . void sofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager >::re",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_matrix_linear_solver_3_01_matrix_00_01_vector_00_01_no_thread_manager_01_4.html:32378,update,update,32378,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_matrix_linear_solver_3_01_matrix_00_01_vector_00_01_no_thread_manager_01_4.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_matrix_linear_solver_3_01_matrix_00_01_vector_00_01_no_thread_manager_01_4.html,1,['update'],['update']
Deployability,ization window . ◆ registerViewer(). void sofa::gui::qt::RealGUI::registerViewer ; (; common::BaseViewer * ; _viewer). overridevirtual . Used to directly replace the current viewer. ; Reimplemented from sofa::gui::common::BaseGUI. ◆ reload. void sofa::gui::qt::RealGUI::reload ; (; ). signal . ◆ removeViewer(). void sofa::gui::qt::RealGUI::removeViewer ; (; ). virtual . ◆ resetScene. void sofa::gui::qt::RealGUI::resetScene ; (; ). virtualslot . ◆ resetView. virtual void sofa::gui::qt::RealGUI::resetView ; (; ). inlinevirtualslot . ◆ saveView. virtual void sofa::gui::qt::RealGUI::saveView ; (; ). inlinevirtualslot . ◆ sceneGraphViewDirtynessChanged. void sofa::gui::qt::RealGUI::sceneGraphViewDirtynessChanged ; (; bool ; isDirty). protectedvirtualslot . Update the SceneGraph update button to reflect the dirtiness status. . ◆ sceneGraphViewLockingChanged. void sofa::gui::qt::RealGUI::sceneGraphViewLockingChanged ; (; bool ; isLocked). protectedvirtualslot . Update the SceneGraph update button to reflect the locking status. . ◆ screenshot. void sofa::gui::qt::RealGUI::screenshot ; (; ). virtualslot . ◆ setBackgroundColor(). void sofa::gui::qt::RealGUI::setBackgroundColor ; (; const sofa::type::RGBAColor & ; c). overridevirtual . Reimplemented from sofa::gui::common::BaseGUI. ◆ setBackgroundImage(). void sofa::gui::qt::RealGUI::setBackgroundImage ; (; const std::string & ; i). overridevirtual . Reimplemented from sofa::gui::common::BaseGUI. ◆ setDt. void sofa::gui::qt::RealGUI::setDt ; (; const QString & ; value). virtualslot . ◆ setDumpState(). void sofa::gui::qt::RealGUI::setDumpState ; (; bool ; b). overridevirtual . Reimplemented from sofa::gui::common::BaseGUI. ◆ setExportGnuplot. void sofa::gui::qt::RealGUI::setExportGnuplot ; (; bool ; exp). virtualslot . ◆ setExportState(). void sofa::gui::qt::RealGUI::setExportState ; (; bool ; b). overridevirtual . Reimplemented from sofa::gui::common::BaseGUI. ◆ setExportVisitor. void sofa::gui::qt::RealGUI::setExportVisitor ; (,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_real_g_u_i.html:19635,update,update,19635,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_real_g_u_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_real_g_u_i.html,3,"['Update', 'update']","['Update', 'update']"
Deployability,"ize-degrees-of-freedom; ; SOFA - Topic: Initialize degrees of freedom. /initializing-plugins; ; SOFA - Topic: [SOLVED] Initializing plugins. /input-and-output-in-sofa-scn-file; ; SOFA - Topic: [SOLVED] Input and Output in SOFA .scn file. /inserting_membrame_between_two_tets_regions; . /feed; ; Inserting membrane between two test regions – SOFA. SOFA - Topic: Inserting membrane between two test regions. /insert-localstiffnessfactor-variable-in-tetrahedronhyperelasticfemforcefield; ; SOFA - Topic: Insert localstiffnessfactor variable in TetrahedronHyperelasticFEMForceField. /insert-strain-stress-curves-of-material-to-describe-mechanical-properties; ; SOFA - Topic: [SOLVED] Insert Strain – Stress Curves of Material to describe mechanical properties. /install-additional-libraries-for-visual-sudio-2019; ; SOFA - Topic: [SOLVED] Install ""Additional libraries"" for Visual Sudio 2019. /installing-cgal-plugin; ; SOFA - Topic: [SOLVED] Installing CGAL Plugin. /installing-plugin-sofapython3; ; SOFA - Topic: [SOLVED] Installing plugin.sofapython3. /installing-sofa-on-mac-osx; . /feed; ; [SOLVED] installing SOFA on mac OSX – SOFA. /page; . /2; ; SOFA - Topic: [SOLVED] installing SOFA on mac OSX. SOFA - Topic: [SOLVED] installing SOFA on mac OSX. /installing-v17-12-from-dmg-package-on-mac-os; ; SOFA - Topic: [SOLVED] Installing v17.12 from DMG package on Mac OS. /install-wants-administrative-privileges; ; SOFA - Topic: [SOLVED] Install wants administrative privileges. /interaction-with-geomagic-touch-using-sofapython3; ; SOFA - Topic: Interaction with Geomagic Touch using SofaPython3. /interactiverecorded-camera; . /feed; ; [SOLVED] Interactive/Recorded Camera – SOFA. /page; . /13; ; SOFA - Topic: [SOLVED] Interactive/Recorded Camera. /4; ; SOFA - Topic: [SOLVED] Interactive/Recorded Camera. SOFA - Topic: [SOLVED] Interactive/Recorded Camera. /interactive-training-system-for-interventional-electrocardiology-procedures; ; SOFA - Topic: [SOLVED] Interactive Training System for Inter",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:334748,install,installing-plugin-,334748,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['install'],['installing-plugin-']
Deployability,"j);  ; ConstraintParams & setDx (VecDerivId dx);  Set the IDs where to write corrective displacement vector. More...;  ; ConstraintParams & setDx (MultiVecDerivId dx);  ; template<class StateSet > ; ConstraintParams & setDx (const StateSet &g, MultiVecDerivId dx);  ; ConstraintParams & setLambda (VecDerivId lambda);  Set the IDs where to write the constraint force vector. More...;  ; ConstraintParams & setLambda (MultiVecDerivId lambda);  ; template<class StateSet > ; ConstraintParams & setLambda (const StateSet &g, MultiVecDerivId lambda);  ;  Public Member Functions inherited from sofa::core::ExecParams; bool checkValidStorage () const;  ; ExecMode execMode () const;  Mode of execution requested. More...;  ; int threadID () const;  Index of current thread (0 corresponding to the only thread in sequential mode, or first thread in parallel mode) More...;  ; int nbThreads () const;  Number of threads currently known to Sofa. More...;  ;  ExecParams ();  ; void update ();  Make sure this instance is up-to-date relative to the current thread. More...;  ; ExecParams & setExecMode (ExecMode v);  Request a specific mode of execution. More...;  ; ExecParams & setThreadID (int v);  Specify the index of the current thread. More...;  . Static Public Member Functions; static const ConstraintParams * defaultInstance ();  Get the default MechanicalParams, to be used to provide a default values for method parameters. More...;  ;  Static Public Member Functions inherited from sofa::core::ExecParams; static ExecParams * defaultInstance ();  Get the default ExecParams, to be used to provide a default values for method parameters. More...;  . Attribute details. ◆ m_constOrder. ConstraintOrder sofa::core::ConstraintParams::m_constOrder. protected . Description of the order of the constraint. . ◆ m_dx. MultiVecDerivId sofa::core::ConstraintParams::m_dx. protected . Ids of constraint correction vector. . ◆ m_j. MultiMatrixDerivId sofa::core::ConstraintParams::m_j. protected . Ids of the",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html:5763,update,update,5763,api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html,1,['update'],['update']
Deployability,"j);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ UpdateVisualContextVisitor(). sofa::simulation::UpdateVisualContextVisitor::UpdateVisualContextVisitor ; (; const sofa::core::visual::VisualParams * ; vparams). Function details. ◆ getClassName(). const char* sofa::simulation::UpdateVisualContextVisitor::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::UpdateContextVisitor. ◆ processNodeTopDown(). Visitor::Result sofa::simulation::UpdateVisualContextVisitor::processNodeTopDown ; (; simulation::Node * ; ). overridevirtual . Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. ; Reimplemented from sofa::simulation::UpdateContextVisitor. sofasimulationUpdateVisualContextVisitor; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html:4909,Update,UpdateVisualContextVisitor,4909,api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html,7,['Update'],"['UpdateContextVisitor', 'UpdateVisualContextVisitor']"
Deployability,"ject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(MeshROI, DataTypes), SOFA_TEMPLATE(BaseROI, DataTypes))sofa::component::engine::select::MeshROI< DataTypes >; sofa::component::engine::select::BaseROI::SOFA_CLASS(SOFA_TEMPLATE(BaseROI, DataTypes), Inherit)sofa::component::engine::select::BaseROI< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; Tetra typedefsofa::component::engine::select::BaseROI< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::engine::select::BaseROI< DataTypes >; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::engine::select::MeshROI< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecEdge typedefsofa::component::engine::select::BaseROI< DataTypes >; VecHexa typedefsofa::component::engine::select::BaseROI< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecQuad typedefsofa::component::engine::select::BaseROI< DataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecTetra typedefsofa::component::engine::select::BaseROI< DataTypes >; VecTriangle typedefsofa::component::engine::select::BaseROI< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_r_o_i-members.html:19562,update,update,19562,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_r_o_i-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_r_o_i-members.html,1,['update'],['update']
Deployability,"ject)sofa::core::behavior::StateAccessor; sofa::core::behavior::SingleStateAccessor::SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(FixedPlaneProjectiveConstraint, DataTypes), SOFA_TEMPLATE(ProjectiveConstraintSet, DataTypes))sofa::component::constraint::projective::FixedPlaneProjectiveConstraint< DataTypes >; sofa::core::behavior::ProjectiveConstraintSet::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ProjectiveConstraintSet, DataTypes), BaseProjectiveConstraintSet, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ProjectiveConstraintSet< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::constraint::projective::FixedPlaneProjectiveConstraint< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::constraint::projective::FixedPlaneProjectiveConstraint< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseProjectiveConstraintSet() overridesofa::core::behavior::BaseProjectiveConstraintSetinlineprotected; ~FixedPlaneProjectiveConstraint()sofa::component::constraint::projective::FixedPlaneProjectiveConstraint< DataTypes >protected; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_plane_projective_constraint-members.html:17680,update,updateInternal,17680,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_plane_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_plane_projective_constraint-members.html,1,['update'],['updateInternal']
Deployability,"ject. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Static Public Member Functions; static std::string GetCustomTemplateName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER (Vector3, sofa::type::Vec3);  ; void integrateMesh ();  integrates the whole mesh More...;  ; void integrateTriangle (type::Vec3 kV0, type::Vec3 kV1, type::Vec3 kV2);  ; void generateRigid ();  generates the RigidMass from the mesh integral More...;  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObje",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_rigid_mass.html:13940,integrat,integrateMesh,13940,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_rigid_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_rigid_mass.html,2,['integrat'],"['integrateMesh', 'integrates']"
Deployability,"ject. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::gl::component::shader::OglShaderElement;  OglShaderElement ();  ;  ~OglShaderElement () override;  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; const std::string getId () const;  ; void setID (std::string str);  ; void setIndexShader (unsigned int index);  ; const std::string & getSEID () const override;  ;  Public Member Functions inherited from sofa::core::visual::ShaderElement;  SOFA_ABSTRACT_CLASS (ShaderElement, objectmodel::BaseObject);  . Protected Member Functions;  OglAttribute ();  ;  ~OglAttribute () override;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used b",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_attribute.html:14097,update,update,14097,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_attribute.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_attribute.html,1,['update'],['update']
Deployability,"ject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Protected Attributes; core::topology::BaseMeshTopology * m_topology;  ; VecCoord _initialPoints;  ; bool updateMatrix;  the initial positions of the points More...;  ; bool _meshSaved;  ; Data< std::string > f_materialName;  the name of the material to be used More...;  ; Data< SetParameterArray > f_parameterSet;  The global parameters specifying the material. More...;  ; Data< SetAnisotropyDirectionArray > f_anisotropySet;  The global directions of anisotropy of the material. More...;  ; Data< std::string > f_parameterFileName;  the name of the file describing the material parameters for all tetrahedra More...;  ; SingleLink< StandardTetrahedralFEMForceField< DataTypes >, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > l_topology;  Link to be set to the topology container in the component graph. More...;  ; material::HyperelasticMaterial< DataTypes > * myMaterial;  the array that describes the complete material energy and its derivatives More...;  ; core::topology::TetrahedronData< tetrahedronRestInfoVector > tetrahedr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_standard_tetrahedral_f_e_m_force_field.html:2519,update,updateMatrix,2519,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_standard_tetrahedral_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_standard_tetrahedral_f_e_m_force_field.html,1,['update'],['updateMatrix']
Deployability,"jectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  Constraint (MechanicalState< DataTypes > *mm=nullptr);  ;  ~Constraint () override;  ; virtual void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual type::vector< std::string > getConstraintIdentifiers ();  ;  Protected Member Functions inherited from sofa::core::behavior::BaseConstraint;  BaseConstraint ();  ;  ~BaseConstraint () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseConstraintSet;  BaseConstraintSet ();  ;  ~BaseConstraintSet () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_constraint.html:15763,update,update,15763,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_constraint.html,1,['update'],['update']
Deployability,"jectmodel::Base; m_instanciationSourceFilePossofa::core::objectmodel::Base; m_internalEnginesofa::core::objectmodel::Baseprotected; m_oldAttributessofa::core::objectmodel::Base; m_vecDatasofa::core::objectmodel::Baseprotected; m_vecLinksofa::core::objectmodel::Baseprotected; MapData typedefsofa::core::objectmodel::Base; MapLink typedefsofa::core::objectmodel::Base; MyClass typedefsofa::core::objectmodel::Base; namesofa::core::objectmodel::Base; narrowPhaseDetectionsofa::core::collision::Pipelineprotected; narrowPhaseDetectionssofa::core::collision::Pipelineprotected; notMuted() constsofa::core::objectmodel::Baseinline; parse(BaseObjectDescription *arg) overridesofa::core::objectmodel::BaseObjectvirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; parseFields(const std::list< std::string > &str)sofa::core::objectmodel::Base; parseFields(const std::map< std::string, std::string * > &str)sofa::core::objectmodel::Basevirtual; Pipeline()sofa::core::collision::Pipelineprotected; PipelineImpl()sofa::simulation::PipelineImplprotected; Ptr typedefsofa::core::objectmodel::Base; reinit()sofa::core::objectmodel::BaseObjectvirtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(objectmodel::BaseNode *node) overridesofa::core::collision::Pipelinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset() overridesofa::simulation::PipelineImplvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::stri",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html:9428,Pipeline,Pipeline,9428,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,1,['Pipeline'],['Pipeline']
Deployability,"jectmodel::BaseLinkinline; setPersistent(bool b)sofa::core::objectmodel::BaseLinkinline; setValidator(ValidatorFn fn)sofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>inline; size() constsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; StorePathsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >static; storePath() constsofa::core::objectmodel::BaseLinkinline; swap(iterator a, iterator b)sofa::simulation::NodeSequence< T, strong >inline; TLink()sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; TLink(const InitLink< OwnerType > &init)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; TraitsContainer typedefsofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>; TraitsDestPtr typedefsofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>; TraitsValueType typedefsofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>; updateCounter()sofa::core::objectmodel::BaseLinkinlineprotected; updateLinks()sofa::core::objectmodel::BaseLink; ValidatorFn typedefsofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>; value_type typedefsofa::simulation::NodeSequence< T, strong >; ValueType typedefsofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>; ~BaseLink()sofa::core::objectmodel::BaseLinkvirtual; ~MultiLink()sofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>inlinevirtual; ~TLink() overridesofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence-members.html:9580,update,updateCounter,9580,api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence-members.html,4,['update'],"['updateCounter', 'updateLinks']"
Deployability,"jectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeLambda(const ConstraintParams *cParams, MultiVecDerivId res, const sofa::linearalgebra::BaseVector *lambda) overridesofa::core::behavior::PairInteractionConstraint< DataTypes >virtual; storeLambda(const ConstraintParams *cParams, Data< VecDeriv > &res1, Data< VecDeriv > &res2, const Data< MatrixDeriv > &j1, const Data< MatrixDeriv > &j2, const sofa::linearalgebra::BaseVector *lambda)sofa::core::behavior::PairInteractionConstraint< DataTypes >protected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; UnilateralLagrangianConstraint(MechanicalState *object1=nullptr, MechanicalState *object2=nullptr)sofa::component::constraint::lagrangian::model::UnilateralLagrangianConstraint< DataTypes >protected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecConstArea typedefsofa::component::constraint::lagrangian::model::UnilateralLagrangianConstraint< DataTypes >; VecConstCoord typedefsofa::component::constraint::lagrangian::model::UnilateralLagrangianConstraint< DataTypes >; VecConstDeriv typedefsofa::component::constraint::lagrangian::model::UnilateralLagrangianConstraint< DataTypes >; VecConstraintBlockInfo typedefsofa::component::constraint::lagrangian::model::UnilateralLagrangianConstraint< DataTypes >; VecCoord typedefsofa::component::constraint::lagrangian::model::UnilateralLagrangianConstraint< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::constraint::lagrangian::model::UnilateralLagrangianConstraint< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecPersistentID typedefsofa::component::constraint::lagrangian::model::UnilateralLagrangianConstraint< DataTypes >; VecSlaves typedefsofa::core::objectmodel::Base",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_unilateral_lagrangian_constraint-members.html:21710,update,updateLinks,21710,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_unilateral_lagrangian_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_unilateral_lagrangian_constraint-members.html,1,['update'],['updateLinks']
Deployability,"jectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(PointCollisionModel, TDataTypes), core::CollisionModel);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void resize (sofa::Size size) override;  Set the number of elements. More...;  ; void computeBoundingTree (int maxDepth=0) override;  Create or update the bounding volume hierarchy. More...;  ; void computeContinuousBoundingTree (SReal dt, int maxDepth=0) override;  Create or update the bounding volume hierarchy, accounting for motions within the given timestep. More...;  ; void draw (const core::visual::VisualParams *, sofa::Index index) override;  Render an collision element. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; bool canCollideWithElement (sofa::Index index, CollisionModel *model2, sofa::Index index2) override;  Test if two elements can collide with each other. More...;  ; core::behavior::MechanicalState< DataTypes > * getMechanicalState ();  ; Deriv getNormal (sofa::Index index);  ; const Deriv & velocity (sofa::Index index) const;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible) override;  ; void updateNormals ();  ; sofa::core::topology::BaseMeshTopology * getCollisionTopolo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_point_collision_model.html:5464,update,update,5464,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_point_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_point_collision_model.html,1,['update'],['update']
Deployability,"jectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(InputEventReader, core::objectmodel::BaseObject)sofa::component::playback::InputEventReader; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~InputEventReader() overridesofa::component::playback::InputEventReaderprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_input_event_reader-members.html:9817,update,updateInternal,9817,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_input_event_reader-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_input_event_reader-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"jectmodel::Baseinline; l_contextsofa::core::objectmodel::BaseObjectprotected; l_mastersofa::core::objectmodel::BaseObjectprotected; l_slavessofa::core::objectmodel::BaseObjectprotected; LinkSlaves typedefsofa::core::objectmodel::BaseObject; m_aliasDatasofa::core::objectmodel::Baseprotected; m_aliasLinksofa::core::objectmodel::Baseprotected; m_definitionSourceFileNamesofa::core::objectmodel::Base; m_definitionSourceFilePossofa::core::objectmodel::Base; m_instanciationSourceFileNamesofa::core::objectmodel::Base; m_instanciationSourceFilePossofa::core::objectmodel::Base; m_internalEnginesofa::core::objectmodel::Baseprotected; m_oldAttributessofa::core::objectmodel::Base; m_vecDatasofa::core::objectmodel::Baseprotected; m_vecLinksofa::core::objectmodel::Baseprotected; MapData typedefsofa::core::objectmodel::Base; MapLink typedefsofa::core::objectmodel::Base; MyClass typedefsofa::core::objectmodel::Base; namesofa::core::objectmodel::Base; narrowPhaseDetectionsofa::core::collision::Pipelineprotected; narrowPhaseDetectionssofa::core::collision::Pipelineprotected; notMuted() constsofa::core::objectmodel::Baseinline; parse(BaseObjectDescription *arg) overridesofa::core::objectmodel::BaseObjectvirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; parseFields(const std::list< std::string > &str)sofa::core::objectmodel::Base; parseFields(const std::map< std::string, std::string * > &str)sofa::core::objectmodel::Basevirtual; Pipeline()sofa::core::collision::Pipelineprotected; PipelineImpl()sofa::simulation::PipelineImplprotected; Ptr typedefsofa::core::objectmodel::Base; reinit()sofa::core::objectmodel::BaseObjectvirtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(objectmodel::BaseNode *node) overridesofa::core::collision::Pipelinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset() overridesofa::simulation::Pipe",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html:8924,Pipeline,Pipelineprotected,8924,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,1,['Pipeline'],['Pipelineprotected']
Deployability,"jectmodel::Baseinline; parse(BaseObjectDescription *arg) overridesofa::core::objectmodel::BaseObjectvirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; parseFields(const std::list< std::string > &str)sofa::core::objectmodel::Base; parseFields(const std::map< std::string, std::string * > &str)sofa::core::objectmodel::Basevirtual; PrecomputedConstraintCorrection(sofa::core::behavior::MechanicalState< DataTypes > *mm=nullptr)sofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< TDataTypes >protected; Ptr typedefsofa::core::objectmodel::Base; Real typedefsofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< TDataTypes >; rebuildSystem(SReal, SReal)sofa::core::behavior::BaseConstraintCorrectionvirtual; recomputesofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< TDataTypes >; reinit()sofa::core::objectmodel::BaseObjectvirtual; releaseInverse(std::string name, InverseStorage *inv)sofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< TDataTypes >static; removeConstraintSolver(core::behavior::ConstraintSolver *s) overridesofa::core::behavior::ConstraintCorrection< TDataTypes >virtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; resetContactForce() overridesofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< TDataTypes >virtual; resetForUnbuiltResolution(SReal *f, std::list< unsigned int > &) overridesofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< TDataTypes >virtual; rotateConstraints(bool back)sofa::component::constraint::lagrangian::correction::PrecomputedConstrai",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_precomputed_constraint_correction-members.html:19635,release,releaseInverse,19635,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_precomputed_constraint_correction-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_precomputed_constraint_correction-members.html,1,['release'],['releaseInverse']
Deployability,"jectprotected; l_mastersofa::core::objectmodel::BaseObjectprotected; l_slavessofa::core::objectmodel::BaseObjectprotected; LinkSlaves typedefsofa::core::objectmodel::BaseObject; m_aliasDatasofa::core::objectmodel::Baseprotected; m_aliasLinksofa::core::objectmodel::Baseprotected; m_definitionSourceFileNamesofa::core::objectmodel::Base; m_definitionSourceFilePossofa::core::objectmodel::Base; m_instanciationSourceFileNamesofa::core::objectmodel::Base; m_instanciationSourceFilePossofa::core::objectmodel::Base; m_internalEnginesofa::core::objectmodel::Baseprotected; m_oldAttributessofa::core::objectmodel::Base; m_vecDatasofa::core::objectmodel::Baseprotected; m_vecLinksofa::core::objectmodel::Baseprotected; MapData typedefsofa::core::objectmodel::Base; MapLink typedefsofa::core::objectmodel::Base; MyClass typedefsofa::core::objectmodel::Base; namesofa::core::objectmodel::Base; narrowPhaseDetectionsofa::core::collision::Pipelineprotected; narrowPhaseDetectionssofa::core::collision::Pipelineprotected; notMuted() constsofa::core::objectmodel::Baseinline; parse(BaseObjectDescription *arg) overridesofa::core::objectmodel::BaseObjectvirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; parseFields(const std::list< std::string > &str)sofa::core::objectmodel::Base; parseFields(const std::map< std::string, std::string * > &str)sofa::core::objectmodel::Basevirtual; Pipeline()sofa::core::collision::Pipelineprotected; PipelineImpl()sofa::simulation::PipelineImplprotected; Ptr typedefsofa::core::objectmodel::Base; reinit()sofa::core::objectmodel::BaseObjectvirtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(objectmodel::BaseNode *node) overridesofa::core::collision::Pipelinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset() overridesofa::simulation::PipelineImplvirtual; setDefinitionSourceFileName(const std::string ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html:8987,Pipeline,Pipelineprotected,8987,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,1,['Pipeline'],['Pipelineprotected']
Deployability,"k *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_force_field.html:13112,update,update,13112,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_force_field.html,1,['update'],['update']
Deployability,"k *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doUpdate ()=0;  Where you put your engine's impl. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_engine.html:11620,update,update,11620,api/master/sofa/html/classsofa_1_1core_1_1_data_engine.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_engine.html,1,['update'],['update']
Deployability,"k > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(RandomPointDistributionInSurface, DataTypes), core::DataEngine);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_random_point_distribution_in_surface.html:4433,update,update,4433,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_random_point_distribution_in_surface.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_random_point_distribution_in_surface.html,1,['update'],['update']
Deployability,"k in the PointData . d_vertexMass to update the mass vector when TRIANGLESADDED event is fired. Method to update . d_vertexMass when a Triangle is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TRIANGLESREMOVED event is fired. Method to update . d_vertexMass when a new Quad is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSADDED event is fired. Method to update . d_vertexMass when a Quad is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSREMOVED event is fired. Method to update . d_vertexMass when a new Tetrahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAADDED event is fired. Method to update . d_vertexMass when a Tetrahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAREMOVED event is fired. Method to update . d_vertexMass when a new Hexahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when HEXAHEDRAADDED event is fired. Method to update . d_vertexMass when a Hexahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when HEXAHEDRAREMOVED event is fired. . ◆ handleEvent(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::handleEvent ; (; sofa::core::objectmodel::Event * ; ). overridevirtual . Handle an event. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ init() [1/5]. void sofa::component::mass::DiagonalMass< Rigid3Types >::init ; (; void ; ). virtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::behavior::SingleStateAccessor< DataTypes >. ◆ init() [2/5]. void sofa::component::mass::DiagonalMass< Rigid2Types >::init",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html:46267,update,update,46267,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,1,['update'],['update']
Deployability,"k. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  MouseButtonSetting ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::ConfigurationSetting;  ConfigurationSetting ();  Default constructor. More...;  ;  ~ConfigurationSetting () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_mouse_button_setting.html:10810,update,update,10810,api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_mouse_button_setting.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_mouse_button_setting.html,1,['update'],['update']
Deployability,"k;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (SlicedVolumetricModel, core::visual::VisualModel);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; virtual bool isTransparent ();  ; void drawTransparent (const core::visual::VisualParams *vparams) override;  Display transparent surfaces. More...;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void fwdDraw (VisualParams *);  Called before objects in the current branch are displayed. More...;  ; virtual void bwdDraw (VisualParams *);  Called after objects in the current branch are displayed. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void ap",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_sliced_volumetric_model.html:2684,update,updateVisual,2684,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_sliced_volumetric_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_sliced_volumetric_model.html,2,['update'],"['update', 'updateVisual']"
Deployability,"l . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). overridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contributio",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_standard_tetrahedral_f_e_m_force_field.html:25562,update,update,25562,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_standard_tetrahedral_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_standard_tetrahedral_f_e_m_force_field.html,1,['update'],['update']
Deployability,"l bool createWidgets ();  ; virtual void setDataReadOnly (bool readOnly);  This method is called after createWidgets to configure whether the created widgets should be read-only. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  ;  Public Member Functions inherited from sofa::gui::qt::TDataWidget< Material >;  TDataWidget (QWidget *parent, const char *name, MyTData *d);  ; sofa::core::objectmodel::Data< Material > * getData ();  ; const sofa::core::objectmodel::Data< Material > * getData () const;  ; virtual void setData (MyTData *d);  ; virtual void setData (MyData *d);  ;  Public Member Functions inherited from sofa::gui::qt::DataWidget;  DataWidget (QWidget *parent, const char *name, MyData *d);  ;  ~DataWidget () override;  ; virtual void setData (MyData *d);  ; const core::objectmodel::BaseData * getBaseData () const;  BaseData pointer accessor function. More...;  ; core::objectmodel::BaseData * getBaseData ();  ; void updateVisibility ();  ; bool isDirty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  . Protected Member Functions; virtual void readFromData ();  The implementation of this method tells how the widget reads the value of the data. More...;  ; virtual void writeToData ();  . Additional Inherited Members;  Static Public Member Functions inherited from sofa::gui::qt::TDataWidget< Material >; static RealObject * create (RealObject *, CreatorArgument &arg);  ;  Static Public Member Functions inherited from sofa::gui::qt::DataWidget; template<class T > ; static T * create (T *, const CreatorArgument &arg);  ; static DataWidget * CreateDataWidget (const DataWidget::CreatorArgument &dwarg);  ;  Signals inherited from sofa::gui::qt::DataWidget; void WidgetDirty (bool);  ; void DataOwnerDirty (bool);  ; void dataValueC",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1materialdatawidget__h_1_1_material_data_widget.html:2372,update,updateVisibility,2372,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1materialdatawidget__h_1_1_material_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1materialdatawidget__h_1_1_material_data_widget.html,2,['update'],['updateVisibility']
Deployability,"l dz);  ; void setRotation (SReal rx, SReal ry, SReal rz);  ; void setScale (SReal sx, SReal sy, SReal sz);  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void fwdDraw (VisualParams *);  Called before objects in the current branch are displayed. More...;  ; virtual void bwdDraw (VisualParams *);  Called after objects in the current branch are displayed. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) overrid",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models.html:13948,update,update,13948,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models.html,2,['update'],['update']
Deployability,"l members . sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes > Struct Template Reference . #include <HyperelasticMaterial.h>; Detailed Description; template<typename DataTypes>; struct sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >; structure that store the parameters required to that are necessary to compute the strain energy The material parameters might be constant in space (homogeneous material) or not . Public Attributes; std::vector< Real > parameterArray;  ; std::vector< Coord > anisotropyDirection;  ; std::vector< Real > parameterAlpha;  ; std::vector< Real > parameterTau;  . Attribute details. ◆ anisotropyDirection. template<typename DataTypes > . std::vector<Coord> sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >::anisotropyDirection. the direction of anisotropy in the rest configuration : the size of the array is 0 if the material is isotropic, 1 if it is transversely isotropic and 2 for orthotropic materials (assumed to be orthogonal to each other) . ◆ parameterAlpha. template<typename DataTypes > . std::vector<Real> sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >::parameterAlpha. for viscous part, give the real alphai and taui such as alpha(t)= alpha0+sum(1,N)alphaiexp(-t/taui) . ◆ parameterArray. template<typename DataTypes > . std::vector<Real> sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >::parameterArray. an array of Real values that correspond to the material parameters : the size depends on the material, e.g. 2 Lame coefficients for St-Venant Kirchhoff materials . ◆ parameterTau. template<typename DataTypes > . std::vector<Real> sofa::component::solidmechanics::fem::hyperelastic::material::MaterialParameters< DataTypes >::parameterTau. sofacomponentsolidmechanicsfemhyperelasticmaterialMaterialParameters; Generated on Mon No",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_material_parameters.html:1169,configurat,configuration,1169,api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_material_parameters.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_material_parameters.html,2,['configurat'],['configuration']
Deployability,"l path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:4676,Update,Update,4676,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,1,['Update'],['Update']
Deployability,"l the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  HausdorffDistance ();  ;  ~HausdorffDistance () override;  ; void handleEvent (core::objectmodel::Event *event) override;  Handle an event. More...;  ; void onBeginAnimationStep (const double);  ; void computeDistances ();  ; Real distance (Coord p, VecCoord S);  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_hausdorff_distance.html:13716,update,update,13716,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_hausdorff_distance.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_hausdorff_distance.html,1,['update'],['update']
Deployability,"l value:= 0 >; void applyEdgeMassHexahedronDestruction(const sofa::type::vector<Index>& ); sofa::type::vector< Index >. Pointer to the topology container. Will be set by link. ; Method to update See alsod_edgeMass using mass matrix coefficient when a new Triangle is created. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when TRIANGLESADDED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a Triangle is removed. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when TRIANGLESREMOVED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a new Quad is created. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when QUADSADDED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a Quad is removed. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when QUADSREMOVED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a new Tetrahedron is created. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when TETRAHEDRAADDED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a Tetrahedron is removed. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when TETRAHEDRAREMOVED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a new Hexahedron is created. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when HEXAHEDRAADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Hexahedron is removed. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when HEXAHEDRAREMOVED event is fired. . l_topology . Constructor details. ◆ MeshMatrixMass(). template<class DataTypes , class GeometricalTypes > . sofa::component::mass::MeshMatrixMass< DataTypes, Geometrical",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html:33824,update,update,33824,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,1,['update'],['update']
Deployability,"l, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglMatrix2Variable, OglVariable< type::vector< float > >)sofa::gl::component::shader::OglMatrix2Variable; OglVariable< type::vector< float > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< float > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; transposesofa::gl::component::shader::OglMatrix2Variable; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< float > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglMatrix2Variable()sofa::gl::component::shader::OglMatrix2Variableinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< type::vector< float > >inlineprotected; ~ShaderElement() overridesofa::core::visual::ShaderElementinlineprotected; ~VisualModel() overridesofa:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix2_variable-members.html:13847,update,updateVisual,13847,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix2_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix2_variable-members.html,2,['update'],['updateVisual']
Deployability,l. /sofa-presented-in-webinar-radiologie-numerique-french; ; SOFA – SOFA presented in webinar “Radiologie Numérique” [French]. /sofa-soon-on-github; ; SOFA – SOFA soon on GitHub. /sofa-stc5-coming-soon; ; SOFA – SOFA STC#5 in Strasbourg. /sofa-technical-committee-3-upcoming-raise-your-expectations; ; SOFA – SOFA Technical Committee #3 upcoming: raise your expectations!. /sofa-technologies-exhibited-amd-learning-day-in-paris; ; SOFA – SOFA technologies exhibited @ AMD Learning Day in Paris. /sofa-training-discover-and-learn-sofa-at-ismar2017; ; SOFA – SOFA training: discover and learn SOFA at ISMAR 2017. /sofa-v16-12-has-been-released; ; SOFA – SOFA v16.12 has been released!. /sofa-v17-06-has-been-released; ; SOFA – SOFA v17.06 has been released!. /sofa-v17-12-has-been-released; ; SOFA – SOFA v17.12 has been released!. /sofa-v18-06-has-been-released; ; SOFA – SOFA v18.06 has been released!. /sofa-v18-12-has-been-released; ; SOFA – SOFA v18.12 has been released!. /sofa-v19-06-has-been-released; ; SOFA – SOFA v19.06 has been released!. /sofa-v19-12-has-been-released; ; SOFA – SOFA v19.12 has been released!. /sofa-v20-06-has-been-released; ; SOFA – SOFA v20.06 has been released!. /sofa-v20-12-has-been-released; ; SOFA – SOFA v20.12 has been released!. /sofa-v21-06-has-been-released; ; SOFA – SOFA v21.06 has been released!. /sofa-v21-12-has-been-released; ; SOFA – SOFA v21.12 has been released!. /sofa-v22-06-has-been-released; ; SOFA – SOFA v22.06 has been released!. /sofa-v22-12-has-been-released; ; SOFA – SOFA v22.12 has been released!. /sofa-v23-06-has-been-released; ; SOFA – SOFA v23.06 has been released!. /sofa-v23-12-has-been-released; ; SOFA – SOFA v23.12 has been released!. /sofa-v24-06-has-been-released; ; SOFA – SOFA v24.06 has been released!. /sofa-week-2018-experience; ; SOFA – SOFA Week 2018 Experience. /sofa-week-2021-register-now; ; SOFA – SOFA Week 2021: register now!. /sofa-week-2022-register-now; ; SOFA – SOFA Week 2022: register now!. /sofa-week-2023-re,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:9031,release,released,9031,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['release'],['released']
Deployability,"l::Base; reset() overridesofa::component::playback::WriteTopologyvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(WriteTopology, core::objectmodel::BaseObject)sofa::component::playback::WriteTopology; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; WriteTopology()sofa::component::playback::WriteTopologyprotected; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~WriteTopology() overridesofa::component::playback::WriteTopologyprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_topology-members.html:10883,update,updateInternal,10883,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_topology-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_topology-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"l::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setShadowTextureUnit(const unsigned short unit)sofa::gl::component::shader::Lightinlinevirtual; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; SOFA_CLASS(Light, core::visual::VisualModel)sofa::gl::component::shader::Light; sofa::core::visual::VisualModel::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPOTLIGHT enum valuesofa::gl::component::shader::Light; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~Light() overridesofa::gl::component::shader::Lightprotected; ~VisualModel() overridesofa::core::visual::VisualModelinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_light-members.html:14698,update,updateInternal,14698,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_light-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_light-members.html,4,['update'],"['updateInternal', 'updateLinks', 'updateVisual']"
Deployability,"l::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(MeshSampler, DataTypes), core::DataEngine)sofa::component::engine::select::MeshSampler< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VD typedefsofa::component::engine::select::MeshSampler< DataTypes >; VecCoord typedefsofa::component::engine::select::MeshSampler< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VI typedefsofa::component::engine::select::MeshSampler< DataTypes >; VVD typedefsofa::component::engine::select::MeshSampler< DataTypes >; VVI typedefsofa::component::engine::select::MeshSampler< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedv",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_sampler-members.html:12875,update,update,12875,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_sampler-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_sampler-members.html,1,['update'],['update']
Deployability,"l::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(NormEngine, TDataType), core::DataEngine)sofa::component::engine::generate::NormEngine< TDataType >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::component::engine::generate::NormEngine< TDataType >; VecLink typedefsofa::core::objectmodel::Base; VecReal typedefsofa::component::engine::generate::NormEngine< TDataType >; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~NormEngine() overridesofa::component::engine::generate::NormEngine",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_norm_engine-members.html:12376,update,update,12376,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_norm_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_norm_engine-members.html,1,['update'],['update']
Deployability,"l::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(DifferenceEngine, TDataType), core::DataEngine)sofa::component::engine::transform::DifferenceEngine< TDataType >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::component::engine::transform::DifferenceEngine< TDataType >; VecLink typedefsofa::core::objectmodel::Base; VecReal typedefsofa::component::engine::transform::DifferenceEngine< TDataType >; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~DifferenceEngine() overridesofa::component::engine::transform::DifferenceEngine< TDataType >inline.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_difference_engine-members.html:12520,update,updateAllInputsIfDirty,12520,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_difference_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_difference_engine-members.html,4,['update'],"['updateAllInputsIfDirty', 'updateIfDirty', 'updateInternal', 'updateLinks']"
Deployability,"l::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Vector3, sofa::type::Vec3)sofa::component::solidmechanics::fem::hyperelastic::material::PlasticMaterial; SOFA_CLASS(PlasticMaterial, BaseMaterial)sofa::component::solidmechanics::fem::hyperelastic::material::PlasticMaterial; sofa::component::solidmechanics::fem::hyperelastic::material::BaseMaterial::SOFA_CLASS(BaseMaterial, core::objectmodel::BaseObject)sofa::component::solidmechanics::fem::hyperelastic::material::BaseMaterial; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecDouble typedefsofa::component::solidmechanics::fem::hyperelastic::material::PlasticMaterial; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecStress typedefsofa::component::solidmechanics::fem::hyperelastic::material::PlasticMaterial; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseMaterial() overridesofa::component::solidmechanics::fem::hyperelastic::material::BaseMaterialinline; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_plastic_material-members.html:11590,update,updateInternal,11590,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_plastic_material-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_plastic_material-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"l::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; for_each(VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; getCategoryName() const overridesofa::simulation::UpdateContextVisitorinlinevirtual; getClassName() const overridesofa::simulation::UpdateVisualContextVisitorinlinevirtual; getInfos() constsofa::simulation::Visitorinlinevirtual; isThreadSafe() const overridesofa::simulation::UpdateContextVisitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::UpdateVisualContextVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor-members.html:2333,Update,UpdateVisualContextVisitorinlinevirtual,2333,api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor-members.html,1,['Update'],['UpdateVisualContextVisitorinlinevirtual']
Deployability,"l::BaseNode *node);  . Signals; void Close ();  ; void Lock (bool);  ; void RequestSaving (sofa::simulation::Node *);  ; void RequestExportOBJ (sofa::simulation::Node *node, bool exportMTL);  ; void RequestActivation (sofa::simulation::Node *, bool);  ; void RequestSleeping (sofa::simulation::Node *, bool);  ; void RootNodeChanged (sofa::simulation::Node *newroot, const char *newpath);  ; void NodeRemoved ();  ; void Updated ();  ; void NodeAdded ();  ; void focusChanged (sofa::core::objectmodel::BaseObject *);  ; void focusChanged (sofa::core::objectmodel::BaseNode *);  ; void dataModified (QString);  ;  Signals inherited from sofa::gui::qt::SofaSceneGraphWidget; void dirtynessChanged (bool isDirty);  Connect to this signal to be notified when the dirtiness status of the QSofaListView changed. More...;  ; void lockingChanged (bool isLocked);  Connect to this signal to be notified when the locking status changed. More...;  . Public Slots; void Export ();  ; void CloseAllDialogs ();  ; void UpdateOpenedDialogs ();  ; void ExpandRootNodeOnly ();  . Protected Slots; void SaveNode ();  ; void exportOBJ ();  ; void collapseNode ();  ; void expandNode ();  ; void modifyUnlock (void *Id);  ; void RemoveNode ();  ; void Modify ();  ; void openInEditor ();  ; void openInstanciation ();  ; void openImplementation ();  ; void copyFilePathToClipBoard ();  ; void DeactivateNode ();  ; void ActivateNode ();  ; void PutNodeToSleep ();  ; void WakeUpNode ();  ; void updateMatchingObjectmodel (QTreeWidgetItem *item, int);  ; void updateMatchingObjectmodel (QTreeWidgetItem *item);  ; void RunSofaRightClicked (const QPoint &point);  ; void RunSofaDoubleClicked (QTreeWidgetItem *item, int index);  ; void nodeNameModification (simulation::Node *);  ; void focusObject ();  ; void focusNode ();  . Attribute details. ◆ AddObjectDialog_. AddObject* sofa::gui::qt::QSofaListView::AddObjectDialog_. protected . ◆ attribute_. SofaListViewAttribute sofa::gui::qt::QSofaListView::attribute_. protec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_sofa_list_view.html:3687,Update,UpdateOpenedDialogs,3687,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_sofa_list_view.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_sofa_list_view.html,1,['Update'],['UpdateOpenedDialogs']
Deployability,"l::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglMatrix2x3Variable, OglMatrix2Variable)sofa::gl::component::shader::OglMatrix2x3Variable; sofa::gl::component::shader::OglMatrix2Variable::SOFA_CLASS(OglMatrix2Variable, OglVariable< type::vector< float > >)sofa::gl::component::shader::OglMatrix2Variable; OglVariable< type::vector< float > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< float > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; transposesofa::gl::component::shader::OglMatrix2Variable; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< float > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglMatrix2Variable()sofa::gl::component::shader::OglMatrix2Variableinlinevirtual; ~OglMatrix2x3Variable() overridesofa::gl::component::shader::OglMatrix2x3Variableinline; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< type::vector< float > >inlineprotected; ~ShaderElement",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix2x3_variable-members.html:14080,update,updateVisual,14080,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix2x3_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix2x3_variable-members.html,2,['update'],['updateVisual']
Deployability,"l::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglMatrix2x4Variable, OglMatrix2Variable)sofa::gl::component::shader::OglMatrix2x4Variable; sofa::gl::component::shader::OglMatrix2Variable::SOFA_CLASS(OglMatrix2Variable, OglVariable< type::vector< float > >)sofa::gl::component::shader::OglMatrix2Variable; OglVariable< type::vector< float > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< float > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; transposesofa::gl::component::shader::OglMatrix2Variable; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< float > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglMatrix2Variable()sofa::gl::component::shader::OglMatrix2Variableinlinevirtual; ~OglMatrix2x4Variable() overridesofa::gl::component::shader::OglMatrix2x4Variableinline; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< type::vector< float > >inlineprotected; ~ShaderElement",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix2x4_variable-members.html:14080,update,updateVisual,14080,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix2x4_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix2x4_variable-members.html,2,['update'],['updateVisual']
Deployability,"l::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglMatrix3x2Variable, OglMatrix2Variable)sofa::gl::component::shader::OglMatrix3x2Variable; sofa::gl::component::shader::OglMatrix2Variable::SOFA_CLASS(OglMatrix2Variable, OglVariable< type::vector< float > >)sofa::gl::component::shader::OglMatrix2Variable; OglVariable< type::vector< float > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< float > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; transposesofa::gl::component::shader::OglMatrix2Variable; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< float > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglMatrix2Variable()sofa::gl::component::shader::OglMatrix2Variableinlinevirtual; ~OglMatrix3x2Variable() overridesofa::gl::component::shader::OglMatrix3x2Variableinline; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< type::vector< float > >inlineprotected; ~ShaderElement",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix3x2_variable-members.html:14080,update,updateVisual,14080,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix3x2_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix3x2_variable-members.html,2,['update'],['updateVisual']
Deployability,"l::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglMatrix3x4Variable, OglMatrix2Variable)sofa::gl::component::shader::OglMatrix3x4Variable; sofa::gl::component::shader::OglMatrix2Variable::SOFA_CLASS(OglMatrix2Variable, OglVariable< type::vector< float > >)sofa::gl::component::shader::OglMatrix2Variable; OglVariable< type::vector< float > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< float > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; transposesofa::gl::component::shader::OglMatrix2Variable; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< float > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglMatrix2Variable()sofa::gl::component::shader::OglMatrix2Variableinlinevirtual; ~OglMatrix3x4Variable() overridesofa::gl::component::shader::OglMatrix3x4Variableinline; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< type::vector< float > >inlineprotected; ~ShaderElement",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix3x4_variable-members.html:14080,update,updateVisual,14080,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix3x4_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix3x4_variable-members.html,2,['update'],['updateVisual']
Deployability,"l::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglMatrix4x2Variable, OglMatrix2Variable)sofa::gl::component::shader::OglMatrix4x2Variable; sofa::gl::component::shader::OglMatrix2Variable::SOFA_CLASS(OglMatrix2Variable, OglVariable< type::vector< float > >)sofa::gl::component::shader::OglMatrix2Variable; OglVariable< type::vector< float > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< float > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; transposesofa::gl::component::shader::OglMatrix2Variable; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< float > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglMatrix2Variable()sofa::gl::component::shader::OglMatrix2Variableinlinevirtual; ~OglMatrix4x2Variable() overridesofa::gl::component::shader::OglMatrix4x2Variableinline; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< type::vector< float > >inlineprotected; ~ShaderElement",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4x2_variable-members.html:14080,update,updateVisual,14080,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4x2_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4x2_variable-members.html,2,['update'],['updateVisual']
Deployability,"l::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglMatrix4x3Variable, OglMatrix2Variable)sofa::gl::component::shader::OglMatrix4x3Variable; sofa::gl::component::shader::OglMatrix2Variable::SOFA_CLASS(OglMatrix2Variable, OglVariable< type::vector< float > >)sofa::gl::component::shader::OglMatrix2Variable; OglVariable< type::vector< float > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< float > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; transposesofa::gl::component::shader::OglMatrix2Variable; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< float > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglMatrix2Variable()sofa::gl::component::shader::OglMatrix2Variableinlinevirtual; ~OglMatrix4x3Variable() overridesofa::gl::component::shader::OglMatrix4x3Variableinline; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< type::vector< float > >inlineprotected; ~ShaderElement",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4x3_variable-members.html:14080,update,updateVisual,14080,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4x3_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4x3_variable-members.html,2,['update'],['updateVisual']
Deployability,"l::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(ProjectiveTransformEngine, DataTypes), core::DataEngine)sofa::component::engine::transform::ProjectiveTransformEngine< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::engine::transform::ProjectiveTransformEngine< DataTypes >; Vec4 typedefsofa::component::engine::transform::ProjectiveTransformEngine< DataTypes >; VecCoord typedefsofa::component::engine::transform::ProjectiveTransformEngine< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~ProjectiveTransformEngine() overridesofa::component::engine::transform::ProjectiveTransformEngine< DataTypes >inl",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_projective_transform_engine-members.html:13003,update,updateLinks,13003,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_projective_transform_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_projective_transform_engine-members.html,1,['update'],['updateLinks']
Deployability,"l::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (DefaultVisualManagerLoop, sofa::core::visual::VisualLoop);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void initStep (sofa::core::visual::VisualParams *vparams) override;  Initialize the textures. More...;  ; void updateStep (sofa::core::visual::VisualParams *vparams) override;  Update the Visual Models: triggers the Mappings. More...;  ; void updateContextStep (sofa::core::visual::VisualParams *vparams) override;  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; void drawStep (sofa::core::visual::VisualParams *vparams) override;  Render the scene. More...;  ; void computeBBoxStep (sofa::core::visual::VisualParams *vparams, SReal *minBBox, SReal *maxBBox, bool init) override;  Compute the bounding box of the scene. If init is set to ""true"", then minBBox and maxBBox will be initialised to a default value. More...;  ;  Public Member Functions inherited from sofa::core::visual::VisualLoop;  SOFA_CLASS (VisualLoop, VisualModel);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Ini",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_default_visual_manager_loop.html:2411,update,updateContextStep,2411,api/master/sofa/html/classsofa_1_1simulation_1_1_default_visual_manager_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_default_visual_manager_loop.html,3,"['Update', 'update']","['Update', 'updateContextStep']"
Deployability,"l::VisualModel, sofa::core::visual::VisualState< defaulttype::Vec3Types >)sofa::component::visual::VisualModelImpl; sourceFactorsofa::gl::component::rendering3d::OglModelprotected; SPtr typedefsofa::core::objectmodel::Base; srgbTexturingsofa::component::visual::VisualModelImpl; State()sofa::core::State< TDataTypes >protected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; texsofa::gl::component::rendering3d::OglModelprotected; TexCoord typedefsofa::component::visual::VisualModelImpl; texturenamesofa::component::visual::VisualModelImpl; texturessofa::gl::component::rendering3d::OglModelprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; trianglesRevisionsofa::gl::component::rendering3d::OglModelprotected; update()sofa::gl::component::rendering3d::MergeVisualModelsinlineprotected; updateBuffers() overridesofa::gl::component::rendering3d::OglModelvirtual; updateEdgesIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateQuadsIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateTrianglesIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateVertexBuffer()sofa::gl::component::rendering3d::OglModel; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; useEdgessofa::gl::component::rendering3d::OglModelprotected; useQuadssofa::gl::component::rendering3d::OglModelprotected; useTopologysofa::component::visual::VisualModelImpl; useTrianglessofa::gl::component::rendering3d::OglModelprotected; vbosofa::gl::component::rendering3d::OglModelprotected; VBOGenDonesofa::gl::component::rendering3d::OglModelprotected; Vec3Real typedefsofa::component::visual::VisualModelImpl; VecCoord typedefsofa::component::visual::VisualModelImpl; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::compone",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models-members.html:27459,update,updateInternal,27459,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models-members.html,1,['update'],['updateInternal']
Deployability,"l::VisualParams * ; ). overridevirtual . Called instead of rendering the scene. ; Return true if this object actually did the rendering, or false if it wasn't done. ; Reimplemented from sofa::core::visual::VisualManager. ◆ drawTransparents(). void sofa::gl::component::shader::OrderIndependentTransparencyManager::drawTransparents ; (; core::visual::VisualParams * ; vp, . sofa::gl::GLSLShader * ; oitShader . ). protected . ◆ fwdDraw(). void sofa::gl::component::shader::OrderIndependentTransparencyManager::fwdDraw ; (; core::visual::VisualParams * ; ). overridevirtual . Called before objects in the current branch are displayed. ; Reimplemented from sofa::core::visual::VisualModel. ◆ init(). void sofa::gl::component::shader::OrderIndependentTransparencyManager::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ postDrawScene(). void sofa::gl::component::shader::OrderIndependentTransparencyManager::postDrawScene ; (; core::visual::VisualParams * ; ). overridevirtual . Called after rendering the scene. ; Reimplemented from sofa::core::visual::VisualManager. ◆ preDrawScene(). void sofa::gl::component::shader::OrderIndependentTransparencyManager::preDrawScene ; (; core::visual::VisualParams * ; ). overridevirtual . Called before rendering the scene. ; Reimplemented from sofa::core::visual::VisualManager. ◆ reinit(). void sofa::gl::component::shader::OrderIndependentTransparencyManager::reinit ; (; ). overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_CLASS(). sofa::gl::component::shader::OrderIndependentTransparencyManager::SOFA_CLASS ; (; OrderIndependentTransparencyManager ; , . core::visual::VisualManager ;  . ). sofaglcomponentshaderOrderIndependentTransparencyManager; Generated on Mon Nov 11 2024 03:19:18 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_order_independent_transparency_manager.html:19654,Update,Update,19654,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_order_independent_transparency_manager.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_order_independent_transparency_manager.html,1,['Update'],['Update']
Deployability,"l; Tetra typedefsofa::core::topology::Topology; TetrahedraAroundEdge typedefsofa::core::topology::BaseMeshTopology; TetrahedraAroundTriangle typedefsofa::core::topology::BaseMeshTopology; TetrahedraAroundVertex typedefsofa::core::topology::BaseMeshTopology; Tetrahedron typedefsofa::core::topology::Topology; TetrahedronID typedefsofa::core::topology::Topology; TetraID typedefsofa::core::topology::Topology; Topology()sofa::core::topology::Topologyinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; updateHexahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateTetrahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; UV typedefsofa::component::topology::container::constant::MeshTopology; UVID typedefsofa::component::topology::container::constant::MeshTopology; validHexahedrasofa::component::topology::container::constant::MeshTopologyprotected; validTetrahedrasofa::component::topology::container::constant::MeshTopologyprotected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~Topology()sofa:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology-members.html:33176,update,updateLinks,33176,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology-members.html,1,['update'],['updateLinks']
Deployability,"l=false)sofa::core::objectmodel::BaseObjectinlinevirtual; computeCollisionDetection() overridesofa::simulation::PipelineImplvirtual; computeCollisionReset() overridesofa::simulation::PipelineImplvirtual; computeCollisionResponse() overridesofa::simulation::PipelineImplvirtual; computeCollisions()sofa::core::collision::Pipelineinline; contactManagersofa::core::collision::Pipelineprotected; contactManagerssofa::core::collision::Pipelineprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; doCollisionDetection(const sofa::type::vector< core::CollisionModel * > &collisionModels)=0sofa::core::collision::Pipelineprotectedpure virtual; doCollisionReset()=0sofa::core::collision::Pipelineprotectedpure virtual; doCollisionResponse()=0sofa::core::collision::Pipelineprotectedpure virtual; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &path, const BaseLink *link) overridesofa::core::objectmodel::BaseObjectvirtu",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html:3086,Pipeline,Pipelineprotectedpure,3086,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,1,['Pipeline'],['Pipelineprotectedpure']
Deployability,"lLoop, simulation::DefaultVisualManagerLoop)sofa::gl::component::shader::CompositingVisualLoop; sofa::simulation::DefaultVisualManagerLoop::SOFA_CLASS(DefaultVisualManagerLoop, sofa::core::visual::VisualLoop)sofa::simulation::DefaultVisualManagerLoop; sofa::core::visual::VisualLoop::SOFA_CLASS(VisualLoop, VisualModel)sofa::core::visual::VisualLoop; sofa::core::visual::VisualModel::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateContextStep(sofa::core::visual::VisualParams *vparams) overridesofa::simulation::DefaultVisualManagerLoopvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateStep(sofa::core::visual::VisualParams *vparams) overridesofa::simulation::DefaultVisualManagerLoopvirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; vertFilenamesofa::gl::component::shader::CompositingVisualLoop; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~CompositingVisualLoop() overridesofa::gl::component::shader::CompositingVisualLoopprotected; ~DefaultVisualManagerLoop() overridesofa::simulation::DefaultVisualManagerLoopprotected; ~VisualLoop() overridesofa::core::visual::VisualLoopinlineprotected; ~VisualModel() overridesofa::core::visual::VisualModelinlinep",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_compositing_visual_loop-members.html:12612,update,updateVisual,12612,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_compositing_visual_loop-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_compositing_visual_loop-members.html,1,['update'],['updateVisual']
Deployability,"lMapping. ◆ propagateFromOutputToInputModel(). virtual bool sofa::core::topology::TopologicalMapping::propagateFromOutputToInputModel ; (; ). inlinevirtual . Return true if this mapping is able to propagate topological changes from output to input model. ; Reimplemented in sofa::component::mapping::linear::SimpleTesselatedTetraTopologicalMapping. ◆ setPathInputObject(). void sofa::core::topology::TopologicalMapping::setPathInputObject ; (; const std::string & ; o). inline . Set the path to the objects mapped in the scene graph. . ◆ setPathOutputObject(). void sofa::core::topology::TopologicalMapping::setPathOutputObject ; (; const std::string & ; o). inline . ◆ setTopologies(). void sofa::core::topology::TopologicalMapping::setTopologies ; (; In * ; from, . Out * ; to . ). virtual . Specify the input and output models. . ◆ SOFA_ABSTRACT_CLASS(). sofa::core::topology::TopologicalMapping::SOFA_ABSTRACT_CLASS ; (; TopologicalMapping ; , . objectmodel::BaseObject ;  . ). ◆ updateTopologicalMappingBottomUp(). virtual void sofa::core::topology::TopologicalMapping::updateTopologicalMappingBottomUp ; (; ). inlinevirtual . Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topology : ; Reimplemented in sofa::component::mapping::linear::SimpleTesselatedTetraTopologicalMapping. ◆ updateTopologicalMappingTopDown(). virtual void sofa::core::topology::TopologicalMapping::updateTopologicalMappingTopDown ; (; ). pure virtual . Method called at each topological changes propagation which comes from the INPUT topology to adapt the OUTPUT topology : ; Implemented in sofa::component::topology::mapping::Triangle2EdgeTopologicalMapping, sofa::component::topology::mapping::Tetra2TriangleTopologicalMapping, sofa::component::topology::mapping::SubsetTopologicalMapping, sofa::component::topology::mapping::Quad2TriangleTopologicalMapping, sofa::component::topology::mapping::IdentityTopologicalMapping, sofa::component::topology::mapping",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html:23039,update,updateTopologicalMappingBottomUp,23039,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html,1,['update'],['updateTopologicalMappingBottomUp']
Deployability,"lModel::isUseEdges ; (; ). inline . ◆ isUseQuads(). bool sofa::gl::component::rendering3d::OglModel::isUseQuads ; (; ). inline . ◆ isUseTriangles(). bool sofa::gl::component::rendering3d::OglModel::isUseTriangles ; (; ). inline . ◆ loadTexture(). bool sofa::gl::component::rendering3d::OglModel::loadTexture ; (; const std::string & ; filename). overridevirtual . Reimplemented from sofa::component::visual::VisualModelImpl. ◆ loadTextures(). bool sofa::gl::component::rendering3d::OglModel::loadTextures ; (; ). overridevirtual . Reimplemented from sofa::component::visual::VisualModelImpl. ◆ parse(). void sofa::gl::component::rendering3d::OglModel::parse ; (; core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::component::visual::VisualModelImpl. ◆ popTransformMatrix(). virtual void sofa::gl::component::rendering3d::OglModel::popTransformMatrix ; (; ). inlineprotectedvirtual . ◆ pushTransformMatrix(). virtual void sofa::gl::component::rendering3d::OglModel::pushTransformMatrix ; (; float * ; matrix). inlineprotectedvirtual . ◆ SOFA_CLASS(). sofa::gl::component::rendering3d::OglModel::SOFA_CLASS ; (; OglModel ; , . Inherit ;  . ). ◆ updateBuffers(). void sofa::gl::component::rendering3d::OglModel::updateBuffers ; (; ). overridevirtual . Reimplemented from sofa::component::visual::VisualModelImpl. ◆ updateEdgesIndicesBuffer(). void sofa::gl::component::rendering3d::OglModel::updateEdgesIndicesBuffer ; (; ). ◆ updateQuadsIndicesBuffer(). void sofa::gl::component::rendering3d::OglModel::updateQuadsIndicesBuffer ; (; ). ◆ updateTrianglesIndicesBuffer(). void sofa::gl::component::rendering3d::OglModel::updateTrianglesIndicesBuffer ; (; ). ◆ updateVertexBuffer(). void sofa::gl::component::rendering3d::OglModel::updateVertexBuffer ; (; ). sofaglcomponentrendering3dOglModel; Generated on Mon Nov 11 2024 03:18:56 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model.html:41032,update,updateBuffers,41032,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model.html,10,['update'],"['updateBuffers', 'updateEdgesIndicesBuffer', 'updateQuadsIndicesBuffer', 'updateTrianglesIndicesBuffer', 'updateVertexBuffer']"
Deployability,"lModelImpl; sofa::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; VisualState< defaulttype::Vec3Types >::SOFA_CLASS(VisualState, SOFA_TEMPLATE(core::State, defaulttype::Vec3Types))sofa::core::visual::VisualState< defaulttype::Vec3Types >; sofa::core::State::SOFA_CLASS(SOFA_TEMPLATE(State, TDataTypes), BaseState)sofa::core::State< TDataTypes >; SOFA_CLASS2(VisualModelImpl, core::visual::VisualModel, sofa::core::visual::VisualState< defaulttype::Vec3Types >)sofa::component::visual::VisualModelImpl; SPtr typedefsofa::core::objectmodel::Base; srgbTexturingsofa::component::visual::VisualModelImpl; State()sofa::core::State< TDataTypes >protected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; TexCoord typedefsofa::component::visual::VisualModelImpl; texturenamesofa::component::visual::VisualModelImpl; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateBuffers()sofa::component::visual::VisualModelImplinlinevirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; useTopologysofa::component::visual::VisualModelImpl; Vec3Real typedefsofa::component::visual::VisualModelImpl; VecCoord typedefsofa::component::visual::VisualModelImpl; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::visual::VisualModelImpl; VecLink typedefsofa::core::objectmodel::Base; VecReal typedefsofa::core::State< TDataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecTexCoord typedefsofa::component::visual::VisualModelImpl; VecVisualEdge typedefsofa::component::visual::VisualModelImpl; VecVisualQuad typedefsofa::component::visual::VisualModelImpl; VecVisualTriangle typedefsofa::component::visual::VisualModelImpl; visual_index_type typedefsofa::component::visual::VisualModelImpl; VisualEdge typed",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl-members.html:22283,update,updateInternal,22283,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl-members.html,1,['update'],['updateInternal']
Deployability,"lState #1 as a BaseMechanicalState. More...;  ; const BaseMechanicalState * getMechModel1 () const;  Retrieve the associated MechanicalState #1 as a BaseMechanicalState. More...;  ; MechanicalState< TDataTypes2 > * getMState2 ();  Retrieve the associated MechanicalState #2. More...;  ; const MechanicalState< TDataTypes2 > * getMState2 () const;  Retrieve the associated MechanicalState #2. More...;  ; BaseMechanicalState * getMechModel2 ();  Retrieve the associated MechanicalState #2 as a BaseMechanicalState. More...;  ; const BaseMechanicalState * getMechModel2 () const;  Retrieve the associated MechanicalState #2 as a BaseMechanicalState. More...;  . Protected Member Functions;  MixedInteractionForceField (MechanicalState< DataTypes1 > *mm1=nullptr, MechanicalState< DataTypes2 > *mm2=nullptr);  ;  ~MixedInteractionForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *fie",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html:13702,update,update,13702,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html,1,['update'],['update']
Deployability,"l_dimensions > = 3, int > . SReal sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::getTotalMass ; (; ); const. inline . Method to update See alsod_vertexMass when a new Triangle is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TRIANGLESADDED event is fired. Method to update . d_vertexMass when a Triangle is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TRIANGLESREMOVED event is fired. Method to update . d_vertexMass when a new Quad is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSADDED event is fired. Method to update . d_vertexMass when a Quad is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSREMOVED event is fired. Method to update . d_vertexMass when a new Tetrahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAADDED event is fired. Method to update . d_vertexMass when a Tetrahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAREMOVED event is fired. Method to update . d_vertexMass when a new Hexahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when HEXAHEDRAADDED event is fired. Method to update . d_vertexMass when a Hexahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when HEXAHEDRAREMOVED event is fired. . ◆ handleEvent(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::handleEvent ; (; sofa::core::objectmodel::Event * ; ). overridevirtual . Handle an event. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ init() [1/5]. void sofa::component::mass::DiagonalMass< Rigid3Types >::init ; (; void ; ). virtual . Initialization",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html:46013,update,update,46013,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,1,['update'],['update']
Deployability,"lagrangian::model::SlidingLagrangianConstraint< DataTypes >::SlidingLagrangianConstraint ; (; MechanicalState * ; object1, . MechanicalState * ; object2 . ). protected . ◆ ~SlidingLagrangianConstraint(). template<class DataTypes > . virtual sofa::component::constraint::lagrangian::model::SlidingLagrangianConstraint< DataTypes >::~SlidingLagrangianConstraint ; (; ). inlineprotectedvirtual . Function details. ◆ buildConstraintMatrix(). template<class DataTypes > . void sofa::component::constraint::lagrangian::model::SlidingLagrangianConstraint< DataTypes >::buildConstraintMatrix ; (; const core::ConstraintParams * ; cParams, . DataMatrixDeriv & ; c1, . DataMatrixDeriv & ; c2, . unsigned int & ; cIndex, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2 . ). overridevirtual . Construct the Jacobian Matrix; Parameters. c1and c2 are the results constraint sparse matrix ; cIndexis the index of the next constraint equation: when building the constraint matrix, you have to use this index, and then update it ; x1and x2 are the position vectors used for constraint equation computation ; cParamsdefines the state vectors to use for positions and velocities. Also defines the order of the constraint (POS, VEL, ACC). This is the method that should be implemented by the component ; Implements sofa::core::behavior::PairInteractionConstraint< DataTypes >. ◆ draw(). template<class DataTypes > . void sofa::component::constraint::lagrangian::model::SlidingLagrangianConstraint< DataTypes >::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ getConstraintResolution(). template<class DataTypes > . void sofa::component::constraint::lagrangian::model::SlidingLagrangianConstraint< DataTypes >::getConstraintResolution ; (; const core::ConstraintParams * ; cParams, . std::vector< core::behavior::ConstraintResolution * > & ; resTab, . unsigned int & ; off",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_sliding_lagrangian_constraint.html:24743,update,update,24743,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_sliding_lagrangian_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_sliding_lagrangian_constraint.html,1,['update'],['update']
Deployability,"lags dataFlags)sofa::core::objectmodel::Baseprotected; initData0(Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinlineprotected; initGnuplot(const std::string path) overridesofa::core::behavior::Mass< DataTypes >virtual; initLarge(sofa::Index i, const Element &elem)sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protected; initPolar(sofa::Index i, const Element &elem)sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protected; initSmall(sofa::Index i, const Element &elem)sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protected; initTextures()sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >inlinevirtual; insertInNode(objectmodel::BaseNode *node) overridesofa::core::behavior::Mass< DataTypes >inlinevirtual; integrateMass(int signx, int signy, int signz, Real l0, Real l1, Real l2)sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >; integrateStiffness(int signx0, int signy0, int signz0, int signx1, int signy1, int signz1, const Real u, const Real v, const Real w, const Mat33 &J_1)sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protectedstatic; IS_CONSTRAINED_27sofa::component::solidmechanics::fem::nonuniform::HexahedronCompositeFEMForceFieldAndMass< DataTypes >protectedstatic; isCompliancesofa::core::behavior::BaseForceField; isComponentStateValid() constsofa::core::objectmodel::Baseinline; isDiagonal() const overridesofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >inlinevirtual; l_contextsofa::core::objectmodel::BaseObjectprotected; l_mastersofa::core::objectmodel::BaseObjectprotected; l_mechanicalStatessofa::core::behavior::StateAccessorprotected; l_slavessofa::core::objectmodel::Ba",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_hexahedron_composite_f_e_m_force_field_and_mass-members.html:28896,integrat,integrateMass,28896,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_hexahedron_composite_f_e_m_force_field_and_mass-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_hexahedron_composite_f_e_m_force_field_and_mass-members.html,1,['integrat'],['integrateMass']
Deployability,"lags dataFlags)sofa::core::objectmodel::Baseprotected; initData0(Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinlineprotected; initGnuplot(const std::string path) overridesofa::core::behavior::Mass< DataTypes >virtual; initLarge(sofa::Index i, const Element &elem)sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protected; initPolar(sofa::Index i, const Element &elem)sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protected; initSmall(sofa::Index i, const Element &elem)sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protected; initTextures()sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >inlinevirtual; insertInNode(objectmodel::BaseNode *node) overridesofa::core::behavior::Mass< DataTypes >inlinevirtual; integrateMass(int signx, int signy, int signz, Real l0, Real l1, Real l2)sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >; integrateStiffness(int signx0, int signy0, int signz0, int signx1, int signy1, int signz1, const Real u, const Real v, const Real w, const Mat33 &J_1)sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protectedstatic; isCompliancesofa::core::behavior::BaseForceField; isComponentStateValid() constsofa::core::objectmodel::Baseinline; isDiagonal() const overridesofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >inlinevirtual; l_contextsofa::core::objectmodel::BaseObjectprotected; l_mastersofa::core::objectmodel::BaseObjectprotected; l_mechanicalStatessofa::core::behavior::StateAccessorprotected; l_slavessofa::core::objectmodel::BaseObjectprotected; l_topologysofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >; LARGE enum v",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass-members.html:23760,integrat,integrateMass,23760,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass-members.html,2,['integrat'],['integrateMass']
Deployability,"lass DataTypes > . SingleLink<TetrahedralTensorMassForceField<DataTypes>, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH | BaseLink::FLAG_STRONGLINK> sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::l_topology. protected . second Lame coefficient ; Link to be set to the topology container in the component graph. . ◆ lambda. template<class DataTypes > . Real sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::lambda. protected . ◆ m_topology. template<class DataTypes > . sofa::core::topology::BaseMeshTopology* sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::m_topology. protected . ◆ mu. template<class DataTypes > . Real sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::mu. protected . first Lame coefficient . ◆ updateMatrix. template<class DataTypes > . bool sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::updateMatrix. protected . Constructor details. ◆ TetrahedralTensorMassForceField(). template<class DataTypes > . sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::TetrahedralTensorMassForceField. protected . ◆ ~TetrahedralTensorMassForceField(). template<class DataTypes > . sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::~TetrahedralTensorMassForceField. protectedvirtual . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutpu",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html:23158,update,updateMatrix,23158,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html,1,['update'],['updateMatrix']
Deployability,"late<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Static Public Member Functions; template<class T > ; static bool canCreate (T *&obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions; virtual void updateFromTopology ();  ;  LineCollisionModel ();  ;  Protected Member Functions inherited from sofa::core::CollisionModel;  CollisionModel ();  Constructor. More...;  ;  ~CollisionModel () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; vo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model.html:20286,update,updateFromTopology,20286,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model.html,1,['update'],['updateFromTopology']
Deployability,"lation::Node; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; Single typedefsofa::simulation::Node; SOFA_ABSTRACT_CLASS(BaseNode, Base)sofa::core::objectmodel::BaseNode; SOFA_ABSTRACT_CLASS2(Node, BaseNode, Context)sofa::simulation::Node; SOFA_CLASS(DAGNode, simulation::Node)sofa::simulation::graph::DAGNode; sofa::simulation::Node::SOFA_CLASS(Context, BaseContext)sofa::core::objectmodel::Context; sofa::core::objectmodel::BaseContext::SOFA_CLASS(BaseContext, Base)sofa::core::objectmodel::BaseContext; solversofa::simulation::Node; SPtr typedefsofa::core::objectmodel::Base; statesofa::simulation::Node; StatusMap typedefsofa::simulation::graph::DAGNodeprotected; time_sofa::core::objectmodel::Context; topologysofa::simulation::Node; topologyObjectsofa::simulation::Node; unsortedsofa::simulation::Node; updateContext() overridesofa::simulation::graph::DAGNodevirtual; updateDescendancy()sofa::simulation::graph::DAGNodeprotected; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateSimulationContext() overridesofa::simulation::graph::DAGNodevirtual; updateVisualContext()sofa::simulation::Nodevirtual; Vec3 typedefsofa::core::objectmodel::BaseContext; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VISITED enum valuesofa::simulation::graph::DAGNodeprotected; VisitedStatus enum namesofa::simulation::graph::DAGNodeprotected; visualLoopsofa::simulation::Node; visualManagersofa::simulation::Node; visualModelsofa::simulation::Node; worldGravity_sofa::core::objectmodel::Context; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseContext() overridesofa::core::objectmodel::BaseContextprotected; ~BaseNode() overridesofa::core::objectmodel::BaseNodeprotected; ~Context() override",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html:22863,update,updateLinks,22863,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html,2,['update'],['updateLinks']
Deployability,"lationModifyObject.h>. Inheritance diagram for sofa::gui::qt::QTabulationModifyObject:. [legend]. Protected Attributes; core::objectmodel::Base * object;  ; QTreeWidgetItem * item;  ; const unsigned int index;  ; unsigned int size;  ; bool dirty;  ; std::map< QObject *, QString > m_dataValueModified;  ; unsigned int pixelSize;  ; unsigned int pixelMaxSize;  . Public Member Functions;  QTabulationModifyObject (QWidget *parent, core::objectmodel::Base *object, QTreeWidgetItem *item, unsigned int idx=1);  ; void externalWidgetAddition (int num);  ; void addData (sofa::core::objectmodel::BaseData *data, const ModifyObjectFlags &flags);  ; void addLink (sofa::core::objectmodel::BaseLink *link, const ModifyObjectFlags &flags);  ; void addStretch ();  ; unsigned int getIndex () const;  ; bool isFull () const;  ; void setFull ();  ; bool isEmpty () const;  ; bool isDirty () const;  ; QString getDataModifiedString () const;  . Signals; void UpdateDatas ();  ; void UpdateDataWidgets ();  ; void TabDirty (bool);  ; void nodeNameModification (simulation::Node *);  . Public Slots; void setTabDirty (bool=true);  ; void updateDataValue ();  ; void updateWidgetValue ();  ; void dataValueChanged (QString dataValue);  . Attribute details. ◆ dirty. bool sofa::gui::qt::QTabulationModifyObject::dirty. protected . ◆ index. const unsigned int sofa::gui::qt::QTabulationModifyObject::index. protected . ◆ item. QTreeWidgetItem* sofa::gui::qt::QTabulationModifyObject::item. protected . ◆ m_dataValueModified. std::map< QObject*, QString> sofa::gui::qt::QTabulationModifyObject::m_dataValueModified. protected . ◆ object. core::objectmodel::Base* sofa::gui::qt::QTabulationModifyObject::object. protected . ◆ pixelMaxSize. unsigned int sofa::gui::qt::QTabulationModifyObject::pixelMaxSize. protected . ◆ pixelSize. unsigned int sofa::gui::qt::QTabulationModifyObject::pixelSize. protected . ◆ size. unsigned int sofa::gui::qt::QTabulationModifyObject::size. protected . Constructor details. ◆ QTabulation",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_tabulation_modify_object.html:1261,Update,UpdateDatas,1261,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_tabulation_modify_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_tabulation_modify_object.html,2,['Update'],"['UpdateDataWidgets', 'UpdateDatas']"
Deployability,"ld, const char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  Topology ();  ; virtual ~Topology ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology.html:10094,update,update,10094,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology.html,1,['update'],['update']
Deployability,"ld< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ applyTetrahedronCreation(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::applyTetrahedronCreation ; (; const sofa::type::vector< Index > & ; tetrahedronAdded, . const sofa::type::vector< core::topology::BaseMeshTopology::Tetrahedron > & ; , . const sofa::type::vector< sofa::type::vector< Index > > & ; , . const sofa::type::vector< sofa::type::vector< SReal > > & ;  . ). Method to update See alsod_edgeInfo when a new Tetrahedron is created. Will be set as callback in the EdgeData . d_edgeInfo when TETRAHEDRAADDED event is fired to create a new spring in created Tetrahedron. . ◆ applyTetrahedronDestruction(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::applyTetrahedronDestruction ; (; const sofa::type::vector< Index > & ; tetrahedronRemoved). Method to update See alsod_edgeSprings when a triangle is removed. Will be set as callback in the EdgeData . d_edgeInfo when TETRAHEDRAREMOVED event is fired to remove spring if needed or update adjacent Tetrahedron. . ◆ buildDampingMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; ). finalvirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ buildStiffnessMatrix(). template<class DataTypes > . void sofa::component",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html:25335,update,update,25335,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html,1,['update'],['update']
Deployability,"ld< DataTypes1, DataTypes2 >::MixedInteractionForceField ; (; MechanicalState< DataTypes1 > * ; mm1 = nullptr, . MechanicalState< DataTypes2 > * ; mm2 = nullptr . ). explicitprotected . ◆ ~MixedInteractionForceField(). template<class DataTypes1 , class DataTypes2 > . sofa::core::behavior::MixedInteractionForceField< DataTypes1, DataTypes2 >::~MixedInteractionForceField. overrideprotected . Function details. ◆ addDForce() [1/2]. template<class TDataTypes1 , class TDataTypes2 > . virtual void sofa::core::behavior::MixedInteractionForceField< TDataTypes1, TDataTypes2 >::addDForce ; (; const MechanicalParams * ; mparams, . DataVecDeriv1 & ; df1, . DataVecDeriv2 & ; df2, . const DataVecDeriv1 & ; dx1, . const DataVecDeriv2 & ; dx2 . ). pure virtual . Compute the force derivative given a small displacement from the position and velocity used in the previous call to addForce().; The derivative should be directly derived from the computations done by addForce. Any forces neglected in addDForce will be integrated explicitly (i.e. using its value at the beginning of the timestep).; If the ForceField can be represented as a matrix, this method computes $ df += K dx $; This method must be implemented by the component, and is usually called by the generic MixedInteractionForceField::addDForce() method. ; Implemented in sofa::component::mechanicalload::InteractionEllipsoidForceField< TDataTypes1, TDataTypes2 >. ◆ addDForce() [2/2]. template<class DataTypes1 , class DataTypes2 > . void sofa::core::behavior::MixedInteractionForceField< DataTypes1, DataTypes2 >::addDForce ; (; const MechanicalParams * ; mparams, . MultiVecDerivId ; dfId . ). overridevirtual . Compute the force derivative given a small displacement from the position and velocity used in the previous call to addForce().; The derivative should be directly derived from the computations done by addForce. Any forces neglected in addDForce will be integrated explicitly (i.e. using its value at the beginning of the timestep",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html:20463,integrat,integrated,20463,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html,1,['integrat'],['integrated']
Deployability,"ldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Public Attributes inherited from sofa::core::behavior::BaseMass; Data< bool > m_separateGravity;  ; Data< SReal > rayleighMass;  Rayleigh Damping mass matrix coefficient. More...;  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(UniformMass, DataTypes), SOFA_TEMPLATE(core::behavior::Mass, DataTypes));  ; sofa::core::objectmodel::ComponentState updateFromTotalMass ();  Functions updating data. More...;  ; sofa::core::objectmodel::ComponentState updateFromVertexMass ();  ; void addMDx (const core::MechanicalParams *mparams, DataVecDeriv &f, const DataVecDeriv &dx, SReal factor) override;  ; void accFromF (const core::MechanicalParams *mparams, DataVecDeriv &a, const DataVecDeriv &f) override;  ; void addForce (const core::MechanicalParams *mparams, DataVecDeriv &f, const DataVecCoord &x, const DataVecDeriv &v) override;  ; SReal getKineticEnergy (const core::MechanicalParams *mparams, const DataVecDeriv &d_v) const override;  vMv/2 using dof->getV() override More...;  ; SReal getPotentialEnergy (const core::MechanicalParams *mparams, const DataVecCoord &x) const override;  Mgx potential in a uniform gravity field, null at origin. More...;  ; type::Vec6 getMomentum (const core::MechanicalParams *mparams, const DataVecCoord &x, const DataVecDeriv &v) const override;  (M",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_uniform_mass.html:3539,update,updateFromTotalMass,3539,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_uniform_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_uniform_mass.html,1,['update'],['updateFromTotalMass']
Deployability,"lds () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  Tetra2TriangleTopologicalMapping ();  Constructor. More...;  ;  ~Tetra2TriangleTopologicalMapping () override=default;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::topology::TopologicalMapping;  TopologicalMapping ();  ;  ~TopologicalMapping () override;  ; bool checkTopologyInputTypes ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initDat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_tetra2_triangle_topological_mapping.html:13641,update,update,13641,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_tetra2_triangle_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_tetra2_triangle_topological_mapping.html,1,['update'],['update']
Deployability,"lds () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  ~NarrowPhaseDetection () override;  Destructor. More...;  ; void changeInstanceNP (Instance inst) override;  ;  Protected Member Functions inherited from sofa::core::collision::Detection;  Detection ();  ; virtual void changeInstanceBP (Instance);  ; void changeInstance (Instance inst) override;  ;  Protected Member Functions inherited from sofa::core::collision::CollisionAlgorithm;  CollisionAlgorithm ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_narrow_phase_detection.html:12666,update,update,12666,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_narrow_phase_detection.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_narrow_phase_detection.html,1,['update'],['update']
Deployability,"leCreation(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::applyTriangleCreation ; (; const type::vector< Index > & ; triangleAdded, . const type::vector< core::topology::BaseMeshTopology::Triangle > & ; , . const type::vector< type::vector< Index > > & ; , . const type::vector< type::vector< SReal > > & ;  . ). protected . Method to update See alsod_edgeInfo when a new triangle is created. Will be set as callback in the EdgeData . d_edgeInfo when TRIANGLESADDED event is fired to create a new spring between new created triangles. . ◆ applyTriangleDestruction(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::applyTriangleDestruction ; (; const type::vector< Index > & ; triangleRemoved). protected . Method to update See alsod_edgeInfo when a triangle is removed. Will be set as callback in the EdgeData . d_edgeInfo when TRIANGLESREMOVED event is fired to remove spring if needed or update pair of triangles. . ◆ buildDampingMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; ). finalvirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ buildStiffnessMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::buildStiffnessMatrix ; (; core::behavior::StiffnessMatrix * ; matrix). overridevirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ draw(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ getAccumulatedPotentialEnergy(). template<class DataTypes > . SReal sofa::c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html:26918,update,update,26918,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html,1,['update'],['update']
Deployability,"lePos {-1};  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(MeshROI, DataTypes), SOFA_TEMPLATE(BaseROI, DataTypes));  ; void roiInit () override;  ; bool roiDoUpdate () override;  ; void roiDraw (const core::visual::VisualParams *vparams) override;  ; void roiComputeBBox (const core::ExecParams *params, type::BoundingBox &bbox) override;  ;  Public Member Functions inherited from sofa::component::engine::select::BaseROI< DataTypes >;  SOFA_CLASS (SOFA_TEMPLATE(BaseROI, DataTypes), Inherit);  ; void init () final;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ; void draw (const core::visual::VisualParams *vparams) final;  Render internal data of this object, for debugging purposes. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible) final;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void del",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_r_o_i.html:7838,update,update,7838,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_r_o_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_r_o_i.html,1,['update'],['update']
Deployability,"leStateAccessor, DataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(TrianglePressureForceField, DataTypes), SOFA_TEMPLATE(core::behavior::ForceField, DataTypes))sofa::component::mechanicalload::TrianglePressureForceField< DataTypes >; ForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; triangleListsofa::component::mechanicalload::TrianglePressureForceField< DataTypes >; TrianglePressureForceField()sofa::component::mechanicalload::TrianglePressureForceField< DataTypes >protected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateTriangleInformation()sofa::component::mechanicalload::TrianglePressureForceField< DataTypes >protected; VecCoord typedefsofa::component::mechanicalload::TrianglePressureForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::mechanicalload::TrianglePressureForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ForceField() overridesofa::core::behavior::ForceField< DataTypes ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_triangle_pressure_force_field-members.html:17002,update,updateInternal,17002,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_triangle_pressure_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_triangle_pressure_force_field-members.html,1,['update'],['updateInternal']
Deployability,"lementinlineprotected; ShaderElementType enum namesofa::core::visual::ShaderElement; shaderssofa::gl::component::shader::OglShaderElementprotected; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglTexturePointer, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglTexturePointer; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; textureUnitsofa::gl::component::shader::OglTexturePointerprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; unbind()sofa::gl::component::shader::OglTexturePointer; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglTexturePointer() overridesofa::gl::component::shader::OglTexturePointerprotected; ~ShaderElement() overridesofa::core::visual::ShaderElementinlineprotected; ~VisualModel(",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture_pointer-members.html:13289,update,updateInternal,13289,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture_pointer-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture_pointer-members.html,2,['update'],['updateInternal']
Deployability,"ler(double defaultLength=1000000)sofa::gui::qt::GLPickHandler; handleMouseEvent(MOUSE_STATUS status, MOUSE_BUTTON button)sofa::gui::common::PickHandler; init(core::objectmodel::BaseNode *root)sofa::gui::common::PickHandler; instanceComponentssofa::gui::common::PickHandlerprotected; interactionsofa::gui::common::PickHandlerprotected; interactorInUsesofa::gui::common::PickHandlerprotected; lastPickedsofa::gui::common::PickHandlerprotected; m_defaultLengthsofa::gui::common::PickHandlerprotected; mouseButtonsofa::gui::common::PickHandlerprotected; mouseCollisionsofa::gui::common::PickHandlerprotected; mouseContainersofa::gui::common::PickHandlerprotected; mouseNodesofa::gui::common::PickHandlerprotected; mousePositionsofa::gui::common::PickHandlerprotected; mouseStatussofa::gui::common::PickHandlerprotected; needToCastRay()sofa::gui::common::PickHandlerprotected; operationssofa::gui::common::PickHandlerprotected; PickHandler(double defaultLength=1000000)sofa::gui::common::PickHandler; pickingMethodsofa::gui::common::PickHandlerprotected; PickingMethod enum namesofa::gui::qt::GLPickHandler; RAY_CASTING enum valuesofa::gui::qt::GLPickHandler; renderCallbacksofa::gui::common::PickHandlerprotected; reset()sofa::gui::common::PickHandler; SELECTION_BUFFER enum valuesofa::gui::qt::GLPickHandler; setColourRenderCallback(CallBackRender *colourRender)sofa::gui::common::PickHandlerinline; setCompatibleInteractor()sofa::gui::common::PickHandlerprotected; setPickingMethod(PickingMethod method)sofa::gui::common::PickHandlerinline; unload()sofa::gui::common::PickHandler; updateMouse2D(MousePosition mouse)sofa::gui::common::PickHandlerinline; updateRay(const sofa::type::Vec3 &position, const sofa::type::Vec3 &orientation)sofa::gui::common::PickHandler; useCollisionssofa::gui::common::PickHandlerprotected; useSelectionBufferMethod() constsofa::gui::common::PickHandlerinline; ~GLPickHandler() overridesofa::gui::qt::GLPickHandlervirtual; ~PickHandler()sofa::gui::common::PickHandlervirtual.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_g_l_pick_handler-members.html:3569,update,updateRay,3569,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_g_l_pick_handler-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_g_l_pick_handler-members.html,2,['update'],['updateRay']
Deployability,"letesofa::simulation::Simulationvirtual; createNewGraph(const std::string &name) overridesofa::simulation::graph::DAGSimulationvirtual; createNewNode(const std::string &name) overridesofa::simulation::graph::DAGSimulationvirtual; DAGSimulation()sofa::simulation::graph::DAGSimulation; draw(sofa::core::visual::VisualParams *vparams, Node *root)=deletesofa::simulation::Simulationvirtual; dumpState(Node *root, std::ofstream &out)=deletesofa::simulation::Simulationvirtual; exportGraph(Node *root, const char *filename=nullptr)=deletesofa::simulation::Simulationvirtual; exportOBJ(Node *root, const char *filename, bool exportMTL=true)=deletesofa::simulation::Simulationvirtual; exportXML(Node *root, const char *fileName=nullptr)=deletesofa::simulation::Simulationvirtual; init(Node *root)=deletesofa::simulation::Simulationvirtual; initNode(Node *node)=deletesofa::simulation::Simulationvirtual; initTextures(Node *root)=deletesofa::simulation::Simulationvirtual; isDirectedAcyclicGraph() overridesofa::simulation::graph::DAGSimulationinlinevirtual; load(const std::string &, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0))=deletesofa::simulation::Simulationvirtual; operator=(const Simulation &n)=deletesofa::simulation::Simulation; print(Node *root)=deletesofa::simulation::Simulationvirtual; reset(Node *root)=deletesofa::simulation::Simulationvirtual; Simulation()sofa::simulation::Simulation; Simulation(const Simulation &n)=deletesofa::simulation::Simulation; SPtr typedefsofa::simulation::Simulation; theSimulationsofa::simulation::Simulationinlinestatic; unload(NodeSPtr root)=deletesofa::simulation::Simulationvirtual; updateContext(Node *root)=deletesofa::simulation::Simulationvirtual; updateVisual(Node *root)=deletesofa::simulation::Simulationvirtual; updateVisualContext(Node *root)=deletesofa::simulation::Simulationvirtual; ~DAGSimulation() overridesofa::simulation::graph::DAGSimulation; ~Simulation()sofa::simulation::Simulationvirtual.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation-members.html:2197,update,updateContext,2197,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation-members.html,6,['update'],"['updateContext', 'updateVisual', 'updateVisualContext']"
Deployability,"lias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  GeometryAlgorithms ();  Constructor. More...;  ;  ~GeometryAlgorithms () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::topology::BaseTopologyObject;  BaseTopologyObject ();  ;  ~BaseTopologyObject () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; vo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_geometry_algorithms.html:10068,update,update,10068,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_geometry_algorithms.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_geometry_algorithms.html,1,['update'],['update']
Deployability,"lias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  MergeSets ();  ;  ~MergeSets () override;  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_sets.html:12968,update,update,12968,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_sets.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_sets.html,1,['update'],['update']
Deployability,"lias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  BaseConstraintCorrection ();  ;  ~BaseConstraintCorrection () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_constraint_correction.html:11458,update,update,11458,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_constraint_correction.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_constraint_correction.html,1,['update'],['update']
Deployability,"lidmechanics::fem::hyperelastic::material::Costa< DataTypes >::Name = ""Costa"". staticconstexpr . Function details. ◆ applyElasticityTensor(). template<class DataTypes > . virtual void sofa::component::solidmechanics::fem::hyperelastic::material::Costa< DataTypes >::applyElasticityTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . const MatrixSym & ; , . MatrixSym & ;  . ). inlinevirtual . computes the Elasticity Tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ deriveSPKTensor(). template<class DataTypes > . virtual void sofa::component::solidmechanics::fem::hyperelastic::material::Costa< DataTypes >::deriveSPKTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . MatrixSym & ;  . ). inlinevirtual . computes the second Piola Kirchhoff stress tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ ElasticityTensor(). template<class DataTypes > . virtual void sofa::component::solidmechanics::fem::hyperelastic::material::Costa< DataTypes >::ElasticityTensor ; (; StrainInformation< DataTypes > * ; sinfo, . const MaterialParameters< DataTypes > & ; param, . Matrix6 & ; outputTensor . ). inlinevirtual . Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ getStrainEnergy(). template<class DataTypes > . virtual Real sofa::component::solidmechanics::fem::hyperelastic::material::Costa< DataTypes >::getStrainEnergy ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ;  . ). inlinevirtual . returns the strain energy of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. sofacomponentsolidmechanicsfemhype",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_costa.html:3112,configurat,configuration,3112,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_costa.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_costa.html,1,['configurat'],['configuration']
Deployability,"lidmechanics::fem::hyperelastic::material::Ogden< DataTypes >::Name = ""Ogden"". staticconstexpr . Function details. ◆ applyElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes >::applyElasticityTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . const MatrixSym & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the Elasticity Tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ deriveSPKTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes >::deriveSPKTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the second Piola Kirchhoff stress tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ ElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes >::ElasticityTensor ; (; StrainInformation< DataTypes > * ; sinfo, . const MaterialParameters< DataTypes > & ; param, . Matrix6 & ; outputTensor . ). inlineoverridevirtual . Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ getStrainEnergy(). template<class DataTypes > . Real sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes >::getStrainEnergy ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ;  . ). inlineoverridevirtual . returns the strain energy of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. sofacomponentsolidmechanicsfemhype",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_ogden.html:3116,configurat,configuration,3116,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_ogden.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_ogden.html,1,['configurat'],['configuration']
Deployability,"lidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::getLambda ; (; ); const. inlinevirtual . ◆ getMu(). template<class DataTypes > . virtual Real sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::getMu ; (; ); const. inlinevirtual . ◆ getPotentialEnergy(). template<class DataTypes > . SReal sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::getPotentialEnergy ; (; const core::MechanicalParams * ; , . const DataVecCoord & ;  . ); const. inlineoverridevirtual . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ init(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ setPoissonRatio(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::setPoissonRatio ; (; const Real ; ratio). inline . ◆ setYoungModulus(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::setYoungModulus ; (; const Real ; modulus). inline . ◆ SOFA_CLASS(). template<class DataTypes > . sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::SOFA_CLASS ; (; SOFA_TEMPLATE(TriangularTensorMassForceField< DataTypes >, DataTypes) ; , . SOFA_TEMPLATE(core::behavior::ForceField, DataTypes) ;  . ). ◆ updateLameCoefficients(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::updateLameCoefficients. compute lambda and mu based on the Young modulus and Poisson ratio . sofacomponentsolidmechanicstensormassTriangularTensorMassForceField; Generated on Mon Nov 11 2024 03:09:19 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field.html:29033,update,updateLameCoefficients,29033,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field.html,2,['update'],['updateLameCoefficients']
Deployability,"line; setFlag(LinkFlagsEnum flag, bool b)sofa::core::objectmodel::BaseLinkinline; setHelp(const std::string &val)sofa::core::objectmodel::BaseLinkinline; setLinkedBase(Base *link)sofa::core::objectmodel::BaseLink; setName(const std::string &name)sofa::core::objectmodel::BaseLinkinline; setOwner(OwnerType *owner)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline; sofa::core::objectmodel::BaseLink::setOwner(Base *owner)sofa::core::objectmodel::BaseLinkinline; setPersistent(bool b)sofa::core::objectmodel::BaseLinkinline; setValidator(ValidatorFn fn)sofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >inline; size() constsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline; StorePathsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >static; storePath() constsofa::core::objectmodel::BaseLinkinline; TLink()sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline; TLink(const InitLink< OwnerType > &init)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline; TraitsContainer typedefsofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >; TraitsDestPtr typedefsofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >; TraitsValueType typedefsofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >; updateCounter()sofa::core::objectmodel::BaseLinkinlineprotected; updateLinks()sofa::core::objectmodel::BaseLink; ValidatorFn typedefsofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >; ValueType typedefsofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >; ~BaseLink()sofa::core::objectmodel::BaseLinkvirtual; ~MultiLink()sofa::core::objectmodel::MultiLink< TOwnerType, TDestType, TFlags >inlinevirtual; ~TLink() overridesofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags|BaseLink::FLAG_MULTILINK >inline.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link-members.html:9128,update,updateCounter,9128,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_multi_link-members.html,2,['update'],"['updateCounter', 'updateLinks']"
Deployability,"linearsolver::MatrixLinearSolver< TMatrix, TVector, NoThreadManager >; resetSystem()sofa::component::linearsolver::MatrixLinearSolver< TMatrix, TVector, NoThreadManager >; resizeSystem(Size n)sofa::component::linearsolver::MatrixLinearSolver< TMatrix, TVector, NoThreadManager >; resizeSystem(Size)sofa::component::linearsolver::MatrixLinearSolver< TMatrix, TVector, NoThreadManager >; setSystemLHVector(core::MultiVecDerivId v)sofa::component::linearsolver::MatrixLinearSolver< TMatrix, TVector, NoThreadManager >; setSystemLHVector(core::MultiVecDerivId v)sofa::component::linearsolver::MatrixLinearSolver< TMatrix, TVector, NoThreadManager >; setSystemMBKMatrix(const core::MechanicalParams *mparams) overridesofa::component::linearsolver::preconditioner::WarpPreconditioner< TMatrix, TVector, ThreadManager >; SOFA_CLASS(SOFA_TEMPLATE3(WarpPreconditioner, TMatrix, TVector, ThreadManager), SOFA_TEMPLATE3(sofa::component::linearsolver::MatrixLinearSolver, TMatrix, TVector, ThreadManager))sofa::component::linearsolver::preconditioner::WarpPreconditioner< TMatrix, TVector, ThreadManager >; solve(Matrix &M, Vector &solution, Vector &rh) overridesofa::component::linearsolver::preconditioner::WarpPreconditioner< TMatrix, TVector, ThreadManager >; Transformation typedefsofa::component::linearsolver::preconditioner::WarpPreconditioner< TMatrix, TVector, ThreadManager >; TRotationMatrix typedefsofa::component::linearsolver::preconditioner::WarpPreconditioner< TMatrix, TVector, ThreadManager >; updateSystemMatrix() overridesofa::component::linearsolver::preconditioner::WarpPreconditioner< TMatrix, TVector, ThreadManager >; Vector typedefsofa::component::linearsolver::preconditioner::WarpPreconditioner< TMatrix, TVector, ThreadManager >; WarpPreconditioner()sofa::component::linearsolver::preconditioner::WarpPreconditioner< TMatrix, TVector, ThreadManager >protected; ~WarpPreconditioner()sofa::component::linearsolver::preconditioner::WarpPreconditioner< TMatrix, TVector, ThreadManager >.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_warp_preconditioner-members.html:6362,update,updateSystemMatrix,6362,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_warp_preconditioner-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_warp_preconditioner-members.html,1,['update'],['updateSystemMatrix']
Deployability,"linestatic . Pre-construction check method called by ObjectFactory. Check that DataTypes matches the MechanicalState. . ◆ computeBBox(). template<class DataTypes > . void sofa::component::collision::geometry::PointCollisionModel< DataTypes >::computeBBox ; (; const core::ExecParams * ; , . bool ;  . ). overridevirtual . Bounding Box computation method. Default to empty method. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ computeBoundingTree(). template<class DataTypes > . void sofa::component::collision::geometry::PointCollisionModel< DataTypes >::computeBoundingTree ; (; int ; maxDepth = 0). overridevirtual . Create or update the bounding volume hierarchy. ; Implements sofa::core::CollisionModel. ◆ computeContinuousBoundingTree(). template<class DataTypes > . void sofa::component::collision::geometry::PointCollisionModel< DataTypes >::computeContinuousBoundingTree ; (; SReal ; , . int ; maxDepth = 0 . ). overridevirtual . Create or update the bounding volume hierarchy, accounting for motions within the given timestep. ; Default to computeBoundingTree(). ; Reimplemented from sofa::core::CollisionModel. ◆ draw() [1/2]. template<class DataTypes > . void sofa::component::collision::geometry::PointCollisionModel< DataTypes >::draw ; (; const core::visual::VisualParams * ; , . sofa::Index ;  . ). overridevirtual . Render an collision element. ; Reimplemented from sofa::core::CollisionModel. ◆ draw() [2/2]. template<class DataTypes > . void sofa::component::collision::geometry::PointCollisionModel< DataTypes >::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ getCollisionTopology(). template<class TDataTypes > . sofa::core::topology::BaseMeshTopology* sofa::component::collision::geometry::PointCollisionModel< TDataTypes >::getCollisionTopology ; (; ). inlineoverridevirtual . BaseMeshTopology associated to the collision ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_point_collision_model.html:25955,update,update,25955,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_point_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_point_collision_model.html,1,['update'],['update']
Deployability,"lision(bool _bSelfCollision)sofa::core::CollisionModelinline; setSimulated(bool val=true)sofa::core::CollisionModelinlinevirtual; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; SetUserData(void *pUserData)sofa::core::CollisionModelinline; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; Size typedefsofa::core::CollisionModel; sizesofa::core::CollisionModelprotected; SOFA_ABSTRACT_CLASS(CollisionModel, objectmodel::BaseObject)sofa::core::CollisionModel; SOFA_CLASS(RayCollisionModel, core::CollisionModel)sofa::component::collision::geometry::RayCollisionModel; sofa::core::CollisionModel::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPHERE_TYPE enum valuesofa::core::CollisionModel; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; TETRAHEDRON_TYPE enum valuesofa::core::CollisionModel; Topology typedefsofa::core::CollisionModel; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; TRIANGLE_TYPE enum valuesofa::core::CollisionModel; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; userDatasofa::core::CollisionModelprotected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~CollisionModel() overridesofa::core::CollisionModelinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_ray_collision_model-members.html:16490,update,updateInternal,16490,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_ray_collision_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_ray_collision_model-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(MeshSubsetEngine, DataTypes), Inherited);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_subset_engine.html:3616,update,update,3616,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_subset_engine.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_subset_engine.html,1,['update'],['update']
Deployability,"list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; for_each(VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; getCategoryName() const overridesofa::simulation::UpdateContextVisitorinlinevirtual; getClassName() const overridesofa::simulation::UpdateVisualContextVisitorinlinevirtual; getInfos() constsofa::simulation::Visitorinlinevirtual; isThreadSafe() const overridesofa::simulation::UpdateContextVisitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::UpdateVisualContextVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::V",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor-members.html:2477,Update,UpdateContextVisitorinlinevirtual,2477,api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor-members.html,1,['Update'],['UpdateContextVisitorinlinevirtual']
Deployability,"lled at constructor. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::gui::qt::SimpleDataWidget< T, graph_data_widget_container< T > >; graph_data_widget_container< T > container;  ;  Protected Attributes inherited from sofa::gui::qt::TDataWidget< T >; MyTData * Tdata;  ;  Protected Attributes inherited from sofa::gui::qt::DataWidget; core::objectmodel::BaseData * baseData;  ; bool dirty;  ; int counter;  ; bool m_isFilled;  tell if DataWidget has been filled from Data true by default More...;  ; bool m_toFill;  bool to warn action is needed to fill Data, false by default More...;  ;  Static Public Member Functions inherited from sofa::gui::qt::TDataWidget< T >; template<class RealObject > ; static RealObject * create (RealObject *, CreatorArgument &arg);  ;  Static Public Member Functions inherited from sofa::gui::qt::DataWidget; template<class T > ; static T * create (T *, const CreatorArgument &arg);  ; static DataWidget * CreateDataWidget (const DataWidget::CreatorArgument &dwarg);  ;  Signals inherited from sofa::gui::qt::DataWidget; void WidgetDirty (bool);  ; void DataOwnerDirty (bool);  ; void dataValueChanged (QString dataValueString);  ;  Public Slots inherited from sofa::gui::qt::DataWidget; void updateDataValue ();  ; void updateWidgetValue ();  ; void setWidgetDirty (bool b=true);  ; void fillFromData ();  . Constructor details. ◆ GraphDataWidget(). template<class T > . sofa::gui::qt::GraphDataWidget< T >::GraphDataWidget ; (; QWidget * ; parent, . const char * ; name, . MyData * ; d . ). inline . Function details. ◆ numColumnWidget(). template<class T > . virtual unsigned int sofa::gui::qt::GraphDataWidget< T >::numColumnWidget ; (; ). inlinevirtual . Helper method for column. ; Reimplemented from sofa::gui::qt::SimpleDataWidget< T, graph_data_widget_container< T > >. ◆ sizeWidget(). template<class T > . virtual unsigned int sofa::gui::qt::GraphDataWidget< T >::sizeWidget ; (; ). inlinevirtual . Helper method to give",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_graph_data_widget.html:3326,update,updateDataValue,3326,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_graph_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_graph_data_widget.html,4,['update'],"['updateDataValue', 'updateWidgetValue']"
Deployability,"lled at constructor. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::gui::qt::SimpleDataWidget< T, graph_data_widget_container< T > >; graph_data_widget_container< T > container;  ;  Protected Attributes inherited from sofa::gui::qt::TDataWidget< T >; MyTData * Tdata;  ;  Protected Attributes inherited from sofa::gui::qt::DataWidget; core::objectmodel::BaseData * baseData;  ; bool dirty;  ; int counter;  ; bool m_isFilled;  tell if DataWidget has been filled from Data true by default More...;  ; bool m_toFill;  bool to warn action is needed to fill Data, false by default More...;  ;  Static Public Member Functions inherited from sofa::gui::qt::TDataWidget< T >; template<class RealObject > ; static RealObject * create (RealObject *, CreatorArgument &arg);  ;  Static Public Member Functions inherited from sofa::gui::qt::DataWidget; template<class T > ; static T * create (T *, const CreatorArgument &arg);  ; static DataWidget * CreateDataWidget (const DataWidget::CreatorArgument &dwarg);  ;  Signals inherited from sofa::gui::qt::DataWidget; void WidgetDirty (bool);  ; void DataOwnerDirty (bool);  ; void dataValueChanged (QString dataValueString);  ;  Public Slots inherited from sofa::gui::qt::DataWidget; void updateDataValue ();  ; void updateWidgetValue ();  ; void setWidgetDirty (bool b=true);  ; void fillFromData ();  . Constructor details. ◆ GraphDataWidget_Linear(). template<class T > . sofa::gui::qt::GraphDataWidget_Linear< T >::GraphDataWidget_Linear ; (; QWidget * ; parent, . const char * ; name, . MyData * ; d . ). inline . Function details. ◆ createWidgets(). template<class T > . virtual bool sofa::gui::qt::GraphDataWidget_Linear< T >::createWidgets ; (; ). inlinevirtual . The implementation of this method holds the widget creation and the signal / slot connections. ; Reimplemented from sofa::gui::qt::SimpleDataWidget< T, graph_data_widget_container< T > >. sofaguiqtGraphDataWidget_Linear; Generated on Mon Nov 11 2024 03:2",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_graph_data_widget___linear.html:3499,update,updateDataValue,3499,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_graph_data_widget___linear.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_graph_data_widget___linear.html,4,['update'],"['updateDataValue', 'updateWidgetValue']"
Deployability,"lling-header-of-sofameshcollision-from-sofabasecollision; ; SOFA - Topic: [SOLVED] Question about calling header of SofaMeshCollision from SofaBaseCollision. /question-about-collisionelementiterator; ; SOFA - Topic: Question about CollisionElementIterator. /question-about-neo-hookean-strain-energy-function-implemented-in-sofa; ; SOFA - Topic: Question about Neo-Hookean Strain Energy function implemented in Sofa. /question-about-pre-deformed-bellow-actuator; ; SOFA - Topic: Question about pre-deformed bellow actuator. /question-about-sofa; ; SOFA - Topic: Question about SOFA. /question-about-the-sofarobots-plugin; ; SOFA - Topic: [SOLVED] Question about the SofaRobots Plugin. /question-about-tutorial-for-topologyvolumedifferentmesh; ; SOFA - Topic: [SOLVED] Question about tutorial for TopologyVolumeDifferentMesh. /question-about-variable-meaning-in-collision-component; ; SOFA - Topic: [SOLVED] Question about variable meaning in collision component. /questionns-about-installation; ; SOFA - Topic: Questionns about installation. /question-on-tetrahedronhyperelasticityfemforcefield; ; SOFA - Topic: [SOLVED] Question on TetrahedronHyperelasticityFEMForceField. /questions-about-carvingmanager-omnisofa; . /feed; ; [SOLVED] Questions about CarvingManager & OmniSOFA – SOFA. /page; . /2; ; SOFA - Topic: [SOLVED] Questions about CarvingManager & OmniSOFA. /5; ; SOFA - Topic: [SOLVED] Questions about CarvingManager & OmniSOFA. SOFA - Topic: [SOLVED] Questions about CarvingManager & OmniSOFA. /questions-about-setting-up-qtcreator; ; SOFA - Topic: [SOLVED] Questions about ""Setting up QtCreator"". /questions-about-sofa; . /feed; ; [SOLVED] What is SOFA dedicated to? How to use it as physics engine? – SOFA. SOFA - Topic: [SOLVED] What is SOFA dedicated to? How to use it as physics engine?. /questions-regarding-the-installation-of-sofapython3-plugin; ; SOFA - Topic: [SOLVED] Questions regarding the installation of SofaPython3 plugin. /random-linear-force-field; ; SOFA - Topic: [SOLVED]",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:373868,install,installation,373868,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['install'],['installation']
Deployability,"llision::detection::intersection::DiscreteIntersectionvirtual; testIntersection(collision::geometry::Cube &cube1, collision::geometry::Cube &cube2)=deletesofa::component::collision::detection::intersection::DiscreteIntersectionvirtual; testIntersection(collision::geometry::Sphere &sph1, collision::geometry::Sphere &sph2)=deletesofa::component::collision::detection::intersection::DiscreteIntersectionvirtual; testIntersection(collision::geometry::RigidSphere &sph1, collision::geometry::RigidSphere &sph2)=deletesofa::component::collision::detection::intersection::DiscreteIntersectionvirtual; testIntersection(collision::geometry::Sphere &sph1, collision::geometry::RigidSphere &sph2)=deletesofa::component::collision::detection::intersection::DiscreteIntersectionvirtual; testIntersectionSphere(SphereType1 &sph1, SphereType2 &sph2, const SReal alarmDist)sofa::component::collision::detection::intersection::DiscreteIntersectioninlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; useContinuous() constsofa::core::collision::Intersectioninlinevirtual; useProximity() constsofa::core::collision::Intersectioninlinevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseIntersector()sofa::core::collision::BaseIntersectorinline; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DiscreteIntersection() overridesofa::component::collision::detection::intersection::DiscreteIntersectioninlineprotected; ~Intersection() overridesofa::core::collision::Intersectionprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_discrete_intersection-members.html:15607,update,updateInternal,15607,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_discrete_intersection-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_discrete_intersection-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"llision::response::mapper::IdentityContactMapper< TCollisionModel, typename TCollisionModel::InDataTypes >, sofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes >, sofa::component::collision::response::mapper::IdentityContactMapper< collision::geometry::PointCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >, sofa::component::collision::response::mapper::IdentityContactMapper< collision::geometry::SphereCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >, sofa::component::collision::response::mapper::SubsetContactMapper< TCollisionModel, DataTypes >, sofa::component::collision::response::mapper::RigidContactMapper< TCollisionModel, DataTypes >, sofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::CylinderCollisionModel< sofa::defaulttype::Rigid3Types >, TVec3Types >, and sofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::RigidSphereModel, TVec3Types >. ◆ update(). template<class TDataTypes > . virtual void sofa::component::collision::response::mapper::BaseContactMapper< TDataTypes >::update ; (; ). pure virtual . Implemented in sofa::component::collision::response::mapper::BarycentricContactMapper< TCollisionModel, TDataTypes >, sofa::component::collision::response::mapper::BarycentricContactMapper< collision::geometry::LineCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >, sofa::component::collision::response::mapper::BarycentricContactMapper< collision::geometry::TetrahedronCollisionModel, DataTypes >, sofa::component::collision::response::mapper::BarycentricContactMapper< collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >, sofa::component::collision::response::mapper::SubsetContactMapper< TCollisionModel, DataTypes >, sofa::component::collision::response::mapper::RigidContactMapper< TCollisionModel, DataTypes >, sofa::component::collision::response::mapper::RigidContactMapper< collision::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_base_contact_mapper.html:8353,update,update,8353,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_base_contact_mapper.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_base_contact_mapper.html,1,['update'],['update']
Deployability,"llision::response::mapper::RigidContactMapper< TCollisionModel, DataTypes >, sofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::CylinderCollisionModel< sofa::defaulttype::Rigid3Types >, TVec3Types >, sofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::RigidSphereModel, TVec3Types >, sofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, typename TCollisionModel::InDataTypes >, sofa::component::collision::response::mapper::IdentityContactMapper< TCollisionModel, DataTypes >, sofa::component::collision::response::mapper::IdentityContactMapper< collision::geometry::PointCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >, and sofa::component::collision::response::mapper::IdentityContactMapper< collision::geometry::SphereCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >. ◆ updateXfree(). template<class TDataTypes > . virtual void sofa::component::collision::response::mapper::BaseContactMapper< TDataTypes >::updateXfree ; (; ). pure virtual . Implemented in sofa::component::collision::response::mapper::BarycentricContactMapper< TCollisionModel, TDataTypes >, sofa::component::collision::response::mapper::BarycentricContactMapper< collision::geometry::LineCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >, sofa::component::collision::response::mapper::BarycentricContactMapper< collision::geometry::TetrahedronCollisionModel, DataTypes >, sofa::component::collision::response::mapper::BarycentricContactMapper< collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >, sofa::component::collision::response::mapper::SubsetContactMapper< TCollisionModel, DataTypes >, sofa::component::collision::response::mapper::RigidContactMapper< TCollisionModel, DataTypes >, sofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::CylinderCollisionModel< sofa::defaulttype::Rigid3Types >, TVec3Types >, sofa:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_base_contact_mapper.html:10239,update,updateXfree,10239,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_base_contact_mapper.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_base_contact_mapper.html,1,['update'],['updateXfree']
Deployability,"llisionModel, TDataTypes >; MMapping typedefsofa::component::collision::response::mapper::BarycentricContactMapper< TCollisionModel, TDataTypes >; MMechanicalObject typedefsofa::component::collision::response::mapper::BarycentricContactMapper< TCollisionModel, TDataTypes >; MMechanicalState typedefsofa::component::collision::response::mapper::BarycentricContactMapper< TCollisionModel, TDataTypes >; modelsofa::component::collision::response::mapper::BarycentricContactMapper< TCollisionModel, TDataTypes >; Real typedefsofa::component::collision::response::mapper::BarycentricContactMapper< TCollisionModel, TDataTypes >; resize(sofa::Size size) overridesofa::component::collision::response::mapper::BarycentricContactMapper< TCollisionModel, TDataTypes >inline; sofa::component::collision::response::mapper::BaseContactMapper::resize(Size size)=0sofa::component::collision::response::mapper::BaseContactMapper< TDataTypes >pure virtual; setCollisionModel(MCollisionModel *model)sofa::component::collision::response::mapper::BarycentricContactMapper< TCollisionModel, TDataTypes >inline; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Index, sofa::Index)sofa::component::collision::response::mapper::BarycentricContactMapper< TCollisionModel, TDataTypes >; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Size, sofa::Size)sofa::component::collision::response::mapper::BarycentricContactMapper< TCollisionModel, TDataTypes >; update() overridesofa::component::collision::response::mapper::BarycentricContactMapper< TCollisionModel, TDataTypes >inlinevirtual; updateX0()sofa::component::collision::response::mapper::BarycentricContactMapper< TCollisionModel, TDataTypes >inline; updateXfree() overridesofa::component::collision::response::mapper::BarycentricContactMapper< TCollisionModel, TDataTypes >inlinevirtual; VecCoord typedefsofa::component::collision::response::mapper::BaseContactMapper< TDataTypes >; ~BaseContactMapper()sofa::component::collision::response::mapper::BaseContactMapper< TDataTypes >inlinevirtual.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_barycentric_contact_mapper-members.html:4174,update,update,4174,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_barycentric_contact_mapper-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_barycentric_contact_mapper-members.html,2,['update'],"['update', 'updateXfree']"
Deployability,"llisions;  ; type::fixed_array< Operation *, NONE > operations;  ; type::vector< CallBackPicker * > callbacks;  ; CallBackRender * renderCallback;  ; PickingMethod pickingMethod;  ; double m_defaultLength;  Default length of the ray. Set by constructor. More...;  . Public Member Functions;  GLPickHandler (double defaultLength=1000000);  ; virtual ~GLPickHandler () override;  ; void allocateSelectionBuffer (int width, int height) override;  ; void destroySelectionBuffer () override;  ; common::BodyPicked findCollisionUsingColourCoding (const type::Vec3 &origin, const type::Vec3 &direction) override;  ;  Public Member Functions inherited from sofa::gui::common::PickHandler;  PickHandler (double defaultLength=1000000);  ; virtual ~PickHandler ();  ; void activateRay (int width, int height, core::objectmodel::BaseNode *root);  ; void deactivateRay ();  ; void setPickingMethod (PickingMethod method);  ; bool useSelectionBufferMethod () const;  ; void updateRay (const sofa::type::Vec3 &position, const sofa::type::Vec3 &orientation);  ; void handleMouseEvent (MOUSE_STATUS status, MOUSE_BUTTON button);  ; void init (core::objectmodel::BaseNode *root);  ; void reset ();  ; void unload ();  ; void setColourRenderCallback (CallBackRender *colourRender);  ; void updateMouse2D (MousePosition mouse);  ; Operation * getOperation (MOUSE_BUTTON button);  ; Operation * changeOperation (sofa::component::setting::MouseButtonSetting *setting);  ; Operation * changeOperation (MOUSE_BUTTON button, const std::string &op);  ; void addCallBack (CallBackPicker *c);  ; type::vector< CallBackPicker * > getCallBackPicker ();  ; void clearCallBacks ();  ; ComponentMouseInteraction * getInteraction ();  ; BodyPicked * getLastPicked ();  . Additional Inherited Members;  Static Public Member Functions inherited from sofa::gui::common::PickHandler; static BodyPicked findCollisionUsingBruteForce (const type::Vec3 &origin, const type::Vec3 &direction, double maxLength, core::objectmodel::BaseNode *root)",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_g_l_pick_handler.html:1885,update,updateRay,1885,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_g_l_pick_handler.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_g_l_pick_handler.html,2,['update'],['updateRay']
Deployability,"llptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Index, sofa::Index)sofa::component::engine::select::ComplementaryROI< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(ComplementaryROI, DataTypes), core::DataEngine)sofa::component::engine::select::ComplementaryROI< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; vd_setIndicessofa::component::engine::select::ComplementaryROI< DataTypes >protected; VecCoord typedefsofa::component::engine::select::ComplementaryROI< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ComplementaryROI() overridesofa::component::engine::select::ComplementaryROI< DataTypes >; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_complementary_r_o_i-members.html:12785,update,updateIfDirty,12785,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_complementary_r_o_i-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_complementary_r_o_i-members.html,3,['update'],"['updateIfDirty', 'updateInternal', 'updateLinks']"
Deployability,"llptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(Shader, objectmodel::BaseObject)sofa::core::visual::Shader; sofa::core::visual::VisualModel::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; SOFA_CLASS(OglOITShader, sofa::gl::component::shader::OglShader)sofa::gl::component::shader::OglOITShader; sofa::gl::component::shader::OglShader::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglShader, core::visual::Shader, core::visual::VisualModel)sofa::gl::component::shader::OglShader; SPtr typedefsofa::core::objectmodel::Base; start() overridesofa::gl::component::shader::OglShadervirtual; stop() overridesofa::gl::component::shader::OglShadervirtual; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; turnOnsofa::gl::component::shader::OglShader; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; vertFilenamesofa::gl::component::shader::OglShader; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglOITShader() overridesofa::gl::component::shader::OglOITShaderprotected; ~OglShader() overridesofa::gl::component::shader::OglShaderprotected; ~Shader() overridesofa::core::visual::Shaderinlineprotected; ~VisualModel() overridesofa::core::visual::Visu",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_o_i_t_shader-members.html:16882,update,updateLinks,16882,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_o_i_t_shader-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_o_i_t_shader-members.html,2,['update'],['updateLinks']
Deployability,"llptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglIntVector2Variable, OglIntVectorVariable)sofa::gl::component::shader::OglIntVector2Variable; sofa::gl::component::shader::OglIntVectorVariable::SOFA_CLASS(OglIntVectorVariable, OglVariable< type::vector< GLint > >)sofa::gl::component::shader::OglIntVectorVariable; OglVariable< type::vector< GLint > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< GLint > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< GLint > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglIntVector2Variable() overridesofa::gl::component::shader::OglIntVector2Variableinline; ~OglIntVectorVariable()sofa::gl::component::shader::OglIntVectorVariableinlinevirtual; ~OglS",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector2_variable-members.html:13763,update,updateInternal,13763,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector2_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector2_variable-members.html,2,['update'],['updateInternal']
Deployability,"llptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglIntVector3Variable, OglIntVectorVariable)sofa::gl::component::shader::OglIntVector3Variable; sofa::gl::component::shader::OglIntVectorVariable::SOFA_CLASS(OglIntVectorVariable, OglVariable< type::vector< GLint > >)sofa::gl::component::shader::OglIntVectorVariable; OglVariable< type::vector< GLint > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< GLint > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< GLint > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglIntVector3Variable() overridesofa::gl::component::shader::OglIntVector3Variableinline; ~OglIntVectorVariable()sofa::gl::component::shader::OglIntVectorVariableinlinevirtual; ~OglS",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector3_variable-members.html:13763,update,updateInternal,13763,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector3_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector3_variable-members.html,2,['update'],['updateInternal']
Deployability,"llptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglIntVector4Variable, OglIntVectorVariable)sofa::gl::component::shader::OglIntVector4Variable; sofa::gl::component::shader::OglIntVectorVariable::SOFA_CLASS(OglIntVectorVariable, OglVariable< type::vector< GLint > >)sofa::gl::component::shader::OglIntVectorVariable; OglVariable< type::vector< GLint > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< GLint > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< GLint > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglIntVector4Variable() overridesofa::gl::component::shader::OglIntVector4Variableinline; ~OglIntVectorVariable()sofa::gl::component::shader::OglIntVectorVariableinlinevirtual; ~OglS",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector4_variable-members.html:13763,update,updateInternal,13763,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector4_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector4_variable-members.html,2,['update'],['updateInternal']
Deployability,"llptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(ConstraintCorrection, TDataTypes), BaseConstraintCorrection)sofa::core::behavior::ConstraintCorrection< TDataTypes >; sofa::core::behavior::BaseConstraintCorrection::SOFA_ABSTRACT_CLASS(BaseConstraintCorrection, objectmodel::BaseObject)sofa::core::behavior::BaseConstraintCorrection; SOFA_CLASS(SOFA_TEMPLATE(LinearSolverConstraintCorrection, TDataTypes), SOFA_TEMPLATE(sofa::core::behavior::ConstraintCorrection, TDataTypes))sofa::component::constraint::lagrangian::correction::LinearSolverConstraintCorrection< TDataTypes >; sofa::core::behavior::ConstraintCorrection::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::constraint::lagrangian::correction::LinearSolverConstraintCorrection< TDataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::constraint::lagrangian::correction::LinearSolverConstraintCorrection< TDataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; verify_constraints()sofa::component::constraint::lagrangian::correction::LinearSolverConstraintCorrection< TDataTypes >; wire_optimizationsofa::component::constraint::lagrangian::correction::LinearSolverConstraintCorrection< TDataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseConstraintCorrection() overridesofa::core::behavior::BaseConstraintCorrectionp",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_linear_solver_constraint_correction-members.html:18311,update,updateLinks,18311,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_linear_solver_constraint_correction-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_linear_solver_constraint_correction-members.html,1,['update'],['updateLinks']
Deployability,"loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(BoxROI, DataTypes), SOFA_TEMPLATE(BaseROI, DataTypes))sofa::component::engine::select::boxroi::BoxROI< DataTypes >; sofa::component::engine::select::BaseROI::SOFA_CLASS(SOFA_TEMPLATE(BaseROI, DataTypes), Inherit)sofa::component::engine::select::BaseROI< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; Tetra typedefsofa::component::engine::select::BaseROI< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::engine::select::BaseROI< DataTypes >; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec10 typedefsofa::component::engine::select::boxroi::BoxROI< DataTypes >; VecCoord typedefsofa::component::engine::select::BaseROI< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecEdge typedefsofa::component::engine::select::BaseROI< DataTypes >; VecHexa typedefsofa::component::engine::select::BaseROI< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecQuad typedefsofa::component::engine::select::BaseROI< DataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecTetra typedefsofa::component::engine::select::BaseROI< DataTypes >; VecTriangle typedefsofa::component::engine::select::BaseROI< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1boxroi_1_1_box_r_o_i-members.html:18990,update,update,18990,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1boxroi_1_1_box_r_o_i-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1boxroi_1_1_box_r_o_i-members.html,1,['update'],['update']
Deployability,"loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(SOFA_TEMPLATE(TopologyBoundingTrasher, DataTypes), core::objectmodel::BaseObject)sofa::component::topology::utility::TopologyBoundingTrasher< DataTypes >; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; tetraModifiersofa::component::topology::utility::TopologyBoundingTrasher< DataTypes >protected; TopologyBoundingTrasher()sofa::component::topology::utility::TopologyBoundingTrasher< DataTypes >protected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; triangleModifiersofa::component::topology::utility::TopologyBoundingTrasher< DataTypes >protected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::topology::utility::TopologyBoundingTrasher< DataTypes >; Vec6 typedefsofa::component::topology::utility::TopologyBoundingTrasher< DataTypes >; VecCoord typedefsofa::component::topology::utility::TopologyBoundingTrasher< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; Vector3 typedefsofa::component::topology::utility::TopologyBoundingTrasher< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~TopologyBoundingTrasher() overridesofa::component::topology::utility::TopologyBoundingTrasher< DataTypes >protected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topology_bounding_trasher-members.html:11893,update,updateLinks,11893,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topology_bounding_trasher-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topology_bounding_trasher-members.html,1,['update'],['updateLinks']
Deployability,"logy::Topology; TetrahedraAroundEdge typedefsofa::core::topology::BaseMeshTopology; TetrahedraAroundTriangle typedefsofa::core::topology::BaseMeshTopology; TetrahedraAroundVertex typedefsofa::core::topology::BaseMeshTopology; Tetrahedron typedefsofa::core::topology::Topology; TetrahedronID typedefsofa::core::topology::Topology; TetraID typedefsofa::core::topology::Topology; Topology()sofa::core::topology::Topologyinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; updateEdges()sofa::component::topology::container::constant::CubeTopologyprotected; updateHexahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updatePoints()sofa::component::topology::container::constant::CubeTopologyprotected; updateQuads()sofa::component::topology::container::constant::CubeTopologyprotected; updateTetrahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; UV typedefsofa::component::topology::container::constant::MeshTopology; UVID typedefsofa::component::topology::container::constant::MeshTopology; validHexahedrasofa::component::topology::container::constant::MeshTopologyprotected; validTetrahedrasofa::component::topology::container::constant::MeshTopologyprotected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(s",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_cube_topology-members.html:38092,update,updateInternal,38092,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_cube_topology-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_cube_topology-members.html,2,['update'],['updateInternal']
Deployability,"lot . ◆ resizeGL(). void sofa::gui::qt::viewer::qgl::QtGLViewer::resizeGL ; (; int ; w, . int ; h . ). overrideprotected . ◆ resizeH. void sofa::gui::qt::viewer::qgl::QtGLViewer::resizeH ; (; int ; ). overridesignal . ◆ resizeW. void sofa::gui::qt::viewer::qgl::QtGLViewer::resizeW ; (; int ; ). overridesignal . ◆ saveView. void sofa::gui::qt::viewer::qgl::QtGLViewer::saveView ; (; ). overrideslot . ◆ screenshot(). void sofa::gui::qt::viewer::qgl::QtGLViewer::screenshot ; (; const std::string & ; filename, . int ; compression_level = -1 . ). overridevirtual . Reimplemented from sofa::gui::qt::viewer::SofaViewer. ◆ setCameraMode(). void sofa::gui::qt::viewer::qgl::QtGLViewer::setCameraMode ; (; core::visual::VisualParams::CameraType ; mode). overridevirtual . Reimplemented from sofa::gui::common::BaseViewer. ◆ setSizeH. void sofa::gui::qt::viewer::qgl::QtGLViewer::setSizeH ; (; int ; size). overrideslot . ◆ setSizeW. void sofa::gui::qt::viewer::qgl::QtGLViewer::setSizeW ; (; int ; size). overrideslot . ◆ setView. void sofa::gui::qt::viewer::qgl::QtGLViewer::setView ; (; const type::Vec3 & ; pos, . const type::Quat< SReal > & ; ori . ). overridevirtualslot . ◆ UpdateOBJ(). void sofa::gui::qt::viewer::qgl::QtGLViewer::UpdateOBJ ; (; void ; ). ◆ viewAll(). void sofa::gui::qt::viewer::qgl::QtGLViewer::viewAll ; (; void ; ). overrideprotectedvirtual . Overloaded from SofaViewer. ; Implements sofa::gui::common::BaseViewer. ◆ viewerName(). static const char* sofa::gui::qt::viewer::qgl::QtGLViewer::viewerName ; (; ). inlinestatic . ◆ wait(). void sofa::gui::qt::viewer::qgl::QtGLViewer::wait ; (; ). inlineoverridevirtual . ask the viewer to resume its activity ; Reimplemented from sofa::gui::common::BaseViewer. ◆ wheelEvent(). void sofa::gui::qt::viewer::qgl::QtGLViewer::wheelEvent ; (; QWheelEvent * ; e). overrideprotectedvirtual . Reimplemented from sofa::gui::qt::viewer::SofaViewer. sofaguiqtviewerqglQtGLViewer; Generated on Mon Nov 11 2024 03:25:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1viewer_1_1qgl_1_1_qt_g_l_viewer.html:11676,Update,UpdateOBJ,11676,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1viewer_1_1qgl_1_1_qt_g_l_viewer.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1viewer_1_1qgl_1_1_qt_g_l_viewer.html,2,['Update'],['UpdateOBJ']
Deployability,"lot_directory = """" . ). ◆ getConfigDirectoryPath(). const std::string & sofa::gui::common::BaseGUI::getConfigDirectoryPath ; (; ). static . ◆ GetGUIName(). static std::string& sofa::gui::common::BaseGUI::GetGUIName ; (; ). inlinestatic . ◆ GetProgramName(). static const char* sofa::gui::common::BaseGUI::GetProgramName ; (; ). inlinestatic . ◆ getScreenshotDirectoryPath(). const std::string & sofa::gui::common::BaseGUI::getScreenshotDirectoryPath ; (; ). static . ◆ getViewer(). virtual BaseViewer* sofa::gui::common::BaseGUI::getViewer ; (; ). inlinevirtual . Reimplemented in sofa::gui::qt::RealGUI. ◆ initViewer(). virtual void sofa::gui::common::BaseGUI::initViewer ; (; BaseViewer * ; ). inlinevirtual . Reimplemented in sofa::gui::qt::RealGUI. ◆ mainLoop(). virtual int sofa::gui::common::BaseGUI::mainLoop ; (; ). pure virtual . Implemented in sofa::gui::qt::RealGUI, and sofa::gui::batch::BatchGUI. ◆ redraw(). virtual void sofa::gui::common::BaseGUI::redraw ; (; ). pure virtual . Update the GUI. ; Implemented in sofa::gui::batch::BatchGUI. ◆ registerViewer(). virtual void sofa::gui::common::BaseGUI::registerViewer ; (; BaseViewer * ; ). inlinevirtual . Reimplemented in sofa::gui::qt::RealGUI. ◆ saveScreenshot(). bool sofa::gui::common::BaseGUI::saveScreenshot ; (; const std::string & ; filename, . int ; compression_level = -1 . ). virtual . ◆ sendMessage(). virtual void sofa::gui::common::BaseGUI::sendMessage ; (; const std::string & ; , . const std::string & ;  . ). inlinevirtual . Send a (script) message. . ◆ SetArgumentParser(). static void sofa::gui::common::BaseGUI::SetArgumentParser ; (; ArgumentParser * ; parser). inlinestatic . ◆ setBackgroundColor(). virtual void sofa::gui::common::BaseGUI::setBackgroundColor ; (; const sofa::type::RGBAColor & ; ). inlinevirtual . Reimplemented in sofa::gui::qt::RealGUI. ◆ setBackgroundImage(). virtual void sofa::gui::common::BaseGUI::setBackgroundImage ; (; const std::string & ; ). inlinevirtual . Reimplemented in sofa::gui:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_base_g_u_i.html:6263,Update,Update,6263,api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_base_g_u_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_base_g_u_i.html,1,['Update'],['Update']
Deployability,"lp, BaseData::DataFlags dataFlags)sofa::core::objectmodel::Baseprotected; initData0(Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinlineprotected; initGnuplot(const std::string path) overridesofa::core::behavior::Mass< DataTypes >virtual; initLarge(const int i)sofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedralFEMForceFieldAndMass< DataTypes >protected; initPolar(const int i)sofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedralFEMForceFieldAndMass< DataTypes >protected; insertInNode(objectmodel::BaseNode *node) overridesofa::core::behavior::Mass< DataTypes >inlinevirtual; integrateStiffness(int signx0, int signy0, int signz0, int signx1, int signy1, int signz1, const Real u, const Real v, const Real w, const Mat33 &J_1)sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >protected; integrateVolume(int signx, int signy, int signz, Real l0, Real l1, Real l2)sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >protected; isCompliancesofa::core::behavior::BaseForceField; isComponentStateValid() constsofa::core::objectmodel::Baseinline; isDiagonal() const overridesofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >inlinevirtual; l_contextsofa::core::objectmodel::BaseObjectprotected; l_mastersofa::core::objectmodel::BaseObjectprotected; l_mechanicalStatessofa::core::behavior::StateAccessorprotected; l_slavessofa::core::objectmodel::BaseObjectprotected; l_topologysofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >; LARGE enum valuesofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >; LinkSlaves typedefsofa::core::objectmodel::BaseObject; m_aliasDatasofa::core::objectmodel::Baseprotected; m_aliasLinksofa::core::objectmodel::Baseprote",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedral_f_e_m_force_field_and_mass-members.html:23612,integrat,integrateVolume,23612,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedral_f_e_m_force_field_and_mass-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedral_f_e_m_force_field_and_mass-members.html,1,['integrat'],['integrateVolume']
Deployability,"lp, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Function details. ◆ getIntegrationFactor(). SReal sofa::component::odesolver::forward::RungeKutta2Solver::getIntegrationFactor ; (; int ; inputDerivative, . int ; outputDerivative . ); const. inlineoverridevirtual . Given an input derivative order (0 for position, 1 for velocity, 2 for acceleration), how much will it affect the output derivative of the given order. ; Reimplemented from sofa::core::behavior::OdeSolver. ◆ getSolutionIntegrationFactor(). SReal sofa::component::odesolver::forward::RungeKutta2Solver::getSolutionIntegrationFactor ; (; int ; outputDerivative); const. inlineoverridevirtual . Given a solution of the linear system, how much will it affect the output derivative of the given order. ; Reimplemented from sofa::core::behavior::OdeSolver. ◆ SOFA_CLASS(). sofa::component::odesolver::forward::RungeKutta2Solver::SOFA_CLASS ; (; RungeKutta2Solver ; , . sofa::core::behavior::OdeSolver ;  . ). ◆ solve(). void sofa::component::odesolver::forward::RungeKutta2Solver::solve ; (; const core::ExecParams * ; , . SReal ; , . sofa::core::MultiVecCoordId ; , . sofa::core::MultiVecDerivId ;  . ). overridevirtual . Main computation method.; Specify and execute all computation for timestep integration, i.e. advancing the state from time t to t+dt, putting the resulting position and velocity in the provided vectors. ; Implements sofa::core::behavior::OdeSolver. sofacomponentodesolverforwardRungeKutta2Solver; Generated on Mon Nov 11 2024 02:56:13 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_runge_kutta2_solver.html:14904,integrat,integration,14904,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_runge_kutta2_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_runge_kutta2_solver.html,1,['integrat'],['integration']
Deployability,"lp, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Function details. ◆ getIntegrationFactor(). SReal sofa::component::odesolver::forward::RungeKutta4Solver::getIntegrationFactor ; (; int ; inputDerivative, . int ; outputDerivative . ); const. inlineoverridevirtual . Given an input derivative order (0 for position, 1 for velocity, 2 for acceleration), how much will it affect the output derivative of the given order. ; Reimplemented from sofa::core::behavior::OdeSolver. ◆ getSolutionIntegrationFactor(). SReal sofa::component::odesolver::forward::RungeKutta4Solver::getSolutionIntegrationFactor ; (; int ; outputDerivative); const. inlineoverridevirtual . Given a solution of the linear system, how much will it affect the output derivative of the given order. ; Reimplemented from sofa::core::behavior::OdeSolver. ◆ SOFA_CLASS(). sofa::component::odesolver::forward::RungeKutta4Solver::SOFA_CLASS ; (; RungeKutta4Solver ; , . sofa::core::behavior::OdeSolver ;  . ). ◆ solve(). void sofa::component::odesolver::forward::RungeKutta4Solver::solve ; (; const core::ExecParams * ; , . SReal ; , . sofa::core::MultiVecCoordId ; , . sofa::core::MultiVecDerivId ;  . ). overridevirtual . Main computation method.; Specify and execute all computation for timestep integration, i.e. advancing the state from time t to t+dt, putting the resulting position and velocity in the provided vectors. ; Implements sofa::core::behavior::OdeSolver. sofacomponentodesolverforwardRungeKutta4Solver; Generated on Mon Nov 11 2024 02:56:13 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_runge_kutta4_solver.html:14904,integrat,integration,14904,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_runge_kutta4_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_runge_kutta4_solver.html,1,['integrat'],['integration']
Deployability,"lptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BroadPhaseDetection, Detection)sofa::core::collision::BroadPhaseDetection; sofa::core::collision::Detection::SOFA_ABSTRACT_CLASS(CollisionAlgorithm, objectmodel::BaseObject)sofa::core::collision::CollisionAlgorithm; SOFA_CLASS(BruteForceBroadPhase, core::collision::BroadPhaseDetection)sofa::component::collision::detection::algorithm::BruteForceBroadPhase; sofa::core::collision::BroadPhaseDetection::SOFA_CLASS(Detection, CollisionAlgorithm)sofa::core::collision::Detection; sofa::core::collision::CollisionAlgorithm::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storedCmPairssofa::core::collision::BroadPhaseDetectionprotected; storedIntersectionMethodsofa::core::collision::Detectionprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BroadPhaseDetection() override=defaultsofa::core::collision::BroadPhaseDetectionprotected; ~BruteForceBroadPhase() override=defaultsofa::component::collision::detection::algorithm::BruteForceBroadPhaseprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase-members.html:12716,update,updateInternal,12716,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"lptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(GenerateGrid, DataTypes), core::DataEngine)sofa::component::engine::generate::GenerateGrid< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; Tetrahedron typedefsofa::component::engine::generate::GenerateGrid< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::engine::generate::GenerateGrid< DataTypes >; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::engine::generate::GenerateGrid< DataTypes >; Vec3Int typedefsofa::component::engine::generate::GenerateGrid< DataTypes >; VecCoord typedefsofa::component::engine::generate::GenerateGrid< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirt",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_grid-members.html:13503,update,updateAllInputsIfDirty,13503,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_grid-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_grid-members.html,1,['update'],['updateAllInputsIfDirty']
Deployability,"lptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(BoxROI, DataTypes), SOFA_TEMPLATE(BaseROI, DataTypes))sofa::component::engine::select::boxroi::BoxROI< DataTypes >; sofa::component::engine::select::BaseROI::SOFA_CLASS(SOFA_TEMPLATE(BaseROI, DataTypes), Inherit)sofa::component::engine::select::BaseROI< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; Tetra typedefsofa::component::engine::select::BaseROI< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::engine::select::BaseROI< DataTypes >; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec10 typedefsofa::component::engine::select::boxroi::BoxROI< DataTypes >; VecCoord typedefsofa::component::engine::select::BaseROI< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecEdge typedefsofa::component::engine::select::BaseROI< DataTypes >; VecHexa typedefsofa::component::engine::select::BaseROI< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecQuad typedefsofa::component::engine::select::BaseROI< DataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecTetra typedefsofa::component::engine::select::BaseROI< DataTypes >; VecTriangle typedefsofa::component::engine::select::BaseROI< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::stri",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1boxroi_1_1_box_r_o_i-members.html:19035,update,updateAllInputsIfDirty,19035,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1boxroi_1_1_box_r_o_i-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1boxroi_1_1_box_r_o_i-members.html,1,['update'],['updateAllInputsIfDirty']
Deployability,"lptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(MeshROI, DataTypes), SOFA_TEMPLATE(BaseROI, DataTypes))sofa::component::engine::select::MeshROI< DataTypes >; sofa::component::engine::select::BaseROI::SOFA_CLASS(SOFA_TEMPLATE(BaseROI, DataTypes), Inherit)sofa::component::engine::select::BaseROI< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; Tetra typedefsofa::component::engine::select::BaseROI< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::engine::select::BaseROI< DataTypes >; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::engine::select::MeshROI< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecEdge typedefsofa::component::engine::select::BaseROI< DataTypes >; VecHexa typedefsofa::component::engine::select::BaseROI< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecQuad typedefsofa::component::engine::select::BaseROI< DataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecTetra typedefsofa::component::engine::select::BaseROI< DataTypes >; VecTriangle typedefsofa::component::engine::select::BaseROI< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseROI() ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_r_o_i-members.html:19718,update,updateInternal,19718,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_r_o_i-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_r_o_i-members.html,1,['update'],['updateInternal']
Deployability,"lptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ d_swapping. sofa::core::objectmodel::Data<bool> sofa::component::topology::mapping::Hexa2TetraTopologicalMapping::d_swapping. Boolean enabling to swapp hexa-edges in order to avoid bias effect. . ◆ swapping. sofa::core::objectmodel::RenamedData<bool> sofa::component::topology::mapping::Hexa2TetraTopologicalMapping::swapping. Constructor details. ◆ Hexa2TetraTopologicalMapping(). sofa::component::topology::mapping::Hexa2TetraTopologicalMapping::Hexa2TetraTopologicalMapping ; (; ). protected . Constructor. . ◆ ~Hexa2TetraTopologicalMapping(). sofa::component::topology::mapping::Hexa2TetraTopologicalMapping::~Hexa2TetraTopologicalMapping ; (; ). overrideprotected . Destructor. ; Does nothing. . Function details. ◆ getFromIndex(). Index sofa::component::topology::mapping::Hexa2TetraTopologicalMapping::getFromIndex ; (; Index ; ind). overridevirtual . Reimplemented from sofa::core::topology::TopologicalMapping. ◆ init(). void sofa::component::topology::mapping::Hexa2TetraTopologicalMapping::init ; (; void ; ). overridevirtual . Initializes the target BaseTopology from the source BaseTopology. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_CLASS(). sofa::component::topology::mapping::Hexa2TetraTopologicalMapping::SOFA_CLASS ; (; Hexa2TetraTopologicalMapping ; , . sofa::core::topology::TopologicalMapping ;  . ). ◆ updateTopologicalMappingTopDown(). void sofa::component::topology::mapping::Hexa2TetraTopologicalMapping::updateTopologicalMappingTopDown ; (; ). overridevirtual . Translates the TopologyChange objects from the source to the target. ; Translates each of the TopologyChange objects waiting in the source list so that they have a meaning and reflect the effects of the first topology changes on the second topology. ; Implements sofa::core::topology::TopologicalMapping. sofacomponenttopologymappingHexa2TetraTopologicalMapping; Generated on Mon Nov 11 2024 03:10:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_hexa2_tetra_topological_mapping.html:18070,update,updateTopologicalMappingTopDown,18070,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_hexa2_tetra_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_hexa2_tetra_topological_mapping.html,2,['update'],['updateTopologicalMappingTopDown']
Deployability,"lptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglFloatVectorVariable, OglVariable< type::vector< float > >)sofa::gl::component::shader::OglFloatVectorVariable; OglVariable< type::vector< float > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< float > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< float > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglFloatVectorVariable()sofa::gl::component::shader::OglFloatVectorVariableinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< type::vector< float > >inlineprotected; ~ShaderElement() overridesof",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector_variable-members.html:13665,update,updateVisual,13665,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector_variable-members.html,2,['update'],['updateVisual']
Deployability,"ls can collide. ; Reimplemented from sofa::core::CollisionModel. ◆ canCreate(). template<class TDataTypes > . template<class T > . static bool sofa::component::collision::geometry::LineCollisionModel< TDataTypes >::canCreate ; (; T *& ; obj, . core::objectmodel::BaseContext * ; context, . core::objectmodel::BaseObjectDescription * ; arg . ). inlinestatic . Pre-construction check method called by ObjectFactory. Check that DataTypes matches the MechanicalState. . ◆ computeBBox(). template<class DataTypes > . void sofa::component::collision::geometry::LineCollisionModel< DataTypes >::computeBBox ; (; const core::ExecParams * ; , . bool ;  . ). overridevirtual . Bounding Box computation method. Default to empty method. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ computeBoundingTree(). template<class DataTypes > . void sofa::component::collision::geometry::LineCollisionModel< DataTypes >::computeBoundingTree ; (; int ; maxDepth = 0). overridevirtual . Create or update the bounding volume hierarchy. ; Implements sofa::core::CollisionModel. ◆ computeContinuousBoundingTree(). template<class DataTypes > . void sofa::component::collision::geometry::LineCollisionModel< DataTypes >::computeContinuousBoundingTree ; (; SReal ; , . int ; maxDepth = 0 . ). overridevirtual . Create or update the bounding volume hierarchy, accounting for motions within the given timestep. ; Default to computeBoundingTree(). ; Reimplemented from sofa::core::CollisionModel. ◆ draw(). template<class DataTypes > . void sofa::component::collision::geometry::LineCollisionModel< DataTypes >::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ getCollisionTopology(). template<class TDataTypes > . sofa::core::topology::BaseMeshTopology* sofa::component::collision::geometry::LineCollisionModel< TDataTypes >::getCollisionTopology ; (; ). inlineoverridevirtual .",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model.html:25819,update,update,25819,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model.html,1,['update'],['update']
Deployability,"lt(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; getCategoryName() constsofa::simulation::Visitorinlinevirtual; getClassName() const overridesofa::simulation::UpdateLinksVisitorinlinevirtual; getInfos() constsofa::simulation::Visitorinlinevirtual; isThreadSafe() const overridesofa::simulation::UpdateLinksVisitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *node) overridesofa::simulation::UpdateLinksVisitorvirtual; sofa::simulation::Visitor::processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::UpdateLinksVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processObject(core::objectmodel::BaseObject *obj)sofa::simulation::UpdateLinksVisitor; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepe",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor-members.html:3070,Update,UpdateLinksVisitor,3070,api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor-members.html,1,['Update'],['UpdateLinksVisitor']
Deployability,"lti-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::behavior::BaseOrderingMethod; static void computeInverseFromPermutation (int matrixSize, const int *inPermutation, int *outInversePermutation);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1ordering_1_1_a_m_d_ordering_method.html:12195,update,update,12195,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1ordering_1_1_a_m_d_ordering_method.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1ordering_1_1_a_m_d_ordering_method.html,4,['update'],['update']
Deployability,"lttype::Vec3Types))sofa::core::visual::VisualState< defaulttype::Vec3Types >; sofa::core::State::SOFA_CLASS(SOFA_TEMPLATE(State, TDataTypes), BaseState)sofa::core::State< TDataTypes >; SOFA_CLASS2(VisualModelImpl, core::visual::VisualModel, sofa::core::visual::VisualState< defaulttype::Vec3Types >)sofa::component::visual::VisualModelImpl; sourceFactorsofa::gl::component::rendering3d::OglModelprotected; SPtr typedefsofa::core::objectmodel::Base; srgbTexturingsofa::component::visual::VisualModelImpl; State()sofa::core::State< TDataTypes >protected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; texsofa::gl::component::rendering3d::OglModelprotected; TexCoord typedefsofa::component::visual::VisualModelImpl; texturenamesofa::component::visual::VisualModelImpl; texturessofa::gl::component::rendering3d::OglModelprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; trianglesRevisionsofa::gl::component::rendering3d::OglModelprotected; update()sofa::gl::component::rendering3d::MergeVisualModelsinlineprotected; updateBuffers() overridesofa::gl::component::rendering3d::OglModelvirtual; updateEdgesIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateQuadsIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateTrianglesIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateVertexBuffer()sofa::gl::component::rendering3d::OglModel; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; useEdgessofa::gl::component::rendering3d::OglModelprotected; useQuadssofa::gl::component::rendering3d::OglModelprotected; useTopologysofa::component::visual::VisualModelImpl; useTrianglessofa::gl::component::rendering3d::OglModelprotected; vbosofa::gl::component::rendering3d::OglModelprotected; VBOGenDonesofa::gl::component",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models-members.html:27238,update,update,27238,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models-members.html,1,['update'],['update']
Deployability,"lt runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ UpdateLinksVisitor(). sofa::simulation::UpdateLinksVisitor::UpdateLinksVisitor ; (; const core::ExecParams * ; params). inline . Function details. ◆ getClassName(). const char* sofa::simulation::UpdateLinksVisitor::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ isThreadSafe(). bool sofa::simulation::UpdateLinksVisitor::isThreadSafe ; (; ); const. inlineoverridevirtual . Specify whether this action can be parallelized. ; Reimplemented from sofa::simulation::Visitor. ◆ processNodeBottomUp(). void sofa::simulation::UpdateLinksVisitor::processNodeBottomUp ; (; simulation::Node * ; ). overridevirtual . Callback method called after child node have been processed and before going back to the parent node. ; Reimplemented from sofa::simulation::Visitor. ◆ processNodeTopDown(). Visitor::Result sofa::simulation::UpdateLinksVisitor::processNodeTopDown ; (; simulation::Node * ; ). overridevirtual . Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. ; Reimplemented from sofa::simulation::Visitor. ◆ proces",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor.html:4877,Update,UpdateLinksVisitor,4877,api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor.html,1,['Update'],['UpdateLinksVisitor']
Deployability,lue needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Additional Inherited Members;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Attribute details. ◆ m_dataTracker. DataTracker sofa::core::DataTrackerDDGNode::m_dataTracker. protected . Constructor details. ◆ DataTrackerDDGNode(). sofa::core::DataTrackerDDGNode::DataTrackerDDGNode ; (; ). inline . Function details. ◆ addInputs(). void sofa::core::DataTrackerDDGNode::addInputs ; (; std::initializer_list< sofa::core::objectmodel::BaseData * > ; datas). Create a DataCallback object associated with multiple Data fields. . ◆ addOutputs(). void sofa::core::DataTrackerDDGNode::addOutputs ; (; std::initializer_list< sofa::core::objectmodel::BaseData * > ; datas). ◆ cleanDirty(). void sofa::core::DataTrackerDDGNode::cleanDirty ; (; const core::ExecParams * ; params = nullptr). virtual . Set dirty flag to false for the DDGNode and for all the tracked Data . ◆ updateAllInputsIfDirty(). void sofa::core::DataTrackerDDGNode::updateAllInputsIfDirty ; (; ). utility function to ensure all inputs are up-to-date can be useful for particularly complex DDGNode with a lot input/output imbricated access . sofacoreDataTrackerDDGNode; Generated on Mon Nov 11 2024 03:14:09 for SOFA API by 1.9.1 . ,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_d_d_g_node.html:3808,update,updateAllInputsIfDirty,3808,api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_d_d_g_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_d_d_g_node.html,2,['update'],['updateAllInputsIfDirty']
Deployability,lues for method parameters. . ◆ df() [1/2]. ConstMultiVecDerivId& sofa::core::MechanicalParams::df ; (; ). inline . ◆ df() [2/2]. const ConstMultiVecDerivId& sofa::core::MechanicalParams::df ; (; ); const. inline . ◆ dt(). SReal sofa::core::MechanicalParams::dt ; (; ); const. inline . Time step. . ◆ dx() [1/2]. ConstMultiVecDerivId& sofa::core::MechanicalParams::dx ; (; ). inline . ◆ dx() [2/2]. const ConstMultiVecDerivId& sofa::core::MechanicalParams::dx ; (; ); const. inline . ◆ energy(). bool sofa::core::MechanicalParams::energy ; (; ); const. inline . Should the kinematic and potential energies be computed ? . ◆ f() [1/2]. ConstMultiVecDerivId& sofa::core::MechanicalParams::f ; (; ). inline . ◆ f() [2/2]. const ConstMultiVecDerivId& sofa::core::MechanicalParams::f ; (; ); const. inline . ◆ getKFactorUsed(). bool sofa::core::MechanicalParams::getKFactorUsed ; (; ); const. inline . ◆ implicit(). bool sofa::core::MechanicalParams::implicit ; (; ); const. inline . Is the time integration scheme implicit ? . ◆ implicitPosition(). const SReal& sofa::core::MechanicalParams::implicitPosition ; (; ); const. inline . ◆ implicitVelocity(). const SReal& sofa::core::MechanicalParams::implicitVelocity ; (; ); const. inline . ◆ kFactor(). SReal sofa::core::MechanicalParams::kFactor ; (; ); const. inline . Stiffness matrix contributions factor (for implicit schemes) . ◆ kFactorIncludingRayleighDamping(). SReal sofa::core::MechanicalParams::kFactorIncludingRayleighDamping ; (; SReal ; rayleighStiffness); const. inline . Returnskfactor + bfactor*rayleighStiffness . ◆ mFactor(). SReal sofa::core::MechanicalParams::mFactor ; (; ); const. inline . Mass matrix contributions factor (for implicit schemes) . ◆ mFactorIncludingRayleighDamping(). SReal sofa::core::MechanicalParams::mFactorIncludingRayleighDamping ; (; SReal ; rayleighMass); const. inline . Returnsmfactor + bfactor*rayleighMass . ◆ operator=(). MechanicalParams * sofa::core::MechanicalParams::operator= ; (; const Mechanica,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html:12117,integrat,integration,12117,api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,1,['integrat'],['integration']
Deployability,"lyVecDeriv writeOnlyForces ();  ; ReadVecDeriv readDx () const;  ; WriteVecDeriv writeDx ();  ; WriteOnlyVecDeriv writeOnlyDx ();  ; ReadVecDeriv readNormals () const;  ; const AccumulationVecId< TDataTypes, V_DERIV, V_READ > & readTotalForces () const;  Returns a proxy objects offering simplified access to elements of the cumulative sum of all force containers. More...;  ; void addToTotalForces (core::ConstVecDerivId forceId) override;  The provided VecDerivId will contribute to the sum of all force containers. More...;  ; void removeFromTotalForces (core::ConstVecDerivId forceId) override;  ;  Public Member Functions inherited from sofa::core::BaseState;  SOFA_ABSTRACT_CLASS (BaseState, objectmodel::BaseObject);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  . Protected Member Functions;  MergeVisualModels ();  ;  ~MergeVisualModels () override;  ; void update ();  ;  Protected Member Functions inherited from sofa::gl::component::rendering3d::OglModel; void internalDraw (const core::visual::VisualParams *vparams, bool transparent) override;  Rendering method. More...;  ; void drawGroup (int ig, bool transparent);  ; void drawGroups (bool transparent);  ; virtual void pushTransformMatrix (float *matrix);  ; virtual void popTransformMatrix ();  ; GLenum getGLenum (const char *c) const;  ;  OglModel ();  ;  ~OglModel () override;  ;  Protected Member Functions inherited from sofa::component::visual::VisualModelImpl;  VisualModelImpl ();  Default constructor. More...;  ;  ~VisualModelImpl () override;  Default destructor. More...;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (Bas",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models.html:24743,update,update,24743,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models.html,1,['update'],['update']
Deployability,"l isTetrahedronInROI (const Tetra &t) const;  ; virtual bool isTetrahedronInStrictROI (const Tetra &t) const;  ; virtual bool isHexahedronInROI (const Hexa &t) const;  ; virtual bool isHexahedronInStrictROI (const Hexa &t) const;  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1boxroi_1_1_box_r_o_i.html:20561,update,update,20561,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1boxroi_1_1_box_r_o_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1boxroi_1_1_box_r_o_i.html,3,['update'],['update']
Deployability,"m &inputTensor, MatrixSym &outputTensor) override;  ; void ElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, Matrix6 &outputTensor) override;  ;  Public Member Functions inherited from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >; virtual ~HyperelasticMaterial ();  . Attribute details. ◆ Name. template<class DataTypes > . constexpr std::string_view sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes >::Name = ""Ogden"". staticconstexpr . Function details. ◆ applyElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes >::applyElasticityTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . const MatrixSym & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the Elasticity Tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ deriveSPKTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes >::deriveSPKTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the second Piola Kirchhoff stress tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ ElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes >::ElasticityTensor ; (; StrainInformation< DataTypes > * ; sinfo, . const MaterialParameters< DataTypes > & ; param, . Matrix6 & ; outputTensor . ). inlineoverridevirtual . Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_ogden.html:2632,configurat,configuration,2632,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_ogden.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_ogden.html,1,['configurat'],['configuration']
Deployability,"m () const;  Returns true if the solver supports non-symmetric systems. More...;  ; virtual bool hasUpdatedMatrix ();  Indicate if the solver updated the system after the last call of setSystemMBKMatrix (should return true if isParallelSolver return false) More...;  ; virtual void updateSystemMatrix ();  This function is use for the preconditioner it must be called at each time step event if setSystemMBKMatrix is not called. More...;  ; virtual void init_partial_solve ();  ; virtual void partial_solve (std::list< linearalgebra::BaseMatrix::Index > &, std::list< linearalgebra::BaseMatrix::Index > &, bool);  ; virtual linearalgebra::BaseMatrix * getSystemInverseBaseMatrix ();  Get the linear system inverse matrix, or nullptr if this solver does not build it. More...;  ; virtual bool readFile (std::istream &);  Read the Matrix solver from a file. More...;  ; virtual bool writeFile (std::ostream &);  Read the Matrix solver from a file. More...;  ; virtual void freezeSystemMatrix ();  Ask the solver to no longer update the system matrix. More...;  ;  Public Member Functions inherited from sofa::core::behavior::BaseLinearSolver;  SOFA_ABSTRACT_CLASS (BaseLinearSolver, objectmodel::BaseObject);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, con",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_matrix_linear_solver_3_01_matrix_00_01_vector_00_01_no_thread_manager_01_4.html:8190,update,update,8190,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_matrix_linear_solver_3_01_matrix_00_01_vector_00_01_no_thread_manager_01_4.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_matrix_linear_solver_3_01_matrix_00_01_vector_00_01_no_thread_manager_01_4.html,1,['update'],['update']
Deployability,"m namesofa::core::visual::ShaderElement; shaderssofa::gl::component::shader::OglShaderElementprotected; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglFloatVariable, OglVariable< float >)sofa::gl::component::shader::OglFloatVariable; OglVariable< float >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< float >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< float >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglFloatVariable()sofa::gl::component::shader::OglFloatVariableinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< float >inlineprotected; ~",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_variable-members.html:13365,update,updateLinks,13365,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_variable-members.html,2,['update'],['updateLinks']
Deployability,"m sofa::core::behavior::StateAccessor; MultiLink< StateAccessor, BaseMechanicalState, BaseLink::FLAG_DUPLICATE > l_mechanicalStates;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_shape_matching.html:16729,update,update,16729,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_shape_matching.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_shape_matching.html,1,['update'],['update']
Deployability,"m sofa::gui::qt::DataWidget;  DataWidget (QWidget *parent, const char *name, MyData *d);  ;  ~DataWidget () override;  ; virtual void setData (MyData *d);  ; const core::objectmodel::BaseData * getBaseData () const;  BaseData pointer accessor function. More...;  ; core::objectmodel::BaseData * getBaseData ();  ; void updateVisibility ();  ; bool isDirty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  . Additional Inherited Members;  Static Public Member Functions inherited from sofa::gui::qt::TDataWidget< T >; template<class RealObject > ; static RealObject * create (RealObject *, CreatorArgument &arg);  ;  Static Public Member Functions inherited from sofa::gui::qt::DataWidget; template<class T > ; static T * create (T *, const CreatorArgument &arg);  ; static DataWidget * CreateDataWidget (const DataWidget::CreatorArgument &dwarg);  ;  Signals inherited from sofa::gui::qt::DataWidget; void WidgetDirty (bool);  ; void DataOwnerDirty (bool);  ; void dataValueChanged (QString dataValueString);  ;  Public Slots inherited from sofa::gui::qt::DataWidget; void updateDataValue ();  ; void updateWidgetValue ();  ; void setWidgetDirty (bool b=true);  ; void fillFromData ();  . Attribute details. ◆ container. template<class T , class Container = data_widget_container<T>> . Container sofa::gui::qt::SimpleDataWidget< T, Container >::container. protected . Constructor details. ◆ SimpleDataWidget(). template<class T , class Container = data_widget_container<T>> . sofa::gui::qt::SimpleDataWidget< T, Container >::SimpleDataWidget ; (; QWidget * ; parent, . const char * ; name, . MyTData * ; d . ). inline . Function details. ◆ createWidgets(). template<class T , class Container = data_widget_container<T>> . virtual bool sofa::gui::qt::SimpleDataWidget< T, Container >::createWidgets",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_simple_data_widget.html:3451,update,updateDataValue,3451,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_simple_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_simple_data_widget.html,4,['update'],"['updateDataValue', 'updateWidgetValue']"
Deployability,"m, . Coord ; P, . Coord ; Q, . Real ; contactDistance, . int ; m1, . int ; m2, . long ; id = 0, . PersistentID ; localid = 0 . ). ◆ addContact() [4/4]. template<class DataTypes > . void sofa::component::constraint::lagrangian::model::BilateralLagrangianConstraint< DataTypes >::addContact ; (; Deriv ; norm, . Real ; contactDistance, . int ; m1, . int ; m2, . long ; id = 0, . PersistentID ; localid = 0 . ). ◆ buildConstraintMatrix() [1/2]. template<class DataTypes > . void sofa::component::constraint::lagrangian::model::BilateralLagrangianConstraint< DataTypes >::buildConstraintMatrix ; (; const ConstraintParams * ; cParams, . DataMatrixDeriv & ; c1, . DataMatrixDeriv & ; c2, . unsigned int & ; cIndex, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2 . ). overridevirtual . Construct the Jacobian Matrix; Parameters. c1and c2 are the results constraint sparse matrix ; cIndexis the index of the next constraint equation: when building the constraint matrix, you have to use this index, and then update it ; x1and x2 are the position vectors used for constraint equation computation ; cParamsdefines the state vectors to use for positions and velocities. Also defines the order of the constraint (POS, VEL, ACC). This is the method that should be implemented by the component ; Implements sofa::core::behavior::PairInteractionConstraint< TDataTypes >. ◆ buildConstraintMatrix() [2/2]. SOFA_COMPONENT_CONSTRAINT_LAGRANGIAN_MODEL_API void sofa::component::constraint::lagrangian::model::BilateralLagrangianConstraint< Rigid3Types >::buildConstraintMatrix ; (; const ConstraintParams * ; cParams, . DataMatrixDeriv & ; c1, . DataMatrixDeriv & ; c2, . unsigned int & ; cIndex, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2 . ). virtual . Construct the Jacobian Matrix; Parameters. c1and c2 are the results constraint sparse matrix ; cIndexis the index of the next constraint equation: when building the constraint matrix, you have to use this index, and then update it ; x1and x2",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_bilateral_lagrangian_constraint.html:32095,update,update,32095,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_bilateral_lagrangian_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_bilateral_lagrangian_constraint.html,1,['update'],['update']
Deployability,"m, all possible pairs of objects are tested (brute force test). If there are n objects, there will be n^2/2 tests. The tests are based on the bounding volume of the objects, usually an axis-aligned bounding box. . Classes; struct  FirstLastCollisionModel;  . Protected Attributes; collision::geometry::CubeCollisionModel::SPtr boxModel;  ; sofa::type::vector< FirstLastCollisionModel > m_collisionModels;  ;  Protected Attributes inherited from sofa::core::collision::BroadPhaseDetection; sofa::type::vector< CollisionModelPair > cmPairs;  Potentially colliding pairs. More...;  ; std::map< Instance, sofa::type::vector< CollisionModelPair > > storedCmPairs;  ;  Protected Attributes inherited from sofa::core::collision::Detection; Intersection * intersectionMethod;  Current intersection method. More...;  ; std::map< Instance, Intersection * > storedIntersectionMethod;  All intersection methods. More...;  ;  Protected Attributes inherited from sofa::core::collision::CollisionAlgorithm; Instance instance;  Current collision 'pipeline' instance, allowing to store multiple internal states. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (BruteForceBroadPhase, core::collision::BroadPhaseDetection);  ; void init () override;  Initialization method called at graph creation and modification, during top-down trav",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase.html:2140,pipeline,pipeline,2140,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase.html,1,['pipeline'],['pipeline']
Deployability,"m. protectedvirtual . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). overridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into th",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field_optim.html:27495,update,update,27495,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field_optim.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field_optim.html,1,['update'],['update']
Deployability,"m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::core::visual::VisualManager;  ~VisualManager () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_rendering_s_r_g_b.html:14307,update,update,14307,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_rendering_s_r_g_b.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_rendering_s_r_g_b.html,2,['update'],['update']
Deployability,"m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::core::State< DataTypes >;  State ();  ;  ~State () override;  ;  Protected Member Functions inherited from sofa::core::BaseState;  BaseState ();  ;  ~BaseState () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseDat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_state.html:14575,update,update,14575,api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_state.html,1,['update'],['update']
Deployability,"map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (RotateTransformMatrixEngine, AbstractTransformMatrixEngine);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ;  Public Member Functions inherited from sofa::component::engine::transform::AbstractTransformMatrixEngine;  SOFA_ABSTRACT_CLASS (AbstractTransformMatrixEngine, core::DataEngine);  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_rotate_transform_matrix_engine.html:2531,update,update,2531,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_rotate_transform_matrix_engine.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_rotate_transform_matrix_engine.html,1,['update'],['update']
Deployability,"mapper::RigidContactMapper< collision::geometry::RigidSphereModel, TVec3Types >; MMechanicalObject typedefsofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::RigidSphereModel, TVec3Types >; MMechanicalState typedefsofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::RigidSphereModel, TVec3Types >; modelsofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::RigidSphereModel, TVec3Types >; nbpsofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::RigidSphereModel, TVec3Types >; outmodelsofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::RigidSphereModel, TVec3Types >; Real typedefsofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::RigidSphereModel, TVec3Types >; resize(Size size)sofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::RigidSphereModel, TVec3Types >inlinevirtual; RigidContactMapper()sofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::RigidSphereModel, TVec3Types >protected; setCollisionModel(MCollisionModel *model)sofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::RigidSphereModel, TVec3Types >inline; update()sofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::RigidSphereModel, TVec3Types >inlinevirtual; updateXfree()sofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::RigidSphereModel, TVec3Types >inlinevirtual; VecCoord typedefsofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::RigidSphereModel, TVec3Types >; VecDeriv typedefsofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::RigidSphereModel, TVec3Types >; ~BaseContactMapper()sofa::component::collision::response::mapper::BaseContactMapper< TDataTypes >inlinevirtual.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_contact_mapper_3_01collision_1_1ge574ac8b231cf8af268012c27a6bed639.html:4573,update,update,4573,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_contact_mapper_3_01collision_1_1ge574ac8b231cf8af268012c27a6bed639.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_contact_mapper_3_01collision_1_1ge574ac8b231cf8af268012c27a6bed639.html,2,['update'],"['update', 'updateXfree']"
Deployability,"match the given extension. ; It pushes the files absolute paths in the vector provided in argument. WarningThe directory must exist. ; Returnsthe number of files found or -1 as error . ◆ findOrCreateAValidPath(). std::string sofa::helper::system::FileSystem::findOrCreateAValidPath ; (; const std::string ; path). static . check that all element in the path exists or create them. (This function accepts relative paths) ; Returnsthe valid path. . ◆ getExtension(). std::string sofa::helper::system::FileSystem::getExtension ; (; const std::string & ; filename). static . Get the extension of a file from an absolute path description. ; Returnsi.e. if given""a/b/c.d"", return ""d"" . ◆ getParentDirectory(). std::string sofa::helper::system::FileSystem::getParentDirectory ; (; const std::string & ; path). static . Strip the last component from a path. Return the path given in argument with its last non-slash component and trailing slashes removed, or ""."" if the path contains no slashes. E.g. /a/b/c --> /a/b. . ◆ isAbsolute(). bool sofa::helper::system::FileSystem::isAbsolute ; (; const std::string & ; path). static . Return true if and only if the given file path is absolute. . ◆ isDirectory(). bool sofa::helper::system::FileSystem::isDirectory ; (; const std::string & ; path). static . Return true if and only if the given file path corresponds to a directory. ; WarningThe path must exist. . ◆ isFile(). bool sofa::helper::system::FileSystem::isFile ; (; const std::string & ; path). static . Return true if and only if the given file path is an existing file. . ◆ listDirectory() [1/2]. bool sofa::helper::system::FileSystem::listDirectory ; (; const std::string & ; directoryPath, . std::vector< std::string > & ; outputFilenames . ). static . List the content of a directory. ; It pushes the filenames (not their absolute paths) in the vector provided in argument. WarningThe directory must exist. ; Returnstrue on error . ◆ listDirectory() [2/2]. bool sofa::helper::system::FileSystem::li",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_system.html:6813,a/b,a/b,6813,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_system.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_system.html,2,['a/b'],['a/b']
Deployability,"material::BoyceAndArruda< DataTypes >::Name = ""ArrudaBoyce"". staticconstexpr . Function details. ◆ applyElasticityTensor(). template<class DataTypes > . virtual void sofa::component::solidmechanics::fem::hyperelastic::material::BoyceAndArruda< DataTypes >::applyElasticityTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . const MatrixSym & ; , . MatrixSym & ;  . ). inlinevirtual . computes the Elasticity Tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ deriveSPKTensor(). template<class DataTypes > . virtual void sofa::component::solidmechanics::fem::hyperelastic::material::BoyceAndArruda< DataTypes >::deriveSPKTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . MatrixSym & ;  . ). inlinevirtual . computes the second Piola Kirchhoff stress tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ ElasticityTensor(). template<class DataTypes > . virtual void sofa::component::solidmechanics::fem::hyperelastic::material::BoyceAndArruda< DataTypes >::ElasticityTensor ; (; StrainInformation< DataTypes > * ; sinfo, . const MaterialParameters< DataTypes > & ; param, . Matrix6 & ; outputTensor . ). inlinevirtual . Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ getStrainEnergy(). template<class DataTypes > . virtual Real sofa::component::solidmechanics::fem::hyperelastic::material::BoyceAndArruda< DataTypes >::getStrainEnergy ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ;  . ). inlinevirtual . returns the strain energy of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. sofacomponentsol",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_boyce_and_arruda.html:3196,configurat,configuration,3196,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_boyce_and_arruda.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_boyce_and_arruda.html,1,['configurat'],['configuration']
Deployability,"mbers;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData(",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_contact_listener.html:12579,update,update,12579,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_contact_listener.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_contact_listener.html,1,['update'],['update']
Deployability,"me () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get the type name of this object (i.e. class and template types) ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:21281,update,updateInternal,21281,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['update'],['updateInternal']
Deployability,"me () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping.html:14085,update,updateInternal,14085,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping.html,179,"['Update', 'update']","['Update', 'updateInternal']"
Deployability,"me(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(ConstraintAttachButtonSetting, MouseButtonSetting)sofa::gui::component::ConstraintAttachButtonSetting; sofa::component::setting::MouseButtonSetting::SOFA_CLASS(MouseButtonSetting, core::objectmodel::ConfigurationSetting)sofa::component::setting::MouseButtonSetting; sofa::core::objectmodel::ConfigurationSetting::SOFA_CLASS(ConfigurationSetting, BaseObject)sofa::core::objectmodel::ConfigurationSetting; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ConfigurationSetting() overridesofa::core::objectmodel::ConfigurationSettingprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_constraint_attach_button_setting-members.html:10445,update,updateInternal,10445,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_constraint_attach_button_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_constraint_attach_button_setting-members.html,7,"['Configurat', 'update']","['ConfigurationSetting', 'ConfigurationSettingprotected', 'updateInternal', 'updateLinks']"
Deployability,"me, core::objectmodel::Data< DisplayFlags > *data, bool root=false)sofa::gui::qt::DisplayFlagsDataWidgetinline; fillFromData()sofa::gui::qt::DataWidgetslot; flagssofa::gui::qt::DisplayFlagsDataWidgetprotected; getBaseData() constsofa::gui::qt::DataWidgetinline; getBaseData()sofa::gui::qt::DataWidgetinline; getData()sofa::gui::qt::TDataWidget< sofa::core::visual::DisplayFlags >inline; getData() constsofa::gui::qt::TDataWidget< sofa::core::visual::DisplayFlags >inline; isDirty()sofa::gui::qt::DataWidgetinline; isFilled()sofa::gui::qt::DataWidgetinline; isRootsofa::gui::qt::DisplayFlagsDataWidgetprotected; m_isFilledsofa::gui::qt::DataWidgetprotected; m_toFillsofa::gui::qt::DataWidgetprotected; MyData typedefsofa::gui::qt::DataWidget; MyTData typedefsofa::gui::qt::TDataWidget< sofa::core::visual::DisplayFlags >; numColumnWidget()sofa::gui::qt::DisplayFlagsDataWidgetinlineprotectedvirtual; readFromData()sofa::gui::qt::DisplayFlagsDataWidgetprotectedvirtual; setData(MyTData *d)sofa::gui::qt::TDataWidget< sofa::core::visual::DisplayFlags >inlinevirtual; setData(MyData *d)sofa::gui::qt::TDataWidget< sofa::core::visual::DisplayFlags >; sofa::gui::qt::DataWidget::setData(MyData *d)sofa::gui::qt::DataWidgetvirtual; setDataReadOnly(bool readOnly)sofa::gui::qt::DisplayFlagsDataWidgetvirtual; setFilled(bool value)sofa::gui::qt::DataWidgetinline; setWidgetDirty(bool b=true)sofa::gui::qt::DataWidgetslot; sizeWidget()sofa::gui::qt::DisplayFlagsDataWidgetinlineprotectedvirtual; Tdatasofa::gui::qt::TDataWidget< sofa::core::visual::DisplayFlags >protected; TDataWidget(QWidget *parent, const char *name, MyTData *d)sofa::gui::qt::TDataWidget< sofa::core::visual::DisplayFlags >inline; updateDataValue()sofa::gui::qt::DataWidgetslot; updateVisibility()sofa::gui::qt::DataWidget; updateWidgetValue()sofa::gui::qt::DataWidgetslot; WidgetDirty(bool)sofa::gui::qt::DataWidgetsignal; writeToData()sofa::gui::qt::DisplayFlagsDataWidgetprotectedvirtual; ~DataWidget() overridesofa::gui::qt::DataWidget.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_display_flags_data_widget-members.html:2783,update,updateDataValue,2783,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_display_flags_data_widget-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_display_flags_data_widget-members.html,6,['update'],"['updateDataValue', 'updateVisibility', 'updateWidgetValue']"
Deployability,"mechanics::fem::elastic::TriangularFEMForceField< DataTypes >protected; toLameParameters(_2DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; toLameParameters(_3DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Transformation typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >protected; triangleInfosofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >; TrianglesAroundVertex typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >; TriangularFEMForceField()sofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >protected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMatrixsofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >protected; VecCoord typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >; VecElement typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecMaterialStiffness typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >protected; VecReal typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecStrainDisplacement typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >protected; Vector typedefsofa::component::sol",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field-members.html:25992,update,updateLinks,25992,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field-members.html,1,['update'],['updateLinks']
Deployability,"members . sofa::gl::component::shader::OglFloatVector2Variable Class Reference . #include <OglVariable.h>. Inheritance diagram for sofa::gl::component::shader::OglFloatVector2Variable:. [legend]. Public Member Functions;  SOFA_CLASS (OglFloatVector2Variable, OglVariable< type::vector< type::Vec2f > >);  ;  OglFloatVector2Variable ();  ; virtual ~OglFloatVector2Variable ();  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void pushValue () override;  ;  Public Member Functions inherited from sofa::gl::component::shader::OglVariable< type::vector< type::Vec2f > >;  SOFA_CLASS2 (OglVariable, core::visual::VisualModel, OglShaderElement);  ; virtual void setValue (const type::vector< type::Vec2f > &v);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void doInitVisual (const core::visual::VisualParams *) override;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdateVisual (const core::visual::VisualParams *) override;  ; ShaderElementType getSEType () const override;  Returns the type of shader element (texture, macro, variable, or attribute) More...;  ; const core::objectmodel::BaseData * getSEValue () const override;  ; core::objectmodel::BaseData * getSEValue () override;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resou",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector2_variable.html:1210,Update,Update,1210,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector2_variable.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector2_variable.html,1,['Update'],['Update']
Deployability,"members . sofa::gl::component::shader::OglFloatVector3Variable Class Reference . #include <OglVariable.h>. Inheritance diagram for sofa::gl::component::shader::OglFloatVector3Variable:. [legend]. Public Member Functions;  SOFA_CLASS (OglFloatVector3Variable, OglVariable< type::vector< type::Vec3f > >);  ;  OglFloatVector3Variable ();  ; virtual ~OglFloatVector3Variable ();  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void pushValue () override;  ;  Public Member Functions inherited from sofa::gl::component::shader::OglVariable< type::vector< type::Vec3f > >;  SOFA_CLASS2 (OglVariable, core::visual::VisualModel, OglShaderElement);  ; virtual void setValue (const type::vector< type::Vec3f > &v);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void doInitVisual (const core::visual::VisualParams *) override;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdateVisual (const core::visual::VisualParams *) override;  ; ShaderElementType getSEType () const override;  Returns the type of shader element (texture, macro, variable, or attribute) More...;  ; const core::objectmodel::BaseData * getSEValue () const override;  ; core::objectmodel::BaseData * getSEValue () override;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resou",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector3_variable.html:1210,Update,Update,1210,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector3_variable.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector3_variable.html,1,['Update'],['Update']
Deployability,"members . sofa::gl::component::shader::OglFloatVector4Variable Class Reference . #include <OglVariable.h>. Inheritance diagram for sofa::gl::component::shader::OglFloatVector4Variable:. [legend]. Public Member Functions;  SOFA_CLASS (OglFloatVector4Variable, OglVariable< type::vector< type::Vec4f > >);  ;  OglFloatVector4Variable ();  ; virtual ~OglFloatVector4Variable ();  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void pushValue () override;  ;  Public Member Functions inherited from sofa::gl::component::shader::OglVariable< type::vector< type::Vec4f > >;  SOFA_CLASS2 (OglVariable, core::visual::VisualModel, OglShaderElement);  ; virtual void setValue (const type::vector< type::Vec4f > &v);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void doInitVisual (const core::visual::VisualParams *) override;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdateVisual (const core::visual::VisualParams *) override;  ; ShaderElementType getSEType () const override;  Returns the type of shader element (texture, macro, variable, or attribute) More...;  ; const core::objectmodel::BaseData * getSEValue () const override;  ; core::objectmodel::BaseData * getSEValue () override;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resou",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector4_variable.html:1210,Update,Update,1210,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector4_variable.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector4_variable.html,1,['Update'],['Update']
Deployability,"mented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce() [2/3]. void sofa::component::mechanicalload::TorsionForceField< Rigid3Types >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). virtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce() [3/3]. template<typename DataTypes > . void sofa::component::mechanicalload::TorsionForceField< DataTypes >::addForce ; (; const MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<typename DataTypes > . void sofa::component::mechanicalload::TorsionForceField< DataTypes >::addKToMatrix ; (; linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). overridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the same large matrix. Each ob",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field.html:24370,update,update,24370,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field.html,1,['update'],['update']
Deployability,"mentprotected; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglUIntAttribute, SOFA_TEMPLATE3(OglAttribute, 1, GL_UNSIGNED_INT, unsigned int))sofa::gl::component::shader::OglUIntAttribute; OglAttribute< 1, GL_UNSIGNED_INT, unsigned int >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE3(OglAttribute, size, type, unsigned int), core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglAttribute< 1, GL_UNSIGNED_INT, unsigned int >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglAttribute< 1, GL_UNSIGNED_INT, unsigned int >protected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglAttribute() overridesofa::gl::component::shader::OglAttribute< 1, GL_UNSIGNED_INT, unsigned int >protected; ~OglShaderElement() overridesofa::gl::component::s",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_u_int_attribute-members.html:15309,update,updateInternal,15309,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_u_int_attribute-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_u_int_attribute-members.html,2,['update'],['updateInternal']
Deployability,mesh; ; SOFA - Topic: [SOLVED] Unable to load mesh. /unable-to-load-py-scene-from-softrobot-plugin; ; SOFA - Topic: [SOLVED] Unable to load .py scene from SoftRobot plugin. /unable-to-make-sofa-17-06-no-target-specified; ; SOFA - Topic: [SOLVED] Unable to make Sofa 17.06: No target specified. /undefined-reference-to-boostprogram_optionsabstrac_variables_mapoperator; ; SOFA - Topic: [SOLVED] undefined reference to 'boost::program_options::abstrac_variables_map::operator'. /unit-of-young-modulus-in-tetrahedronfemforcefield-and-surfacepressureconstraint; ; SOFA - Topic: [SOLVED] Unit of Young Modulus in TetrahedronFEMForceField and SurfacePressureConstraint. /units-of-simulation; . /feed; ; [SOLVED] Units of simulation – SOFA. SOFA - Topic: [SOLVED] Units of simulation. /units-por-pressure-at-fingercontroller-py; ; SOFA - Topic: [SOLVED] Units por pressure at fingerController.py. /upcoming-interesting-call-for-papers; ; SOFA - Topic: Upcoming interesting call for papers!. /update-an-engine-at-every-step; . /feed; ; [SOLVED] Update an engine at every step – SOFA. SOFA - Topic: [SOLVED] Update an engine at every step. /update-parameters-during-simulation; ; SOFA - Topic: [SOLVED] Update parameters during simulation. /usage-of-basedata-and-singlelink; ; SOFA - Topic: [SOLVED] usage of BaseData and SingleLink. /use_sofa_in_batch_mode; ; SOFA - Topic: [SOLVED] use_SOFA_in_batch_mode. /use-eigensparsematrix-in-sofapython3; ; SOFA - Topic: [SOLVED] Use Eigen::SparseMatrix in SofaPython3. /use-geomagic-plugin-with-sofa-binaries; ; SOFA - Topic: [SOLVED] Use Geomagic plugin with SOFA binaries. /useqt-in-plugin; ; SOFA - Topic: [SOLVED] UseQt in Plugin. /use-sofa-framework-in-unreal-engine; ; SOFA - Topic: Use Sofa-framework in Unreal Engine. /using-2-phantom-omni; ; SOFA - Topic: Using 2 Phantom Omni. /using-a-novint-falcon-with-sofa-on-a-64-bits-architecture; ; SOFA - Topic: [SOLVED] Using a Novint Falcon with SOFA on a 64 bits architecture. /using-beamadapter-and-interventiona,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:411862,update,update-an-engine-at-every-step,411862,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['update'],['update-an-engine-at-every-step']
Deployability,"mesofa::core::visual::ShaderElement; shaderssofa::gl::component::shader::OglShaderElementprotected; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglIntVectorVariable, OglVariable< type::vector< GLint > >)sofa::gl::component::shader::OglIntVectorVariable; OglVariable< type::vector< GLint > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< GLint > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< GLint > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglIntVectorVariable()sofa::gl::component::shader::OglIntVectorVariableinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector_variable-members.html:13526,update,updateInternal,13526,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector_variable-members.html,2,['update'],['updateInternal']
Deployability,"messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Attribute details. ◆ boxModel. collision::geometry::CubeCollisionModel::SPtr sofa::component::collision::detection::algorithm::BruteForceBroadPhase::boxModel. protected . ◆ m_collisionModels. sofa::type::vector<FirstLastCollisionModel> sofa::component::collision::detection::algorithm::BruteForceBroadPhase::m_collisionModels. protected . vector of accumulated CollisionModel's when the collision pipeline asks to add a CollisionModel in BruteForceBroadPhase::addCollisionModel This vector is emptied at each time step in BruteForceBroadPhase::beginBroadPhase . Constructor details. ◆ BruteForceBroadPhase(). sofa::component::collision::detection::algorithm::BruteForceBroadPhase::BruteForceBroadPhase ; (; ). protected . ◆ ~BruteForceBroadPhase(). sofa::component::collision::detection::algorithm::BruteForceBroadPhase::~BruteForceBroadPhase ; (; ). overrideprotecteddefault . Function details. ◆ addCollisionModel(). void sofa::component::collision::detection::algorithm::BruteForceBroadPhase::addCollisionModel ; (; core::CollisionModel * ; cm). overridevirtual . In the broad phase, ignores collision with the provided collision model if possible and add pairs of collision models if in intersection. ; Ignore the collision with the provided collision model if it does not intersect with the box defined in the Data box when it is defined. Add the provided collision model to be investigated in the narrow phase in case of self collision. Check i",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase.html:17699,pipeline,pipeline,17699,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase.html,1,['pipeline'],['pipeline']
Deployability,meter in the functor) . Public Member Functions;  DataTrackerFunctor (FunctorType &functor);  ; void setDirtyValue () override;  ; void update () override;  This method is needed by DDGNode. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Constructor details. ◆ DataTrackerFunctor(). template<t,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_functor.html:1667,update,updated,1667,api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_functor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_functor.html,1,['update'],['updated']
Deployability,"method called at graph creation and modification, during top-down traversal. More...;  ; void doInitVisual (const core::visual::VisualParams *) override;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdateVisual (const core::visual::VisualParams *) override;  ; ShaderElementType getSEType () const override;  Returns the type of shader element (texture, macro, variable, or attribute) More...;  ; const core::objectmodel::BaseData * getSEValue () const override;  ; core::objectmodel::BaseData * getSEValue () override;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void fwdDraw (VisualParams *);  Called before objects in the current branch are displayed. More...;  ; virtual void bwdDraw (VisualParams *);  Called after objects in the current branch are displayed. More...;  ; virtual void drawTransparent (const VisualParams *);  Display transparent surfaces. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const S",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float2_variable.html:1801,update,updateVisual,1801,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float2_variable.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float2_variable.html,104,['update'],"['update', 'updateVisual']"
Deployability,"method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Unbuilt constraint system during resolution; Data< bool > wire_optimization;  constraints are reordered along a wire-like topology (from tip to base) More...;  ; SingleLink< LinearSolverConstraintCorrection, sofa::core::behavior::LinearSolver, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > l_linearSolver;  Link towards the linear solver used to compute the compliance matrix, requiring the inverse of the linear system matrix. More...;  ; SingleLink< LinearSolverConstraintCorrection, sofa::core::behavior::OdeSolver, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > l_ODESolver;  Link towards the ODE solver used to recover the integration factors. More...;  ; DeprecatedAndRemoved J;  use m_constraintMatrix instead More...;  ; linearalgebra::SparseMatrix< Real > m_constraintJacobian;  ; linearalgebra::FullVector< SReal > F;  forces computed from the constraints More...;  ; MechanicalState< DataTypes > * mstate;  ; void verify_constraints ();  ; bool hasConstraintNumber (int index) override;  ; void resetForUnbuiltResolution (SReal *f, std::list< unsigned int > &renumbering) override;  ; void addConstraintDisplacement (SReal *d, int begin, int end) override;  ; void setConstraintDForce (SReal *df, int begin, int end, bool update) override;  ; void getBlockDiagonalCompliance (linearalgebra::BaseMatrix *W, int begin, int end) override;  ; void convertConstraintMatrix (sofa::SignedIndex numberOfConstraints, const MatrixDeriv &inputConstraintMatrix);  Convert the constraint matrix. More...;  ; virtual void computeJ (sofa::line",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_linear_solver_constraint_correction.html:15315,integrat,integration,15315,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_linear_solver_constraint_correction.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_linear_solver_constraint_correction.html,1,['integrat'],['integration']
Deployability,"mic::NumericalIntegrationDescriptor< Real, N >::NumericalIntegrationDescriptor ; (; ). inline . empty constructor . Function details. ◆ addQuadratureMethod(). template<typename Real , int N> . void sofa::component::topology::container::dynamic::NumericalIntegrationDescriptor< Real, N >::addQuadratureMethod ; (; const QuadratureMethod ; qt, . const IntegrationOrder ; order, . QuadraturePointArray ; qpa . ). add a quadrature method in the map . ◆ getIntegrationOrders(). template<typename Real , int N> . std::set< typename NumericalIntegrationDescriptor< Real, N >::IntegrationOrder > sofa::component::topology::container::dynamic::NumericalIntegrationDescriptor< Real, N >::getIntegrationOrders ; (; const QuadratureMethod ; qt); const. returns the quadrature integration orders available for a given method . ◆ getQuadratureMethod(). template<typename Real , int N> . NumericalIntegrationDescriptor< Real, N >::QuadraturePointArray sofa::component::topology::container::dynamic::NumericalIntegrationDescriptor< Real, N >::getQuadratureMethod ; (; const QuadratureMethod ; qt, . const IntegrationOrder ; order . ); const. returns the set of quadrature points associated with a given quadrature method and integration order . ◆ getQuadratureMethods(). template<typename Real , int N> . std::set< typename NumericalIntegrationDescriptor< Real, N >::QuadratureMethod > sofa::component::topology::container::dynamic::NumericalIntegrationDescriptor< Real, N >::getQuadratureMethods. returns all the indices corresponding to all available quadrature methods . Enum details. ◆ QuadratureMethod. template<typename Real , int N> . enum sofa::component::topology::container::dynamic::NumericalIntegrationDescriptor::QuadratureMethod. EnumeratorGAUSS_LEGENDRE_METHOD ; GAUSS_LOBATO_METHOD ; NEWTON_COTES_METHOD ; GAUSS_SIMPLEX_METHOD ; GAUSS_QUAD_METHOD ; GAUSS_CUBE_METHOD . sofacomponenttopologycontainerdynamicNumericalIntegrationDescriptor; Generated on Mon Nov 11 2024 03:10:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_numerical_integration_descriptor.html:3260,integrat,integration,3260,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_numerical_integration_descriptor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_numerical_integration_descriptor.html,1,['integrat'],['integration']
Deployability,mmittee-3-upcoming-raise-your-expectations; ; SOFA – SOFA Technical Committee #3 upcoming: raise your expectations!. /sofa-technologies-exhibited-amd-learning-day-in-paris; ; SOFA – SOFA technologies exhibited @ AMD Learning Day in Paris. /sofa-training-discover-and-learn-sofa-at-ismar2017; ; SOFA – SOFA training: discover and learn SOFA at ISMAR 2017. /sofa-v16-12-has-been-released; ; SOFA – SOFA v16.12 has been released!. /sofa-v17-06-has-been-released; ; SOFA – SOFA v17.06 has been released!. /sofa-v17-12-has-been-released; ; SOFA – SOFA v17.12 has been released!. /sofa-v18-06-has-been-released; ; SOFA – SOFA v18.06 has been released!. /sofa-v18-12-has-been-released; ; SOFA – SOFA v18.12 has been released!. /sofa-v19-06-has-been-released; ; SOFA – SOFA v19.06 has been released!. /sofa-v19-12-has-been-released; ; SOFA – SOFA v19.12 has been released!. /sofa-v20-06-has-been-released; ; SOFA – SOFA v20.06 has been released!. /sofa-v20-12-has-been-released; ; SOFA – SOFA v20.12 has been released!. /sofa-v21-06-has-been-released; ; SOFA – SOFA v21.06 has been released!. /sofa-v21-12-has-been-released; ; SOFA – SOFA v21.12 has been released!. /sofa-v22-06-has-been-released; ; SOFA – SOFA v22.06 has been released!. /sofa-v22-12-has-been-released; ; SOFA – SOFA v22.12 has been released!. /sofa-v23-06-has-been-released; ; SOFA – SOFA v23.06 has been released!. /sofa-v23-12-has-been-released; ; SOFA – SOFA v23.12 has been released!. /sofa-v24-06-has-been-released; ; SOFA – SOFA v24.06 has been released!. /sofa-week-2018-experience; ; SOFA – SOFA Week 2018 Experience. /sofa-week-2021-register-now; ; SOFA – SOFA Week 2021: register now!. /sofa-week-2022-register-now; ; SOFA – SOFA Week 2022: register now!. /sofa-week-2023-register-now; ; SOFA – SOFA Week 2023: register now!. /sofa-week-2024-registration-is-open; ; SOFA – SOFA Week 2024: registration is open!. /soft-robotics-summer-school-in-lille; ; SOFA – Soft-Robotics Summer School in Lille. /softrobots-inverse-plugin-open,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:9290,release,released,9290,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['release'],['released']
Deployability,"model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const type::Quat< SReal >);  ; virtual void applyScale (const SReal, const SReal, const SReal);  ; virtual void exportOBJ (std::string, std::ostream *, std::ostream *, sofa::Index &, sofa::Index &, sofa::Index &, int &);  Append this mesh to an OBJ format stream. More...;  . Protected Member Functions;  OglOITShader ();  ;  ~OglOITShader () override;  ;  Protected Member Functions inherited from sofa::gl::component::shader::OglShader;  OglShader ();  ;  ~OglShader () override;  ;  Protected Member Functions inherited from sofa::core::visual::Shader;  Shader ();  ;  ~Shader () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_o_i_t_shader.html:15423,update,update,15423,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_o_i_t_shader.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_o_i_t_shader.html,2,['update'],['update']
Deployability,"model::Base; m_instanciationSourceFilePossofa::core::objectmodel::Base; m_internalEnginesofa::core::objectmodel::Baseprotected; m_oldAttributessofa::core::objectmodel::Base; m_vecDatasofa::core::objectmodel::Baseprotected; m_vecLinksofa::core::objectmodel::Baseprotected; MapData typedefsofa::core::objectmodel::Base; MapLink typedefsofa::core::objectmodel::Base; MyClass typedefsofa::core::objectmodel::Base; namesofa::core::objectmodel::Base; notMuted() constsofa::core::objectmodel::Baseinline; parse(BaseObjectDescription *arg)sofa::core::objectmodel::Basevirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; parseFields(const std::list< std::string > &str)sofa::core::objectmodel::Base; parseFields(const std::map< std::string, std::string * > &str)sofa::core::objectmodel::Basevirtual; Ptr typedefsofa::core::objectmodel::Base; removeData(BaseData *f)sofa::core::objectmodel::Base; removeTag(Tag t)sofa::core::objectmodel::Base; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SPtr typedefsofa::core::objectmodel::Base; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html:6822,update,updateLinks,6822,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base-members.html,3,['update'],['updateLinks']
Deployability,"model::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(RayTraceDetection, sofa::core::objectmodel::BaseObject)sofa::component::collision::detection::algorithm::RayTraceDetection; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~RayTraceDetection() override=defaultsofa::component::collision::detection::algorithm::RayTraceDetectionprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_ray_trace_detection-members.html:9994,update,updateInternal,9994,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_ray_trace_detection-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_ray_trace_detection-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"model::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(StatsSetting, core::objectmodel::ConfigurationSetting)sofa::component::setting::StatsSetting; sofa::core::objectmodel::ConfigurationSetting::SOFA_CLASS(ConfigurationSetting, BaseObject)sofa::core::objectmodel::ConfigurationSetting; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; StatsSetting()sofa::component::setting::StatsSettingprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ConfigurationSetting() overridesofa::core::objectmodel::ConfigurationSettingprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_stats_setting-members.html:10336,update,updateInternal,10336,api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_stats_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_stats_setting-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"model::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(AddFrameButtonSetting, sofa::component::setting::MouseButtonSetting)sofa::gui::component::AddFrameButtonSetting; sofa::component::setting::MouseButtonSetting::SOFA_CLASS(MouseButtonSetting, core::objectmodel::ConfigurationSetting)sofa::component::setting::MouseButtonSetting; sofa::core::objectmodel::ConfigurationSetting::SOFA_CLASS(ConfigurationSetting, BaseObject)sofa::core::objectmodel::ConfigurationSetting; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ConfigurationSetting() overridesofa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_add_frame_button_setting-members.html:10104,Configurat,ConfigurationSetting,10104,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_add_frame_button_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_add_frame_button_setting-members.html,1,['Configurat'],['ConfigurationSetting']
Deployability,"model::Base; setIntersectionMethod(Intersection *v)sofa::core::collision::Detectioninlinevirtual; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(NarrowPhaseDetection, Detection)sofa::core::collision::NarrowPhaseDetection; sofa::core::collision::Detection::SOFA_ABSTRACT_CLASS(CollisionAlgorithm, objectmodel::BaseObject)sofa::core::collision::CollisionAlgorithm; SOFA_CLASS(Detection, CollisionAlgorithm)sofa::core::collision::Detection; sofa::core::collision::CollisionAlgorithm::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storedIntersectionMethodsofa::core::collision::Detectionprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; zeroCollision() constsofa::core::collision::NarrowPhaseDetectioninline; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~NarrowPhaseDetection() overridesofa::core::collision::NarrowPhaseDetectionprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_narrow_phase_detection-members.html:11946,update,updateInternal,11946,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_narrow_phase_detection-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_narrow_phase_detection-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"model::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseMechanicalState, BaseState)sofa::core::behavior::BaseMechanicalState; sofa::core::BaseState::SOFA_ABSTRACT_CLASS(BaseState, objectmodel::BaseObject)sofa::core::BaseState; SOFA_BASE_CAST_IMPLEMENTATION(BaseMechanicalState)sofa::core::behavior::BaseMechanicalState; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; vAlloc(const ExecParams *params, VecCoordId v, const core::VecIdProperties &properties={})=0sofa::core::behavior::BaseMechanicalStatepure virtual; vAlloc(const ExecParams *params, VecDerivId v, const core::VecIdProperties &properties={})=0sofa::core::behavior::BaseMechanicalStatepure virtual; vAvail(const ExecParams *params, VecCoordId &v)=0sofa::core::behavior::BaseMechanicalStatepure virtual; vAvail(const ExecParams *params, VecDerivId &v)=0sofa::core::behavior::BaseMechanicalStatepure virtual; vDot(const ExecParams *params, ConstVecId a, ConstVecId b)=0sofa::core::behavior::BaseMechanicalStatepure virtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; vFree(const ExecParams *params, VecCoordId v)=0sofa::core::behavior::BaseMechanicalStatepure virtual; vFree(const ExecPara",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state-members.html:15102,update,updateInternal,15102,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state-members.html,1,['update'],['updateInternal']
Deployability,"model::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Index, sofa::Index)sofa::component::engine::select::ComplementaryROI< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(ComplementaryROI, DataTypes), core::DataEngine)sofa::component::engine::select::ComplementaryROI< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; vd_setIndicessofa::component::engine::select::ComplementaryROI< DataTypes >protected; VecCoord typedefsofa::component::engine::select::ComplementaryROI< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ComplementaryROI() overridesofa::component::engine::select::ComplementaryROI< DataTypes >; ~DataEngine() overr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_complementary_r_o_i-members.html:12684,update,update,12684,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_complementary_r_o_i-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_complementary_r_o_i-members.html,1,['update'],['update']
Deployability,"model::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (TopologicalMapping, objectmodel::BaseObject);  ; virtual void setTopologies (In *from, Out *to);  Specify the input and output models. More...;  ; void setPathInputObject (const std::string &o);  Set the path to the objects mapped in the scene graph. More...;  ; void setPathOutputObject (const std::string &o);  ; In * getFrom ();  Accessor to the INPUT topology of the TopologicalMapping : More...;  ; Out * getTo ();  Accessor to the OUTPUT topology of the TopologicalMapping : More...;  ; virtual void updateTopologicalMappingTopDown ()=0;  Method called at each topological changes propagation which comes from the INPUT topology to adapt the OUTPUT topology : More...;  ; virtual void updateTopologicalMappingBottomUp ();  Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topology : More...;  ; virtual bool propagateFromInputToOutputModel ();  Return true if this mapping is able to propagate topological changes from input to output model. More...;  ; virtual bool propagateFromOutputToInputModel ();  Return true if this mapping is able to propagate topological changes from output to input model. More...;  ; virtual bool isTheOutputTopologySubdividingTheInputOne ();  return true if the output topology subdivide the input one. (the topology uses the Loc2GlobVec/Glob2LocMap/In2OutMap structs and share the same DOFs) More...;  ; const std::map< Index, Index > & getGlob2LocMap ();  Accessor to index maps : More...;  ; virtual Index getGlobIndex (Index ind);  ; virtual Index getFromIndex (Index ind);  ; vo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html:4243,update,updateTopologicalMappingTopDown,4243,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html,1,['update'],['updateTopologicalMappingTopDown']
Deployability,"model::BaseContext *context, core::objectmodel::BaseObjectDescription *arg);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  TopologicalChangeProcessor ();  ;  ~TopologicalChangeProcessor () override;  ; std::vector< SReal > getValuesInLine (std::string line, size_t nbElements);  ; void findElementIndex (type::Vec3 coord, Index &triangleIndex, Index oldTriangleIndex);  ; void saveIndices ();  ; void inciseWithSavedIndices ();  ; Index findIndexInListOfTime (SReal time);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topological_change_processor.html:16167,update,update,16167,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topological_change_processor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topological_change_processor.html,1,['update'],['update']
Deployability,"model::BaseData * getBaseData () const;  BaseData pointer accessor function. More...;  ; core::objectmodel::BaseData * getBaseData ();  ; void updateVisibility ();  ; bool isDirty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  . Protected Member Functions; virtual void readFromData ();  The implementation of this method tells how the widget reads the value of the data. More...;  ; virtual void writeToData ();  . Additional Inherited Members;  Static Public Member Functions inherited from sofa::gui::qt::TDataWidget< RGBAColor >; static RealObject * create (RealObject *, CreatorArgument &arg);  ;  Static Public Member Functions inherited from sofa::gui::qt::DataWidget; template<class T > ; static T * create (T *, const CreatorArgument &arg);  ; static DataWidget * CreateDataWidget (const DataWidget::CreatorArgument &dwarg);  ;  Signals inherited from sofa::gui::qt::DataWidget; void WidgetDirty (bool);  ; void DataOwnerDirty (bool);  ; void dataValueChanged (QString dataValueString);  ;  Public Slots inherited from sofa::gui::qt::DataWidget; void updateDataValue ();  ; void updateWidgetValue ();  ; void setWidgetDirty (bool b=true);  ; void fillFromData ();  . Attribute details. ◆ m_colorPicker. QRGBAColorPicker* sofa::gui::qt::rgbacolordatawidget_h::RGBAColorDataWidget::m_colorPicker. protected . ◆ m_nameEdit. QLineEdit* sofa::gui::qt::rgbacolordatawidget_h::RGBAColorDataWidget::m_nameEdit. protected . Constructor details. ◆ RGBAColorDataWidget(). sofa::gui::qt::rgbacolordatawidget_h::RGBAColorDataWidget::RGBAColorDataWidget ; (; QWidget * ; parent, . const char * ; name, . Data< RGBAColor > * ; data . ). inline . Function details. ◆ createWidgets(). bool sofa::gui::qt::rgbacolordatawidget_h::RGBAColorDataWidget::createWidgets ; (; ). virtual . The implementation of ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1rgbacolordatawidget__h_1_1_r_g_b_a_color_data_widget.html:3191,update,updateDataValue,3191,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1rgbacolordatawidget__h_1_1_r_g_b_a_color_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1rgbacolordatawidget__h_1_1_r_g_b_a_color_data_widget.html,4,['update'],"['updateDataValue', 'updateWidgetValue']"
Deployability,"model::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglMatrix3Variable, OglMatrix2Variable)sofa::gl::component::shader::OglMatrix3Variable; sofa::gl::component::shader::OglMatrix2Variable::SOFA_CLASS(OglMatrix2Variable, OglVariable< type::vector< float > >)sofa::gl::component::shader::OglMatrix2Variable; OglVariable< type::vector< float > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< float > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; transposesofa::gl::component::shader::OglMatrix2Variable; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< float > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglMatrix2Variable()sofa::gl::component::shader::OglMatrix2Variableinlinevirtual; ~OglMatrix3Variable() overridesofa::gl::component::shader::OglMatrix3Variableinline; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< type::vector< float > >inlineprotected; ~ShaderElement() o",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix3_variable-members.html:14064,update,updateVisual,14064,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix3_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix3_variable-members.html,2,['update'],['updateVisual']
Deployability,"model::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglMatrix4Variable, OglMatrix2Variable)sofa::gl::component::shader::OglMatrix4Variable; sofa::gl::component::shader::OglMatrix2Variable::SOFA_CLASS(OglMatrix2Variable, OglVariable< type::vector< float > >)sofa::gl::component::shader::OglMatrix2Variable; OglVariable< type::vector< float > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< float > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; transposesofa::gl::component::shader::OglMatrix2Variable; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< float > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglMatrix2Variable()sofa::gl::component::shader::OglMatrix2Variableinlinevirtual; ~OglMatrix4Variable() overridesofa::gl::component::shader::OglMatrix4Variableinline; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< type::vector< float > >inlineprotected; ~ShaderElement() o",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4_variable-members.html:14064,update,updateVisual,14064,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4_variable-members.html,2,['update'],['updateVisual']
Deployability,"model::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(BaseTopologyObject, core::objectmodel::BaseObject)sofa::core::topology::BaseTopologyObject; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseTopologyObject() overridesofa::core::topology::BaseTopologyObjectinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_topology_object-members.html:9807,update,updateInternal,9807,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_topology_object-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_topology_object-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"model::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(InfoComponent, BaseObject)sofa::component::sceneutility::infocomponent::InfoComponent; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~InfoComponent() overridesofa::component::sceneutility::infocomponent::InfoComponentinline.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1infocomponent_1_1_info_component-members.html:9795,update,updateInternal,9795,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1infocomponent_1_1_info_component-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1infocomponent_1_1_info_component-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"model::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseAddResourceRepository, sofa::core::objectmodel::BaseObject)sofa::component::sceneutility::BaseAddResourceRepository; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateRepositoryPath()sofa::component::sceneutility::BaseAddResourceRepository; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseAddResourceRepository() overridesofa::component::sceneutility::BaseAddResourceRepositoryprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_base_add_resource_repository-members.html:10036,update,updateInternal,10036,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_base_add_resource_repository-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_base_add_resource_repository-members.html,3,['update'],"['updateInternal', 'updateLinks', 'updateRepositoryPath']"
Deployability,"model::Baseinline; initData(Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData(Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseprotected; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags)sofa::core::objectmodel::Baseprotected; initData0(Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinlineprotected; inputssofa::core::objectmodel::DDGNodeprotected; insertInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; integrateMesh()sofa::component::engine::generate::GenerateRigidMass< DataTypes, MassType >protected; integrateTriangle(type::Vec3 kV0, type::Vec3 kV1, type::Vec3 kV2)sofa::component::engine::generate::GenerateRigidMass< DataTypes, MassType >protected; isComponentStateValid() constsofa::core::objectmodel::Baseinline; isDirty() constsofa::core::objectmodel::DDGNodeinline; l_contextsofa::core::objectmodel::BaseObjectprotected; l_mastersofa::core::objectmodel::BaseObjectprotected; l_slavessofa::core::objectmodel::BaseObjectprotected; LinkSlaves typedefsofa::core::objectmodel::BaseObject; m_aliasDatasofa::core::objectmodel::Baseprotected; m_aliasLinksofa::core::objectmodel::Baseprotected; m_dataTrackersofa::core::DataTrackerDDGNodeprotected; m_definitionSourceFileNamesofa::core::objectmodel::Base; m_definitionSourceFilePossofa::core::objectmodel::Base; m_densitysofa::component::engine::generate::GenerateRigidMass< DataTypes, MassType >protected; m_instanciationSourceFileNamesofa::core::objectmodel",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_rigid_mass-members.html:9105,integrat,integrateMesh,9105,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_rigid_mass-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_rigid_mass-members.html,1,['integrat'],['integrateMesh']
Deployability,"model::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(MapIndices, T), core::DataEngine);  ;  SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER (Index, sofa::Index);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ; template<class V > ; void applyIndex (V &v, const MapIndex &m);  ; void apply (Value &v, const MapIndex &m);  ; void apply (Value &v, const MapIndex &m);  ; void apply (Value &v, const MapIndex &m);  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DD",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_map_indices.html:2935,update,update,2935,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_map_indices.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_map_indices.html,1,['update'],['update']
Deployability,"moveInNode (objectmodel::BaseNode *node) override;  . Protected Member Functions;  MergeVisualModels ();  ;  ~MergeVisualModels () override;  ; void update ();  ;  Protected Member Functions inherited from sofa::gl::component::rendering3d::OglModel; void internalDraw (const core::visual::VisualParams *vparams, bool transparent) override;  Rendering method. More...;  ; void drawGroup (int ig, bool transparent);  ; void drawGroups (bool transparent);  ; virtual void pushTransformMatrix (float *matrix);  ; virtual void popTransformMatrix ();  ; GLenum getGLenum (const char *c) const;  ;  OglModel ();  ;  ~OglModel () override;  ;  Protected Member Functions inherited from sofa::component::visual::VisualModelImpl;  VisualModelImpl ();  Default constructor. More...;  ;  ~VisualModelImpl () override;  Default destructor. More...;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models.html:25753,update,update,25753,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models.html,1,['update'],['update']
Deployability,"moveTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; rootsofa::component::sceneutility::PauseAnimationprotected; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(PauseAnimation, core::objectmodel::BaseObject)sofa::component::sceneutility::PauseAnimation; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~PauseAnimation() overridesofa::component::sceneutility::PauseAnimationprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_pause_animation-members.html:9946,update,updateInternal,9946,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_pause_animation-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_pause_animation-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"moveTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(DirectSAP, sofa::core::objectmodel::BaseObject)sofa::component::collision::detection::algorithm::DirectSAP; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DirectSAP() override=defaultsofa::component::collision::detection::algorithm::DirectSAPprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p-members.html:9930,update,updateInternal,9930,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"mpl () override;  the only function that should be overloaded More...;  ;  Public Member Functions inherited from sofa::gui::qt::QGraphStatWidget;  QGraphStatWidget (QWidget *parent, simulation::Node *node, const QString &title, unsigned numberOfCurves, int bufferSize);  ; virtual ~QGraphStatWidget ();  ; virtual void step () final;  Main method called to update the graph. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::gui::qt::QGraphStatWidget; simulation::Node * m_node;  pointer to the node monitored More...;  ; int m_bufferSize;  size of the buffers to stored More...;  ; QChart * m_chart;  Pointer to the chart Data. More...;  ; std::vector< QLineSeries * > m_curves;  vector of series to be plotted More...;  ; QValueAxis * m_axisX;  x axis pointer More...;  ; QValueAxis * m_axisY;  y axis pointer More...;  ; SReal m_yMin;  min y axis value stored More...;  ; SReal m_yMax;  max y axis value stored More...;  ; SReal m_lastTime;  last timestep monitored More...;  ; int m_cptStep;  step counter monitored More...;  ;  Protected Member Functions inherited from sofa::gui::qt::QGraphStatWidget; void setCurve (unsigned index, const QString &name, const QColor &color);  set the index-th curve (index must be < _numberOfCurves) More...;  ; void updateYAxisBounds (SReal value);  Method to update Y axis scale. More...;  ; void flushSeries ();  flush data from series not anymore displayed More...;  . Constructor details. ◆ QMomentumStatWidget(). sofa::gui::qt::QMomentumStatWidget::QMomentumStatWidget ; (; QWidget * ; parent, . simulation::Node * ; node . ). ◆ ~QMomentumStatWidget(). sofa::gui::qt::QMomentumStatWidget::~QMomentumStatWidget ; (; ). virtual . Function details. ◆ stepImpl(). void sofa::gui::qt::QMomentumStatWidget::stepImpl ; (; ). overridevirtual . the only function that should be overloaded ; Implements sofa::gui::qt::QGraphStatWidget. sofaguiqtQMomentumStatWidget; Generated on Mon Nov 11 2024 03:23:43 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_momentum_stat_widget.html:1777,update,updateYAxisBounds,1777,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_momentum_stat_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_momentum_stat_widget.html,4,['update'],"['update', 'updateYAxisBounds']"
Deployability,"mplate<class DataTypes , class GeometricalTypes = DataTypes> . template<typename T = GeometricalTypes, typename std::enable_if_t< T::spatial_dimensions > = 3, int > . SReal sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::getTotalMass ; (; ); const. inline . Method to update See alsod_vertexMass when a new Triangle is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TRIANGLESADDED event is fired. Method to update . d_vertexMass when a Triangle is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TRIANGLESREMOVED event is fired. Method to update . d_vertexMass when a new Quad is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSADDED event is fired. Method to update . d_vertexMass when a Quad is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSREMOVED event is fired. Method to update . d_vertexMass when a new Tetrahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAADDED event is fired. Method to update . d_vertexMass when a Tetrahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAREMOVED event is fired. Method to update . d_vertexMass when a new Hexahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when HEXAHEDRAADDED event is fired. Method to update . d_vertexMass when a Hexahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when HEXAHEDRAREMOVED event is fired. . ◆ handleEvent(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::handleEvent ; (; sofa::core::objectmodel::Event * ; ). overridevirtual . Handle an event. ; Reimplemented from sofa::core::obje",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html:45897,update,update,45897,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,1,['update'],['update']
Deployability,"mplate<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  ExtrudeEdgesAndGenerateQuads ();  ;  ~ExtrudeEdgesAndGenerateQuads () override;  ; void checkInput ();  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_edges_and_generate_quads.html:14566,update,update,14566,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_edges_and_generate_quads.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_edges_and_generate_quads.html,1,['update'],['update']
Deployability,"mplate<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Static Public Member Functions; static OglColorMap * getDefault ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  OglColorMap ();  ;  ~OglColorMap () override;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering2d_1_1_ogl_color_map.html:14258,update,update,14258,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering2d_1_1_ogl_color_map.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering2d_1_1_ogl_color_map.html,1,['update'],['update']
Deployability,"mponent::mapping::linear::SimpleTesselatedTetraTopologicalMappingprotected; swapInputTetrahedra(Index i1, Index i2)sofa::component::mapping::linear::SimpleTesselatedTetraTopologicalMappingprotected; swapOutputPoints(Index i1, Index i2)sofa::component::mapping::linear::SimpleTesselatedTetraTopologicalMappingprotected; swapOutputTetrahedra(Index i1, Index i2)sofa::component::mapping::linear::SimpleTesselatedTetraTopologicalMappingprotected; tetrahedraMappedFromTetrasofa::component::mapping::linear::SimpleTesselatedTetraTopologicalMappingprotected; tetrahedraToRemovesofa::component::mapping::linear::SimpleTesselatedTetraTopologicalMappingprotected; tetraSourcesofa::component::mapping::linear::SimpleTesselatedTetraTopologicalMappingprotected; toModelsofa::core::topology::TopologicalMapping; TopologicalMapping()sofa::core::topology::TopologicalMappingprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateTopologicalMappingBottomUp() overridesofa::component::mapping::linear::SimpleTesselatedTetraTopologicalMappingvirtual; updateTopologicalMappingTopDown() overridesofa::component::mapping::linear::SimpleTesselatedTetraTopologicalMappingvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~SimpleTesselatedTetraTopologicalMapping() overridesofa::component::mapping::linear::SimpleTesselatedTetraTopologicalMappinginlineprotected; ~TopologicalMapping() overridesofa::core::topology::TopologicalMappinginlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_tetra_topological_mapping-members.html:15126,update,updateLinks,15126,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_tetra_topological_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_tetra_topological_mapping-members.html,3,['update'],"['updateLinks', 'updateTopologicalMappingBottomUp', 'updateTopologicalMappingTopDown']"
Deployability,"mponent::playback::ReadTopology; template<class T > ; static bool canCreate (T *obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  CompareTopology ();  ;  Protected Member Functions inherited from sofa::component::playback::ReadTopology;  ReadTopology ();  ;  ~ReadTopology () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initDat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_compare_topology.html:12455,update,update,12455,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_compare_topology.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_compare_topology.html,1,['update'],['update']
Deployability,"mponent::shader::OglShaderElementprotected; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglFloatVectorVariable, OglVariable< type::vector< float > >)sofa::gl::component::shader::OglFloatVectorVariable; OglVariable< type::vector< float > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< float > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< float > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglFloatVectorVariable()sofa::gl::component::shader::OglFloatVectorVariableinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariabl",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector_variable-members.html:13595,update,updateLinks,13595,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector_variable-members.html,2,['update'],['updateLinks']
Deployability,"mponent::shader::OglShaderElementprotected; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglIntVariable, OglVariable< int >)sofa::gl::component::shader::OglIntVariable; OglVariable< int >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< int >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< int >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglIntVariable()sofa::gl::component::shader::OglIntVariableinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< int >inlineprotected; ~ShaderElement() overridesofa::core::visual::ShaderElementinlineprotected; ~Visu",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_variable-members.html:13395,update,updateVisual,13395,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_variable-members.html,2,['update'],['updateVisual']
Deployability,"mponent::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >; TetrahedronFEMForceField()sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >protected; TetrahedronFEMForceFieldInternalData< DataTypes > classsofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >friend; TetrahedronID typedefsofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >; toLameParameters(_2DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; toLameParameters(_3DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Transformation typedefsofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >protected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVonMisesStresssofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >; VecCoord typedefsofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >; VecElement typedefsofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecMaterialStiffness typedefsofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >protected; VecReal typedefsofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecStrainDisplacement typedefsofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField<",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedron_f_e_m_force_field-members.html:36006,update,updateInternal,36006,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedron_f_e_m_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedron_f_e_m_force_field-members.html,1,['update'],['updateInternal']
Deployability,"mponent::topology::mapping::IdentityTopologicalMapping Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::topology::mapping::IdentityTopologicalMapping Class Reference . #include <IdentityTopologicalMapping.h>. Inheritance diagram for sofa::component::topology::mapping::IdentityTopologicalMapping:. [legend]; Detailed Description; This class is a specific implementation of TopologicalMapping where the destination topology should be kept identical to the source topology. The implementation currently assumes that both topology have been initialized identically. . Public Member Functions;  SOFA_CLASS (IdentityTopologicalMapping, sofa::core::topology::TopologicalMapping);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void updateTopologicalMappingTopDown () override;  Translates the TopologyChange objects from the source to the target. More...;  ; Index getFromIndex (Index ind) override;  ;  Public Member Functions inherited from sofa::core::topology::TopologicalMapping;  SOFA_ABSTRACT_CLASS (TopologicalMapping, objectmodel::BaseObject);  ; virtual void setTopologies (In *from, Out *to);  Specify the input and output models. More...;  ; void setPathInputObject (const std::string &o);  Set the path to the objects mapped in the scene graph. More...;  ; void setPathOutputObject (const std::string &o);  ; In * getFrom ();  Accessor to the INPUT topology of the TopologicalMapping : More...;  ; Out * getTo ();  Accessor to the OUTPUT topology of the TopologicalMapping : More...;  ; virtual void updateTopologicalMappingBottomUp ();  Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topology : More...;  ; virtual bool propagateFromInputToOutputModel ();  Return true if this mapping is able to propagate t",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_identity_topological_mapping.html:969,update,updateTopologicalMappingTopDown,969,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_identity_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_identity_topological_mapping.html,1,['update'],['updateTopologicalMappingTopDown']
Deployability,"mponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Public Attributes inherited from sofa::core::behavior::BaseMass; Data< bool > m_separateGravity;  ; Data< SReal > rayleighMass;  Rayleigh Damping mass matrix coefficient. More...;  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(UniformMass, DataTypes), SOFA_TEMPLATE(core::behavior::Mass, DataTypes));  ; sofa::core::objectmodel::ComponentState updateFromTotalMass ();  Functions updating data. More...;  ; sofa::core::objectmodel::ComponentState updateFromVertexMass ();  ; void addMDx (const core::MechanicalParams *mparams, DataVecDeriv &f, const DataVecDeriv &dx, SReal factor) override;  ; void accFromF (const core::MechanicalParams *mparams, DataVecDeriv &a, const DataVecDeriv &f) override;  ; void addForce (const core::MechanicalParams *mparams, DataVecDeriv &f, const DataVecCoord &x, const DataVecDeriv &v) override;  ; SReal getKineticEnergy (const core::MechanicalParams *mparams, const DataVecDeriv &d_v) const override;  vMv/2 using dof->getV() override More...;  ; SReal getPotentialEnergy (const core::MechanicalParams *mparams, const DataVecCoord &x) const override;  Mgx potential in a uniform gravity field, null at origin. More...;  ; type::Vec6 getMomentum (const core::MechanicalParams *mparams, const DataVecCoord &x, const DataVecDeriv &v) const override;  (Mv,cross(x,Mv)+Iw) override More...;  ; void addMDxToVector (linearalgebra::BaseVector *resVect, const VecDeriv *dx, SReal mFact, unsigned int &offset);  ; void addGravityToV (const core::MechanicalParams *mparams, DataVecDeriv &d_v) override;  ; void addMToMatrix (sofa::linearalgebra::BaseMatrix *mat, SReal mFact, unsigned int &offset) override;  Add Mass contribution to global Matrix assembling. More",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_uniform_mass.html:3641,update,updateFromVertexMass,3641,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_uniform_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_uniform_mass.html,1,['update'],['updateFromVertexMass']
Deployability,"ms *) override;  Called after objects in the current branch are displayed. More...;  ; std::string getTextureName ();  ; unsigned short getTextureUnit ();  ; void bind ();  ; void unbind ();  ; ShaderElementType getSEType () const override;  Returns the type of shader element (texture, macro, variable, or attribute) More...;  ; const core::objectmodel::BaseData * getSEValue () const override;  ; core::objectmodel::BaseData * getSEValue () override;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void drawTransparent (const VisualParams *);  Display transparent surfaces. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const type::Quat< SReal >);  ; virtual void applyScale (const SReal, const SReal, const SReal);  ; virtual void exportOBJ (std::string, std::ostream *, std::ostream *, sofa::Index &, sofa::Index &, sofa::Index &, int &);  Append this mesh to an OBJ format ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture.html:4753,update,updateVisual,4753,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture.html,4,['update'],['updateVisual']
Deployability,"muation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::collision::CollisionGroupManager Class Referenceabstract . #include <CollisionGroupManager.h>; Given a set of contacts, create integration groups. ; More... Inheritance diagram for sofa::core::collision::CollisionGroupManager:. [legend]; Detailed Description; Given a set of contacts, create integration groups. ; For each pair of objects in contacts :. Look which mechanical integration algorithm is used; If they are “compatible”, create a algorithm merging them; Often simply the most stable of the two. Explicit Euler + Explicit Runge Kutta -> Explicit Runge Kutta; Explicit * + Implicit Euler -> Implicit Euler . Protected Attributes; sofa::type::vector< core::objectmodel::BaseContext::SPtr > groups;  integration groups More...;  ; std::map< Instance, sofa::type::vector< core::objectmodel::BaseContext::SPtr > > storedGroups;  ;  Protected Attributes inherited from sofa::core::collision::CollisionAlgorithm; Instance instance;  Current collision 'pipeline' instance, allowing to store multiple internal states. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (CollisionGroupManager, CollisionAlgorithm);  ; virtual void createGroups (objectmodel::BaseContext *scene, const so",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_group_manager.html:1220,pipeline,pipeline,1220,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_group_manager.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_group_manager.html,1,['pipeline'],['pipeline']
Deployability,"mulation::DefaultVisualManagerLoop)sofa::gl::component::shader::CompositingVisualLoop; sofa::simulation::DefaultVisualManagerLoop::SOFA_CLASS(DefaultVisualManagerLoop, sofa::core::visual::VisualLoop)sofa::simulation::DefaultVisualManagerLoop; sofa::core::visual::VisualLoop::SOFA_CLASS(VisualLoop, VisualModel)sofa::core::visual::VisualLoop; sofa::core::visual::VisualModel::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateContextStep(sofa::core::visual::VisualParams *vparams) overridesofa::simulation::DefaultVisualManagerLoopvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateStep(sofa::core::visual::VisualParams *vparams) overridesofa::simulation::DefaultVisualManagerLoopvirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; vertFilenamesofa::gl::component::shader::CompositingVisualLoop; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~CompositingVisualLoop() overridesofa::gl::component::shader::CompositingVisualLoopprotected; ~DefaultVisualManagerLoop() overridesofa::simulation::DefaultVisualManagerLoopprotected; ~VisualLoop() overridesofa::core::visual::VisualLoopinlineprotected; ~VisualModel() overridesofa::core::visual::VisualModelinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_compositing_visual_loop-members.html:12679,update,updateVisual,12679,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_compositing_visual_loop-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_compositing_visual_loop-members.html,1,['update'],['updateVisual']
Deployability,"n ; (; Index ; edgeIndex, . MassType & ; EdgeMass, . const core::topology::BaseMeshTopology::Edge & ; , . const sofa::type::vector< Index > & ; , . const sofa::type::vector< SReal > & ;  . ). protected . Method to update See alsod_vertexMass using mass matrix coefficient when a new Triangle is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TRIANGLESADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Triangle is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TRIANGLESREMOVED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a new Quad is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Quad is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSREMOVED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a new Tetrahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Tetrahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAREMOVED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a new Hexahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when HEXAHEDRAADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Hexahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when HEXAHEDRAREMOVED event is fired. Method to initialize . MassType when a new Edge is created to compute mass coefficient matrix. Will be set ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html:38717,update,update,38717,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,1,['update'],['update']
Deployability,n be overridden if needed for additional storage within template specializations. More...;  ; class  FixedProjectiveConstraint;  ; class  FixedRotationProjectiveConstraint;  ; class  FixedTranslationProjectiveConstraintInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  FixedTranslationProjectiveConstraint;  ; class  HermiteSplineProjectiveConstraint;  ; class  LinearMovementProjectiveConstraintInternalData;  ; class  LinearMovementProjectiveConstraint;  ; class  LinearVelocityProjectiveConstraint;  ; class  LineProjectiveConstraintInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  LineProjectiveConstraint;  ; class  OscillatorProjectiveConstraint;  ; class  ParabolicProjectiveConstraint;  ; class  PartialFixedProjectiveConstraint;  ; class  PartialLinearMovementProjectiveConstraintInternalData;  ; class  PartialLinearMovementProjectiveConstraint;  ; class  PatchTestMovementProjectiveConstraintInternalData;  ; class  PatchTestMovementProjectiveConstraint;  ; class  PlaneProjectiveConstraintInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  PlaneProjectiveConstraint;  ; class  PointProjectiveConstraintInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  PointProjectiveConstraint;  ; class  PositionBasedDynamicsProjectiveConstraintInternalData;  This class can be overridden if needed for additional storage within template specializations. More...;  ; class  PositionBasedDynamicsProjectiveConstraint;  ; struct  SkeletonJoint;  ; class  SkeletalMotionProjectiveConstraint;  . Typedefs; using AffineMovementProjectiveConstraint = AffineMovementProjectiveConstraint< T >;  ; using AttachProjectiveConstraint = AttachProjectiveConstraint< T >;  ; using FixedProjectiveConstra,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html:1894,Patch,PatchTestMovementProjectiveConstraintInternalData,1894,api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html,2,['Patch'],"['PatchTestMovementProjectiveConstraint', 'PatchTestMovementProjectiveConstraintInternalData']"
Deployability,"n details. ◆ GetCurrentDir(). std::string sofa::helper::system::SetDirectory::GetCurrentDir ; (; ). static . Get the current directory. . ◆ GetExtension(). std::string sofa::helper::system::SetDirectory::GetExtension ; (; const char * ; filename). static . Get the extension of a file from an absolute path description, i.e. if given""a/b/c.d"", return ""d"". . ◆ GetFileName(). std::string sofa::helper::system::SetDirectory::GetFileName ; (; const char * ; filename). static . Get the filename from an absolute path description, i.e. if given""a/b/c"", return ""c"". . ◆ GetFileNameWithoutExtension(). std::string sofa::helper::system::SetDirectory::GetFileNameWithoutExtension ; (; const char * ; filename). static . Get the filename from an absolute path description without extension i.e. if given""a/b/c.d"", return ""c"". . ◆ GetParentDir(). std::string sofa::helper::system::SetDirectory::GetParentDir ; (; const char * ; filename). static . Get the parent directory of a given file, i.e. if given ""a/b/c"", return ""a/b"". . ◆ GetProcessFullPath(). std::string sofa::helper::system::SetDirectory::GetProcessFullPath ; (; const char * ; filename). static . Get the full path of the current process. The given filename should be the value of argv[0]. . ◆ GetRelativeFromDir(). std::string sofa::helper::system::SetDirectory::GetRelativeFromDir ; (; const char * ; filename, . const char * ; basename . ). static . Get the ABSOLUTE path of a file relative to a directory i.e. if given ""../e"" and ""a/b/c"", return ""a/b/e"". . ◆ GetRelativeFromFile(). std::string sofa::helper::system::SetDirectory::GetRelativeFromFile ; (; const char * ; filename, . const char * ; basename . ). static . Get the ABSOLUTE path of a file relative to another file path i.e. if given ""../e"" and ""a/b/c"", return ""a/e"". . ◆ GetRelativeFromProcess(). std::string sofa::helper::system::SetDirectory::GetRelativeFromProcess ; (; const char * ; filename, . const char * ; basename = nullptr . ). static . Get the ABSOLUTE path of a file ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html:3192,a/b,a/b,3192,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html,2,['a/b'],['a/b']
Deployability,"n needle insertion case. /model-not-visible-in-runsofa; . /feed; ; [SOLVED] model not visible in runsofa – SOFA. SOFA - Topic: [SOLVED] model not visible in runsofa. /model-order-reduction-phase-3-animation-issue; ; SOFA - Topic: Model Order Reduction Phase 3 (animation issue). /model-order-reduction-problem-with-cglinearsolver; ; SOFA - Topic: Model Order reduction problem with CGLinearSolver. /modification-of-forcefields-positions; ; SOFA - Topic: Modification of forcefields’ positions. /modify-fields-of-a-node-components-such-as-translationrotation-from-c-api; ; SOFA - Topic: [SOLVED] Modify fields of a node components (such as translation/rotation) from C++ API. /modifying-the-trunk-example; ; SOFA - Topic: [SOLVED] Modifying The Trunk Example. /modify-origin-and-orientation-of-a-meshoglmodel-to-be-the-same-as-another-mesh; ; SOFA - Topic: [SOLVED] Modify origin and orientation of a mesh(oglModel) to be the same as another mesh. /modulenotfounderror-sofa-helper-with-binary-install-v21-06-02; ; SOFA - Topic: ModuleNotFoundError … ‘Sofa.Helper’ with Binary install v21.06.02. /modules-attributes; ; SOFA - Topic: [SOLVED] Modules, attributes. /monitor-not-exporting-data; ; SOFA - Topic: [SOLVED] Monitor not exporting data. /mounting-a-rigid-object-to-a-single-point; ; SOFA - Topic: Mounting a rigid object to a single point. /movement-restriction-at-some-points-of-an-object; ; SOFA - Topic: [SOLVED] Movement restriction at some points of an object. /moving-a-model-with-key-controls; ; SOFA - Topic: [SOLVED] Moving a model with key controls. /moving-an-object-by-keyboard; ; SOFA - Topic: [SOLVED] Moving an object by keyboard. /moving-the-starting-point-of-a-beam; ; SOFA - Topic: [SOLVED] Moving the starting point of a beam. /moving-to-github-discussions-lets-vote; ; SOFA - Topic: Moving to GitHub discussions –> let’s vote!. /multimaterial-soft-robotic-finger-simulation-issue; ; SOFA - Topic: Multimaterial soft robotic finger simulation issue. /multiple-errors-when-buil",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:350863,install,install-,350863,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['install'],['install-']
Deployability,"n values to this object's fields and potentially other parameters. More...;  ; void parseFields (const std::map< std::string, std::string * > &str) override;  Assign the field values stored in the given map of name -> value pairs. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called af",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_r_o_i_value_mapper.html:3451,update,updateAllInputsIfDirty,3451,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_r_o_i_value_mapper.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_r_o_i_value_mapper.html,3,['update'],['updateAllInputsIfDirty']
Deployability,"n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(ExtrudeEdgesAndGenerateQuads, DataTypes), core::DataEngine)sofa::component::engine::generate::ExtrudeEdgesAndGenerateQuads< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::engine::generate::ExtrudeEdgesAndGenerateQuads< DataTypes >; VecCoord typedefsofa::component::engine::generate::ExtrudeEdgesAndGenerateQuads< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDG",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_edges_and_generate_quads-members.html:13452,update,update,13452,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_edges_and_generate_quads-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_edges_and_generate_quads-members.html,1,['update'],['update']
Deployability,"n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(ExtrudeQuadsAndGenerateHexas, DataTypes), core::DataEngine)sofa::component::engine::generate::ExtrudeQuadsAndGenerateHexas< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::engine::generate::ExtrudeQuadsAndGenerateHexas< DataTypes >; VecCoord typedefsofa::component::engine::generate::ExtrudeQuadsAndGenerateHexas< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDG",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_quads_and_generate_hexas-members.html:13679,update,update,13679,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_quads_and_generate_hexas-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_quads_and_generate_hexas-members.html,1,['update'],['update']
Deployability,"n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(MathOp, VecT), core::DataEngine)sofa::component::engine::transform::MathOp< VecT >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Value typedefsofa::component::engine::transform::MathOp< VecT >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecValue typedefsofa::component::engine::transform::MathOp< VecT >; vf_inputssofa::component::engine::transform::MathOp< VecT >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~MathOp() overridesofa::compon",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_math_op-members.html:12337,update,updateAllInputsIfDirty,12337,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_math_op-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_math_op-members.html,1,['update'],['updateAllInputsIfDirty']
Deployability,"n96 thesis) More...;  . Protected Member Functions; void print (const unsigned int index);  ; unsigned int build (UIlist &list, unsigned char direction, const VecCoord &positions);  ; void closest (distanceSet &cl, const Coord &x, const unsigned int &currentnode, const VecCoord &positions, unsigned N) const;  ; void closest (distanceToPoint &cl, const Coord &x, const unsigned int &currentnode, const VecCoord &positions) const;  . Friends; To be Data-zable; std::ostream & operator<< (std::ostream &os, const kdTree< Coord > &);  ; std::istream & operator>> (std::istream &is, kdTree< Coord > &);  . Attribute details. ◆ firstNode. template<class Coord > . unsigned int sofa::helper::kdTree< Coord >::firstNode. protected . ◆ tree. template<class Coord > . type::vector< TREENODE > sofa::helper::kdTree< Coord >::tree. protected . Function details. ◆ build() [1/3]. template<class Coord > . void sofa::helper::kdTree< Coord >::build ; (; const VecCoord & ; positions). update tree (to be used whenever positions have changed) . ◆ build() [2/3]. template<class Coord > . void sofa::helper::kdTree< Coord >::build ; (; const VecCoord & ; positions, . const type::vector< unsigned int > & ; ROI . ). update tree based on positions subset (to be used whenever points p have changed) . ◆ build() [3/3]. template<class Coord > . unsigned int sofa::helper::kdTree< Coord >::build ; (; UIlist & ; list, . unsigned char ; direction, . const VecCoord & ; positions . ). protected . ◆ closest() [1/2]. template<class Coord > . void sofa::helper::kdTree< Coord >::closest ; (; distanceSet & ; cl, . const Coord & ; x, . const unsigned int & ; currentnode, . const VecCoord & ; positions, . unsigned ; N . ); const. protected . ◆ closest() [2/2]. template<class Coord > . void sofa::helper::kdTree< Coord >::closest ; (; distanceToPoint & ; cl, . const Coord & ; x, . const unsigned int & ; currentnode, . const VecCoord & ; positions . ); const. protected . ◆ getClosest(). template<class Coord > . unsigned in",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1kd_tree.html:2992,update,update,2992,api/master/sofa/html/classsofa_1_1helper_1_1kd_tree.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1kd_tree.html,2,['update'],['update']
Deployability,n; ; SOFA - Topic: [SOLVED] Problem adding UncoupledConstraintCorrection. /problem-compiling-sofa-v16-08; ; SOFA - Topic: [SOLVED] Problem compiling Sofa v16.08. /problem-compiling-sofa-with-python3; ; SOFA - Topic: Problem Compiling SOFA with Python3. /problem-compiling-sofa-with-python3-2; ; SOFA - Topic: Problem Compiling SOFA with Python3. /problem-configuring-sofa-with-eigen3; ; SOFA - Topic: [SOLVED] Problem configuring SOFA with Eigen3. /problem-downloading-the-source-files-from-git-repositary; ; SOFA - Topic: [SOLVED] Problem downloading the source files from git repositary. /problem-for-beam-mass-simulation; ; SOFA - Topic: Problem for beam-mass simulation. /problem-in-generating-cmake-gui-when-building-sofa; ; SOFA - Topic: [SOLVED] Problem in generating Cmake-gui when building Sofa. /problem-in-installing-cmake; ; SOFA - Topic: [SOLVED] Problem in installing Cmake. /problem-in-installing-stlib; . /feed; ; [SOLVED] Problem in installing STlib – SOFA. SOFA - Topic: [SOLVED] Problem in installing STlib. /problem-in-running-new-version-of-sofa-20-12; ; SOFA - Topic: Problem in running new version of Sofa 20.12. /problem-of-the-variables-control-of-legged-robot-with-flexible-passive-trunk; ; SOFA - Topic: Problem of the Variables Control of Legged Robot with Flexible Passive Trunk. /problems-applying-sofacuda-plugin; ; SOFA - Topic: [SOLVED] Problems applying SofaCUDA plugin. /problems-at-lauching-runsofa; ; SOFA - Topic: [SOLVED] Problems at lauching runSofa. /problems-finding-collision-algorithms; ; SOFA - Topic: [SOLVED] Problems finding collision algorithms. /problems-generating-mesh-with-cgalplugin-and-tetrahedronsettopologycontainer; ; SOFA - Topic: [SOLVED] Problems generating mesh with CGALPlugin and TetrahedronSetTopologyContainer. /problems-importing-sofa-gui-sofapython3; ; SOFA - Topic: Problems importing Sofa.Gui (SofaPython3). /problems-in-model-order-reduction; ; SOFA - Topic: [SOLVED] Problems in Model Order Reduction. /problems-in-mor-runsofa-l,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:364827,install,installing,364827,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['install'],['installing']
Deployability,"nForceField, TDataTypes1, TDataTypes2), BaseInteractionForceField, SOFA_TEMPLATE2(PairStateAccessor, TDataTypes1, TDataTypes2))sofa::core::behavior::MixedInteractionForceField< TDataTypes1, TDataTypes2 >; SOFA_CLASS(SOFA_TEMPLATE2(InteractionEllipsoidForceField, TDataTypes1, TDataTypes2), SOFA_TEMPLATE2(core::behavior::MixedInteractionForceField, TDataTypes1, TDataTypes2))sofa::component::mechanicalload::InteractionEllipsoidForceField< TDataTypes1, TDataTypes2 >; sofa::core::behavior::MixedInteractionForceField::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; stiffnesssofa::component::mechanicalload::InteractionEllipsoidForceField< TDataTypes1, TDataTypes2 >; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; varssofa::component::mechanicalload::InteractionEllipsoidForceField< TDataTypes1, TDataTypes2 >protected; VecCoord1 typedefsofa::component::mechanicalload::InteractionEllipsoidForceField< TDataTypes1, TDataTypes2 >; VecCoord2 typedefsofa::component::mechanicalload::InteractionEllipsoidForceField< TDataTypes1, TDataTypes2 >; VecData typedefsofa::core::objectmodel::Base; VecDeriv1 typedefsofa::component::mechanicalload::InteractionEllipsoidForceField< TDataTypes1, TDataTypes2 >; VecDeriv2 typedefsofa::component::mechanicalload::InteractionEllipsoidForceField< TDataTypes1, TDataTypes2 >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; vradiussofa::component::mechanicalload::InteractionEllipsoidForceField< TDataTypes1, TDataTypes2 >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_interaction_ellipsoid_force_field-members.html:19423,update,updateLinks,19423,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_interaction_ellipsoid_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_interaction_ellipsoid_force_field-members.html,1,['update'],['updateLinks']
Deployability,"nRatioWidget (QWidget *, const char *, core::objectmodel::Data< double > *);  ; virtual bool createWidgets ();  ; virtual void setDataReadOnly (bool readOnly);  This method is called after createWidgets to configure whether the created widgets should be read-only. More...;  ;  Public Member Functions inherited from sofa::gui::qt::TDataWidget< double >;  TDataWidget (QWidget *parent, const char *name, MyTData *d);  ; sofa::core::objectmodel::Data< double > * getData ();  ; const sofa::core::objectmodel::Data< double > * getData () const;  ; virtual void setData (MyTData *d);  ; virtual void setData (MyData *d);  ;  Public Member Functions inherited from sofa::gui::qt::DataWidget;  DataWidget (QWidget *parent, const char *name, MyData *d);  ;  ~DataWidget () override;  ; virtual void setData (MyData *d);  ; const core::objectmodel::BaseData * getBaseData () const;  BaseData pointer accessor function. More...;  ; core::objectmodel::BaseData * getBaseData ();  ; void updateVisibility ();  ; bool isDirty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  . Protected Member Functions; virtual void readFromData ();  The implementation of this method tells how the widget reads the value of the data. More...;  ; virtual void writeToData ();  . Protected Slots; void changeLineEditValue ();  ; void changeSliderValue ();  . Additional Inherited Members;  Static Public Member Functions inherited from sofa::gui::qt::TDataWidget< double >; static RealObject * create (RealObject *, CreatorArgument &arg);  ;  Static Public Member Functions inherited from sofa::gui::qt::DataWidget; template<class T > ; static T * create (T *, const CreatorArgument &arg);  ; static DataWidget * CreateDataWidget (const DataWidg",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_poisson_ratio_widget.html:1910,update,updateVisibility,1910,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_poisson_ratio_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_poisson_ratio_widget.html,2,['update'],['updateVisibility']
Deployability,"nSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(OdeSolver, objectmodel::BaseObject)sofa::core::behavior::OdeSolver; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; solve(const core::ExecParams *, SReal, MultiVecCoordId, MultiVecDerivId)=0sofa::core::behavior::OdeSolverpure virtual; solve(const core::ExecParams *params, SReal dt)sofa::core::behavior::OdeSolverinlinevirtual; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OdeSolver() overridesofa::core::behavior::OdeSolverprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_ode_solver-members.html:10390,update,updateInternal,10390,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_ode_solver-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_ode_solver-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"name DataTypes > . using sofa::VecReal_t = typedef typename DataTypes::VecReal. Function Documentation. ◆ convertSPtr(). template<class mat > . helper::OwnershipSPtr<mat> sofa::convertSPtr ; (; const linearalgebra::BaseMatrix * ; m). Converts a BaseMatrix to a eigen sparse matrix encapsulated in a OwnershipSPtr. It the conversion needs to create a temporary matrix, it will be automatically deleted by the OwnershipSPtr (with ownership). It the conversion did not create a temporary data, and points to an existing matrix, the OwnershipSPtr does not take the ownership and won't delete anything. @TODO move this somewhere else? AuthorMatthieu Nesme . ◆ createCylinderTractionScene(). template<typename DataTypes > . CylinderTractionStruct<DataTypes> sofa::createCylinderTractionScene ; (; int ; resolutionCircumferential, . int ; resolutionRadial, . int ; resolutionHeight, . int ; maxIter . ). ◆ createRegularGridScene(). template<class DataTypes > . PatchTestStruct<DataTypes> sofa::createRegularGridScene ; (; simulation::Node::SPtr ; root, . typename DataTypes::Coord ; startPoint, . typename DataTypes::Coord ; endPoint, . int ; numX, . int ; numY, . int ; numZ, . sofa::type::Vec< 6, SReal > ; entireBoxRoi, . sofa::type::Vec< 6, SReal > ; inclusiveBox, . sofa::type::Vec< 6, SReal > ; includedBox . ). Create a scene with a regular grid and an affine constraint for patch test. . ◆ initSofaConfig(). SOFA_EXPORT_DYNAMIC_LIBRARY void sofa::initSofaConfig ; (; ). ◆ TEST_F() [1/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . End ;  . ). ◆ TEST_F() [2/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . IsEnabled ;  . ). ◆ TEST_F() [3/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . SetOutputType ;  . ). ◆ TEST_F() [4/5]. sofa::TEST_F ; (; DefaultAnimationLoop_test ; , . testOneStep ;  . ). ◆ TEST_F() [5/5]. sofa::TEST_F ; (; TemplateAliasTest ; , . Register ;  . ). ◆ TYPED_TEST() [1/4]. sofa::TYPED_TEST ; (; AffinePatch_sofa_test ; , . patchTest2D ;  . ). ◆ TYPED_TEST() [2/4]. sofa::TYPED_TEST ;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:6797,Patch,PatchTestStruct,6797,api/master/sofa/html/namespacesofa.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html,1,['Patch'],['PatchTestStruct']
Deployability,"name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get the type name of this object (i.e. class and template types) ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html:12849,update,updateInternal,12849,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html,1,['update'],['updateInternal']
Deployability,"name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_visual_manager_pass.html:7753,update,updateInternal,7753,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_visual_manager_pass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_visual_manager_pass.html,6,"['Update', 'update']","['Update', 'updateInternal']"
Deployability,"name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an in",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1performer_1_1_mouse_interactor.html:4873,update,updateInternal,4873,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1performer_1_1_mouse_interactor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1performer_1_1_mouse_interactor.html,3,"['Update', 'update']","['Update', 'updateInternal']"
Deployability,"name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Context;  Context ();  ; virtual ~Context () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseContext;  BaseContext ();  ;  ~BaseContext () override;  . @internal stuff related to the DAG traversal; enum  VisitedStatus { NOT_VISITED =0; , VISITED; , PRUNED; };  traversal flags More...;  ; typedef std::map< DAGNode *, StatusStruct > StatusMap;  map structure to store a traversal flag for each DAGNode More...;  ; typedef std::list< DAGNode * > NodeList;  list of DAGNode* More...;  ; std::set< DAGNode * > _descendancy;  all child nodes (unordered) More...;  ; NodeList _precomputedTraversalOrder;  the ordered list of Node to traverse from this Node More...;  ; void setDirtyDescendancy ();  bottom-up traversal removing descendancy More...;  ; void updateDescendancy ();  traversal updating the descendancy More...;  ; void executeVisitorTopDown (simulation::Visitor *action, NodeList &executedNodes, StatusMap &statusMap, DAGNode *visitorRoot);  ; void executeVisitorBottomUp (simulation::Visitor *action, NodeList &executedNodes);  . @internal stuff related to getObjects; class GetDownObjectsVisitor;  ; class GetUpObjectsVisitor;  ; void getLocalObjects (const sofa::core::objectmodel::ClassInfo &class_info, DAGNode::GetObjectsCallBack &container, const sofa::core::objectmodel::TagSet &tags) const;  get node's local objects respecting specified class_info and tags More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Node; NodeSequence< Node, true > child;  ; NodeSequence< sofa::core::objectmodel::BaseObject, true > object;  ; NodeSequence< sofa::core::BehaviorModel > behaviorModel;  ; NodeSequence< sofa::core::BaseMapping > mapping;  ; NodeSequence< sofa::core::behavior::OdeSolver > solver;  ; NodeSequence< sofa::core::b",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:28076,update,updateDescendancy,28076,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,2,['update'],['updateDescendancy']
Deployability,"namic::EdgeSetTopologyModifier::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject.; Reimplemented in sofa::component::topology::container::dynamic::TriangleSetTopologyModifier, sofa::component::topology::container::dynamic::TetrahedronSetTopologyModifier, sofa::component::topology::container::dynamic::QuadSetTopologyModifier, and sofa::component::topology::container::dynamic::HexahedronSetTopologyModifier. ◆ movePointsProcess(). void sofa::component::topology::container::dynamic::EdgeSetTopologyModifier::movePointsProcess ; (; const sofa::type::vector< PointID > & ; id, . const sofa::type::vector< sofa::type::vector< PointID > > & ; ancestors, . const sofa::type::vector< sofa::type::vector< SReal > > & ; coefs, . const bool ; moveDOF = true . ). overrideprotectedvirtual . Move input points indices to input new coords. Also propagate event and update edgesAroundVertex for data handling. ; Parameters. idThe list of indices to move ; ancestorsThe list of ancestors to define relative new position ; coefsThe barycoef to locate new coord relatively to ancestors. @moveDOF bool allowing the move (default true) . Reimplemented from sofa::component::topology::container::dynamic::PointSetTopologyModifier.; Reimplemented in sofa::component::topology::container::dynamic::TriangleSetTopologyModifier. ◆ propagateTopologicalEngineChanges(). void sofa::component::topology::container::dynamic::EdgeSetTopologyModifier::propagateTopologicalEngineChanges ; (; ). overrideprotectedvirtual . function to propagate topological change events by parsing the list of TopologyHandlers linked to this topology. ; Reimplemented from sofa::component::topology::container::dynamic::PointSetTopologyModifier.; Reimplemented in sofa::component::topology::container::dynamic::TriangleSetTopologyModifier, sofa::component::topology::container::dynamic::TetrahedronSetTopologyM",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_topology_modifier.html:31566,update,update,31566,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_topology_modifier.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_topology_modifier.html,1,['update'],['update']
Deployability,"napingBorderValue;  ; int snapingValue;  ; int cpt;  ; bool finishIncision;  ; bool keepPoint;  ;  Protected Attributes inherited from sofa::gui::common::Operation; PickHandler * pickHandle;  ; sofa::component::setting::MouseButtonSetting::SPtr mbsetting;  ; MOUSE_BUTTON button;  . Public Member Functions;  InciseOperation ();  ;  ~InciseOperation () override;  ; void start () override;  ; void execution () override;  This function is called each time the mouse is clicked. More...;  ; void end () override;  ; void endOperation () override;  This function is called after each mouse click. More...;  ; void setIncisionMethod (int m);  ; void setSnapingBorderValue (int m);  ; void setSnapingValue (int m);  ; void setCompleteIncision (bool m);  ; void setKeepPoint (bool m);  ; virtual int getIncisionMethod () const;  ; virtual int getSnapingBorderValue () const;  ; virtual int getSnapingValue () const;  ; virtual bool getCompleteIncision ();  ; virtual bool getKeepPoint ();  ;  Public Member Functions inherited from sofa::gui::common::Operation;  Operation (sofa::component::setting::MouseButtonSetting::SPtr s=nullptr);  ; virtual ~Operation ();  ; virtual void configure (PickHandler *picker, MOUSE_BUTTON b);  ; virtual void configure (PickHandler *picker, sofa::component::setting::MouseButtonSetting *s);  ; virtual void wait ();  This function is called when shift key is released. More...;  ; virtual void setSetting (sofa::component::setting::MouseButtonSetting *s);  ; virtual std::string defaultPerformerType ();  ; virtual sofa::gui::component::performer::InteractionPerformer * createPerformer ();  ; virtual void configurePerformer (sofa::gui::component::performer::InteractionPerformer *p);  ; MOUSE_BUTTON getMouseButton () const;  ; std::string getId ();  . Static Public Member Functions; static std::string getDescription ();  ;  Static Public Member Functions inherited from sofa::gui::common::Operation; static MOUSE_BUTTON GetMouseId (unsigned int i);  . Additional In",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_incise_operation.html:1906,release,released,1906,api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_incise_operation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_incise_operation.html,2,['release'],['released']
Deployability,"nce diagram for sofa::component::collision::response::mapper::ContactMapper< collision::geometry::LineCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >:. [legend]; Detailed Description; template<class DataTypes>; class sofa::component::collision::response::mapper::ContactMapper< collision::geometry::LineCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >; Mapper for LineModel. . Public Member Functions; sofa::Index addPoint (const Coord &P, sofa::Index index, Real &);  ; sofa::Index addPointB (const Coord &, sofa::Index index, Real &, const type::Vec3 &baryP);  ; sofa::Index addPointB (const Coord &P, sofa::Index index, Real &r);  ;  Public Member Functions inherited from sofa::component::collision::response::mapper::BarycentricContactMapper< collision::geometry::LineCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >;  SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER (Index, sofa::Index);  ;  SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER (Size, sofa::Size);  ;  BarycentricContactMapper ();  ; void setCollisionModel (MCollisionModel *model);  ; void cleanup () override;  ; MMechanicalState * createMapping (const char *name=""contactPoints"") override;  ; void resize (sofa::Size size) override;  ; void update () override;  ; void updateXfree () override;  ; void updateX0 ();  ;  Public Member Functions inherited from sofa::component::collision::response::mapper::BaseContactMapper< DataTypes >; virtual ~BaseContactMapper ();  ; virtual void resize (Size size)=0;  ; virtual Index addPoint (const Coord &, Index, Real &);  Adding a point of the global referentiel to the mapping. More...;  ; virtual Index addPointB (const Coord &P, Index elementId, Real &r, const sofa::type::Vec3 &);  ; Index addPointB (const Coord &P, Index elementId, Real &r);  . Additional Inherited Members;  Public Attributes inherited from sofa::component::collision::response::mapper::BarycentricContactMapper< collision::geometry::LineCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >; MCol",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_contact_mapper_3_01collision_1_1gea471e7548debf57be3bb96db0509f8cf.html:1782,update,update,1782,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_contact_mapper_3_01collision_1_1gea471e7548debf57be3bb96db0509f8cf.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_contact_mapper_3_01collision_1_1gea471e7548debf57be3bb96db0509f8cf.html,2,['update'],"['update', 'updateXfree']"
Deployability,"nciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS2 (SOFA_TEMPLATE(NearestPointROI, DataTypes), sofa::core::DataEngine, SOFA_TEMPLATE2(core::behavior::PairStateAccessor, DataTypes, DataTypes));  ;  NearestPointROI (core::behavior::MechanicalState< DataTypes > *=nullptr, core::behavior::MechanicalState< DataTypes > *mm2=nullptr);  ;  ~NearestPointROI () override;  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_nearest_point_r_o_i.html:3883,update,update,3883,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_nearest_point_r_o_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_nearest_point_r_o_i.html,1,['update'],['update']
Deployability,"nciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(StartNavigationButtonSetting, MouseButtonSetting)sofa::gui::component::StartNavigationButtonSetting; sofa::component::setting::MouseButtonSetting::SOFA_CLASS(MouseButtonSetting, core::objectmodel::ConfigurationSetting)sofa::component::setting::MouseButtonSetting; sofa::core::objectmodel::ConfigurationSetting::SOFA_CLASS(ConfigurationSetting, BaseObject)sofa::core::objectmodel::ConfigurationSetting; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; StartNavigationButtonSetting()sofa::gui::component::StartNavigationButtonSettinginlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::object",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_start_navigation_button_setting-members.html:10069,Configurat,ConfigurationSetting,10069,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_start_navigation_button_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_start_navigation_button_setting-members.html,1,['Configurat'],['ConfigurationSetting']
Deployability,nction. /view-port-via-hdmi-port; . /feed; ; [SOLVED] View Port via HDMI port – SOFA. /page; . /3; ; SOFA - Topic: [SOLVED] View Port via HDMI port. /5; ; SOFA - Topic: [SOLVED] View Port via HDMI port. SOFA - Topic: [SOLVED] View Port via HDMI port. /visualisation-of-2d-scenes-in-sofa; . /feed; ; [SOLVED] Visualisation of 2D scenes in SOFA – SOFA. SOFA - Topic: [SOLVED] Visualisation of 2D scenes in SOFA. /visualization-bug-with-a-softrobots-plugin-example; . /feed; ; [SOLVED] Visualization bug with a SoftRobots plugin example – SOFA. SOFA - Topic: [SOLVED] Visualization bug with a SoftRobots plugin example. /visualizing-diagonalcompliance-compliance-plugin; ; SOFA - Topic: [SOLVED] Visualizing DiagonalCompliance (Compliance Plugin). /visualizing-the-difference-between-two-models-as-a-hot-plot; ; SOFA - Topic: [SOLVED] visualizing the difference between two models as a hot plot. /visual-not-updated-using-python; . /feed; ; Visual not updated using python – SOFA. SOFA - Topic: Visual not updated using python. /visual-not-updating-when-using-with-a-glfw-window-imgui; ; SOFA - Topic: Visual not updating when using with a GLFW window (ImGUI). /visual-problem-tutorial-sofa-v-18-06; ; SOFA - Topic: [SOLVED] Visual Problem Tutorial SOFA v.18.06. /visual-studio-cant-work-with-more-than-260-character-length-variables; ; SOFA - Topic: visual studio cant work with more than 260 character-length variables. /volume-of-element; ; SOFA - Topic: Volume of element. /volumetric-mesh-generation-error; ; SOFA - Topic: [SOLVED] Volumetric Mesh Generation Error. /volumetric-mesh-generation-of-woven-t-yarn; . /page; . /2; ; SOFA - Topic: [SOLVED] Volumetric Mesh Generation of Woven T-yarn. SOFA - Topic: [SOLVED] Volumetric Mesh Generation of Woven T-yarn. /voxelization-of-meshes; ; SOFA - Topic: Voxelization of meshes. /vs-code-sofaruntime-importplugin-cannot-be-resolved; ; SOFA - Topic: [SOLVED] VS code SofaRuntime.importPlugin cannot be resolved. /what-are-the-build-options-in-sofa-dash,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:417849,update,updated,417849,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['update'],['updated']
Deployability,"ndVertex typedefsofa::core::topology::BaseMeshTopology; Tetrahedron typedefsofa::core::topology::Topology; TetrahedronID typedefsofa::core::topology::Topology; TetraID typedefsofa::core::topology::Topology; Topology()sofa::core::topology::Topologyinlineprotected; TopologyContainer()sofa::core::topology::TopologyContainerinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; unlinkTopologyHandlerToData(core::topology::TopologyHandler *topologyHandler, sofa::geometry::ElementType elementType) overridesofa::component::topology::container::dynamic::HexahedronSetTopologyContainervirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3i typedefsofa::component::topology::container::dynamic::MultilevelHexahedronSetTopologyContainer; VecData typedefsofa::core::objectmodel::Base; VecEdgeID typedefsofa::component::topology::container::dynamic::EdgeSetTopologyContainer; VecHexaID typedefsofa::component::topology::container::dynamic::HexahedronSetTopologyContainer; VecLink typedefsofa::core::objectmodel::Base; VecQuadID typedefsofa::component::topology::container::dynamic::QuadSetTopologyContainer; VecSlaves typedefsofa::core::objectmodel::BaseObject; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseTopologyObject() overridesofa::core::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_multilevel_hexahedron_set_topology_container-members.html:46673,update,updateLinks,46673,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_multilevel_hexahedron_set_topology_container-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_multilevel_hexahedron_set_topology_container-members.html,1,['update'],['updateLinks']
Deployability,"ndVertex typedefsofa::core::topology::BaseMeshTopology; Tetrahedron typedefsofa::core::topology::Topology; TetrahedronID typedefsofa::core::topology::Topology; TetraID typedefsofa::core::topology::Topology; Topology()sofa::core::topology::Topologyinlineprotected; TopologyContainer()sofa::core::topology::TopologyContainerinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; unlinkTopologyHandlerToData(core::topology::TopologyHandler *topologyHandler, sofa::geometry::ElementType elementType) overridesofa::component::topology::container::dynamic::HexahedronSetTopologyContainervirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecEdgeID typedefsofa::component::topology::container::dynamic::EdgeSetTopologyContainer; VecHexaID typedefsofa::component::topology::container::dynamic::HexahedronSetTopologyContainer; VecLink typedefsofa::core::objectmodel::Base; VecQuadID typedefsofa::component::topology::container::dynamic::QuadSetTopologyContainer; VecSlaves typedefsofa::core::objectmodel::BaseObject; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseTopologyObject() overridesofa::core::topology::BaseTopologyObjectinlineprotected; ~EdgeSetTopologyContainer() overridesofa::component::topo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_container-members.html:43031,update,updateLinks,43031,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_container-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_container-members.html,1,['update'],['updateLinks']
Deployability,"ndVertex typedefsofa::core::topology::BaseMeshTopology; Tetrahedron typedefsofa::core::topology::Topology; TetrahedronID typedefsofa::core::topology::Topology; TetraID typedefsofa::core::topology::Topology; Topology()sofa::core::topology::Topologyinlineprotected; TopologyContainer()sofa::core::topology::TopologyContainerinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; unlinkTopologyHandlerToData(core::topology::TopologyHandler *topologyHandler, sofa::geometry::ElementType elementType) overridesofa::component::topology::container::dynamic::HexahedronSetTopologyContainervirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; valuesIndexedInRegularGridsofa::component::topology::container::dynamic::DynamicSparseGridTopologyContainer; valuesIndexedInTopologysofa::component::topology::container::dynamic::DynamicSparseGridTopologyContainer; VecData typedefsofa::core::objectmodel::Base; VecEdgeID typedefsofa::component::topology::container::dynamic::EdgeSetTopologyContainer; VecHexaID typedefsofa::component::topology::container::dynamic::HexahedronSetTopologyContainer; VecLink typedefsofa::core::objectmodel::Base; VecQuadID typedefsofa::component::topology::container::dynamic::QuadSetTopologyContainer; VecSlaves typedefsofa::core::objectmodel::BaseObject; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; voxelSizesofa::component::topology::container::dynamic::DynamicSparseGridTopologyContainer; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &sepa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_container-members.html:44354,update,updateLinks,44354,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_container-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_container-members.html,1,['update'],['updateLinks']
Deployability,"ndex is vertexIndex. Returns -1 if none. More...;  ; int getEdgeIndexInHexahedron (const EdgesInHexahedron &t, EdgeID edgeIndex) const override;  Returns the index (either 0, 1 ,2 ,3, 4, 5, 6, 7, 8, 9, 10, 11) of the edge whose global index is edgeIndex. Returns -1 if none. More...;  ; int getQuadIndexInHexahedron (const QuadsInHexahedron &t, QuadID quadIndex) const override;  Returns the index (either 0, 1 ,2 ,3, 4, 5) of the quad whose global index is quadIndex. Returns -1 if none. More...;  ; Edge getLocalEdgesInTetrahedron (const HexahedronID i) const override;  Returns for each index (between 0 and 5) the two vertex indices that are adjacent to that edge. More...;  ; Edge getLocalEdgesInHexahedron (const HexahedronID i) const override;  Returns for each index (between 0 and 12) the two vertex indices that are adjacent to that edge. More...;  ; sofa::geometry::ElementType getTopologyType () const override;  ; void invalidate ();  ; virtual void updateTetrahedra ();  ; virtual void updateHexahedra ();  ; const EdgesAroundVertex & getEdgesAroundVertex (PointID i) override;  Returns the set of edges adjacent to a given vertex. More...;  ; const type::vector< EdgesAroundVertex > & getEdgesAroundVertexArray ();  Returns the TrianglesAroundVertex array (i.e. provide the triangles indices adjacent to each vertex). More...;  ; const TrianglesAroundVertex & getTrianglesAroundVertex (PointID i) override;  Returns the set of triangles adjacent to a given vertex. More...;  ; const type::vector< TrianglesAroundVertex > & getTrianglesAroundVertexArray ();  Returns the TrianglesAroundVertex array (i.e. provide the triangles indices adjacent to each vertex). More...;  ; const EdgesInTriangle & getEdgesInTriangle (TriangleID i) override;  Returns the set of 3 edge indices of a given triangle. More...;  ; const type::vector< EdgesInTriangle > & getEdgesInTriangleArray ();  Returns the EdgesInTriangle array (i.e. provide the 3 edge indices for each triangle). More...;  ; const Tria",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_cube_topology.html:13091,update,updateTetrahedra,13091,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_cube_topology.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_cube_topology.html,18,['update'],"['updateHexahedra', 'updateTetrahedra']"
Deployability,"ndingSprings. protectedvirtual . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::FastTriangularBendingSprings< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< _DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::FastTriangularBendingSprings< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< _DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::spring::FastTriangularBendingSprings< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). overridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the sam",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs.html:23315,update,update,23315,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs.html,1,['update'],['update']
Deployability,"ndle mutations of the graph. More...;  ; class  NodeSequence;  ; class  NodeSingle;  ; class  Node;  ; struct  Range;  ; class  ParallelSparseMatrixProduct;  ; class  PauseEvent;  ; class  PipelineImpl;  ; class  PositionEvent;  ; class  PrintVisitor;  ; class  PropagateEventVisitor;  ; class  RequiredPlugin;  ; class  ResetVisitor;  ; class  StoreResetStateVisitor;  ; class  SceneCheck;  ; class  SceneCheckMainRegistry;  ; class  SceneCheckRegistry;  ; class  SceneLoader;  Main class used to register scene file loaders. More...;  ; class  SceneLoaderFactory;  ; class  Simulation;  ; class  SolveVisitor;  ; class  SolveVisitorTask;  A task to provide to a task scheduler in which a solver solves. More...;  ; class  StateChangeVisitor;  ; class  Task;  ; class  TaskScheduler;  ; class  TaskSchedulerFactory;  ; class  TaskSchedulerRegistry;  ; class  TopologyChangeVisitor;  ; class  UpdateBoundingBoxVisitor;  ; class  UpdateContextVisitor;  ; class  UpdateSimulationContextVisitor;  ; class  UpdateVisualContextVisitor;  ; class  UpdateInternalDataVisitor;  ; class  UpdateLinksVisitor;  ; class  UpdateMappingEndEvent;  ; class  UpdateMappingVisitor;  ; class  VelocityThresholdVisitor;  ; class  Visitor;  Base class for visitors propagated recursively through the scenegraph. More...;  ; class  VisualVisitor;  ; class  VisualDrawVisitor;  ; class  VisualUpdateVisitor;  ; class  VisualInitVisitor;  ; class  VisualComputeBBoxVisitor;  ; class  VisualClearVisitor;  ; class  WorkerThread;  ; class  WriteStateVisitor;  ; class  XMLPrintVisitor;  . Typedefs; typedef sofa::core::sptr< Node > NodeSPtr;  ; typedef sofa::core::sptr< Simulation > SimulationSPtr;  . Enumerations; enum class  ForEachExecutionPolicy : bool { SEQUENTIAL = false; , PARALLEL; };  . Functions; void setSimulation (Simulation *s)=delete;  Set the (unique) simulation which controls the scene. More...;  ; SOFA_SIMULATION_CORE_API Simulation * getSimulation ();  ; void initThreadLocalData ();  ; template<class In",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:3301,Update,UpdateBoundingBoxVisitor,3301,api/master/sofa/html/namespacesofa_1_1simulation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html,8,['Update'],"['UpdateBoundingBoxVisitor', 'UpdateContextVisitor', 'UpdateInternalDataVisitor', 'UpdateLinksVisitor', 'UpdateMappingEndEvent', 'UpdateMappingVisitor', 'UpdateSimulationContextVisitor', 'UpdateVisualContextVisitor']"
Deployability,"ndow (bool);  ; virtual void currentTabChanged (int index);  ; virtual void popupOpenFileSelector ();  This open popup the file selection windows. More...;  ; virtual void fileReload ();  ; virtual void fileExit ();  ; virtual void helpAbout ();  ; virtual void editRecordDirectory ();  ; virtual void editGnuplotDirectory ();  ; virtual void showDocBrowser ();  ; virtual void showAbout ();  ; virtual void showPluginManager ();  ; virtual void showMouseManager ();  ; virtual void showVideoRecorderManager ();  ; virtual void showWindowDataGraph ();  ; virtual void toolsDockMoved ();  . Protected Slots; virtual void changeViewer ();  ; virtual void updateViewerList ();  ; virtual void onSceneGraphRefreshButtonClicked ();  Update the scenegraph and activate the automatic refresh. More...;  ; virtual void sceneGraphViewDirtynessChanged (bool isDirty);  Update the SceneGraph update button to reflect the dirtiness status. More...;  ; virtual void sceneGraphViewLockingChanged (bool isLocked);  Update the SceneGraph update button to reflect the locking status. More...;  ; void propertyDockMoved (Qt::DockWidgetArea a);  ; void appendToDataLogFile (QString);  ; void docBrowserVisibilityChanged (bool);  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::gui::common::BaseGUI; static std::string mGuiName = """";  ; static std::string configDirectoryPath = ""."";  ; static std::string screenshotDirectoryPath = ""."";  ; static const char * mProgramName = nullptr;  ; static ArgumentParser * mArgumentParser = nullptr;  . Attribute details. ◆ background. WDoubleLineEdit* sofa::gui::qt::RealGUI::background[3]. protected . ◆ backgroundImage. QLineEdit* sofa::gui::qt::RealGUI::backgroundImage. protected . ◆ currentTab. QWidget* sofa::gui::qt::RealGUI::currentTab. protected . ◆ fpsLabel. QLabel* sofa::gui::qt::RealGUI::fpsLabel. protected . ◆ gnuplotDirectory. std::string sofa::gui::qt::RealGUI::gnuplotDirectory. protected . ◆ informationOnPickCallBack. Information",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_real_g_u_i.html:8778,update,update,8778,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_real_g_u_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_real_g_u_i.html,3,"['Update', 'update']","['Update', 'update']"
Deployability,"ndpoints have id ID and if min end points are min and max are max. It checks only the field data. . ◆ endPointsOverlap(). bool sofa::component::collision::detection::algorithm::ISAPBox::endPointsOverlap ; (; const ISAPBox & ; other, . int ; axis . ); const. inline . Returns true if this overlaps other along the dimension axis. For the two following methods, end points are not used but real positions of end points of the field cube. . ◆ finalElement(). const core::CollisionElementIterator sofa::component::collision::detection::algorithm::ISAPBox::finalElement ; (; ); const. inline . ◆ init(). void sofa::component::collision::detection::algorithm::ISAPBox::init ; (; int ; boxID, . EndPointID ** ; endPts . ). inline . Inits d_min and d_max fiels with endPts. endPts is an one dimension array of EndPointID pointers. After this method, the first three end points are the mins in the dimension 0, 1, 2. The last three end points are the maxs in the dimension 0, 1, 2. Values and IDs of endPts are updated after this method. . ◆ max() [1/2]. EndPointID & sofa::component::collision::detection::algorithm::ISAPBox::max ; (; int ; dim). inline . ◆ max() [2/2]. const EndPointID & sofa::component::collision::detection::algorithm::ISAPBox::max ; (; int ; dim); const. inline . ◆ maxMoving(). bool sofa::component::collision::detection::algorithm::ISAPBox::maxMoving ; (; int ; axis, . double ; alarmDist . ); const. inline . ◆ min() [1/2]. EndPointID & sofa::component::collision::detection::algorithm::ISAPBox::min ; (; int ; dim). inline . ◆ min() [2/2]. const EndPointID & sofa::component::collision::detection::algorithm::ISAPBox::min ; (; int ; dim); const. inline . ◆ minMoving(). bool sofa::component::collision::detection::algorithm::ISAPBox::minMoving ; (; int ; axis, . double ; alarmDist . ); const. inline . ◆ moving() [1/2]. bool sofa::component::collision::detection::algorithm::ISAPBox::moving ; (; double ; alarmDist); const. inline . The same than the previous one except that this ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_i_s_a_p_box.html:4248,update,updated,4248,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_i_s_a_p_box.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_i_s_a_p_box.html,1,['update'],['updated']
Deployability,"ne ();  DisplacementMatrixEngine. More...;  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ;  Public Member Functions inherited from sofa::component::engine::transform::DisplacementTransformEngine< DataTypes, type::Mat4x4 >;  SOFA_CLASS (SOFA_TEMPLATE2(DisplacementTransformEngine, DataTypes, type::Mat4x4), sofa::core::DataEngine);  ;  DisplacementTransformEngine ();  DisplacementTransformEngine. More...;  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_displacement_matrix_engine.html:3285,update,update,3285,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_displacement_matrix_engine.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_displacement_matrix_engine.html,1,['update'],['update']
Deployability,"ne two transforms. If (*this) locates frame B (child) wrt frame A (parent) and if f2 locates frame C (child) wrt frame B (parent) then the result locates frame C wrt to Frame A. . ◆ operator*() [3/3]. template<class TReal > . template<class Real2 > . Transform sofa::type::Transform< TReal >::operator* ; (; Real2 ; a); const. inline . ◆ operator*=() [1/2]. template<class TReal > . Transform< TReal > & sofa::type::Transform< TReal >::operator*= ; (; const Transform< TReal > & ; f2). Combine two transforms. If (*this) locates frame B (child) wrt frame A (parent) and if f2 locates frame C (child) wrt frame B (parent) then the result locates frame C wrt to Frame A. . ◆ operator*=() [2/2]. template<class TReal > . template<class Real2 > . Transform& sofa::type::Transform< TReal >::operator*= ; (; Real2 ; a). inline . ◆ operator+=() [1/2]. template<class TReal > . Transform< TReal > & sofa::type::Transform< TReal >::operator+= ; (; const SpatialVector< TReal > & ; a). (this) *= Transform(v) Used for time integration. SHOULD WE RATHER APPLY (*this)=Transform(v)(*this) ??? . ◆ operator+=() [2/2]. template<class TReal > . Transform< TReal > & sofa::type::Transform< TReal >::operator+= ; (; const Transform< TReal > & ; a). ◆ operator/(). template<class TReal > . SpatialVector< TReal > sofa::type::Transform< TReal >::operator/ ; (; const SpatialVector< TReal > & ; sv); const. Project a spatial vector from parent to child (the inverse of operator *). This method computes (*this).inversed()*sv without inverting (*this). . ◆ printInternal(). template<class TReal > . void sofa::type::Transform< TReal >::printInternal ; (; std::ostream & ; out); const. Print the internal values (i.e. using Featherstone's conventions, see class documentation) . ◆ projectPoint(). template<class TReal > . auto sofa::type::Transform< TReal >::projectPoint ; (; const Vec & ; pointInChild); const. Project a point from child coordinates to parent coordinates. . ◆ projectVector(). template<class TReal > . T",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html:11004,integrat,integration,11004,api/master/sofa/html/classsofa_1_1type_1_1_transform.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_transform.html,2,['integrat'],['integration']
Deployability,"ne; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseProjectiveConstraintSet, objectmodel::BaseObject)sofa::core::behavior::BaseProjectiveConstraintSet; sofa::core::behavior::StateAccessor::SOFA_ABSTRACT_CLASS(StateAccessor, objectmodel::BaseObject)sofa::core::behavior::StateAccessor; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseProjectiveConstraintSet() overridesofa::core::behavior::BaseProjectiveConstraintSetinlineprotected; ~StateAccessor() override=defaultsofa::core::behavior::StateAccessorprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_projective_constraint_set-members.html:11721,update,updateInternal,11721,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_projective_constraint_set-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_projective_constraint_set-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"nearElasticityFEMForceField< DataTypes >.; Reimplemented in sofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedronFEMForceFieldAndMass< DataTypes >, sofa::component::solidmechanics::fem::nonuniform::HexahedronCompositeFEMForceFieldAndMass< DataTypes >, and sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >. ◆ initLarge(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >::initLarge ; (; sofa::Index ; i, . const Element & ; elem . ). protected . ◆ initPolar(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >::initPolar ; (; sofa::Index ; i, . const Element & ; elem . ). protected . ◆ initSmall(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >::initSmall ; (; sofa::Index ; i, . const Element & ; elem . ). protected . ◆ integrateStiffness(). template<class DataTypes > . HexahedronFEMForceField< DataTypes >::Mat33 sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >::integrateStiffness ; (; int ; signx0, . int ; signy0, . int ; signz0, . int ; signx1, . int ; signy1, . int ; signz1, . const Real ; u, . const Real ; v, . const Real ; w, . const Mat33 & ; J_1 . ). staticprotected . ◆ reinit(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >::reinit. overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject.; Reimplemented in sofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedronFEMForceFieldAndMass< DataTypes >, sofa::component::solidmechanics::fem::nonuniform::HexahedronCompositeFEMForceFieldAndMass< DataTypes >, and sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >. ◆",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field.html:40846,integrat,integrateStiffness,40846,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field.html,1,['integrat'],['integrateStiffness']
Deployability,"nearalgebra::BaseVector *);  ; virtual bool addJMInvJt (linearalgebra::BaseMatrix *result, linearalgebra::BaseMatrix *J, SReal fact);  ; virtual linearalgebra::BaseMatrix * getSystemBaseMatrix ();  Get the linear system matrix, or nullptr if this solver does not build it. More...;  ; virtual linearalgebra::BaseVector * getSystemRHBaseVector ();  Get the linear system right-hand term vector, or nullptr if this solver does not build it. More...;  ; virtual linearalgebra::BaseVector * getSystemLHBaseVector ();  Get the linear system left-hand term vector, or nullptr if this solver does not build it. More...;  ; virtual linearalgebra::BaseMatrix * getSystemInverseBaseMatrix ();  Get the linear system inverse matrix, or nullptr if this solver does not build it. More...;  ; virtual bool readFile (std::istream &);  Read the Matrix solver from a file. More...;  ; virtual bool writeFile (std::ostream &);  Read the Matrix solver from a file. More...;  ; virtual void freezeSystemMatrix ();  Ask the solver to no longer update the system matrix. More...;  ;  Public Member Functions inherited from sofa::core::behavior::BaseLinearSolver;  SOFA_ABSTRACT_CLASS (BaseLinearSolver, objectmodel::BaseObject);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, con",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_base_matrix_linear_solver.html:3899,update,update,3899,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_base_matrix_linear_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_base_matrix_linear_solver.html,2,['update'],['update']
Deployability,"needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; virtual void swapPostProcess (Index i1, Index i2);  ; virtual void removePostProcess (sofa::Index elemId);  ; virtual void addPostProcess (sofa::Index dataLastId);  ; virtual void updateLastIndex (Index posLastIndex, Index newGlobalId);  ;  Protected Member Functions inherited from sofa::core::topology::TopologyData< ElementType, VecT >; void linkToElementDataArray (sofa::core::topology::BaseMeshTopology::Point *);  ; void linkToElementDataArray (sofa::core::topology::BaseMeshTopology::Edge *);  ; void linkToElementDataArray (sofa::core::topology::BaseMeshTopology::Triangle *);  ; void linkToElementDataArray (sofa::core::topology::BaseMeshTopology::Quad *);  ; void linkToElementDataArray (sofa::core::topology::BaseMeshTopology::Tetrahedron *);  ; void linkToElementDataArray (sofa::core::topology::BaseMeshTopology::Hexahedron *);  ; void unlinkFromElementDataArray (sofa::core::topology::BaseMeshTopology::Point *);  Method to properly remove TopologyHandler. More...;  ; void unlinkFromElementDataArray (sofa::core::topology::BaseMeshTopology::Edge *);  ; void unlinkFromElementDataArray (sofa::core::topology::BaseMeshTopology::Triangle *);  ; void unlinkFromElementDataArray (sofa::core::topology::BaseMeshTopology::Quad *);  ; void unlinkFromElementDataArray (sofa::core::topology::BaseMeshTopology::Tetrahedron *);  ; void unlinkFromElementDataArray (sofa::core::topology::BaseMeshTopology::Hexahedron *);  ;  Protected Member Functions inherited from sof",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_subset_data.html:17000,update,updateLastIndex,17000,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_subset_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_subset_data.html,1,['update'],['updateLastIndex']
Deployability,"nent::collision::geometry::TriangleCollisionModel< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ resize(). template<class DataTypes > . void sofa::component::collision::geometry::TriangleCollisionModel< DataTypes >::resize ; (; sofa::Size ; s). overridevirtual . Set the number of elements. ; Reimplemented from sofa::core::CollisionModel. ◆ SOFA_CLASS(). template<class TDataTypes > . sofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >::SOFA_CLASS ; (; SOFA_TEMPLATE(TriangleCollisionModel< TDataTypes >, TDataTypes) ; , . core::CollisionModel ;  . ). ◆ updateFromTopology(). template<class DataTypes > . void sofa::component::collision::geometry::TriangleCollisionModel< DataTypes >::updateFromTopology. protectedvirtual . ◆ updateNormals(). template<class DataTypes > . void sofa::component::collision::geometry::TriangleCollisionModel< DataTypes >::updateNormals. protectedvirtual . ◆ velocity(). template<class DataTypes > . DataTypes::Deriv sofa::component::collision::geometry::TriangleCollisionModel< DataTypes >::velocity ; (; sofa::Index ; index); const. inline . Enum details. ◆ anonymous enum. template<class TDataTypes > . anonymous enum. EnumeratorNBARY . ◆ TriangleFlag. template<class TDataTypes > . enum sofa::component::collision::geometry::TriangleCollisionModel::TriangleFlag. EnumeratorFLAG_P1 Point 1 is attached to this triangle. . FLAG_P2 Point 2 is attached to this triangle. . FLAG_P3 Point 3 is attached to this triangle. . FLAG_E23 Edge 2-3 is attached to this triangle. . FLAG_E31 Edge 3-1 is attached to this triangle. . FLAG_E12 Edge 1-2 is attached to this triangle. . FLAG_BE23 Edge 2-3 is attached to this triangle and is a boundary. . FLAG_BE31 Edge 3-1 is attached to this triangle and is a boundary. . FLAG_BE12 Edge 1-2 is attached to this triangle and is a boundary. . FLAG_POINTS ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model.html:31791,update,updateNormals,31791,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model.html,1,['update'],['updateNormals']
Deployability,"nent::mapping::linear::crtp::CRTPLinearMapping< TMapping >inlinevirtual; localCoordsofa::component::mapping::linear::BeamLinearMapping< TIn, TOut >; Mat typedefsofa::component::mapping::linear::BeamLinearMapping< TIn, TOut >; matrixJsofa::component::mapping::linear::BeamLinearMapping< TIn, TOut >protected; MatrixType typedefsofa::component::mapping::linear::BeamLinearMapping< TIn, TOut >; MBloc typedefsofa::component::mapping::linear::BeamLinearMapping< TIn, TOut >; N enum valuesofa::component::mapping::linear::BeamLinearMapping< TIn, TOut >; NIn enum valuesofa::component::mapping::linear::BeamLinearMapping< TIn, TOut >; NOut enum valuesofa::component::mapping::linear::BeamLinearMapping< TIn, TOut >; Out typedefsofa::component::mapping::linear::BeamLinearMapping< TIn, TOut >; OutDataTypes typedefsofa::component::mapping::linear::BeamLinearMapping< TIn, TOut >; pointssofa::component::mapping::linear::BeamLinearMapping< TIn, TOut >protected; Real typedefsofa::component::mapping::linear::BeamLinearMapping< TIn, TOut >; rotatedPoints0sofa::component::mapping::linear::BeamLinearMapping< TIn, TOut >protected; rotatedPoints1sofa::component::mapping::linear::BeamLinearMapping< TIn, TOut >protected; SOFA_CLASS(SOFA_TEMPLATE2(BeamLinearMapping, TIn, TOut), SOFA_TEMPLATE2(LinearMapping, TIn, TOut))sofa::component::mapping::linear::BeamLinearMapping< TIn, TOut >; sofa::component::mapping::linear::crtp::CRTPLinearMapping::SOFA_CLASS(SOFA_TEMPLATE(CRTPLinearMapping, TMapping), TMapping)sofa::component::mapping::linear::crtp::CRTPLinearMapping< TMapping >; updateJsofa::component::mapping::linear::BeamLinearMapping< TIn, TOut >protected; VecCoord typedefsofa::component::mapping::linear::BeamLinearMapping< TIn, TOut >; VecDeriv typedefsofa::component::mapping::linear::BeamLinearMapping< TIn, TOut >; Vector typedefsofa::component::mapping::linear::BeamLinearMapping< TIn, TOut >; ~BeamLinearMapping()sofa::component::mapping::linear::BeamLinearMapping< TIn, TOut >inlineprotectedvirtual.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_beam_linear_mapping-members.html:3672,update,updateJsofa,3672,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_beam_linear_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_beam_linear_mapping-members.html,1,['update'],['updateJsofa']
Deployability,"nent::shader::OglUIntAttribute Class Reference . #include <OglAttribute.h>. Inheritance diagram for sofa::gl::component::shader::OglUIntAttribute:. [legend]; Detailed Description; UNSIGNED INT ATTRIBUTE . Public Member Functions;  SOFA_CLASS (OglUIntAttribute, SOFA_TEMPLATE3(OglAttribute, 1, GL_UNSIGNED_INT, unsigned int));  ;  OglUIntAttribute ();  ; virtual ~OglUIntAttribute ();  ;  Public Member Functions inherited from sofa::gl::component::shader::OglAttribute< 1, GL_UNSIGNED_INT, unsigned int >;  SOFA_CLASS2 (SOFA_TEMPLATE3(OglAttribute, size, type, unsigned int), core::visual::VisualModel, OglShaderElement);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void doInitVisual (const core::visual::VisualParams *vparams) override;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdateVisual (const core::visual::VisualParams *vparams) override;  if attributes are not static, update the buffer More...;  ; type::vector< unsigned int > * beginEdit ();  ; void endEdit ();  ; const type::vector< unsigned int > & getValue () const;  ; void setValue (const type::vector< unsigned int > &value);  ; void enable ();  ; void disable ();  ; void bwdDraw (core::visual::VisualParams *) override;  Called after objects in the current branch are displayed. More...;  ; void fwdDraw (core::visual::VisualParams *) override;  Called before objects in the current branch are displayed. More...;  ; void setUsage (unsigned int usage);  ; ShaderElementType getSEType () const override;  Returns the type of shader element (texture, macro, variable, or attribute) More...;  ; const core::objectmodel::BaseData * getSEValue () const override;  ; core::objectmodel::BaseData * getSEValue () override;  ; int getSESizePerVertex () override;  ; int getSETotalSize () override;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_u_int_attribute.html:1258,update,update,1258,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_u_int_attribute.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_u_int_attribute.html,2,['update'],['update']
Deployability,"nent::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >.; Reimplemented in sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >.; Reimplemented in sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). overridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force fie",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field.html:26710,update,update,26710,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field.html,1,['update'],['update']
Deployability,"nent::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >.; Reimplemented in sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >.; Reimplemented in sofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedronFEMForceFieldAndMass< DataTypes >, and sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). overridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field m",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field.html:33186,update,update,33186,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field.html,1,['update'],['update']
Deployability,"nent::topology::container::dynamic::PointSetGeometryAlgorithms::SOFA_CLASS(SOFA_TEMPLATE(PointSetGeometryAlgorithms, DataTypes), core::topology::GeometryAlgorithms)sofa::component::topology::container::dynamic::PointSetGeometryAlgorithms< DataTypes >; sofa::core::topology::GeometryAlgorithms::SOFA_CLASS(GeometryAlgorithms, BaseTopologyObject)sofa::core::topology::GeometryAlgorithms; sofa::core::topology::BaseTopologyObject::SOFA_CLASS(BaseTopologyObject, core::objectmodel::BaseObject)sofa::core::topology::BaseTopologyObject; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; topoContainersofa::component::topology::container::dynamic::DynamicSparseGridGeometryAlgorithms< DataTypes >protected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3d typedefsofa::component::topology::container::dynamic::EdgeSetGeometryAlgorithms< DataTypes >; VecCoord typedefsofa::component::topology::container::dynamic::DynamicSparseGridGeometryAlgorithms< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::topology::container::dynamic::EdgeSetGeometryAlgorithms< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; writeMSHfile(const char *filename) constsofa::component::topology::container::dynamic::HexahedronSetGeometryAlgorithms< DataTypes >inline; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseTopologyObject() overridesof",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_geometry_algorithms-members.html:31755,update,updateLinks,31755,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_geometry_algorithms-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_geometry_algorithms-members.html,1,['update'],['updateLinks']
Deployability,"nent; ; SOFA - Topic: [SOLVED] Question about variable meaning in collision component. /questionns-about-installation; ; SOFA - Topic: Questionns about installation. /question-on-tetrahedronhyperelasticityfemforcefield; ; SOFA - Topic: [SOLVED] Question on TetrahedronHyperelasticityFEMForceField. /questions-about-carvingmanager-omnisofa; . /feed; ; [SOLVED] Questions about CarvingManager & OmniSOFA – SOFA. /page; . /2; ; SOFA - Topic: [SOLVED] Questions about CarvingManager & OmniSOFA. /5; ; SOFA - Topic: [SOLVED] Questions about CarvingManager & OmniSOFA. SOFA - Topic: [SOLVED] Questions about CarvingManager & OmniSOFA. /questions-about-setting-up-qtcreator; ; SOFA - Topic: [SOLVED] Questions about ""Setting up QtCreator"". /questions-about-sofa; . /feed; ; [SOLVED] What is SOFA dedicated to? How to use it as physics engine? – SOFA. SOFA - Topic: [SOLVED] What is SOFA dedicated to? How to use it as physics engine?. /questions-regarding-the-installation-of-sofapython3-plugin; ; SOFA - Topic: [SOLVED] Questions regarding the installation of SofaPython3 plugin. /random-linear-force-field; ; SOFA - Topic: [SOLVED] Random Linear Force Field. /rayleigh-numerical-damping; . /feed; ; Rayleigh/Numerical damping – SOFA. SOFA - Topic: Rayleigh/Numerical damping. /read-data-from-external-file; ; SOFA - Topic: [SOLVED] Read data from external file. /reading-indices-of-fixedconstraint-from-an-ascii-file; ; SOFA - Topic: [SOLVED] Reading indices of FixedConstraint from an ascii file. /reading-stl-file-vertices-from-my-own-component; ; SOFA - Topic: [SOLVED] reading STL file vertices from my own component. /realistic-behavior-of-a-liver-and-its-skin; ; SOFA - Topic: [SOLVED] Realistic behavior of a liver and its skin. /realtime-fea-visualization-with-ros; ; SOFA - Topic: Realtime FEA visualization with ROS. /receive-realtime-force-feedback-in-batch-mode; ; SOFA - Topic: Receive realtime force feedback in batch mode. /recommendation-of-the-versions-for-sofa-dependencies; ; SOFA - Top",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:374716,install,installation-of-,374716,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['install'],"['installation', 'installation-of-']"
Deployability,"neoverrideprotectedvirtual . Implements sofa::core::collision::CollisionAlgorithm. ◆ createContacts(). virtual void sofa::core::collision::ContactManager::createContacts ; (; const DetectionOutputMap & ; outputs). pure virtual . outputsVec fixes the reproducibility problems by storing contacts in the collision detection saved order if not given, it is still working but with eventual reproducibility problems ; Implemented in sofa::component::collision::response::contact::CollisionResponse. ◆ getContactResponse(). virtual std::string sofa::core::collision::ContactManager::getContactResponse ; (; core::CollisionModel * ; model1, . core::CollisionModel * ; model2 . ). pure virtual . Implemented in sofa::component::collision::response::contact::RuleBasedContactManager, and sofa::component::collision::response::contact::CollisionResponse. ◆ getContacts(). virtual const ContactVector& sofa::core::collision::ContactManager::getContacts ; (; ). inlinevirtual . ◆ getIntersectionMethod(). Intersection* sofa::core::collision::ContactManager::getIntersectionMethod ; (; ); const. inline . ◆ removeContacts(). virtual void sofa::core::collision::ContactManager::removeContacts ; (; const ContactVector & ; c). inlinevirtual . virtual methods used for cleaning the pipeline after a dynamic graph node deletion. ; Contacts can be attached to a deleted node and their deletion is a problem for the pipeline. Parameters. cis the list of deleted contacts. . Reimplemented in sofa::component::collision::response::contact::CollisionResponse. ◆ setIntersectionMethod(). virtual void sofa::core::collision::ContactManager::setIntersectionMethod ; (; Intersection * ; v). inlinevirtual . virtual because subclasses might do precomputations based on intersection algorithms . ◆ SOFA_ABSTRACT_CLASS(). sofa::core::collision::ContactManager::SOFA_ABSTRACT_CLASS ; (; ContactManager ; , . CollisionAlgorithm ;  . ). sofacorecollisionContactManager; Generated on Mon Nov 11 2024 03:15:47 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_contact_manager.html:16712,pipeline,pipeline,16712,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_contact_manager.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_contact_manager.html,2,['pipeline'],['pipeline']
Deployability,"ner &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; getCategoryName() const overridesofa::simulation::UpdateMappingVisitorinlinevirtual; getClassName() const overridesofa::simulation::UpdateMappingVisitorinlinevirtual; getInfos() constsofa::simulation::Visitorinlinevirtual; isThreadSafe() const overridesofa::simulation::UpdateMappingVisitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processMapping(simulation::Node *node, core::BaseMapping *obj)sofa::simulation::UpdateMappingVisitor; processMechanicalMapping(simulation::Node *, core::BaseMapping *obj)sofa::simulation::UpdateMappingVisitor; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::UpdateMappingVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor-members.html:3045,Update,UpdateMappingVisitorvirtual,3045,api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor-members.html,1,['Update'],['UpdateMappingVisitorvirtual']
Deployability,ner::constant::CubeTopologyprotected; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; Tetra typedefsofa::core::topology::Topology; TetrahedraAroundEdge typedefsofa::core::topology::BaseMeshTopology; TetrahedraAroundTriangle typedefsofa::core::topology::BaseMeshTopology; TetrahedraAroundVertex typedefsofa::core::topology::BaseMeshTopology; Tetrahedron typedefsofa::core::topology::Topology; TetrahedronID typedefsofa::core::topology::Topology; TetraID typedefsofa::core::topology::Topology; Topology()sofa::core::topology::Topologyinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; updateEdges()sofa::component::topology::container::constant::CubeTopologyprotected; updateHexahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updatePoints()sofa::component::topology::container::constant::CubeTopologyprotected; updateQuads()sofa::component::topology::container::constant::CubeTopologyprotected; updateTetrahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; UV typedefsofa::component::topology::container::constant::MeshTopology; UVID typedefsofa::component::topology::container::constant::MeshTopology; validHexahedrasofa::component::topology::container::constant::MeshTopologyprotected; validTetrahedrasofa::component::topology::container::constant::MeshTopologyprotected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseOb,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_cube_topology-members.html:37922,update,updateEdges,37922,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_cube_topology-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_cube_topology-members.html,2,['update'],['updateEdges']
Deployability,"nestatic; Size typedefsofa::core::CollisionModel; sizesofa::core::CollisionModelprotected; SOFA_ABSTRACT_CLASS(CollisionModel, objectmodel::BaseObject)sofa::core::CollisionModel; SOFA_CLASS(TetrahedronCollisionModel, core::CollisionModel)sofa::component::collision::geometry::TetrahedronCollisionModel; sofa::core::CollisionModel::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPHERE_TYPE enum valuesofa::core::CollisionModel; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; tetrasofa::component::collision::geometry::TetrahedronCollisionModelprotected; Tetrahedron classsofa::component::collision::geometry::TetrahedronCollisionModelfriend; TETRAHEDRON_TYPE enum valuesofa::core::CollisionModel; TetrahedronCollisionModel()sofa::component::collision::geometry::TetrahedronCollisionModelprotected; Topology typedefsofa::core::CollisionModel; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; TRIANGLE_TYPE enum valuesofa::core::CollisionModel; updateFromTopology()sofa::component::collision::geometry::TetrahedronCollisionModelprotectedvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; userDatasofa::core::CollisionModelprotected; VecCoord typedefsofa::component::collision::geometry::TetrahedronCollisionModel; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::collision::geometry::TetrahedronCollisionModel; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~CollisionModel() overridesofa::core::CollisionModelinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_tetrahedron_collision_model-members.html:16173,update,updateFromTopology,16173,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_tetrahedron_collision_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_tetrahedron_collision_model-members.html,3,['update'],"['updateFromTopology', 'updateInternal', 'updateLinks']"
Deployability,"nformation &ei, const core::topology::BaseMeshTopology::Edge &, const sofa::type::vector< Index > &, const sofa::type::vector< SReal > &);  ; void applyTriangleCreation (const type::vector< Index > &triangleAdded, const type::vector< core::topology::BaseMeshTopology::Triangle > &, const type::vector< type::vector< Index > > &, const type::vector< type::vector< SReal > > &);  ; void applyTriangleDestruction (const type::vector< Index > &triangleRemoved);  ; void applyPointDestruction (const type::vector< Index > &pointIndices);  Method to update. More...;  ; void applyPointRenumbering (const type::vector< Index > &pointToRenumber);  Method to update. More...;  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, Ba",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html:18813,update,update,18813,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html,1,['update'],['update']
Deployability,"ng &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; MechanicalState< DataTypes > * getMState ();  ; const MechanicalState< DataTypes > * getMState () const;  . Protected Member Functions;  FixedPlaneProjectiveConstraint ();  ;  ~FixedPlaneProjectiveConstraint ();  ; bool isPointInPlane (const Coord &p) const;  ;  Protected Member Functions inherited from sofa::core::behavior::ProjectiveConstraintSet< DataTypes >;  ProjectiveConstraintSet (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ProjectiveConstraintSet () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseProjectiveConstraintSet;  BaseProjectiveConstraintSet ();  ;  ~BaseProjectiveConstraintSet () override;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inher",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_plane_projective_constraint.html:17379,update,update,17379,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_plane_projective_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_plane_projective_constraint.html,1,['update'],['update']
Deployability,"ng &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; MechanicalState< DataTypes > * getMState ();  ; const MechanicalState< DataTypes > * getMState () const;  . Protected Member Functions;  TriangularQuadraticSpringsForceField ();  ; virtual ~TriangularQuadraticSpringsForceField ();  ; sofa::core::topology::EdgeData< sofa::type::vector< EdgeRestInformation > > & getEdgeInfo ();  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inher",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_quadratic_springs_force_field.html:17400,update,update,17400,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_quadratic_springs_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_quadratic_springs_force_field.html,1,['update'],['update']
Deployability,"ng &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(ContactManager, CollisionAlgorithm)sofa::core::collision::ContactManager; sofa::core::collision::CollisionAlgorithm::SOFA_ABSTRACT_CLASS(CollisionAlgorithm, objectmodel::BaseObject)sofa::core::collision::CollisionAlgorithm; SOFA_CLASS(CollisionResponse, sofa::core::collision::ContactManager)sofa::component::collision::response::contact::CollisionResponse; sofa::core::collision::ContactManager::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storedContactMapsofa::component::collision::response::contact::CollisionResponseprotected; storedContactssofa::core::collision::ContactManagerprotected; storedIntersectionMethodsofa::core::collision::ContactManagerprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~CollisionResponse() override=defaultsofa::component::collision::response::contact::CollisionResponseprotected; ~ContactManager() overridesofa::core::collision::ContactManagerinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_collision_response-members.html:13673,update,updateInternal,13673,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_collision_response-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_collision_response-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"ng > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setTo(BaseState *to)sofa::core::BaseMappingvirtual; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE3(Multi2Mapping, TIn1, TIn2, TOut), BaseMapping)sofa::core::Multi2Mapping< TIn1, TIn2, TOut >; sofa::core::BaseMapping::SOFA_ABSTRACT_CLASS(BaseMapping, objectmodel::BaseObject)sofa::core::BaseMapping; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; testMechanicalState(BaseState *state)sofa::core::BaseMappingprotected; toModelssofa::core::Multi2Mapping< TIn1, TIn2, TOut >protected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateK(const MechanicalParams *, ConstMultiVecDerivId)sofa::core::BaseMappinginlinevirtual; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecFromModels1 typedefsofa::core::Multi2Mapping< TIn1, TIn2, TOut >; VecFromModels2 typedefsofa::core::Multi2Mapping< TIn1, TIn2, TOut >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecToModels typedefsofa::core::Multi2Mapping< TIn1, TIn2, TOut >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseMapping() overridesofa::core::BaseMappingprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~Multi2Mapping() overridesofa::core::Multi2Mapping< TIn1, TIn2, TOut >inlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_multi2_mapping-members.html:18888,update,updateK,18888,api/master/sofa/html/classsofa_1_1core_1_1_multi2_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_multi2_mapping-members.html,2,['update'],"['updateK', 'updateLinks']"
Deployability,"ng mass matrix coefficient when a new Quad is created. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when QUADSADDED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a Quad is removed. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when QUADSREMOVED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a new Tetrahedron is created. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when TETRAHEDRAADDED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a Tetrahedron is removed. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when TETRAHEDRAREMOVED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a new Hexahedron is created. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when HEXAHEDRAADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Hexahedron is removed. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when HEXAHEDRAREMOVED event is fired. . l_topology . Constructor details. ◆ MeshMatrixMass(). template<class DataTypes , class GeometricalTypes > . sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::MeshMatrixMass. protected . ◆ ~MeshMatrixMass(). template<class DataTypes , class GeometricalTypes > . sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::~MeshMatrixMass. overrideprotected . Function details. ◆ accFromF(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::accFromF ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; a, . const DataVecDeriv & ; f . ). overridevirtual . Reimplemented from sofa::core::behavior::Mass< DataTypes >. ◆ addForce(). template<class DataTypes , class GeometricalTyp",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html:34453,update,update,34453,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,1,['update'],['update']
Deployability,"ng, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ PipelineImpl(). sofa::simulation::PipelineImpl::PipelineImpl ; (; ). protected . ◆ ~PipelineImpl(). sofa::simulation::PipelineImpl::~PipelineImpl ; (; ). overrideprotected . Function details. ◆ computeCollisionDetection(). void sofa::simulation::PipelineImpl::computeCollisionDetection ; (; ). overridevirtual . Detect new collisions. Note that this step must not modify the simulation graph. ; Implements sofa::core::collision::Pipeline. ◆ computeCollisionReset(). void sofa::simulation::PipelineImpl::computeCollisionReset ; (; ). overridevirtual . Remove collision response from last step. ; Implements sofa::core::collision::Pipeline. ◆ computeCollisionResponse(). void sofa::simulation::PipelineImpl::computeCollisionResponse ; (; ). overridevirtual . Add collision response in the simulation graph. ; Implements sofa::core::collision::Pipeline. ◆ init(). void sofa::simulation::PipelineImpl::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, durin",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:14740,Pipeline,PipelineImpl,14740,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,1,['Pipeline'],['PipelineImpl']
Deployability,"ng, topology::container::dynamic::QuadSetTopologyModifier, BaseLink::FLAG_STOREPATH | BaseLink::FLAG_STRONGLINK> sofa::component::topology::mapping::Edge2QuadTopologicalMapping::l_toQuadModifier. Output modifier handling Quads. . Constructor details. ◆ Edge2QuadTopologicalMapping(). sofa::component::topology::mapping::Edge2QuadTopologicalMapping::Edge2QuadTopologicalMapping ; (; ). protected . Constructor. ; Parameters. fromthe topology issuing TopologyChange objects (the ""source""). ; tothe topology for which the TopologyChange objects must be translated (the ""target""). . ◆ ~Edge2QuadTopologicalMapping(). sofa::component::topology::mapping::Edge2QuadTopologicalMapping::~Edge2QuadTopologicalMapping ; (; ). inlineoverrideprotected . Destructor. ; Does nothing. . Function details. ◆ getFromIndex(). Index sofa::component::topology::mapping::Edge2QuadTopologicalMapping::getFromIndex ; (; Index ; ind). overridevirtual . Reimplemented from sofa::core::topology::TopologicalMapping. ◆ init(). void sofa::component::topology::mapping::Edge2QuadTopologicalMapping::init ; (; void ; ). overridevirtual . Initializes the target BaseTopology from the source BaseTopology. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_CLASS(). sofa::component::topology::mapping::Edge2QuadTopologicalMapping::SOFA_CLASS ; (; Edge2QuadTopologicalMapping ; , . sofa::core::topology::TopologicalMapping ;  . ). ◆ updateTopologicalMappingTopDown(). void sofa::component::topology::mapping::Edge2QuadTopologicalMapping::updateTopologicalMappingTopDown ; (; ). overridevirtual . Translates the TopologyChange objects from the source to the target. ; Translates each of the TopologyChange objects waiting in the source list so that they have a meaning and reflect the effects of the first topology changes on the second topology. ; Implements sofa::core::topology::TopologicalMapping. sofacomponenttopologymappingEdge2QuadTopologicalMapping; Generated on Mon Nov 11 2024 03:10:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_edge2_quad_topological_mapping.html:20269,update,updateTopologicalMappingTopDown,20269,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_edge2_quad_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_edge2_quad_topological_mapping.html,2,['update'],['updateTopologicalMappingTopDown']
Deployability,ng-examples-on-sofa_v20-12-02_defrost_linux; . /embed; ; SOFA - Topic: Issues with running examples on SOFA_v20.12.02_Defrost_Linux. SOFA - Topic: Issues with running examples on SOFA_v20.12.02_Defrost_Linux. /issue-using-bilateralinteractionconstraint; . /feed; ; Issue using BilateralInteractionConstraint – SOFA. SOFA - Topic: Issue using BilateralInteractionConstraint. /issue-when-changing-object-position-via-python-scene; . /embed; ; SOFA - Topic: Issue when changing object position via python scene. SOFA - Topic: Issue when changing object position via python scene. /issue-while-exporting-tetrahedron-mesh-generated-from-polyhedron; ; SOFA - Topic: [SOLVED] Issue while exporting tetrahedron mesh generated from polyhedron. /issue-with-cuda-examples; ; SOFA - Topic: Issue with CUDA examples. /issue-with-initializing-stiffspringforcefied; ; SOFA - Topic: [SOLVED] Issue with initializing StiffSpringForceFied. /issue-with-the-update-of-the-stiffness-variable-in-stiffspringff; ; SOFA - Topic: [SOLVED] Issue with the update of the stiffness variable in StiffSpringFF. /is-there-any-method-to-apply-inital-stress-state-in-sofa; ; SOFA - Topic: Is there any method to apply inital stress state in SOFA?. /is-there-any-plugin-for-leapmotion; . /feed; ; [SOLVED] Is there any plugin for LeapMotion? – SOFA. SOFA - Topic: [SOLVED] Is there any plugin for LeapMotion?. /is-trianglesettopologymodifierremovetrianglespostprocessing-empty; . /page; . /10; ; SOFA - Topic: [SOLVED] Is TriangleSetTopologyModifier::removeTrianglesPostProcessing empty ?. /3; ; SOFA - Topic: [SOLVED] Is TriangleSetTopologyModifier::removeTrianglesPostProcessing empty ?. /7; ; SOFA - Topic: [SOLVED] Is TriangleSetTopologyModifier::removeTrianglesPostProcessing empty ?. SOFA - Topic: [SOLVED] Is TriangleSetTopologyModifier::removeTrianglesPostProcessing empty ?. /i-want-to-study-all-about-sofa; . /feed; ; [SOLVED] I want to study about SOFA – SOFA. SOFA - Topic: [SOLVED] I want to study about SOFA. /join-our-li,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:338279,update,update-of-the-stiffness-variable-in-stiffspringff,338279,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['update'],"['update', 'update-of-the-stiffness-variable-in-stiffspringff']"
Deployability,"ng::linear::BarycentricMapperTetrahedronSetTopologyRigid< In, Out >::d_map. protected . mapper data . ◆ d_mapOrient. template<class In , class Out > . core::topology::PointData< sofa::type::vector<MappingOrientData > > sofa::component::mapping::linear::BarycentricMapperTetrahedronSetTopologyRigid< In, Out >::d_mapOrient. protected . mapper data for mapped frames . ◆ map. template<class In , class Out > . sofa::core::objectmodel::RenamedData<sofa::type::vector<MappingData > > sofa::component::mapping::linear::BarycentricMapperTetrahedronSetTopologyRigid< In, Out >::map. protected . ◆ mapOrient. template<class In , class Out > . sofa::core::objectmodel::RenamedData<sofa::type::vector<MappingOrientData > > sofa::component::mapping::linear::BarycentricMapperTetrahedronSetTopologyRigid< In, Out >::mapOrient. protected . ◆ matrixJ. template<class In , class Out > . MatrixType* sofa::component::mapping::linear::BarycentricMapperTetrahedronSetTopologyRigid< In, Out >::matrixJ. protected . ◆ updateJ. template<class In , class Out > . bool sofa::component::mapping::linear::BarycentricMapperTetrahedronSetTopologyRigid< In, Out >::updateJ. protected . Constructor details. ◆ BarycentricMapperTetrahedronSetTopologyRigid(). template<class In , class Out > . sofa::component::mapping::linear::BarycentricMapperTetrahedronSetTopologyRigid< In, Out >::BarycentricMapperTetrahedronSetTopologyRigid ; (; core::topology::BaseMeshTopology * ; fromTopology, . core::topology::BaseMeshTopology * ; _toTopology . ). protected . TEMP. . ◆ ~BarycentricMapperTetrahedronSetTopologyRigid(). template<class In , class Out > . virtual sofa::component::mapping::linear::BarycentricMapperTetrahedronSetTopologyRigid< In, Out >::~BarycentricMapperTetrahedronSetTopologyRigid ; (; ). inlineprotectedvirtual . Function details. ◆ addPointInTetra(). template<class In , class Out > . BarycentricMapperTetrahedronSetTopologyRigid< In, Out >::Index sofa::component::mapping::linear::BarycentricMapperTetrahedronSetTopolo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_barycentric_mapper_tetrahedron_set_topology_rigid.html:4559,update,updateJ,4559,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_barycentric_mapper_tetrahedron_set_topology_rigid.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_barycentric_mapper_tetrahedron_set_topology_rigid.html,1,['update'],['updateJ']
Deployability,"ngine_test;  Helper for writing DataEngine tests. More...;  ; struct  MultiMapping_test;  Base class for the MultiMapping tests, directly adapted from Mapping_test. More...;  ; struct  AffinePatch_sofa_test;  ; struct  CylinderTractionStruct;  Structure which contains the nodes and the pointers useful for the cylindertraction test. More...;  ; struct  LinearElasticity_test;  ; struct  ForceField_test;  Helper for writing ForceField tests. The constructor creates a root node and adds it a State and a ForceField (of the parameter type of this template class). Pointers to node, state and force are available. Deriving the ForceField test from this class makes it easy to write: just call function run_test with positions, velocities and the corresponding expected forces. This function automatically checks not only the forces (function addForce), but also the stiffness (methods addDForce and addKToMatrix), using finite differences. More...;  ; struct  PatchTestStruct;  Structure which contains the nodes and the pointers useful for the patch test. More...;  ; class  TemplateAliasTest;  ; struct  AdvancedTimerTest;  ; struct  DefaultAnimationLoop_test;  . Typedefs; typedef Types< Vec3Types > DataTypes;  ; typedef component::statecontainer::MechanicalObject< defaulttype::Vec3Types > MechanicalObject3;  ; template<typename DataTypes > ; using Coord_t = typename DataTypes::Coord;  ; template<typename DataTypes > ; using Real_t = typename DataTypes::Real;  ; template<typename DataTypes > ; using VecReal_t = typename DataTypes::VecReal;  ; template<typename DataTypes > ; using Deriv_t = typename DataTypes::Deriv;  ; template<typename DataTypes > ; using MatrixDeriv_t = typename DataTypes::MatrixDeriv;  ; template<typename DataTypes > ; using VecCoord_t = typename DataTypes::VecCoord;  ; template<typename DataTypes > ; using VecDeriv_t = typename DataTypes::VecDeriv;  ; template<typename DataTypes > ; using DataVecCoord_t = core::objectmodel::Data< VecCoord_t< DataTypes > >;  ; tem",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:1572,patch,patch,1572,api/master/sofa/html/namespacesofa.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html,3,"['Patch', 'patch']","['PatchTestStruct', 'patch']"
Deployability,"ngleLink< SingleStateAccessor< DataTypes >, MechanicalState< DataTypes >, BaseLink::FLAG_STRONGLINK > mstate;  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(PlaneForceField, DataTypes), SOFA_TEMPLATE(core::behavior::ForceField, DataTypes));  ; void setPlane (const Deriv &normal, Real d);  ; void setMState (core::behavior::MechanicalState< DataTypes > *mstate);  ; void setStiffness (Real stiff);  ; Real getStiffness () const;  ; void setDamping (Real damp);  ; Real getDamping () const;  ; void setDrawColor (const sofa::type::RGBAColor &newvalue);  ; const sofa::type::RGBAColor & getDrawColor () const;  ; void rotate (Deriv axe, Real angle);  ; void init () override;  Inherited from ForceField. More...;  ; void addForce (const core::MechanicalParams *mparams, DataVecDeriv &f, const DataVecCoord &x, const DataVecDeriv &v) override;  ; void addDForce (const core::MechanicalParams *mparams, DataVecDeriv &df, const DataVecDeriv &dx) override;  ; SReal getPotentialEnergy (const core::MechanicalParams *, const DataVecCoord &) const override;  ; virtual void updateStiffness (const VecCoord &x);  ; void addKToMatrix (const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix) override;  Compute the system matrix corresponding to . More...;  ; void buildStiffnessMatrix (sofa::core::behavior::StiffnessMatrix *matrix) override;  ; void buildDampingMatrix (core::behavior::DampingMatrix *) final;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; void drawPlane (const core::visual::VisualParams *, float size=0.0f);  ; void computeBBox (const core::ExecParams *, bool onlyVisible=false) override;  ;  Public Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  SOFA_CLASS2 (SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes));  ; void addForce (const MechanicalParams *mparams, Mul",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_plane_force_field.html:5129,update,updateStiffness,5129,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_plane_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_plane_force_field.html,1,['update'],['updateStiffness']
Deployability,"ngleStateAccessor::SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(ParabolicProjectiveConstraint, DataTypes), SOFA_TEMPLATE(core::behavior::ProjectiveConstraintSet, DataTypes))sofa::component::constraint::projective::ParabolicProjectiveConstraint< DataTypes >; sofa::core::behavior::ProjectiveConstraintSet::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ProjectiveConstraintSet, DataTypes), BaseProjectiveConstraintSet, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ProjectiveConstraintSet< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3R typedefsofa::component::constraint::projective::ParabolicProjectiveConstraint< DataTypes >; VecCoord typedefsofa::component::constraint::projective::ParabolicProjectiveConstraint< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::constraint::projective::ParabolicProjectiveConstraint< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseProjectiveConstraintSet() overridesofa::core::behavior::BaseProjectiveConstraintSetinlineprotected; ~ParabolicProjectiveConstraint()sofa::component::constraint::projective::ParabolicP",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_parabolic_projective_constraint-members.html:19362,update,updateLinks,19362,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_parabolic_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_parabolic_projective_constraint-members.html,1,['update'],['updateLinks']
Deployability,"ngs have only one parent, however Multimappings have several parents. For efficiency concerns, please return pointers to defaulttype::EigenBaseSparseMatrix ; Reimplemented from sofa::core::BaseMapping. ◆ getK(). template<class TIn , class TOut > . const linearalgebra::BaseMatrix * sofa::component::mapping::nonlinear::DistanceMultiMapping< TIn, TOut >::getK. overridevirtual . Returns a pointer to the geometric stiffness matrix. This is the equivalent of applyDJT, for matrix assembly instead of matrix-vector product. This matrix is associated with the parent DOFs. It is a square matrix with a size of the total number of parent DOFs. For efficiency concerns, please return a pointer to a defaulttype::EigenBaseSparseMatrix ; Reimplemented from sofa::core::BaseMapping. ◆ init(). template<class TIn , class TOut > . void sofa::component::mapping::nonlinear::DistanceMultiMapping< TIn, TOut >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_CLASS(). template<class TIn , class TOut > . sofa::component::mapping::nonlinear::DistanceMultiMapping< TIn, TOut >::SOFA_CLASS ; (; SOFA_TEMPLATE2(DistanceMultiMapping< TIn, TOut >, TIn, TOut) ; , . SOFA_TEMPLATE2(core::MultiMapping, TIn, TOut) ;  . ). ◆ updateK(). template<class TIn , class TOut > . void sofa::component::mapping::nonlinear::DistanceMultiMapping< TIn, TOut >::updateK ; (; const core::MechanicalParams * ; , . core::ConstMultiVecDerivId ;  . ). overridevirtual . Compute the geometric stiffness matrix based on given child forces K = dJ^T * outForce Default implementation does nothing, corresponding to a linear mapping. ; Reimplemented from sofa::core::BaseMapping. Enum details. ◆ anonymous enum. template<class TIn , class TOut > . anonymous enum. EnumeratorNin ; Nout . sofacomponentmappingnonlinearDistanceMultiMapping; Generated on Mon Nov 11 2024 02:51:18 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_distance_multi_mapping.html:37699,update,updateK,37699,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_distance_multi_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_distance_multi_mapping.html,2,['update'],['updateK']
Deployability,"ngular FEM Methods – SOFA. /page; . /3; ; SOFA - Topic: [SOLVED] Triangular FEM Methods. /5; ; SOFA - Topic: [SOLVED] Triangular FEM Methods. SOFA - Topic: [SOLVED] Triangular FEM Methods. /turning-off-collisions-between-a-set-of-objects; . /feed; ; [SOLVED] Turning off collisions between a set of objects? – SOFA. /page; . /16; ; SOFA - Topic: [SOLVED] Turning off collisions between a set of objects?. /5; ; SOFA - Topic: [SOLVED] Turning off collisions between a set of objects?. SOFA - Topic: [SOLVED] Turning off collisions between a set of objects?. /tutorial-example-firststeps-step3-pyscn; ; SOFA - Topic: Tutorial Example FirstSteps (step3.pyscn). /two-way-force-propagation; ; SOFA - Topic: [SOLVED] Two-way force propagation. /ubuntu-14-04-qtcreator; . /feed; ; [SOLVED] Ubuntu 14.04 + QtCreator – SOFA. SOFA - Topic: [SOLVED] Ubuntu 14.04 + QtCreator. /ubuntu-18-sofa-20-kernel-error; ; SOFA - Topic: [SOLVED] Ubuntu 18 – Sofa 20 – Linking CXX Shared Library Errors. /ubuntu-software-center-to-install-sofa; . /feed; ; [SOLVED] Ubuntu Software Center to install SOFA – SOFA. SOFA - Topic: [SOLVED] Ubuntu Software Center to install SOFA. /udk-comment-sont-leves-les-mappable-keys; ; SOFA - Topic: UDK : Comment sont levés les ""Mappable keys"". /unable-to-assign-rest_position-to-mo-in-sofapython3-plugin-in-debug-mode; ; SOFA - Topic: Unable to assign rest_position to MO in SofaPython3 plugin in Debug mode. /unable-to-build-main-cpp-in-sofaphysicsapi; ; SOFA - Topic: Unable to build main.cpp in SofaPhysicsAPI. /unable-to-build-of-sofaguiglut; ; SOFA - Topic: Unable to build of SofaGuiGlut. /unable-to-create-bilateralinteractionconstraint; ; SOFA - Topic: [SOLVED] Unable to create ‘BilateralInteractionConstraint’. /unable-to-link-qt5-dlls-could-not-find-qt-plugin-platform-windows; ; SOFA - Topic: [SOLVED] Unable to link Qt5 dlls: could not find Qt plugin platform ""windows"". /unable-to-load-mesh; ; SOFA - Topic: [SOLVED] Unable to load mesh. /unable-to-load-py-scene-from-softrob",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:409972,install,install-sofa,409972,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['install'],['install-sofa']
Deployability,ni Buttons Controller. SOFA - Topic: [SOLVED] Omni Buttons Controller. /one-object-with-different-collision-definitions-for-different-parts; ; SOFA - Topic: [SOLVED] One object with different collision definitions for different parts. /onkeypressedevent-not-working; ; SOFA - Topic: onKeypressedEvent not working. /on-the-rotation-of-a-mesh-model-oglmodel; . /feed; ; [SOLVED] On the rotation of a mesh model (OglModel) – SOFA. SOFA - Topic: [SOLVED] On the rotation of a mesh model (OglModel). /opengl-and-directx; ; SOFA - Topic: opengl and directX. /opengl-error-when-compiling-sofa-on-macos; ; SOFA - Topic: [SOLVED] OpenGL Error when Compiling SOFA on MacOS. /open-obj-or-stl-files; . /feed; ; [SOLVED] Open .OBJ or .STL files – SOFA. SOFA - Topic: [SOLVED] Open .OBJ or .STL files. /open-position-for-an-engineer-in-computer-science; . /page; . /4; ; SOFA - Topic: Open position for an Engineer in Computer Science. SOFA - Topic: Open position for an Engineer in Computer Science. /optimization-integrator; . /feed; ; [SOLVED] Optimization integrator – SOFA. SOFA - Topic: [SOLVED] Optimization integrator. /order-independent-transparency; ; SOFA - Topic: [SOLVED] Order Independent Transparency. /orientantion-in-end-effector; ; SOFA - Topic: Orientantion in End-Effector. /oriented-sliding-constraint-actuator; ; SOFA - Topic: Oriented Sliding Constraint/Actuator. /parameter-value-update; . /embed; ; SOFA - Topic: Parameter value update. SOFA - Topic: Parameter value update. /paraview-and-sofa-working-together; ; SOFA - Topic: Paraview and SOFA working together. /parse-error; ; SOFA - Topic: Parse error. /particlemask-in-sofa; ; SOFA - Topic: [SOLVED] ParticleMask in SOFA. /pauseanimation; . /feed; ; [SOLVED] PauseAnimation – SOFA. /page; . /15; ; SOFA - Topic: [SOLVED] PauseAnimation. /4; ; SOFA - Topic: [SOLVED] PauseAnimation. SOFA - Topic: [SOLVED] PauseAnimation. /penetration-depth; ; SOFA - Topic: Penetration depth?. /performance-issues-with-haptics-and-deformable-objects; ,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:359696,integrat,integrator,359696,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['integrat'],['integrator']
Deployability,"nicalParams * ; mparams, . DataVecDeriv & ; f, . const DataVecDeriv & ; dx, . SReal ; factor . ). overridevirtual . Reimplemented from sofa::core::behavior::Mass< DataTypes >. ◆ addMToMatrix(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::addMToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; mat, . SReal ; mFact, . unsigned int & ; offset . ). overridevirtual . Add Mass contribution to global Matrix assembling. ; Reimplemented from sofa::core::behavior::Mass< DataTypes >. ◆ applyEdgeCreation(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::applyEdgeCreation ; (; const sofa::type::vector< EdgeID > & ; edgeAdded, . const sofa::type::vector< Edge > & ; , . const sofa::type::vector< sofa::type::vector< EdgeID > > & ; , . const sofa::type::vector< sofa::type::vector< SReal > > & ;  . ). protected . Method to update See alsod_vertexMass when a new Edge is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when EDGESADDED event is fired. . ◆ applyEdgeDestruction(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::applyEdgeDestruction ; (; const sofa::type::vector< EdgeID > & ; edgeRemoved). protected . Method to update See alsod_vertexMass when a Edge is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when EDGESREMOVED event is fired. . ◆ applyPointCreation(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::applyPointCreation ; (; PointID ; pointIndex, . MassType & ; m, . const Point & ; , . const sofa::type::vector< PointID > & ; , . const sofa::type::vector< SReal > & ;  . ). protected . Method to initialize See alsoMassVector when a new Point is created. Will be set as creat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html:34449,update,update,34449,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,1,['update'],['update']
Deployability,"nicalParams * ; mparams, . DataVecDeriv1 & ; f1, . DataVecDeriv2 & ; f2, . const DataVecCoord1 & ; x1, . const DataVecCoord2 & ; x2, . const DataVecDeriv1 & ; v1, . const DataVecDeriv2 & ; v2 . ). pure virtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes $ f += B v + K x $; This method must be implemented by the component, and is usually called by the generic ForceField::addForce() method. ; Implemented in sofa::component::mechanicalload::InteractionEllipsoidForceField< TDataTypes1, TDataTypes2 >. ◆ addForce() [2/2]. template<class DataTypes1 , class DataTypes2 > . void sofa::core::behavior::MixedInteractionForceField< DataTypes1, DataTypes2 >::addForce ; (; const MechanicalParams * ; mparams, . MultiVecDerivId ; fId . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes $ f += B v + K x $; This method retrieves the force, x and v vector from the two MechanicalState and call the internal addForce(VecDeriv&,VecDeriv&,const VecCoord&,const VecCoord&,const VecDeriv&,const VecDeriv&) method implemented by the component. ; Implements sofa::core::behavior::BaseForceField. ◆ getPotentialEnergy() [1/2]. template<class DataTypes1 , class DataTypes2 > . SReal sofa::core::behavior::MixedInteractionForceField< DataTypes1, DataTypes2 >::getPotentialEnergy ; (; const MechanicalParams * ; mparams); const. overridevirtual . Get the potential energy associated to this ForceField.; Used to estimate the total energy of the system by some post-stabilization techniques.; This method retrieves the x vector from the MechanicalState and call the internal getPotentialEnergy(const VecCoord&,const VecCoord&) method implemented by the ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html:22994,update,update,22994,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field.html,1,['update'],['update']
Deployability,nicationcontroller – SOFA. SOFA - Topic Tag: #communicationcontroller. /compile; . /feed; ; compile – SOFA. SOFA - Topic Tag: compile. /compliance; . /feed; ; compliance – SOFA. SOFA - Topic Tag: compliance. /compliant; . /feed; ; Compliant – SOFA. SOFA - Topic Tag: Compliant. /complie-softrobots; . /feed; ; Complie SoftRobots – SOFA. SOFA - Topic Tag: Complie SoftRobots. /component; . /feed; ; component – SOFA. SOFA - Topic Tag: component. /component-declaration; . /feed; ; component declaration – SOFA. SOFA - Topic Tag: component declaration. /components; . /feed; ; Components – SOFA. SOFA - Topic Tag: Components. /computation-time; . /feed; ; Computation Time – SOFA. SOFA - Topic Tag: Computation Time. /comp-vtu-precomputedconstraintcorrection-dentistry-tongue; . /feed; ; .comp .vtu PrecomputedConstraintCorrection dentistry tongue – SOFA. SOFA - Topic Tag: .comp .vtu PrecomputedConstraintCorrection dentistry tongue. /configurations; . /feed; ; configurations – SOFA. SOFA - Topic Tag: configurations. /connect; . /feed; ; connect – SOFA. SOFA - Topic Tag: connect. /connect-sofa; . /feed; ; Connect SOFA – SOFA. SOFA - Topic Tag: Connect SOFA. /constraint; . /feed; ; constraint – SOFA. SOFA - Topic Tag: constraint. /constraint-forces; . /feed; ; Constraint Forces – SOFA. SOFA - Topic Tag: Constraint Forces. /constraintresolution-h; . /feed; ; ConstraintResolution.h – SOFA. SOFA - Topic Tag: ConstraintResolution.h. /constraints; . /feed; ; constraints – SOFA. SOFA - Topic Tag: constraints. /constraint-solver; . /feed; ; Constraint Solver – SOFA. SOFA - Topic Tag: Constraint Solver. /contact; . /feed; ; contact – SOFA. SOFA - Topic Tag: contact. /contact-force; . /feed; ; contact force – SOFA. SOFA - Topic Tag: contact force. /contactlistener; . /feed; ; contactlistener – SOFA. SOFA - Topic Tag: contactlistener. /contain; . /feed; ; contain – SOFA. SOFA - Topic Tag: contain. /continuum-robots-beam-adaptater-constraints; . /feed; ; continuum robots; beam adaptater; cons,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:436500,configurat,configurations,436500,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['configurat'],['configurations']
Deployability,"nics::spring::QuadularBendingSprings< DataTypes >::f_kd. uniform damping for the all springs . ◆ f_ks. template<class DataTypes > . Data<SReal> sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::f_ks. uniform stiffness for the all springs . ◆ l_topology. template<class DataTypes > . SingleLink<QuadularBendingSprings<DataTypes>, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH | BaseLink::FLAG_STRONGLINK> sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::l_topology. Link to be set to the topology container in the component graph. . ◆ m_potentialEnergy. template<class DataTypes > . SReal sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::m_potentialEnergy. protected . ◆ m_topology. template<class DataTypes > . sofa::core::topology::BaseMeshTopology* sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::m_topology. protected . Pointer to the current topology. . ◆ updateMatrix. template<class DataTypes > . bool sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::updateMatrix. protected . Constructor details. ◆ QuadularBendingSprings(). template<class DataTypes > . sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::QuadularBendingSprings. ◆ ~QuadularBendingSprings(). template<class DataTypes > . sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::~QuadularBendingSprings. Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs.html:22173,update,updateMatrix,22173,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs.html,1,['update'],['updateMatrix']
Deployability,nimation; ; SOFA - Topic: Best practice for setting up an animation?. /best-way-to-detect-and-quantify-interpenetration; ; SOFA - Topic: Best way to detect and quantify interpenetration. /best-way-to-implement-ligaments-attaching-finger-bones-together; ; SOFA - Topic: Best Way to Implement Ligaments Attaching Finger Bones Together. /bilateralinteractionconstraint-causes-unrealistic-motion; ; SOFA - Topic: BilateralInteractionConstraint causes unrealistic motion. /bilateralinteractionconstraint-reduces-gravity-by-100x; ; SOFA - Topic: [SOLVED] BilateralInteractionConstraint reduces gravity by 100x. /bilateralinteractionconstraint-with-caribou-solver; ; SOFA - Topic: BilateralInteractionConstraint with Caribou Solver. /binaries-generation; ; SOFA - Topic: Binaries generation. /binary-plugins; . /page; . /2; ; SOFA - Topic: [SOLVED] Binary Plugins. /7; ; SOFA - Topic: [SOLVED] Binary Plugins. SOFA - Topic: [SOLVED] Binary Plugins. /binary-release-linux-libs-libicui18n-so-55-missing; ; SOFA - Topic: [SOLVED] Binary release linux libs – libicui18n.so.55 missing. /bindings-python-for-new-data-types; . /feed; ; [SOLVED] Bindings python for new data types – SOFA. SOFA - Topic: [SOLVED] Bindings python for new data types. /biomechanical-modeling-and-surgical-simulation-research-and-development-engineer; . /page; . /4; ; SOFA - Topic: Biomechanical Modeling and Surgical Simulation Research and Development Engineer. SOFA - Topic: Biomechanical Modeling and Surgical Simulation Research and Development Engineer. /blood-flow-through-heart; ; SOFA - Topic: [SOLVED] Blood flow through heart. /boost-assertion-failed; ; SOFA - Topic: [SOLVED] Boost Assertion Failed. /boost-error; . /feed; ; [SOLVED] Boost error – SOFA. SOFA - Topic: [SOLVED] Boost error. /bounding-boxes-in-sofa; . /feed; ; [SOLVED] Bounding Boxes in SOFA – SOFA. SOFA - Topic: [SOLVED] Bounding Boxes in SOFA. /boxroi-doupdate; . /feed; ; [SOLVED] BoxROI doUpdate – SOFA. /page; . /11; ; SOFA - Topic: [SOLVED] BoxROI do,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:261501,release,release-linux-libs-,261501,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['release'],"['release', 'release-linux-libs-']"
Deployability,"ning all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; MechanicalState< DataTypes > * getMState ();  ; const MechanicalState< DataTypes > * getMState () const;  . Protected Member Functions; void applyEdgeCreation (Index edgeIndex, EdgeSpring &ei, const core::topology::BaseMeshTopology::Edge &, const sofa::type::vector< Index > &, const sofa::type::vector< SReal > &);  ; void applyTriangleCreation (const sofa::type::vector< Index > &triangleAdded, const sofa::type::vector< core::topology::BaseMeshTopology::Triangle > &, const sofa::type::vector< sofa::type::vector< Index > > &, const sofa::type::vector< sofa::type::vector< SReal > > &);  ; void applyTriangleDestruction (const sofa::type::vector< Index > &triangleRemoved);  ; void applyPointDestruction (const sofa::type::vector< Index > &pointIndices);  Method to update. More...;  ; void applyPointRenumbering (const sofa::type::vector< Index > &pointToRenumber);  Method to update. More...;  ;  FastTriangularBendingSprings ();  ; virtual ~FastTriangularBendingSprings ();  ; sofa::core::topology::EdgeData< type::vector< EdgeSpring > > & getEdgeInfo ();  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< _DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs.html:17142,update,update,17142,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs.html,1,['update'],['update']
Deployability,"ning all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::component::mapping::nonlinear::NonLinearMappingData< true >;  NonLinearMappingData ();  ;  NonLinearMappingData ();  . Protected Member Functions;  RigidMapping ();  ; virtual ~RigidMapping ();  ; unsigned int getRigidIndex (unsigned int pointIndex) const;  ; void load (const char *filename);  ; const OutVecCoord & getPoints ();  ; void setJMatrixBlock (sofa::Index outIdx, sofa::Index inIdx);  ;  SOFA_ATTRIBUTE_DISABLED (""v23.06"", ""v23.12"", ""Use m_matrixJ instead"") DeprecatedAndRemoved matrixJ;  ;  SOFA_ATTRIBUTE_DISABLED (""v23.06"", ""v23.12"", ""Use m_updateJ instead"") DeprecatedAndRemoved updateJ;  ;  SOFA_ATTRIBUTE_DISABLED (""v23.06"", ""v23.12"", ""Use m_eigenJacobian instead"") DeprecatedAndRemoved eigenJacobian;  ;  SOFA_ATTRIBUTE_DISABLED (""v23.06"", ""v23.12"", ""Use m_eigenJacobians instead"") DeprecatedAndRemoved eigenJacobians;  used by getJs More...;  ;  SOFA_ATTRIBUTE_DISABLED (""v23.06"", ""v23.12"", ""Use m_geometricStiffnessMatrix instead"") DeprecatedAndRemoved geometricStiffnessMatrix;  ;  Protected Member Functions inherited from sofa::core::Mapping< TIn, TOut >;  Mapping (State< In > *from=nullptr, State< Out > *to=nullptr);  ;  ~Mapping () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::BaseMapping;  BaseMapping ();  Constructor. More...;  ;  ~BaseMapping () override;  Destructor. More...;  ; bool testMechanicalState (BaseState *state);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping.html:21160,update,updateJ,21160,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping.html,1,['update'],['updateJ']
Deployability,"nitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(MathOp, VecT), core::DataEngine);  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void parseFields (const std::map< std::string, std::string * > &str) override;  Assign the field values stored in the given map of name -> value pairs. More...;  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_math_op.html:2784,update,update,2784,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_math_op.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_math_op.html,1,['update'],['update']
Deployability,"nk (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  PointSplatModel ();  ;  ~PointSplatModel () override;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method use",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_point_splat_model.html:11225,update,update,11225,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_point_splat_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_point_splat_model.html,1,['update'],['update']
Deployability,"nk (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  VisualTransform ();  ;  ~VisualTransform () override;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method use",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_transform.html:14010,update,update,14010,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_transform.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_transform.html,1,['update'],['update']
Deployability,"nk *link);  . Protected Member Functions;  TransformPosition ();  ;  ~TransformPosition () override;  ; void getTransfoFromTxt ();  ; void getTransfoFromTrm ();  ; void getTransfoFromTfm ();  ; void selectTransformationMethod ();  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_transform_position.html:15066,update,update,15066,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_transform_position.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_transform_position.html,1,['update'],['update']
Deployability,"nk::FLAG_NONE)>; ValidatorFn m_validator;  ;  Protected Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; OwnerType * m_owner {nullptr};  ; Container m_value;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseLink; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseLink; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from);  ; static std::string CreateString (BaseData *data, Base *from);  ; static std::string CreateString (Base *object, BaseData *data, Base *from);  ;  Protected Member Functions inherited from sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; void added (DestPtr val, std::size_t);  ; void removed (DestPtr val, std::size_t);  ; void changed (DestPtr before, DestPtr val);  ;  Protected Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; DestType * getIndex (std::size_t index) const;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseLink; void updateCounter ();  . Constructor details. ◆ NodeSingle(). template<class T , bool duplicate = true> . sofa::simulation::NodeSingle< T, duplicate >::NodeSingle ; (; const BaseLink::InitLink< Node > & ; init). inline . Function details. ◆ operator T*(). template<class T , bool duplicate = true> . sofa::simulation::NodeSingle< T, duplicate >::operator T* ; (; ); const. inline . ◆ operator*(). template<class T , bool duplic",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html:6657,update,updateCounter,6657,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html,2,['update'],['updateCounter']
Deployability,"nk;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (LineAxis, VisualModel);  ;  LineAxis ();  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doDrawVisual (const core::visual::VisualParams *) override;  ; void doUpdateVisual (const core::visual::VisualParams *) override;  ; void updateLine ();  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void fwdDraw (VisualParams *);  Called before objects in the current branch are displayed. More...;  ; virtual void bwdDraw (VisualParams *);  Called after objects in the current branch are displayed. More...;  ; virtual void drawTransparent (const VisualParams *);  Display transparent surfaces. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const S",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_line_axis.html:3463,update,updateVisual,3463,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_line_axis.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_line_axis.html,2,['update'],"['update', 'updateVisual']"
Deployability,"nkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; MechanicalState< DataTypes > * getMState ();  ; const MechanicalState< DataTypes > * getMState () const;  . Protected Member Functions;  TriangularBiquadraticSpringsForceField ();  second Lame coefficient More...;  ; virtual ~TriangularBiquadraticSpringsForceField ();  ; sofa::core::topology::EdgeData< type::vector< EdgeRestInformation > > & getEdgeInfo ();  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Ba",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field.html:19107,update,update,19107,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field.html,1,['update'],['update']
Deployability,"nkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ; bool setParent (BaseData *parent, const std::string &path=std::string());  Link to a parent data. The value of this data will automatically duplicate the value of the parent data. More...;  ; bool setParent (const std::string &path);  ; virtual bool validParent (const BaseData *parent);  Check if a given Data can be linked as a parent of this data. More...;  ; BaseData * getParent () const;  ; void update () override;  Update the value of this Data. More...;  ; bool copyValueFrom (const BaseData *data);  Update this Data from the value of its parent. More...;  ; bool updateValueFromLink (const BaseData *data);  ; template<class T > ;  SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME () static std;  ; Flags; void setFlag (DataFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (DataFlagsEnum flag) const;  Get one of the flags. More...;  ; bool isDisplayed () const;  Return whether this Data has to be displayed in GUIs. More...;  ; bool isReadOnly () const;  Return whether this Data will be read-only in GUIs. More...;  ; bool isPersistent () const;  Return whether this Data contains persistent information. More...;  ; bool isAutoLink () const;  Return whether this Data should be autolinked when using the src="""" syntax. More...;  ; bool isRequired () const;  Return whether the Data has to be set by the user for the owner component to be valid. More...;  ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:4361,update,update,4361,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,1,['update'],['update']
Deployability,"nkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::string & getName () const;  Return the name of this Data within the Base component. More...;  ; void setName (const std::string &name);  ; bool hasDefaultValue () const;  Return whether the Data has a default value or not. More...;  ; bool setParent (BaseData *parent, const std::string &path=std::string());  Link to a parent data. The value of this data will automatically duplicate the value of the parent data. More...;  ; bool setParent (const std::string &path);  ; virtual bool validParent (const BaseData *parent);  Check if a given Data can be linked as a parent of this data. More...;  ; BaseData * getParent () const;  ; void update () override;  Update the value of this Data. More...;  ; bool copyValueFrom (const BaseData *data);  Update this Data from the value of its parent. More...;  ; bool updateValueFromLink (const BaseData *data);  ; template<class T > ;  SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME () static std;  ; void setFlag (DataFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (DataFlagsEnum flag) const;  Get one of the flags. More...;  ; bool isDisplayed () const;  Return whether this Data has to be displayed in GUIs. More...;  ; bool isReadOnly () const;  Return whether this Data will be read-only in GUIs. More...;  ; bool isPersistent () const;  Return whether this Data contains persistent information. More...;  ; bool isAutoLink () const;  Return whether this Data should be autolinked when using the src="""" syntax. More...;  ; bool isRequired () const;  Return whether the Data has to be set by the user for the owner component to be valid. More...;  ; void ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:6837,update,update,6837,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,8,['update'],['update']
Deployability,"nlineoverride . ◆ launchAsyncFactorization(). template<class TMatrix , class TVector , class TThreadManager > . void sofa::component::linearsolver::direct::AsyncSparseLDLSolver< TMatrix, TVector, TThreadManager >::launchAsyncFactorization. protected . ◆ setSystemMBKMatrix(). template<class TMatrix , class TVector , class TThreadManager > . void sofa::component::linearsolver::direct::AsyncSparseLDLSolver< TMatrix, TVector, TThreadManager >::setSystemMBKMatrix ; (; const core::MechanicalParams * ; mparams). override . ◆ SOFA_CLASS(). template<class TMatrix , class TVector , class TThreadManager = NoThreadManager> . sofa::component::linearsolver::direct::AsyncSparseLDLSolver< TMatrix, TVector, TThreadManager >::SOFA_CLASS ; (; SOFA_TEMPLATE3(AsyncSparseLDLSolver< TMatrix, TVector, TThreadManager >, TMatrix, TVector, TThreadManager) ; , . SOFA_TEMPLATE3(SparseLDLSolver, TMatrix, TVector, TThreadManager) ;  . ). ◆ solve(). template<class TMatrix , class TVector , class TThreadManager > . void sofa::component::linearsolver::direct::AsyncSparseLDLSolver< TMatrix, TVector, TThreadManager >::solve ; (; Matrix & ; M, . Vector & ; x, . Vector & ; b . ). override . ◆ solveSystem(). template<class TMatrix , class TVector , class TThreadManager > . void sofa::component::linearsolver::direct::AsyncSparseLDLSolver< TMatrix, TVector, TThreadManager >::solveSystem. override . ◆ swapInvertData(). template<class TMatrix , class TVector , class TThreadManager > . void sofa::component::linearsolver::direct::AsyncSparseLDLSolver< TMatrix, TVector, TThreadManager >::swapInvertData. protected . Copy the invert data from the async thread to the main thread. . ◆ updateSystemMatrix(). template<class TMatrix , class TVector , class TThreadManager > . void sofa::component::linearsolver::direct::AsyncSparseLDLSolver< TMatrix, TVector, TThreadManager >::updateSystemMatrix. override . sofacomponentlinearsolverdirectAsyncSparseLDLSolver; Generated on Mon Nov 11 2024 02:47:29 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1direct_1_1_async_sparse_l_d_l_solver.html:12521,update,updateSystemMatrix,12521,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1direct_1_1_async_sparse_l_d_l_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1direct_1_1_async_sparse_l_d_l_solver.html,2,['update'],['updateSystemMatrix']
Deployability,"nlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglFloat2Attribute, SOFA_TEMPLATE3(OglAttribute, 2, GL_FLOAT, SOFA_TEMPLATE2(sofa::type::Vec, 2, float)))sofa::gl::component::shader::OglFloat2Attribute; OglAttribute< 2, GL_FLOAT, sofa::type::Vec< 2, float > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE3(OglAttribute, size, type, sofa::type::Vec< 2, float >), core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglAttribute< 2, GL_FLOAT, sofa::type::Vec< 2, float > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglAttribute< 2, GL_FLOAT, sofa::type::Vec< 2, float > >protected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglAttribute() overridesofa::gl::component::shader::OglAttribute< 2, GL_FLOAT, sofa::type::Vec< 2, float > >protected; ~OglFloat2Attribute()sofa::gl::component::shader::OglFloat2Attributeinlinevirtual; ~O",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float2_attribute-members.html:15666,update,updateLinks,15666,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float2_attribute-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float2_attribute-members.html,1,['update'],['updateLinks']
Deployability,"nlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglFloat3Attribute, SOFA_TEMPLATE3(OglAttribute, 3, GL_FLOAT, SOFA_TEMPLATE2(sofa::type::Vec, 3, float)))sofa::gl::component::shader::OglFloat3Attribute; OglAttribute< 3, GL_FLOAT, sofa::type::Vec< 3, float > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE3(OglAttribute, size, type, sofa::type::Vec< 3, float >), core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglAttribute< 3, GL_FLOAT, sofa::type::Vec< 3, float > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglAttribute< 3, GL_FLOAT, sofa::type::Vec< 3, float > >protected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglAttribute() overridesofa::gl::component::shader::OglAttribute< 3, GL_FLOAT, sofa::type::Vec< 3, float > >protected; ~OglFloat3Attribute()sofa::gl::component::shader::OglFloat3Attributeinlinevirtual; ~O",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float3_attribute-members.html:15666,update,updateLinks,15666,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float3_attribute-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float3_attribute-members.html,1,['update'],['updateLinks']
Deployability,"nlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglFloat4Attribute, SOFA_TEMPLATE3(OglAttribute, 4, GL_FLOAT, SOFA_TEMPLATE2(sofa::type::Vec, 4, float)))sofa::gl::component::shader::OglFloat4Attribute; OglAttribute< 4, GL_FLOAT, sofa::type::Vec< 4, float > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE3(OglAttribute, size, type, sofa::type::Vec< 4, float >), core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglAttribute< 4, GL_FLOAT, sofa::type::Vec< 4, float > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglAttribute< 4, GL_FLOAT, sofa::type::Vec< 4, float > >protected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglAttribute() overridesofa::gl::component::shader::OglAttribute< 4, GL_FLOAT, sofa::type::Vec< 4, float > >protected; ~OglFloat4Attribute()sofa::gl::component::shader::OglFloat4Attributeinlinevirtual; ~O",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float4_attribute-members.html:15666,update,updateLinks,15666,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float4_attribute-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float4_attribute-members.html,1,['update'],['updateLinks']
Deployability,"ns inherited from sofa::core::objectmodel::Context;  Context ();  ; virtual ~Context () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseContext;  BaseContext ();  ;  ~BaseContext () override;  . Friends; class VisitorScheduler;  . Attribute details. ◆ _context. BaseContext* sofa::simulation::Node::_context. protected . ◆ actionStack. std::stack<Visitor*> sofa::simulation::Node::actionStack. protected . ◆ animationManager. NodeSingle<sofa::core::behavior::BaseAnimationLoop> sofa::simulation::Node::animationManager. ◆ behaviorModel. NodeSequence<sofa::core::BehaviorModel> sofa::simulation::Node::behaviorModel. ◆ child. NodeSequence<Node,true> sofa::simulation::Node::child. ◆ collisionModel. NodeSequence<sofa::core::CollisionModel> sofa::simulation::Node::collisionModel. ◆ collisionPipeline. NodeSingle<sofa::core::collision::Pipeline> sofa::simulation::Node::collisionPipeline. ◆ configurationSetting. NodeSequence<sofa::core::objectmodel::ConfigurationSetting> sofa::simulation::Node::configurationSetting. ◆ constraintSet. NodeSequence<sofa::core::behavior::BaseConstraintSet> sofa::simulation::Node::constraintSet. ◆ constraintSolver. NodeSequence<sofa::core::behavior::ConstraintSolver> sofa::simulation::Node::constraintSolver. ◆ contextObject. NodeSequence<sofa::core::objectmodel::ContextObject> sofa::simulation::Node::contextObject. ◆ debug_. bool sofa::simulation::Node::debug_. protected . ◆ forceField. NodeSequence<sofa::core::behavior::BaseForceField> sofa::simulation::Node::forceField. ◆ initialized. bool sofa::simulation::Node::initialized. protected . ◆ interactionForceField. NodeSequence<sofa::core::behavior::BaseInteractionForceField> sofa::simulation::Node::interactionForceField. ◆ linearSolver. NodeSequence<sofa::core::behavior::BaseLinearSolver> sofa::simulation::Node::linearSolver. ◆ listener. type::vector<MutationListener*> sofa::simulation::Node::listener. protected . ◆ mapping. NodeSequence<sofa::core::BaseMapping> sof",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:30496,configurat,configurationSetting,30496,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,3,"['Configurat', 'configurat']","['ConfigurationSetting', 'configurationSetting']"
Deployability,"ns |; Signals |; Public Slots |; List of all members . sofa::gui::qt::DataWidget Class Referenceabstract . #include <DataWidget.h>; Abstract Interface of a qwidget which allows to edit a data. ; More... Inheritance diagram for sofa::gui::qt::DataWidget:. [legend]; Detailed Description; Abstract Interface of a qwidget which allows to edit a data. . Classes; struct  CreatorArgument;  . Protected Attributes; core::objectmodel::BaseData * baseData;  ; bool dirty;  ; int counter;  ; bool m_isFilled;  tell if DataWidget has been filled from Data true by default More...;  ; bool m_toFill;  bool to warn action is needed to fill Data, false by default More...;  . Public Member Functions;  DataWidget (QWidget *parent, const char *name, MyData *d);  ;  ~DataWidget () override;  ; virtual void setData (MyData *d);  ; const core::objectmodel::BaseData * getBaseData () const;  BaseData pointer accessor function. More...;  ; core::objectmodel::BaseData * getBaseData ();  ; void updateVisibility ();  ; bool isDirty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  ; virtual bool createWidgets ()=0;  ; virtual void setDataReadOnly (bool readOnly)=0;  This method is called after createWidgets to configure whether the created widgets should be read-only. More...;  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  . Static Public Member Functions; template<class T > ; static T * create (T *, const CreatorArgument &arg);  ; static DataWidget * CreateDataWidget (const DataWidget::CreatorArgument &dwarg);  . Protected Member Functions; virtual void readFromData ()=0;  The implementation of this method tells how the widget reads the value of the data. More...;  ; virtual void writeToData ()=0;  . Signals; void WidgetDirty (bool);  ; void DataOwnerDirty (bool);  ;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_widget.html:1228,update,updateVisibility,1228,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_widget.html,2,['update'],['updateVisibility']
Deployability,"ns;  SOFA_CLASS (PointSplatModel, core::visual::VisualModel);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; virtual bool isTransparent ();  ; void drawTransparent (const core::visual::VisualParams *vparams) override;  Display transparent surfaces. More...;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void fwdDraw (VisualParams *);  Called before objects in the current branch are displayed. More...;  ; virtual void bwdDraw (VisualParams *);  Called after objects in the current branch are displayed. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const type::Quat< SReal >);  ; virtual void applyScale (const SReal, const SReal, const SReal);  ; virtual void exportOBJ (std::str",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_point_splat_model.html:1382,update,updateVisual,1382,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_point_splat_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_point_splat_model.html,1,['update'],['updateVisual']
Deployability,"nsofa::component::constraint::lagrangian::solver::LCPConstraintSolver; SOFA_ABSTRACT_CLASS(ConstraintSolver, objectmodel::BaseObject)sofa::core::behavior::ConstraintSolver; SOFA_CLASS(LCPConstraintSolver, ConstraintSolverImpl)sofa::component::constraint::lagrangian::solver::LCPConstraintSolver; sofa::component::constraint::lagrangian::solver::ConstraintSolverImpl::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; solveConstraint(const ConstraintParams *, MultiVecId res1, MultiVecId res2=MultiVecId::null())sofa::core::behavior::ConstraintSolvervirtual; solveSystem(const core::ConstraintParams *, MultiVecId res1, MultiVecId res2=MultiVecId::null()) overridesofa::component::constraint::lagrangian::solver::LCPConstraintSolvervirtual; solveSystemTask(const ConstraintParams *, MultiVecId res1, MultiVecId res2)sofa::core::behavior::ConstraintSolverprotected; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; tolsofa::component::constraint::lagrangian::solver::LCPConstraintSolver; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ConstraintSolver() overridesofa::core::behavior::ConstraintSolverprotected; ~ConstraintSolverImpl() overridesofa::component::constraint::lagrangian::solver::ConstraintSolverImpl; ~LCPConstraintSolver() overridesofa::component::constraint::lagrangian::solver::LCPConstraintSolverprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_l_c_p_constraint_solver-members.html:17305,update,updateInternal,17305,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_l_c_p_constraint_solver-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_l_c_p_constraint_solver-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"nst BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model.html:13005,update,updateInternal,13005,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model.html,1,['update'],['updateInternal']
Deployability,"nst BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  MultiStepAnimationLoop ();  ;  ~MultiStepAnimationLoop () override;  ;  Protected Member Functions inherited from sofa::simulation::CollisionAnimationLoop;  CollisionAnimationLoop ();  ;  ~CollisionAnimationLoop () override;  ; virtual void preCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called before the actual collision computation. More...;  ; virtual void internalCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function performing the actual collision computation. More...;  ; virtual void postCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called after the actual collision computation. More...;  ; virtual void computeCollision (const core::ExecParams *params=core::execparams::defaultInstance());  Activate collision pipeline. More...;  ; virtual void integrate (const core::ExecParams *params, SReal dt);  Activate OdeSolvers. More...;  ; const Solvers & getSolverSequence ();  ;  Protected Member Functions inherited from sofa::core::behavior::BaseAnimationLoop;  BaseAnimationLoop ();  ;  ~BaseAnimationLoop () override;  ; void storeResetState () override;  Save the initial state for later uses in reset() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_multi_step_animation_loop.html:11843,pipeline,pipeline,11843,api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_multi_step_animation_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_multi_step_animation_loop.html,1,['pipeline'],['pipeline']
Deployability,"nst BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::behavior::SingleStateAccessor< TDataTypes >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, TDataTypes), StateAccessor);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; MechanicalState< TDataTypes > * getMState ();  ; const MechanicalState< TDataTypes > * getMState () const;  . Protected Member Functions; template<class DataDeriv > ; void projectResponseT (DataDeriv &dx, const std::function< void(DataDeriv &, const unsigned int)> &clear);  ;  Protected Member Functions inherited from sofa::core::behavior::ProjectiveConstraintSet< TDataTypes >;  ProjectiveConstraintSet (MechanicalState< TDataTypes > *mm=nullptr);  ;  ~ProjectiveConstraintSet () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseProjectiveConstraintSet;  BaseProjectiveConstraintSet ();  ;  ~BaseProjectiveConstraintSet () override;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functio",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_oscillator_projective_constraint.html:15472,update,update,15472,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_oscillator_projective_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_oscillator_projective_constraint.html,1,['update'],['update']
Deployability,"nst Index &c);  ; void accumulateForceLarge (Vector &f, const Vector &p, Index elementIndex);  ; void applyStiffnessLarge (Vector &f, const Vector &x, int i=0, Index a=0, Index b=1, Index c=2, Index d=3, SReal fact=1.0);  ; void initPolar (int i, Index &a, Index &b, Index &c, Index &d);  ; void accumulateForcePolar (Vector &f, const Vector &p, Index elementIndex);  ; void applyStiffnessPolar (Vector &f, const Vector &x, int i=0, Index a=0, Index b=1, Index c=2, Index d=3, SReal fact=1.0);  ; void printStiffnessMatrix (int idTetra);  ;  Protected Member Functions inherited from sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >; void checkPoissonRatio ();  ; void checkYoungModulus ();  ; Real getVecRealInElement (sofa::Size elementId, const Data< VecReal > &data, Real defaultValue) const;  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracke",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedral_corotational_f_e_m_force_field.html:21732,update,update,21732,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedral_corotational_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedral_corotational_f_e_m_force_field.html,1,['update'],['update']
Deployability,"nst T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(Shader, objectmodel::BaseObject)sofa::core::visual::Shader; sofa::core::visual::VisualModel::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; SOFA_CLASS(OglShadowShader, sofa::gl::component::shader::OglShader)sofa::gl::component::shader::OglShadowShader; sofa::gl::component::shader::OglShader::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglShader, core::visual::Shader, core::visual::VisualModel)sofa::gl::component::shader::OglShader; SPtr typedefsofa::core::objectmodel::Base; start() overridesofa::gl::component::shader::OglShadervirtual; stop() overridesofa::gl::component::shader::OglShadervirtual; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; turnOnsofa::gl::component::shader::OglShader; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; vertFilenamesofa::gl::component::shader::OglShader; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglShader() overridesofa::gl::component::shader::OglShaderprotected; ~OglShadowShader() overridesofa::gl::component::shader::OglShadowShaderprotected; ~Shader() overridesofa::core::visual::Shaderinlinep",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shadow_shader-members.html:17096,update,updateInternal,17096,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shadow_shader-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shadow_shader-members.html,2,['update'],['updateInternal']
Deployability,"nst char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  ContextObject ();  ;  ~ContextObject () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, Base",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html:9535,update,update,9535,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object.html,1,['update'],['update']
Deployability,"nst char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  SceneLoader ();  Constructor. More...;  ;  ~SceneLoader () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::loader::BaseLoader;  BaseLoader ();  ;  ~BaseLoader () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html:9770,update,update,9770,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader.html,1,['update'],['update']
Deployability,"nst std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(IndexValueMapper, DataTypes), sofa::core::DataEngine)sofa::component::engine::transform::IndexValueMapper< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::engine::transform::IndexValueMapper< DataTypes >; VecCoord typedefsofa::component::engine::transform::IndexValueMapper< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~IndexVal",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_index_value_mapper-members.html:12703,update,update,12703,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_index_value_mapper-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_index_value_mapper-members.html,1,['update'],['update']
Deployability,"nst std::string &n, int counter)sofa::core::objectmodel::Base; setPathInputObject(const std::string &o)sofa::core::topology::TopologicalMappinginline; setPathOutputObject(const std::string &o)sofa::core::topology::TopologicalMappinginline; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setTopologies(In *from, Out *to)sofa::core::topology::TopologicalMappingvirtual; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(TopologicalMapping, objectmodel::BaseObject)sofa::core::topology::TopologicalMapping; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; toModelsofa::core::topology::TopologicalMapping; TopologicalMapping()sofa::core::topology::TopologicalMappingprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateTopologicalMappingBottomUp()sofa::core::topology::TopologicalMappinginlinevirtual; updateTopologicalMappingTopDown()=0sofa::core::topology::TopologicalMappingpure virtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~TopologicalMapping() overridesofa::core::topology::TopologicalMappinginlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping-members.html:11873,update,updateInternal,11873,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping-members.html,4,['update'],"['updateInternal', 'updateLinks', 'updateTopologicalMappingBottomUp', 'updateTopologicalMappingTopDown']"
Deployability,"nst std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(JoinPoints, DataTypes), sofa::core::DataEngine)sofa::component::engine::generate::JoinPoints< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::engine::generate::JoinPoints< DataTypes >; VecCoord typedefsofa::component::engine::generate::JoinPoints< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~JoinPoints() overridesofa::component::engine::generate::JoinPoints< DataTypes >inlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_join_points-members.html:12469,update,updateIfDirty,12469,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_join_points-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_join_points-members.html,3,['update'],"['updateIfDirty', 'updateInternal', 'updateLinks']"
Deployability,"nst std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  ExtrudeSurface ();  ;  ~ExtrudeSurface () override;  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_surface.html:14154,update,update,14154,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_surface.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_surface.html,1,['update'],['update']
Deployability,"nst std::string &typeInfo)sofa::simulation::Visitor; getCategoryName() const overridesofa::simulation::UpdateInternalDataVisitorinlinevirtual; getClassName() const overridesofa::simulation::UpdateInternalDataVisitorinlinevirtual; getInfos() constsofa::simulation::Visitorinlinevirtual; isThreadSafe() const overridesofa::simulation::UpdateInternalDataVisitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::UpdateInternalDataVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processUpdateInternalData(simulation::Node *node, sofa::core::objectmodel::BaseObject *baseObj)sofa::simulation::UpdateInternalDataVisitor; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversal",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor-members.html:3133,Update,UpdateInternalDataVisitor,3133,api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor-members.html,1,['Update'],['UpdateInternalDataVisitor']
Deployability,"nstInVecCoord &inPos);  ; virtual void applyJ (const type::vector< OutVecDeriv * > &outDeriv, const type::vector< const InVecDeriv * > &inDeriv);  ; virtual void applyJT (const type::vector< InVecDeriv * > &outDeriv, const type::vector< const OutVecDeriv * > &inDeriv);  ; void applyJT (const core::ConstraintParams *, const type::vector< InDataMatrixDeriv * > &, const type::vector< const OutDataMatrixDeriv * > &) override;  This method must be reimplemented by all mappings if they need to support constraints. More...;  ; void applyDJT (const core::MechanicalParams *, core::MultiVecDerivId inForce, core::ConstMultiVecDerivId outForce) override;  Accumulate a change of parent force due to the change of the mapping, for a constant child force. Null for linear mappings. More...;  ; virtual const type::vector< sofa::linearalgebra::BaseMatrix * > * getJs () override;  ; void updateK (const core::MechanicalParams *mparams, core::ConstMultiVecDerivId childForce) override;  ; const linearalgebra::BaseMatrix * getK () override;  ; void buildGeometricStiffnessMatrix (sofa::core::GeometricStiffnessMatrix *matrices) override;  Assembles the geometric stiffness matrix of the mapping in the provided matrix object. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; void apply (const MechanicalParams *mparams, MultiVecCoordId outPos, ConstMultiVecCoordId inPos) override;  ; virtual void apply (const MechanicalParams *mparams, const type::vector< OutDataVecCoord * > &dataVecOutPos, const type::vector< const InDataVecCoord * > &dataVecInPos)=0;  ; void applyJ (const MechanicalParams *mparams, MultiVecDerivId outVel, ConstMultiVecDerivId inVel) override;  ; virtual void applyJ (const MechanicalParams *mparams, const type::vector< OutDataVecDeriv * > &dataVecOutVel, const type::vector< const InDataVecDeriv * > &dataVecInVel)=0;  ; void applyJT (const MechanicalParams *mparams, MultiVecDeriv",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_distance_multi_mapping.html:6918,update,updateK,6918,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_distance_multi_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_distance_multi_mapping.html,1,['update'],['updateK']
Deployability,"nstances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (LinearSolver, BaseLinearSolver);  ; virtual void resetSystem ()=0;  Reset the current linear system. More...;  ; virtual void setSystemMBKMatrix (const MechanicalParams *mparams)=0;  ; virtual void rebuildSystem (SReal, SReal);  ; virtual bool isAsyncSolver ();  Indicate if the solver update the system in parallel. More...;  ; virtual bool supportNonSymmetricSystem () const;  Returns true if the solver supports non-symmetric systems. More...;  ; virtual bool hasUpdatedMatrix ();  Indicate if the solver updated the system after the last call of setSystemMBKMatrix (should return true if isParallelSolver return false) More...;  ; virtual void updateSystemMatrix ();  This function is use for the preconditioner it must be called at each time step event if setSystemMBKMatrix is not called. More...;  ; virtual void setSystemRHVector (core::MultiVecDerivId v)=0;  Set the linear system right-hand term vector, from the values contained in the (Mechanical/Physical)State objects. More...;  ; virtual void setSystemLHVector (core::MultiVecDerivId v)=0;  ; virtual void solveSystem ()=0;  Solve the system as constructed using the previous methods. More...;  ; virtual void init_partial_solve ();  ; virtual void partial_solve (std::list< linearalgebra::BaseMatrix::Index > &, std::list< linearalgebra::BaseMatrix::Index > &, bool);  ; virtual void invertSystem ();  Invert the system, this method is optional because it's called when solveSystem() is called for the first time. More...;  ; virtual bool addMInvJt (linearalgebra::BaseMatrix *result, linearalgebra::BaseMatrix *J, SReal fact);  ; virtual bool buildComplianceMatrix (const sofa::core::ConstraintParams *cparams, linearalgebra::BaseMatrix *result,",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver.html:1943,update,updateSystemMatrix,1943,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver.html,1,['update'],['updateSystemMatrix']
Deployability,nstraint. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::LineProjectiveConstraint< defaulttype::Vec2Types >. ◆ OscillatorProjectiveConstraint. using sofa::component::constraint::projective::OscillatorProjectiveConstraint = typedef OscillatorProjectiveConstraint<T>. ◆ ParabolicProjectiveConstraint. using sofa::component::constraint::projective::ParabolicProjectiveConstraint = typedef ParabolicProjectiveConstraint<T>. ◆ PartialFixedProjectiveConstraint. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::PartialFixedProjectiveConstraint< defaulttype::Rigid2Types >. ◆ PartialLinearMovementProjectiveConstraint. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::PartialLinearMovementProjectiveConstraint< defaulttype::Rigid3Types >. ◆ PatchTestMovementProjectiveConstraint. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::PatchTestMovementProjectiveConstraint< defaulttype::Rigid3Types >. ◆ PlaneProjectiveConstraint. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::PlaneProjectiveConstraint< defaulttype::Vec2Types >. ◆ PointProjectiveConstraint. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::PointProjectiveConstraint< defaulttype::Vec6Types >. ◆ PositionBasedDynamicsProjectiveConstraint. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::PositionBasedDynamicsProjectiveConstraint< defaulttype::Rigid3Types >. ◆ SkeletalMotionProjectiveConstraint. template class SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API sofa::component::constraint::projective::SkeletalMotionProjectiveConstraint< defaulttype::Rigid3Types >. ◆ SkeletonBone. typedef int sofa::component::constraint::projective::SkeletonBone. Function Documentation. ◆ getModuleName(). const char * sofa::co,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html:14357,Patch,PatchTestMovementProjectiveConstraint,14357,api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html,1,['Patch'],['PatchTestMovementProjectiveConstraint']
Deployability,"nstraintFactor (const int index);  ; void doProjectPosition (Coord &x1, Coord &x2, bool freeRotations, unsigned index, Real positionFactor);  ; void doProjectVelocity (Deriv &x1, Deriv &x2, bool freeRotations, unsigned index, Real velocityFactor);  ; void doProjectResponse (Deriv &dx1, Deriv &dx2, bool freeRotations, bool twoway, unsigned index, Real responseFactor);  ; void calcRestRotations ();  ; SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_API void calcRestRotations ();  ; void doProjectPosition (Coord &x1, Coord &x2, bool freeRotations, unsigned index, Real positionFactor);  ; void doProjectPosition (Coord &x1, Coord &x2, bool freeRotations, unsigned index, Real positionFactor);  ; void doProjectVelocity (Deriv &x1, Deriv &x2, bool freeRotations, unsigned index, Real velocityFactor);  ; void doProjectVelocity (Deriv &x1, Deriv &x2, bool freeRotations, unsigned index, Real velocityFactor);  ; void doProjectResponse (Deriv &dx1, Deriv &dx2, bool freeRotations, bool twoway, unsigned index, Real responseFactor);  ; void doProjectResponse (Deriv &dx1, Deriv &dx2, bool freeRotations, bool twoway, unsigned index, Real responseFactor);  ; void calcRestRotations ();  ;  Protected Member Functions inherited from sofa::core::behavior::PairInteractionProjectiveConstraintSet< DataTypes >;  PairInteractionProjectiveConstraintSet (MechanicalState< DataTypes > *mm1=nullptr, MechanicalState< DataTypes > *mm2=nullptr);  ;  ~PairInteractionProjectiveConstraintSet () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseProjectiveConstraintSet;  BaseProjectiveConstraintSet ();  ;  ~BaseProjectiveConstraintSet () override;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_attach_projective_constraint.html:21060,update,update,21060,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_attach_projective_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_attach_projective_constraint.html,1,['update'],['update']
Deployability,"nt * ; createdPoints = nullptr . ). virtual . Duplicates the given edge. Only works if at least one of its points is adjacent to a border. ; Returnsthe number of newly created points, or -1 if the incision failed. . ◆ init(). void sofa::component::topology::container::dynamic::TriangleSetTopologyModifier::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::component::topology::container::dynamic::EdgeSetTopologyModifier. ◆ movePointsProcess(). void sofa::component::topology::container::dynamic::TriangleSetTopologyModifier::movePointsProcess ; (; const sofa::type::vector< PointID > & ; id, . const sofa::type::vector< sofa::type::vector< PointID > > & ; ancestors, . const sofa::type::vector< sofa::type::vector< SReal > > & ; coefs, . const bool ; moveDOF = true . ). overrideprotectedvirtual . Move input points indices to input new coords. Also propagate event and update edgesAroundVertex and trianglesAroundVertex for data handling. ; Parameters. id: list of indices to move ; ancestors list of ancestors to define relative new position ; coefs: barycoef to locate new coord relatively to ancestors. @moveDOF bool allowing the move (default true) . Reimplemented from sofa::component::topology::container::dynamic::EdgeSetTopologyModifier. ◆ propagateTopologicalEngineChanges(). void sofa::component::topology::container::dynamic::TriangleSetTopologyModifier::propagateTopologicalEngineChanges ; (; ). overrideprotectedvirtual . function to propagate topological change events by parsing the list of TopologyHandlers linked to this topology. ; Reimplemented from sofa::component::topology::container::dynamic::EdgeSetTopologyModifier. ◆ reinit(). void sofa::component::topology::container::dynamic::TriangleSetTopologyModifier::reinit ; (; ). overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseO",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_topology_modifier.html:36083,update,update,36083,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_topology_modifier.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_topology_modifier.html,1,['update'],['update']
Deployability,"nt counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(Vertex2Frame, DataTypes), core::DataEngine)sofa::component::engine::transform::Vertex2Frame< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::engine::transform::Vertex2Frame< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; Vertex2Frame()sofa::component::engine::transform::Vertex2Frame< DataTypes >protected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~Vertex2Frame() overridesofa::component::engine::transform::Vertex2Frame< DataTypes >inlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_vertex2_frame-members.html:13249,update,updateIfDirty,13249,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_vertex2_frame-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_vertex2_frame-members.html,3,['update'],"['updateIfDirty', 'updateInternal', 'updateLinks']"
Deployability,"nt is fired. Method to update . d_edgeMass using mass matrix coefficient when a new Quad is created. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when QUADSADDED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a Quad is removed. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when QUADSREMOVED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a new Tetrahedron is created. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when TETRAHEDRAADDED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a Tetrahedron is removed. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when TETRAHEDRAREMOVED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a new Hexahedron is created. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when HEXAHEDRAADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Hexahedron is removed. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when HEXAHEDRAREMOVED event is fired. . l_topology . Constructor details. ◆ MeshMatrixMass(). template<class DataTypes , class GeometricalTypes > . sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::MeshMatrixMass. protected . ◆ ~MeshMatrixMass(). template<class DataTypes , class GeometricalTypes > . sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::~MeshMatrixMass. overrideprotected . Function details. ◆ accFromF(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::accFromF ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; a, . const DataVecDeriv & ; f . ). overridevirtual . Reimplemented from sofa::core::behavior::Mass< DataTypes >. ◆ addForce(). t",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html:34384,update,update,34384,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,1,['update'],['update']
Deployability,"nt to its englobing coarser matrix More...;  ; virtual void computeMechanicalMatricesByCondensation (ElementStiffness &K, ElementMass &M, const int elementIndice, int level);  ; virtual void computeMechanicalMatricesByCondensation ();  ; void computeClassicalMechanicalMatrices (ElementStiffness &K, ElementMass &M, const Index elementIndice, int level);  ; void computeMaterialStiffness (MaterialStiffness &m, double youngModulus, double poissonRatio);  compute the hookean material matrix More...;  ;  Protected Member Functions inherited from sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >;  HexahedronFEMForceFieldAndMass ();  ;  Protected Member Functions inherited from sofa::core::behavior::Mass< DataTypes >;  Mass (MechanicalState< DataTypes > *mm=nullptr);  ;  ~Mass () override;  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data h",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedron_f_e_m_force_field_and_mass.html:24227,update,update,24227,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedron_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_non_uniform_hexahedron_f_e_m_force_field_and_mass.html,1,['update'],['update']
Deployability,"nt);  ; void SetVertexShaderFileName (const std::string &fileName);  ; void SetVertexShaderFromString (const std::string &string);  ; void SetFragmentShaderFileName (const std::string &fileName);  ; void SetFragmentShaderFromString (const std::string &string);  ; std::string GetShaderStageName (GLint target);  ; std::string LoadTextFile (const std::string &strFile);  This loads our text file for each shader and returns it in a string. More...;  ; void InitShaders ();  This function loads a vertex and fragment shader file. More...;  ; void forceReloadShaderFromFile (const std::string &filename);  ; void InitShaders (const std::string &strVertex, const std::string &strFragment);  This loads a vertex and fragment shader. More...;  ; GLint GetVariable (std::string strVariable);  This returns an ID for a variable in our shader. More...;  ; GLint GetAttributeVariable (std::string strVariable);  This returns an ID for an attribute variable in our shader. More...;  ; void Release ();  This releases our memory for our shader. More...;  . bool IsReady () const;  ; GLhandleARB GetProgram () const;  ; std::string GetShaderFileName (GLint type) const;  ; std::string GetShaderString (GLint type) const;  ; std::string GetHeader () const;  ; bool IsSet (GLint type) const;  ; GLhandleARB GetShaderID (GLint type) const;  ; std::string GetVertexShaderFileName () const;  ; GLhandleARB GetVertexShaderID () const;  ; std::string GetFragmentShaderFileName () const;  ; GLhandleARB GetFragmentShaderID () const;  . void SetInt (GLint variable, int newValue);  ; void SetFloat (GLint variable, float newValue);  . void SetInt2 (GLint variable, int i1, int i2);  ; void SetInt3 (GLint variable, int i1, int i2, int i3);  ; void SetInt4 (GLint variable, int i1, int i2, int i3, int i4);  ; void SetFloat2 (GLint variable, float v0, float v1);  ; void SetFloat3 (GLint variable, float v0, float v1, float v2);  ; void SetFloat4 (GLint variable, float v0, float v1, float v2, float v3);  . void SetIntVecto",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_g_l_s_l_shader.html:2299,release,releases,2299,api/master/sofa/html/classsofa_1_1gl_1_1_g_l_s_l_shader.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_g_l_s_l_shader.html,3,"['Release', 'release']","['Release', 'releases']"
Deployability,"nt::collision::response::mapper::BaseContactMapper< TDataTypes >inlinevirtual; addPointB(const Coord &P, Index elementId, Real &r, const sofa::type::Vec3 &)sofa::component::collision::response::mapper::BaseContactMapper< TDataTypes >inlinevirtual; addPointB(const Coord &P, Index elementId, Real &r)sofa::component::collision::response::mapper::BaseContactMapper< TDataTypes >inline; cleanup()=0sofa::component::collision::response::mapper::BaseContactMapper< TDataTypes >pure virtual; ContactMapperFactory typedefsofa::component::collision::response::mapper::BaseContactMapper< TDataTypes >; Coord typedefsofa::component::collision::response::mapper::BaseContactMapper< TDataTypes >; Create(core::CollisionModel *model, const std::string &name=std::string(""PenalityContactForceField""))sofa::component::collision::response::mapper::BaseContactMapper< TDataTypes >inlinestatic; create(ContactMapper< TCollisionModel, DataTypes > *, core::CollisionModel *arg)sofa::component::collision::response::mapper::BaseContactMapper< TDataTypes >inlinestatic; createMapping(const char *name=""contactPoints"")=0sofa::component::collision::response::mapper::BaseContactMapper< TDataTypes >pure virtual; DataTypes typedefsofa::component::collision::response::mapper::BaseContactMapper< TDataTypes >; MMechanicalState typedefsofa::component::collision::response::mapper::BaseContactMapper< TDataTypes >; Real typedefsofa::component::collision::response::mapper::BaseContactMapper< TDataTypes >; resize(Size size)=0sofa::component::collision::response::mapper::BaseContactMapper< TDataTypes >pure virtual; update()=0sofa::component::collision::response::mapper::BaseContactMapper< TDataTypes >pure virtual; updateXfree()=0sofa::component::collision::response::mapper::BaseContactMapper< TDataTypes >pure virtual; VecCoord typedefsofa::component::collision::response::mapper::BaseContactMapper< TDataTypes >; ~BaseContactMapper()sofa::component::collision::response::mapper::BaseContactMapper< TDataTypes >inlinevirtual.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_base_contact_mapper-members.html:1984,update,update,1984,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_base_contact_mapper-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_base_contact_mapper-members.html,2,['update'],"['update', 'updateXfree']"
Deployability,"nt::mass::DiagonalMass< DataTypes, GeometricalTypes >::getTotalMass ; (; ); const. inline . Method to update See alsod_vertexMass when a new Triangle is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TRIANGLESADDED event is fired. Method to update . d_vertexMass when a Triangle is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TRIANGLESREMOVED event is fired. Method to update . d_vertexMass when a new Quad is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSADDED event is fired. Method to update . d_vertexMass when a Quad is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSREMOVED event is fired. Method to update . d_vertexMass when a new Tetrahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAADDED event is fired. Method to update . d_vertexMass when a Tetrahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAREMOVED event is fired. Method to update . d_vertexMass when a new Hexahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when HEXAHEDRAADDED event is fired. Method to update . d_vertexMass when a Hexahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when HEXAHEDRAREMOVED event is fired. . ◆ handleEvent(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::handleEvent ; (; sofa::core::objectmodel::Event * ; ). overridevirtual . Handle an event. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ init() [1/5]. void sofa::component::mass::DiagonalMass< Rigid3Types >::init ; (; void ; ). virtual . Initialization method called at graph creation and modificatio",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html:46083,update,update,46083,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,1,['update'],['update']
Deployability,"nt::mechanicalload::TaitSurfacePressureForceField< DataTypes >; ForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState() overridesofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >virtual; TaitSurfacePressureForceField()sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >protected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >; updateFromTopology()sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >protectedvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ForceField() overridesofa::core::behavior::ForceField< DataTypes >protected; ~SingleStateAccessor() override=defaultsofa::core::behavior::SingleStateAccessor< DataTypes >protected; ~StateAccessor() override=defaultsofa::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field-members.html:21226,update,updateLinks,21226,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field-members.html,1,['update'],['updateLinks']
Deployability,"nt::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::minYoung. ◆ needUpdateTopology. template<class DataTypes > . bool sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::needUpdateTopology. protected . ◆ prevMaxStress. template<class DataTypes > . Real sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::prevMaxStress. ◆ R0. template<class DataTypes > . type::MatNoInit<3, 3, Real> sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::R0. protected . ◆ rotations. template<class DataTypes > . type::vector<Transformation> sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::rotations. protected . ◆ strainDisplacements. template<class DataTypes > . VecStrainDisplacement sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::strainDisplacements. protected . the strain-displacement matrices vector . ◆ updateVonMisesStress. template<class DataTypes > . bool sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::updateVonMisesStress. Constructor details. ◆ TetrahedronFEMForceField(). template<class DataTypes > . sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::TetrahedronFEMForceField. protected . ◆ ~TetrahedronFEMForceField(). template<class DataTypes > . sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::~TetrahedronFEMForceField. overrideprotected . Function details. ◆ accumulateForceLarge(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::accumulateForceLarge ; (; Vector & ; f, . const Vector & ; p, . typename VecElement::const_iterator ; elementIt, . Index ; elementIndex . ). inlineprotected . ◆ accumulateForcePolar(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForc",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedron_f_e_m_force_field.html:47739,update,updateVonMisesStress,47739,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedron_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedron_f_e_m_force_field.html,1,['update'],['updateVonMisesStress']
Deployability,"nt::visual::VisualModelImpl::setMesh ; (; helper::io::Mesh & ; m, . bool ; tex = false . ). ◆ setQuads(). void sofa::component::visual::VisualModelImpl::setQuads ; (; VecVisualQuad * ; q). inline . ◆ setRotation(). void sofa::component::visual::VisualModelImpl::setRotation ; (; SReal ; rx, . SReal ; ry, . SReal ; rz . ). inline . ◆ setScale(). void sofa::component::visual::VisualModelImpl::setScale ; (; SReal ; sx, . SReal ; sy, . SReal ; sz . ). inline . ◆ setTranslation(). void sofa::component::visual::VisualModelImpl::setTranslation ; (; SReal ; dx, . SReal ; dy, . SReal ; dz . ). inline . ◆ setTriangles(). void sofa::component::visual::VisualModelImpl::setTriangles ; (; VecVisualTriangle * ; t). inline . ◆ setUseNormals(). void sofa::component::visual::VisualModelImpl::setUseNormals ; (; bool ; val). inline . ◆ setVbitangents(). void sofa::component::visual::VisualModelImpl::setVbitangents ; (; VecCoord * ; v). inline . ◆ setVertices(). void sofa::component::visual::VisualModelImpl::setVertices ; (; VecCoord * ; x). inline . ◆ setVnormals(). void sofa::component::visual::VisualModelImpl::setVnormals ; (; VecDeriv * ; vn). inline . ◆ setVtangents(). void sofa::component::visual::VisualModelImpl::setVtangents ; (; VecCoord * ; v). inline . ◆ setVtexcoords(). void sofa::component::visual::VisualModelImpl::setVtexcoords ; (; VecTexCoord * ; vt). inline . ◆ SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(). sofa::component::visual::VisualModelImpl::SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER ; (; Index ; , . sofa::Index ;  . ). ◆ SOFA_CLASS2(). sofa::component::visual::VisualModelImpl::SOFA_CLASS2 ; (; VisualModelImpl ; , . core::visual::VisualModel ; , . sofa::core::visual::VisualState< defaulttype::Vec3Types > ;  . ). ◆ updateBuffers(). virtual void sofa::component::visual::VisualModelImpl::updateBuffers ; (; ). inlinevirtual . Reimplemented in sofa::gl::component::rendering3d::OglModel. sofacomponentvisualVisualModelImpl; Generated on Mon Nov 11 2024 03:13:09 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl.html:49355,update,updateBuffers,49355,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl.html,2,['update'],['updateBuffers']
Deployability,"ntType enum namesofa::core::visual::ShaderElement; shaderssofa::gl::component::shader::OglShaderElementprotected; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglIntVariable, OglVariable< int >)sofa::gl::component::shader::OglIntVariable; OglVariable< int >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< int >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< int >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglIntVariable()sofa::gl::component::shader::OglIntVariableinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< int >inlineprotected; ~ShaderEl",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_variable-members.html:13325,update,updateLinks,13325,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_variable-members.html,2,['update'],['updateLinks']
Deployability,"ntainer::dynamic::TetrahedronSetGeometryAlgorithms< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >; TriangleID typedefsofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >; triangleNumericalIntegrationsofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >protected; TrianglesAroundEdge typedefsofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >; TrianglesAroundVertex typedefsofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >; TriangleSetGeometryAlgorithms()sofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >inlineprotected; TrianglesInTetrahedron typedefsofa::component::topology::container::dynamic::TetrahedronSetGeometryAlgorithms< DataTypes >; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >; Vec3d typedefsofa::component::topology::container::dynamic::EdgeSetGeometryAlgorithms< DataTypes >; VecCoord typedefsofa::component::topology::container::dynamic::TetrahedronSetGeometryAlgorithms< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; writeMSHfile(const char *filename) constsofa::component::topology::container::dynamic::TetrahedronSetGeometryAlgorithms< DataTypes >inline;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_geometry_algorithms-members.html:41798,update,updateInternal,41798,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_geometry_algorithms-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_geometry_algorithms-members.html,1,['update'],['updateInternal']
Deployability,"ntext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; for_each(VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; getCategoryName() const overridesofa::simulation::UpdateContextVisitorinlinevirtual; getClassName() const overridesofa::simulation::UpdateVisualContextVisitorinlinevirtual; getInfos() constsofa::simulation::Visitorinlinevirtual; isThreadSafe() const overridesofa::simulation::UpdateContextVisitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::UpdateVisualContextVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; startingNodesofa::simulation::UpdateContextVisitorprotected; subsetsToManagesofa::simulation::V",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor-members.html:2853,Update,UpdateVisualContextVisitorvirtual,2853,api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor-members.html,1,['Update'],['UpdateVisualContextVisitorvirtual']
Deployability,"ntext;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (AbstractTransformMatrixEngine, core::DataEngine);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_abstract_transform_matrix_engine.html:2047,update,update,2047,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_abstract_transform_matrix_engine.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_abstract_transform_matrix_engine.html,1,['update'],['update']
Deployability,"nts. More...;  ; virtual void ApplyTopologyChange (const core::topology::HexahedraRemoved *);  Apply removing hexahedron elements. More...;  ; virtual void ApplyTopologyChange (const core::topology::HexahedraMoved_Removing *);  Apply removing function on moved hexahedron elements. More...;  ; virtual void ApplyTopologyChange (const core::topology::HexahedraMoved_Adding *);  Apply adding function on moved hexahedron elements. More...;  ; virtual void ApplyTopologyChange (const core::topology::HexahedraRenumbering *);  Apply renumbering on hexahedron elements. More...;  ; virtual void ApplyTopologyChange (const TopologyChangeElementInfo< Topology::Point >::EMoved_Adding *);  ; virtual void ApplyTopologyChange (const TopologyChangeElementInfo< Topology::Point >::EMoved_Removing *);  ; virtual void ApplyTopologyChange (const TopologyChangeElementInfo< Topology::Edge >::EMoved *);  ; virtual void ApplyTopologyChange (const TopologyChangeElementInfo< Topology::Triangle >::EMoved *);  ; virtual void ApplyTopologyChange (const TopologyChangeElementInfo< Topology::Quad >::EMoved *);  ; virtual void ApplyTopologyChange (const TopologyChangeElementInfo< Topology::Tetrahedron >::EMoved *);  ; virtual void ApplyTopologyChange (const TopologyChangeElementInfo< Topology::Hexahedron >::EMoved *);  ;  Public Member Functions inherited from sofa::core::topology::TopologyHandler; void update () override;  Update this value. More...;  ; virtual void ApplyTopologyChanges (const std::list< const core::topology::TopologyChange * > &_topologyChangeEvents, const Size _dataSize);  ; virtual void ApplyTopologyChange (const core::topology::EndingEvent *);  ; virtual void ApplyTopologyChange (const core::topology::PointsIndicesSwap *);  ; virtual void ApplyTopologyChange (const core::topology::PointsAdded *);  Apply adding points elements. More...;  ; virtual void ApplyTopologyChange (const core::topology::PointsRemoved *);  Apply removing points elements. More...;  ; virtual void ApplyTopology",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_data_handler.html:7692,update,update,7692,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_data_handler.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_data_handler.html,1,['update'],['update']
Deployability,"nt getSETotalSize ();  . Static Public Member Functions; static void setActiveTexture (unsigned short unit);  Utility function to set current active texture. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  OglTexture ();  ;  ~OglTexture () override;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture.html:15760,update,update,15760,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture.html,2,['update'],['update']
Deployability,"nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Index, sofa::Index)sofa::component::engine::select::IndicesFromValues< T >; SOFA_CLASS(SOFA_TEMPLATE(IndicesFromValues, T), core::DataEngine)sofa::component::engine::select::IndicesFromValues< T >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Value typedefsofa::component::engine::select::IndicesFromValues< T >; VecData typedefsofa::core::objectmodel::Base; VecIndex typedefsofa::component::engine::select::IndicesFromValues< T >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecValue typedefsofa::component::engine::select::IndicesFromValues< T >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~IndicesFromValues() overridesofa::component::engine::selec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_indices_from_values-members.html:12544,update,updateIfDirty,12544,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_indices_from_values-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_indices_from_values-members.html,1,['update'],['updateIfDirty']
Deployability,"nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Index, sofa::Index)sofa::component::engine::select::ValuesFromIndices< T >; SOFA_CLASS(SOFA_TEMPLATE(ValuesFromIndices, T), core::DataEngine)sofa::component::engine::select::ValuesFromIndices< T >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Value typedefsofa::component::engine::select::ValuesFromIndices< T >; ValuesFromIndices()sofa::component::engine::select::ValuesFromIndices< T >protected; VecData typedefsofa::core::objectmodel::Base; VecIndex typedefsofa::component::engine::select::ValuesFromIndices< T >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecValue typedefsofa::component::engine::select::ValuesFromIndices< T >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::obj",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_indices-members.html:12372,update,updateIfDirty,12372,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_indices-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_indices-members.html,1,['update'],['updateIfDirty']
Deployability,"nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  PairBoxROI ();  ;  ~PairBoxROI () override;  ; bool isPointInBox (const CPos &p, const Vec6 &b);  ; bool isPointInBox (const PointID &pid, const Vec6 &b);  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_pair_box_r_o_i.html:15156,update,update,15156,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_pair_box_r_o_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_pair_box_r_o_i.html,1,['update'],['update']
Deployability,"nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(RandomPointDistributionInSurface, DataTypes), core::DataEngine)sofa::component::engine::generate::RandomPointDistributionInSurface< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; testDistance(Coord p)sofa::component::engine::generate::RandomPointDistributionInSurface< DataTypes >protected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; trianglesOctreesofa::component::engine::generate::RandomPointDistributionInSurface< DataTypes >protected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::engine::generate::RandomPointDistributionInSurface< DataTypes >; VecCoord typedefsofa::component::engine::generate::RandomPointDistributionInSurface< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~RandomPointDistributionInSurface() overridesofa::component::engine::generate::RandomPointDistributionInSurface< DataTypes >inlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_random_point_distribution_in_surface-members.html:14791,update,updateLinks,14791,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_random_point_distribution_in_surface-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_random_point_distribution_in_surface-members.html,1,['update'],['updateLinks']
Deployability,"nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sizesofa::core::CollisionModelprotected; Size typedefsofa::core::CollisionModel; SOFA_ABSTRACT_CLASS(CollisionModel, objectmodel::BaseObject)sofa::core::CollisionModel; SOFA_CLASS(SOFA_TEMPLATE(PointCollisionModel, TDataTypes), core::CollisionModel)sofa::component::collision::geometry::PointCollisionModel< TDataTypes >; sofa::core::CollisionModel::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPHERE_TYPE enum valuesofa::core::CollisionModel; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; TETRAHEDRON_TYPE enum valuesofa::core::CollisionModel; Topology typedefsofa::core::CollisionModel; TPoint< DataTypes > classsofa::component::collision::geometry::PointCollisionModel< TDataTypes >friend; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; TRIANGLE_TYPE enum valuesofa::core::CollisionModel; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateNormals()sofa::component::collision::geometry::PointCollisionModel< TDataTypes >; userDatasofa::core::CollisionModelprotected; VecCoord typedefsofa::component::collision::geometry::PointCollisionModel< TDataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::collision::geometry::PointCollisionModel< TDataTypes >; VecIndex typedefsofa::component::collision::geometry::PointCollisionModel< TDataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; velocity(sofa::Index index) constsofa::component::collision::geometry::PointCollisionModel< TDataTypes >inline; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_point_collision_model-members.html:17114,update,updateInternal,17114,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_point_collision_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_point_collision_model-members.html,1,['update'],['updateInternal']
Deployability,"numWidgets_;  ; QHBoxLayout * gridLayout_;  . Public Member Functions;  QDisplayLinkWidget (QWidget *parent, core::objectmodel::BaseLink *link, const ModifyObjectFlags &flags);  ; unsigned int getNumWidgets () const;  . Static Protected Member Functions; static QIcon & RefreshIcon ();  . Signals; void WidgetDirty (bool);  ; void WidgetUpdate ();  ; void LinkUpdate ();  ; void LinkOwnerDirty (bool);  . Public Slots; void UpdateLink ();  ; void UpdateWidgets ();  . Attribute details. ◆ gridLayout_. QHBoxLayout* sofa::gui::qt::QDisplayLinkWidget::gridLayout_. protected . ◆ link_. core::objectmodel::BaseLink* sofa::gui::qt::QDisplayLinkWidget::link_. protected . ◆ linkinfowidget_. QDisplayLinkInfoWidget* sofa::gui::qt::QDisplayLinkWidget::linkinfowidget_. protected . ◆ linkwidget_. LinkWidget* sofa::gui::qt::QDisplayLinkWidget::linkwidget_. protected . ◆ numWidgets_. unsigned int sofa::gui::qt::QDisplayLinkWidget::numWidgets_. protected . Constructor details. ◆ QDisplayLinkWidget(). sofa::gui::qt::QDisplayLinkWidget::QDisplayLinkWidget ; (; QWidget * ; parent, . core::objectmodel::BaseLink * ; link, . const ModifyObjectFlags & ; flags . ). Function details. ◆ getNumWidgets(). unsigned int sofa::gui::qt::QDisplayLinkWidget::getNumWidgets ; (; ); const. inline . ◆ LinkOwnerDirty. void sofa::gui::qt::QDisplayLinkWidget::LinkOwnerDirty ; (; bool ; ). signal . ◆ LinkUpdate. void sofa::gui::qt::QDisplayLinkWidget::LinkUpdate ; (; ). signal . ◆ RefreshIcon(). static QIcon& sofa::gui::qt::QDisplayLinkWidget::RefreshIcon ; (; ). inlinestaticprotected . ◆ UpdateLink. void sofa::gui::qt::QDisplayLinkWidget::UpdateLink ; (; ). slot . ◆ UpdateWidgets. void sofa::gui::qt::QDisplayLinkWidget::UpdateWidgets ; (; ). slot . ◆ WidgetDirty. void sofa::gui::qt::QDisplayLinkWidget::WidgetDirty ; (; bool ; ). signal . ◆ WidgetUpdate. void sofa::gui::qt::QDisplayLinkWidget::WidgetUpdate ; (; ). signal . sofaguiqtQDisplayLinkWidget; Generated on Mon Nov 11 2024 03:23:43 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_display_link_widget.html:2147,Update,UpdateLink,2147,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_display_link_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_display_link_widget.html,4,['Update'],"['UpdateLink', 'UpdateWidgets']"
Deployability,"o a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  TetrahedronCollisionModel ();  ; virtual void updateFromTopology ();  ; void addTetraToDraw (const Tetrahedron &t, std::vector< sofa::type::Vec3 > &tetraVertices, std::vector< sofa::type::Vec3 > &normalVertices);  ;  Protected Member Functions inherited from sofa::core::CollisionModel;  CollisionModel ();  Constructor. More...;  ;  ~CollisionModel () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inheri",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_tetrahedron_collision_model.html:18996,update,updateFromTopology,18996,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_tetrahedron_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_tetrahedron_collision_model.html,1,['update'],['updateFromTopology']
Deployability,"o a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  MergeVectors ();  ;  ~MergeVectors () override;  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_vectors.html:13095,update,update,13095,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_vectors.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_vectors.html,1,['update'],['update']
Deployability,"o check precisely which input changed if needed.; **** Implementation good rules: (similar to DataEngine); //init addInput // indicate all inputs addOutput // indicate all outputs setDirtyValue(); // the engine must start dirty (of course, no output are up-to-date); DataTrackerCallback is usually created using the ""addUpdateCallback()"" method from Base. Thus the context is usually passed to the lambda making all public & private attributes & methods of the component accessible within the callback function. example:; addUpdateCallback(""name"", {&name}, [this](DataTracker& tracker){ // Increment the state counter but without changing the state. return d_componentState.getValue(); }, {&d_componentState});; A member function with the same signature - core::objectmodel::ComponentState(DataTracker&) - can also be used.; The update of the inputs is done for you before calling the callback, and they are also cleaned for you after the call. Thus there's no need to manually call updateAllInputsIfDirty() or cleanDirty() (see implementation of update() . Protected Attributes; std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> m_callback;  ; sofa::core::objectmodel::Base * m_owner {nullptr};  ;  Protected Attributes inherited from sofa::core::DataTrackerDDGNode; DataTracker m_dataTracker;  ;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions; void setCallback (std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> f);  ; void update () override;  Calls the callback when one of the data has changed. More...;  ; void setOwner (sofa::core::objectmodel::Base *owner);  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addO",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_callback.html:1630,update,updateAllInputsIfDirty,1630,api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_callback.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_callback.html,2,['update'],"['update', 'updateAllInputsIfDirty']"
Deployability,"o the given velocity vector. . ◆ computeForce() [1/2]. void sofa::simulation::common::MechanicalOperations::computeForce ; (; core::MultiVecDerivId ; result, . bool ; clear = true, . bool ; accumulate = true . ). Compute the current force (given the latest propagated position and velocity) . ◆ computeForce() [2/2]. void sofa::simulation::common::MechanicalOperations::computeForce ; (; SReal ; t, . core::MultiVecDerivId ; f, . core::MultiVecCoordId ; x, . core::MultiVecDerivId ; v . ). Compute f(x,v) at time t. Parameters x and v not const due to propagation through mappings. . ◆ getMatrixDimension() [1/2]. void sofa::simulation::common::MechanicalOperations::getMatrixDimension ; (; sofa::core::behavior::MultiMatrixAccessor * ; matrix). inline . ◆ getMatrixDimension() [2/2]. void sofa::simulation::common::MechanicalOperations::getMatrixDimension ; (; sofa::Size * const ; nbRow, . sofa::Size * const ; nbCol, . sofa::core::behavior::MultiMatrixAccessor * ; matrix = nullptr . ). ◆ integrateVelocity(). void sofa::simulation::common::MechanicalOperations::integrateVelocity ; (; core::MultiVecDerivId ; res, . core::ConstMultiVecCoordId ; x, . core::ConstMultiVecDerivId ; v, . SReal ; dt . ). res = x + v.dt . ◆ multiVector2BaseVector(). void sofa::simulation::common::MechanicalOperations::multiVector2BaseVector ; (; core::ConstMultiVecId ; src, . linearalgebra::BaseVector * ; dest, . const sofa::core::behavior::MultiMatrixAccessor * ; matrix . ). ◆ multiVectorPeqBaseVector(). void sofa::simulation::common::MechanicalOperations::multiVectorPeqBaseVector ; (; core::MultiVecDerivId ; dest, . const linearalgebra::BaseVector * ; src, . const sofa::core::behavior::MultiMatrixAccessor * ; matrix . ). ◆ operator const core::MechanicalParams *(). sofa::simulation::common::MechanicalOperations::operator const core::MechanicalParams * ; (; ). inline . ◆ operator->(). core::MechanicalParams* sofa::simulation::common::MechanicalOperations::operator-> ; (; ). inline . ◆ print() [1/2]. voi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html:12574,integrat,integrateVelocity,12574,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html,2,['integrat'],['integrateVelocity']
Deployability,"oading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ groups. sofa::type::vector<core::objectmodel::BaseContext::SPtr> sofa::core::collision::CollisionGroupManager::groups. protected . integration groups . ◆ storedGroups. std::map<Instance,sofa::type::vector<core::objectmodel::BaseContext::SPtr> > sofa::core::collision::CollisionGroupManager::storedGroups. protected . Constructor details. ◆ ~CollisionGroupManager(). sofa::core::collision::CollisionGroupManager::~CollisionGroupManager ; (; ). inlineoverrideprotected . Destructor. . Function details. ◆ changeInstance(). void sofa::core::collision::CollisionGroupManager::changeInstance ; (; Instance ; inst). inlineoverrideprotectedvirtual . Implements sofa::core::collision::CollisionAlgorithm. ◆ clearGroups(). virtual void sofa::core::collision::CollisionGroupManager::clearGroups ; (; objectmodel::BaseContext * ; scene). pure virtual . Clear the integration groups. . ◆ createGroups(). virtual void sofa::core::collision::CollisionGroupManager::createGroups ; (; objectmodel::BaseContext * ; scene, . const sofa::type::vector< Contact::SPtr > & ; contacts . ). pure virtual . Create the integration groups. . ◆ getGroups(). virtual con",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_group_manager.html:14685,integrat,integration,14685,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_group_manager.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_group_manager.html,1,['integrat'],['integration']
Deployability,"oat> sofa::component::visual::VisualGrid::d_thickness. Thickness of the lines in the grid. . ◆ internalPlane. PLANE sofa::component::visual::VisualGrid::internalPlane. protected . Pre-computed points used to draw the grid. . ◆ m_drawnPoints. sofa::type::vector<Vec3> sofa::component::visual::VisualGrid::m_drawnPoints. protected . Constructor details. ◆ VisualGrid(). sofa::component::visual::VisualGrid::VisualGrid ; (; ). ◆ ~VisualGrid(). sofa::component::visual::VisualGrid::~VisualGrid ; (; ). overridedefault . Function details. ◆ buildGrid(). void sofa::component::visual::VisualGrid::buildGrid ; (; ). ◆ doDrawVisual(). void sofa::component::visual::VisualGrid::doDrawVisual ; (; const core::visual::VisualParams * ; vparams). overridevirtual . Reimplemented from sofa::core::visual::VisualModel. ◆ doUpdateVisual(). void sofa::component::visual::VisualGrid::doUpdateVisual ; (; const core::visual::VisualParams * ; ). overridevirtual . Reimplemented from sofa::core::visual::VisualModel. ◆ init(). void sofa::component::visual::VisualGrid::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ reinit(). void sofa::component::visual::VisualGrid::reinit ; (; ). overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(). sofa::component::visual::VisualGrid::SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER ; (; Vector3 ; , . sofa::type::Vec3 ;  . ). ◆ SOFA_CLASS(). sofa::component::visual::VisualGrid::SOFA_CLASS ; (; VisualGrid ; , . VisualModel ;  . ). ◆ updateGrid(). void sofa::component::visual::VisualGrid::updateGrid ; (; ). Enum details. ◆ PLANE. enum sofa::component::visual::VisualGrid::PLANE. EnumeratorPLANE_X ; PLANE_Y ; PLANE_Z . sofacomponentvisualVisualGrid; Generated on Mon Nov 11 2024 03:10:10 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_grid.html:18086,update,updateGrid,18086,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_grid.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_grid.html,2,['update'],['updateGrid']
Deployability,"object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; MechanicalState< DataTypes > * getMState ();  ; const MechanicalState< DataTypes > * getMState () const;  . Protected Member Functions;  AngularSpringForceField ();  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void in",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_angular_spring_force_field.html:17526,update,update,17526,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_angular_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_angular_spring_force_field.html,1,['update'],['update']
Deployability,"objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(AddRecordedCameraButtonSetting, sofa::component::setting::MouseButtonSetting)sofa::gui::component::AddRecordedCameraButtonSetting; sofa::component::setting::MouseButtonSetting::SOFA_CLASS(MouseButtonSetting, core::objectmodel::ConfigurationSetting)sofa::component::setting::MouseButtonSetting; sofa::core::objectmodel::ConfigurationSetting::SOFA_CLASS(ConfigurationSetting, BaseObject)sofa::core::objectmodel::ConfigurationSetting; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject(",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_add_recorded_camera_button_setting-members.html:10081,Configurat,ConfigurationSetting,10081,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_add_recorded_camera_button_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_add_recorded_camera_button_setting-members.html,1,['Configurat'],['ConfigurationSetting']
Deployability,"objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseAddResourceRepository, sofa::core::objectmodel::BaseObject)sofa::component::sceneutility::BaseAddResourceRepository; SOFA_CLASS(AddPluginRepository, BaseAddResourceRepository)sofa::component::sceneutility::AddPluginRepository; sofa::component::sceneutility::BaseAddResourceRepository::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateRepositoryPath()sofa::component::sceneutility::BaseAddResourceRepository; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseAddResourceRepository() overridesofa::component::sceneutility::BaseAddResourceRepositoryprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_add_plugin_repository-members.html:10294,update,updateInternal,10294,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_add_plugin_repository-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_add_plugin_repository-members.html,3,['update'],"['updateInternal', 'updateLinks', 'updateRepositoryPath']"
Deployability,"objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SingleStateAccessor(MechanicalState< DataTypes > *mm=nullptr)sofa::core::behavior::SingleStateAccessor< DataTypes >inlineexplicitprotected; SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< DataTypes >; sofa::core::behavior::StateAccessor::SOFA_ABSTRACT_CLASS(StateAccessor, objectmodel::BaseObject)sofa::core::behavior::StateAccessor; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~SingleStateAccessor() override=defaultsofa::core::behavior::SingleStateAccessor< DataTypes >protected; ~StateAccessor() override=defaultsofa::core::behavior::StateAccessorprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_single_state_accessor-members.html:10470,update,updateInternal,10470,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_single_state_accessor-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_single_state_accessor-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglInt2Attribute, SOFA_TEMPLATE3(OglAttribute, 2, GL_INT, SOFA_TEMPLATE2(sofa::type::Vec, 2, int)))sofa::gl::component::shader::OglInt2Attribute; OglAttribute< 2, GL_INT, sofa::type::Vec< 2, int > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE3(OglAttribute, size, type, sofa::type::Vec< 2, int >), core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglAttribute< 2, GL_INT, sofa::type::Vec< 2, int > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglAttribute< 2, GL_INT, sofa::type::Vec< 2, int > >protected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglAttribute() overridesofa::gl::component::shader::OglAttribute< 2, GL_INT, sofa::type::Vec< 2, int > >protected; ~OglInt2Attribute()sofa::gl::component::shader::OglInt2Attributeinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~Sha",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int2_attribute-members.html:15596,update,updateVisual,15596,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int2_attribute-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int2_attribute-members.html,2,['update'],['updateVisual']
Deployability,"objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglInt3Attribute, SOFA_TEMPLATE3(OglAttribute, 3, GL_INT, SOFA_TEMPLATE2(sofa::type::Vec, 3, int)))sofa::gl::component::shader::OglInt3Attribute; OglAttribute< 3, GL_INT, sofa::type::Vec< 3, int > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE3(OglAttribute, size, type, sofa::type::Vec< 3, int >), core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglAttribute< 3, GL_INT, sofa::type::Vec< 3, int > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglAttribute< 3, GL_INT, sofa::type::Vec< 3, int > >protected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglAttribute() overridesofa::gl::component::shader::OglAttribute< 3, GL_INT, sofa::type::Vec< 3, int > >protected; ~OglInt3Attribute()sofa::gl::component::shader::OglInt3Attributeinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~Sha",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int3_attribute-members.html:15596,update,updateVisual,15596,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int3_attribute-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int3_attribute-members.html,2,['update'],['updateVisual']
Deployability,"objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglInt4Attribute, SOFA_TEMPLATE3(OglAttribute, 4, GL_INT, SOFA_TEMPLATE2(sofa::type::Vec, 4, int)))sofa::gl::component::shader::OglInt4Attribute; OglAttribute< 4, GL_INT, sofa::type::Vec< 4, int > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE3(OglAttribute, size, type, sofa::type::Vec< 4, int >), core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglAttribute< 4, GL_INT, sofa::type::Vec< 4, int > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglAttribute< 4, GL_INT, sofa::type::Vec< 4, int > >protected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglAttribute() overridesofa::gl::component::shader::OglAttribute< 4, GL_INT, sofa::type::Vec< 4, int > >protected; ~OglInt4Attribute()sofa::gl::component::shader::OglInt4Attributeinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~Sha",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int4_attribute-members.html:15596,update,updateVisual,15596,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int4_attribute-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int4_attribute-members.html,2,['update'],['updateVisual']
Deployability,"objectmodel::BaseObjectDescription *arg);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  PointCollisionModel ();  ;  Protected Member Functions inherited from sofa::core::CollisionModel;  CollisionModel ();  Constructor. More...;  ;  ~CollisionModel () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_point_collision_model.html:20662,update,update,20662,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_point_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_point_collision_model.html,1,['update'],['update']
Deployability,"objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglInt2Attribute, SOFA_TEMPLATE3(OglAttribute, 2, GL_INT, SOFA_TEMPLATE2(sofa::type::Vec, 2, int)))sofa::gl::component::shader::OglInt2Attribute; OglAttribute< 2, GL_INT, sofa::type::Vec< 2, int > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE3(OglAttribute, size, type, sofa::type::Vec< 2, int >), core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglAttribute< 2, GL_INT, sofa::type::Vec< 2, int > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglAttribute< 2, GL_INT, sofa::type::Vec< 2, int > >protected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglAttribute() overridesofa::gl::component::shader::OglAttribute< 2, GL_INT, sofa::type::Vec< 2, int > >protected; ~OglInt2Attribute()sofa::gl::component::shader::OglInt2Attributeinlinevirtual; ~OglShaderElem",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int2_attribute-members.html:15526,update,updateLinks,15526,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int2_attribute-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int2_attribute-members.html,2,['update'],['updateLinks']
Deployability,"objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglInt3Attribute, SOFA_TEMPLATE3(OglAttribute, 3, GL_INT, SOFA_TEMPLATE2(sofa::type::Vec, 3, int)))sofa::gl::component::shader::OglInt3Attribute; OglAttribute< 3, GL_INT, sofa::type::Vec< 3, int > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE3(OglAttribute, size, type, sofa::type::Vec< 3, int >), core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglAttribute< 3, GL_INT, sofa::type::Vec< 3, int > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglAttribute< 3, GL_INT, sofa::type::Vec< 3, int > >protected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglAttribute() overridesofa::gl::component::shader::OglAttribute< 3, GL_INT, sofa::type::Vec< 3, int > >protected; ~OglInt3Attribute()sofa::gl::component::shader::OglInt3Attributeinlinevirtual; ~OglShaderElem",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int3_attribute-members.html:15526,update,updateLinks,15526,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int3_attribute-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int3_attribute-members.html,2,['update'],['updateLinks']
Deployability,"objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglInt4Attribute, SOFA_TEMPLATE3(OglAttribute, 4, GL_INT, SOFA_TEMPLATE2(sofa::type::Vec, 4, int)))sofa::gl::component::shader::OglInt4Attribute; OglAttribute< 4, GL_INT, sofa::type::Vec< 4, int > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE3(OglAttribute, size, type, sofa::type::Vec< 4, int >), core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglAttribute< 4, GL_INT, sofa::type::Vec< 4, int > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglAttribute< 4, GL_INT, sofa::type::Vec< 4, int > >protected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglAttribute() overridesofa::gl::component::shader::OglAttribute< 4, GL_INT, sofa::type::Vec< 4, int > >protected; ~OglInt4Attribute()sofa::gl::component::shader::OglInt4Attributeinlinevirtual; ~OglShaderElem",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int4_attribute-members.html:15526,update,updateLinks,15526,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int4_attribute-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int4_attribute-members.html,2,['update'],['updateLinks']
Deployability,"objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglMatrix2Variable, OglVariable< type::vector< float > >)sofa::gl::component::shader::OglMatrix2Variable; OglVariable< type::vector< float > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< float > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; transposesofa::gl::component::shader::OglMatrix2Variable; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< float > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglMatrix2Variable()sofa::gl::component::shader::OglMatrix2Variableinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< type::vector< float > >inlineprotected; ~ShaderElement() overridesofa::core:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix2_variable-members.html:13780,update,updateVisual,13780,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix2_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix2_variable-members.html,2,['update'],['updateVisual']
Deployability,"objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(BaseROI, DataTypes), Inherit);  ; void init () final;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ; void draw (const core::visual::VisualParams *vparams) final;  Render internal data of this object, for debugging purposes. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible) final;  ; virtual void roiInit ();  ; virtual bool roiDoUpdate ();  ; virtual void roiDraw (const core::visual::VisualParams *);  ; virtual void roiComputeBBox (const core::ExecParams *, type::BoundingBox &);  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaini",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_base_r_o_i.html:6660,update,update,6660,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_base_r_o_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_base_r_o_i.html,1,['update'],['update']
Deployability,"objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(ExtrudeQuadsAndGenerateHexas, DataTypes), core::DataEngine);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ; void draw (const core::visual::VisualParams *) override;  Render internal data of this object, for debugging purposes. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_quads_and_generate_hexas.html:3814,update,update,3814,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_quads_and_generate_hexas.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_quads_and_generate_hexas.html,1,['update'],['update']
Deployability,"ockType , class TEigenSolverFactory > . sofa::component::linearsolver::direct::EigenDirectSparseSolver< TBlockType, TEigenSolverFactory >::~EigenDirectSparseSolver ; (; ). overridedefault . Function details. ◆ getSolverInfo(). template<class TBlockType , class EigenSolver > . Eigen::ComputationInfo sofa::component::linearsolver::direct::EigenDirectSparseSolver< TBlockType, EigenSolver >::getSolverInfo. protected . ◆ init(). template<class TBlockType , class EigenSolver > . void sofa::component::linearsolver::direct::EigenDirectSparseSolver< TBlockType, EigenSolver >::init ; (; void ; ). override . ◆ invert(). template<class TBlockType , class EigenSolver > . void sofa::component::linearsolver::direct::EigenDirectSparseSolver< TBlockType, EigenSolver >::invert ; (; Matrix & ; A). override . ◆ reinit(). template<class TBlockType , class EigenSolver > . void sofa::component::linearsolver::direct::EigenDirectSparseSolver< TBlockType, EigenSolver >::reinit. override . ◆ SOFA_ABSTRACT_CLASS(). template<class TBlockType , class TEigenSolverFactory > . sofa::component::linearsolver::direct::EigenDirectSparseSolver< TBlockType, TEigenSolverFactory >::SOFA_ABSTRACT_CLASS ; (; SOFA_TEMPLATE2(EigenDirectSparseSolver< TBlockType, TEigenSolverFactory >, TBlockType, EigenSolverFactory) ; , . SOFA_TEMPLATE(ordering::OrderingMethodAccessor, SOFA_TEMPLATE2(sofa::component::linearsolver::MatrixLinearSolver, Matrix, Vector)) ;  . ). ◆ solve(). template<class TBlockType , class EigenSolver > . void sofa::component::linearsolver::direct::EigenDirectSparseSolver< TBlockType, EigenSolver >::solve ; (; Matrix & ; A, . Vector & ; x, . Vector & ; b . ). override . ◆ updateSolverOderingMethod(). template<class TBlockType , class EigenSolver > . void sofa::component::linearsolver::direct::EigenDirectSparseSolver< TBlockType, EigenSolver >::updateSolverOderingMethod. protected . sofacomponentlinearsolverdirectEigenDirectSparseSolver; Generated on Mon Nov 11 2024 02:47:30 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1direct_1_1_eigen_direct_sparse_solver.html:9363,update,updateSolverOderingMethod,9363,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1direct_1_1_eigen_direct_sparse_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1direct_1_1_eigen_direct_sparse_solver.html,2,['update'],['updateSolverOderingMethod']
Deployability,"od called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  PlaneROI ();  ;  ~PlaneROI () override;  ; bool isPointInPlane (const CPos &p);  ; bool isPointInPlane (const PointID &pid);  ; bool isEdgeInPlane (const Edge &e);  ; bool isTriangleInPlane (const Triangle &t);  ; bool isTetrahedronInPlane (const Tetra &t);  ; void computePlane (unsigned int planeIndex);  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_plane_r_o_i.html:15668,update,update,15668,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_plane_r_o_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_plane_r_o_i.html,1,['update'],['update']
Deployability,od for column. ; Reimplemented in sofa::gui::qt::QLinkSimpleEdit. ◆ readFromLink(). virtual void sofa::gui::qt::LinkWidget::readFromLink ; (; ). protectedpure virtual . The implementation of this method tells how the widget reads the value of the link. ; Implemented in sofa::gui::qt::QLinkSimpleEdit. ◆ setLink(). virtual void sofa::gui::qt::LinkWidget::setLink ; (; MyLink * ; d). inlinevirtual . ◆ setWidgetDirty [1/2]. void sofa::gui::qt::LinkWidget::setWidgetDirty ; (; ). inlineslot . You call this slot anytime you want to specify that the widget value is out of sync with the underlying link value. . ◆ setWidgetDirty [2/2]. void sofa::gui::qt::LinkWidget::setWidgetDirty ; (; bool ; b). inlineslot . ◆ sizeWidget(). virtual unsigned int sofa::gui::qt::LinkWidget::sizeWidget ; (; ). inlinevirtual . Helper method to give a size. ; Reimplemented in sofa::gui::qt::QLinkSimpleEdit. ◆ updateLinkValue. void sofa::gui::qt::LinkWidget::updateLinkValue ; (; ). inlineslot . Checks that widget has been edited emit LinkOwnerDirty in case the name field has been modified . ◆ updateVisibility(). void sofa::gui::qt::LinkWidget::updateVisibility ; (; ). inline . ◆ updateWidgetValue. void sofa::gui::qt::LinkWidget::updateWidgetValue ; (; ). inlineslot . First checks that the widget is not currently being edited checks that the link has changed since the last time the widget has read the link value. ultimately read the link value. . ◆ WidgetDirty. void sofa::gui::qt::LinkWidget::WidgetDirty ; (; bool ; ). signal . Emitted each time setWidgetDirty is called. You can also emit it if you want to tell the widget value is out of sync with the underlying link value. . ◆ writeToLink(). virtual void sofa::gui::qt::LinkWidget::writeToLink ; (; ). protectedpure virtual . The implementation of this methods needs to tell how the widget can write its value in the link ; Implemented in sofa::gui::qt::QLinkSimpleEdit. sofaguiqtLinkWidget; Generated on Mon Nov 11 2024 03:23:42 for SOFA API by 1.9.1 . ,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_link_widget.html:4484,update,updateVisibility,4484,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_link_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_link_widget.html,8,['update'],"['updateVisibility', 'updateWidgetValue']"
Deployability,"ode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Attribute details. ◆ item. QTreeWidgetItem* sofa::gui::qt::ObjectStateListener::item. ◆ object. sofa::core::objectmodel::Base::SPtr sofa::gui::qt::ObjectStateListener::object. Constructor details. ◆ ObjectStateListener(). sofa::gui::qt::ObjectStateListener::ObjectStateListener ; (; QTreeWidgetItem * ; item_, . sofa::core::objectmodel::Base * ; object_ . ). ◆ ~ObjectStateListener(). sofa::gui::qt::ObjectStateListener::~ObjectStateListener ; (; ). override . Function details. ◆ notifyEndEdit(). void sofa::gui::qt::ObjectStateListener::notifyEndEdit ; (; ). overridevirtual . Notify links that the DGNode has been modified. ; Reimplemented from sofa::core::objectmodel::DDGNode. ◆ update(). void sofa::gui::qt::ObjectStateListener::update ; (; ). overridevirtual . Update this value. ; Implements sofa::core::objectmodel::DDGNode. sofaguiqtObjectStateListener; Generated on Mon Nov 11 2024 03:23:42 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_object_state_listener.html:3417,update,update,3417,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_object_state_listener.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_object_state_listener.html,5,"['Update', 'update']","['Update', 'update']"
Deployability,"odel)sofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >; sofa::core::CollisionModel::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPHERE_TYPE enum valuesofa::core::CollisionModel; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; TETRAHEDRON_TYPE enum valuesofa::core::CollisionModel; Topology typedefsofa::core::CollisionModel; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; TRIANGLE_TYPE enum valuesofa::core::CollisionModel; TriangleCollisionModel()sofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >protected; TriangleFlag enum namesofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >; TTriangle< DataTypes > classsofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >friend; updateFromTopology()sofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >protectedvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateNormals()sofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >protectedvirtual; userDatasofa::core::CollisionModelprotected; VecCoord typedefsofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; velocity(sofa::Index index) constsofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >inline; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObj",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model-members.html:19295,update,updateInternal,19295,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model-members.html,1,['update'],['updateInternal']
Deployability,"odel, objectmodel::BaseObject)sofa::core::visual::VisualModel; VisualState< defaulttype::Vec3Types >::SOFA_ABSTRACT_CLASS(BaseState, objectmodel::BaseObject)sofa::core::BaseState; sofa::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; VisualState< defaulttype::Vec3Types >::SOFA_CLASS(VisualState, SOFA_TEMPLATE(core::State, defaulttype::Vec3Types))sofa::core::visual::VisualState< defaulttype::Vec3Types >; sofa::core::State::SOFA_CLASS(SOFA_TEMPLATE(State, TDataTypes), BaseState)sofa::core::State< TDataTypes >; SOFA_CLASS2(DataDisplay, core::visual::VisualModel, Vec3State)sofa::gl::component::rendering3d::DataDisplay; SPtr typedefsofa::core::objectmodel::Base; statesofa::gl::component::rendering3d::DataDisplay; State()sofa::core::State< TDataTypes >protected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::gl::component::rendering3d::DataDisplay; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; Vec3State typedefsofa::gl::component::rendering3d::DataDisplay; VecCellData typedefsofa::gl::component::rendering3d::DataDisplay; VecCoord typedefsofa::core::visual::VisualState< defaulttype::Vec3Types >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::core::visual::VisualState< defaulttype::Vec3Types >; VecLink typedefsofa::core::objectmodel::Base; VecPointData typedefsofa::gl::component::rendering3d::DataDisplay; VecReal typedefsofa::core::State< TDataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; VisualState()sofa::core::visual::VisualState< defaulttype::Vec3Types >; write(core::VecCoordId v) overridesofa::core::visual::VisualState< defaulttype::Vec3Types ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_data_display-members.html:15683,update,updateInternal,15683,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_data_display-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_data_display-members.html,1,['update'],['updateInternal']
Deployability,"odel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; SOFA_CLASS(OglViewport, core::visual::VisualManager)sofa::gl::component::rendering2d::OglViewport; sofa::core::visual::VisualManager::SOFA_CLASS(VisualManager, VisualModel)sofa::core::visual::VisualManager; sofa::core::visual::VisualModel::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; Viewport typedefsofa::gl::component::rendering2d::OglViewport; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglViewport() overridesofa::gl::component::rendering2d::OglViewportprotected; ~VisualManager() overridesofa::core::visual::VisualManagerinlineprotected; ~VisualModel() overridesofa::core::visual::VisualModelinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering2d_1_1_ogl_viewport-members.html:12976,update,updateLinks,12976,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering2d_1_1_ogl_viewport-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering2d_1_1_ogl_viewport-members.html,3,['update'],"['updateLinks', 'updateVisual']"
Deployability,"odel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (CollisionGroupManager, CollisionAlgorithm);  ; virtual void createGroups (objectmodel::BaseContext *scene, const sofa::type::vector< Contact::SPtr > &contacts)=0;  Create the integration groups. More...;  ; virtual void clearGroups (objectmodel::BaseContext *scene)=0;  Clear the integration groups. More...;  ; virtual const sofa::type::vector< objectmodel::BaseContext::SPtr > & getGroups ();  Get the integration groups. More...;  ;  Public Member Functions inherited from sofa::core::collision::CollisionAlgorithm;  SOFA_ABSTRACT_CLASS (CollisionAlgorithm, objectmodel::BaseObject);  ; virtual void setInstance (Instance inst);  Allow to store multiple internal states by specifying a different collision pipeline 'instance'. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (Base",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_group_manager.html:2735,pipeline,pipeline,2735,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_group_manager.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_group_manager.html,1,['pipeline'],['pipeline']
Deployability,"odel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; TETRAHEDRON_TYPE enum valuesofa::core::CollisionModel; Topology typedefsofa::core::CollisionModel; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Tri typedefsofa::helper::TriangleOctreeRoot; TRIANGLE_TYPE enum valuesofa::core::CollisionModel; TriangleCollisionModel()sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >protected; TriangleFlag enum namesofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >; TriangleOctreeModel()sofa::component::collision::geometry::TriangleOctreeModelprotected; TriangleOctreeRoot()sofa::helper::TriangleOctreeRoot; updateFromTopology()sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >protectedvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateNormals()sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >protectedvirtual; userDatasofa::core::CollisionModelprotected; TriangleCollisionModel< sofa::VecCoord typedefsofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >; sofa::helper::TriangleOctreeRoot::VecCoord typedefsofa::helper::TriangleOctreeRoot; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; velocity(sofa::Index index) constsofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >inline; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotecte",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_octree_model-members.html:21402,update,updateNormals,21402,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_octree_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_octree_model-members.html,1,['update'],['updateNormals']
Deployability,"odel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; for_each(VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; getCategoryName() const overridesofa::simulation::UpdateContextVisitorinlinevirtual; getClassName() const overridesofa::simulation::UpdateContextVisitorinlinevirtual; getInfos() constsofa::simulation::Visitorinlinevirtual; isThreadSafe() const overridesofa::simulation::UpdateContextVisitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::UpdateContextVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor-members.html:2321,Update,UpdateContextVisitorinlinevirtual,2321,api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor-members.html,1,['Update'],['UpdateContextVisitorinlinevirtual']
Deployability,"odel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; for_each(VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; getCategoryName() const overridesofa::simulation::UpdateMappingVisitorinlinevirtual; getClassName() const overridesofa::simulation::UpdateMappingVisitorinlinevirtual; getInfos() constsofa::simulation::Visitorinlinevirtual; isThreadSafe() const overridesofa::simulation::UpdateMappingVisitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processMapping(simulation::Node *node, core::BaseMapping *obj)sofa::simulation::UpdateMappingVisitor; processMechanicalMapping(simulation::Node *, core::BaseMapping *obj)sofa::simulation::UpdateMappingVisitor; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::UpdateMappingVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::V",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor-members.html:2321,Update,UpdateMappingVisitorinlinevirtual,2321,api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor-members.html,1,['Update'],['UpdateMappingVisitorinlinevirtual']
Deployability,"odel::BaseNodeprotected; setSleeping(bool val) overridesofa::simulation::Nodevirtual; setTime(SReal t)sofa::core::objectmodel::Contextvirtual; setTopology(BaseObject *)sofa::core::objectmodel::BaseContextinlinevirtual; shaderssofa::simulation::Node; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; Single typedefsofa::simulation::Node; SOFA_ABSTRACT_CLASS(BaseNode, Base)sofa::core::objectmodel::BaseNode; SOFA_ABSTRACT_CLASS2(Node, BaseNode, Context)sofa::simulation::Node; SOFA_CLASS(Context, BaseContext)sofa::core::objectmodel::Context; sofa::core::objectmodel::BaseContext::SOFA_CLASS(BaseContext, Base)sofa::core::objectmodel::BaseContext; solversofa::simulation::Node; SPtr typedefsofa::core::objectmodel::Base; statesofa::simulation::Node; time_sofa::core::objectmodel::Context; topologysofa::simulation::Node; topologyObjectsofa::simulation::Node; unsortedsofa::simulation::Node; updateContext()sofa::simulation::Nodevirtual; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateSimulationContext()sofa::simulation::Nodevirtual; updateVisualContext()sofa::simulation::Nodevirtual; Vec3 typedefsofa::core::objectmodel::BaseContext; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VisitorScheduler classsofa::simulation::Nodefriend; visualLoopsofa::simulation::Node; visualManagersofa::simulation::Node; visualModelsofa::simulation::Node; worldGravity_sofa::core::objectmodel::Context; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseContext() overridesofa::core::objectmodel::BaseContextprotected; ~BaseNode() overridesofa::core::objectmodel::BaseNodeprotected; ~Context() overridesofa::core::objectmodel::Contextinlineprotectedvirtual; ~Node() overridesofa::simulation::Node",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html:20534,update,updateLinks,20534,api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html,2,['update'],['updateLinks']
Deployability,"odel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ CollisionResponseVisitor(). sofa::simulation::CollisionResponseVisitor::CollisionResponseVisitor ; (; const core::ExecParams * ; params). inline . Function details. ◆ getClassName(). const char* sofa::simulation::CollisionResponseVisitor::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::CollisionVisitor. ◆ processCollisionPipeline(). void sofa::simulation::CollisionResponseVisitor::processCollisionPipeline ; (; simulation::Node * ; node, . core::collision::Pipeline * ; obj . ). overridevirtual . Reimplemented from sofa::simulation::CollisionVisitor. sofasimulationCollisionResponseVisitor; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_response_visitor.html:5688,Pipeline,Pipeline,5688,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_response_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_response_visitor.html,1,['Pipeline'],['Pipeline']
Deployability,"odel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(PlaneROI, DataTypes), core::DataEngine)sofa::component::engine::select::PlaneROI< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; Tetra typedefsofa::component::engine::select::PlaneROI< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::engine::select::PlaneROI< DataTypes >; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec10 typedefsofa::component::engine::select::PlaneROI< DataTypes >; Vec3 typedefsofa::component::engine::select::PlaneROI< DataTypes >; Vec6 typedefsofa::component::engine::select::PlaneROI< DataTypes >; VecCoord typedefsofa::component::engine::select::PlaneROI< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_plane_r_o_i-members.html:14962,update,updateIfDirty,14962,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_plane_r_o_i-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_plane_r_o_i-members.html,1,['update'],['updateIfDirty']
Deployability,odel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getNarrowPhaseDetection() constsofa::core::collision::Pipeline; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getResponseList() const =0sofa::core::collision::Pipelinepure virtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; groupManagersofa::core::collision::Pipelineprotected; groupManagerssofa::core::collision::Pipelineprotected; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTopologyChange(core::topology::Topology *t)sofa::core::objectmodel::BaseObjectvirtual; hasDataChanged(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; hasField(const std::string &attribute) constsofa::core::objectmodel::Basevirtual; hasTag(Tag t) constsofa::core::objectmodel::Base; init() overridesofa::simulation::PipelineImplvirtual; initData(::sofa::core::objec,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html:5665,Pipeline,Pipelinepure,5665,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,1,['Pipeline'],['Pipelinepure']
Deployability,"odel::Baseinline; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseprotected; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags)sofa::core::objectmodel::Baseprotected; initData0(Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinlineprotected; initGnuplot(const std::string path) overridesofa::core::behavior::Mass< DataTypes >virtual; initLarge(const int i)sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >protected; initPolar(const int i)sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >protected; insertInNode(objectmodel::BaseNode *node) overridesofa::core::behavior::Mass< DataTypes >inlinevirtual; integrateStiffness(int signx0, int signy0, int signz0, int signx1, int signy1, int signz1, const Real u, const Real v, const Real w, const Mat33 &J_1)sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >protected; integrateVolume(int signx, int signy, int signz, Real l0, Real l1, Real l2)sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >protected; isCompliancesofa::core::behavior::BaseForceField; isComponentStateValid() constsofa::core::objectmodel::Baseinline; isDiagonal() const overridesofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >inlinevirtual; l_contextsofa::core::objectmodel::BaseObjectprotected; l_mastersofa::core::objectmodel::BaseObjectprotected; l_mechanicalStatessofa::core::behavior::StateAccessorprotected; l_slavessofa::core::objectmodel::BaseObjectprotected; l_topologysofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >; LARGE enum",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field_and_mass-members.html:22211,integrat,integrateStiffness,22211,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field_and_mass-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field_and_mass-members.html,1,['integrat'],['integrateStiffness']
Deployability,"odel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(Contact, objectmodel::BaseObject)sofa::core::collision::Contact; SOFA_CLASS(SOFA_TEMPLATE2(StickContactConstraint, TCollisionModel1, TCollisionModel2), core::collision::Contact)sofa::component::collision::response::contact::StickContactConstraint< TCollisionModel1, TCollisionModel2 >; sofa::core::collision::Contact::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; StickContactConstraint()sofa::component::collision::response::contact::StickContactConstraint< TCollisionModel1, TCollisionModel2 >protected; StickContactConstraint(CollisionModel1 *model1, CollisionModel2 *model2, Intersection *intersectionMethod)sofa::component::collision::response::contact::StickContactConstraint< TCollisionModel1, TCollisionModel2 >protected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; TOutputVector typedefsofa::component::collision::response::contact::StickContactConstraint< TCollisionModel1, TCollisionModel2 >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~Contact() overridesofa::core::collision::Contactinlineprotected; ~ContactIdentifier()=defaultsofa::component::collision::response::contact::ContactIdentifiervirtual; ~StickContactConstraint() overridesofa::component::collision::response::contact::StickContactConstraint< TCollisionModel1, TCollisionModel2 >protected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_stick_contact_constraint-members.html:15038,update,updateInternal,15038,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_stick_contact_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_stick_contact_constraint-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"odel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; SOFA_CLASS(VisualManagerSecondaryPass, VisualManagerPass)sofa::gl::component::shader::VisualManagerSecondaryPass; sofa::gl::component::shader::VisualManagerPass::SOFA_CLASS(VisualManagerPass, core::visual::VisualManager)sofa::gl::component::shader::VisualManagerPass; sofa::core::visual::VisualManager::SOFA_CLASS(VisualManager, VisualModel)sofa::core::visual::VisualManager; sofa::core::visual::VisualModel::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; traceFullScreenQuad()sofa::gl::component::shader::VisualManagerSecondaryPassprotectedvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; unbindInput()sofa::gl::component::shader::VisualManagerSecondaryPass; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualManagerPass()sofa::gl::component::shader::VisualManagerPass; VisualManagerSecondaryPass()sofa::gl::component::shader::VisualManagerSecondaryPassprotected; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~VisualManager() overridesofa::core::visual::VisualManagerinlineprotected; ~VisualManagerPass() overridesofa::gl::component::shader::VisualManage",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_visual_manager_secondary_pass-members.html:13664,update,updateLinks,13664,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_visual_manager_secondary_pass-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_visual_manager_secondary_pass-members.html,2,['update'],['updateLinks']
Deployability,"odel::Data< void * >protected; setAutoLink(bool b)sofa::core::objectmodel::BaseDatainline; setDirtyOutputs()sofa::core::objectmodel::DDGNodevirtual; setDirtyValue()sofa::core::objectmodel::DDGNodevirtual; setDisplayed(bool b)sofa::core::objectmodel::BaseDatainline; setFlag(DataFlagsEnum flag, bool b)sofa::core::objectmodel::BaseDatainline; setGroup(const std::string &val)sofa::core::objectmodel::BaseDatainline; setHelp(const std::string &val)sofa::core::objectmodel::BaseDatainline; setName(const std::string &name)sofa::core::objectmodel::BaseDatainline; setOwner(Base *o)sofa::core::objectmodel::BaseDatainline; setParent(BaseData *parent, const std::string &path=std::string())sofa::core::objectmodel::BaseData; setParent(const std::string &path)sofa::core::objectmodel::BaseData; setPersistent(bool b)sofa::core::objectmodel::BaseDatainline; setReadOnly(bool b)sofa::core::objectmodel::BaseDatainline; setRequired(bool b)sofa::core::objectmodel::BaseDatainline; setValue(const void * &value)sofa::core::objectmodel::Data< void * >inline; setWidget(const char *val)sofa::core::objectmodel::BaseDatainline; SOFA_ATTRIBUTE_DEPRECATED__UNNECESSARY_PARAMETER_IN_TYPENAME() static stdsofa::core::objectmodel::BaseDatainline; templateName()sofa::core::objectmodel::Data< void * >inlinestatic; typeName()sofa::core::objectmodel::BaseDatainlinestatic; unset()sofa::core::objectmodel::BaseDatainline; update() overridesofa::core::objectmodel::BaseDatavirtual; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateValueFromLink(const BaseData *data)sofa::core::objectmodel::BaseData; validParent(const BaseData *parent)sofa::core::objectmodel::BaseDatavirtual; value_type typedefsofa::core::objectmodel::Data< void * >; ValueType typedefsofa::core::objectmodel::Data< void * >protected; widgetsofa::core::objectmodel::BaseData; ~BaseData() overridesofa::core::objectmodel::BaseData; ~Data() overridesofa::core::objectmodel::Data< void * >inline; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data-members.html:8459,update,update,8459,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data-members.html,3,['update'],"['update', 'updateIfDirty', 'updateValueFromLink']"
Deployability,"odel::RenamedData< bool > m_fixMergedUVSeams;  ; sofa::core::objectmodel::RenamedData< bool > m_keepLines;  ; sofa::core::objectmodel::RenamedData< VecCoord > m_vertices2;  ; sofa::core::objectmodel::RenamedData< VecTexCoord > m_vtexcoords;  ; sofa::core::objectmodel::RenamedData< VecCoord > m_vtangents;  ; sofa::core::objectmodel::RenamedData< VecCoord > m_vbitangents;  ; sofa::core::objectmodel::RenamedData< VecVisualEdge > m_edges;  ; sofa::core::objectmodel::RenamedData< VecVisualTriangle > m_triangles;  ; sofa::core::objectmodel::RenamedData< VecVisualQuad > m_quads;  ; sofa::core::objectmodel::RenamedData< type::vector< visual_index_type > > m_vertPosIdx;  ; sofa::core::objectmodel::RenamedData< type::vector< visual_index_type > > m_vertNormIdx;  ; Data< bool > d_initRestPositions;  True if rest positions must be initialized with initial positions. More...;  ; Data< bool > d_useNormals;  True if normals should be read from file. More...;  ; Data< bool > d_updateNormals;  True if normals should be updated at each iteration. More...;  ; Data< bool > d_computeTangents;  True if tangents should be computed at startup. More...;  ; Data< bool > d_updateTangents;  True if tangents should be updated at each iteration. More...;  ; Data< bool > d_handleDynamicTopology;  True if topological changes should be handled. More...;  ; Data< bool > d_fixMergedUVSeams;  True if UV seams should be handled even when duplicate UVs are merged. More...;  ; Data< bool > d_keepLines;  keep and draw lines (false by default) More...;  ; Data< VecCoord > d_vertices2;  vertices of the model (only if vertices have multiple normals/texcoords, otherwise positions are used) More...;  ; core::topology::PointData< VecTexCoord > d_vtexcoords;  coordinates of the texture More...;  ; core::topology::PointData< VecCoord > d_vtangents;  tangents for normal mapping More...;  ; core::topology::PointData< VecCoord > d_vbitangents;  tangents for normal mapping More...;  ; core::topology::EdgeData< VecVis",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl.html:2676,update,updated,2676,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl.html,5,['update'],['updated']
Deployability,odelImpl; State()sofa::core::State< TDataTypes >protected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; texsofa::gl::component::rendering3d::OglModelprotected; TexCoord typedefsofa::component::visual::VisualModelImpl; texturenamesofa::component::visual::VisualModelImpl; texturessofa::gl::component::rendering3d::OglModelprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; trianglesRevisionsofa::gl::component::rendering3d::OglModelprotected; update()sofa::gl::component::rendering3d::MergeVisualModelsinlineprotected; updateBuffers() overridesofa::gl::component::rendering3d::OglModelvirtual; updateEdgesIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateQuadsIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateTrianglesIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateVertexBuffer()sofa::gl::component::rendering3d::OglModel; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; useEdgessofa::gl::component::rendering3d::OglModelprotected; useQuadssofa::gl::component::rendering3d::OglModelprotected; useTopologysofa::component::visual::VisualModelImpl; useTrianglessofa::gl::component::rendering3d::OglModelprotected; vbosofa::gl::component::rendering3d::OglModelprotected; VBOGenDonesofa::gl::component::rendering3d::OglModelprotected; Vec3Real typedefsofa::component::visual::VisualModelImpl; VecCoord typedefsofa::component::visual::VisualModelImpl; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::visual::VisualModelImpl; VecLink typedefsofa::core::objectmodel::Base; VecReal typedefsofa::core::State< TDataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecTexCoord typedefsofa::component::visual::VisualModelImpl; VecVisualEdge typedefsofa::comp,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models-members.html:27726,update,updateVertexBuffer,27726,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models-members.html,1,['update'],['updateVertexBuffer']
Deployability,"odified. More...;  ; void doUpdateVisual (const core::visual::VisualParams *vparams) override;  ; GLfloat getZNear ();  ; GLfloat getZFar ();  ; virtual void postDrawShadow ();  ; virtual GLuint getShadowMapSize ();  ; const GLfloat * getOpenGLProjectionMatrix ();  ; const GLfloat * getOpenGLModelViewMatrix ();  ; virtual const sofa::type::Vec3 getPosition ();  ; virtual unsigned short getShadowTextureUnit ();  ; virtual void setShadowTextureUnit (const unsigned short unit);  ; virtual float getShadowFactor ();  ; virtual float getVSMLightBleeding ();  ; virtual float getVSMMinVariance ();  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void fwdDraw (VisualParams *);  Called before objects in the current branch are displayed. More...;  ; virtual void bwdDraw (VisualParams *);  Called after objects in the current branch are displayed. More...;  ; virtual void drawTransparent (const VisualParams *);  Display transparent surfaces. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const S",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_directional_light.html:4942,update,updateVisual,4942,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_directional_light.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_directional_light.html,2,['update'],"['update', 'updateVisual']"
Deployability,of MedFIT 2019. /sofa-presented-at-medteq-2018-in-montreal; ; SOFA – SOFA presented at MedTeq 2018 in Montreal. /sofa-presented-in-webinar-radiologie-numerique-french; ; SOFA – SOFA presented in webinar “Radiologie Numérique” [French]. /sofa-soon-on-github; ; SOFA – SOFA soon on GitHub. /sofa-stc5-coming-soon; ; SOFA – SOFA STC#5 in Strasbourg. /sofa-technical-committee-3-upcoming-raise-your-expectations; ; SOFA – SOFA Technical Committee #3 upcoming: raise your expectations!. /sofa-technologies-exhibited-amd-learning-day-in-paris; ; SOFA – SOFA technologies exhibited @ AMD Learning Day in Paris. /sofa-training-discover-and-learn-sofa-at-ismar2017; ; SOFA – SOFA training: discover and learn SOFA at ISMAR 2017. /sofa-v16-12-has-been-released; ; SOFA – SOFA v16.12 has been released!. /sofa-v17-06-has-been-released; ; SOFA – SOFA v17.06 has been released!. /sofa-v17-12-has-been-released; ; SOFA – SOFA v17.12 has been released!. /sofa-v18-06-has-been-released; ; SOFA – SOFA v18.06 has been released!. /sofa-v18-12-has-been-released; ; SOFA – SOFA v18.12 has been released!. /sofa-v19-06-has-been-released; ; SOFA – SOFA v19.06 has been released!. /sofa-v19-12-has-been-released; ; SOFA – SOFA v19.12 has been released!. /sofa-v20-06-has-been-released; ; SOFA – SOFA v20.06 has been released!. /sofa-v20-12-has-been-released; ; SOFA – SOFA v20.12 has been released!. /sofa-v21-06-has-been-released; ; SOFA – SOFA v21.06 has been released!. /sofa-v21-12-has-been-released; ; SOFA – SOFA v21.12 has been released!. /sofa-v22-06-has-been-released; ; SOFA – SOFA v22.06 has been released!. /sofa-v22-12-has-been-released; ; SOFA – SOFA v22.12 has been released!. /sofa-v23-06-has-been-released; ; SOFA – SOFA v23.06 has been released!. /sofa-v23-12-has-been-released; ; SOFA – SOFA v23.12 has been released!. /sofa-v24-06-has-been-released; ; SOFA – SOFA v24.06 has been released!. /sofa-week-2018-experience; ; SOFA – SOFA Week 2018 Experience. /sofa-week-2021-register-now; ; SOFA – SOFA Week,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:8925,release,released,8925,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['release'],['released']
Deployability,"of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::component::haptics::MechanicalStateForceFeedback< TDataTypes >;  MechanicalStateForceFeedback (void);  ;  Protected Member Functions inherited from sofa::component::haptics::ForceFeedback;  ForceFeedback ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseDat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_null_force_feedback_t.html:13381,update,update,13381,api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_null_force_feedback_t.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_null_force_feedback_t.html,1,['update'],['update']
Deployability,"of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::helper::TriangleOctreeRoot;  TriangleOctreeRoot ();  ;  ~TriangleOctreeRoot ();  ; void buildOctree ();  ; void buildOctree (const SeqTriangles *triangles, const VecCoord *pos);  . Protected Member Functions;  TriangleOctreeModel ();  ;  Protected Member Functions inherited from sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >;  TriangleCollisionModel ();  ; virtual void updateFromTopology ();  ; virtual void updateNormals ();  ;  Protected Member Functions inherited from sofa::core::CollisionModel;  CollisionModel ();  Constructor. More...;  ;  ~CollisionModel () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protect",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_octree_model.html:18532,update,updateFromTopology,18532,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_octree_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_octree_model.html,2,['update'],"['updateFromTopology', 'updateNormals']"
Deployability,"of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void fwdDraw (VisualParams *);  Called before objects in the current branch are displayed. More...;  ; virtual void bwdDraw (VisualParams *);  Called after objects in the current branch are displayed. More...;  ; virtual void drawTransparent (const VisualParams *);  Display transparent surfaces. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const type::Quat< SReal >);  ; virt",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_o_i_t_shader.html:13589,update,updateVisual,13589,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_o_i_t_shader.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_o_i_t_shader.html,6,['update'],['updateVisual']
Deployability,"ofa::core::CollisionModel::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPHERE_TYPE enum valuesofa::core::CollisionModel; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; TETRAHEDRON_TYPE enum valuesofa::core::CollisionModel; Topology typedefsofa::core::CollisionModel; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; TRIANGLE_TYPE enum valuesofa::core::CollisionModel; TriangleCollisionModel()sofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >protected; TriangleFlag enum namesofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >; TTriangle< DataTypes > classsofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >friend; updateFromTopology()sofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >protectedvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateNormals()sofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >protectedvirtual; userDatasofa::core::CollisionModelprotected; VecCoord typedefsofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; velocity(sofa::Index index) constsofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >inline; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~CollisionModel() overridesofa::core::CollisionModelinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model-members.html:19418,update,updateNormals,19418,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model-members.html,1,['update'],['updateNormals']
Deployability,"ofa::core::behavior::StateAccessor; sofa::core::behavior::SingleStateAccessor::SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(PolynomialRestShapeSpringsForceField, DataTypes), SOFA_TEMPLATE(core::behavior::ForceField, DataTypes))sofa::component::solidmechanics::spring::PolynomialRestShapeSpringsForceField< DataTypes >; ForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::solidmechanics::spring::PolynomialRestShapeSpringsForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::spring::PolynomialRestShapeSpringsForceField< DataTypes >; VecIndex typedefsofa::component::solidmechanics::spring::PolynomialRestShapeSpringsForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecReal typedefsofa::component::solidmechanics::spring::PolynomialRestShapeSpringsForceField< DataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseObject() overridesofa::core::objectmode",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_polynomial_rest_shape_springs_force_field-members.html:19422,update,updateLinks,19422,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_polynomial_rest_shape_springs_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_polynomial_rest_shape_springs_force_field-members.html,1,['update'],['updateLinks']
Deployability,"ofa::core::objectmodel::Base; broadPhaseDetectionsofa::core::collision::Pipelineprotected; broadPhaseDetectionssofa::core::collision::Pipelineprotected; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; computeCollisionDetection() overridesofa::simulation::PipelineImplvirtual; computeCollisionReset() overridesofa::simulation::PipelineImplvirtual; computeCollisionResponse() overridesofa::simulation::PipelineImplvirtual; computeCollisions()sofa::core::collision::Pipelineinline; contactManagersofa::core::collision::Pipelineprotected; contactManagerssofa::core::collision::Pipelineprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; doCollisionDetection(const sofa::type::vector< core::CollisionModel * > &collisionModels)=0sofa::core::collision::Pipelineprotectedpure virtual; doCollisionReset()=0sofa::core::collision::Pipelineprotectedpure virtual; doCollisionResponse()=0sofa::core::collision::Pipelineprotectedpure virtual; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsof",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html:2354,Pipeline,PipelineImplvirtual,2354,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,1,['Pipeline'],['PipelineImplvirtual']
Deployability,"ofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(StartNavigationButtonSetting, MouseButtonSetting)sofa::gui::component::StartNavigationButtonSetting; sofa::component::setting::MouseButtonSetting::SOFA_CLASS(MouseButtonSetting, core::objectmodel::ConfigurationSetting)sofa::component::setting::MouseButtonSetting; sofa::core::objectmodel::ConfigurationSetting::SOFA_CLASS(ConfigurationSetting, BaseObject)sofa::core::objectmodel::ConfigurationSetting; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; StartNavigationButtonSetting()sofa::gui::component::StartNavigationButtonSettinginlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ConfigurationSetting() overri",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_start_navigation_button_setting-members.html:10127,Configurat,ConfigurationSetting,10127,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_start_navigation_button_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_start_navigation_button_setting-members.html,1,['Configurat'],['ConfigurationSetting']
Deployability,"ofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(Contact, objectmodel::BaseObject)sofa::core::collision::Contact; SOFA_CLASS(SOFA_TEMPLATE3(BarycentricPenalityContact, TCollisionModel1, TCollisionModel2, ResponseDataTypes), core::collision::Contact)sofa::component::collision::response::contact::BarycentricPenalityContact< TCollisionModel1, TCollisionModel2, ResponseDataTypes >; sofa::core::collision::Contact::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; TOutputVector typedefsofa::component::collision::response::contact::BarycentricPenalityContact< TCollisionModel1, TCollisionModel2, ResponseDataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~BarycentricPenalityContact() overridesofa::component::collision::response::contact::BarycentricPenalityContact< TCollisionModel1, TCollisionModel2, ResponseDataTypes >protected; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~Contact() overridesofa::core::collision::Contactinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_barycentric_penality_contact-members.html:15266,update,updateInternal,15266,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_barycentric_penality_contact-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_barycentric_penality_contact-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"ofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Visitors; These methods provides an abstract view of the mechanical system to animate. They are implemented by executing Visitors in the subtree of the scene-graph below this solver. . typedef simulation::Node::Sequence< core::behavior::OdeSolver > Solvers;  ; typedef core::collision::Pipeline Pipeline;  ; virtual void preCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called before the actual collision computation. More...;  ; virtual void internalCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function performing the actual collision computation. More...;  ; virtual void postCollisionComputation (const core::ExecParams *params=core::execparams::defaultInstance());  Function meant to be called after the actual collision computation. More...;  ; virtual void computeCollision (const core::ExecParams *params=core::execparams::defaultInstance());  Activate collision pipeline. More...;  ; virtual void integrate (const core::ExecParams *params, SReal dt);  Activate OdeSolvers. More...;  ; const Solvers & getSolverSequence ();  . Additional Inherited Members;  Public Attributes inherited from sofa::core::behavior::BaseAnimationLoop; SingleLink< BaseAnimationLoop, core::objectmodel::BaseNode, BaseLink::FLAG_STORE",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html:2941,Pipeline,Pipeline,2941,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop.html,2,['Pipeline'],['Pipeline']
Deployability,"ofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ CollisionResetVisitor(). sofa::simulation::CollisionResetVisitor::CollisionResetVisitor ; (; const core::ExecParams * ; params). inline . Function details. ◆ getClassName(). const char* sofa::simulation::CollisionResetVisitor::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::CollisionVisitor. ◆ processCollisionPipeline(). void sofa::simulation::CollisionResetVisitor::processCollisionPipeline ; (; simulation::Node * ; node, . core::collision::Pipeline * ; obj . ). overridevirtual . Reimplemented from sofa::simulation::CollisionVisitor. sofasimulationCollisionResetVisitor; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_reset_visitor.html:5689,Pipeline,Pipeline,5689,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_reset_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_reset_visitor.html,1,['Pipeline'],['Pipeline']
Deployability,"ofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; Tetra typedefsofa::core::topology::Topology; TetrahedraAroundEdge typedefsofa::core::topology::BaseMeshTopology; TetrahedraAroundTriangle typedefsofa::core::topology::BaseMeshTopology; TetrahedraAroundVertex typedefsofa::core::topology::BaseMeshTopology; Tetrahedron typedefsofa::core::topology::Topology; TetrahedronID typedefsofa::core::topology::Topology; TetraID typedefsofa::core::topology::Topology; Topology()sofa::core::topology::Topologyinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; updateHexahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateTetrahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; UV typedefsofa::component::topology::container::constant::MeshTopology; UVID typedefsofa::component::topology::container::constant::MeshTopology; validHexahedrasofa::component::topology::container::constant::MeshTopologyprotected; validTetrahedrasofa::component::topology::container::constant::MeshTopologyprotected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology-members.html:33037,update,updateHexahedra,33037,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology-members.html,1,['update'],['updateHexahedra']
Deployability,"ofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; SOFA_CLASS(DefaultVisualManagerLoop, sofa::core::visual::VisualLoop)sofa::simulation::DefaultVisualManagerLoop; sofa::core::visual::VisualLoop::SOFA_CLASS(VisualLoop, VisualModel)sofa::core::visual::VisualLoop; sofa::core::visual::VisualModel::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateContextStep(sofa::core::visual::VisualParams *vparams) overridesofa::simulation::DefaultVisualManagerLoopvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateStep(sofa::core::visual::VisualParams *vparams) overridesofa::simulation::DefaultVisualManagerLoopvirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DefaultVisualManagerLoop() overridesofa::simulation::DefaultVisualManagerLoopprotected; ~VisualLoop() overridesofa::core::visual::VisualLoopi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_default_visual_manager_loop-members.html:12029,update,updateInternal,12029,api/master/sofa/html/classsofa_1_1simulation_1_1_default_visual_manager_loop-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_default_visual_manager_loop-members.html,2,['update'],['updateInternal']
Deployability,"ofa::core::objectmodel::BaseObjectvirtual; toLameParameters(_2DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; toLameParameters(_3DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Transformation typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >protected; Triangle typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >; TrianglesAroundVertex typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >; TriangularFEMForceFieldOptim()sofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >protected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >; VecElement typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecReal typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; Vector typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >; VecTriangleInfo typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >; VecTriangleState typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >; writeDatas(std::map< std::string, ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field_optim-members.html:23251,update,updateLinks,23251,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field_optim-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field_optim-members.html,1,['update'],['updateLinks']
Deployability,"ofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(BoxROI, DataTypes), SOFA_TEMPLATE(BaseROI, DataTypes))sofa::component::engine::select::boxroi::BoxROI< DataTypes >; sofa::component::engine::select::BaseROI::SOFA_CLASS(SOFA_TEMPLATE(BaseROI, DataTypes), Inherit)sofa::component::engine::select::BaseROI< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; Tetra typedefsofa::component::engine::select::BaseROI< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::engine::select::BaseROI< DataTypes >; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec10 typedefsofa::component::engine::select::boxroi::BoxROI< DataTypes >; VecCoord typedefsofa::component::engine::select::BaseROI< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecEdge typedefsofa::component::engine::select::BaseROI< DataTypes >; VecHexa typedefsofa::component::engine::select::BaseROI< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecQuad typedefsofa::component::engine::select::BaseROI< DataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecTetra typedefsofa::component::engine::select::BaseROI< DataTypes >; VecTriangle typedefsofa::component::engine::select::BaseROI< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~Bas",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1boxroi_1_1_box_r_o_i-members.html:19146,update,updateInternal,19146,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1boxroi_1_1_box_r_o_i-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1boxroi_1_1_box_r_o_i-members.html,1,['update'],['updateInternal']
Deployability,"ofa::gl::component::shader::OglIntVectorVariable Class Reference . #include <OglVariable.h>. Inheritance diagram for sofa::gl::component::shader::OglIntVectorVariable:. [legend]; Detailed Description; INT VECTOR VARIABLE . Public Member Functions;  SOFA_CLASS (OglIntVectorVariable, OglVariable< type::vector< GLint > >);  ;  OglIntVectorVariable ();  ; virtual ~OglIntVectorVariable ();  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void pushValue () override;  ;  Public Member Functions inherited from sofa::gl::component::shader::OglVariable< type::vector< GLint > >;  SOFA_CLASS2 (OglVariable, core::visual::VisualModel, OglShaderElement);  ; virtual void setValue (const type::vector< GLint > &v);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void doInitVisual (const core::visual::VisualParams *) override;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdateVisual (const core::visual::VisualParams *) override;  ; ShaderElementType getSEType () const override;  Returns the type of shader element (texture, macro, variable, or attribute) More...;  ; const core::objectmodel::BaseData * getSEValue () const override;  ; core::objectmodel::BaseData * getSEValue () override;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resou",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector_variable.html:1218,Update,Update,1218,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector_variable.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector_variable.html,1,['Update'],['Update']
Deployability,"ofa::gui::qt::QDisplayLinkWidget Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Protected Member Functions |; Signals |; Public Slots |; List of all members . sofa::gui::qt::QDisplayLinkWidget Class Reference . #include <QDisplayLinkWidget.h>. Inheritance diagram for sofa::gui::qt::QDisplayLinkWidget:. [legend]. Protected Attributes; core::objectmodel::BaseLink * link_;  ; QDisplayLinkInfoWidget * linkinfowidget_;  ; LinkWidget * linkwidget_;  ; unsigned int numWidgets_;  ; QHBoxLayout * gridLayout_;  . Public Member Functions;  QDisplayLinkWidget (QWidget *parent, core::objectmodel::BaseLink *link, const ModifyObjectFlags &flags);  ; unsigned int getNumWidgets () const;  . Static Protected Member Functions; static QIcon & RefreshIcon ();  . Signals; void WidgetDirty (bool);  ; void WidgetUpdate ();  ; void LinkUpdate ();  ; void LinkOwnerDirty (bool);  . Public Slots; void UpdateLink ();  ; void UpdateWidgets ();  . Attribute details. ◆ gridLayout_. QHBoxLayout* sofa::gui::qt::QDisplayLinkWidget::gridLayout_. protected . ◆ link_. core::objectmodel::BaseLink* sofa::gui::qt::QDisplayLinkWidget::link_. protected . ◆ linkinfowidget_. QDisplayLinkInfoWidget* sofa::gui::qt::QDisplayLinkWidget::linkinfowidget_. protected . ◆ linkwidget_. LinkWidget* sofa::gui::qt::QDisplayLinkWidget::linkwidget_. protected . ◆ numWidgets_. unsigned int sofa::gui::qt::QDisplayLinkWidget::numWidgets_. protected . Constructor details. ◆ QDisplayLinkWidget(). sofa::gui::qt::QDisplayLinkWidget::QDisplayLinkWidget ; (; QWidget * ; parent, . core::objectmodel::BaseLink * ; link, . const ModifyObjectFlags & ; flags . ). Function details. ◆ getNumWidgets(). unsigned int sofa::gui::qt::QDisplayLinkWidget::getNumWidgets ; (; ); const. inline . ◆ LinkOwnerDirty. void sofa::gui::qt::QDisplayLinkWidget::LinkOwnerDirty ; (; bool ; ). signal . ◆ LinkUpdate. void sofa::gui::qt::QDisplayLinkWidget::LinkUpda",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_display_link_widget.html:1003,Update,UpdateLink,1003,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_display_link_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_display_link_widget.html,2,['Update'],"['UpdateLink', 'UpdateWidgets']"
Deployability,"ofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(GenerateSphere, DataTypes), core::DataEngine);  ;  GenerateSphere ();  ;  ~GenerateSphere () override;  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_sphere.html:3598,update,update,3598,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_sphere.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_sphere.html,1,['update'],['update']
Deployability,"ofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::collision::BroadPhaseDetection; sofa::type::vector< CollisionModelPair > cmPairs;  Potentially colliding pairs. More...;  ; std::map< Instance, sofa::type::vector< CollisionModelPair > > storedCmPairs;  ;  Protected Attributes inherited from sofa::core::collision::Detection; Intersection * intersectionMethod;  Current intersection method. More...;  ; std::map< Instance, Intersection * > storedIntersectionMethod;  All intersection methods. More...;  ;  Protected Attributes inherited from sofa::core::collision::CollisionAlgorithm; Instance instance;  Current collision 'pipeline' instance, allowing to store multiple internal states. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Protected Attributes inherited from sofa::core::collision::NarrowPhaseDetection; bool _zeroCollision;  ; std::map< Instance, DetectionOutputMap > m_storedOutputsMap;  ; DetectionOutputMap m_outputsMap;  ; size_",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_incr_s_a_p.html:15736,pipeline,pipeline,15736,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_incr_s_a_p.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_incr_s_a_p.html,1,['pipeline'],['pipeline']
Deployability,"ogy::Topology; Topology()sofa::core::topology::Topologyinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; Type enum namesofa::component::topology::container::grid::SparseGridTopology; UP enum valuesofa::component::topology::container::grid::SparseGridTopology; updateEdges()sofa::component::topology::container::grid::SparseGridTopologyprotectedvirtual; updateHexahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMesh()sofa::component::topology::container::grid::SparseGridTopology; updateQuads()sofa::component::topology::container::grid::SparseGridTopologyprotectedvirtual; updateTetrahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; UV typedefsofa::component::topology::container::constant::MeshTopology; UVID typedefsofa::component::topology::container::constant::MeshTopology; validHexahedrasofa::component::topology::container::constant::MeshTopologyprotected; validTetrahedrasofa::component::topology::container::constant::MeshTopologyprotected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; voxelizeTriangleMesh(helper::io::Mesh *mesh, sofa::core::sptr< RegularGridTopology > regularGrid, type::vector< Type > &regularGridTypes) constsofa::component::topology::container::grid::SparseGridTopologyprotected; voxelSizesofa::component::topology::container::grid::SparseGridTopology; WEIGHT",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_topology-members.html:46311,update,updateQuads,46311,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_topology-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_topology-members.html,1,['update'],['updateQuads']
Deployability,ogy; TetrahedraAroundTriangle typedefsofa::core::topology::BaseMeshTopology; TetrahedraAroundVertex typedefsofa::core::topology::BaseMeshTopology; Tetrahedron typedefsofa::core::topology::Topology; TetrahedronID typedefsofa::core::topology::Topology; TetraID typedefsofa::core::topology::Topology; Topology()sofa::core::topology::Topologyinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; Type enum namesofa::component::topology::container::grid::SparseGridTopology; UP enum valuesofa::component::topology::container::grid::SparseGridTopology; updateEdges()sofa::component::topology::container::grid::SparseGridTopologyprotectedvirtual; updateHexahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMesh()sofa::component::topology::container::grid::SparseGridTopology; updateQuads()sofa::component::topology::container::grid::SparseGridTopologyprotectedvirtual; updateTetrahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; UV typedefsofa::component::topology::container::constant::MeshTopology; UVID typedefsofa::component::topology::container::constant::MeshTopology; validHexahedrasofa::component::topology::container::constant::MeshTopologyprotected; validTetrahedrasofa::component::topology::container::constant::MeshTopologyprotected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; voxelizeTria,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_topology-members.html:46026,update,updateHexahedra,46026,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_topology-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_topology-members.html,1,['update'],['updateHexahedra']
Deployability,"oid computeBoundingTree (int maxDepth=0) override;  Create or update the bounding volume hierarchy. More...;  ; void computeContinuousBoundingTree (SReal dt, int maxDepth=0) override;  Create or update the bounding volume hierarchy, accounting for motions within the given timestep. More...;  ; void buildOctree ();  init the octree creation More...;  ;  Public Member Functions inherited from sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >;  SOFA_CLASS (SOFA_TEMPLATE(TriangleCollisionModel, sofa::defaulttype::Vec3Types), core::CollisionModel);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void resize (sofa::Size size) override;  Set the number of elements. More...;  ; void computeBoundingTree (int maxDepth=0) override;  Create or update the bounding volume hierarchy. More...;  ; void computeContinuousBoundingTree (SReal dt, int maxDepth=0) override;  Create or update the bounding volume hierarchy, accounting for motions within the given timestep. More...;  ; void draw (const core::visual::VisualParams *, sofa::Index index) override;  Render an collision element. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; bool canCollideWithElement (sofa::Index index, CollisionModel *model2, sofa::Index index2) override;  Test if two elements can collide with each other. More...;  ; core::behavior::MechanicalState< DataTypes > * getMechanicalState ();  ; const core::behavior::MechanicalState< DataTypes > * getMechanicalState () const;  ; const VecCoord & getX () const;  ; const sofa::core::topology::BaseMeshTopology::SeqTriangles & getTriangles () const;  ; const VecDeriv & getNormals () const;  ; int getTriangleFlags (sofa::core::topology::BaseMeshTopology::TriangleID i);  ; Deriv velocity (sofa::Index index) const;  ; void computeBBox (const core::Exec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_octree_model.html:4075,update,update,4075,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_octree_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_octree_model.html,1,['update'],['update']
Deployability,"oid draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; void reset () override;  Reset to initial state. More...;  ; void cleanup () override;  ; void removeContacts (const ContactVector &) override;  virtual methods used for cleaning the pipeline after a dynamic graph node deletion. More...;  ; void setDefaultResponseType (const std::string &responseT);  ; std::string getDefaultResponseType () const;  ;  Public Member Functions inherited from sofa::core::collision::ContactManager;  SOFA_ABSTRACT_CLASS (ContactManager, CollisionAlgorithm);  ; virtual const ContactVector & getContacts ();  ; virtual void setIntersectionMethod (Intersection *v);  virtual because subclasses might do precomputations based on intersection algorithms More...;  ; Intersection * getIntersectionMethod () const;  ;  Public Member Functions inherited from sofa::core::collision::CollisionAlgorithm;  SOFA_ABSTRACT_CLASS (CollisionAlgorithm, objectmodel::BaseObject);  ; virtual void setInstance (Instance inst);  Allow to store multiple internal states by specifying a different collision pipeline 'instance'. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_rule_based_contact_manager.html:5798,pipeline,pipeline,5798,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_rule_based_contact_manager.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_rule_based_contact_manager.html,1,['pipeline'],['pipeline']
Deployability,"oid setMouseButtonConfiguration (sofa::component::setting::MouseButtonSetting *button) override;  ; void setDumpState (bool) override;  ; void setLogTime (bool) override;  ; void setExportState (bool) override;  ; virtual void setGnuplotPath (const std::string &path) override;  ; virtual void createViewer (const char *_viewerName, bool _updateViewerList=false);  ; void registerViewer (common::BaseViewer *_viewer) override;  Used to directly replace the current viewer. More...;  ; common::BaseViewer * getViewer () override;  ; sofa::gui::qt::viewer::SofaViewer * getSofaViewer ();  ; virtual void removeViewer ();  ; void dragEnterEvent (QDragEnterEvent *event) override;  ; void dropEvent (QDropEvent *event) override;  ;  Public Member Functions inherited from sofa::gui::common::BaseGUI; virtual void configureGUI (sofa::simulation::NodeSPtr groot);  Use a component setting to configure our GUI. More...;  ; void exportGnuplot (sofa::simulation::Node *node, std::string gnuplot_directory="""");  ; virtual bool canBeDefaultGUI () const;  ; virtual void redraw ()=0;  Update the GUI. More...;  ; virtual void setScene (sofa::simulation::NodeSPtr groot, const char *filename=nullptr, bool temporaryFile=false)=0;  Register the scene in our GUI. More...;  ; virtual bool saveScreenshot (const std::string &filename, int compression_level=-1);  ; virtual void sendMessage (const std::string &, const std::string &);  Send a (script) message. More...;  . Static Public Member Functions; static void setupSurfaceFormat ();  ; static common::BaseGUI * CreateGUI (const char *name, sofa::simulation::Node::SPtr groot=nullptr, const char *filename=nullptr);  ; static void SetPixmap (std::string pixmap_filename, QPushButton *b);  ;  Static Public Member Functions inherited from sofa::gui::common::BaseGUI; static std::string & GetGUIName ();  ; static const char * GetProgramName ();  ; static void SetProgramName (const char *argv0);  ; static void SetArgumentParser (ArgumentParser *parser);  ; stat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_real_g_u_i.html:4185,Update,Update,4185,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_real_g_u_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_real_g_u_i.html,1,['Update'],['Update']
Deployability,"ol printLog=false);  ; void addCallBack (core::topology::TopologyChangeType type, TopologyChangeCallback callback);  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Additional Inherited Members;  Protected Member Functions inherited from sofa::core::topology::TopologyHandler;  TopologyHandler ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Attribute details. ◆ m_topologyData. template<class ElementType , class VecT ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_data_handler.html:14514,update,updated,14514,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_data_handler.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_data_handler.html,1,['update'],['updated']
Deployability,"ol printLog=false);  ; void addCallBack (core::topology::TopologyChangeType type, TopologyChangeCallback callback);  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions;  TopologyHandler ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Attribute details. ◆ m_callbackMap. std::map< core::topology::TopologyChangeType, TopologyChangeCallback> sofa::core::topology::TopologyHandler::m_callbackMap. p",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_handler.html:8025,update,updated,8025,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_handler.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_handler.html,1,['update'],['updated']
Deployability,"ollision models. ; More... Inheritance diagram for sofa::core::collision::TDetectionOutputVector< CM1, CM2 >:. [legend]; Detailed Description; template<class CM1, class CM2>; class sofa::core::collision::TDetectionOutputVector< CM1, CM2 >; Generic description of a set of contact point between two specific collision models. . Public Member Functions;  ~TDetectionOutputVector () override;  ; void clear () override;  Clear the content of this vector. More...;  ; unsigned int size () const override;  Current size (number of detected contacts) More...;  ; virtual type::Vec3 getFirstPosition (unsigned idx) override;  Const iterator to iterate the detection pairs. More...;  ; virtual type::Vec3 getSecondPosition (unsigned idx) override;  Const iterator end to iterate the detection pairs. More...;  ;  Public Member Functions inherited from sofa::core::collision::DetectionOutputVector; bool empty () const;  Test if the vector is empty. More...;  ; virtual void release ();  Delete this vector from memory once the contact pair is no longer active. More...;  ;  Public Member Functions inherited from sofa::type::vector< DetectionOutput >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const DetectionOutput &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< DetectionOutput, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< DetectionOutput > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< DetectionOutput, Alloc > &&v);  Move constructor. More...;  ;  vector (typename vector< DetectionOutput >::const_iterator first, typename vector< DetectionOutput >::const_iterator last);  Constructor. More...;  ; vector & operator= (const std::vector< DetectionOutput, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< DetectionOutput, Alloc > &&v);  Move assignment operator. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_t_detection_output_vector.html:1369,release,release,1369,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_t_detection_output_vector.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_t_detection_output_vector.html,1,['release'],['release']
Deployability,"ollision::TDetectionOutputVector< CM1, CM2 >inlinevirtual; memory_manager typedefsofa::type::vector< DetectionOutput >; operator=(const std::vector< DetectionOutput, Alloc > &x)sofa::type::vector< DetectionOutput >inline; operator=(std::vector< DetectionOutput, Alloc > &&v)sofa::type::vector< DetectionOutput >inline; operator[](Size n)sofa::type::vector< DetectionOutput >inline; operator[](Size n) constsofa::type::vector< DetectionOutput >inline; read(std::istream &in)sofa::type::vector< DetectionOutput >inline; read(std::istream &in)sofa::type::vector< DetectionOutput >; read(std::istream &in)sofa::type::vector< DetectionOutput >; read(std::istream &in)sofa::type::vector< DetectionOutput >; read(std::istream &in)sofa::type::vector< DetectionOutput >; read(std::istream &in)sofa::type::vector< DetectionOutput >; read(std::istream &in)sofa::type::vector< DetectionOutput >; rebind_to typedefsofa::type::vector< DetectionOutput >; reference typedefsofa::type::vector< DetectionOutput >; release()sofa::core::collision::DetectionOutputVectorinlinevirtual; Size typedefsofa::type::vector< DetectionOutput >; size() const overridesofa::core::collision::TDetectionOutputVector< CM1, CM2 >inlinevirtual; vector()sofa::type::vector< DetectionOutput >inline; vector(Size n, const DetectionOutput &value)sofa::type::vector< DetectionOutput >inline; vector(Size n)sofa::type::vector< DetectionOutput >inlineexplicit; vector(const std::vector< DetectionOutput, Alloc > &x)sofa::type::vector< DetectionOutput >inline; vector(const std::initializer_list< DetectionOutput > &t)sofa::type::vector< DetectionOutput >inline; vector(std::vector< DetectionOutput, Alloc > &&v)sofa::type::vector< DetectionOutput >inline; vector(typename vector< DetectionOutput >::const_iterator first, typename vector< DetectionOutput >::const_iterator last)sofa::type::vector< DetectionOutput >inline; Vector typedefsofa::core::collision::TDetectionOutputVector< CM1, CM2 >; write(std::ostream &os) constsofa::type::vector< ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_t_detection_output_vector-members.html:1874,release,release,1874,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_t_detection_output_vector-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_t_detection_output_vector-members.html,1,['release'],['release']
Deployability,"ollision::geometry::CylinderCollisionModel< sofa::defaulttype::Rigid3Types >, TVec3Types >; nbpsofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::CylinderCollisionModel< sofa::defaulttype::Rigid3Types >, TVec3Types >; outmodelsofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::CylinderCollisionModel< sofa::defaulttype::Rigid3Types >, TVec3Types >; Real typedefsofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::CylinderCollisionModel< sofa::defaulttype::Rigid3Types >, TVec3Types >; resize(Size size)sofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::CylinderCollisionModel< sofa::defaulttype::Rigid3Types >, TVec3Types >inlinevirtual; RigidContactMapper()sofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::CylinderCollisionModel< sofa::defaulttype::Rigid3Types >, TVec3Types >protected; setCollisionModel(MCollisionModel *model)sofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::CylinderCollisionModel< sofa::defaulttype::Rigid3Types >, TVec3Types >inline; update()sofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::CylinderCollisionModel< sofa::defaulttype::Rigid3Types >, TVec3Types >inlinevirtual; updateXfree()sofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::CylinderCollisionModel< sofa::defaulttype::Rigid3Types >, TVec3Types >inlinevirtual; VecCoord typedefsofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::CylinderCollisionModel< sofa::defaulttype::Rigid3Types >, TVec3Types >; VecDeriv typedefsofa::component::collision::response::mapper::RigidContactMapper< collision::geometry::CylinderCollisionModel< sofa::defaulttype::Rigid3Types >, TVec3Types >; ~BaseContactMapper()sofa::component::collision::response::mapper::BaseContactMapper< TDataTypes >inlinevirtual.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_contact_mapper_3_01collision_1_1ge84edc9e5627cfe41e646ef5a04627b0b.html:5533,update,update,5533,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_contact_mapper_3_01collision_1_1ge84edc9e5627cfe41e646ef5a04627b0b.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_contact_mapper_3_01collision_1_1ge84edc9e5627cfe41e646ef5a04627b0b.html,2,['update'],"['update', 'updateXfree']"
Deployability,"ollisionModel< TDataTypes >; sofa::core::CollisionModel::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPHERE_TYPE enum valuesofa::core::CollisionModel; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; TETRAHEDRON_TYPE enum valuesofa::core::CollisionModel; Topology typedefsofa::core::CollisionModel; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; TRIANGLE_TYPE enum valuesofa::core::CollisionModel; TriangleCollisionModel()sofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >protected; TriangleFlag enum namesofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >; TTriangle< DataTypes > classsofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >friend; updateFromTopology()sofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >protectedvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateNormals()sofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >protectedvirtual; userDatasofa::core::CollisionModelprotected; VecCoord typedefsofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; velocity(sofa::Index index) constsofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >inline; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~CollisionModel() overridesofa::core:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model-members.html:19348,update,updateLinks,19348,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model-members.html,1,['update'],['updateLinks']
Deployability,ollisionReset ; (; ). protectedpure virtual . Remove collision response from last step. ; Implemented in sofa::component::collision::detection::algorithm::CollisionPipeline. ◆ doCollisionResponse(). virtual void sofa::core::collision::Pipeline::doCollisionResponse ; (; ). protectedpure virtual . Add collision response in the simulation graph. ; Implemented in sofa::component::collision::detection::algorithm::CollisionPipeline. ◆ getBroadPhaseDetection(). const BroadPhaseDetection * sofa::core::collision::Pipeline::getBroadPhaseDetection ; (; ); const. Broad phase collision detection method accessor. . ◆ getNarrowPhaseDetection(). const NarrowPhaseDetection * sofa::core::collision::Pipeline::getNarrowPhaseDetection ; (; ); const. Narrow phase collision detection method accessor. . ◆ getResponseList(). virtual std::set< std::string > sofa::core::collision::Pipeline::getResponseList ; (; ); const. pure virtual . get the set of response available with the current collision pipeline ; Implemented in sofa::component::collision::detection::algorithm::CollisionPipeline. ◆ insertInNode(). bool sofa::core::collision::Pipeline::insertInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can insert itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was inserted ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ removeInNode(). bool sofa::core::collision::Pipeline::removeInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can remove itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was removed ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ reset(). void sofa::core::collision::Pipeline::reset ; (; ). overridepure virtual . Reset to initial state. ; Reimplemented from sofa::core::objectmodel::BaseObject.; Implemented in sofa::simula,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline.html:18286,pipeline,pipeline,18286,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline.html,1,['pipeline'],['pipeline']
Deployability,"ologies(In *from, Out *to)sofa::core::topology::TopologicalMappingvirtual; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SimpleTesselatedHexaTopologicalMapping()sofa::component::mapping::linear::SimpleTesselatedHexaTopologicalMappingprotected; SOFA_ABSTRACT_CLASS(TopologicalMapping, objectmodel::BaseObject)sofa::core::topology::TopologicalMapping; SOFA_CLASS(SimpleTesselatedHexaTopologicalMapping, sofa::core::topology::TopologicalMapping)sofa::component::mapping::linear::SimpleTesselatedHexaTopologicalMapping; sofa::core::topology::TopologicalMapping::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; toModelsofa::core::topology::TopologicalMapping; TopologicalMapping()sofa::core::topology::TopologicalMappingprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateTopologicalMappingBottomUp()sofa::core::topology::TopologicalMappinginlinevirtual; updateTopologicalMappingTopDown() overridesofa::component::mapping::linear::SimpleTesselatedHexaTopologicalMappinginlinevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~SimpleTesselatedHexaTopologicalMapping() overridesofa::component::mapping::linear::SimpleTesselatedHexaTopologicalMappinginlineprotected; ~TopologicalMapping() overridesofa::core::topology::TopologicalMappinginlineprot",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_hexa_topological_mapping-members.html:12724,update,updateInternal,12724,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_hexa_topological_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_hexa_topological_mapping-members.html,1,['update'],['updateInternal']
Deployability,"ology () const;  Checks if the topology is coherent. More...;  ; virtual Size getNumberOfConnectedComponent ();  Returns the number of connected component. More...;  ; virtual const sofa::type::vector< Index > getConnectedElement (Index elem);  Returns the set of element indices connected to an input one (i.e. which can be reached by topological links) More...;  ;  Public Member Functions inherited from sofa::core::topology::Topology;  SOFA_CLASS (Topology, core::objectmodel::BaseObject);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; virtual Size getNbPoints () const;  ; virtual void setNbPoints (Size);  . Protected Member Functions;  TopologyContainer ();  Constructor. More...;  ;  ~TopologyContainer () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::topology::BaseTopologyObject;  BaseTopologyObject ();  ;  ~BaseTopologyObject () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; vo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_container.html:20102,update,update,20102,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_container.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_container.html,1,['update'],['update']
Deployability,"ol findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Static Public Member Functions; template<class T > ; static bool canCreate (T *&obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  TriangleCollisionModel ();  ; virtual void updateFromTopology ();  ; virtual void updateNormals ();  ;  Protected Member Functions inherited from sofa::core::CollisionModel;  CollisionModel ();  Constructor. More...;  ;  ~CollisionModel () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virt",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model.html:21479,update,updateFromTopology,21479,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model.html,2,['update'],"['updateFromTopology', 'updateNormals']"
Deployability,"ol removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_compare_topology.html:4661,update,updateInternal,4661,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_compare_topology.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_compare_topology.html,3,['update'],['updateInternal']
Deployability,"ol removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_l_c_p_force_feedback.html:8159,update,updateInternal,8159,api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_l_c_p_force_feedback.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_l_c_p_force_feedback.html,5,['update'],['updateInternal']
Deployability,"ometry::ElementType::UNKNOWN;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (SimpleTesselatedTetraTopologicalMapping, sofa::core::topology::TopologicalMapping);  ; void init () override;  Initializes the target BaseTopology from the source BaseTopology. More...;  ; void updateTopologicalMappingTopDown () override;  Translates the TopologyChange objects from the source to the target. More...;  ; void updateTopologicalMappingBottomUp () override;  Translates the TopologyChange objects from the target to the source. More...;  ; bool propagateFromInputToOutputModel () override;  Return true if this mapping is able to propagate topological changes from input to output model. More...;  ; bool propagateFromOutputToInputModel () override;  Return true if this mapping is able to propagate topological changes from output to input model. More...;  ; const type::vector< Index > & getPointMappedFromPoint () const;  ; const type::vector< Index > & getPointMappedFromEdge () const;  ; const type::vector< Index > & getPointSource () const;  ;  Public Member Functions inherited from sofa::core::topology::TopologicalMapping;  SOFA_ABSTRACT_CLASS (TopologicalMapping, objectmodel::BaseObject);  ; virtual void setTopologies (In *from, Out *to);  Specify the input and output models. More...;  ; void setPathInputObject (const",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_tetra_topological_mapping.html:3088,update,updateTopologicalMappingTopDown,3088,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_tetra_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_tetra_topological_mapping.html,1,['update'],['updateTopologicalMappingTopDown']
Deployability,"omponent::solidmechanics::spring::SpringForceField< DataTypes >::reinit. overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ removeSpring(). template<class DataTypes > . void sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::removeSpring ; (; sofa::Index ; idSpring). ◆ setArrowSize(). template<class DataTypes > . void sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::setArrowSize ; (; float ; s). inline . ◆ setDrawMode(). template<class DataTypes > . void sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::setDrawMode ; (; int ; m). inline . ◆ SOFA_CLASS(). template<class DataTypes > . sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::SOFA_CLASS ; (; SOFA_TEMPLATE(SpringForceField< DataTypes >, DataTypes) ; , . SOFA_TEMPLATE(core::behavior::PairInteractionForceField, DataTypes) ;  . ). ◆ updateSpringsFromTopologyIndices(). template<class DataTypes > . void sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::updateSpringsFromTopologyIndices. protected . ◆ updateTopologyIndices_springRemoved(). template<class DataTypes > . void sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::updateTopologyIndices_springRemoved ; (; unsigned ; id). protected . ◆ updateTopologyIndicesFromSprings(). template<class DataTypes > . void sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::updateTopologyIndicesFromSprings. protected . ◆ updateTopologyIndicesFromSprings_springAdded(). template<class DataTypes > . void sofa::component::solidmechanics::spring::SpringForceField< DataTypes >::updateTopologyIndicesFromSprings_springAdded. protected . Related details. ◆ SpringForceFieldInternalData< DataTypes >. template<class DataTypes > . friend class SpringForceFieldInternalData< DataTypes >. friend . sofacomponentsolidmechanicsspringSpringForceField; G",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field.html:41232,update,updateSpringsFromTopologyIndices,41232,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_spring_force_field.html,1,['update'],['updateSpringsFromTopologyIndices']
Deployability,"on &);  Output stream. More...;  ; std::istream & operator>> (std::istream &in, TetrahedronRestInformation &);  Input stream. More...;  . Attribute details. ◆ dJ. template<class DataTypes > . Coord sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >::TetrahedronRestInformation::dJ[4]. derivatives of J . ◆ fiberDirection. template<class DataTypes > . Coord sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >::TetrahedronRestInformation::fiberDirection. fiber direction in rest configuration . ◆ restVolume. template<class DataTypes > . Real sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >::TetrahedronRestInformation::restVolume. rest volume . ◆ shapeVector. template<class DataTypes > . Coord sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >::TetrahedronRestInformation::shapeVector[4]. shape vector at the rest configuration . ◆ strainEnergy. template<class DataTypes > . Real sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >::TetrahedronRestInformation::strainEnergy. deformation gradient = gradPhi ; right Cauchy-Green deformation tensor C (gradPhi^T gradPhi) . ◆ tetraEdges. template<class DataTypes > . float sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >::TetrahedronRestInformation::tetraEdges[6] {}. ◆ tetraIndices. template<class DataTypes > . float sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >::TetrahedronRestInformation::tetraIndices[4] {}. ◆ volScale. template<class DataTypes > . Real sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >::TetrahedronRestInformation::volScale. current tetrahedron volume . Constructor details. ◆ TetrahedronRestInformation(). template<class DataTypes > . sofa::c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_standard_tetrahedral_f_e_m_f1b7f2f40a66fe2a9522e50d01e0a4441.html:3259,configurat,configuration,3259,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_standard_tetrahedral_f_e_m_f1b7f2f40a66fe2a9522e50d01e0a4441.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_standard_tetrahedral_f_e_m_f1b7f2f40a66fe2a9522e50d01e0a4441.html,1,['configurat'],['configuration']
Deployability,"on *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ d_repositoryPath. DataFileName sofa::component::sceneutility::BaseAddResourceRepository::d_repositoryPath. Path to add to the pool of resources. . ◆ m_repository. FileRepository* sofa::component::sceneutility::BaseAddResourceRepository::m_repository. protected . Constructor details. ◆ BaseAddResourceRepository(). sofa::component::sceneutility::BaseAddResourceRepository::BaseAddResourceRepository ; (; ). protected . ◆ ~BaseAddResourceRepository(). sofa::component::sceneutility::BaseAddResourceRepository::~BaseAddResourceRepository ; (; ). overrideprotected . Function details. ◆ cleanup(). void sofa::component::sceneutility::BaseAddResourceRepository::cleanup ; (; ). overridevirtual . Called just before deleting this object Any object in the tree below this object that are to be removed will be removed only after this call, so any references this object holds should still be valid. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ parse(). void sofa::component::sceneutility::BaseAddResourceRepository::parse ; (; sofa::core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::objectmodel::Base. ◆ SOFA_ABSTRACT_CLASS(). sofa::component::sceneutility::BaseAddResourceRepository::SOFA_ABSTRACT_CLASS ; (; BaseAddResourceRepository ; , . sofa::core::objectmodel::BaseObject ;  . ). ◆ updateRepositoryPath(). bool sofa::component::sceneutility::BaseAddResourceRepository::updateRepositoryPath ; (; ). sofacomponentsceneutilityBaseAddResourceRepository; Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_base_add_resource_repository.html:14769,update,updateRepositoryPath,14769,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_base_add_resource_repository.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_base_add_resource_repository.html,2,['update'],['updateRepositoryPath']
Deployability,"on but can print the graph visiting by setting visitingOrder at true . Constructor details. ◆ PrintVisitor(). sofa::simulation::PrintVisitor::PrintVisitor ; (; const sofa::core::ExecParams * ; params, . bool ; visitingOrder = false . ). inline . Function details. ◆ getClassName(). const char* sofa::simulation::PrintVisitor::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ getVerbose(). int sofa::simulation::PrintVisitor::getVerbose ; (; ); const. inline . ◆ processNodeBottomUp(). void sofa::simulation::PrintVisitor::processNodeBottomUp ; (; simulation::Node * ; ). overridevirtual . Callback method called after child node have been processed and before going back to the parent node. ; Reimplemented from sofa::simulation::Visitor. ◆ processNodeTopDown(). Visitor::Result sofa::simulation::PrintVisitor::processNodeTopDown ; (; simulation::Node * ; ). overridevirtual . Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. ; Reimplemented from sofa::simulation::Visitor. ◆ processObject(). template<class T > . void sofa::simulation::PrintVisitor::processObject ; (; T ; obj). ◆ processObjects(). template<class Seq > . void sofa::simulation::PrintVisitor::processObjects ; (; Seq & ; list, . const char * ; name . ). ◆ setVerbose(). void sofa::simulation::PrintVisitor::setVerbose ; (; int ; v). inline . ◆ treeTraversal(). bool sofa::simulation::PrintVisitor::treeTraversal ; (; TreeTraversalRepetition & ; repeat). inlineoverridevirtual . ReturnstreeTraversal returns true if and only if a tree traversal must be enforced (even for a DAG) ; Parameters. repeatTell if a node callback can be executed several times (at each traversal in diamond configurations) . Reimplemented from sofa::simulation::Visitor. sofasimulationPrintVisitor; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html:7117,configurat,configurations,7117,api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html,2,['configurat'],['configurations']
Deployability,"on method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ; void computeDistanceMap (VecCoord beginElts=VecCoord(), const double &distMax=0);  Compute the distance map depending ion the distance type. More...;  ; void addElt (const Coord &elt, VecCoord beginElts=VecCoord(), const double &distMax=0);  Add a 'from' element and recompute the map of distances. More...;  ; void getDistances (VVD &distances, VecVecCoord &gradients, const VecCoord &goals);  Get the distance for a point set using the computed map. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_distances.html:5928,update,update,5928,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_distances.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_distances.html,1,['update'],['update']
Deployability,on response from last step. More...;  ; class  CollisionDetectionVisitor;  Compute collision detection. More...;  ; class  CollisionResponseVisitor;  Compute collision response. More...;  ; class  CpuTask;  ; class  CpuTaskStatus;  ; class  DeactivationVisitor;  ; class  DefaultAnimationLoop;  Default Animation Loop to be created when no AnimationLoop found on simulation::node. More...;  ; class  StdTaskAllocator;  ; class  DefaultTaskScheduler;  ; class  DefaultVisualManagerLoop;  Default VisualManager Loop to be created when no VisualManager found on simulation::node. More...;  ; class  DeleteVisitor;  ; class  BuildConstraintSystemEndEvent;  ; class  SimulationInitDoneEvent;  ; class  SimulationInitStartEvent;  ; class  SimulationInitTexturesDoneEvent;  ; class  SimulationStartEvent;  ; class  SimulationStopEvent;  ; class  SolveConstraintSystemEndEvent;  ; class  InitGnuplotVisitor;  ; class  ExportGnuplotVisitor;  ; class  ExportVisualModelOBJVisitor;  ; class  InitPerThreadDataTask;  ; class  InitVisitor;  ; class  IntegrateBeginEvent;  ; class  IntegrateEndEvent;  ; class  SpinLock;  ; class  ScopedLock;  ; class  MainTaskSchedulerFactory;  ; class  MainTaskSchedulerRegistry;  ; class  MechanicalVisitor;  ; class  MechanicalVPrintVisitor;  ; class  MechanicalVPrintWithElapsedTimeVisitor;  ; class  DofPrintVisitor;  ; class  MutationListener;  Generic API to handle mutations of the graph. More...;  ; class  NodeSequence;  ; class  NodeSingle;  ; class  Node;  ; struct  Range;  ; class  ParallelSparseMatrixProduct;  ; class  PauseEvent;  ; class  PipelineImpl;  ; class  PositionEvent;  ; class  PrintVisitor;  ; class  PropagateEventVisitor;  ; class  RequiredPlugin;  ; class  ResetVisitor;  ; class  StoreResetStateVisitor;  ; class  SceneCheck;  ; class  SceneCheckMainRegistry;  ; class  SceneCheckRegistry;  ; class  SceneLoader;  Main class used to register scene file loaders. More...;  ; class  SceneLoaderFactory;  ; class  Simulation;  ; class  SolveVisitor; ,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:2056,Integrat,IntegrateBeginEvent,2056,api/master/sofa/html/namespacesofa_1_1simulation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html,2,['Integrat'],"['IntegrateBeginEvent', 'IntegrateEndEvent']"
Deployability,"on::Node; SOFA_ABSTRACT_CLASS(BaseNode, Base)sofa::core::objectmodel::BaseNode; SOFA_ABSTRACT_CLASS2(Node, BaseNode, Context)sofa::simulation::Node; SOFA_CLASS(DAGNode, simulation::Node)sofa::simulation::graph::DAGNode; sofa::simulation::Node::SOFA_CLASS(Context, BaseContext)sofa::core::objectmodel::Context; sofa::core::objectmodel::BaseContext::SOFA_CLASS(BaseContext, Base)sofa::core::objectmodel::BaseContext; solversofa::simulation::Node; SPtr typedefsofa::core::objectmodel::Base; statesofa::simulation::Node; StatusMap typedefsofa::simulation::graph::DAGNodeprotected; time_sofa::core::objectmodel::Context; topologysofa::simulation::Node; topologyObjectsofa::simulation::Node; unsortedsofa::simulation::Node; updateContext() overridesofa::simulation::graph::DAGNodevirtual; updateDescendancy()sofa::simulation::graph::DAGNodeprotected; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateSimulationContext() overridesofa::simulation::graph::DAGNodevirtual; updateVisualContext()sofa::simulation::Nodevirtual; Vec3 typedefsofa::core::objectmodel::BaseContext; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VISITED enum valuesofa::simulation::graph::DAGNodeprotected; VisitedStatus enum namesofa::simulation::graph::DAGNodeprotected; visualLoopsofa::simulation::Node; visualManagersofa::simulation::Node; visualModelsofa::simulation::Node; worldGravity_sofa::core::objectmodel::Context; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseContext() overridesofa::core::objectmodel::BaseContextprotected; ~BaseNode() overridesofa::core::objectmodel::BaseNodeprotected; ~Context() overridesofa::core::objectmodel::Contextinlineprotectedvirtual; ~DAGNode() overridesofa::simulation::graph::DAGNodeprotectedvirtual; ~Node() overridesofa::si",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html:23008,update,updateVisualContext,23008,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html,2,['update'],['updateVisualContext']
Deployability,"on::Operation; PickHandler * pickHandle;  ; sofa::component::setting::MouseButtonSetting::SPtr mbsetting;  ; MOUSE_BUTTON button;  . Public Member Functions;  QTopologyOperation ();  ; double getScale () const override;  ; int getTopologicalOperation () const override;  ; bool getVolumicMesh () const override;  ; void configure (common::PickHandler *picker, common::MOUSE_BUTTON b) override;  ;  Public Member Functions inherited from sofa::gui::common::TopologyOperation;  TopologyOperation ();  ;  ~TopologyOperation () override;  ; void start () override;  ; void execution () override;  This function is called each time the mouse is clicked. More...;  ; void end () override;  ; void endOperation () override;  This function is called after each mouse click. More...;  ; void setTopologicalOperation (int m);  ; void setScale (double s);  ; void setVolumicMesh (bool v);  ;  Public Member Functions inherited from sofa::gui::common::Operation;  Operation (sofa::component::setting::MouseButtonSetting::SPtr s=nullptr);  ; virtual ~Operation ();  ; virtual void configure (PickHandler *picker, sofa::component::setting::MouseButtonSetting *s);  ; virtual void wait ();  This function is called when shift key is released. More...;  ; virtual void setSetting (sofa::component::setting::MouseButtonSetting *s);  ; virtual std::string defaultPerformerType ();  ; virtual sofa::gui::component::performer::InteractionPerformer * createPerformer ();  ; virtual void configurePerformer (sofa::gui::component::performer::InteractionPerformer *p);  ; MOUSE_BUTTON getMouseButton () const;  ; std::string getId ();  . Public Slots; void setEnableBox (int i);  . Additional Inherited Members;  Public Attributes inherited from sofa::gui::common::Operation; sofa::gui::component::performer::InteractionPerformer * performer;  ;  Static Public Member Functions inherited from sofa::gui::common::TopologyOperation; static std::string getDescription ();  ;  Static Public Member Functions inherited from sofa:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_topology_operation.html:2008,release,released,2008,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_topology_operation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_topology_operation.html,2,['release'],['released']
Deployability,onInitDoneEvent;  ; class  SimulationInitStartEvent;  ; class  SimulationInitTexturesDoneEvent;  ; class  SimulationStartEvent;  ; class  SimulationStopEvent;  ; class  SolveConstraintSystemEndEvent;  ; class  InitGnuplotVisitor;  ; class  ExportGnuplotVisitor;  ; class  ExportVisualModelOBJVisitor;  ; class  InitPerThreadDataTask;  ; class  InitVisitor;  ; class  IntegrateBeginEvent;  ; class  IntegrateEndEvent;  ; class  SpinLock;  ; class  ScopedLock;  ; class  MainTaskSchedulerFactory;  ; class  MainTaskSchedulerRegistry;  ; class  MechanicalVisitor;  ; class  MechanicalVPrintVisitor;  ; class  MechanicalVPrintWithElapsedTimeVisitor;  ; class  DofPrintVisitor;  ; class  MutationListener;  Generic API to handle mutations of the graph. More...;  ; class  NodeSequence;  ; class  NodeSingle;  ; class  Node;  ; struct  Range;  ; class  ParallelSparseMatrixProduct;  ; class  PauseEvent;  ; class  PipelineImpl;  ; class  PositionEvent;  ; class  PrintVisitor;  ; class  PropagateEventVisitor;  ; class  RequiredPlugin;  ; class  ResetVisitor;  ; class  StoreResetStateVisitor;  ; class  SceneCheck;  ; class  SceneCheckMainRegistry;  ; class  SceneCheckRegistry;  ; class  SceneLoader;  Main class used to register scene file loaders. More...;  ; class  SceneLoaderFactory;  ; class  Simulation;  ; class  SolveVisitor;  ; class  SolveVisitorTask;  A task to provide to a task scheduler in which a solver solves. More...;  ; class  StateChangeVisitor;  ; class  Task;  ; class  TaskScheduler;  ; class  TaskSchedulerFactory;  ; class  TaskSchedulerRegistry;  ; class  TopologyChangeVisitor;  ; class  UpdateBoundingBoxVisitor;  ; class  UpdateContextVisitor;  ; class  UpdateSimulationContextVisitor;  ; class  UpdateVisualContextVisitor;  ; class  UpdateInternalDataVisitor;  ; class  UpdateLinksVisitor;  ; class  UpdateMappingEndEvent;  ; class  UpdateMappingVisitor;  ; class  VelocityThresholdVisitor;  ; class  Visitor;  Base class for visitors propagated recursively through the sce,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:2597,Pipeline,PipelineImpl,2597,api/master/sofa/html/namespacesofa_1_1simulation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html,1,['Pipeline'],['PipelineImpl']
Deployability,"onModel; SOFA_ABSTRACT_CLASS(CollisionModel, objectmodel::BaseObject)sofa::core::CollisionModel; SOFA_CLASS(SOFA_TEMPLATE(LineCollisionModel, TDataTypes), core::CollisionModel)sofa::component::collision::geometry::LineCollisionModel< TDataTypes >; sofa::core::CollisionModel::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPHERE_TYPE enum valuesofa::core::CollisionModel; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; TETRAHEDRON_TYPE enum valuesofa::core::CollisionModel; TLine< DataTypes > classsofa::component::collision::geometry::LineCollisionModel< TDataTypes >friend; topologysofa::component::collision::geometry::LineCollisionModel< TDataTypes >protected; Topology typedefsofa::core::CollisionModel; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; TRIANGLE_TYPE enum valuesofa::core::CollisionModel; updateFromTopology()sofa::component::collision::geometry::LineCollisionModel< TDataTypes >protectedvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; userDatasofa::core::CollisionModelprotected; VecCoord typedefsofa::component::collision::geometry::LineCollisionModel< TDataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::collision::geometry::LineCollisionModel< TDataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; velocity(sofa::Index index) constsofa::component::collision::geometry::LineCollisionModel< TDataTypes >inline; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~CollisionModel() overridesofa::core::CollisionModelinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model-members.html:18123,update,updateInternal,18123,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"one or multiple string entries fails to be read. In this case the valid link address are initialized.; the owner is invalid Returns true if:; string is empty; all the linkpath are leading to a valid object or not available there. . ◆ set(). bool sofa::core::objectmodel::BaseLink::set ; (; Base * ; baseptr, . size_t ; index = 0 . ). inline . Change the link's target at the provided index. . ◆ setFlag(). void sofa::core::objectmodel::BaseLink::setFlag ; (; LinkFlagsEnum ; flag, . bool ; b . ). inline . Set one of the flags. . ◆ setHelp(). void sofa::core::objectmodel::BaseLink::setHelp ; (; const std::string & ; val). inline . Set help message. . ◆ setLinkedBase(). void sofa::core::objectmodel::BaseLink::setLinkedBase ; (; Base * ; link). ◆ setName(). void sofa::core::objectmodel::BaseLink::setName ; (; const std::string & ; name). inline . ◆ setOwner(). void sofa::core::objectmodel::BaseLink::setOwner ; (; Base * ; owner). inline . ◆ setPersistent(). void sofa::core::objectmodel::BaseLink::setPersistent ; (; bool ; b). inline . Alias to match BaseData API. . ◆ storePath(). bool sofa::core::objectmodel::BaseLink::storePath ; (; ); const. inline . ◆ updateCounter(). void sofa::core::objectmodel::BaseLink::updateCounter ; (; ). inlineprotected . ◆ updateLinks(). bool sofa::core::objectmodel::BaseLink::updateLinks ; (; ). Update pointers in case the pointed-to objects have appeared Returnsfalse if there are broken links . Enum details. ◆ LinkFlagsEnum. enum sofa::core::objectmodel::BaseLink::LinkFlagsEnum. EnumeratorFLAG_NONE ; FLAG_MULTILINK True if link is an array. . FLAG_STRONGLINK True if link has ownership of linked object(s) . FLAG_DOUBLELINK True if link has a reciprocal link in linked object(s) . FLAG_DUPLICATE True if link duplicates another one (possibly with a different/specialized DestType) . FLAG_STOREPATH True if link requires a path string in order to be created. . sofacoreobjectmodelBaseLink; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html:10622,update,updateCounter,10622,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_link.html,4,['update'],"['updateCounter', 'updateLinks']"
Deployability,"onent::FixPickedParticleButtonSetting::SPtr setting;  ;  Protected Attributes inherited from sofa::gui::common::Operation; PickHandler * pickHandle;  ; sofa::component::setting::MouseButtonSetting::SPtr mbsetting;  ; MOUSE_BUTTON button;  . Public Member Functions;  FixOperation ();  ;  ~FixOperation () override;  ; void setStiffness (double s);  ; virtual double getStiffness () const;  ;  Public Member Functions inherited from sofa::gui::common::Operation;  Operation (sofa::component::setting::MouseButtonSetting::SPtr s=nullptr);  ; virtual ~Operation ();  ; virtual void configure (PickHandler *picker, MOUSE_BUTTON b);  ; virtual void configure (PickHandler *picker, sofa::component::setting::MouseButtonSetting *s);  ; virtual void start ();  ; virtual void execution ();  This function is called each time the mouse is clicked. More...;  ; virtual void end ();  ; virtual void endOperation ();  This function is called after each mouse click. More...;  ; virtual void wait ();  This function is called when shift key is released. More...;  ; virtual void setSetting (sofa::component::setting::MouseButtonSetting *s);  ; virtual sofa::gui::component::performer::InteractionPerformer * createPerformer ();  ; MOUSE_BUTTON getMouseButton () const;  ; std::string getId ();  . Static Public Member Functions; static std::string getDescription ();  ;  Static Public Member Functions inherited from sofa::gui::common::Operation; static MOUSE_BUTTON GetMouseId (unsigned int i);  . Protected Member Functions; virtual std::string defaultPerformerType () override;  ; void configurePerformer (sofa::gui::component::performer::InteractionPerformer *p) override;  . Additional Inherited Members;  Public Attributes inherited from sofa::gui::common::Operation; sofa::gui::component::performer::InteractionPerformer * performer;  . Attribute details. ◆ setting. sofa::gui::component::FixPickedParticleButtonSetting::SPtr sofa::gui::common::FixOperation::setting. protected . Constructor details. ◆ FixO",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_fix_operation.html:1489,release,released,1489,api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_fix_operation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_fix_operation.html,2,['release'],['released']
Deployability,"onent::collision::detection::algorithm::IncrSAP; sofa::SOFA_ABSTRACT_CLASS(BroadPhaseDetection, Detection)sofa::core::collision::BroadPhaseDetection; sofa::core::collision::Detection::SOFA_ABSTRACT_CLASS(CollisionAlgorithm, objectmodel::BaseObject)sofa::core::collision::CollisionAlgorithm; sofa::core::collision::NarrowPhaseDetection::SOFA_ABSTRACT_CLASS(NarrowPhaseDetection, Detection)sofa::core::collision::NarrowPhaseDetection; SOFA_CLASS(Detection, CollisionAlgorithm)sofa::core::collision::Detection; sofa::core::collision::CollisionAlgorithm::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(IncrSAP, core::collision::BroadPhaseDetection, core::collision::NarrowPhaseDetection)sofa::component::collision::detection::algorithm::IncrSAP; SPtr typedefsofa::core::objectmodel::Base; storedCmPairssofa::core::collision::BroadPhaseDetectionprotected; storedIntersectionMethodsofa::core::collision::Detectionprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; zeroCollision() constsofa::core::collision::NarrowPhaseDetectioninline; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BroadPhaseDetection() override=defaultsofa::core::collision::BroadPhaseDetectionprotected; ~IncrSAP() overridesofa::component::collision::detection::algorithm::IncrSAPprotected; ~NarrowPhaseDetection() overridesofa::core::collision::NarrowPhaseDetectionprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_incr_s_a_p-members.html:13908,update,updateInternal,13908,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_incr_s_a_p-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_incr_s_a_p-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"onent::engine::analyze::Distances< DataTypes >; showGradientMapsofa::component::engine::analyze::Distances< DataTypes >; showGradientsScaleFactorsofa::component::engine::analyze::Distances< DataTypes >; showMapIndexsofa::component::engine::analyze::Distances< DataTypes >; showTextScaleFactorsofa::component::engine::analyze::Distances< DataTypes >; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(Distances, DataTypes), core::DataEngine)sofa::component::engine::analyze::Distances< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::engine::analyze::Distances< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecVecCoord typedefsofa::component::engine::analyze::Distances< DataTypes >; VVD typedefsofa::component::engine::analyze::Distances< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; zonesFramePairsofa::component::engine::analyze::Distances< DataTypes >; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~Distances() overridesofa::component::e",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_distances-members.html:15086,update,updateInternal,15086,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_distances-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_distances-members.html,1,['update'],['updateInternal']
Deployability,"onent::engine::transform::AbstractTransformMatrixEngine;  SOFA_ABSTRACT_CLASS (AbstractTransformMatrixEngine, core::DataEngine);  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called af",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_rotate_transform_matrix_engine.html:3169,update,updateAllInputsIfDirty,3169,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_rotate_transform_matrix_engine.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_rotate_transform_matrix_engine.html,3,['update'],['updateAllInputsIfDirty']
Deployability,"onent::mechanicalload::SurfacePressureForceField< DataTypes >; ForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; State enum namesofa::component::mechanicalload::SurfacePressureForceField< DataTypes >; statesofa::component::mechanicalload::SurfacePressureForceField< DataTypes >protected; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; SurfacePressureForceField()sofa::component::mechanicalload::SurfacePressureForceField< DataTypes >protected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::mechanicalload::SurfacePressureForceField< DataTypes >; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3DerivIndices typedefsofa::component::mechanicalload::SurfacePressureForceField< DataTypes >; Vec3DerivValues typedefsofa::component::mechanicalload::SurfacePressureForceField< DataTypes >; VecCoord typedefsofa::component::mechanicalload::SurfacePressureForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::mechanicalload::SurfacePressureForceField< DataTypes >; VecIndex typedefsofa::component::mechanicalload::SurfacePressureForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecVec3DerivIndices typedefsofa::component::mechanicalload::SurfacePressureForceField< DataTypes >; VecVec3DerivValues typedefsofa::component::mechanicalload::SurfacePressureForceField< DataTypes >; verifyDerivative(VecDeriv &v_plus, VecDeriv &v, VecVec3DerivValues &DVval, VecVec3DerivIndices &DVind, const VecDeriv &Din)sofa::co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_surface_pressure_force_field-members.html:21112,update,updateLinks,21112,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_surface_pressure_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_surface_pressure_force_field-members.html,1,['update'],['updateLinks']
Deployability,"onent::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >; Tetrahedron typedefsofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >; tetrahedronInfosofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >; toLameParameters(_2DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; toLameParameters(_3DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMatrixsofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >protected; updateTopologyInformation()sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >; VecCoord typedefsofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecMat3x3 typedefsofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >; VecReal typedefsofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecTetrahedronRestInformation typedefsofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator=",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_fast_tetrahedral_corotational_force_field-members.html:23478,update,updateTopologyInformation,23478,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_fast_tetrahedral_corotational_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_fast_tetrahedral_corotational_force_field-members.html,1,['update'],['updateTopologyInformation']
Deployability,onent::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::TetrahedronRestInformation Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Friends |; List of all members . sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::TetrahedronRestInformation Class Reference . #include <TetrahedronHyperelasticityFEMForceField.h>; data structure stored for each tetrahedron ; More... Inheritance diagram for sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::TetrahedronRestInformation:. [legend]; Detailed Description; template<class DataTypes>; class sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::TetrahedronRestInformation; data structure stored for each tetrahedron . Public Attributes; Coord m_shapeVector [4];  shape vector at the rest configuration More...;  ; Coord m_fiberDirection;  fiber direction in rest configuration More...;  ; Real m_restVolume {};  rest volume More...;  ; Real m_volScale {};  current tetrahedron volume More...;  ; Real m_volume {};  ; MatrixSym m_SPKTensorGeneral;  volume/ restVolume More...;  ; Matrix3 m_deformationGradient;  deformation gradient = gradPhi More...;  ; Real m_strainEnergy {};  right Cauchy-Green deformation tensor C (gradPhi^T gradPhi) More...;  ;  Public Attributes inherited from sofa::component::solidmechanics::fem::hyperelastic::material::StrainInformation< DataTypes >; Real trC;  Trace of C = I1. More...;  ; Real J;  ; Real lambda;  ; Real trCsquare;  Trace of C^2 : I2 = (trCSquare - trC^2)/2. More...;  ; bool hasBeenInitialized;  boolean indicating whether the invariants have been computed More...;  ; MatrixSym deformationTensor;  right Cauchy-Green deformation tensor C (gradPhi^T gradPhi) More...;  ; EigenMatrix Evect;  ; CoordEigen Evalue;  ;,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_11a43b7aa7f251e640b19f2d5ec26614.html:1049,configurat,configuration,1049,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_11a43b7aa7f251e640b19f2d5ec26614.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_11a43b7aa7f251e640b19f2d5ec26614.html,1,['configurat'],['configuration']
Deployability,"onent::solidmechanics::spring::VectorSpringForceField< DataTypes >, sofa::component::solidmechanics::spring::RegularGridSpringForceField< DataTypes >, sofa::component::solidmechanics::spring::PolynomialSpringsForceField< DataTypes >, sofa::component::solidmechanics::spring::JointSpringForceField< DataTypes >, sofa::component::solidmechanics::spring::GearSpringForceField< DataTypes >, sofa::component::solidmechanics::spring::FrameSpringForceField< DataTypes >, and sofa::component::solidmechanics::spring::SpringForceField< DataTypes >. ◆ addDForce() [2/2]. template<class DataTypes > . void sofa::core::behavior::PairInteractionForceField< DataTypes >::addDForce ; (; const MechanicalParams * ; mparams, . MultiVecDerivId ; dfId . ). overridevirtual . Compute the force derivative given a small displacement from the position and velocity used in the previous call to addForce().; The derivative should be directly derived from the computations done by addForce. Any forces neglected in addDForce will be integrated explicitly (i.e. using its value at the beginning of the timestep).; If the ForceField can be represented as a matrix, this method computes $ df += kFactor K dx + bFactor B dx $; This method retrieves the force and dx vector from the two MechanicalState and call the internal addDForce(VecDeriv&,VecDeriv&,const VecDeriv&,const VecDeriv&,SReal,SReal) method implemented by the component. ; Implements sofa::core::behavior::BaseForceField. ◆ addForce() [1/2]. template<class TDataTypes > . virtual void sofa::core::behavior::PairInteractionForceField< TDataTypes >::addForce ; (; const MechanicalParams * ; mparams, . DataVecDeriv & ; f1, . DataVecDeriv & ; f2, . const DataVecCoord & ; x1, . const DataVecCoord & ; x2, . const DataVecDeriv & ; v1, . const DataVecDeriv & ; v2 . ). pure virtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represente",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_force_field.html:22548,integrat,integrated,22548,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_force_field.html,1,['integrat'],['integrated']
Deployability,"onentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(SubsetTopology, DataTypes), core::DataEngine);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible=false) override;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_subset_topology.html:6030,update,update,6030,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_subset_topology.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_subset_topology.html,1,['update'],['update']
Deployability,oning mesh. /problems-in-the-installation-of-sofaopencl-plugin; ; SOFA - Topic: [SOLVED] Problems in the installation of SofaOpenCL plugin. /problem-sofa-v15-12-after-make-there-is-just-one-build-folder-ubuntu-14-04-lts; . /feed; ; [SOLVED] Problem sofa v15.12 After make there is just one build folder – Ubuntu 14.04 LTS – SOFA. SOFA - Topic: [SOLVED] Problem sofa v15.12 After make there is just one build folder – Ubuntu 14.04 LTS. /problems-using-modeler; . /feed; ; [SOLVED] Problems using Modeler – SOFA. /page; . /11; ; SOFA - Topic: [SOLVED] Problems using Modeler. /3; ; SOFA - Topic: [SOLVED] Problems using Modeler. /8; ; SOFA - Topic: [SOLVED] Problems using Modeler. SOFA - Topic: [SOLVED] Problems using Modeler. /problems-when-building-sofa; ; SOFA - Topic: [SOLVED] Problems when building SOFA. /problems-with-cubetopology-when-using-beamfemforcefield; ; SOFA - Topic: Problems with ‘CubeTopology’ when using ‘BeamFEMForceField’. /problems-with-drivers-installing-phanton; ; SOFA - Topic: [SOLVED] Problems with drivers Installing Phanton. /problems-with-finding-indices; ; SOFA - Topic: [SOLVED] Problems with finding indices. /problems-with-modeler-cant-modify-particle-property-and-change-componets-order; ; SOFA - Topic: [SOLVED] Problems with Modeler: Can't modify particle property and change componets order. /problems-with-oglshadowshader-scn; ; SOFA - Topic: [SOLVED] problems with OglShadowShader.scn. /problems-with-softrobots-inverse-plugin; ; SOFA - Topic: [SOLVED] Problems with SoftRobots.Inverse plugin. /problems-with-working-in-windows-in-developing-a-code; . /feed; ; [SOLVED] Problems with working in windows in developing a code – SOFA. /page; . /13; ; SOFA - Topic: [SOLVED] Problems with working in windows in developing a code. /4; ; SOFA - Topic: [SOLVED] Problems with working in windows in developing a code. SOFA - Topic: [SOLVED] Problems with working in windows in developing a code. /problem-when-running-softrobots-python-script-sofa-v18-12-on-ubuntu-1,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:366960,install,installing-phanton,366960,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['install'],['installing-phanton']
Deployability,"onlinear::NonLinearMappingData< HasStabilizedGeometricStiffness >;  NonLinearMappingData ();  ;  NonLinearMappingData ();  . Protected Member Functions; virtual void matrixFreeApplyDJT (const core::MechanicalParams *mparams, Real kFactor, Data< VecDeriv_t< In > > &parentForce, const Data< VecDeriv_t< In > > &parentDisplacement, const Data< VecDeriv_t< Out > > &childForce)=0;  ; virtual void doUpdateK (const core::MechanicalParams *mparams, const Data< VecDeriv_t< Out > > &childForce, SparseKMatrixEigen &matrix)=0;  ;  Protected Member Functions inherited from sofa::core::Mapping< TIn, TOut >;  Mapping (State< In > *from=nullptr, State< Out > *to=nullptr);  ;  ~Mapping () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::BaseMapping;  BaseMapping ();  Constructor. More...;  ;  ~BaseMapping () override;  Destructor. More...;  ; bool testMechanicalState (BaseState *state);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitD",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_non_linear_mapping.html:17099,update,update,17099,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_non_linear_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_non_linear_mapping.html,1,['update'],['update']
Deployability,"onlinear::RigidMapping< TIn, TOut >; sofa::core::Mapping::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SparseMatrixEigen typedefsofa::component::mapping::nonlinear::RigidMapping< TIn, TOut >protected; SPtr typedefsofa::core::objectmodel::Base; StiffnessSparseMatrixEigen typedefsofa::component::mapping::nonlinear::RigidMapping< TIn, TOut >protected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; testMechanicalState(BaseState *state)sofa::core::BaseMappingprotected; toModelsofa::core::Mapping< TIn, TOut >protected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateK(const core::MechanicalParams *mparams, core::ConstMultiVecDerivId childForceId) overridesofa::component::mapping::nonlinear::RigidMapping< TIn, TOut >virtual; updateK(const core::MechanicalParams *, core::ConstMultiVecDerivId)sofa::component::mapping::nonlinear::RigidMapping< TIn, TOut >virtual; updateK(const core::MechanicalParams *mparams, core::ConstMultiVecDerivId childForceId)sofa::component::mapping::nonlinear::RigidMapping< TIn, TOut >virtual; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateOmega(typename InDeriv::Rot &omega, const OutDeriv &out, const OutCoord &rotatedpoint)sofa::component::mapping::nonlinear::RigidMapping< TIn, TOut >; updateOmega(typename InDeriv::Rot &omega, const OutDeriv &out, const OutCoord &rotatedpoint)sofa::component::mapping::nonlinear::RigidMapping< TIn, TOut >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; Vector typedefsofa::component::mapping::nonlinear::RigidMapping< TIn, TOut >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseM",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping-members.html:23651,update,updateK,23651,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping-members.html,1,['update'],['updateK']
Deployability,"ons |; Protected Member Functions |; List of all members . sofa::core::topology::TopologyHandler Class Reference . #include <TopologyHandler.h>. Inheritance diagram for sofa::core::topology::TopologyHandler:. [legend]; Detailed Description; A class that will interact on a topological Data . Protected Attributes; std::string m_prefix;  use to define engine name. More...;  ; std::string m_data_name;  use to define data handled name. More...;  ; std::set< sofa::geometry::ElementType > m_registeredElements;  Set to store the information which topology element this handler is linked. I.e in which handler list this handler is registered inside the Topology. More...;  ; sofa::core::topology::TopologyContainer * m_topology;  ; std::map< core::topology::TopologyChangeType, TopologyChangeCallback > m_callbackMap;  ;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions; virtual void handleTopologyChange ();  ; void update () override;  Update this value. More...;  ; virtual void ApplyTopologyChanges (const std::list< const core::topology::TopologyChange * > &_topologyChangeEvents, const Size _dataSize);  ; virtual void ApplyTopologyChange (const core::topology::EndingEvent *);  ; virtual void ApplyTopologyChange (const core::topology::PointsIndicesSwap *);  ; virtual void ApplyTopologyChange (const core::topology::PointsAdded *);  Apply adding points elements. More...;  ; virtual void ApplyTopologyChange (const core::topology::PointsRemoved *);  Apply removing points elements. More...;  ; virtual void ApplyTopologyChange (const core::topology::PointsRenumbering *);  Apply renumbering on points elements. More...;  ; virtual void ApplyTopologyChange (const core::topology::PointsMoved *);  Apply moving points elements. More...;  ; virtual void ApplyTopologyChange (const core::topology::EdgesIndicesSwap *);  ; virtual void ApplyTopologyChange (const core::topology::EdgesAdded *);  App",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_handler.html:1203,update,update,1203,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_handler.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_handler.html,1,['update'],['update']
Deployability,"ons;  QFixOperation ();  ; void configure (common::PickHandler *picker, sofa::component::setting::MouseButtonSetting *button) override;  ;  Public Member Functions inherited from sofa::gui::qt::QMouseOperation; DataWidget * createWidgetFromData (sofa::core::objectmodel::BaseData *data);  ;  Public Member Functions inherited from sofa::gui::common::FixOperation;  FixOperation ();  ;  ~FixOperation () override;  ; void setStiffness (double s);  ; virtual double getStiffness () const;  ;  Public Member Functions inherited from sofa::gui::common::Operation;  Operation (sofa::component::setting::MouseButtonSetting::SPtr s=nullptr);  ; virtual ~Operation ();  ; virtual void configure (PickHandler *picker, MOUSE_BUTTON b);  ; virtual void start ();  ; virtual void execution ();  This function is called each time the mouse is clicked. More...;  ; virtual void end ();  ; virtual void endOperation ();  This function is called after each mouse click. More...;  ; virtual void wait ();  This function is called when shift key is released. More...;  ; virtual void setSetting (sofa::component::setting::MouseButtonSetting *s);  ; virtual sofa::gui::component::performer::InteractionPerformer * createPerformer ();  ; MOUSE_BUTTON getMouseButton () const;  ; std::string getId ();  . Additional Inherited Members;  Public Attributes inherited from sofa::gui::common::Operation; sofa::gui::component::performer::InteractionPerformer * performer;  ;  Static Public Member Functions inherited from sofa::gui::common::FixOperation; static std::string getDescription ();  ;  Static Public Member Functions inherited from sofa::gui::common::Operation; static MOUSE_BUTTON GetMouseId (unsigned int i);  ;  Protected Member Functions inherited from sofa::gui::common::FixOperation; virtual std::string defaultPerformerType () override;  ; void configurePerformer (sofa::gui::component::performer::InteractionPerformer *p) override;  ;  Public Slots inherited from sofa::gui::qt::QMouseOperation; void WidgetDi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_fix_operation.html:1781,release,released,1781,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_fix_operation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_fix_operation.html,2,['release'],['released']
Deployability,"ons< DataTypes >::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ init(). template<class DataTypes > . void sofa::component::engine::select::ValuesFromPositions< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ reinit(). template<class DataTypes > . void sofa::component::engine::select::ValuesFromPositions< DataTypes >::reinit. overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_CLASS(). template<class DataTypes > . sofa::component::engine::select::ValuesFromPositions< DataTypes >::SOFA_CLASS ; (; SOFA_TEMPLATE(ValuesFromPositions< DataTypes >, DataTypes) ; , . core::DataEngine ;  . ). ◆ updateValues(). template<class DataTypes > . void sofa::component::engine::select::ValuesFromPositions< DataTypes >::updateValues ; (; TempData & ; _data). protected . ◆ updateVectors(). template<class DataTypes > . void sofa::component::engine::select::ValuesFromPositions< DataTypes >::updateVectors ; (; TempData & ; _data). protected . ◆ valueFromEdge(). template<class DataTypes > . ValuesFromPositions< DataTypes >::Real sofa::component::engine::select::ValuesFromPositions< DataTypes >::valueFromEdge ; (; const Edge & ; e, . const TempData & ; data . ). protected . ◆ valueFromPoint(). template<class DataTypes > . ValuesFromPositions< DataTypes >::Real sofa::component::engine::select::ValuesFromPositions< DataTypes >::valueFromPoint ; (; const PointID & ; pid, . const TempData & ; data . ). protected . ◆ valueFromPosition(). template<class DataTypes > . ValuesFromPositions< DataTypes >::Real sofa::component::engine::select::ValuesFromPositions< DataTypes >::valueFromPosition ; (; const CPos",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions.html:24036,update,updateValues,24036,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions.html,1,['update'],['updateValues']
Deployability,"onse;  CollisionResponse ();  ;  ~CollisionResponse () override=default;  ; void changeInstance (Instance inst) override;  ; void contactCreationError (std::stringstream &errorStream, const core::CollisionModel *model1, const core::CollisionModel *model2, std::string &responseUsed);  Write messages in stringstream in case a contact failed to be created. More...;  ; void createNewContacts (const DetectionOutputMap &outputsMap, Size &nbContact);  Create contacts if it has not been created before. More...;  ; void removeInactiveContacts (const DetectionOutputMap &outputsMap, Size &nbContact);  ; void setNumberOfContacts () const;  ;  Protected Member Functions inherited from sofa::core::collision::ContactManager;  ContactManager ();  Constructor. More...;  ;  ~ContactManager () override;  Destructor. More...;  ; void changeInstance (Instance inst) override;  ;  Protected Member Functions inherited from sofa::core::collision::CollisionAlgorithm;  CollisionAlgorithm ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_rule_based_contact_manager.html:15360,update,update,15360,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_rule_based_contact_manager.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_rule_based_contact_manager.html,1,['update'],['update']
Deployability,"onst BaseLink *link);  . Protected Member Functions;  DefaultAnimationLoop (simulation::Node *gnode=nullptr);  ;  ~DefaultAnimationLoop () override;  ; void behaviorUpdatePosition (const sofa::core::ExecParams *params, SReal dt) const;  ; void updateInternalData (const sofa::core::ExecParams *params) const;  ; void beginIntegration (const sofa::core::ExecParams *params, SReal dt) const;  ; void propagateIntegrateBeginEvent (const sofa::core::ExecParams *params) const;  ; void accumulateMatrixDeriv (sofa::core::ConstraintParams cparams) const;  ; void solve (const sofa::core::ExecParams *params, SReal dt) const;  ; void propagateIntegrateEndEvent (const sofa::core::ExecParams *params) const;  ; void endIntegration (const sofa::core::ExecParams *params, SReal dt) const;  ; void projectPositionAndVelocity (SReal nextTime, const sofa::core::MechanicalParams &mparams) const;  ; void propagateOnlyPositionAndVelocity (SReal nextTime, const sofa::core::MechanicalParams &mparams) const;  ; void propagateCollisionBeginEvent (const sofa::core::ExecParams *params) const;  ; void propagateCollisionEndEvent (const sofa::core::ExecParams *params) const;  ; void collisionDetection (const sofa::core::ExecParams *params) const;  ; void animate (const sofa::core::ExecParams *params, SReal dt) const;  ; void updateSimulationContext (const sofa::core::ExecParams *params, SReal dt, SReal startTime) const;  ; void propagateAnimateEndEvent (const sofa::core::ExecParams *params, SReal dt) const;  ; void updateMapping (const sofa::core::ExecParams *params, SReal dt) const;  ; void computeBoundingBox (const sofa::core::ExecParams *params) const;  ; void propagateAnimateBeginEvent (const sofa::core::ExecParams *params, SReal dt) const;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseAnimationLoop;  BaseAnimationLoop ();  ;  ~BaseAnimationLoop () override;  ; void storeResetState () override;  Save the initial state for later uses in reset() More...;  ;  Protected Member",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_default_animation_loop.html:12113,update,updateInternalData,12113,api/master/sofa/html/classsofa_1_1simulation_1_1_default_animation_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_default_animation_loop.html,6,['update'],"['updateInternalData', 'updateMapping', 'updateSimulationContext']"
Deployability,"onst BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::behavior::SingleStateAccessor< TDataTypes >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, TDataTypes), StateAccessor);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; MechanicalState< TDataTypes > * getMState ();  ; const MechanicalState< TDataTypes > * getMState () const;  . Protected Member Functions;  AffineMovementProjectiveConstraint ();  ; virtual ~AffineMovementProjectiveConstraint ();  ; void projectResponseImpl (VecDeriv &dx);  ;  Protected Member Functions inherited from sofa::core::behavior::ProjectiveConstraintSet< TDataTypes >;  ProjectiveConstraintSet (MechanicalState< TDataTypes > *mm=nullptr);  ;  ~ProjectiveConstraintSet () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseProjectiveConstraintSet;  BaseProjectiveConstraintSet ();  ;  ~BaseProjectiveConstraintSet () override;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Function",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_affine_movement_projective_constraint.html:18660,update,update,18660,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_affine_movement_projective_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_affine_movement_projective_constraint.html,1,['update'],['update']
Deployability,onst DataTracker &)> m_callback;  ; sofa::core::objectmodel::Base * m_owner {nullptr};  ;  Protected Attributes inherited from sofa::core::DataTrackerDDGNode; DataTracker m_dataTracker;  ;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  . Public Member Functions; void setCallback (std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> f);  ; void update () override;  Calls the callback when one of the data has changed. More...;  ; void setOwner (sofa::core::objectmodel::Base *owner);  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called af,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_callback.html:2802,update,updateAllInputsIfDirty,2802,api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_callback.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_callback.html,1,['update'],['updateAllInputsIfDirty']
Deployability,"onst char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  Intersection ();  ;  ~Intersection () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseD",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_intersection.html:10894,update,update,10894,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_intersection.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_intersection.html,1,['update'],['update']
Deployability,"onst char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  LinearSolver ();  ;  ~LinearSolver () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseD",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver.html:13266,update,update,13266,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver.html,1,['update'],['update']
Deployability,"onst char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  SphereQuadTopology (int nx, int ny, int nz);  ;  SphereQuadTopology ();  ;  Protected Member Functions inherited from sofa::component::topology::container::constant::CubeTopology;  CubeTopology (int nx, int ny, int nz);  ;  CubeTopology ();  ; virtual void setSize ();  ; void updatePoints ();  ; void updateEdges ();  ; void updateQuads ();  ;  Protected Member Functions inherited from sofa::component::topology::container::constant::MeshTopology;  MeshTopology ();  ; void createEdgesAroundVertexArray ();  Creates the EdgeSetIndex. More...;  ; void createEdgesInTriangleArray ();  Creates the array of edge indices for each triangle. More...;  ; void createEdgesInQuadArray ();  Creates the array of edge indices for each quad. More...;  ; void createEdgesInTetrahedronArray ();  Creates the array of edge indices for each tetrahedron. More...;  ; void createEdgesInHexahedronArray ();  Creates the array of edge indices for each hexahedron. More...;  ; void createTrianglesAroundVertexArray ();  Creates the TrianglesAroundVertex Array. More...;  ; void createOrientedTrianglesAroundVertexArray ();  Creates the oriented Triangle Vertex Shell Array. More...;  ; void createTrianglesAroundEdgeArray ();  Creates the TrianglesAroundEdge Array. More..",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_sphere_quad_topology.html:31351,update,updatePoints,31351,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_sphere_quad_topology.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_sphere_quad_topology.html,3,['update'],"['updateEdges', 'updatePoints', 'updateQuads']"
Deployability,"onst core::MechanicalParams * ; , . const DataVecCoord & ;  . ); const. inlineoverridevirtual . Reimplemented from sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >. ◆ init(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >.; Reimplemented in sofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedronFEMForceFieldAndMass< DataTypes >, and sofa::component::solidmechanics::fem::nonuniform::HexahedronCompositeFEMForceFieldAndMass< DataTypes >. ◆ initTextures(). template<class DataTypes > . virtual void sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >::initTextures ; (; ). inlinevirtual . ◆ integrateMass(). template<class DataTypes > . HexahedronFEMForceFieldAndMass< DataTypes >::Real sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >::integrateMass ; (; int ; signx, . int ; signy, . int ; signz, . Real ; l0, . Real ; l1, . Real ; l2 . ). ◆ isDiagonal(). template<class DataTypes > . bool sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >::isDiagonal ; (; ); const. inlineoverridevirtual . Implements sofa::core::behavior::BaseMass. ◆ reinit(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >::reinit. overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >.; Reimplemented in sofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedronFEMForceFieldAndMass< DataTypes >, and sofa::com",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass.html:39554,integrat,integrateMass,39554,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass.html,1,['integrat'],['integrateMass']
Deployability,"onst int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(OdeSolver, objectmodel::BaseObject)sofa::core::behavior::OdeSolver; SOFA_CLASS(CentralDifferenceSolver, sofa::core::behavior::OdeSolver)sofa::component::odesolver::forward::CentralDifferenceSolver; sofa::core::behavior::OdeSolver::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; solve(const core::ExecParams *params, SReal dt, sofa::core::MultiVecCoordId xResult, sofa::core::MultiVecDerivId vResult) overridesofa::component::odesolver::forward::CentralDifferenceSolvervirtual; sofa::core::behavior::OdeSolver::solve(const core::ExecParams *params, SReal dt)sofa::core::behavior::OdeSolverinlinevirtual; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OdeSolver() overridesofa::core::behavior::OdeSolverprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_central_difference_solver-members.html:11179,update,updateInternal,11179,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_central_difference_solver-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_central_difference_solver-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"onst std::string &path, const BaseLink *link);  . Protected Member Functions;  TextureInterpolation ();  ;  ~TextureInterpolation () override;  ; void updateGraph ();  ; void resetGraph ();  ; void standardLinearInterpolation ();  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1engine_1_1_texture_interpolation.html:14395,update,update,14395,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1engine_1_1_texture_interpolation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1engine_1_1_texture_interpolation.html,1,['update'],['update']
Deployability,"onst std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(MouseButtonSetting, core::objectmodel::ConfigurationSetting)sofa::component::setting::MouseButtonSetting; sofa::core::objectmodel::ConfigurationSetting::SOFA_CLASS(ConfigurationSetting, BaseObject)sofa::core::objectmodel::ConfigurationSetting; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ConfigurationSetting() overridesofa::core::objectmodel::ConfigurationSettingprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_mouse_button_setting-members.html:10256,update,updateInternal,10256,api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_mouse_button_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_mouse_button_setting-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"onst type::Vec3 &center, const double orient[4][4], const type::Vec3 &length, const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=deletesofa::gl::Axisstatic; draw(const double *mat, const type::Vec3 &length, const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=deletesofa::gl::Axis; draw(const type::Vec3 &center, const Quaternion &orient, SReal length=1.0_sreal, const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=deletesofa::gl::Axisstatic; draw(const type::Vec3 &center, const double orient[4][4], SReal length=1.0_sreal, const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=deletesofa::gl::Axisstatic; draw(const double *mat, SReal length=1.0_sreal, const type::Vec4f &colorX=type::Vec4f(1, 0, 0, 1), const type::Vec4f &colorY=type::Vec4f(0, 1, 0, 1), const type::Vec4f &colorZ=type::Vec4f(0, 0, 1, 1))=deletesofa::gl::Axisstatic; draw(const type::Vec3 &center, const type::Vec3 &ext, const double &radius)sofa::gl::Axisstatic; draw(const type::Vec3 &center, const type::Vec3 &ext, const double &r1, const double &r2)sofa::gl::Axisstatic; Quaternion typedefsofa::gl::Axis; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Vector3, sofa::type::Vec3)sofa::gl::Axis; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Vec4f, sofa::type::Vec4f)sofa::gl::Axis; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Vec3d, sofa::type::Vec3d)sofa::gl::Axis; update(const type::Vec3 &center, const Quaternion &orient=Quaternion())sofa::gl::Axis; update(const type::Vec3 &center, const double orient[4][4])sofa::gl::Axis; update(const double *mat)sofa::gl::Axis; ~Axis()sofa::gl::Axis. Generated on Mon Nov 11 2024 03:18:55 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis-members.html:4740,update,update,4740,api/master/sofa/html/classsofa_1_1gl_1_1_axis-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1_axis-members.html,6,['update'],['update']
Deployability,"onst;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase.html:6511,update,updateInternal,6511,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase.html,2,['update'],['updateInternal']
Deployability,"onst;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase.html:4974,update,updateInternal,4974,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase.html,89,"['Update', 'update']","['Update', 'updateInternal']"
Deployability,"onst;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an in",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_add_data_repository.html:3053,update,updateInternal,3053,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_add_data_repository.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_add_data_repository.html,7,['update'],['updateInternal']
Deployability,"onst;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  OglViewport ();  ;  ~OglViewport () override;  ; void renderToViewport (core::visual::VisualParams *vp);  ; void renderFBOToScreen (core::visual::VisualParams *vp);  ;  Protected Member Functions inherited from sofa::core::visual::VisualManager;  ~VisualManager () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering2d_1_1_ogl_viewport.html:14325,update,update,14325,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering2d_1_1_ogl_viewport.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering2d_1_1_ogl_viewport.html,1,['update'],['update']
Deployability,"onst;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; MechanicalState< DataTypes > * getMState ();  ; const MechanicalState< DataTypes > * getMState () const;  . Protected Member Functions;  ConstantForceField ();  ; sofa::core::objectmodel::ComponentState updateFromIndices ();  Functions updating data. More...;  ; sofa::core::objectmodel::ComponentState updateFromForcesVector ();  ; sofa::core::objectmodel::ComponentState updateFromTotalForce ();  ; bool checkForce (const Deriv &force);  Functions checking inputs before update. More...;  ; bool checkForces (const VecDeriv &forces);  ; sofa::core::objectmodel::ComponentState computeForceFromSingleForce (const Deriv singleForce);  Functions computing and updating the constant force vector. More...;  ; sofa::core::objectmodel::ComponentState computeForceFromForcesVector (const VecDeriv &forces);  ; sofa::core::objectmodel::ComponentState computeForceFromTotalForce (const Deriv &totalForce);  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ()",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_constant_force_field.html:17437,update,updateFromIndices,17437,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_constant_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_constant_force_field.html,1,['update'],['updateFromIndices']
Deployability,"onstexpr . Function details. ◆ applyElasticityTensor(). template<class DataTypes > . virtual void sofa::component::solidmechanics::fem::hyperelastic::material::Costa< DataTypes >::applyElasticityTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . const MatrixSym & ; , . MatrixSym & ;  . ). inlinevirtual . computes the Elasticity Tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ deriveSPKTensor(). template<class DataTypes > . virtual void sofa::component::solidmechanics::fem::hyperelastic::material::Costa< DataTypes >::deriveSPKTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . MatrixSym & ;  . ). inlinevirtual . computes the second Piola Kirchhoff stress tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ ElasticityTensor(). template<class DataTypes > . virtual void sofa::component::solidmechanics::fem::hyperelastic::material::Costa< DataTypes >::ElasticityTensor ; (; StrainInformation< DataTypes > * ; sinfo, . const MaterialParameters< DataTypes > & ; param, . Matrix6 & ; outputTensor . ). inlinevirtual . Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ getStrainEnergy(). template<class DataTypes > . virtual Real sofa::component::solidmechanics::fem::hyperelastic::material::Costa< DataTypes >::getStrainEnergy ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ;  . ). inlinevirtual . returns the strain energy of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. sofacomponentsolidmechanicsfemhyperelasticmaterialCosta; Generated on Mon Nov 11 2024 03:01:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_costa.html:3979,configurat,configuration,3979,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_costa.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_costa.html,1,['configurat'],['configuration']
Deployability,"onstexpr . Function details. ◆ applyElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes >::applyElasticityTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . const MatrixSym & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the Elasticity Tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ deriveSPKTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes >::deriveSPKTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the second Piola Kirchhoff stress tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ ElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes >::ElasticityTensor ; (; StrainInformation< DataTypes > * ; sinfo, . const MaterialParameters< DataTypes > & ; param, . Matrix6 & ; outputTensor . ). inlineoverridevirtual . Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ getStrainEnergy(). template<class DataTypes > . Real sofa::component::solidmechanics::fem::hyperelastic::material::Ogden< DataTypes >::getStrainEnergy ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ;  . ). inlineoverridevirtual . returns the strain energy of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. sofacomponentsolidmechanicsfemhyperelasticmaterialOgden; Generated on Mon Nov 11 2024 03:02:25 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_ogden.html:3983,configurat,configuration,3983,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_ogden.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_ogden.html,1,['configurat'],['configuration']
Deployability,"onstraintSet)sofa::core::behavior::BaseConstraint; sofa::core::behavior::BaseConstraintSet::SOFA_ABSTRACT_CLASS(BaseConstraintSet, objectmodel::BaseObject)sofa::core::behavior::BaseConstraintSet; sofa::core::behavior::StateAccessor::SOFA_ABSTRACT_CLASS(StateAccessor, objectmodel::BaseObject)sofa::core::behavior::StateAccessor; SOFA_ABSTRACT_CLASS2(BaseInteractionConstraint, BaseConstraint, StateAccessor)sofa::core::behavior::BaseInteractionConstraint; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeLambda(const ConstraintParams *cParams, MultiVecDerivId res, const sofa::linearalgebra::BaseVector *lambda)=0sofa::core::behavior::BaseConstraintpure virtual; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecConstArea typedefsofa::core::behavior::BaseConstraint; VecConstCoord typedefsofa::core::behavior::BaseConstraint; VecConstDeriv typedefsofa::core::behavior::BaseConstraint; VecConstraintBlockInfo typedefsofa::core::behavior::BaseConstraint; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecPersistentID typedefsofa::core::behavior::BaseConstraint; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseConstraint() overridesofa::core::behavior::BaseConstraintinlineprotected; ~BaseConstraintSet() overridesofa::core::behavior::BaseConstraintSetprotected; ~BaseInteractionConstraint() overridesofa::core::behavior::BaseInteractionConstraintinlinepro",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_constraint-members.html:13097,update,updateLinks,13097,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_constraint-members.html,1,['update'],['updateLinks']
Deployability,"ontainer::dynamic::TetrahedronSetTopologyModifierinlineprotected; TetraID typedefsofa::component::topology::container::dynamic::TetrahedronSetTopologyModifier; TopologyModifier()sofa::core::topology::TopologyModifierinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::topology::container::dynamic::TriangleSetTopologyModifier; TriangleID typedefsofa::component::topology::container::dynamic::TriangleSetTopologyModifier; TrianglesAroundEdge typedefsofa::component::topology::container::dynamic::TriangleSetTopologyModifier; TrianglesAroundVertex typedefsofa::component::topology::container::dynamic::TriangleSetTopologyModifier; TriangleSetTopologyModifier()sofa::component::topology::container::dynamic::TriangleSetTopologyModifierinlineprotected; TrianglesInTetrahedron typedefsofa::component::topology::container::dynamic::TetrahedronSetTopologyModifier; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseTopologyObject() overridesofa::core::topology::BaseTopologyObjectinlineprotected; ~EdgeSetTopologyModifier() overridesofa::component::topology::container::dynamic::EdgeSetTopologyModifierinlineprotected; ~PointSetTopologyModifier() overridesofa::component::topology::container::dynamic::PointSetTopologyModifierinlineprotected; ~TetrahedronSetTopologyModifier() overridesofa::component::topology::container::dynamic::TetrahedronSetTopologyModifierinlineprotected; ~TopologyModifier()",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_modifier-members.html:28482,update,updateLinks,28482,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_modifier-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_modifier-members.html,1,['update'],['updateLinks']
Deployability,"ontaining all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::behavior::LinearSolverAccessor; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  . Protected Member Functions;  NewmarkImplicitSolver ();  ;  Protected Member Functions inherited from sofa::core::behavior::OdeSolver;  OdeSolver ();  ;  ~OdeSolver () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_newmark_implicit_solver.html:14306,update,update,14306,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_newmark_implicit_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_newmark_implicit_solver.html,1,['update'],['update']
Deployability,"ontext, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >; void preAssembleSystem (const core::MechanicalParams *) override;  ; virtual void allocateSystem ();  ; virtual void resizeVectors (sofa::Size n);  Set the size of RHS and solution to n. More...;  ; void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, TVector *globalVector);  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, GraphScatteredVector *globalVector);  ; void copyLocalVectorToGlobalVector (core::MultiVecDerivId v, GraphScatteredVector *globalVector);  ;  Protected Member Functions inherited from sofa::core::behavior::BaseMatrixLinearSystem;  BaseMatrixLinearSystem ();  ; virtual void postAssembleSystem (const core::MechanicalParams *);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void in",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_free_system.html:15850,update,update,15850,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_free_system.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_free_system.html,1,['update'],['update']
Deployability,"ool createWidgets ();  ; virtual void setDataReadOnly (bool readOnly);  This method is called after createWidgets to configure whether the created widgets should be read-only. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  ;  Public Member Functions inherited from sofa::gui::qt::TDataWidget< RGBAColor >;  TDataWidget (QWidget *parent, const char *name, MyTData *d);  ; sofa::core::objectmodel::Data< RGBAColor > * getData ();  ; const sofa::core::objectmodel::Data< RGBAColor > * getData () const;  ; virtual void setData (MyTData *d);  ; virtual void setData (MyData *d);  ;  Public Member Functions inherited from sofa::gui::qt::DataWidget;  DataWidget (QWidget *parent, const char *name, MyData *d);  ;  ~DataWidget () override;  ; virtual void setData (MyData *d);  ; const core::objectmodel::BaseData * getBaseData () const;  BaseData pointer accessor function. More...;  ; core::objectmodel::BaseData * getBaseData ();  ; void updateVisibility ();  ; bool isDirty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  . Protected Member Functions; virtual void readFromData ();  The implementation of this method tells how the widget reads the value of the data. More...;  ; virtual void writeToData ();  . Additional Inherited Members;  Static Public Member Functions inherited from sofa::gui::qt::TDataWidget< RGBAColor >; static RealObject * create (RealObject *, CreatorArgument &arg);  ;  Static Public Member Functions inherited from sofa::gui::qt::DataWidget; template<class T > ; static T * create (T *, const CreatorArgument &arg);  ; static DataWidget * CreateDataWidget (const DataWidget::CreatorArgument &dwarg);  ;  Signals inherited from sofa::gui::qt::DataWidget; void WidgetDirty (bool);  ; void DataOwnerDirty (bool);  ; void dataValue",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1rgbacolordatawidget__h_1_1_r_g_b_a_color_data_widget.html:2069,update,updateVisibility,2069,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1rgbacolordatawidget__h_1_1_r_g_b_a_color_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1rgbacolordatawidget__h_1_1_r_g_b_a_color_data_widget.html,2,['update'],['updateVisibility']
Deployability,"ool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase.html:6765,update,updateInternal,6765,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase.html,75,['update'],['updateInternal']
Deployability,"ool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an in",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_uncoupled_constraint_correction.html:10413,update,updateInternal,10413,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_uncoupled_constraint_correction.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_uncoupled_constraint_correction.html,1,['update'],['updateInternal']
Deployability,"ool isSet () const;  ; void unset ();  Reset the isSet flag to false, to indicate that the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::Data< void * >; int m_counter;  Number of changes since creation. More...;  ; bool m_isSet;  True if this Data is set, i.e. its value is different from the default value. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseData; std::string help {""""};  Help message. More...;  ; std::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_topology_data.html:10759,update,updated,10759,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_topology_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_topology_data.html,1,['update'],['updated']
Deployability,"ool isSet () const;  ; void unset ();  Reset the isSet flag to false, to indicate that the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; virtual void swapPostProcess (Index i1, Index i2);  ; virtual void removePostProcess (sofa::Index elemId);  ; virtual void addPostProcess (sofa::Index dataLastId);  ; virtual void updateLastIndex (Index posLastIndex, Index newGlobalId);  ;  Protected Member Functions inherited from sofa::core::topology::TopologyData< ElementType, VecT >; void linkToElementDataArray ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_subset_data.html:16218,update,updated,16218,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_subset_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_subset_data.html,1,['update'],['updated']
Deployability,"ool isSet () const;  ; void unset ();  Reset the isSet flag to false, to indicate that the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void linkToElementDataArray (sofa::core::topology::BaseMeshTopology::Point *);  ; void linkToElementDataArray (sofa::core::topology::BaseMeshTopology::Edge *);  ; void linkToElementDataArray (sofa::core::topology::BaseMeshTopology::Triangle *);  ; void linkToElementDataArray (sofa::core::topology::BaseMeshTopology::Quad *);  ; void linkToElementDataArray (sofa::core",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_data.html:15568,update,updated,15568,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_data.html,1,['update'],['updated']
Deployability,"ool isSet () const;  ; void unset ();  Reset the isSet flag to false, to indicate that the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void swapPostProcess (Index i1, Index i2) override;  ; void removePostProcess (sofa::Index elemId) override;  ; void addPostProcess (sofa::Index dataLastId) override;  ; void updateLastIndex (Index posLastIndex, Index newGlobalId) override;  ;  Protected Member Functions inherited from sofa::core::topology::TopologyData< ElementType, VecT >; void linkToElementDataAr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_subset_indices.html:15769,update,updated,15769,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_subset_indices.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_subset_indices.html,1,['update'],['updated']
Deployability,"ool isSet () const;  ; void unset ();  Reset the isSet flag to false, to indicate that the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void updatePath ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< sofa::type::SVector< std::string > >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseDat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:8994,update,updated,8994,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,1,['update'],['updated']
Deployability,"ool isSet () const;  ; void unset ();  Reset the isSet flag to false, to indicate that the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Protected Member Functions; void updatePath ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< std::string >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValu",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:8858,update,updated,8858,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,1,['update'],['updated']
Deployability,"ool isSet () const;  ; void unset ();  Reset the isSet flag to false, to indicate that the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Static Public Member Functions; static constexpr bool isCopyOnWrite ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name o",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:9370,update,updated,9370,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,1,['update'],['updated']
Deployability,"ool isSet () const;  ; void unset ();  Reset the isSet flag to false, to indicate that the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Static Public Member Functions; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...;  ; template<class T > ; static std::string typeName ();  Helper method to get the type name of type T. More...;  . Protected Member Functions; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Dat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:7141,update,updated,7141,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,1,['update'],['updated']
Deployability,"ool isSet () const;  ; void unset ();  Reset the isSet flag to false, to indicate that the current value is the default for this Data. More...;  ; void forceSet ();  Reset the isSet flag to true, to indicate that the current value has been modified. More...;  ; int getCounter () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Data< void * >; static constexpr bool isCopyOnWrite ();  ; static std::string templateName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseData; static std::string decodeTypeName (const std::type_info &t);  Helper method to decode the type name to a more readable form if possible. More...",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:8476,update,updated,8476,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,1,['update'],['updated']
Deployability,oon as one of its input changes (a pointer to this DataTrackerFunctor is passed as parameter in the functor) . Public Member Functions;  DataTrackerFunctor (FunctorType &functor);  ; void setDirtyValue () override;  ; void update () override;  This method is needed by DDGNode. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkContainer outputs;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs wi,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_functor.html:1579,update,updated,1579,api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_functor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_functor.html,1,['update'],['updated']
Deployability,"op-down traversal. More...;  ; void doUpdate () override;  Where you put your engine's impl. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called af",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_clustering_engine.html:3893,update,updateAllInputsIfDirty,3893,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_clustering_engine.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_clustering_engine.html,2,['update'],['updateAllInputsIfDirty']
Deployability,opic: SOFA force cable-actuation. /sofa-forum-disturbances; ; SOFA - Topic: SOFA forum disturbances. /sofa-for-virtual-commissioning; ; SOFA - Topic: SOFA for virtual commissioning?. /sofa-generating-error; ; SOFA - Topic: sofa generating error. /sofa-gui-with-sofapython3; ; SOFA - Topic: Sofa Gui with SofaPython3. /sofahapi-and-mouse-interference; . /feed; ; [SOLVED] SofaHAPI and Mouse Interference – SOFA. /page; . /14; ; SOFA - Topic: [SOLVED] SofaHAPI and Mouse Interference. /15; ; SOFA - Topic: [SOLVED] SofaHAPI and Mouse Interference. /4; ; SOFA - Topic: [SOLVED] SofaHAPI and Mouse Interference. /8; ; SOFA - Topic: [SOLVED] SofaHAPI and Mouse Interference. SOFA - Topic: [SOLVED] SofaHAPI and Mouse Interference. /sofahapi-loading-failed; ; SOFA - Topic: [SOLVED] SofaHAPI loading failed. /sofa-in-c-and-code-optimization-tips; ; SOFA - Topic: SOFA in C++ and Code Optimization Tips. /sofa-installation; . /page; . /13; ; SOFA - Topic: [SOLVED] SOFA installation. /14; ; SOFA - Topic: [SOLVED] SOFA installation. /4; ; SOFA - Topic: [SOLVED] SOFA installation. SOFA - Topic: [SOLVED] SOFA installation. /sofa-in-your-browser; . /page; . /11; ; SOFA - Topic: SOFA in your browser !. /14; ; SOFA - Topic: SOFA in your browser !. /4; ; SOFA - Topic: SOFA in your browser !. SOFA - Topic: SOFA in your browser !. /sofa-launcher-and-modelorderreduction-problems; ; SOFA - Topic: sofa-launcher and modelOrderReduction problems. /sofa-libraries-headers-files-on-different-versions; ; SOFA - Topic: SOFA libraries/headers/files on different versions. /sofa-needs-your-support; ; SOFA - Topic: SOFA needs your support. /sofaphysicsapi-improvementsbackward-compatibility; ; SOFA - Topic: SofaPhysicsAPI improvements/backward compatibility. /sofapluginmanager-h-building; ; SOFA - Topic: [SOLVED] SofaPluginManager.h (building). /sofa-plugin-with-some-additional-libraries; ; SOFA - Topic: SOFA plugin with some additional libraries. /sofapython; . /feed; ; [SOLVED] sofa+python – SOFA. /page; . /2;,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:392707,install,installation,392707,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['install'],['installation']
Deployability,"opology::TopologicalMapping::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; swapInput(Element elem, Index i1, Index i2)sofa::component::mapping::linear::Mesh2PointTopologicalMappingprotected; swapOutputPoints(Index i1, Index i2, bool removeLast=false)sofa::component::mapping::linear::Mesh2PointTopologicalMappingprotected; TETRA enum valuesofa::component::mapping::linear::Mesh2PointTopologicalMapping; tetraBaryCoordssofa::component::mapping::linear::Mesh2PointTopologicalMappingprotected; toModelsofa::core::topology::TopologicalMapping; TopologicalMapping()sofa::core::topology::TopologicalMappingprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; TRIANGLE enum valuesofa::component::mapping::linear::Mesh2PointTopologicalMapping; triangleBaryCoordssofa::component::mapping::linear::Mesh2PointTopologicalMappingprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateTopologicalMappingBottomUp()sofa::core::topology::TopologicalMappinginlinevirtual; updateTopologicalMappingTopDown() overridesofa::component::mapping::linear::Mesh2PointTopologicalMappingvirtual; Vec3d typedefsofa::component::mapping::linear::Mesh2PointTopologicalMapping; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~Mesh2PointTopologicalMapping() overridesofa::component::mapping::linear::Mesh2PointTopologicalMappinginlineprotected; ~TopologicalMapping() overridesofa::cor",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping-members.html:17040,update,updateInternal,17040,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping-members.html,1,['update'],['updateInternal']
Deployability,"opology; TetrahedronID typedefsofa::core::topology::Topology; TetraID typedefsofa::core::topology::Topology; Topology()sofa::core::topology::Topologyinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; updateEdges()sofa::component::topology::container::constant::CubeTopologyprotected; updateHexahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updatePoints()sofa::component::topology::container::constant::CubeTopologyprotected; updateQuads()sofa::component::topology::container::constant::CubeTopologyprotected; updateTetrahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; UV typedefsofa::component::topology::container::constant::MeshTopology; UVID typedefsofa::component::topology::container::constant::MeshTopology; validHexahedrasofa::component::topology::container::constant::MeshTopologyprotected; validTetrahedrasofa::component::topology::container::constant::MeshTopologyprotected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~Topology()sofa::core::topology::Topologyinlineprotectedvirtual.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_cube_topology-members.html:38384,update,updateTetrahedra,38384,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_cube_topology-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_cube_topology-members.html,2,['update'],['updateTetrahedra']
Deployability,"opologyModifier *toPointMod=nullptr);  ; void addInputTriangle (Index i, topology::container::dynamic::PointSetTopologyModifier *toPointMod=nullptr);  ; void addInputTetrahedron (Index i, topology::container::dynamic::PointSetTopologyModifier *toPointMod=nullptr);  ; void swapInput (Element elem, Index i1, Index i2);  ; void removeInput (Element elem, const sofa::type::vector< Index > &tab);  ; void renumberInput (Element elem, const sofa::type::vector< Index > &index);  ; void swapOutputPoints (Index i1, Index i2, bool removeLast=false);  ; void removeOutputPoints (const sofa::type::vector< Index > &tab);  ; bool internalCheck (const char *step, const type::fixed_array< size_t, NB_ELEMENTS > &nbInputRemoved);  Check consistency of internal maps and output topology. More...;  ; bool internalCheck (const char *step);  ;  Protected Member Functions inherited from sofa::core::topology::TopologicalMapping;  TopologicalMapping ();  ;  ~TopologicalMapping () override;  ; bool checkTopologyInputTypes ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper m",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping.html:16966,update,update,16966,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping.html,1,['update'],['update']
Deployability,"or (const BaseNode *node) const override;  ; bool hasAncestor (const BaseContext *context) const override;  ; void * getObject (const sofa::core::objectmodel::ClassInfo &class_info, const sofa::core::objectmodel::TagSet &tags, SearchDirection dir=SearchUp) const override;  ; void * getObject (const sofa::core::objectmodel::ClassInfo &class_info, const std::string &path) const override;  ; void getObjects (const sofa::core::objectmodel::ClassInfo &class_info, GetObjectsCallBack &container, const sofa::core::objectmodel::TagSet &tags, SearchDirection dir=SearchUp) const override;  ; sofa::core::topology::BaseMeshTopology * getMeshTopologyLink (SearchDirection dir=SearchUp) const override;  ; void initVisualContext () override;  Called during initialization to correctly propagate the visual context to the children. More...;  ; void updateContext () override;  Update the whole context values, based on parent and local ContextObjects. More...;  ; void updateSimulationContext () override;  Update the simulation context values(gravity, time...), based on parent and local ContextObjects. More...;  ; Node * findCommonParent (Node *node2) override;  ; void precomputeTraversalOrder (const sofa::core::ExecParams *params) override;  compute the traversal order from this Node More...;  ; virtual void moveChild (BaseNode::SPtr node) override;  Move a node in this from another node. More...;  ;  Public Member Functions inherited from sofa::simulation::Node;  SOFA_ABSTRACT_CLASS2 (Node, BaseNode, Context);  ; virtual void removeControllers ();  Remove odesolvers and mastercontroler. More...;  ; Node * getChild (const std::string &name) const;  Find a child node given its name. More...;  ; Node * getTreeNode (const std::string &name) const;  Get a descendant node given its name. More...;  ; Node * getNodeInGraph (const std::string &absolutePath) const;  Get a node in the scene graph matching the given absolute path. More...;  ; Children getChildren () const override;  Get children nod",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:3856,update,updateSimulationContext,3856,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,3,"['Update', 'update']","['Update', 'updateSimulationContext']"
Deployability,"or);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; MechanicalState< DataTypes > * getMState ();  ; const MechanicalState< DataTypes > * getMState () const;  . Protected Member Functions;  TriangularBendingSprings ();  ; virtual ~TriangularBendingSprings ();  ; void applyEdgeCreation (Index edgeIndex, EdgeInformation &ei, const core::topology::BaseMeshTopology::Edge &, const sofa::type::vector< Index > &, const sofa::type::vector< SReal > &);  ; void applyTriangleCreation (const type::vector< Index > &triangleAdded, const type::vector< core::topology::BaseMeshTopology::Triangle > &, const type::vector< type::vector< Index > > &, const type::vector< type::vector< SReal > > &);  ; void applyTriangleDestruction (const type::vector< Index > &triangleRemoved);  ; void applyPointDestruction (const type::vector< Index > &pointIndices);  Method to update. More...;  ; void applyPointRenumbering (const type::vector< Index > &pointToRenumber);  Method to update. More...;  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html:18134,update,update,18134,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html,1,['update'],['update']
Deployability,"or::BaseForceField; sofa::core::behavior::StateAccessor::SOFA_ABSTRACT_CLASS(StateAccessor, objectmodel::BaseObject)sofa::core::behavior::StateAccessor; PairStateAccessor< TDataTypes1, TDataTypes2 >::SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE2(PairStateAccessor, TDataTypes1, TDataTypes2), StateAccessor)sofa::core::behavior::PairStateAccessor< TDataTypes1, TDataTypes2 >; SOFA_ABSTRACT_CLASS2(SOFA_TEMPLATE2(MixedInteractionForceField, TDataTypes1, TDataTypes2), BaseInteractionForceField, SOFA_TEMPLATE2(PairStateAccessor, TDataTypes1, TDataTypes2))sofa::core::behavior::MixedInteractionForceField< TDataTypes1, TDataTypes2 >; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord1 typedefsofa::core::behavior::MixedInteractionForceField< TDataTypes1, TDataTypes2 >; VecCoord2 typedefsofa::core::behavior::MixedInteractionForceField< TDataTypes1, TDataTypes2 >; VecData typedefsofa::core::objectmodel::Base; VecDeriv1 typedefsofa::core::behavior::MixedInteractionForceField< TDataTypes1, TDataTypes2 >; VecDeriv2 typedefsofa::core::behavior::MixedInteractionForceField< TDataTypes1, TDataTypes2 >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~MixedInteractionForceField",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field-members.html:16276,update,updateLinks,16276,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_force_field-members.html,1,['update'],['updateLinks']
Deployability,"or::ConstraintCorrection< TDataTypes >; sofa::core::behavior::BaseConstraintCorrection::SOFA_ABSTRACT_CLASS(BaseConstraintCorrection, objectmodel::BaseObject)sofa::core::behavior::BaseConstraintCorrection; SOFA_CLASS(SOFA_TEMPLATE(UncoupledConstraintCorrection, TDataTypes), SOFA_TEMPLATE(sofa::core::behavior::ConstraintCorrection, TDataTypes))sofa::component::constraint::lagrangian::correction::UncoupledConstraintCorrection< TDataTypes >; sofa::core::behavior::ConstraintCorrection::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; UncoupledConstraintCorrection(sofa::core::behavior::MechanicalState< DataTypes > *mm=nullptr)sofa::component::constraint::lagrangian::correction::UncoupledConstraintCorrection< TDataTypes >protected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::constraint::lagrangian::correction::UncoupledConstraintCorrection< TDataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::constraint::lagrangian::correction::UncoupledConstraintCorrection< TDataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecReal typedefsofa::component::constraint::lagrangian::correction::UncoupledConstraintCorrection< TDataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseConstraintCorrection() overridesofa::core::behavior::BaseConstraintCorrectionprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ConstraintCorrection() override=defaultsofa::core::be",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_uncoupled_constraint_correction-members.html:19145,update,updateLinks,19145,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_uncoupled_constraint_correction-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_uncoupled_constraint_correction-members.html,1,['update'],['updateLinks']
Deployability,"or::SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(TetrahedralTensorMassForceField, DataTypes), SOFA_TEMPLATE(core::behavior::ForceField, DataTypes))sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >; ForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; TetrahedralTensorMassForceField()sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >protected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLameCoefficients()sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMatrixsofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >protected; VecCoord typedefsofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecType typedefsofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field-members.html:18562,update,updateInternal,18562,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field-members.html,1,['update'],['updateInternal']
Deployability,"or::StateAccessor)sofa::component::linearsystem::BaseMatrixProjectionMethod< TMatrix >; sofa::core::behavior::StateAccessor::SOFA_ABSTRACT_CLASS(StateAccessor, objectmodel::BaseObject)sofa::core::behavior::StateAccessor; SOFA_CLASS(SOFA_TEMPLATE(ConstantSparsityProjectionMethod, TMatrix), SOFA_TEMPLATE(MatrixProjectionMethod, TMatrix))sofa::component::linearsystem::ConstantSparsityProjectionMethod< TMatrix >; sofa::component::linearsystem::MatrixProjectionMethod::SOFA_CLASS(SOFA_TEMPLATE(MatrixProjectionMethod, TMatrix), SOFA_TEMPLATE(BaseMatrixProjectionMethod, TMatrix))sofa::component::linearsystem::MatrixProjectionMethod< TMatrix >; sofa::component::linearsystem::BaseMatrixProjectionMethod::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseMatrixProjectionMethod() overridesofa::component::linearsystem::BaseMatrixProjectionMethod< TMatrix >; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ConstantSparsityProjectionMethod() overridesofa::component::linearsystem::ConstantSparsityProjectionMethod< TMatrix >; ~MatrixProjectionMethod() overridesofa::component::linearsystem::MatrixProjectionMethod< TMatrix >; ~StateAccessor() override=defaultsofa::core::behavior::StateAccessorprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_constant_sparsity_projection_method-members.html:14987,update,updateInternal,14987,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_constant_sparsity_projection_method-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_constant_sparsity_projection_method-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"or::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; toLameParameters(_2DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; toLameParameters(_3DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Transformation typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >protected; Triangle typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >; TrianglesAroundVertex typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >; TriangularFEMForceFieldOptim()sofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >protected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >; VecElement typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecReal typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; Vector typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >; VecTriangleInfo typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >; VecTriangleState typedefsofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOpt",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field_optim-members.html:23198,update,updateInternal,23198,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field_optim-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field_optim-members.html,1,['update'],['updateInternal']
Deployability,"or< DataTypes >inlineexplicitprotected; sofa::SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; sofa::core::behavior::SingleStateAccessor::SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< DataTypes >; sofa::core::behavior::StateAccessor::SOFA_ABSTRACT_CLASS(StateAccessor, objectmodel::BaseObject)sofa::core::behavior::StateAccessor; SOFA_CLASS(SOFA_TEMPLATE(ShapeMatching, DataTypes), core::DataEngine)sofa::component::engine::analyze::ShapeMatching< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; targetPositionsofa::component::engine::analyze::ShapeMatching< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VD typedefsofa::component::engine::analyze::ShapeMatching< DataTypes >; VecCoord typedefsofa::component::engine::analyze::ShapeMatching< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VI typedefsofa::component::engine::analyze::ShapeMatching< DataTypes >; VVI typedefsofa::component::engine::analyze::ShapeMatching< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::Bas",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_shape_matching-members.html:14755,update,update,14755,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_shape_matching-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_shape_matching-members.html,1,['update'],['update']
Deployability,"orMassForceField< DataTypes > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes > Class Template Reference . #include <TriangularTensorMassForceField.h>. Inheritance diagram for sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >:. [legend]. Classes; class  EdgeRestInformation;  ; class  Mat3;  . Protected Attributes; sofa::core::objectmodel::RenamedData< sofa::type::vector< EdgeRestInformation > > edgeInfo;  ; sofa::core::topology::EdgeData< sofa::type::vector< EdgeRestInformation > > d_edgeInfo;  Internal edge data. More...;  ; VecCoord _initialPoints;  the initial positions of the points More...;  ; bool updateMatrix;  ; sofa::core::objectmodel::RenamedData< Real > f_poissonRatio;  ; sofa::core::objectmodel::RenamedData< Real > f_youngModulus;  ; Data< Real > d_poissonRatio;  Poisson ratio in Hooke's law. More...;  ; Data< Real > d_youngModulus;  Young's modulus in Hooke's law. More...;  ; SingleLink< TriangularTensorMassForceField< DataTypes >, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > l_topology;  Link to be set to the topology container in the component graph. More...;  ; Real lambda;  ; Real mu;  first Lame coefficient More...;  ; sofa::core::topology::BaseMeshTopology * m_topology;  Pointer to the current topology. More...;  ;  Protected Attributes inherited from sofa::core::behavior::StateAccessor; MultiLink< StateAccessor, BaseMechanicalState, BaseLink::FLAG_DUPLICATE > l_mechanicalStates;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLEL",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field.html:975,update,updateMatrix,975,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field.html,1,['update'],['updateMatrix']
Deployability,"ord & ; p, . bool ; implicit = false . ). protected . ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). overridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the same ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangle_f_e_m_force_field.html:30244,update,update,30244,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangle_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangle_f_e_m_force_field.html,1,['update'],['update']
Deployability,"ord & ; x . ); const. virtual . Reimplemented from sofa::core::behavior::Mass< DataTypes >. ◆ getTotalMass() [1/2]. template<class DataTypes , class GeometricalTypes > . const DiagonalMass< DataTypes, GeometricalTypes >::Real & sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::getTotalMass. virtual . ◆ getTotalMass() [2/2]. template<class DataTypes , class GeometricalTypes = DataTypes> . template<typename T = GeometricalTypes, typename std::enable_if_t< T::spatial_dimensions > = 3, int > . SReal sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::getTotalMass ; (; ); const. inline . Method to update See alsod_vertexMass when a new Triangle is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TRIANGLESADDED event is fired. Method to update . d_vertexMass when a Triangle is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TRIANGLESREMOVED event is fired. Method to update . d_vertexMass when a new Quad is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSADDED event is fired. Method to update . d_vertexMass when a Quad is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSREMOVED event is fired. Method to update . d_vertexMass when a new Tetrahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAADDED event is fired. Method to update . d_vertexMass when a Tetrahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAREMOVED event is fired. Method to update . d_vertexMass when a new Hexahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when HEXAHEDRAADDED event is fired. Method to update . d_vertexMass when a Hexahedron is removed. Will be set as callback in the PointData . d_ve",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html:45551,update,update,45551,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,1,['update'],['update']
Deployability,"ore...;  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(ComplementaryROI, DataTypes), core::DataEngine);  ;  SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER (Index, sofa::Index);  ;  ComplementaryROI ();  ;  ~ComplementaryROI () override;  ; void doUpdate () override;  Update. More...;  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void parseFields (const std::map< std::string, std::string * > &str) override;  Assign the field values stored in the given map of name -> value pairs. More...;  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_complementary_r_o_i.html:2983,update,update,2983,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_complementary_r_o_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_complementary_r_o_i.html,1,['update'],['update']
Deployability,"ore...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (DefaultVisualManagerLoop, sofa::core::visual::VisualLoop);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void initStep (sofa::core::visual::VisualParams *vparams) override;  Initialize the textures. More...;  ; void updateStep (sofa::core::visual::VisualParams *vparams) override;  Update the Visual Models: triggers the Mappings. More...;  ; void updateContextStep (sofa::core::visual::VisualParams *vparams) override;  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; void drawStep (sofa::core::visual::VisualParams *vparams) override;  Render the scene. More...;  ; void computeBBoxStep (sofa::core::visual::VisualParams *vparams, SReal *minBBox, SReal *maxBBox, bool init) override;  Compute the bounding box of the scene. If init is set to ""true"", then minBBox and maxBBox will be initialised to a default value. More...;  ;  Public Member Functions inherited from sofa::core::visual::VisualLoop;  SOFA_CLASS (VisualLoop, VisualModel);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_default_visual_manager_loop.html:2279,update,updateStep,2279,api/master/sofa/html/classsofa_1_1simulation_1_1_default_visual_manager_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_default_visual_manager_loop.html,3,"['Update', 'update']","['Update', 'updateStep']"
Deployability,"ore...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (CompositingVisualLoop, simulation::DefaultVisualManagerLoop);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void drawStep (sofa::core::visual::VisualParams *vparams) override;  Render the scene. More...;  ;  Public Member Functions inherited from sofa::simulation::DefaultVisualManagerLoop;  SOFA_CLASS (DefaultVisualManagerLoop, sofa::core::visual::VisualLoop);  ; void initStep (sofa::core::visual::VisualParams *vparams) override;  Initialize the textures. More...;  ; void updateStep (sofa::core::visual::VisualParams *vparams) override;  Update the Visual Models: triggers the Mappings. More...;  ; void updateContextStep (sofa::core::visual::VisualParams *vparams) override;  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; void computeBBoxStep (sofa::core::visual::VisualParams *vparams, SReal *minBBox, SReal *maxBBox, bool init) override;  Compute the bounding box of the scene. If init is set to ""true"", then minBBox and maxBBox will be initialised to a default value. More...;  ;  Public Member Functions inherited from sofa::core::visual::VisualLoop;  SOFA_CLASS (VisualLoop, VisualModel);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_compositing_visual_loop.html:2756,update,updateStep,2756,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_compositing_visual_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_compositing_visual_loop.html,1,['update'],['updateStep']
Deployability,"ore...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(SelectLabelROI, _T), DataEngine);  ;  SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER (Inherited, Inherit1);  ;  SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER (Index, sofa::Index);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ;  Public Member Functions inherited from sofa::core::DataEngine;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input fr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_select_label_r_o_i.html:2545,update,update,2545,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_select_label_r_o_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_select_label_r_o_i.html,1,['update'],['update']
Deployability,"ore...;  ; ExecParams & setExecMode (ExecMode v);  Request a specific mode of execution. More...;  ; ExecParams & setThreadID (int v);  Specify the index of the current thread. More...;  . Static Public Member Functions; static const MechanicalParams * defaultInstance ();  Get the default MechanicalParams, to be used to provide a default values for method parameters. More...;  ;  Static Public Member Functions inherited from sofa::core::ExecParams; static ExecParams * defaultInstance ();  Get the default ExecParams, to be used to provide a default values for method parameters. More...;  . Setup methods; Called by the OdeSolver from which the mechanical computations originate. They all return a reference to this MechanicalParam instance, to ease chaining multiple setup calls. . bool m_kFactorUsed;  Checks if the stiffness matrix contributions factor has been accessed. More...;  ; MechanicalParams & setDt (SReal v);  Set time step. More...;  ; MechanicalParams & setImplicit (bool v);  Specify if the time integration scheme is implicit. More...;  ; MechanicalParams & setMFactor (SReal v);  Set Mass matrix contributions factor (for implicit schemes) More...;  ; MechanicalParams & setBFactor (SReal v);  Set Damping matrix contributions factor (for implicit schemes) More...;  ; MechanicalParams & setKFactor (SReal v);  Set Stiffness matrix contributions factor (for implicit schemes) More...;  ; MechanicalParams & setSymmetricMatrix (bool b)=delete;  ; MechanicalParams & setSupportOnlySymmetricMatrix (bool b);  Set the flag (for implicit schemes) specifying if solvers are only specialized for symmetric matrices. More...;  ; void setKFactorUsed (bool b) const;  Checks wether or nor kFactor is used in ForceFields. Temporary here for compatibility reasons. More...;  ; bool getKFactorUsed () const;  ; MechanicalParams & setEnergy (bool v);  Specify if the potential and kinematic energies should be computed ? More...;  ; const ConstMultiVecCoordId & x () const;  ; ConstMultiVec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html:5308,integrat,integration,5308,api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,1,['integrat'],['integration']
Deployability,"ore...;  ; QLineSeries * m_selectionSeries;  Series of selection substep duration in ms to be plot on the graph. size =. More...;  ; std::unordered_map< std::string, CheckedSeries > m_checkedSeries;  ; std::string m_selectedStep;  Name of the substep selected in the Tree. More...;  ; std::string m_selectedParentStep;  Name of the parent of the substep selected in the Tree. More...;  . Public Member Functions;  SofaWindowProfiler (QWidget *parent);  ; void activateATimer (bool activate);  method called when window is shown to activate AdvancedTimer recording. More...;  ; void pushStepData ();  main method to iterate on the AdvancedTimer Data and update the info in the widgets More...;  ; void resetGraph ();  Method to clear all Data and reset graph. More...;  . Protected Member Functions; void createChart ();  Method called at creation to init the chart. More...;  ; void createTreeView ();  Method called at creation to init the QTreeWidget. More...;  ; void updateChart ();  Method called at each iteration to update the chart. More...;  ; QTreeWidgetItem * addTreeItem (AnimationSubStepData *subStep);  Method to add new QTreeWidgetItem item inside the QTreeWidget using the data from. More...;  ; QTreeWidgetItem * addTreeItem (const AnimationStepData *step);  . Signals; void closeWindow (bool);  . Public Slots; void closeEvent (QCloseEvent *) override;  ; void updateFromSelectedStep (int step);  Method to update all widgets from select absisse on the graph. More...;  ; void updateSummaryLabels (int step);  Method called when a given. More...;  ; void updateTree (int step);  Method called when a given. More...;  ; void onStepSelected (QTreeWidgetItem *item, int column);  Method called when a QTreeWidgetItem is selected in the Tree view. More...;  ; void expandRootNodeOnly () const;  . Attribute details. ◆ m_axisY. QValueAxis* sofa::gui::qt::SofaWindowProfiler::m_axisY. protected . Pointer to Y Axis. . ◆ m_bufferSize. unsigned int sofa::gui::qt::SofaWindowProfiler::m_buffe",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_window_profiler.html:3537,update,updateChart,3537,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_window_profiler.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_window_profiler.html,4,['update'],"['update', 'updateChart']"
Deployability,"ore...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_rendering_s_r_g_b.html:4874,Update,Update,4874,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_rendering_s_r_g_b.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_rendering_s_r_g_b.html,1,['Update'],['Update']
Deployability,"ore...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  BaseMeshTopology ();  ;  Protected Member Functions inherited from sofa::core::topology::Topology;  Topology ();  ; virtual ~Topology ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_mesh_topology.html:19869,update,update,19869,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_mesh_topology.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_mesh_topology.html,1,['update'],['update']
Deployability,"ore...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Data< void * >; std::istream & readValue (std::istream &in);  ; std::istream & readValue (std::istream &in);  ; SOFA_CORE_API std::istream & readValue (std::istream &in);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseData; bool genericCopyValueFrom (const BaseData *parent);  Try to update this Data from the value of its parent in ""fast mode"";. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Attribute details. ◆ m_lastElementIndex. template<class T = void*> . Index sofa::core::topology::BaseTopologyData< T >::m_lastElementIndex = 0. protected . to handle properly the removal of items, the container must keep the last element index and update it during operations (add/remove). Note that this index is mandatory and can't be retrieved directly from the topology in the case when several topology events are queued. i.e: If 2 removalElements events are queued, the second event still point to a topology not yet updated by the first event. . ◆ m_topology. template<class T = void*> . sofa::core::topology::BaseMeshTopology* sofa::core::topology::BaseTopologyData< T >::m_topology = nullptr. protected . Pointer to the Topology this TopologyData is depending on. . Constructor details. ◆ BaseTopologyData(). template<class T = void*> . sofa::core::topology::BaseTopologyData< T >::BaseTopologyData ; (; const sofa::core::objectmodel::BaseData::BaseInitData & ; init). inlineexplicit . Constructor used via the Base::initData() methods. . Function details. ◆ add() [1/6]. template<class T = void*> . virtual void sofa::core::topology::BaseTopologyData< T >::add ; (; const sofa::type::vector< Topology::EdgeID > &",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_topology_data.html:13951,update,update,13951,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_topology_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_topology_data.html,1,['update'],['update']
Deployability,"ore::CollisionModel::canCollideWithElement ; (; Index ; , . CollisionModel * ; , . Index ;  . ). inlinevirtual . Test if two elements can collide with each other. ; This method should be implemented by models supporting self-collisions to prune tests between adjacent elements.; Default to true. Note that this method assumes that canCollideWith(model2) was already used to test if the collision models can collide. ; Reimplemented in sofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >, sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >, sofa::component::collision::geometry::PointCollisionModel< TDataTypes >, sofa::component::collision::geometry::PointCollisionModel< sofa::defaulttype::StdVectorTypes >, and sofa::component::collision::geometry::LineCollisionModel< TDataTypes >. ◆ computeBoundingTree(). virtual void sofa::core::CollisionModel::computeBoundingTree ; (; int ; maxDepth = 0). pure virtual . Create or update the bounding volume hierarchy. ; Implemented in sofa::component::collision::geometry::TriangleOctreeModel, sofa::component::collision::geometry::TriangleModelInRegularGrid, sofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >, sofa::component::collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >, sofa::component::collision::geometry::TetrahedronCollisionModel, sofa::component::collision::geometry::SphereCollisionModel< TDataTypes >, sofa::component::collision::geometry::PointCollisionModel< TDataTypes >, sofa::component::collision::geometry::PointCollisionModel< sofa::defaulttype::StdVectorTypes >, sofa::component::collision::geometry::LineCollisionModel< TDataTypes >, sofa::component::collision::geometry::CylinderCollisionModel< TDataTypes >, sofa::component::collision::geometry::CubeCollisionModel, and sofa::component::collision::geometry::RayCollisionModel. ◆ computeContinuousBoundingTree(). virtual void sofa::core::CollisionModel::computeConti",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_collision_model.html:26488,update,update,26488,api/master/sofa/html/classsofa_1_1core_1_1_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_collision_model.html,1,['update'],['update']
Deployability,"ore::behavior::PairStateAccessor::SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE2(PairStateAccessor, DataTypes1, DataTypes2), StateAccessor)sofa::core::behavior::PairStateAccessor< DataTypes1, DataTypes2 >; SOFA_ABSTRACT_CLASS2(SOFA_TEMPLATE(PairInteractionForceField, DataTypes), BaseInteractionForceField, SOFA_TEMPLATE2(PairStateAccessor, DataTypes, DataTypes))sofa::core::behavior::PairInteractionForceField< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(PenalityContactForceField, DataTypes), SOFA_TEMPLATE(core::behavior::PairInteractionForceField, DataTypes))sofa::component::collision::response::contact::PenalityContactForceField< DataTypes >; PairInteractionForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::collision::response::contact::PenalityContactForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::collision::response::contact::PenalityContactForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~PairInteractionForceField() overridesofa::core::behavior::PairInteractionForceField< DataTypes >protected; ~PairStateAccessor() override=defaultsofa:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_penality_contact_force_field-members.html:18657,update,updateInternal,18657,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_penality_contact_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_penality_contact_force_field-members.html,1,['update'],['updateInternal']
Deployability,"ore::loader::MeshLoaderinline; setTranslation(SReal dx, SReal dy, SReal dz)sofa::core::loader::MeshLoaderinline; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(MeshLoader, BaseLoader)sofa::core::loader::MeshLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(StringMeshCreator, sofa::core::loader::MeshLoader)sofa::component::io::mesh::StringMeshCreator; sofa::core::loader::MeshLoader::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; StringMeshCreator()sofa::component::io::mesh::StringMeshCreatorprotected; Tetrahedron typedefsofa::core::loader::MeshLoader; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::loader::MeshLoader; type()sofa::component::io::mesh::StringMeshCreatorinlinevirtual; updateElements()sofa::core::loader::MeshLoadervirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMesh()sofa::core::loader::MeshLoadervirtual; updateNormals()sofa::core::loader::MeshLoadervirtual; updatePoints()sofa::core::loader::MeshLoadervirtual; Vec3 typedefsofa::core::loader::MeshLoader; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseLoader() overridesofa::core::loader::BaseLoaderprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_string_mesh_creator-members.html:16638,update,updateElements,16638,api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_string_mesh_creator-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_string_mesh_creator-members.html,6,['update'],"['updateElements', 'updateInternal', 'updateLinks', 'updateMesh', 'updateNormals', 'updatePoints']"
Deployability,"ore::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; broadPhaseDetectionsofa::core::collision::Pipelineprotected; broadPhaseDetectionssofa::core::collision::Pipelineprotected; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; computeCollisionDetection() overridesofa::simulation::PipelineImplvirtual; computeCollisionReset() overridesofa::simulation::PipelineImplvirtual; computeCollisionResponse() overridesofa::simulation::PipelineImplvirtual; computeCollisions()sofa::core::collision::Pipelineinline; contactManagersofa::core::collision::Pipelineprotected; contactManagerssofa::core::collision::Pipelineprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; doCollisionDetection(const sofa::type::vector< core::CollisionModel * > &collisionModels)=0sofa::core::collision::Pipelineprotectedpure virtual; doCollisionReset()=0sofa::core::collision::Pipelineprotectedpure virtual; doCollisionResponse()=0sofa::core::collision::Pipelineprotectedpure virtual; doUpdateInternal()sofa::c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html:2209,Pipeline,PipelineImplvirtual,2209,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,1,['Pipeline'],['PipelineImplvirtual']
Deployability,"ore::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(MakeAliasComponent, core::objectmodel::BaseObject)sofa::component::sceneutility::makealiascomponent::MakeAliasComponent; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~MakeAliasComponent() overridesofa::component::sceneutility::makealiascomponent::MakeAliasComponentinline.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1makealiascomponent_1_1_make_alias_component-members.html:10180,update,updateInternal,10180,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1makealiascomponent_1_1_make_alias_component-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1makealiascomponent_1_1_make_alias_component-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"ore::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(Spiral, DataTypes), core::DataEngine)sofa::component::engine::generate::Spiral< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; Spiral()sofa::component::engine::generate::Spiral< DataTypes >protected; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec6 typedefsofa::component::engine::generate::Spiral< DataTypes >; VecCoord typedefsofa::component::engine::generate::Spiral< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~Spiral() overridesofa::component::engine::generate::Spiral< DataTypes >inlineprotec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_spiral-members.html:12295,update,updateAllInputsIfDirty,12295,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_spiral-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_spiral-members.html,1,['update'],['updateAllInputsIfDirty']
Deployability,ore::objectmodel::Base; srgbTexturingsofa::component::visual::VisualModelImpl; State()sofa::core::State< TDataTypes >protected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; texsofa::gl::component::rendering3d::OglModelprotected; TexCoord typedefsofa::component::visual::VisualModelImpl; texturenamesofa::component::visual::VisualModelImpl; texturessofa::gl::component::rendering3d::OglModelprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; trianglesRevisionsofa::gl::component::rendering3d::OglModelprotected; update()sofa::gl::component::rendering3d::MergeVisualModelsinlineprotected; updateBuffers() overridesofa::gl::component::rendering3d::OglModelvirtual; updateEdgesIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateQuadsIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateTrianglesIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateVertexBuffer()sofa::gl::component::rendering3d::OglModel; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; useEdgessofa::gl::component::rendering3d::OglModelprotected; useQuadssofa::gl::component::rendering3d::OglModelprotected; useTopologysofa::component::visual::VisualModelImpl; useTrianglessofa::gl::component::rendering3d::OglModelprotected; vbosofa::gl::component::rendering3d::OglModelprotected; VBOGenDonesofa::gl::component::rendering3d::OglModelprotected; Vec3Real typedefsofa::component::visual::VisualModelImpl; VecCoord typedefsofa::component::visual::VisualModelImpl; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::visual::VisualModelImpl; VecLink typedefsofa::core::objectmodel::Base; VecReal typedefsofa::core::State< TDataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecTexCoord typedefsofa,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models-members.html:27652,update,updateTrianglesIndicesBuffer,27652,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models-members.html,1,['update'],['updateTrianglesIndicesBuffer']
Deployability,"ore::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(ConfigurationSetting, BaseObject)sofa::core::objectmodel::ConfigurationSetting; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ConfigurationSetting() overridesofa::core::objectmodel::ConfigurationSettingprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html:9835,update,updateInternal,9835,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"ore::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseAnimationLoop, objectmodel::BaseObject)sofa::core::behavior::BaseAnimationLoop; SOFA_CLASS(ConstraintAnimationLoop, sofa::simulation::CollisionAnimationLoop)sofa::component::animationloop::ConstraintAnimationLoop; sofa::simulation::CollisionAnimationLoop::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; Solvers typedefsofa::simulation::CollisionAnimationLoopprotected; SPtr typedefsofa::core::objectmodel::Base; step(const core::ExecParams *params, SReal dt) overridesofa::component::animationloop::ConstraintAnimationLoopvirtual; storeResetState() overridesofa::core::behavior::BaseAnimationLoopprotectedvirtual; timesofa::component::animationloop::ConstraintAnimationLoopprotected; timersofa::component::animationloop::ConstraintAnimationLoopprotected; timeScalesofa::component::animationloop::ConstraintAnimationLoopprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeAndAccumulateAndCountConstraintDirections(const core::ExecParams *params, simulation::Node *context, unsigned int &numConstraints)sofa::component::animationloop::ConstraintAnimationLoopprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseAnimationLoop() overridesofa::core::behavior::BaseAnimationLoopprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~CollisionAnimationLoop() overridesofa::simulation::CollisionAnimationLoopprotected; ~ConstraintAnimationLoop() overridesofa::component::animationloop::Const",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_constraint_animation_loop-members.html:14883,update,updateInternal,14883,api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_constraint_animation_loop-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_constraint_animation_loop-members.html,1,['update'],['updateInternal']
Deployability,"ore::topology::TopologicalMapping);  ; void init () override;  Initializes the target BaseTopology from the source BaseTopology. More...;  ; void updateTopologicalMappingTopDown () override;  Translates the TopologyChange objects from the source to the target. More...;  ; Index getFromIndex (Index ind) override;  ;  Public Member Functions inherited from sofa::core::topology::TopologicalMapping;  SOFA_ABSTRACT_CLASS (TopologicalMapping, objectmodel::BaseObject);  ; virtual void setTopologies (In *from, Out *to);  Specify the input and output models. More...;  ; void setPathInputObject (const std::string &o);  Set the path to the objects mapped in the scene graph. More...;  ; void setPathOutputObject (const std::string &o);  ; In * getFrom ();  Accessor to the INPUT topology of the TopologicalMapping : More...;  ; Out * getTo ();  Accessor to the OUTPUT topology of the TopologicalMapping : More...;  ; virtual void updateTopologicalMappingBottomUp ();  Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topology : More...;  ; virtual bool propagateFromInputToOutputModel ();  Return true if this mapping is able to propagate topological changes from input to output model. More...;  ; virtual bool propagateFromOutputToInputModel ();  Return true if this mapping is able to propagate topological changes from output to input model. More...;  ; virtual bool isTheOutputTopologySubdividingTheInputOne ();  return true if the output topology subdivide the input one. (the topology uses the Loc2GlobVec/Glob2LocMap/In2OutMap structs and share the same DOFs) More...;  ; const std::map< Index, Index > & getGlob2LocMap ();  Accessor to index maps : More...;  ; virtual Index getGlobIndex (Index ind);  ; void dumpGlob2LocMap ();  ; void dumpLoc2GlobVec ();  ; virtual bool checkTopologies ();  Method to check the topology mapping maps regarding the upper topology. More...;  ; virtual void getFromIndex (type::vector< Index > &, con",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_edge2_quad_topological_mapping.html:4256,update,updateTopologicalMappingBottomUp,4256,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_edge2_quad_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_edge2_quad_topological_mapping.html,5,['update'],['updateTopologicalMappingBottomUp']
Deployability,"ore::topology::TopologicalMapping::propagateFromOutputToInputModel ; (; ). inlinevirtual . Return true if this mapping is able to propagate topological changes from output to input model. ; Reimplemented in sofa::component::mapping::linear::SimpleTesselatedTetraTopologicalMapping. ◆ setPathInputObject(). void sofa::core::topology::TopologicalMapping::setPathInputObject ; (; const std::string & ; o). inline . Set the path to the objects mapped in the scene graph. . ◆ setPathOutputObject(). void sofa::core::topology::TopologicalMapping::setPathOutputObject ; (; const std::string & ; o). inline . ◆ setTopologies(). void sofa::core::topology::TopologicalMapping::setTopologies ; (; In * ; from, . Out * ; to . ). virtual . Specify the input and output models. . ◆ SOFA_ABSTRACT_CLASS(). sofa::core::topology::TopologicalMapping::SOFA_ABSTRACT_CLASS ; (; TopologicalMapping ; , . objectmodel::BaseObject ;  . ). ◆ updateTopologicalMappingBottomUp(). virtual void sofa::core::topology::TopologicalMapping::updateTopologicalMappingBottomUp ; (; ). inlinevirtual . Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topology : ; Reimplemented in sofa::component::mapping::linear::SimpleTesselatedTetraTopologicalMapping. ◆ updateTopologicalMappingTopDown(). virtual void sofa::core::topology::TopologicalMapping::updateTopologicalMappingTopDown ; (; ). pure virtual . Method called at each topological changes propagation which comes from the INPUT topology to adapt the OUTPUT topology : ; Implemented in sofa::component::topology::mapping::Triangle2EdgeTopologicalMapping, sofa::component::topology::mapping::Tetra2TriangleTopologicalMapping, sofa::component::topology::mapping::SubsetTopologicalMapping, sofa::component::topology::mapping::Quad2TriangleTopologicalMapping, sofa::component::topology::mapping::IdentityTopologicalMapping, sofa::component::topology::mapping::Hexa2TetraTopologicalMapping, sofa::component::topology::mapping:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html:23130,update,updateTopologicalMappingBottomUp,23130,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping.html,1,['update'],['updateTopologicalMappingBottomUp']
Deployability,"ore::visual::ShaderElement; shaderssofa::gl::component::shader::OglShaderElementprotected; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglTexturePointer, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglTexturePointer; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; textureUnitsofa::gl::component::shader::OglTexturePointerprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; unbind()sofa::gl::component::shader::OglTexturePointer; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglTexturePointer() overridesofa::gl::component::shader::OglTexturePointerprotected; ~ShaderElement() overridesofa::core::visual::ShaderElementinlineprotected; ~VisualModel() overridesofa::core::visual::VisualModelinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture_pointer-members.html:13412,update,updateVisual,13412,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture_pointer-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture_pointer-members.html,4,['update'],['updateVisual']
Deployability,oreResetState()sofa::core::objectmodel::BaseObjectvirtual; texsofa::gl::component::rendering3d::OglModelprotected; TexCoord typedefsofa::component::visual::VisualModelImpl; texturenamesofa::component::visual::VisualModelImpl; texturessofa::gl::component::rendering3d::OglModelprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; trianglesRevisionsofa::gl::component::rendering3d::OglModelprotected; update()sofa::gl::component::rendering3d::MergeVisualModelsinlineprotected; updateBuffers() overridesofa::gl::component::rendering3d::OglModelvirtual; updateEdgesIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateQuadsIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateTrianglesIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateVertexBuffer()sofa::gl::component::rendering3d::OglModel; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; useEdgessofa::gl::component::rendering3d::OglModelprotected; useQuadssofa::gl::component::rendering3d::OglModelprotected; useTopologysofa::component::visual::VisualModelImpl; useTrianglessofa::gl::component::rendering3d::OglModelprotected; vbosofa::gl::component::rendering3d::OglModelprotected; VBOGenDonesofa::gl::component::rendering3d::OglModelprotected; Vec3Real typedefsofa::component::visual::VisualModelImpl; VecCoord typedefsofa::component::visual::VisualModelImpl; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::visual::VisualModelImpl; VecLink typedefsofa::core::objectmodel::Base; VecReal typedefsofa::core::State< TDataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecTexCoord typedefsofa::component::visual::VisualModelImpl; VecVisualEdge typedefsofa::component::visual::VisualModelImpl; VecVisualQuad typedefsofa::co,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models-members.html:27790,update,updateVisual,27790,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models-members.html,1,['update'],['updateVisual']
Deployability,"ormalsFromPoints< DataTypes >, sofa::component::engine::generate::MeshTetraStuffing, sofa::component::engine::generate::MeshClosingEngine< DataTypes >, sofa::component::engine::generate::MeshBarycentricMapperEngine< DataTypes >, sofa::component::engine::generate::MergeVectors< VecT >, sofa::component::engine::generate::MergeSets< T >, sofa::component::engine::generate::MergePoints< DataTypes >, sofa::component::engine::generate::MergeMeshes< DataTypes >, sofa::component::engine::generate::JoinPoints< DataTypes >, sofa::component::engine::generate::GroupFilterYoungModulus< DataTypes >, sofa::component::engine::generate::GenerateSphere< DataTypes >, sofa::component::engine::generate::GenerateRigidMass< DataTypes, MassType >, sofa::component::engine::generate::GenerateGrid< DataTypes >, sofa::component::engine::generate::GenerateCylinder< DataTypes >, sofa::component::engine::generate::ExtrudeSurface< DataTypes >, sofa::component::engine::generate::ExtrudeQuadsAndGenerateHexas< DataTypes >, sofa::component::engine::generate::ExtrudeEdgesAndGenerateQuads< DataTypes >, sofa::component::engine::analyze::SumEngine< TDataType >, sofa::component::engine::analyze::ShapeMatching< DataTypes >, sofa::component::engine::analyze::HausdorffDistance< DataTypes >, sofa::component::engine::analyze::Distances< DataTypes >, sofa::component::engine::analyze::ClusteringEngine< DataTypes >, sofa::component::engine::analyze::AverageCoord< DataTypes >, sofa::component::engine::analyze::ShapeMatching< DataTypes >, and sofa::component::engine::analyze::ShapeMatching< DataTypes >. ◆ SOFA_ABSTRACT_CLASS(). sofa::core::DataEngine::SOFA_ABSTRACT_CLASS ; (; DataEngine ; , . core::objectmodel::BaseObject ;  . ). ◆ update(). void sofa::core::DataEngine::update ; (; ). finalvirtual . Updates your inputs and calls cleanDirty() for you. User implementation moved to doUpdate() ; Implements sofa::core::objectmodel::DDGNode. sofacoreDataEngine; Generated on Mon Nov 11 2024 03:14:09 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_engine.html:21490,update,update,21490,api/master/sofa/html/classsofa_1_1core_1_1_data_engine.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_engine.html,2,['update'],['update']
Deployability,"ormerType () override;  ; void configurePerformer (sofa::gui::component::performer::InteractionPerformer *p) override;  . Additional Inherited Members;  Public Attributes inherited from sofa::gui::common::Operation; sofa::gui::component::performer::InteractionPerformer * performer;  ;  Protected Attributes inherited from sofa::gui::common::Operation; PickHandler * pickHandle;  ; sofa::component::setting::MouseButtonSetting::SPtr mbsetting;  ; MOUSE_BUTTON button;  ;  Public Member Functions inherited from sofa::gui::common::Operation;  Operation (sofa::component::setting::MouseButtonSetting::SPtr s=nullptr);  ; virtual ~Operation ();  ; virtual void configure (PickHandler *picker, MOUSE_BUTTON b);  ; virtual void configure (PickHandler *picker, sofa::component::setting::MouseButtonSetting *s);  ; virtual void start ();  ; virtual void execution ();  This function is called each time the mouse is clicked. More...;  ; virtual void end ();  ; virtual void endOperation ();  This function is called after each mouse click. More...;  ; virtual void wait ();  This function is called when shift key is released. More...;  ; virtual void setSetting (sofa::component::setting::MouseButtonSetting *s);  ; virtual sofa::gui::component::performer::InteractionPerformer * createPerformer ();  ; MOUSE_BUTTON getMouseButton () const;  ; std::string getId ();  . Function details. ◆ configurePerformer(). void sofa::gui::common::AddFrameOperation::configurePerformer ; (; sofa::gui::component::performer::InteractionPerformer * ; p). overrideprotectedvirtual . Reimplemented from sofa::gui::common::Operation. ◆ defaultPerformerType(). std::string sofa::gui::common::AddFrameOperation::defaultPerformerType ; (; ). overrideprotectedvirtual . Reimplemented from sofa::gui::common::Operation. ◆ getDescription(). static std::string sofa::gui::common::AddFrameOperation::getDescription ; (; ). inlinestatic . sofaguicommonAddFrameOperation; Generated on Mon Nov 11 2024 03:19:18 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_add_frame_operation.html:1756,release,released,1756,api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_add_frame_operation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_add_frame_operation.html,2,['release'],['released']
Deployability,"ors are used : ; VecCoord ; : containing positions. ; VecDeriv ; : derivative values, i.e. velocity, forces, displacements. In most cases they are the same (i.e. 3D/2D point particles), but they can be different (rigid frames for instance). Several pre-defined vectors are stored : ; position ; ; velocity ; ; force ; ; dx ; (displacement). Other vectors can be allocated to store other temporary values. Vectors can be assigned efficiently by just swapping pointers.; In addition to state vectors, the current constraint system matrix is also stored, containing the coefficient of each constraint defined over the DOFs in this body. . Classes; class  ConstraintBlock;  ; class  VMultiOpEntry;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (BaseMechanicalState, BaseState);  ;  SOFA_BASE_CAST_IMPLEMENTATION (BaseMechanicalState);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; Methods allowing to have access to the geometry without a template class (generic but not efficient); virtual SReal getPX (Index) const;  ; virtual SReal getPY (Index) const;  ; virtual SReal getPZ (Index) const;  ; Mechanical integration related methods; Note: all these methods can now be implemented generically using VecId-based operations . virtual void beginIntegration (SReal);  Called at the beginning of each integration step. More...;  ; virtual void endIntegration (const ExecParams *params, SReal);  Called at the end of each integration step. More...;  ; virtual void resetForce (const ExecParams *params, VecDerivId f=VecDerivId::force());  Set F = 0. More...;  ; virtual void resetAcc (const ExecParams *params, VecDerivId a=VecDerivId::dx());  Set Acc =0. More...;  ; virtual void accumulateForce (const ExecParams *params, VecDerivId f=VecDerivId::force());  Add stored external forces to F. More...;  ; Constraints related methods; virtual void resetConstraint (const ConstraintParams *params)=0;  Reset the constraint matr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html:1976,integrat,integration,1976,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,1,['integrat'],['integration']
Deployability,"ortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(AbstractTransformMatrixEngine, core::DataEngine)sofa::component::engine::transform::AbstractTransformMatrixEngine; sofa::core::DataEngine::SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(TranslateTransformMatrixEngine, AbstractTransformMatrixEngine)sofa::component::engine::transform::TranslateTransformMatrixEngine; sofa::component::engine::transform::AbstractTransformMatrixEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; TranslateTransformMatrixEngine()sofa::component::engine::transform::TranslateTransformMatrixEngineprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~AbstractTransformMatrixEngine() overridesofa::component::engine::transform::AbstractTransformMatrixEngineinlineprotected; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~TranslateTransformMatrixEngine() overridesofa::component::engine::transform::TranslateTransformMatrixEngineinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_translate_transform_matrix_engine-members.html:12759,update,updateIfDirty,12759,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_translate_transform_matrix_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_translate_transform_matrix_engine-members.html,3,['update'],"['updateIfDirty', 'updateInternal', 'updateLinks']"
Deployability,"os(const int)sofa::core::objectmodel::Base; setDetectionOutputs(core::collision::DetectionOutputVector *outputs) overridesofa::component::collision::response::contact::RayContact< CM2 >inlinevirtual; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setKeepAlive(bool)sofa::core::collision::Contactinlinevirtual; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(Contact, objectmodel::BaseObject)sofa::core::collision::Contact; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseRayContact() overridesofa::component::collision::response::contact::BaseRayContactprotected; ~Contact() overridesofa::core::collision::Contactinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_ray_contact-members.html:11821,update,updateInternal,11821,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_ray_contact-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_ray_contact-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"os(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(StartNavigationButtonSetting, MouseButtonSetting)sofa::gui::component::StartNavigationButtonSetting; sofa::component::setting::MouseButtonSetting::SOFA_CLASS(MouseButtonSetting, core::objectmodel::ConfigurationSetting)sofa::component::setting::MouseButtonSetting; sofa::core::objectmodel::ConfigurationSetting::SOFA_CLASS(ConfigurationSetting, BaseObject)sofa::core::objectmodel::ConfigurationSetting; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; StartNavigationButtonSetting()sofa::gui::component::StartNavigationButtonSettinginlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ConfigurationSetting() overridesofa::core::objectmodel::ConfigurationSettingprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_start_navigation_button_setting-members.html:10537,update,updateInternal,10537,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_start_navigation_button_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_start_navigation_button_setting-members.html,6,"['Configurat', 'update']","['ConfigurationSetting', 'ConfigurationSettingprotected', 'updateInternal', 'updateLinks']"
Deployability,"otalMass. virtual . ◆ getTotalMass() [2/2]. template<class DataTypes , class GeometricalTypes = DataTypes> . template<typename T = GeometricalTypes, typename std::enable_if_t< T::spatial_dimensions > = 3, int > . SReal sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::getTotalMass ; (; ); const. inline . Method to update See alsod_vertexMass when a new Triangle is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TRIANGLESADDED event is fired. Method to update . d_vertexMass when a Triangle is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TRIANGLESREMOVED event is fired. Method to update . d_vertexMass when a new Quad is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSADDED event is fired. Method to update . d_vertexMass when a Quad is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSREMOVED event is fired. Method to update . d_vertexMass when a new Tetrahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAADDED event is fired. Method to update . d_vertexMass when a Tetrahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAREMOVED event is fired. Method to update . d_vertexMass when a new Hexahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when HEXAHEDRAADDED event is fired. Method to update . d_vertexMass when a Hexahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when HEXAHEDRAREMOVED event is fired. . ◆ handleEvent(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >::handleEvent ; (; sofa::core::objectmodel::Event * ; ). overridevirtual . Handle a",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html:45830,update,update,45830,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,1,['update'],['update']
Deployability,otation of a mesh model (OglModel) – SOFA. SOFA - Topic: [SOLVED] On the rotation of a mesh model (OglModel). /opengl-and-directx; ; SOFA - Topic: opengl and directX. /opengl-error-when-compiling-sofa-on-macos; ; SOFA - Topic: [SOLVED] OpenGL Error when Compiling SOFA on MacOS. /open-obj-or-stl-files; . /feed; ; [SOLVED] Open .OBJ or .STL files – SOFA. SOFA - Topic: [SOLVED] Open .OBJ or .STL files. /open-position-for-an-engineer-in-computer-science; . /page; . /4; ; SOFA - Topic: Open position for an Engineer in Computer Science. SOFA - Topic: Open position for an Engineer in Computer Science. /optimization-integrator; . /feed; ; [SOLVED] Optimization integrator – SOFA. SOFA - Topic: [SOLVED] Optimization integrator. /order-independent-transparency; ; SOFA - Topic: [SOLVED] Order Independent Transparency. /orientantion-in-end-effector; ; SOFA - Topic: Orientantion in End-Effector. /oriented-sliding-constraint-actuator; ; SOFA - Topic: Oriented Sliding Constraint/Actuator. /parameter-value-update; . /embed; ; SOFA - Topic: Parameter value update. SOFA - Topic: Parameter value update. /paraview-and-sofa-working-together; ; SOFA - Topic: Paraview and SOFA working together. /parse-error; ; SOFA - Topic: Parse error. /particlemask-in-sofa; ; SOFA - Topic: [SOLVED] ParticleMask in SOFA. /pauseanimation; . /feed; ; [SOLVED] PauseAnimation – SOFA. /page; . /15; ; SOFA - Topic: [SOLVED] PauseAnimation. /4; ; SOFA - Topic: [SOLVED] PauseAnimation. SOFA - Topic: [SOLVED] PauseAnimation. /penetration-depth; ; SOFA - Topic: Penetration depth?. /performance-issues-with-haptics-and-deformable-objects; . /feed; ; [SOLVED] Performance issues with haptics and deformable objects – SOFA. /page; . /10; ; SOFA - Topic: [SOLVED] Performance issues with haptics and deformable objects. /3; ; SOFA - Topic: [SOLVED] Performance issues with haptics and deformable objects. /8; ; SOFA - Topic: [SOLVED] Performance issues with haptics and deformable objects. /9; ; SOFA - Topic: [SOLVED] Performan,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:360085,update,update,360085,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['update'],['update']
Deployability,"otected; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE2(DisplacementTransformEngine, DataTypes, OutputType), sofa::core::DataEngine)sofa::component::engine::transform::DisplacementTransformEngine< DataTypes, OutputType >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::engine::transform::DisplacementTransformEngine< DataTypes, OutputType >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_displacement_transform_engine-members.html:14497,update,update,14497,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_displacement_transform_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_displacement_transform_engine-members.html,5,['update'],"['update', 'updateAllInputsIfDirty', 'updateIfDirty', 'updateInternal', 'updateLinks']"
Deployability,"otected; setSleeping(bool val) overridesofa::simulation::Nodevirtual; setTime(SReal t)sofa::core::objectmodel::Contextvirtual; setTopology(BaseObject *)sofa::core::objectmodel::BaseContextinlinevirtual; shaderssofa::simulation::Node; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; Single typedefsofa::simulation::Node; SOFA_ABSTRACT_CLASS(BaseNode, Base)sofa::core::objectmodel::BaseNode; SOFA_ABSTRACT_CLASS2(Node, BaseNode, Context)sofa::simulation::Node; SOFA_CLASS(Context, BaseContext)sofa::core::objectmodel::Context; sofa::core::objectmodel::BaseContext::SOFA_CLASS(BaseContext, Base)sofa::core::objectmodel::BaseContext; solversofa::simulation::Node; SPtr typedefsofa::core::objectmodel::Base; statesofa::simulation::Node; time_sofa::core::objectmodel::Context; topologysofa::simulation::Node; topologyObjectsofa::simulation::Node; unsortedsofa::simulation::Node; updateContext()sofa::simulation::Nodevirtual; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateSimulationContext()sofa::simulation::Nodevirtual; updateVisualContext()sofa::simulation::Nodevirtual; Vec3 typedefsofa::core::objectmodel::BaseContext; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VisitorScheduler classsofa::simulation::Nodefriend; visualLoopsofa::simulation::Node; visualManagersofa::simulation::Node; visualModelsofa::simulation::Node; worldGravity_sofa::core::objectmodel::Context; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseContext() overridesofa::core::objectmodel::BaseContextprotected; ~BaseNode() overridesofa::core::objectmodel::BaseNodeprotected; ~Context() overridesofa::core::objectmodel::Contextinlineprotectedvirtual; ~Node() overridesofa::simulation::Nodeprotectedvirtual.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html:20604,update,updateSimulationContext,20604,api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html,4,['update'],"['updateSimulationContext', 'updateVisualContext']"
Deployability,"ounter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; SOFA_CLASS(DefaultVisualManagerLoop, sofa::core::visual::VisualLoop)sofa::simulation::DefaultVisualManagerLoop; sofa::core::visual::VisualLoop::SOFA_CLASS(VisualLoop, VisualModel)sofa::core::visual::VisualLoop; sofa::core::visual::VisualModel::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateContextStep(sofa::core::visual::VisualParams *vparams) overridesofa::simulation::DefaultVisualManagerLoopvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateStep(sofa::core::visual::VisualParams *vparams) overridesofa::simulation::DefaultVisualManagerLoopvirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DefaultVisualManagerLo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_default_visual_manager_loop-members.html:11909,update,updateContextStep,11909,api/master/sofa/html/classsofa_1_1simulation_1_1_default_visual_manager_loop-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_default_visual_manager_loop-members.html,2,['update'],['updateContextStep']
Deployability,"ource framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes > Class Template Reference . #include <TriangularQuadraticSpringsForceField.h>. Inheritance diagram for sofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >:. [legend]. Classes; class  EdgeRestInformation;  ; class  Mat3;  ; class  TriangleRestInformation;  . Protected Attributes; sofa::core::objectmodel::RenamedData< VecCoord > _initialPoints;  ; sofa::core::objectmodel::RenamedData< Real > f_poissonRatio;  ; sofa::core::objectmodel::RenamedData< Real > f_youngModulus;  ; sofa::core::objectmodel::RenamedData< Real > f_dampingRatio;  ; sofa::core::objectmodel::RenamedData< bool > f_useAngularSprings;  ; Data< VecCoord > d_initialPoints;  Initial Position. More...;  ; bool updateMatrix;  ; Data< Real > d_poissonRatio;  Poisson ratio in Hooke's law. More...;  ; Data< Real > d_youngModulus;  Young modulus in Hooke's law. More...;  ; Data< Real > d_dampingRatio;  Ratio damping/stiffness. More...;  ; Data< bool > d_useAngularSprings;  If Angular Springs should be used or not. More...;  ; Real lambda;  ; Real mu;  first Lame coefficient More...;  ; SingleLink< TriangularQuadraticSpringsForceField< DataTypes >, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > l_topology;  second Lame coefficient More...;  ; sofa::core::objectmodel::RenamedData< sofa::type::vector< TriangleRestInformation > > triangleInfo;  ; sofa::core::objectmodel::RenamedData< sofa::type::vector< EdgeRestInformation > > edgeInfo;  ; sofa::core::topology::TriangleData< sofa::type::vector< TriangleRestInformation > > d_triangleInfo;  Internal triangle data. More...;  ; sofa::core::topology::EdgeData< sofa::type::vector< EdgeRestInformation > > d_edgeInfo;  Internal edge data. More..",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_quadratic_springs_force_field.html:1126,update,updateMatrix,1126,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_quadratic_springs_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_quadratic_springs_force_field.html,1,['update'],['updateMatrix']
Deployability,"ourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(FixPickedParticleButtonSetting, MouseButtonSetting)sofa::gui::component::FixPickedParticleButtonSetting; sofa::component::setting::MouseButtonSetting::SOFA_CLASS(MouseButtonSetting, core::objectmodel::ConfigurationSetting)sofa::component::setting::MouseButtonSetting; sofa::core::objectmodel::ConfigurationSetting::SOFA_CLASS(ConfigurationSetting, BaseObject)sofa::core::objectmodel::ConfigurationSetting; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; stiffnesssofa::gui::component::FixPickedParticleButtonSetting; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Ba",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_fix_picked_particle_button_setting-members.html:10049,Configurat,ConfigurationSetting,10049,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_fix_picked_particle_button_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_fix_picked_particle_button_setting-members.html,1,['Configurat'],['ConfigurationSetting']
Deployability,"ous (CollisionModel::SPtr val);  Set the previous (coarser / upper / parent level) CollisionModel in the hierarchy. More...;  ; virtual bool isActive () const;  Return true if this CollisionModel should be used for collisions. More...;  ; virtual void setActive (bool val=true);  Set true if this CollisionModel should be used for collisions. More...;  ; virtual bool isMoving () const;  Return true if this CollisionModel is changing position between iterations. More...;  ; virtual void setMoving (bool val=true);  Set true if this CollisionModel is changing position between iterations. More...;  ; virtual bool isSimulated () const;  Return true if this CollisionModel is attached to a simulation. It is false for immobile or procedurally animated objects that don't use contact forces. More...;  ; virtual void setSimulated (bool val=true);  Set true if this CollisionModel is attached to a simulation. More...;  ; virtual void computeContinuousBoundingTree (SReal, int maxDepth=0);  Create or update the bounding volume hierarchy, accounting for motions within the given timestep. More...;  ; virtual bool canCollideWith (CollisionModel *model);  Test if this model can collide with another model. More...;  ; virtual bool canCollideWithElement (Index, CollisionModel *, Index);  Test if two elements can collide with each other. More...;  ; virtual void draw (const core::visual::VisualParams *, Index);  Render an collision element. More...;  ; void draw (const core::visual::VisualParams *) override;  Render the whole collision model. More...;  ; CollisionModel * getFirst ();  Return the first (i.e. root) CollisionModel in the hierarchy. More...;  ; CollisionModel * getLast ();  Return the last (i.e. leaf) CollisionModel in the hierarchy. More...;  ; template<class DerivedModel > ; DerivedModel * createPrevious ();  Helper method to get or create the previous model in the hierarchy. More...;  ; virtual sofa::core::topology::BaseMeshTopology * getCollisionTopology ();  BaseMeshTopolo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_cube_collision_model.html:7250,update,update,7250,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_cube_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_cube_collision_model.html,1,['update'],['update']
Deployability,"ous (CollisionModel::SPtr val);  Set the previous (coarser / upper / parent level) CollisionModel in the hierarchy. More...;  ; virtual bool isActive () const;  Return true if this CollisionModel should be used for collisions. More...;  ; virtual void setActive (bool val=true);  Set true if this CollisionModel should be used for collisions. More...;  ; virtual bool isMoving () const;  Return true if this CollisionModel is changing position between iterations. More...;  ; virtual void setMoving (bool val=true);  Set true if this CollisionModel is changing position between iterations. More...;  ; virtual bool isSimulated () const;  Return true if this CollisionModel is attached to a simulation. It is false for immobile or procedurally animated objects that don't use contact forces. More...;  ; virtual void setSimulated (bool val=true);  Set true if this CollisionModel is attached to a simulation. More...;  ; virtual void computeContinuousBoundingTree (SReal, int maxDepth=0);  Create or update the bounding volume hierarchy, accounting for motions within the given timestep. More...;  ; virtual std::pair< CollisionElementIterator, CollisionElementIterator > getInternalChildren (Index) const;  Return the list (as a pair of iterators) of internal children of an element. More...;  ; virtual std::pair< CollisionElementIterator, CollisionElementIterator > getExternalChildren (Index) const;  Return the list (as a pair of iterators) of external children of an element. More...;  ; virtual bool isLeaf (Index) const;  Checks if the element(index) is a leaf and a primitive of the collision model. More...;  ; virtual bool canCollideWith (CollisionModel *model);  Test if this model can collide with another model. More...;  ; virtual bool canCollideWithElement (Index, CollisionModel *, Index);  Test if two elements can collide with each other. More...;  ; void draw (const core::visual::VisualParams *) override;  Render the whole collision model. More...;  ; CollisionModel * getFirst ()",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_cylinder_collision_model.html:8458,update,update,8458,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_cylinder_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_cylinder_collision_model.html,3,['update'],['update']
Deployability,"outputTensor) override;  ; void ElasticityTensor (StrainInformation< DataTypes > *sinfo, const MaterialParameters< DataTypes > &param, Matrix6 &outputTensor) override;  ;  Public Member Functions inherited from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >; virtual ~HyperelasticMaterial ();  . Attribute details. ◆ Name. template<class DataTypes > . constexpr std::string_view sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes >::Name = ""VerondaWestman"". staticconstexpr . Function details. ◆ applyElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes >::applyElasticityTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . const MatrixSym & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the Elasticity Tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ deriveSPKTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes >::deriveSPKTensor ; (; StrainInformation< DataTypes > * ; , . const MaterialParameters< DataTypes > & ; , . MatrixSym & ;  . ). inlineoverridevirtual . computes the second Piola Kirchhoff stress tensor of the current configuration ; Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMaterial< DataTypes >. ◆ ElasticityTensor(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::material::VerondaWestman< DataTypes >::ElasticityTensor ; (; StrainInformation< DataTypes > * ; sinfo, . const MaterialParameters< DataTypes > & ; param, . Matrix6 & ; outputTensor . ). inlineoverridevirtual . Reimplemented from sofa::component::solidmechanics::fem::hyperelastic::material::HyperelasticMateri",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_veronda_westman.html:2713,configurat,configuration,2713,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_veronda_westman.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_veronda_westman.html,1,['configurat'],['configuration']
Deployability,"oveTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(MessageHandlerComponent, core::objectmodel::BaseObject)sofa::component::sceneutility::MessageHandlerComponent; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~MessageHandlerComponent() overridesofa::component::sceneutility::MessageHandlerComponentinline.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_message_handler_component-members.html:10044,update,updateInternal,10044,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_message_handler_component-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_message_handler_component-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"override;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdateVisual (const core::visual::VisualParams *) override;  ; ShaderElementType getSEType () const override;  Returns the type of shader element (texture, macro, variable, or attribute) More...;  ; const core::objectmodel::BaseData * getSEValue () const override;  ; core::objectmodel::BaseData * getSEValue () override;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void fwdDraw (VisualParams *);  Called before objects in the current branch are displayed. More...;  ; virtual void bwdDraw (VisualParams *);  Called after objects in the current branch are displayed. More...;  ; virtual void drawTransparent (const VisualParams *);  Display transparent surfaces. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const type::Quat< SReal >);  ; virt",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float2_variable.html:1903,update,updateVisual,1903,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float2_variable.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float2_variable.html,52,['update'],['updateVisual']
Deployability,"override;  Called after objects in the current branch are displayed. More...;  ;  Public Member Functions inherited from sofa::core::visual::VisualManager;  SOFA_CLASS (VisualManager, VisualModel);  ; virtual void preDrawScene (VisualParams *);  Called before rendering the scene. More...;  ; virtual void postDrawScene (VisualParams *);  Called after rendering the scene. More...;  ; virtual bool drawScene (VisualParams *);  Called instead of rendering the scene. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void drawTransparent (const VisualParams *);  Display transparent surfaces. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const type::Quat< SReal >);  ; virtual void applyScale (const SReal, const SReal, const SReal);  ; virtual void ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_rendering_s_r_g_b.html:1747,update,updateVisual,1747,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_rendering_s_r_g_b.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_rendering_s_r_g_b.html,4,['update'],"['update', 'updateVisual']"
Deployability,"p containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  TetrahedronCollisionModel ();  ; virtual void updateFromTopology ();  ; void addTetraToDraw (const Tetrahedron &t, std::vector< sofa::type::Vec3 > &tetraVertices, std::vector< sofa::type::Vec3 > &normalVertices);  ;  Protected Member Functions inherited from sofa::core::CollisionModel;  CollisionModel ();  Constructor. More...;  ;  ~CollisionModel () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_tetrahedron_collision_model.html:19532,update,update,19532,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_tetrahedron_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_tetrahedron_collision_model.html,1,['update'],['update']
Deployability,"p);  ; bool isPointInPlane (const PointID &pid);  ; bool isEdgeInPlane (const Edge &e);  ; bool isTriangleInPlane (const Triangle &t);  ; bool isTetrahedronInPlane (const Tetra &t);  ; void computePlane (unsigned int planeIndex);  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_plane_r_o_i.html:16252,update,update,16252,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_plane_r_o_i.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_plane_r_o_i.html,1,['update'],['update']
Deployability,"p, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Context;  Context ();  ; virtual ~Context () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseContext;  BaseContext ();  ;  ~BaseContext () override;  . Friends; class VisitorScheduler;  . Attribute details. ◆ _context. BaseContext* sofa::simulation::Node::_context. protected . ◆ actionStack. std::stack<Visitor*> sofa::simulation::Node::actionStack. protected . ◆ animationManager. NodeSingle<sofa::core::behavior::BaseAnimationLoop> sofa::simulation::Node::animationManager. ◆ behaviorModel. NodeSequence<sofa::core::BehaviorModel> sofa::simulation::Node::behaviorModel. ◆ child. NodeSequence<Node,true> sofa::simulation::Node::child. ◆ collisionModel. NodeSequence<sofa::core::CollisionModel> sofa::simulation::Node::collisionModel. ◆ collisionPipeline. NodeSingle<sofa::core::collision::Pipeline> sofa::simulation::Node::collisionPipeline. ◆ configurationSetting. NodeSequence<sofa::core::objectmodel::ConfigurationSetting> sofa::simulation::Node::configurationSetting. ◆ constraintSet. NodeSequence<sofa::core::behavior::BaseConstraintSet> sofa::simulation::Node::constraintSet. ◆ constraintSolver. NodeSequence<sofa::core::behavior::ConstraintSolver> sofa::simulation::Node::constraintSolver. ◆ contextObject. NodeSequence<sofa::core::objectmodel::ContextObject> sofa::simulation::Node::contextObject. ◆ debug_. bool sofa::simulation::Node::debug_. protected . ◆ forceField. NodeSequence<sofa::core::behavior::BaseForceField> sofa::simulation::Node::forceField. ◆ initialized. bool sofa::simulation::Node::initialized. protected . ◆ interactionForceField. NodeSequence<sofa::core::behavior::BaseInteractionForceField> sofa::simulation::Node::interactionForceField. ◆ linearSolver. NodeSequence<sofa::core::behavior::BaseLinearSolver> sofa::simulation::Node::linearSolver. ◆ listener. type::vect",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:30335,Pipeline,Pipeline,30335,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,1,['Pipeline'],['Pipeline']
Deployability,"p, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinlineprotected; initGnuplot(const std::string path) overridesofa::core::behavior::Mass< DataTypes >virtual; initLarge(sofa::Index i, const Element &elem)sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protected; initPolar(sofa::Index i, const Element &elem)sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protected; initSmall(sofa::Index i, const Element &elem)sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protected; initTextures()sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >inlinevirtual; insertInNode(objectmodel::BaseNode *node) overridesofa::core::behavior::Mass< DataTypes >inlinevirtual; integrateMass(int signx, int signy, int signz, Real l0, Real l1, Real l2)sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >; integrateStiffness(int signx0, int signy0, int signz0, int signx1, int signy1, int signz1, const Real u, const Real v, const Real w, const Mat33 &J_1)sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protectedstatic; IS_CONSTRAINED_27sofa::component::solidmechanics::fem::nonuniform::HexahedronCompositeFEMForceFieldAndMass< DataTypes >protectedstatic; isCompliancesofa::core::behavior::BaseForceField; isComponentStateValid() constsofa::core::objectmodel::Baseinline; isDiagonal() const overridesofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >inlinevirtual; l_contextsofa::core::objectmodel::BaseObjectprotected; l_mastersofa::core::objectmodel::BaseObjectprotected; l_mechanicalStatessofa::core::behavior::StateAccessorprotected; l_slavessofa::core::objectmodel::BaseObjectprotected; l_topologysofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >; LARGE enum valuesofa::component::solidmechan",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_hexahedron_composite_f_e_m_force_field_and_mass-members.html:29061,integrat,integrateStiffness,29061,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_hexahedron_composite_f_e_m_force_field_and_mass-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1nonuniform_1_1_hexahedron_composite_f_e_m_force_field_and_mass-members.html,1,['integrat'],['integrateStiffness']
Deployability,"p, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinlineprotected; initGnuplot(const std::string path) overridesofa::core::behavior::Mass< DataTypes >virtual; initLarge(sofa::Index i, const Element &elem)sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protected; initPolar(sofa::Index i, const Element &elem)sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protected; initSmall(sofa::Index i, const Element &elem)sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protected; initTextures()sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >inlinevirtual; insertInNode(objectmodel::BaseNode *node) overridesofa::core::behavior::Mass< DataTypes >inlinevirtual; integrateMass(int signx, int signy, int signz, Real l0, Real l1, Real l2)sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >; integrateStiffness(int signx0, int signy0, int signz0, int signx1, int signy1, int signz1, const Real u, const Real v, const Real w, const Mat33 &J_1)sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >protectedstatic; isCompliancesofa::core::behavior::BaseForceField; isComponentStateValid() constsofa::core::objectmodel::Baseinline; isDiagonal() const overridesofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >inlinevirtual; l_contextsofa::core::objectmodel::BaseObjectprotected; l_mastersofa::core::objectmodel::BaseObjectprotected; l_mechanicalStatessofa::core::behavior::StateAccessorprotected; l_slavessofa::core::objectmodel::BaseObjectprotected; l_topologysofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >; LARGE enum valuesofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >; LinkSlaves typedefsofa::core::objectmodel::BaseObject; m_aliasDatasofa::core::o",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass-members.html:23925,integrat,integrateStiffness,23925,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass-members.html,2,['integrat'],['integrateStiffness']
Deployability,"pPlane, core::visual::VisualModel);  ; virtual sofa::core::objectmodel::ComponentState checkDataValues ();  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void fwdDraw (core::visual::VisualParams *) override;  Called before objects in the current branch are displayed. More...;  ; void bwdDraw (core::visual::VisualParams *) override;  Called after objects in the current branch are displayed. More...;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void drawTransparent (const VisualParams *);  Display transparent surfaces. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const type::Quat< SReal >);  ; virtual void applyScale (const SReal, const SReal, const SReal);  ; virtual void ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_clip_plane.html:3697,update,updateVisual,3697,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_clip_plane.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_clip_plane.html,2,['update'],"['update', 'updateVisual']"
Deployability,"pdate . d_vertexMass using mass matrix coefficient when a new Quad is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Quad is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSREMOVED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a new Tetrahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Tetrahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAREMOVED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a new Hexahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when HEXAHEDRAADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Hexahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when HEXAHEDRAREMOVED event is fired. Method to initialize . MassType when a new Edge is created to compute mass coefficient matrix. Will be set as creation callback in the EdgeData . d_edgeMass . ◆ applyEdgeMassCreation() [2/2]. template<class DataTypes , class GeometricalTypes = DataTypes> . template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::applyEdgeMassCreation ; (; Index ; , . MassType & ; EdgeMass, . const core::topology::BaseMeshTopology::Edge & ; , . const sofa::type::vector< Index > & ; , . const sofa::type::vector< SReal > & ;  . ). ◆ applyEdgeMassDestruction(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::ap",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html:39359,update,update,39359,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,1,['update'],['update']
Deployability,"pdate See alsod_vertexMass using mass matrix coefficient when a new Triangle is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TRIANGLESADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Triangle is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TRIANGLESREMOVED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a new Quad is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Quad is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when QUADSREMOVED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a new Tetrahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Tetrahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when TETRAHEDRAREMOVED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a new Hexahedron is created. Will be set as callback in the PointData . d_vertexMass to update the mass vector when HEXAHEDRAADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Hexahedron is removed. Will be set as callback in the PointData . d_vertexMass to update the mass vector when HEXAHEDRAREMOVED event is fired. Method to initialize . MassType when a new Edge is created to compute mass coefficient matrix. Will be set as creation callback in the EdgeData . d_edgeMass . ◆ applyEdgeMassCreation() [2/2]. template<class DataTypes , class GeometricalTypes = DataTypes> . template<class DataTypes , class GeometricalTypes > . void sofa:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html:38930,update,update,38930,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,1,['update'],['update']
Deployability,"pe & ; EdgeMass . ). protected . Method to update See alsod_edgeMass when a Edge is removed. Will be set as destruction callback in the EdgeData . d_edgeMass . ◆ applyVertexMassCreation(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::applyVertexMassCreation ; (; Index ; pointIndex, . MassType & ; VertexMass, . const core::topology::BaseMeshTopology::Point & ; point, . const sofa::type::vector< Index > & ; , . const sofa::type::vector< SReal > & ;  . ). protected . Method to initialize See alsoMassType when a new Point is created to compute mass coefficient matrix. Will be set as creation callback in the PointData . d_vertexMass . ◆ applyVertexMassDestruction(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::applyVertexMassDestruction ; (; Index ; id, . MassType & ; VertexMass . ). protected . Method to update See alsod_vertexMass when a Point is removed. Will be set as destruction callback in the PointData . d_vertexMass . ◆ buildDampingMatrix(). template<class DataTypes , class GeometricalTypes = DataTypes> . void sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; ). inlineoverridevirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ buildMassMatrix(). template<class DataTypes , class GeometricalTypes > . void sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::buildMassMatrix ; (; sofa::core::behavior::MassMatrixAccumulator * ; matrices). overridevirtual . Reimplemented from sofa::core::behavior::BaseMass. ◆ buildStiffnessMatrix(). template<class DataTypes , class GeometricalTypes = DataTypes> . void sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::buildStiffnessMatrix ; (; core::behavior::StiffnessMatrix * ; ). inlineoverridevirtual . Reimplemented from sofa::core::behavio",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html:41408,update,update,41408,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,1,['update'],['update']
Deployability,"pe *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ startingNode. Node* sofa::simulation::UpdateContextVisitor::startingNode. protected . Constructor details. ◆ UpdateContextVisitor(). sofa::simulation::UpdateContextVisitor::UpdateContextVisitor ; (; const core::ExecParams * ; params). inline . Function details. ◆ getCategoryName(). const char* sofa::simulation::UpdateContextVisitor::getCategoryName ; (; ); const. inlineoverridevirtual . Return a category name for this action. Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ getClassName(). const char* sofa::simulation::UpdateContextVisitor::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor.; Reimplemented in sofa::simulation::UpdateVisualContextVisitor, and sofa::simulation::UpdateSimulationContextVisitor. ◆ isThreadSafe(). bool sofa::simulation::UpdateContextVisitor::isThreadSafe ; (; ); const. inlineoverridevirtual . Specify whether this action can be parallelized. ; Reimplemented from sofa::simulation::Visitor. ◆ processNodeTopDown(). Visitor::Result sofa::simulation::UpdateContextVisitor::processNodeTopDown ; (; simulation::Node * ; ). overridevirtual . Callback method called when descending to a new node. Recursion will stop",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor.html:5009,Update,UpdateContextVisitor,5009,api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor.html,1,['Update'],['UpdateContextVisitor']
Deployability,"pe *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ UpdateLinksVisitor(). sofa::simulation::UpdateLinksVisitor::UpdateLinksVisitor ; (; const core::ExecParams * ; params). inline . Function details. ◆ getClassName(). const char* sofa::simulation::UpdateLinksVisitor::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ isThreadSafe(). bool sofa::simulation::UpdateLinksVisitor::isThreadSafe ; (; ); const. inlineoverridevirtual . Specify whether this action can be parallelized. ; Reimplemented from sofa::simulation::Visitor. ◆ processNodeBottomUp(). void sofa::simulation::UpdateLinksVisitor::processNodeBottomUp ; (; simulation::Node * ; ). overridevirtual . Callback method called after child node have been processed and before going back to the parent node. ; Reimplemented from sofa::simulation::Visitor. ◆ processNodeTopDown(). Visitor::Result sofa::simulation::UpdateLinksVisitor::processNodeTopDown ; (; simulation::Node * ; ). overridevirtual . Callback method called when descen",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor.html:4722,Update,UpdateLinksVisitor,4722,api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor.html,2,['Update'],['UpdateLinksVisitor']
Deployability,"pe = geometry::ElementType::UNKNOWN;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (Tetra2TriangleTopologicalMapping, sofa::core::topology::TopologicalMapping);  ; void init () override;  Initializes the target BaseTopology from the source BaseTopology. More...;  ; void updateTopologicalMappingTopDown () override;  Translates the TopologyChange objects from the source to the target. More...;  ; Index getFromIndex (Index ind) override;  ; bool checkTopologies () override;  Method to check the topology mapping maps regarding the upper topology. More...;  ;  Public Member Functions inherited from sofa::core::topology::TopologicalMapping;  SOFA_ABSTRACT_CLASS (TopologicalMapping, objectmodel::BaseObject);  ; virtual void setTopologies (In *from, Out *to);  Specify the input and output models. More...;  ; void setPathInputObject (const std::string &o);  Set the path to the objects mapped in the scene graph. More...;  ; void setPathOutputObject (const std::string &o);  ; In * getFrom ();  Accessor to the INPUT topology of the TopologicalMapping : More...;  ; Out * getTo ();  Accessor to the OUTPUT topology of the TopologicalMapping : More...;  ; virtual void updateTopologicalMappingBottomUp ();  Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_tetra2_triangle_topological_mapping.html:2830,update,updateTopologicalMappingTopDown,2830,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_tetra2_triangle_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_tetra2_triangle_topological_mapping.html,1,['update'],['updateTopologicalMappingTopDown']
Deployability,"pe() overridesofa::gui::component::AddRecordedCameraButtonSettinginlinevirtual; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTopologyChange(core::topology::Topology *t)sofa::core::objectmodel::BaseObjectvirtual; hasDataChanged(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; hasField(const std::string &attribute) constsofa::core::objectmodel::Basevirtual; hasTag(Tag t) constsofa::core::objectmodel::Base; init() overridesofa::core::objectmodel::ConfigurationSettingvirtual; initData(::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags)sofa::core::objectmodel::Baseinline; initData(Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData(Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseprotected; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags)sofa::core::objectmodel::Baseprotected; initData0(Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=fa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_add_recorded_camera_button_setting-members.html:5936,Configurat,ConfigurationSettingvirtual,5936,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_add_recorded_camera_button_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_add_recorded_camera_button_setting-members.html,1,['Configurat'],['ConfigurationSettingvirtual']
Deployability,"pe() overridesofa::gui::component::FixPickedParticleButtonSettinginlinevirtual; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTopologyChange(core::topology::Topology *t)sofa::core::objectmodel::BaseObjectvirtual; hasDataChanged(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; hasField(const std::string &attribute) constsofa::core::objectmodel::Basevirtual; hasTag(Tag t) constsofa::core::objectmodel::Base; init() overridesofa::core::objectmodel::ConfigurationSettingvirtual; initData(::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags)sofa::core::objectmodel::Baseinline; initData(Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData(Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseprotected; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags)sofa::core::objectmodel::Baseprotected; initData0(Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=fa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_fix_picked_particle_button_setting-members.html:5930,Configurat,ConfigurationSettingvirtual,5930,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_fix_picked_particle_button_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_fix_picked_particle_button_setting-members.html,1,['Configurat'],['ConfigurationSettingvirtual']
Deployability,"pe::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Protected Attributes; ContactMap contactMap;  ; std::map< Instance, ContactMap > storedContactMap;  ; std::map< std::pair< std::string, std::pair< std::string, std::string > >, int > errorMsgCount;  ;  Protected Attributes inherited from sofa::core::collision::ContactManager; Intersection * intersectionMethod;  Current intersection method. More...;  ; ContactVector contacts;  ; std::map< Instance, Intersection * > storedIntersectionMethod;  All intersection methods. More...;  ; std::map< Instance, ContactVector > storedContacts;  ;  Protected Attributes inherited from sofa::core::collision::CollisionAlgorithm; Instance instance;  Current collision 'pipeline' instance, allowing to store multiple internal states. More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (CollisionResponse, sofa::core::collision::ContactManager);  ; void createContacts (const DetectionOutputMap &outputs) override;  ; void init () o",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_collision_response.html:2594,pipeline,pipeline,2594,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_collision_response.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_collision_response.html,1,['pipeline'],['pipeline']
Deployability,"pe::Vec3Types))sofa::core::visual::VisualState< defaulttype::Vec3Types >; sofa::core::State::SOFA_CLASS(SOFA_TEMPLATE(State, TDataTypes), BaseState)sofa::core::State< TDataTypes >; SOFA_CLASS2(VisualModelImpl, core::visual::VisualModel, sofa::core::visual::VisualState< defaulttype::Vec3Types >)sofa::component::visual::VisualModelImpl; sourceFactorsofa::gl::component::rendering3d::OglModelprotected; SPtr typedefsofa::core::objectmodel::Base; srgbTexturingsofa::component::visual::VisualModelImpl; State()sofa::core::State< TDataTypes >protected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; texsofa::gl::component::rendering3d::OglModelprotected; TexCoord typedefsofa::component::visual::VisualModelImpl; texturenamesofa::component::visual::VisualModelImpl; texturessofa::gl::component::rendering3d::OglModelprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; trianglesRevisionsofa::gl::component::rendering3d::OglModelprotected; updateBuffers() overridesofa::gl::component::rendering3d::OglModelvirtual; updateEdgesIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateQuadsIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateTrianglesIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateVertexBuffer()sofa::gl::component::rendering3d::OglModel; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; useEdgessofa::gl::component::rendering3d::OglModelprotected; useQuadssofa::gl::component::rendering3d::OglModelprotected; useTopologysofa::component::visual::VisualModelImpl; useTrianglessofa::gl::component::rendering3d::OglModelprotected; vbosofa::gl::component::rendering3d::OglModelprotected; VBOGenDonesofa::gl::component::rendering3d::OglModelprotected; Vec3Real typedefsofa::component::visual::Visu",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model-members.html:26709,update,updateBuffers,26709,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model-members.html,3,['update'],['updateBuffers']
Deployability,"pedefsofa::core::objectmodel::Base; MyClass typedefsofa::core::objectmodel::Base; namesofa::core::objectmodel::Base; narrowPhaseDetectionsofa::core::collision::Pipelineprotected; narrowPhaseDetectionssofa::core::collision::Pipelineprotected; notMuted() constsofa::core::objectmodel::Baseinline; parse(BaseObjectDescription *arg) overridesofa::core::objectmodel::BaseObjectvirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::Basevirtual; parseFields(const std::list< std::string > &str)sofa::core::objectmodel::Base; parseFields(const std::map< std::string, std::string * > &str)sofa::core::objectmodel::Basevirtual; Pipeline()sofa::core::collision::Pipelineprotected; PipelineImpl()sofa::simulation::PipelineImplprotected; Ptr typedefsofa::core::objectmodel::Base; reinit()sofa::core::objectmodel::BaseObjectvirtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(objectmodel::BaseNode *node) overridesofa::core::collision::Pipelinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset() overridesofa::simulation::PipelineImplvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Basein",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html:9756,Pipeline,Pipelinevirtual,9756,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,1,['Pipeline'],['Pipelinevirtual']
Deployability,"per::BarycentricContactMapper< collision::geometry::LineCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >; Real typedefsofa::component::collision::response::mapper::ContactMapper< collision::geometry::LineCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >; resize(sofa::Size size) overridesofa::component::collision::response::mapper::BarycentricContactMapper< collision::geometry::LineCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >inline; BaseContactMapper< DataTypes >::resize(Size size)=0sofa::component::collision::response::mapper::BaseContactMapper< DataTypes >pure virtual; setCollisionModel(MCollisionModel *model)sofa::component::collision::response::mapper::BarycentricContactMapper< collision::geometry::LineCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >inline; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Index, sofa::Index)sofa::component::collision::response::mapper::BarycentricContactMapper< collision::geometry::LineCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Size, sofa::Size)sofa::component::collision::response::mapper::BarycentricContactMapper< collision::geometry::LineCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >; update() overridesofa::component::collision::response::mapper::BarycentricContactMapper< collision::geometry::LineCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >inlinevirtual; updateX0()sofa::component::collision::response::mapper::BarycentricContactMapper< collision::geometry::LineCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >inline; updateXfree() overridesofa::component::collision::response::mapper::BarycentricContactMapper< collision::geometry::LineCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >inlinevirtual; VecCoord typedefsofa::component::collision::response::mapper::BaseContactMapper< DataTypes >; ~BaseContactMapper()sofa::component::collision::response::mapper::BaseContactMapper< DataTypes >inlinevirtual.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_contact_mapper_3_01collision_1_1gef27b1b9f5719177b468be18a564945d3.html:6330,update,update,6330,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_contact_mapper_3_01collision_1_1gef27b1b9f5719177b468be18a564945d3.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_contact_mapper_3_01collision_1_1gef27b1b9f5719177b468be18a564945d3.html,2,['update'],"['update', 'updateXfree']"
Deployability,"per::BaseContactMapper< TDataTypes >. ◆ resize(). template<class TCollisionModel , class TDataTypes > . void sofa::component::collision::response::mapper::BarycentricContactMapper< TCollisionModel, TDataTypes >::resize ; (; sofa::Size ; size). inlineoverride . ◆ setCollisionModel(). template<class TCollisionModel , class TDataTypes > . void sofa::component::collision::response::mapper::BarycentricContactMapper< TCollisionModel, TDataTypes >::setCollisionModel ; (; MCollisionModel * ; model). inline . ◆ SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER() [1/2]. template<class TCollisionModel , class TDataTypes > . sofa::component::collision::response::mapper::BarycentricContactMapper< TCollisionModel, TDataTypes >::SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER ; (; Index ; , . sofa::Index ;  . ). ◆ SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER() [2/2]. template<class TCollisionModel , class TDataTypes > . sofa::component::collision::response::mapper::BarycentricContactMapper< TCollisionModel, TDataTypes >::SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER ; (; Size ; , . sofa::Size ;  . ). ◆ update(). template<class TCollisionModel , class TDataTypes > . void sofa::component::collision::response::mapper::BarycentricContactMapper< TCollisionModel, TDataTypes >::update ; (; ). inlineoverridevirtual . Implements sofa::component::collision::response::mapper::BaseContactMapper< TDataTypes >. ◆ updateX0(). template<class TCollisionModel , class TDataTypes > . void sofa::component::collision::response::mapper::BarycentricContactMapper< TCollisionModel, TDataTypes >::updateX0 ; (; ). inline . ◆ updateXfree(). template<class TCollisionModel , class TDataTypes > . void sofa::component::collision::response::mapper::BarycentricContactMapper< TCollisionModel, TDataTypes >::updateXfree ; (; ). inlineoverridevirtual . Implements sofa::component::collision::response::mapper::BaseContactMapper< TDataTypes >. sofacomponentcollisionresponsemapperBarycentricContactMapper; Generated on Mon Nov 11 2024 02:27:41 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_barycentric_contact_mapper.html:4996,update,update,4996,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_barycentric_contact_mapper.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_barycentric_contact_mapper.html,4,['update'],"['update', 'updateXfree']"
Deployability,"pes > . void sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ instantiateMaterial(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::instantiateMaterial. protected . ◆ setdirection(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::setdirection ; (; const SetAnisotropyDirectionArray & ; direction). ◆ setMaterialName(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::setMaterialName ; (; std::string ; materialName). ◆ setparameter(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::setparameter ; (; const SetParameterArray & ; param). ◆ SOFA_CLASS(). template<class DataTypes > . sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::SOFA_CLASS ; (; SOFA_TEMPLATE(TetrahedronHyperelasticityFEMForceField< DataTypes >, DataTypes) ; , . SOFA_TEMPLATE(core::behavior::ForceField, DataTypes) ;  . ). ◆ testDerivatives(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::testDerivatives. protected . ◆ updateTangentMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::updateTangentMatrix. protected . sofacomponentsolidmechanicsfemhyperelasticTetrahedronHyperelasticityFEMForceField; Generated on Mon Nov 11 2024 03:00:37 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_f_e_m_force_field.html:31642,update,updateTangentMatrix,31642,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_f_e_m_force_field.html,2,['update'],['updateTangentMatrix']
Deployability,"pes >, DataTypes >; MMapping typedefsofa::component::collision::response::mapper::IdentityContactMapper< collision::geometry::PointCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >; MMechanicalObject typedefsofa::component::collision::response::mapper::IdentityContactMapper< collision::geometry::PointCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >; MMechanicalState typedefsofa::component::collision::response::mapper::IdentityContactMapper< collision::geometry::PointCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >; modelsofa::component::collision::response::mapper::IdentityContactMapper< collision::geometry::PointCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >; Real typedefsofa::component::collision::response::mapper::IdentityContactMapper< collision::geometry::PointCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >; resize(Size)sofa::component::collision::response::mapper::IdentityContactMapper< collision::geometry::PointCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >inlinevirtual; setCollisionModel(MCollisionModel *model)sofa::component::collision::response::mapper::IdentityContactMapper< collision::geometry::PointCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >inline; update()sofa::component::collision::response::mapper::IdentityContactMapper< collision::geometry::PointCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >inlinevirtual; updateX0()sofa::component::collision::response::mapper::IdentityContactMapper< collision::geometry::PointCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >inline; updateXfree()sofa::component::collision::response::mapper::IdentityContactMapper< collision::geometry::PointCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >inlinevirtual; VecCoord typedefsofa::component::collision::response::mapper::BaseContactMapper< DataTypes >; ~BaseContactMapper()sofa::component::collision::response::mapper::BaseContactMapper< DataTypes >inlinevirtual.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_contact_mapper_3_01collision_1_1ge98d516988c958e7bdeb29d10b3dcfcf3.html:4564,update,update,4564,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_contact_mapper_3_01collision_1_1ge98d516988c958e7bdeb29d10b3dcfcf3.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_contact_mapper_3_01collision_1_1ge98d516988c958e7bdeb29d10b3dcfcf3.html,2,['update'],"['update', 'updateXfree']"
Deployability,"pes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; toLameParameters(_2DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; toLameParameters(_3DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Transformation typedefsofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >protected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >; VecElement typedefsofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >; VecElementStiffness typedefsofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecMaterialStiffness typedefsofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >; VecReal typedefsofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; Vector typedefsofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >; WDataRefVecDeriv typedefsofa::component::solidmecha",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field-members.html:22540,update,updateLinks,22540,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field-members.html,1,['update'],['updateLinks']
Deployability,"pes >::projectVelocity ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; v . ). overridevirtual . Project v to constrained space (v models a velocity).; This method must be implemented by the component, and is usually called by the generic ProjectiveConstraintSet::projectVelocity() method. ; Implements sofa::core::behavior::ProjectiveConstraintSet< DataTypes >. ◆ reinit(). template<class DataTypes > . void sofa::component::constraint::projective::LineProjectiveConstraint< DataTypes >::reinit. overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ removeConstraint(). template<class DataTypes > . void sofa::component::constraint::projective::LineProjectiveConstraint< DataTypes >::removeConstraint ; (; Index ; index). ◆ SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(). template<class DataTypes > . sofa::component::constraint::projective::LineProjectiveConstraint< DataTypes >::SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER ; (; Vector3 ; , . sofa::type::Vec3 ;  . ). ◆ SOFA_CLASS(). template<class DataTypes > . sofa::component::constraint::projective::LineProjectiveConstraint< DataTypes >::SOFA_CLASS ; (; SOFA_TEMPLATE(LineProjectiveConstraint< DataTypes >, DataTypes) ; , . SOFA_TEMPLATE(sofa::core::behavior::ProjectiveConstraintSet, DataTypes) ;  . ). ◆ updateJacobian(). template<class DataTypes > . void sofa::component::constraint::projective::LineProjectiveConstraint< DataTypes >::updateJacobian. protected . Resize/update Jacobian matrix according to the linked mechanical state and the direction. . Enum details. ◆ anonymous enum. template<class DataTypes > . anonymous enum. Enumeratorbsize . Related details. ◆ LineProjectiveConstraintInternalData< DataTypes >. template<class DataTypes > . friend class LineProjectiveConstraintInternalData< DataTypes >. friend . sofacomponentconstraintprojectiveLineProjectiveConstraint; Generated on Mon Nov 11 2024 02:37:57 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_line_projective_constraint.html:28508,update,updateJacobian,28508,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_line_projective_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_line_projective_constraint.html,3,['update'],"['update', 'updateJacobian']"
Deployability,"pes >inline; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(ConstraintCorrection, TDataTypes), BaseConstraintCorrection)sofa::core::behavior::ConstraintCorrection< TDataTypes >; sofa::core::behavior::BaseConstraintCorrection::SOFA_ABSTRACT_CLASS(BaseConstraintCorrection, objectmodel::BaseObject)sofa::core::behavior::BaseConstraintCorrection; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::core::behavior::ConstraintCorrection< TDataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::core::behavior::ConstraintCorrection< TDataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseConstraintCorrection() overridesofa::core::behavior::BaseConstraintCorrectionprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ConstraintCorrection() override=defaultsofa::core::behavior::ConstraintCorrection< TDataTypes >protected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_constraint_correction-members.html:15002,update,updateInternal,15002,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_constraint_correction-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_constraint_correction-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"pes1, DataTypes2 >; SOFA_ABSTRACT_CLASS2(SOFA_TEMPLATE(PairInteractionForceField, DataTypes), BaseInteractionForceField, SOFA_TEMPLATE2(PairStateAccessor, DataTypes, DataTypes))sofa::core::behavior::PairInteractionForceField< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(FrameSpringForceField, DataTypes), SOFA_TEMPLATE(core::behavior::PairInteractionForceField, DataTypes))sofa::component::solidmechanics::spring::FrameSpringForceField< DataTypes >; PairInteractionForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; springRefsofa::component::solidmechanics::spring::FrameSpringForceField< DataTypes >protected; springssofa::component::solidmechanics::spring::FrameSpringForceField< DataTypes >protected; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::solidmechanics::spring::FrameSpringForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::spring::FrameSpringForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecN typedefsofa::component::solidmechanics::spring::FrameSpringForceField< DataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~PairInteractionForceField() overridesofa::core::behavior::PairInteractionForceFi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_frame_spring_force_field-members.html:19010,update,updateInternal,19010,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_frame_spring_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_frame_spring_force_field-members.html,1,['update'],['updateInternal']
Deployability,"pid, const TempData &data);  ; Vec3 vectorFromEdge (const Edge &e, const TempData &data);  ; Vec3 vectorFromTriangle (const Triangle &t, const TempData &data);  ; Vec3 vectorFromTetrahedron (const Tetra &t, const TempData &data);  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions.html:16566,update,update,16566,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_values_from_positions.html,1,['update'],['update']
Deployability,"ping::linear::SubsetMapping< TIn, TOut >::f_last. ◆ f_radius. template<class TIn , class TOut > . sofa::core::objectmodel::RenamedData<Real> sofa::component::mapping::linear::SubsetMapping< TIn, TOut >::f_radius. ◆ f_resizeToModel. template<class TIn , class TOut > . sofa::core::objectmodel::RenamedData<bool> sofa::component::mapping::linear::SubsetMapping< TIn, TOut >::f_resizeToModel. ◆ js. template<class TIn , class TOut > . js_type sofa::component::mapping::linear::SubsetMapping< TIn, TOut >::js. protected . ◆ l_topology. template<class TIn , class TOut > . SingleLink<SubsetMapping<In, Out>, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH | BaseLink::FLAG_STRONGLINK> sofa::component::mapping::linear::SubsetMapping< TIn, TOut >::l_topology. Link to be set to the topology container in the component graph. . ◆ matrixJ. template<class TIn , class TOut > . std::unique_ptr<MatrixType> sofa::component::mapping::linear::SubsetMapping< TIn, TOut >::matrixJ. protected . ◆ updateJ. template<class TIn , class TOut > . bool sofa::component::mapping::linear::SubsetMapping< TIn, TOut >::updateJ. protected . Constructor details. ◆ SubsetMapping(). template<class TIn , class TOut > . sofa::component::mapping::linear::SubsetMapping< TIn, TOut >::SubsetMapping. protected . ◆ ~SubsetMapping(). template<class TIn , class TOut > . sofa::component::mapping::linear::SubsetMapping< TIn, TOut >::~SubsetMapping. virtual . Function details. ◆ addPoint(). template<class TIn , class TOut > . int sofa::component::mapping::linear::SubsetMapping< TIn, TOut >::addPoint ; (; Index ; index). ◆ apply(). template<class TIn , class TOut > . void sofa::component::mapping::linear::SubsetMapping< TIn, TOut >::apply ; (; const core::MechanicalParams * ; mparams, . OutDataVecCoord & ; dOut, . const InDataVecCoord & ; dIn . ). override . ◆ applyJ(). template<class TIn , class TOut > . void sofa::component::mapping::linear::SubsetMapping< TIn, TOut >::applyJ ; (; const core::MechanicalParams",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_subset_mapping.html:6934,update,updateJ,6934,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_subset_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_subset_mapping.html,1,['update'],['updateJ']
Deployability,plate specializations. More...;  ; class  PositionBasedDynamicsProjectiveConstraint;  ; struct  SkeletonJoint;  ; class  SkeletalMotionProjectiveConstraint;  . Typedefs; using AffineMovementProjectiveConstraint = AffineMovementProjectiveConstraint< T >;  ; using AttachProjectiveConstraint = AttachProjectiveConstraint< T >;  ; using FixedProjectiveConstraint = FixedProjectiveConstraint< T >;  ; using FixedPlaneProjectiveConstraint = FixedPlaneProjectiveConstraint< T >;  ; using FixedRotationProjectiveConstraint = FixedRotationProjectiveConstraint< T >;  ; using FixedTranslationProjectiveConstraint = FixedTranslationProjectiveConstraint< T >;  ; using HermiteSplineProjectiveConstraint = HermiteSplineProjectiveConstraint< T >;  ; using LinearMovementProjectiveConstraint = LinearMovementProjectiveConstraint< T >;  ; using LinearVelocityProjectiveConstraint = LinearVelocityProjectiveConstraint< T >;  ; using OscillatorProjectiveConstraint = OscillatorProjectiveConstraint< T >;  ; using ParabolicProjectiveConstraint = ParabolicProjectiveConstraint< T >;  ; using PartialFixedProjectiveConstraint = PartialFixedProjectiveConstraint< T >;  ; using PartialLinearMovementProjectiveConstraint = PartialLinearMovementProjectiveConstraint< T >;  ; using PatchTestMovementProjectiveConstraint = PatchTestMovementProjectiveConstraint< T >;  ; using PositionBasedDynamicsProjectiveConstraint = PositionBasedDynamicsProjectiveConstraint< T >;  ; using DirectionProjectiveConstraint = DirectionProjectiveConstraint< T >;  ; using LineProjectiveConstraint = LineProjectiveConstraint< T >;  ; using PlaneProjectiveConstraint = PlaneProjectiveConstraint< T >;  ; using PointProjectiveConstraint = PointProjectiveConstraint< T >;  ; using SkeletalMotionProjectiveConstraint = SkeletalMotionProjectiveConstraint< T >;  ; typedef int SkeletonBone;  . Functions; void registerAffineMovementProjectiveConstraint (sofa::core::ObjectFactory *factory);  ; void registerAttachProjectiveConstraint (sofa::core::Objec,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html:3771,Patch,PatchTestMovementProjectiveConstraint,3771,api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1constraint_1_1projective.html,2,['Patch'],['PatchTestMovementProjectiveConstraint']
Deployability,"plate<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::draw ; (; const core::visual::VisualParams * ; ). inlineoverridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ drawIndices(). template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::drawIndices ; (; const core::visual::VisualParams * ; vparams). inlineprotected . Internal function : Draw indices in 3d coordinates. . ◆ drawVectors(). template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::drawVectors ; (; const core::visual::VisualParams * ; vparams). inlineprotected . Internal function : Draw vectors. . ◆ endIntegration(). template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::endIntegration ; (; const core::ExecParams * ; params, . SReal ;  . ). overridevirtual . Called at the end of each integration step. ; Reimplemented from sofa::core::behavior::BaseMechanicalState. ◆ exportGnuplot(). template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::exportGnuplot ; (; SReal ; time). overridevirtual . Reimplemented from sofa::core::behavior::BaseMechanicalState. ◆ forcePointPosition(). template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::forcePointPosition ; (; const sofa::Index ; i, . const sofa::type::vector< double > & ; m_x . ). Force the position of a point (and force its velocity to zero value) . ◆ getConstraintJacobian(). template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::getConstraintJacobian ; (; const core::ConstraintParams * ; params, . sofa::linearalgebra::BaseMatrix * ; J, . unsigned int & ; off . ). overridevirtual . build the jacobian of the constraint in a baseMatrix ; Implements sofa::core::behavior::BaseMechanicalState. ◆ g",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:55005,integrat,integration,55005,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['integrat'],['integration']
Deployability,"plate<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  AreaMapping ();  ; void matrixFreeApplyDJT (const core::MechanicalParams *mparams, Real kFactor, Data< VecDeriv_t< In > > &parentForce, const Data< VecDeriv_t< In > > &parentDisplacement, const Data< VecDeriv_t< Out > > &childForce) override;  ; void doUpdateK (const core::MechanicalParams *mparams, const Data< VecDeriv_t< Out > > &childForce, SparseKMatrixEigen &matrix) override;  ;  Protected Member Functions inherited from sofa::core::Mapping< TIn, TOut >;  Mapping (State< In > *from=nullptr, State< Out > *to=nullptr);  ;  ~Mapping () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::BaseMapping;  BaseMapping ();  Constructor. More...;  ;  ~BaseMapping () override;  Destructor. More...;  ; bool testMechanicalState (BaseState *state);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitD",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_area_mapping.html:20678,update,update,20678,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_area_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_area_mapping.html,1,['update'],['update']
Deployability,"plate<typename T = GeometricalTypes, typename std::enable_if_t< T::spatial_dimensions > = 3, int > . sofa::core::topology::BaseMeshTopology* sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >::m_topology. protected . Initial value:= 0 >; void applyEdgeMassHexahedronDestruction(const sofa::type::vector<Index>& ); sofa::type::vector< Index >. Pointer to the topology container. Will be set by link. ; Method to update See alsod_edgeMass using mass matrix coefficient when a new Triangle is created. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when TRIANGLESADDED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a Triangle is removed. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when TRIANGLESREMOVED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a new Quad is created. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when QUADSADDED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a Quad is removed. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when QUADSREMOVED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a new Tetrahedron is created. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when TETRAHEDRAADDED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a Tetrahedron is removed. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when TETRAHEDRAREMOVED event is fired. Method to update . d_edgeMass using mass matrix coefficient when a new Hexahedron is created. Will be set as callback in the EdgeData . d_edgeMass to update the mass vector when HEXAHEDRAADDED event is fired. Method to update . d_vertexMass using mass matrix coefficient when a Hexahedron is removed. Will be set as callback in the EdgeData . d_edg",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html:33562,update,update,33562,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,1,['update'],['update']
Deployability,"pleTesselatedHexaTopologicalMapping, sofa::core::topology::TopologicalMapping);  ; void init () override;  Initializes the target BaseTopology from the source BaseTopology. More...;  ; void updateTopologicalMappingTopDown () override;  Translates the TopologyChange objects from the source to the target. More...;  ;  Public Member Functions inherited from sofa::core::topology::TopologicalMapping;  SOFA_ABSTRACT_CLASS (TopologicalMapping, objectmodel::BaseObject);  ; virtual void setTopologies (In *from, Out *to);  Specify the input and output models. More...;  ; void setPathInputObject (const std::string &o);  Set the path to the objects mapped in the scene graph. More...;  ; void setPathOutputObject (const std::string &o);  ; In * getFrom ();  Accessor to the INPUT topology of the TopologicalMapping : More...;  ; Out * getTo ();  Accessor to the OUTPUT topology of the TopologicalMapping : More...;  ; virtual void updateTopologicalMappingBottomUp ();  Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topology : More...;  ; virtual bool propagateFromInputToOutputModel ();  Return true if this mapping is able to propagate topological changes from input to output model. More...;  ; virtual bool propagateFromOutputToInputModel ();  Return true if this mapping is able to propagate topological changes from output to input model. More...;  ; virtual bool isTheOutputTopologySubdividingTheInputOne ();  return true if the output topology subdivide the input one. (the topology uses the Loc2GlobVec/Glob2LocMap/In2OutMap structs and share the same DOFs) More...;  ; const std::map< Index, Index > & getGlob2LocMap ();  Accessor to index maps : More...;  ; virtual Index getGlobIndex (Index ind);  ; virtual Index getFromIndex (Index ind);  ; void dumpGlob2LocMap ();  ; void dumpLoc2GlobVec ();  ; virtual bool checkTopologies ();  Method to check the topology mapping maps regarding the upper topology. More...;  ; virtual void",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_hexa_topological_mapping.html:3353,update,updateTopologicalMappingBottomUp,3353,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_hexa_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_hexa_topological_mapping.html,1,['update'],['updateTopologicalMappingBottomUp']
Deployability,"plemented in sofa::component::collision::detection::intersection::BaseProximityIntersection. ◆ getContactDistance(). virtual SReal sofa::core::collision::Intersection::getContactDistance ; (; ); const. inlinevirtual . Return the contact distance (must return 0 if useProximity() is false) ; Reimplemented in sofa::component::collision::detection::intersection::BaseProximityIntersection. ◆ isSupported(). bool sofa::core::collision::Intersection::isSupported ; (; core::CollisionElementIterator ; elem1, . core::CollisionElementIterator ; elem2 . ). virtual . Test if intersection between 2 types of elements is supported, i.e. an intersection test is implemented for this combinaison of types. Note that this method is deprecated in favor of findIntersector . ◆ setAlarmDistance(). virtual void sofa::core::collision::Intersection::setAlarmDistance ; (; SReal ; ). inlinevirtual . Set the alarm distance (must return 0 if useProximity() is false) ; Reimplemented in sofa::component::collision::detection::intersection::BaseProximityIntersection. ◆ setContactDistance(). virtual void sofa::core::collision::Intersection::setContactDistance ; (; SReal ; ). inlinevirtual . Set the contact distance (must return 0 if useProximity() is false) ; Reimplemented in sofa::component::collision::detection::intersection::BaseProximityIntersection. ◆ SOFA_ABSTRACT_CLASS(). sofa::core::collision::Intersection::SOFA_ABSTRACT_CLASS ; (; Intersection ; , . objectmodel::BaseObject ;  . ). ◆ useContinuous(). virtual bool sofa::core::collision::Intersection::useContinuous ; (; ); const. inlinevirtual . returns true if algorithm uses continuous detection . ◆ useProximity(). virtual bool sofa::core::collision::Intersection::useProximity ; (; ); const. inlinevirtual . returns true if algorithm uses proximity detection ; Reimplemented in sofa::component::collision::detection::intersection::BaseProximityIntersection. sofacorecollisionIntersection; Generated on Mon Nov 11 2024 03:15:48 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_intersection.html:17804,continuous,continuous,17804,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_intersection.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_intersection.html,1,['continuous'],['continuous']
Deployability,"plyPointDestruction ; (; const sofa::type::vector< Index > & ; pointIndices). Method to update. ; See alsod_edgeInfo when a point is removed. Will be set as callback when POINTSREMOVED event is fired . ◆ applyPointRenumbering(). template<class DataTypes > . void sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::applyPointRenumbering ; (; const sofa::type::vector< Index > & ; pointToRenumber). Method to update. ; See alsod_edgeInfo when points are renumbered. Will be set as callback when POINTSRENUMBERING event is fired . ◆ applyQuadCreation(). template<class DataTypes > . void sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::applyQuadCreation ; (; const sofa::type::vector< Index > & ; quadAdded, . const sofa::type::vector< core::topology::BaseMeshTopology::Quad > & ; , . const sofa::type::vector< sofa::type::vector< Index > > & ; , . const sofa::type::vector< sofa::type::vector< SReal > > & ;  . ). Method to update See alsod_edgeInfo when a new quad is created. Will be set as callback in the EdgeData . d_edgeInfo when QUADSADDED event is fired to create a new spring between new created triangles. . ◆ applyQuadDestruction(). template<class DataTypes > . void sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::applyQuadDestruction ; (; const sofa::type::vector< Index > & ; quadRemoved). Method to update See alsod_edgeInfo when a quad is removed. Will be set as callback in the EdgeData . d_edgeInfo when QUADSREMOVED event is fired to remove spring if needed or update pair of quad. . ◆ buildDampingMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; ). finalvirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ buildStiffnessMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::build",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs.html:25493,update,update,25493,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs.html,1,['update'],['update']
Deployability,"pointers.; In addition to state vectors, the current constraint system matrix is also stored, containing the coefficient of each constraint defined over the DOFs in this body. . Classes; class  ConstraintBlock;  ; class  VMultiOpEntry;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (BaseMechanicalState, BaseState);  ;  SOFA_BASE_CAST_IMPLEMENTATION (BaseMechanicalState);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; Methods allowing to have access to the geometry without a template class (generic but not efficient); virtual SReal getPX (Index) const;  ; virtual SReal getPY (Index) const;  ; virtual SReal getPZ (Index) const;  ; Mechanical integration related methods; Note: all these methods can now be implemented generically using VecId-based operations . virtual void beginIntegration (SReal);  Called at the beginning of each integration step. More...;  ; virtual void endIntegration (const ExecParams *params, SReal);  Called at the end of each integration step. More...;  ; virtual void resetForce (const ExecParams *params, VecDerivId f=VecDerivId::force());  Set F = 0. More...;  ; virtual void resetAcc (const ExecParams *params, VecDerivId a=VecDerivId::dx());  Set Acc =0. More...;  ; virtual void accumulateForce (const ExecParams *params, VecDerivId f=VecDerivId::force());  Add stored external forces to F. More...;  ; Constraints related methods; virtual void resetConstraint (const ConstraintParams *params)=0;  Reset the constraint matrix. More...;  ; virtual void getConstraintJacobian (const ConstraintParams *params, sofa::linearalgebra::BaseMatrix *J, unsigned int &off)=0;  build the jacobian of the constraint in a baseMatrix More...;  ; virtual void buildIdentityBlocksInJacobian (const sofa::type::vector< unsigned int > &list_n, core::MatrixDerivId &mID)=0;  fill the jacobian matrix (of the constraints) with identity blocks on the provided list of nodes(dofs) More...;  ; virtual std",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html:2287,integrat,integration,2287,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,1,['integrat'],['integration']
Deployability,"pology. template<class DataTypes > . bool sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::needUpdateTopology. protected . ◆ prevMaxStress. template<class DataTypes > . Real sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::prevMaxStress. ◆ R0. template<class DataTypes > . type::MatNoInit<3, 3, Real> sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::R0. protected . ◆ rotations. template<class DataTypes > . type::vector<Transformation> sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::rotations. protected . ◆ strainDisplacements. template<class DataTypes > . VecStrainDisplacement sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::strainDisplacements. protected . the strain-displacement matrices vector . ◆ updateVonMisesStress. template<class DataTypes > . bool sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::updateVonMisesStress. Constructor details. ◆ TetrahedronFEMForceField(). template<class DataTypes > . sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::TetrahedronFEMForceField. protected . ◆ ~TetrahedronFEMForceField(). template<class DataTypes > . sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::~TetrahedronFEMForceField. overrideprotected . Function details. ◆ accumulateForceLarge(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::accumulateForceLarge ; (; Vector & ; f, . const Vector & ; p, . typename VecElement::const_iterator ; elementIt, . Index ; elementIndex . ). inlineprotected . ◆ accumulateForcePolar(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::accumulateForcePolar ; (; Vector & ; f, . const Vector & ; p, . typename VecE",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedron_f_e_m_force_field.html:47881,update,updateVonMisesStress,47881,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedron_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedron_f_e_m_force_field.html,1,['update'],['updateVonMisesStress']
Deployability,"pology::container::dynamic::HexahedronSetTopologyModifier, and sofa::component::topology::container::dynamic::EdgeSetTopologyModifier. ◆ removeItems(). void sofa::component::topology::container::dynamic::PointSetTopologyModifier::removeItems ; (; const sofa::type::vector< PointID > & ; indices). overridevirtual . Generic method to remove a list of items. ; Reimplemented from sofa::core::topology::TopologyModifier.; Reimplemented in sofa::component::topology::container::dynamic::TriangleSetTopologyModifier, sofa::component::topology::container::dynamic::TetrahedronSetTopologyModifier, and sofa::component::topology::container::dynamic::QuadSetTopologyModifier. ◆ removePoints(). void sofa::component::topology::container::dynamic::PointSetTopologyModifier::removePoints ; (; sofa::type::vector< PointID > & ; indices, . const bool ; removeDOF = true . ). virtual . Generic method to remove a list of point. ; Parameters. indicesthe indices of the point to remove fromt his topology ; removeDOFNotify if the DOF from the mechanical container need to be updated as well. . ◆ removePointsProcess(). void sofa::component::topology::container::dynamic::PointSetTopologyModifier::removePointsProcess ; (; const sofa::type::vector< PointID > & ; indices, . const bool ; removeDOF = true . ). protectedvirtual . Remove a subset of points. ; Elements corresponding to these points are removed from the mechanical object's state vectors.; Important : some structures might need to be warned BEFORE the points are actually deleted, so always use method removePointsWarning before calling removePointsProcess. See alsoremovePointsWarning; Parameters. indicesis not const because it is actually sorted from the highest index to the lowest one. ; removeDOFif true the points are actually deleted from the mechanical object's state vectors . Reimplemented in sofa::component::topology::container::dynamic::TriangleSetTopologyModifier, sofa::component::topology::container::dynamic::TetrahedronSetTopologyModif",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_modifier.html:25979,update,updated,25979,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_modifier.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_modifier.html,1,['update'],['updated']
Deployability,"ponent::shader::OglFloatVectorVariable Class Reference . #include <OglVariable.h>. Inheritance diagram for sofa::gl::component::shader::OglFloatVectorVariable:. [legend]; Detailed Description; FLOAT VECTOR VARIABLE . Public Member Functions;  SOFA_CLASS (OglFloatVectorVariable, OglVariable< type::vector< float > >);  ;  OglFloatVectorVariable ();  ; virtual ~OglFloatVectorVariable ();  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void pushValue () override;  ;  Public Member Functions inherited from sofa::gl::component::shader::OglVariable< type::vector< float > >;  SOFA_CLASS2 (OglVariable, core::visual::VisualModel, OglShaderElement);  ; virtual void setValue (const type::vector< float > &v);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void doInitVisual (const core::visual::VisualParams *) override;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdateVisual (const core::visual::VisualParams *) override;  ; ShaderElementType getSEType () const override;  Returns the type of shader element (texture, macro, variable, or attribute) More...;  ; const core::objectmodel::BaseData * getSEValue () const override;  ; core::objectmodel::BaseData * getSEValue () override;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resou",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector_variable.html:1232,Update,Update,1232,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector_variable.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector_variable.html,1,['Update'],['Update']
Deployability,"ponent::visual::BaseCamera; STEREO_NONE enum valuesofa::component::visual::BaseCamera; STEREO_SIDE_BY_SIDE enum valuesofa::component::visual::BaseCamera; STEREO_SIDE_BY_SIDE_HALF enum valuesofa::component::visual::BaseCamera; STEREO_TOP_BOTTOM enum valuesofa::component::visual::BaseCamera; STEREO_TOP_BOTTOM_HALF enum valuesofa::component::visual::BaseCamera; StereoMode enum namesofa::component::visual::BaseCamera; StereoStrategy enum namesofa::component::visual::BaseCamera; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; TOEDIN enum valuesofa::component::visual::BaseCamera; toRay() constsofa::component::visual::BaseCamera; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; translate(const type::Vec3 &t)sofa::component::visual::BaseCamera; translateLookAt(const type::Vec3 &t)sofa::component::visual::BaseCamera; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateOutputData()sofa::component::visual::BaseCameraprotected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; viewportPointToRay(const type::Vec3 &p)sofa::component::visual::BaseCamera; viewportToScreenPoint(const type::Vec3 &p) constsofa::component::visual::BaseCamera; viewportToWorldPoint(const type::Vec3 &p)sofa::component::visual::BaseCamera; worldToCameraCoordinates(const type::Vec3 &p)sofa::component::visual::BaseCamera; worldToCameraTransform(const type::Vec3 &v)sofa::component::visual::BaseCamera; worldToScreenCoordinates(const type::Vec3 &p)sofa::component::visual::BaseCamera; worldToScreenPoint(const type::Vec3 &p)sofa::component::visual::BaseCamera; worldToViewportPoint(const type::Vec3 &p)sofa::component::visual::BaseCamera; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::o",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_base_camera-members.html:17818,update,updateOutputData,17818,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_base_camera-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_base_camera-members.html,2,['update'],['updateOutputData']
Deployability,"ponentMouseInteraction * > instanceComponents;  ; BodyPicked lastPicked;  ; bool useCollisions;  ; type::fixed_array< Operation *, NONE > operations;  ; type::vector< CallBackPicker * > callbacks;  ; CallBackRender * renderCallback;  ; PickingMethod pickingMethod;  ; double m_defaultLength;  Default length of the ray. Set by constructor. More...;  . Public Member Functions;  PickHandler (double defaultLength=1000000);  ; virtual ~PickHandler ();  ; void activateRay (int width, int height, core::objectmodel::BaseNode *root);  ; void deactivateRay ();  ; virtual void allocateSelectionBuffer (int width, int height);  ; virtual void destroySelectionBuffer ();  ; void setPickingMethod (PickingMethod method);  ; bool useSelectionBufferMethod () const;  ; void updateRay (const sofa::type::Vec3 &position, const sofa::type::Vec3 &orientation);  ; void handleMouseEvent (MOUSE_STATUS status, MOUSE_BUTTON button);  ; void init (core::objectmodel::BaseNode *root);  ; void reset ();  ; void unload ();  ; void setColourRenderCallback (CallBackRender *colourRender);  ; void updateMouse2D (MousePosition mouse);  ; Operation * getOperation (MOUSE_BUTTON button);  ; Operation * changeOperation (sofa::component::setting::MouseButtonSetting *setting);  ; Operation * changeOperation (MOUSE_BUTTON button, const std::string &op);  ; void addCallBack (CallBackPicker *c);  ; type::vector< CallBackPicker * > getCallBackPicker ();  ; void clearCallBacks ();  ; virtual BodyPicked findCollisionUsingColourCoding (const type::Vec3 &origin, const type::Vec3 &direction);  ; ComponentMouseInteraction * getInteraction ();  ; BodyPicked * getLastPicked ();  . Static Public Member Functions; static BodyPicked findCollisionUsingBruteForce (const type::Vec3 &origin, const type::Vec3 &direction, double maxLength, core::objectmodel::BaseNode *root);  . Protected Member Functions; virtual BodyPicked findCollision ();  ; BodyPicked findCollisionUsingPipeline ();  ; BodyPicked findCollisionUsingBruteForce ();  ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_pick_handler.html:1515,update,updateRay,1515,api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_pick_handler.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_pick_handler.html,2,['update'],['updateRay']
Deployability,pook University. /new-engineering-forces-for-sofa; ; SOFA – New engineering forces for SOFA. /new-framework-for-soft-robots-with-sofa; ; SOFA – New framework for soft robots with SOFA. /new-geomagic-plugin; ; SOFA – New Geomagic plugin. /new-job-available-at-anatoscope; ; SOFA – New job available at Anatoscope!. /new-plugin-for-visco-elasticity; ; SOFA – New plugin for Visco-Elasticity!. /new-publications-with-sofa; ; SOFA – New publications with SOFA : May 2017. /new-publications-with-sofa-sept-2017; ; SOFA – New publications with SOFA : Sept 2017. /new-sofa-achievements-share-it; ; SOFA – New SOFA achievements? Share it!. /new-sofa-papers-accepted; ; SOFA – New SOFA papers accepted!. /new-sofa-release-v16-08-available; ; SOFA – New SOFA release (v16.08) available!. /next-sofa-technical-committee-in-sophia; ; SOFA – Next SOFA Technical Committee in Sophia!. /opening-ceremony-of-our-new-building; ; SOFA – Opening ceremony of our new building!. /open-source-release-of-ros-connector; ; SOFA – Open-source release of ROS connector!. /our-membership-contract-now-available; ; SOFA – Our Membership contract now available. /page; . /10; ; SOFA – News. /11; ; SOFA – News. /12; ; SOFA – News. /13; ; SOFA – News. /14; ; SOFA – News. /15; ; SOFA – News. /16; ; SOFA – News. /17; ; SOFA – News. /18; ; SOFA – News. /19; ; SOFA – News. /2; ; SOFA – News. /20; ; SOFA – News. /21; ; SOFA – News. /22; ; SOFA – News. /23; ; SOFA – News. /24; ; SOFA – News. /25; ; SOFA – News. /26; ; SOFA – News. /27; ; SOFA – News. /28; ; SOFA – News. /3; ; SOFA – News. /4; ; SOFA – News. /5; ; SOFA – News. /6; ; SOFA – News. /7; ; SOFA – News. /8; ; SOFA – News. /9; ; SOFA – News. /participation-at-fosdem-2019; ; SOFA – Participation at FOSDEM 2019. /presentation-of-sofa-at-icube-igg-cnrs-strasbourg; ; SOFA – Presentation of SOFA at iCube (IGG) CNRS Strasbourg. /presentation-of-sofa-in-lecce-italy; ; SOFA – Presentation of SOFA in Lecce – Italy. /prizes-for-defrost-success-in-soft-robotics; ; SOFA – Pr,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:5484,release,release-of-ros-connector,5484,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['release'],"['release', 'release-of-ros-connector']"
Deployability,"pper::SubsetContactMapper< TCollisionModel, DataTypes > Class Template Reference . #include <SubsetContactMapper.h>; Base class for all mappers using SubsetMapping. ; More... Inheritance diagram for sofa::component::collision::response::mapper::SubsetContactMapper< TCollisionModel, DataTypes >:. [legend]; Detailed Description; template<class TCollisionModel, class DataTypes>; class sofa::component::collision::response::mapper::SubsetContactMapper< TCollisionModel, DataTypes >; Base class for all mappers using SubsetMapping. . Public Attributes; MCollisionModel * model;  ; simulation::Node::SPtr child;  ; MMapping::SPtr mapping;  ; MMechanicalState::SPtr outmodel;  ; Size nbp;  ; bool needInit;  . Public Member Functions;  SubsetContactMapper ();  ; void setCollisionModel (MCollisionModel *model);  ; MMechanicalState * createMapping (const char *name=""contactPoints"");  ; void cleanup ();  ; void resize (Size size);  ; Index addPoint (const Coord &P, Index index, Real &);  ; void update ();  ; void updateXfree ();  ;  Public Member Functions inherited from sofa::component::collision::response::mapper::BaseContactMapper< DataTypes >; virtual ~BaseContactMapper ();  ; virtual Index addPoint (const Coord &, Index, Real &);  Adding a point of the global referentiel to the mapping. More...;  ; virtual Index addPointB (const Coord &P, Index elementId, Real &r, const sofa::type::Vec3 &);  ; Index addPointB (const Coord &P, Index elementId, Real &r);  . Additional Inherited Members;  Static Public Member Functions inherited from sofa::component::collision::response::mapper::BaseContactMapper< DataTypes >; static BaseContactMapper< DataTypes > * Create (core::CollisionModel *model, const std::string &name=std::string(""PenalityContactForceField""));  ; static ContactMapper< TCollisionModel, DataTypes > * create (ContactMapper< TCollisionModel, DataTypes > *, core::CollisionModel *arg);  . Attribute details. ◆ child. template<class TCollisionModel , class DataTypes > . simulation",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_subset_contact_mapper.html:1312,update,update,1312,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_subset_contact_mapper.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_subset_contact_mapper.html,2,['update'],"['update', 'updateXfree']"
Deployability,"precatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (Edge2QuadTopologicalMapping, sofa::core::topology::TopologicalMapping);  ; void init () override;  Initializes the target BaseTopology from the source BaseTopology. More...;  ; void updateTopologicalMappingTopDown () override;  Translates the TopologyChange objects from the source to the target. More...;  ; Index getFromIndex (Index ind) override;  ;  Public Member Functions inherited from sofa::core::topology::TopologicalMapping;  SOFA_ABSTRACT_CLASS (TopologicalMapping, objectmodel::BaseObject);  ; virtual void setTopologies (In *from, Out *to);  Specify the input and output models. More...;  ; void setPathInputObject (const std::string &o);  Set the path to the objects mapped in the scene graph. More...;  ; void setPathOutputObject (const std::string &o);  ; In * getFrom ();  Accessor to the INPUT topology of the TopologicalMapping : More...;  ; Out * getTo ();  Accessor to the OUTPUT topology of the TopologicalMapping : More...;  ; virtual void updateTopologicalMappingBottomUp ();  Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topology : More...;  ; virtual bool propagateFromInputToOutputModel ();  Return true if this mapping is able to propagate t",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_edge2_quad_topological_mapping.html:3475,update,updateTopologicalMappingTopDown,3475,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_edge2_quad_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_edge2_quad_topological_mapping.html,1,['update'],['updateTopologicalMappingTopDown']
Deployability,presented in webinar “Radiologie Numérique” [French]. /sofa-soon-on-github; ; SOFA – SOFA soon on GitHub. /sofa-stc5-coming-soon; ; SOFA – SOFA STC#5 in Strasbourg. /sofa-technical-committee-3-upcoming-raise-your-expectations; ; SOFA – SOFA Technical Committee #3 upcoming: raise your expectations!. /sofa-technologies-exhibited-amd-learning-day-in-paris; ; SOFA – SOFA technologies exhibited @ AMD Learning Day in Paris. /sofa-training-discover-and-learn-sofa-at-ismar2017; ; SOFA – SOFA training: discover and learn SOFA at ISMAR 2017. /sofa-v16-12-has-been-released; ; SOFA – SOFA v16.12 has been released!. /sofa-v17-06-has-been-released; ; SOFA – SOFA v17.06 has been released!. /sofa-v17-12-has-been-released; ; SOFA – SOFA v17.12 has been released!. /sofa-v18-06-has-been-released; ; SOFA – SOFA v18.06 has been released!. /sofa-v18-12-has-been-released; ; SOFA – SOFA v18.12 has been released!. /sofa-v19-06-has-been-released; ; SOFA – SOFA v19.06 has been released!. /sofa-v19-12-has-been-released; ; SOFA – SOFA v19.12 has been released!. /sofa-v20-06-has-been-released; ; SOFA – SOFA v20.06 has been released!. /sofa-v20-12-has-been-released; ; SOFA – SOFA v20.12 has been released!. /sofa-v21-06-has-been-released; ; SOFA – SOFA v21.06 has been released!. /sofa-v21-12-has-been-released; ; SOFA – SOFA v21.12 has been released!. /sofa-v22-06-has-been-released; ; SOFA – SOFA v22.06 has been released!. /sofa-v22-12-has-been-released; ; SOFA – SOFA v22.12 has been released!. /sofa-v23-06-has-been-released; ; SOFA – SOFA v23.06 has been released!. /sofa-v23-12-has-been-released; ; SOFA – SOFA v23.12 has been released!. /sofa-v24-06-has-been-released; ; SOFA – SOFA v24.06 has been released!. /sofa-week-2018-experience; ; SOFA – SOFA Week 2018 Experience. /sofa-week-2021-register-now; ; SOFA – SOFA Week 2021: register now!. /sofa-week-2022-register-now; ; SOFA – SOFA Week 2022: register now!. /sofa-week-2023-register-now; ; SOFA – SOFA Week 2023: register now!. /sofa-week-2024-regis,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:9104,release,released,9104,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['release'],['released']
Deployability,"pring::TriangularBiquadraticSpringsForceField< DataTypes >; ForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; triangleInfosofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >protected; TriangularBiquadraticSpringsForceField()sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >protected; updateInternal()sofa::core::objectmodel::BaseObject; updateLameCoefficients()sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMatrixsofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >protected; VecCoord typedefsofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ForceField() overridesofa::core::behavior::ForceField< DataTypes >prote",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field-members.html:19801,update,updateLinks,19801,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field-members.html,1,['update'],['updateLinks']
Deployability,"prings< DataTypes >::~QuadularBendingSprings. Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ applyEdgeCreation(). template<class DataTypes > . void sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::applyEdgeCreation ; (; Index ; edgeIndex, . EdgeInformation & ; ei, . const core::topology::BaseMeshTopology::Edge & ; , . const sofa::type::vector< Index > & ; , . const sofa::type::vector< SReal > & ;  . ). Method to initialize See alsoEdgeInformation when a new edge is created. Will be set as creation callback in the EdgeData . d_edgeInfo . ◆ applyPointDestruction(). template<class DataTypes > . void sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::applyPointDestruction ; (; const sofa::type::vector< Index > & ; pointIndices). Method to update. ; See also",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs.html:23595,update,update,23595,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs.html,1,['update'],['update']
Deployability,"pringsForceField< DataTypes >::getLambda ; (; ); const. inlinevirtual . ◆ getMu(). template<class DataTypes > . virtual Real sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >::getMu ; (; ); const. inlinevirtual . ◆ getPotentialEnergy(). template<class DataTypes > . SReal sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >::getPotentialEnergy ; (; const core::MechanicalParams * ; , . const DataVecCoord & ;  . ); const. inlineoverridevirtual . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ init(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ setPoissonRatio(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >::setPoissonRatio ; (; const Real ; ratio). inline . ◆ setYoungModulus(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >::setYoungModulus ; (; const Real ; modulus). inline . ◆ SOFA_CLASS(). template<class DataTypes > . sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >::SOFA_CLASS ; (; SOFA_TEMPLATE(TriangularBiquadraticSpringsForceField< DataTypes >, DataTypes) ; , . SOFA_TEMPLATE(core::behavior::ForceField, DataTypes) ;  . ). ◆ updateLameCoefficients(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >::updateLameCoefficients. compute lambda and mu based on the Young modulus and Poisson ratio . sofacomponentsolidmechanicsspringTriangularBiquadraticSpringsForceField; Generated on Mon Nov 11 2024 03:05:12 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field.html:32628,update,updateLameCoefficients,32628,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field.html,2,['update'],['updateLameCoefficients']
Deployability,"protected . internal revision number to check if topology has changed. . ◆ mstate. core::behavior::MechanicalState<defaulttype::Vec3Types>* sofa::component::collision::geometry::TetrahedronCollisionModel::mstate. protected . ◆ tetra. const sofa::core::topology::BaseMeshTopology::SeqTetrahedra* sofa::component::collision::geometry::TetrahedronCollisionModel::tetra. protected . Constructor details. ◆ TetrahedronCollisionModel(). sofa::component::collision::geometry::TetrahedronCollisionModel::TetrahedronCollisionModel ; (; ). protected . Function details. ◆ addTetraToDraw(). void sofa::component::collision::geometry::TetrahedronCollisionModel::addTetraToDraw ; (; const Tetrahedron & ; t, . std::vector< sofa::type::Vec3 > & ; tetraVertices, . std::vector< sofa::type::Vec3 > & ; normalVertices . ). protected . ◆ computeBoundingTree(). void sofa::component::collision::geometry::TetrahedronCollisionModel::computeBoundingTree ; (; int ; maxDepth = 0). overridevirtual . Create or update the bounding volume hierarchy. ; Implements sofa::core::CollisionModel. ◆ draw() [1/2]. void sofa::component::collision::geometry::TetrahedronCollisionModel::draw ; (; const core::visual::VisualParams * ; , . sofa::Index ;  . ). overridevirtual . Render an collision element. ; Reimplemented from sofa::core::CollisionModel. ◆ draw() [2/2]. void sofa::component::collision::geometry::TetrahedronCollisionModel::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ getMechanicalState(). core::behavior::MechanicalState<defaulttype::Vec3Types>* sofa::component::collision::geometry::TetrahedronCollisionModel::getMechanicalState ; (; ). inline . ◆ init(). void sofa::component::collision::geometry::TetrahedronCollisionModel::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_tetrahedron_collision_model.html:23140,update,update,23140,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_tetrahedron_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_tetrahedron_collision_model.html,1,['update'],['update']
Deployability,"protected; ShaderElementType enum namesofa::core::visual::ShaderElement; shaderssofa::gl::component::shader::OglShaderElementprotected; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglFloat2Variable, OglVariable< type::Vec2f >)sofa::gl::component::shader::OglFloat2Variable; OglVariable< type::Vec2f >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::Vec2f >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::Vec2f >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglFloat2Variable()sofa::gl::component::shader::OglFloat2Variableinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float2_variable-members.html:13397,update,updateInternal,13397,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float2_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float2_variable-members.html,1,['update'],['updateInternal']
Deployability,"protected; ShaderElementType enum namesofa::core::visual::ShaderElement; shaderssofa::gl::component::shader::OglShaderElementprotected; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglFloat3Variable, OglVariable< type::Vec3f >)sofa::gl::component::shader::OglFloat3Variable; OglVariable< type::Vec3f >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::Vec3f >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::Vec3f >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglFloat3Variable()sofa::gl::component::shader::OglFloat3Variableinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float3_variable-members.html:13397,update,updateInternal,13397,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float3_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float3_variable-members.html,1,['update'],['updateInternal']
Deployability,"protected; ShaderElementType enum namesofa::core::visual::ShaderElement; shaderssofa::gl::component::shader::OglShaderElementprotected; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglFloat4Variable, OglVariable< type::Vec4f >)sofa::gl::component::shader::OglFloat4Variable; OglVariable< type::Vec4f >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::Vec4f >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::Vec4f >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglFloat4Variable()sofa::gl::component::shader::OglFloat4Variableinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float4_variable-members.html:13397,update,updateInternal,13397,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float4_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float4_variable-members.html,2,['update'],['updateInternal']
Deployability,"ption *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglMatrix4VectorVariable, OglVariable< type::vector< type::Mat4x4f > >)sofa::gl::component::shader::OglMatrix4VectorVariable; OglVariable< type::vector< type::Mat4x4f > >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< type::vector< type::Mat4x4f > >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; transposesofa::gl::component::shader::OglMatrix4VectorVariable; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< type::vector< type::Mat4x4f > >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglMatrix4VectorVariable()sofa::gl::component::shader::OglMatrix4VectorVariableinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4_vector_variable-members.html:13866,update,updateLinks,13866,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4_vector_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4_vector_variable-members.html,2,['update'],['updateLinks']
Deployability,"ptr)sofa::core::objectmodel::BaseObject; setTopologies(In *from, Out *to)sofa::core::topology::TopologicalMappingvirtual; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(TopologicalMapping, objectmodel::BaseObject)sofa::core::topology::TopologicalMapping; SOFA_CLASS(Triangle2EdgeTopologicalMapping, sofa::core::topology::TopologicalMapping)sofa::component::topology::mapping::Triangle2EdgeTopologicalMapping; sofa::core::topology::TopologicalMapping::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; toModelsofa::core::topology::TopologicalMapping; TopologicalMapping()sofa::core::topology::TopologicalMappingprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle2EdgeTopologicalMapping()sofa::component::topology::mapping::Triangle2EdgeTopologicalMappingprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateTopologicalMappingBottomUp()sofa::core::topology::TopologicalMappinginlinevirtual; updateTopologicalMappingTopDown() overridesofa::component::topology::mapping::Triangle2EdgeTopologicalMappingvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~TopologicalMapping() overridesofa::core::topology::TopologicalMappinginlineprotected; ~Triangle2EdgeTopologicalMapping() overridesofa::component::topology::mapping::Triangle2EdgeTopologicalMappingprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_triangle2_edge_topological_mapping-members.html:12353,update,updateInternal,12353,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_triangle2_edge_topological_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_triangle2_edge_topological_mapping-members.html,4,['update'],"['updateInternal', 'updateLinks', 'updateTopologicalMappingBottomUp', 'updateTopologicalMappingTopDown']"
Deployability,"ptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglFloatAttribute, SOFA_TEMPLATE3(OglAttribute, 1, GL_FLOAT, float))sofa::gl::component::shader::OglFloatAttribute; OglAttribute< 1, GL_FLOAT, float >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE3(OglAttribute, size, type, float), core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglAttribute< 1, GL_FLOAT, float >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglAttribute< 1, GL_FLOAT, float >protected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglAttribute() overridesofa::gl::component::shader::OglAttribute< 1, GL_FLOAT, float >protected; ~OglFloatAttribute()sofa::gl::component::shader::OglFloatAttributeinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~ShaderElement() overridesofa::core::v",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_attribute-members.html:14990,update,updateVisual,14990,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_attribute-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_attribute-members.html,2,['update'],['updateVisual']
Deployability,"ptr, const std::string &path, const BaseLink *link);  . Static Public Member Functions; template<class T > ; static bool canCreate (T *&obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Protected Member Functions;  WriteState ();  ;  ~WriteState () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseDat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_state.html:13295,update,update,13295,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_state.html,1,['update'],['update']
Deployability,"ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(NarrowPhaseDetection, Detection)sofa::core::collision::NarrowPhaseDetection; sofa::core::collision::Detection::SOFA_ABSTRACT_CLASS(CollisionAlgorithm, objectmodel::BaseObject)sofa::core::collision::CollisionAlgorithm; SOFA_CLASS(BVHNarrowPhase, core::collision::NarrowPhaseDetection)sofa::component::collision::detection::algorithm::BVHNarrowPhase; sofa::core::collision::NarrowPhaseDetection::SOFA_CLASS(Detection, CollisionAlgorithm)sofa::core::collision::Detection; sofa::core::collision::CollisionAlgorithm::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storedIntersectionMethodsofa::core::collision::Detectionprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; visitCollisionElements(const TestPair &root, core::collision::ElementIntersector *coarseIntersector, const FinestCollision &finest, std::queue< TestPair > &externalCells, std::stack< TestPair > &internalCells, sofa::core::collision::DetectionOutputVector *&outputs, const sofa::core::collision::Intersection *currentIntersection)sofa::component::collision::detection::algorithm::BVHNarrowPhaseprotectedstatic; visitExternalChildren(const core::CollisionElementIterator &it1, const core::CollisionElementIterator &it2, core::collision::ElementIntersector *coarseIntersector, const FinestCollision &finest, std::queue< TestPair > &externalCells, sofa::core::collision::DetectionOutputVector *&outputs, const sofa::core::collision::Intersection *currentIntersection)sofa::component::collision:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase-members.html:13800,update,updateLinks,13800,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase-members.html,1,['update'],['updateLinks']
Deployability,"ptr=nullptr, objectmodel::BaseObjectDescription *arg=nullptr)sofa::core::behavior::MechanicalState< TDataTypes >inlinestatic; SOFA_ABSTRACT_CLASS(BaseMechanicalState, BaseState)sofa::core::behavior::BaseMechanicalState; sofa::core::BaseState::SOFA_ABSTRACT_CLASS(BaseState, objectmodel::BaseObject)sofa::core::BaseState; SOFA_BASE_CAST_IMPLEMENTATION(BaseMechanicalState)sofa::core::behavior::BaseMechanicalState; sofa::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; sofa::core::State::SOFA_CLASS(SOFA_TEMPLATE(State, TDataTypes), BaseState)sofa::core::State< TDataTypes >; SOFA_CLASS2(SOFA_TEMPLATE(MechanicalState, TDataTypes), BaseMechanicalState, SOFA_TEMPLATE(State, TDataTypes))sofa::core::behavior::MechanicalState< TDataTypes >; SPtr typedefsofa::core::objectmodel::Base; State()sofa::core::State< TDataTypes >protected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; vAlloc(const ExecParams *params, VecCoordId v, const core::VecIdProperties &properties={})=0sofa::core::behavior::BaseMechanicalStatepure virtual; vAlloc(const ExecParams *params, VecDerivId v, const core::VecIdProperties &properties={})=0sofa::core::behavior::BaseMechanicalStatepure virtual; vAvail(const ExecParams *params, VecCoordId &v)=0sofa::core::behavior::BaseMechanicalStatepure virtual; vAvail(const ExecParams *params, VecDerivId &v)=0sofa::core::behavior::BaseMechanicalStatepure virtual; vDot(const ExecParams *params, ConstVecId a, ConstVecId b)=0sofa::core::behavior::BaseMechanicalStatepure virtual; VecCoord typedefsofa::core::behavior::MechanicalState< TDataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::core::behavior::MechanicalState< TDataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecReal typedefsofa::core::behavior::M",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state-members.html:18171,update,updateInternal,18171,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state-members.html,1,['update'],['updateInternal']
Deployability,"putType = geometry::ElementType::UNKNOWN;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (Hexa2QuadTopologicalMapping, sofa::core::topology::TopologicalMapping);  ; void init () override;  Initializes the target BaseTopology from the source BaseTopology. More...;  ; void updateTopologicalMappingTopDown () override;  Translates the TopologyChange objects from the source to the target. More...;  ; Index getFromIndex (Index ind) override;  ;  Public Member Functions inherited from sofa::core::topology::TopologicalMapping;  SOFA_ABSTRACT_CLASS (TopologicalMapping, objectmodel::BaseObject);  ; virtual void setTopologies (In *from, Out *to);  Specify the input and output models. More...;  ; void setPathInputObject (const std::string &o);  Set the path to the objects mapped in the scene graph. More...;  ; void setPathOutputObject (const std::string &o);  ; In * getFrom ();  Accessor to the INPUT topology of the TopologicalMapping : More...;  ; Out * getTo ();  Accessor to the OUTPUT topology of the TopologicalMapping : More...;  ; virtual void updateTopologicalMappingBottomUp ();  Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topology : More...;  ; virtual bool propagateFromInputToOutputModel ();  Return true if this mapping is able to propagate t",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_hexa2_quad_topological_mapping.html:2237,update,updateTopologicalMappingTopDown,2237,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_hexa2_quad_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_hexa2_quad_topological_mapping.html,1,['update'],['updateTopologicalMappingTopDown']
Deployability,"r ; dxthe VecId where to store the corrective motion ; fis the VecId where the motion space force : f = J^t x lambda . Implemented in sofa::component::constraint::lagrangian::correction::UncoupledConstraintCorrection< TDataTypes >, sofa::component::constraint::lagrangian::correction::LinearSolverConstraintCorrection< TDataTypes >, and sofa::component::constraint::lagrangian::correction::PrecomputedConstraintCorrection< TDataTypes >. ◆ computeMotionCorrectionFromLambda(). template<class DataTypes > . void sofa::core::behavior::ConstraintCorrection< DataTypes >::computeMotionCorrectionFromLambda ; (; const core::ConstraintParams * ; cparams, . core::MultiVecDerivId ; dx, . const linearalgebra::BaseVector * ; lambda . ). overridevirtual . Compute the motion coming from the contact space lambda ; dx = A^-1 x J^t x lambda where :; J is the constraint jacobian matrix ( ^t denotes the transposition operator ); A is the dynamic matrix. Usually for implicit integration A = M - h^2 x K with – M the mass matrix – K the stiffness matrix – h the step size. Usually this computation will be delegated to a LinearSolver instance. Parameters. cparamsthe ConstraintParams relative to the constraint solver ; dxthe VecId where to store the corrective motion ; lambdais the constraint space force vector . Implements sofa::core::behavior::BaseConstraintCorrection. ◆ getMState(). template<class TDataTypes > . MechanicalState<DataTypes>* sofa::core::behavior::ConstraintCorrection< TDataTypes >::getMState ; (; ); const. inline . ◆ init(). template<class DataTypes > . void sofa::core::behavior::ConstraintCorrection< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject.; Reimplemented in sofa::component::constraint::lagrangian::correction::UncoupledConstraintCorrection< TDataTypes >, and sofa::component::constraint::lagrangian::correction::UncoupledCo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_constraint_correction.html:24089,integrat,integration,24089,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_constraint_correction.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_constraint_correction.html,1,['integrat'],['integration']
Deployability,"r >::Index sofa::component::linearsolver::preconditioner::WarpPreconditioner< TMatrix, TVector, ThreadManager >::getSystemDimention ; (; const sofa::core::MechanicalParams * ; mparams). ◆ init(). template<class TMatrix , class TVector , class ThreadManager > . void sofa::component::linearsolver::preconditioner::WarpPreconditioner< TMatrix, TVector, ThreadManager >::init ; (; void ; ). override . ◆ invert(). template<class TMatrix , class TVector , class ThreadManager > . void sofa::component::linearsolver::preconditioner::WarpPreconditioner< TMatrix, TVector, ThreadManager >::invert ; (; Matrix & ; M). override . ◆ setSystemMBKMatrix(). template<class TMatrix , class TVector , class ThreadManager > . void sofa::component::linearsolver::preconditioner::WarpPreconditioner< TMatrix, TVector, ThreadManager >::setSystemMBKMatrix ; (; const core::MechanicalParams * ; mparams). override . ◆ SOFA_CLASS(). template<class TMatrix , class TVector , class ThreadManager = NoThreadManager> . sofa::component::linearsolver::preconditioner::WarpPreconditioner< TMatrix, TVector, ThreadManager >::SOFA_CLASS ; (; SOFA_TEMPLATE3(WarpPreconditioner< TMatrix, TVector, ThreadManager >, TMatrix, TVector, ThreadManager) ; , . SOFA_TEMPLATE3(sofa::component::linearsolver::MatrixLinearSolver, TMatrix, TVector, ThreadManager) ;  . ). ◆ solve(). template<class TMatrix , class TVector , class ThreadManager > . void sofa::component::linearsolver::preconditioner::WarpPreconditioner< TMatrix, TVector, ThreadManager >::solve ; (; Matrix & ; M, . Vector & ; solution, . Vector & ; rh . ). override . Solve the system as constructed using the previous methods. . ◆ updateSystemMatrix(). template<class TMatrix , class TVector , class ThreadManager > . void sofa::component::linearsolver::preconditioner::WarpPreconditioner< TMatrix, TVector, ThreadManager >::updateSystemMatrix. override . sofacomponentlinearsolverpreconditionerWarpPreconditioner; Generated on Mon Nov 11 2024 02:47:32 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_warp_preconditioner.html:9987,update,updateSystemMatrix,9987,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_warp_preconditioner.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_warp_preconditioner.html,2,['update'],['updateSystemMatrix']
Deployability,"r Functions inherited from sofa::core::behavior::SingleStateAccessor< TDataTypes >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, TDataTypes), StateAccessor);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; MechanicalState< TDataTypes > * getMState ();  ; const MechanicalState< TDataTypes > * getMState () const;  . Protected Member Functions;  SkeletalMotionProjectiveConstraint ();  ; virtual ~SkeletalMotionProjectiveConstraint ();  ; template<class DataDeriv > ; void projectResponseT (DataDeriv &dx, const std::function< void(DataDeriv &, const unsigned int)> &clear);  ; template<class MyCoord > ; void interpolatePosition (Real cT, typename std::enable_if< std::is_same< MyCoord, defaulttype::RigidCoord< 3, Real > >::value, VecCoord >::type &x);  ;  Protected Member Functions inherited from sofa::core::behavior::ProjectiveConstraintSet< TDataTypes >;  ProjectiveConstraintSet (MechanicalState< TDataTypes > *mm=nullptr);  ;  ~ProjectiveConstraintSet () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseProjectiveConstraintSet;  BaseProjectiveConstraintSet ();  ;  ~BaseProjectiveConstraintSet () override;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_skeletal_motion_projective_constraint.html:16634,update,update,16634,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_skeletal_motion_projective_constraint.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_skeletal_motion_projective_constraint.html,1,['update'],['update']
Deployability,"r method used by initData() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Context;  Context ();  ; virtual ~Context () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseContext;  BaseContext ();  ;  ~BaseContext () override;  . Friends; class VisitorScheduler;  . Attribute details. ◆ _context. BaseContext* sofa::simulation::Node::_context. protected . ◆ actionStack. std::stack<Visitor*> sofa::simulation::Node::actionStack. protected . ◆ animationManager. NodeSingle<sofa::core::behavior::BaseAnimationLoop> sofa::simulation::Node::animationManager. ◆ behaviorModel. NodeSequence<sofa::core::BehaviorModel> sofa::simulation::Node::behaviorModel. ◆ child. NodeSequence<Node,true> sofa::simulation::Node::child. ◆ collisionModel. NodeSequence<sofa::core::CollisionModel> sofa::simulation::Node::collisionModel. ◆ collisionPipeline. NodeSingle<sofa::core::collision::Pipeline> sofa::simulation::Node::collisionPipeline. ◆ configurationSetting. NodeSequence<sofa::core::objectmodel::ConfigurationSetting> sofa::simulation::Node::configurationSetting. ◆ constraintSet. NodeSequence<sofa::core::behavior::BaseConstraintSet> sofa::simulation::Node::constraintSet. ◆ constraintSolver. NodeSequence<sofa::core::behavior::ConstraintSolver> sofa::simulation::Node::constraintSolver. ◆ contextObject. NodeSequence<sofa::core::objectmodel::ContextObject> sofa::simulation::Node::contextObject. ◆ debug_. bool sofa::simulation::Node::debug_. protected . ◆ forceField. NodeSequence<sofa::core::behavior::BaseForceField> sofa::simulation::Node::forceField. ◆ initialized. bool sofa::simulation::Node::initialized. protected . ◆ interactionForceField. NodeSequence<sofa::core::behavior::BaseInteractionForceField> sofa::simulation::Node::interactionForceField. ◆ linearSolver. NodeSequence<sofa::core::behavior::BaseLinearSolver> sofa::simulation::Node::linearSolver. ◆ listener. type::vector<MutationListener*> sofa::simulation::Node::listener.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:30390,configurat,configurationSetting,30390,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,2,['configurat'],['configurationSetting']
Deployability,"r s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset() overridesofa::simulation::PipelineImplvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(Pipeline, sofa::core::objectmodel::BaseObject)sofa::core::collision::Pipeline; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~Pipeline() overridesofa::core::collision::Pipelineprotected; ~PipelineImpl() overridesofa::simulatio",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html:10796,Pipeline,Pipeline,10796,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,1,['Pipeline'],['Pipeline']
Deployability,"r sofa::component::collision::response::mapper::ContactMapper< collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >:. [legend]; Detailed Description; template<class DataTypes>; class sofa::component::collision::response::mapper::ContactMapper< collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >; Mapper for TriangleModel. . Public Member Functions; sofa::Index addPoint (const Coord &P, sofa::Index index, Real &);  ; sofa::Index addPointB (const Coord &P, sofa::Index index, Real &, const type::Vec3 &baryP);  ; sofa::Index addPointB (const Coord &P, sofa::Index index, Real &r);  ;  Public Member Functions inherited from sofa::component::collision::response::mapper::BarycentricContactMapper< collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >;  SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER (Index, sofa::Index);  ;  SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER (Size, sofa::Size);  ;  BarycentricContactMapper ();  ; void setCollisionModel (MCollisionModel *model);  ; void cleanup () override;  ; MMechanicalState * createMapping (const char *name=""contactPoints"") override;  ; void resize (sofa::Size size) override;  ; void update () override;  ; void updateXfree () override;  ; void updateX0 ();  ;  Public Member Functions inherited from sofa::component::collision::response::mapper::BaseContactMapper< DataTypes >; virtual ~BaseContactMapper ();  ; virtual void resize (Size size)=0;  ; virtual Index addPoint (const Coord &, Index, Real &);  Adding a point of the global referentiel to the mapping. More...;  ; virtual Index addPointB (const Coord &P, Index elementId, Real &r, const sofa::type::Vec3 &);  ; Index addPointB (const Coord &P, Index elementId, Real &r);  . Additional Inherited Members;  Public Attributes inherited from sofa::component::collision::response::mapper::BarycentricContactMapper< collision::geometry::TriangleCollisionModel< sofa::defaulttype::Vec3Types >, DataTypes >",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_contact_mapper_3_01collision_1_1gebb925b509cdd5ef1164b8169af97b8ad.html:1811,update,update,1811,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_contact_mapper_3_01collision_1_1gebb925b509cdd5ef1164b8169af97b8ad.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1mapper_1_1_contact_mapper_3_01collision_1_1gebb925b509cdd5ef1164b8169af97b8ad.html,2,['update'],"['update', 'updateXfree']"
Deployability,"r sofa::gui::common::StartNavigationOperation:. [legend]. Protected Attributes; sofa::gui::component::StartNavigationButtonSetting::SPtr setting;  ;  Protected Attributes inherited from sofa::gui::common::Operation; PickHandler * pickHandle;  ; sofa::component::setting::MouseButtonSetting::SPtr mbsetting;  ; MOUSE_BUTTON button;  . Public Member Functions;  StartNavigationOperation ();  ;  Public Member Functions inherited from sofa::gui::common::Operation;  Operation (sofa::component::setting::MouseButtonSetting::SPtr s=nullptr);  ; virtual ~Operation ();  ; virtual void configure (PickHandler *picker, MOUSE_BUTTON b);  ; virtual void configure (PickHandler *picker, sofa::component::setting::MouseButtonSetting *s);  ; virtual void start ();  ; virtual void execution ();  This function is called each time the mouse is clicked. More...;  ; virtual void end ();  ; virtual void endOperation ();  This function is called after each mouse click. More...;  ; virtual void wait ();  This function is called when shift key is released. More...;  ; virtual void setSetting (sofa::component::setting::MouseButtonSetting *s);  ; virtual sofa::gui::component::performer::InteractionPerformer * createPerformer ();  ; MOUSE_BUTTON getMouseButton () const;  ; std::string getId ();  . Static Public Member Functions; static std::string getDescription ();  ;  Static Public Member Functions inherited from sofa::gui::common::Operation; static MOUSE_BUTTON GetMouseId (unsigned int i);  . Protected Member Functions; virtual std::string defaultPerformerType () override;  ; void configurePerformer (sofa::gui::component::performer::InteractionPerformer *p) override;  . Additional Inherited Members;  Public Attributes inherited from sofa::gui::common::Operation; sofa::gui::component::performer::InteractionPerformer * performer;  . Attribute details. ◆ setting. sofa::gui::component::StartNavigationButtonSetting::SPtr sofa::gui::common::StartNavigationOperation::setting. protected . Constructor detai",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_start_navigation_operation.html:1430,release,released,1430,api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_start_navigation_operation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_start_navigation_operation.html,2,['release'],['released']
Deployability,"r system solvers. . Protected Attributes; bool frozen;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (LinearSolver, BaseLinearSolver);  ; virtual void resetSystem ()=0;  Reset the current linear system. More...;  ; virtual void setSystemMBKMatrix (const MechanicalParams *mparams)=0;  ; virtual void rebuildSystem (SReal, SReal);  ; virtual bool isAsyncSolver ();  Indicate if the solver update the system in parallel. More...;  ; virtual bool supportNonSymmetricSystem () const;  Returns true if the solver supports non-symmetric systems. More...;  ; virtual bool hasUpdatedMatrix ();  Indicate if the solver updated the system after the last call of setSystemMBKMatrix (should return true if isParallelSolver return false) More...;  ; virtual void updateSystemMatrix ();  This function is use for the preconditioner it must be called at each time step event if setSystemMBKMatrix is not called. More...;  ; virtual void setSystemRHVector (core::MultiVecDerivId v)=0;  Set the linear system right-hand term vector, from the values contained in the (Mechanical/Physical)State objects. More...;  ; virtual void setSystemLHVector (core::MultiVecDerivId v)=0;  ; virtual void solveSystem ()=0;  Solve the system as constructed using the previous methods. More...;  ; virtual void init_partial_solve ();  ; virtual voi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver.html:1581,update,update,1581,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver.html,1,['update'],['update']
Deployability,"r to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  BarycentricStickContact (CollisionModel1 *model1, CollisionModel2 *model2, Intersection *intersectionMethod);  ;  ~BarycentricStickContact () override;  ; void setInteractionTags (MechanicalState1 *mstate1, MechanicalState2 *mstate2);  ;  Protected Member Functions inherited from sofa::core::collision::Contact;  Contact ();  ;  ~Contact () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_barycentric_stick_contact.html:12910,update,update,12910,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_barycentric_stick_contact.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_barycentric_stick_contact.html,1,['update'],['update']
Deployability,"r to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  PostProcessManager ();  ;  ~PostProcessManager () override;  ;  Protected Member Functions inherited from sofa::core::visual::VisualManager;  ~VisualManager () override;  Destructor. More...;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_post_process_manager.html:13346,update,update,13346,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_post_process_manager.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_post_process_manager.html,2,['update'],['update']
Deployability,"r);  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void setSystemLHVector (core::MultiVecDerivId v);  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void applySystemSolution ();  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API GraphScatteredVector * createPersistentVector ();  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API linearalgebra::BaseMatrix * getSystemBaseMatrix ();  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API linearalgebra::BaseVector * getSystemRHBaseVector ();  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API linearalgebra::BaseVector * getSystemLHBaseVector ();  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void applyConstraintForce (const sofa::core::ConstraintParams *, sofa::core::MultiVecDerivId, const linearalgebra::BaseVector *);  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void computeResidual (const core::ExecParams *params, linearalgebra::BaseVector *f);  ; SOFA_COMPONENT_LINEARSOLVER_ITERATIVE_API void checkLinearSystem ();  . Protected Member Functions; Eigen::ComputationInfo getSolverInfo () const;  ; void updateSolverOderingMethod ();  . Additional Inherited Members;  Public Attributes inherited from sofa::component::linearsolver::ordering::OrderingMethodAccessor< sofa::component::linearsolver::MatrixLinearSolver< sofa::linearalgebra::CompressedRowSparseMatrix< TBlockType >, sofa::linearalgebra::FullVector< sofa::linearalgebra::CompressedRowSparseMatrix< TBlockType >::Real > > >; SingleLink< OrderingMethodAccessor, core::behavior::BaseOrderingMethod, BaseLink::FLAG_STRONGLINK > l_orderingMethod;  . Attribute details. ◆ d_orderingMethod. template<class TBlockType , class TEigenSolverFactory > . DeprecatedAndRemoved sofa::component::linearsolver::direct::EigenDirectSparseSolver< TBlockType, TEigenSolverFactory >::d_orderingMethod. protected . ◆ m_map. template<class TBlockType , class TEigenSolverFactory > . std::unique_ptr<EigenSparseMatrixMap> sofa::component::linearsolver::direct::EigenDirectSparseSolver< TBlockType, TEigenSolverFactory >::m_map. protected . ◆",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1direct_1_1_eigen_direct_sparse_solver.html:5132,update,updateSolverOderingMethod,5132,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1direct_1_1_eigen_direct_sparse_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1direct_1_1_eigen_direct_sparse_solver.html,1,['update'],['updateSolverOderingMethod']
Deployability,"r)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Index, sofa::Index)sofa::component::engine::generate::MeshBarycentricMapperEngine< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(MeshBarycentricMapperEngine, DataTypes), core::DataEngine)sofa::component::engine::generate::MeshBarycentricMapperEngine< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::engine::generate::MeshBarycentricMapperEngine< DataTypes >; VecCoord typedefsofa::component::engine::generate::MeshBarycentricMapperEngine< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecIndices typedefsofa::component::engine::generate::MeshBarycentricMapperEngine< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_mesh_barycentric_mapper_engine-members.html:14315,update,updateAllInputsIfDirty,14315,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_mesh_barycentric_mapper_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_mesh_barycentric_mapper_engine-members.html,1,['update'],['updateAllInputsIfDirty']
Deployability,"r)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(MeshClosingEngine, DataTypes), Inherited)sofa::component::engine::generate::MeshClosingEngine< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::engine::generate::MeshClosingEngine< DataTypes >; trianglessofa::component::engine::generate::MeshClosingEngine< DataTypes >; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::engine::generate::MeshClosingEngine< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSeqIndex typedefsofa::component::engine::generate::MeshClosingEngine< DataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~MeshClosingEngine() overridesofa::component::engine::g",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_mesh_closing_engine-members.html:13572,update,updateAllInputsIfDirty,13572,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_mesh_closing_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_mesh_closing_engine-members.html,1,['update'],['updateAllInputsIfDirty']
Deployability,"r)sofa::core::objectmodel::Baseinlinestatic; Single typedefsofa::simulation::Node; SOFA_ABSTRACT_CLASS(BaseNode, Base)sofa::core::objectmodel::BaseNode; SOFA_ABSTRACT_CLASS2(Node, BaseNode, Context)sofa::simulation::Node; SOFA_CLASS(DAGNode, simulation::Node)sofa::simulation::graph::DAGNode; sofa::simulation::Node::SOFA_CLASS(Context, BaseContext)sofa::core::objectmodel::Context; sofa::core::objectmodel::BaseContext::SOFA_CLASS(BaseContext, Base)sofa::core::objectmodel::BaseContext; solversofa::simulation::Node; SPtr typedefsofa::core::objectmodel::Base; statesofa::simulation::Node; StatusMap typedefsofa::simulation::graph::DAGNodeprotected; time_sofa::core::objectmodel::Context; topologysofa::simulation::Node; topologyObjectsofa::simulation::Node; unsortedsofa::simulation::Node; updateContext() overridesofa::simulation::graph::DAGNodevirtual; updateDescendancy()sofa::simulation::graph::DAGNodeprotected; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateSimulationContext() overridesofa::simulation::graph::DAGNodevirtual; updateVisualContext()sofa::simulation::Nodevirtual; Vec3 typedefsofa::core::objectmodel::BaseContext; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VISITED enum valuesofa::simulation::graph::DAGNodeprotected; VisitedStatus enum namesofa::simulation::graph::DAGNodeprotected; visualLoopsofa::simulation::Node; visualManagersofa::simulation::Node; visualModelsofa::simulation::Node; worldGravity_sofa::core::objectmodel::Context; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseContext() overridesofa::core::objectmodel::BaseContextprotected; ~BaseNode() overridesofa::core::objectmodel::BaseNodeprotected; ~Context() overridesofa::core::objectmodel::Contextinlineprotectedvirtual; ~DAGNode() overrides",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html:22933,update,updateSimulationContext,22933,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html,2,['update'],['updateSimulationContext']
Deployability,"r, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  BVHNarrowPhase ();  ;  ~BVHNarrowPhase () override=default;  ; void processExternalCell (const TestPair &externalCell, core::CollisionModel *&cm1, core::CollisionModel *&cm2, core::collision::ElementIntersector *coarseIntersector, const FinestCollision &finest, MirrorIntersector *mirror, std::queue< TestPair > &externalCells, sofa::core::collision::DetectionOutputVector *&outputs) const;  ;  Protected Member Functions inherited from sofa::core::collision::NarrowPhaseDetection;  ~NarrowPhaseDetection () override;  Destructor. More...;  ; void changeInstanceNP (Instance inst) override;  ;  Protected Member Functions inherited from sofa::core::collision::Detection;  Detection ();  ; virtual void changeInstanceBP (Instance);  ; void changeInstance (Instance inst) override;  ;  Protected Member Functions inherited from sofa::core::collision::CollisionAlgorithm;  CollisionAlgorithm ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase.html:12527,update,update,12527,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase.html,1,['update'],['update']
Deployability,"r, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::behavior::SingleStateAccessor< DataTypes >;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; MechanicalState< DataTypes > * getMState ();  ; const MechanicalState< DataTypes > * getMState () const;  . Protected Member Functions;  StandardTetrahedralFEMForceField ();  ; virtual ~StandardTetrahedralFEMForceField ();  ; void testDerivatives ();  ; void saveMesh (const char *filename);  ;  Protected Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  ForceField (MechanicalState< DataTypes > *mm=nullptr);  ;  ~ForceField () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseForceField;  BaseForceField ();  ;  ~BaseForceField () override=default;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_standard_tetrahedral_f_e_m_force_field.html:18363,update,update,18363,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_standard_tetrahedral_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_standard_tetrahedral_f_e_m_force_field.html,1,['update'],['update']
Deployability,"r, objectmodel::BaseObject)sofa::core::behavior::StateAccessor; sofa::core::behavior::SingleStateAccessor::SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(QuadularBendingSprings, DataTypes), SOFA_TEMPLATE(core::behavior::ForceField, DataTypes))sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >; ForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMatrixsofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >protected; VecCoord typedefsofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ForceField() overridesofa::core::behavior::ForceField< DataTypes >protected; ~QuadularBendingSprings()sofa::component::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs-members.html:18335,update,updateLinks,18335,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs-members.html,1,['update'],['updateLinks']
Deployability,"r.h>; Cross product for 3-elements vectors. ; More... Inheritance diagram for sofa::component::topology::container::dynamic::NumericalIntegrationDescriptor< Real, N >:. [legend]; Detailed Description; template<typename Real, int N>; class sofa::component::topology::container::dynamic::NumericalIntegrationDescriptor< Real, N >; Cross product for 3-elements vectors. . Protected Attributes; std::map< QuadratureMethodKey, QuadraturePointArray > quadratureMap;  . Public Member Functions;  NumericalIntegrationDescriptor ();  empty constructor More...;  ; QuadraturePointArray getQuadratureMethod (const QuadratureMethod qt, const IntegrationOrder order) const;  returns the set of quadrature points associated with a given quadrature method and integration order More...;  ; std::set< QuadratureMethod > getQuadratureMethods () const;  returns all the indices corresponding to all available quadrature methods More...;  ; std::set< IntegrationOrder > getIntegrationOrders (const QuadratureMethod qt) const;  returns the quadrature integration orders available for a given method More...;  ; void addQuadratureMethod (const QuadratureMethod qt, const IntegrationOrder order, QuadraturePointArray qpa);  add a quadrature method in the map More...;  . Attribute details. ◆ quadratureMap. template<typename Real , int N> . std::map<QuadratureMethodKey, QuadraturePointArray> sofa::component::topology::container::dynamic::NumericalIntegrationDescriptor< Real, N >::quadratureMap. protected . Constructor details. ◆ NumericalIntegrationDescriptor(). template<typename Real , int N> . sofa::component::topology::container::dynamic::NumericalIntegrationDescriptor< Real, N >::NumericalIntegrationDescriptor ; (; ). inline . empty constructor . Function details. ◆ addQuadratureMethod(). template<typename Real , int N> . void sofa::component::topology::container::dynamic::NumericalIntegrationDescriptor< Real, N >::addQuadratureMethod ; (; const QuadratureMethod ; qt, . const IntegrationOrder ; order, . Qu",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_numerical_integration_descriptor.html:1461,integrat,integration,1461,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_numerical_integration_descriptor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_numerical_integration_descriptor.html,1,['integrat'],['integration']
Deployability,"r::MechanicalObject< DataTypes >::applyRotation ; (; const type::Quat< SReal > ; q). overridevirtual . Rotate the current state. ; Implements sofa::core::behavior::BaseMechanicalState. ◆ applyScale(). template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::applyScale ; (; const SReal ; SReal, . const SReal ; SReal, . const SReal ; SReal . ). overridevirtual . Scale the current state. ; Implements sofa::core::behavior::BaseMechanicalState. ◆ applyTranslation(). template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::applyTranslation ; (; const SReal ; dx, . const SReal ; dy, . const SReal ; dz . ). overridevirtual . Apply translation vector to the position. ; Implements sofa::core::behavior::BaseMechanicalState. ◆ beginIntegration(). template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::beginIntegration ; (; SReal ; ). overridevirtual . Called at the beginning of each integration step. ; Reimplemented from sofa::core::behavior::BaseMechanicalState. ◆ buildIdentityBlocksInJacobian(). template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::buildIdentityBlocksInJacobian ; (; const sofa::type::vector< unsigned int > & ; list_n, . core::MatrixDerivId & ; mID . ). overridevirtual . fill the jacobian matrix (of the constraints) with identity blocks on the provided list of nodes(dofs) ; Implements sofa::core::behavior::BaseMechanicalState. ◆ compareVec(). template<class DataTypes > . SReal sofa::component::statecontainer::MechanicalObject< DataTypes >::compareVec ; (; core::ConstVecId ; v, . std::istream & ; in . ). overridevirtual . Implements sofa::core::behavior::BaseMechanicalState. ◆ computeBBox(). template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::computeBBox ; (; const core::ExecParams * ; params, . bool ; onlyVisible = false . ). overridevirtual . Boundi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:49911,integrat,integration,49911,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['integrat'],['integration']
Deployability,"r::OglInt2Attribute Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::gl::component::shader::OglInt2Attribute Class Reference . #include <OglAttribute.h>. Inheritance diagram for sofa::gl::component::shader::OglInt2Attribute:. [legend]. Public Member Functions;  SOFA_CLASS (OglInt2Attribute, SOFA_TEMPLATE3(OglAttribute, 2, GL_INT, SOFA_TEMPLATE2(sofa::type::Vec, 2, int)));  ;  OglInt2Attribute ();  ; virtual ~OglInt2Attribute ();  ;  Public Member Functions inherited from sofa::gl::component::shader::OglAttribute< 2, GL_INT, sofa::type::Vec< 2, int > >;  SOFA_CLASS2 (SOFA_TEMPLATE3(OglAttribute, size, type, sofa::type::Vec< 2, int >), core::visual::VisualModel, OglShaderElement);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void doInitVisual (const core::visual::VisualParams *vparams) override;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdateVisual (const core::visual::VisualParams *vparams) override;  if attributes are not static, update the buffer More...;  ; type::vector< sofa::type::Vec< 2, int > > * beginEdit ();  ; void endEdit ();  ; const type::vector< sofa::type::Vec< 2, int > > & getValue () const;  ; void setValue (const type::vector< sofa::type::Vec< 2, int > > &value);  ; void enable ();  ; void disable ();  ; void bwdDraw (core::visual::VisualParams *) override;  Called after objects in the current branch are displayed. More...;  ; void fwdDraw (core::visual::VisualParams *) override;  Called before objects in the current branch are displayed. More...;  ; void setUsage (unsigned int usage);  ; ShaderElementType getSEType () const override;  Returns the type of shader element (texture, macro, variable, or attribute) More...;  ; const core::objectmodel::BaseData * getSEValue () const override;  ; c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int2_attribute.html:1056,Update,Update,1056,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int2_attribute.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int2_attribute.html,1,['Update'],['Update']
Deployability,"r::OglInt3Attribute Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::gl::component::shader::OglInt3Attribute Class Reference . #include <OglAttribute.h>. Inheritance diagram for sofa::gl::component::shader::OglInt3Attribute:. [legend]. Public Member Functions;  SOFA_CLASS (OglInt3Attribute, SOFA_TEMPLATE3(OglAttribute, 3, GL_INT, SOFA_TEMPLATE2(sofa::type::Vec, 3, int)));  ;  OglInt3Attribute ();  ; virtual ~OglInt3Attribute ();  ;  Public Member Functions inherited from sofa::gl::component::shader::OglAttribute< 3, GL_INT, sofa::type::Vec< 3, int > >;  SOFA_CLASS2 (SOFA_TEMPLATE3(OglAttribute, size, type, sofa::type::Vec< 3, int >), core::visual::VisualModel, OglShaderElement);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void doInitVisual (const core::visual::VisualParams *vparams) override;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdateVisual (const core::visual::VisualParams *vparams) override;  if attributes are not static, update the buffer More...;  ; type::vector< sofa::type::Vec< 3, int > > * beginEdit ();  ; void endEdit ();  ; const type::vector< sofa::type::Vec< 3, int > > & getValue () const;  ; void setValue (const type::vector< sofa::type::Vec< 3, int > > &value);  ; void enable ();  ; void disable ();  ; void bwdDraw (core::visual::VisualParams *) override;  Called after objects in the current branch are displayed. More...;  ; void fwdDraw (core::visual::VisualParams *) override;  Called before objects in the current branch are displayed. More...;  ; void setUsage (unsigned int usage);  ; ShaderElementType getSEType () const override;  Returns the type of shader element (texture, macro, variable, or attribute) More...;  ; const core::objectmodel::BaseData * getSEValue () const override;  ; c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int3_attribute.html:1056,Update,Update,1056,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int3_attribute.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int3_attribute.html,1,['Update'],['Update']
Deployability,"r::OglInt4Attribute Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::gl::component::shader::OglInt4Attribute Class Reference . #include <OglAttribute.h>. Inheritance diagram for sofa::gl::component::shader::OglInt4Attribute:. [legend]. Public Member Functions;  SOFA_CLASS (OglInt4Attribute, SOFA_TEMPLATE3(OglAttribute, 4, GL_INT, SOFA_TEMPLATE2(sofa::type::Vec, 4, int)));  ;  OglInt4Attribute ();  ; virtual ~OglInt4Attribute ();  ;  Public Member Functions inherited from sofa::gl::component::shader::OglAttribute< 4, GL_INT, sofa::type::Vec< 4, int > >;  SOFA_CLASS2 (SOFA_TEMPLATE3(OglAttribute, size, type, sofa::type::Vec< 4, int >), core::visual::VisualModel, OglShaderElement);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void doInitVisual (const core::visual::VisualParams *vparams) override;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void doUpdateVisual (const core::visual::VisualParams *vparams) override;  if attributes are not static, update the buffer More...;  ; type::vector< sofa::type::Vec< 4, int > > * beginEdit ();  ; void endEdit ();  ; const type::vector< sofa::type::Vec< 4, int > > & getValue () const;  ; void setValue (const type::vector< sofa::type::Vec< 4, int > > &value);  ; void enable ();  ; void disable ();  ; void bwdDraw (core::visual::VisualParams *) override;  Called after objects in the current branch are displayed. More...;  ; void fwdDraw (core::visual::VisualParams *) override;  Called before objects in the current branch are displayed. More...;  ; void setUsage (unsigned int usage);  ; ShaderElementType getSEType () const override;  Returns the type of shader element (texture, macro, variable, or attribute) More...;  ; const core::objectmodel::BaseData * getSEValue () const override;  ; c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int4_attribute.html:1056,Update,Update,1056,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int4_attribute.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int4_attribute.html,1,['Update'],['Update']
Deployability,"r::SOFA_ABSTRACT_CLASS(BaseController, core::objectmodel::BaseObject)sofa::core::behavior::BaseController; SOFA_CLASS(SOFA_TEMPLATE(LCPForceFeedback, TDataTypes), MechanicalStateForceFeedback< TDataTypes >)sofa::component::haptics::LCPForceFeedback< TDataTypes >; sofa::component::haptics::MechanicalStateForceFeedback::SOFA_CLASS(SOFA_TEMPLATE(MechanicalStateForceFeedback, TDataTypes), ForceFeedback)sofa::component::haptics::MechanicalStateForceFeedback< TDataTypes >; sofa::component::haptics::ForceFeedback::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; solverTimeoutsofa::component::haptics::LCPForceFeedback< TDataTypes >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; time_bufsofa::component::haptics::LCPForceFeedback< TDataTypes >protected; timer_iterationssofa::component::haptics::LCPForceFeedback< TDataTypes >protected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateConstraintProblem()sofa::component::haptics::LCPForceFeedback< TDataTypes >protectedvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateStats()sofa::component::haptics::LCPForceFeedback< TDataTypes >protectedvirtual; VecCoord typedefsofa::component::haptics::LCPForceFeedback< TDataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::haptics::LCPForceFeedback< TDataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~LCPForceFeedback() overridesofa::component::haptics::LCPForceFeedback< TDataTypes >inlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_l_c_p_force_feedback-members.html:15085,update,updateConstraintProblem,15085,api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_l_c_p_force_feedback-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_l_c_p_force_feedback-members.html,4,['update'],"['updateConstraintProblem', 'updateInternal', 'updateLinks', 'updateStats']"
Deployability,"r::SOFA_ABSTRACT_CLASS(StateAccessor, objectmodel::BaseObject)sofa::core::behavior::StateAccessor; SOFA_CLASS(SOFA_TEMPLATE(FixedLagrangianConstraint, DataTypes), SOFA_TEMPLATE(core::behavior::Constraint, DataTypes))sofa::component::constraint::lagrangian::model::FixedLagrangianConstraint< DataTypes >; sofa::core::behavior::Constraint::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(Constraint, DataTypes), BaseConstraint, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::Constraint< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeLambda(const ConstraintParams *cParams, MultiVecDerivId res, const sofa::linearalgebra::BaseVector *lambda) overridesofa::core::behavior::Constraint< DataTypes >virtual; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecConstArea typedefsofa::core::behavior::BaseConstraint; VecConstCoord typedefsofa::core::behavior::BaseConstraint; VecConstDeriv typedefsofa::core::behavior::BaseConstraint; VecConstraintBlockInfo typedefsofa::core::behavior::BaseConstraint; VecCoord typedefsofa::component::constraint::lagrangian::model::FixedLagrangianConstraint< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::constraint::lagrangian::model::FixedLagrangianConstraint< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecPersistentID typedefsofa::core::behavior::BaseConstraint; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedv",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_fixed_lagrangian_constraint-members.html:16959,update,updateInternal,16959,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_fixed_lagrangian_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_fixed_lagrangian_constraint-members.html,1,['update'],['updateInternal']
Deployability,"r::SOFA_ABSTRACT_CLASS(StateAccessor, objectmodel::BaseObject)sofa::core::behavior::StateAccessor; sofa::core::behavior::SingleStateAccessor::SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(FastTriangularBendingSprings, DataTypes), SOFA_TEMPLATE(core::behavior::ForceField, DataTypes))sofa::component::solidmechanics::spring::FastTriangularBendingSprings< _DataTypes >; ForceField< _DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ForceField, _DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, _DataTypes))sofa::core::behavior::ForceField< _DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::solidmechanics::spring::FastTriangularBendingSprings< _DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::spring::FastTriangularBendingSprings< _DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~FastTriangularBendingSprings()sofa::component::solidmechanics::spring::FastTriangularBendingSprings< _DataTypes >protectedvirtual; ~ForceField() override",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs-members.html:17877,update,updateInternal,17877,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs-members.html,1,['update'],['updateInternal']
Deployability,"r::SingleStateAccessor::SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(UniformVelocityDampingForceField, DataTypes), SOFA_TEMPLATE(core::behavior::ForceField, DataTypes))sofa::component::mechanicalload::UniformVelocityDampingForceField< DataTypes >; ForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; UniformVelocityDampingForceField()sofa::component::mechanicalload::UniformVelocityDampingForceField< DataTypes >protected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::mechanicalload::UniformVelocityDampingForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::mechanicalload::UniformVelocityDampingForceField< DataTypes >; VecIndex typedefsofa::component::mechanicalload::UniformVelocityDampingForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ForceField() overridesofa::core::behavior::ForceField< DataTypes >p",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_uniform_velocity_damping_force_field-members.html:15718,update,updateInternal,15718,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_uniform_velocity_damping_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_uniform_velocity_damping_force_field-members.html,1,['update'],['updateInternal']
Deployability,"r< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(TriangularQuadraticSpringsForceField, DataTypes), SOFA_TEMPLATE(core::behavior::ForceField, DataTypes))sofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >; ForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; triangleInfosofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >protected; TriangularQuadraticSpringsForceField()sofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >protected; updateInternal()sofa::core::objectmodel::BaseObject; updateLameCoefficients()sofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMatrixsofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >protected; VecCoord typedefsofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::Base",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_quadratic_springs_force_field-members.html:19184,update,updateInternal,19184,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_quadratic_springs_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_quadratic_springs_force_field-members.html,1,['update'],['updateInternal']
Deployability,"r< PointID > &index, const sofa::type::vector< PointID > &inv_index, const bool renumberDOF=true);  Sends a message to warn that points are about to be reordered. More...;  ; void propagateTopologicalChanges () override;  Called by a topology to warn specific topologies linked to it that TopologyChange objects happened. More...;  ;  Protected Member Functions inherited from sofa::core::topology::TopologyModifier;  TopologyModifier ();  Constructor. More...;  ;  ~TopologyModifier () override;  Destructor. More...;  ; void addTopologyChange (const TopologyChange *topologyChange);  Adds a TopologyChange object to the list of the topology this object describes. More...;  ; void addStateChange (const TopologyChange *topologyChange);  Adds a StateChange object to the list of the topology this object describes. More...;  ;  Protected Member Functions inherited from sofa::core::topology::BaseTopologyObject;  BaseTopologyObject ();  ;  ~BaseTopologyObject () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; vo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier.html:26090,update,update,26090,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier.html,6,['update'],['update']
Deployability,"r< Real, N > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::component::topology::container::dynamic::NumericalIntegrationDescriptor< Real, N > Class Template Reference . #include <NumericalIntegrationDescriptor.h>; Cross product for 3-elements vectors. ; More... Inheritance diagram for sofa::component::topology::container::dynamic::NumericalIntegrationDescriptor< Real, N >:. [legend]; Detailed Description; template<typename Real, int N>; class sofa::component::topology::container::dynamic::NumericalIntegrationDescriptor< Real, N >; Cross product for 3-elements vectors. . Protected Attributes; std::map< QuadratureMethodKey, QuadraturePointArray > quadratureMap;  . Public Member Functions;  NumericalIntegrationDescriptor ();  empty constructor More...;  ; QuadraturePointArray getQuadratureMethod (const QuadratureMethod qt, const IntegrationOrder order) const;  returns the set of quadrature points associated with a given quadrature method and integration order More...;  ; std::set< QuadratureMethod > getQuadratureMethods () const;  returns all the indices corresponding to all available quadrature methods More...;  ; std::set< IntegrationOrder > getIntegrationOrders (const QuadratureMethod qt) const;  returns the quadrature integration orders available for a given method More...;  ; void addQuadratureMethod (const QuadratureMethod qt, const IntegrationOrder order, QuadraturePointArray qpa);  add a quadrature method in the map More...;  . Attribute details. ◆ quadratureMap. template<typename Real , int N> . std::map<QuadratureMethodKey, QuadraturePointArray> sofa::component::topology::container::dynamic::NumericalIntegrationDescriptor< Real, N >::quadratureMap. protected . Constructor details. ◆ NumericalIntegrationDescriptor(). template<typename Real , int N> . sofa::component::topology::container::dynamic::NumericalIntegrationDescriptor< R",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_numerical_integration_descriptor.html:1175,integrat,integration,1175,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_numerical_integration_descriptor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_numerical_integration_descriptor.html,1,['integrat'],['integration']
Deployability,"r< TDataTypes >::SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(SingleStateAccessor, TDataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< TDataTypes >; SOFA_CLASS(SOFA_TEMPLATE(OscillatorProjectiveConstraint, TDataTypes), SOFA_TEMPLATE(core::behavior::ProjectiveConstraintSet, TDataTypes))sofa::component::constraint::projective::OscillatorProjectiveConstraint< TDataTypes >; ProjectiveConstraintSet< TDataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ProjectiveConstraintSet, TDataTypes), BaseProjectiveConstraintSet, SOFA_TEMPLATE(SingleStateAccessor, TDataTypes))sofa::core::behavior::ProjectiveConstraintSet< TDataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::constraint::projective::OscillatorProjectiveConstraint< TDataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::constraint::projective::OscillatorProjectiveConstraint< TDataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseProjectiveConstraintSet() overridesofa::core::behavior::BaseProjectiveConstraintSetinlineprotected; ~OscillatorProjectiveConstraint() overridesofa::component::constraint::projective::OscillatorProjectiveConstraint< TDataTypes >; ~ProjectiveConstraintSet() overridesofa::core::b",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_oscillator_projective_constraint-members.html:16620,update,updateLinks,16620,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_oscillator_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_oscillator_projective_constraint-members.html,1,['update'],['updateLinks']
Deployability,"r< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(ExtrudeEdgesAndGenerateQuads, DataTypes), core::DataEngine)sofa::component::engine::generate::ExtrudeEdgesAndGenerateQuads< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::engine::generate::ExtrudeEdgesAndGenerateQuads< DataTypes >; VecCoord typedefsofa::component::engine::generate::ExtrudeEdgesAndGenerateQuads< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~ExtrudeEdgesAndGenerateQuads() overridesofa::component::engine::generate::ExtrudeEdgesAndGenerateQuads< DataTypes >inlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_edges_and_generate_quads-members.html:13608,update,updateInternal,13608,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_edges_and_generate_quads-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_edges_and_generate_quads-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"r< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(ExtrudeQuadsAndGenerateHexas, DataTypes), core::DataEngine)sofa::component::engine::generate::ExtrudeQuadsAndGenerateHexas< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::engine::generate::ExtrudeQuadsAndGenerateHexas< DataTypes >; VecCoord typedefsofa::component::engine::generate::ExtrudeQuadsAndGenerateHexas< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~ExtrudeQuadsAndGenerateHexas() overridesofa::component::engine::generate::ExtrudeQuadsAndGenerateHexas< DataTypes >inlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_quads_and_generate_hexas-members.html:13835,update,updateInternal,13835,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_quads_and_generate_hexas-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_quads_and_generate_hexas-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"r=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ d_flipNormals. Data<bool> sofa::component::topology::mapping::Hexa2QuadTopologicalMapping::d_flipNormals. protected . Flip Normal ? (Inverse point order when creating triangle) . ◆ flipNormals. sofa::core::objectmodel::RenamedData<bool> sofa::component::topology::mapping::Hexa2QuadTopologicalMapping::flipNormals. protected . Constructor details. ◆ Hexa2QuadTopologicalMapping(). sofa::component::topology::mapping::Hexa2QuadTopologicalMapping::Hexa2QuadTopologicalMapping ; (; ). protected . Constructor. . ◆ ~Hexa2QuadTopologicalMapping(). sofa::component::topology::mapping::Hexa2QuadTopologicalMapping::~Hexa2QuadTopologicalMapping ; (; ). overrideprotecteddefault . Destructor. ; Does nothing. . Function details. ◆ getFromIndex(). Index sofa::component::topology::mapping::Hexa2QuadTopologicalMapping::getFromIndex ; (; Index ; ind). overridevirtual . Reimplemented from sofa::core::topology::TopologicalMapping. ◆ init(). void sofa::component::topology::mapping::Hexa2QuadTopologicalMapping::init ; (; void ; ). overridevirtual . Initializes the target BaseTopology from the source BaseTopology. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_CLASS(). sofa::component::topology::mapping::Hexa2QuadTopologicalMapping::SOFA_CLASS ; (; Hexa2QuadTopologicalMapping ; , . sofa::core::topology::TopologicalMapping ;  . ). ◆ updateTopologicalMappingTopDown(). void sofa::component::topology::mapping::Hexa2QuadTopologicalMapping::updateTopologicalMappingTopDown ; (; ). overridevirtual . Translates the TopologyChange objects from the source to the target. ; Translates each of the TopologyChange objects waiting in the source list so that they have a meaning and reflect the effects of the first topology changes on the second topology. ; Implements sofa::core::topology::TopologicalMapping. sofacomponenttopologymappingHexa2QuadTopologicalMapping; Generated on Mon Nov 11 2024 03:10:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_hexa2_quad_topological_mapping.html:18072,update,updateTopologicalMappingTopDown,18072,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_hexa2_quad_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_hexa2_quad_topological_mapping.html,2,['update'],['updateTopologicalMappingTopDown']
Deployability,"r=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglIntVariable, OglVariable< int >)sofa::gl::component::shader::OglIntVariable; OglVariable< int >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglVariable, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglVariable< int >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglVariable< int >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglIntVariable()sofa::gl::component::shader::OglIntVariableinlinevirtual; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglVariable() overridesofa::gl::component::shader::OglVariable< int >inlineprotected; ~ShaderElement() overridesofa::core::visual::ShaderElementinlineprotected; ~VisualModel() overridesofa::core::visual::VisualModelinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_variable-members.html:13462,update,updateVisual,13462,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_variable-members.html,2,['update'],['updateVisual']
Deployability,"rElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglTexture2D, OglTexture)sofa::gl::component::shader::OglTexture2D; sofa::gl::component::shader::OglTexture::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglTexture, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglTexture; SPtr typedefsofa::core::objectmodel::Base; srgbColorspacesofa::gl::component::shader::OglTextureprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; texturesofa::gl::component::shader::OglTextureprotected; textureFilenamesofa::gl::component::shader::OglTextureprotected; textureUnitsofa::gl::component::shader::OglTextureprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; unbind()sofa::gl::component::shader::OglTexture; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglTexture() overridesofa::gl::component::shader::OglTextureprotected; ~OglTexture2D() overridesofa::gl::component::shader::OglTexture2D; ~ShaderElement() overridesofa::core::visual::ShaderElementinlineprotected; ~VisualModel() overridesofa::core::visual::VisualModelinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture2_d-members.html:14823,update,updateVisual,14823,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture2_d-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture2_d-members.html,4,['update'],['updateVisual']
Deployability,"rSecondaryPass, VisualManagerPass)sofa::gl::component::shader::VisualManagerSecondaryPass; sofa::gl::component::shader::VisualManagerPass::SOFA_CLASS(VisualManagerPass, core::visual::VisualManager)sofa::gl::component::shader::VisualManagerPass; sofa::core::visual::VisualManager::SOFA_CLASS(VisualManager, VisualModel)sofa::core::visual::VisualManager; sofa::core::visual::VisualModel::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; traceFullScreenQuad()sofa::gl::component::shader::VisualManagerSecondaryPassprotectedvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; unbindInput()sofa::gl::component::shader::VisualManagerSecondaryPass; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualManagerPass()sofa::gl::component::shader::VisualManagerPass; VisualManagerSecondaryPass()sofa::gl::component::shader::VisualManagerSecondaryPassprotected; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~VisualManager() overridesofa::core::visual::VisualManagerinlineprotected; ~VisualManagerPass() overridesofa::gl::component::shader::VisualManagerPass; ~VisualManagerSecondaryPass() overridesofa::gl::component::shader::VisualManagerSecondaryPassprotected; ~VisualModel() overridesofa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_visual_manager_secondary_pass-members.html:13801,update,updateVisual,13801,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_visual_manager_secondary_pass-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_visual_manager_secondary_pass-members.html,2,['update'],['updateVisual']
Deployability,"rTensorMassForceField< DataTypes >::f_youngModulus. protected . ◆ l_topology. template<class DataTypes > . SingleLink<TriangularTensorMassForceField<DataTypes>, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH | BaseLink::FLAG_STRONGLINK> sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::l_topology. protected . Link to be set to the topology container in the component graph. . ◆ lambda. template<class DataTypes > . Real sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::lambda. protected . ◆ m_topology. template<class DataTypes > . sofa::core::topology::BaseMeshTopology* sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::m_topology. protected . Pointer to the current topology. . ◆ mu. template<class DataTypes > . Real sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::mu. protected . first Lame coefficient . ◆ updateMatrix. template<class DataTypes > . bool sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::updateMatrix. protected . Constructor details. ◆ TriangularTensorMassForceField(). template<class DataTypes > . sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::TriangularTensorMassForceField. protected . second Lame coefficient . ◆ ~TriangularTensorMassForceField(). template<class DataTypes > . sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::~TriangularTensorMassForceField. protectedvirtual . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This add",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field.html:22969,update,updateMatrix,22969,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field.html,1,['update'],['updateMatrix']
Deployability,"raAroundVertex typedefsofa::core::topology::BaseMeshTopology; Tetrahedron typedefsofa::core::topology::Topology; TetrahedronID typedefsofa::core::topology::Topology; TetraID typedefsofa::core::topology::Topology; Topology()sofa::core::topology::Topologyinlineprotected; TopologyContainer()sofa::core::topology::TopologyContainerinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; unlinkTopologyHandlerToData(core::topology::TopologyHandler *topologyHandler, sofa::geometry::ElementType elementType) overridesofa::component::topology::container::dynamic::EdgeSetTopologyContainervirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecEdgeID typedefsofa::component::topology::container::dynamic::EdgeSetTopologyContainer; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseTopologyObject() overridesofa::core::topology::BaseTopologyObjectinlineprotected; ~EdgeSetTopologyContainer() overridesofa::component::topology::container::dynamic::EdgeSetTopologyContainerinlineprotected; ~PointSetTopologyContainer() override=defaultsofa::component::topology::container::dynamic::PointSetTopologyContainerpr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_topology_container-members.html:29624,update,updateLinks,29624,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_topology_container-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_topology_container-members.html,1,['update'],['updateLinks']
Deployability,"raAroundVertex typedefsofa::core::topology::BaseMeshTopology; Tetrahedron typedefsofa::core::topology::Topology; TetrahedronID typedefsofa::core::topology::Topology; TetraID typedefsofa::core::topology::Topology; Topology()sofa::core::topology::Topologyinlineprotected; TopologyContainer()sofa::core::topology::TopologyContainerinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; unlinkTopologyHandlerToData(core::topology::TopologyHandler *topologyHandler, sofa::geometry::ElementType elementType) overridesofa::component::topology::container::dynamic::QuadSetTopologyContainervirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecEdgeID typedefsofa::component::topology::container::dynamic::EdgeSetTopologyContainer; VecLink typedefsofa::core::objectmodel::Base; VecQuadID typedefsofa::component::topology::container::dynamic::QuadSetTopologyContainer; VecSlaves typedefsofa::core::objectmodel::BaseObject; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseTopologyObject() overridesofa::core::topology::BaseTopologyObjectinlineprotected; ~EdgeSetTopologyContainer() overridesofa::component::topology::container::dynamic::EdgeSetTopologyContainerinlineprotected; ~PointSetTopologyContainer() ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_topology_container-members.html:35005,update,updateLinks,35005,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_topology_container-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_topology_container-members.html,1,['update'],['updateLinks']
Deployability,"raAroundVertex typedefsofa::core::topology::BaseMeshTopology; Tetrahedron typedefsofa::core::topology::Topology; TetrahedronID typedefsofa::core::topology::Topology; TetraID typedefsofa::core::topology::Topology; Topology()sofa::core::topology::Topologyinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; Type enum namesofa::component::topology::container::grid::SparseGridTopology; UP enum valuesofa::component::topology::container::grid::SparseGridTopology; updateEdges()sofa::component::topology::container::grid::SparseGridTopologyprotectedvirtual; updateHexahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMesh()sofa::component::topology::container::grid::SparseGridTopology; updateQuads()sofa::component::topology::container::grid::SparseGridTopologyprotectedvirtual; updateTetrahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; UV typedefsofa::component::topology::container::constant::MeshTopology; UVID typedefsofa::component::topology::container::constant::MeshTopology; validHexahedrasofa::component::topology::container::constant::MeshTopologyprotected; validTetrahedrasofa::component::topology::container::constant::MeshTopologyprotected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; voxelizeTriangleMesh(helper::io::Mesh *mesh, sofa::core::sptr< RegularGridTopology > regularGrid, ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_topology-members.html:46112,update,updateInternal,46112,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_topology-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1grid_1_1_sparse_grid_topology-members.html,1,['update'],['updateInternal']
Deployability,"ramework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::topology::mapping::Quad2TriangleTopologicalMapping Class Reference . #include <Quad2TriangleTopologicalMapping.h>. Inheritance diagram for sofa::component::topology::mapping::Quad2TriangleTopologicalMapping:. [legend]; Detailed Description; This class, called Quad2TriangleTopologicalMapping, is a specific implementation of the interface TopologicalMapping where :; INPUT TOPOLOGY = QuadSetTopology OUTPUT TOPOLOGY = TriangleSetTopology, as the constitutive elements of the INPUT TOPOLOGY; Quad2TriangleTopologicalMapping class is templated by the pair (INPUT TOPOLOGY, OUTPUT TOPOLOGY) . Public Member Functions;  SOFA_CLASS (Quad2TriangleTopologicalMapping, sofa::core::topology::TopologicalMapping);  ; void init () override;  Initializes the target BaseTopology from the source BaseTopology. More...;  ; void updateTopologicalMappingTopDown () override;  Translates the TopologyChange objects from the source to the target. More...;  ; Index getFromIndex (Index ind) override;  ;  Public Member Functions inherited from sofa::core::topology::TopologicalMapping;  SOFA_ABSTRACT_CLASS (TopologicalMapping, objectmodel::BaseObject);  ; virtual void setTopologies (In *from, Out *to);  Specify the input and output models. More...;  ; void setPathInputObject (const std::string &o);  Set the path to the objects mapped in the scene graph. More...;  ; void setPathOutputObject (const std::string &o);  ; In * getFrom ();  Accessor to the INPUT topology of the TopologicalMapping : More...;  ; Out * getTo ();  Accessor to the OUTPUT topology of the TopologicalMapping : More...;  ; virtual void updateTopologicalMappingBottomUp ();  Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topology : More...;  ; virtual bool propagateFromInputToOutputModel ();  Return true if this mapping is able to propagate t",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_quad2_triangle_topological_mapping.html:1082,update,updateTopologicalMappingTopDown,1082,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_quad2_triangle_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_quad2_triangle_topological_mapping.html,1,['update'],['updateTopologicalMappingTopDown']
Deployability,rams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Remove an output from this node. More...;  ; const DDGLinkContainer & getInputs ();  Get the list of inputs for this DDGNode. More...;  ; const DDGLinkContainer & getOutputs ();  Get the list of outputs for this DDGNode. More...;  ; virtual void update ()=0;  Update this value. More...;  ; bool isDirty () const;  Returns true if the DDGNode needs to be updated. More...;  ; virtual void setDirtyValue ();  Indicate the value needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Additional Inherited Members;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Attribute details. ◆ m_dataTracker. DataTracker sofa::core::DataTrackerDDGNode::m_dataTracker. protected . Constructor details. ◆ DataTrackerDDGNode(). sofa::core::DataTrackerDDGNode:,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_d_d_g_node.html:2240,update,updated,2240,api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_d_d_g_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_d_d_g_node.html,1,['update'],['updated']
Deployability,"rationFactor() [1/2]. SReal sofa::component::odesolver::backward::EulerImplicitSolver::getSolutionIntegrationFactor ; (; int ; outputDerivative); const. overridevirtual . Given a solution of the linear system, how much will it affect the output derivative of the given order. ; Reimplemented from sofa::core::behavior::OdeSolver. ◆ getSolutionIntegrationFactor() [2/2]. SReal sofa::component::odesolver::backward::EulerImplicitSolver::getSolutionIntegrationFactor ; (; int ; outputDerivative, . SReal ; dt . ); const. ◆ getVelocityIntegrationFactor(). SReal sofa::component::odesolver::backward::EulerImplicitSolver::getVelocityIntegrationFactor ; (; ); const. inlineoverridevirtual . Given a displacement as computed by the linear system inversion, how much will it affect the velocity; This method is used to compute the compliance for contact corrections For Euler methods, it is typically dt. ; Reimplemented from sofa::core::behavior::OdeSolver. ◆ init(). void sofa::component::odesolver::backward::EulerImplicitSolver::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_CLASS2(). sofa::component::odesolver::backward::EulerImplicitSolver::SOFA_CLASS2 ; (; EulerImplicitSolver ; , . sofa::core::behavior::OdeSolver ; , . sofa::core::behavior::LinearSolverAccessor ;  . ). ◆ solve(). void sofa::component::odesolver::backward::EulerImplicitSolver::solve ; (; const core::ExecParams * ; , . SReal ; , . sofa::core::MultiVecCoordId ; , . sofa::core::MultiVecDerivId ;  . ). overridevirtual . Main computation method.; Specify and execute all computation for timestep integration, i.e. advancing the state from time t to t+dt, putting the resulting position and velocity in the provided vectors. ; Implements sofa::core::behavior::OdeSolver. sofacomponentodesolverbackwardEulerImplicitSolver; Generated on Mon Nov 11 2024 02:56:13 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_euler_implicit_solver.html:23315,integrat,integration,23315,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_euler_implicit_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_euler_implicit_solver.html,1,['integrat'],['integration']
Deployability,"rc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(AbstractTransformMatrixEngine, core::DataEngine)sofa::component::engine::transform::AbstractTransformMatrixEngine; sofa::core::DataEngine::SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(ScaleTransformMatrixEngine, AbstractTransformMatrixEngine)sofa::component::engine::transform::ScaleTransformMatrixEngine; sofa::component::engine::transform::AbstractTransformMatrixEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~AbstractTransformMatrixEngine() overridesofa::component::engine::transform::AbstractTransformMatrixEngineinlineprotected; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~ScaleTransformMatrixEngine() overridesofa::component::engine::transform::ScaleTransformMatrixEnginei",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_scale_transform_matrix_engine-members.html:12661,update,updateAllInputsIfDirty,12661,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_scale_transform_matrix_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_scale_transform_matrix_engine-members.html,1,['update'],['updateAllInputsIfDirty']
Deployability,"rc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(RandomPointDistributionInSurface, DataTypes), core::DataEngine)sofa::component::engine::generate::RandomPointDistributionInSurface< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; testDistance(Coord p)sofa::component::engine::generate::RandomPointDistributionInSurface< DataTypes >protected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; trianglesOctreesofa::component::engine::generate::RandomPointDistributionInSurface< DataTypes >protected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::engine::generate::RandomPointDistributionInSurface< DataTypes >; VecCoord typedefsofa::component::engine::generate::RandomPointDistributionInSurface< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_random_point_distribution_in_surface-members.html:14582,update,update,14582,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_random_point_distribution_in_surface-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_random_point_distribution_in_surface-members.html,1,['update'],['update']
Deployability,"rc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Index, sofa::Index)sofa::component::engine::transform::MapIndices< T >; SOFA_CLASS(SOFA_TEMPLATE(MapIndices, T), core::DataEngine)sofa::component::engine::transform::MapIndices< T >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Value typedefsofa::component::engine::transform::MapIndices< T >; VecData typedefsofa::core::objectmodel::Base; VecIndex typedefsofa::component::engine::transform::MapIndices< T >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecValue typedefsofa::component::engine::transform::MapIndices< T >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~MapIndices() overri",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_map_indices-members.html:12845,update,updateAllInputsIfDirty,12845,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_map_indices-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_map_indices-members.html,1,['update'],['updateAllInputsIfDirty']
Deployability,"rc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Vector3, sofa::type::Vec3)sofa::component::engine::generate::GenerateRigidMass< DataTypes, MassType >protected; SOFA_CLASS(GenerateRigidMass, core::DataEngine)sofa::component::engine::generate::GenerateRigidMass< DataTypes, MassType >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::engine::generate::GenerateRigidMass< DataTypes, MassType >protected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; volumesofa::component::engine::generate::GenerateRigidMass< DataTypes, MassType >protected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmode",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_rigid_mass-members.html:14266,update,update,14266,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_rigid_mass-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_rigid_mass-members.html,1,['update'],['update']
Deployability,"rce framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Signals |; Public Slots |; List of all members . sofa::gui::qt::LinkWidget Class Referenceabstract . #include <LinkWidget.h>; Abstract Interface of a qwidget which allows to edit a link. ; More... Inheritance diagram for sofa::gui::qt::LinkWidget:. [legend]; Detailed Description; Abstract Interface of a qwidget which allows to edit a link. . Classes; struct  CreatorArgument;  . Protected Attributes; core::objectmodel::BaseLink * baseLink;  ; bool dirty;  ; int counter;  . Public Member Functions;  LinkWidget (QWidget *parent, const char *, MyLink *l);  ;  ~LinkWidget () override;  ; virtual void setLink (MyLink *d);  ; const core::objectmodel::BaseLink * getBaseLink () const;  BaseLink pointer accessor function. More...;  ; core::objectmodel::BaseLink * getBaseLink ();  ; void updateVisibility ();  ; bool isDirty ();  ; virtual bool createWidgets ()=0;  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  . Static Public Member Functions; static LinkWidget * CreateLinkWidget (const LinkWidget::CreatorArgument &dwarg);  . Protected Member Functions; virtual void readFromLink ()=0;  The implementation of this method tells how the widget reads the value of the link. More...;  ; virtual void writeToLink ()=0;  . Signals; void WidgetDirty (bool);  ; void LinkOwnerDirty (bool);  ; void LinkBeingChanged ();  . Public Slots; void updateLinkValue ();  ; void updateWidgetValue ();  ; void setWidgetDirty ();  ; void setWidgetDirty (bool b);  . Attribute details. ◆ baseLink. core::objectmodel::BaseLink* sofa::gui::qt::LinkWidget::baseLink. protected . ◆ counter. int sofa::gui::qt::LinkWidget::counter. protected . ◆ dirty. bool sofa::gui::qt::LinkWidget::dirty. protected . Constructor details. ◆ LinkWidget(). ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_link_widget.html:1044,update,updateVisibility,1044,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_link_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_link_widget.html,2,['update'],['updateVisibility']
Deployability,"rceFactor) overridesofa::component::constraint::lagrangian::correction::LinearSolverConstraintCorrection< TDataTypes >virtual; reinit()sofa::core::objectmodel::BaseObjectvirtual; removeConstraintSolver(core::behavior::ConstraintSolver *s) overridesofa::core::behavior::ConstraintCorrection< TDataTypes >virtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; resetContactForce() overridesofa::component::constraint::lagrangian::correction::LinearSolverConstraintCorrection< TDataTypes >virtual; resetForUnbuiltResolution(SReal *f, std::list< unsigned int > &renumbering) overridesofa::component::constraint::lagrangian::correction::LinearSolverConstraintCorrection< TDataTypes >virtual; setConstraintDForce(SReal *df, int begin, int end, bool update) overridesofa::component::constraint::lagrangian::correction::LinearSolverConstraintCorrection< TDataTypes >virtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setMState(MechanicalState< DataTypes > *_mstate)sofa::core::behavior::ConstraintCorrection< TDataTypes >inline; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescrip",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_linear_solver_constraint_correction-members.html:16337,update,update,16337,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_linear_solver_constraint_correction-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_linear_solver_constraint_correction-members.html,1,['update'],['update']
Deployability,"rd &x0);  functions that depends on OutputType and must be specialized More...;  ; void mult (OutputType &out, const OutputType &inv, const Coord &x);  out = out * inv More...;  ; void setInverse (Rigid3Types::Coord &inv, const Coord &x0);  ; void mult (Rigid3Types::Coord &out, const Rigid3Types::Coord &inv, const Coord &x);  ; void setInverse (Mat4x4 &inv, const Coord &x0);  ; void mult (Mat4x4 &out, const Mat4x4 &inv, const Coord &x);  ; void setInverse (defaulttype::Rigid3Types::Coord &inv, const Coord &x0);  ; void mult (defaulttype::Rigid3Types::Coord &out, const defaulttype::Rigid3Types::Coord &inv, const Coord &x);  ; void setInverse (type::Mat4x4 &inv, const Coord &x0);  ; void mult (type::Mat4x4 &out, const type::Mat4x4 &inv, const Coord &x);  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_displacement_transform_engine.html:14809,update,update,14809,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_displacement_transform_engine.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_displacement_transform_engine.html,1,['update'],['update']
Deployability,"rd & ; f, . const VecCoord & ; p . ). protected . ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). overridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the sam",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field.html:34122,update,update,34122,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field.html,1,['update'],['update']
Deployability,"rd& sofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >::getX ; (; ); const. inline . ◆ init(). template<class DataTypes > . void sofa::component::collision::geometry::TriangleCollisionModel< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ resize(). template<class DataTypes > . void sofa::component::collision::geometry::TriangleCollisionModel< DataTypes >::resize ; (; sofa::Size ; s). overridevirtual . Set the number of elements. ; Reimplemented from sofa::core::CollisionModel. ◆ SOFA_CLASS(). template<class TDataTypes > . sofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >::SOFA_CLASS ; (; SOFA_TEMPLATE(TriangleCollisionModel< TDataTypes >, TDataTypes) ; , . core::CollisionModel ;  . ). ◆ updateFromTopology(). template<class DataTypes > . void sofa::component::collision::geometry::TriangleCollisionModel< DataTypes >::updateFromTopology. protectedvirtual . ◆ updateNormals(). template<class DataTypes > . void sofa::component::collision::geometry::TriangleCollisionModel< DataTypes >::updateNormals. protectedvirtual . ◆ velocity(). template<class DataTypes > . DataTypes::Deriv sofa::component::collision::geometry::TriangleCollisionModel< DataTypes >::velocity ; (; sofa::Index ; index); const. inline . Enum details. ◆ anonymous enum. template<class TDataTypes > . anonymous enum. EnumeratorNBARY . ◆ TriangleFlag. template<class TDataTypes > . enum sofa::component::collision::geometry::TriangleCollisionModel::TriangleFlag. EnumeratorFLAG_P1 Point 1 is attached to this triangle. . FLAG_P2 Point 2 is attached to this triangle. . FLAG_P3 Point 3 is attached to this triangle. . FLAG_E23 Edge 2-3 is attached to this triangle. . FLAG_E31 Edge 3-1 is attached to this triangle. . FLAG_E12 Edge 1-2 is attached to this triangle. . FLAG_BE23 Edge 2-3 is attached to this triangle and is",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model.html:31624,update,updateFromTopology,31624,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model.html,1,['update'],['updateFromTopology']
Deployability,"re the instance has been created This is useful to store where the component was emitted from . ◆ setInstanciationSourceFilePos(). void sofa::core::objectmodel::Base::setInstanciationSourceFilePos ; (; const int ; lineco). Set the file location (line number) where the instance has been created This is useful to store where the component was emitted from . ◆ setName() [1/2]. void sofa::core::objectmodel::Base::setName ; (; const std::string & ; n). Set the name of this object. . ◆ setName() [2/2]. void sofa::core::objectmodel::Base::setName ; (; const std::string & ; n, . int ; counter . ). Set the name of this object, adding an integer counter. . ◆ shortName(). template<class T > . static std::string sofa::core::objectmodel::Base::shortName ; (; const T * ; ptr = nullptr, . BaseObjectDescription * ; = nullptr . ). inlinestatic . Helper method to get the shortname of a type derived from this class. The default implementation return the class name.; This method should be used as follow : std::string type = Base::shortName<B>(); ; This way derived classes can redefine the shortName method . ◆ updateLinks(). void sofa::core::objectmodel::Base::updateLinks ; (; bool ; logErrors = true). virtual . Update pointers in case the pointed-to objects have appeared. . ◆ writeDatas() [1/2]. void sofa::core::objectmodel::Base::writeDatas ; (; std::map< std::string, std::string * > & ; str). Write the current field values to the given map of name -> value pairs. . ◆ writeDatas() [2/2]. void sofa::core::objectmodel::Base::writeDatas ; (; std::ostream & ; out, . const std::string & ; separator = "" "" . ). Write the current field values to the given output stream separated with the given separator ("" "" used by default for XML) . Related details. ◆ intrusive_ptr_add_ref. void intrusive_ptr_add_ref ; (; Base * ; p). friend . ◆ intrusive_ptr_release. void intrusive_ptr_release ; (; Base * ; p). friend . sofacoreobjectmodelBase; Generated on Mon Nov 11 2024 03:15:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html:27427,update,updateLinks,27427,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base.html,2,['update'],['updateLinks']
Deployability,"re whether the created widgets should be read-only. More...;  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  . Static Public Member Functions; template<class RealObject > ; static RealObject * create (RealObject *, CreatorArgument &arg);  ;  Static Public Member Functions inherited from sofa::gui::qt::DataWidget; template<class T > ; static T * create (T *, const CreatorArgument &arg);  ; static DataWidget * CreateDataWidget (const DataWidget::CreatorArgument &dwarg);  . Additional Inherited Members;  Protected Member Functions inherited from sofa::gui::qt::DataWidget; virtual void readFromData ()=0;  The implementation of this method tells how the widget reads the value of the data. More...;  ; virtual void writeToData ()=0;  ;  Signals inherited from sofa::gui::qt::DataWidget; void WidgetDirty (bool);  ; void DataOwnerDirty (bool);  ; void dataValueChanged (QString dataValueString);  ;  Public Slots inherited from sofa::gui::qt::DataWidget; void updateDataValue ();  ; void updateWidgetValue ();  ; void setWidgetDirty (bool b=true);  ; void fillFromData ();  . Attribute details. ◆ Tdata. template<class T > . MyTData* sofa::gui::qt::TDataWidget< T >::Tdata. protected . Constructor details. ◆ TDataWidget(). template<class T > . sofa::gui::qt::TDataWidget< T >::TDataWidget ; (; QWidget * ; parent, . const char * ; name, . MyTData * ; d . ). inline . Function details. ◆ create(). template<class T > . template<class RealObject > . static RealObject* sofa::gui::qt::TDataWidget< T >::create ; (; RealObject * ; , . CreatorArgument & ; arg . ). inlinestatic . ◆ getData() [1/2]. template<class T > . sofa::core::objectmodel::Data<T>* sofa::gui::qt::TDataWidget< T >::getData ; (; ). inline . Accessor function. Gives you the actual data instead of a BaseData pointer of it like in getBaseData(). . ◆ getData() [2/2]. template<class T > . const sofa::core::objectmodel::Da",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_t_data_widget.html:3457,update,updateDataValue,3457,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_t_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_t_data_widget.html,4,['update'],"['updateDataValue', 'updateWidgetValue']"
Deployability,"re...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::core::behavior::BaseProjectiveConstraintSet;  BaseProjectiveConstraintSet ();  ;  ~BaseProjectiveConstraintSet () override;  ;  Protected Member Functions inherited from sofa::core::behavior::StateAccessor;  StateAccessor ();  ;  ~StateAccessor () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base (",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_projective_constraint_set.html:14660,update,update,14660,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_projective_constraint_set.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_projective_constraint_set.html,1,['update'],['update']
Deployability,"re...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  Pipeline ();  ;  ~Pipeline () override;  ; virtual void doCollisionReset ()=0;  Remove collision response from last step. More...;  ; virtual void doCollisionDetection (const sofa::type::vector< core::CollisionModel * > &collisionModels)=0;  Detect new collisions. Note that this step must not modify the simulation graph. More...;  ; virtual void doCollisionResponse ()=0;  Add collision response in the simulation graph. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline.html:11840,update,update,11840,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline.html,1,['update'],['update']
Deployability,"re...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  SphereLoader ();  ;  Protected Member Functions inherited from sofa::core::loader::BaseLoader;  BaseLoader ();  ;  ~BaseLoader () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_sphere_loader.html:12058,update,update,12058,api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_sphere_loader.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_sphere_loader.html,1,['update'],['update']
Deployability,"re...;  ; void bwdDraw (core::visual::VisualParams *) override;  Called after objects in the current branch are displayed. More...;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void drawTransparent (const VisualParams *);  Display transparent surfaces. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const type::Quat< SReal >);  ; virtual void applyScale (const SReal, const SReal, const SReal);  ; virtual void exportOBJ (std::string, std::ostream *, std::ostream *, sofa::Index &, sofa::Index &, sofa::Index &, int &);  Append this mesh to an OBJ format stream. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render in",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_clip_plane.html:4187,update,update,4187,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_clip_plane.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_clip_plane.html,1,['update'],['update']
Deployability,"re...;  ;  Public Member Functions inherited from sofa::core::visual::VisualModel;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void fwdDraw (VisualParams *);  Called before objects in the current branch are displayed. More...;  ; virtual void bwdDraw (VisualParams *);  Called after objects in the current branch are displayed. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const type::Quat< SReal >);  ; virtual void applyScale (const SReal, const SReal, const SReal);  ; virtual void exportOBJ (std::string, std::ostream *, std::ostream *, sofa::Index &, sofa::Index &, sofa::Index &, int &);  Append this mesh to an OBJ format stream. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render in",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual3_d_text.html:3479,update,update,3479,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual3_d_text.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual3_d_text.html,3,['update'],['update']
Deployability,"re.frag"";  ; static const std::string PATH_TO_BLUR_TEXTURE_VERTEX_SHADER = ""shaders/softShadows/VSM/blur_texture.vert"";  ; static const std::string PATH_TO_BLUR_TEXTURE_FRAGMENT_SHADER = ""shaders/softShadows/VSM/blur_texture.frag"";  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Protected Member Functions inherited from sofa::gl::component::shader::Light; void computeShadowMapSize ();  ; void blurDepthTexture ();  ;  Light ();  ;  ~Light () override;  ;  Protected Member Functions inherited from sofa::core::visual::VisualModel;  VisualModel ();  ;  ~VisualModel () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_directional_light.html:17347,update,update,17347,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_directional_light.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_directional_light.html,5,['update'],['update']
Deployability,"re::State< TDataTypes >; SOFA_CLASS2(VisualModelImpl, core::visual::VisualModel, sofa::core::visual::VisualState< defaulttype::Vec3Types >)sofa::component::visual::VisualModelImpl; sourceFactorsofa::gl::component::rendering3d::OglModelprotected; SPtr typedefsofa::core::objectmodel::Base; srgbTexturingsofa::component::visual::VisualModelImpl; State()sofa::core::State< TDataTypes >protected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; texsofa::gl::component::rendering3d::OglModelprotected; TexCoord typedefsofa::component::visual::VisualModelImpl; texturenamesofa::component::visual::VisualModelImpl; texturessofa::gl::component::rendering3d::OglModelprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; trianglesRevisionsofa::gl::component::rendering3d::OglModelprotected; update()sofa::gl::component::rendering3d::MergeVisualModelsinlineprotected; updateBuffers() overridesofa::gl::component::rendering3d::OglModelvirtual; updateEdgesIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateQuadsIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateTrianglesIndicesBuffer()sofa::gl::component::rendering3d::OglModel; updateVertexBuffer()sofa::gl::component::rendering3d::OglModel; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; useEdgessofa::gl::component::rendering3d::OglModelprotected; useQuadssofa::gl::component::rendering3d::OglModelprotected; useTopologysofa::component::visual::VisualModelImpl; useTrianglessofa::gl::component::rendering3d::OglModelprotected; vbosofa::gl::component::rendering3d::OglModelprotected; VBOGenDonesofa::gl::component::rendering3d::OglModelprotected; Vec3Real typedefsofa::component::visual::VisualModelImpl; VecCoord typedefsofa::component::visual::VisualModelImpl; VecData ty",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models-members.html:27389,update,updateEdgesIndicesBuffer,27389,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models-members.html,1,['update'],['updateEdgesIndicesBuffer']
Deployability,"re::behavior::SingleStateAccessor::SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(QuadularBendingSprings, DataTypes), SOFA_TEMPLATE(core::behavior::ForceField, DataTypes))sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >; ForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMatrixsofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >protected; VecCoord typedefsofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ForceField() overridesofa::core::behavior::ForceField< DataTypes >protected; ~QuadularBendingSprings()sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >; ~SingleState",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs-members.html:18405,update,updateMatrixsofa,18405,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs-members.html,1,['update'],['updateMatrixsofa']
Deployability,"re::behavior::SingleStateAccessor::SOFA_ABSTRACT_CLASS(SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor)sofa::core::behavior::SingleStateAccessor< DataTypes >; SOFA_CLASS(SOFA_TEMPLATE(TorsionForceField, DataTypes), SOFA_TEMPLATE(sofa::core::behavior::ForceField, DataTypes))sofa::component::mechanicalload::TorsionForceField< DataTypes >; ForceField< DataTypes >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ForceField, DataTypes), BaseForceField, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ForceField< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; TorsionForceField()sofa::component::mechanicalload::TorsionForceField< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::mechanicalload::TorsionForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::mechanicalload::TorsionForceField< DataTypes >; VecId typedefsofa::component::mechanicalload::TorsionForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavior::BaseForceFieldprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ForceField() overridesofa::core::behavior::ForceField< DataTypes >protected; ~SingleStateAccessor() override=defaultsofa::core::behavior::SingleStateAccessor< DataTyp",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field-members.html:16755,update,updateLinks,16755,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field-members.html,1,['update'],['updateLinks']
Deployability,"re::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseAddResourceRepository, sofa::core::objectmodel::BaseObject)sofa::component::sceneutility::BaseAddResourceRepository; SOFA_CLASS(AddDataRepository, BaseAddResourceRepository)sofa::component::sceneutility::AddDataRepository; sofa::component::sceneutility::BaseAddResourceRepository::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateRepositoryPath()sofa::component::sceneutility::BaseAddResourceRepository; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseAddResourceRepository() overridesofa::component::sceneutility::BaseAddResourceRepositoryprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_add_data_repository-members.html:10284,update,updateInternal,10284,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_add_data_repository-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_add_data_repository-members.html,3,['update'],"['updateInternal', 'updateLinks', 'updateRepositoryPath']"
Deployability,"re::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(ConstraintAttachButtonSetting, MouseButtonSetting)sofa::gui::component::ConstraintAttachButtonSetting; sofa::component::setting::MouseButtonSetting::SOFA_CLASS(MouseButtonSetting, core::objectmodel::ConfigurationSetting)sofa::component::setting::MouseButtonSetting; sofa::core::objectmodel::ConfigurationSetting::SOFA_CLASS(ConfigurationSetting, BaseObject)sofa::core::objectmodel::ConfigurationSetting; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~ConfigurationSetting() overridesofa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_constraint_attach_button_setting-members.html:10041,Configurat,ConfigurationSetting,10041,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_constraint_attach_button_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_constraint_attach_button_setting-members.html,1,['Configurat'],['ConfigurationSetting']
Deployability,"re::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; ShaderElement()sofa::core::visual::ShaderElementinlineprotected; ShaderElementType enum namesofa::core::visual::ShaderElement; shaderssofa::gl::component::shader::OglShaderElementprotected; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglShaderMacro, OglShaderElement)sofa::gl::component::shader::OglShaderMacro; sofa::gl::component::shader::OglShaderElement::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglShaderMacro() overridesofa::gl::component::shader::OglShaderMacroprotected; ~ShaderElement() overridesofa::core::visual::ShaderElementinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader_macro-members.html:11213,update,updateInternal,11213,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader_macro-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader_macro-members.html,4,['update'],"['updateInternal', 'updateLinks']"
Deployability,"re::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(IndexValueMapper, DataTypes), sofa::core::DataEngine)sofa::component::engine::transform::IndexValueMapper< DataTypes >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::engine::transform::IndexValueMapper< DataTypes >; VecCoord typedefsofa::component::engine::transform::IndexValueMapper< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~IndexValueMapper() overridesofa::component::engine::transform::IndexValueMapper< DataTypes >inlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_index_value_mapper-members.html:12804,update,updateIfDirty,12804,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_index_value_mapper-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_index_value_mapper-members.html,3,['update'],"['updateIfDirty', 'updateInternal', 'updateLinks']"
Deployability,"re::objectmodel::BaseData * getBaseData ();  ; void updateVisibility ();  ; bool isDirty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  . Protected Member Functions; virtual void readFromData ();  The implementation of this method tells how the widget reads the value of the data. More...;  ; virtual void writeToData ();  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  . Additional Inherited Members;  Static Public Member Functions inherited from sofa::gui::qt::TDataWidget< sofa::core::visual::DisplayFlags >; static RealObject * create (RealObject *, CreatorArgument &arg);  ;  Static Public Member Functions inherited from sofa::gui::qt::DataWidget; template<class T > ; static T * create (T *, const CreatorArgument &arg);  ; static DataWidget * CreateDataWidget (const DataWidget::CreatorArgument &dwarg);  ;  Signals inherited from sofa::gui::qt::DataWidget; void WidgetDirty (bool);  ; void DataOwnerDirty (bool);  ; void dataValueChanged (QString dataValueString);  ;  Public Slots inherited from sofa::gui::qt::DataWidget; void updateDataValue ();  ; void updateWidgetValue ();  ; void setWidgetDirty (bool b=true);  ; void fillFromData ();  . Attribute details. ◆ flags. DisplayFlagWidget* sofa::gui::qt::DisplayFlagsDataWidget::flags. protected . ◆ isRoot. bool sofa::gui::qt::DisplayFlagsDataWidget::isRoot. protected . Constructor details. ◆ DisplayFlagsDataWidget(). sofa::gui::qt::DisplayFlagsDataWidget::DisplayFlagsDataWidget ; (; QWidget * ; parent, . const char * ; name, . core::objectmodel::Data< DisplayFlags > * ; data, . bool ; root = false . ). inline . Function details. ◆ createWidgets(). bool sofa::gui::qt::DisplayFlagsDataWidget::createWidgets ; (; ). virtual . The implementation of this method holds the widget creation and the s",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_display_flags_data_widget.html:3273,update,updateDataValue,3273,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_display_flags_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_display_flags_data_widget.html,4,['update'],"['updateDataValue', 'updateWidgetValue']"
Deployability,"re::objectmodel::Contextvirtual; setTopology(BaseObject *)sofa::core::objectmodel::BaseContextinlinevirtual; shaderssofa::simulation::Node; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; Single typedefsofa::simulation::Node; SOFA_ABSTRACT_CLASS(BaseNode, Base)sofa::core::objectmodel::BaseNode; SOFA_ABSTRACT_CLASS2(Node, BaseNode, Context)sofa::simulation::Node; SOFA_CLASS(DAGNode, simulation::Node)sofa::simulation::graph::DAGNode; sofa::simulation::Node::SOFA_CLASS(Context, BaseContext)sofa::core::objectmodel::Context; sofa::core::objectmodel::BaseContext::SOFA_CLASS(BaseContext, Base)sofa::core::objectmodel::BaseContext; solversofa::simulation::Node; SPtr typedefsofa::core::objectmodel::Base; statesofa::simulation::Node; StatusMap typedefsofa::simulation::graph::DAGNodeprotected; time_sofa::core::objectmodel::Context; topologysofa::simulation::Node; topologyObjectsofa::simulation::Node; unsortedsofa::simulation::Node; updateContext() overridesofa::simulation::graph::DAGNodevirtual; updateDescendancy()sofa::simulation::graph::DAGNodeprotected; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateSimulationContext() overridesofa::simulation::graph::DAGNodevirtual; updateVisualContext()sofa::simulation::Nodevirtual; Vec3 typedefsofa::core::objectmodel::BaseContext; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VISITED enum valuesofa::simulation::graph::DAGNodeprotected; VisitedStatus enum namesofa::simulation::graph::DAGNodeprotected; visualLoopsofa::simulation::Node; visualManagersofa::simulation::Node; visualModelsofa::simulation::Node; worldGravity_sofa::core::objectmodel::Context; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseContext() overridesofa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html:22736,update,updateContext,22736,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html,2,['update'],['updateContext']
Deployability,"re::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_ABSTRACT_CLASS (VisualModel, objectmodel::BaseObject);  ; virtual void drawVisual (const VisualParams *) final;  Display the VisualModel object. More...;  ; void initVisual (const VisualParams *);  Initialize the textures, or other graphical resources. More...;  ; virtual void initVisual () final;  ; void updateVisual (const VisualParams *);  used to update the model if necessary. More...;  ; virtual void updateVisual () final;  ; virtual void clearVisual ();  clear some graphical resources (generally called before the deleteVisitor). More...;  ; virtual void fwdDraw (VisualParams *);  Called before objects in the current branch are displayed. More...;  ; virtual void bwdDraw (VisualParams *);  Called after objects in the current branch are displayed. More...;  ; virtual void drawTransparent (const VisualParams *);  Display transparent surfaces. More...;  ; virtual void drawShadow (const VisualParams *vparams);  Display shadow-casting surfaces. More...;  ; virtual void parallelUpdateVisual ();  used to update the model if necessary. More...;  ; virtual bool addBBox (SReal *, SReal *);  used to add the bounding-box of this visual model to the given bounding box in order to compute the scene bounding box or cull hidden objects. More...;  ; virtual void applyTranslation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const SReal, const SReal, const SReal);  ; virtual void applyRotation (const type::Quat< SReal >);  ; virt",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_model.html:2357,update,updateVisual,2357,api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_model.html,1,['update'],['updateVisual']
Deployability,"re::topology::BaseMeshTopology; TetrahedraAroundTriangle typedefsofa::core::topology::BaseMeshTopology; TetrahedraAroundVertex typedefsofa::core::topology::BaseMeshTopology; Tetrahedron typedefsofa::core::topology::Topology; TetrahedronID typedefsofa::core::topology::Topology; TetraID typedefsofa::core::topology::Topology; Topology()sofa::core::topology::Topologyinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; updateEdges()sofa::component::topology::container::constant::CubeTopologyprotected; updateHexahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updatePoints()sofa::component::topology::container::constant::CubeTopologyprotected; updateQuads()sofa::component::topology::container::constant::CubeTopologyprotected; updateTetrahedra()sofa::component::topology::container::constant::MeshTopologyvirtual; UV typedefsofa::component::topology::container::constant::MeshTopology; UVID typedefsofa::component::topology::container::constant::MeshTopology; validHexahedrasofa::component::topology::container::constant::MeshTopologyprotected; validTetrahedrasofa::component::topology::container::constant::MeshTopologyprotected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_cube_topology-members.html:38145,update,updateLinks,38145,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_cube_topology-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_cube_topology-members.html,2,['update'],['updateLinks']
Deployability,"re::visual::VisualModel::initVisual ; (; ). finalvirtual . ◆ initVisual() [2/2]. void sofa::core::visual::VisualModel::initVisual ; (; const VisualParams * ; vparams). Initialize the textures, or other graphical resources. ; Called once before the first frame is drawn, and if the graphical context has been recreated. . ◆ insertInNode(). bool sofa::core::visual::VisualModel::insertInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can insert itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was inserted ; Reimplemented from sofa::core::objectmodel::BaseObject.; Reimplemented in sofa::gl::component::shader::OglShader, sofa::gl::component::rendering3d::OglCylinderModel, and sofa::gl::component::rendering3d::DataDisplay. ◆ parallelUpdateVisual(). virtual void sofa::core::visual::VisualModel::parallelUpdateVisual ; (; ). inlinevirtual . used to update the model if necessary. . ◆ removeInNode(). bool sofa::core::visual::VisualModel::removeInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can remove itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was removed ; Reimplemented from sofa::core::objectmodel::BaseObject.; Reimplemented in sofa::gl::component::shader::OglShader, sofa::gl::component::rendering3d::OglCylinderModel, and sofa::gl::component::rendering3d::DataDisplay. ◆ SOFA_ABSTRACT_CLASS(). sofa::core::visual::VisualModel::SOFA_ABSTRACT_CLASS ; (; VisualModel ; , . objectmodel::BaseObject ;  . ). ◆ updateVisual() [1/2]. void sofa::core::visual::VisualModel::updateVisual ; (; ). finalvirtual . ◆ updateVisual() [2/2]. void sofa::core::visual::VisualModel::updateVisual ; (; const VisualParams * ; vparams). used to update the model if necessary. . sofacorevisualVisualModel; Generated on Mon Nov 11 2024 03:16:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_model.html:24295,update,updateVisual,24295,api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_model.html,5,['update'],"['update', 'updateVisual']"
Deployability,"reForceField. overrideprotected . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::mechanicalload::OscillatingTorsionPressureForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::mechanicalload::OscillatingTorsionPressureForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ buildDampingMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::OscillatingTorsionPressureForceField< DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; ). finalvirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ buildStiffnessMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::OscillatingTorsionPressureForceField< DataTypes >::buildStiffnessMatrix ; (; core::behavior::StiffnessMatrix * ; matrix). overridevirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ draw(). template<class DataTypes > . void sofa::component::mechanicalload::OscillatingTorsionPressureForceField< DataTypes >::draw ; (; const core::visual::Visua",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_oscillating_torsion_pressure_force_field.html:28904,update,update,28904,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_oscillating_torsion_pressure_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_oscillating_torsion_pressure_force_field.html,1,['update'],['update']
Deployability,"reResetState()sofa::core::objectmodel::BaseObjectvirtual; StrainDisplacementTransposed typedefsofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >; TetrahedralCorotationalFEMForceField()sofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >protected; tetrahedronInfosofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >; toLameParameters(_2DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; toLameParameters(_3DMaterials, Real youngModulus, Real poissonRatio)sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >static; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Transformation typedefsofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecReal typedefsofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >; VecSlaves typedefsofa::core::objectmodel::BaseObject; Vector typedefsofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseForceField() override=defaultsofa::core::behavi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedral_corotational_f_e_m_force_field-members.html:28576,update,updateInternal,28576,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedral_corotational_f_e_m_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedral_corotational_f_e_m_force_field-members.html,1,['update'],['updateInternal']
Deployability,"reate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ collisionSteps. sofa::core::objectmodel::RenamedData<int> sofa::component::animationloop::MultiStepAnimationLoop::collisionSteps. ◆ d_collisionSteps. Data<int> sofa::component::animationloop::MultiStepAnimationLoop::d_collisionSteps. number of collision steps between each frame rendering . ◆ d_integrationSteps. Data<int> sofa::component::animationloop::MultiStepAnimationLoop::d_integrationSteps. number of integration steps between each collision detection . ◆ integrationSteps. sofa::core::objectmodel::RenamedData<int> sofa::component::animationloop::MultiStepAnimationLoop::integrationSteps. Constructor details. ◆ MultiStepAnimationLoop(). sofa::component::animationloop::MultiStepAnimationLoop::MultiStepAnimationLoop ; (; ). protected . ◆ ~MultiStepAnimationLoop(). sofa::component::animationloop::MultiStepAnimationLoop::~MultiStepAnimationLoop ; (; ). overrideprotected . Function details. ◆ SOFA_CLASS(). sofa::component::animationloop::MultiStepAnimationLoop::SOFA_CLASS ; (; MultiStepAnimationLoop ; , . sofa::simulation::CollisionAnimationLoop ;  . ). ◆ step(). void sofa::component::animationloop::MultiStepAnimationLoop::step ; (; const sofa::core::ExecParams * ; params, . SReal ; dt . ). overridevirtual . Main computation method.; Specify and execute all computations for computing a timestep, such as one or more collisions and integrations stages. ; Implements sofa::core::behavior::BaseAnimationLoop. sofacomponentanimationloopMultiStepAnimationLoo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_multi_step_animation_loop.html:15659,integrat,integrationSteps,15659,api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_multi_step_animation_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_multi_step_animation_loop.html,1,['integrat'],['integrationSteps']
Deployability,"recatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (Hexa2TetraTopologicalMapping, sofa::core::topology::TopologicalMapping);  ; void init () override;  Initializes the target BaseTopology from the source BaseTopology. More...;  ; void updateTopologicalMappingTopDown () override;  Translates the TopologyChange objects from the source to the target. More...;  ; Index getFromIndex (Index ind) override;  ;  Public Member Functions inherited from sofa::core::topology::TopologicalMapping;  SOFA_ABSTRACT_CLASS (TopologicalMapping, objectmodel::BaseObject);  ; virtual void setTopologies (In *from, Out *to);  Specify the input and output models. More...;  ; void setPathInputObject (const std::string &o);  Set the path to the objects mapped in the scene graph. More...;  ; void setPathOutputObject (const std::string &o);  ; In * getFrom ();  Accessor to the INPUT topology of the TopologicalMapping : More...;  ; Out * getTo ();  Accessor to the OUTPUT topology of the TopologicalMapping : More...;  ; virtual void updateTopologicalMappingBottomUp ();  Method called at each topological changes propagation which comes from the OUTPUT topology to adapt the INPUT topology : More...;  ; virtual bool propagateFromInputToOutputModel ();  Return true if this mapping is able to propagate t",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_hexa2_tetra_topological_mapping.html:2648,update,updateTopologicalMappingTopDown,2648,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_hexa2_tetra_topological_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_hexa2_tetra_topological_mapping.html,1,['update'],['updateTopologicalMappingTopDown']
Deployability,"red. (i.e number of stepData info stored) More...;  ; SReal m_maxFps;  Bigger step encountered in ms. More...;  ; SReal m_fpsMaxAxis;  Current Y max value of the graph (max ms encountered x1.1) More...;  ; std::deque< AnimationStepData * > m_profilingData;  Buffer of. More...;  ; QLineSeries * m_series;  Series of step duration in ms to be plot on the graph. size =. More...;  ; QLineSeries * m_selectionSeries;  Series of selection substep duration in ms to be plot on the graph. size =. More...;  ; std::unordered_map< std::string, CheckedSeries > m_checkedSeries;  ; std::string m_selectedStep;  Name of the substep selected in the Tree. More...;  ; std::string m_selectedParentStep;  Name of the parent of the substep selected in the Tree. More...;  . Public Member Functions;  SofaWindowProfiler (QWidget *parent);  ; void activateATimer (bool activate);  method called when window is shown to activate AdvancedTimer recording. More...;  ; void pushStepData ();  main method to iterate on the AdvancedTimer Data and update the info in the widgets More...;  ; void resetGraph ();  Method to clear all Data and reset graph. More...;  . Protected Member Functions; void createChart ();  Method called at creation to init the chart. More...;  ; void createTreeView ();  Method called at creation to init the QTreeWidget. More...;  ; void updateChart ();  Method called at each iteration to update the chart. More...;  ; QTreeWidgetItem * addTreeItem (AnimationSubStepData *subStep);  Method to add new QTreeWidgetItem item inside the QTreeWidget using the data from. More...;  ; QTreeWidgetItem * addTreeItem (const AnimationStepData *step);  . Signals; void closeWindow (bool);  . Public Slots; void closeEvent (QCloseEvent *) override;  ; void updateFromSelectedStep (int step);  Method to update all widgets from select absisse on the graph. More...;  ; void updateSummaryLabels (int step);  Method called when a given. More...;  ; void updateTree (int step);  Method called when a given. More..",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_window_profiler.html:3219,update,update,3219,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_window_profiler.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_sofa_window_profiler.html,2,['update'],['update']
Deployability,"rementalPotentialEnergy. SReal sofa::component::odesolver::backward::VariationalSymplecticSolver::m_incrementalPotentialEnergy. protected . ◆ pID. sofa::core::MultiVecDerivId sofa::component::odesolver::backward::VariationalSymplecticSolver::pID. protected . Constructor details. ◆ VariationalSymplecticSolver(). sofa::component::odesolver::backward::VariationalSymplecticSolver::VariationalSymplecticSolver ; (; ). Function details. ◆ getIntegrationFactor(). SReal sofa::component::odesolver::backward::VariationalSymplecticSolver::getIntegrationFactor ; (; int ; , . int ;  . ); const. inlineoverridevirtual . Given an input derivative order (0 for position, 1 for velocity, 2 for acceleration), how much will it affect the output derivative of the given order.; This method is used to compute the constraint corrections and adapt the resolution if using baumgart type scheme For example, a backward-Euler dynamic implicit integrator would use: Input: x_t v_t a_{t+dt} x_{t+dt} 1 dt dt^2 v_{t+dt} 0 1 dt; If the linear system is expressed on s = a_{t+dt} dt, then the final factors are: Input: x_t v_t a_t s x_{t+dt} 1 dt 0 dt v_{t+dt} 0 1 0 1 a_{t+dt} 0 0 0 1/dt The last column is returned by the getSolutionIntegrationFactor method.; FF: What is the meaning of the parameters ? ; Reimplemented from sofa::core::behavior::OdeSolver. ◆ getPositionIntegrationFactor(). SReal sofa::component::odesolver::backward::VariationalSymplecticSolver::getPositionIntegrationFactor ; (; ); const. inlineoverridevirtual . Given a displacement as computed by the linear system inversion, how much will it affect the position; This method is used to compute the compliance for contact corrections For Euler methods, it is typically dt². ; Reimplemented from sofa::core::behavior::OdeSolver. ◆ getSolutionIntegrationFactor(). SReal sofa::component::odesolver::backward::VariationalSymplecticSolver::getSolutionIntegrationFactor ; (; int ; ); const. inlineoverridevirtual . Given a solution of the linear system, h",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html:21647,integrat,integrator,21647,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver.html,1,['integrat'],['integrator']
Deployability,"removeInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseController, core::objectmodel::BaseObject)sofa::core::behavior::BaseController; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_controller-members.html:9636,update,updateInternal,9636,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_controller-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_controller-members.html,2,['update'],"['updateInternal', 'updateLinks']"
Deployability,"rent of this node. ; Implements sofa::core::objectmodel::BaseNode. ◆ initVisualContext(). void sofa::simulation::graph::DAGNode::initVisualContext ; (; ). overridevirtual . Called during initialization to correctly propagate the visual context to the children. ; Reimplemented from sofa::simulation::Node. ◆ moveChild(). void sofa::simulation::graph::DAGNode::moveChild ; (; BaseNode::SPtr ; node). overridevirtual . Move a node in this from another node. ; Implements sofa::simulation::Node. ◆ precomputeTraversalOrder(). void sofa::simulation::graph::DAGNode::precomputeTraversalOrder ; (; const sofa::core::ExecParams * ; params). overridevirtual . compute the traversal order from this Node ; Reimplemented from sofa::simulation::Node. ◆ setDirtyDescendancy(). void sofa::simulation::graph::DAGNode::setDirtyDescendancy ; (; ). protected . bottom-up traversal removing descendancy . ◆ SOFA_CLASS(). sofa::simulation::graph::DAGNode::SOFA_CLASS ; (; DAGNode ; , . simulation::Node ;  . ). ◆ updateContext(). void sofa::simulation::graph::DAGNode::updateContext ; (; ). overridevirtual . Update the whole context values, based on parent and local ContextObjects. ; Reimplemented from sofa::simulation::Node. ◆ updateDescendancy(). void sofa::simulation::graph::DAGNode::updateDescendancy ; (; ). protected . traversal updating the descendancy . ◆ updateSimulationContext(). void sofa::simulation::graph::DAGNode::updateSimulationContext ; (; ). overridevirtual . Update the simulation context values(gravity, time...), based on parent and local ContextObjects. ; Reimplemented from sofa::simulation::Node. Enum details. ◆ VisitedStatus. enum sofa::simulation::graph::DAGNode::VisitedStatus. protected . traversal flags . EnumeratorNOT_VISITED ; VISITED ; PRUNED . Related details. ◆ GetDownObjectsVisitor. friend class GetDownObjectsVisitor. friend . ◆ GetUpObjectsVisitor. friend class GetUpObjectsVisitor. friend . sofasimulationgraphDAGNode; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:40762,update,updateContext,40762,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,2,['update'],['updateContext']
Deployability,ress values. . ◆ d_showVonMisesStressPerElement. template<class DataTypes > . Data<bool> sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::d_showVonMisesStressPerElement. draw triangles showing vonMises stress interpolated in elements . ◆ d_showVonMisesStressPerNode. template<class DataTypes > . Data<bool> sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::d_showVonMisesStressPerNode. draw points showing vonMises stress interpolated in nodes . ◆ d_showVonMisesStressPerNodeColorMap. template<class DataTypes > . Data<bool> sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::d_showVonMisesStressPerNodeColorMap. draw elements showing vonMises stress interpolated in nodes . ◆ d_updateStiffness. template<class DataTypes > . Data<bool> sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::d_updateStiffness. update structures (precomputed in init) using stiffness parameters in each iteration (set listening=1) . ◆ d_updateStiffnessMatrix. template<class DataTypes > . Data<bool> sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::d_updateStiffnessMatrix. ◆ d_vonMisesPerElement. template<class DataTypes > . Data<type::vector<Real> > sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::d_vonMisesPerElement. von Mises Stress per element . ◆ d_vonMisesPerNode. template<class DataTypes > . Data<type::vector<Real> > sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::d_vonMisesPerNode. von Mises Stress per node . ◆ d_vonMisesStressColors. template<class DataTypes > . Data<type::vector<type::RGBAColor> > sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::d_vonMisesStressColors. Vector of colors describing the VonMises stress. . ◆ data. template<class DataTypes > . TetrahedronFEMForceFieldInternalData<DataTypes> sofa,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedron_f_e_m_force_field.html:41538,update,update,41538,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedron_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedron_f_e_m_force_field.html,1,['update'],['update']
Deployability,"return ""d"". . ◆ GetFileName(). std::string sofa::helper::system::SetDirectory::GetFileName ; (; const char * ; filename). static . Get the filename from an absolute path description, i.e. if given""a/b/c"", return ""c"". . ◆ GetFileNameWithoutExtension(). std::string sofa::helper::system::SetDirectory::GetFileNameWithoutExtension ; (; const char * ; filename). static . Get the filename from an absolute path description without extension i.e. if given""a/b/c.d"", return ""c"". . ◆ GetParentDir(). std::string sofa::helper::system::SetDirectory::GetParentDir ; (; const char * ; filename). static . Get the parent directory of a given file, i.e. if given ""a/b/c"", return ""a/b"". . ◆ GetProcessFullPath(). std::string sofa::helper::system::SetDirectory::GetProcessFullPath ; (; const char * ; filename). static . Get the full path of the current process. The given filename should be the value of argv[0]. . ◆ GetRelativeFromDir(). std::string sofa::helper::system::SetDirectory::GetRelativeFromDir ; (; const char * ; filename, . const char * ; basename . ). static . Get the ABSOLUTE path of a file relative to a directory i.e. if given ""../e"" and ""a/b/c"", return ""a/b/e"". . ◆ GetRelativeFromFile(). std::string sofa::helper::system::SetDirectory::GetRelativeFromFile ; (; const char * ; filename, . const char * ; basename . ). static . Get the ABSOLUTE path of a file relative to another file path i.e. if given ""../e"" and ""a/b/c"", return ""a/e"". . ◆ GetRelativeFromProcess(). std::string sofa::helper::system::SetDirectory::GetRelativeFromProcess ; (; const char * ; filename, . const char * ; basename = nullptr . ). static . Get the ABSOLUTE path of a file relative to current process path i.e. if given ""../e"" and ""a/b/c"", return ""a/e"". . ◆ IsAbsolute(). bool sofa::helper::system::SetDirectory::IsAbsolute ; (; const std::string & ; filename). static . Return true if the given file has an absolute path. . sofahelpersystemSetDirectory; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html:3685,a/b,a/b,3685,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_set_directory.html,4,['a/b'],['a/b']
Deployability,"rffDistance () override;  ; void handleEvent (core::objectmodel::Event *event) override;  Handle an event. More...;  ; void onBeginAnimationStep (const double);  ; void computeDistances ();  ; Real distance (Coord p, VecCoord S);  ;  Protected Member Functions inherited from sofa::core::DataEngine;  DataEngine ();  Constructor. More...;  ;  ~DataEngine () override;  Destructor. Do nothing. More...;  ; virtual void doInternalUpdate () final;  Prevent engines to use the internalUpdate mechanism, so that only update/doUpdate is used. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_hausdorff_distance.html:14300,update,update,14300,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_hausdorff_distance.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_hausdorff_distance.html,1,['update'],['update']
Deployability,"rgbacolordatawidget_h::RGBAColorDataWidget, sofa::gui::qt::QPoissonRatioWidget, sofa::gui::qt::materialdatawidget_h::VectorMaterialDataWidget, sofa::gui::qt::materialdatawidget_h::MaterialDataWidget, sofa::gui::qt::GenericDataWidget< DATA, WIDGET >, sofa::gui::qt::DisplayFlagsDataWidget, and sofa::gui::qt::DataFileNameWidget. ◆ setFilled(). void sofa::gui::qt::DataWidget::setFilled ; (; bool ; value). inline . method to warn if Data has not been filled at constructor. . ◆ setWidgetDirty. void sofa::gui::qt::DataWidget::setWidgetDirty ; (; bool ; b = true). slot . You call this slot anytime you want to specify that the widget value is out of sync with the underlying data value. . ◆ sizeWidget(). virtual unsigned int sofa::gui::qt::DataWidget::sizeWidget ; (; ). inlinevirtual . Helper method to give a size. ; Reimplemented in sofa::gui::qt::QDataSimpleEdit, sofa::gui::qt::TableDataWidget< T, FLAGS >, sofa::gui::qt::GraphDataWidget< T >, and sofa::gui::qt::DisplayFlagsDataWidget. ◆ updateDataValue. void sofa::gui::qt::DataWidget::updateDataValue ; (; ). slot . Checks that widget has been edited emit DataOwnerDirty in case the name field has been modified . ◆ updateVisibility(). void sofa::gui::qt::DataWidget::updateVisibility ; (; ). ◆ updateWidgetValue. void sofa::gui::qt::DataWidget::updateWidgetValue ; (; ). slot . First checks that the widget is not currently being edited checks that the data has changed since the last time the widget has read the data value. ultimately read the data value. . ◆ WidgetDirty. void sofa::gui::qt::DataWidget::WidgetDirty ; (; bool ; ). signal . Emitted each time setWidgetDirty is called. You can also emit it if you want to tell the widget value is out of sync with the underlying data value. . ◆ writeToData(). virtual void sofa::gui::qt::DataWidget::writeToData ; (; ). protectedpure virtual . The implementation of this methods needs to tell how the widget can write its value in the data ; Implemented in sofa::gui::qt::QDataSimpleEdit, so",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_widget.html:8407,update,updateDataValue,8407,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_widget.html,2,['update'],['updateDataValue']
Deployability,riables Control of Legged Robot with Flexible Passive Trunk. /problems-applying-sofacuda-plugin; ; SOFA - Topic: [SOLVED] Problems applying SofaCUDA plugin. /problems-at-lauching-runsofa; ; SOFA - Topic: [SOLVED] Problems at lauching runSofa. /problems-finding-collision-algorithms; ; SOFA - Topic: [SOLVED] Problems finding collision algorithms. /problems-generating-mesh-with-cgalplugin-and-tetrahedronsettopologycontainer; ; SOFA - Topic: [SOLVED] Problems generating mesh with CGALPlugin and TetrahedronSetTopologyContainer. /problems-importing-sofa-gui-sofapython3; ; SOFA - Topic: Problems importing Sofa.Gui (SofaPython3). /problems-in-model-order-reduction; ; SOFA - Topic: [SOLVED] Problems in Model Order Reduction. /problems-in-mor-runsofa-location-and-sofa-launcher; ; SOFA - Topic: [SOLVED] Problems in MOR – runSofa location and sofa-launcher. /problems-in-partitioning-mesh; ; SOFA - Topic: Problems in Partitioning mesh. /problems-in-the-installation-of-sofaopencl-plugin; ; SOFA - Topic: [SOLVED] Problems in the installation of SofaOpenCL plugin. /problem-sofa-v15-12-after-make-there-is-just-one-build-folder-ubuntu-14-04-lts; . /feed; ; [SOLVED] Problem sofa v15.12 After make there is just one build folder – Ubuntu 14.04 LTS – SOFA. SOFA - Topic: [SOLVED] Problem sofa v15.12 After make there is just one build folder – Ubuntu 14.04 LTS. /problems-using-modeler; . /feed; ; [SOLVED] Problems using Modeler – SOFA. /page; . /11; ; SOFA - Topic: [SOLVED] Problems using Modeler. /3; ; SOFA - Topic: [SOLVED] Problems using Modeler. /8; ; SOFA - Topic: [SOLVED] Problems using Modeler. SOFA - Topic: [SOLVED] Problems using Modeler. /problems-when-building-sofa; ; SOFA - Topic: [SOLVED] Problems when building SOFA. /problems-with-cubetopology-when-using-beamfemforcefield; ; SOFA - Topic: Problems with ‘CubeTopology’ when using ‘BeamFEMForceField’. /problems-with-drivers-installing-phanton; ; SOFA - Topic: [SOLVED] Problems with drivers Installing Phanton. /problems-with-find,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:366020,install,installation-of-sofaopencl-plugin,366020,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['install'],"['installation', 'installation-of-sofaopencl-plugin']"
