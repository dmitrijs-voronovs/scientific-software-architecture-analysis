quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Usability,". ROOT: ROOT::RQt6WebDisplayHandle Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; ROOT::RQt6WebDisplayHandle Class ReferenceWeb Display » QT6 Web Display. . Definition at line 68 of file rootqt6.cpp. Classes; class  Qt6Creator;  . Public Member Functions;  RQt6WebDisplayHandle (const std::string &url);  ;  ~RQt6WebDisplayHandle () override;  ; bool Resize (int width, int height) override;  resize web window - if possible ;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static void AddCreator ();  ;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RQt6WebDisplayHandle.html:81,Guid,Guide,81,doc/v632/classROOT_1_1RQt6WebDisplayHandle.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RQt6WebDisplayHandle.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::RRangeCast< T, isDynamic, Range_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::RRangeCast< T, isDynamic, Range_t > Class Template Reference. ; template<typename T, bool isDynamic, typename Range_t>; class ROOT::RRangeCast< T, isDynamic, Range_t >Wraps any collection that can be used in range-based loops and applies static_cast<T> or dynamic_cast<T> to each element. ; Template Parameters. TThe new type to convert to. ; isDynamicIf true, dynamic_cast is used, otherwise static_cast is used. ; Range_tThe type of the input range, which should be usually a reference type to avoid copying. . Definition at line 135 of file RRangeCast.hxx. Public Types; using const_iterator = Internal::TypedIter< T, decltype(std::cbegin(std::declval< Range_t >())), isDynamic >;  ; using iterator = Internal::TypedIter< T, decltype(std::begin(std::declval< Range_t >())), isDynamic >;  . Public Member Functions;  RRangeCast (Range_t &&inputRange);  ; iterator begin ();  ; const_iterator begin () const;  ; iterator end ();  ; const_iterator end () const;  . Private Attributes; Range_t fInputRange;  . #include <ROOT/RRangeCast.hxx>. Inheritance diagram for ROOT::RRangeCast< T, isDynamic, Range_t >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ const_iterator. template<typename T , bool isDynamic, typename Range_t > . using ROOT::RRangeCast< T, isDynamic, Range_t >::const_iterator = Internal::TypedIter<T, decltype(std::cbegin(std::declval<Range_t>())), isDynamic>. Definition at line 144 of file RRangeCast.hxx. ◆ iterator. template<typename T , bool isDynamic, typename Range_t > . using ROOT::RRangeCast< T, isDynamic, Range_t >::iterator = Internal::TypedIter<T, decltype(std::begin(std::declval<Range_t>())), isDynamic>. Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RRangeCast.html:106,Guid,Guide,106,doc/master/classROOT_1_1RRangeCast.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RRangeCast.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::RRangeCast< T, isDynamic, Range_t > Class Template Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::RRangeCast< T, isDynamic, Range_t > Class Template Reference. ; template<typename T, bool isDynamic, typename Range_t>; class ROOT::RRangeCast< T, isDynamic, Range_t >Wraps any collection that can be used in range-based loops and applies static_cast<T> or dynamic_cast<T> to each element. ; Template Parameters. TThe new type to convert to. ; isDynamicIf true, dynamic_cast is used, otherwise static_cast is used. ; Range_tThe type of the input range, which should be usually a reference type to avoid copying. . Definition at line 135 of file RRangeCast.hxx. Public Types; using const_iterator = Internal::TypedIter< T, decltype(std::cbegin(std::declval< Range_t >())), isDynamic >;  ; using iterator = Internal::TypedIter< T, decltype(std::begin(std::declval< Range_t >())), isDynamic >;  . Public Member Functions;  RRangeCast (Range_t &&inputRange);  ; iterator begin ();  ; const_iterator begin () const;  ; iterator end ();  ; const_iterator end () const;  . Private Attributes; Range_t fInputRange;  . #include <ROOT/RRangeCast.hxx>. Inheritance diagram for ROOT::RRangeCast< T, isDynamic, Range_t >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ const_iterator. template<typename T , bool isDynamic, typename Range_t > . using ROOT::RRangeCast< T, isDynamic, Range_t >::const_iterator = Internal::TypedIter<T, decltype(std::cbegin(std::declval<Range_t>())), isDynamic>. Definition at line 144 of file RRangeCast.hxx. ◆ iterator. template<typename T , bool isDynamic, typename Range_t > . using ROOT::RRangeCast< T, isDynamic, Range_t >::iterator = Internal::TypedIter<T, decltype(std::begin(std::declval<Range_t>())), isDynamic>. Definiti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RRangeCast.html:105,Guid,Guide,105,doc/v632/classROOT_1_1RRangeCast.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RRangeCast.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::RTreeDrawInvokeTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RTreeDrawInvokeTimer Class Reference. . Definition at line 86 of file RTreeViewer.cxx. Public Member Functions;  RTreeDrawInvokeTimer (Long_t milliSec, bool mode, RTreeViewer &viewer);  constructor ;  ; void Timeout () override;  timeout handler used to process postponed requests in main ROOT thread ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html:82,Guid,Guide,82,doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawInvokeTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::RTreeDrawInvokeTimer Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::RTreeDrawInvokeTimer Class Reference. . Definition at line 86 of file RTreeViewer.cxx. Public Member Functions;  RTreeDrawInvokeTimer (Long_t milliSec, bool mode, RTreeViewer &viewer);  constructor ;  ; void Timeout () override;  timeout handler used to process postponed requests in main ROOT thread ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:81,Guid,Guide,81,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::RTreeDrawMonitoring Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::RTreeDrawMonitoring Class Reference. . Definition at line 31 of file RTreeViewer.cxx. Public Member Functions;  RTreeDrawMonitoring (Int_t period, RTreeViewer &viewer);  ; bool SendFileCloseEvent (TFile *) override;  ; bool SendFileOpenProgress (TFile *, TList *, const char *, bool=false) override;  ; bool SendFileReadProgress (TFile *) override;  ; bool SendFileWriteProgress (TFile *) override;  ; bool SendInfoDescription (const char *) override;  ; bool SendInfoStatus (const char *) override;  ; bool SendInfoTime () override;  ; bool SendInfoUser (const char *=nullptr) override;  ; bool SendParameters (TList *, const char *=nullptr) override;  ; bool SendProcessingProgress (Double_t nevent, Double_t, bool=false) override;  ; bool SendProcessingStatus (const char *, bool=false) override;  ; void SetLogLevel (const char *=""WARNING"") override;  ; void Verbose (bool) override;  ;  Public Member Functions inherited from TVirtualMonitoringWriter;  TVirtualMonitoringWriter ();  ;  TVirtualMonitoringWriter (const char *name, Double_t value);  ; virtual ~TVirtualMonitoringWriter ();  destructor ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html:81,Guid,Guide,81,doc/master/classROOT_1_1RTreeDrawMonitoring.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeDrawMonitoring.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::RTreeDrawMonitoring Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::RTreeDrawMonitoring Class Reference. . Definition at line 31 of file RTreeViewer.cxx. Public Member Functions;  RTreeDrawMonitoring (Int_t period, RTreeViewer &viewer);  ; bool SendFileCloseEvent (TFile *) override;  ; bool SendFileOpenProgress (TFile *, TList *, const char *, bool=false) override;  ; bool SendFileReadProgress (TFile *) override;  ; bool SendFileWriteProgress (TFile *) override;  ; bool SendInfoDescription (const char *) override;  ; bool SendInfoStatus (const char *) override;  ; bool SendInfoTime () override;  ; bool SendInfoUser (const char *=nullptr) override;  ; bool SendParameters (TList *, const char *=nullptr) override;  ; bool SendProcessingProgress (Double_t nevent, Double_t, bool=false) override;  ; bool SendProcessingStatus (const char *, bool=false) override;  ; void SetLogLevel (const char *=""WARNING"") override;  ; void Verbose (bool) override;  ;  Public Member Functions inherited from TVirtualMonitoringWriter;  TVirtualMonitoringWriter ();  ;  TVirtualMonitoringWriter (const char *name, Double_t value);  ; virtual ~TVirtualMonitoringWriter ();  destructor ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:80,Guid,Guide,80,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::RTreeViewer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RTreeViewer Class ReferenceWeb Widgets. ; Web-based ROOT TTree viewer. ; Definition at line 34 of file RTreeViewer.hxx. Classes; struct  RBranchInfo;  ; struct  RConfig;  . Public Types; using PerformDrawCallback_t = std::function< void(const std::string &)>;  . Public Member Functions;  RTreeViewer (TTree *tree=nullptr);  constructor ;  ; virtual ~RTreeViewer ();  destructor ;  ; bool GetShowHierarchy () const;  Returns default hierarchy browser visibility. ;  ; const std::string & GetTitle () const;  ; std::string GetWindowAddr () const;  Return address of web window used for tree viewer. ;  ; std::string GetWindowUrl (bool remote);  Return URL of web window used for tree viewer See ROOT::RWebWindow::GetUrl docu for more details. ;  ; void SetCallback (PerformDrawCallback_t func);  ; void SetShowHierarchy (bool on=true);  Configures default hierarchy browser visibility, only has effect before showing web window. ;  ; void SetTitle (const std::string &title);  ; void SetTree (TTree *tree);  assign new TTree to the viewer ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  Show or update viewer in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ;  ; bool SuggestBranch (const TBranch *branch);  Suggest to use branch in the gui Normally just assign as last edited expression. ;  ; bool SuggestExpression (const std::string &expr);  Suggest to use expression in the gui Normally just assign as last edited expression. ;  ; bool SuggestLeaf (const TLeaf *leaf);  Suggest to use leaf in the gui Normally just assign as last edited expression. ;  ; void Upd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RTreeViewer.html:73,Guid,Guide,73,doc/master/classROOT_1_1RTreeViewer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeViewer.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::RTreeViewer Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RTreeViewer Class Reference. . Definition at line 34 of file RTreeViewer.hxx. Classes; struct  RBranchInfo;  ; struct  RConfig;  . Public Types; using PerformDrawCallback_t = std::function< void(const std::string &)>;  . Public Member Functions;  RTreeViewer (TTree *tree=nullptr);  constructor ;  ; virtual ~RTreeViewer ();  destructor ;  ; bool GetShowHierarchy () const;  Returns default hierarchy browser visibility. ;  ; const std::string & GetTitle () const;  ; std::string GetWindowAddr () const;  Return address of web window used for tree viewer. ;  ; std::string GetWindowUrl (bool remote);  Return URL of web window used for tree viewer See ROOT::RWebWindow::GetUrl docu for more details. ;  ; void SetCallback (PerformDrawCallback_t func);  ; void SetShowHierarchy (bool on=true);  Configures default hierarchy browser visibility, only has effect before showing web window. ;  ; void SetTitle (const std::string &title);  ; void SetTree (TTree *tree);  assign new TTree to the viewer ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  Show or update viewer in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ;  ; bool SuggestBranch (const TBranch *branch);  Suggest to use branch in the gui Normally just assign as last edited expression. ;  ; bool SuggestExpression (const std::string &expr);  Suggest to use expression in the gui Normally just assign as last edited expression. ;  ; bool SuggestLeaf (const TLeaf *leaf);  Suggest to use leaf in the gui Normally just assign as last edited expression. ;  ; void Update ();  Update tree viewer in all web disp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html:72,Guid,Guide,72,doc/v632/classROOT_1_1RTreeViewer.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::RWebBrowserHandle Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Attributes |; List of all members ; ROOT::RWebBrowserHandle Class Reference. ; Specialized handle to hold information about running browser process Used to correctly cleanup all processes and temporary directories. ; Definition at line 105 of file RWebDisplayHandle.cxx. Public Member Functions;  RWebBrowserHandle (const std::string &url, const std::string &tmpdir, const std::string &tmpfile, browser_process_id pid);  ;  RWebBrowserHandle (const std::string &url, const std::string &tmpdir, const std::string &tmpfile, const std::string &dump);  ;  ~RWebBrowserHandle () override;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; virtual bool Resize (int, int);  resize web window - if possible ;  ; void SetContent (const std::string &cont);  set content ;  . Private Types; typedef pid_t browser_process_id;  . Private Attributes; bool fHasPid {false};  ; browser_process_id fPid;  ; std::string fTmpDir;  temporary directory to delete at the end ;  ; std::string fTmpFile;  temporary file to remove ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool Dis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebBrowserHandle.html:79,Guid,Guide,79,doc/master/classROOT_1_1RWebBrowserHandle.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebBrowserHandle.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::RWebBrowserHandle Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Attributes |; List of all members ; ROOT::RWebBrowserHandle Class Reference. ; Specialized handle to hold information about running browser process Used to correctly cleanup all processes and temporary directories. ; Definition at line 103 of file RWebDisplayHandle.cxx. Public Member Functions;  RWebBrowserHandle (const std::string &url, const std::string &tmpdir, const std::string &tmpfile, browser_process_id pid);  ;  RWebBrowserHandle (const std::string &url, const std::string &tmpdir, const std::string &tmpfile, const std::string &dump);  ;  ~RWebBrowserHandle () override;  ;  Public Member Functions inherited from ROOT::RWebDisplayHandle;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; virtual bool Resize (int, int);  resize web window - if possible ;  ; void SetContent (const std::string &cont);  set content ;  . Private Types; typedef pid_t browser_process_id;  . Private Attributes; bool fHasPid {false};  ; browser_process_id fPid;  ; std::string fTmpDir;  temporary directory to delete at the end ;  ; std::string fTmpFile;  temporary file to remove ;  . Additional Inherited Members;  Static Public Member Functions inherited from ROOT::RWebDisplayHandle; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool Disp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebBrowserHandle.html:78,Guid,Guide,78,doc/v632/classROOT_1_1RWebBrowserHandle.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebBrowserHandle.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::RWebBrowserImp Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::RWebBrowserImp Class Reference. . Definition at line 22 of file RWebBrowserImp.hxx. Public Member Functions;  RWebBrowserImp (TBrowser *b, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with x,y, width and height parameters. ;  ;  RWebBrowserImp (TBrowser *b, const char *title, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with width and height parameters. ;  ;  RWebBrowserImp (TBrowser *b=nullptr);  Default constructor. ;  ; virtual ~RWebBrowserImp ();  Constructor with width and height parameters. ;  ; void BrowseObj (TObject *) final;  Browse specified object. ;  ; void Iconify () final;  Iconify browser. ;  ; Bool_t IsWeb () const final;  ; void Refresh (Bool_t=kFALSE) final;  Refresh browser. ;  ; void Show () final;  Show browser. ;  ;  Public Member Functions inherited from TBrowserImp;  TBrowserImp (TBrowser *b, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with browser x, y, width and height. ;  ;  TBrowserImp (TBrowser *b, const char *title, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with browser width and height. ;  ;  TBrowserImp (TBrowser *b=nullptr);  Default constructor. ;  ; virtual ~TBrowserImp ()=default;  ; virtual void Add (TObject *, const char *, Int_t);  ; virtual void AddCheckBox (TObject *, Bool_t=kFALSE);  ; TBrowser * Browser () const;  ; virtual void CheckObjectItem (TObject *, Bool_t=kFALSE);  ; virtual void CloseTabs ();  ; virtual Longptr_t ExecPlugin (const char *, const char *, const char *, Int_t, Int_t);  ; virtual void ExecuteDefaultAction (TObject *);  ; virtual TBrowser * GetBrowser () const;  ; virtual Option_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebBrowserImp.html:76,Guid,Guide,76,doc/master/classROOT_1_1RWebBrowserImp.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebBrowserImp.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::RWebBrowserImp Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::RWebBrowserImp Class Reference. . Definition at line 22 of file RWebBrowserImp.hxx. Public Member Functions;  RWebBrowserImp (TBrowser *b, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with x,y, width and height parameters. ;  ;  RWebBrowserImp (TBrowser *b, const char *title, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with width and height parameters. ;  ;  RWebBrowserImp (TBrowser *b=nullptr);  Default constructor. ;  ; virtual ~RWebBrowserImp ();  Constructor with width and height parameters. ;  ; void BrowseObj (TObject *) final;  Browse specified object. ;  ; void Iconify () final;  Iconify browser. ;  ; void Refresh (Bool_t=kFALSE) final;  Refresh browser. ;  ; void Show () final;  Show browser. ;  ;  Public Member Functions inherited from TBrowserImp;  TBrowserImp (TBrowser *b, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with browser x, y, width and height. ;  ;  TBrowserImp (TBrowser *b, const char *title, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with browser width and height. ;  ;  TBrowserImp (TBrowser *b=nullptr);  Default constructor. ;  ; virtual ~TBrowserImp ()=default;  ; virtual void Add (TObject *, const char *, Int_t);  ; virtual void AddCheckBox (TObject *, Bool_t=kFALSE);  ; TBrowser * Browser () const;  ; virtual void CheckObjectItem (TObject *, Bool_t=kFALSE);  ; virtual void CloseTabs ();  ; virtual Longptr_t ExecPlugin (const char *, const char *, const char *, Int_t, Int_t);  ; virtual void ExecuteDefaultAction (TObject *);  ; virtual TBrowser * GetBrowser () const;  ; virtual Option_t * GetDrawOption () const;  ; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebBrowserImp.html:75,Guid,Guide,75,doc/v632/classROOT_1_1RWebBrowserImp.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebBrowserImp.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::RWebDisplayArgs Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; ROOT::RWebDisplayArgs Class ReferenceWeb Display. ; Holds different arguments for starting browser with RWebDisplayHandle::Display() method. ; Definition at line 33 of file RWebDisplayArgs.hxx. Public Types; enum  EBrowserKind { ;   kChrome; , kEdge; , kSafari; , kFirefox; , ;   kNative; , kCEF; , kQt5; , kQt6; , ;   kLocal; , kDefault; , kServer; , kEmbedded; , ;   kOff; , kOn; , kCustom. };  . Public Member Functions;  RWebDisplayArgs ();  Default constructor. ;  ;  RWebDisplayArgs (const char *browser);  Constructor. ;  ;  RWebDisplayArgs (const std::string &browser);  Constructor. ;  ;  RWebDisplayArgs (int width, int height, int x=-1, int y=-1, const std::string &browser="""");  Constructor. ;  ;  RWebDisplayArgs (std::shared_ptr< RWebWindow > master, unsigned conndid=0, int channel=-1);  Constructor. ;  ; virtual ~RWebDisplayArgs ();  Destructor. ;  ; void AppendUrlOpt (const std::string &opt);  append extra url options, add ""&"" as separator if required ;  ; EBrowserKind GetBrowserKind () const;  returns configured browser kind, see EBrowserKind for supported values ;  ; std::string GetBrowserName () const;  Returns configured browser name. ;  ; std::string GetCustomExec () const;  returns custom executable to start web browser ;  ; void * GetDriverData () const;  [internal] returns web-driver data, used to start window ;  ; const std::string & GetExtraArgs () const;  get extra command line arguments for starting web browser command ;  ; std::string GetFullUrl () const;  returns window url with append options ;  ; int GetHeight () const;  returns preferable web window height ;  ; THttpServer * GetHttpServer () const;  returns http server instance, used f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebDisplayArgs.html:77,Guid,Guide,77,doc/master/classROOT_1_1RWebDisplayArgs.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebDisplayArgs.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::RWebDisplayArgs Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; ROOT::RWebDisplayArgs Class ReferenceWeb Display. ; Holds different arguments for starting browser with RWebDisplayHandle::Display() method. ; Definition at line 33 of file RWebDisplayArgs.hxx. Public Types; enum  EBrowserKind { ;   kChrome; , kEdge; , kFirefox; , kNative; , ;   kCEF; , kQt5; , kQt6; , kLocal; , ;   kDefault; , kServer; , kEmbedded; , kOff; , ;   kOn; , kCustom. };  . Public Member Functions;  RWebDisplayArgs ();  Default constructor. ;  ;  RWebDisplayArgs (const char *browser);  Constructor. ;  ;  RWebDisplayArgs (const std::string &browser);  Constructor. ;  ;  RWebDisplayArgs (int width, int height, int x=-1, int y=-1, const std::string &browser="""");  Constructor. ;  ;  RWebDisplayArgs (std::shared_ptr< RWebWindow > master, unsigned conndid=0, int channel=-1);  Constructor. ;  ; virtual ~RWebDisplayArgs ();  Destructor. ;  ; void AppendUrlOpt (const std::string &opt);  append extra url options, add ""&"" as separator if required ;  ; EBrowserKind GetBrowserKind () const;  returns configured browser kind, see EBrowserKind for supported values ;  ; std::string GetBrowserName () const;  Returns configured browser name. ;  ; std::string GetCustomExec () const;  returns custom executable to start web browser ;  ; void * GetDriverData () const;  [internal] returns web-driver data, used to start window ;  ; const std::string & GetExtraArgs () const;  get extra command line arguments for starting web browser command ;  ; std::string GetFullUrl () const;  returns window url with append options ;  ; int GetHeight () const;  returns preferable web window height ;  ; THttpServer * GetHttpServer () const;  returns http server instance, used for window di",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebDisplayArgs.html:76,Guid,Guide,76,doc/v632/classROOT_1_1RWebDisplayArgs.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebDisplayArgs.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::RWebDisplayHandle Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Private Attributes |; List of all members ; ROOT::RWebDisplayHandle Class ReferenceWeb Display. ; Handle of created web-based display Depending from type of web display, holds handle of started browser process or other display-specific information to correctly stop and cleanup display. ; Definition at line 25 of file RWebDisplayHandle.hxx. Classes; class  BrowserCreator;  ; class  ChromeCreator;  ; class  Creator;  !< page content More...;  ; class  FirefoxCreator;  ; class  SafariCreator;  . Public Member Functions;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; virtual bool Resize (int, int);  resize web window - if possible ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static std::string GetImageFormat (const std::string &fname);  Detect image format There is special handling of "".screenshot.pdf"" and "".screenshot.png"" extensions Creation of such files relies on headless browser functionality and fully supported only by Chrome browser. ;  ; static bool NeedHttpServ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebDisplayHandle.html:79,Guid,Guide,79,doc/master/classROOT_1_1RWebDisplayHandle.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebDisplayHandle.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::RWebDisplayHandle Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Private Attributes |; List of all members ; ROOT::RWebDisplayHandle Class ReferenceWeb Display. ; Handle of created web-based display Depending from type of web display, holds handle of started browser process or other display-specific information to correctly stop and cleanup display. ; Definition at line 25 of file RWebDisplayHandle.hxx. Classes; class  BrowserCreator;  ; class  ChromeCreator;  ; class  Creator;  !< page content More...;  ; class  FirefoxCreator;  . Public Member Functions;  RWebDisplayHandle (const std::string &url);  constructor ;  ; virtual ~RWebDisplayHandle ()=default;  required virtual destructor for correct cleanup at the end ;  ; const std::string & GetContent () const;  get content ;  ; const std::string & GetUrl () const;  returns url of start web display ;  ; virtual bool Resize (int, int);  resize web window - if possible ;  ; void SetContent (const std::string &cont);  set content ;  . Static Public Member Functions; static bool CanProduceImages (const std::string &browser="""");  Returns true if image production for specified browser kind is supported If browser not specified - use currently configured browser or try to test existing web browsers. ;  ; static std::unique_ptr< RWebDisplayHandle > Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functiona",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebDisplayHandle.html:78,Guid,Guide,78,doc/v632/classROOT_1_1RWebDisplayHandle.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebDisplayHandle.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::RWebWindow Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; ROOT::RWebWindow Class ReferenceWeb Display. ; Represents web window, which can be shown in web browser or any other supported environment. ; Window can be configured to run either in the normal or in the batch (headless) mode. In second case no any graphical elements will be created. For the normal window one can configure geometry (width and height), which are applied when window shown.; Each window can be shown several times (if allowed) in different places - either as the CEF (chromium embedded) window or in the standard web browser. When started, window will open and show HTML page, configured with RWebWindow::SetDefaultPage() method.; Typically (but not necessarily) clients open web socket connection to the window and one can exchange data, using RWebWindow::Send() method and call-back function assigned via RWebWindow::SetDataCallBack(). ; Definition at line 54 of file RWebWindow.hxx. Classes; struct  MasterConn;  ; struct  QueueEntry;  ; struct  QueueItem;  ; struct  WebConn;  . Public Member Functions;  RWebWindow ();  RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ;  ;  ~RWebWindow ();  RWebWindow destructor Closes all connections and remove window from manager. ;  ; void AssignThreadId ();  Assign thread id which has to be used for callbacks WARNING!!! only for expert use Automatically done at the moment when any callback function is invoked Can be invoked once again if window Run method will be invoked from other thread Normally should be invoked before Show() method is called. ;  ; bool CanSend (unsigned connid, bool direct=true) cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindow.html:72,Guid,Guide,72,doc/master/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::RWebWindow Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; ROOT::RWebWindow Class ReferenceWeb Display. ; Represents web window, which can be shown in web browser or any other supported environment. ; Window can be configured to run either in the normal or in the batch (headless) mode. In second case no any graphical elements will be created. For the normal window one can configure geometry (width and height), which are applied when window shown.; Each window can be shown several times (if allowed) in different places - either as the CEF (chromium embedded) window or in the standard web browser. When started, window will open and show HTML page, configured with RWebWindow::SetDefaultPage() method.; Typically (but not necessarily) clients open web socket connection to the window and one can exchange data, using RWebWindow::Send() method and call-back function assigned via RWebWindow::SetDataCallBack(). ; Definition at line 52 of file RWebWindow.hxx. Classes; struct  MasterConn;  ; struct  QueueEntry;  ; struct  QueueItem;  ; struct  WebConn;  . Public Member Functions;  RWebWindow ();  RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ;  ;  ~RWebWindow ();  RWebWindow destructor Closes all connections and remove window from manager. ;  ; void AssignThreadId ();  Assign thread id which has to be used for callbacks WARNING!!! only for expert use Automatically done at the moment when any callback function is invoked Can be invoked once again if window Run method will be invoked from other thread Normally should be invoked before Show() method is called. ;  ; bool CanSend (unsigned connid, bool direct=true) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:71,Guid,Guide,71,doc/v632/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::RWebWindowWSHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; List of all members ; ROOT::RWebWindowWSHandler Class Reference. ; just wrapper to deliver websockets call-backs to the RWebWindow class ; Definition at line 30 of file RWebWindowWSHandler.hxx. Public Member Functions;  RWebWindowWSHandler (RWebWindow &wind, const char *name);  constructor ;  ;  ~RWebWindowWSHandler () override=default;  ; Bool_t AllowMTProcess () const override;  Allow processing of WS actions in arbitrary thread. ;  ; Bool_t AllowMTSend () const override;  Allows usage of special threads for send operations. ;  ; Bool_t CanServeFiles () const override;  returns true when window allowed to serve files relative to default page ;  ; void CompleteWSSend (UInt_t wsid) override;  React on completion of multi-threaded send operation. ;  ; TString GetDefaultPageContent () override;  returns content of default web-page THttpWSHandler interface ;  ; Bool_t ProcessWS (THttpCallArg *arg) override;  Process websocket request - called from THttpServer thread THttpWSHandler interface. ;  ;  Public Member Functions inherited from THttpWSHandler; virtual ~THttpWSHandler ();  destructor Make sure that all sending threads are stopped correctly ;  ; void CloseWS (UInt_t wsid);  Close connection with given websocket id. ;  ; Int_t GetNumWS ();  Returns current number of websocket connections. ;  ; UInt_t GetWS (Int_t num=0);  Return websocket id with given sequential number Number of websockets returned with GetNumWS() method. ;  ; Bool_t HasWS (UInt_t wsid);  Return kTRUE if websocket with given ID exists. ;  ; TClass * IsA () const override;  ; Bool_t IsDisabled () const;  Returns true when processing of websockets is disabled, set shortly before handler need to be destroyed. ;  ; Bool_t IsSyncMode () con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html:81,Guid,Guide,81,doc/master/classROOT_1_1RWebWindowWSHandler.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowWSHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::RWebWindowWSHandler Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; List of all members ; ROOT::RWebWindowWSHandler Class Reference. ; just wrapper to deliver websockets call-backs to the RWebWindow class ; Definition at line 30 of file RWebWindowWSHandler.hxx. Public Member Functions;  RWebWindowWSHandler (RWebWindow &wind, const char *name);  constructor ;  ;  ~RWebWindowWSHandler () override=default;  ; Bool_t AllowMTProcess () const override;  Allow processing of WS actions in arbitrary thread. ;  ; Bool_t AllowMTSend () const override;  Allows usage of special threads for send operations. ;  ; Bool_t CanServeFiles () const override;  returns true when window allowed to serve files relative to default page ;  ; void CompleteWSSend (UInt_t wsid) override;  React on completion of multi-threaded send operation. ;  ; TString GetDefaultPageContent () override;  returns content of default web-page THttpWSHandler interface ;  ; Bool_t ProcessWS (THttpCallArg *arg) override;  Process websocket request - called from THttpServer thread THttpWSHandler interface. ;  ;  Public Member Functions inherited from THttpWSHandler; virtual ~THttpWSHandler ();  destructor Make sure that all sending threads are stopped correctly ;  ; void CloseWS (UInt_t wsid);  Close connection with given websocket id. ;  ; Int_t GetNumWS ();  Returns current number of websocket connections. ;  ; UInt_t GetWS (Int_t num=0);  Return websocket id with given sequential number Number of websockets returned with GetNumWS() method. ;  ; Bool_t HasWS (UInt_t wsid);  Return kTRUE if websocket with given ID exists. ;  ; TClass * IsA () const override;  ; Bool_t IsDisabled () const;  Returns true when processing of websockets is disabled, set shortly before handler need to be destroyed. ;  ; Bool_t IsSyncMode () cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:80,Guid,Guide,80,doc/v632/classROOT_1_1RWebWindowWSHandler.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::RWebWindowsManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RWebWindowsManager Class ReferenceWeb Display. ; Central instance to create and show web-based windows like Canvas or FitPanel. ; Manager responsible to creating THttpServer instance, which is used for RWebWindow's communication with clients.; Method RWebWindows::Show() used to show window in specified location. ; Definition at line 40 of file RWebWindowsManager.hxx. Public Member Functions;  RWebWindowsManager ();  window manager constructor Required here for correct usage of unique_ptr<THttpServer> ;  ;  ~RWebWindowsManager ();  window manager destructor Required here for correct usage of unique_ptr<THttpServer> ;  ; std::shared_ptr< RWebWindow > CreateWindow ();  Creates new window To show window, RWebWindow::Show() have to be called. ;  ; THttpServer * GetServer () const;  Returns THttpServer instance. ;  ; std::string GetServerAddr () const;  Returns http address of the server, empty string when not available. ;  ; void SetDeleteCallback (WebWindowDeleteCallback_t func);  Assign show callback which can catch window showing, used by RBrowser. ;  ; void SetShowCallback (WebWindowShowCallback_t func);  Assign show callback which can catch window showing, used by RBrowser. ;  ; void Terminate ();  Terminate http server and ROOT application. ;  . Static Public Member Functions; static void AddServerLocation (const std::string &server_prefix, const std::string &files_path);  Configure server location which can be used for loading of custom scripts or files When THttpServer instance of RWebWindowsManager will be created, THttpServer::AddLocation() method with correspondent arguments will be invoked. ;  ; static void AssignMainThrd ();  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:80,Guid,Guide,80,doc/master/classROOT_1_1RWebWindowsManager.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::RWebWindowsManager Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RWebWindowsManager Class ReferenceWeb Display. ; Central instance to create and show web-based windows like Canvas or FitPanel. ; Manager responsible to creating THttpServer instance, which is used for RWebWindow's communication with clients.; Method RWebWindows::Show() used to show window in specified location. ; Definition at line 36 of file RWebWindowsManager.hxx. Public Member Functions;  RWebWindowsManager ();  window manager constructor Required here for correct usage of unique_ptr<THttpServer> ;  ;  ~RWebWindowsManager ();  window manager destructor Required here for correct usage of unique_ptr<THttpServer> ;  ; std::shared_ptr< RWebWindow > CreateWindow ();  Creates new window To show window, RWebWindow::Show() have to be called. ;  ; THttpServer * GetServer () const;  Returns THttpServer instance. ;  ; std::string GetServerAddr () const;  Returns http address of the server, empty string when not available. ;  ; void SetShowCallback (WebWindowShowCallback_t func);  Assign show callback which can catch window showing, used by RBrowser. ;  ; void Terminate ();  Terminate http server and ROOT application. ;  . Static Public Member Functions; static void AssignMainThrd ();  Re-assigns main thread id Normally main thread id recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to call this method to let RWebWindowsManager correctly recognize such situation. ;  ; static std::shared_ptr< RWebWindowsManager > & Instance ();  Returns default window manager Used to display all standard ROOT elements like TCanvas or TFitPanel. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:79,Guid,Guide,79,doc/v632/classROOT_1_1RWebWindowsManager.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TBufferMerger Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TBufferMerger Class ReferenceInput/Output Library. ; TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. ; Its purpose is similar to TParallelMergingFile, but instead of using processes that connect to a network socket, TBufferMerger uses threads that each write to a TBufferMergerFile, which in turn push data into a queue managed by the TBufferMerger. ; Definition at line 41 of file TBufferMerger.hxx. Public Member Functions;  TBufferMerger (const char *name, Option_t *option=""RECREATE"", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Constructor. ;  ;  TBufferMerger (std::unique_ptr< TFile > output);  Constructor. ;  ; virtual ~TBufferMerger ();  Destructor. ;  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") size_t GetAutoSave() const;  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") size_t GetBuffered() const;  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") size_t GetQueueSize() const;  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") void SetAutoSave(size_t);  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") void SetCompressTemporaryKeys(Bool_t;  ; std::shared_ptr< TBufferMergerFile > GetFile ();  Returns a TBufferMergerFile to which data can be written. ;  ; const char * GetMergeOptions ();  Returns the current merge options. ;  ; Bool_t GetNotrees () const;  Returns whether the file has been marked as not containing any TTree objects and thus that steps that are specific to TTree can be skippe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TBufferMerger.html:75,Guid,Guide,75,doc/master/classROOT_1_1TBufferMerger.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMerger.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TBufferMerger Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TBufferMerger Class ReferenceInput/Output Library. ; TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. ; Its purpose is similar to TParallelMergingFile, but instead of using processes that connect to a network socket, TBufferMerger uses threads that each write to a TBufferMergerFile, which in turn push data into a queue managed by the TBufferMerger. ; Definition at line 41 of file TBufferMerger.hxx. Public Member Functions;  TBufferMerger (const char *name, Option_t *option=""RECREATE"", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Constructor. ;  ;  TBufferMerger (std::unique_ptr< TFile > output);  Constructor. ;  ; virtual ~TBufferMerger ();  Destructor. ;  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") size_t GetAutoSave() const;  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") size_t GetBuffered() const;  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") size_t GetQueueSize() const;  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") void SetAutoSave(size_t);  ;  _R__DEPRECATED_LATER (""The queuing mechanism in TBufferMerger was removed in ROOT v6.32"") void SetCompressTemporaryKeys(Bool_t;  ; std::shared_ptr< TBufferMergerFile > GetFile ();  Returns a TBufferMergerFile to which data can be written. ;  ; const char * GetMergeOptions ();  Returns the current merge options. ;  ; Bool_t GetNotrees () const;  Returns whether the file has been marked as not containing any TTree objects and thus that steps that are specific to TTree can be skipped",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TBufferMerger.html:74,Guid,Guide,74,doc/v632/classROOT_1_1TBufferMerger.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMerger.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TBufferMergerFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::TBufferMergerFile Class ReferenceInput/Output Library. ; A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. ; The TBufferMerger merges all data into the output file on disk. ; Definition at line 143 of file TBufferMerger.hxx. Public Member Functions;  ~TBufferMergerFile () override;  Destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Write (const char *name=nullptr, Int_t opt=0, Int_t bufsize=0) override;  Write data into a TBufferFile and append it to TBufferMerger. ;  ;  Public Member Functions inherited from TMemFile;  TMemFile (const char *name, char *buffer, Long64_t size, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Long64_t defBlockSize=0LL);  Usual Constructor. See the TFile constructor for details. Copy data from buffer. ;  ;  TMemFile (const char *name, const ZeroCopyView_t &datarange);  Constructor to create a TMemFile re-using external C-Style storage. ;  ;  TMemFile (const char *name, ExternalDataPtr_t data);  Constructor to create a TMemFile re-using external storage. ;  ;  TMemFile (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Long64_t defBlockSize=0LL);  Usual Constructor. ;  ;  TMemFile (const char *name, std::unique_ptr< TBufferFile > buffer);  Constructor to create a read-only TMemFile using an std::unique_ptr<TBufferFile> ;  ;  TMemFile (const TMemFile &orig);  Copying the c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:79,Guid,Guide,79,doc/master/classROOT_1_1TBufferMergerFile.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TBufferMergerFile Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::TBufferMergerFile Class ReferenceInput/Output Library. ; A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. ; The TBufferMerger merges all data into the output file on disk. ; Definition at line 143 of file TBufferMerger.hxx. Public Member Functions;  ~TBufferMergerFile () override;  Destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Write (const char *name=nullptr, Int_t opt=0, Int_t bufsize=0) override;  Write data into a TBufferFile and append it to TBufferMerger. ;  ;  Public Member Functions inherited from TMemFile;  TMemFile (const char *name, char *buffer, Long64_t size, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Long64_t defBlockSize=0LL);  Usual Constructor. See the TFile constructor for details. Copy data from buffer. ;  ;  TMemFile (const char *name, const ZeroCopyView_t &datarange);  Constructor to create a TMemFile re-using external C-Style storage. ;  ;  TMemFile (const char *name, ExternalDataPtr_t data);  Constructor to create a TMemFile re-using external storage. ;  ;  TMemFile (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Long64_t defBlockSize=0LL);  Usual Constructor. ;  ;  TMemFile (const char *name, std::unique_ptr< TBufferFile > buffer);  Constructor to create a read-only TMemFile using an std::unique_ptr<TBufferFile> ;  ;  TMemFile (const TMemFile &orig);  Copying the co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:78,Guid,Guide,78,doc/v632/classROOT_1_1TBufferMergerFile.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TClassAlt Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::TClassAlt Class Reference. . Definition at line 128 of file TClassTable.cxx. Public Member Functions;  TClassAlt (const char *alternate, const char *normName, TClassAlt *next);  ;  ~TClassAlt ();  . Public Attributes; const char * fName;  ; std::unique_ptr< TClassAlt > fNext;  ; const char * fNormName;  . Constructor & Destructor Documentation. ◆ TClassAlt(). ROOT::TClassAlt::TClassAlt ; (; const char * ; alternate, . const char * ; normName, . TClassAlt * ; next . ). inline . Definition at line 130 of file TClassTable.cxx. ◆ ~TClassAlt(). ROOT::TClassAlt::~TClassAlt ; (; ). inline . Definition at line 134 of file TClassTable.cxx. Member Data Documentation. ◆ fName. const char* ROOT::TClassAlt::fName. Definition at line 138 of file TClassTable.cxx. ◆ fNext. std::unique_ptr<TClassAlt> ROOT::TClassAlt::fNext. Definition at line 140 of file TClassTable.cxx. ◆ fNormName. const char* ROOT::TClassAlt::fNormName. Definition at line 139 of file TClassTable.cxx. core/cont/src/TClassTable.cxx. ROOTTClassAlt. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TClassAlt.html:71,Guid,Guide,71,doc/master/classROOT_1_1TClassAlt.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TClassAlt.html,2,['Guid'],['Guide']
Usability,". ROOT: ROOT::TClassAlt Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::TClassAlt Class Reference. . Definition at line 128 of file TClassTable.cxx. Public Member Functions;  TClassAlt (const char *alternate, const char *normName, TClassAlt *next);  ;  ~TClassAlt ();  . Public Attributes; const char * fName;  ; std::unique_ptr< TClassAlt > fNext;  ; const char * fNormName;  . Constructor & Destructor Documentation. ◆ TClassAlt(). ROOT::TClassAlt::TClassAlt ; (; const char * ; alternate, . const char * ; normName, . TClassAlt * ; next . ). inline . Definition at line 130 of file TClassTable.cxx. ◆ ~TClassAlt(). ROOT::TClassAlt::~TClassAlt ; (; ). inline . Definition at line 134 of file TClassTable.cxx. Member Data Documentation. ◆ fName. const char* ROOT::TClassAlt::fName. Definition at line 138 of file TClassTable.cxx. ◆ fNext. std::unique_ptr<TClassAlt> ROOT::TClassAlt::fNext. Definition at line 140 of file TClassTable.cxx. ◆ fNormName. const char* ROOT::TClassAlt::fNormName. Definition at line 139 of file TClassTable.cxx. core/cont/src/TClassTable.cxx. ROOTTClassAlt. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TClassAlt.html:70,Guid,Guide,70,doc/v632/classROOT_1_1TClassAlt.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TClassAlt.html,2,['Guid'],['Guide']
Usability,. ROOT: ROOT::TClassRec Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::TClassRec Class Reference. . Definition at line 106 of file TClassTable.cxx. Public Member Functions;  TClassRec (TClassRec *next);  ;  ~TClassRec ();  . Public Attributes; Int_t fBits;  ; DictFuncPtr_t fDict;  ; Version_t fId;  ; const std::type_info * fInfo;  ; char * fName;  ; TClassRec * fNext;  ; TProtoClass * fProto;  . Constructor & Destructor Documentation. ◆ TClassRec(). ROOT::TClassRec::TClassRec ; (; TClassRec * ; next). inline . Definition at line 108 of file TClassTable.cxx. ◆ ~TClassRec(). ROOT::TClassRec::~TClassRec ; (; ). inline . Definition at line 112 of file TClassTable.cxx. Member Data Documentation. ◆ fBits. Int_t ROOT::TClassRec::fBits. Definition at line 121 of file TClassTable.cxx. ◆ fDict. DictFuncPtr_t ROOT::TClassRec::fDict. Definition at line 122 of file TClassTable.cxx. ◆ fId. Version_t ROOT::TClassRec::fId. Definition at line 120 of file TClassTable.cxx. ◆ fInfo. const std::type_info* ROOT::TClassRec::fInfo. Definition at line 123 of file TClassTable.cxx. ◆ fName. char* ROOT::TClassRec::fName. Definition at line 119 of file TClassTable.cxx. ◆ fNext. TClassRec* ROOT::TClassRec::fNext. Definition at line 125 of file TClassTable.cxx. ◆ fProto. TProtoClass* ROOT::TClassRec::fProto. Definition at line 124 of file TClassTable.cxx. core/cont/src/TClassTable.cxx. ROOTTClassRec. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TClassRec.html:71,Guid,Guide,71,doc/master/classROOT_1_1TClassRec.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TClassRec.html,2,['Guid'],['Guide']
Usability,. ROOT: ROOT::TClassRec Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::TClassRec Class Reference. . Definition at line 106 of file TClassTable.cxx. Public Member Functions;  TClassRec (TClassRec *next);  ;  ~TClassRec ();  . Public Attributes; Int_t fBits;  ; DictFuncPtr_t fDict;  ; Version_t fId;  ; const std::type_info * fInfo;  ; char * fName;  ; TClassRec * fNext;  ; TProtoClass * fProto;  . Constructor & Destructor Documentation. ◆ TClassRec(). ROOT::TClassRec::TClassRec ; (; TClassRec * ; next). inline . Definition at line 108 of file TClassTable.cxx. ◆ ~TClassRec(). ROOT::TClassRec::~TClassRec ; (; ). inline . Definition at line 112 of file TClassTable.cxx. Member Data Documentation. ◆ fBits. Int_t ROOT::TClassRec::fBits. Definition at line 121 of file TClassTable.cxx. ◆ fDict. DictFuncPtr_t ROOT::TClassRec::fDict. Definition at line 122 of file TClassTable.cxx. ◆ fId. Version_t ROOT::TClassRec::fId. Definition at line 120 of file TClassTable.cxx. ◆ fInfo. const std::type_info* ROOT::TClassRec::fInfo. Definition at line 123 of file TClassTable.cxx. ◆ fName. char* ROOT::TClassRec::fName. Definition at line 119 of file TClassTable.cxx. ◆ fNext. TClassRec* ROOT::TClassRec::fNext. Definition at line 125 of file TClassTable.cxx. ◆ fProto. TProtoClass* ROOT::TClassRec::fProto. Definition at line 124 of file TClassTable.cxx. core/cont/src/TClassTable.cxx. ROOTTClassRec. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TClassRec.html:70,Guid,Guide,70,doc/v632/classROOT_1_1TClassRec.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TClassRec.html,2,['Guid'],['Guide']
Usability,". ROOT: ROOT::TExecutorCRTP< SubC > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Types |; Private Member Functions |; List of all members ; ROOT::TExecutorCRTP< SubC > Class Template Reference. ; template<class SubC>; class ROOT::TExecutorCRTP< SubC >This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. . ROOT::TExecutorCRTP<SubC>::Map; The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. The Map function forwards the call to MapImpl, to be implemented by the child classes.; For either signature, func is executed as many times as needed by a pool of n workers, where n typically defaults to the number of available cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included. ROOT::TExecutorCRTP derived classes never delete what they return, they simply forget it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. The ordering of the elements corresponds to the ordering of the arguments. R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html:92,Guid,Guide,92,doc/master/classROOT_1_1TExecutorCRTP.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TExecutorCRTP< SubC > Class Template Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Types |; Private Member Functions |; List of all members ; ROOT::TExecutorCRTP< SubC > Class Template Reference. ; template<class SubC>; class ROOT::TExecutorCRTP< SubC >This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. . ROOT::TExecutorCRTP<SubC>::Map; The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. The Map function forwards the call to MapImpl, to be implemented by the child classes.; For either signature, func is executed as many times as needed by a pool of n workers, where n typically defaults to the number of available cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included. ROOT::TExecutorCRTP derived classes never delete what they return, they simply forget it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func. The ordering of the elements corresponds to the ordering of the arguments. RO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html:91,Guid,Guide,91,doc/v632/classROOT_1_1TExecutorCRTP.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TF1Helper Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions ; ROOT::TF1Helper Namespace Reference. Classes; class  TGradientParFunction;  function class representing the derivative with respect a parameter of a given TF1 More...;  . Functions; double IntegralError (TF1 *func, Int_t ndim, const double *a, const double *b, const double *params, const double *covmat, double epsilon);  . Function Documentation. ◆ IntegralError(). double ROOT::TF1Helper::IntegralError ; (; TF1 * ; func, . Int_t ; ndim, . const double * ; a, . const double * ; b, . const double * ; params, . const double * ; covmat, . double ; epsilon . ). Definition at line 39 of file TF1Helper.cxx. ROOTTF1Helper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1TF1Helper.html:75,Guid,Guide,75,doc/master/namespaceROOT_1_1TF1Helper.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TF1Helper.html,2,['Guid'],['Guide']
Usability,". ROOT: ROOT::TF1Helper Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions ; ROOT::TF1Helper Namespace Reference. Classes; class  TGradientParFunction;  function class representing the derivative with respect a parameter of a given TF1 More...;  . Functions; double IntegralError (TF1 *func, Int_t ndim, const double *a, const double *b, const double *params, const double *covmat, double epsilon);  . Function Documentation. ◆ IntegralError(). double ROOT::TF1Helper::IntegralError ; (; TF1 * ; func, . Int_t ; ndim, . const double * ; a, . const double * ; b, . const double * ; params, . const double * ; covmat, . double ; epsilon . ). Definition at line 39 of file TF1Helper.cxx. ROOTTF1Helper. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:05 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1TF1Helper.html:74,Guid,Guide,74,doc/v632/namespaceROOT_1_1TF1Helper.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TF1Helper.html,2,['Guid'],['Guide']
Usability,. ROOT: ROOT::TForNamespace Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::TForNamespace Class Reference. . Definition at line 392 of file TClassTable.cxx.; The documentation for this class was generated from the following file:; core/cont/src/TClassTable.cxx. ROOTTForNamespace. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TForNamespace.html:75,Guid,Guide,75,doc/master/classROOT_1_1TForNamespace.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TForNamespace.html,2,['Guid'],['Guide']
Usability,. ROOT: ROOT::TForNamespace Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::TForNamespace Class Reference. . Definition at line 392 of file TClassTable.cxx.; The documentation for this class was generated from the following file:; core/cont/src/TClassTable.cxx. ROOTTForNamespace. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TForNamespace.html:74,Guid,Guide,74,doc/v632/classROOT_1_1TForNamespace.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TForNamespace.html,2,['Guid'],['Guide']
Usability,". ROOT: ROOT::TIOFeatures Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::TIOFeatures Class ReferenceTree Library. ; TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. ; This class allows access to experimental and non-default features.; When one of these features are activated, forward compatibility breaks may occur. That is, older versions of ROOT may not be able to read files written by this version of ROOT that have enabled these non-default features.; To utilize TIOFeatures, create the object, set the desired feature flags, then attach it to a TTree. All subsequently created branches (and their baskets) will be serialized using those particular features.; Example usage: ROOT::TIOFeatures features;; features.Set(ROOT::Experimental::EIOFeatures::kGenerateOffsetMap);; ttree_ref.SetIOFeatures(features);; ROOT::TIOFeaturesTIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TT...Definition TIOFeatures.hxx:69; ROOT::TIOFeatures::Setbool Set(EIOFeatures bits)Set a specific IO feature.Definition TIOFeatures.cxx:139; ROOT::Experimental::EIOFeatures::kGenerateOffsetMap@ kGenerateOffsetMap; The method TTree::SetIOFeatures creates a copy of the feature set; subsequent changes to the TIOFeatures object do not propagate to the TTree. ; Definition at line 69 of file TIOFeatures.hxx. Public Member Functions;  TIOFeatures ();  ; void Clear (EIOFeatures bits);  Clear a specific IO feature from this set. ;  ; void Clear (Experimental::EIOFeatures bits);  Clear a specific IO feature from this set. ;  ; void Clear (Experimental::EIOUnsupportedFeatures bits);  Clear a specific IO feature from this set. ;  ; void Print () const;  Print a human-readable representation of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TIOFeatures.html:73,Guid,Guide,73,doc/master/classROOT_1_1TIOFeatures.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TIOFeatures.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TIOFeatures Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::TIOFeatures Class ReferenceTree Library. ; TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. ; This class allows access to experimental and non-default features.; When one of these features are activated, forward compatibility breaks may occur. That is, older versions of ROOT may not be able to read files written by this version of ROOT that have enabled these non-default features.; To utilize TIOFeatures, create the object, set the desired feature flags, then attach it to a TTree. All subsequently created branches (and their baskets) will be serialized using those particular features.; Example usage: ROOT::TIOFeatures features;; features.Set(ROOT::Experimental::EIOFeatures::kGenerateOffsetMap);; ttree_ref.SetIOFeatures(features);; ROOT::TIOFeaturesTIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TT...Definition TIOFeatures.hxx:69; ROOT::TIOFeatures::Setbool Set(EIOFeatures bits)Set a specific IO feature.Definition TIOFeatures.cxx:139; ROOT::Experimental::EIOFeatures::kGenerateOffsetMap@ kGenerateOffsetMap; The method TTree::SetIOFeatures creates a copy of the feature set; subsequent changes to the TIOFeatures object do not propagate to the TTree. ; Definition at line 69 of file TIOFeatures.hxx. Public Member Functions;  TIOFeatures ();  ; void Clear (EIOFeatures bits);  Clear a specific IO feature from this set. ;  ; void Clear (Experimental::EIOFeatures bits);  Clear a specific IO feature from this set. ;  ; void Clear (Experimental::EIOUnsupportedFeatures bits);  Clear a specific IO feature from this set. ;  ; void Print () const;  Print a human-readable representation of the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:72,Guid,Guide,72,doc/v632/classROOT_1_1TIOFeatures.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TMapDeclIdToTClass Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TMapDeclIdToTClass Class Reference. . Definition at line 433 of file TClass.cxx. Public Types; typedef DeclIdMap_t::const_iterator const_iterator;  ; typedef multimap< TDictionary::DeclId_t, TClass * > DeclIdMap_t;  ; typedef std::pair< const_iterator, const_iterator > equal_range;  ; typedef DeclIdMap_t::key_type key_type;  ; typedef DeclIdMap_t::mapped_type mapped_type;  ; typedef DeclIdMap_t::size_type size_type;  . Public Member Functions; void Add (const key_type &key, mapped_type obj);  ; size_type CountElementsWithKey (const key_type &key);  ; equal_range Find (const key_type &key) const;  ; void Remove (const key_type &key);  . Private Attributes; DeclIdMap_t fMap;  . Member Typedef Documentation. ◆ const_iterator. typedef DeclIdMap_t::const_iterator ROOT::TMapDeclIdToTClass::const_iterator. Definition at line 439 of file TClass.cxx. ◆ DeclIdMap_t. typedef multimap<TDictionary::DeclId_t, TClass*> ROOT::TMapDeclIdToTClass::DeclIdMap_t. Definition at line 436 of file TClass.cxx. ◆ equal_range. typedef std::pair<const_iterator, const_iterator> ROOT::TMapDeclIdToTClass::equal_range. Definition at line 440 of file TClass.cxx. ◆ key_type. typedef DeclIdMap_t::key_type ROOT::TMapDeclIdToTClass::key_type. Definition at line 437 of file TClass.cxx. ◆ mapped_type. typedef DeclIdMap_t::mapped_type ROOT::TMapDeclIdToTClass::mapped_type. Definition at line 438 of file TClass.cxx. ◆ size_type. typedef DeclIdMap_t::size_type ROOT::TMapDeclIdToTClass::size_type. Definition at line 441 of file TClass.cxx. Member Function Documentation. ◆ Add(). void ROOT::TMapDeclIdToTClass::Add ; (; const key_type & ; key, . mapped_type ; obj . ). inline . Definition at line 447 of file TClass.cxx. ◆ CountElementsWithKey(). size_type ROOT::TMapDeclI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TMapDeclIdToTClass.html:80,Guid,Guide,80,doc/master/classROOT_1_1TMapDeclIdToTClass.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TMapDeclIdToTClass.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TMapDeclIdToTClass Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TMapDeclIdToTClass Class Reference. . Definition at line 433 of file TClass.cxx. Public Types; typedef DeclIdMap_t::const_iterator const_iterator;  ; typedef multimap< TDictionary::DeclId_t, TClass * > DeclIdMap_t;  ; typedef std::pair< const_iterator, const_iterator > equal_range;  ; typedef DeclIdMap_t::key_type key_type;  ; typedef DeclIdMap_t::mapped_type mapped_type;  ; typedef DeclIdMap_t::size_type size_type;  . Public Member Functions; void Add (const key_type &key, mapped_type obj);  ; size_type CountElementsWithKey (const key_type &key);  ; equal_range Find (const key_type &key) const;  ; void Remove (const key_type &key);  . Private Attributes; DeclIdMap_t fMap;  . Member Typedef Documentation. ◆ const_iterator. typedef DeclIdMap_t::const_iterator ROOT::TMapDeclIdToTClass::const_iterator. Definition at line 439 of file TClass.cxx. ◆ DeclIdMap_t. typedef multimap<TDictionary::DeclId_t, TClass*> ROOT::TMapDeclIdToTClass::DeclIdMap_t. Definition at line 436 of file TClass.cxx. ◆ equal_range. typedef std::pair<const_iterator, const_iterator> ROOT::TMapDeclIdToTClass::equal_range. Definition at line 440 of file TClass.cxx. ◆ key_type. typedef DeclIdMap_t::key_type ROOT::TMapDeclIdToTClass::key_type. Definition at line 437 of file TClass.cxx. ◆ mapped_type. typedef DeclIdMap_t::mapped_type ROOT::TMapDeclIdToTClass::mapped_type. Definition at line 438 of file TClass.cxx. ◆ size_type. typedef DeclIdMap_t::size_type ROOT::TMapDeclIdToTClass::size_type. Definition at line 441 of file TClass.cxx. Member Function Documentation. ◆ Add(). void ROOT::TMapDeclIdToTClass::Add ; (; const key_type & ; key, . mapped_type ; obj . ). inline . Definition at line 447 of file TClass.cxx. ◆ CountElementsWithKey(). size_type ROOT::TMapDeclId",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TMapDeclIdToTClass.html:79,Guid,Guide,79,doc/v632/classROOT_1_1TMapDeclIdToTClass.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TMapDeclIdToTClass.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TMapTypeToClassRec Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TMapTypeToClassRec Class Reference. . Definition at line 144 of file TClassTable.cxx. Public Types; typedef IdMap_t::const_iterator const_iterator;  ; typedef std::map< std::string, TClassRec * > IdMap_t;  ; typedef IdMap_t::key_type key_type;  ; typedef IdMap_t::mapped_type mapped_type;  ; typedef IdMap_t::size_type size_type;  . Public Member Functions; void Add (const key_type &key, mapped_type &obj);  ; mapped_type Find (const key_type &key) const;  ; void Print ();  ; void Remove (const key_type &key);  . Private Attributes; IdMap_t fMap;  . Member Typedef Documentation. ◆ const_iterator. typedef IdMap_t::const_iterator ROOT::TMapTypeToClassRec::const_iterator. Definition at line 151 of file TClassTable.cxx. ◆ IdMap_t. typedef std::map<std::string, TClassRec*> ROOT::TMapTypeToClassRec::IdMap_t. Definition at line 149 of file TClassTable.cxx. ◆ key_type. typedef IdMap_t::key_type ROOT::TMapTypeToClassRec::key_type. Definition at line 150 of file TClassTable.cxx. ◆ mapped_type. typedef IdMap_t::mapped_type ROOT::TMapTypeToClassRec::mapped_type. Definition at line 157 of file TClassTable.cxx. ◆ size_type. typedef IdMap_t::size_type ROOT::TMapTypeToClassRec::size_type. Definition at line 152 of file TClassTable.cxx. Member Function Documentation. ◆ Add(). void ROOT::TMapTypeToClassRec::Add ; (; const key_type & ; key, . mapped_type & ; obj . ). inline . Definition at line 164 of file TClassTable.cxx. ◆ Find(). mapped_type ROOT::TMapTypeToClassRec::Find ; (; const key_type & ; key); const. inline . Definition at line 168 of file TClassTable.cxx. ◆ Print(). void ROOT::TMapTypeToClassRec::Print ; (; ). inline . Definition at line 177 of file TClassTable.cxx. ◆ Remove(). void ROOT::TMapTypeToClassRec::Remove ; (; const key_type",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TMapTypeToClassRec.html:80,Guid,Guide,80,doc/master/classROOT_1_1TMapTypeToClassRec.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TMapTypeToClassRec.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TMapTypeToClassRec Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TMapTypeToClassRec Class Reference. . Definition at line 144 of file TClassTable.cxx. Public Types; typedef IdMap_t::const_iterator const_iterator;  ; typedef std::map< std::string, TClassRec * > IdMap_t;  ; typedef IdMap_t::key_type key_type;  ; typedef IdMap_t::mapped_type mapped_type;  ; typedef IdMap_t::size_type size_type;  . Public Member Functions; void Add (const key_type &key, mapped_type &obj);  ; mapped_type Find (const key_type &key) const;  ; void Print ();  ; void Remove (const key_type &key);  . Private Attributes; IdMap_t fMap;  . Member Typedef Documentation. ◆ const_iterator. typedef IdMap_t::const_iterator ROOT::TMapTypeToClassRec::const_iterator. Definition at line 151 of file TClassTable.cxx. ◆ IdMap_t. typedef std::map<std::string, TClassRec*> ROOT::TMapTypeToClassRec::IdMap_t. Definition at line 149 of file TClassTable.cxx. ◆ key_type. typedef IdMap_t::key_type ROOT::TMapTypeToClassRec::key_type. Definition at line 150 of file TClassTable.cxx. ◆ mapped_type. typedef IdMap_t::mapped_type ROOT::TMapTypeToClassRec::mapped_type. Definition at line 157 of file TClassTable.cxx. ◆ size_type. typedef IdMap_t::size_type ROOT::TMapTypeToClassRec::size_type. Definition at line 152 of file TClassTable.cxx. Member Function Documentation. ◆ Add(). void ROOT::TMapTypeToClassRec::Add ; (; const key_type & ; key, . mapped_type & ; obj . ). inline . Definition at line 164 of file TClassTable.cxx. ◆ Find(). mapped_type ROOT::TMapTypeToClassRec::Find ; (; const key_type & ; key); const. inline . Definition at line 168 of file TClassTable.cxx. ◆ Print(). void ROOT::TMapTypeToClassRec::Print ; (; ). inline . Definition at line 177 of file TClassTable.cxx. ◆ Remove(). void ROOT::TMapTypeToClassRec::Remove ; (; const key_type ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TMapTypeToClassRec.html:79,Guid,Guide,79,doc/v632/classROOT_1_1TMapTypeToClassRec.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TMapTypeToClassRec.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TMapTypeToTClass Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TMapTypeToTClass Class Reference. . Definition at line 365 of file TClass.cxx. Public Types; typedef IdMap_t::const_iterator const_iterator;  ; typedef std::map< std::string, TClass * > IdMap_t;  ; typedef IdMap_t::key_type key_type;  ; typedef IdMap_t::mapped_type mapped_type;  ; typedef IdMap_t::size_type size_type;  . Public Member Functions; void Add (const key_type &key, mapped_type &obj);  ; mapped_type Find (const key_type &key) const;  ; void Remove (const key_type &key);  . Private Attributes; IdMap_t fMap;  . Member Typedef Documentation. ◆ const_iterator. typedef IdMap_t::const_iterator ROOT::TMapTypeToTClass::const_iterator. Definition at line 372 of file TClass.cxx. ◆ IdMap_t. typedef std::map<std::string,TClass*> ROOT::TMapTypeToTClass::IdMap_t. Definition at line 370 of file TClass.cxx. ◆ key_type. typedef IdMap_t::key_type ROOT::TMapTypeToTClass::key_type. Definition at line 371 of file TClass.cxx. ◆ mapped_type. typedef IdMap_t::mapped_type ROOT::TMapTypeToTClass::mapped_type. Definition at line 378 of file TClass.cxx. ◆ size_type. typedef IdMap_t::size_type ROOT::TMapTypeToTClass::size_type. Definition at line 373 of file TClass.cxx. Member Function Documentation. ◆ Add(). void ROOT::TMapTypeToTClass::Add ; (; const key_type & ; key, . mapped_type & ; obj . ). inline . Definition at line 385 of file TClass.cxx. ◆ Find(). mapped_type ROOT::TMapTypeToTClass::Find ; (; const key_type & ; key); const. inline . Definition at line 390 of file TClass.cxx. ◆ Remove(). void ROOT::TMapTypeToTClass::Remove ; (; const key_type & ; key). inline . Definition at line 398 of file TClass.cxx. Member Data Documentation. ◆ fMap. IdMap_t ROOT::TMapTypeToTClass::fMap. private . Definition at line 382 of file TClass.cxx. core/meta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TMapTypeToTClass.html:78,Guid,Guide,78,doc/master/classROOT_1_1TMapTypeToTClass.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TMapTypeToTClass.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TMapTypeToTClass Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TMapTypeToTClass Class Reference. . Definition at line 365 of file TClass.cxx. Public Types; typedef IdMap_t::const_iterator const_iterator;  ; typedef std::map< std::string, TClass * > IdMap_t;  ; typedef IdMap_t::key_type key_type;  ; typedef IdMap_t::mapped_type mapped_type;  ; typedef IdMap_t::size_type size_type;  . Public Member Functions; void Add (const key_type &key, mapped_type &obj);  ; mapped_type Find (const key_type &key) const;  ; void Remove (const key_type &key);  . Private Attributes; IdMap_t fMap;  . Member Typedef Documentation. ◆ const_iterator. typedef IdMap_t::const_iterator ROOT::TMapTypeToTClass::const_iterator. Definition at line 372 of file TClass.cxx. ◆ IdMap_t. typedef std::map<std::string,TClass*> ROOT::TMapTypeToTClass::IdMap_t. Definition at line 370 of file TClass.cxx. ◆ key_type. typedef IdMap_t::key_type ROOT::TMapTypeToTClass::key_type. Definition at line 371 of file TClass.cxx. ◆ mapped_type. typedef IdMap_t::mapped_type ROOT::TMapTypeToTClass::mapped_type. Definition at line 378 of file TClass.cxx. ◆ size_type. typedef IdMap_t::size_type ROOT::TMapTypeToTClass::size_type. Definition at line 373 of file TClass.cxx. Member Function Documentation. ◆ Add(). void ROOT::TMapTypeToTClass::Add ; (; const key_type & ; key, . mapped_type & ; obj . ). inline . Definition at line 385 of file TClass.cxx. ◆ Find(). mapped_type ROOT::TMapTypeToTClass::Find ; (; const key_type & ; key); const. inline . Definition at line 390 of file TClass.cxx. ◆ Remove(). void ROOT::TMapTypeToTClass::Remove ; (; const key_type & ; key). inline . Definition at line 398 of file TClass.cxx. Member Data Documentation. ◆ fMap. IdMap_t ROOT::TMapTypeToTClass::fMap. private . Definition at line 382 of file TClass.cxx. core/meta/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TMapTypeToTClass.html:77,Guid,Guide,77,doc/v632/classROOT_1_1TMapTypeToTClass.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TMapTypeToTClass.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TMetaUtils Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT::TMetaUtils Namespace Reference. Namespaces; namespace  AST2SourceTools;  ; namespace  propNames;  . Classes; class  AnnotatedRecordDecl;  ; class  RConstructorType;  ; class  TClingLookupHelper;  ; class  TNormalizedCtxt;  ; class  TNormalizedCtxtImpl;  . Typedefs; typedef void(* CallWriteStreamer_t) (const AnnotatedRecordDecl &cl, const cling::Interpreter &interp, const TNormalizedCtxt &normCtxt, std::ostream &dictStream, bool isAutoStreamer);  ; typedef std::list< RConstructorType > RConstructorTypes;  . Enumerations; enum  DataMemberInfo__ValidArrayIndex_error_code { ;   VALID; , NOT_INT; , NOT_DEF; , IS_PRIVATE; , ;   UNKNOWN. };  ; enum class  EIOCtorCategory : short { kAbsent; , kDefault; , kIOPtrType; , kIORefType; };  . Functions; clang::QualType AddDefaultParameters (clang::QualType instanceType, const cling::Interpreter &interpret, const TNormalizedCtxt &normCtxt);  Add any unspecified template parameters to the class template instance, mentioned anywhere in the type. ;  ; bool BeginsWith (const std::string &theString, const std::string &theSubstring);  ; EIOCtorCategory CheckConstructor (const clang::CXXRecordDecl *, const RConstructorType &, const cling::Interpreter &interp);  Check if class has constructor of provided type - either default or with single argument. ;  ; bool CheckDefaultConstructor (const clang::CXXRecordDecl *, const cling::Interpreter &interp);  Checks if default constructor exists and accessible. ;  ; EIOCtorCategory CheckIOConstructor (const clang::CXXRecordDecl *, const char *, const clang::CXXRecordDecl *, const cling::Interpreter &interp);  Checks IO constructor - must be public and with specified argument. ;  ; bool CheckPublicFuncWithProto (clang::CXXRecordDecl const *, char const *, char const *, const cling::Interpreter ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:76,Guid,Guide,76,doc/master/namespaceROOT_1_1TMetaUtils.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TMetaUtils Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT::TMetaUtils Namespace Reference. Namespaces; namespace  AST2SourceTools;  ; namespace  propNames;  . Classes; class  AnnotatedRecordDecl;  ; class  RConstructorType;  ; class  TClingLookupHelper;  ; class  TNormalizedCtxt;  ; class  TNormalizedCtxtImpl;  . Typedefs; typedef void(* CallWriteStreamer_t) (const AnnotatedRecordDecl &cl, const cling::Interpreter &interp, const TNormalizedCtxt &normCtxt, std::ostream &dictStream, bool isAutoStreamer);  ; typedef std::list< RConstructorType > RConstructorTypes;  . Enumerations; enum  DataMemberInfo__ValidArrayIndex_error_code { ;   VALID; , NOT_INT; , NOT_DEF; , IS_PRIVATE; , ;   UNKNOWN. };  ; enum class  EIOCtorCategory : short { kAbsent; , kDefault; , kIOPtrType; , kIORefType; };  . Functions; clang::QualType AddDefaultParameters (clang::QualType instanceType, const cling::Interpreter &interpret, const TNormalizedCtxt &normCtxt);  Add any unspecified template parameters to the class template instance, mentioned anywhere in the type. ;  ; bool BeginsWith (const std::string &theString, const std::string &theSubstring);  ; EIOCtorCategory CheckConstructor (const clang::CXXRecordDecl *, const RConstructorType &, const cling::Interpreter &interp);  Check if class has constructor of provided type - either default or with single argument. ;  ; bool CheckDefaultConstructor (const clang::CXXRecordDecl *, const cling::Interpreter &interp);  Checks if default constructor exists and accessible. ;  ; EIOCtorCategory CheckIOConstructor (const clang::CXXRecordDecl *, const char *, const clang::CXXRecordDecl *, const cling::Interpreter &interp);  Checks IO constructor - must be public and with specified argument. ;  ; bool CheckPublicFuncWithProto (clang::CXXRecordDecl const *, char const *, char const *, const cling::Interpreter &",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:75,Guid,Guide,75,doc/v632/namespaceROOT_1_1TMetaUtils.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TMetaUtils::TClingLookupHelper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TMetaUtils::TClingLookupHelper Class Reference. . Definition at line 160 of file TClingUtils.h. Public Types; typedef bool(* AutoParse_t) (const char *name);  ; typedef bool(* ExistingTypeCheck_t) (const std::string &tname, std::string &result);  . Public Member Functions;  TClingLookupHelper (cling::Interpreter &interpreter, TNormalizedCtxt &normCtxt, ExistingTypeCheck_t existingTypeCheck, AutoParse_t autoParse, bool *shuttingDownPtr, const int *pgDebug=nullptr);  ; virtual ~TClingLookupHelper ();  ; bool ExistingTypeCheck (const std::string &tname, std::string &result) override;  Helper routine to ry hard to avoid looking up in the Cling database as this could enduce an unwanted autoparsing. ;  ; void GetPartiallyDesugaredName (std::string &nameLong) override;  ; bool GetPartiallyDesugaredNameWithScopeHandling (const std::string &tname, std::string &result, bool dropstd=true) override;  We assume that we have a simple type: [const] typename[*&][const]. ;  ; bool IsAlreadyPartiallyDesugaredName (const std::string &nondef, const std::string &nameLong) override;  ; bool IsDeclaredScope (const std::string &base, bool &isInlined) override;  ; void ShuttingDownSignal () override;  ;  Public Member Functions inherited from TClassEdit::TInterpreterLookupHelper;  TInterpreterLookupHelper ();  ; virtual ~TInterpreterLookupHelper ();  . Private Member Functions; bool WantDiags () const;  . Private Attributes; AutoParse_t fAutoParse;  ; ExistingTypeCheck_t fExistingTypeCheck;  ; cling::Interpreter * fInterpreter;  ; bool * fInterpreterIsShuttingDownPtr;  ; TNormalizedCtxt * fNormalizedCtxt;  ; const int * fPDebug;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html:92,Guid,Guide,92,doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TMetaUtils::TNormalizedCtxt Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TMetaUtils::TNormalizedCtxt Class Reference. . Definition at line 138 of file TClingUtils.h. Public Types; using Config_t = cling::utils::Transform::Config;  ; using TemplPtrIntMap_t = std::map< const clang::ClassTemplateDecl *, int >;  ; using TypesCont_t = std::set< const clang::Type * >;  . Public Member Functions;  TNormalizedCtxt (const cling::LookupHelper &lh);  ;  TNormalizedCtxt (const TNormalizedCtxt &other);  ;  ~TNormalizedCtxt ();  ; void AddTemplAndNargsToKeep (const clang::ClassTemplateDecl *templ, unsigned int i);  ; const Config_t & GetConfig () const;  ; int GetNargsToKeep (const clang::ClassTemplateDecl *templ) const;  ; const TemplPtrIntMap_t GetTemplNargsToKeepMap () const;  ; const TypesCont_t & GetTypeWithAlternative () const;  ; void keepTypedef (const cling::LookupHelper &lh, const char *name, bool replace=false);  . Private Attributes; TNormalizedCtxtImpl * fImpl;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/core/clingutils/res/TClingUtils.h>; Member Typedef Documentation. ◆ Config_t. using ROOT::TMetaUtils::TNormalizedCtxt::Config_t = cling::utils::Transform::Config. Definition at line 142 of file TClingUtils.h. ◆ TemplPtrIntMap_t. using ROOT::TMetaUtils::TNormalizedCtxt::TemplPtrIntMap_t = std::map<const clang::ClassTemplateDecl*, int>. Definition at line 144 of file TClingUtils.h. ◆ TypesCont_t. using ROOT::TMetaUtils::TNormalizedCtxt::TypesCont_t = std::set<const clang::Type*>. Definition at line 143 of file TClingUtils.h. Constructor & Destructor Documentation. ◆ TNormalizedCtxt() [1/2]. ROOT::TMetaUtils::TNormalizedCtxt::TNormalizedCtxt ; (; const cling::LookupHelper & ; lh). Definition at line 285 of file TClingUtils.cxx. ◆ TNormalizedCtxt() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TMetaUtils_1_1TNormalizedCtxt.html:89,Guid,Guide,89,doc/master/classROOT_1_1TMetaUtils_1_1TNormalizedCtxt.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TMetaUtils_1_1TNormalizedCtxt.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TModuleGenerator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TModuleGenerator Class Reference. . Definition at line 36 of file TModuleGenerator.h. Public Types; enum  ESourceFileKind { kSFKNotC; , kSFKHeader; , kSFKSource; , kSFKLinkdef; };  . Public Member Functions;  TModuleGenerator (clang::CompilerInstance *CI, bool inlineHeader, const std::string &shLibFileName, bool isInPCH);  ;  ~TModuleGenerator ();  ; const std::string & GetContentName () const;  ; const std::string & GetDemangledDictionaryName () const;  ; const std::string & GetDictionaryName () const;  ; int GetErrorCount () const;  ; const std::vector< std::string > & GetHeaders () const;  ; const std::vector< std::string > & GetIncludePaths () const;  ; const std::string & GetModuleDirName () const;  ; const std::string & GetModuleFileName () const;  ; const std::string & GetUmbrellaName () const;  ; bool IsPCH () const;  ; void ParseArgs (const std::vector< std::string > &args);  Parse -I -D -U headers.h SomethingLinkdef.h. ;  ; void WriteContentHeader (std::ostream &out) const;  Write a header file describing the content of this module through a series of variables inside the namespace ROOT::Dict::[DictionaryName]. ;  ; std::ostream & WritePPDefines (std::ostream &out) const;  Write #ifndef FOO # define FOO=bar #endif ;  ; std::ostream & WritePPUndefines (std::ostream &out) const;  Write #ifdef FOO # undef FOO #endif ;  ; void WriteRegistrationSource (std::ostream &out, const std::string &fwdDeclnArgsToKeepString, const std::string &headersClassesMapString, const std::string &fwdDeclsString, const std::string &extraIncludes, bool hasCxxModule) const;  ; void WriteUmbrellaHeader (std::ostream &out) const;  Write a header file pulling in the content of this module through a seri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TModuleGenerator.html:78,Guid,Guide,78,doc/master/classROOT_1_1TModuleGenerator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TModuleGenerator.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TModuleGenerator Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TModuleGenerator Class Reference. . Definition at line 36 of file TModuleGenerator.h. Public Types; enum  ESourceFileKind { kSFKNotC; , kSFKHeader; , kSFKSource; , kSFKLinkdef; };  . Public Member Functions;  TModuleGenerator (clang::CompilerInstance *CI, bool inlineHeader, const std::string &shLibFileName, bool isInPCH);  ;  ~TModuleGenerator ();  ; const std::string & GetContentName () const;  ; const std::string & GetDemangledDictionaryName () const;  ; const std::string & GetDictionaryName () const;  ; int GetErrorCount () const;  ; const std::vector< std::string > & GetHeaders () const;  ; const std::vector< std::string > & GetIncludePaths () const;  ; const std::string & GetModuleDirName () const;  ; const std::string & GetModuleFileName () const;  ; const std::string & GetUmbrellaName () const;  ; bool IsPCH () const;  ; void ParseArgs (const std::vector< std::string > &args);  Parse -I -D -U headers.h SomethingLinkdef.h. ;  ; void WriteContentHeader (std::ostream &out) const;  Write a header file describing the content of this module through a series of variables inside the namespace ROOT::Dict::[DictionaryName]. ;  ; std::ostream & WritePPDefines (std::ostream &out) const;  Write #ifndef FOO # define FOO=bar #endif ;  ; std::ostream & WritePPUndefines (std::ostream &out) const;  Write #ifdef FOO # undef FOO #endif ;  ; void WriteRegistrationSource (std::ostream &out, const std::string &fwdDeclnArgsToKeepString, const std::string &headersClassesMapString, const std::string &fwdDeclsString, const std::string &extraIncludes, bool hasCxxModule) const;  ; void WriteUmbrellaHeader (std::ostream &out) const;  Write a header file pulling in the content of this module through a serie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TModuleGenerator.html:77,Guid,Guide,77,doc/v632/classROOT_1_1TModuleGenerator.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TModuleGenerator.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TNumSlots Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; Friends |; List of all members ; ROOT::TNumSlots Class Reference. ; Defines the number of threads in some of ROOT's interfaces. ; Definition at line 42 of file TThreadedObject.hxx. Public Attributes; unsigned int fVal;  . Friends; bool operator!= (TNumSlots lhs, TNumSlots rhs);  ; bool operator== (TNumSlots lhs, TNumSlots rhs);  . #include <ROOT/TThreadedObject.hxx>; Friends And Related Symbol Documentation. ◆ operator!=. bool operator!= ; (; TNumSlots ; lhs, . TNumSlots ; rhs . ). friend . Definition at line 45 of file TThreadedObject.hxx. ◆ operator==. bool operator== ; (; TNumSlots ; lhs, . TNumSlots ; rhs . ). friend . Definition at line 44 of file TThreadedObject.hxx. Member Data Documentation. ◆ fVal. unsigned int ROOT::TNumSlots::fVal. Definition at line 43 of file TThreadedObject.hxx. Collaboration diagram for ROOT::TNumSlots:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this class was generated from the following file:; core/thread/inc/ROOT/TThreadedObject.hxx. ROOTTNumSlots. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1TNumSlots.html:71,Guid,Guide,71,doc/master/structROOT_1_1TNumSlots.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1TNumSlots.html,2,['Guid'],['Guide']
Usability,". ROOT: ROOT::TNumSlots Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; Friends |; List of all members ; ROOT::TNumSlots Class Reference. ; Defines the number of threads in some of ROOT's interfaces. ; Definition at line 42 of file TThreadedObject.hxx. Public Attributes; unsigned int fVal;  . Friends; bool operator!= (TNumSlots lhs, TNumSlots rhs);  ; bool operator== (TNumSlots lhs, TNumSlots rhs);  . #include <ROOT/TThreadedObject.hxx>; Friends And Related Symbol Documentation. ◆ operator!=. bool operator!= ; (; TNumSlots ; lhs, . TNumSlots ; rhs . ). friend . Definition at line 45 of file TThreadedObject.hxx. ◆ operator==. bool operator== ; (; TNumSlots ; lhs, . TNumSlots ; rhs . ). friend . Definition at line 44 of file TThreadedObject.hxx. Member Data Documentation. ◆ fVal. unsigned int ROOT::TNumSlots::fVal. Definition at line 43 of file TThreadedObject.hxx. Collaboration diagram for ROOT::TNumSlots:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this class was generated from the following file:; core/thread/inc/ROOT/TThreadedObject.hxx. ROOTTNumSlots. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/structROOT_1_1TNumSlots.html:70,Guid,Guide,70,doc/v632/structROOT_1_1TNumSlots.html,https://root.cern,https://root.cern/doc/v632/structROOT_1_1TNumSlots.html,2,['Guid'],['Guide']
Usability,". ROOT: ROOT::TProcessExecutor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TProcessExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. . ROOT::TProcessExecutor::Map; This class inherits its interfaces from ROOT::TExecutor; . The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of fNWorkers workers; the number of workers can be passed to the constructor or set via SetNWorkers. It typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TProcessExecutor never deletes what it returns, it simply forgets it.; Note: that the usage of ROOT::TProcessExecutor::Map is indicated only when the task to be executed takes more than a few seconds, otherwise the overhead introduced by Map will outrun the benefits of parallel execution on most machines.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:78,Guid,Guide,78,doc/master/classROOT_1_1TProcessExecutor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: ROOT::TProcessExecutor Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TProcessExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. . ROOT::TProcessExecutor::Map; This class inherits its interfaces from ROOT::TExecutor; . The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of fNWorkers workers; the number of workers can be passed to the constructor or set via SetNWorkers. It typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TProcessExecutor never deletes what it returns, it simply forgets it.; Note: that the usage of ROOT::TProcessExecutor::Map is indicated only when the task to be executed takes more than a few seconds, otherwise the overhead introduced by Map will outrun the benefits of parallel execution on most machines.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:77,Guid,Guide,77,doc/v632/classROOT_1_1TProcessExecutor.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: ROOT::TRWMutexImp< MutexT, RecurseCountsT > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::TRWMutexImp< MutexT, RecurseCountsT > Class Template Reference. ; template<typename MutexT, typename RecurseCountsT = ROOT::Internal::RecurseCounts>; class ROOT::TRWMutexImp< MutexT, RecurseCountsT >; Definition at line 22 of file TRWMutexImp.h. Public Member Functions; void Apply (std::unique_ptr< StateDelta > &&delta) override;  Apply the mutex state delta. ;  ; TVirtualRWMutex * Factory (Bool_t=kFALSE) override;  Create mutex and return pointer to it. ;  ; std::unique_ptr< State > GetStateBefore () override;  Get the mutex state before the current lock was taken. ;  ; TClass * IsA () const override;  ; Hint_t * ReadLock () override;  Take the Read Lock of the mutex. ;  ; void ReadUnLock (Hint_t *) override;  Release the read lock of the mutex. ;  ; std::unique_ptr< StateDelta > Rewind (const State &earlierState) override;  Restore the mutex state to state. ;  ; void Streamer (TBuffer &R__b) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Hint_t * WriteLock () override;  Take the Write Lock of the mutex. ;  ; void WriteUnLock (Hint_t *) override;  Release the read lock of the mutex. ;  ;  Public Member Functions inherited from ROOT::TVirtualRWMutex; Int_t CleanUp () override;  ; TClass * IsA () const override;  ; Int_t Lock () override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TryLock () override;  ; Int_t UnLock () override;  ;  Public Member Functions inherited from TVirtualMutex;  TVirtualMutex (Bool_t=kFALSE);  ; virtual ~TVirtualMutex ();  ; Int_t Acquire ();  ; Int_t Release ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Funct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TRWMutexImp.html:108,Guid,Guide,108,doc/master/classROOT_1_1TRWMutexImp.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TRWMutexImp.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TRWMutexImp< MutexT, RecurseCountsT > Class Template Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::TRWMutexImp< MutexT, RecurseCountsT > Class Template Reference. ; template<typename MutexT, typename RecurseCountsT = ROOT::Internal::RecurseCounts>; class ROOT::TRWMutexImp< MutexT, RecurseCountsT >; Definition at line 22 of file TRWMutexImp.h. Public Member Functions; void Apply (std::unique_ptr< StateDelta > &&delta) override;  Apply the mutex state delta. ;  ; TVirtualRWMutex * Factory (Bool_t=kFALSE) override;  Create mutex and return pointer to it. ;  ; std::unique_ptr< State > GetStateBefore () override;  Get the mutex state before the current lock was taken. ;  ; TClass * IsA () const override;  ; Hint_t * ReadLock () override;  Take the Read Lock of the mutex. ;  ; void ReadUnLock (Hint_t *) override;  Release the read lock of the mutex. ;  ; std::unique_ptr< StateDelta > Rewind (const State &earlierState) override;  Restore the mutex state to state. ;  ; void Streamer (TBuffer &R__b) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Hint_t * WriteLock () override;  Take the Write Lock of the mutex. ;  ; void WriteUnLock (Hint_t *) override;  Release the read lock of the mutex. ;  ;  Public Member Functions inherited from ROOT::TVirtualRWMutex; Int_t CleanUp () override;  ; TClass * IsA () const override;  ; Int_t Lock () override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TryLock () override;  ; Int_t UnLock () override;  ;  Public Member Functions inherited from TVirtualMutex;  TVirtualMutex (Bool_t=kFALSE);  ; virtual ~TVirtualMutex ();  ; Int_t Acquire ();  ; Int_t Release ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TRWMutexImp.html:107,Guid,Guide,107,doc/v632/classROOT_1_1TRWMutexImp.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TRWMutexImp.html,1,['Guid'],['Guide']
Usability,. ROOT: ROOT::TRWSpinLock Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TRWSpinLock Class Reference. . Definition at line 22 of file TRWSpinLock.hxx. Public Member Functions;  TRWSpinLock ();  Regular constructor. ;  ; void ReadLock ();  Acquire the lock in read mode. ;  ; void ReadUnLock ();  Release the lock in read mode. ;  ; void WriteLock ();  Acquire the lock in write mode. ;  ; void WriteUnLock ();  Release the lock in write mode. ;  . Private Attributes; std::condition_variable_any fCond;  ! RWlock internal condition variable ;  ; ROOT::TSpinMutex fMutex;  ! RWlock internal mutex ;  ; std::atomic< int > fReaderReservation;  ! A reader wants access ;  ; std::atomic< int > fReaders;  ! Number of readers ;  ; std::atomic< bool > fWriter;  ! Is there a writer? ;  ; std::atomic< int > fWriterReservation;  ! A writer wants access ;  . #include <ROOT/TRWSpinLock.hxx>; Constructor & Destructor Documentation. ◆ TRWSpinLock(). ROOT::TRWSpinLock::TRWSpinLock ; (; ). inline . Regular constructor. ; Definition at line 34 of file TRWSpinLock.hxx. Member Function Documentation. ◆ ReadLock(). void TRWSpinLock::ReadLock ; (; ). Acquire the lock in read mode. ; Definition at line 35 of file TRWSpinLock.cxx. ◆ ReadUnLock(). void TRWSpinLock::ReadUnLock ; (; ). Release the lock in read mode. ; Definition at line 61 of file TRWSpinLock.cxx. ◆ WriteLock(). void TRWSpinLock::WriteLock ; (; ). Acquire the lock in write mode. ; Definition at line 77 of file TRWSpinLock.cxx. ◆ WriteUnLock(). void TRWSpinLock::WriteUnLock ; (; ). Release the lock in write mode. ; Definition at line 102 of file TRWSpinLock.cxx. Member Data Documentation. ◆ fCond. std::condition_variable_any ROOT::TRWSpinLock::fCond. private . ! RWlock internal condition variable ; Definition at line 29 of file TRWSpinLock.hxx. ◆ fMutex. ROOT::TSpinMutex ROOT::TRWSpinLock,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TRWSpinLock.html:73,Guid,Guide,73,doc/master/classROOT_1_1TRWSpinLock.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TRWSpinLock.html,1,['Guid'],['Guide']
Usability,. ROOT: ROOT::TRWSpinLock Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TRWSpinLock Class Reference. . Definition at line 22 of file TRWSpinLock.hxx. Public Member Functions;  TRWSpinLock ();  Regular constructor. ;  ; void ReadLock ();  Acquire the lock in read mode. ;  ; void ReadUnLock ();  Release the lock in read mode. ;  ; void WriteLock ();  Acquire the lock in write mode. ;  ; void WriteUnLock ();  Release the lock in write mode. ;  . Private Attributes; std::condition_variable_any fCond;  ! RWlock internal condition variable ;  ; ROOT::TSpinMutex fMutex;  ! RWlock internal mutex ;  ; std::atomic< int > fReaderReservation;  ! A reader wants access ;  ; std::atomic< int > fReaders;  ! Number of readers ;  ; std::atomic< bool > fWriter;  ! Is there a writer? ;  ; std::atomic< int > fWriterReservation;  ! A writer wants access ;  . #include <ROOT/TRWSpinLock.hxx>; Constructor & Destructor Documentation. ◆ TRWSpinLock(). ROOT::TRWSpinLock::TRWSpinLock ; (; ). inline . Regular constructor. ; Definition at line 34 of file TRWSpinLock.hxx. Member Function Documentation. ◆ ReadLock(). void TRWSpinLock::ReadLock ; (; ). Acquire the lock in read mode. ; Definition at line 35 of file TRWSpinLock.cxx. ◆ ReadUnLock(). void TRWSpinLock::ReadUnLock ; (; ). Release the lock in read mode. ; Definition at line 61 of file TRWSpinLock.cxx. ◆ WriteLock(). void TRWSpinLock::WriteLock ; (; ). Acquire the lock in write mode. ; Definition at line 77 of file TRWSpinLock.cxx. ◆ WriteUnLock(). void TRWSpinLock::WriteUnLock ; (; ). Release the lock in write mode. ; Definition at line 102 of file TRWSpinLock.cxx. Member Data Documentation. ◆ fCond. std::condition_variable_any ROOT::TRWSpinLock::fCond. private . ! RWlock internal condition variable ; Definition at line 29 of file TRWSpinLock.hxx. ◆ fMutex. ROOT::TSpinMutex ROOT::TRWSpinLock:,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TRWSpinLock.html:72,Guid,Guide,72,doc/v632/classROOT_1_1TRWSpinLock.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TRWSpinLock.html,1,['Guid'],['Guide']
Usability,. ROOT: ROOT::TRWSpinLockReadGuard Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TRWSpinLockReadGuard Class Reference. . Definition at line 42 of file TRWSpinLock.hxx. Public Member Functions;  TRWSpinLockReadGuard (TRWSpinLock &lock);  ;  ~TRWSpinLockReadGuard ();  . Private Attributes; TRWSpinLock & fLock;  . #include <ROOT/TRWSpinLock.hxx>; Constructor & Destructor Documentation. ◆ TRWSpinLockReadGuard(). TRWSpinLockReadGuard::TRWSpinLockReadGuard ; (; TRWSpinLock & ; lock). Definition at line 114 of file TRWSpinLock.cxx. ◆ ~TRWSpinLockReadGuard(). TRWSpinLockReadGuard::~TRWSpinLockReadGuard ; (; ). Definition at line 119 of file TRWSpinLock.cxx. Member Data Documentation. ◆ fLock. TRWSpinLock& ROOT::TRWSpinLockReadGuard::fLock. private . Definition at line 44 of file TRWSpinLock.hxx. Libraries for ROOT::TRWSpinLockReadGuard:. [legend]; The documentation for this class was generated from the following files:; core/thread/inc/ROOT/TRWSpinLock.hxx; core/thread/src/TRWSpinLock.cxx. ROOTTRWSpinLockReadGuard. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TRWSpinLockReadGuard.html:82,Guid,Guide,82,doc/master/classROOT_1_1TRWSpinLockReadGuard.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TRWSpinLockReadGuard.html,2,['Guid'],['Guide']
Usability,. ROOT: ROOT::TRWSpinLockReadGuard Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TRWSpinLockReadGuard Class Reference. . Definition at line 42 of file TRWSpinLock.hxx. Public Member Functions;  TRWSpinLockReadGuard (TRWSpinLock &lock);  ;  ~TRWSpinLockReadGuard ();  . Private Attributes; TRWSpinLock & fLock;  . #include <ROOT/TRWSpinLock.hxx>; Constructor & Destructor Documentation. ◆ TRWSpinLockReadGuard(). TRWSpinLockReadGuard::TRWSpinLockReadGuard ; (; TRWSpinLock & ; lock). Definition at line 114 of file TRWSpinLock.cxx. ◆ ~TRWSpinLockReadGuard(). TRWSpinLockReadGuard::~TRWSpinLockReadGuard ; (; ). Definition at line 119 of file TRWSpinLock.cxx. Member Data Documentation. ◆ fLock. TRWSpinLock& ROOT::TRWSpinLockReadGuard::fLock. private . Definition at line 44 of file TRWSpinLock.hxx. Libraries for ROOT::TRWSpinLockReadGuard:. [legend]; The documentation for this class was generated from the following files:; core/thread/inc/ROOT/TRWSpinLock.hxx; core/thread/src/TRWSpinLock.cxx. ROOTTRWSpinLockReadGuard. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TRWSpinLockReadGuard.html:81,Guid,Guide,81,doc/v632/classROOT_1_1TRWSpinLockReadGuard.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TRWSpinLockReadGuard.html,2,['Guid'],['Guide']
Usability,. ROOT: ROOT::TRWSpinLockWriteGuard Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TRWSpinLockWriteGuard Class Reference. . Definition at line 51 of file TRWSpinLock.hxx. Public Member Functions;  TRWSpinLockWriteGuard (TRWSpinLock &lock);  ;  ~TRWSpinLockWriteGuard ();  . Private Attributes; TRWSpinLock & fLock;  . #include <ROOT/TRWSpinLock.hxx>; Constructor & Destructor Documentation. ◆ TRWSpinLockWriteGuard(). TRWSpinLockWriteGuard::TRWSpinLockWriteGuard ; (; TRWSpinLock & ; lock). Definition at line 124 of file TRWSpinLock.cxx. ◆ ~TRWSpinLockWriteGuard(). TRWSpinLockWriteGuard::~TRWSpinLockWriteGuard ; (; ). Definition at line 129 of file TRWSpinLock.cxx. Member Data Documentation. ◆ fLock. TRWSpinLock& ROOT::TRWSpinLockWriteGuard::fLock. private . Definition at line 53 of file TRWSpinLock.hxx. Libraries for ROOT::TRWSpinLockWriteGuard:. [legend]; The documentation for this class was generated from the following files:; core/thread/inc/ROOT/TRWSpinLock.hxx; core/thread/src/TRWSpinLock.cxx. ROOTTRWSpinLockWriteGuard. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TRWSpinLockWriteGuard.html:83,Guid,Guide,83,doc/master/classROOT_1_1TRWSpinLockWriteGuard.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TRWSpinLockWriteGuard.html,2,['Guid'],['Guide']
Usability,. ROOT: ROOT::TRWSpinLockWriteGuard Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TRWSpinLockWriteGuard Class Reference. . Definition at line 51 of file TRWSpinLock.hxx. Public Member Functions;  TRWSpinLockWriteGuard (TRWSpinLock &lock);  ;  ~TRWSpinLockWriteGuard ();  . Private Attributes; TRWSpinLock & fLock;  . #include <ROOT/TRWSpinLock.hxx>; Constructor & Destructor Documentation. ◆ TRWSpinLockWriteGuard(). TRWSpinLockWriteGuard::TRWSpinLockWriteGuard ; (; TRWSpinLock & ; lock). Definition at line 124 of file TRWSpinLock.cxx. ◆ ~TRWSpinLockWriteGuard(). TRWSpinLockWriteGuard::~TRWSpinLockWriteGuard ; (; ). Definition at line 129 of file TRWSpinLock.cxx. Member Data Documentation. ◆ fLock. TRWSpinLock& ROOT::TRWSpinLockWriteGuard::fLock. private . Definition at line 53 of file TRWSpinLock.hxx. Libraries for ROOT::TRWSpinLockWriteGuard:. [legend]; The documentation for this class was generated from the following files:; core/thread/inc/ROOT/TRWSpinLock.hxx; core/thread/src/TRWSpinLock.cxx. ROOTTRWSpinLockWriteGuard. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TRWSpinLockWriteGuard.html:82,Guid,Guide,82,doc/v632/classROOT_1_1TRWSpinLockWriteGuard.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TRWSpinLockWriteGuard.html,2,['Guid'],['Guide']
Usability,. ROOT: ROOT::TReadLockGuard Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TReadLockGuard Class Reference. . Definition at line 112 of file TVirtualRWMutex.h. Public Member Functions;  TReadLockGuard (TVirtualRWMutex *mutex);  ;  ~TReadLockGuard ();  ; TClass * IsA () const;  ; void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions;  TReadLockGuard (const TReadLockGuard &)=delete;  ; TReadLockGuard & operator= (const TReadLockGuard &)=delete;  . Private Attributes; TVirtualRWMutex::Hint_t * fHint;  ; TVirtualRWMutex *const fMutex;  . #include <TVirtualRWMutex.h>; Constructor & Destructor Documentation. ◆ TReadLockGuard() [1/2]. ROOT::TReadLockGuard::TReadLockGuard ; (; const TReadLockGuard & ; ). privatedelete . ◆ TReadLockGuard() [2/2]. ROOT::TReadLockGuard::TReadLockGuard ; (; TVirtualRWMutex * ; mutex). inline . Definition at line 122 of file TVirtualRWMutex.h. ◆ ~TReadLockGuard(). ROOT::TReadLockGuard::~TReadLockGuard ; (; ). inline . Definition at line 126 of file TVirtualRWMutex.h. Member Function Documentation. ◆ Class(). static TClass * ROOT::TReadLockGuard::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::TReadLockGuard::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::TReadLockGuard::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 128 of file TVirtualRWMutex.h. ◆ DeclFileName(). static const char * ROOT::TReadLockGuard::DeclFileName ; (; ). i,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TReadLockGuard.html:76,Guid,Guide,76,doc/master/classROOT_1_1TReadLockGuard.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TReadLockGuard.html,1,['Guid'],['Guide']
Usability,. ROOT: ROOT::TReadLockGuard Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TReadLockGuard Class Reference. . Definition at line 112 of file TVirtualRWMutex.h. Public Member Functions;  TReadLockGuard (TVirtualRWMutex *mutex);  ;  ~TReadLockGuard ();  ; TClass * IsA () const;  ; void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions;  TReadLockGuard (const TReadLockGuard &)=delete;  ; TReadLockGuard & operator= (const TReadLockGuard &)=delete;  . Private Attributes; TVirtualRWMutex::Hint_t * fHint;  ; TVirtualRWMutex *const fMutex;  . #include <TVirtualRWMutex.h>; Constructor & Destructor Documentation. ◆ TReadLockGuard() [1/2]. ROOT::TReadLockGuard::TReadLockGuard ; (; const TReadLockGuard & ; ). privatedelete . ◆ TReadLockGuard() [2/2]. ROOT::TReadLockGuard::TReadLockGuard ; (; TVirtualRWMutex * ; mutex). inline . Definition at line 122 of file TVirtualRWMutex.h. ◆ ~TReadLockGuard(). ROOT::TReadLockGuard::~TReadLockGuard ; (; ). inline . Definition at line 126 of file TVirtualRWMutex.h. Member Function Documentation. ◆ Class(). static TClass * ROOT::TReadLockGuard::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::TReadLockGuard::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::TReadLockGuard::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 128 of file TVirtualRWMutex.h. ◆ DeclFileName(). static const char * ROOT::TReadLockGuard::DeclFileName ; (; ). in,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TReadLockGuard.html:75,Guid,Guide,75,doc/v632/classROOT_1_1TReadLockGuard.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TReadLockGuard.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TReentrantRWLock< MutexT, RecurseCountsT > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TReentrantRWLock< MutexT, RecurseCountsT > Class Template Reference. ; template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts>; class ROOT::TReentrantRWLock< MutexT, RecurseCountsT >; Definition at line 279 of file TReentrantRWLock.hxx. Public Types; using State = TVirtualRWMutex::State;  ; using StateDelta = TVirtualRWMutex::StateDelta;  . Public Member Functions;  TReentrantRWLock ();  Regular constructor. ;  ; void Apply (std::unique_ptr< StateDelta > &&delta);  Re-apply a delta. ;  ; std::unique_ptr< State > GetStateBefore ();  Get the lock state before the most recent write lock was taken. ;  ; TVirtualRWMutex::Hint_t * ReadLock ();  Acquire the lock in read mode. ;  ; void ReadUnLock (TVirtualRWMutex::Hint_t *);  Release the lock in read mode. ;  ; std::unique_ptr< StateDelta > Rewind (const State &earlierState);  Rewind to an earlier mutex state, returning the delta. ;  ; TVirtualRWMutex::Hint_t * WriteLock ();  Acquire the lock in write mode. ;  ; void WriteUnLock (TVirtualRWMutex::Hint_t *);  Release the lock in write mode. ;  . Private Member Functions; void AssertReadCountLocIsFromCurrentThread (const size_t *presumedLocalReadersCount);  Assert that presumedLocalReadersCount really matches the local read count. ;  . Private Attributes; std::condition_variable_any fCond;  ! RWlock internal condition variable ;  ; MutexT fMutex;  ! RWlock internal mutex ;  ; std::atomic< int > fReaderReservation;  ! A reader wants access ;  ; std::atomic< int > fReaders;  ! Number of readers ;  ; RecurseCountsT fRecurseCounts;  ! Trackers for re-entry in the lock by the same thread. ;  ; std::atomic< bool > fWriter;  ! Is there a wri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TReentrantRWLock.html:113,Guid,Guide,113,doc/master/classROOT_1_1TReentrantRWLock.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TReentrantRWLock.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TReentrantRWLock< MutexT, RecurseCountsT > Class Template Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TReentrantRWLock< MutexT, RecurseCountsT > Class Template Reference. ; template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts>; class ROOT::TReentrantRWLock< MutexT, RecurseCountsT >; Definition at line 279 of file TReentrantRWLock.hxx. Public Types; using State = TVirtualRWMutex::State;  ; using StateDelta = TVirtualRWMutex::StateDelta;  . Public Member Functions;  TReentrantRWLock ();  Regular constructor. ;  ; void Apply (std::unique_ptr< StateDelta > &&delta);  Re-apply a delta. ;  ; std::unique_ptr< State > GetStateBefore ();  Get the lock state before the most recent write lock was taken. ;  ; TVirtualRWMutex::Hint_t * ReadLock ();  Acquire the lock in read mode. ;  ; void ReadUnLock (TVirtualRWMutex::Hint_t *);  Release the lock in read mode. ;  ; std::unique_ptr< StateDelta > Rewind (const State &earlierState);  Rewind to an earlier mutex state, returning the delta. ;  ; TVirtualRWMutex::Hint_t * WriteLock ();  Acquire the lock in write mode. ;  ; void WriteUnLock (TVirtualRWMutex::Hint_t *);  Release the lock in write mode. ;  . Private Member Functions; void AssertReadCountLocIsFromCurrentThread (const size_t *presumedLocalReadersCount);  Assert that presumedLocalReadersCount really matches the local read count. ;  . Private Attributes; std::condition_variable_any fCond;  ! RWlock internal condition variable ;  ; MutexT fMutex;  ! RWlock internal mutex ;  ; std::atomic< int > fReaderReservation;  ! A reader wants access ;  ; std::atomic< int > fReaders;  ! Number of readers ;  ; RecurseCountsT fRecurseCounts;  ! Trackers for re-entry in the lock by the same thread. ;  ; std::atomic< bool > fWriter;  ! Is there a writ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html:112,Guid,Guide,112,doc/v632/classROOT_1_1TReentrantRWLock.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TSchemaRule Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; ROOT::TSchemaRule Class Reference. . Definition at line 19 of file TSchemaRule.h. Classes; class  TSources;  . Public Types; typedef void(* ReadFuncPtr_t) (char *, TVirtualObject *);  ; typedef void(* ReadRawFuncPtr_t) (char *, TBuffer &);  ; enum  RuleType_t { kReadRule = 0; , kReadRawRule = 1; , kNone = 99999; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSchemaRule ();  Default Constructor. ;  ;  TSchemaRule (const TSchemaRule &rhs);  Copy Constructor. ;  ; virtual ~TSchemaRule ();  Destructor. ;  ; void AsString (TString &out, const char *options="""") const;  Add to the string 'out' the string representation of the rule. ;  ; void Clear (Option_t *="""") override;  Zero out this rule object. ;  ; Bool_t Conflicts (const TSchemaRule *rule) const;  Check if this rule conflicts with the given one. ;  ; const char * GetAttributes () const;  Get the attributes code of this rule. ;  ; const char * GetCode () const;  Get the source code of this rule. ;  ; Bool_t GetEmbed () const;  Return true if this rule should be saved in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TSchemaRule.html:73,Guid,Guide,73,doc/master/classROOT_1_1TSchemaRule.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSchemaRule.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TSchemaRule Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; ROOT::TSchemaRule Class Reference. . Definition at line 19 of file TSchemaRule.h. Classes; class  TSources;  . Public Types; typedef void(* ReadFuncPtr_t) (char *, TVirtualObject *);  ; typedef void(* ReadRawFuncPtr_t) (char *, TBuffer &);  ; enum  RuleType_t { kReadRule = 0; , kReadRawRule = 1; , kNone = 99999; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSchemaRule ();  Default Constructor. ;  ;  TSchemaRule (const TSchemaRule &rhs);  Copy Constructor. ;  ; virtual ~TSchemaRule ();  Destructor. ;  ; void AsString (TString &out, const char *options="""") const;  Add to the string 'out' the string representation of the rule. ;  ; void Clear (Option_t *="""") override;  Zero out this rule object. ;  ; Bool_t Conflicts (const TSchemaRule *rule) const;  Check if this rule conflicts with the given one. ;  ; const char * GetAttributes () const;  Get the attributes code of this rule. ;  ; const char * GetCode () const;  Get the source code of this rule. ;  ; Bool_t GetEmbed () const;  Return true if this rule should be saved in ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:72,Guid,Guide,72,doc/v632/classROOT_1_1TSchemaRule.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TSchemaRule::TSources Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::TSchemaRule::TSources Class Reference. . Definition at line 23 of file TSchemaRule.h. Public Member Functions;  TSources (const char *name=nullptr, const char *title=nullptr, const char *dims=nullptr);  ; const char * GetDimensions ();  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TSchemaRule_1_1TSources.html:83,Guid,Guide,83,doc/master/classROOT_1_1TSchemaRule_1_1TSources.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSchemaRule_1_1TSources.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: ROOT::TSeq< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TSeq< T > Class Template ReferenceCore ROOT classes » Containers. ; template<class T>; class ROOT::TSeq< T >A pseudo container class which is a generator of indices. ; Template Parameters. TType of the numerical sequence. A pseudo container class which is a generator of indices. The model is the xrange built-in function of Python. Possible usages: Loop on a sequence of integers for (auto i : TSeqI(10)) {; cout << ""Element "" << i << endl;; }; ROOT::TSeqA pseudo container class which is a generator of indices.Definition TSeq.hxx:67; Loop on a sequence of integers in steps for (auto i : TSeqI(-5, 29, 6)) {; cout << ""Element "" << i << endl;; }; Loop backwards on a sequence of integers for (auto i : TSeqI(50, 30, -3)) {; cout << ""Element "" << i << endl;; }; Use an stl algorithm, for_each TSeqUL ulSeq(2,30,3);; std::for_each(std::begin(ulSeq),std::end(ulSeq),[](ULong_t i){cout << ""For each: "" << i <<endl;});; ULong_tunsigned long ULong_tDefinition RtypesCore.h:55; Random access: cout << ""Random access: 3rd element is "" << ulSeq[2] << endl;; A function to create sequences inferring the type: for (auto i : MakeSeq(1000000000000UL, 1000000000003UL)) {; cout << ""Element "" << i << endl;; }; ROOT::MakeSeqTSeq< T > MakeSeq(T end)Definition TSeq.hxx:209. Definition at line 67 of file TSeq.hxx. Classes; class  iterator;  . Public Types; using difference_type = typename std::make_signed< T >::type;  ; using value_type = T;  . Public Member Functions;  TSeq (T theBegin, T theEnd, T theStep=1);  ;  TSeq (T theEnd);  ; iterator begin () const;  ; bool empty () const;  ; iterator end () const;  ; T const & front () const;  ; T operator[] (T s) const;  ; std::size_t size () const;  ; T step () const;  . Pri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TSeq.html:80,Guid,Guide,80,doc/master/classROOT_1_1TSeq.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSeq.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TSeq< T > Class Template Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TSeq< T > Class Template ReferenceCore ROOT classes » Containers. ; template<class T>; class ROOT::TSeq< T >A pseudo container class which is a generator of indices. ; Template Parameters. TType of the numerical sequence. A pseudo container class which is a generator of indices. The model is the xrange built-in function of Python. Possible usages: Loop on a sequence of integers for (auto i : TSeqI(10)) {; cout << ""Element "" << i << endl;; }; ROOT::TSeqA pseudo container class which is a generator of indices.Definition TSeq.hxx:67; Loop on a sequence of integers in steps for (auto i : TSeqI(-5, 29, 6)) {; cout << ""Element "" << i << endl;; }; Loop backwards on a sequence of integers for (auto i : TSeqI(50, 30, -3)) {; cout << ""Element "" << i << endl;; }; Use an stl algorithm, for_each TSeqUL ulSeq(2,30,3);; std::for_each(std::begin(ulSeq),std::end(ulSeq),[](ULong_t i){cout << ""For each: "" << i <<endl;});; ULong_tunsigned long ULong_tDefinition RtypesCore.h:55; Random access: cout << ""Random access: 3rd element is "" << ulSeq[2] << endl;; A function to create sequences inferring the type: for (auto i : MakeSeq(1000000000000UL, 1000000000003UL)) {; cout << ""Element "" << i << endl;; }; ROOT::MakeSeqTSeq< T > MakeSeq(T end)Definition TSeq.hxx:209. Definition at line 67 of file TSeq.hxx. Classes; class  iterator;  . Public Types; using difference_type = typename std::make_signed< T >::type;  ; using value_type = T;  . Public Member Functions;  TSeq (T theBegin, T theEnd, T theStep=1);  ;  TSeq (T theEnd);  ; iterator begin () const;  ; bool empty () const;  ; iterator end () const;  ; T const & front () const;  ; T operator[] (T s) const;  ; std::size_t size () const;  ; T step () const;  . Priv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TSeq.html:79,Guid,Guide,79,doc/v632/classROOT_1_1TSeq.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSeq.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TSequentialExecutor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TSequentialExecutor Class Reference. . Definition at line 25 of file TSequentialExecutor.hxx. Public Member Functions;  TSequentialExecutor ()=default;  ;  TSequentialExecutor (const TSequentialExecutor &)=delete;  ; template<class F , class T > ; void Foreach (F func, const std::vector< T > &args);  Execute a function over the elements of an immutable vector, dividing the execution in nChunks. ;  ; template<class F , class INTEGER > ; void Foreach (F func, ROOT::TSeq< INTEGER > args);  Execute a function over a sequence of indexes, dividing the execution in nChunks. ;  ; template<class F , class T > ; void Foreach (F func, std::initializer_list< T > args);  Execute a function over the elements of an initializer_list, dividing the execution in nChunks. ;  ; template<class F , class T > ; void Foreach (F func, std::vector< T > &args);  Execute a function over the elements of a vector, dividing the execution in nChunks. ;  ; template<class F > ; void Foreach (F func, unsigned nTimes);  Execute a function without arguments several times, dividing the execution in nChunks. ;  ; unsigned GetPoolSize () const;  Return the number of workers in the sequential executor: a single one. ;  ; TSequentialExecutor & operator= (const TSequentialExecutor &)=delete;  ;  Public Member Functions inherited from ROOT::TExecutorCRTP< TSequentialExecutor >;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; auto Map (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector. ;  ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  Execute a function over a sequence of indexes. ;  ; a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TSequentialExecutor.html:81,Guid,Guide,81,doc/master/classROOT_1_1TSequentialExecutor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSequentialExecutor.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TSequentialExecutor Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TSequentialExecutor Class Reference. . Definition at line 25 of file TSequentialExecutor.hxx. Public Member Functions;  TSequentialExecutor ()=default;  ;  TSequentialExecutor (const TSequentialExecutor &)=delete;  ; template<class F , class T > ; void Foreach (F func, const std::vector< T > &args);  Execute a function over the elements of an immutable vector, dividing the execution in nChunks. ;  ; template<class F , class INTEGER > ; void Foreach (F func, ROOT::TSeq< INTEGER > args);  Execute a function over a sequence of indexes, dividing the execution in nChunks. ;  ; template<class F , class T > ; void Foreach (F func, std::initializer_list< T > args);  Execute a function over the elements of an initializer_list, dividing the execution in nChunks. ;  ; template<class F , class T > ; void Foreach (F func, std::vector< T > &args);  Execute a function over the elements of a vector, dividing the execution in nChunks. ;  ; template<class F > ; void Foreach (F func, unsigned nTimes);  Execute a function without arguments several times, dividing the execution in nChunks. ;  ; unsigned GetPoolSize () const;  Return the number of workers in the sequential executor: a single one. ;  ; TSequentialExecutor & operator= (const TSequentialExecutor &)=delete;  ;  Public Member Functions inherited from ROOT::TExecutorCRTP< TSequentialExecutor >;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; auto Map (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector. ;  ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  Execute a function over a sequence of indexes. ;  ; au",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TSequentialExecutor.html:80,Guid,Guide,80,doc/v632/classROOT_1_1TSequentialExecutor.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSequentialExecutor.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TSpinMutex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TSpinMutex Class ReferenceParallelized classes. ; A spin mutex class which respects the STL interface for mutexes. ; This class allows to acquire spin locks also in combination with templates in the STL such as std::unique_lock or std::condition_variable_any. For example:; ROOT::TSpinMutex m;; std::condition_variable cv;; bool ready = false;; ; void worker_thread(); {; // Wait until main() sends data; std::unique_lock<ROOT::TSpinMutex> lk(m);; cv.wait(lk, []{return ready;});; [...]; }; worker_threadstatic void * worker_thread(void *thread_func_param)Definition civetweb.c:19085; ROOT::TSpinMutexA spin mutex class which respects the STL interface for mutexes.Definition TSpinMutex.hxx:42; mTMarker mDefinition textangle.C:8; {.cpp} ; Definition at line 42 of file TSpinMutex.hxx. Public Member Functions;  TSpinMutex ()=default;  ;  TSpinMutex (const TSpinMutex &)=delete;  ;  ~TSpinMutex ()=default;  ; void lock ();  ; TSpinMutex & operator= (const TSpinMutex &)=delete;  ; bool try_lock ();  ; void unlock ();  . Private Attributes; std::atomic_flag fAFlag = ATOMIC_FLAG_INIT;  . #include <ROOT/TSpinMutex.hxx>; Constructor & Destructor Documentation. ◆ TSpinMutex() [1/2]. ROOT::TSpinMutex::TSpinMutex ; (; ). default . ◆ TSpinMutex() [2/2]. ROOT::TSpinMutex::TSpinMutex ; (; const TSpinMutex & ; ). delete . ◆ ~TSpinMutex(). ROOT::TSpinMutex::~TSpinMutex ; (; ). default . Member Function Documentation. ◆ lock(). void ROOT::TSpinMutex::lock ; (; ). inline . Definition at line 53 of file TSpinMutex.hxx. ◆ operator=(). TSpinMutex & ROOT::TSpinMutex::operator= ; (; const TSpinMutex & ; ). delete . ◆ try_lock(). bool ROOT::TSpinMutex::try_lock ; (; ). inline . Definition at line 55 of file TSpinMutex.hxx. ◆ unlock(). void ROOT::TSpinMutex::unlock ; (; ). inline . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TSpinMutex.html:72,Guid,Guide,72,doc/master/classROOT_1_1TSpinMutex.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSpinMutex.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TSpinMutex Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TSpinMutex Class ReferenceParallelized classes. ; A spin mutex class which respects the STL interface for mutexes. ; This class allows to acquire spin locks also in combination with templates in the STL such as std::unique_lock or std::condition_variable_any. For example:; ROOT::TSpinMutex m;; std::condition_variable cv;; bool ready = false;; ; void worker_thread(); {; // Wait until main() sends data; std::unique_lock<ROOT::TSpinMutex> lk(m);; cv.wait(lk, []{return ready;});; [...]; }; worker_threadstatic void * worker_thread(void *thread_func_param)Definition civetweb.c:19086; ROOT::TSpinMutexA spin mutex class which respects the STL interface for mutexes.Definition TSpinMutex.hxx:42; mTMarker mDefinition textangle.C:8; {.cpp} ; Definition at line 42 of file TSpinMutex.hxx. Public Member Functions;  TSpinMutex ()=default;  ;  TSpinMutex (const TSpinMutex &)=delete;  ;  ~TSpinMutex ()=default;  ; void lock ();  ; TSpinMutex & operator= (const TSpinMutex &)=delete;  ; bool try_lock ();  ; void unlock ();  . Private Attributes; std::atomic_flag fAFlag = ATOMIC_FLAG_INIT;  . #include <ROOT/TSpinMutex.hxx>; Constructor & Destructor Documentation. ◆ TSpinMutex() [1/2]. ROOT::TSpinMutex::TSpinMutex ; (; ). default . ◆ TSpinMutex() [2/2]. ROOT::TSpinMutex::TSpinMutex ; (; const TSpinMutex & ; ). delete . ◆ ~TSpinMutex(). ROOT::TSpinMutex::~TSpinMutex ; (; ). default . Member Function Documentation. ◆ lock(). void ROOT::TSpinMutex::lock ; (; ). inline . Definition at line 53 of file TSpinMutex.hxx. ◆ operator=(). TSpinMutex & ROOT::TSpinMutex::operator= ; (; const TSpinMutex & ; ). delete . ◆ try_lock(). bool ROOT::TSpinMutex::try_lock ; (; ). inline . Definition at line 55 of file TSpinMutex.hxx. ◆ unlock(). void ROOT::TSpinMutex::unlock ; (; ). inline . D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TSpinMutex.html:71,Guid,Guide,71,doc/v632/classROOT_1_1TSpinMutex.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSpinMutex.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TThreadExecutor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TThreadExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. . ROOT::TThreadExecutor::Map; This class inherits its interfaces from ROOT::TExecutorCRTP; , adapting them for multithreaded parallelism and extends them supporting:; Parallel Foreach operations.; Custom task granularity and partial reduction, by specifying reduction function and the number of chunks as extra parameters for the Map call. This is specially useful to reduce the size of intermediate results when dealing with a sizeable number of elements in the input data. The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of nThreads threads, where nThreads typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TThreadExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TThreadExecutor.html:77,Guid,Guide,77,doc/master/classROOT_1_1TThreadExecutor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TThreadExecutor.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: ROOT::TThreadExecutor Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TThreadExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. . ROOT::TThreadExecutor::Map; This class inherits its interfaces from ROOT::TExecutorCRTP; , adapting them for multithreaded parallelism and extends them supporting:; Parallel Foreach operations.; Custom task granularity and partial reduction, by specifying reduction function and the number of chunks as extra parameters for the Map call. This is specially useful to reduce the size of intermediate results when dealing with a sizeable number of elements in the input data. The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of nThreads threads, where nThreads typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TThreadExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:76,Guid,Guide,76,doc/v632/classROOT_1_1TThreadExecutor.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: ROOT::TThreadedObject< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TThreadedObject< T > Class Template ReferenceParallelized classes. ; template<class T>; class ROOT::TThreadedObject< T >A wrapper to make object instances thread private, lazily. ; Template Parameters. TClass of the object to be made thread private (e.g. TH1F). A wrapper which makes objects thread private. The methods of the underlying object can be invoked via the arrow operator. The object is created in a specific thread lazily, i.e. upon invocation of one of its methods. The correct object pointer from within a particular thread can be accessed with the overloaded arrow operator or with the Get method. In case an elaborate thread management is in place, e.g. in presence of stream of operations or ""processing slots"", it is also possible to manually select the correct object pointer explicitly. ; Definition at line 151 of file TThreadedObject.hxx. Public Member Functions; template<class ... ARGS> ;  TThreadedObject (ARGS &&... args);  Construct the TThreadedObject and the ""model"" of the thread private objects. ;  ;  TThreadedObject (const TThreadedObject &)=delete;  ; template<class... ARGS> ;  TThreadedObject (TNumSlots initSlots, ARGS &&... args);  Construct the TThreadedObject with initSlots empty slots and the ""model"" of the thread private objects. ;  ; std::shared_ptr< T > Get ();  Access the pointer corresponding to the current slot. ;  ; std::shared_ptr< T > GetAtSlot (unsigned i);  Access a particular processing slot. ;  ; T * GetAtSlotRaw (unsigned i) const;  Access a particular slot which corresponds to a single thread. ;  ; std::shared_ptr< T > GetAtSlotUnchecked (unsigned i) const;  Access a particular slot which corresponds to a single thread. ;  ; unsigned Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TThreadedObject.html:91,Guid,Guide,91,doc/master/classROOT_1_1TThreadedObject.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TThreadedObject.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TThreadedObject< T > Class Template Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TThreadedObject< T > Class Template ReferenceParallelized classes. ; template<class T>; class ROOT::TThreadedObject< T >A wrapper to make object instances thread private, lazily. ; Template Parameters. TClass of the object to be made thread private (e.g. TH1F). A wrapper which makes objects thread private. The methods of the underlying object can be invoked via the arrow operator. The object is created in a specific thread lazily, i.e. upon invocation of one of its methods. The correct object pointer from within a particular thread can be accessed with the overloaded arrow operator or with the Get method. In case an elaborate thread management is in place, e.g. in presence of stream of operations or ""processing slots"", it is also possible to manually select the correct object pointer explicitly. ; Definition at line 151 of file TThreadedObject.hxx. Public Member Functions; template<class ... ARGS> ;  TThreadedObject (ARGS &&... args);  Construct the TThreadedObject and the ""model"" of the thread private objects. ;  ;  TThreadedObject (const TThreadedObject &)=delete;  ; template<class... ARGS> ;  TThreadedObject (TNumSlots initSlots, ARGS &&... args);  Construct the TThreadedObject with initSlots empty slots and the ""model"" of the thread private objects. ;  ; std::shared_ptr< T > Get ();  Access the pointer corresponding to the current slot. ;  ; std::shared_ptr< T > GetAtSlot (unsigned i);  Access a particular processing slot. ;  ; T * GetAtSlotRaw (unsigned i) const;  Access a particular slot which corresponds to a single thread. ;  ; std::shared_ptr< T > GetAtSlotUnchecked (unsigned i) const;  Access a particular slot which corresponds to a single thread. ;  ; unsigned GetN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:90,Guid,Guide,90,doc/v632/classROOT_1_1TThreadedObject.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TThreadedObjectUtils Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Typedefs |; Functions ; ROOT::TThreadedObjectUtils Namespace Reference. Typedefs; template<class T > ; using MergeFunctionType = std::function< void(std::shared_ptr< T >, std::vector< std::shared_ptr< T > > &)>;  . Functions; template<class T > ; void MergeTObjects (std::shared_ptr< T > target, std::vector< std::shared_ptr< T > > &objs);  Merge TObjects. ;  . Typedef Documentation. ◆ MergeFunctionType. template<class T > . using ROOT::TThreadedObjectUtils::MergeFunctionType = typedef std::function<void(std::shared_ptr<T>, std::vector<std::shared_ptr<T> >&)>. Definition at line 119 of file TThreadedObject.hxx. Function Documentation. ◆ MergeTObjects(). template<class T > . void ROOT::TThreadedObjectUtils::MergeTObjects ; (; std::shared_ptr< T > ; target, . std::vector< std::shared_ptr< T > > & ; objs . ). Merge TObjects. ; Definition at line 123 of file TThreadedObject.hxx. ROOTTThreadedObjectUtils. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1TThreadedObjectUtils.html:86,Guid,Guide,86,doc/master/namespaceROOT_1_1TThreadedObjectUtils.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TThreadedObjectUtils.html,2,['Guid'],['Guide']
Usability,". ROOT: ROOT::TThreadedObjectUtils Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Typedefs |; Functions ; ROOT::TThreadedObjectUtils Namespace Reference. Typedefs; template<class T > ; using MergeFunctionType = std::function< void(std::shared_ptr< T >, std::vector< std::shared_ptr< T > > &)>;  . Functions; template<class T > ; void MergeTObjects (std::shared_ptr< T > target, std::vector< std::shared_ptr< T > > &objs);  Merge TObjects. ;  . Typedef Documentation. ◆ MergeFunctionType. template<class T > . using ROOT::TThreadedObjectUtils::MergeFunctionType = typedef std::function<void(std::shared_ptr<T>, std::vector<std::shared_ptr<T> >&)>. Definition at line 119 of file TThreadedObject.hxx. Function Documentation. ◆ MergeTObjects(). template<class T > . void ROOT::TThreadedObjectUtils::MergeTObjects ; (; std::shared_ptr< T > ; target, . std::vector< std::shared_ptr< T > > & ; objs . ). Merge TObjects. ; Definition at line 123 of file TThreadedObject.hxx. ROOTTThreadedObjectUtils. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:05 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1TThreadedObjectUtils.html:85,Guid,Guide,85,doc/v632/namespaceROOT_1_1TThreadedObjectUtils.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TThreadedObjectUtils.html,2,['Guid'],['Guide']
Usability,". ROOT: ROOT::TTreeProcessorMP Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TTreeProcessorMP Class ReferenceParallelized classes. ; This class provides an interface to process a TTree dataset in parallel with multi-process technology. . ROOT::TTreeProcessorMP::Process; The possible usages of the Process method are the following:. Process(<dataset>, F func, const std::string& treeName, ULong64_t nToProcess): func is executed nToProcess times with argument a TTreeReader&, initialized for the TTree with name treeName, from the dataset <dataset>. The dataset can be expressed as: const std::string& fileName -> single file name; const std::vector<std::string>& fileNames -> vector of file names; TFileCollection& files -> collection of TFileInfo objects; TChain& files -> TChain with the file paths; TTree& tree -> Reference to an existing TTree object; namechar name[80]Definition TGX11.cxx:110; TChainA chain is a collection of files containing TTree objects.Definition TChain.h:33; TFileCollectionClass that contains a list of TFileInfo's and accumulated meta data information about its entries.Definition TFileCollection.h:39; TFileInfoClass describing a generic file including meta information.Definition TFileInfo.h:39; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; For legacy, the following signature is also supported:; Process(<dataset>, TSelector& selector, const std::string& treeName, ULong64_t nToProcess): where selector is a TSelector derived class describing the analysis and the other arguments have the same meaning as above. For either set of signatures, the processing function is executed as many times as needed by a pool of fNWorkers workers; the number of workers can be passed to the constructor or set via SetNWorkers. It defaults to the number of cores.;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TTreeProcessorMP.html:78,Guid,Guide,78,doc/master/classROOT_1_1TTreeProcessorMP.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TTreeProcessorMP.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TTreeProcessorMP Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TTreeProcessorMP Class ReferenceParallelized classes. ; This class provides an interface to process a TTree dataset in parallel with multi-process technology. . ROOT::TTreeProcessorMP::Process; The possible usages of the Process method are the following:. Process(<dataset>, F func, const std::string& treeName, ULong64_t nToProcess): func is executed nToProcess times with argument a TTreeReader&, initialized for the TTree with name treeName, from the dataset <dataset>. The dataset can be expressed as: const std::string& fileName -> single file name; const std::vector<std::string>& fileNames -> vector of file names; TFileCollection& files -> collection of TFileInfo objects; TChain& files -> TChain with the file paths; TTree& tree -> Reference to an existing TTree object; namechar name[80]Definition TGX11.cxx:110; TChainA chain is a collection of files containing TTree objects.Definition TChain.h:33; TFileCollectionClass that contains a list of TFileInfo's and accumulated meta data information about its entries.Definition TFileCollection.h:39; TFileInfoClass describing a generic file including meta information.Definition TFileInfo.h:39; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; For legacy, the following signature is also supported:; Process(<dataset>, TSelector& selector, const std::string& treeName, ULong64_t nToProcess): where selector is a TSelector derived class describing the analysis and the other arguments have the same meaning as above. For either set of signatures, the processing function is executed as many times as needed by a pool of fNWorkers workers; the number of workers can be passed to the constructor or set via SetNWorkers. It defaults to the number of cores.; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:77,Guid,Guide,77,doc/v632/classROOT_1_1TTreeProcessorMP.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TTreeProcessorMT Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; ROOT::TTreeProcessorMT Class ReferenceParallelized classes. ; A class to process the entries of a TTree in parallel. ; By means of its Process method, ROOT::TTreeProcessorMT provides a way to process the entries of a TTree in parallel. When invoking TTreeProcessor::Process, the user passes a function whose only parameter is a TTreeReader. The function iterates on a subrange of entries by using that TTreeReader.; The implementation of ROOT::TTreeProcessorMT parallelizes the processing of the subranges, each corresponding to a cluster in the TTree. This is possible thanks to the use of a ROOT::TThreadedObject, so that each thread works with its own TFile and TTree objects. ; Definition at line 80 of file TTreeProcessorMT.hxx. Public Member Functions;  TTreeProcessorMT (const std::vector< std::string_view > &filenames, std::string_view treename="""", UInt_t nThreads=0u, const std::pair< Long64_t, Long64_t > &globalRange={0, std::numeric_limits< Long64_t >::max()});  ;  TTreeProcessorMT (std::initializer_list< std::string_view > filenames, std::string_view treename="""", UInt_t nThreads=0u, const std::pair< Long64_t, Long64_t > &globalRange={0, std::numeric_limits< Long64_t >::max()});  ;  TTreeProcessorMT (std::string_view filename, std::string_view treename="""", UInt_t nThreads=0u, const std::pair< Long64_t, Long64_t > &globalRange={0, std::numeric_limits< Long64_t >::max()});  ;  TTreeProcessorMT (TTree &tree, const TEntryList &entries, UInt_t nThreads=0u, const std::vector< std::string > &suppressErrorsForMissingBranches={});  Constructor based on a TTree and a TEntryList. ;  ;  TTreeProcessorMT (TTree &tree, UInt_t nThreads=0u, const std::pair< Long64_t, Long64_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TTreeProcessorMT.html:78,Guid,Guide,78,doc/master/classROOT_1_1TTreeProcessorMT.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TTreeProcessorMT.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TTreeProcessorMT Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; ROOT::TTreeProcessorMT Class ReferenceParallelized classes. ; A class to process the entries of a TTree in parallel. ; By means of its Process method, ROOT::TTreeProcessorMT provides a way to process the entries of a TTree in parallel. When invoking TTreeProcessor::Process, the user passes a function whose only parameter is a TTreeReader. The function iterates on a subrange of entries by using that TTreeReader.; The implementation of ROOT::TTreeProcessorMT parallelizes the processing of the subranges, each corresponding to a cluster in the TTree. This is possible thanks to the use of a ROOT::TThreadedObject, so that each thread works with its own TFile and TTree objects. ; Definition at line 79 of file TTreeProcessorMT.hxx. Public Member Functions;  TTreeProcessorMT (const std::vector< std::string_view > &filenames, std::string_view treename="""", UInt_t nThreads=0u, const std::pair< Long64_t, Long64_t > &globalRange={0, std::numeric_limits< Long64_t >::max()});  ;  TTreeProcessorMT (std::initializer_list< std::string_view > filenames, std::string_view treename="""", UInt_t nThreads=0u, const std::pair< Long64_t, Long64_t > &globalRange={0, std::numeric_limits< Long64_t >::max()});  ;  TTreeProcessorMT (std::string_view filename, std::string_view treename="""", UInt_t nThreads=0u, const std::pair< Long64_t, Long64_t > &globalRange={0, std::numeric_limits< Long64_t >::max()});  ;  TTreeProcessorMT (TTree &tree, const TEntryList &entries, UInt_t nThreads=0u);  Constructor based on a TTree and a TEntryList. ;  ;  TTreeProcessorMT (TTree &tree, UInt_t nThreads=0u, const std::pair< Long64_t, Long64_t > &globalRange={0, std::numeric_limits< Long64_t >::max()});  ; void Pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMT.html:77,Guid,Guide,77,doc/v632/classROOT_1_1TTreeProcessorMT.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMT.html,1,['Guid'],['Guide']
Usability,. ROOT: ROOT::TVirtualRWMutex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::TVirtualRWMutex Class Referenceabstract. . Definition at line 39 of file TVirtualRWMutex.h. Classes; class  State;  Earlier lock state as returned by GetState() that can be passed to Restore() More...;  ; struct  StateAndRecurseCount;  ; class  StateDelta;  State as returned by GetStateDelta() that can be passed to Restore() More...;  . Public Member Functions; virtual void Apply (std::unique_ptr< StateDelta > &&delta)=0;  ; Int_t CleanUp () override;  ; TVirtualRWMutex * Factory (Bool_t=kFALSE) override=0;  ; virtual std::unique_ptr< State > GetStateBefore ()=0;  ; TClass * IsA () const override;  ; Int_t Lock () override;  ; virtual Hint_t * ReadLock ()=0;  ; virtual void ReadUnLock (Hint_t *)=0;  ; virtual std::unique_ptr< StateDelta > Rewind (const State &earlierState)=0;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TryLock () override;  ; Int_t UnLock () override;  ; virtual Hint_t * WriteLock ()=0;  ; virtual void WriteUnLock (Hint_t *)=0;  ;  Public Member Functions inherited from TVirtualMutex;  TVirtualMutex (Bool_t=kFALSE);  ; virtual ~TVirtualMutex ();  ; Int_t Acquire ();  ; Int_t Release ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualMutex; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . #include <TVirtualRWMutex.h>. Inheritance diagram for ROOT::TVirtualRWMutex:. This brows,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TVirtualRWMutex.html:77,Guid,Guide,77,doc/master/classROOT_1_1TVirtualRWMutex.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TVirtualRWMutex.html,1,['Guid'],['Guide']
Usability,. ROOT: ROOT::TVirtualRWMutex Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::TVirtualRWMutex Class Referenceabstract. . Definition at line 39 of file TVirtualRWMutex.h. Classes; class  State;  Earlier lock state as returned by GetState() that can be passed to Restore() More...;  ; struct  StateAndRecurseCount;  ; class  StateDelta;  State as returned by GetStateDelta() that can be passed to Restore() More...;  . Public Member Functions; virtual void Apply (std::unique_ptr< StateDelta > &&delta)=0;  ; Int_t CleanUp () override;  ; TVirtualRWMutex * Factory (Bool_t=kFALSE) override=0;  ; virtual std::unique_ptr< State > GetStateBefore ()=0;  ; TClass * IsA () const override;  ; Int_t Lock () override;  ; virtual Hint_t * ReadLock ()=0;  ; virtual void ReadUnLock (Hint_t *)=0;  ; virtual std::unique_ptr< StateDelta > Rewind (const State &earlierState)=0;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TryLock () override;  ; Int_t UnLock () override;  ; virtual Hint_t * WriteLock ()=0;  ; virtual void WriteUnLock (Hint_t *)=0;  ;  Public Member Functions inherited from TVirtualMutex;  TVirtualMutex (Bool_t=kFALSE);  ; virtual ~TVirtualMutex ();  ; Int_t Acquire ();  ; Int_t Release ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualMutex; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . #include <TVirtualRWMutex.h>. Inheritance diagram for ROOT::TVirtualRWMutex:. This browse,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TVirtualRWMutex.html:76,Guid,Guide,76,doc/v632/classROOT_1_1TVirtualRWMutex.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TVirtualRWMutex.html,1,['Guid'],['Guide']
Usability,. ROOT: ROOT::TWriteLockGuard Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TWriteLockGuard Class Reference. . Definition at line 131 of file TVirtualRWMutex.h. Public Member Functions;  TWriteLockGuard (TVirtualRWMutex *mutex);  ;  ~TWriteLockGuard ();  ; TClass * IsA () const;  ; void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions;  TWriteLockGuard (const TWriteLockGuard &)=delete;  ; TWriteLockGuard & operator= (const TWriteLockGuard &)=delete;  . Private Attributes; TVirtualRWMutex::Hint_t * fHint;  ; TVirtualRWMutex *const fMutex;  . #include <TVirtualRWMutex.h>; Constructor & Destructor Documentation. ◆ TWriteLockGuard() [1/2]. ROOT::TWriteLockGuard::TWriteLockGuard ; (; const TWriteLockGuard & ; ). privatedelete . ◆ TWriteLockGuard() [2/2]. ROOT::TWriteLockGuard::TWriteLockGuard ; (; TVirtualRWMutex * ; mutex). inline . Definition at line 141 of file TVirtualRWMutex.h. ◆ ~TWriteLockGuard(). ROOT::TWriteLockGuard::~TWriteLockGuard ; (; ). inline . Definition at line 145 of file TVirtualRWMutex.h. Member Function Documentation. ◆ Class(). static TClass * ROOT::TWriteLockGuard::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::TWriteLockGuard::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::TWriteLockGuard::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 147 of file TVirtualRWMutex.h. ◆ DeclFileName(). static const char * ROOT::TWriteLockGuard::,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TWriteLockGuard.html:77,Guid,Guide,77,doc/master/classROOT_1_1TWriteLockGuard.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TWriteLockGuard.html,1,['Guid'],['Guide']
Usability,. ROOT: ROOT::TWriteLockGuard Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TWriteLockGuard Class Reference. . Definition at line 131 of file TVirtualRWMutex.h. Public Member Functions;  TWriteLockGuard (TVirtualRWMutex *mutex);  ;  ~TWriteLockGuard ();  ; TClass * IsA () const;  ; void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions;  TWriteLockGuard (const TWriteLockGuard &)=delete;  ; TWriteLockGuard & operator= (const TWriteLockGuard &)=delete;  . Private Attributes; TVirtualRWMutex::Hint_t * fHint;  ; TVirtualRWMutex *const fMutex;  . #include <TVirtualRWMutex.h>; Constructor & Destructor Documentation. ◆ TWriteLockGuard() [1/2]. ROOT::TWriteLockGuard::TWriteLockGuard ; (; const TWriteLockGuard & ; ). privatedelete . ◆ TWriteLockGuard() [2/2]. ROOT::TWriteLockGuard::TWriteLockGuard ; (; TVirtualRWMutex * ; mutex). inline . Definition at line 141 of file TVirtualRWMutex.h. ◆ ~TWriteLockGuard(). ROOT::TWriteLockGuard::~TWriteLockGuard ; (; ). inline . Definition at line 145 of file TVirtualRWMutex.h. Member Function Documentation. ◆ Class(). static TClass * ROOT::TWriteLockGuard::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::TWriteLockGuard::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::TWriteLockGuard::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 147 of file TVirtualRWMutex.h. ◆ DeclFileName(). static const char * ROOT::TWriteLockGuard::D,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TWriteLockGuard.html:76,Guid,Guide,76,doc/v632/classROOT_1_1TWriteLockGuard.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TWriteLockGuard.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::TestSupport Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions |; Variables ; ROOT::TestSupport Namespace Reference. Classes; class  CheckDiagsRAII;  Install a ROOT diagnostic handler to analyse diagnostics. More...;  ; class  FilterDiagsRAII;  Allows a user function to catch and filter/analyse ROOT and cling diagnostics, e.g. More...;  ; struct  ForbidDiagnostics;  Error handler for gtests that generates failures for every received diagnostic > kInfo when this file is linked to. More...;  . Functions; std::ostream & operator<< (std::ostream &stream, CheckDiagsRAII::Diag_t const &diag);  . Variables; static struct ROOT::TestSupport::ForbidDiagnostics noDiagCheckerInstance;  . Function Documentation. ◆ operator<<(). std::ostream & ROOT::TestSupport::operator<< ; (; std::ostream & ; stream, . CheckDiagsRAII::Diag_t const & ; diag . ). Definition at line 138 of file TestSupport.cxx. Variable Documentation. ◆ noDiagCheckerInstance. struct ROOT::TestSupport::ForbidDiagnostics ROOT::TestSupport::noDiagCheckerInstance. static . ROOTTestSupport. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1TestSupport.html:77,Guid,Guide,77,doc/master/namespaceROOT_1_1TestSupport.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TestSupport.html,2,['Guid'],['Guide']
Usability,". ROOT: ROOT::TestSupport Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions |; Variables ; ROOT::TestSupport Namespace Reference. Classes; class  CheckDiagsRAII;  Install a ROOT diagnostic handler to analyse diagnostics. More...;  ; class  FilterDiagsRAII;  Allows a user function to catch and filter/analyse ROOT and cling diagnostics, e.g. More...;  ; struct  ForbidDiagnostics;  Error handler for gtests that generates failures for every received diagnostic > kInfo when this file is linked to. More...;  . Functions; std::ostream & operator<< (std::ostream &stream, CheckDiagsRAII::Diag_t const &diag);  . Variables; static struct ROOT::TestSupport::ForbidDiagnostics noDiagCheckerInstance;  . Function Documentation. ◆ operator<<(). std::ostream & ROOT::TestSupport::operator<< ; (; std::ostream & ; stream, . CheckDiagsRAII::Diag_t const & ; diag . ). Definition at line 138 of file TestSupport.cxx. Variable Documentation. ◆ noDiagCheckerInstance. struct ROOT::TestSupport::ForbidDiagnostics ROOT::TestSupport::noDiagCheckerInstance. static . ROOTTestSupport. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:05 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1TestSupport.html:76,Guid,Guide,76,doc/v632/namespaceROOT_1_1TestSupport.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TestSupport.html,2,['Guid'],['Guide']
Usability,". ROOT: ROOT::TreeUtils Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions ; ROOT::TreeUtils Namespace Reference. Classes; struct  InvalidTupleType;  ; struct  InvalidTupleType< TNtuple >;  ; struct  InvalidTupleType< TNtupleD >;  ; struct  RFriendInfo;  Information about friend trees of a certain TTree or TChain object. More...;  . Functions; template<class DataType , class Tuple > ; Long64_t FillNtupleFromStream (std::istream &inputStream, Tuple &tuple, char delimiter, bool strictMode);  Function to fill tuples (TNtuple/TNtupleD) from a simple ASCII data file. ;  ; template Long64_t FillNtupleFromStream< Double_t, TNtupleD > (std::istream &, TNtupleD &, char, bool);  ; template Long64_t FillNtupleFromStream< Float_t, TNtuple > (std::istream &, TNtuple &, char, bool);  ; bool NextCharacterIsEOL (std::istream &input);  Either '\r' | '\n' or eof of some problem. ;  ; void SkipComment (std::istream &input);  Skips everything from '#' to (including) '\r' or '\n'. ;  ; void SkipEmptyLines (std::istream &input);  Skips empty lines (newline-characters), ws-lines (consisting only of whitespace characters + newline-characters). ;  ; void SkipWSCharacters (std::istream &input);  Skip whitespace characters, but not newline-characters we support ('\r' or '\n'). ;  . Function Documentation. ◆ FillNtupleFromStream(). template<class DataType , class Tuple > . Long64_t ROOT::TreeUtils::FillNtupleFromStream ; (; std::istream & ; inputStream, . Tuple & ; tuple, . char ; delimiter, . bool ; strictMode . ). Function to fill tuples (TNtuple/TNtupleD) from a simple ASCII data file. ; With auto and decltype - we can get rid of DataType parameter :) (or with a simple typedef inside ntuple class). An input file consists of non-empty lines (separated by newline-characters), possibly empty lines, and comments (treated as empty lines). Each non-empty line should contain N numbers - entry for a tuple. Non-strict mode lets y",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1TreeUtils.html:75,Guid,Guide,75,doc/master/namespaceROOT_1_1TreeUtils.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TreeUtils.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: ROOT::TreeUtils Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions ; ROOT::TreeUtils Namespace Reference. Classes; struct  InvalidTupleType;  ; struct  InvalidTupleType< TNtuple >;  ; struct  InvalidTupleType< TNtupleD >;  ; struct  RFriendInfo;  Information about friend trees of a certain TTree or TChain object. More...;  . Functions; template<class DataType , class Tuple > ; Long64_t FillNtupleFromStream (std::istream &inputStream, Tuple &tuple, char delimiter, bool strictMode);  Function to fill tuples (TNtuple/TNtupleD) from a simple ASCII data file. ;  ; template Long64_t FillNtupleFromStream< Double_t, TNtupleD > (std::istream &, TNtupleD &, char, bool);  ; template Long64_t FillNtupleFromStream< Float_t, TNtuple > (std::istream &, TNtuple &, char, bool);  ; bool NextCharacterIsEOL (std::istream &input);  Either '\r' | '\n' or eof of some problem. ;  ; void SkipComment (std::istream &input);  Skips everything from '#' to (including) '\r' or '\n'. ;  ; void SkipEmptyLines (std::istream &input);  Skips empty lines (newline-characters), ws-lines (consisting only of whitespace characters + newline-characters). ;  ; void SkipWSCharacters (std::istream &input);  Skip whitespace characters, but not newline-characters we support ('\r' or '\n'). ;  . Function Documentation. ◆ FillNtupleFromStream(). template<class DataType , class Tuple > . Long64_t ROOT::TreeUtils::FillNtupleFromStream ; (; std::istream & ; inputStream, . Tuple & ; tuple, . char ; delimiter, . bool ; strictMode . ). Function to fill tuples (TNtuple/TNtupleD) from a simple ASCII data file. ; With auto and decltype - we can get rid of DataType parameter :) (or with a simple typedef inside ntuple class). An input file consists of non-empty lines (separated by newline-characters), possibly empty lines, and comments (treated as empty lines). Each non-empty line should contain N numbers - entry for a tuple. Non-strict mode lets yo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1TreeUtils.html:74,Guid,Guide,74,doc/v632/namespaceROOT_1_1TreeUtils.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TreeUtils.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: ROOT::TypeTraits Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; ROOT::TypeTraits Namespace Reference. ROOT type_traits extensions. ; More... Classes; struct  HasBeginAndEnd;  ; struct  IsSignedNumeral;  Checks for signed integers types that are not characters. More...;  ; class  IsSmartOrDumbPtr;  ; class  IsSmartOrDumbPtr< std::shared_ptr< P > >;  ; class  IsSmartOrDumbPtr< std::unique_ptr< P > >;  ; struct  IsUnsignedNumeral;  Checks for unsigned integer types that are not characters. More...;  ; struct  RemoveFirst;  ; struct  RemoveFirstParameter;  Remove first of possibly many template parameters. More...;  ; struct  RemoveFirstParameter< U< T, Rest... > >;  ; struct  TakeFirstParameter;  Return first of possibly many template parameters. More...;  ; struct  TakeFirstParameter< Template< T, Rest... > >;  ; struct  TakeFirstType;  ; struct  TypeList;  Lightweight storage for a collection of types. More...;  . Detailed Description; ROOT type_traits extensions. . ROOTTypeTraits. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1TypeTraits.html:76,Guid,Guide,76,doc/master/namespaceROOT_1_1TypeTraits.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TypeTraits.html,2,['Guid'],['Guide']
Usability,". ROOT: ROOT::TypeTraits Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; ROOT::TypeTraits Namespace Reference. ROOT type_traits extensions. ; More... Classes; struct  HasBeginAndEnd;  ; struct  IsSignedNumeral;  Checks for signed integers types that are not characters. More...;  ; class  IsSmartOrDumbPtr;  ; class  IsSmartOrDumbPtr< std::shared_ptr< P > >;  ; class  IsSmartOrDumbPtr< std::unique_ptr< P > >;  ; struct  IsUnsignedNumeral;  Checks for unsigned integer types that are not characters. More...;  ; struct  RemoveFirst;  ; struct  RemoveFirstParameter;  Remove first of possibly many template parameters. More...;  ; struct  RemoveFirstParameter< U< T, Rest... > >;  ; struct  TakeFirstParameter;  Return first of possibly many template parameters. More...;  ; struct  TakeFirstParameter< Template< T, Rest... > >;  ; struct  TakeFirstType;  ; struct  TypeList;  Lightweight storage for a collection of types. More...;  . Detailed Description; ROOT type_traits extensions. . ROOTTypeTraits. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:05 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1TypeTraits.html:75,Guid,Guide,75,doc/v632/namespaceROOT_1_1TypeTraits.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TypeTraits.html,2,['Guid'],['Guide']
Usability,". ROOT: ROOT::TypeTraits::TypeList< Types > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Attributes |; List of all members ; ROOT::TypeTraits::TypeList< Types > Struct Template Reference. ; template<typename... Types>; struct ROOT::TypeTraits::TypeList< Types >Lightweight storage for a collection of types. ; Differently from std::tuple, no instantiation of objects of stored types is performed ; Definition at line 25 of file TypeTraits.hxx. Static Public Attributes; static constexpr std::size_t list_size = sizeof...(Types);  . #include <ROOT/TypeTraits.hxx>; Member Data Documentation. ◆ list_size. template<typename... Types> . constexpr std::size_t ROOT::TypeTraits::TypeList< Types >::list_size = sizeof...(Types). staticconstexpr . Definition at line 26 of file TypeTraits.hxx. Collaboration diagram for ROOT::TypeTraits::TypeList< Types >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; core/foundation/inc/ROOT/TypeTraits.hxx. ROOTTypeTraitsTypeList. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1TypeTraits_1_1TypeList.html:101,Guid,Guide,101,doc/master/structROOT_1_1TypeTraits_1_1TypeList.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1TypeTraits_1_1TypeList.html,2,['Guid'],['Guide']
Usability,". ROOT: ROOT::VecOps Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions ; ROOT::VecOps Namespace Reference. Classes; class  RVec;  A ""std::vector""-like collection of values implementing handy operation to analyse them. More...;  ; class  RVecN;  . Functions; template<typename T > ; auto All (const RVec< T > &v) -> decltype(v[0]==false);  Return true if all of the elements equate to true, return false otherwise. ;  ; template<typename T0 , typename T1 = T0, typename T2 = T0, typename T3 = T0, typename T4 = T0, typename T5 = T0, typename Common_t = std::common_type_t<T0, T1>> ; Common_t Angle (T0 x1, T1 y1, T2 z1, T3 x2, T4 y2, T5 z2);  Return the angle between two three-vectors given the quantities x coordinate (x), y coordinate (y), z coordinate (y). ;  ; template<typename T > ; auto Any (const RVec< T > &v) -> decltype(v[0]==true);  Return true if any of the elements equates to true, return false otherwise. ;  ; template<typename T > ; std::size_t ArgMax (const RVec< T > &v);  Get the index of the greatest element of an RVec In case of multiple occurrences of the maximum values, the index corresponding to the first occurrence is returned. ;  ; template<typename T > ; std::size_t ArgMin (const RVec< T > &v);  Get the index of the smallest element of an RVec In case of multiple occurrences of the minimum values, the index corresponding to the first occurrence is returned. ;  ; template<typename T > ; RVec< typename RVec< T >::size_type > Argsort (const RVec< T > &v);  Return an RVec of indices that sort the input RVec. ;  ; template<typename T , typename Compare > ; RVec< typename RVec< T >::size_type > Argsort (const RVec< T > &v, Compare &&c);  Return an RVec of indices that sort the input RVec based on a comparison function. ;  ; template<typename T , unsigned N> ; size_t CapacityInBytes (const RVecN< T, N > &X);  ; template<typename T > ; RVec< RVec< typename RVec< T >::size_type > > Combinati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1VecOps.html:72,Guid,Guide,72,doc/master/namespaceROOT_1_1VecOps.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1VecOps.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::VecOps Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions ; ROOT::VecOps Namespace Reference. Classes; class  RVec;  A ""std::vector""-like collection of values implementing handy operation to analyse them. More...;  ; class  RVecN;  . Functions; template<typename T > ; auto All (const RVec< T > &v) -> decltype(v[0]==false);  Return true if all of the elements equate to true, return false otherwise. ;  ; template<typename T > ; auto Any (const RVec< T > &v) -> decltype(v[0]==true);  Return true if any of the elements equates to true, return false otherwise. ;  ; template<typename T > ; std::size_t ArgMax (const RVec< T > &v);  Get the index of the greatest element of an RVec In case of multiple occurrences of the maximum values, the index corresponding to the first occurrence is returned. ;  ; template<typename T > ; std::size_t ArgMin (const RVec< T > &v);  Get the index of the smallest element of an RVec In case of multiple occurrences of the minimum values, the index corresponding to the first occurrence is returned. ;  ; template<typename T > ; RVec< typename RVec< T >::size_type > Argsort (const RVec< T > &v);  Return an RVec of indices that sort the input RVec. ;  ; template<typename T , typename Compare > ; RVec< typename RVec< T >::size_type > Argsort (const RVec< T > &v, Compare &&c);  Return an RVec of indices that sort the input RVec based on a comparison function. ;  ; template<typename T , unsigned N> ; size_t CapacityInBytes (const RVecN< T, N > &X);  ; template<typename T > ; RVec< RVec< typename RVec< T >::size_type > > Combinations (const RVec< T > &v, const typename RVec< T >::size_type n);  Return the indices that represent all unique combinations of the elements of a given RVec. ;  ; template<typename T1 , typename T2 > ; RVec< RVec< typename RVec< T1 >::size_type > > Combinations (const RVec< T1 > &v1, const RVec< T2 > &v2);  Return the indices that represent all c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1VecOps.html:71,Guid,Guide,71,doc/v632/namespaceROOT_1_1VecOps.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1VecOps.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::VecOps::RVec< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Types |; Friends |; List of all members ; ROOT::VecOps::RVec< T > Class Template ReferenceVecOps. ; template<typename T>; class ROOT::VecOps::RVec< T >A ""std::vector""-like collection of values implementing handy operation to analyse them. ; Template Parameters. TThe type of the contained objects. A RVec is a container designed to make analysis of values' collections fast and easy. Its storage is contiguous in memory and its interface is designed such to resemble to the one of the stl vector. In addition the interface features methods and external functions to ease the manipulation and analysis of the data in the RVec.; NoteROOT::VecOps::RVec can also be spelled simply ROOT::RVec. Shorthand aliases such as ROOT::RVecI or ROOT::RVecD are also available as template instantiations of RVec of fundamental types. The full list of available aliases:; RVecB (bool); RVecC (char); RVecD (double); RVecF (float); RVecI (int); RVecL (long); RVecLL (long long); RVecU (unsigned); RVecUL (unsigned long); RVecULL (unsigned long long). RVec does not attempt to be exception safe. Exceptions thrown by element constructors during insertions, swaps or other operations will be propagated potentially leaving the RVec object in an invalid state. RVec methods (e.g. at or size) follow the STL naming convention instead of the ROOT naming convention in order to make RVec a drop-in replacement for std::vector. Table of Contents. Example; Arithmetic operations, logical operations and mathematical functions; Owning and adopting memory; Sorting and manipulation of indices; Usage in combination with RDataFrame; Reference for the RVec class; Reference for RVec helper functions. Example; Suppose to have an event featuring a collection of muons with a certain pseudorapidity, momentum and charge,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html:88,Guid,Guide,88,doc/master/classROOT_1_1VecOps_1_1RVec.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html,2,"['Guid', 'simpl']","['Guide', 'simply']"
Usability,". ROOT: ROOT::VecOps::RVec< T > Class Template Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Types |; Friends |; List of all members ; ROOT::VecOps::RVec< T > Class Template ReferenceVecOps. ; template<typename T>; class ROOT::VecOps::RVec< T >A ""std::vector""-like collection of values implementing handy operation to analyse them. ; Template Parameters. TThe type of the contained objects. A RVec is a container designed to make analysis of values' collections fast and easy. Its storage is contiguous in memory and its interface is designed such to resemble to the one of the stl vector. In addition the interface features methods and external functions to ease the manipulation and analysis of the data in the RVec.; NoteROOT::VecOps::RVec can also be spelled simply ROOT::RVec. Shorthand aliases such as ROOT::RVecI or ROOT::RVecD are also available as template instantiations of RVec of fundamental types. The full list of available aliases:; RVecB (bool); RVecC (char); RVecD (double); RVecF (float); RVecI (int); RVecL (long); RVecLL (long long); RVecU (unsigned); RVecUL (unsigned long); RVecULL (unsigned long long). RVec does not attempt to be exception safe. Exceptions thrown by element constructors during insertions, swaps or other operations will be propagated potentially leaving the RVec object in an invalid state. RVec methods (e.g. at or size) follow the STL naming convention instead of the ROOT naming convention in order to make RVec a drop-in replacement for std::vector. Table of Contents. Example; Arithmetic operations, logical operations and mathematical functions; Owning and adopting memory; Sorting and manipulation of indices; Usage in combination with RDataFrame; Reference for the RVec class; Reference for RVec helper functions. Example; Suppose to have an event featuring a collection of muons with a certain pseudorapidity, momentum and charge, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:87,Guid,Guide,87,doc/v632/classROOT_1_1VecOps_1_1RVec.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html,2,"['Guid', 'simpl']","['Guide', 'simply']"
Usability,". ROOT: ROOT::VecOps::RVecN< T, N > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::VecOps::RVecN< T, N > Class Template ReferenceVecOps. ; template<typename T, unsigned int N>; class ROOT::VecOps::RVecN< T, N >; Definition at line 1151 of file RVec.hxx. Public Types; using const_reference = typename Internal::VecOps::SmallVectorTemplateCommon< T >::const_reference;  ; using reference = typename Internal::VecOps::SmallVectorTemplateCommon< T >::reference;  ; using size_type = typename Internal::VecOps::SmallVectorTemplateCommon< T >::size_type;  ; using value_type = typename Internal::VecOps::SmallVectorTemplateCommon< T >::value_type;  ;  Public Types inherited from ROOT::Detail::VecOps::RVecImpl< T >; using const_iterator = typename SuperClass::const_iterator;  ; using iterator = typename SuperClass::iterator;  ; using reference = typename SuperClass::reference;  ; using size_type = typename SuperClass::size_type;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >; using const_iterator = const T *;  ; using const_pointer = const T *;  ; using const_reference = const T &;  ; using const_reverse_iterator = std::reverse_iterator< const_iterator >;  ; using difference_type = ptrdiff_t;  ; using iterator = T *;  ; using pointer = T *;  ; using reference = T &;  ; using reverse_iterator = std::reverse_iterator< iterator >;  ; using size_type = size_t;  ; using value_type = T;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorBase; using Size_T = int32_t;  . Public Member Functions;  RVecN ();  ;  RVecN (const RVecN &RHS);  ;  RVecN (const std::vector< T > &RHS);  ;  RVecN (Detail::VecOps::RVecImpl< T > &&RHS);  ; template<typename ItTy , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<ItTy>::iterator_category, std::input_iterator_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVecN.html:92,Guid,Guide,92,doc/master/classROOT_1_1VecOps_1_1RVecN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVecN.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::option Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Typedefs |; Enumerations |; Functions ; ROOT::option Namespace Reference. The namespace of The Lean Mean C++ Option Parser. ; More... Classes; struct  Arg;  Functions for checking the validity of option arguments. More...;  ; struct  Descriptor;  Describes an option, its help text (usage) and how it should be parsed. More...;  ; struct  FullArg;  ; class  Option;  A parsed option from the command line together with its argument if it has one. More...;  ; class  Parser;  Checks argument vectors for validity and parses them into data structures that are easier to work with. More...;  ; struct  PrintUsageImplementation;  ; struct  Stats;  Determines the minimum lengths of the buffer and options arrays used for Parser. More...;  . Typedefs; typedef ArgStatus(* CheckArg) (const Option &option, bool msg);  Signature of functions that check if an argument is valid for a certain type of option. ;  . Enumerations; enum  ArgStatus { ARG_NONE; , ARG_OK; , ARG_IGNORE; , ARG_ILLEGAL; };  Possible results when checking if an argument is valid for a certain option. More...;  . Functions; template<typename Temporary > ; void printUsage (const Temporary &prn, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  ; template<typename Function > ; void printUsage (Function *prn, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  ; template<typename Function , typename Stream > ; void printUsage (Function *prn, Stream *stream, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  ; template<typename OStream > ; void printUsage (OStream &prn, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  Outputs a nicely fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1option.html:72,Guid,Guide,72,doc/master/namespaceROOT_1_1option.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1option.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::option Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Typedefs |; Enumerations |; Functions ; ROOT::option Namespace Reference. The namespace of The Lean Mean C++ Option Parser. ; More... Classes; struct  Arg;  Functions for checking the validity of option arguments. More...;  ; struct  Descriptor;  Describes an option, its help text (usage) and how it should be parsed. More...;  ; struct  FullArg;  ; class  Option;  A parsed option from the command line together with its argument if it has one. More...;  ; class  Parser;  Checks argument vectors for validity and parses them into data structures that are easier to work with. More...;  ; struct  PrintUsageImplementation;  ; struct  Stats;  Determines the minimum lengths of the buffer and options arrays used for Parser. More...;  . Typedefs; typedef ArgStatus(* CheckArg) (const Option &option, bool msg);  Signature of functions that check if an argument is valid for a certain type of option. ;  . Enumerations; enum  ArgStatus { ARG_NONE; , ARG_OK; , ARG_IGNORE; , ARG_ILLEGAL; };  Possible results when checking if an argument is valid for a certain option. More...;  . Functions; template<typename Temporary > ; void printUsage (const Temporary &prn, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  ; template<typename Function > ; void printUsage (Function *prn, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  ; template<typename Function , typename Stream > ; void printUsage (Function *prn, Stream *stream, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  ; template<typename OStream > ; void printUsage (OStream &prn, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  Outputs a nicely for",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1option.html:71,Guid,Guide,71,doc/v632/namespaceROOT_1_1option.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1option.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::option::Option Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; ROOT::option::Option Class Reference. ; A parsed option from the command line together with its argument if it has one. ; The Parser chains all parsed options with the same Descriptor::index together to form a linked list. This allows you to easily implement all of the common ways of handling repeated options and enable/disable pairs. Test for presence of a switch in the argument vector: if ( options[QUIET] ) ... ; ; Evaluate –enable-foo/–disable-foo pair where the last one used wins: if ( options[FOO].last()->type() == DISABLE ) ... ; ROOT::option::Option::typeint type() constReturns Descriptor::type of this Option's Descriptor, or 0 if this Option is invalid (unused).Definition OptionParser.h:544; ROOT::option::Option::lastOption * last()Returns a pointer to the last element of the linked list.Definition OptionParser.h:643; ; Cumulative option (-v verbose, -vv more verbose, -vvv even more verbose): int verbosity = options[VERBOSE].count(); ; ; Iterate over all –file=<fname> arguments: for (Option* opt = options[FILE]; opt; opt = opt->next()); fname = opt->arg; ... ; ROOT::option::OptionA parsed option from the command line together with its argument if it has one.Definition OptionParser.h:454; ROOT::option::Option::nextOption * next()Returns a pointer to the next element of the linked list or NULL if called on last().Definition OptionParser.h:682; . Definition at line 453 of file OptionParser.h. Public Member Functions;  Option ();  Creates a new Option that is a one-element linked list and has NULL desc, name, arg and namelen. ;  ;  Option (const Descriptor *desc_, const char *name_, const char *arg_);  Creates a new Option that is a one-element linked list and has",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1option_1_1Option.html:76,Guid,Guide,76,doc/master/classROOT_1_1option_1_1Option.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1option_1_1Option.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::option::Option Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; ROOT::option::Option Class Reference. ; A parsed option from the command line together with its argument if it has one. ; The Parser chains all parsed options with the same Descriptor::index together to form a linked list. This allows you to easily implement all of the common ways of handling repeated options and enable/disable pairs. Test for presence of a switch in the argument vector: if ( options[QUIET] ) ... ; ; Evaluate –enable-foo/–disable-foo pair where the last one used wins: if ( options[FOO].last()->type() == DISABLE ) ... ; ROOT::option::Option::typeint type() constReturns Descriptor::type of this Option's Descriptor, or 0 if this Option is invalid (unused).Definition OptionParser.h:544; ROOT::option::Option::lastOption * last()Returns a pointer to the last element of the linked list.Definition OptionParser.h:643; ; Cumulative option (-v verbose, -vv more verbose, -vvv even more verbose): int verbosity = options[VERBOSE].count(); ; ; Iterate over all –file=<fname> arguments: for (Option* opt = options[FILE]; opt; opt = opt->next()); fname = opt->arg; ... ; ROOT::option::OptionA parsed option from the command line together with its argument if it has one.Definition OptionParser.h:454; ROOT::option::Option::nextOption * next()Returns a pointer to the next element of the linked list or NULL if called on last().Definition OptionParser.h:682; . Definition at line 453 of file OptionParser.h. Public Member Functions;  Option ();  Creates a new Option that is a one-element linked list and has NULL desc, name, arg and namelen. ;  ;  Option (const Descriptor *desc_, const char *name_, const char *arg_);  Creates a new Option that is a one-element linked list and has ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html:75,Guid,Guide,75,doc/v632/classROOT_1_1option_1_1Option.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::option::Parser Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::option::Parser Class Reference. ; Checks argument vectors for validity and parses them into data structures that are easier to work with. ; Example:int main(int argc, char* argv[]); {; argc-=(argc>0); argv+=(argc>0); // skip program name argv[0] if present; option::Stats stats(usage, argc, argv);; option::Option options[stats.options_max], buffer[stats.buffer_max];; option::Parser parse(usage, argc, argv, options, buffer);; ; if (parse.error()); return 1;; ; if (options[HELP]); ...; mainint main()Definition Prototype.cxx:12; ROOT::option::OptionA parsed option from the command line together with its argument if it has one.Definition OptionParser.h:454; ROOT::option::ParserChecks argument vectors for validity and parses them into data structures that are easier to work wit...Definition OptionParser.h:1062; ROOT::option::Parser::parsevoid parse(bool gnu, const Descriptor usage[], int argc, const char **argv, Option options[], Option buffer[], int min_abbr_len=0, bool single_minus_longopt=false, int bufmax=-1)Parses the given argument vector.Definition OptionParser.h:1500; ROOT::option::StatsDetermines the minimum lengths of the buffer and options arrays used for Parser.Definition OptionParser.h:932; ; Definition at line 1061 of file OptionParser.h. Classes; struct  Action;  ; class  StoreOptionAction;  . Public Member Functions;  Parser ();  Creates a new Parser. ;  ;  Parser (bool gnu, const Descriptor usage[], int argc, char **argv, Option options[], Option buffer[], int min_abbr_len=0, bool single_minus_longopt=false, int bufmax=-1);  Parser(...) with non-const argv. ;  ;  Parser (bool gnu, const Descriptor usage[], int argc, const char **argv, Option options[], Option buffer[], int min_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1option_1_1Parser.html:76,Guid,Guide,76,doc/master/classROOT_1_1option_1_1Parser.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1option_1_1Parser.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::option::Parser Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Private Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::option::Parser Class Reference. ; Checks argument vectors for validity and parses them into data structures that are easier to work with. ; Example:int main(int argc, char* argv[]); {; argc-=(argc>0); argv+=(argc>0); // skip program name argv[0] if present; option::Stats stats(usage, argc, argv);; option::Option options[stats.options_max], buffer[stats.buffer_max];; option::Parser parse(usage, argc, argv, options, buffer);; ; if (parse.error()); return 1;; ; if (options[HELP]); ...; mainint main()Definition Prototype.cxx:12; ROOT::option::OptionA parsed option from the command line together with its argument if it has one.Definition OptionParser.h:454; ROOT::option::ParserChecks argument vectors for validity and parses them into data structures that are easier to work wit...Definition OptionParser.h:1062; ROOT::option::Parser::parsevoid parse(bool gnu, const Descriptor usage[], int argc, const char **argv, Option options[], Option buffer[], int min_abbr_len=0, bool single_minus_longopt=false, int bufmax=-1)Parses the given argument vector.Definition OptionParser.h:1500; ROOT::option::StatsDetermines the minimum lengths of the buffer and options arrays used for Parser.Definition OptionParser.h:932; ; Definition at line 1061 of file OptionParser.h. Classes; struct  Action;  ; class  StoreOptionAction;  . Public Member Functions;  Parser ();  Creates a new Parser. ;  ;  Parser (bool gnu, const Descriptor usage[], int argc, char **argv, Option options[], Option buffer[], int min_abbr_len=0, bool single_minus_longopt=false, int bufmax=-1);  Parser(...) with non-const argv. ;  ;  Parser (bool gnu, const Descriptor usage[], int argc, const char **argv, Option options[], Option buffer[], int min_a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html:75,Guid,Guide,75,doc/v632/classROOT_1_1option_1_1Parser.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html,1,['Guid'],['Guide']
Usability,. ROOT: ROOT::v5 Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Functions ; ROOT::v5 Namespace Reference. Namespaces; namespace  TFastFun;  . Classes; struct  TF1Data;  ; class  TFormula;  The FORMULA class (ROOT version 5) More...;  ; class  TFormulaPrimitive;  The Formula Primitive class. More...;  ; class  TOperOffset;  . Functions; void TMath_GenerInterface ();  . Function Documentation. ◆ TMath_GenerInterface(). void ROOT::v5::TMath_GenerInterface ; (; ). Definition at line 8 of file TFormulaMathInterface.cxx. ROOTv5. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1v5.html:68,Guid,Guide,68,doc/master/namespaceROOT_1_1v5.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1v5.html,2,['Guid'],['Guide']
Usability,. ROOT: ROOT::v5 Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Functions ; ROOT::v5 Namespace Reference. Namespaces; namespace  TFastFun;  . Classes; struct  TF1Data;  ; class  TFormula;  The FORMULA class (ROOT version 5) More...;  ; class  TFormulaPrimitive;  The Formula Primitive class. More...;  ; class  TOperOffset;  . Functions; void TMath_GenerInterface ();  . Function Documentation. ◆ TMath_GenerInterface(). void ROOT::v5::TMath_GenerInterface ; (; ). Definition at line 8 of file TFormulaMathInterface.cxx. ROOTv5. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:05 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1v5.html:67,Guid,Guide,67,doc/v632/namespaceROOT_1_1v5.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1v5.html,2,['Guid'],['Guide']
Usability,". ROOT: ROOT::v5::TF1Data Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; ROOT::v5::TF1Data Struct Reference. . Definition at line 37 of file TF1Data.h. Public Member Functions;  TF1Data ();  F1 default constructor. ;  ;  ~TF1Data () override;  TF1 default destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void Streamer (TBuffer &b, Int_t version, UInt_t start, UInt_t count, const TClass *onfile_class=nullptr);  specialized streamer function being able to read old TF1 versions as TF1Data in memory ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from ROOT::v5::TFormula;  TFormula ();  Formula default constructor. ;  ;  TFormula (const char *name, const char *formula);  Normal Formula constructor. ;  ;  TFormula (const TFormula &formula);  Default constructor. ;  ;  ~TFormula () override;  Formula default destructor. ;  ; virtual void Analyze (const char *schain, Int_t &err, Int_t offset=0);  Analyze a sub-expression in one formula. ;  ; virtual Bool_t AnalyzeFunction (TString &chaine, Int_t &err, Int_t offset=0);  Check if the chain as function call. ;  ; void Clear (Option_t *option="""") override;  Resets the objects. ;  ; virtual Int_t Compile (const char *expression="""");  Compile expression already stored in fTitle. ;  ; void Copy (TObject &formula) const override;  Copy this formula. ;  ; virtual char * DefinedString (Int_t code);  Return address of string corresponding to special code. ;  ; virtual Double_t DefinedValue (Int_t code);  Return value corresponding to special code. ;  ; virtual Int_t DefinedVariable (TString &variable, Int_t &action);  Check if expression is in the list of defined variables. ;  ; virtual Double_t Eval (Double_t x, Double_t y=0, Double_t z=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1v5_1_1TF1Data.html:74,Guid,Guide,74,doc/master/structROOT_1_1v5_1_1TF1Data.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1v5_1_1TF1Data.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::v5::TFormula Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; ROOT::v5::TFormula Class ReferenceHistogram Library. ; The FORMULA class (ROOT version 5) ; Example of valid expressions:. sin(x)/x; [0]*sin(x) + [1]*exp(-[2]*x); x + y**2; x^2 + y^2; [0]*pow([1],4); 2*pi*sqrt(x/y); gaus(0)*expo(3) + ypol3(5)*x; gausn(0)*expo(3) + ypol3(5)*x. In the last example above:; gaus(0) is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2) and (0) means start numbering parameters at 0; gausn(0) is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2)/(sqrt(2*pi)*[2])) and (0) means start numbering parameters at 0; expo(3) is a substitute for exp([3]+[4]*x); pol3(5) is a substitute for par[5]+par[6]*x+par[7]*x**2+par[8]*x**3 (here Pol3 stands for Polynomial of degree 3); TMath functions can be part of the expression, eg:. TMath::Landau(x)*sin(x); TMath::Erf(x). Comparisons operators are also supported (&&, ||, ==, <=, >=, !) Examples: sin(x*(x<0.5 || x>1)); If the result of a comparison is TRUE, the result is 1, otherwise 0.; Already predefined names can be given. For example, if the formula; TFormula old(sin(x*(x<0.5 || x>1))) one can assign a name to the formula. By default the name of the object = title = formula itself. old.SetName(""old""). then, old can be reused in a new expression. TFormula new(""x*old"") is equivalent to: TFormula new(""x*sin(x*(x<0.5 || x>1))""); Up to 4 dimensions are supported (indicated by x, y, z, t) An expression may have 0 parameters or a list of parameters indicated by the sequence [par_number]; A graph showing the logic to compile and analyze a formula is shown in TFormula::Compile and TFormula::Analyze. Once a formula has been compiled, it can be evaluated for a given set of parameters. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html:74,Guid,Guide,74,doc/master/classROOT_1_1v5_1_1TFormula.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html,1,['Guid'],['Guide']
Usability,". ROOT: ROOT::v5::TFormulaPrimitive Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; ROOT::v5::TFormulaPrimitive Class ReferenceHistogram Library. ; The Formula Primitive class. ; Helper class for TFormula to speed up TFormula evaluation TFormula can use all functions registered in the list of TFormulaPrimitives User can add new function to the list of primitives if FormulaPrimitive with given name is already defined new primitive is ignored; Example:; TFormulaPrimitive::AddFormula(new TFormulaPrimitive(""Pow2"",""Pow2"",TFastFun::Pow2));; TF1 f1(""f1"",""Pow2(x)"");; ROOT::v5::TFormulaPrimitive::AddFormulastatic Int_t AddFormula(TFormulaPrimitive *formula)Add formula to the list of primitive formulas.Definition TFormulaPrimitive_v5.cxx:190; ROOT::v5::TFormulaPrimitive::TFormulaPrimitiveTFormulaPrimitive()Default constructor.Definition TFormulaPrimitive_v5.cxx:84; TF11-Dim function classDefinition TF1.h:233; f1TF1 * f1Definition legend1.C:11; ROOT::v5::TFastFun::Pow2Double_t Pow2(Double_t x)Definition TFormulaPrimitive_v5.cxx:255. TFormulaPrimitive is used to get direct acces to the function pointers; GenFunc - pointers to the static function; TFunc - pointers to the data member functions. The following sufixes are currently used, to describe function arguments:. G - generic layout - pointer to double (arguments), pointer to double (parameters); 10 - double; 110 - double, double; 1110 - double, double, double . Definition at line 37 of file TFormulaPrimitive.h. Public Types; typedef Double_t(* GenFunc0) ();  ; typedef Double_t(* GenFunc10) (Double_t);  ; typedef Double_t(* GenFunc110) (Double_t, Double_t);  ; typedef Double_t(* GenFunc1110) (Double_t, Double_t, Double_t);  ; typ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormulaPrimitive.html:83,Guid,Guide,83,doc/master/classROOT_1_1v5_1_1TFormulaPrimitive.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormulaPrimitive.html,1,['Guid'],['Guide']
Usability,". ROOT: RecHit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; RecHit Class Reference. . Definition at line 88 of file collection_proxies.C. Public Member Functions;  RecHit (float pt, float x, float y, float z);  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRecHit.html:62,Guid,Guide,62,doc/master/classRecHit.html,https://root.cern,https://root.cern/doc/master/classRecHit.html,1,['Guid'],['Guide']
Usability,". ROOT: Rectangle_t Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; Rectangle_t Struct Reference. ; Rectangle structure (maps to the X11 XRectangle structure) ; Definition at line 361 of file GuiTypes.h. Public Attributes; UShort_t fHeight;  ; UShort_t fWidth;  ; Short_t fX;  ; Short_t fY;  . #include <GuiTypes.h>; Member Data Documentation. ◆ fHeight. UShort_t Rectangle_t::fHeight. Definition at line 363 of file GuiTypes.h. ◆ fWidth. UShort_t Rectangle_t::fWidth. Definition at line 363 of file GuiTypes.h. ◆ fX. Short_t Rectangle_t::fX. Definition at line 362 of file GuiTypes.h. ◆ fY. Short_t Rectangle_t::fY. Definition at line 362 of file GuiTypes.h. Collaboration diagram for Rectangle_t:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; core/gui/inc/GuiTypes.h. Rectangle_t. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structRectangle__t.html:68,Guid,Guide,68,doc/master/structRectangle__t.html,https://root.cern,https://root.cern/doc/master/structRectangle__t.html,2,['Guid'],['Guide']
Usability,". ROOT: RedirectHandle_t Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; RedirectHandle_t Struct Reference. . Definition at line 207 of file TSystem.h. Public Member Functions;  RedirectHandle_t (const char *n=nullptr);  ; void Reset ();  . Public Attributes; TString fFile;  ; Int_t fReadOffSet {-1};  ; Int_t fStdErrDup {-1};  ; TString fStdErrTty;  ; Int_t fStdOutDup {-1};  ; TString fStdOutTty;  . #include <TSystem.h>; Constructor & Destructor Documentation. ◆ RedirectHandle_t(). RedirectHandle_t::RedirectHandle_t ; (; const char * ; n = nullptr). inline . Definition at line 214 of file TSystem.h. Member Function Documentation. ◆ Reset(). void RedirectHandle_t::Reset ; (; ). inline . Definition at line 215 of file TSystem.h. Member Data Documentation. ◆ fFile. TString RedirectHandle_t::fFile. Definition at line 208 of file TSystem.h. ◆ fReadOffSet. Int_t RedirectHandle_t::fReadOffSet {-1}. Definition at line 213 of file TSystem.h. ◆ fStdErrDup. Int_t RedirectHandle_t::fStdErrDup {-1}. Definition at line 212 of file TSystem.h. ◆ fStdErrTty. TString RedirectHandle_t::fStdErrTty. Definition at line 210 of file TSystem.h. ◆ fStdOutDup. Int_t RedirectHandle_t::fStdOutDup {-1}. Definition at line 211 of file TSystem.h. ◆ fStdOutTty. TString RedirectHandle_t::fStdOutTty. Definition at line 209 of file TSystem.h. Collaboration diagram for RedirectHandle_t:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; core/base/inc/TSystem.h. RedirectHandle_t. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structRedirectHandle__t.html:73,Guid,Guide,73,doc/master/structRedirectHandle__t.html,https://root.cern,https://root.cern/doc/master/structRedirectHandle__t.html,2,['Guid'],['Guide']
Usability,". ROOT: Related Pages. ROOT;  6.06/09. Reference Guide. ROOT Home Page; Main Page; Related Pages; User's Classes; Namespaces; All Classes; Files; Release Notes. Related Pages . Here is a list of all related documentation pages:; [detail level 12];  mainpage;  ROOTaaS;  ROOTR Users Guide;  index;  index;  index;  index;  index;  index;  index;  index;  Hist;  Math;  ▼The ROOT Mathematical Libraries;  MathCore Library;  MathMore Library;  Minuit2;  SMatrix Package;  externalUsage;  Examples with External Packages;  Genvector;  Generic Vector for 2, 3 and 4 Dimensions;  LorentzVector;  LorentzVector Classes;  Point3D;  Point3D Classes;  Transformation;  Vector Transformations;  Vector3D;  Vector3D Classes;  VectorPoint2D;  2D Point and Vector Classes;  MathCore;  MathMore;  Minuit2;  Functions;  Matrix and Vector Operators and Functions;  SMatrix;  SMatrixClass;  SMatrix Class Properties;  SVector;  SVector Class Properties;  Unuran;  Licence;  The VDT mathematical library;  Civetweb Contributors;  ALL LICENSES;  ![Civetweb](https://raw.github.com/bel2125/civetweb/master/resources/civetweb_64x64.png ""Civetweb"") Civetweb;  Setup a static PROOF cluster with PROOF on Demand;  The Dataset Stager;  Deploying the Virtual Analysis Facility;  A PROOF interface to the AliEn file catalog;  Using the Virtual Analysis Facility;  RooFit. ROOT 6.06/09 - Reference Guide Generated on Sun Dec 10 2017 22:29:05 using Doxygen 1.8.9. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/pages.html:49,Guid,Guide,49,root/html606/pages.html,https://root.cern,https://root.cern/root/html606/pages.html,3,['Guid'],['Guide']
Usability,". ROOT: Roo1DTable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; Roo1DTable Class ReferenceRooFit » RooFit Core. ; One-dimensional table. ; A table is the category equivalent of a plot. To create a table use the RooDataSet::table() method. ; Definition at line 23 of file Roo1DTable.h. Public Member Functions;  Roo1DTable ();  ;  Roo1DTable (const char *name, const char *title, const RooAbsCategory &cat);  Create an empty table from abstract category. ;  ;  Roo1DTable (const Roo1DTable &other);  Copy constructor. ;  ;  ~Roo1DTable () override;  Destructor. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; void fill (RooAbsCategory &cat, double weight=1.0) override;  Increment the counter of the table slot with the name corresponding to that of the current category state. ;  ; double get (const char *label, bool silent=false) const;  Return the table entry named 'label'. ;  ; double get (const int index, bool silent=false) const;  Return the table entry named 'label'. ;  ; double getFrac (const char *label, bool silent=false) const;  Return the fraction of entries in the table contained in the slot named 'label'. ;  ; double getFrac (const int index, bool silent=false) const;  Return the fraction of entries in the table contained in the slot named 'label'. ;  ; double getOverflow () const;  Return the number of overflow entries in the table. ;  ; TClass * IsA () const override;  ; bool isIdentical (const RooTable &other, bool verbose) override;  Return true if table is identical in contents to given reference table. ;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void printClassName (std::ostream &os) const override;  Print the class name of the table. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRoo1DTable.html:66,Guid,Guide,66,doc/master/classRoo1DTable.html,https://root.cern,https://root.cern/doc/master/classRoo1DTable.html,1,['Guid'],['Guide']
Usability,". ROOT: Roo2DKeysPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; Roo2DKeysPdf Class ReferenceRooFit » RooFit. ; Two-dimensional kernel estimation PDF. ; This function has been superseded by the more general RooNDKeysPdf. ; Definition at line 25 of file Roo2DKeysPdf.h. Public Member Functions;  Roo2DKeysPdf (const char *name, const char *title, RooAbsReal &xx, RooAbsReal &yy, RooDataSet &data, TString options=""a"", double widthScaleFactor=1.0);  Constructor. ;  ;  Roo2DKeysPdf (const Roo2DKeysPdf &other, const char *name=nullptr);  Copy constructor. ;  ;  ~Roo2DKeysPdf () override;  Destructor. ;  ; Int_t calculateBandWidth (Int_t kernel=-999);  Calculates the kernel bandwidth for x & y and the probability look up table _p[i][j]. ;  ; TObject * clone (const char *newname) const override;  ; double evaluate () const override;  Evaluates the kernel estimation for x,y, interpolating between the points if necessary. ;  ; Int_t getBandWidthType () const;  ; double getMean (const char *axis) const;  ; void getOptions (void) const;  ; double getSigma (const char *axis) const;  ; TClass * IsA () const override;  ; Int_t loadDataSet (RooDataSet &data, TString options);  Loads a new data set into the class instance. ;  ; void PrintInfo (std::ostream &) const;  Prints out _p[_nPoints][_nPoints] indicating the domain limits. ;  ; void setOptions (TString options);  ; void setWidthScaleFactor (double widthScaleFactor);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeHistToFile (char *outputFile, const char *histName) const;  Plots the PDF as a histogram and saves it to a file, so that it can be loaded in as a Roo2DHist PDF in the future to save on ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRoo2DKeysPdf.html:68,Guid,Guide,68,doc/master/classRoo2DKeysPdf.html,https://root.cern,https://root.cern/doc/master/classRoo2DKeysPdf.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAbsAnaConvPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooAbsAnaConvPdf Class ReferenceabstractRooFit » RooFit Core. ; Base class for PDFs that represent a physics model that can be analytically convolved with a resolution model. ; To achieve factorization between the physics model and the resolution model, each physics model must be able to be written in the form ; \[; \mathrm{Phys}(x, \bar{a}, \bar{b}) = \sum_k \mathrm{coef}_k(\bar{a}) * \mathrm{basis}_k(x,\bar{b}); \]. where \( \mathrm{basis}_k \) are a limited number of functions in terms of the variable to be convoluted, and \( \mathrm{coef}_k \) are coefficients independent of the convolution variable.; Classes derived from RooResolutionModel implement ; \[; R_k(x,\bar{b},\bar{c}) = \int \mathrm{basis}_k(x', \bar{b}) \cdot \mathrm{resModel}(x-x',\bar{c}) \; \mathrm{d}x',; \]. which RooAbsAnaConvPdf uses to construct the pdf for [ Phys (x) R ] : ; \[; \mathrm{PDF}(x,\bar{a},\bar{b},\bar{c}) = \sum_k \mathrm{coef}_k(\bar{a}) * R_k(x,\bar{b},\bar{c}); \]. A minimal implementation of a RooAbsAnaConvPdf physics model consists of. A constructor that declares the required basis functions using the declareBasis() method. The declareBasis() function assigns a unique identifier code to each declare basis; An implementation of coefficient(Int_t code) returning the coefficient value for each declared basis function. Optionally, analytical integrals can be provided for the coefficient functions. The interface for this is quite similar to that for integrals of regular PDFs. Two functions, Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName) const; double coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsAnaConvPdf.html:72,Guid,Guide,72,doc/master/classRooAbsAnaConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsAnaConvPdf.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAbsArg Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; RooAbsArg Class ReferenceabstractRooFit » RooFit Core. ; Common abstract base class for objects that represent a value and a ""shape"" in RooFit. ; Values or shapes usually depend on values or shapes of other RooAbsArg instances. Connecting several RooAbsArg in a computation graph models an expression tree that can be evaluated. Building a computation graph of RooFit objects; Therefore, RooAbsArg provides functionality to connect objects of type RooAbsArg into a computation graph to pass values between those objects. A value can e.g. be a real-valued number, (instances of RooAbsReal), or an integer, that is, category index (instances of RooAbsCategory). The third subclass of RooAbsArg is RooStringVar, but it is rarely used.; The ""shapes"" that a RooAbsArg can possess can e.g. be the definition range of an observable, or how many states a category object has. In computations, values are expected to change often, while shapes remain mostly constant (unless e.g. a new range is set for an observable).; Nodes of a computation graph are connected using instances of RooAbsProxy. If Node B declares a member RooTemplateProxy<TypeOfNodeA>, Node A will be registered as a server of values to Node B, and Node B will know that it is a client of node A. Using functions like dependsOn(), or getObservables() / getParameters(), the relation of A --> B can be queried. Using graphVizTree(), one can create a visualisation of the expression tree.; An instance of RooAbsArg can have named attributes. It also has flags to indicate that either its value or its shape were changed (= it is dirty",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:65,Guid,Guide,65,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAbsArg::ProxyListCache Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; RooAbsArg::ProxyListCache Struct Reference. . Definition at line 660 of file RooAbsArg.h. Public Attributes; std::vector< RooAbsProxy * > cache;  ; bool isDirty = true;  . #include <RooAbsArg.h>; Member Data Documentation. ◆ cache. std::vector<RooAbsProxy*> RooAbsArg::ProxyListCache::cache. Definition at line 661 of file RooAbsArg.h. ◆ isDirty. bool RooAbsArg::ProxyListCache::isDirty = true. Definition at line 662 of file RooAbsArg.h. Collaboration diagram for RooAbsArg::ProxyListCache:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; roofit/roofitcore/inc/RooAbsArg.h. RooAbsArgProxyListCache. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structRooAbsArg_1_1ProxyListCache.html:82,Guid,Guide,82,doc/master/structRooAbsArg_1_1ProxyListCache.html,https://root.cern,https://root.cern/doc/master/structRooAbsArg_1_1ProxyListCache.html,2,['Guid'],['Guide']
Usability,". ROOT: RooAbsBinning Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; RooAbsBinning Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for RooRealVar binning definitions. ; This class defines the interface to retrieve bin boundaries, ranges etc. ; Definition at line 25 of file RooAbsBinning.h. Public Member Functions;  RooAbsBinning (const char *name=nullptr);  ;  RooAbsBinning (const RooAbsBinning &other, const char *name=nullptr);  ; virtual double * array () const =0;  ; virtual double averageBinWidth () const =0;  ; virtual double binCenter (Int_t bin) const =0;  ; virtual double binHigh (Int_t bin) const =0;  ; virtual double binLow (Int_t bin) const =0;  ; int binNumber (double x) const;  Returns the bin number corresponding to the value x. ;  ; virtual void binNumbers (double const *x, int *bins, std::size_t n, int coef=1) const =0;  Compute the bin indices for multiple values of x. ;  ; virtual double binWidth (Int_t bin) const =0;  ; virtual RooAbsBinning * clone (const char *name=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual double highBound () const =0;  ; virtual RooAbsReal * highBoundFunc () const;  Return pointer to RooAbsReal parameterized upper bound, if any. ;  ; virtual void insertHook (RooAbsRealLValue &) const;  Hook interface function to execute code upon insertion into a RooAbsRealLValue. ;  ; TClass * IsA () const override;  ; virtual bool isParameterized () const;  Interface function. ;  ; virtual bool isShareable () const;  If true (default), the range definition can be shared across clones of a RooRealVar. ;  ; virtual bool isUniform () const;  ; virtual double lowBound () const =0;  ; virtual RooAbsReal * lowBoundFunc () const;  Return pointer to RooAbsReal parameter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsBinning.html:69,Guid,Guide,69,doc/master/classRooAbsBinning.html,https://root.cern,https://root.cern/doc/master/classRooAbsBinning.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAbsCache Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooAbsCache Class ReferenceRooFit » RooFit Core. ; Abstract base class for data members of RooAbsArgs that cache other (composite) RooAbsArg expressions. ; The RooAbsCache interface defines the interaction between the owning RooAbsArg object and the cache data member to communicate server redirects, operation mode changes and constant term optimization management calls. ; Definition at line 27 of file RooAbsCache.h. Public Member Functions;  RooAbsCache (const RooAbsCache &, RooAbsArg *owner=nullptr);  Copy constructor. Takes owner as argument and registers cache with owne. ;  ;  RooAbsCache (RooAbsArg *owner=nullptr);  Constructor. Takes owner as argument and register cache with owner. ;  ; virtual ~RooAbsCache ();  Destructor. Unregisters cache with owner. ;  ; virtual void findConstantNodes (const RooArgSet &, RooArgSet &, RooLinkedList &);  Interface for constant term node finding calls. ;  ; virtual TClass * IsA () const;  ; virtual void operModeHook ();  Interface for operation mode changes. ;  ; virtual void optimizeCacheMode (const RooArgSet &, RooArgSet &, RooLinkedList &);  Interface for processing of cache mode optimization calls. ;  ; virtual void printCompactTreeHook (std::ostream &, const char *);  Interface for printing of cache guts in tree mode printing. ;  ; virtual bool redirectServersHook (const RooAbsCollection &, bool, bool, bool);  Interface for server redirect calls. ;  ; void setOwner (RooAbsArg *owner);  Reset the owner, triggering the owner to register this cache in its list of caches. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void wireCache ();  . Static Public Member Functions; static TClass * Class ();  ; static const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCache.html:67,Guid,Guide,67,doc/master/classRooAbsCache.html,https://root.cern,https://root.cern/doc/master/classRooAbsCache.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAbsCachedPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; Friends |; List of all members ; RooAbsCachedPdf Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for p.d.f.s that need or want to cache their evaluate() output in a RooHistPdf defined in terms of the used observables. ; This base class manages the creation and storage of all RooHistPdf cache p.d.fs and the RooDataHists that define their shape. Implementations of RooAbsCachedPdf must define member function fillCacheObject() which serves to fill an already created RooDataHist with the p.d.fs function values. In addition the member functions actualObservables() and actualParameters() must be define which report what the actual observables to be cached are for a given set of observables passed by the user to getVal() and on which parameters need to be tracked for changes to trigger a refilling of the cache histogram. ; Definition at line 25 of file RooAbsCachedPdf.h. Classes; class  AnaIntConfig;  ; class  PdfCacheElem;  . Public Types; using CacheElem = PdfCacheElem;  ;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyItera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCachedPdf.html:71,Guid,Guide,71,doc/master/classRooAbsCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsCachedPdf.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAbsCachedReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Attributes |; Friends |; List of all members ; RooAbsCachedReal Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for functions that need or want to cache their evaluate() output in a RooHistFunc defined in terms of the used observables. ; This base class manages the creation and storage of all RooHistFunc cache p.d.fs and the RooDataHists that define their shape. Implementations of RooAbsCachedReal must define member function fillCacheObject() which serves to fill an already created RooDataHist with the functions function values. In addition the member functions actualObservables() and actualParameters() must be define which report what the actual observables to be cached are for a given set of observables passed by the user to getVal() and on which parameters need to be tracked for changes to trigger a refilling of the cache histogram. ; Definition at line 24 of file RooAbsCachedReal.h. Classes; class  FuncCacheElem;  . Public Member Functions;  RooAbsCachedReal ();  ;  RooAbsCachedReal (const char *name, const char *title, Int_t ipOrder=0);  Constructor. ;  ;  RooAbsCachedReal (const RooAbsCachedReal &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Forward call to implementation in relevant RooHistFunc instance. ;  ; void disableCache (bool flag);  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Return analytical integration capabilities of the RooHistFunc that correspond",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCachedReal.html:72,Guid,Guide,72,doc/master/classRooAbsCachedReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsCachedReal.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAbsCategory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Attributes |; Friends |; List of all members ; RooAbsCategory Class ReferenceabstractRooFit » RooFit Core. ; A space to attach TBranches. ; RooAbsCategory is the base class for objects that represent a discrete value with a finite number of states.; Each state is denoted by an integer and a name. Both can be used to retrieve and set states, but referring to states by index is more efficient. Conversion between index and name can be done using lookupName() or lookupIndex(). It is possible to iterate through all defined states using begin() and end().; For category classes deriving from RooAbsCategory, states can only be evaluated, i.e., queried. Refer to RooAbsCategoryLValue and its derived classes for categories where states can also be set. The simplest category class whose states can be set, queried and saved in a dataset, refer to RooCategory. Interface change in ROOT-6.22; Category data were based in the class RooCatType, holding an index state and a category name truncated to 256 characters. This wastes 64 bytes of storage space per entry, and prevents fast retrieval of category data. Since ROOT-6.22, categories are only represented by an integer. RooAbsCategory::lookupName() can be used to retrieve the corresponding state name. There is no limit for the length of the state name.; To not break old code, the old RooCatType interfaces are still available. Whenever possible, the following replacements should be used:; lookupType() \( \rightarrow \) lookupName() / lookupIndex(); typeIterator() \( \rightarrow \) range-based for loop / begin() / end(); isValidIndex(Int_t index) \( \rightarrow \) hasIndex(); isValid(const RooCatType&) \( \rightarrow \) ha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCategory.html:70,Guid,Guide,70,doc/master/classRooAbsCategory.html,https://root.cern,https://root.cern/doc/master/classRooAbsCategory.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAbsCategoryLValue Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; RooAbsCategoryLValue Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for objects that represent a discrete value that can be set from the outside, i.e. ; that may appear on the left hand side of an assignment (""*lvalue*"").; Each implementation must provide the functions setIndex()/setLabel() to allow direct modification of the value. RooAbsCategoryLValue may be derived, but its functional relation to other RooAbsArgs must be invertible. ; Definition at line 26 of file RooAbsCategoryLValue.h. Public Member Functions;  RooAbsCategoryLValue ();  ;  RooAbsCategoryLValue (const char *name, const char *title);  Constructor. ;  ;  RooAbsCategoryLValue (const RooAbsCategoryLValue &other, const char *name=nullptr);  Copy constructor. ;  ; Int_t getBin (const char *=nullptr) const override;  Get the index of the plot bin for the current value of this category. ;  ; Int_t getBin (const RooAbsBinning *) const override;  ; std::list< std::string > getBinningNames () const override;  ; const RooAbsBinning * getBinningPtr (const char *) const override;  ; double getBinWidth (Int_t, const char *=nullptr) const override;  ; TClass * IsA () const override;  ; bool isLValue () const override;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; Int_t numBins (const char *rangeName=nullptr) const override;  Return the number of fit bins ( = number of types ) ;  ; RooAbsArg & operator= (const char *label);  Assignment operator from string pointer. ;  ; RooAbsArg & operator= (const RooAbsCategory &other);  Assignment from another RooAbsCategory. ;  ; RooAbs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCategoryLValue.html:76,Guid,Guide,76,doc/master/classRooAbsCategoryLValue.html,https://root.cern,https://root.cern/doc/master/classRooAbsCategoryLValue.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAbsCollection Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; RooAbsCollection Class ReferenceabstractRooFit » RooFit Core. ; Abstract container object that can hold multiple RooAbsArg objects. ; Collections are ordered and can contain multiple objects of the same name, (but a derived implementation can enforce unique names). The storage of objects is implemented using the container denoted by RooAbsCollection::Storage_t. PyROOT; Some member functions of RooAbsCollection that take a RooCmdArg as argument also support keyword arguments. So far, this applies to RooAbsCollection::printLatex. For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; params.printLatex(ROOT.RooFit.Sibling(initParams), ROOT.RooFit.Columns(2)); ; # With keyword arguments:; params.printLatex(Sibling=initParams, Columns =2). Definition at line 65 of file RooAbsCollection.h. Classes; struct  RooAbsArgPtrOrDouble;  . Public Types; using const_iterator = Storage_t::const_iterator;  ; using Storage_t = std::vector< RooAbsArg * >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCollection.html:72,Guid,Guide,72,doc/master/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/master/classRooAbsCollection.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAbsCollection Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; RooAbsCollection Class ReferenceabstractRooFit » RooFit Core. ; Abstract container object that can hold multiple RooAbsArg objects. ; Collections are ordered and can contain multiple objects of the same name, (but a derived implementation can enforce unique names). The storage of objects is implemented using the container denoted by RooAbsCollection::Storage_t. PyROOT; Some member functions of RooAbsCollection that take a RooCmdArg as argument also support keyword arguments. So far, this applies to RooAbsCollection::printLatex. For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; params.printLatex(ROOT.RooFit.Sibling(initParams), ROOT.RooFit.Columns(2)); ; # With keyword arguments:; params.printLatex(Sibling=initParams, Columns =2). Definition at line 65 of file RooAbsCollection.h. Classes; struct  RooAbsArgPtrOrDouble;  . Public Types; using const_iterator = Storage_t::const_iterator;  ; using Storage_t = std::vector< RooAbsArg * >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1UL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsCollection.html:71,Guid,Guide,71,doc/v632/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/v632/classRooAbsCollection.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAbsData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooAbsData Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for binned and unbinned datasets. ; The abstract interface defines plotting and tabulating entry points for its contents and provides an iterator over its elements (bins for binned data sets, data points for unbinned datasets). Storing global observables in RooFit datasets; RooFit groups model variables into observables and parameters, depending on if their values are stored in the dataset. For fits with parameter constraints, there is a third kind of variables, called global observables. These represent the results of auxiliary measurements that constrain the nuisance parameters. In the RooFit implementation, a likelihood is generally the sum of two terms:; the likelihood of the data given the parameters, where the normalization set is the set of observables (implemented by RooNLLVar); the constraint term, where the normalization set is the set of global observables (implemented by RooConstraintSum). Before this release, the global observable values were always taken from the model/pdf. With this release, a mechanism is added to store a snapshot of global observables in any RooDataSet or RooDataHist. For toy studies where the global observables assume a different values for each toy, the bookkeeping of the set of global observables and in particular their values is much easier with this change.; Usage example for a model with global observables g1 and g2: using namespace RooFit;; ; std::unique_ptr<RooAbsData> data{model.generate(x, 1000)}; // data has only the single observables x; data->setGlobalObse",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsData.html:66,Guid,Guide,66,doc/master/classRooAbsData.html,https://root.cern,https://root.cern/doc/master/classRooAbsData.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAbsDataStore Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooAbsDataStore Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for a data collection. ; Definition at line 34 of file RooAbsDataStore.h. Public Member Functions;  RooAbsDataStore ();  ;  RooAbsDataStore (const RooAbsDataStore &other, const char *newname=nullptr);  ;  RooAbsDataStore (const RooAbsDataStore &other, const RooArgSet &vars, const char *newname=nullptr);  ;  RooAbsDataStore (RooStringView name, RooStringView title, const RooArgSet &vars);  ; virtual RooAbsArg * addColumn (RooAbsArg &var, bool adjustRange=true)=0;  ; RooArgSet * addColumns (const RooArgList &varList);  ; virtual void append (RooAbsDataStore &other)=0;  ; virtual void attachBuffers (const RooArgSet &extObs)=0;  ; virtual void attachCache (const RooAbsArg *newOwner, const RooArgSet &cachedVars)=0;  ; virtual void cacheArgs (const RooAbsArg *cacheOwner, RooArgSet &varSet, const RooArgSet *nset=nullptr, bool skipZeroWeights=false)=0;  ; const RooArgSet & cachedVars () const;  ; virtual const RooAbsArg * cacheOwner ()=0;  ; virtual bool changeObservableName (const char *from, const char *to)=0;  ; virtual void checkInit () const;  ; virtual RooAbsDataStore * clone (const char *newname=nullptr) const =0;  ; virtual RooAbsDataStore * clone (const RooArgSet &vars, const char *newname=nullptr) const =0;  ; int defaultPrintContents (Option_t *) const override;  Define default print options, for a given print style. ;  ; bool dirtyProp () const;  ; virtual void dump ();  ; virtual Int_t fill ()=0;  ; virtual void forceCacheUpdate ();  ; virtual const RooArgSet * get () const;  ; virtual const RooArgSet * get (Int_t index) const =0;  ; virtual RooAbsData::RealSpans getBatches (std::size_t first, std::size_t len) const =0;  Retrieve bat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsDataStore.html:71,Guid,Guide,71,doc/master/classRooAbsDataStore.html,https://root.cern,https://root.cern/doc/master/classRooAbsDataStore.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAbsFunc Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooAbsFunc Class ReferenceabstractRooFit » RooFit Core. ; Abstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it. ; The purpose of this interface is to decouple RooAbsArg-specific implementations from numerical algorithms that only need a simple function evaluation interface. The domain of the function is assumed to be an n-dimensional box with edge coordinates specified by the the getMinLimit() and getMaxLimit() methods. ; Definition at line 27 of file RooAbsFunc.h. Public Member Functions;  RooAbsFunc (const RooAbsFunc &other);  ;  RooAbsFunc (UInt_t dimension);  ; virtual ~RooAbsFunc ();  ; virtual std::list< double > * binBoundaries (Int_t) const;  ; UInt_t getDimension () const;  ; virtual double getMaxLimit (UInt_t dimension) const =0;  ; virtual double getMinLimit (UInt_t dimension) const =0;  ; virtual const char * getName () const;  Name of function binding. ;  ; virtual TClass * IsA () const;  ; bool isValid () const;  ; Int_t numCall () const;  Return number of function calls since last reset. ;  ; virtual double operator() (const double xvector[]) const =0;  ; virtual std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable. ;  ; void resetNumCall () const;  Reset function call counter. ;  ; virtual void restoreXVec () const;  ; virtual void saveXVec () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsFunc.html:66,Guid,Guide,66,doc/master/classRooAbsFunc.html,https://root.cern,https://root.cern/doc/master/classRooAbsFunc.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: RooAbsGenContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooAbsGenContext Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for generator contexts of RooAbsPdf objects. ; A generator context is an object that controls the generation of events from a given p.d.f in one or more sessions. This class defines the common interface for all such contexts and organizes storage of common components, such as the observables definition, the prototype data etc.. ; Definition at line 26 of file RooAbsGenContext.h. Public Member Functions;  RooAbsGenContext (const RooAbsPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; virtual void attach (const RooArgSet &params);  Interface to attach given parameters to object in this context. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents when printing. ;  ; StyleOption defaultPrintStyle (Option_t *opt) const override;  Define default print style. ;  ; virtual RooDataSet * generate (double nEvents=0, bool skipInit=false, bool extendedMode=false);  Generate the specified number of events with nEvents>0 and and return a dataset containing the generated events. ;  ; virtual void generateEvent (RooArgSet &theEvent, Int_t remaining)=0;  ; virtual void initGenerator (const RooArgSet &theEvent);  Interface function to initialize context for generation for given set of observables. ;  ; TClass * IsA () const override;  ; bool isValid () const;  ; bool isVerbose () const;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void printArgs (std::ostream &os) const override;  Print arguments of context, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsGenContext.html:72,Guid,Guide,72,doc/master/classRooAbsGenContext.html,https://root.cern,https://root.cern/doc/master/classRooAbsGenContext.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAbsHiddenReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; RooAbsHiddenReal Class ReferenceRooFit » RooFit Core. ; Base class for objects that want to hide their return value from interactive use, e.g. ; for implementations of parameter unblinding functions. This class overrides all printing methods with versions that do not reveal the objects value and it has a protected version of getVal() ; Definition at line 25 of file RooAbsHiddenReal.h. Public Member Functions;  RooAbsHiddenReal ();  ;  RooAbsHiddenReal (const char *name, const char *title, const char *unit="""");  Constructor. ;  ;  RooAbsHiddenReal (const char *name, const char *title, RooAbsCategory &blindState, const char *unit="""");  Constructor. ;  ;  RooAbsHiddenReal (const RooAbsHiddenReal &other, const char *name=nullptr);  Copy constructor. ;  ; double getHiddenVal (const RooArgSet *nset=nullptr) const;  ; TClass * IsA () const override;  ; bool isHidden () const;  ; void printValue (std::ostream &stream) const override;  Special version of printValue that doesn't reveal the objects value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Special version of readFromStream that disallows reading from stream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Special version of writeToStream that disallows reading from stream. ;  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsHiddenReal.html:72,Guid,Guide,72,doc/master/classRooAbsHiddenReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsHiddenReal.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAbsMCStudyModule Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooAbsMCStudyModule Class ReferenceRooFit » RooFit Core. ; Base class for add-on modules to RooMCStudy that can perform additional calculations on each generate+fit cycle managed by RooMCStudy. ; This class can insert code to be executed before each generation step, between the generation and fitting step and after the fitting step. Any summary output variables declared in the RooDataSet exported through summaryData() is merged with the 'master' summary dataset in RooMCStudy.; Look at RooDLLSignificanceMCSModule for an example of an implementation. ; Definition at line 30 of file RooAbsMCStudyModule.h. Public Member Functions;  RooAbsMCStudyModule (const char *name, const char *title);  Constructor. ;  ;  RooAbsMCStudyModule (const RooAbsMCStudyModule &other);  Copy constructor. ;  ; bool doInitializeInstance (RooMCStudy &);  Initializer method called upon attachment to given RooMCStudy object. ;  ; virtual RooDataSet * finalizeRun ();  Method called at the end of each RooMCStudy run. ;  ; virtual bool initializeInstance ();  Initializer called immediately after attachment to RooMCStudy object and initialization of module base class. ;  ; virtual bool initializeRun (Int_t);  Method called at the beginning of each RooMCStudy run. ;  ; TClass * IsA () const override;  ; virtual bool processAfterFit (Int_t);  Method called after fit has been performed. ;  ; virtual bool processBeforeGen (Int_t);  Method called after resetting of generator parameters to initial values and before call to generator context Any modifications to generator parameters will affect next generation operation (only) ;  ; virtual bool processBetweenGenAndFit (Int_t);  Method called after generation of toy data sample an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsMCStudyModule.html:75,Guid,Guide,75,doc/master/classRooAbsMCStudyModule.html,https://root.cern,https://root.cern/doc/master/classRooAbsMCStudyModule.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAbsMoment Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooAbsMoment Class ReferenceRooFit » RooFit Core. . Definition at line 27 of file RooAbsMoment.h. Public Member Functions;  RooAbsMoment ()=default;  ;  RooAbsMoment (const char *name, const char *title, RooAbsReal &func, RooRealVar &x, Int_t order=1, bool takeRoot=false);  ;  RooAbsMoment (const RooAbsMoment &other, const char *name=nullptr);  ; bool central () const;  ; TClass * IsA () const override;  ; RooAbsReal * mean ();  ; Int_t order () const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundari",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsMoment.html:68,Guid,Guide,68,doc/master/classRooAbsMoment.html,https://root.cern,https://root.cern/doc/master/classRooAbsMoment.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAbsPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooAbsPdf Class ReferenceRooFit » RooFit Core. ; Abstract interface for all probability density functions. . RooAbsPdf, the base class of all PDFs; RooAbsPdf is the base class for all probability density functions (PDFs). The class provides hybrid analytical/numerical normalization for its implementations, error tracing, and a Monte Carlo generator interface. A Minimal PDF Implementation; A minimal implementation of a PDF class derived from RooAbsPdf should override the evaluate() function. This function should return the PDF's value (which does not need to be normalised).; Normalization/Integration; Although the normalization of a PDF is an integral part of a probability density function, normalization is treated separately in RooAbsPdf. The reason is that a RooAbsPdf object is more than a PDF: it can be a building block for a more complex composite PDF if any of its variables are functions instead of variables. In such cases, the normalization of the composite PDF may not simply be integral over the dependents of the top-level PDF: these are functions with potentially non-trivial Jacobian terms themselves. NoteTherefore, no explicit attempt should be made to normalize the function output in evaluate(). In particular, normalisation constants can be omitted to speed up the function evaluations, and included later in the integration of the PDF (see below), which is rarely called in comparison to the evaluate() function.; In addition, RooAbsPdf objects do not have a static concept of what variables are parameters, and what variables are dependents (which need to be integrated over ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:65,Guid,Guide,65,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAbsPdf::CacheElem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; RooAbsPdf::CacheElem Class Reference. ; Normalization set with for above integral. ; Definition at line 322 of file RooAbsPdf.h. Public Member Functions;  CacheElem (RooAbsReal &norm);  ;  ~CacheElem () override;  Destructor of normalization cache element. ;  ; RooArgList containedArgs (Action) override;  ;  Public Member Functions inherited from RooAbsCacheElement;  RooAbsCacheElement ();  ; virtual ~RooAbsCacheElement ();  ; virtual void findConstantNodes (const RooArgSet &obs, RooArgSet &cacheList, RooLinkedList &processedNodes);  Interface for constant term optimization calls. ;  ; virtual TClass * IsA () const;  ; virtual void operModeHook (RooAbsArg::OperMode);  Interface for changes of operation mode. ;  ; virtual void optimizeCacheMode (const RooArgSet &obs, RooArgSet &optNodes, RooLinkedList &processedNodes);  Interface for cache optimization calls. ;  ; virtual void printCompactTreeHook (std::ostream &, const char *, Int_t curElem, Int_t totElem);  Hook function to print cache guts in tree printing mode of RooAbsArgs. ;  ; virtual bool redirectServersHook (const RooAbsCollection &, bool, bool, bool);  Interface for server redirect calls. ;  ; void setOwner (RooAbsArg *owner);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Public Attributes; std::unique_ptr< RooAbsReal > _norm;  . Additional Inherited Members;  Public Types inherited from RooAbsCacheElement; enum  Action { OperModeChange; , OptimizeCaching; , FindConstantNodes; };  ;  Static Public Member Functions inherited from RooAbsCacheElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Attributes inherited f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html:76,Guid,Guide,76,doc/master/classRooAbsPdf_1_1CacheElem.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAbsPdf::GenSpec Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooAbsPdf::GenSpec Class Reference. . Definition at line 72 of file RooAbsPdf.h. Public Member Functions;  GenSpec ()=default;  ; virtual ~GenSpec ();  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions;  GenSpec (const GenSpec &other);  ;  GenSpec (RooAbsGenContext *context, const RooArgSet &whatVars, RooDataSet *protoData, Int_t nGen, bool extended, bool randProto, bool resampleProto, TString dsetName, bool init=false);  . Private Attributes; TString _dsetName;  ; bool _extended = false;  ; std::unique_ptr< RooAbsGenContext > _genContext;  ; bool _init = false;  ; Int_t _nGen = 0;  ; RooDataSet * _protoData = nullptr;  ; bool _randProto = false;  ; bool _resampleProto = false;  ; RooArgSet _whatVars;  . Friends; class RooAbsPdf;  . #include <RooAbsPdf.h>; Constructor & Destructor Documentation. ◆ ~GenSpec(). RooAbsPdf::GenSpec::~GenSpec ; (; ). virtualdefault . ◆ GenSpec() [1/3]. RooAbsPdf::GenSpec::GenSpec ; (; ). default . ◆ GenSpec() [2/3]. RooAbsPdf::GenSpec::GenSpec ; (; RooAbsGenContext * ; context, . const RooArgSet & ; whatVars, . RooDataSet * ; protoData, . Int_t ; nGen, . bool ; extended, . bool ; randProto, . bool ; resampleProto, . TString ; dsetName, . bool ; init = false . ). private . Definition at line 2685 of file RooAbsPdf.cxx. ◆ GenSpec() [3/3]. RooAbsPdf::GenSpec::GenSpec ; (; const GenSpec & ; other). private . Member Function Documentation. ◆ Class(). static TCla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf_1_1GenSpec.html:74,Guid,Guide,74,doc/master/classRooAbsPdf_1_1GenSpec.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf_1_1GenSpec.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAbsProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooAbsProxy Class ReferenceabstractRooFit » RooFit Core. ; Abstract interface for proxy classes. ; Proxy classes hold pointers to other Roofit objects and process serverRedirect changes so that the proxied pointers are updated accordingly on a clone or copy of of the owning class ; Definition at line 37 of file RooAbsProxy.h. Public Member Functions;  RooAbsProxy ();  ;  RooAbsProxy (const char *name, const RooAbsProxy &other);  Copy constructor. ;  ; virtual ~RooAbsProxy ();  ; virtual TClass * IsA () const;  ; virtual const char * name () const;  ; const RooArgSet * nset () const;  ; virtual void print (std::ostream &os, bool addContents=false) const;  Print proxy name. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; virtual void changeNormSet (const RooArgSet *newNormSet);  Destructor. ;  ; virtual bool changePointer (const RooAbsCollection &newServerSet, bool nameChange=false, bool factoryInitMode=false)=0;  ; virtual bool changePointer (std::unordered_map< RooAbsArg *, RooAbsArg * > const &replacements)=0;  . Protected Attributes; RooArgSet * _nset = nullptr;  ! Normalization set to be used for evaluation of RooAbsPdf contents ;  . Friends; class RooAbsArg;  ; class RooAbsPdf;  . #include <RooAbsProxy.h>. Inheritance diagram for RooAbsProxy:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAbsProxy() [1/2]. RooAbsProx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsProxy.html:67,Guid,Guide,67,doc/master/classRooAbsProxy.html,https://root.cern,https://root.cern/doc/master/classRooAbsProxy.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAbsReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; RooAbsReal Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for objects that represent a real value and implements functionality common to all real-valued objects such as the ability to plot them, to construct integrals of them, the ability to advertise (partial) analytical integrals etc. ; Implementation of RooAbsReal may be derived, thus no interface is provided to modify the contents. PyROOT; Some member functions of RooAbsReal that take a RooCmdArg as argument also support keyword arguments. So far, this applies to RooAbsReal::plotOn, RooAbsReal::createHistogram, RooAbsReal::chi2FitTo, RooAbsReal::createChi2, RooAbsReal::createRunningIntegral and RooAbsReal::createIntegral For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; var.plotOn(frame, ROOT.RooFit.Components(""background"")); ; # With keyword arguments:; var.plotOn(frame, Components=""background""). Definition at line 59 of file RooAbsReal.h. Classes; class  EvalError;  ; class  EvalErrorContext;  Context to temporarily change the error logging mode as long as the context is alive. More...;  ; struct  GlobalSelectComponentRAII;  ; struct  PlotOpt;  ; class  Ref;  A RooAbsReal::Ref can be constructed from a RooAbsReal& or a double that will be implicitly converted to a RooConstVar&. More...;  . Public Types; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Alw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:66,Guid,Guide,66,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAbsReal Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; RooAbsReal Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for objects that represent a real value and implements functionality common to all real-valued objects such as the ability to plot them, to construct integrals of them, the ability to advertise (partial) analytical integrals etc. ; Implementation of RooAbsReal may be derived, thus no interface is provided to modify the contents. PyROOT; Some member functions of RooAbsReal that take a RooCmdArg as argument also support keyword arguments. So far, this applies to RooAbsReal::plotOn, RooAbsReal::createHistogram, RooAbsReal::chi2FitTo, RooAbsReal::createChi2, RooAbsReal::createRunningIntegral and RooAbsReal::createIntegral For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; var.plotOn(frame, ROOT.RooFit.Components(""background"")); ; # With keyword arguments:; var.plotOn(frame, Components=""background""). Definition at line 59 of file RooAbsReal.h. Classes; class  EvalError;  ; class  EvalErrorContext;  Context to temporarily change the error logging mode as long as the context is alive. More...;  ; struct  GlobalSelectComponentRAII;  ; struct  PlotOpt;  ; class  Ref;  A RooAbsReal::Ref can be constructed from a RooAbsReal& or a double that will be implicitly converted to a RooConstVar&. More...;  . Public Types; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; typedef std::map< constRooAbsArg *, std::pair< std::string, std::list< EvalError > > >::const_iterator EvalErrorIter;  ; enum  ScaleType { Raw; , Relative; , NumEven",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:65,Guid,Guide,65,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['Guid'],['Guide']
Usability,. ROOT: RooAbsReal::EvalError Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; RooAbsReal::EvalError Class Reference. . Definition at line 307 of file RooAbsReal.h. Public Member Functions;  EvalError ();  ;  EvalError (const EvalError &other);  ; void setMessage (const char *tmp);  ; void setServerValues (const char *tmp);  . Public Attributes; std::string _msg;  ; std::string _srvval;  . #include <RooAbsReal.h>; Constructor & Destructor Documentation. ◆ EvalError() [1/2]. RooAbsReal::EvalError::EvalError ; (; ). inline . Definition at line 309 of file RooAbsReal.h. ◆ EvalError() [2/2]. RooAbsReal::EvalError::EvalError ; (; const EvalError & ; other). inline . Definition at line 310 of file RooAbsReal.h. Member Function Documentation. ◆ setMessage(). void RooAbsReal::EvalError::setMessage ; (; const char * ; tmp). inline . Definition at line 311 of file RooAbsReal.h. ◆ setServerValues(). void RooAbsReal::EvalError::setServerValues ; (; const char * ; tmp). inline . Definition at line 312 of file RooAbsReal.h. Member Data Documentation. ◆ _msg. std::string RooAbsReal::EvalError::_msg. Definition at line 313 of file RooAbsReal.h. ◆ _srvval. std::string RooAbsReal::EvalError::_srvval. Definition at line 314 of file RooAbsReal.h. Libraries for RooAbsReal::EvalError:. [legend]; The documentation for this class was generated from the following file:; roofit/roofitcore/inc/RooAbsReal.h. RooAbsRealEvalError. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:41 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal_1_1EvalError.html:77,Guid,Guide,77,doc/master/classRooAbsReal_1_1EvalError.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal_1_1EvalError.html,2,['Guid'],['Guide']
Usability,". ROOT: RooAbsReal::PlotOpt Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; RooAbsReal::PlotOpt Struct Reference. . Definition at line 463 of file RooAbsReal.h. Public Attributes; const char * addToCurveName = nullptr;  ; double addToWgtOther = 1.0;  ; double addToWgtSelf = 1.0;  ; bool binProjData = false;  ; bool curveInvisible = false;  ; const char * curveName = nullptr;  ; const char * curveNameSuffix = """";  ; bool doeeval = false;  ; Option_t * drawOptions = ""L"";  ; double eeval = 0.0;  ; const RooFitResult * errorFR = nullptr;  ; RooFit::MPSplit interleave = RooFit::Interleave;  ; const char * normRangeName = nullptr;  ; Int_t numCPU = 1;  ; Int_t numee = 10;  ; bool postRangeFracScale = false;  ; double precision = 1e-3;  ; bool progress = false;  ; const RooAbsData * projData = nullptr;  ; const RooArgSet * projDataSet = nullptr;  ; const char * projectionRangeName = nullptr;  ; const RooArgSet * projSet = nullptr;  ; double rangeHi = 0.0;  ; double rangeLo = 0.0;  ; double scaleFactor = 1.0;  ; bool shiftToZero = false;  ; ScaleType stype = Relative;  ; RooCurve::WingMode wmode = RooCurve::Extended;  . #include <RooAbsReal.h>; Member Data Documentation. ◆ addToCurveName. const char* RooAbsReal::PlotOpt::addToCurveName = nullptr. Definition at line 481 of file RooAbsReal.h. ◆ addToWgtOther. double RooAbsReal::PlotOpt::addToWgtOther = 1.0. Definition at line 483 of file RooAbsReal.h. ◆ addToWgtSelf. double RooAbsReal::PlotOpt::addToWgtSelf = 1.0. Definition at line 482 of file RooAbsReal.h. ◆ binProjData. bool RooAbsReal::PlotOpt::binProjData = false. Definition at line 468 of file RooAbsReal.h. ◆ curveInvisible. bool RooAbsReal::PlotOpt::curveInvisible = false. Definition at line 479 of file RooAbsReal.h. ◆ curveName. const char* RooAbsReal::PlotOpt::curveName = nullptr. Definition at line 480 of file RooAbsReal.h. ◆ curveNameSuffix. const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structRooAbsReal_1_1PlotOpt.html:76,Guid,Guide,76,doc/master/structRooAbsReal_1_1PlotOpt.html,https://root.cern,https://root.cern/doc/master/structRooAbsReal_1_1PlotOpt.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAbsRealLValue Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; RooAbsRealLValue Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for objects that represent a real value that may appear on the left hand side of an equation ('lvalue'). ; Each implementation must provide a setVal() member to allow direct modification of the value. RooAbsRealLValue may be derived, but its functional relation to other RooAbsArg must be invertible; This class has methods that export the defined range of the lvalue, but doesn't hold its values because these limits may be derived from limits of client object. The range serve as integration range when interpreted as a observable and a boundaries when interpreted as a parameter. PyROOT; Some member functions of RooAbsRealLValue that take a RooCmdArg as argument also support keyword arguments. So far, this applies to RooAbsRealLValue::createHistogram and RooAbsRealLValue::frame. For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; frame = x.frame(ROOT.RooFit.Name(""xframe""), ROOT.RooFit.Title(""RooPlot with decorations""), ROOT.RooFit.Bins(40)); ; # With keyword arguments:; frame = x.frame(Name=""xframe"", Title=""RooPlot with decorations"", Bins=40). Definition at line 31 of file RooAbsRealLValue.h. Public Member Functions;  RooAbsRealLValue ();  ;  RooAbsRealLValue (const char *name, const char *title, const char *unit="""");  Constructor. ;  ;  RooAbsRealLValue (const RooAbsRealLValue &other, const char *name=nullptr);  Copy constructor. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel, const RooAbsBinning &bins) const;  Crea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsRealLValue.html:72,Guid,Guide,72,doc/master/classRooAbsRealLValue.html,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAbsStudy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; Friends |; List of all members ; RooAbsStudy Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for RooStudyManager modules. ; Definition at line 33 of file RooAbsStudy.h. Public Member Functions;  RooAbsStudy ()=default;  ;  RooAbsStudy (const char *name, const char *title);  Constructor. ;  ;  RooAbsStudy (const RooAbsStudy &other);  Copy constructor. ;  ;  ~RooAbsStudy () override;  Destructor. ;  ; virtual bool attach (RooWorkspace &);  ; virtual RooAbsStudy * clone (const char *newname="""") const =0;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; RooLinkedList * detailedData ();  ; virtual void dump ();  ; virtual bool execute ();  ; virtual bool finalize ();  ; virtual bool initialize ();  ; TClass * IsA () const override;  ; void releaseDetailData ();  ; void storeDetailedOutput (bool flag);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; RooDataSet * summaryData ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsStudy.html:67,Guid,Guide,67,doc/master/classRooAbsStudy.html,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAddGenContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooAddGenContext Class ReferenceRooFit » RooFit Core. ; Efficient implementation of the generator context specific for RooAddPdf PDFs. ; The strategy of RooAddGenContext is to defer generation of each component to a dedicated generator context for that component and to randomly choose one of those context to generate an event, with a probability proportional to its associated coefficient. ; Definition at line 32 of file RooAddGenContext.h. Public Member Functions;  RooAddGenContext (const RooAddModel &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ;  RooAddGenContext (const RooAddPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; void attach (const RooArgSet &params) override;  Attach given set of variables to internal p.d.f. clone. ;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Print the details of the context. ;  ; void setProtoDataOrder (Int_t *lut) override;  Forward the setProtoDataOrder call to the component generator contexts. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsGenContext;  RooAbsGenContext (const RooAbsPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents when pri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddGenContext.html:72,Guid,Guide,72,doc/master/classRooAddGenContext.html,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAddModel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooAddModel Class Reference. ; RooAddModel is an efficient implementation of a sum of PDFs of the form. . \[; c_1 \cdot \mathrm{PDF}_1 + c_2 \cdot \mathrm{PDF}_2 + ... + c_n \cdot \mathrm{PDF}_n; \]. or ; \[; c_1 \cdot \mathrm{PDF}_1 + c_2 \cdot \mathrm{PDF}_2 + ... + \left( 1-\sum_{i=1}^{n-1} c_i \right) \cdot \mathrm{PDF}_n; \]. The first form is for extended likelihood fits, where the expected number of events is \( \sum_i c_i \). The coefficients \( c_i \) can either be explicitly provided, or, if all components support extended likelihood fits, they can be calculated from the contribution of each PDF to the total number of expected events.; In the second form, the sum of the coefficients is enforced to be one, and the coefficient of the last PDF is calculated from that condition.; RooAddModel relies on each component PDF to be normalized, and will perform no normalization other than calculating the proper last coefficient \( c_n \), if requested. An (enforced) condition for this assumption is that each \( \mathrm{PDF}_i \) is independent of each coefficient \( i \). ; Definition at line 27 of file RooAddModel.h. Classes; class  IntCacheElem;  . Public Member Functions;  RooAddModel ();  ;  RooAddModel (const char *name, const char *title, const RooArgList &pdfList, const RooArgList &coefList, bool ownPdfList=false);  Generic constructor from list of PDFs and list of coefficients. ;  ;  RooAddModel (const RooAddModel &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Return analytical integral defined by given scenario code. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddModel.html:67,Guid,Guide,67,doc/master/classRooAddModel.html,https://root.cern,https://root.cern/doc/master/classRooAddModel.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAddPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooAddPdf Class ReferenceRooFit » RooFit Core. ; Efficient implementation of a sum of PDFs of the form. . \[; \sum_{i=1}^{n} c_i \cdot \mathrm{PDF}_i; \]. or ; \[; c_1\cdot\mathrm{PDF}_1 + c_2\cdot\mathrm{PDF}_2 \; + \; ... \; + \; \left( 1-\sum_{i=1}^{n-1}c_i \right) \cdot \mathrm{PDF}_n; \]. The first form is for extended likelihood fits, where the expected number of events is \( \sum_i c_i \). The coefficients \( c_i \) can either be explicitly provided, or, if all components support extended likelihood fits, they can be calculated from the contribution of each PDF to the total expected number of events.; In the second form, the sum of the coefficients is required to be 1 or less, and the coefficient of the last PDF is calculated automatically from the condition that the sum of all coefficients has to be 1. Recursive coefficients; It is also possible to parameterise the coefficients recursively. \[; \sum_{i=1}^n c_i \prod_{j=1}^{i-1} \left[ (1-c_j) \right] \cdot \mathrm{PDF}_i \\; = c_1 \cdot \mathrm{PDF}_1 + (1-c_1)\, c_2 \cdot \mathrm{PDF}_2 + \ldots + (1-c_1)\ldots(1-c_{n-1}) \cdot 1 \cdot \mathrm{PDF}_n \\; \]. In this form the sum of the coefficients is always less than 1.0 for all possible values of the individual coefficients between 0 and 1. NoteDon't pass the \( n^\mathrm{th} \) coefficient. It is always 1, since the normalisation condition removes one degree of freedom.; RooAddPdf relies on each component PDF to be normalized and will perform no normalization other than calculating the proper last coefficient \( c_n \), if requested. An (enforced) condition for this assumption is that each \( \mathrm{PDF}_i \) is independen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddPdf.html:65,Guid,Guide,65,doc/master/classRooAddPdf.html,https://root.cern,https://root.cern/doc/master/classRooAddPdf.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAddPdf Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooAddPdf Class ReferenceRooFit » RooFit Core. ; Efficient implementation of a sum of PDFs of the form. . \[; \sum_{i=1}^{n} c_i \cdot \mathrm{PDF}_i; \]. or ; \[; c_1\cdot\mathrm{PDF}_1 + c_2\cdot\mathrm{PDF}_2 \; + \; ... \; + \; \left( 1-\sum_{i=1}^{n-1}c_i \right) \cdot \mathrm{PDF}_n; \]. The first form is for extended likelihood fits, where the expected number of events is \( \sum_i c_i \). The coefficients \( c_i \) can either be explicitly provided, or, if all components support extended likelihood fits, they can be calculated from the contribution of each PDF to the total expected number of events.; In the second form, the sum of the coefficients is required to be 1 or less, and the coefficient of the last PDF is calculated automatically from the condition that the sum of all coefficients has to be 1. Recursive coefficients; It is also possible to parameterise the coefficients recursively. \[; \sum_{i=1}^n c_i \prod_{j=1}^{i-1} \left[ (1-c_j) \right] \cdot \mathrm{PDF}_i \\; = c_1 \cdot \mathrm{PDF}_1 + (1-c_1)\, c_2 \cdot \mathrm{PDF}_2 + \ldots + (1-c_1)\ldots(1-c_{n-1}) \cdot 1 \cdot \mathrm{PDF}_n \\; \]. In this form the sum of the coefficients is always less than 1.0 for all possible values of the individual coefficients between 0 and 1. NoteDon't pass the \( n^\mathrm{th} \) coefficient. It is always 1, since the normalisation condition removes one degree of freedom.; RooAddPdf relies on each component PDF to be normalized and will perform no normalization other than calculating the proper last coefficient \( c_n \), if requested. An (enforced) condition for this assumption is that each \( \mathrm{PDF}_i \) is independent",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAddPdf.html:64,Guid,Guide,64,doc/v632/classRooAddPdf.html,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html,1,['Guid'],['Guide']
Usability,". ROOT: RooAddition Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooAddition Class ReferenceRooFit » RooFit Core. ; Calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets. ; Definition at line 27 of file RooAddition.h. Classes; class  CacheElem;  . Public Member Functions;  RooAddition ();  ;  RooAddition (const char *name, const char *title, const RooArgList &sumSet);  Constructor with a single set consisting of RooAbsReal. ;  ;  RooAddition (const char *name, const char *title, const RooArgList &sumSet1, const RooArgList &sumSet2);  Constructor with two sets of RooAbsReals. ;  ;  RooAddition (const RooAddition &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Calculate integral internally from appropriate integral cache. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; TObject * clone (const char *newname) const override;  ; double defaultErrorLevel () const override;  Return the default error level for MINUIT error analysis If the addition contains one or more RooNLLVars and no RooChi2Vars, return the defaultErrorLevel() of RooNLLVar. ;  ; void doEval (RooFit::EvalContext &) const override;  Compute addition of PDFs in batches. ;  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &numVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; TClass * IsA () const override;  ; bool isBinnedDist",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddition.html:67,Guid,Guide,67,doc/master/classRooAddition.html,https://root.cern,https://root.cern/doc/master/classRooAddition.html,1,['Guid'],['Guide']
Usability,". ROOT: RooArgList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; List of all members ; RooArgList Class Reference. ; RooArgList is a container object that can hold multiple RooAbsArg objects. ; The container has list semantics which means that:. Contained objects are ordered, The iterator follows the object insertion order.; Objects can be retrieved by name and index; Multiple objects with the same name are allowed. Ownership of contents.; Unowned objects are inserted with the add() method. Owned objects are added with addOwned() or addClone(). A RooArgSet either owns all of it contents, or none, which is determined by the first <add> call. Once an ownership status is selected, inappropriate <add> calls will return error status. Clearing the list via removeAll() resets the ownership status. Arguments supplied in the constructor are always added as unowned elements. ; Definition at line 22 of file RooArgList.h. Public Member Functions;  RooArgList ();  Default constructor. ;  ;  RooArgList (const char *name);  Empty list constructor. ;  ;  RooArgList (const RooAbsCollection &coll);  Constructor from another RooAbsCollection. ;  ;  RooArgList (const RooArgList &other, const char *name="""");  Copy constructor. ;  ;  RooArgList (const TCollection &tcoll, const char *name="""");  Constructor from a root TCollection. ;  ; template<typename... Args_t> ;  RooArgList (double arg, Args_t &&... moreArgsOrName);  ; template<typename Iterator_t , typename value_type = typename std::remove_pointer<typename std::iterator_traits<Iterator_t>::value_type>, typename = std::enable_if<std::is_convertible<const value_type*, const RooAbsArg*>::value>> ;  RooArgList (Iterator_t beginIt, Iterator_t endIt, const char *name="""");  Construct from iterators. ;  ; template<typename... Args_t> ;  RooArgList (Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooArgList.html:66,Guid,Guide,66,doc/master/classRooArgList.html,https://root.cern,https://root.cern/doc/master/classRooArgList.html,2,"['Clear', 'Guid']","['Clearing', 'Guide']"
Usability,". ROOT: RooArgProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooArgProxy Class ReferenceRooFit » RooFit Core. ; Abstract interface for RooAbsArg proxy classes. ; A RooArgProxy is the general mechanism to store references to other RooAbsArgs inside a RooAbsArg.; Creating a RooArgProxy adds the proxied object to the proxy owners server list (thus receiving value/shape dirty flags from it) and registers itself with the owning class. The latter allows the owning class to change the proxied pointer when the server it points to gets redirected (e.g. in a copy or clone operation). ; Definition at line 24 of file RooArgProxy.h. Public Member Functions;  RooArgProxy ()=default;  Default constructor. ;  ;  RooArgProxy (const char *name, const char *desc, RooAbsArg *owner, bool valueServer, bool shapeServer, bool proxyOwnsArg=false);  Constructor with owner and proxied variable. ;  ;  RooArgProxy (const char *name, const char *desc, RooAbsArg *owner, RooAbsArg &arg, bool valueServer, bool shapeServer, bool proxyOwnsArg=false);  Constructor with owner and proxied variable. ;  ;  RooArgProxy (const char *name, RooAbsArg *owner, const RooArgProxy &other);  Copy constructor. ;  ;  RooArgProxy (RooArgProxy &&other)=delete;  ;  RooArgProxy (RooArgProxy const &other)=delete;  ;  ~RooArgProxy () override;  Destructor. ;  ; RooAbsArg * absArg () const;  Return pointer to contained argument. ;  ; TClass * IsA () const override;  ; bool isShapeServer () const;  Returns true if contents is shape server of owner. ;  ; bool isValueServer () const;  Returns true of contents is value server of owner. ;  ; const char * name () const override;  Return name of proxy. ;  ; RooArgProxy & operator= (RooArgProxy &&other)=delete;  ; RooArgProxy & operator= (RooArgProxy const &o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooArgProxy.html:67,Guid,Guide,67,doc/master/classRooArgProxy.html,https://root.cern,https://root.cern/doc/master/classRooArgProxy.html,1,['Guid'],['Guide']
Usability,". ROOT: RooArgSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; List of all members ; RooArgSet Class Reference. ; RooArgSet is a container object that can hold multiple RooAbsArg objects. ; The container has set semantics which means that:. Every object it contains must have a unique name returned by GetName().; Contained objects are not ordered, although the set can be traversed using an iterator returned by createIterator(). The iterator does not necessarily follow the object insertion order.; Objects can be retrieved by name only, and not by index. Ownership of contents; Unowned objects are inserted with the add() method. Owned objects are added with addOwned() or addClone(). A RooArgSet either owns all of it contents, or none, which is determined by the first add call. Once an ownership status is selected, inappropriate add calls will return error status. Clearing the list via removeAll() resets the ownership status. Arguments supplied in the constructor are always added as unowned elements. Uniquely identifying RooArgSet objects; WarningBefore v6.28, it was ensured that no RooArgSet objects on the heap were located at an address that had already been used for a RooArgSet before. With v6.28, this is not guaranteed anymore. Hence, if your code uses pointer comparisons to uniquely identify RooArgSet instances, please consider using the new RooArgSet::uniqueId(). ; Definition at line 24 of file RooArgSet.h. Public Member Functions;  RooArgSet ();  Default constructor. ;  ;  RooArgSet (const char *name);  Empty set constructor. ;  ; template<typename... Args_t> ;  RooArgSet (const RooAbsArg &arg, Args_t &&... moreArgsOrName);  Construct a (non-owning) RooArgSet from one or more RooFit objects. ;  ;  RooArgSet (const RooAbsCollection &coll);  Constructor from a RooArgList. ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooArgSet.html:65,Guid,Guide,65,doc/master/classRooArgSet.html,https://root.cern,https://root.cern/doc/master/classRooArgSet.html,1,['Guid'],['Guide']
Usability,". ROOT: RooArgusBG Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooArgusBG Class ReferenceRooFit » RooFit. ; RooArgusBG is a RooAbsPdf implementation describing the ARGUS background shape. . \[; \mathrm{Argus}(m, m_0, c, p) = \mathcal{N} \cdot m \cdot \left[ 1 - \left( \frac{m}{m_0} \right)^2 \right]^p; \cdot \exp\left[ c \cdot \left(1 - \left(\frac{m}{m_0}\right)^2 \right) \right]; \]. Definition at line 22 of file RooArgusBG.h. Public Member Functions;  RooArgusBG ();  ;  RooArgusBG (const char *name, const char *title, RooAbsReal &_m, RooAbsReal &_m0, RooAbsReal &_c);  ;  RooArgusBG (const char *name, const char *title, RooAbsReal &_m, RooAbsReal &_m0, RooAbsReal &_c, RooAbsReal &_p);  ;  RooArgusBG (const char *name, const char *title, RooAbsReal::Ref _m, RooAbsReal::Ref _m0, RooAbsReal::Ref _c, RooAbsReal::Ref _p=0.5);  Constructor. ;  ;  RooArgusBG (const RooArgusBG &other, const char *name=nullptr);  Constructor. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooArgusBG.html:66,Guid,Guide,66,doc/master/classRooArgusBG.html,https://root.cern,https://root.cern/doc/master/classRooArgusBG.html,1,['Guid'],['Guide']
Usability,". ROOT: RooBCPEffDecay Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooBCPEffDecay Class ReferenceRooFit » RooFit. ; PDF describing decay time distribution of B meson including effects of standard model CP violation. ; This function can be analytically convolved with any RooResolutionModel implementation. ; Definition at line 23 of file RooBCPEffDecay.h. Public Types; enum  DecayType { SingleSided; , DoubleSided; , Flipped; };  ;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBCPEffDecay.html:70,Guid,Guide,70,doc/master/classRooBCPEffDecay.html,https://root.cern,https://root.cern/doc/master/classRooBCPEffDecay.html,1,['Guid'],['Guide']
Usability,". ROOT: RooBCPGenDecay Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooBCPGenDecay Class ReferenceRooFit » RooFit. ; Implement standard CP physics model with S and C (no mention of lambda) Suitably stolen and modified from RooBCPEffDecay. ; Definition at line 23 of file RooBCPGenDecay.h. Public Types; enum  DecayType { SingleSided; , DoubleSided; , Flipped; };  ;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintabl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBCPGenDecay.html:70,Guid,Guide,70,doc/master/classRooBCPGenDecay.html,https://root.cern,https://root.cern/doc/master/classRooBCPGenDecay.html,1,['Guid'],['Guide']
Usability,". ROOT: RooBDecay Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooBDecay Class ReferenceRooFit » RooFit. ; Most general description of B decay time distribution with effects of CP violation, mixing and life time differences. ; This function can be analytically convolved with any RooResolutionModel implementation. ; Definition at line 24 of file RooBDecay.h. Public Types; enum  DecayType { SingleSided; , DoubleSided; , Flipped; };  ;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBDecay.html:65,Guid,Guide,65,doc/master/classRooBDecay.html,https://root.cern,https://root.cern/doc/master/classRooBDecay.html,1,['Guid'],['Guide']
Usability,". ROOT: RooBMixDecay Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooBMixDecay Class ReferenceRooFit » RooFit. ; Class RooBMixDecay is a RooAbsAnaConvPdf implementation that describes the decay of B mesons with the effects of B0/B0bar mixing. ; This function can be analytically convolved with any RooResolutionModel implementation ; Definition at line 23 of file RooBMixDecay.h. Public Types; enum  DecayType { SingleSided; , DoubleSided; , Flipped; };  ;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:68,Guid,Guide,68,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,1,['Guid'],['Guide']
Usability,". ROOT: RooBernstein Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; RooBernstein Class ReferenceRooFit » RooFit. ; Bernstein basis polynomials are positive-definite in the range [0,1]. ; In this implementation, we extend [0,1] to be the range of the parameter. There are n+1 Bernstein basis polynomials of degree n: ; \[; B_{i,n}(x) = \begin{pmatrix}n \\\ i \end{pmatrix} x^i \cdot (1-x)^{n-i}; \]. Thus, by providing n coefficients that are positive-definite, there is a natural way to have well-behaved polynomial PDFs. For any n, the n+1 polynomials 'form a partition of unity', i.e., they sum to one for all values of x. They can be used as a basis to span the space of polynomials with degree n or less: ; \[; PDF(x, c_0, ..., c_n) = \mathcal{N} \cdot \sum_{i=0}^{n} c_i \cdot B_{i,n}(x).; \]. By giving n+1 coefficients in the constructor, this class constructs the n+1 polynomials of degree n, and sums them to form an element of the space of polynomials of degree n. \( \mathcal{N} \) is a normalisation constant that takes care of the cases where the \( c_i \) are not all equal to one.; See also http://www.idav.ucdavis.edu/education/CAGDNotes/Bernstein-Polynomials.pdf ; Definition at line 22 of file RooBernstein.h. Public Member Functions;  RooBernstein ()=default;  ;  RooBernstein (const char *name, const char *title, RooAbsRealLValue &_x, const RooArgList &_coefList);  ;  RooBernstein (const RooBernstein &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBernstein.html:68,Guid,Guide,68,doc/master/classRooBernstein.html,https://root.cern,https://root.cern/doc/master/classRooBernstein.html,1,['Guid'],['Guide']
Usability,". ROOT: RooBifurGauss Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooBifurGauss Class ReferenceRooFit » RooFit. ; Bifurcated Gaussian p.d.f with different widths on left and right side of maximum value. ; Definition at line 22 of file RooBifurGauss.h. Public Member Functions;  RooBifurGauss ();  ;  RooBifurGauss (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_mean, RooAbsReal &_sigmaL, RooAbsReal &_sigmaR);  ;  RooBifurGauss (const RooBifurGauss &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBifurGauss.html:69,Guid,Guide,69,doc/master/classRooBifurGauss.html,https://root.cern,https://root.cern/doc/master/classRooBifurGauss.html,1,['Guid'],['Guide']
Usability,". ROOT: RooBinSamplingPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooBinSamplingPdf Class Reference. ; The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF and a binned distribution. ; When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is correct only if the second derivative of the function vanishes, though. This is shown in the plots below.; For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside using integrator(). This can be used to change the integration rules, so less/more function evaluations are performed. The target precision of the integrator can be set in the constructor. How to use it; There are two ways to use this class:; Manually wrap a PDF: RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; binSampler.fitTo(data);; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; RooBinSamplingPdfThe RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF and a binned dist...Definition RooBinSamplingPdf.h:28; RooBinSamplingPdf::integratorstd::unique_ptr< ROOT::Math::IntegratorOneDim > & integrator() constDirect access to the unique_ptr holding",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinSamplingPdf.html:73,Guid,Guide,73,doc/master/classRooBinSamplingPdf.html,https://root.cern,https://root.cern/doc/master/classRooBinSamplingPdf.html,1,['Guid'],['Guide']
Usability,". ROOT: RooBinWidthFunction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; RooBinWidthFunction Class ReferenceRooFit » RooFit Core. ; Returns the bin width (or volume) given a RooHistFunc. ; It can be used to normalise by bin width or to compute event densities. Using the extra argument of the constructor, it can also return the inverse of the bin width (or volume). ; Definition at line 25 of file RooBinWidthFunction.h. Public Member Functions;  RooBinWidthFunction ();  Create an empty instance. ;  ;  RooBinWidthFunction (const char *name, const char *title, const RooHistFunc &histFunc, bool divideByBinWidth);  Create an instance. ;  ;  RooBinWidthFunction (const RooBinWidthFunction &other, const char *newname=nullptr);  Copy an existing object. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Return bin boundaries of internal RooHistFunc. ;  ; TObject * clone (const char *newname=nullptr) const override;  Copy the object and return as TObject*. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; bool divideByBinWidth () const;  ; void doEval (RooFit::EvalContext &) const override;  Compute bin index for all values of the observable(s) in evalData, and return their volumes or inverse volumes, depending on the configuration chosen in the constructor. ;  ; double evaluate () const override;  Compute current bin of observable, and return its volume or inverse volume, depending on configuration chosen in the constructor. ;  ; const RooHistFunc & histFunc () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  Test if internal RooHistFunc is binned. ;  ; std::list< double >",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinWidthFunction.html:75,Guid,Guide,75,doc/master/classRooBinWidthFunction.html,https://root.cern,https://root.cern/doc/master/classRooBinWidthFunction.html,1,['Guid'],['Guide']
Usability,". ROOT: RooBinnedGenContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooBinnedGenContext Class ReferenceRooFit » RooFit Core. ; Efficient implementation of the generator context specific for binned pdfs. ; Definition at line 26 of file RooBinnedGenContext.h. Public Member Functions;  RooBinnedGenContext (const RooAbsPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ;  ~RooBinnedGenContext () override;  ; void attach (const RooArgSet &params) override;  Attach given set of variables to internal p.d.f. clone. ;  ; RooDataSet * generate (double nEvents=0.0, bool skipInit=false, bool extendedMode=false) override;  Generate the specified number of events with nEvents>0 and and return a dataset containing the generated events. ;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Print the details of the context. ;  ; void setExpectedData (bool) override;  ; void setProtoDataOrder (Int_t *) override;  Set the traversal order of prototype data to that in the lookup tables passed as argument. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsGenContext;  RooAbsGenContext (const RooAbsPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents when printing. ;  ; StyleOption defaultPrintStyle (Option_t *opt) const override;  Define default print style. ;  ; bool isV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinnedGenContext.html:75,Guid,Guide,75,doc/master/classRooBinnedGenContext.html,https://root.cern,https://root.cern/doc/master/classRooBinnedGenContext.html,1,['Guid'],['Guide']
Usability,". ROOT: RooBinning Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooBinning Class ReferenceRooFit » RooFit Core. ; Implements a RooAbsBinning in terms of an array of boundary values, posing no constraints on the choice of binning, thus allowing variable bin sizes. ; Various methods allow the user to add single bin boundaries, mirrored pairs, or sets of uniformly spaced boundaries. ; Definition at line 27 of file RooBinning.h. Public Member Functions;  RooBinning (const RooBinning &other, const char *name=nullptr);  Copy constructor. ;  ;  RooBinning (double xlo=-RooNumber::infinity(), double xhi=RooNumber::infinity(), const char *name=nullptr);  Constructor for an initially empty binning defining the range [xlo,xhi]. ;  ;  RooBinning (Int_t nBins, const double *boundaries, const char *name=nullptr);  Constructor for a binning in the range[xlo,xhi] with 'nbins' bin boundaries listed array 'boundaries'. ;  ;  RooBinning (Int_t nBins, double xlo, double xhi, const char *name=nullptr);  Constructor for a uniform binning in 'nbins' bins in the range [xlo,xhi]. ;  ;  ~RooBinning () override;  Destructor. ;  ; bool addBoundary (double boundary);  Add bin boundary at given value. ;  ; void addBoundaryPair (double boundary, double mirrorPoint=0);  Add pair of boundaries: one at 'boundary' and one at 2*mirrorPoint-boundary. ;  ; void addUniform (Int_t nBins, double xlo, double xhi);  Add array of nbins uniformly sized bins in range [xlo,xhi]. ;  ; double * array () const override;  Return array of boundary values. ;  ; double averageBinWidth () const override;  Return the average bin width. ;  ; double binCenter (Int_t bin) const override;  Return the position of the center of bin 'bin'. ;  ; double binHigh (Int_t bin) const override;  Return the upper bound of the req",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinning.html:66,Guid,Guide,66,doc/master/classRooBinning.html,https://root.cern,https://root.cern/doc/master/classRooBinning.html,1,['Guid'],['Guide']
Usability,". ROOT: RooBinningCategory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooBinningCategory Class ReferenceRooFit » RooFit Core. ; Provides a real-to-category mapping defined by a series of thresholds. ; It evaluates the value of inputVar passed in the constructor, and converts this into a bin number using a binning defined for the inputVar. The name of this binning is passed in the constructor. ; Definition at line 23 of file RooBinningCategory.h. Public Member Functions;  RooBinningCategory ()=default;  ;  RooBinningCategory (const char *name, const char *title, RooAbsRealLValue &inputVar, const char *binningName=nullptr, const char *catTypeName=nullptr);  Constructor with input function to be mapped and name and index of default output state of unmapped values. ;  ;  RooBinningCategory (const RooBinningCategory &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Printing interface (human readable) ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsCategory;  RooAbsCategory ();  ;  RooAbsCategory (const char *name, const char *title);  Constructor. ;  ;  RooAbsCategory (const RooAbsCategory &other, const char *name=nullptr);  Copy constructor, copies the registered category states from the original. ;  ;  ~RooAbsCategory () override;  Destructor. ;  ; std::map< std::string, value_type >::const_iterator begin () const;  Iterator for category state names. Points to pairs of index and name. ;  ; RooFit::OwningPtr< R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinningCategory.html:74,Guid,Guide,74,doc/master/classRooBinningCategory.html,https://root.cern,https://root.cern/doc/master/classRooBinningCategory.html,1,['Guid'],['Guide']
Usability,". ROOT: RooBreitWigner Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooBreitWigner Class ReferenceRooFit » RooFit. ; Class RooBreitWigner is a RooAbsPdf implementation that models a non-relativistic Breit-Wigner shape. ; Definition at line 25 of file RooBreitWigner.h. Public Member Functions;  RooBreitWigner ();  ;  RooBreitWigner (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_mean, RooAbsReal &_width);  ;  RooBreitWigner (const RooBreitWigner &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBreitWigner.html:70,Guid,Guide,70,doc/master/classRooBreitWigner.html,https://root.cern,https://root.cern/doc/master/classRooBreitWigner.html,1,['Guid'],['Guide']
Usability,". ROOT: RooBukinPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooBukinPdf Class ReferenceRooFit » RooFit. ; The RooBukinPdf implements the NovosibirskA function. ; For the parameters, see RooBukinPdf().; Credits: May 26, 2003. A.Bukin, Budker INP, Novosibirsk. http://www.slac.stanford.edu/BFROOT/www/Organization/CollabMtgs/2003/detJuly2003/Tues3a/bukin.ps ; Definition at line 29 of file RooBukinPdf.h. Public Member Functions;  RooBukinPdf ();  ;  RooBukinPdf (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_Xp, RooAbsReal &_sigp, RooAbsReal &_xi, RooAbsReal &_rho1, RooAbsReal &_rho2);  Construct a Bukin PDF. ;  ;  RooBukinPdf (const RooBukinPdf &other, const char *name=nullptr);  Copy a Bukin PDF. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBukinPdf.html:67,Guid,Guide,67,doc/master/classRooBukinPdf.html,https://root.cern,https://root.cern/doc/master/classRooBukinPdf.html,1,['Guid'],['Guide']
Usability,". ROOT: RooCBShape Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCBShape Class ReferenceRooFit » RooFit. ; PDF implementing the Crystal Ball line shape. ; Definition at line 24 of file RooCBShape.h. Public Member Functions;  RooCBShape ();  ;  RooCBShape (const char *name, const char *title, RooAbsReal &_m, RooAbsReal &_m0, RooAbsReal &_sigma, RooAbsReal &_alpha, RooAbsReal &_n);  ;  RooCBShape (const RooCBShape &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; Int_t getMaxVal (const RooArgSet &vars) const override;  Advertise that we know the maximum of self for given (m0,alpha,n,sigma) ;  ; TClass * IsA () const override;  ; double maxVal (Int_t code) const override;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Function",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCBShape.html:66,Guid,Guide,66,doc/master/classRooCBShape.html,https://root.cern,https://root.cern/doc/master/classRooCBShape.html,1,['Guid'],['Guide']
Usability,". ROOT: RooCFunction1Binding< VO, VI > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCFunction1Binding< VO, VI > Class Template ReferenceRooFit » RooFit. ; template<class VO, class VI>; class RooCFunction1Binding< VO, VI >RooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions. ; Instances of function binding classes are fully functional RooFit function objects with one exception: if the bound function is not a standard TMath or MathMore function the class cannot be persisted in a RooWorkspace without registering the function pointer first using RooCFunction1Binding<T1,T2>::register(). ; Definition at line 218 of file RooCFunction1Binding.h. Public Member Functions;  RooCFunction1Binding ();  ;  RooCFunction1Binding (const char *name, const char *title, VO(*_func)(VI), RooAbsReal &_x);  ;  RooCFunction1Binding (const RooCFunction1Binding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction1Binding.html:95,Guid,Guide,95,doc/master/classRooCFunction1Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction1Binding.html,1,['Guid'],['Guide']
Usability,". ROOT: RooCFunction1PdfBinding< VO, VI > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCFunction1PdfBinding< VO, VI > Class Template Reference. ; template<class VO, class VI>; class RooCFunction1PdfBinding< VO, VI >; Definition at line 281 of file RooCFunction1Binding.h. Public Member Functions;  RooCFunction1PdfBinding ();  ;  RooCFunction1PdfBinding (const char *name, const char *title, VO(*_func)(VI), RooAbsReal &_x);  ;  RooCFunction1PdfBinding (const RooCFunction1PdfBinding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (const RooArgSet &vars, bool verbose=false) const;  Return a binned g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction1PdfBinding.html:98,Guid,Guide,98,doc/master/classRooCFunction1PdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction1PdfBinding.html,1,['Guid'],['Guide']
Usability,". ROOT: RooCFunction1Ref< VO, VI > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; RooCFunction1Ref< VO, VI > Class Template Reference. ; template<class VO, class VI>; class RooCFunction1Ref< VO, VI >; Definition at line 89 of file RooCFunction1Binding.h. Public Member Functions;  RooCFunction1Ref (VO(*ptr)(VI)=nullptr);  ; const char * argName (Int_t iarg);  ; RooCFunction1Map< double, double > & fmap ();  ; RooCFunction1Map< double, int > & fmap ();  ; TClass * IsA () const override;  ; const char * name () const;  ; VO operator() (VI x) const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract metho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction1Ref.html:91,Guid,Guide,91,doc/master/classRooCFunction1Ref.html,https://root.cern,https://root.cern/doc/master/classRooCFunction1Ref.html,1,['Guid'],['Guide']
Usability,". ROOT: RooCFunction2Binding< VO, VI1, VI2 > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCFunction2Binding< VO, VI1, VI2 > Class Template ReferenceRooFit » RooFit. ; template<class VO, class VI1, class VI2>; class RooCFunction2Binding< VO, VI1, VI2 >RooCFunction2Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions. ; Instances of function binding classes are fully functional RooFit function objects with one exception: if the bound function is not a standard TMath or MathMore function the class cannot be persisted in a RooWorkspace without registering the function pointer first using RooCFunction2Binding<T1,T2,T3>::register(). ; Definition at line 228 of file RooCFunction2Binding.h. Public Member Functions;  RooCFunction2Binding ();  ;  RooCFunction2Binding (const char *name, const char *title, VO(*_func)(VI1, VI2), RooAbsReal &_x, RooAbsReal &_y);  ;  RooCFunction2Binding (const RooCFunction2Binding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction2Binding.html:101,Guid,Guide,101,doc/master/classRooCFunction2Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction2Binding.html,1,['Guid'],['Guide']
Usability,". ROOT: RooCFunction2PdfBinding< VO, VI1, VI2 > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCFunction2PdfBinding< VO, VI1, VI2 > Class Template Reference. ; template<class VO, class VI1, class VI2>; class RooCFunction2PdfBinding< VO, VI1, VI2 >; Definition at line 295 of file RooCFunction2Binding.h. Public Member Functions;  RooCFunction2PdfBinding ();  ;  RooCFunction2PdfBinding (const char *name, const char *title, VO(*_func)(VI1, VI2), RooAbsReal &_x, RooAbsReal &_y);  ;  RooCFunction2PdfBinding (const RooCFunction2PdfBinding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (const RooArgSet ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction2PdfBinding.html:104,Guid,Guide,104,doc/master/classRooCFunction2PdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction2PdfBinding.html,1,['Guid'],['Guide']
Usability,". ROOT: RooCFunction2Ref< VO, VI1, VI2 > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; RooCFunction2Ref< VO, VI1, VI2 > Class Template Reference. ; template<class VO, class VI1, class VI2>; class RooCFunction2Ref< VO, VI1, VI2 >; Definition at line 98 of file RooCFunction2Binding.h. Public Member Functions;  RooCFunction2Ref (VO(*ptr)(VI1, VI2)=nullptr);  ; const char * argName (Int_t iarg);  ; TClass * IsA () const override;  ; const char * name () const;  ; VO operator() (VI1 x, VI2 y) const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction2Ref.html:97,Guid,Guide,97,doc/master/classRooCFunction2Ref.html,https://root.cern,https://root.cern/doc/master/classRooCFunction2Ref.html,1,['Guid'],['Guide']
Usability,". ROOT: RooCFunction3Binding< VO, VI1, VI2, VI3 > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCFunction3Binding< VO, VI1, VI2, VI3 > Class Template ReferenceRooFit » RooFit. ; template<class VO, class VI1, class VI2, class VI3>; class RooCFunction3Binding< VO, VI1, VI2, VI3 >RooCFunction3Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions. ; Instances of function binding classes are fully functional RooFit function objects with one exception: if the bound function is not a standard TMath or MathMore function the class cannot be persisted in a RooWorkspace without registering the function pointer first using RooCFunction3Binding<T1,T2,T3,T4>::register(). ; Definition at line 238 of file RooCFunction3Binding.h. Public Member Functions;  RooCFunction3Binding ();  ;  RooCFunction3Binding (const char *name, const char *title, VO(*_func)(VI1, VI2, VI3), RooAbsReal &_x, RooAbsReal &_y, RooAbsReal &_z);  ;  RooCFunction3Binding (const RooCFunction3Binding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction3Binding.html:106,Guid,Guide,106,doc/master/classRooCFunction3Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction3Binding.html,1,['Guid'],['Guide']
Usability,". ROOT: RooCFunction3PdfBinding< VO, VI1, VI2, VI3 > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCFunction3PdfBinding< VO, VI1, VI2, VI3 > Class Template Reference. ; template<class VO, class VI1, class VI2, class VI3>; class RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >; Definition at line 308 of file RooCFunction3Binding.h. Public Member Functions;  RooCFunction3PdfBinding ();  ;  RooCFunction3PdfBinding (const char *name, const char *title, VO(*_func)(VI1, VI2, VI3), RooAbsReal &_x, RooAbsReal &_y, RooAbsReal &_z);  ;  RooCFunction3PdfBinding (const RooCFunction3PdfBinding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction3PdfBinding.html:109,Guid,Guide,109,doc/master/classRooCFunction3PdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction3PdfBinding.html,1,['Guid'],['Guide']
Usability,". ROOT: RooCFunction3Ref< VO, VI1, VI2, VI3 > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; RooCFunction3Ref< VO, VI1, VI2, VI3 > Class Template Reference. ; template<class VO, class VI1, class VI2, class VI3>; class RooCFunction3Ref< VO, VI1, VI2, VI3 >; Definition at line 100 of file RooCFunction3Binding.h. Public Member Functions;  RooCFunction3Ref (VO(*ptr)(VI1, VI2, VI3)=nullptr);  ; const char * argName (Int_t iarg);  ; TClass * IsA () const override;  ; const char * name () const;  ; VO operator() (VI1 x, VI2 y, VI3 z) const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction3Ref.html:102,Guid,Guide,102,doc/master/classRooCFunction3Ref.html,https://root.cern,https://root.cern/doc/master/classRooCFunction3Ref.html,1,['Guid'],['Guide']
Usability,". ROOT: RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 > Class Template ReferenceRooFit » RooFit. ; template<class VO, class VI1, class VI2, class VI3, class VI4>; class RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >RooCFunction4Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions. ; Instances of function binding classes are fully functional RooFit function objects with one exception: if the bound function is not a standard TMath or MathMore function the class cannot be persisted in a RooWorkspace without registering the function pointer first using RooCFunction4Binding<T1,T2,T3,T4>::register(). ; Definition at line 225 of file RooCFunction4Binding.h. Public Member Functions;  RooCFunction4Binding ();  ;  RooCFunction4Binding (const char *name, const char *title, VO(*_func)(VI1, VI2, VI3, VI4), RooAbsReal &_x, RooAbsReal &_y, RooAbsReal &_z, RooAbsReal &_w);  ;  RooCFunction4Binding (const RooCFunction4Binding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction4Binding.html:111,Guid,Guide,111,doc/master/classRooCFunction4Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction4Binding.html,1,['Guid'],['Guide']
Usability,". ROOT: RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 > Class Template Reference. ; template<class VO, class VI1, class VI2, class VI3, class VI4>; class RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >; Definition at line 297 of file RooCFunction4Binding.h. Public Member Functions;  RooCFunction4PdfBinding ();  ;  RooCFunction4PdfBinding (const char *name, const char *title, VO(*_func)(VI1, VI2, VI3, VI4), RooAbsReal &_x, RooAbsReal &_y, RooAbsReal &_z, RooAbsReal &_w);  ;  RooCFunction4PdfBinding (const RooCFunction4PdfBinding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction4PdfBinding.html:114,Guid,Guide,114,doc/master/classRooCFunction4PdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction4PdfBinding.html,1,['Guid'],['Guide']
Usability,". ROOT: RooCFunction4Ref< VO, VI1, VI2, VI3, VI4 > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; RooCFunction4Ref< VO, VI1, VI2, VI3, VI4 > Class Template Reference. ; template<class VO, class VI1, class VI2, class VI3, class VI4>; class RooCFunction4Ref< VO, VI1, VI2, VI3, VI4 >; Definition at line 96 of file RooCFunction4Binding.h. Public Member Functions;  RooCFunction4Ref (VO(*ptr)(VI1, VI2, VI3, VI4)=nullptr);  ; const char * argName (Int_t iarg);  ; TClass * IsA () const override;  ; const char * name () const;  ; VO operator() (VI1 x, VI2 y, VI3 z, VI4 w) const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction4Ref.html:107,Guid,Guide,107,doc/master/classRooCFunction4Ref.html,https://root.cern,https://root.cern/doc/master/classRooCFunction4Ref.html,1,['Guid'],['Guide']
Usability,". ROOT: RooCachedPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCachedPdf Class ReferenceRooFit » RooFit Core. ; Implementation of RooAbsCachedPdf that can cache any external RooAbsPdf input function provided in the constructor. ; Definition at line 20 of file RooCachedPdf.h. Public Member Functions;  RooCachedPdf ();  ;  RooCachedPdf (const char *name, const char *title, RooAbsPdf &_pdf);  Constructor taking name, title and function to be cached. ;  ;  RooCachedPdf (const char *name, const char *title, RooAbsPdf &_pdf, const RooArgSet &cacheObs);  Constructor taking name, title and function to be cached and fixed choice of variable to cache. ;  ;  RooCachedPdf (const RooCachedPdf &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const override;  Defer preferred scan order to cached pdf preference. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsCachedPdf;  RooAbsCachedPdf ();  ;  RooAbsCachedPdf (const char *name, const char *title, int ipOrder=0);  Constructor. ;  ;  RooAbsCachedPdf (const RooAbsCachedPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Implements internal (analytical) integration capabilities. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedPdf.html:68,Guid,Guide,68,doc/master/classRooCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooCachedPdf.html,1,['Guid'],['Guide']
Usability,". ROOT: RooCachedReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCachedReal Class ReferenceRooFit » RooFit Core. ; Implementation of RooAbsCachedReal that can cache any external RooAbsReal input function provided in the constructor. ; Definition at line 20 of file RooCachedReal.h. Public Member Functions;  RooCachedReal ();  ;  RooCachedReal (const char *name, const char *title, RooAbsReal &_func);  Constructor taking name, title and function to be cached. ;  ;  RooCachedReal (const char *name, const char *title, RooAbsReal &_func, const RooArgSet &cacheObs);  Constructor taking name, title and function to be cached and fixed choice of variable to cache. ;  ;  RooCachedReal (const RooCachedReal &other, const char *name=nullptr);  Copy constructor. ;  ; bool cacheSource () const;  ; TObject * clone (const char *newname) const override;  ; bool getCdfBoundaries () const;  If true the c.d.f boundary mode is active. ;  ; TClass * IsA () const override;  ; void setCacheSource (bool flag);  ; void setCdfBoundaries (bool flag);  If flag is true the RooHistFunc that represent the cache histogram will use special boundary conditions for use with cumulative distribution functions: at the lower bound the function is forced to converge at zero and the upper bound is the function is forced to converge at 1.0. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsCachedReal;  RooAbsCachedReal ();  ;  RooAbsCachedReal (const char *name, const char *title, Int_t ipOrder=0);  Constructor. ;  ;  RooAbsCachedReal (const RooAbsCachedReal &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedReal.html:69,Guid,Guide,69,doc/master/classRooCachedReal.html,https://root.cern,https://root.cern/doc/master/classRooCachedReal.html,1,['Guid'],['Guide']
Usability,". ROOT: RooCatType Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Friends |; List of all members ; RooCatType Class ReferenceRooFit » RooFit Legacy. ; RooCatType is an auxiliary class for RooAbsCategory and defines a a single category state. ; The class holds a string label and an integer index value which define the state ; Definition at line 23 of file RooCatTypeLegacy.h. Public Member Functions;  RooCatType ();  ;  RooCatType (const char *name, Int_t value);  Constructor with state name and index value. ;  ;  RooCatType (const RooCatType &other);  Copy constructor. ;  ; void assignFast (const RooCatType &other);  ; TObject * Clone (const char *) const override;  Make a clone of an object using the Streamer facility. ;  ; const Text_t * GetName () const override;  Returns name of object. ;  ; Int_t getVal () const;  ; TClass * IsA () const override;  ; RooCatType & operator= (const RooCatType &other);  ; bool operator== (const char *label) const;  ; bool operator== (const RooCatType &other) const;  ; bool operator== (Int_t index) const;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void printClassName (std::ostream &os) const override;  Print the class name of the state. ;  ; void printName (std::ostream &os) const override;  Print the name of the state. ;  ; void printTitle (std::ostream &os) const override;  Print the title of the state. ;  ; void printValue (std::ostream &os) const override;  Print the value (index integer) of the state. ;  ; void SetName (const Text_t *name);  Constructor with name argument. ;  ; void setVal (Int_t newValue);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCatType.html:66,Guid,Guide,66,doc/master/classRooCatType.html,https://root.cern,https://root.cern/doc/master/classRooCatType.html,1,['Guid'],['Guide']
Usability,". ROOT: RooCategory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; RooCategory Class ReferencefinalRooFit » RooFit Core. ; Object to represent discrete states. ; States have names and index numbers, and the index numbers can be written into datasets and used in calculations. A category is ""fundamental"", i.e., its value doesn't depend on the value of other objects. (Objects in datasets cannot depend on other objects' values, they need to be self-consistent.); A category object can be used to e.g. conduct a simultaneous fit of the same observable in multiple categories. Setting up a category. A category can be set up like this: RooCategory myCat(""myCat"", ""Lepton multiplicity category"", {; {""0Lep"", 0},; {""1Lep"", 1},; {""2Lep"", 2},; {""3Lep"", 3}; });; RooCategoryObject to represent discrete states.Definition RooCategory.h:28. Like this: RooCategory myCat(""myCat"", ""Asymmetry"");; myCat[""left""] = -1;; myCat[""right""] = 1;. Or like this: RooCategory myCat(""myCat"", ""Asymmetry"");; myCat.defineType(""left"", -1);; myCat.defineType(""right"", 1);; Inspect the pairs of state names and state numbers like this: for (const auto& nameIdx : myCat) {; std::cout << nameIdx.first << "" --> "" << nameIdx.second << std::endl;; }. Changing category states; Category states can be modified either by using the index state (faster) or state names. For example: myCat.setIndex(5);; myCat.setLabel(""left"");; for (const auto& otherNameIdx : otherCat) {; myCat.setIndex(otherNameIdx);; }; Also refer to RooFit Tutorials, especially rf404_categories.C for an introduction, and to rf405_realtocatfuncs.C and rf406_cattocatfuncs.C for advanced uses of categories. PyROOT; Constructor of RooCategory takes a map as an argument also supports ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCategory.html:67,Guid,Guide,67,doc/master/classRooCategory.html,https://root.cern,https://root.cern/doc/master/classRooCategory.html,1,['Guid'],['Guide']
Usability,". ROOT: RooChangeTracker Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooChangeTracker Class ReferenceRooFit » RooFit Core. ; Meta object that tracks value changes in a given set of RooAbsArgs by registering itself as value client of these objects. ; The change tracker can perform an additional validation step where it also compares the numeric values of the tracked arguments with reference values to ensure that values have actually changed. This may be useful in case some of the tracked observables are in binned datasets where each observable propagates a valueDirty flag when an event is loaded even though usually only one observable actually changes. ; Definition at line 23 of file RooChangeTracker.h. Public Member Functions;  RooChangeTracker ()=default;  ;  RooChangeTracker (const char *name, const char *title, const RooArgSet &trackSet, bool checkValues=false);  Constructor. ;  ;  RooChangeTracker (const RooChangeTracker &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; bool hasChanged (bool clearState);  Returns true if state has changed since last call with clearState=true. ;  ; TClass * IsA () const override;  ; RooArgSet parameters () const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &ot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChangeTracker.html:72,Guid,Guide,72,doc/master/classRooChangeTracker.html,https://root.cern,https://root.cern/doc/master/classRooChangeTracker.html,1,['Guid'],['Guide']
Usability,". ROOT: RooChebychev Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; RooChebychev Class ReferenceRooFit » RooFit. ; Chebychev polynomial p.d.f. ; of the first kind.; The coefficient that goes with \( T_0(x)=1 \) (i.e. the constant polynomial) is implicitly assumed to be 1, and the list of coefficients supplied by callers starts with the coefficient that goes with \( T_1(x)=x \) (i.e. the linear term). ; Definition at line 25 of file RooChebychev.h. Public Member Functions;  RooChebychev ();  ;  RooChebychev (const char *name, const char *title, RooAbsReal &_x, const RooArgList &_coefList);  Constructor. ;  ;  RooChebychev (const RooChebychev &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; TClass * IsA () const override;  ; void selectNormalizationRange (const char *rangeName=nullptr, bool force=false) override;  Interface function to force use of a given normalization range to interpret function value. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChebychev.html:68,Guid,Guide,68,doc/master/classRooChebychev.html,https://root.cern,https://root.cern/doc/master/classRooChebychev.html,1,['Guid'],['Guide']
Usability,". ROOT: RooChi2MCSModule Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooChi2MCSModule Class ReferenceRooFit » RooFit. ; RooChi2MCSModule is an add-on module to RooMCStudy that calculates the chi-squared of fitted p.d.f with respect to a binned version of the data. ; For each fit the chi-squared, the reduced chi-squared the number of degrees of freedom and the probability of the chi-squared is store in the summary dataset. ; Definition at line 22 of file RooChi2MCSModule.h. Public Member Functions;  RooChi2MCSModule ();  ;  RooChi2MCSModule (const RooChi2MCSModule &other);  Copy constructor. ;  ;  ~RooChi2MCSModule () override;  Destructor. ;  ; RooDataSet * finalizeRun () override;  Return auxiliary dataset with results of chi2 analysis calculations of this module so that it is merged with RooMCStudy::fitParDataSet() by RooMCStudy. ;  ; bool initializeInstance () override;  Initialize module after attachment to RooMCStudy object. ;  ; bool initializeRun (Int_t) override;  Initialize module at beginning of RooCMStudy run. ;  ; TClass * IsA () const override;  ; bool processAfterFit (Int_t) override;  Bin dataset and calculate chi2 of p.d.f w.r.t binned dataset. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsMCStudyModule;  RooAbsMCStudyModule (const char *name, const char *title);  Constructor. ;  ;  RooAbsMCStudyModule (const RooAbsMCStudyModule &other);  Copy constructor. ;  ; bool doInitializeInstance (RooMCStudy &);  Initializer method called upon attachment to given RooMCStudy object. ;  ; virtual bool processBeforeGen (Int_t);  Method called after resetting of generator parameters to initial values and before call to generator context Any m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChi2MCSModule.html:72,Guid,Guide,72,doc/master/classRooChi2MCSModule.html,https://root.cern,https://root.cern/doc/master/classRooChi2MCSModule.html,1,['Guid'],['Guide']
Usability,". ROOT: RooChi2Var Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; RooChi2Var Class ReferenceRooFit » RooFit Core. ; Simple \( \chi^2 \) calculation from a binned dataset and a PDF. ; It calculates:. \begin{align*}; \chi^2 &= \sum_{\mathrm{bins}} \left( \frac{N_\mathrm{PDF,bin} - N_\mathrm{Data,bin}}{\Delta_\mathrm{bin}} \right)^2 \\; N_\mathrm{PDF,bin} &=; \begin{cases}; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,tot} &\text{normal PDF}\\; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,expected} &\text{extended PDF}; \end{cases} \\; \Delta_\mathrm{bin} &=; \begin{cases}; \sqrt{N_\mathrm{PDF,bin}} &\text{if } \mathtt{DataError == RooAbsData::Expected}\\; \mathtt{data{\rightarrow}weightError()} &\text{otherwise} \\; \end{cases}; \end{align*}. If the dataset doesn't have user-defined errors, errors are assumed to be \( \sqrt{N} \). In extended PDF mode, N_tot (total number of data events) is substituted with N_expected, the expected number of events that the PDF predicts.; NoteIf the dataset has errors stored, empty bins will prevent the calculation of \( \chi^2 \), because those have zero error. This leads to messages like: [#0] ERROR:Eval -- RooChi2Var::RooChi2Var(chi2_GenPdf_data_hist) INFINITY ERROR: bin 2 has zero error; RooChi2Var::RooChi2VarRooChi2Var(const char *name, const char *title, RooAbsReal &func, RooDataHist &data, bool extended, RooDataHist::ErrorType etype, RooAbsTestStatistic::Configuration const &cfg=RooAbsTestStatistic::Configuration{})Definition RooChi2Var.cxx:67. In this case, one can use the expected errors of the PDF instead of the data errors: RooChi2Var chi2(..., ..., RooFit::DataError(RooAbsData::Expected), ...);; RooAbsData::Expected@ Ex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChi2Var.html:66,Guid,Guide,66,doc/master/classRooChi2Var.html,https://root.cern,https://root.cern/doc/master/classRooChi2Var.html,2,"['Guid', 'Simpl']","['Guide', 'Simple']"
Usability,". ROOT: RooChiSquarePdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; RooChiSquarePdf Class ReferenceRooFit » RooFit. ; The PDF of the Chi Square distribution for n degrees of freedom. ; Oddly, this is hard to find in ROOT (except via relation to GammaDist). Here we also implement the analytic integral. ; Definition at line 22 of file RooChiSquarePdf.h. Public Member Functions;  RooChiSquarePdf ();  ;  RooChiSquarePdf (const char *name, const char *title, RooAbsReal &x, RooAbsReal &ndof);  ;  RooChiSquarePdf (const RooChiSquarePdf &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  No analytical calculation available (yet) of integrals over subranges. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenCont",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChiSquarePdf.html:71,Guid,Guide,71,doc/master/classRooChiSquarePdf.html,https://root.cern,https://root.cern/doc/master/classRooChiSquarePdf.html,1,['Guid'],['Guide']
Usability,". ROOT: RooCmdArg Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; RooCmdArg Class ReferenceRooFit » RooFit Core. ; Named container for two doubles, two integers two object points and three string pointers that can be passed as generic named arguments to a variety of RooFit end user methods. ; To achieved the named syntax, RooCmdArg objects are created using global helper functions defined in RooGlobalFunc.h that create and fill these generic containers ; Definition at line 26 of file RooCmdArg.h. Public Member Functions;  RooCmdArg ();  Default constructor. ;  ;  RooCmdArg (const char *name, Int_t i1, Int_t i2=0, double d1=0.0, double d2=0.0, const char *s1=nullptr, const char *s2=nullptr, const TObject *o1=nullptr, const TObject *o2=nullptr, const RooCmdArg *ca=nullptr, const char *s3=nullptr, const RooArgSet *c1=nullptr, const RooArgSet *c2=nullptr);  Constructor from payload parameters. ;  ;  RooCmdArg (const RooCmdArg &other);  Copy constructor. ;  ;  ~RooCmdArg () override;  Destructor. ;  ; void addArg (const RooCmdArg &arg);  Utility function to add nested RooCmdArg to payload of this RooCmdArg. ;  ; TObject * Clone (const char *newName=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; double getDouble (Int_t idx) const;  Return double stored in slot idx. ;  ; Int_t getInt (Int_t idx) const;  ; const TObject * getObject (Int_t idx) const;  Return TObject stored in slot idx. ;  ; const RooArgSet * getSet (Int_t idx) const;  Return RooArgSet stored in slot idx. ;  ; const char * getString (Int_t idx) const;  Return string stored in slot idx. ;  ; TClass * IsA () const override;  ; const char * opcode () const;  ; RooCmdArg & operator= (const RooCmdArg &other);  Assignment operator. ;  ; bool prefixSubArgs () const;  ; void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCmdArg.html:65,Guid,Guide,65,doc/master/classRooCmdArg.html,https://root.cern,https://root.cern/doc/master/classRooCmdArg.html,1,['Guid'],['Guide']
Usability,". ROOT: RooCmdConfig Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooCmdConfig Class ReferenceRooFit » RooFit Core. ; Configurable parser for RooCmdArg named arguments. ; It maps the contents of named arguments named to integers, doubles, strings and TObjects that can be retrieved after processing a set of RooCmdArgs. The parser also has options to enforce syntax rules such as (conditionally) required arguments, mutually exclusive arguments and dependencies between arguments. ; Definition at line 32 of file RooCmdConfig.h. Classes; struct  Var;  . Public Member Functions;  RooCmdConfig (const RooCmdConfig &other);  Copy constructor. ;  ;  RooCmdConfig (RooStringView methodName);  Constructor taking descriptive name of owner/user which is used as prefix for any warning or error messages generated by this parser. ;  ; void allowUndefined (bool flag=true);  If flag is true the processing of unrecognized RooCmdArgs is not considered an error. ;  ; void defineDependency (const char *refArgName, const char *neededArgName);  Define that processing argument name refArgName requires processing of argument named neededArgName to successfully complete parsing. ;  ; bool defineDouble (const char *name, const char *argName, int doubleNum, double defValue=0.0);  Define double property name 'name' mapped to double in slot 'doubleNum' in RooCmdArg with name argName Define default value for this double property to be defVal in case named argument is not processed. ;  ; bool defineInt (const char *name, const char *argName, int intNum, int defValue=0);  Define integer property name 'name' mapped to integer in slot 'intNum' in RooCmdArg with name argName Define default value for this int property to be defVal in case named argument is not processed. ;  ; void defineMutex (const char *);  ; templ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCmdConfig.html:68,Guid,Guide,68,doc/master/classRooCmdConfig.html,https://root.cern,https://root.cern/doc/master/classRooCmdConfig.html,1,['Guid'],['Guide']
Usability,". ROOT: RooCollectionProxy< RooCollection_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; RooCollectionProxy< RooCollection_t > Class Template ReferenceRooFit » RooFit Core. ; template<class RooCollection_t>; class RooCollectionProxy< RooCollection_t >Concrete proxy for RooArgSet or RooArgList objects. ; A RooCollectionProxy is the general mechanism to store a RooArgSet or RooArgList with RooAbsArgs in a RooAbsArg. Creating a RooCollectionProxy adds all members of the proxied RooArgSet to the proxy owners server list (thus receiving value/shape dirty flags from it) and registers itself with the owning class. The latter allows the owning class to update the pointers of RooArgSet or RooArgList contents to reflect the serverRedirect changes. ; Definition at line 40 of file RooCollectionProxy.h. Public Member Functions;  RooCollectionProxy ();  ;  RooCollectionProxy (const char *inName, const char *, RooAbsArg *owner, bool defValueServer=true, bool defShapeServer=false);  Construct proxy with given name and description, with given owner The default value and shape dirty propagation of the set contents to the set owner is controlled by flags defValueServer and defShapeServer. ;  ; template<class Other_t > ;  RooCollectionProxy (const char *inName, RooAbsArg *owner, const Other_t &other);  Copy constructor. ;  ;  ~RooCollectionProxy () override;  ; virtual bool add (const RooAbsArg &var, bool silent=false);  Add the specified argument to list. ;  ; bool add (const RooAbsArg &var, bool silent=false) override;  Overloaded RooCollection_t::add() method inserts 'var' into set and registers 'var' as server to owner with default value and shape dirty flag propagation. ;  ; bool add (const RooAbsArg &var, bool valueServer, bool shapeServer, bool silent);  Overloade",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCollectionProxy.html:102,Guid,Guide,102,doc/master/classRooCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classRooCollectionProxy.html,1,['Guid'],['Guide']
Usability,". ROOT: RooCompositeDataStore Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCompositeDataStore Class ReferenceRooFit » RooFit Core. ; Combines several disjunct datasets into one. ; This is useful for simultaneous PDFs that do not depend on the same observable such as a PDF depending on x combined with another one depending on y. The composite storage will store two different datasets, {x} and {y}, but they can be passed as a single dataset to RooFit operations. A category tag will define which dataset has to be passed to which likelihood.; When iterated from start to finish, datasets will be traversed in the order of the category index. ; Definition at line 33 of file RooCompositeDataStore.h. Public Member Functions;  RooCompositeDataStore ();  ;  RooCompositeDataStore (const RooCompositeDataStore &other, const char *newname=nullptr);  Convert map by label to map by index for more efficient internal use. ;  ;  RooCompositeDataStore (const RooCompositeDataStore &other, const RooArgSet &vars, const char *newname=nullptr);  Update index category pointer, if it is contained in input argument vars. ;  ;  RooCompositeDataStore (RooStringView name, RooStringView title, const RooArgSet &vars, RooCategory &indexCat, std::map< std::string, RooAbsDataStore * > const &inputData);  Convert map by label to map by index for more efficient internal use. ;  ;  ~RooCompositeDataStore () override;  Destructor. ;  ; RooAbsArg * addColumn (RooAbsArg &var, bool adjustRange=true) override;  WVE ownership issue here!! Caller (a RooAbsData) should take ownership of all arguments, but only does for the first one here... ;  ; void append (RooAbsDataStore &other) override;  ; void attachBuffers (const RooArgSet &extObs) override;  ; void cacheArgs (const RooAbsArg *owner, RooArgSet &",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCompositeDataStore.html:77,Guid,Guide,77,doc/master/classRooCompositeDataStore.html,https://root.cern,https://root.cern/doc/master/classRooCompositeDataStore.html,1,['Guid'],['Guide']
Usability,". ROOT: RooConstVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; RooConstVar Class ReferencefinalRooFit » RooFit Core. ; Represents a constant real-valued object. ; Definition at line 23 of file RooConstVar.h. Public Member Functions;  RooConstVar ();  ;  RooConstVar (const char *name, const char *title, double value);  Constructor with value. ;  ;  RooConstVar (const RooConstVar &other, const char *name=nullptr);  Copy constructor. ;  ; void changeVal (double value);  Change the value of this constant. ;  ; TObject * clone (const char *newname) const override;  ; double getValV (const RooArgSet *) const override;  Return (constant) value. ;  ; TClass * IsA () const override;  ; bool isDerived () const override;  Returns false, as the value of the constant doesn't depend on other objects. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream. ;  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConstVar.html:67,Guid,Guide,67,doc/master/classRooConstVar.html,https://root.cern,https://root.cern/doc/master/classRooConstVar.html,1,['Guid'],['Guide']
Usability,". ROOT: RooConstraintSum Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooConstraintSum Class ReferenceRooFit » RooFit Core. ; Calculates the sum of the -(log) likelihoods of a set of RooAbsPfs that represent constraint functions. ; This class is used to calculate the composite -log(L) of constraints to be added to the regular -log(L) in RooAbsPdf::fitTo() with Constrain(..) arguments. ; Definition at line 27 of file RooConstraintSum.h. Public Member Functions;  RooConstraintSum ();  ;  RooConstraintSum (const char *name, const char *title, const RooArgSet &constraintSet, const RooArgSet &paramSet, bool takeGlobalObservablesFromData=false);  Constructor with set of constraint p.d.f.s. All elements in constraintSet must inherit from RooAbsPdf. ;  ;  RooConstraintSum (const RooConstraintSum &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; void doEval (RooFit::EvalContext &) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; TClass * IsA () const override;  ; const RooArgList & list ();  ; bool setData (RooAbsData &data, bool cloneData=true) override;  Replace the variables in this RooConstraintSum with the global observables in the dataset if they match by name. ;  ; bool setData (RooAbsData const &data, bool cloneData=true);  Replace the variables in this RooConstraintSum with the global observables in the dataset if they match by name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConstraintSum.html:72,Guid,Guide,72,doc/master/classRooConstraintSum.html,https://root.cern,https://root.cern/doc/master/classRooConstraintSum.html,1,['Guid'],['Guide']
Usability,". ROOT: RooConvCoefVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooConvCoefVar Class ReferenceRooFit » RooFit Core. ; Auxiliary class that represents the coefficient of a RooAbsAnaConvPdf implementation as a separate RooAbsReal object to be able to interface these coefficient terms with the generic RooRealIntegral integration mechanism. ; Definition at line 28 of file RooConvCoefVar.h. Public Member Functions;  RooConvCoefVar ();  Default constructor. ;  ;  RooConvCoefVar (const char *name, const char *title, const RooAbsAnaConvPdf &input, Int_t coefIdx, const RooArgSet *varList=nullptr);  Constructor given a RooAbsAnaConvPdf a coefficient index and a set with the convoluted observable(s). ;  ;  RooConvCoefVar (const RooConvCoefVar &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Return analytical integral of chosen coefficient. ;  ; TObject * clone (const char *newname) const override;  ; double evaluate () const override;  Return value of chosen coefficient. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Return analytical integration capabilities of chosen coefficient. ;  ; double getValV (const RooArgSet *nset=nullptr) const override;  Return value of chosen coefficient. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConvCoefVar.html:70,Guid,Guide,70,doc/master/classRooConvCoefVar.html,https://root.cern,https://root.cern/doc/master/classRooConvCoefVar.html,1,['Guid'],['Guide']
Usability,". ROOT: RooConvGenContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooConvGenContext Class ReferenceRooFit » RooFit Core. ; Efficient implementation of the generator context specific for RooAbsAnaConvPdf objects. ; The physics model is generated with a truth resolution model and the requested resolution model is generated separately as a PDF. The convolution variable of the physics model is subsequently explicitly smeared with the resolution model distribution. ; Definition at line 31 of file RooConvGenContext.h. Public Member Functions;  RooConvGenContext (const RooAbsAnaConvPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor for specialized generator context for analytical convolutions. ;  ;  RooConvGenContext (const RooFFTConvPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor for specialized generator context for FFT numerical convolutions. ;  ;  RooConvGenContext (const RooNumConvPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor for specialized generator context for numerical convolutions. ;  ; void attach (const RooArgSet &params) override;  Attach given set of arguments to internal clones of pdf and resolution model. ;  ; void generateEvent (RooArgSet &theEvent, Int_t remaining) override;  Generate a single event. ;  ; void initGenerator (const RooArgSet &theEvent) override;  One-time initialization of generator context, attaches the context to the supplied event container. ;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConvGenContext.html:73,Guid,Guide,73,doc/master/classRooConvGenContext.html,https://root.cern,https://root.cern/doc/master/classRooConvGenContext.html,1,['Guid'],['Guide']
Usability,". ROOT: RooCrystalBall Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooCrystalBall Class ReferencefinalRooFit » RooFit. ; PDF implementing the generalized Asymmetrical Double-Sided Crystall Ball line shape. . \[; f(m;m_0,\sigma,\alpha_L,n_L,\alpha_R,n_R) =; \begin{cases}; A_L \cdot (B_L - \frac{m - m_0}{\sigma_L})^{-n_L}, & \mbox{for }\frac{m - m_0}{\sigma_L} < -\alpha_L \\; \exp \left( - \frac{1}{2} \cdot \left[ \frac{m - m_0}{\sigma_L} \right]^2 \right), & \mbox{for }\frac{m - m_0}{\sigma_L} \leq 0 \\; \exp \left( - \frac{1}{2} \cdot \left[ \frac{m - m_0}{\sigma_R} \right]^2 \right), & \mbox{for }\frac{m - m_0}{\sigma_R} \leq \alpha_R \\; A_R \cdot (B_R + \frac{m - m_0}{\sigma_R})^{-n_R}, & \mbox{otherwise}, \\; \end{cases}; \]. times some normalization factor, where ; \[; \begin{align}; A_i &= \left(\frac{n_i}{\left| \alpha_i \right|}\right)^{n_i} \cdot \exp\left(- \frac {\left| \alpha_i \right|^2}{2}\right) \\; B_i &= \frac{n_i}{\left| \alpha_i \right|} - \left| \alpha_i \right| \\; \end{align}; \]. Definition at line 13 of file RooCrystalBall.h. Public Member Functions;  RooCrystalBall ();  ;  RooCrystalBall (const char *name, const char *title, RooAbsReal &x, RooAbsReal &x0, RooAbsReal &sigmaL, RooAbsReal &sigmaR, RooAbsReal &alphaL, RooAbsReal &nL, RooAbsReal &alphaR, RooAbsReal &nR);  Creates the fully parametrized crystal ball shape with asymmetric Gaussian core and asymmetric tails. ;  ;  RooCrystalBall (const char *name, const char *title, RooAbsReal &x, RooAbsReal &x0, RooAbsReal &sigmaLR, RooAbsReal &alpha, RooAbsReal &n, bool doubleSided=false);  Create a crystal ball shape with symmetric Gaussian core and only a tail on one side (just like RooCBShape) or two symmetric tails (like RooSDSCBShape). ;  ;  RooCrystalBall (const char *name, const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCrystalBall.html:70,Guid,Guide,70,doc/master/classRooCrystalBall.html,https://root.cern,https://root.cern/doc/master/classRooCrystalBall.html,1,['Guid'],['Guide']
Usability,". ROOT: RooCurve Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Private Member Functions |; List of all members ; RooCurve Class ReferenceRooFit » RooFit Core. ; One-dimensional graphical representation of a real-valued function. ; A curve is approximated by straight line segments with end points chosen to give a ""good"" approximation to the true curve. The goodness of the approximation is controlled by a precision and a resolution parameter.; A RooCurve derives from TGraph, so it can either be drawn as a line (default) or as points: RooPlot *p = y.plotOn(x.frame());; p->getAttMarker(""curve_y"")->SetMarkerStyle(20);; p->setDrawOptions(""curve_y"",""PL"");; p->Draw();; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; To retrieve a RooCurve from a RooPlot, use RooPlot::getCurve(). ; Definition at line 36 of file RooCurve.h. Public Types; enum  WingMode { NoWings =0; , Straight =1; , Extended =2; };  ;  Public Types inherited from TGraph; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kResetHisto = (1ULL << ( 17 )); , kNotEditable = (1ULL << ( 18 )); , ;   kIsSortedX = (1ULL << ( 19 )); , kIsHighlight = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL <",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCurve.html:64,Guid,Guide,64,doc/master/classRooCurve.html,https://root.cern,https://root.cern/doc/master/classRooCurve.html,1,['Guid'],['Guide']
Usability,". ROOT: RooCustomizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooCustomizer Class Reference. ; RooCustomizer is a factory class to produce clones of a prototype composite PDF object with the same structure but different leaf servers (parameters or dependents). ; RooCustomizer supports two kinds of modifications:. replaceArg(leaf_arg, repl_arg): Replaces each occurrence of leaf_arg with repl_arg in the composite pdf.; splitArg(split_arg): Build multiple clones of the same prototype. Each occurrence of split_arg is replaced with a clone of split_arg named split_arg_[MCstate], where [MCstate] is the name of the 'master category state' that indexes the clones to be built. Example: Change the decay constant of an exponential for each run; Splitting is particularly useful when building simultaneous fits to subsets of the data sample with different background properties. In such a case, the user builds a single prototype PDF representing the structure of the signal and background and splits the dataset into categories with different background properties. Using RooCustomizer a PDF for each subfit can be constructed from the prototype that has same structure and signal parameters, but different instances of the background parameters: e.g. ...; RooExponential bg(""bg"",""background"",x,alpha) ;; RooGaussian sig(""sig"",""signal"",x,mean,sigma) ;; RooAddPdf pdf(""pdf"",""pdf"",sig,bg,sigfrac) ;; ; RooDataSet data(""data"",""dataset"",RooArgSet(x,runblock),...); ; RooCategory runblock(""runblock"",""run block"") ;; runblock.defineType(""run1"") ;; runblock.defineType(""run2"") ;; ; RooArgSet splitLeaves;; RooCustomizer cust(pdf,runblock,splitLeaves);; cust.splitArg(alpha,runblock);; ; RooAbsPdf* pdf_run1 = cust.build(""run1"") ;; RooAbsPdf* pdf_run2 = cust.build(""run2"") ;; ; RooSimultaneous simpdf(""simpdf"",""simpdf"",RooArgS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCustomizer.html:69,Guid,Guide,69,doc/master/classRooCustomizer.html,https://root.cern,https://root.cern/doc/master/classRooCustomizer.html,1,['Guid'],['Guide']
Usability,". ROOT: RooDLLSignificanceMCSModule Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooDLLSignificanceMCSModule Class ReferenceRooFit » RooFit Core. ; Add-on module to RooMCStudy that calculates the significance of a signal by comparing the likelihood of a fit fit with a given parameter floating with a fit with that given parameter fixed to a nominal value (usually zero). ; The difference in the -log(L) of those two fits can be interpreted as the probability that a statistical background fluctation may result in a signal as large or larger than the signal observed. This interpretation is contingent on underlying normal sampling distributions and a MC study is a good way to test that assumption. ; Definition at line 23 of file RooDLLSignificanceMCSModule.h. Public Member Functions;  RooDLLSignificanceMCSModule (const char *parName, double nullHypoValue=0.0);  Constructor of module with parameter name to be interpreted as nSignal and the value of the null hypothesis for nSignal (usually zero) ;  ;  RooDLLSignificanceMCSModule (const RooDLLSignificanceMCSModule &other);  Copy constructor. ;  ;  RooDLLSignificanceMCSModule (const RooRealVar &param, double nullHypoValue=0.0);  Constructor of module with parameter to be interpreted as nSignal and the value of the null hypothesis for nSignal (usually zero) ;  ;  ~RooDLLSignificanceMCSModule () override;  ; RooDataSet * finalizeRun () override;  Return auxiliary dataset with results of delta(-log(L)) calculations of this module so that it is merged with RooMCStudy::fitParDataSet() by RooMCStudy. ;  ; bool initializeInstance () override;  Initialize module after attachment to RooMCStudy object. ;  ; bool initializeRun (Int_t) override;  Initialize module at beginning of RooCMStudy run. ;  ; TClass * IsA () const override;  ; bool processAfterFit (Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDLLSignificanceMCSModule.html:83,Guid,Guide,83,doc/master/classRooDLLSignificanceMCSModule.html,https://root.cern,https://root.cern/doc/master/classRooDLLSignificanceMCSModule.html,1,['Guid'],['Guide']
Usability,". ROOT: RooDataHist Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooDataHist Class ReferenceRooFit » RooFit Core. ; Container class to hold N-dimensional binned data. ; Each bin's central coordinates in N-dimensional space are represented by a RooArgSet containing RooRealVar, RooCategory or RooStringVar objects, thus data can be binned in real and/or discrete dimensions.; There is an unbinned equivalent, RooDataSet. Inspecting a datahist; Inspect a datahist using Print() to get the coordinates and weight() to get the bin contents: datahist->Print(""V"");; datahist->get(0)->Print(""V""); std::cout << ""w="" << datahist->weight(0) << std::endl;; datahist->get(1)->Print(""V""); std::cout << ""w="" << datahist->weight(1) << std::endl;; ... Plotting data.; See RooAbsData::plotOn(). Creating a datahist using RDataFrame; See alsoRooAbsDataHelper, rf408_RDataFrameToRooFit.C. PyROOT; Constructor of RooDataHist takes a RooCmdArg as argument also supports keyword arguments. For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; dh = ROOT.RooDataHist(""dh"", ""dh"", ROOT.RooArgList(x), ROOT.RooFit.Import(""SampleA"", histo)); ; # With keyword arguments:; dh = ROOT.RooDataHist(""dh"", ""dh"", ROOT.RooArgList(x), Import=(""SampleA"", histo)). Definition at line 40 of file RooDataHist.h. Classes; struct  VarInfo;  Structure to cache information on the histogram variable that is frequently used for histogram weights retrieval. More...;  . Public Member Functions;  RooDataHist ();  Default constructor. ;  ;  RooDataHist (const RooDataHist &other, const char *newname=nullptr);  Copy constructor. ;  ;  RooDataHist (RooStringView name, RooSt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataHist.html:67,Guid,Guide,67,doc/master/classRooDataHist.html,https://root.cern,https://root.cern/doc/master/classRooDataHist.html,1,['Guid'],['Guide']
Usability,". ROOT: RooDataSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooDataSet Class ReferenceRooFit » RooFit Core. ; Container class to hold unbinned data. ; The binned equivalent is RooDataHist. In RooDataSet, each data point in N-dimensional space is represented by a RooArgSet of RooRealVar, RooCategory or RooStringVar objects, which can be retrieved using get().; Since RooDataSet saves every event, it allows for fits with highest precision. With a large amount of data, however, it could be beneficial to represent them in binned form, i.e., RooDataHist. Binning the data will incur a loss of information, though. RooDataHist on the other hand may suffer from the curse of dimensionality if a high-dimensional problem with a lot of bins on each axis is tackled. Inspecting a dataset; Inspect a dataset using Print() with the ""verbose"" option: dataset->Print(""V"");; dataset->get(0)->Print(""V"");; dataset->get(1)->Print(""V"");; ... Plotting data.; See RooAbsData::plotOn(). Storage strategy; There are two storage backends:; RooVectorDataStore (default): std::vectors in memory. They are fast, but they cannot be serialised if the dataset exceeds a size of 1 Gb; RooTreeDataStore: Uses a TTree, which can be file backed if a file is opened before creating the dataset. This significantly reduces the memory pressure, as the baskets of the tree can be written to a file, and only the basket that's currently being read stays in RAM.; Enable tree-backed storage similar to this: TFile outputFile(""filename.root"", ""RECREATE"");; RooAbsData::setDefaultStorageType(RooAbsData::Tree);; RooDataSet mydata(...);; RooAbsData::setDefaultStorageTypestatic void setDefaultStorageType(StorageType s)Definition RooAbsData.cxx:130; RooAbsData",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataSet.html:66,Guid,Guide,66,doc/master/classRooDataSet.html,https://root.cern,https://root.cern/doc/master/classRooDataSet.html,1,['Guid'],['Guide']
Usability,". ROOT: RooDecay Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooDecay Class ReferenceRooFit » RooFit. ; Single or double sided decay function that can be analytically convolved with any RooResolutionModel implementation. ; It declares the basis functions for the analytical convolution with a RooResolutionModel. See RooAbsAnaConvPdf. ; \[; \mathrm{basis} = \begin{cases}; \exp\left(-\frac{t}{\tau}\right) & \mathrm{SingleSided} \\; \exp\left( \frac{t}{\tau}\right) & \mathrm{Flipped} \\; \exp\left(-\frac{|t|}{\tau}\right) & \mathrm{DoubleSided}; \end{cases}; \]. PyROOT; Some constructors of classes like RooDecay, RooBDecay, RooBCPGenDecay, RooBCPEffDecay and RooBMixDecay that take an enum DecayType as argument also support keyword arguments. For example, the following code is equivalent in PyROOT: # Directly passing keyword argument with string corresponding to enum value name:; decay_tm = ROOT.RooDecay(""decay_tm"", ""decay"", dt, tau, tm, ROOT.RooDecay.DoubleSided); ; # With enum value:; decay_tm = ROOT.RooDecay(""decay_tm"", ""decay"", dt, tau, tm, type=""DoubleSided""). Definition at line 22 of file RooDecay.h. Public Types; enum  DecayType { SingleSided; , DoubleSided; , Flipped; };  ;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDecay.html:64,Guid,Guide,64,doc/master/classRooDecay.html,https://root.cern,https://root.cern/doc/master/classRooDecay.html,1,['Guid'],['Guide']
Usability,". ROOT: RooDerivative Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooDerivative Class ReferenceRooFit » RooFit Core. ; Represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class. ; Definition at line 30 of file RooDerivative.h. Public Member Functions;  RooDerivative ();  Default constructor. ;  ;  RooDerivative (const char *name, const char *title, RooAbsReal &func, RooRealVar &x, const RooArgSet &nset, Int_t order=1, double eps=0.001);  ;  RooDerivative (const char *name, const char *title, RooAbsReal &func, RooRealVar &x, Int_t order=1, double eps=0.001);  ;  RooDerivative (const RooDerivative &other, const char *name=nullptr);  ;  ~RooDerivative () override;  ; TObject * clone (const char *newname) const override;  ; double eps () const;  ; TClass * IsA () const override;  ; Int_t order () const;  ; bool redirectServersHook (const RooAbsCollection &, bool, bool, bool) override;  Zap functor and derivator ;. ;  ; void setEps (double e);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implemen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDerivative.html:69,Guid,Guide,69,doc/master/classRooDerivative.html,https://root.cern,https://root.cern/doc/master/classRooDerivative.html,1,['Guid'],['Guide']
Usability,". ROOT: RooDouble Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooDouble Class ReferenceRooFit » RooFit Core. ; Minimal implementation of a TObject holding a double value. ; Definition at line 22 of file RooDouble.h. Public Member Functions;  RooDouble ();  Default constructor. ;  ;  RooDouble (const RooDouble &other);  ;  RooDouble (double value);  ; Int_t Compare (const TObject *other) const override;  Implement comparison to other TObjects that are also RooDouble to facilitate sorting of RooDoubles in a ROOT container. ;  ; TClass * IsA () const override;  ; bool IsSortable () const override;  We are a sortable object. ;  ;  operator double () const;  Return value of contained double. ;  ; RooDouble & operator= (double value);  Return true if contained double equals value. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDouble.html:65,Guid,Guide,65,doc/master/classRooDouble.html,https://root.cern,https://root.cern/doc/master/classRooDouble.html,1,['Guid'],['Guide']
Usability,". ROOT: RooDstD0BG Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooDstD0BG Class ReferenceRooFit » RooFit. ; Special p.d.f shape that can be used to model the background of D*-D0 mass difference distributions. ; It computes. \[; \mathrm{RooDSTD0}(m \, | \, m_0, A, B, C) =; \left(1 - \exp\left(-\frac{m - m_0}{C}\right) \right); \cdot \left(\frac{m}{m_0}\right)^A + B; \cdot \left(\frac{m}{m_0} - 1 \right); \]. Definition at line 26 of file RooDstD0BG.h. Public Member Functions;  RooDstD0BG ();  ;  RooDstD0BG (const char *name, const char *title, RooAbsReal &_dm, RooAbsReal &_dm0, RooAbsReal &_c, RooAbsReal &_a, RooAbsReal &_b);  ;  RooDstD0BG (const RooDstD0BG &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  if (matchArgs(allVars,analVars,dm)) return 1 ; ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDstD0BG.html:66,Guid,Guide,66,doc/master/classRooDstD0BG.html,https://root.cern,https://root.cern/doc/master/classRooDstD0BG.html,1,['Guid'],['Guide']
Usability,". ROOT: RooEffGenContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; RooEffGenContext Class ReferenceRooFit » RooFit Core. ; Specialized generator context for p.d.fs represented by class RooEffProd, which are p.d.fs multiplied with an efficiency function. ; This generator context generates events from such products by first generating events from a dedicated generator context of the input p.d.f. and applying an extra rejection step based on the efficiency function. ; Definition at line 23 of file RooEffGenContext.h. Public Member Functions;  RooEffGenContext (const RooAbsPdf &model, const RooAbsPdf &pdf, const RooAbsReal &eff, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, const RooArgSet *forceDirect=nullptr);  Constructor of generator context for RooEffProd products. ;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Detailed printing interface. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsGenContext;  RooAbsGenContext (const RooAbsPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; virtual void attach (const RooArgSet &params);  Interface to attach given parameters to object in this context. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents when printing. ;  ; StyleOption defaultPrintStyle (Option_t *opt) const override;  Define default print style. ;  ; virtual RooDataSet * generate (do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooEffGenContext.html:72,Guid,Guide,72,doc/master/classRooEffGenContext.html,https://root.cern,https://root.cern/doc/master/classRooEffGenContext.html,1,['Guid'],['Guide']
Usability,". ROOT: RooEffProd Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooEffProd Class Reference. ; The class RooEffProd implements the product of a PDF with an efficiency function. ; The normalization integral of the product is calculated numerically, but the event generation is handled by a specialized generator context that implements the event generation in a more efficient for cases where the PDF has an internal generator that is smarter than accept reject. ; Definition at line 19 of file RooEffProd.h. Public Member Functions;  RooEffProd ();  ;  RooEffProd (const char *name, const char *title, RooAbsPdf &pdf, RooAbsReal &efficiency);  Constructs the product of the PDF inPdf with the efficiency function inEff. ;  ;  RooEffProd (const RooEffProd &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype, const RooArgSet *auxProto, bool verbose) const override;  Return specialized generator context for RooEffProds that implements generation in a more efficient way than can be done for generic correlated products. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooEffProd.html:66,Guid,Guide,66,doc/master/classRooEffProd.html,https://root.cern,https://root.cern/doc/master/classRooEffProd.html,1,['Guid'],['Guide']
Usability,". ROOT: RooEfficiency Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooEfficiency Class ReferenceRooFit » RooFit Core. ; A PDF helper class to fit efficiencies parameterized by a supplied function F. ; Given a dataset with a category C that determines if a given event is accepted or rejected for the efficiency to be measured, this class evaluates as F if C is 'accept' and as (1-F) if C is 'reject'. Values of F below 0 and above 1 are clipped. F may have an arbitrary number of dependents and parameters ; Definition at line 24 of file RooEfficiency.h. Public Member Functions;  RooEfficiency ();  Default constructor. ;  ;  RooEfficiency (const char *name, const char *title, const RooAbsReal &effFunc, const RooAbsCategory &cat, const char *sigCatName);  Construct an N+1 dimensional efficiency p.d.f from an N-dimensional efficiency function and a category cat with two states (0,1) that indicate if a given event should be counted as rejected or accepted respectively. ;  ;  RooEfficiency (const RooEfficiency &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; TClass * IsA () const override;  ; void Streamer (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooEfficiency.html:69,Guid,Guide,69,doc/master/classRooEfficiency.html,https://root.cern,https://root.cern/doc/master/classRooEfficiency.html,1,['Guid'],['Guide']
Usability,". ROOT: RooEllipse Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; RooEllipse Class ReferenceRooFit » RooFit Core. ; Two-dimensional ellipse that can be used to represent an error contour. ; Definition at line 22 of file RooEllipse.h. Public Member Functions;  RooEllipse ()=default;  ;  RooEllipse (const char *name, double x1, double x2, double s1, double s2, double rho=0, Int_t points=100);  Create a 2-dimensional ellipse centered at (x1,x2) that represents the confidence level contour for a measurement with errors (s1,s2) and correlation coefficient rho. ;  ; double getFitRangeBinW () const override;  ; double getFitRangeNEvt () const override;  ; double getFitRangeNEvt (double, double) const override;  ; TClass * IsA () const override;  ; void Print (Option_t *options=nullptr) const override;  Printing interface. ;  ; void printClassName (std::ostream &os) const override;  Print class name of ellipse on ostream. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print detailed multi line information on ellipse on ostreamx. ;  ; void printName (std::ostream &os) const override;  Print name of ellipse on ostream. ;  ; void printTitle (std::ostream &os) const override;  Print title of ellipse on ostream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph;  TGraph ();  Graph default constructor. ;  ;  TGraph (const char *filename, const char *format=""%lg %lg"", Option_t *option="""");  Graph constructor reading input from filename. ;  ;  TGraph (const TF1 *f, Option_t *option="""");  Graph constructor importing its parameters from the TF1 object passed as argument. ;  ;  TGraph (const TGraph &gr);  Copy constructor ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooEllipse.html:66,Guid,Guide,66,doc/master/classRooEllipse.html,https://root.cern,https://root.cern/doc/master/classRooEllipse.html,1,['Guid'],['Guide']
Usability,". ROOT: RooErrorVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooErrorVar Class ReferenceRooFit » RooFit Core. ; Auxiliary class that represents the error of a RooRealVar as a separate object. ; The main reason of existence of this class is to facilitate the reuse of existing techniques to perform calculations that involve a RooRealVars error, such as calculating the pull value. ; Definition at line 28 of file RooErrorVar.h. Public Member Functions;  RooErrorVar ();  Default constructor. ;  ;  RooErrorVar (const char *name, const char *title, const RooRealVar &input);  Construct an lvalue variable representing the error of RooRealVar input. ;  ;  RooErrorVar (const RooErrorVar &other, const char *name=nullptr);  ;  ~RooErrorVar () override;  ; TObject * clone (const char *newname) const override;  ; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; const RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false) const override;  Return binning with given name. ;  ; RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false) override;  Return binning with given name. ;  ; std::list< std::string > getBinningNames () const override;  Get a list of all binning names. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return value, i.e. error on input variable. ;  ; bool hasBinning (const char *name) const override;  Return true if we have binning with given name. ;  ; TClass * IsA () const override;  ; bool isFundamental () const override;  Is this object a fundamental type that can be added to a dataset? Fundamental-type subclasses override this method to return true. ;  ; virtual Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooErrorVar.html:67,Guid,Guide,67,doc/master/classRooErrorVar.html,https://root.cern,https://root.cern/doc/master/classRooErrorVar.html,1,['Guid'],['Guide']
Usability,". ROOT: RooExpensiveObjectCache Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooExpensiveObjectCache Class ReferenceRooFit » RooFit Core. ; Singleton class that serves as repository for objects that are expensive to calculate. ; Owners of such objects can registers these here with associated parameter values for which the object is valid, so that other instances can, at a later moment retrieve these precalculated objects. ; Definition at line 24 of file RooExpensiveObjectCache.h. Classes; class  ExpensiveObject;  . Public Member Functions;  RooExpensiveObjectCache ();  ;  RooExpensiveObjectCache (const RooExpensiveObjectCache &other);  ;  ~RooExpensiveObjectCache () override;  Destructor. ;  ; void clearAll ();  Clear all cache elements. ;  ; bool clearObj (Int_t uniqueID);  Clear cache element with given unique ID Retrieve payload object of cache element with given unique ID. ;  ; bool empty () const;  ; const TObject * getObj (Int_t uniqueID);  Retrieve payload object of cache element with given unique ID. ;  ; void importCacheObjects (RooExpensiveObjectCache &other, const char *ownerName, bool verbose=false);  ; TClass * IsA () const override;  ; void print () const;  ; bool registerObject (const char *ownerName, const char *objectName, TObject &cacheObject, const RooArgSet &params);  Register object associated with given name and given associated parameters with given values in cache. ;  ; const TObject * retrieveObject (const char *name, TClass *tclass, const RooArgSet &params);  Retrieve object from cache that was registered under given name with given parameters, if current parameter values match those that were stored in the registry for this object. ;  ; bool setObj (Int_t uniqueID, TObject *obj);  Place new payload object in cache element with given unique ID. ;  ; I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExpensiveObjectCache.html:79,Guid,Guide,79,doc/master/classRooExpensiveObjectCache.html,https://root.cern,https://root.cern/doc/master/classRooExpensiveObjectCache.html,3,"['Clear', 'Guid', 'clear']","['Clear', 'Guide', 'clearAll']"
Usability,". ROOT: RooExponential Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooExponential Class ReferenceRooFit » RooFit. ; Exponential PDF. ; It computes ; \[; \mathrm{RooExponential}(x, c) = \mathcal{N} \cdot \exp(c\cdot x),; \]. where \( \mathcal{N} \) is a normalisation constant that depends on the range and values of the arguments. ; Definition at line 22 of file RooExponential.h. Public Member Functions;  RooExponential ();  ;  RooExponential (const char *name, const char *title, RooAbsReal &variable, RooAbsReal &coefficient, bool negateCoefficient=false);  ;  RooExponential (const RooExponential &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; RooAbsReal const & coefficient () const;  Get the coefficient ""c"". ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; TClass * IsA () const override;  ; bool negateCoefficient () const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExponential.html:70,Guid,Guide,70,doc/master/classRooExponential.html,https://root.cern,https://root.cern/doc/master/classRooExponential.html,1,['Guid'],['Guide']
Usability,". ROOT: RooExtendPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooExtendPdf Class Reference. ; RooExtendPdf is a wrapper around an existing PDF that adds a parameteric extended likelihood term to the PDF, optionally divided by a fractional term from a partial normalization of the PDF: . \[; n_\mathrm{Expected} = N \quad \text{or} \quad n_\mathrm{Expected} = N / \mathrm{frac}; \]. where \( N \) is supplied as a RooAbsReal to RooExtendPdf. The fractional term is defined as ; \[; \mathrm{frac} = \frac{\int_\mathrm{cutRegion[x]} \mathrm{pdf}(x,y) \; \mathrm{d}x \mathrm{d}y}{; \int_\mathrm{normRegion[x]} \mathrm{pdf}(x,y) \; \mathrm{d}x \mathrm{d}y}; \]. where \( x \) is the set of dependents involved in the selection region and \( y \) is the set of remaining dependents.; \( \mathrm{cutRegion}[x] \) is a limited integration range that is contained in the nominal integration range \( \mathrm{normRegion}[x] \). ; Definition at line 22 of file RooExtendPdf.h. Public Member Functions;  RooExtendPdf ()=default;  ;  RooExtendPdf (const char *name, const char *title, RooAbsPdf &pdf, RooAbsReal &norm, const char *rangeName=nullptr);  ;  RooExtendPdf (const char *name, const char *title, RooAbsPdf &pdf, RooAbsReal::Ref norm, const char *rangeName=nullptr);  Constructor. ;  ;  RooExtendPdf (const RooExtendPdf &other, const char *name=nullptr);  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Forward calculation of analytical integrals to input p.d.f. ;  ; TObject * clone (const char *newname) const override;  ; std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExtendPdf.html:68,Guid,Guide,68,doc/master/classRooExtendPdf.html,https://root.cern,https://root.cern/doc/master/classRooExtendPdf.html,1,['Guid'],['Guide']
Usability,". ROOT: RooExtendedBinding Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooExtendedBinding Class Reference. . Definition at line 20 of file RooExtendedBinding.h. Public Member Functions;  RooExtendedBinding ();  ;  RooExtendedBinding (const char *name, const char *title, RooAbsPdf &_pdf);  ;  RooExtendedBinding (const RooExtendedBinding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExtendedBinding.html:74,Guid,Guide,74,doc/master/classRooExtendedBinding.html,https://root.cern,https://root.cern/doc/master/classRooExtendedBinding.html,1,['Guid'],['Guide']
Usability,". ROOT: RooExtendedTerm Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooExtendedTerm Class ReferenceRooFit » RooFit Core. ; A p.d.f with no observables that only introduces an extended ML term for a given number of expected events term when an extended ML is constructed. ; Definition at line 22 of file RooExtendedTerm.h. Public Member Functions;  RooExtendedTerm ()=default;  ;  RooExtendedTerm (const char *name, const char *title, const RooAbsReal &n);  Constructor. ;  ;  RooExtendedTerm (const RooExtendedTerm &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; double expectedEvents (const RooArgSet *nset) const override;  Return number of expected events, in other words the value of the associated n parameter. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExtendedTerm.html:71,Guid,Guide,71,doc/master/classRooExtendedTerm.html,https://root.cern,https://root.cern/doc/master/classRooExtendedTerm.html,1,['Guid'],['Guide']
Usability,". ROOT: RooFFTConvPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; RooFFTConvPdf Class ReferenceRooFit » RooFit Core. ; PDF for the numerical (FFT) convolution of two PDFs. ; This class implements a generic one-dimensional numeric convolution of two PDFs, and can convolve any two RooAbsPdfs.; The class exploits the convolution theorem ; \[; f(x) * g(x) \rightarrow F(k_i) \cdot G(k_i); \]. to calculate the convolution by calculating a Real->Complex FFT of both input PDFs, multiplying the complex coefficients and performing the reverse Complex->Real FFT to get the result in the input space. This class uses the ROOT FFT interface to the (free) FFTW3 package (www.fftw.org), and requires that your ROOT installation is compiled with the fftw3=ON (default). Instructions for manually installing fftw below.; Note that the performance in terms of speed and stability of RooFFTConvPdf is vastly superior to that of RooNumConvPdf.; An important feature of FFT convolutions is that the observable is assumed to be cyclical. This is correct for cyclical observables such as angles, but does not hold in general. For non-cyclical variables, wrap-around artifacts may be encountered, e.g. if the PDF is zero at xMin and non-zero at xMax. A rising tail may appear at xMin. This is inevitable when using FFTs. A distribution with 3 bins therefore looks like: ... 0 1 2 0 1 2 0 1 2 ...; Therefore, if bins 0 and 2 are not equal, the FFT sees a cyclical function with a step at the 2|0 boundary, which causes artifacts in Fourier space.; The spillover or discontinuity can be reduced or eliminated by introducing a buffer zone in the FFT calculation. If this feature is activated (on by default), the sampling array for the FFT ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFFTConvPdf.html:69,Guid,Guide,69,doc/master/classRooFFTConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooFFTConvPdf.html,1,['Guid'],['Guide']
Usability,". ROOT: RooFactoryWSTool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; RooFactoryWSTool Class ReferenceRooFit » RooFit Core. ; Implementation detail of the RooWorkspace. ; It interprets all expressions for RooWorkspace::factory(const char*). ; Definition at line 47 of file RooFactoryWSTool.h. Classes; class  IFace;  ; class  SpecialsIFace;  . Public Member Functions;  RooFactoryWSTool (const RooFactoryWSTool &)=delete;  ;  RooFactoryWSTool (RooWorkspace &ws);  ; RooAddPdf * add (const char *objName, const char *specList, bool recursiveCoefs=false);  ; RooAddition * addfunc (const char *objName, const char *specList);  ; RooRealSumPdf * amplAdd (const char *objName, const char *specList);  ; RooAbsArg & asARG (const char *);  CINT constructor interface, return constructor string argument #idx as RooAbsArg reference found in workspace. ;  ; RooCategory & asCAT (const char *);  CINT constructor interface, return constructor string argument #idx as RooCategory reference found in workspace. ;  ; RooAbsCategory & asCATFUNC (const char *);  CINT constructor interface, return constructor string argument #idx as RooAbsCategory reference found in workspace. ;  ; RooAbsCategoryLValue & asCATLV (const char *);  CINT constructor interface, return constructor string argument #idx as RooAbsCategoryLValue reference found in workspace. ;  ; RooAbsData & asDATA (const char *);  CINT constructor interface, return constructor string argument #idx as RooAbsData object found in workspace. ;  ; RooDataHist & asDHIST (const char *);  CINT constructor interface, return constructor string argument #idx as RooDataHist object found in workspace. ;  ; double asDOUBLE (const char *);  CINT constructor interface",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFactoryWSTool.html:72,Guid,Guide,72,doc/master/classRooFactoryWSTool.html,https://root.cern,https://root.cern/doc/master/classRooFactoryWSTool.html,1,['Guid'],['Guide']
Usability,". ROOT: RooFirstMoment Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooFirstMoment Class ReferenceRooFit » RooFit Core. . Definition at line 26 of file RooFirstMoment.h. Public Member Functions;  RooFirstMoment ()=default;  ;  RooFirstMoment (const char *name, const char *title, RooAbsReal &func, RooRealVar &x);  ;  RooFirstMoment (const char *name, const char *title, RooAbsReal &func, RooRealVar &x, const RooArgSet &nset, bool intNSet=false);  ;  RooFirstMoment (const RooFirstMoment &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; const RooAbsReal & iF ();  ; TClass * IsA () const override;  ; const RooAbsReal & ixF ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; const RooAbsReal & xF ();  ;  Public Member Functions inherited from RooAbsMoment;  RooAbsMoment ()=default;  ;  RooAbsMoment (const char *name, const char *title, RooAbsReal &func, RooRealVar &x, Int_t order=1, bool takeRoot=false);  ;  RooAbsMoment (const RooAbsMoment &other, const char *name=nullptr);  ; bool central () const;  ; RooAbsReal * mean ();  ; Int_t order () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFirstMoment.html:70,Guid,Guide,70,doc/master/classRooFirstMoment.html,https://root.cern,https://root.cern/doc/master/classRooFirstMoment.html,1,['Guid'],['Guide']
Usability,". ROOT: RooFit Core. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; RooFit CoreRooFit. ; RooFit core classes. These provide the infrastructure for building likelihood models. . Classes; class  RooFit::Evaluator;  Evaluates a RooAbsReal object in other ways than recursive graph traversal. More...;  ; class  Roo1DTable;  One-dimensional table. More...;  ; class  RooAbsAnaConvPdf;  Base class for PDFs that represent a physics model that can be analytically convolved with a resolution model. More...;  ; class  RooAbsArg;  Common abstract base class for objects that represent a value and a ""shape"" in RooFit. More...;  ; class  RooAbsBinning;  Abstract base class for RooRealVar binning definitions. More...;  ; class  RooAbsCache;  Abstract base class for data members of RooAbsArgs that cache other (composite) RooAbsArg expressions. More...;  ; class  RooAbsCachedPdf;  Abstract base class for p.d.f.s that need or want to cache their evaluate() output in a RooHistPdf defined in terms of the used observables. More...;  ; class  RooAbsCachedReal;  Abstract base class for functions that need or want to cache their evaluate() output in a RooHistFunc defined in terms of the used observables. More...;  ; class  RooAbsCacheElement;  Abstract base class for objects to be stored in RooAbsCache cache manager objects. More...;  ; class  RooAbsCategory;  A space to attach TBranches. More...;  ; class  RooAbsCategoryLValue;  Abstract base class for objects that represent a discrete value that can be set from the outside, i.e. More...;  ; class  RooAbsCollection;  Abstract container object that can hold multiple RooAbsArg objects. More...;  ; class  RooAbsData;  Abstract base class for binned and unbinned datasets. More...;  ; class  RooAbsDataStore;  Abstract base class for a data collection. More...;  ; class  RooAbsFunc;  Abstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it. M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Roofitcore.html:51,Guid,Guide,51,doc/master/group__Roofitcore.html,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html,1,['Guid'],['Guide']
Usability,". ROOT: RooFit Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions ; RooFit Namespace Reference. The namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or other types of arguments). ; More... Namespaces; namespace  Detail;  ; namespace  Experimental;  ; namespace  JSONIO;  ; namespace  MultiProcess;  ; namespace  TestStatistics;  Namespace for new RooFit test statistic calculation. ;  . Classes; class  EvalBackend;  ; class  EvalContext;  ; class  Evaluator;  Evaluates a RooAbsReal object in other ways than recursive graph traversal. More...;  ; struct  NodeInfo;  A struct used by the Evaluator to store information on the RooAbsArgs in the computation graph. More...;  ; struct  UniqueId;  A UniqueId can be added as a class member to enhance any class with a unique identifier for each instantiated object. More...;  . Typedefs; typedef double(* CFUNCD1D) (double);  ; typedef double(* CFUNCD1I) (Int_t);  ; typedef double(* CFUNCD2DD) (double, double);  ; typedef double(* CFUNCD2DI) (double, Int_t);  ; typedef double(* CFUNCD2ID) (Int_t, double);  ; typedef double(* CFUNCD2II) (Int_t, Int_t);  ; typedef double(* CFUNCD2UD) (UInt_t, double);  ; typedef double(* CFUNCD3DDB) (double, double, bool);  ; typedef double(* CFUNCD3DDD) (double, double, double);  ; typedef double(* CFUNCD3DII) (double, Int_t, Int_t);  ; typedef double(* CFUNCD3UDD) (UInt_t, double, double);  ; typedef double(* CFUNCD3UDU) (UInt_t, double, UInt_t);  ; typedef double(* CFUNCD3UUD) (UInt_t, UInt_t, double);  ; typedef double(* CFUNCD4DDDB) (double, double, double, bool);  ; typedef double(* CFUNCD4DDDD) (double, double, double, double);  ; typedef double(* CFUNCD4DDDI) (double, double, double, Int_t);  ; using ModelConfig = RooStats::ModelConfig;  ; template<typename T > ; using OwningPtr = T *;  An alias for raw pointers for indicating that the retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooFit.html:66,Guid,Guide,66,doc/master/namespaceRooFit.html,https://root.cern,https://root.cern/doc/master/namespaceRooFit.html,1,['Guid'],['Guide']
Usability,". ROOT: RooFit Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; RooFit TutorialsTutorials. ; These tutorials illustrate the main features of RooFit: the name of the examples and their short description help in figuring out their objective. . Files; file  rf101_basics.C;   Basic functionality: fitting, plotting, toy data generation on one-dimensional PDFs. ;  ; file  rf101_basics.py;   This tutorial illustrates the basic features of RooFit. ;  ; file  rf102_dataimport.C;   Basic functionality: importing data from ROOT TTrees and THx histograms. ;  ; file  rf102_dataimport.py;   'BASIC FUNCTIONALITY' RooFit tutorial macro #102 Importing data from ROOT TTrees and THx histograms ;  ; file  rf103_interprfuncs.C;   Basic functionality: interpreted functions and PDFs. ;  ; file  rf103_interprfuncs.py;   Basic functionality: interpreted functions and pdfs ;  ; file  rf104_classfactory.C;   Basic functionality: The class factory for functions and pdfs ;  ; file  rf104_classfactory.py;   Basic functionality: the class factory for functions and pdfs ;  ; file  rf105_funcbinding.C;   Basic functionality: binding ROOT math functions as RooFit functions and pdfs ;  ; file  rf105_funcbinding.py;   'BASIC FUNCTIONALITY' RooFit tutorial macro #105 Demonstration of binding ROOT Math functions as RooFit functions and pdfs ;  ; file  rf106_plotdecoration.C;   Basic functionality: adding boxes with parameters, statistics to RooPlots, decorating with arrows, text etc... ;  ; file  rf106_plotdecoration.py;   Basic functionality: adding boxes with parameters to RooPlots and decorating with arrows, etc... ;  ; file  rf107_plotstyles.C;   Basic functionality: various plotting styles of data, functions in a RooPlot ;  ; file  rf107_plotstyles.py;   Basic functionality: demonstration of various plotting styles of data, functions in a RooPlot ;  ; file  rf108_plotbinning.C;   Basic functionality: plotting unbinned data with alternate and variabl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__roofit.html:56,Guid,Guide,56,doc/master/group__tutorial__roofit.html,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html,1,['Guid'],['Guide']
Usability,". ROOT: RooFit. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; RooFit. ; RooFit is a package for building likelihood models and fitting these to data. ; For an introduction check the RooFit Tutorials, user's guides, courses or the RooFit chapter of the Manual.; For developers, there is also the RooFit Developer Documentation, which serves as a reference on how to extend RooFit with custom classes or for contributing to RooFit itself. . Modules;  RooFit Developer Documentation;  How-to guides on how to extend RooFit with custom classes or to work on RooFit itself. ;  ;  RooFit;  RooFit main classes for building likelihood models, mainly PDFs. ;  ;  RooFit Core;  RooFit core classes. These provide the infrastructure for building likelihood models. ;  ;  RooFit Legacy;  Old RooFit classes. ;  ;  RooFit command arguments;  These arguments can be passed to functions of RooFit objects. ;  ;  RooFit More;  RooFit components that are only available if ROOT was built with the mathmore option. ;  ;  RooStats;  RooStats is a toolkit for statistical tests built on top of RooFit. ;  ;  xRooFit;  A high-level API for RooFit. ;  ;  RooFit Pythonizations;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Roofitmain.html:46,Guid,Guide,46,doc/master/group__Roofitmain.html,https://root.cern,https://root.cern/doc/master/group__Roofitmain.html,4,"['Guid', 'guid']","['Guide', 'guides']"
Usability,". ROOT: RooFit::Detail::CodeSquashContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; RooFit::Detail::CodeSquashContext Class Reference. ; A class to maintain the context for squashing of RooFit models into code. ; Definition at line 42 of file CodeSquashContext.h. Classes; class  LoopScope;  A class to manage loop scopes using the RAII technique. More...;  . Public Member Functions;  CodeSquashContext (std::map< RooFit::Detail::DataKey, std::size_t > const &outputSizes, std::vector< double > &xlarr, Experimental::RooFuncWrapper &wrapper);  ; void addResult (const char *key, std::string const &value);  Adds (or overwrites) the string representing the result of a node. ;  ; void addResult (RooAbsArg const *key, std::string const &value);  A function to save an expression that includes/depends on the result of the input node. ;  ; void addToCodeBody (RooAbsArg const *klass, std::string const &in);  Adds the input string to the squashed code body. ;  ; void addToCodeBody (std::string const &in, bool isScopeIndep=false);  A variation of the previous addToCodeBody that takes in a bool value that determines if input is independent. ;  ; void addToGlobalScope (std::string const &str);  Adds the given string to the string block that will be emitted at the top of the squashed function. ;  ; void addVecObs (const char *key, int idx);  Since the squashed code represents all observables as a single flattened array, it is important to keep track of the start index for a vector valued observable which can later be expanded to access the correct element. ;  ; std::string assembleCode (std::string const &returnExpr);  Assemble and return the final code with the return expression and global statements. ;  ; std::unique_ptr< LoopScope > beginLoop (RooAbsArg const *in);  Create a R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFit_1_1Detail_1_1CodeSquashContext.html:89,Guid,Guide,89,doc/master/classRooFit_1_1Detail_1_1CodeSquashContext.html,https://root.cern,https://root.cern/doc/master/classRooFit_1_1Detail_1_1CodeSquashContext.html,1,['Guid'],['Guide']
Usability,". ROOT: RooFit::Detail::CompileContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; RooFit::Detail::CompileContext Class Reference. . Definition at line 29 of file NormalizationHelpers.h. Public Member Functions;  CompileContext (RooArgSet const &topLevelNormSet);  ;  ~CompileContext ();  ; bool binnedLikelihoodMode () const;  ; bool binWidthFuncFlag () const;  ; template<class T > ; T * compile (T &arg, RooAbsArg &owner, RooArgSet const &normSet);  ; void compileServer (RooAbsArg &server, RooAbsArg &arg, RooArgSet const &normSet);  ; void compileServers (RooAbsArg &arg, RooArgSet const &normSet);  ; bool likelihoodMode () const;  ; void markAsCompiled (RooAbsArg &arg) const;  ; void setBinnedLikelihoodMode (bool flag);  ; void setBinWidthFuncFlag (bool flag);  ; void setLikelihoodMode (bool flag);  . Private Member Functions; void add (RooAbsArg &arg);  ; RooAbsArg * compileImpl (RooAbsArg &arg, RooAbsArg &owner, RooArgSet const &normSet);  ; RooAbsArg * find (RooAbsArg &arg) const;  ; bool isMarkedAsCompiled (RooAbsArg const &arg) const;  . Private Attributes; bool _binnedLikelihoodMode = false;  ; bool _binWidthFuncFlag = false;  ; std::unordered_map< TNamed const *, RooAbsArg * > _clonedArgsSet;  ; bool _likelihoodMode = false;  ; std::unordered_map< RooAbsArg *, RooAbsArg * > _replacements;  ; RooArgSet const & _topLevelNormSet;  . #include <RooFit/Detail/NormalizationHelpers.h>; Constructor & Destructor Documentation. ◆ CompileContext(). RooFit::Detail::CompileContext::CompileContext ; (; RooArgSet const & ; topLevelNormSet). Definition at line 21 of file NormalizationHelpers.cxx. ◆ ~CompileContext(). RooFit::Detail::CompileContext::~CompileContext ; (; ). Definition at line 23 of file NormalizationHelpers.cxx. Member Function Documentation. ◆ add(). void RooFit::Detail::CompileContext::ad",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFit_1_1Detail_1_1CompileContext.html:86,Guid,Guide,86,doc/master/classRooFit_1_1Detail_1_1CompileContext.html,https://root.cern,https://root.cern/doc/master/classRooFit_1_1Detail_1_1CompileContext.html,1,['Guid'],['Guide']
Usability,". ROOT: RooFit::Detail::MathFuncs Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; RooFit::Detail::MathFuncs Namespace Reference. Functions; double approxErf (double arg);  ; double bernstein (double x, double xmin, double xmax, double *coefs, int nCoefs);  The caller needs to make sure that there is at least one coefficient. ;  ; double bernsteinIntegral (double xlo, double xhi, double xmin, double xmax, double *coefs, int nCoefs);  ; double bifurGauss (double x, double mean, double sigmaL, double sigmaR);  ; double bifurGaussIntegral (double xMin, double xMax, double mean, double sigmaL, double sigmaR);  ; double binomial (int n, int k);  Calculates the binomial coefficient n over k. ;  ; double cbShape (double m, double m0, double sigma, double alpha, double n);  ; double cbShapeIntegral (double mMin, double mMax, double m0, double sigma, double alpha, double n);  ; double chebychev (double *coeffs, unsigned int nCoeffs, double x_in, double xMin, double xMax);  ; double chebychevIntegral (double const *coeffs, unsigned int nCoeffs, double xMin, double xMax, double xMinFull, double xMaxFull);  ; double constraintSum (double const *comp, unsigned int compSize);  ; double efficiency (double effFuncVal, int catIndex, int sigCatIndex);  ; double effProd (double eff, double pdf);  ; double exponentialIntegral (double xMin, double xMax, double constant);  ; double fast_fma (double x, double y, double z) noexcept;  use fast FMA if available, fall back to normal arithmetic if not ;  ; double flexibleInterp (unsigned int code, double const *params, unsigned int n, double const *low, double const *high, double boundary, double nominal, int doCutoff);  ; double flexibleInterpSingle (unsigned int code, double low, double high, double boundary, double nominal, double paramVal, double res);  ; double gaussian (double x, double mean, double sigma);  Function to evaluate an un-normalized RooGaussian. ;  ; double gaus",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:85,Guid,Guide,85,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,1,['Guid'],['Guide']
Usability,". ROOT: RooFit::EvalContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; Friends |; List of all members ; RooFit::EvalContext Class Reference. . Definition at line 84 of file EvalContext.h. Public Types; enum class  OffsetMode { WithoutOffset; , WithOffset; , OnlyOffset; };  . Public Member Functions; std::span< const double > at (RooAbsArg const *arg, RooAbsArg const *caller=nullptr);  ; template<class T > ; std::span< const double > at (RooTemplateProxy< T > const &proxy);  ; RooBatchCompute::Config config (RooAbsArg const *arg) const;  ; void enableVectorBuffers (bool enable);  ; std::span< double > output ();  ; void resetVectorBuffers ();  ; void resize (std::size_t n);  ; void set (RooAbsArg const *arg, std::span< const double > const &span);  ; void setConfig (RooAbsArg const *arg, RooBatchCompute::Config const &config);  ; void setOutputWithOffset (RooAbsArg const *arg, ROOT::Math::KahanSum< double > val, ROOT::Math::KahanSum< double > const &offset);  Sets the output value with an offset. ;  ; auto size () const;  . Private Attributes; std::size_t _bufferIdx = 0;  ; std::vector< std::vector< double > > _buffers;  ; std::vector< RooBatchCompute::Config > _cfgs;  ; std::vector< std::span< const double > > _ctx;  ; std::span< double > _currentOutput;  ; bool _enableVectorBuffers = false;  ; OffsetMode _offsetMode = OffsetMode::WithoutOffset;  . Friends; class Evaluator;  . #include <RooFit/EvalContext.h>; Member Enumeration Documentation. ◆ OffsetMode. enum class RooFit::EvalContext::OffsetMode. strong . EnumeratorWithoutOffset ; WithOffset ; OnlyOffset . Definition at line 86 of file EvalContext.h. Member Function Documentation. ◆ at() [1/2]. std::span< const double > RooFit::EvalContext::at ; (; RooAbsArg const * ; arg, . RooAbsArg const * ; caller = nullptr . ). Definition at line 35 of file EvalContext.cxx. ◆ at() [2/2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFit_1_1EvalContext.html:75,Guid,Guide,75,doc/master/classRooFit_1_1EvalContext.html,https://root.cern,https://root.cern/doc/master/classRooFit_1_1EvalContext.html,1,['Guid'],['Guide']
Usability,". ROOT: RooFit::MultiProcess::HeatmapAnalyzer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; RooFit::MultiProcess::HeatmapAnalyzer Class Reference. ; Reads and processes logfiles produced by RooFit::MultiProcess::ProcessTimer. ; RooFit::MultiProcess::ProcessTimer records timings of multiple processes simultaneously and allows for these timings to be written out in json format, one for each process. This class, the HeatmapAnalyzer, can read these json files and produce a heatmap from them with partial derivatives on the y-axis, likelihood evaluations on the x-axis, and time expenditures on the z-axis. This class also contains some convenience functions for inspecting these log files.; Note that this class requires the logfiles to contain three specific keys in the json:; master:gradient containing an array of gradient timestamps; *eval_task*<task_number> containing an array of task evaluation timestamps.; *eval_partition* containing an array of partition evaluation timestamps . Definition at line 34 of file HeatmapAnalyzer.h. Public Member Functions;  HeatmapAnalyzer (std::string const &logs_dir);  HeatmapAnalyzer Constructor. ;  ;  ~HeatmapAnalyzer ();  ; std::unique_ptr< TH2I > analyze (int analyzed_gradient);  This method is the main functionality in this class. ;  ; std::vector< std::string > const getMetadata ();  ; std::vector< std::string > const getPartitionNames ();  ; std::vector< std::string > const getTaskNames ();  . Private Attributes; std::vector< std::string > eval_partitions_names_;  ; std::unique_ptr< Detail::HeatmapAnalyzerJsonData > jsonData_;  ; TH2I matrix_;  ; std::vector< std::string > tasks_names_;  . #include <RooFit/MultiProcess/HeatmapAnalyzer.h>; Constructor & Destructor Documentation. ◆ HeatmapAnalyzer(). RooFit::MultiProcess::HeatmapAnalyzer::HeatmapAnalyzer ; (; std::string const & ; logs_dir).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFit_1_1MultiProcess_1_1HeatmapAnalyzer.html:93,Guid,Guide,93,doc/master/classRooFit_1_1MultiProcess_1_1HeatmapAnalyzer.html,https://root.cern,https://root.cern/doc/master/classRooFit_1_1MultiProcess_1_1HeatmapAnalyzer.html,1,['Guid'],['Guide']
Usability,". ROOT: RooFit::TestStatistics::RooRealL Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooFit::TestStatistics::RooRealL Class ReferenceRooFit » RooFit Core. ; RooAbsReal that wraps RooAbsL likelihoods for use in RooFit outside of the RooMinimizer context. ; This class provides a simple wrapper to evaluate RooAbsL derived likelihood objects like a regular RooFit real value. Whereas the RooAbsL objects are meant to be used within the context of minimization, RooRealL can be used in any RooFit context, like plotting. The value can be accessed through getVal(), like with other RooFit real variables. ; Definition at line 28 of file RooRealL.h. Public Member Functions;  RooRealL (const char *name, const char *title, std::shared_ptr< RooAbsL > likelihood);  ;  RooRealL (const RooRealL &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; double defaultErrorLevel () const override;  ; double getCarry () const;  ; std::shared_ptr< RooAbsL > const & getRooAbsL ();  ; double globalNormalization () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFit_1_1TestStatistics_1_1RooRealL.html:88,Guid,Guide,88,doc/master/classRooFit_1_1TestStatistics_1_1RooRealL.html,https://root.cern,https://root.cern/doc/master/classRooFit_1_1TestStatistics_1_1RooRealL.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,. ROOT: RooFit::UniqueId< Class > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; RooFit::UniqueId< Class > Struct Template Reference. ; template<class Class>; struct RooFit::UniqueId< Class >A UniqueId can be added as a class member to enhance any class with a unique identifier for each instantiated object. ; Example: class MyClass {; ; public:; /// Return unique ID by reference.; /// Please always use the name `uniqueId` for the getter.; UniqueId<MyClass> const& uniqueId() const { return _uniqueId; }; ; private:; const UniqueId<MyClass> _uniqueId; //! should be non-persistent; ; };; RooFit::UniqueIdA UniqueId can be added as a class member to enhance any class with a unique identifier for each inst...Definition UniqueId.h:39. Definition at line 39 of file UniqueId.h. Public Types; using Value_t = unsigned long;  . Public Member Functions;  UniqueId ();  Create a new UniqueId with the next value from the static counter. ;  ;  UniqueId (const UniqueId &)=delete;  ;  UniqueId (UniqueId &&)=delete;  ;  operator Value_t () const;  ; bool operator< (UniqueId const &other) const;  ; UniqueId & operator= (const UniqueId &)=delete;  ; UniqueId & operator= (UniqueId &&)=delete;  ; bool operator== (UniqueId const &other) const;  ; constexpr Value_t value () const;  Return numerical value of ID. ;  . Static Public Member Functions; static UniqueId const & nullid ();  Get an ID that is less than the ID of any object (similar to nullptr). ;  . Static Public Attributes; static constexpr Value_t nullval = 0UL;  The value of the nullid. ;  . Private Member Functions;  UniqueId (Value_t val);  . Private Attributes; Value_t _val;  Numerical value of the ID. ;  . Static Private Attributes; static std:,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structRooFit_1_1UniqueId.html:91,Guid,Guide,91,doc/master/structRooFit_1_1UniqueId.html,https://root.cern,https://root.cern/doc/master/structRooFit_1_1UniqueId.html,1,['Guid'],['Guide']
Usability,". ROOT: RooFitResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooFitResult Class Reference. ; RooFitResult is a container class to hold the input and output of a PDF fit to a dataset. ; It contains:. Values of all constant parameters; Initial and final values of floating parameters with error; Correlation matrix and global correlation coefficients; NLL and EDM at minimum. No references to the fitted PDF and dataset are stored ; Definition at line 40 of file RooFitResult.h. Public Member Functions;  RooFitResult (const char *name=nullptr, const char *title=nullptr);  Constructor with name and title. ;  ;  RooFitResult (const RooFitResult &other);  Copy constructor. ;  ;  ~RooFitResult () override;  Destructor. ;  ; virtual TObject * clone () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; TMatrixDSym conditionalCovarianceMatrix (const RooArgList &params) const;  Return a reduced covariance matrix, which is calculated as. ;  ; const RooArgList & constPars () const;  Return list of constant parameters. ;  ; const RooArgList * correlation (const char *parname) const;  Return the set of correlation coefficients of parameter 'par' with all other floating parameters. ;  ; double correlation (const char *parname1, const char *parname2) const;  Return the correlation between parameters 'par1' and 'par2'. ;  ; const RooArgList * correlation (const RooAbsArg &par) const;  Return pointer to list of correlations of all parameters with par. ;  ; double correlation (const RooAbsArg &par1, const RooAbsArg &par2) const;  Return correlation between par1 and par2. ;  ; TH2 * correlationHist (const char *name=""correlation_matrix"") const;  Return TH2D of correlation matrix. ;  ; const TMatri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFitResult.html:68,Guid,Guide,68,doc/master/classRooFitResult.html,https://root.cern,https://root.cern/doc/master/classRooFitResult.html,1,['Guid'],['Guide']
Usability,". ROOT: RooFixedProdPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; RooFixedProdPdf Class Reference. ; A RooProdPdf with a fixed normalization set can be replaced by this class. ; Its purpose is to provide the right client-server interface for the evaluation of RooProdPdf cache elements that were created for a given normalization set. ; Definition at line 2318 of file RooProdPdf.cxx. Public Member Functions;  RooFixedProdPdf (const RooFixedProdPdf &other, const char *name=nullptr);  ;  RooFixedProdPdf (std::unique_ptr< RooProdPdf > &&prodPdf, RooArgSet const &normSet);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; bool canComputeBatchWithCuda () const override;  ; TObject * clone (const char *newname) const override;  ; std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; void doEval (RooFit::EvalContext &ctx) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; double expectedEvents (const RooArgSet *) const override;  Return expected number of events to be used in calculation of extended likelihood. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  ; Int_t getAnalyticalIntegral (RooArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFixedProdPdf.html:71,Guid,Guide,71,doc/master/classRooFixedProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooFixedProdPdf.html,1,['Guid'],['Guide']
Usability,". ROOT: RooFoamGenerator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooFoamGenerator Class ReferenceRooFit » RooFit Core. ; Generic Monte Carlo toy generator that implement the TFOAM sampling technique on any positively valued function. ; The RooFoamGenerator generator is used by the various generator context classes to take care of generation of observables for which p.d.fs do not define internal methods.; The foam generator reacts to the following config options:; nCell[123N]D; nSample; chatLevel Access those using: myPdf->specialGeneratorConfig()->getConfigSection(""RooFoamGenerator"").setRealValue(""nSample"",1e4);. See alsorf902_numgenconfig.C ; Definition at line 32 of file RooFoamGenerator.h. Public Member Functions;  RooFoamGenerator ()=default;  ;  RooFoamGenerator (const RooAbsReal &func, const RooArgSet &genVars, const RooNumGenConfig &config, bool verbose=false, const RooAbsReal *maxFuncVal=nullptr);  ; bool canSampleCategories () const override;  ; bool canSampleConditional () const override;  ; RooAbsNumGenerator * clone (const RooAbsReal &func, const RooArgSet &genVars, const RooArgSet &, const RooNumGenConfig &config, bool verbose=false, const RooAbsReal *maxFuncVal=nullptr) const override;  ; TFoam & engine ();  ; const RooArgSet * generateEvent (UInt_t remaining, double &resampleRatio) override;  are we actually generating anything? (the cache always contains at least our function value) ;  ; std::string const & generatorName () const override;  Return unique name of generator implementation. ;  ;  Public Member Functions inherited from RooAbsNumGenerator;  RooAbsNumGenerator ();  ;  RooAbsNumGenerator (const RooAbsReal &func, const RooArgSet &genVars, bool verbose=false, const RooAbsReal *maxFuncVal=nullptr);  Initialize an accept-reject generator for the s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFoamGenerator.html:72,Guid,Guide,72,doc/master/classRooFoamGenerator.html,https://root.cern,https://root.cern/doc/master/classRooFoamGenerator.html,1,['Guid'],['Guide']
Usability,". ROOT: RooFormula Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; RooFormula Class ReferenceRooFit » RooFit Core. ; Internally uses ROOT's TFormula to compute user-defined expressions of RooAbsArgs. ; The string expression can be any valid TFormula expression referring to the listed servers either by name or by their ordinal list position. These three are forms equivalent: RooFormula(""formula"", ""x*y"", RooArgList(x,y)) or; RooFormula(""formula"", ""@0*@1"", RooArgList(x,y)); RooFormula(""formula"", ""x[0]*x[1]"", RooArgList(x,y)); RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.Definition RooArgList.h:22; RooFormulaInternally uses ROOT's TFormula to compute user-defined expressions of RooAbsArgs.Definition RooFormula.h:27; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; Note that x[i] is an expression reserved for TFormula. If a variable with the name x is given, the RooFormula interprets x as a variable name, but x[i] as an index in the list of variables. Category expressions; State information of RooAbsCategories can be accessed using the '::' operator, i.e.*, tagCat::Kaon will resolve to the numerical value of the Kaon state of the RooAbsCategory object named tagCat.; A formula to switch between lepton categories could look like this: RooFormula(""formulaWithCat"",; ""x * (leptonMulti == leptonMulti::one) + y * (leptonMulti == leptonMulti::two)"",; RooArgList(x, y, leptonMulti));. Debugging a formula that won't compile; When the formula is preprocessed, RooFit can print information in the debug stream. These can be retrieved by activating the RooFit::MsgLevel RooFit::DEBUG and the RooFit::MsgTopic RooFit::InputArguments. Check the tutorial rf506_msgservice.C for details. ; Definition at line 27 of file RooFormula.h. Public Member Functions;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFormula.html:66,Guid,Guide,66,doc/master/classRooFormula.html,https://root.cern,https://root.cern/doc/master/classRooFormula.html,1,['Guid'],['Guide']
Usability,". ROOT: RooFormulaVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; RooFormulaVar Class Reference. ; A RooFormulaVar is a generic implementation of a real-valued object, which takes a RooArgList of servers and a C++ expression string defining how its value should be calculated from the given list of servers. ; RooFormulaVar uses a RooFormula object to perform the expression evaluation.; If RooAbsPdf objects are supplied to RooFormulaVar as servers, their raw (unnormalized) values will be evaluated. Use RooGenericPdf, which constructs generic PDF functions, to access their properly normalized values.; The string expression can be any valid TFormula expression referring to the listed servers either by name or by their ordinal list position. These three are equivalent: RooFormulaVar(""gen"", ""x*y"", RooArgList(x,y)) // reference by name; RooFormulaVar(""gen"", ""@0*@1"", RooArgList(x,y)) // reference by ordinal with @; RooFormulaVar(""gen"", ""x[0]*x[1]"", RooArgList(x,y)) // TFormula-builtin reference by ordinal; RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.Definition RooArgList.h:22; RooFormulaVar::RooFormulaVarRooFormulaVar()Definition RooFormulaVar.cxx:65; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; Note that x[i] is an expression reserved for TFormula. All variable references are automatically converted to the TFormula-native format. If a variable with the name x is given, the RooFormula interprets x[i] as a list position, but x without brackets as the name of a RooFit object.; The last two versions, while slightly less readable, are more versatile because the names of the arguments are not hard coded. ; Definition at line 30 of file RooFormulaVar.h. Public Member Functi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFormulaVar.html:69,Guid,Guide,69,doc/master/classRooFormulaVar.html,https://root.cern,https://root.cern/doc/master/classRooFormulaVar.html,1,['Guid'],['Guide']
Usability,". ROOT: RooFracRemainder Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooFracRemainder Class ReferenceRooFit » RooFit Core. ; Calculates the remainder fraction of a sum of RooAbsReal fraction, i.e (1 - sum_i a_i). ; This class is used by RooSimWSTool to as specialization of the remainder fraction term of a parameter with a constrained split ; Definition at line 25 of file RooFracRemainder.h. Public Member Functions;  RooFracRemainder ();  Default constructor. ;  ;  RooFracRemainder (const char *name, const char *title, const RooArgSet &sumSet);  Constructor with given set of input fractions. All arguments in sumSet must be of type RooAbsReal. ;  ;  RooFracRemainder (const RooFracRemainder &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Im",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFracRemainder.html:72,Guid,Guide,72,doc/master/classRooFracRemainder.html,https://root.cern,https://root.cern/doc/master/classRooFracRemainder.html,1,['Guid'],['Guide']
Usability,". ROOT: RooFunctor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooFunctor Class ReferenceRooFit » RooFit Core. ; Lightweight interface adaptor that exports a RooAbsPdf as a functor. ; Definition at line 25 of file RooFunctor.h. Public Member Functions;  RooFunctor (const RooAbsFunc &func);  ;  RooFunctor (const RooAbsReal &func, const RooArgList &observables, const RooArgList &parameters);  Store list of observables. ;  ;  RooFunctor (const RooAbsReal &func, const RooArgList &observables, const RooArgList &parameters, const RooArgSet &nset);  Store normalization set. ;  ;  RooFunctor (const RooFunctor &);  ; virtual ~RooFunctor ();  ; RooAbsFunc & binding ();  ; RooAbsFunc const & binding () const;  ; double eval (const double *) const;  ; double eval (const double *, const double *) const;  ; double eval (double) const;  ; virtual TClass * IsA () const;  ; Int_t nObs () const;  ; Int_t nPar () const;  ; double operator() (const double *x) const;  ; double operator() (const double *x, const double *p) const;  ; double operator() (double x) const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; RooAbsFunc * _binding = nullptr;  Function binding. ;  ; Int_t _nobs;  ! Number of observables ; ;  ; Int_t _npar = 0;  ! Number of parameters ; ;  ; RooArgSet _nset;  Normalization observables. ;  ; std::unique_ptr< RooAbsFunc > _ownedBinding;  Do we own the binding function. ;  ; std::vector< double > _x;  ! Transfer array ; ;  . #include <RooFunctor.h>; Constructor & Destructor Documentation. ◆ RooFunctor() [1/4]. RooFunctor::RooFun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctor.html:66,Guid,Guide,66,doc/master/classRooFunctor.html,https://root.cern,https://root.cern/doc/master/classRooFunctor.html,1,['Guid'],['Guide']
Usability,". ROOT: RooFunctor1DBinding Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooFunctor1DBinding Class ReferenceRooFit » RooFit. ; RooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions. ; Instances of function binding classes are fully functional RooFit function objects with one exception: if the bound function is not a standard TMath or MathMore function the class cannot be persisted in a RooWorkspace without registering the function pointer first using RooCFunction1Binding<T1,T2>::register(). ; Definition at line 33 of file RooFunctor1DBinding.h. Public Member Functions;  RooFunctor1DBinding ();  ;  RooFunctor1DBinding (const char *name, const char *title, const ROOT::Math::IBaseFunctionOneDim &ftor, RooAbsReal &var);  ;  RooFunctor1DBinding (const RooFunctor1DBinding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destruct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctor1DBinding.html:75,Guid,Guide,75,doc/master/classRooFunctor1DBinding.html,https://root.cern,https://root.cern/doc/master/classRooFunctor1DBinding.html,1,['Guid'],['Guide']
Usability,". ROOT: RooFunctor1DPdfBinding Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooFunctor1DPdfBinding Class ReferenceRooFit » RooFit. . Definition at line 58 of file RooFunctor1DBinding.h. Public Member Functions;  RooFunctor1DPdfBinding ();  ;  RooFunctor1DPdfBinding (const char *name, const char *title, const ROOT::Math::IBaseFunctionOneDim &ftor, RooAbsReal &vars);  ;  RooFunctor1DPdfBinding (const RooFunctor1DPdfBinding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (const RooArgSet &vars, bool verbose=false) const;  Return a binned generator context. ;  ; bool canBeExtended () const;  If true, PDF can p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctor1DPdfBinding.html:78,Guid,Guide,78,doc/master/classRooFunctor1DPdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooFunctor1DPdfBinding.html,1,['Guid'],['Guide']
Usability,". ROOT: RooFunctorBinding Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooFunctorBinding Class ReferenceRooFit » RooFit. ; RooFunctorBinding makes math functions from ROOT usable in RooFit. ; It takes a ROOT::Math::IBaseFunctionMultiDim, and binds the variables of this function to the RooFit variables passed in the constructor.; Instances of function binding classes are fully functional RooFit function objects with one exception: if the bound function is not a standard TMath or MathMore function the class cannot be persisted in a RooWorkspace without registering the function pointer first using RooCFunction1Binding<T1,T2>::register(). ; Definition at line 31 of file RooFunctorBinding.h. Public Member Functions;  RooFunctorBinding ()=default;  ;  RooFunctorBinding (const char *name, const char *title, const ROOT::Math::IBaseFunctionMultiDim &ftor, const RooArgList &vars);  Create a RooFit function that makes ftor usable in RooFit. ;  ;  RooFunctorBinding (const RooFunctorBinding &other, const char *name=nullptr);  ;  ~RooFunctorBinding () override;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctorBinding.html:73,Guid,Guide,73,doc/master/classRooFunctorBinding.html,https://root.cern,https://root.cern/doc/master/classRooFunctorBinding.html,2,"['Guid', 'usab']","['Guide', 'usable']"
Usability,". ROOT: RooFunctorPdfBinding Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooFunctorPdfBinding Class ReferenceRooFit » RooFit. ; RooFunctorPdfBinding makes math functions from ROOT usable as PDFs in RooFit. ; It takes a ROOT::Math::IBaseFunctionMultiDim, and binds the variables of this function to the RooFit variables passed in the constructor. When the PDF is evaluated, the bound function is evaluated, and also integrated numerically to normalise it to unity over the range of its observables.; Instances of function binding classes are fully functional RooFit function objects with one exception: if the bound function is not a standard TMath or MathMore function the class cannot be persisted in a RooWorkspace without registering the function pointer first using RooCFunction1Binding<T1,T2>::register(). ; Definition at line 56 of file RooFunctorBinding.h. Public Member Functions;  RooFunctorPdfBinding ()=default;  ;  RooFunctorPdfBinding (const char *name, const char *title, const ROOT::Math::IBaseFunctionMultiDim &ftor, const RooArgList &vars);  Create a RooFit PDF that makes ftor usable as a PDF in RooFit. ;  ;  RooFunctorPdfBinding (const RooFunctorPdfBinding &other, const char *name=nullptr);  ;  ~RooFunctorPdfBinding () override;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctorPdfBinding.html:76,Guid,Guide,76,doc/master/classRooFunctorPdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooFunctorPdfBinding.html,2,"['Guid', 'usab']","['Guide', 'usable']"
Usability,". ROOT: RooGExpModel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; RooGExpModel Class ReferenceRooFit » RooFit. ; The RooGExpModel is a RooResolutionModel implementation that models a resolution function that is the convolution of a Gaussian with a one-sided exponential. ; Such objects can be used for analytical convolutions with classes inheriting from RooAbsAnaConvPdf. ; \[; \mathrm{GExp} = \exp \left( -\frac{1}{2} \left(\frac{x-\mu}{\sigma} \right)^2 \right)^2; \otimes \exp\left( -\frac{x}{\tau} \right); \]. Definition at line 25 of file RooGExpModel.h. Public Types; enum  Type { Normal; , Flipped; };  ;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGExpModel.html:68,Guid,Guide,68,doc/master/classRooGExpModel.html,https://root.cern,https://root.cern/doc/master/classRooGExpModel.html,1,['Guid'],['Guide']
Usability,". ROOT: RooGamma Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooGamma Class ReferenceRooFit » RooFit. ; Implementation of the Gamma PDF for RooFit/RooStats. . \[; f(x) = \frac{(x-\mu)^{\gamma-1} \cdot \exp^{(-(x-mu) / \beta}}{\Gamma(\gamma) \cdot \beta^{\gamma}}; \]. defined for \( x \geq 0 \) if \( \mu = 0 \); Notes from Kyle Cranmer:; Wikipedia and several sources refer to the Gamma distribution as. \[; G(\mu,\alpha,\beta) = \beta^\alpha \mu^{(\alpha-1)} \frac{e^{(-\beta \mu)}}{\Gamma(\alpha)}; \]. Below is the correspondence:. Wikipedia This Implementation . \( \alpha \) \( \gamma \) . \( \beta \) \( \frac{1}{\beta} \) . \( \mu \) x . 0 \( \mu \) . Note, that for a model Pois(N|mu), a uniform prior on mu, and a measurement N the posterior is in the Wikipedia parameterization Gamma(mu, alpha=N+1, beta=1) thus for this implementation it is:; RooGamma(_x=mu,_gamma=N+1,_beta=1,_mu=0); Also note, that in this case it is equivalent to RooPoison(N,mu) and treating the function as a PDF in mu. ; Definition at line 20 of file RooGamma.h. Public Member Functions;  RooGamma ();  ;  RooGamma (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_gamma, RooAbsReal &_beta, RooAbsReal &_mu);  ;  RooGamma (const RooGamma &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; void generateEvent (Int_t code) override;  algorithm adapted from c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGamma.html:64,Guid,Guide,64,doc/master/classRooGamma.html,https://root.cern,https://root.cern/doc/master/classRooGamma.html,1,['Guid'],['Guide']
Usability,". ROOT: RooGaussModel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Private Attributes |; List of all members ; RooGaussModel Class ReferenceRooFit » RooFit. ; Class RooGaussModel implements a RooResolutionModel that models a Gaussian distribution. ; Object of class RooGaussModel can be used for analytical convolutions with classes inheriting from RooAbsAnaConvPdf ; Definition at line 25 of file RooGaussModel.h. Public Member Functions;  RooGaussModel ()=default;  ;  RooGaussModel (const char *name, const char *title, RooAbsRealLValue &x, RooAbsReal &mean, RooAbsReal &sigma);  ;  RooGaussModel (const char *name, const char *title, RooAbsRealLValue &x, RooAbsReal &mean, RooAbsReal &sigma, RooAbsReal &meanSF, RooAbsReal &sigmaSF);  ;  RooGaussModel (const char *name, const char *title, RooAbsRealLValue &x, RooAbsReal &mean, RooAbsReal &sigma, RooAbsReal &msSF);  ;  RooGaussModel (const RooGaussModel &other, const char *name=nullptr);  ; void advertiseAymptoticIntegral (bool flag);  ; void advertiseFlatScaleFactorIntegral (bool flag);  ; double analyticalIntegral (Int_t code, const char *rangeName) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; Int_t basisCode (const char *name) const override;  ; bool canComputeBatchWithCuda () const override;  ; TObject * clone (const char *newname) const override;  ; void doEval (RooFit::EvalContext &) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; void generateEvent (Int_t code) override;  Interface for generation of an event using the algorithm corresponding to the specified code. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGaussModel.html:69,Guid,Guide,69,doc/master/classRooGaussModel.html,https://root.cern,https://root.cern/doc/master/classRooGaussModel.html,1,['Guid'],['Guide']
Usability,". ROOT: RooGaussian Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooGaussian Class ReferenceRooFit » RooFit. ; Plain Gaussian p.d.f. ; Definition at line 24 of file RooGaussian.h. Public Member Functions;  RooGaussian ();  ;  RooGaussian (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_mean, RooAbsReal &_sigma);  ;  RooGaussian (const char *name, const char *title, RooAbsReal::Ref _x, RooAbsReal::Ref _mean, RooAbsReal::Ref _sigma);  ;  RooGaussian (const RooGaussian &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; void generateEvent (Int_t code) override;  Interface for generation of an event using the algorithm corresponding to the specified code. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; RooAbsReal const & getMean () const;  Get the mean parameter. ;  ; RooAbsReal const & getSigma () const;  Get the sigma parameter. ;  ; RooAbsReal const & getX () const;  Get the x var",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGaussian.html:67,Guid,Guide,67,doc/master/classRooGaussian.html,https://root.cern,https://root.cern/doc/master/classRooGaussian.html,1,['Guid'],['Guide']
Usability,". ROOT: RooGenContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooGenContext Class ReferenceRooFit » RooFit Core. ; Implements a universal generator context for all RooAbsPdf classes that do not have or need a specialized generator context. ; This generator context queries the input p.d.f which observables it can generate internally and delegates generation of those observables to the p.d.f if it deems that safe. The other observables are generated use a RooAcceptReject sampling technique. ; Definition at line 29 of file RooGenContext.h. Public Member Functions;  RooGenContext (const RooAbsPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, const RooArgSet *forceDirect=nullptr);  Initialize a new context for generating events with the specified variables, using the specified PDF model. ;  ;  ~RooGenContext () override;  ; void attach (const RooArgSet &params) override;  Attach the cloned model to the event buffer we will be filling. ;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Printing interface. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsGenContext;  RooAbsGenContext (const RooAbsPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents when printing. ;  ; StyleOption defaultPrintStyle (Option_t *opt) const override;  Define default print style. ;  ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGenContext.html:69,Guid,Guide,69,doc/master/classRooGenContext.html,https://root.cern,https://root.cern/doc/master/classRooGenContext.html,1,['Guid'],['Guide']
Usability,". ROOT: RooGenFitStudy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooGenFitStudy Class ReferenceRooFit » RooFit Core. ; Abstract base class for RooStudyManager modules. . PyROOT; Some member functions of RooGenFitStudy that take a RooCmdArg as argument also support keyword arguments. So far, this applies to RooGenFitStudy::setGenConfig. . Definition at line 35 of file RooGenFitStudy.h. Public Member Functions;  RooGenFitStudy (const char *name=nullptr, const char *title=nullptr);  Constructor. ;  ;  RooGenFitStudy (const RooGenFitStudy &other);  Copy constructor. ;  ; bool attach (RooWorkspace &w) override;  Function called after insertion into workspace. ;  ; RooAbsStudy * clone (const char *newname="""") const override;  ; bool execute () override;  Execute one study iteration. ;  ; bool finalize () override;  Finalization of study. ;  ; bool initialize () override;  One-time initialization of study. ;  ; TClass * IsA () const override;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void setFitConfig (const char *pdfName, const char *obsName, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={});  ; void setGenConfig (const char *pdfName, const char *obsName, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={});  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsStudy;  RooAbsStudy ()=default;  ;  RooAbsStudy (const char *name, const char *title);  Constructor. ;  ;  RooAbsStudy (const RooAbsStudy &other);  Copy constructor. ;  ;  ~RooAbsStudy () override;  Destructor. ;  ; TObject * Clone (const char *newname="""") con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGenFitStudy.html:70,Guid,Guide,70,doc/master/classRooGenFitStudy.html,https://root.cern,https://root.cern/doc/master/classRooGenFitStudy.html,1,['Guid'],['Guide']
Usability,". ROOT: RooGenericPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooGenericPdf Class ReferenceRooFit » RooFit Core. ; Implementation of a probability density function that takes a RooArgList of servers and a C++ expression string defining how its value should be calculated from the given list of servers. ; A fully numerical integration is automatically performed to normalize the given expression. RooGenericPdf uses a RooFormula object to perform the expression evaluation.; The string expression can be any valid TFormula expression referring to the listed servers either by name or by their ordinal list position. These three are equivalent: RooFormulaVar(""gen"", ""x*y"", RooArgList(x,y)) // reference by name; RooFormulaVar(""gen"", ""@0*@1"", RooArgList(x,y)) // reference by ordinal with @; RooFormulaVar(""gen"", ""x[0]*x[1]"", RooArgList(x,y)) // TFormula-builtin reference by ordinal; RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.Definition RooArgList.h:22; RooFormulaVarA RooFormulaVar is a generic implementation of a real-valued object, which takes a RooArgList of serv...Definition RooFormulaVar.h:30; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; Note that x[i] is an expression reserved for TFormula. All variable references are automatically converted to the TFormula-native format. If a variable with the name x is given, the RooFormula interprets x[i] as a list position, but x without brackets as the name of a RooFit object.; The last two versions, while slightly less readable, are more versatile because the names of the arguments are not hard coded. ; Definition at line 25 of file RooGenericPdf.h. Public Member Functions;  RooGenericPdf ();  ;  RooGenericPdf (const char *name, const char *title, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGenericPdf.html:69,Guid,Guide,69,doc/master/classRooGenericPdf.html,https://root.cern,https://root.cern/doc/master/classRooGenericPdf.html,1,['Guid'],['Guide']
Usability,". ROOT: RooHelpers::WrapIntoTObject< T > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; RooHelpers::WrapIntoTObject< T > Struct Template Reference. ; template<typename T>; struct RooHelpers::WrapIntoTObject< T >Wrap an object into a TObject. Sometimes needed to avoid reinterpret_cast or enable RTTI. ; Definition at line 57 of file RooHelpers.h. Public Member Functions;  WrapIntoTObject (T &obj);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structRooHelpers_1_1WrapIntoTObject.html:98,Guid,Guide,98,doc/master/structRooHelpers_1_1WrapIntoTObject.html,https://root.cern,https://root.cern/doc/master/structRooHelpers_1_1WrapIntoTObject.html,1,['Guid'],['Guide']
Usability,". ROOT: RooHist Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooHist Class ReferenceRooFit » RooFit Core. ; Graphical representation of binned data based on the TGraphAsymmErrors class. ; Error bars are calculated using either Poisson or Binomial statistics. A RooHist is used to represent histograms in a RooPlot. ; Definition at line 29 of file RooHist.h. Public Member Functions;  RooHist ();  ;  RooHist (const RooAbsReal &f, RooAbsRealLValue &x, double xErrorFrac=1.0, double scaleFactor=1.0, const RooArgSet *normVars=nullptr, const RooFitResult *fr=nullptr);  Create histogram from a pdf or function. ;  ;  RooHist (const RooHist &hist1, const RooHist &hist2, double wgt1=1.0, double wgt2=1.0, RooAbsData::ErrorType etype=RooAbsData::Poisson, double xErrorFrac=1.0);  Create histogram as sum of two existing histograms. ;  ;  RooHist (const TH1 &data, double nominalBinWidth=0, double nSigma=1, RooAbsData::ErrorType=RooAbsData::Poisson, double xErrorFrac=1.0, bool correctForBinWidth=true, double scaleFactor=1.);  Create a histogram from the contents of the specified TH1 object which may have fixed or variable bin widths. ;  ;  RooHist (const TH1 &data1, const TH1 &data2, double nominalBinWidth=0, double nSigma=1, RooAbsData::ErrorType=RooAbsData::Poisson, double xErrorFrac=1.0, bool efficiency=false, double scaleFactor=1.0);  Create a histogram from the asymmetry between the specified TH1 objects which may have fixed or variable bin widths, but which must both have the same binning. ;  ;  RooHist (double nominalBinWidth, double nSigma=1, double xErrorFrac=1.0, double scaleFactor=1.0);  Create an empty histogram that can be filled with the addBin() and addAsymmetryBin() methods. ;  ; void addAsymmetryBin (Axis_t binCenter, Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHist.html:63,Guid,Guide,63,doc/master/classRooHist.html,https://root.cern,https://root.cern/doc/master/classRooHist.html,1,['Guid'],['Guide']
Usability,". ROOT: RooHistConstraint Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooHistConstraint Class ReferenceRooFit » RooFit. ; The RooHistConstraint implements constraint terms for a binned PDF with statistical uncertainties. ; Following the Barlow-Beeston method, it adds Poisson constraints for each bin that constrain the statistical uncertainty of the template histogram.; It can therefore be used to estimate the Monte Carlo uncertainty of a fit.; Check also the tutorial rf709_BarlowBeeston.C ; Definition at line 17 of file RooHistConstraint.h. Public Member Functions;  RooHistConstraint ();  ;  RooHistConstraint (const char *name, const char *title, const RooArgSet &phfSet, int threshold=1000000);  Create a new RooHistConstraint. ;  ;  RooHistConstraint (const RooHistConstraint &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; double getLogVal (const RooArgSet *set=nullptr) const override;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; TClass * IsA () const override;  ; bool selfNormalized () const override;  It makes only sense to use the RooHistConstraint when normalized over the set of all gammas, in which case it is self-normalized because the used TMath::Poisson function is normalized. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistConstraint.html:73,Guid,Guide,73,doc/master/classRooHistConstraint.html,https://root.cern,https://root.cern/doc/master/classRooHistConstraint.html,1,['Guid'],['Guide']
Usability,". ROOT: RooHistFunc Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; RooHistFunc Class ReferenceRooFit » RooFit Core. ; A real-valued function sampled from a multidimensional histogram. ; The histogram can have an arbitrary number of real or discrete dimensions and may have negative values. ; Definition at line 31 of file RooHistFunc.h. Public Member Functions;  RooHistFunc ();  ;  RooHistFunc (const char *name, const char *title, const RooArgList &funcObs, const RooArgList &histObs, const RooDataHist &dhist, Int_t intOrder=0);  Constructor from a RooDataHist. ;  ;  RooHistFunc (const char *name, const char *title, const RooArgList &pdfObs, const RooArgList &histObs, std::unique_ptr< RooDataHist > dhist, int intOrder=0);  ;  RooHistFunc (const char *name, const char *title, const RooArgSet &vars, const RooDataHist &dhist, Int_t intOrder=0);  Constructor from a RooDataHist. ;  ;  RooHistFunc (const char *name, const char *title, const RooArgSet &vars, std::unique_ptr< RooDataHist > dhist, int intOrder=0);  ;  RooHistFunc (const RooHistFunc &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooHistFunc () override;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Return integral identified by 'code'. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Return sampling hint for making curves of (projections) of this function as the recursive division strategy of RooCurve cannot deal efficiently with the vertical lines that occur in a non-interpolated histogram. ;  ; std::string buildCallToAnalyticIntegral (int code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical inte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistFunc.html:67,Guid,Guide,67,doc/master/classRooHistFunc.html,https://root.cern,https://root.cern/doc/master/classRooHistFunc.html,1,['Guid'],['Guide']
Usability,". ROOT: RooHistPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Friends |; List of all members ; RooHistPdf Class ReferenceRooFit » RooFit Core. ; A propability density function sampled from a multidimensional histogram. ; The histogram distribution is explicitly normalized by RooHistPdf and can have an arbitrary number of real or discrete dimensions. ; Definition at line 30 of file RooHistPdf.h. Public Member Functions;  RooHistPdf ();  ;  RooHistPdf (const char *name, const char *title, const RooArgList &pdfObs, const RooArgList &histObs, const RooDataHist &dhist, Int_t intOrder=0);  Constructor from a RooDataHist. ;  ;  RooHistPdf (const char *name, const char *title, const RooArgList &pdfObs, const RooArgList &histObs, std::unique_ptr< RooDataHist > dhist, int intOrder=0);  ;  RooHistPdf (const char *name, const char *title, const RooArgSet &vars, const RooDataHist &dhist, Int_t intOrder=0);  Constructor from a RooDataHist. ;  ;  RooHistPdf (const char *name, const char *title, const RooArgSet &vars, std::unique_ptr< RooDataHist > dhist, int intOrder=0);  ;  RooHistPdf (const RooHistPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Return integral identified by 'code'. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Return sampling hint for making curves of (projections) of this function as the recursive division strategy of RooCurve cannot deal efficiently with the vertical lines that occur in a non-interpolated histogram. ;  ; std::string buildCallToAnalyticIntegral (int code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This functio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistPdf.html:66,Guid,Guide,66,doc/master/classRooHistPdf.html,https://root.cern,https://root.cern/doc/master/classRooHistPdf.html,1,['Guid'],['Guide']
Usability,". ROOT: RooIntegralMorph Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooIntegralMorph Class ReferenceRooFit » RooFit. ; Class RooIntegralMorph is an implementation of the histogram interpolation technique described by Alex Read in 'NIM A 425 (1999) 357-369 'Linear interpolation of histograms' for continuous functions rather than histograms. ; The interpolation method, in short, works as follows. Given a p.d.f f1(x) with c.d.f F1(x) and p.d.f f2(x) with c.d.f F2(x); One finds takes a value 'y' of both c.d.fs and determines the corresponding x values x(1,2) at which F(1,2)(x)==y.; The value of the interpolated p.d.f fbar(x) is then calculated as fbar(alpha*x1+(1-alpha)*x2) = f1(x1)*f2(x2) / ( alpha*f2(x2) + (1-alpha)*f1(x1) ) ;. From a technical point of view class RooIntegralMorph is a p.d.f that takes two input p.d.fs f1(x,p) an f2(x,q) and an interpolation parameter to make a p.d.f fbar(x,p,q,alpha). The shapes f1 and f2 are always taken to be end the end-points of the parameter alpha, regardless of what the those numeric values are.; Since the value of fbar(x) cannot be easily calculated for a given value of x, class RooIntegralMorph is an implementation of RooAbsCachedPdf and calculates the shape of the interpolated p.d.f. fbar(x) for all values of x for a given value of alpha,p,q and caches these values in a histogram (as implemented by RooAbsCachedPdf). The binning granularity of the cache can be controlled by the binning named ""cache"" on the RooRealVar representing the observable x. The fbar sampling algorithm is based on a recursive division mechanism with a built-in precision cutoff: First an initial sampling in 64 equally spaced bins is made. Then the value of fbar is calculated in the center of each gap. If the calculated val",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooIntegralMorph.html:72,Guid,Guide,72,doc/master/classRooIntegralMorph.html,https://root.cern,https://root.cern/doc/master/classRooIntegralMorph.html,1,['Guid'],['Guide']
Usability,". ROOT: RooJeffreysPrior Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; RooJeffreysPrior Class ReferenceRooFit » RooFit. ; Implementation of Jeffrey's prior. ; This class estimates the fisher information matrix by generating a binned Asimov dataset from the supplied PDFs, fitting it, retrieving the covariance matrix and inverting it. It returns the square root of the determinant of this matrix. Numerical integration is used to normalise. Since each integration step requires fits to be run, evaluating complicated PDFs may take long.; Check the tutorial rs302_JeffreysPriorDemo.C for a demonstration with a simple PDF. ; Definition at line 17 of file RooJeffreysPrior.h. Classes; struct  CacheElem;  . Public Member Functions;  RooJeffreysPrior ();  ;  RooJeffreysPrior (const char *name, const char *title, RooAbsPdf &nominal, const RooArgList &paramSet, const RooArgList &obsSet);  Construct a new JeffreysPrior. ;  ;  RooJeffreysPrior (const RooJeffreysPrior &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; const RooArgList & lowList () const;  ; const RooArgList & paramList () const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooJeffreysPrior.html:72,Guid,Guide,72,doc/master/classRooJeffreysPrior.html,https://root.cern,https://root.cern/doc/master/classRooJeffreysPrior.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: RooJohnson Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; RooJohnson Class ReferencefinalRooFit » RooFit. ; Johnson's \( S_{U} \) distribution. ; This PDF results from transforming a normally distributed variable \( x \) to this form: ; \[; z = \gamma + \delta \sinh^{-1}\left( \frac{x - \mu}{\lambda} \right); \]. The resulting PDF is ; \[; \mathrm{PDF}[\mathrm{Johnson}\ S_U] = \frac{\delta}{\lambda\sqrt{2\pi}}; \frac{1}{\sqrt{1 + \left( \frac{x-\mu}{\lambda} \right)^2}}; \;\exp\left[-\frac{1}{2} \left(\gamma + \delta \sinh^{-1}\left(\frac{x-\mu}{\lambda}\right) \right)^2\right].; \]. It is often used to fit a mass difference for charm decays, and therefore the variable \( x \) is called ""mass"" in the implementation. A mass threshold allows to set the PDF to zero to the left of the threshold. References:; Johnson, N. L. (1949). Systems of Frequency Curves Generated by Methods of Translation. Biometrika 36(1/2), 149–176. doi:10.2307/2332539. Definition at line 24 of file RooJohnson.h. Public Member Functions;  RooJohnson ();  ;  RooJohnson (const char *name, const char *title, RooAbsReal &mass, RooAbsReal &mu, RooAbsReal &lambda, RooAbsReal &gamma, RooAbsReal &delta, double massThreshold=-std::numeric_limits< double >::max());  Construct a new Johnson PDF. ;  ;  RooJohnson (const RooJohnson &other, const char *newName=nullptr);  Copy a Johnson PDF. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TObject * clone (const char *newname) const override;  ; void generateEvent (Int_t code) override;  Generate events based on code obtained by getGenerator(). ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooJohnson.html:66,Guid,Guide,66,doc/master/classRooJohnson.html,https://root.cern,https://root.cern/doc/master/classRooJohnson.html,1,['Guid'],['Guide']
Usability,". ROOT: RooKeysPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; RooKeysPdf Class ReferenceRooFit » RooFit. ; Class RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point, each contributing 1/N to the total integral of the pdf. ; If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the local density of events, i.e. narrow for regions with high event density to preserve details and wide for regions with low event density to promote smoothness. The details of the general algorithm are described in the following paper:; Cranmer KS, Kernel Estimation in High-Energy Physics. Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057 ; Definition at line 24 of file RooKeysPdf.h. Public Types; enum  Mirror { ;   NoMirror; , MirrorLeft; , MirrorRight; , MirrorBoth; , ;   MirrorAsymLeft; , MirrorAsymLeftRight; , MirrorAsymRight; , MirrorLeftAsymRight; , ;   MirrorAsymBoth. };  ;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCount",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooKeysPdf.html:66,Guid,Guide,66,doc/master/classRooKeysPdf.html,https://root.cern,https://root.cern/doc/master/classRooKeysPdf.html,1,['Guid'],['Guide']
Usability,". ROOT: RooLagrangianMorphFunc Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; RooLagrangianMorphFunc Class ReferenceRooFit » RooFit. ; Class RooLagrangianMorphing is a implementation of the method of Effective Lagrangian Morphing, described in ATL-PHYS-PUB-2015-047. ; Effective Lagrangian Morphing is a method to construct a continuous signal model in the coupling parameter space. Basic assumption is that shape and cross section of a physical distribution is proportional to it's squared matrix element. The signal model is constructed by a weighted sum over N input distributions. The calculation of the weights is based on Matrix Elements evaluated for the different input scenarios. The number of input files depends on the number of couplings in production and decay vertices, and also whether the decay and production vertices describe the same process or not. ; Definition at line 77 of file RooLagrangianMorphFunc.h. Classes; class  CacheElem;  ; struct  Config;  . Public Types; typedef std::map< const std::string, FlagSet > FlagMap;  ; typedef std::map< const std::string, int > FlagSet;  ; typedef std::map< const std::string, ParamSet > ParamMap;  ; typedef std::map< const std::string, double > ParamSet;  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLagrangianMorphFunc.html:78,Guid,Guide,78,doc/master/classRooLagrangianMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooLagrangianMorphFunc.html,1,['Guid'],['Guide']
Usability,". ROOT: RooLandau Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooLandau Class ReferenceRooFit » RooFit. ; Landau distribution p.d.f. . PDF of the Landau distribution.; Definition at line 24 of file RooLandau.h. Public Member Functions;  RooLandau ();  ;  RooLandau (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_mean, RooAbsReal &_sigma);  ;  RooLandau (const char *name, const char *title, RooAbsReal::Ref _x, RooAbsReal::Ref _mean, RooAbsReal::Ref _sigma);  ;  RooLandau (const RooLandau &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; void generateEvent (Int_t code) override;  Interface for generation of an event using the algorithm corresponding to the specified code. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLandau.html:65,Guid,Guide,65,doc/master/classRooLandau.html,https://root.cern,https://root.cern/doc/master/classRooLandau.html,1,['Guid'],['Guide']
Usability,". ROOT: RooLegacyExpPoly Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooLegacyExpPoly Class ReferenceRooFit » RooFit. ; RooLegacyExpPoly implements a polynomial PDF of the form. . \[ f(x) =; \mathcal{N} \cdot \exp( \sum_{i} a_{i} * x^{i} ) \]. \( \mathcal{N}; \) is a normalisation constant that is automatically calculated when the function is used in computations.; The sum can be truncated at the low end. See the main constructor RooLegacyExpPoly::RooLegacyExpPoly(const char*, const char*, RooAbsReal&, const RooArgList&, int). Definition at line 18 of file RooLegacyExpPoly.h. Public Member Functions;  RooLegacyExpPoly ();  ;  RooLegacyExpPoly (const char *name, const char *title, RooAbsReal &x, const RooArgList &coefList, int lowestOrder=1);  Create a polynomial in the variable x. ;  ;  RooLegacyExpPoly (const RooLegacyExpPoly &other, const char *name=nullptr);  Copy constructor. ;  ; void adjustLimits ();  ; double analyticalIntegral (int code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TObject * clone (const char *newname) const override;  ; RooArgList const & coefList () const;  Get the coefficient list. ;  ; int getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; std::string getFormulaExpression (bool expand) const;  ; double getLogVal (const RooArgSet *nset) const override;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; TClass * IsA () const override;  ; int lowestOrder () const;  Return the order for the first coef",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLegacyExpPoly.html:72,Guid,Guide,72,doc/master/classRooLegacyExpPoly.html,https://root.cern,https://root.cern/doc/master/classRooLegacyExpPoly.html,1,['Guid'],['Guide']
Usability,". ROOT: RooLegendre Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooLegendre Class ReferenceRooFit » RooFit. ; Compute the associated Legendre polynomials using ROOT::Math::assoc_legendre(). ; Since the Legendre polynomials have a value range of [-1, 1], these cannot be implemented as a PDF. They can be used in sums, though, for example using a RooRealSumFunc of RooLegendre plus an offset. ; Definition at line 20 of file RooLegendre.h. Public Member Functions;  RooLegendre ();  ;  RooLegendre (const char *name, const char *title, RooAbsReal &ctheta, int l, int m=0);  TODO: for now, we assume that ctheta has a range [-1,1] should map the ctheta range onto this interval, and adjust integrals... ;  ;  RooLegendre (const char *name, const char *title, RooAbsReal &ctheta, int l1, int m1, int l2, int m2);  ;  RooLegendre (const RooLegendre &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  this was verified to match mathematica for l1 in [0,2], m1 in [0,l1], l2 in [l1,4], m2 in [0,l2] ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; Int_t getMaxVal (const RooArgSet &vars) const override;  Advertise capability to determine maximum value of function for given set of observables. ;  ; TClass * IsA () const override;  ; double maxVal (Int_t code) const override;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLegendre.html:67,Guid,Guide,67,doc/master/classRooLegendre.html,https://root.cern,https://root.cern/doc/master/classRooLegendre.html,1,['Guid'],['Guide']
Usability,". ROOT: RooLinTransBinning Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooLinTransBinning Class ReferenceRooFit » RooFit Core. ; Special binning implementation for RooLinearVar that transforms the binning of the RooLinearVar input variable in the same way that RooLinearVar does. ; Definition at line 22 of file RooLinTransBinning.h. Public Member Functions;  RooLinTransBinning (const char *name=nullptr);  ;  RooLinTransBinning (const RooAbsBinning &input, double slope=1.0, double offset=0.0, const char *name=nullptr);  Constructor with a given input binning and the slope and offset to be applied to construct the linear transformation. ;  ;  RooLinTransBinning (const RooLinTransBinning &, const char *name=nullptr);  Copy constructor. ;  ; double * array () const override;  Return array of bin boundaries. ;  ; double averageBinWidth () const override;  ; double binCenter (Int_t bin) const override;  ; double binHigh (Int_t bin) const override;  ; double binLow (Int_t bin) const override;  ; void binNumbers (double const *x, int *bins, std::size_t n, int coef) const override;  Compute the bin indices for multiple values of x. ;  ; double binWidth (Int_t bin) const override;  ; RooAbsBinning * clone (const char *name=nullptr) const override;  ; double highBound () const override;  ; TClass * IsA () const override;  ; double lowBound () const override;  ; Int_t numBoundaries () const override;  ; void setMax (double xhi) override;  Change upper bound to xhi. ;  ; void setMin (double xlo) override;  Change lower bound to xlo. ;  ; void setRange (double xlo, double xhi) override;  ; void Streamer (TBuffer &) override;  Custom streamer implementing schema evolution between V1 and V2 persistent binnings. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinTransBinning.html:74,Guid,Guide,74,doc/master/classRooLinTransBinning.html,https://root.cern,https://root.cern/doc/master/classRooLinTransBinning.html,1,['Guid'],['Guide']
Usability,". ROOT: RooLinearCombination Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooLinearCombination Class Reference. ; RooLinearCombination is a class that helps perform linear combination of floating point numbers and permits handling them as multiprecision. ; Definition at line 30 of file RooLinearCombination.h. Public Member Functions;  RooLinearCombination ();  ;  RooLinearCombination (const char *name);  ;  RooLinearCombination (const RooLinearCombination &other, const char *name);  ;  ~RooLinearCombination () override;  ; void add (RooFit::SuperFloat c, RooAbsReal *t);  ; std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; TObject * clone (const char *newname) const override;  ; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; RooFit::SuperFloat getCoefficient (size_t idx);  ; TClass * IsA () const override;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void setCoefficient (size_t idx, RooFit::SuperFloat c);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *tit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinearCombination.html:76,Guid,Guide,76,doc/master/classRooLinearCombination.html,https://root.cern,https://root.cern/doc/master/classRooLinearCombination.html,1,['Guid'],['Guide']
Usability,". ROOT: RooLinearVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooLinearVar Class Reference. ; RooLinearVar is the most general form of a derived real-valued object that can be used by RooRealIntegral to integrate over. ; The requirements for this are; Can be modified directly (i.e. invertible formula); Jacobian term in integral is constant (but not necessarily 1). This class implements the most general form that satisfies these requirements ; \[; RLV = \mathrm{slope} \cdot x + \mathrm{offset}; \]. \( x \) is required to be a RooRealVar to meet the invertibility criterium, slope and offset are RooAbsReals, but cannot overlap with \( x \), i.e., \( x \) may not be a server of slope and offset.; In the context of a dataset, slope may not contain any real-valued dependents (to satisfyt the constant Jacobian requirement). This check cannot be enforced at construction time, but can be performed at run time through the isJacobianOK(depList) member function. ; Definition at line 29 of file RooLinearVar.h. Public Member Functions;  RooLinearVar ();  ;  RooLinearVar (const char *name, const char *title, RooAbsRealLValue &variable, const RooAbsReal &slope, const RooAbsReal &offset, const char *unit="""");  Constructor with RooAbsRealLValue variable and RooAbsReal slope and offset. ;  ;  RooLinearVar (const RooLinearVar &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooLinearVar () override;  Destructor. ;  ; TObject * clone (const char *newname) const override;  ; const RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false) const override;  Const version of getBinning() ;  ; RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false) override;  Retrieve binning of this ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinearVar.html:68,Guid,Guide,68,doc/master/classRooLinearVar.html,https://root.cern,https://root.cern/doc/master/classRooLinearVar.html,1,['Guid'],['Guide']
Usability,". ROOT: RooLinkedList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Types |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; RooLinkedList Class ReferenceRooFit » RooFit Core. ; Collection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list. ; It can optionally add a hash table to speed up random access in large collections Use RooAbsCollection derived objects for public use (e.g. RooArgSet or RooArgList) ; Definition at line 44 of file RooLinkedList.h. Public Member Functions;  RooLinkedList (const RooLinkedList &other);  Copy constructor. ;  ;  RooLinkedList (Int_t htsize=0);  ;  ~RooLinkedList () override;  Destructor. ;  ; virtual void Add (TObject *arg);  ; TObject * At (int index) const;  Return object stored in sequential position given by index. ;  ; RooLinkedListIterImpl begin () const;  ; void Clear (Option_t *o=nullptr) override;  Remove all elements from collection. ;  ; TObject * Clone (const char *=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; void Delete (Option_t *o=nullptr) override;  Remove all elements in collection and delete all elements NB: Collection does not own elements, this function should be used judiciously by caller. ;  ; bool empty () const;  ; RooLinkedListIterImpl end () const;  ; TObject * find (const char *name) const;  Return pointer to object with given name in collection. ;  ; RooAbsArg * findArg (const RooAbsArg *) const;  Return pointer to object with given name in collection. ;  ; TObject * FindObject (const char *name) const override;  Return pointer to object with given name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object in list. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinkedList.html:69,Guid,Guide,69,doc/master/classRooLinkedList.html,https://root.cern,https://root.cern/doc/master/classRooLinkedList.html,1,['Guid'],['Guide']
Usability,". ROOT: RooLognormal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooLognormal Class ReferenceRooFit » RooFit. ; RooFit Lognormal PDF. ; The two parameters are:; m0: the median of the distribution; k = exp(sigma): sigma is called the shape parameter in the TMath parameterization. \[; \mathrm{RooLognormal}(x \, | \, m_0, k) = \frac{1}{\sqrt{2\pi \cdot \ln(k) \cdot x}} \cdot \exp\left(; \frac{-\ln^2(\frac{x}{m_0})}{2 \ln^2(k)} \right) \]. The parameterization here is physics driven and differs from the ROOT::Math::lognormal_pdf() in x,m,s,x0 with:; m = log(m0); s = log(k); x0 = 0 . Definition at line 17 of file RooLognormal.h. Public Member Functions;  RooLognormal ();  ;  RooLognormal (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_m0, RooAbsReal &_k, bool useStandardParametrization=false);  ;  RooLognormal (const RooLognormal &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::string buildCallToAnalyticIntegral (int code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; void generateEvent (Int_t code) override;  Interface for generation of an event using the algorithm corresponding to the specified code. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLognormal.html:68,Guid,Guide,68,doc/master/classRooLognormal.html,https://root.cern,https://root.cern/doc/master/classRooLognormal.html,1,['Guid'],['Guide']
Usability,". ROOT: RooMCStudy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; RooMCStudy Class ReferenceRooFit » RooFit Core. ; Helper class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets. ; These may be generated from either same PDF or from a different PDF with similar parameters.; Given a fit and a generator PDF (they might be identical), RooMCStudy can produce toyMC samples and/or fit these. It accumulates the post-fit parameters of each iteration in a dataset. These can be retrieved using fitParams() or fitParDataSet(). This dataset additionally contains the variables; NLL: The value of the negative log-likelihood for each run.; ngen: The number of events generated for each run. Additional plotting routines simplify the task of plotting the distribution of the minimized likelihood, the fitted parameter values, fitted error and pull distribution.; RooMCStudy provides the option to insert add-in modules that modify the generate-and-fit cycle and allow to perform extra steps in the cycle. Output of these modules can be stored alongside the fit results in the aggregate results dataset. These study modules should derive from the class RooAbsMCStudyModule.; Check the RooFit tutorials; rf801_mcstudy.C; rf802_mcstudy_addons.C; rf803_mcstudy_addons2.C; rf804_mcstudy_constr.C for usage examples. PyROOT; Some member functions of RooMCStudy that take a RooCmdArg as argument also support keyword arguments. So far, this applies to constructor RooMCStudy(), RooMCStudy::plotParamOn, RooMCStudy::plotParam, RooMCStudy::plotNLL, RooMCStudy::plotError and RooMCStudy::plotPull. For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMCStudy.html:66,Guid,Guide,66,doc/master/classRooMCStudy.html,https://root.cern,https://root.cern/doc/master/classRooMCStudy.html,1,['Guid'],['Guide']
Usability,". ROOT: RooMappedCategory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; RooMappedCategory Class Reference. ; RooMappedCategory provides a category-to-category mapping defined by pattern matching on their state labels. ; The mapping function consists of a series of wild card regular expressions. Each expression is matched to the input categories' state labels, and an associated output state label. ; Definition at line 27 of file RooMappedCategory.h. Classes; class  Entry;  . Public Member Functions;  RooMappedCategory ();  ;  RooMappedCategory (const char *name, const char *title, RooAbsCategory &inputCat, const char *defCatName=""NotMapped"", Int_t defCatIdx=NoCatIdx);  ;  RooMappedCategory (const RooMappedCategory &other, const char *name=nullptr);  ;  ~RooMappedCategory () override;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; bool map (const char *inKeyRegExp, const char *outKeyName, Int_t outKeyNum=NoCatIdx);  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooMappedCategory to more intuitively reflect the contents of the product operator construction. ;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Print info about this object to the specified stream. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object content",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMappedCategory.html:73,Guid,Guide,73,doc/master/classRooMappedCategory.html,https://root.cern,https://root.cern/doc/master/classRooMappedCategory.html,1,['Guid'],['Guide']
Usability,". ROOT: RooMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooMinimizer Class ReferenceRooFit » RooFit Core. ; Wrapper class around ROOT::Math::Minimizer that provides a seamless interface between the minimizer functionality and the native RooFit interface. ; By default the Minimizer is Minuit 2. RooMinimizer can minimize any RooAbsReal function with respect to its parameters. Usual choices for minimization are the object returned by RooAbsPdf::createNLL() or RooAbsReal::createChi2(). RooMinimizer has methods corresponding to MINUIT functions like hesse(), migrad(), minos() etc. In each of these function calls the state of the MINUIT engine is synchronized with the state of the RooFit variables: any change in variables, change in the constant status etc is forwarded to MINUIT prior to execution of the MINUIT call. Afterwards the RooFit objects are resynchronized with the output state of MINUIT: changes parameter values, errors are propagated. Various methods are available to control verbosity, profiling, automatic PDF optimization. ; Definition at line 48 of file RooMinimizer.h. Classes; struct  Config;  Config argument to RooMinimizer constructor. More...;  ; struct  FitResult;  ; class  FitterInterface;  . Public Types; enum  PrintLevel { ;   None = -1; , Reduced = 0; , Normal = 1; , ExtraForProblem = 2; , ;   Maximum = 3. };  ; enum  Strategy { Speed = 0; , Balance = 1; , Robustness = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMinimizer.html:68,Guid,Guide,68,doc/master/classRooMinimizer.html,https://root.cern,https://root.cern/doc/master/classRooMinimizer.html,1,['Guid'],['Guide']
Usability,". ROOT: RooMoment Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooMoment Class ReferenceRooFit » RooFit Core. . Definition at line 26 of file RooMoment.h. Public Member Functions;  RooMoment ()=default;  ;  RooMoment (const char *name, const char *title, RooAbsReal &func, RooRealVar &x, const RooArgSet &nset, Int_t order=1, bool central=false, bool takeRoot=false, bool intNSet=false);  ;  RooMoment (const char *name, const char *title, RooAbsReal &func, RooRealVar &x, Int_t order=1, bool central=false, bool takeRoot=false);  ;  RooMoment (const RooMoment &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; const RooAbsReal & iF ();  ; TClass * IsA () const override;  ; const RooAbsReal & ixF ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; const RooAbsReal & xF ();  ;  Public Member Functions inherited from RooAbsMoment;  RooAbsMoment ()=default;  ;  RooAbsMoment (const char *name, const char *title, RooAbsReal &func, RooRealVar &x, Int_t order=1, bool takeRoot=false);  ;  RooAbsMoment (const RooAbsMoment &other, const char *name=nullptr);  ; bool central () const;  ; RooAbsReal * mean ();  ; Int_t order () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMoment.html:65,Guid,Guide,65,doc/master/classRooMoment.html,https://root.cern,https://root.cern/doc/master/classRooMoment.html,1,['Guid'],['Guide']
Usability,". ROOT: RooMomentMorph Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooMomentMorph Class ReferenceRooFit » RooFit. . Definition at line 28 of file RooMomentMorph.h. Classes; class  CacheElem;  . Public Types; enum  Setting { ;   Linear; , NonLinear; , NonLinearPosFractions; , NonLinearLinFractions; , ;   SineLinear. };  ;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMomentMorph.html:70,Guid,Guide,70,doc/master/classRooMomentMorph.html,https://root.cern,https://root.cern/doc/master/classRooMomentMorph.html,1,['Guid'],['Guide']
Usability,". ROOT: RooMomentMorphFunc Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooMomentMorphFunc Class ReferenceRooFit » RooFit. . Definition at line 30 of file RooMomentMorphFunc.h. Classes; class  CacheElem;  . Public Types; enum  Setting { ;   Linear; , NonLinear; , NonLinearPosFractions; , NonLinearLinFractions; , ;   SineLinear. };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMomentMorphFunc.html:74,Guid,Guide,74,doc/master/classRooMomentMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooMomentMorphFunc.html,1,['Guid'],['Guide']
Usability,". ROOT: RooMomentMorphFuncND Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooMomentMorphFuncND Class ReferenceRooFit » RooFit. . Definition at line 33 of file RooMomentMorphFuncND.h. Classes; class  CacheElem;  ; class  Grid2;  . Public Types; using Base_t = RooAbsReal;  ; using Grid = Grid2;  ; enum  Setting { ;   Linear; , SineLinear; , NonLinear; , NonLinearPosFractions; , ;   NonLinearLinFractions. };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOpt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMomentMorphFuncND.html:76,Guid,Guide,76,doc/master/classRooMomentMorphFuncND.html,https://root.cern,https://root.cern/doc/master/classRooMomentMorphFuncND.html,1,['Guid'],['Guide']
Usability,". ROOT: RooMsgService Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Static Public Attributes |; Protected Member Functions |; Protected Attributes |; List of all members ; RooMsgService Class ReferenceRooFit » RooFit Core. ; Singleton class that organizes messages generated in RooFit. ; Each message has a message level RooFit::MsgLevel (DEBUG,INFO,PROGRESS,WARNING,ERROR or FATAL), an source object, and a RooFit::MsgTopic. RooMsgService allows to filter and redirect messages into streams according to message level, topic, (base) class of originating object, name of originating object and based on attribute labels attached to individual objects. The current default configuration creates streams for all messages at WARNING level or higher (e.g. ERROR and FATAL) and for all INFO message on topics Generation,Plotting, Integration and Minimization and redirects them to stdout. Users can create additional streams for logging of e.g. DEBUG messages on particular topics or objects and/or redirect streams to C++ streams or files.; The singleton instance is accessible through RooMsgService::instance(). Temporarily change the message level; There is a helper, RooHelpers::LocalChangeMsgLevel, that overrides the default message levels as long as it is alive. To suppress everything below WARNING: RooHelpers::LocalChangeMessageLevel changeMsgLvl(RooFit::WARNING);; [ statements that normally generate a lot of output ]; a#define a(i)Definition RSha256.hxx:99; RooFit::WARNING@ WARNINGDefinition RooGlobalFunc.h:60; outputstatic void output(); Temporarily capture a message stream; RooHelpers::HijackMessageStream allows to fully capture a message stream in a std::stringstream. With this, RooFit messages can be evaluated or suppressed. PyROOT; Some member functions of RooMsgService that take a RooCmdArg as argument also supp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMsgService.html:69,Guid,Guide,69,doc/master/classRooMsgService.html,https://root.cern,https://root.cern/doc/master/classRooMsgService.html,1,['Guid'],['Guide']
Usability,". ROOT: RooMultiBinomial Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooMultiBinomial Class ReferenceRooFit » RooFit. ; RooMultiBinomial is an efficiency function which makes all combinations of efficiencies given as input different efficiency functions for different categories. ; Given a dataset with a category C that determines if a given event is accepted (1) or rejected (0) for the efficiency to be measured, this class evaluates as F if C is 'accept' and as (1-F) if C is 'reject'. Values of F below 0 and above 1 are clipped. F may have an arbitrary number of dependents and parameters; The combination only 'reject' can be chosen to be visible or not visible (and hence this efficiency is then equal to zero). ; Definition at line 24 of file RooMultiBinomial.h. Public Member Functions;  RooMultiBinomial ();  ;  RooMultiBinomial (const char *name, const char *title, const RooArgList &effFuncList, const RooArgList &catList, bool ignoreNonVisible);  Construct the efficiency functions from a list of efficiency functions and a list of categories cat with two states (0,1) that indicate if a given event should be counted as rejected or accepted respectively. ;  ;  RooMultiBinomial (const RooMultiBinomial &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMultiBinomial.html:72,Guid,Guide,72,doc/master/classRooMultiBinomial.html,https://root.cern,https://root.cern/doc/master/classRooMultiBinomial.html,1,['Guid'],['Guide']
Usability,". ROOT: RooMultiCategory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooMultiCategory Class ReferenceRooFit » RooFit Core. ; Connects several RooAbsCategory objects into a single category. ; The states of the multi-category consist of all the permutations of the input categories. RooMultiCategory states are automatically defined and updated whenever an input category modifies its list of states.; A RooMultiCategory is not an lvalue, i.e. one cannot set its states. Its state simply follows as a computation from the states of the input categories. This is because the input categories don't need to be lvalues, so their states cannot be set by the MultiCategory. If all input categories are lvalues, the RooSuperCategory can be used. It works like RooMultiCategory, but allows for setting the states. ; Definition at line 28 of file RooMultiCategory.h. Public Member Functions;  RooMultiCategory ();  ;  RooMultiCategory (const char *name, const char *title, const RooArgSet &inputCatList);  Construct a product of the given set of input RooAbsCategories in inInputCatList. ;  ;  RooMultiCategory (const RooMultiCategory &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; const char * getCurrentLabel () const override;  Get current label. ;  ; const RooArgSet & inputCatList () const;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Print the state of this object to the specified output stream. ;  ; bool readFromStream (std::istream &, bool, bool) override;  Multi categories cannot be read from streams. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMultiCategory.html:72,Guid,Guide,72,doc/master/classRooMultiCategory.html,https://root.cern,https://root.cern/doc/master/classRooMultiCategory.html,2,"['Guid', 'simpl']","['Guide', 'simply']"
Usability,". ROOT: RooMultiVarGaussian Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooMultiVarGaussian Class ReferenceRooFit » RooFit Core. ; Multivariate Gaussian p.d.f. ; with correlations ; Definition at line 31 of file RooMultiVarGaussian.h. Classes; class  AnaIntData;  ; class  BitBlock;  ; class  GenData;  . Public Member Functions;  RooMultiVarGaussian ();  ;  RooMultiVarGaussian (const char *name, const char *title, const RooArgList &xvec, const RooArgList &mu, const TMatrixDBase &covMatrix);  ;  RooMultiVarGaussian (const char *name, const char *title, const RooArgList &xvec, const RooFitResult &fr, bool reduceToConditional=true);  ;  RooMultiVarGaussian (const char *name, const char *title, const RooArgList &xvec, const TMatrixDBase &covMatrix);  ;  RooMultiVarGaussian (const char *name, const char *title, const RooArgList &xvec, const TVectorD &mu, const TMatrixDBase &covMatrix);  ;  RooMultiVarGaussian (const RooMultiVarGaussian &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Handle full integral here. ;  ; TObject * clone (const char *newname) const override;  ; const TMatrixDSym & covarianceMatrix () const;  ; void generateEvent (Int_t code) override;  Retrieve generator config from cache. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Special case: generate all observables. ;  ; void initGenerator (Int_t code) override;  Clear the GenData cache as its content is not invariant un",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMultiVarGaussian.html:75,Guid,Guide,75,doc/master/classRooMultiVarGaussian.html,https://root.cern,https://root.cern/doc/master/classRooMultiVarGaussian.html,1,['Guid'],['Guide']
Usability,". ROOT: RooNDKeysPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooNDKeysPdf Class ReferenceRooFit » RooFit. ; Generic N-dimensional implementation of a kernel estimation p.d.f. ; This p.d.f. models the distribution of an arbitrary input dataset as a superposition of Gaussian kernels, one for each data point, each contributing 1/N to the total integral of the p.d.f. If the 'adaptive mode' is enabled, the width of the Gaussian is adaptively calculated from the local density of events, i.e. narrow for regions with high event density to preserve details and wide for regions with log event density to promote smoothness. The details of the general algorithm are described in the following paper: Cranmer KS, Kernel Estimation in High-Energy Physics. Computer Physics Communications 136:198-207,2001 - e-Print Archive: hep ex/0011057 For multi-dimensional datasets, the kernels are modeled by multidimensional Gaussians. The kernels are constructed such that they reflect the correlation coefficients between the observables in the input dataset. ; Definition at line 44 of file RooNDKeysPdf.h. Classes; struct  BoxInfo;  . Public Types; enum  Mirror { ;   NoMirror; , MirrorLeft; , MirrorRight; , MirrorBoth; , ;   MirrorAsymLeft; , MirrorAsymLeftRight; , MirrorAsymRight; , MirrorLeftAsymRight; , ;   MirrorAsymBoth. };  ;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNDKeysPdf.html:68,Guid,Guide,68,doc/master/classRooNDKeysPdf.html,https://root.cern,https://root.cern/doc/master/classRooNDKeysPdf.html,1,['Guid'],['Guide']
Usability,". ROOT: RooNameReg Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooNameReg Class ReferenceRooFit » RooFit Core. ; Registry for const char* names. ; For each unique name (which is not necessarily a unique pointer in the C++ standard), a unique pointer to a TNamed object is returned that can be used for fast searches and comparisons. ; Definition at line 26 of file RooNameReg.h. Public Types; enum  { kRenamedArg = (1ULL << ( 19 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  RooNameReg (const RooNameReg &other)=delete;  ; const TNamed * constPtr (const char *stringPtr);  Return a unique TNamed pointer for given C++ string. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNameReg.html:66,Guid,Guide,66,doc/master/classRooNameReg.html,https://root.cern,https://root.cern/doc/master/classRooNameReg.html,1,['Guid'],['Guide']
Usability,". ROOT: RooNonCPEigenDecay Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooNonCPEigenDecay Class ReferenceRooFit » RooFit. ; Time-dependent RooAbsAnaConvPdf for CP violating decays to Non-CP eigenstates (eg, \( B_0 \rightarrow \rho^\pm \pi^\mp\)). ; For a description of the physics model see the BaBar Physics Book, section 6.5.2.3 . The set of CP parameters used in this class is equivalent to the one used in the Physics Book, but it is not exactly the same. Starting from the set in the BaBar Book, in order to get the parameters used here you have to change the sign of both \(a_c^+\) and \(a_c^-\), and then substitute: ; \[; a_s^Q = S + Q \cdot \delta S \\; a_c^Q = C + Q \cdot \delta C; \]. where Q denotes the charge of the \(\rho\) meson. ; Definition at line 33 of file RooNonCPEigenDecay.h. Public Types; enum  DecayType { SingleSided; , DoubleSided; , Flipped; };  ;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNonCPEigenDecay.html:74,Guid,Guide,74,doc/master/classRooNonCPEigenDecay.html,https://root.cern,https://root.cern/doc/master/classRooNonCPEigenDecay.html,1,['Guid'],['Guide']
Usability,". ROOT: RooNonCentralChiSquare Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooNonCentralChiSquare Class ReferenceRooFit » RooFit. ; The PDF of the Non-Central Chi Square distribution for n degrees of freedom. ; It is the asymptotic distribution of the profile likelihood ratio test q_mu when a different mu' is true. It is Wald's generalization of Wilks' Theorem.; See:; Asymptotic formulae for likelihood-based tests of new physics; By Glen Cowan, Kyle Cranmer, Eilam Gross, Ofer Vitells http://arXiv.org/abs/arXiv:1007.1727; Wikipedia; It requires MathMore to evaluate for non-integer degrees of freedom, k.; When the Mathmore library is available we can use the MathMore libraries implemented using GSL. It makes use of the modified Bessel function of the first kind (for k > 2). For k < 2 it uses the hypergeometric function 0F1. When is not available we use explicit summation of normal chi-squared distributions The usage of the sum can be forced by calling SetForceSum(true);; This implementation could be improved. BOOST has a nice implementation:; http://live.boost.org/doc/libs/1_42_0/libs/math/doc/sf_and_dist/html/math_toolkit/dist/dist_ref/dists/nc_chi_squared_dist.html; http://wesnoth.repositoryhosting.com/trac/wesnoth_wesnoth/browser/trunk/include/boost/math/distributions/non_central_chi_squared.hpp?rev=6 ; Definition at line 20 of file RooNonCentralChiSquare.h. Public Member Functions;  RooNonCentralChiSquare ();  ;  RooNonCentralChiSquare (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_k, RooAbsReal &_lambda);  ;  RooNonCentralChiSquare (const RooNonCentralChiSquare &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advert",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNonCentralChiSquare.html:78,Guid,Guide,78,doc/master/classRooNonCentralChiSquare.html,https://root.cern,https://root.cern/doc/master/classRooNonCentralChiSquare.html,1,['Guid'],['Guide']
Usability,". ROOT: RooNormalizedPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooNormalizedPdf Class Reference. ; A RooNormalizedPdf wraps a pdf divided by its integral for a given normalization set into a new self-normalized pdf. ; Definition at line 19 of file RooNormalizedPdf.h. Public Member Functions;  RooNormalizedPdf (const RooNormalizedPdf &other, const char *name);  ;  RooNormalizedPdf (RooAbsPdf &pdf, RooArgSet const &normSet);  ; double analyticalIntegralWN (Int_t code, const RooArgSet *, const char *rangeName=nullptr) const override;  Forward calculation of analytical integrals to input p.d.f. ;  ; bool canComputeBatchWithCuda () const override;  ; TObject * clone (const char *newname) const override;  ; std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; double expectedEvents (const RooArgSet *) const override;  Return expected number of events to be used in calculation of extended likelihood. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *, const char *rangeName=nullptr) const override;  Forward determination of analytical integration capabilities to input p.d.f. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNormalizedPdf.html:72,Guid,Guide,72,doc/master/classRooNormalizedPdf.html,https://root.cern,https://root.cern/doc/master/classRooNormalizedPdf.html,1,['Guid'],['Guide']
Usability,". ROOT: RooNovosibirsk Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooNovosibirsk Class ReferenceRooFit » RooFit. ; RooNovosibirsk implements the Novosibirsk function. ; Function taken from H. Ikeda et al. NIM A441 (2000), p. 401 (Belle Collaboration) ; Definition at line 25 of file RooNovosibirsk.h. Public Member Functions;  RooNovosibirsk ();  ;  RooNovosibirsk (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_peak, RooAbsReal &_width, RooAbsReal &_tail);  ;  RooNovosibirsk (const RooNovosibirsk &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNovosibirsk.html:70,Guid,Guide,70,doc/master/classRooNovosibirsk.html,https://root.cern,https://root.cern/doc/master/classRooNovosibirsk.html,1,['Guid'],['Guide']
Usability,". ROOT: RooNumCdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; RooNumCdf Class ReferenceRooFit » RooFit Core. ; Implementation of RooNumRunningInt that calculates cumulative distribution functions from p.d.f.s. ; The main difference between RooNumCdf and RooNumRunningInt is that this class imposes special end-point conditions on the interpolated histogram that represents the output so that the value at the lower bound is guaranteed to converge to exactly zero and that the value at the upper bound is guaranteed to converge to exactly one, at all interpolation orders. ; Definition at line 17 of file RooNumCdf.h. Public Member Functions;  RooNumCdf (const char *name, const char *title, RooAbsPdf &_pdf, RooRealVar &_x, const char *binningName=""cache"");  Construct a cumulative distribution function from given input p.d.f over observable x. ;  ;  RooNumCdf (const RooNumCdf &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooNumRunningInt;  RooNumRunningInt (const char *name, const char *title, RooAbsReal &_func, RooRealVar &_x, const char *binningName=""cache"");  Construct running integral of function '_func' over x_print from the lower bound on _x to the present value of _x using a numeric sampling technique. ;  ;  RooNumRunningInt (const RooNumRunningInt &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooNumRunningInt () override;  Destructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumCdf.html:65,Guid,Guide,65,doc/master/classRooNumCdf.html,https://root.cern,https://root.cern/doc/master/classRooNumCdf.html,1,['Guid'],['Guide']
Usability,". ROOT: RooNumConvPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooNumConvPdf Class ReferenceRooFit » RooFit Core. ; Numeric 1-dimensional convolution operator PDF. ; This class can convolve any PDF with any other PDF using a straightforward numeric calculation of the convolution integral This class should be used as last resort as numeric convolution calculated this way is computationally intensive and prone to stability fitting problems. The preferred way to compute numeric convolutions is RooFFTConvPdf, which calculates convolutions using Fourier Transforms (requires external free FFTW3 package) RooNumConvPdf implements reasonable defaults that should convolve most functions reasonably well, but results strongly depend on the shape of your input PDFS so always check your result. The default integration engine for the numeric convolution is the adaptive Gauss-Kronrod method, which empirically seems the most robust for this task. You can override the convolution integration settings via the RooNumIntConfig object reference returned by the convIntConfig() member function By default the numeric convolution is integrated from -infinity to +infinity through a x -> 1/x coordinate transformation of the tails. For convolution with a very small bandwidth it may be advantageous (for both CPU consumption and stability) if the integration domain is limited to a finite range. The function setConvolutionWindow(mean,width,scale) allows to set a sliding window around the x value to be calculated taking a RooAbsReal expression for an offset and a width to be taken around the x value. These input expression can be RooFormulaVars or other function objects although the 3d 'scale' argument 'scale' multiplies the width RooAbsReal expression given in the 2nd argume",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvPdf.html:69,Guid,Guide,69,doc/master/classRooNumConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooNumConvPdf.html,1,['Guid'],['Guide']
Usability,". ROOT: RooNumConvolution Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooNumConvolution Class ReferenceRooFit » RooFit Core. ; Numeric 1-dimensional convolution operator PDF. ; This class can convolve any PDF with any other PDF This class should not be used blindly as numeric convolution is computing intensive and prone to stability fitting problems. If an analytic convolution can be calculated, you should use that or implement it if not available. RooNumConvolution implements reasonable defaults that should convolve most functions reasonably well, but results strongly depend on the shape of your input PDFS so always check your result.; The default integration engine for the numeric convolution is the adaptive Gauss-Kronrod method, which empirically seems the most robust for this task. You can override the convolution integration settings via the RooNumIntConfig object reference returned by the convIntConfig() member function By default the numeric convolution is integrated from -infinity to +infinity through a x -> 1/x coordinate transformation of the tails. For convolution with a very small bandwidth it may be advantageous (for both CPU consumption and stability) if the integration domain is limited to a finite range. The function setConvolutionWindow(mean,width,scale) allows to set a sliding window around the x value to be calculated taking a RooAbsReal expression for an offset and a width to be taken around the x value. These input expression can be RooFormulaVars or other function objects although the 3d 'scale' argument 'scale' multiplies the width RooAbsReal expression given in the 2nd argument, allowing for an appropriate window definition for most cases without need for a RooFormulaVar object: e.g. a Gaussian resolution PDF do setConvolu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvolution.html:73,Guid,Guide,73,doc/master/classRooNumConvolution.html,https://root.cern,https://root.cern/doc/master/classRooNumConvolution.html,1,['Guid'],['Guide']
Usability,". ROOT: RooNumGenConfig Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooNumGenConfig Class ReferenceRooFit » RooFit Core. ; Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. ; RooRealIntegral and RooAbsPdf use this class in the (normalization) integral configuration interface ; Definition at line 25 of file RooNumGenConfig.h. Public Member Functions;  RooNumGenConfig ();  Constructor. ;  ;  RooNumGenConfig (const RooNumGenConfig &other);  Copy constructor. ;  ;  ~RooNumGenConfig () override;  Destructor. ;  ; bool addConfigSection (const RooAbsNumGenerator *proto, const RooArgSet &defaultConfig);  Add a configuration section for a particular integrator. ;  ; StyleOption defaultPrintStyle (Option_t *opt) const override;  ; RooArgSet & getConfigSection (const char *name);  Return section with configuration parameters for integrator with given (class) name. ;  ; const RooArgSet & getConfigSection (const char *name) const;  Retrieve configuration information specific to integrator with given name. ;  ; TClass * IsA () const override;  ; RooCategory & method1D (bool cond, bool cat);  ; const RooCategory & method1D (bool cond, bool cat) const;  ; RooCategory & method2D (bool cond, bool cat);  ; const RooCategory & method2D (bool cond, bool cat) const;  ; RooCategory & methodND (bool cond, bool cat);  ; const RooCategory & methodND (bool cond, bool cat) const;  ; RooNumGenConfig & operator= (const RooNumGenConfig &other);  Assignment operator from other RooNumGenConfig. ;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose, TString indent="""") const override;  Detailed printing interface. ;  ; void Streamer ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenConfig.html:71,Guid,Guide,71,doc/master/classRooNumGenConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumGenConfig.html,1,['Guid'],['Guide']
Usability,". ROOT: RooNumGenFactory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooNumGenFactory Class ReferenceRooFit » RooFit Core. ; Factory to instantiate numeric integrators from a given function binding and a given configuration. ; The factory searches for a numeric integrator registered with the factory that has the ability to perform the numeric integration. The choice of method may depend on the number of dimensions integrated, the nature of the integration limits (closed or open ended) and the preference of the caller as encoded in the configuration object. ; Definition at line 30 of file RooNumGenFactory.h. Public Member Functions;  ~RooNumGenFactory () override;  Destructor. ;  ; RooAbsNumGenerator * createSampler (RooAbsReal &func, const RooArgSet &genVars, const RooArgSet &condVars, const RooNumGenConfig &config, bool verbose=false, RooAbsReal *maxFuncVal=nullptr);  Construct a numeric integrator instance that operates on function 'func' and is configured with 'config'. ;  ; const RooAbsNumGenerator * getProtoSampler (const char *name);  Return prototype integrator with given (class) name. ;  ; bool storeProtoSampler (RooAbsNumGenerator *proto, const RooArgSet &defConfig);  Method accepting registration of a prototype numeric integrator along with a RooArgSet of its default configuration options and an optional list of names of other numeric integrators on which this integrator depends. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenFactory.html:72,Guid,Guide,72,doc/master/classRooNumGenFactory.html,https://root.cern,https://root.cern/doc/master/classRooNumGenFactory.html,1,['Guid'],['Guide']
Usability,". ROOT: RooNumIntConfig Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooNumIntConfig Class ReferenceRooFit » RooFit Core. ; Holds the configuration parameters of the various numeric integrators used by RooRealIntegral. ; RooRealIntegral and RooAbsPdf use this class in the (normalization) integral configuration interface ; Definition at line 25 of file RooNumIntConfig.h. Public Member Functions;  RooNumIntConfig ();  Constructor. ;  ;  RooNumIntConfig (const RooNumIntConfig &other);  Copy constructor. ;  ;  ~RooNumIntConfig () override;  Destructor. ;  ; bool addConfigSection (std::string const &name, const RooArgSet &inDefaultConfig, bool canIntegrate1D, bool canIntegrate2D, bool canIntegrateND, bool canIntegrateOpenEnded);  Add a configuration section for a particular integrator. ;  ; StyleOption defaultPrintStyle (Option_t *opt) const override;  ; double epsAbs () const;  ; double epsRel () const;  ; RooArgSet & getConfigSection (const char *name);  Return section with configuration parameters for integrator with given (class) name. ;  ; const RooArgSet & getConfigSection (const char *name) const;  Retrieve configuration information specific to integrator with given name. ;  ; TClass * IsA () const override;  ; RooCategory & method1D ();  ; const RooCategory & method1D () const;  ; RooCategory & method1DOpen ();  ; const RooCategory & method1DOpen () const;  ; RooCategory & method2D ();  ; const RooCategory & method2D () const;  ; RooCategory & method2DOpen ();  ; const RooCategory & method2DOpen () const;  ; RooCategory & methodND ();  ; const RooCategory & methodND () const;  ; RooCategory & methodNDOpen ();  ; const RooCategory & methodNDOpen () const;  ; RooNumIntConfig & operator= (const RooNumIntConfig &other);  Assignment operator from other RooNumIntConfig. ;  ; void Print (Opt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumIntConfig.html:71,Guid,Guide,71,doc/master/classRooNumIntConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumIntConfig.html,1,['Guid'],['Guide']
Usability,". ROOT: RooNumIntFactory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooNumIntFactory Class ReferenceRooFit » RooFit Core. ; Factory to instantiate numeric integrators from a given function binding and a given configuration. ; The factory searches for a numeric integrator registered with the factory that has the ability to perform the numeric integration. The choice of method may depend on the number of dimensions integrated, the nature of the integration limits (closed or open ended) and the preference of the caller as encoded in the configuration object. ; Definition at line 33 of file RooNumIntFactory.h. Classes; struct  PluginInfo;  . Public Types; using Creator = std::function< std::unique_ptr< RooAbsIntegrator >(RooAbsFunc const &function, const RooNumIntConfig &config)>;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  RooNumIntFactory (const RooNumIntFactory &other)=delete;  ; std::unique_ptr< RooAbsIntegrator > createIntegrator (RooAbsFunc &func, const RooNumIntConfig &config, int ndim=0, bool isBinned=false) const;  Construct a numeric integrator instance that operates on function 'func' and is configured wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumIntFactory.html:72,Guid,Guide,72,doc/master/classRooNumIntFactory.html,https://root.cern,https://root.cern/doc/master/classRooNumIntFactory.html,1,['Guid'],['Guide']
Usability,". ROOT: RooNumRunningInt Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooNumRunningInt Class ReferenceRooFit » RooFit Core. ; Implementation of RooAbsCachedReal that represents a running integral. . \[ RI(f(x)) = \int_{xlow}^{x} f(x') dx' \]. that is calculated internally with a numeric technique: The input function is first sampled into a histogram, which is then numerically integrated. The output function is an interpolated version of the integrated histogram. The sampling density is controlled by the binning named ""cache"" in the observable x. The shape of the p.d.f is always calculated for the entire domain in x and cached in a histogram. The cache histogram is automatically recalculated when any of the parameters of the input p.d.f. has changed. ; Definition at line 22 of file RooNumRunningInt.h. Classes; class  RICacheElem;  . Public Member Functions;  RooNumRunningInt (const char *name, const char *title, RooAbsReal &_func, RooRealVar &_x, const char *binningName=""cache"");  Construct running integral of function '_func' over x_print from the lower bound on _x to the present value of _x using a numeric sampling technique. ;  ;  RooNumRunningInt (const RooNumRunningInt &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooNumRunningInt () override;  Destructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsCachedReal;  RooAbsCachedReal ();  ;  RooAbsCachedReal (const char *name, const char *title, Int_t ipOrder=0);  Constructor. ;  ;  RooAbsCachedReal (const RooAbsCachedReal &other, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumRunningInt.html:72,Guid,Guide,72,doc/master/classRooNumRunningInt.html,https://root.cern,https://root.cern/doc/master/classRooNumRunningInt.html,1,['Guid'],['Guide']
Usability,". ROOT: RooObjCacheManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; RooObjCacheManager Class ReferenceRooFit » RooFit Core. ; Implementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elements that contain RooAbsArg objects. ; Caches with RooAbsArg derived payload require special care as server redirects cache operation mode changes and constant term optimization calls may need to be forwarded to such cache payload. This cache manager takes care of all these operations by forwarding these calls to the RooAbsCacheElement interface functions, which have a sensible default implementation. ; Definition at line 29 of file RooObjCacheManager.h. Public Member Functions;  RooObjCacheManager (const RooObjCacheManager &other, RooAbsArg *owner=nullptr);  Copy constructor. ;  ;  RooObjCacheManager (RooAbsArg *owner=nullptr, Int_t maxSize=2, bool clearCacheOnServerRedirect=true, bool allowOptimize=false);  Constructor of object cache manager for given owner. ;  ;  ~RooObjCacheManager () override;  Destructor. ;  ; void findConstantNodes (const RooArgSet &, RooArgSet &, RooLinkedList &) override;  If clearOnRedirect is false, forward constant term optimization calls to cache elements. ;  ; void insertObjectHook (RooAbsCacheElement &) override;  Set owner link on all object inserted into cache. ;  ; TClass * IsA () const override;  ; void operModeHook () override;  Intercept changes to cache operation mode and forward to cache elements. ;  ; void optimizeCacheMode (const RooArgSet &, RooArgSet &, RooLinkedList &) override;  Intercept calls to perform automatic optimization of cache mode operation. ;  ; void printCompactTreeHook (std::ostream &, const char *) override;  Add details on cache contents when printing in tree mode. ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooObjCacheManager.html:74,Guid,Guide,74,doc/master/classRooObjCacheManager.html,https://root.cern,https://root.cern/doc/master/classRooObjCacheManager.html,1,['Guid'],['Guide']
Usability,". ROOT: RooParamBinning Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooParamBinning Class ReferenceRooFit » RooFit Core. ; Implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects. ; The external RooAbsReal definitions are explicitly allowed to depend on other observables and parameters, and make it possible to define non-rectangular range definitions in RooFit. Objects of class RooParamBinning are made by the RooRealVar::setRange() that takes RooAbsReal references as arguments ; Definition at line 24 of file RooParamBinning.h. Public Member Functions;  RooParamBinning (const char *name=nullptr);  Default constructor. ;  ;  RooParamBinning (const RooParamBinning &other, const char *name=nullptr);  Copy constructor cout << ""RooParamBinning::cctor("" << this << "") orig = "" << &other << endl ;. ;  ;  RooParamBinning (RooAbsReal &xlo, RooAbsReal &xhi, Int_t nBins, const char *name=nullptr);  Construct binning with 'nBins' bins and with a range parameterized by external RooAbsReals xloIn and xhiIn. ;  ;  ~RooParamBinning () override;  Destructor. ;  ; double * array () const override;  Return array of bin boundaries. ;  ; double averageBinWidth () const override;  ; double binCenter (Int_t bin) const override;  Return the central value of the 'i'-th fit bin. ;  ; double binHigh (Int_t bin) const override;  Return the high edge of the 'i'-th fit bin. ;  ; double binLow (Int_t bin) const override;  Return the low edge of the 'i'-th fit bin. ;  ; void binNumbers (double const *x, int *bins, std::size_t n, int coef) const override;  Return the fit bin index for the current value. ;  ; double binWidth (Int_t bin) const override;  Return average bin width. ;  ; RooAbsBinning * clone (const char *name=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooParamBinning.html:71,Guid,Guide,71,doc/master/classRooParamBinning.html,https://root.cern,https://root.cern/doc/master/classRooParamBinning.html,1,['Guid'],['Guide']
Usability,". ROOT: RooParamHistFunc Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooParamHistFunc Class ReferenceRooFit » RooFit. ; A histogram function that assigns scale parameters to every bin. ; Instead of the bare bin contents, it therefore yields: ; \[; \gamma_{i} * \mathrm{bin}_i; \]. The \( \gamma_i \) can therefore be used to parametrise statistical uncertainties of the histogram template. In conjunction with a constraint term, this can be used to implement the Barlow-Beeston method. The constraint can be implemented using RooHistConstraint.; See also the tutorial rf709_BarlowBeeston.C ; Definition at line 24 of file RooParamHistFunc.h. Public Member Functions;  RooParamHistFunc ();  ;  RooParamHistFunc (const char *name, const char *title, RooDataHist &dh, const RooAbsArg &x, const RooParamHistFunc *paramSource=nullptr, bool paramRelative=true);  ;  RooParamHistFunc (const RooParamHistFunc &other, const char *name=nullptr);  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Implement analytical integrations by doing appropriate weighting from component integrals functions to integrators of components. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Return sampling hint for making curves of (projections) of this function as the recursive division strategy of RooCurve cannot deal efficiently with the vertical lines that occur in a non-interpolated histogram. ;  ; TObject * clone (const char *newname) const override;  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  ; double getActual (Int_t ibin);  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullpt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooParamHistFunc.html:72,Guid,Guide,72,doc/master/classRooParamHistFunc.html,https://root.cern,https://root.cern/doc/master/classRooParamHistFunc.html,1,['Guid'],['Guide']
Usability,". ROOT: RooParametricStepFunction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooParametricStepFunction Class ReferenceRooFit » RooFit. ; The Parametric Step Function PDF is a binned distribution whose parameters are the heights of each bin. ; This PDF was first used in BaBar's B0->pi0pi0 paper BABAR Collaboration (B. Aubert et al.) Phys.Rev.Lett.91:241801,2003.; This PDF may be used to describe oddly shaped distributions. It differs from a RooKeysPdf or a RooHistPdf in that a RooParametricStepFunction has free parameters. In particular, any statistical uncertainty in sample used to model this PDF may be understood with these free parameters; this is not possible with non-parametric PDFs.; The RooParametricStepFunction has Nbins-1 free parameters. Note that the limits of the dependent variable must match the low and hi bin limits.; Here is an example showing how to use the RooParametricStepFunction to fit toy data generated from a uniform distribution:; // Define some constant parameters; const int nBins = 10;; const double xMin = 0.0;; const double xMax = 10.0;; const double binWidth = (xMax - xMin) / nBins;; const std::size_t nEvents = 10000;; ; // Fill the bin boundaries; std::vector<double> binBoundaries(nBins + 1);; ; for(int i = 0; i <= nBins; ++i) {; binBoundaries[i] = i * binWidth;; }; ; // The RooParametricStepFunction needs a TArrayD; TArrayD binBoundariesTArr{int(binBoundaries.size()), binBoundaries.data()};; ; RooRealVar x{""x"", ""x"", xMin, xMax};; ; // There are nBins-1 free coefficient parameters, whose sum must be <= 1.0.; // We all set them to 0.1, such that the resulting step function pdf is; // initially uniform.; RooArgList coefList;; for(int i = 0; i < nBins - 1; ++i) {; auto name = std::string(""coef_"") + std::to_string(i);; coefList.addOw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooParametricStepFunction.html:81,Guid,Guide,81,doc/master/classRooParametricStepFunction.html,https://root.cern,https://root.cern/doc/master/classRooParametricStepFunction.html,1,['Guid'],['Guide']
Usability,". ROOT: RooPlot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; RooPlot Class ReferenceRooFit » RooFit Core. ; Plot frame and a container for graphics objects within that frame. ; As a frame, it provides the TH1-style public interface for setting plot ranges, configuring axes, etc. As a container, it holds an arbitrary set of objects that might be histograms of data, curves representing a fit model, or text labels. Use the Draw() method to draw a frame and the objects it contains. Use the various add...() methods to add objects to be drawn. In general, the add...() methods create a private copy of the object you pass them and return a pointer to this copy. The caller owns the input object and this class owns the returned object. All RooAbsReal and RooAbsData derived classes implement plotOn() functions that facilitate to plot themselves on a given RooPlot, e.g. RooPlot *frame = x.frame() ;; data.plotOn(frame) ;; pdf.plotOn(frame) ;; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::framestatic RooPlot * frame(const RooAbsRealLValue &var, double xmin, double xmax, Int_t nBins)Create a new frame for a given variable in x.Definition RooPlot.cxx:225; xDouble_t x[n]Definition legend1.C:17; These high level functions also take care of any projections or other mappings that need to be made to plot a multi-dimensional object onto a one-dimensional plot. ; Definition at line 45 of file RooPlot.h. Classes; class  DrawOpt;  . Public Typ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPlot.html:63,Guid,Guide,63,doc/master/classRooPlot.html,https://root.cern,https://root.cern/doc/master/classRooPlot.html,1,['Guid'],['Guide']
Usability,". ROOT: RooPoisson Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooPoisson Class ReferenceRooFit » RooFit. ; Poisson pdf. ; Definition at line 19 of file RooPoisson.h. Public Member Functions;  RooPoisson ();  ;  RooPoisson (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_mean, bool noRounding=false);  ;  RooPoisson (const char *name, const char *title, RooAbsReal::Ref _x, RooAbsReal::Ref _mean, bool noRounding=false);  Constructor. ;  ;  RooPoisson (const RooPoisson &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::string buildCallToAnalyticIntegral (int code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; void generateEvent (Int_t code) override;  Implement internal generator using TRandom::Poisson. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Advertise internal generator in x. ;  ; RooAbsReal const & getMean () const;  Get the mean parameter. ;  ; bool getNoRounding () const;  ; RooAbsReal const & getX () const;  Get the x variable. ;  ; TClass * IsA () const override;  ; void protectNegativeMean (bool flag=true);  Switch on or off protection against negative means. ;  ; void setNoRounding (bool fl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPoisson.html:66,Guid,Guide,66,doc/master/classRooPoisson.html,https://root.cern,https://root.cern/doc/master/classRooPoisson.html,1,['Guid'],['Guide']
Usability,". ROOT: RooPolyFunc Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooPolyFunc Class ReferenceRooFit » RooFit. ; RooPolyFunc implements a polynomial function in multi-variables. ; The polynomial coefficients are implemented as doubles and are not part of the RooFit computation graph. ; Definition at line 28 of file RooPolyFunc.h. Public Member Functions;  RooPolyFunc ();  Default constructor. ;  ;  RooPolyFunc (const char *name, const char *title, const RooAbsCollection &vars);  Parameterised constructor. ;  ;  RooPolyFunc (const char *name, const char *title, RooAbsReal &x, const RooAbsCollection &coefList);  ;  RooPolyFunc (const char *name, const char *title, RooAbsReal &x, RooAbsReal &y, const RooAbsCollection &coefList);  ;  RooPolyFunc (const RooPolyFunc &other, const char *name=nullptr);  Copy constructor. ;  ; void addTerm (double coefficient);  coverity[UNINIT_CTOR] ;  ; void addTerm (double coefficient, const RooAbsCollection &exponents);  ; void addTerm (double coefficient, const RooAbsReal &var1, int exp1);  ; void addTerm (double coefficient, const RooAbsReal &var1, int exp1, const RooAbsReal &var2, int exp2);  ; std::string asString () const;  Return to RooPolyFunc as a string. ;  ; TObject * clone (const char *newname) const override;  ; RooRealVar * getCoefficient (const RooArgList &term);  ; RooRealVar * getExponent (const RooArgList &term, RooRealVar *v);  ; TClass * IsA () const override;  ; RooPolyFunc & operator= (const RooPolyFunc &other)=delete;  ; RooPolyFunc & operator= (RooPolyFunc &&other)=delete;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; const std::vector< std::unique_ptr< RooListProxy > > & terms () const;  ; const RooArgList & va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolyFunc.html:67,Guid,Guide,67,doc/master/classRooPolyFunc.html,https://root.cern,https://root.cern/doc/master/classRooPolyFunc.html,1,['Guid'],['Guide']
Usability,". ROOT: RooPolyVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Private Member Functions |; Friends |; List of all members ; RooPolyVar Class ReferenceRooFit » RooFit Core. ; A RooAbsReal implementing a polynomial in terms of a list of RooAbsReal coefficients. . \[f(x) = \sum_{i} a_{i} \cdot x^i \]. Class RooPolyvar implements analytical integrals of all polynomials it can define. ; Definition at line 25 of file RooPolyVar.h. Public Member Functions;  RooPolyVar ();  ;  RooPolyVar (const char *name, const char *title, RooAbsReal &_x, const RooArgList &_coefList, Int_t lowestOrder=0);  Construct polynomial in x with coefficients in coefList. ;  ;  RooPolyVar (const char *name, const char *title, RooAbsReal &x);  Constructor of flat polynomial function. ;  ;  RooPolyVar (const RooPolyVar &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Calculate and return analytical integral over x. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Advertise that we can internally integrate over x. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolyVar.html:66,Guid,Guide,66,doc/master/classRooPolyVar.html,https://root.cern,https://root.cern/doc/master/classRooPolyVar.html,1,['Guid'],['Guide']
Usability,". ROOT: RooPolynomial Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooPolynomial Class ReferenceRooFit » RooFit. ; RooPolynomial implements a polynomial p.d.f of the form. . \[ f(x) = \mathcal{N} \cdot \sum_{i} a_{i} * x^i \]. By default, the coefficient \( a_0 \) is chosen to be 1, as polynomial probability density functions have one degree of freedom less than polynomial functions due to the normalisation condition. \( \mathcal{N} \) is a normalisation constant that is automatically calculated when the polynomial is used in computations.; The sum can be truncated at the low end. See the main constructor RooPolynomial::RooPolynomial(const char*, const char*, RooAbsReal&, const RooArgList&, Int_t) ; Definition at line 25 of file RooPolynomial.h. Public Member Functions;  RooPolynomial ();  ;  RooPolynomial (const char *name, const char *title, RooAbsReal &_x, const RooArgList &_coefList, Int_t lowestOrder=1);  Create a polynomial in the variable x. ;  ;  RooPolynomial (const char *name, const char *title, RooAbsReal &x);  ;  RooPolynomial (const RooPolynomial &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Do the analytical integral according to the code that was returned by getAnalyticalIntegral(). ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; RooArgList const & coefList () const;  Get the coefficient list. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Advertise ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolynomial.html:69,Guid,Guide,69,doc/master/classRooPolynomial.html,https://root.cern,https://root.cern/doc/master/classRooPolynomial.html,1,['Guid'],['Guide']
Usability,". ROOT: RooPowerSum Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooPowerSum Class ReferenceRooFit » RooFit. ; RooPowerSum implements a power law PDF of the form. . \[ f(x) = \mathcal{N} \cdot \sum_{i} a_{i} * x^{b_i} \]. Definition at line 20 of file RooPowerSum.h. Public Member Functions;  RooPowerSum ();  ;  RooPowerSum (const char *name, const char *title, RooAbsReal &x, const RooArgList &coefList, const RooArgList &expList);  Create a power law in the variable x. ;  ;  RooPowerSum (const RooPowerSum &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegral (int code, const char *rangeName=nullptr) const override;  Do the analytical integral according to the code that was returned by getAnalyticalIntegral(). ;  ; RooAbsReal const & base () const;  Get the base of the exponentiated terms (aka. x variable). ;  ; TObject * clone (const char *newname) const override;  ; RooArgList const & coefList () const;  Get the list of coefficients. ;  ; RooArgList const & expList () const;  Get the list of exponents. ;  ; int getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Advertise to RooFit that this function can be analytically integrated. ;  ; std::string getFormulaExpression (bool expand) const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPowerSum.html:67,Guid,Guide,67,doc/master/classRooPowerSum.html,https://root.cern,https://root.cern/doc/master/classRooPowerSum.html,1,['Guid'],['Guide']
Usability,". ROOT: RooPrintable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Protected Attributes |; List of all members ; RooPrintable Class ReferenceRooFit » RooFit Core. ; A 'mix-in' base class that define the standard RooFit plotting and printing methods. ; Each RooPlotable implementation must define methods that print the objects name, class name, title, value, arguments and extras to a provided stream. The definition of value is class dependent. The definition of arguments is also class dependent, but should always be interpreted as the names (and properties) of any (RooAbsArg) external inputs of a given object. The extras method can be used to print any properties that does not fit in any of the other classes. Each object an also override the definitions made in defaultPrintStyle and defaultPrintContents to determine what is printed (in terms of contents) and how it is printed (inline,single-line or multiline) given a Print() option string. ; Definition at line 25 of file RooPrintable.h. Public Types; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  . Public Member Functions;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual Int_t defaultPrintContents (Option_t *opt) const;  Default choice of contents to be printed (name and value) ;  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual TClass * IsA () const;  ; virtual void printAddress (std::ostream &os) const;  Print class name of object. ;  ; virtual void printArgs (std::ostream &os) const;  Interface for printing of object arguments. ;  ; virtual void printClassName (std::ostream &os) const;  Print class name ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPrintable.html:68,Guid,Guide,68,doc/master/classRooPrintable.html,https://root.cern,https://root.cern/doc/master/classRooPrintable.html,1,['Guid'],['Guide']
Usability,". ROOT: RooProdGenContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooProdGenContext Class ReferenceRooFit » RooFit Core. ; Efficient implementation of the generator context specific for RooProdPdf PDFs. ; The sim-context owns a list of component generator contexts that are used to generate the dependents for each component PDF sequentially. ; Definition at line 30 of file RooProdGenContext.h. Public Member Functions;  RooProdGenContext (const RooProdPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  ;  ~RooProdGenContext () override;  Destructor. Delete all owned subgenerator contexts. ;  ; void attach (const RooArgSet &params) override;  Attach generator to given event buffer. ;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Detailed printing interface. ;  ; void setProtoDataOrder (Int_t *lut) override;  Set the traversal order of the prototype dataset by the given lookup table. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsGenContext;  RooAbsGenContext (const RooAbsPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents when printing. ;  ; StyleOption defaultPrintStyle (Option_t *opt) const override;  Define default print style. ;  ; virtual RooDataSet * generate (double nEvents=0, bool skipInit=false, bool extendedMode=false);  Generate the specified number",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProdGenContext.html:73,Guid,Guide,73,doc/master/classRooProdGenContext.html,https://root.cern,https://root.cern/doc/master/classRooProdGenContext.html,1,['Guid'],['Guide']
Usability,". ROOT: RooProdPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooProdPdf Class ReferenceRooFit » RooFit Core. ; Efficient implementation of a product of PDFs of the form. . \[ \prod_{i=1}^{N} \mathrm{PDF}_i (x, \ldots) \]. PDFs may share observables. If that is the case any irreducible subset of PDFs that share observables will be normalised with explicit numeric integration as any built-in normalisation will no longer be valid.; Alternatively, products using conditional PDFs can be defined, e.g. \[ F(x|y) \cdot G(y), \]. meaning a PDF \( F(x) \) given \( y \) and a PDF \( G(y) \). In this construction, \( F \) is only normalised w.r.t \( x\), and \( G \) is normalised w.r.t \( y \). The product in this construction is properly normalised.; If exactly one of the component PDFs supports extended likelihood fits, the product will also be usable in extended mode, returning the number of expected events from the extendable component PDF. The extendable component does not have to appear in any specific place in the list. PyROOT; RooProdPdf() constructor takes a RooCmdArg as argument also supports keyword arguments. For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; model = ROOT.RooProdPdf(; ""model"", ""model"", ROOT.RooArgSet(shapePdf), ROOT.RooFit.Conditional(ROOT.RooArgSet(effPdf), ROOT.RooArgSet(cut)); ); ; # With keyword arguments:; model = ROOT.RooProdPdf(; ""model"", ""model"", ROOT.RooArgSet(shapePdf), Conditional=(ROOT.RooArgSet(effPdf), ROOT.RooArgSet(cut)); ). Definition at line 33 of file RooProdPdf.h. Classes; class  CacheElem;  . Public Member Functions;  RooProdPdf ();  Default constructor. ;  ;  RooProdPdf (const char *name, const char *title, const RooArgList &pdfList, double cutOff=0.0);  Constr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProdPdf.html:66,Guid,Guide,66,doc/master/classRooProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooProdPdf.html,1,['Guid'],['Guide']
Usability,". ROOT: RooProduct Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooProduct Class ReferenceRooFit » RooFit Core. ; Represents the product of a given set of RooAbsReal objects. ; Definition at line 29 of file RooProduct.h. Classes; class  CacheElem;  ; class  ProdMap;  . Public Member Functions;  RooProduct ();  Default constructor. ;  ;  RooProduct (const char *name, const char *title, const RooArgList &prodSet);  Construct function representing the product of functions in prodSet. ;  ;  RooProduct (const char *name, const char *title, RooAbsReal &real1, RooAbsReal &real2);  ;  RooProduct (const RooProduct &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooProduct () override;  Destructor. ;  ; void addTerm (RooAbsArg *term);  Add a term to this product. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Calculate integral internally from appropriate partial integral cache. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Forward the plot sampling hint from the p.d.f. that defines the observable obs. ;  ; CacheMode canNodeBeCached () const override;  ; const RooArgList & categoricalComponents () const;  ; TObject * clone (const char *newname) const override;  ; RooArgList components ();  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Force internal handling of integration of given observable if any of the product terms depend on it. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Declare that we handle all integrations internally. ;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const overri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProduct.html:66,Guid,Guide,66,doc/master/classRooProduct.html,https://root.cern,https://root.cern/doc/master/classRooProduct.html,1,['Guid'],['Guide']
Usability,". ROOT: RooProfileLL Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooProfileLL Class ReferenceRooFit » RooFit Core. ; Implements the profile likelihood estimator for a given likelihood and set of parameters of interest. ; The value return by RooProfileLL is the input likelihood nll minimized w.r.t all nuisance parameters (which are all parameters except for those listed in the constructor) minus the -log(L) of the best fit. Note that this function is slow to evaluate as a MIGRAD minimization step is executed for each function evaluation ; Definition at line 22 of file RooProfileLL.h. Public Member Functions;  RooProfileLL ();  Default constructor Should only be used by proof. ;  ;  RooProfileLL (const char *name, const char *title, RooAbsReal &nll, const RooArgSet &observables);  Constructor of profile likelihood given input likelihood nll w.r.t the given set of variables. ;  ;  RooProfileLL (const RooProfileLL &other, const char *name=nullptr);  Copy constructor. ;  ; bool alwaysStartFromMin () const;  ; const RooArgSet & bestFitObs () const;  ; const RooArgSet & bestFitParams () const;  ; void clearAbsMin ();  ; TObject * clone (const char *newname) const override;  ; RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest) override;  Optimized implementation of createProfile for profile likelihoods. ;  ; TClass * IsA () const override;  ; RooMinimizer * minimizer ();  ; RooAbsReal & nll ();  ; Int_t numEval () const;  ; bool redirectServersHook (const RooAbsCollection &, bool, bool, bool) override;  Function that is called at the end of redirectServers(). ;  ; void setAlwaysStartFromMin (bool flag);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProfileLL.html:68,Guid,Guide,68,doc/master/classRooProfileLL.html,https://root.cern,https://root.cern/doc/master/classRooProfileLL.html,1,['Guid'],['Guide']
Usability,". ROOT: RooProjectedPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooProjectedPdf Class ReferenceRooFit » RooFit Core. ; A RooAbsPdf implementation that represent a projection of a given input p.d.f and the object returned by RooAbsPdf::createProjection. ; The actual projection integral for it value and normalization are calculated on the fly in getVal() once the normalization observables are known. Class RooProjectedPdf can cache projected p.d.f.s for multiple normalization observables simultaneously. The createProjection() method of RooProjectedPdf is overloaded and will return a new RooProjectedPdf that performs the projection of itself and the requested additional projections in one integration step The performance of f->createProjection(x)->createProjection(y) is therefore identical to that of f->createProjection(RooArgSet(x,y)); Definition at line 21 of file RooProjectedPdf.h. Classes; class  CacheElem;  . Public Member Functions;  RooProjectedPdf ();  Default constructor. ;  ;  RooProjectedPdf (const char *name, const char *title, RooAbsReal &_intpdf, const RooArgSet &intObs);  Construct projection of input pdf '_intpdf' over observables 'intObs'. ;  ;  RooProjectedPdf (const RooProjectedPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Return analytical integral represent by appropriate element of projection cache. ;  ; TObject * clone (const char *newname) const override;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooAbsPdf * createProjection (const RooArgSet &iset) override;  Special version of RooAbsReal::createProjecti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProjectedPdf.html:71,Guid,Guide,71,doc/master/classRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classRooProjectedPdf.html,1,['Guid'],['Guide']
Usability,". ROOT: RooProofDriverSelector Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; RooProofDriverSelector Class Reference. . Definition at line 16 of file RooProofDriverSelector.h. Public Member Functions;  RooProofDriverSelector (TTree *=nullptr);  ; Int_t GetEntry (Long64_t entry, Int_t getall=0) override;  ; TList * GetOutputList () const override;  ; void Init (TTree *tree) override;  ; TClass * IsA () const override;  ; bool Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; bool Process (Long64_t entry) override;  The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ;  ; void SetInputList (TList *input) override;  ; void SetObject (TObject *obj) override;  ; void SetOption (const char *option) override;  ; void SlaveBegin (TTree *tree) override;  ; void SlaveTerminate () override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Version () const override;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual void Begin (TTree *);  ; virtual EAbort GetAbort () const;  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual Long64_t GetStatus () const;  ; virtual void ImportOutput (TList *output);  Imports the content of 'output' in the internal output list. ;  ; TClass * IsA () const override;  ; bool Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProofDriverSelector.html:78,Guid,Guide,78,doc/master/classRooProofDriverSelector.html,https://root.cern,https://root.cern/doc/master/classRooProofDriverSelector.html,1,['Guid'],['Guide']
Usability,". ROOT: RooPullVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooPullVar Class ReferenceRooFit » RooFit Core. ; Represents the pull of a measurement w.r.t. ; the true value using the measurement and its error. Both the true value and the measured value (with error) are taken from two user-supplied RooRealVars. If the measured parameter has an asymmetric error, the proper side of that error will be used: ; \[; \mathrm{Pull}_x = \frac{x_\mathrm{meas}-x_\mathrm{true}}{\Delta_x}; \]. Definition at line 24 of file RooPullVar.h. Public Member Functions;  RooPullVar ()=default;  ;  RooPullVar (const char *name, const char *title, RooRealVar &measurement, RooAbsReal &truth);  Construct the pull of the RooRealVar 'meas'. ;  ;  RooPullVar (const RooPullVar &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPullVar.html:66,Guid,Guide,66,doc/master/classRooPullVar.html,https://root.cern,https://root.cern/doc/master/classRooPullVar.html,1,['Guid'],['Guide']
Usability,". ROOT: RooRandomizeParamMCSModule Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooRandomizeParamMCSModule Class ReferenceRooFit » RooFit Core. ; Add-on module to RooMCStudy that allows you to randomize input generation parameters. ; Randomized generation parameters can be sampled from a uniform or Gaussian distribution. For every randomized parameter, an extra variable is added to RooMCStudy::fitParDataSet() named <parname>_gen that indicates the actual value used for generation for each trial. You can also choose to randomize the sum of N parameters, rather than a single parameter. In that case common multiplicative scale factor is applied to each component to bring the sum to the desired target value taken from either uniform or Gaussian sampling. This latter option is for example useful if you want to change the total number of expected events of an extended p.d.f ; Definition at line 24 of file RooRandomizeParamMCSModule.h. Classes; struct  GausParam;  ; struct  GausParamSet;  ; struct  UniParam;  ; struct  UniParamSet;  . Public Member Functions;  RooRandomizeParamMCSModule ();  Constructor. ;  ;  RooRandomizeParamMCSModule (const RooRandomizeParamMCSModule &other);  Copy constructor. ;  ;  ~RooRandomizeParamMCSModule () override;  ; RooDataSet * finalizeRun () override;  Return auxiliary data of this module so that it is merged with RooMCStudy::fitParDataSet() ;  ; bool initializeInstance () override;  Initialize module after attachment to RooMCStudy object. ;  ; bool initializeRun (Int_t) override;  Initialize module at beginning of RooCMStudy run. ;  ; TClass * IsA () const override;  ; bool processBeforeGen (Int_t) override;  Apply all smearings to generator parameters. ;  ; void sampleGaussian (RooRealVar &param, double mean, double sigma);  Request Gaussian smearing ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRandomizeParamMCSModule.html:82,Guid,Guide,82,doc/master/classRooRandomizeParamMCSModule.html,https://root.cern,https://root.cern/doc/master/classRooRandomizeParamMCSModule.html,1,['Guid'],['Guide']
Usability,". ROOT: RooRangeBinning Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooRangeBinning Class ReferenceRooFit » RooFit Core. ; Binning/range definition that only defines a range but no binning. ; It it used to store named ranges created by the RooRealVar::setRange() method. ; Definition at line 21 of file RooRangeBinning.h. Public Member Functions;  RooRangeBinning (const char *name=nullptr);  Default constructor. ;  ;  RooRangeBinning (const RooRangeBinning &, const char *name=nullptr);  Copy constructor. ;  ;  RooRangeBinning (double xmin, double xmax, const char *name=nullptr);  Construct binning with range [xmin,xmax] with no binning substructure. ;  ; double * array () const override;  ; double averageBinWidth () const override;  ; double binCenter (Int_t) const override;  ; double binHigh (Int_t) const override;  ; double binLow (Int_t) const override;  ; void binNumbers (double const *, int *, std::size_t, int) const override;  Compute the bin indices for multiple values of x. ;  ; double binWidth (Int_t) const override;  ; RooAbsBinning * clone (const char *name=nullptr) const override;  ; double highBound () const override;  ; TClass * IsA () const override;  ; double lowBound () const override;  ; Int_t numBoundaries () const override;  ; void setMax (double xhi) override;  Change upper bound to xhi. ;  ; void setMin (double xlo) override;  Change lower bound to xlo. ;  ; void setRange (double xlo, double xhi) override;  Change limits of the binning to [xlo,xhi]. ;  ; void Streamer (TBuffer &) override;  Custom streamer implementing schema evolution between V1 and V2 persistent binnings. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsBinning;  RooAbsBinning (const char *name=nullptr);  ;  RooAbsBinning (const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRangeBinning.html:71,Guid,Guide,71,doc/master/classRooRangeBinning.html,https://root.cern,https://root.cern/doc/master/classRooRangeBinning.html,1,['Guid'],['Guide']
Usability,". ROOT: RooRangeBoolean Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooRangeBoolean Class ReferenceRooFit » RooFit Core. ; Returns 1.0 if variable is within given a range and 0.0 otherwise. ; Definition at line 26 of file RooRangeBoolean.h. Public Member Functions;  RooRangeBoolean ()=default;  ;  RooRangeBoolean (const char *name, const char *title, RooAbsRealLValue &x, const char *rangeName);  ;  RooRangeBoolean (const RooRangeBoolean &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual ana",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRangeBoolean.html:71,Guid,Guide,71,doc/master/classRooRangeBoolean.html,https://root.cern,https://root.cern/doc/master/classRooRangeBoolean.html,1,['Guid'],['Guide']
Usability,". ROOT: RooRatio Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooRatio Class ReferenceRooFit » RooFit Core. ; Represents the ratio of two RooAbsReal objects. ; Definition at line 21 of file RooRatio.h. Public Member Functions;  RooRatio ();  ;  RooRatio (const char *name, const char *title, const RooArgList &num, const RooArgList &denom);  ;  RooRatio (const char *name, const char *title, double numerator, double denominator);  ;  RooRatio (const char *name, const char *title, double numerator, RooAbsReal &denominator);  ;  RooRatio (const char *name, const char *title, RooAbsReal &numerator, double denominator);  ;  RooRatio (const char *name, const char *title, RooAbsReal &numerator, RooAbsReal &denominator);  ;  RooRatio (const RooRatio &other, const char *name=nullptr);  ;  ~RooRatio () override;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRatio.html:64,Guid,Guide,64,doc/master/classRooRatio.html,https://root.cern,https://root.cern/doc/master/classRooRatio.html,1,['Guid'],['Guide']
Usability,". ROOT: RooRealIntegral Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; RooRealIntegral Class ReferenceRooFit » RooFit Core. ; Performs hybrid numerical/analytical integrals of RooAbsReal objects. ; The class performs none of the actual integration, but only manages the logic of what variables can be integrated analytically, accounts for eventual jacobian terms and defines what numerical integrations needs to be done to complement the analytical integral. The actual analytical integrations (if any) are done in the PDF themselves, the numerical integration is performed in the various implementations of the RooAbsIntegrator base class. ; Definition at line 29 of file RooRealIntegral.h. Public Member Functions;  RooRealIntegral ();  ;  RooRealIntegral (const char *name, const char *title, const RooAbsReal &function, const RooArgSet &depList, const RooArgSet *funcNormSet=nullptr, const RooNumIntConfig *config=nullptr, const char *rangeName=nullptr);  Construct integral of 'function' over observables in 'depList' in range 'rangeName' with normalization observables 'funcNormSet' (for p.d.f.s). ;  ;  RooRealIntegral (const RooRealIntegral &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooRealIntegral () override;  ; const RooArgSet & anaIntVars () const;  ; TObject * clone (const char *newname) const override;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const override;  Create an object that represents the integral of the fu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:71,Guid,Guide,71,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,1,['Guid'],['Guide']
Usability,". ROOT: RooRealMPFE Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooRealMPFE Class ReferenceRooFit » RooFit Core. ; Multi-processor front-end for parallel calculation of RooAbsReal objects. ; Each RooRealMPFE forks a process that calculates the value of the proxies RooAbsReal object. The (re)calculation of the proxied object is started asynchronously with the calculate() option. A subsequent call to getVal() will return the calculated value when available If the calculation is still in progress when getVal() is called it blocks the calling process until the calculation is done. The forked calculation process is terminated when the front-end object is deleted Simple use demonstration; RooAbsReal* slowFunc ;; ; double val = slowFunc->getVal() // Evaluate slowFunc in current process; ; RooRealMPFE mpfe(""mpfe"",""frontend to slowFunc"",*slowFunc) ;; mpfe.calculate() ; // Start calculation of slow-func in remote process; // .. do other stuff here ..; double val = mpfe.getVal() // Wait for remote calculation to finish and retrieve value; RooAbsRealAbstract base class for objects that represent a real value and implements functionality common to al...Definition RooAbsReal.h:59; RooAbsReal::getValdouble getVal(const RooArgSet *normalisationSet=nullptr) constEvaluate object.Definition RooAbsReal.h:103; RooRealMPFEMulti-processor front-end for parallel calculation of RooAbsReal objects.Definition RooRealMPFE.h:29; For general multiprocessing in ROOT, please refer to the TProcessExecutor class. ; Definition at line 29 of file RooRealMPFE.h. Public Member Functions;  RooRealMPFE (const char *name, const char *title, RooAbsReal &arg, bool calcInline=false);  Construct front-end object for object 'arg' whose evaluation will be calculated asynchronously in a separate process. ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealMPFE.html:67,Guid,Guide,67,doc/master/classRooRealMPFE.html,https://root.cern,https://root.cern/doc/master/classRooRealMPFE.html,2,"['Guid', 'Simpl']","['Guide', 'Simple']"
Usability,". ROOT: RooRealSumFunc Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; RooRealSumFunc Class Reference. . Definition at line 26 of file RooRealSumFunc.h. Public Member Functions;  RooRealSumFunc ();  ;  RooRealSumFunc (const char *name, const char *title);  ;  RooRealSumFunc (const char *name, const char *title, const RooArgList &funcList, const RooArgList &coefList);  ;  RooRealSumFunc (const char *name, const char *title, RooAbsReal &func1, RooAbsReal &func2, RooAbsReal &coef1);  ;  RooRealSumFunc (const RooRealSumFunc &other, const char *name=nullptr);  ;  ~RooRealSumFunc () override;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; CacheMode canNodeBeCached () const override;  ; bool checkObservables (const RooArgSet *nset) const override;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; TObject * clone (const char *newname) const override;  ; const RooArgList & coefList () const;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; bool forceAnalyticalInt (const RooAbsArg &arg) const override;  ; const RooArgList & funcList () const;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Variant of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealSumFunc.html:70,Guid,Guide,70,doc/master/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/master/classRooRealSumFunc.html,1,['Guid'],['Guide']
Usability,". ROOT: RooRealSumFunc Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; RooRealSumFunc Class Reference. . Definition at line 26 of file RooRealSumFunc.h. Public Member Functions;  RooRealSumFunc ();  ;  RooRealSumFunc (const char *name, const char *title);  ;  RooRealSumFunc (const char *name, const char *title, const RooArgList &funcList, const RooArgList &coefList);  ;  RooRealSumFunc (const char *name, const char *title, RooAbsReal &func1, RooAbsReal &func2, RooAbsReal &coef1);  ;  RooRealSumFunc (const RooRealSumFunc &other, const char *name=nullptr);  ;  ~RooRealSumFunc () override;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; CacheMode canNodeBeCached () const override;  ; bool checkObservables (const RooArgSet *nset) const override;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; TObject * clone (const char *newname) const override;  ; const RooArgList & coefList () const;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; bool forceAnalyticalInt (const RooAbsArg &arg) const override;  ; const RooArgList & funcList () const;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Variant of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumFunc.html:69,Guid,Guide,69,doc/v632/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html,1,['Guid'],['Guide']
Usability,". ROOT: RooRealSumPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Friends |; List of all members ; RooRealSumPdf Class ReferenceRooFit » RooFit Core. ; Implements a PDF constructed from a sum of functions: . \[; \mathrm{PDF}(x) = \frac{ \sum_{i=1}^{n-1} \mathrm{coef}_i * \mathrm{func}_i(x) + \left[ 1 - \sum_{i=1}^{n-1} \mathrm{coef}_i \right] * \mathrm{func}_n(x) }; {\sum_{i=1}^{n-1} \mathrm{coef}_i * \int \mathrm{func}_i(x)dx + \left[ 1 - \sum_{i=1}^{n-1} \mathrm{coef}_i \right] * \int \mathrm{func}_n(x) dx }; \]. where \(\mathrm{coef}_i\) and \(\mathrm{func}_i\) are RooAbsReal objects, and \( x \) is the collection of dependents. In the present version \(\mathrm{coef}_i\) may not depend on \( x \), but this limitation could be removed should the need arise.; If the number of coefficients is one less than the number of functions, the PDF is assumed to be normalised. Due to this additional constraint, \(\mathrm{coef}_n\) is computed from the other coefficients. Extending the PDF; If an \( n^\mathrm{th} \) coefficient is provided, the PDF can be used as an extended PDF, i.e. the total number of events will be measured in addition to the fractions of the various functions. This requires setting the last argument of the constructor to true. NoteFor the RooAddPdf, the extension happens automatically. Difference to RooAddPdf / RooRealSumFunc. RooAddPdf is a PDF of PDFs, i.e. its components need to be normalised and non-negative.; RooRealSumPdf is a PDF of functions, i.e., its components can be negative, but their sum cannot be. The normalisation is computed automatically, unless the PDF is extended (see above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Definiti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealSumPdf.html:69,Guid,Guide,69,doc/master/classRooRealSumPdf.html,https://root.cern,https://root.cern/doc/master/classRooRealSumPdf.html,1,['Guid'],['Guide']
Usability,". ROOT: RooRealSumPdf Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Friends |; List of all members ; RooRealSumPdf Class ReferenceRooFit » RooFit Core. ; Implements a PDF constructed from a sum of functions: . \[; \mathrm{PDF}(x) = \frac{ \sum_{i=1}^{n-1} \mathrm{coef}_i * \mathrm{func}_i(x) + \left[ 1 - \sum_{i=1}^{n-1} \mathrm{coef}_i \right] * \mathrm{func}_n(x) }; {\sum_{i=1}^{n-1} \mathrm{coef}_i * \int \mathrm{func}_i(x)dx + \left[ 1 - \sum_{i=1}^{n-1} \mathrm{coef}_i \right] * \int \mathrm{func}_n(x) dx }; \]. where \(\mathrm{coef}_i\) and \(\mathrm{func}_i\) are RooAbsReal objects, and \( x \) is the collection of dependents. In the present version \(\mathrm{coef}_i\) may not depend on \( x \), but this limitation could be removed should the need arise.; If the number of coefficients is one less than the number of functions, the PDF is assumed to be normalised. Due to this additional constraint, \(\mathrm{coef}_n\) is computed from the other coefficients. Extending the PDF; If an \( n^\mathrm{th} \) coefficient is provided, the PDF can be used as an extended PDF, i.e. the total number of events will be measured in addition to the fractions of the various functions. This requires setting the last argument of the constructor to true. NoteFor the RooAddPdf, the extension happens automatically. Difference to RooAddPdf / RooRealSumFunc. RooAddPdf is a PDF of PDFs, i.e. its components need to be normalised and non-negative.; RooRealSumPdf is a PDF of functions, i.e., its components can be negative, but their sum cannot be. The normalisation is computed automatically, unless the PDF is extended (see above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumPdf.html:68,Guid,Guide,68,doc/v632/classRooRealSumPdf.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html,1,['Guid'],['Guide']
Usability,". ROOT: RooRealVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; RooRealVar Class ReferenceRooFit » RooFit Core. ; Variable that can be changed from the outside. ; For example by the user or a fitter.; It can be written into datasets, can hold a (possibly asymmetric) error, and can have several ranges. These can be accessed with names, to e.g. limit fits or integrals to sub ranges. The range without any name is used as default range. ; Definition at line 37 of file RooRealVar.h. Public Member Functions;  RooRealVar ();  Default constructor. ;  ;  RooRealVar (const char *name, const char *title, double minValue, double maxValue, const char *unit="""");  Create a variable allowed to float in the given range. ;  ;  RooRealVar (const char *name, const char *title, double value, const char *unit="""");  Create a constant variable with a value and optional unit. ;  ;  RooRealVar (const char *name, const char *title, double value, double minValue, double maxValue, const char *unit="""");  Create a variable with the given starting value. ;  ;  RooRealVar (const RooRealVar &other, const char *name=nullptr);  Copy Constructor. ;  ;  ~RooRealVar () override;  Destructor. ;  ; TObject * clone (const char *newname) const override;  ; void copyCacheFast (const RooRealVar &other, bool setValDirty=true);  ; Int_t defaultPrintContents (Option_t *opt) const override;  Mapping of Print() option string to RooPrintable contents specifications. ;  ; void deleteSharedProperties ();  Stop sharing properties. ;  ; RooErrorVar * errorVar () const;  Return a RooAbsRealLValue representing the error associated with this variable. ;  ; TString * format (const RooCmdArg &formatArg) const;  Format contents of R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVar.html:66,Guid,Guide,66,doc/master/classRooRealVar.html,https://root.cern,https://root.cern/doc/master/classRooRealVar.html,1,['Guid'],['Guide']
Usability,. ROOT: RooRealVarSharedProperties Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Friends |; List of all members ; RooRealVarSharedProperties Class ReferenceRooFit » RooFit Core. ; Implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones. ; For RooRealVars these are the definitions of the named ranges. ; Definition at line 39 of file RooRealVarSharedProperties.h. Public Member Functions;  RooRealVarSharedProperties ();  Default constructor. ;  ;  RooRealVarSharedProperties (const char *uuidstr);  Constructor with unique-id string. ;  ;  ~RooRealVarSharedProperties () override;  Destructor. ;  ; void disownBinnings ();  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooSharedProperties;  RooSharedProperties ();  Default constructor. ;  ;  RooSharedProperties (const char *uuidstr);  Constructor with unique-id string. ;  ;  RooSharedProperties (const RooSharedProperties &)=delete;  ;  RooSharedProperties (RooSharedProperties &&)=delete;  ;  ~RooSharedProperties () override;  Destructor. ;  ; void decreaseRefCount ();  ; void increaseRefCount ();  ; bool inSharedList () const;  ; TClass * IsA () const override;  ; RooSharedProperties & operator= (const RooSharedProperties &)=delete;  ; RooSharedProperties & operator= (RooSharedProperties &&)=delete;  ; bool operator== (const RooSharedProperties &other) const;  Return true of unique id of this property is equal to that of other. ;  ; void Print (Option_t *opts=nullptr) const override;  Printing interface. ;  ; Int_t refCount () const;  ; void setInSharedList ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVarSharedProperties.html:82,Guid,Guide,82,doc/master/classRooRealVarSharedProperties.html,https://root.cern,https://root.cern/doc/master/classRooRealVarSharedProperties.html,1,['Guid'],['Guide']
Usability,". ROOT: RooRecursiveFraction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooRecursiveFraction Class ReferenceRooFit » RooFit Core. ; A RooAbsReal implementation that calculates the plain fraction of sum of RooAddPdf components from a set of recursive fractions: for a given set of input fractions \( {a_i} \), it returns \( a_n * \prod_{i=0}^{n-1} (1 - a_i) \). ; Definition at line 25 of file RooRecursiveFraction.h. Public Member Functions;  RooRecursiveFraction ()=default;  ;  RooRecursiveFraction (const char *name, const char *title, const RooArgList &fracSet);  Constructor of plain RooAddPdf fraction from list of recursive fractions. ;  ;  RooRecursiveFraction (const RooRecursiveFraction &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRecursiveFraction.html:76,Guid,Guide,76,doc/master/classRooRecursiveFraction.html,https://root.cern,https://root.cern/doc/master/classRooRecursiveFraction.html,1,['Guid'],['Guide']
Usability,". ROOT: RooRefArray Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; RooRefArray Class Reference. . Definition at line 64 of file RooAbsArg.h. Public Member Functions;  RooRefArray ()=default;  ;  RooRefArray (const RooRefArray &other);  ; TClass * IsA () const override;  ; RooRefArray & operator= (const RooRefArray &other)=default;  ; void Streamer (TBuffer &) override;  Stream an object of class RooRefArray. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObjArray;  TObjArray (const TObjArray &a);  Create a copy of TObjArray a. Note, does not copy the kIsOwner flag. ;  ;  TObjArray (Int_t s=TCollection::kInitCapacity, Int_t lowerBound=0);  Create an object array. ;  ; virtual ~TObjArray ();  Delete an array. ;  ; void Add (TObject *obj) override;  ; void AddAfter (const TObject *after, TObject *obj) override;  Add object in the slot after object after. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Add object at position ids. ;  ; virtual void AddAtAndExpand (TObject *obj, Int_t idx);  Add object at position idx. ;  ; virtual Int_t AddAtFree (TObject *obj);  Return the position of the new object. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Add object in the slot before object before. ;  ; void AddFirst (TObject *obj) override;  Add object in the first slot of the array. ;  ; void AddLast (TObject *obj) override;  Add object in the next empty slot in the array. ;  ; TObject * After (const TObject *obj) const override;  Return the object after obj. Returns 0 if obj is last object. ;  ; TObject * At (Int_t idx) const override;  ; TObject * Before (const TObject *obj) const override;  Return the object before obj. Returns 0 if obj is first object. ;  ; virtual Int_t BinarySearch (TObject *obj, Int_t upto=kMaxInt);  Find obje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRefArray.html:67,Guid,Guide,67,doc/master/classRooRefArray.html,https://root.cern,https://root.cern/doc/master/classRooRefArray.html,1,['Guid'],['Guide']
Usability,". ROOT: RooResolutionModel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooResolutionModel Class Referenceabstract. ; RooResolutionModel is the base class for PDFs that represent a resolution model that can be convoluted with a physics model of the form. . \[; \mathrm{Phys}(x,a,b) = \sum_k \mathrm{coef}_k(a) * \mathrm{basis}_k(x,b); \]. where basis_k are a limited number of functions in terms of the variable to be convoluted and coef_k are coefficients independent of the convolution variable.; Classes derived from RooResolutionModel implement ; \[; R_k(x,\bar{b},\bar{c}) = \int \mathrm{basis}_k(x',\bar{b}) * \mathrm{resModel}(x-x',\bar{c}) \; \mathrm{d} x',; \]. which RooAbsAnaConvPdf uses to construct the pdf for [ Phys (x) R ] : ; \[; \mathrm{PDF}(x,\bar a, \bar b, \bar c) = \sum_k \mathrm{coef}_k(\bar a) * R_k(x, \bar b, \bar c); \]. A minimal implementation of a RooResolutionModel consists of a Int_t basisCode(const char* name); namechar name[80]Definition TGX11.cxx:110; RooResolutionModel::basisCodevirtual Int_t basisCode(const char *name) const =0; int; function indicating which basis functions this resolution model supports, and double evaluate(),; RooAbsReal::evaluatevirtual double evaluate() const =0Evaluate this PDF / function / constant. Needs to be overridden by all derived classes.; which should implement the resolution model (optionally convoluted with one of the supported basis functions). RooResolutionModel objects can be used as regular PDFs (They inherit from RooAbsPdf), or as resolution model convoluted with a basis function. The implementation of evaluate() can identify the requested mode using basisCode(). If zero, the regular PDF value should be calculated. If non-zero, the model's value convoluted with the basis function ide",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooResolutionModel.html:74,Guid,Guide,74,doc/master/classRooResolutionModel.html,https://root.cern,https://root.cern/doc/master/classRooResolutionModel.html,1,['Guid'],['Guide']
Usability,. ROOT: RooSTLRefCountList< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. RooSTLRefCountList< T > Class Template Reference. ; template<class T>; class RooSTLRefCountList< T >; Definition at line 33 of file RooLinkedList.h.; The documentation for this class was generated from the following file:; roofit/roofitcore/inc/RooLinkedList.h. RooSTLRefCountList. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:09 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSTLRefCountList.html:88,Guid,Guide,88,doc/master/classRooSTLRefCountList.html,https://root.cern,https://root.cern/doc/master/classRooSTLRefCountList.html,2,['Guid'],['Guide']
Usability,". ROOT: RooSecondMoment Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooSecondMoment Class ReferenceRooFit » RooFit Core. . Definition at line 27 of file RooSecondMoment.h. Public Member Functions;  RooSecondMoment ()=default;  ;  RooSecondMoment (const char *name, const char *title, RooAbsReal &func, RooRealVar &x, bool central=false, bool takeRoot=false);  ;  RooSecondMoment (const char *name, const char *title, RooAbsReal &func, RooRealVar &x, const RooArgSet &nset, bool central=false, bool takeRoot=false, bool intNSet=false);  ;  RooSecondMoment (const RooSecondMoment &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; const RooAbsReal & iF ();  ; TClass * IsA () const override;  ; const RooAbsReal & ixF ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; const RooAbsReal & xF ();  ;  Public Member Functions inherited from RooAbsMoment;  RooAbsMoment ()=default;  ;  RooAbsMoment (const char *name, const char *title, RooAbsReal &func, RooRealVar &x, Int_t order=1, bool takeRoot=false);  ;  RooAbsMoment (const RooAbsMoment &other, const char *name=nullptr);  ; bool central () const;  ; RooAbsReal * mean ();  ; Int_t order () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *nam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSecondMoment.html:71,Guid,Guide,71,doc/master/classRooSecondMoment.html,https://root.cern,https://root.cern/doc/master/classRooSecondMoment.html,1,['Guid'],['Guide']
Usability,". ROOT: RooSharedProperties Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooSharedProperties Class ReferenceRooFit » RooFit Core. ; Class RooSharedProperties is the base class for shared properties that can be stored in RooSharedPropertiesList. ; Definition at line 22 of file RooSharedProperties.h. Classes; class  UUID;  . Public Member Functions;  RooSharedProperties ();  Default constructor. ;  ;  RooSharedProperties (const char *uuidstr);  Constructor with unique-id string. ;  ;  RooSharedProperties (const RooSharedProperties &)=delete;  ;  RooSharedProperties (RooSharedProperties &&)=delete;  ;  ~RooSharedProperties () override;  Destructor. ;  ; void decreaseRefCount ();  ; void increaseRefCount ();  ; bool inSharedList () const;  ; TClass * IsA () const override;  ; RooSharedProperties & operator= (const RooSharedProperties &)=delete;  ; RooSharedProperties & operator= (RooSharedProperties &&)=delete;  ; bool operator== (const RooSharedProperties &other) const;  Return true of unique id of this property is equal to that of other. ;  ; void Print (Option_t *opts=nullptr) const override;  Printing interface. ;  ; Int_t refCount () const;  ; void setInSharedList ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; UUID uuid () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Br",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSharedProperties.html:75,Guid,Guide,75,doc/master/classRooSharedProperties.html,https://root.cern,https://root.cern/doc/master/classRooSharedProperties.html,1,['Guid'],['Guide']
Usability,". ROOT: RooSimGenContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooSimGenContext Class ReferenceRooFit » RooFit Core. ; Efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs. ; It runs in two modes:; Proto data with category entries are given: An event from the same category as in the proto data is created.; No proto data: A category is chosen randomly. NoteThis requires that the PDFs are extended, to determine the relative probabilities that an event originates from a certain category. . Definition at line 27 of file RooSimGenContext.h. Public Member Functions;  RooSimGenContext (const RooSimultaneous &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor of specialized generator context for RooSimultaneous p.d.f.s. ;  ;  ~RooSimGenContext () override;  ; void attach (const RooArgSet &params) override;  Attach the index category clone to the given event buffer. ;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Detailed printing interface. ;  ; void setProtoDataOrder (Int_t *lut) override;  Set the traversal order of the prototype data to that in the given lookup table. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsGenContext;  RooAbsGenContext (const RooAbsPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; Int_t defaultPrintContents (Option_t *opt) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimGenContext.html:72,Guid,Guide,72,doc/master/classRooSimGenContext.html,https://root.cern,https://root.cern/doc/master/classRooSimGenContext.html,1,['Guid'],['Guide']
Usability,". ROOT: RooSimSplitGenContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooSimSplitGenContext Class ReferenceRooFit » RooFit Core. ; Efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs. ; Definition at line 27 of file RooSimSplitGenContext.h. Public Member Functions;  RooSimSplitGenContext (const RooSimultaneous &model, const RooArgSet &vars, bool _verbose=false, bool autoBinned=true, const char *binnedTag="""");  Constructor of specialized generator context for RooSimultaneous p.d.f.s. ;  ;  ~RooSimSplitGenContext () override;  Destructor. Delete all owned subgenerator contexts. ;  ; void attach (const RooArgSet &params) override;  Attach the index category clone to the given event buffer. ;  ; RooDataSet * generate (double nEvents=0, bool skipInit=false, bool extendedMode=false) override;  Generate the specified number of events with nEvents>0 and and return a dataset containing the generated events. ;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Detailed printing interface. ;  ; void setExpectedData (bool) override;  Forward to components. ;  ; void setProtoDataOrder (Int_t *lut) override;  this method is empty because proto datasets are not supported by this context ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsGenContext;  RooAbsGenContext (const RooAbsPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; Int_t defaultPrintContents ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimSplitGenContext.html:77,Guid,Guide,77,doc/master/classRooSimSplitGenContext.html,https://root.cern,https://root.cern/doc/master/classRooSimSplitGenContext.html,1,['Guid'],['Guide']
Usability,". ROOT: RooSimWSTool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooSimWSTool Class Reference. ; The RooSimWSTool is a tool operating on RooWorkspace objects that can clone PDFs into a series of variations that are joined together into a RooSimultaneous PDF. . Splitting a single PDF; The simplest use case is to take a workspace PDF as prototype and ""split"" a parameter of that PDF into two specialized parameters depending on a category in the dataset.; For example, given a Gaussian PDF \( G(x \,|\, m,s) \) we want to construct a \( G_a(x \,|\, m_a,s) \) and a \( G_b(x \,|\, m_b,s) \) with different mean parameters to be fit to a dataset with observables \( (x,c) \) where \( c \) is a category with states 'a' and 'b'.; Using RooSimWSTool, one can create a simultaneous PDF from \( G_a \) and \( G_b \) from \( G \) with the following commands: RooSimWSTool wst(wspace);; wst.build(""G_sim"", ""G"", SplitParam(""m"",""c""));; RooSimWSToolThe RooSimWSTool is a tool operating on RooWorkspace objects that can clone PDFs into a series of var...Definition RooSimWSTool.h:38; Splitting using a product category; From this simple example one can go to builds of arbitrary complexity by specifying multiple SplitParam arguments on multiple parameters involving multiple splitting categories. Splits can also be performed in the product of multiple categories, i.e., wst.build(""G_sim"", ""G"", SplitParam(""m"",""c,d""));; splits the parameter \( m \) in the product of the states of \( c \) and \( d \).; Constrained split; Another possibility is the ""constrained"" split, which clones the parameter for all but one state and inserts a formula specialization in a chosen state that evaluates to \( 1 - \sum_i(a_i) \) where \( a_i \) are all other specializations. For example, given a category \( c \) with the states ""A"",""B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimWSTool.html:68,Guid,Guide,68,doc/master/classRooSimWSTool.html,https://root.cern,https://root.cern/doc/master/classRooSimWSTool.html,2,"['Guid', 'simpl']","['Guide', 'simplest']"
Usability,". ROOT: RooSimWSTool::SplitRule Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooSimWSTool::SplitRule Class Reference. . Definition at line 75 of file RooSimWSTool.h. Public Member Functions;  SplitRule (const char *pdfName="""");  ; void splitParameter (const char *paramList, const char *categoryList);  Specify that parameters names listed in paramNameList be split in (product of) category(s) listed in categoryNameList. ;  ; void splitParameterConstrained (const char *paramNameList, const char *categoryNameList, const char *remainderStateName);  Specify that parameters names listed in paramNameList be split in constrained way in (product of) category(s) listed in categoryNameList and that remainder fraction formula be put in state with name remainderStateName. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimWSTool_1_1SplitRule.html:79,Guid,Guide,79,doc/master/classRooSimWSTool_1_1SplitRule.html,https://root.cern,https://root.cern/doc/master/classRooSimWSTool_1_1SplitRule.html,1,['Guid'],['Guide']
Usability,". ROOT: RooSimultaneous Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooSimultaneous Class ReferenceRooFit » RooFit Core. ; Facilitates simultaneous fitting of multiple PDFs to subsets of a given dataset. ; The class takes an index category, which is used as a selector for PDFs, and a list of PDFs, each associated with a state of the index category. RooSimultaneous always returns the value of the PDF that is associated with the current value of the index category.; Extended likelihood fitting is supported if all components support extended likelihood mode. The expected number of events by a RooSimultaneous is that of the component p.d.f. selected by the index category.; The index category can be accessed using indexCategory(). Generating events; When generating events from a RooSimultaneous, the index category has to be added to the dataset. Further, the PDF needs to know the relative probabilities of each category, i.e., how many events are in which category. This can be achieved in two ways:; Generating with proto data that have category entries: An event from the same category as in the proto data is created for each event in the proto data. See RooAbsPdf::generate(const RooArgSet&,const RooDataSet&,Int_t,bool,bool,bool) const.; No proto data: A category is chosen randomly. NoteThis requires that the PDFs building the simultaneous are extended. In this way, the relative probability of each category can be calculated from the number of events in each category. PyROOT; Some member functions of RooSimultaneous that take a RooCmdArg as argument also support keyword arguments. So far, this applies to RooSimultaneous::plotOn. For example, the following cod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimultaneous.html:71,Guid,Guide,71,doc/master/classRooSimultaneous.html,https://root.cern,https://root.cern/doc/master/classRooSimultaneous.html,1,['Guid'],['Guide']
Usability,". ROOT: RooSpHarmonic Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; RooSpHarmonic Class ReferenceRooFit » RooFit. ; Implementation of the so-called real spherical harmonics, using the orthonormal normalization, which are related to spherical harmonics as: . \[; Y_{l0} = Y_l^0 (m=0) \\; Y_{lm} = \frac{1}{\sqrt{2}} \left( Y_l^m + (-1)^m Y_l^{-m} \right) (m>0) \\; Y_{lm} = \frac{1}{i\sqrt{2}} \left( Y_l^{|m|} - (-1)^{|m|} Y_l^{-|m|} \right) (m<0); \]. which implies: ; \[; Y_{l0}(\cos\theta,\phi) = N_{l0} P_l^0 (\cos\theta) (m=0); Y_{lm}(\cos\theta,\phi) = \sqrt{2} N_{lm} P_l^m (\cos\theta) cos(|m|\phi) (m>0); Y_{lm}(\cos\theta,\phi) = \sqrt{2} N_{l|m|} P_l^{|m|}(\cos\theta) sin(|m|\phi) (m<0); \]. where ; \[; N_{lm} = \sqrt{ \frac{2l+1}{4\pi} \frac{ (l-m)! }{ (l+m)! } }; \]. Note that the normalization corresponds to the orthonormal case, and thus we have \( \int d\cos\theta d\phi Y_{lm} Y_{l'm'} = \delta_{ll'} \delta{mm'}\); Note that in addition, this code can also represent the product of two (real) spherical harmonics – it actually uses the fact that \(Y_{00} = \sqrt{\frac{1}{4\pi}}\) in order to represent a single spherical harmonics by multiplying it by \(\sqrt{4\pi} Y_00\), as this makes it trivial to compute the analytical integrals, using the orthogonality properties of \(Y_l^m\)... ; Definition at line 20 of file RooSpHarmonic.h. Public Member Functions;  RooSpHarmonic ();  ;  RooSpHarmonic (const char *name, const char *title, RooAbsReal &ctheta, RooAbsReal &phi, int l, int m);  ;  RooSpHarmonic (const char *name, const char *title, RooAbsReal &ctheta, RooAbsReal &phi, int l1, int m1, int l2, int m2);  ;  RooSpHarmonic (const RooSpHarmonic &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const ove",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSpHarmonic.html:69,Guid,Guide,69,doc/master/classRooSpHarmonic.html,https://root.cern,https://root.cern/doc/master/classRooSpHarmonic.html,1,['Guid'],['Guide']
Usability,". ROOT: RooSpline Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooSpline Class ReferenceRooFit » RooFit. ; A RooFit class for creating spline functions. ; This class provides the functionality to create spline functions in RooFit, , using ROOT TSpline. It supports splines of order 3 or 5. It also support interpolation in the log-space (x or y), for example exp(spline({x0}, {log y0})), useful when you have something (as xsections) that is more similar to exponentials than polynomials.; Usage example: RooRealVar x{""x"", ""x"", 0, 5};; ; std::vector<double> x0{1., 2, 3};; std::vector<double> y0{10., 20, 50};; ; RooSpline spline{""myspline"", ""my spline"", x, x0, y0};; ; auto frame = x.frame();; spline.plotOn(frame);; frame->Draw();; RooAbsReal::plotOnvirtual RooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) constPlot (project) PDF on specified frame.Definition RooAbsReal.cxx:1611; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; RooSplineA RooFit class for creating spline functions.Definition RooSpline.h:27; xDouble_t x[n]Definition legend1.C:17. Definition at line 27 of file RooSpline.h. Public Member Functions;  RooSpline ()=default;  ;  RooSpline (const char *name, const char *title, RooAbsReal &x, const TGraph &gr, int order=3, bool logx=false, bool logy=false);  Constructor for creating a spline from a TGraph. ;  ;  RooSpline (const char *name, const char ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSpline.html:65,Guid,Guide,65,doc/master/classRooSpline.html,https://root.cern,https://root.cern/doc/master/classRooSpline.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Enumerations |; Functions |; Variables ; RooStats Namespace ReferenceRooFit » RooStats » HistFactory | RooFit » RooStats. Namespace for the RooStats classes. ; More... Namespaces; namespace  HistFactory;  ; namespace  NumberCountingUtils;  ; namespace  ROOTDict;  . Classes; class  AcceptanceRegion;  ; class  AsymptoticCalculator;  Hypothesis Test Calculator based on the asymptotic formulae for the profile likelihood ratio. More...;  ; class  BayesianCalculator;  BayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method. More...;  ; class  BernsteinCorrection;  BernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term. More...;  ; class  BranchStore;  ; class  CombinedCalculator;  CombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals. More...;  ; class  ConfidenceBelt;  ConfidenceBelt is a concrete implementation of the ConfInterval interface. More...;  ; class  ConfInterval;  ConfInterval is an interface class for a generic interval in the RooStats framework. More...;  ; class  DebuggingSampler;  ; class  DebuggingTestStat;  ; class  DetailedOutputAggregator;  This class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations. More...;  ; class  FeldmanCousins;  The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction. More...;  ; class  FrequentistCalculator;  Does a frequentist hypothesis test. More...;  ; class  Heaviside;  Represents the Heaviside function. More...;  ; class  HLFactory;  HLFactory is an High Level model Factory allows you to describe your models in a configu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooStats.html:68,Guid,Guide,68,doc/master/namespaceRooStats.html,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html,1,['Guid'],['Guide']
Usability,. ROOT: RooStats Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; RooStats TutorialsTutorials. ; These tutorials illustrate the main features of RooStats. . Files; file  FourBinInstructional.C;   This example is a generalization of the on/off problem. ;  ; file  FourBinInstructional.py;   This example is a generalization of the on/off problem. ;  ; file  HybridInstructional.C;   Example demonstrating usage of HybridCalcultor ;  ; file  HybridStandardForm.C;   A hypothesis testing example based on number counting with background uncertainty. ;  ; file  IntervalExamples.C;   Example showing confidence intervals with four techniques. ;  ; file  IntervalExamples.py;   Example showing confidence intervals with four techniques. ;  ; file  ModelInspector.C;  RooStats Model Inspector. ;  ; file  MultivariateGaussianTest.C;   Comparison of MCMC and PLC in a multi-variate gaussian problem ;  ; file  MultivariateGaussianTest.py;   Comparison of MCMC and PLC in a multi-variate gaussian problem ;  ; file  OneSidedFrequentistUpperLimitWithBands.C;   OneSidedFrequentistUpperLimitWithBands ;  ; file  rs101_limitexample.C;   Limits: number counting experiment with uncertainty on both the background rate and signal efficiency. ;  ; file  rs101_limitexample.py;   Limits: number counting experiment with uncertainty on both the background rate and signal efficiency. ;  ; file  rs102_hypotestwithshapes.C;   A typical search for a new particle by studying an invariant mass distribution ;  ; file  rs301_splot.C;   SPlot tutorial ;  ; file  rs302_JeffreysPriorDemo.C;   tutorial demonstrating and validates the RooJeffreysPrior class ;  ; file  rs401c_FeldmanCousins.C;   Produces an interval on the mean signal in a number counting experiment with known background using the Feldman-Cousins technique. ;  ; file  rs401c_FeldmanCousins.py;   Produces an interval on the mean signal in a number counting experiment with known background using the Fel,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__roostats.html:58,Guid,Guide,58,doc/master/group__tutorial__roostats.html,https://root.cern,https://root.cern/doc/master/group__tutorial__roostats.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::AcceptanceRegion Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::AcceptanceRegion Class Reference. . Definition at line 95 of file ConfidenceBelt.h. Public Member Functions;  AcceptanceRegion ();  ;  AcceptanceRegion (Int_t lu, double ll, double ul);  ; Int_t GetLookupIndex ();  ; double GetLowerLimit ();  ; double GetUpperLimit ();  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1AcceptanceRegion.html:82,Guid,Guide,82,doc/master/classRooStats_1_1AcceptanceRegion.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1AcceptanceRegion.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::BayesianCalculator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooStats::BayesianCalculator Class ReferenceRooFit » RooStats. ; BayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method. ; The class works only for one single parameter of interest and it integrates the likelihood function with the given prior probability density function to compute the posterior probability. The result of the class is a one dimensional interval (class SimpleInterval ), which is obtained from inverting the cumulative posterior distribution. This calculator works then only for model with a single parameter of interest. The model can instead have several nuisance parameters which are integrated (marginalized) in the computation of the posterior function. The integration and normalization of the posterior is computed using numerical integration methods provided by ROOT. See the MCMCCalculator for model with multiple parameters of interest.; The interface allows one to construct the class by passing the data set, probability density function for the model, the prior functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..); After configuring the calculator, one only needs to ask GetInterval(), which will return an SimpleInterval object. By default the extreme of the integral are obtained by inverting directly the cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the inte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html:84,Guid,Guide,84,doc/master/classRooStats_1_1BayesianCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html,2,"['Guid', 'Simpl']","['Guide', 'SimpleInterval']"
Usability,". ROOT: RooStats::ConfInterval Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; RooStats::ConfInterval Class ReferenceabstractRooFit » RooStats. ; ConfInterval is an interface class for a generic interval in the RooStats framework. ; Any tool inheriting from IntervalCalculator can return a ConfInterval. There are many types of intervals, they may be a simple range [a,b] in 1 dimension, or they may be disconnected regions in multiple dimensions. So the common interface is simply to ask the interval if a given point ""IsInInterval"". The Interval also knows what confidence level it was constructed at and the space of parameters for which it was constructed. Note, one could use the same class for a Bayesian ""credible interval"". ; Definition at line 35 of file ConfInterval.h. Public Member Functions;  ConfInterval (const char *name=nullptr);  constructor given name and title ;  ; virtual bool CheckParameters (const RooArgSet &) const =0;  check if parameters are correct (i.e. they are the POI of this interval) ;  ; virtual double ConfidenceLevel () const =0;  return confidence level ;  ; virtual RooArgSet * GetParameters () const =0;  return list of parameters of interest defining this interval (return a new cloned list) ;  ; TClass * IsA () const override;  ; virtual bool IsInInterval (const RooArgSet &) const =0;  check if given point is in the interval ;  ; ConfInterval & operator= (const ConfInterval &other);  operator= ;  ; virtual void SetConfidenceLevel (double cl)=0;  used to set confidence level. Keep pure virtual ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ConfInterval.html:78,Guid,Guide,78,doc/master/classRooStats_1_1ConfInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ConfInterval.html,3,"['Guid', 'simpl']","['Guide', 'simple', 'simply']"
Usability,". ROOT: RooStats::ConfidenceBelt Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::ConfidenceBelt Class ReferenceRooFit » RooStats. ; ConfidenceBelt is a concrete implementation of the ConfInterval interface. ; It implements simple general purpose interval of arbitrary dimensions and shape. It does not assume the interval is connected. It uses either a RooDataSet (eg. a list of parameter points in the interval) or a RooDataHist (eg. a Histogram-like object for small regions of the parameter space) to store the interval. ; Definition at line 149 of file ConfidenceBelt.h. Public Member Functions;  ConfidenceBelt ()=default;  ;  ConfidenceBelt (const char *name);  Alternate constructor. ;  ;  ConfidenceBelt (const char *name, const char *title);  Alternate constructor. ;  ;  ConfidenceBelt (const char *name, const char *title, RooAbsData &);  Alternate constructor. ;  ;  ConfidenceBelt (const char *name, RooAbsData &);  Alternate constructor. ;  ; void AddAcceptanceRegion (RooArgSet &, AcceptanceRegion region, double cl=-1., double leftside=-1.);  add after creating a region ;  ; void AddAcceptanceRegion (RooArgSet &point, Int_t dataSetIndex, double lower, double upper, double cl=-1., double leftside=-1.);  add without creating a region, more useful for clients ;  ; bool CheckParameters (RooArgSet &) const;  check if parameters are correct. (dummy implementation to start) ;  ; std::vector< double > ConfidenceLevels () const;  ; AcceptanceRegion * GetAcceptanceRegion (RooArgSet &, double cl=-1., double leftside=-1.);  Method to determine if a parameter point is in the interval. ;  ; double GetAcceptanceRegionMax (RooArgSet &, double cl=-1., double leftside=-1.);  ; double GetAcceptanceRegionMin (RooArgSet &, double cl=-1., double leftside=-1.);  ; virtual RooArgSet * GetParameters () cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ConfidenceBelt.html:80,Guid,Guide,80,doc/master/classRooStats_1_1ConfidenceBelt.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ConfidenceBelt.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: RooStats::HLFactory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; RooStats::HLFactory Class ReferenceRooFit » RooStats. ; HLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool. ; Moreover it provides tools for the combination of models and datasets. ; Definition at line 29 of file HLFactory.h. Public Member Functions;  HLFactory ();  Default Constructor. ;  ;  HLFactory (const char *name, const char *fileName=nullptr, bool isVerbose=false);  Constructor. ;  ;  HLFactory (const char *name, RooWorkspace *externalWs, bool isVerbose=false);  Constructor with external RooWorkspace. ;  ;  ~HLFactory () override;  Default Destructor. ;  ; int AddChannel (const char *label, const char *SigBkgPdfName, const char *BkgPdfName=nullptr, const char *datasetName=nullptr);  Add channel for the combination. ;  ; void DumpCfg (const char *);  Dump the Workspace content as configuration file. ;  ; RooAbsPdf * GetTotBkgPdf ();  Get the combined background pdf. ;  ; RooCategory * GetTotCategory ();  Get the combined dataset. ;  ; RooDataSet * GetTotDataSet ();  Get the combined dataset. ;  ; RooAbsPdf * GetTotSigBkgPdf ();  Get the combined signal plus background pdf. ;  ; RooWorkspace * GetWs ();  Get the RooWorkspace containing the models and variables. ;  ; TClass * IsA () const override;  ; int ProcessCard (const char *filename);  Process a configuration file. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HLFactory.html:75,Guid,Guide,75,doc/master/classRooStats_1_1HLFactory.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HLFactory.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::Heaviside Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooStats::Heaviside Class ReferenceRooFit » RooStats. ; Represents the Heaviside function. ; Evaluates to 1.0 when ((double)x) >= ((double)c), 0.0 otherwise. ; Definition at line 21 of file Heaviside.h. Public Member Functions;  Heaviside ();  ;  Heaviside (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_c);  ;  Heaviside (const Heaviside &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1Heaviside.html:75,Guid,Guide,75,doc/master/classRooStats_1_1Heaviside.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1Heaviside.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::HistFactory::FlexibleInterpVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooStats::HistFactory::FlexibleInterpVar Class ReferenceRooFit » RooStats » HistFactory. . Definition at line 22 of file FlexibleInterpVar.h. Public Member Functions;  FlexibleInterpVar ();  Default constructor. ;  ;  FlexibleInterpVar (const char *name, const char *title);  Constructor of flat polynomial function. ;  ;  FlexibleInterpVar (const char *name, const char *title, const RooArgList &_paramList, double nominal, std::vector< double > const &low, std::vector< double > const &high);  ;  FlexibleInterpVar (const char *name, const char *title, const RooArgList &_paramList, double nominal, std::vector< double > const &low, std::vector< double > const &high, std::vector< int > const &code);  ;  FlexibleInterpVar (const FlexibleInterpVar &, const char *);  ;  ~FlexibleInterpVar () override;  Destructor. ;  ; TObject * clone (const char *newname) const override;  ; void doEval (RooFit::EvalContext &) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; const std::vector< double > & high () const;  ; const std::vector< int > & interpolationCodes () const;  ; TClass * IsA () const override;  ; const std::vector< double > & low () const;  ; double nominal () const;  ; void printAllInterpCodes ();  ; virtual void printFlexibleInterpVars (std::ostream &os) const;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Interface for detailed printing of object. ;  ; void setAllInterpCodes (int code);  ; void setGlobalBoundary (double boundary);  ; void setHigh (RooAbsReal &param, double newHigh);  ; void setInterpCode (RooAbsReal &param, int code);  ; void setLow (RooAbsReal &param, d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1FlexibleInterpVar.html:96,Guid,Guide,96,doc/master/classRooStats_1_1HistFactory_1_1FlexibleInterpVar.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1FlexibleInterpVar.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::HistFactory::HistoToWorkspaceFactoryFast Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; RooStats::HistFactory::HistoToWorkspaceFactoryFast Class ReferenceRooFit » RooStats » HistFactory. ; This class provides helper functions for creating likelihood models from histograms. ; It is used by RooStats::HistFactory::MakeModelAndMeasurementFast.; A tutorial showing how to create a HistFactory model is hf001_example.C ; Definition at line 44 of file HistoToWorkspaceFactoryFast.h. Classes; struct  Configuration;  . Public Member Functions;  HistoToWorkspaceFactoryFast ();  ;  HistoToWorkspaceFactoryFast (RooStats::HistFactory::Measurement &Meas);  ;  HistoToWorkspaceFactoryFast (RooStats::HistFactory::Measurement &Meas, Configuration const &cfg);  ; TClass * IsA () const override;  ; RooFit::OwningPtr< RooWorkspace > MakeCombinedModel (std::vector< std::string >, std::vector< std::unique_ptr< RooWorkspace > > &);  ; RooFit::OwningPtr< RooWorkspace > MakeSingleChannelModel (Measurement &measurement, Channel &channel);  ; void SetFunctionsToPreprocess (std::vector< std::string > lines);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1HistoToWorkspaceFactoryFast.html:106,Guid,Guide,106,doc/master/classRooStats_1_1HistFactory_1_1HistoToWorkspaceFactoryFast.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1HistoToWorkspaceFactoryFast.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::HistFactory::LinInterpVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooStats::HistFactory::LinInterpVar Class ReferenceRooFit » RooStats » HistFactory. ; RooAbsReal that does piecewise-linear interpolations. ; Definition at line 25 of file LinInterpVar.h. Public Member Functions;  LinInterpVar ()=default;  ;  LinInterpVar (const char *name, const char *title);  Constructor of flat polynomial function. ;  ;  LinInterpVar (const char *name, const char *title, const RooArgList &_paramList, double nominal, std::vector< double > low, std::vector< double > high);  ;  LinInterpVar (const LinInterpVar &, const char *);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1LinInterpVar.html:91,Guid,Guide,91,doc/master/classRooStats_1_1HistFactory_1_1LinInterpVar.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1LinInterpVar.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::HistFactory::Measurement Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; RooStats::HistFactory::Measurement Class ReferenceRooFit » RooStats » HistFactory. ; The RooStats::HistFactory::Measurement class can be used to construct a model by combining multiple RooStats::HistFactory::Channel objects. ; It also allows to set some general properties like the integrated luminosity, its relative uncertainty or the functional form of constraints on nuisance parameters. ; Definition at line 33 of file Measurement.h. Public Member Functions;  Measurement ();  Standard constructor. ;  ;  Measurement (const char *Name, const char *Title="""");  Measurement( const Measurement& other ); // Copy. ;  ; void AddAsimovDataset (RooStats::HistFactory::Asimov dataset);  add an Asimov Dataset ;  ; void AddConstantParam (const std::string &param);  Add a parameter to be set as constant (Similar to ParamSetting method below) ;  ; void AddFunctionObject (const RooStats::HistFactory::PreprocessFunction function);  add a preprocess function object ;  ; void AddPOI (const std::string &POI);  append parameter to vector of PoIs ;  ; void AddPreprocessFunction (std::string name, std::string expression, std::string dependencies);  Add a preprocessed function by giving the function a name, a functional expression, and a string with a bracketed list of dependencies (eg ""SigXsecOverSM[0,3]"") ;  ; void ClearConstantParams ();  empty vector of constant parameters ;  ; void ClearParamValues ();  clear map of parameter values ;  ; std::vector< RooStats::HistFactory::Asimov > & GetAsimovDatasets ();  get vector of defined Asimov Datasets ;  ; int GetBinHigh ();  ; int GetBinLow ();  ; std::vector< std::string > & GetConstantParams ();  get vector of all constant parameters ;  ; std::vector< RooStats::HistFactory::PreprocessFunction > & GetFunctionObjects ();  get vector o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1Measurement.html:90,Guid,Guide,90,doc/master/classRooStats_1_1HistFactory_1_1Measurement.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1Measurement.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::HistFactory::RooBarlowBeestonLL Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooStats::HistFactory::RooBarlowBeestonLL Class ReferenceRooFit » RooStats » HistFactory. ; Class RooBarlowBeestonLL implements the profile likelihood estimator for a given likelihood and set of parameters of interest. ; The value return by RooBarlowBeestonLL is the input likelihood nll minimized w.r.t all nuisance parameters (which are all parameters except for those listed in the constructor) minus the -log(L) of the best fit. Note that this function is slow to evaluate as a MIGRAD minimization step is executed for each function evaluation ; Definition at line 25 of file RooBarlowBeestonLL.h. Classes; class  BarlowCache;  . Public Member Functions;  RooBarlowBeestonLL ();  Default constructor. Should only be used by proof. ;  ;  RooBarlowBeestonLL (const char *name, const char *title, RooAbsReal &nll);  ;  RooBarlowBeestonLL (const RooBarlowBeestonLL &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; bool getParameters (const RooArgSet *depList, RooArgSet &outputSet, bool stripDisconnected=true) const override;  Fills a list with leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; void initializeBarlowCache ();  ; TClass * IsA () const override;  ; RooAbsReal & nll ();  ; void setDataset (RooAbsData *data);  ; void setPdf (RooAbsPdf *pdf);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html:97,Guid,Guide,97,doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::HybridPlot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::HybridPlot Class ReferenceRooFit » RooStats. ; This class provides the plots for the result of a study performed with the HybridCalculatorOriginal class. ; Authors: D. Piparo, G. Schott - Universitaet Karlsruhe; An example plot is available here: http://www-ekp.physik.uni-karlsruhe.de/~schott/roostats/hybridplot_example.png ; Definition at line 36 of file HybridPlot.h. Public Member Functions;  HybridPlot (const char *name, const char *title, const std::vector< double > &sb_values, const std::vector< double > &b_values, double testStat_data, int n_bins, bool verbosity=true);  Constructor. ;  ;  ~HybridPlot () override;  Destructor. ;  ; void Draw (const char *options="""") override;  Draw on current pad. ;  ; void DumpToFile (const char *RootFileName, const char *options);  All the objects are written to rootfile. ;  ; void DumpToImage (const char *filename);  Write an image on disk. ;  ; double GetBCenter (double n_sigmas=1, bool display=false);  Get B histo center. ;  ; TH1F * GetBhisto ();  Get B histo. ;  ; double * GetBIntExtremes (double frac);  Get B histo integration extremes to obtain the requested area fraction call delete [] res to release memory. ;  ; double GetBmean ();  Get B histo mean. ;  ; double GetBrms ();  Get B histo RMS. ;  ; TVirtualPad * GetCanvas ();  Get the pad (or canvas) where it has been drawn. ;  ; double GetHistoCenter (TH1 *histo, double n_rms=1, bool display_result=false);  Get the center of the histo. ;  ; double * GetHistoPvals (TH1 *histo, double percentage);  Get the ""effective sigmas"" of the histo, call delete [] res to release memory. ;  ; double GetMedian (TH1 *histo);  Get the median of an histogram. ;  ; double GetSBCenter (double n_sigmas=1, bool display=false);  Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HybridPlot.html:76,Guid,Guide,76,doc/master/classRooStats_1_1HybridPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HybridPlot.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::HybridResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::HybridResult Class ReferenceRooFit » RooStats. ; Class encapsulating the result of the HybridCalculatorOriginal. ; This class is a fresh rewrite in RooStats of RooStatsCms/LimitResults developed by D. Piparo and G. Schott New contributions to this class have been written by Matthias Wolf (error estimation); The objects of this class store and access with lightweight methods the information calculated by LimitResults through a Lent calculation using MC toy experiments. In some ways can be considered an extended and extensible implementation of TConfidenceLevel. ; Definition at line 27 of file HybridResult.h. Public Member Functions;  HybridResult (const char *name, const std::vector< double > &testStat_sb_vals, const std::vector< double > &testStat_b_vals, bool sumLargerValues=true);  Constructor for HybridResult. ;  ;  HybridResult (const char *name=nullptr);  Default constructor. ;  ;  ~HybridResult () override;  Destructor of HybridResult. ;  ; void Add (HybridResult *other);  add additional toy-MC experiments to the current results use the data test statistics of the added object if none is already present (otherwise, ignore the new one) ;  ; double AlternatePValue () const override;  Returns \(CL_{s+b}\) : the S+B p-value. ;  ; double CLbError () const;  The error on the ""confidence level"" of the null hypothesis. ;  ; double CLsError () const;  The error on the ratio \(CL_{s+b}/CL_{b}\). ;  ; double CLsplusbError () const;  The error on the ""confidence level"" of the alternative hypothesis. ;  ; HybridPlot * GetPlot (const char *name, const char *title, int n_bins);  prepare a plot showing a result and return a pointer to a HybridPlot object the needed arguments are: an object name, a title and the num",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HybridResult.html:78,Guid,Guide,78,doc/master/classRooStats_1_1HybridResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HybridResult.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::HypoTestInverterPlot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::HypoTestInverterPlot Class ReferenceRooFit » RooStats. ; Class to plot a HypoTestInverterResult, the output of the HypoTestInverter calculator. ; It can be used to plot the obtained p-values ( CLb, CLs+b or CLs) for each scanned point, as well as the test statistic distributions (when a calculator based on pseudo-experiments is used) for the two hypotheses. ; Definition at line 26 of file HypoTestInverterPlot.h. Public Member Functions;  HypoTestInverterPlot (const char *name, const char *title, HypoTestInverterResult *results);  constructor with name and title from a HypoTestInverterResult class ;  ;  HypoTestInverterPlot (HypoTestInverterResult *results);  constructor ;  ;  ~HypoTestInverterPlot () override;  destructor ;  ; void Draw (Option_t *opt="""") override;  Draw the scan result in the current canvas Possible options: """" (default): draw observed + expected with 1 and 2 sigma bands SAME : draw in the current axis OBS : draw only the observed plot EXP : draw only the expected plot CLB : draw also CLb 2CL : drow both CLs+b and CLs. ;  ; TClass * IsA () const override;  ; TMultiGraph * MakeExpectedPlot (double sig1=1, double sig2=2);  Make the expected plot and the bands nsig1 and nsig2 indicates the n-sigma value for the bands if nsig1 = 0 no band is computed (only expected value) if nsig2 > nsig1 (default is nsig1=1 and nsig2=2) the second band is also done. ;  ; TGraphErrors * MakePlot (Option_t *opt="""");  return a TGraphErrors with the obtained observed p-values resultinf from the scan By default (Option = """") return CLs or CLsb depending if the flag UseCLs is set If Option = ""CLb"" return CLb plot = ""CLs+b"" return CLs+b plot independently of the flag = ""CLs"" return CLs plot independently o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterPlot.html:86,Guid,Guide,86,doc/master/classRooStats_1_1HypoTestInverterPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterPlot.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::HypoTestInverterResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; RooStats::HypoTestInverterResult Class ReferenceRooFit » RooStats. ; HypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval. ; Based on the RatioFinder code available in the RooStatsCms package developed by Gregory Schott and Danilo Piparo Ported and adapted to RooStats by Gregory Schott Some contributions to this class have been written by Matthias Wolf (error estimation) ; Definition at line 26 of file HypoTestInverterResult.h. Public Types; enum  InterpolOption_t { kLinear; , kSpline; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  HypoTestInverterResult (const char *name, const RooRealVar &scannedVariable, double cl);  constructor ;  ;  HypoTestInverterResult (const char *name=nullptr);  default constructor ;  ;  HypoTestInverterResult (const HypoTestInverterResult &other, const char *name);  copy constructor ;  ;  ~HypoTestInverterResult () override;  destructor ;  ; bool Add (const HypoTestInverterResult &otherResult);  merge with the content of another",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html:88,Guid,Guide,88,doc/master/classRooStats_1_1HypoTestInverterResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::HypoTestPlot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::HypoTestPlot Class ReferenceRooFit » RooStats. ; This class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.g. ; HybridCalculator or FrequentistCalculator) class. ; Definition at line 22 of file HypoTestPlot.h. Public Member Functions;  HypoTestPlot ()=default;  Constructor. ;  ;  HypoTestPlot (HypoTestResult &result, Int_t bins, double min, double max, Option_t *opt=""NORMALIZE HIST"");  ;  HypoTestPlot (HypoTestResult &result, Int_t bins=100, Option_t *opt=""NORMALIZE HIST"");  ; void ApplyDefaultStyle (void);  Set default style options (also called in the constructor that takes a HypoTestResult). ;  ; void ApplyResult (HypoTestResult &result, Option_t *opt=""NORMALIZE HIST"");  Applies a HypoTestResult. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooStats::SamplingDistPlot;  SamplingDistPlot (Int_t nbins, double min, double max);  SamplingDistPlot constructor with bin size, min and max. ;  ;  SamplingDistPlot (Int_t nbins=100);  Constructors for SamplingDistribution. ;  ;  ~SamplingDistPlot () override;  Destructor of SamplingDistribution. ;  ; void AddLine (double x1, double y1, double x2, double y2, const char *title=nullptr);  add a line ;  ; double AddSamplingDistribution (const SamplingDistribution *samplingDist, Option_t *drawOptions=""NORMALIZE HIST"");  adds the sampling distribution and returns the scale factor ;  ; double AddSamplingDistributionShaded (const SamplingDistribution *samplingDist, double minShaded, double maxShaded, Option_t *drawOptions=""NORMALIZE HIST"");  Like",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestPlot.html:78,Guid,Guide,78,doc/master/classRooStats_1_1HypoTestPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestPlot.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::HypoTestResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; RooStats::HypoTestResult Class ReferenceRooFit » RooStats. ; HypoTestResult is a base class for results from hypothesis tests. ; Any tool inheriting from HypoTestCalculator can return a HypoTestResult. As such, it stores a p-value for the null-hypothesis (eg. background-only) and an alternate hypothesis (eg. signal+background). The p-values can also be transformed into confidence levels ( \(CL_{b}\), \(CL_{s+b}\)) in a trivial way. The ratio of the \(CL_{s+b}\) to \(CL_{b}\) is often called \(CL_{s}\), and is considered useful, though it is not a probability. Finally, the p-value of the null can be transformed into a number of equivalent Gaussian sigma using the Significance method.; The p-value of the null for a given test statistic is rigorously defined and this is the starting point for the following conventions. Conventions used in this class; The p-value for the null and alternate are on the same side of the observed value of the test statistic. This is the more standard convention and avoids confusion when doing inverted tests.; For exclusion, we also want the formula \(CL_{s} = CL_{s+b} / CL_{b}\) to hold which therefore defines our conventions for \(CL_{s+b}\) and \(CL_{b}\). \(CL_{s}\) was specifically invented for exclusion and therefore all quantities need be related through the assignments as they are for exclusion: \(CL_{s+b} = p_{s+b}\); \(CL_{b} = p_{b}\). This is derived by considering the scenarios of a powerful and not powerful inverted test, where for the not so powerful test, \(CL_{s}\) must be close to one.; For results of Hypothesis tests, \(CL_{s}\) has no similar direct interpretation as for exclusion and can be larger than one. ; Definition at line 22 of file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html:80,Guid,Guide,80,doc/master/classRooStats_1_1HypoTestResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::LikelihoodInterval Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooStats::LikelihoodInterval Class ReferenceRooFit » RooStats. ; LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface. ; It implements a connected N-dimensional intervals based on the contour of a likelihood ratio. The boundary of the interval is equivalent to a MINUIT/MINOS contour about the maximum likelihood estimator; The interval does not need to be an ellipse (eg. it is not the HESSE error matrix). The level used to make the contour is the same as that used in MINOS, eg. it uses Wilks' theorem, which states that under certain regularity conditions the function -2* log (profile likelihood ratio) is asymptotically distributed as a chi^2 with N-dof, where N is the number of parameters of interest.; Note, a boundary on the parameter space (eg. s>= 0) or a degeneracy (eg. mass of signal if Nsig = 0) can lead to violations of the conditions necessary for Wilks' theorem to be true.; Also note, one can use any RooAbsReal as the function that will be used in the contour; however, the level of the contour is based on Wilks' theorem as stated above.; References. F. James., Minuit.Long writeup D506, CERN, 1998. . Definition at line 34 of file LikelihoodInterval.h. Public Member Functions;  LikelihoodInterval (const char *name, RooAbsReal *, const RooArgSet *, RooArgSet *=nullptr);  Alternate constructor taking a pointer to the profile likelihood ratio, parameter of interest and optionally a snapshot of best parameter of interest for interval. ;  ;  LikelihoodInterval (const char *name=nullptr);  default constructor ;  ;  ~LikelihoodInterval () override;  destructor ;  ; bool CheckParameters (const RooArgSet &) const override;  check if parameters are ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1LikelihoodInterval.html:84,Guid,Guide,84,doc/master/classRooStats_1_1LikelihoodInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1LikelihoodInterval.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::LikelihoodIntervalPlot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::LikelihoodIntervalPlot Class ReferenceRooFit » RooStats. ; This class provides simple and straightforward utilities to plot a LikelihoodInterval object. ; Definition at line 30 of file LikelihoodIntervalPlot.h. Public Member Functions;  LikelihoodIntervalPlot ();  LikelihoodIntervalPlot default constructor with default parameters. ;  ;  LikelihoodIntervalPlot (LikelihoodInterval *theInterval);  LikelihoodIntervalPlot copy constructor. ;  ; void Draw (const Option_t *options=nullptr) override;  draw the likelihood interval or contour for the 1D case a RooPlot is drawn by default of the profiled Log-Likelihood ratio if option ""TF1"" is used the objects are drawn using a TF1 scanning the LL function in a grid of the set points (by default the TF1 can be customized by setting maximum and the number of points to scan ;  ; TObject * GetPlottedObject () const;  returned plotted object (RooPlot or histograms) ;  ; TClass * IsA () const override;  ; void SetContourColor (const Color_t color);  set the fill contour color ;  ; void SetFillStyle (const Style_t style);  set the fill contour color ;  ; void SetLikelihoodInterval (LikelihoodInterval *theInterval);  ; void SetLineColor (const Color_t color);  set the line color for the 1D interval lines or contours (2D) ;  ; void SetMaximum (const double theMaximum);  ; void SetNPoints (Int_t np);  ; void SetPlotParameters (const RooArgSet *params);  ; void SetPrecision (double eps);  set plot precision (when drawing a RooPlot) ;  ; void SetRange (double x1, double x2);  set plot range (for 1D plot) ;  ; void SetRange (double x1, double y1, double x2, double y2);  set plot range (for 2D plot) ;  ; void Streamer (TBuffer &) override;  Stream an object of class TO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1LikelihoodIntervalPlot.html:88,Guid,Guide,88,doc/master/classRooStats_1_1LikelihoodIntervalPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1LikelihoodIntervalPlot.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: RooStats::MCMCCalculator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooStats::MCMCCalculator Class ReferenceRooFit » RooStats. ; Bayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function. ; By using the Markov-Chain Monte Carlo methods this calculator can work with model which require the integration of a large number of parameters.; MCMCCalculator is a concrete implementation of IntervalCalculator. It uses a MetropolisHastings object to construct a Markov Chain of data points in the parameter space. From this Markov Chain, this class can generate a MCMCInterval as per user specification.; The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; After configuring the calculator, one only needs to ask GetInterval(), which will return an ConfInterval (MCMCInterval in this case). ; Definition at line 31 of file MCMCCalculator.h. Public Member Functions;  MCMCCalculator ();  default constructor ;  ;  MCMCCalculator (RooAbsData &data, const ModelConfig &model);  Constructor for automatic configuration with basic settings and a ModelConfig. ;  ; double ConfidenceLevel () const override;  Get the Confidence level for the test. ;  ; MCMCInterval * GetInterval () const override;  Main interface to get a ConfInterval. ;  ; TClass * IsA () const override;  ; virtual void SetAxes (RooArgList &axes);  set which variables to put on each axis ;  ; virtual void SetChainParameters (const RooArgSet &set);  specify the parameters to store in the Markov chain By default all the parameters are stored ;  ; virtual void SetConditionalObservables (const RooArgSet &set);  set the cond",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MCMCCalculator.html:80,Guid,Guide,80,doc/master/classRooStats_1_1MCMCCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MCMCCalculator.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::MCMCInterval Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Static Private Attributes |; List of all members ; RooStats::MCMCInterval Class ReferenceRooFit » RooStats. ; MCMCInterval is a concrete implementation of the RooStats::ConfInterval interface. ; It takes as input Markov Chain of data points in the parameter space generated by Monte Carlo using the Metropolis algorithm. From the Markov Chain, the confidence interval can be determined in two ways:; Using a Kernel-Estimated PDF: (not the default method); A RooNDKeysPdf is constructed from the data set using adaptive kernel width. With this RooNDKeysPdf F, we then integrate over the most likely domain in the parameter space (tallest points in the posterior RooNDKeysPdf) until the target confidence level is reached within an acceptable neighborhood as defined by SetEpsilon(). More specifically: we calculate the following for different cutoff values C until we reach the target confidence level: \(\int_{ F >= C } F; d{normset} \). Important note: this is not the default method because of a bug in constructing the RooNDKeysPdf from a weighted data set. Configure to use this method by calling SetUseKeys(true), and the data set will be interpreted without weights.; Using a binned data set: (the default method); This is the binned analog of the continuous integrative method that uses the kernel-estimated PDF. The points in the Markov Chain are put into a binned data set and the interval is then calculated by adding the heights of the bins in decreasing order until the desired level of confidence has been reached. Note that this means the actual confidence level is >= the confidence level prescribed by the client (unless the user calls SetHistStrict(false)). This method is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MCMCInterval.html:78,Guid,Guide,78,doc/master/classRooStats_1_1MCMCInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MCMCInterval.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::MCMCIntervalPlot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooStats::MCMCIntervalPlot Class ReferenceRooFit » RooStats. ; This class provides simple and straightforward utilities to plot a MCMCInterval object. ; Basic use only requires a few lines once you have an MCMCInterval*:; MCMCIntervalPlot plot(*interval);; plot.Draw();; plotwinID h TVirtualViewer3D TVirtualGLPainter char TVirtualGLPainter plotDefinition TGWin32VirtualGLProxy.cxx:53; RooStats::MCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object.Definition MCMCIntervalPlot.h:28; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; The standard Draw() function will currently draw the confidence interval range with bars if 1-D and a contour if 2-D. The MCMC posterior will also be plotted for the 1-D case. ; Definition at line 28 of file MCMCIntervalPlot.h. Public Member Functions;  MCMCIntervalPlot ();  ;  MCMCIntervalPlot (MCMCInterval &interval);  ;  ~MCMCIntervalPlot () override;  Destructor of SamplingDistribution. ;  ; void Draw (const Option_t *options=nullptr) override;  ; void DrawChainScatter (RooRealVar &xVar, RooRealVar &yVar);  ; void DrawNLLHist (const Option_t *options=nullptr);  ; void DrawNLLVsTime ();  ; void DrawParameterVsTime (RooRealVar &param);  ; void DrawWeightHist (const Option_t *options=nullptr);  ; TClass * IsA () const override;  ; void SetLineColor (Color_t color);  ; void SetLineWidth (Int_t width);  ; void SetMCMCInterval (MCMCInterval &interval);  ; void SetShadeColor (Color_t color);  ; void SetShowBurnIn (bool showBurnIn);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MCMCIntervalPlot.html:82,Guid,Guide,82,doc/master/classRooStats_1_1MCMCIntervalPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MCMCIntervalPlot.html,3,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: RooStats::MarkovChain Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooStats::MarkovChain Class ReferenceRooFit » RooStats. ; Stores the steps in a Markov Chain of points. ; Allows user to access the weight and NLL value (if applicable) with which a point was added to the MarkovChain. ; Definition at line 33 of file MarkovChain.h. Public Member Functions;  MarkovChain ();  ;  MarkovChain (const char *name, const char *title, RooArgSet &parameters);  ;  MarkovChain (RooArgSet &parameters);  ;  ~MarkovChain () override;  ; virtual void Add (MarkovChain &otherChain, double discardEntries=0.0);  add another markov chain ;  ; virtual void Add (RooArgSet &entry, double nllValue, double weight=1.0);  safely add an entry to the chain ;  ; virtual void AddFast (RooArgSet &entry, double nllValue, double weight=1.0);  add an entry to the chain ONLY IF you have constructed with parameters or called SetParameters ;  ; virtual void AddWithBurnIn (MarkovChain &otherChain, Int_t burnIn=0);  add another markov chain ;  ; virtual const RooArgSet * Get () const;  get the entry at the current position ;  ; virtual const RooArgSet * Get (Int_t i) const;  get the entry at position i ;  ; virtual const RooDataSet * GetAsConstDataSet () const;  ; virtual RooFit::OwningPtr< RooDataHist > GetAsDataHist (const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const R__DEPRECATED(6;  Get a clone of the markov chain on which this interval is based as a RooDataHist. ;  ; virtual RooFit::OwningPtr< RooDataHist > GetAsDataHist (RooArgSet *whichVars=nullptr) const;  get this MarkovChain as a RooDataHist whose entries contain the values of whichVars. ;  ; virtual RooF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MarkovChain.html:77,Guid,Guide,77,doc/master/classRooStats_1_1MarkovChain.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MarkovChain.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::MetropolisHastings Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooStats::MetropolisHastings Class ReferenceRooFit » RooStats. ; This class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo. ; In the main algorithm, new points in the parameter space are proposed and then visited based on their relative likelihoods. This class can use any implementation of the ProposalFunction, including non-symmetric proposal functions, to propose parameter points and still maintain detailed balance when constructing the chain.; The ""Likelihood"" function that is sampled when deciding what steps to take in the chain has been given a very generic implementation. The user can create any RooAbsReal based on the parameters and pass it to a MetropolisHastings object with the method SetFunction(RooAbsReal&). Be sure to tell MetropolisHastings whether your RooAbsReal is on a (+/-) regular or log scale, so that it knows what logic to use when sampling your RooAbsReal. For example, a common use is to sample from a -log(Likelihood) distribution (NLL), for which the appropriate configuration calls are SetType(MetropolisHastings::kLog); SetSign(MetropolisHastings::kNegative); If you're using a traditional likelihood function: SetType(MetropolisHastings::kRegular); SetSign(MetropolisHastings::kPositive); You must set these type and sign flags or MetropolisHastings will not construct a MarkovChain.; Also note that in ConstructChain(), the values of the variables are randomized uniformly over their intervals before construction of the MarkovChain begins. ; Definition at line 24 of file MetropolisHastings.h. Public Types; enum  FunctionSign { kNegative; , kPositive; , kSignUnset; };  ; enum  FunctionType { kR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MetropolisHastings.html:84,Guid,Guide,84,doc/master/classRooStats_1_1MetropolisHastings.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MetropolisHastings.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::ModelConfig Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; RooStats::ModelConfig Class ReferencefinalRooFit » RooStats. ; ModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools. ; A single model can be used in different ways, and this class should carry all that is needed to specify how it should be used. ModelConfig requires a workspace to be set.; A ModelConfig holds sets of parameters of the likelihood function that have different interpretations:; Parameter of interest Parameters that are measured (i.e. fitted).; Nuisance parameters Parameters that are fitted, but their post-fit value is not interesting. Often, they might be constrained because external knowledge about them exists, e.g. from external measurements.; Constraint parameters No direct use in RooFit/RooStats. Can be used by the user for bookkeeping.; Observables Parameters that have been measured externally, i.e. they exist in a dataset. These are not fitted, but read during fitting from the entries of a dataset.; Conditional observables Observables that are not integrated when the normalisation of the PDF is calculated. See e.g. rf306_condpereventerrors in the RooFit tutorials.; Global observables Observables that to the fit look like ""constant"" values, i.e. they are not being fitted and they are not loaded from a dataset, but some knowledge exists that allows to set them to a specific value. Examples: – A signal efficiency measured in a Monte Carlo study. – When constraining a parameter \( b \), the target value ( \( b_0 \)) that this parameter is constrained to: ; \[; \mathrm{Constraint}_b = \mathrm{Gauss}(b_0 \, | \, b, 0.2); \]. External constraints Includ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ModelConfig.html:77,Guid,Guide,77,doc/master/classRooStats_1_1ModelConfig.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ModelConfig.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: RooStats::PdfProposal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooStats::PdfProposal Class ReferenceRooFit » RooStats. ; PdfProposal is a concrete implementation of the ProposalFunction interface. ; It proposes points across the parameter space in the distribution of the given PDF.; To make Propose(xPrime, x) dependent on x, configure with PdfProposal::AddMapping(varToUpdate, valueToUse). For example, suppose we have:; // our parameter; RooRealVar p(""p"", ""p"", 5, 0, 10);; ; // create mean and sigma for gaussian proposal function; RooRealVar meanP(""meanP"", ""meanP"", 0, 10);; RooRealVar sigma(""sigma"", ""sigma"", 1, 0, 5);; RooGaussian pGaussian(""pGaussian"", ""pGaussian"", p, meanP, sigma);; ; // configure proposal function; PdfProposal pdfProposal(pGaussian);; pdfProposal.AddMapping(meanP, p); // each call of Propose(xPrime, x), meanP in; // the proposal function will be updated to; // the value of p in x. this will center the; // proposal function about x's p when; // proposing for xPrime; ; // To improve performance, PdfProposal has the ability to cache a specified; // number of proposals. If you don't call this function, the default cache size; // is 1, which can be slow.; pdfProposal.SetCacheSize(desiredCacheSize);; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; RooGaussianPlain Gaussian p.d.f.Definition RooGaussian.h:24; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; RooStats::PdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface.Definition PdfProposal.h:30; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; PdfProposal currently uses a fixed cache size. Adaptive caching methods are in the works for future versions. ; Definition at line",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1PdfProposal.html:77,Guid,Guide,77,doc/master/classRooStats_1_1PdfProposal.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1PdfProposal.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::PointSetInterval Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::PointSetInterval Class ReferenceRooFit » RooStats. ; PointSetInterval is a concrete implementation of the ConfInterval interface. ; It implements simple general purpose interval of arbitrary dimensions and shape. It does not assume the interval is connected. It uses either a RooDataSet (eg. a list of parameter points in the interval) or a RooDataHist (eg. a Histogram-like object for small regions of the parameter space) to store the interval. ; Definition at line 21 of file PointSetInterval.h. Public Member Functions;  PointSetInterval (const char *name, RooAbsData &);  constructor from name and data set specifying the interval points ;  ;  PointSetInterval (const char *name=nullptr);  default constructors ;  ; bool CheckParameters (const RooArgSet &) const override;  return a cloned list with the parameter of interest ;  ; double ConfidenceLevel () const override;  return the confidence level for the interval ;  ; RooAbsData * GetParameterPoints () const;  return a copy of the data set (points) defining this interval ;  ; RooArgSet * GetParameters () const override;  return a cloned list with the parameter of interest ;  ; TClass * IsA () const override;  ; bool IsInInterval (const RooArgSet &) const override;  check if parameter is in the interval ;  ; double LowerLimit (RooRealVar &param);  return lower limit on a given parameter ;  ; void SetConfidenceLevel (double cl) override;  set the confidence level for the interval ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; double UpperLimit (RooRealVar &param);  return upper limit on a given parameter ;  ;  Public Member Functions inherited from RooStats:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1PointSetInterval.html:82,Guid,Guide,82,doc/master/classRooStats_1_1PointSetInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1PointSetInterval.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: RooStats::ProposalFunction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; RooStats::ProposalFunction Class ReferenceabstractRooFit » RooStats. ; ProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm. ; Given a current point in the parameter space it proposes a new point. Proposal functions may or may not be symmetric, in the sense that the probability to propose X1 given we are at X2 need not be the same as the probability to propose X2 given that we are at X1. In this case, the IsSymmetric method should return false, and the Metropolis algorithm will need to take into account the proposal density to maintain detailed balance. ; Definition at line 41 of file ProposalFunction.h. Public Member Functions;  ProposalFunction ();  Default constructor. ;  ; virtual bool CheckParameters (RooArgSet &params);  Check the parameters for which the ProposalFunction will propose values to make sure they are all RooRealVars Return true if all objects are RooRealVars, false otherwise. ;  ; virtual double GetProposalDensity (RooArgSet &x1, RooArgSet &x2)=0;  Return the probability of proposing the point x1 given the starting point x2. ;  ; TClass * IsA () const override;  ; virtual bool IsSymmetric (RooArgSet &x1, RooArgSet &x2)=0;  Determine whether or not the proposal density is symmetric for points x1 and x2 - that is, whether the probability of reaching x2 from x1 is equal to the probability of reaching x1 from x2. ;  ; virtual void Propose (RooArgSet &xPrime, RooArgSet &x)=0;  Populate xPrime with the new proposed point, possibly based on the current point x. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ProposalFunction.html:82,Guid,Guide,82,doc/master/classRooStats_1_1ProposalFunction.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ProposalFunction.html,1,['Guid'],['Guide']
Usability,. ROOT: RooStats::ProposalHelper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooStats::ProposalHelper Class ReferenceRooFit » RooStats. . Definition at line 29 of file ProposalHelper.h. Public Member Functions;  ProposalHelper ();  ;  ~ProposalHelper () override;  ; virtual ProposalFunction * GetProposalFunction ();  Get the ProposalFunction that we've been designing. ;  ; TClass * IsA () const override;  ; virtual void SetCacheSize (Int_t size);  ; virtual void SetClues (RooDataSet &clues);  Set the bank of clues to add to the current proposal density function. ;  ; virtual void SetCluesFraction (double cluesFrac);  set what fraction of the proposal density function should come from the bank of clues ;  ; virtual void SetCluesOptions (const Option_t *options);  set the option string to pass to the RooNDKeysPdf constructor if the bank of clues pdf is being automatically generated by this ProposalHelper ;  ; virtual void SetCovMatrix (const TMatrixDSym &covMatrix);  set the covariance matrix to use for a multi-variate Gaussian proposal ;  ; virtual void SetPdf (RooAbsPdf &pdf);  Set the PDF to be the proposal density function. ;  ; virtual void SetUniformFraction (double uniFrac);  set what fraction of the proposal density function should come from a uniform proposal distribution ;  ; virtual void SetUpdateProposalParameters (bool updateParams);  ; virtual void SetVariables (const RooArgList &vars);  ; virtual void SetVariables (RooArgList &vars);  ; virtual void SetVariables (RooArgSet &vars);  ; virtual void SetWidthRangeDivisor (double divisor);  set what divisor we will use when dividing the range of a variable to determine the width of the proposal function for each dimension e.g. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObje,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ProposalHelper.html:80,Guid,Guide,80,doc/master/classRooStats_1_1ProposalHelper.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ProposalHelper.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::SPlot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Attributes |; List of all members ; RooStats::SPlot Class ReferenceRooFit » RooStats. ; A class to calculate ""sWeights"" used to create an ""sPlot"". ; An sPlot can reweight a dataset to show different components (e.g. signal / background), but it doesn't use cuts, and therefore doesn't have to sort events into signal/background (or other) categories. Instead of assigning a category to each event in the dataset, all events are weighted. To compute the weights, a PDF with different components is analysed, and the weights are added to the dataset. When plotting the dataset with the weights of the signal or background components, the data looks like ""signal"", but all events in the dataset are used.; The result is similar to a likelihood projection plot, but without cuts.; NoteSPlot needs to fit the pdf to the data once, so make sure that all relevant fit arguments such as the fit range are passed in the constructor.; The code is based on `‘SPlot: A statistical tool to unfold data distributions,’' Nucl. Instrum. Meth. A 555, 356 (2005) [arXiv:physics/0402083]. Creating an SPlot; To use this class, you first must have a pdf that includes yield parameters for (possibly several) different species, for example a signal and background yield. Those yields must be of type RooRealVar / RooLinearVar (or anything that derives from RooAbsRealLValue). This is necessary because RooStats needs to be able to set the yields to 0 and 1 to probe the PDF. After constructing the s weights, the yields will be restored to their original values.; To create an instance of the SPlot, supply a data set, the pdf to analyse, and a list which parameters of the pdf are yields. The SPlot will calculate SWeights, and include these as columns in the RooDataSet. The dataset wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SPlot.html:71,Guid,Guide,71,doc/master/classRooStats_1_1SPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SPlot.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::SamplingDistPlot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; RooStats::SamplingDistPlot Class ReferenceRooFit » RooStats. ; This class provides simple and straightforward utilities to plot SamplingDistribution objects. ; Definition at line 33 of file SamplingDistPlot.h. Public Member Functions;  SamplingDistPlot (Int_t nbins, double min, double max);  SamplingDistPlot constructor with bin size, min and max. ;  ;  SamplingDistPlot (Int_t nbins=100);  Constructors for SamplingDistribution. ;  ;  ~SamplingDistPlot () override;  Destructor of SamplingDistribution. ;  ; void AddLine (double x1, double y1, double x2, double y2, const char *title=nullptr);  add a line ;  ; double AddSamplingDistribution (const SamplingDistribution *samplingDist, Option_t *drawOptions=""NORMALIZE HIST"");  adds the sampling distribution and returns the scale factor ;  ; double AddSamplingDistributionShaded (const SamplingDistribution *samplingDist, double minShaded, double maxShaded, Option_t *drawOptions=""NORMALIZE HIST"");  Like AddSamplingDistribution, but also sets a shaded area in the minShaded and maxShaded boundaries. ;  ; void AddTF1 (TF1 *f, const char *title=nullptr, Option_t *drawOptions=""SAME"");  add a TF1 ;  ; void AddTH1 (TH1 *h, Option_t *drawOptions="""");  add a TH1 ;  ; void ApplyDefaultStyle (void);  Applies a predefined style if fApplyStyle is true (default). ;  ; void Draw (Option_t *options=nullptr) override;  Draw this plot and all of the elements it contains. ;  ; void DumpToFile (const char *RootFileName, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  write to Root file ;  ; TH1 * GetHistogram (const SamplingDistribution *samplDist=nullptr);  ; RooPlo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SamplingDistPlot.html:82,Guid,Guide,82,doc/master/classRooStats_1_1SamplingDistPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SamplingDistPlot.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: RooStats::SamplingDistribution Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooStats::SamplingDistribution Class ReferenceRooFit » RooStats. ; This class simply holds a sampling distribution of some test statistic. ; The distribution can either be an empirical distribution (eg. the samples themselves) or a weighted set of points (eg. for the FFT method). The class supports merging. ; Definition at line 28 of file SamplingDistribution.h. Public Member Functions;  SamplingDistribution ();  Default constructor for SamplingDistribution. ;  ;  SamplingDistribution (const char *name, const char *title, const char *varName=nullptr);  SamplingDistribution constructor (with name and title) ;  ;  SamplingDistribution (const char *name, const char *title, RooDataSet &dataSet, const char *columnName=nullptr, const char *varName=nullptr);  Creates a SamplingDistribution from a RooDataSet for debugging purposes; e.g. ;  ;  SamplingDistribution (const char *name, const char *title, std::vector< double > &samplingDist, const char *varName=nullptr);  Constructor for SamplingDistribution. ;  ;  SamplingDistribution (const char *name, const char *title, std::vector< double > &samplingDist, std::vector< double > &sampleWeights, const char *varName=nullptr);  SamplingDistribution constructor. ;  ;  ~SamplingDistribution () override;  Destructor of SamplingDistribution. ;  ; void Add (const SamplingDistribution *other);  merge two sampling distributions ;  ; double CDF (double x) const;  calculate CDF as a special case of Integral(...) with lower limit equal to -inf ;  ; const std::vector< double > & GetSampleWeights () const;  Get the sampling weights. ;  ; const std::vector< double > & GetSamplingDistribution () const;  Get test statistics values. ;  ; Int_t GetSize () co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SamplingDistribution.html:86,Guid,Guide,86,doc/master/classRooStats_1_1SamplingDistribution.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SamplingDistribution.html,2,"['Guid', 'simpl']","['Guide', 'simply']"
Usability,". ROOT: RooStats::SamplingSummary Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::SamplingSummary Class Reference. . Definition at line 116 of file ConfidenceBelt.h. Public Member Functions;  SamplingSummary ();  ;  SamplingSummary (AcceptanceRegion &ar);  ; void AddAcceptanceRegion (AcceptanceRegion &ar);  ; AcceptanceRegion & GetAcceptanceRegion (Int_t index=0);  ; Int_t GetParameterPointIndex ();  ; SamplingDistribution * GetSamplingDistribution ();  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SamplingSummary.html:81,Guid,Guide,81,doc/master/classRooStats_1_1SamplingSummary.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SamplingSummary.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::SamplingSummaryLookup Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Attributes |; List of all members ; RooStats::SamplingSummaryLookup Class Reference. . Definition at line 30 of file ConfidenceBelt.h. Public Member Functions;  SamplingSummaryLookup ();  ; void Add (double cl, double leftside);  ; double GetConfidenceLevel (Int_t index);  ; double GetLeftSideTailFraction (Int_t index);  ; Int_t GetLookupIndex (double cl, double leftside);  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t Dista",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SamplingSummaryLookup.html:87,Guid,Guide,87,doc/master/classRooStats_1_1SamplingSummaryLookup.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SamplingSummaryLookup.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::SequentialProposal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::SequentialProposal Class ReferenceRooFit » RooStats. ; Class implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step. ; Definition at line 20 of file SequentialProposal.h. Public Member Functions;  SequentialProposal ();  ;  SequentialProposal (double divisor);  ; double GetProposalDensity (RooArgSet &x1, RooArgSet &x2) override;  Return the probability of proposing the point x1 given the starting point x2. ;  ; TClass * IsA () const override;  ; bool IsSymmetric (RooArgSet &x1, RooArgSet &x2) override;  Determine whether or not the proposal density is symmetric for points x1 and x2 - that is, whether the probability of reaching x2 from x1 is equal to the probability of reaching x1 from x2. ;  ; void Propose (RooArgSet &xPrime, RooArgSet &x) override;  Populate xPrime with a new proposed point. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooStats::ProposalFunction;  ProposalFunction ();  Default constructor. ;  ; virtual bool CheckParameters (RooArgSet &params);  Check the parameters for which the ProposalFunction will propose values to make sure they are all RooRealVars Return true if all objects are RooRealVars, false otherwise. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" metho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SequentialProposal.html:84,Guid,Guide,84,doc/master/classRooStats_1_1SequentialProposal.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SequentialProposal.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::SimpleInterval Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; RooStats::SimpleInterval Class ReferenceRooFit » RooStats. ; SimpleInterval is a concrete implementation of the ConfInterval interface. ; It implements simple 1-dimensional intervals in a range [a,b]. In addition, you can ask it for the upper- or lower-bound. ; Definition at line 20 of file SimpleInterval.h. Public Member Functions;  SimpleInterval (const char *name, const RooRealVar &var, double lower, double upper, double cl);  constructor from name, the Parameter of interest and lower/upper bound values ;  ;  SimpleInterval (const char *name=nullptr);  default constructor ;  ;  SimpleInterval (const SimpleInterval &other, const char *name);  default constructor ;  ; bool CheckParameters (const RooArgSet &) const override;  check if parameters are correct (i.e. they are the POI of this interval) ;  ; double ConfidenceLevel () const override;  return the confidence interval ;  ; RooArgSet * GetParameters () const override;  return a cloned list with the parameter of interest ;  ; TClass * IsA () const override;  ; bool IsInInterval (const RooArgSet &) const override;  check if parameter is in the interval ;  ; virtual double LowerLimit ();  return the interval lower limit ;  ; SimpleInterval & operator= (const SimpleInterval &other);  default constructor ;  ; void SetConfidenceLevel (double) override;  set the confidence level for the interval. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual double UpperLimit ();  return the interval upper limit ;  ;  Public Member Functions inherited from RooStats::ConfInterval;  ConfInterval (const char *name=nullptr);  constructor given name and title ;  ; ConfInterval & ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html:18,Simpl,SimpleInterval,18,doc/master/classRooStats_1_1SimpleInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html,10,"['Guid', 'Simpl', 'simpl']","['Guide', 'SimpleInterval', 'simple']"
Usability,". ROOT: RooStats::ToyMCPayload Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::ToyMCPayload Class Reference. . Definition at line 70 of file ToyMCStudy.h. Public Member Functions;  ToyMCPayload ();  ;  ToyMCPayload (RooDataSet *sd);  ; RooDataSet * GetSamplingDistributions ();  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ToyMCPayload.html:78,Guid,Guide,78,doc/master/classRooStats_1_1ToyMCPayload.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ToyMCPayload.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: RooStats::ToyMCStudy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooStats::ToyMCStudy Class ReferenceRooFit » RooStats. ; ToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling. ; This class is automatically used by ToyMCSampler when given a ProofConfig. This is also its intended use case. ; Definition at line 30 of file ToyMCStudy.h. Public Member Functions;  ToyMCStudy (const char *name=""ToyMCStudy"", const char *title=""ToyMCStudy"");  need to have constructor without arguments for proof ;  ; RooAbsStudy * clone (const char *="""") const override;  ; bool execute (void) override;  ; bool finalize (void) override;  ; bool initialize (void) override;  ; TClass * IsA () const override;  ; RooDataSet * merge ();  ; void SetParamPoint (const RooArgSet &paramPoint);  ; void SetRandomSeed (unsigned int seed);  ; void SetToyMCSampler (ToyMCSampler &t);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsStudy;  RooAbsStudy ()=default;  ;  RooAbsStudy (const char *name, const char *title);  Constructor. ;  ;  RooAbsStudy (const RooAbsStudy &other);  Copy constructor. ;  ;  ~RooAbsStudy () override;  Destructor. ;  ; virtual bool attach (RooWorkspace &);  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; RooLinkedList * detailedData ();  ; virtual void dump ();  ; void releaseDetailData ();  ; void storeDetailedOutput (bool flag);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; RooDataSet * summaryData ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &na",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ToyMCStudy.html:76,Guid,Guide,76,doc/master/classRooStats_1_1ToyMCStudy.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ToyMCStudy.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::UniformProposal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; RooStats::UniformProposal Class ReferenceRooFit » RooStats. ; UniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm. ; This proposal function is a uniformly random distribution over the parameter space. The proposal ignores the current point when it proposes a new point. The proposal function is symmetric, though it may not cause a MetropolisHastings run to converge as quickly as other proposal functions. ; Definition at line 25 of file UniformProposal.h. Public Member Functions;  UniformProposal ()=default;  ; double GetProposalDensity (RooArgSet &x1, RooArgSet &x2) override;  Return the probability of proposing the point x1 given the starting point x2. ;  ; TClass * IsA () const override;  ; bool IsSymmetric (RooArgSet &x1, RooArgSet &x2) override;  Determine whether or not the proposal density is symmetric for points x1 and x2 - that is, whether the probability of reaching x2 from x1 is equal to the probability of reaching x1 from x2. ;  ; void Propose (RooArgSet &xPrime, RooArgSet &x) override;  Populate xPrime with a new proposed point. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooStats::ProposalFunction;  ProposalFunction ();  Default constructor. ;  ; virtual bool CheckParameters (RooArgSet &params);  Check the parameters for which the ProposalFunction will propose values to make sure they are all RooRealVars Return true if all objects are RooRealVars, false otherwise. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1UniformProposal.html:81,Guid,Guide,81,doc/master/classRooStats_1_1UniformProposal.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1UniformProposal.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStats::UpperLimitMCSModule Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooStats::UpperLimitMCSModule Class ReferenceRooFit » RooStats. ; This class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated. ; Definition at line 27 of file UpperLimitMCSModule.h. Public Member Functions;  UpperLimitMCSModule (const RooArgSet *poi, double CL=0.95);  ;  UpperLimitMCSModule (const UpperLimitMCSModule &other);  Copy constructor. ;  ;  ~UpperLimitMCSModule () override;  Destructor. ;  ; RooDataSet * finalizeRun () override;  Return auxiliary dataset with results of delta(-log(L)) calculations of this module so that it is merged with RooMCStudy::fitParDataSet() by RooMCStudy. ;  ; bool initializeInstance () override;  Initialize module after attachment to RooMCStudy object. ;  ; bool initializeRun (Int_t) override;  Initialize module at beginning of RooCMStudy run. ;  ; TClass * IsA () const override;  ; bool processBetweenGenAndFit (Int_t) override;  Method called after generation of toy data sample and resetting of fit parameters to initial values and before actual fit is performed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsMCStudyModule;  RooAbsMCStudyModule (const char *name, const char *title);  Constructor. ;  ;  RooAbsMCStudyModule (const RooAbsMCStudyModule &other);  Copy constructor. ;  ; bool doInitializeInstance (RooMCStudy &);  Initializer method called upon attachment to given RooMCStudy object. ;  ; virtual bool processAfterFit (Int_t);  Method called after fit has been performed. ;  ; virtual bool processBeforeGen (Int_t);  Method called after resetting of generator par",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1UpperLimitMCSModule.html:85,Guid,Guide,85,doc/master/classRooStats_1_1UpperLimitMCSModule.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1UpperLimitMCSModule.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStepFunction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooStepFunction Class ReferenceRooFit » RooFit. ; The Step Function is a binned function whose parameters are the heights of each bin. ; This function may be used to describe oddly shaped distributions. A RooStepFunction has free parameters. In particular, any statistical uncertainty used to model this efficiency may be understood with these free parameters.; Note that in contrast to RooParametricStepFunction, a RooStepFunction is NOT a PDF, but a not-normalized function (RooAbsReal) ; Definition at line 26 of file RooStepFunction.h. Public Member Functions;  RooStepFunction ();  ;  RooStepFunction (const char *name, const char *title, RooAbsReal &x, const RooArgList &coefList, const RooArgList &limits, bool interpolate=false);  Constructor. ;  ;  RooStepFunction (const RooStepFunction &other, const char *name=nullptr);  Copy constructor. ;  ; const RooArgList & boundaries ();  ; TObject * clone (const char *newname) const override;  ; const RooArgList & coefficients ();  ; TClass * IsA () const override;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit=""""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStepFunction.html:71,Guid,Guide,71,doc/master/classRooStepFunction.html,https://root.cern,https://root.cern/doc/master/classRooStepFunction.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStringVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooStringVar Class ReferencefinalRooFit » RooFit Core. ; A RooAbsArg implementing string values. ; Definition at line 23 of file RooStringVar.h. Public Member Functions;  RooStringVar ();  ;  RooStringVar (const char *name, const char *title, const char *value, Int_t size=1024);  Constructor with initial value. The size argument is ignored. ;  ;  RooStringVar (const RooStringVar &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; RooFit::OwningPtr< RooAbsArg > createFundamental (const char *newname=nullptr) const override;  Create a fundamental-type object that stores our type of value. ;  ; const char * getVal () const;  ; TClass * IsA () const override;  ; bool isFundamental () const override;  Is this object a fundamental type that can be added to a dataset? Fundamental-type subclasses override this method to return true. ;  ; bool isIdentical (const RooAbsArg &other, bool) const override;  ; virtual operator TString ();  ; virtual RooAbsArg & operator= (const char *newVal);  ; bool operator== (const char *val) const;  ; bool operator== (const RooAbsArg &other) const override;  ; void printValue (std::ostream &os) const override;  Interface to print value of object. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose) override;  Read object contents from given stream. ;  ; void setVal (const char *newVal);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool) const override;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStringVar.html:68,Guid,Guide,68,doc/master/classRooStringVar.html,https://root.cern,https://root.cern/doc/master/classRooStringVar.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStringView Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; RooStringView Class Reference. ; The RooStringView is a wrapper around a C-style string that can also be constructed from a std::string or a TString. ; As such, it serves as a drop-in replacement for const char* in public RooFit interfaces, keeping the possibility to pass a C-style string without copying but also accepting a std::string. ; Definition at line 27 of file RooStringView.h. Public Member Functions;  RooStringView (const char *str);  ;  RooStringView (std::string &&str);  ;  RooStringView (std::string const &str);  ;  RooStringView (TString const &str);  ; const char * c_str () const;  ;  operator const char * ();  . Private Attributes; const char * _cstr;  ; std::shared_ptr< std::string > _strp;  . #include <RooStringView.h>; Constructor & Destructor Documentation. ◆ RooStringView() [1/4]. RooStringView::RooStringView ; (; const char * ; str). inline . Definition at line 29 of file RooStringView.h. ◆ RooStringView() [2/4]. RooStringView::RooStringView ; (; TString const & ; str). inline . Definition at line 30 of file RooStringView.h. ◆ RooStringView() [3/4]. RooStringView::RooStringView ; (; std::string const & ; str). inline . Definition at line 31 of file RooStringView.h. ◆ RooStringView() [4/4]. RooStringView::RooStringView ; (; std::string && ; str). inline . Definition at line 33 of file RooStringView.h. Member Function Documentation. ◆ c_str(). const char * RooStringView::c_str ; (; ); const. inline . Definition at line 34 of file RooStringView.h. ◆ operator const char *(). RooStringView::operator const char * ; (; ). inline . Definition at line 35 of file RooStringView.h. Member Data Documentation. ◆ _cstr. const char* RooStringView::_cstr. private . Definition at line 40 of file RooStringView.h. ◆ _strp. std::shared_ptr<std::string> Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStringView.html:69,Guid,Guide,69,doc/master/classRooStringView.html,https://root.cern,https://root.cern/doc/master/classRooStringView.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStudyManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooStudyManager Class ReferenceRooFit » RooFit Core. ; Utility class to manage studies that consist of repeated applications of generate-and-fit operations on a workspace. ; Definition at line 33 of file RooStudyManager.h. Public Member Functions;  RooStudyManager (const char *studyPackFileName);  ;  RooStudyManager (RooWorkspace &w);  ;  RooStudyManager (RooWorkspace &w, RooAbsStudy &study);  ; void addStudy (RooAbsStudy &study);  ; TClass * IsA () const override;  ; void prepareBatchInput (const char *studyName, Int_t nExpPerJob, bool unifiedInput);  ; void processBatchOutput (const char *filePat);  ; void run (Int_t nExperiments);  ; void runProof (Int_t nExperiments, const char *proofHost="""", bool showGui=true);  Open PROOF-Lite session. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; std::list< RooAbsStudy * > & studies ();  ; RooWorkspace & wspace ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const overri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStudyManager.html:71,Guid,Guide,71,doc/master/classRooStudyManager.html,https://root.cern,https://root.cern/doc/master/classRooStudyManager.html,1,['Guid'],['Guide']
Usability,". ROOT: RooStudyPackage Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooStudyPackage Class ReferenceRooFit » RooFit Core. ; Utility class to manage studies that consist of repeated applications of generate-and-fit operations on a workspace. ; Definition at line 26 of file RooStudyPackage.h. Public Member Functions;  RooStudyPackage ()=default;  ;  RooStudyPackage (const RooStudyPackage &);  ;  RooStudyPackage (RooWorkspace &w);  ; void addStudy (RooAbsStudy &study);  ; TObject * Clone (const char *="""") const override;  Make a clone of an object using the Streamer facility. ;  ; void driver (Int_t nExperiments);  ; void exportData (TList *olist, Int_t seqno);  ; void finalize ();  Finalize all studies. ;  ; void initialize ();  Make iterator over copy of studies attached to workspace. ;  ; Int_t initRandom ();  Choose random seed for this process in case pass a definite seed to have it deterministic use also worker number. ;  ; TClass * IsA () const override;  ; void run (Int_t nExperiments);  ; void runOne ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; std::list< RooAbsStudy * > & studies ();  ; RooWorkspace & wspace ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStudyPackage.html:71,Guid,Guide,71,doc/master/classRooStudyPackage.html,https://root.cern,https://root.cern/doc/master/classRooStudyPackage.html,1,['Guid'],['Guide']
Usability,". ROOT: RooSuperCategory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; RooSuperCategory Class ReferenceRooFit » RooFit Core. ; Joins several RooAbsCategoryLValue objects into a single category. ; For this, it uses a RooMultiCategory, which takes care of enumerating all the permutations of possible states. In addition, the super category derives from RooAbsCategoryLValue, i.e., it allows for setting its state (opposed to the RooMultiCategory, which just reacts to the states of its subcategories). This requires that all input categories are lvalues as well. This is because a modification of the state of the supercategory will propagate to its input categories. ; Definition at line 27 of file RooSuperCategory.h. Public Member Functions;  RooSuperCategory ();  ;  RooSuperCategory (const char *name, const char *title, const RooArgSet &inputCatList);  Construct a super category from other categories. ;  ;  RooSuperCategory (const RooSuperCategory &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; bool hasRange (const char *rangeName) const override;  Check that any of the input categories has a range with the given name. ;  ; const RooArgSet & inputCatList () const;  ; bool inRange (const char *rangeName) const override;  Check that all input category states are in the given range. ;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Print the state of this object to the specified output stream. ;  ; bool setIndex (const std::pair< std::string, value_type > &nameIdxPair, bool printError=true);  Change category state to state specified by another category state. ;  ; bool setIndex (value_type index, bool prin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSuperCategory.html:72,Guid,Guide,72,doc/master/classRooSuperCategory.html,https://root.cern,https://root.cern/doc/master/classRooSuperCategory.html,1,['Guid'],['Guide']
Usability,". ROOT: RooTFnBinding Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooTFnBinding Class ReferenceRooFit » RooFit. ; Use TF1, TF2, TF3 functions as RooFit objects. ; To create a function binding, either directly invoke RooTFnBinding::RooTFnBinding() or use the convenience functions RooFit::bindFunction(). ; Definition at line 20 of file RooTFnBinding.h. Public Member Functions;  RooTFnBinding ()=default;  ;  RooTFnBinding (const char *name, const char *title, TF1 *func, const RooArgList &list);  ;  RooTFnBinding (const char *name, const char *title, TF1 *func, const RooArgList &list, const RooArgList &plist);  ;  RooTFnBinding (const RooTFnBinding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; const TF1 & function () const;  ; TClass * IsA () const override;  ; const RooArgList & observables () const;  ; const RooArgList & parameters () const;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advert",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTFnBinding.html:69,Guid,Guide,69,doc/master/classRooTFnBinding.html,https://root.cern,https://root.cern/doc/master/classRooTFnBinding.html,1,['Guid'],['Guide']
Usability,". ROOT: RooTFnPdfBinding Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooTFnPdfBinding Class ReferenceRooFit » RooFit. . Definition at line 20 of file RooTFnPdfBinding.h. Public Member Functions;  RooTFnPdfBinding ()=default;  ;  RooTFnPdfBinding (const char *name, const char *title, TF1 *func, const RooArgList &list);  ;  RooTFnPdfBinding (const RooTFnPdfBinding &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (const RooArgSet &vars, bool verbose=false) const;  Return a binned generator context. ;  ; bool canBeExtended () const;  If true, PDF can provide extended likelihood term. ;  ; std::unique_ptr< RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTFnPdfBinding.html:72,Guid,Guide,72,doc/master/classRooTFnPdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooTFnPdfBinding.html,1,['Guid'],['Guide']
Usability,". ROOT: RooTable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; RooTable Class ReferenceabstractRooFit » RooFit Core. ; Abstract interface for table objects. ; Table objects are the category equivalent of RooPlot objects (which are used for real-valued objects) ; Definition at line 32 of file RooTable.h. Public Member Functions;  RooTable ();  ;  RooTable (const char *name, const char *title);  ;  RooTable (const RooTable &other)=default;  ; virtual void fill (RooAbsCategory &cat, double weight=1.0)=0;  ; TClass * IsA () const override;  ; virtual bool isIdentical (const RooTable &other, bool verbose)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTable.html:64,Guid,Guide,64,doc/master/classRooTable.html,https://root.cern,https://root.cern/doc/master/classRooTable.html,1,['Guid'],['Guide']
Usability,". ROOT: RooTemplateProxy< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; RooTemplateProxy< T > Class Template ReferenceRooFit » RooFit Core. ; template<class T>; class RooTemplateProxy< T >; Introduction; A RooTemplateProxy is used to hold references to other RooFit objects in an expression tree. A RooGaussian(..., x, mean, sigma) can e.g. store references to x, mean, sigma as RooTemplateProxy<RooAbsReal> _x;; RooTemplateProxy<RooAbsReal> _mean;; RooTemplateProxy<RooAbsReal> _sigma;; RooTemplateProxyDefinition RooTemplateProxy.h:152; Now, the values of these three can be accessed, and the template argument ensures that only objects that evaluate to real numbers (RooAbsReal) can be stored in such a proxy. These can e.g. be variables, PDFs and functions. To store an object that's a RooCategory, one would, for example, use RooTemplateProxy<RooCategory> _category;; Since ROOT 6.22, the proxy can be used like a pointer to an instance of the template argument. For this, it provides operator* and operator->, e.g. double oldValue = _x->getVal(normalisationSet);; *_x = 17.;; RooTemplateProxy's base class RooArgProxy registers the proxied objects as ""servers"" of the object that holds the proxy. When the value of the proxied object is changed, the owner is notified, and can recalculate its own value. Renaming or exchanging objects that serve values to the owner of the proxy is handled automatically. Modernisation of proxies in ROOT 6.22; In ROOT 6.22, the classes RooRealProxy and RooCategoryProxy were replaced by RooTemplateProxy<class T>.; Two typedefs have been defined for backward compatibility:; RooRealProxy = RooTemplateProxy<RooAbsReal>. Any generic object that converts to a real value.; RooCategoryProxy = RooTemplateProxy<RooAbsCategory>. Any category object. To modernise a class, on",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTemplateProxy.html:86,Guid,Guide,86,doc/master/classRooTemplateProxy.html,https://root.cern,https://root.cern/doc/master/classRooTemplateProxy.html,1,['Guid'],['Guide']
Usability,". ROOT: RooThresholdCategory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooThresholdCategory Class ReferenceRooFit » RooFit Core. ; A real-to-category mapping defined by a series of thresholds. ; Definition at line 24 of file RooThresholdCategory.h. Public Member Functions;  RooThresholdCategory ();  ;  RooThresholdCategory (const char *name, const char *title, RooAbsReal &inputVar, const char *defCatName=""Default"", Int_t defCatIdx=0);  Constructor with input function to be mapped and name and index of default output state of unmapped values. ;  ;  RooThresholdCategory (const RooThresholdCategory &other, const char *name=nullptr);  Copy constructor. ;  ; bool addThreshold (double upperLimit, const char *catName, Int_t catIdx=-99999);  Insert threshold at value upperLimit. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Print info about this threshold category to the specified stream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to given stream. ;  ;  Public Member Functions inherited from RooAbsCategory;  RooAbsCategory ();  ;  RooAbsCategory (const char *name, const char *title);  Constructor. ;  ;  RooAbsCategory (const RooAbsCategory &other, const char *name=nullptr);  Copy constructor, copies the registered category states from the original. ;  ;  ~RooAbsCategory () override;  Destructor. ;  ; std::map< std::string, value_type >::const_iterator begin () const;  Iterator for category state names. Points to p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooThresholdCategory.html:76,Guid,Guide,76,doc/master/classRooThresholdCategory.html,https://root.cern,https://root.cern/doc/master/classRooThresholdCategory.html,1,['Guid'],['Guide']
Usability,". ROOT: RooTreeData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; RooTreeData Class Reference. . Definition at line 25 of file RooTreeData.h. Public Member Functions; const TTree * GetTree () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class RooAbsData. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsData;  RooAbsData ();  Default constructor. ;  ;  RooAbsData (const RooAbsData &other, const char *newname=nullptr);  Copy constructor. ;  ;  RooAbsData (RooStringView name, RooStringView title, const RooArgSet &vars, RooAbsDataStore *store=nullptr);  Constructor from a set of variables. ;  ;  ~RooAbsData () override;  Destructor. ;  ; virtual void add (const RooArgSet &row, double weight=1)=0;  ; void addOwnedComponent (const char *idxlabel, RooAbsData &data);  ; void attachBuffers (const RooArgSet &extObs);  ; bool canSplitFast () const;  ; virtual bool changeObservableName (const char *from, const char *to);  ; void checkInit () const;  ; virtual void convertToTreeStore ();  Convert vector-based storage to tree-based storage. ;  ; void convertToVectorStore ();  Convert tree-based storage to vector-based storage. ;  ; double correlation (RooRealVar &x, RooRealVar &y, const char *cutSpec=nullptr, const char *cutRange=nullptr) const;  ; RooFit::OwningPtr< TMatrixDSym > correlationMatrix (const char *cutSpec=nullptr, const char *cutRange=nullptr) const;  ; RooFit::OwningPtr< TMatrixDSym > correlationMatrix (const RooArgList &vars, const char *cutSpec=nullptr, const char *cutRange=nullptr) const;  ; double covariance (RooRealVar &x, RooRealVar &y, const char *cutSpec=nullptr, const char *cutRange=nullptr) const;  ; RooFit::OwningPtr< TMatrixDSym > covarianceMatrix (const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTreeData.html:67,Guid,Guide,67,doc/master/classRooTreeData.html,https://root.cern,https://root.cern/doc/master/classRooTreeData.html,1,['Guid'],['Guide']
Usability,". ROOT: RooTreeDataStore Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; RooTreeDataStore Class ReferenceRooFit » RooFit Core. ; TTree-backed data storage. ; When a file is opened before creating the data storage, the storage will be file-backed. This reduces memory pressure because it allows storing the data in the file and reading it on demand. For a completely memory-backed storage, which is faster than the file-backed storage, RooVectorDataStore can be used.; With tree-backed storage, the tree can be found in the file with the name RooTreeDataStore_name_title for a dataset created as RooDataSet(""name"", ""title"", ...).; NoteA file needs to be opened before creating the data storage to enable file-backed storage. TFile outputFile(""filename.root"", ""RECREATE"");; RooAbsData::setDefaultStorageType(RooAbsData::Tree);; RooDataSet mydata(...);; RooAbsData::setDefaultStorageTypestatic void setDefaultStorageType(StorageType s)Definition RooAbsData.cxx:130; RooAbsData::Tree@ TreeDefinition RooAbsData.h:278; RooDataSetContainer class to hold unbinned data.Definition RooDataSet.h:33; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53. One can also change between TTree- and std::vector-backed storage using RooAbsData::convertToTreeStore() and RooAbsData::convertToVectorStore(). ; Definition at line 34 of file RooTreeDataStore.h. Public Member Functions;  RooTreeDataStore ();  ;  RooTreeDataStore (const RooTreeDataStore &other, const char *newname=nullptr);  ;  RooTreeDataStore (const RooTreeDataStore &other, const RooArgSet &vars, const char *newname=nullptr);  ;  RooTreeDataStore (RooStringView name, RooStringView title, const RooArgSet &vars, const char *wg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTreeDataStore.html:72,Guid,Guide,72,doc/master/classRooTreeDataStore.html,https://root.cern,https://root.cern/doc/master/classRooTreeDataStore.html,1,['Guid'],['Guide']
Usability,". ROOT: RooTruthModel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; RooTruthModel Class ReferenceRooFit » RooFit Core. ; Implements a RooResolution model that corresponds to a delta function. ; The truth model supports all basis functions because it evaluates each basis function as as a RooFormulaVar. The 6 basis functions used in B mixing and decay and 2 basis functions used in D mixing have been hand coded for increased execution speed. ; Definition at line 21 of file RooTruthModel.h. Public Member Functions;  RooTruthModel ()=default;  ;  RooTruthModel (const char *name, const char *title, RooAbsRealLValue &x);  Constructor of a truth resolution model, i.e. a delta function in observable 'xIn'. ;  ;  RooTruthModel (const RooTruthModel &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implement analytical integrals when used as p.d.f and for compiled basis functions. ;  ; Int_t basisCode (const char *name) const override;  Return basis code for given basis definition string. ;  ; bool canComputeBatchWithCuda () const override;  ; TObject * clone (const char *newname) const override;  ; void doEval (RooFit::EvalContext &) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; void generateEvent (Int_t code) override;  Implement internal generator for observable x, x=0 for all events following definition of delta function. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Advertise analytical integrals for compiled basis functions and when used as p.d.f without basis function. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Advertise inter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTruthModel.html:69,Guid,Guide,69,doc/master/classRooTruthModel.html,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html,1,['Guid'],['Guide']
Usability,". ROOT: RooUnblindCPAsymVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooUnblindCPAsymVar Class ReferenceRooFit » RooFit. ; Implementation of BlindTools' CP asymmetry blinding method A RooUnblindCPAsymVar object is a real valued function object, constructed from a blind value holder and a set of unblinding parameters. ; When supplied to a PDF in lieu of a regular parameter, the blind value holder supplied to the unblinded objects will in a fit be minimized to blind value corresponding to the actual minimum of the parameter. The transformation is chosen such that the the error on the blind parameters is identical to that of the unblind parameter ; Definition at line 27 of file RooUnblindCPAsymVar.h. Public Member Functions;  RooUnblindCPAsymVar ();  Default constructor. ;  ;  RooUnblindCPAsymVar (const char *name, const char *title, const char *blindString, RooAbsReal &cpasym);  Constructor from a given RooAbsReal (to hold the blind value) and a set of blinding parameters. ;  ;  RooUnblindCPAsymVar (const char *name, const char *title, const char *blindString, RooAbsReal &cpasym, RooAbsCategory &blindState);  Constructor from a given RooAbsReal (to hold the blind value) and a set of blinding parameters. ;  ;  RooUnblindCPAsymVar (const RooUnblindCPAsymVar &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooUnblindCPAsymVar () override;  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsHiddenReal;  RooAbsHiddenReal ();  ;  RooAbsHiddenReal (const char *name, const char *title, const char *unit=""""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUnblindCPAsymVar.html:75,Guid,Guide,75,doc/master/classRooUnblindCPAsymVar.html,https://root.cern,https://root.cern/doc/master/classRooUnblindCPAsymVar.html,1,['Guid'],['Guide']
Usability,". ROOT: RooUnblindOffset Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooUnblindOffset Class ReferenceRooFit » RooFit. ; Implementation of BlindTools' offset blinding method A RooUnblindOffset object is a real valued function object, constructed from a blind value holder and a set of unblinding parameters. ; When supplied to a PDF in lieu of a regular parameter, the blind value holder supplied to the unblinded objects will in a fit be minimized to blind value corresponding to the actual minimum of the parameter. The transformation is chosen such that the the error on the blind parameters is identical to that of the unblind parameter ; Definition at line 23 of file RooUnblindOffset.h. Public Member Functions;  RooUnblindOffset ()=default;  ;  RooUnblindOffset (const char *name, const char *title, const char *blindString, double scale, RooAbsReal &blindValue);  Constructor from a given RooAbsReal (to hold the blind value) and a set of blinding parameters. ;  ;  RooUnblindOffset (const char *name, const char *title, const char *blindString, double scale, RooAbsReal &blindValue, RooAbsCategory &blindState);  Constructor from a given RooAbsReal (to hold the blind value) and a set of blinding parameters. ;  ;  RooUnblindOffset (const RooUnblindOffset &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsHiddenReal;  RooAbsHiddenReal ();  ;  RooAbsHiddenReal (const char *name, const char *title, const char *unit="""");  Constructor. ;  ;  RooAbsHiddenReal (const char *name, const char *t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUnblindOffset.html:72,Guid,Guide,72,doc/master/classRooUnblindOffset.html,https://root.cern,https://root.cern/doc/master/classRooUnblindOffset.html,1,['Guid'],['Guide']
Usability,". ROOT: RooUnblindPrecision Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooUnblindPrecision Class ReferenceRooFit » RooFit. ; Implementation of BlindTools' precision blinding method A RooUnblindPrecision object is a real valued function object, constructed from a blind value holder and a set of unblinding parameters. ; When supplied to a PDF in lieu of a regular parameter, the blind value holder supplied to the unblinded objects will in a fit be minimized to blind value corresponding to the actual minimum of the parameter. The transformation is chosen such that the the error on the blind parameters is identical to that of the unblind parameter ; Definition at line 26 of file RooUnblindPrecision.h. Public Member Functions;  RooUnblindPrecision ()=default;  ;  RooUnblindPrecision (const char *name, const char *title, const char *blindString, double centralValue, double scale, RooAbsReal &blindValue, bool sin2betaMode=false);  Constructor from a given RooAbsReal (to hold the blind value) and a set of blinding parameters. ;  ;  RooUnblindPrecision (const char *name, const char *title, const char *blindString, double centralValue, double scale, RooAbsReal &blindValue, RooAbsCategory &blindState, bool sin2betaMode=false);  Constructor from a given RooAbsReal (to hold the blind value) and a set of blinding parameters. ;  ;  RooUnblindPrecision (const RooUnblindPrecision &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsHiddenReal;  RooAbsHiddenReal ();  ;  RooAbsHiddenReal (const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUnblindPrecision.html:75,Guid,Guide,75,doc/master/classRooUnblindPrecision.html,https://root.cern,https://root.cern/doc/master/classRooUnblindPrecision.html,1,['Guid'],['Guide']
Usability,". ROOT: RooUnblindUniform Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooUnblindUniform Class ReferenceRooFit » RooFit. ; Implementation of BlindTools' offset blinding method. ; A RooUnblindUniform object is a real-valued function object, constructed from a parameter to be blinded and a set of config parameters to change the blinding method. When supplied to a PDF in lieu of the regular parameter, a transformation will be applied such that the likelihood is computed with the actual value of the parameter, but RooFit (, the user, MINUIT) see only the transformed (blinded) value. The transformation is chosen such that the error of the blind parameter is identical to that of the original parameter. ; Definition at line 23 of file RooUnblindUniform.h. Public Member Functions;  RooUnblindUniform ()=default;  ;  RooUnblindUniform (const char *name, const char *title, const char *blindString, double scale, RooAbsReal &blindValue);  Constructor from a given RooAbsReal (to hold the blinded value) and a set of blinding parameters. ;  ;  RooUnblindUniform (const RooUnblindUniform &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsHiddenReal;  RooAbsHiddenReal ();  ;  RooAbsHiddenReal (const char *name, const char *title, const char *unit="""");  Constructor. ;  ;  RooAbsHiddenReal (const char *name, const char *title, RooAbsCategory &blindState, const char *unit="""");  Constructor. ;  ;  RooAbsHiddenReal (const RooAbsHiddenReal &other, const char *name=nullptr);  Copy constructor. ;  ; do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUnblindUniform.html:73,Guid,Guide,73,doc/master/classRooUnblindUniform.html,https://root.cern,https://root.cern/doc/master/classRooUnblindUniform.html,1,['Guid'],['Guide']
Usability,". ROOT: RooUniform Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooUniform Class ReferenceRooFit » RooFit. ; Flat p.d.f. ; in N dimensions ; Definition at line 24 of file RooUniform.h. Public Member Functions;  RooUniform ();  ;  RooUniform (const char *name, const char *title, const RooArgSet &_x);  ;  RooUniform (const RooUniform &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implement analytical integral. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; void generateEvent (Int_t code) override;  Implement internal generator. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Advertise analytical integral. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Advertise internal generator. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUniform.html:66,Guid,Guide,66,doc/master/classRooUniform.html,https://root.cern,https://root.cern/doc/master/classRooUniform.html,1,['Guid'],['Guide']
Usability,". ROOT: RooUniformBinning Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooUniformBinning Class ReferenceRooFit » RooFit Core. ; Implementation of RooAbsBinning that provides a uniform binning in 'n' bins between the range end points. ; A RooUniformBinning is 'elastic': if the range changes the binning will change accordingly, unlike e.g. the binning of class RooBinning. ; Definition at line 22 of file RooUniformBinning.h. Public Member Functions;  RooUniformBinning (const char *name=nullptr);  ;  RooUniformBinning (const RooUniformBinning &other, const char *name=nullptr);  Copy constructor. ;  ;  RooUniformBinning (double xlo, double xhi, Int_t nBins, const char *name=nullptr);  Construct range [xlo,xhi] with 'nBins' bins. ;  ; double * array () const override;  Return an array of doubles with the bin boundaries. ;  ; double averageBinWidth () const override;  ; double binCenter (Int_t bin) const override;  Return the central value of the 'i'-th fit bin. ;  ; double binHigh (Int_t bin) const override;  Return the high edge of the 'i'-th fit bin. ;  ; double binLow (Int_t bin) const override;  Return the low edge of the 'i'-th fit bin. ;  ; void binNumbers (double const *x, int *bins, std::size_t n, int coef) const override;  Return the index of the bin that encloses 'x'. ;  ; double binWidth (Int_t bin) const override;  Return the bin width (same for all bins) ;  ; RooAbsBinning * clone (const char *name=nullptr) const override;  ; double highBound () const override;  ; TClass * IsA () const override;  ; bool isUniform () const override;  ; double lowBound () const override;  ; Int_t numBoundaries () const override;  ; void setRange (double xlo, double xhi) override;  Change range to [xlo,xhi]. ;  ; void Streamer (TBuffer &) override;  Custom streamer implementing schema evolution betwe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUniformBinning.html:73,Guid,Guide,73,doc/master/classRooUniformBinning.html,https://root.cern,https://root.cern/doc/master/classRooUniformBinning.html,1,['Guid'],['Guide']
Usability,". ROOT: RooVectorDataStore Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooVectorDataStore Class ReferenceRooFit » RooFit Core. ; Uses std::vector to store data columns. ; Each of these vectors is associated to an instance of a RooAbsReal, whose values it represents. Those RooAbsReal are the observables of the dataset. In addition to the observables, a data column can be bound to a different instance of a RooAbsReal (e.g., the column ""x"" can be bound to the observable ""x"" of a computation graph using attachBuffers()). In this case, a get() operation writes the value of the requested column into the bound real.; As a faster alternative to loading values one-by-one, one can use the function getBatches(), which returns spans pointing directly to the data. ; Definition at line 41 of file RooVectorDataStore.h. Classes; class  ArraysStruct;  Output struct for the RooVectorDataStore::getArrays() helper function. More...;  ; class  CatVector;  ; class  RealFullVector;  ; class  RealVector;  . Public Member Functions;  RooVectorDataStore ();  ;  RooVectorDataStore (const RooTreeDataStore &other, const RooArgSet &vars, const char *newname=nullptr);  ;  RooVectorDataStore (const RooVectorDataStore &other, const char *newname=nullptr);  Regular copy constructor. ;  ;  RooVectorDataStore (const RooVectorDataStore &other, const RooArgSet &vars, const char *newname=nullptr);  Clone constructor, must connect internal storage to given new external set of variables. ;  ;  RooVectorDataStore (RooStringView name, RooStringView title, const RooArgSet &vars, const char *wgtVarName=nullptr);  ;  RooVectorDataStore (RooStringView name, RooStringView title, RooAbsDataStore &tds, const RooArgSet &vars, const RooFormulaVar *cutVar, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooVectorDataStore.html:74,Guid,Guide,74,doc/master/classRooVectorDataStore.html,https://root.cern,https://root.cern/doc/master/classRooVectorDataStore.html,1,['Guid'],['Guide']
Usability,". ROOT: RooVoigtian Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; RooVoigtian Class ReferenceRooFit » RooFit. ; RooVoigtian is an efficient implementation of the convolution of a Breit-Wigner with a Gaussian, making use of the complex error function. ; RooFitCore provides two algorithms for the evaluation of the complex error function (the default CERNlib C335 algorithm, and a faster, look-up-table based method). By default, RooVoigtian employs the default (CERNlib) algorithm. Select the faster algorithm either in the constructor, or with the selectFastAlgorithm() method.; NoteThe ""width"" parameter that determines the Breit-Wigner shape represents the full width at half maximum (FWHM) of the Breit-Wigner (often referred to as \(\Gamma\) or \(2\gamma\)). ; Definition at line 22 of file RooVoigtian.h. Public Member Functions;  RooVoigtian ();  ;  RooVoigtian (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_mean, RooAbsReal &_width, RooAbsReal &_sigma, bool doFast=false);  Construct a RooVoigtian PDF, which represents the convolution of a Breit-Wigner with a Gaussian. ;  ;  RooVoigtian (const RooVoigtian &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void selectDefaultAlgorithm ();  Disable the fast evaluation of the complex error function using look-up tables (default is the ""slow"" CERNlib algorithm). ;  ; void selectFastAlgorithm ();  Enable the fast evaluation of the complex error function using look-up tables (default is the ""slow"" CERNlib algorithm). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooVoigtian.html:67,Guid,Guide,67,doc/master/classRooVoigtian.html,https://root.cern,https://root.cern/doc/master/classRooVoigtian.html,1,['Guid'],['Guide']
Usability,". ROOT: RooWorkspace Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; RooWorkspace Class ReferenceRooFit » RooFit Core. ; Persistable container for RooFit projects. ; A workspace can contain and own variables, p.d.f.s, functions and datasets. All objects that live in the workspace are owned by the workspace. The import() method enforces consistency of objects upon insertion into the workspace (e.g. no duplicate object with the same name are allowed) and makes sure all objects in the workspace are connected to each other. Easy accessor methods like pdf(), var() and data() allow to refer to the contents of the workspace by object name. The entire RooWorkspace can be saved into a ROOT TFile and organises the consistent streaming of its contents without duplication. If a RooWorkspace contains custom classes, i.e. classes not in the ROOT distribution, portability of workspaces can be enhanced by storing the source code of those classes in the workspace as well. This process is also organized by the workspace through the importClassCode() method. Seemingly random crashes when reading large workspaces; When reading or loading workspaces with deeply nested PDFs, one can encounter ouf-of-memory errors if the stack size is too small. This manifests in crashes at seemingly random locations, or in the process silently ending. Unfortunately, ROOT neither recover from this situation, nor warn or give useful instructions. When suspecting to have run out of stack memory, check ulimit -s; and try reading again. PyROOT; The RooWorkspace::import function can't be used in PyROOT because import is a reserved python keyword. For this reason, an alternative with a capitalized name is provided: workspace.Import(x). Definition at line 43 of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWorkspace.html:68,Guid,Guide,68,doc/master/classRooWorkspace.html,https://root.cern,https://root.cern/doc/master/classRooWorkspace.html,1,['Guid'],['Guide']
Usability,". ROOT: RooWorkspace::CodeRepo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooWorkspace::CodeRepo Class Reference. . Definition at line 168 of file RooWorkspace.h. Classes; class  ClassFiles;  ; class  ClassRelInfo;  ; class  ExtraHeader;  . Public Member Functions;  CodeRepo (const CodeRepo &other, RooWorkspace *wspace=nullptr);  ;  CodeRepo (RooWorkspace *wspace=nullptr);  ; bool autoImportClass (TClass *tc, bool doReplace=false);  Import code of class 'tc' into the repository. ;  ; bool compileClasses ();  For all classes in the workspace for which no class definition is found in the ROOT class table extract source code stored in code repository into temporary directory set by setClassFileExportDir(), compile classes and link them with current ROOT session. ;  ; bool compiledOK () const;  ; TClass * IsA () const override;  ; std::string listOfClassNames () const;  Return STL string with last of class names contained in the code repository. ;  ; void Streamer (TBuffer &) override;  Custom streamer for the workspace. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWorkspace_1_1CodeRepo.html:78,Guid,Guide,78,doc/master/classRooWorkspace_1_1CodeRepo.html,https://root.cern,https://root.cern/doc/master/classRooWorkspace_1_1CodeRepo.html,1,['Guid'],['Guide']
Usability,". ROOT: RooWorkspace::WSDir Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooWorkspace::WSDir Class Reference. . Definition at line 221 of file RooWorkspace.h. Public Member Functions;  WSDir (const char *name, const char *title, RooWorkspace *wspace);  ;  ~WSDir () override;  ; void Add (TObject *, bool) override;  Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. ;  ; void Append (TObject *, bool) override;  Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TDirectoryFile;  TDirectoryFile ();  Default TDirectoryFile constructor. ;  ;  TDirectoryFile (const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr);  Create a new TDirectoryFile. ;  ;  ~TDirectoryFile () override;  Destructor. ;  ; Int_t AppendKey (TKey *key) override;  Insert key in the linked list of keys of this directory. ;  ; void Browse (TBrowser *b) override;  Browse the content of the directory. ;  ; void Build (TFile *motherFile=nullptr, TDirectory *motherDir=nullptr) override;  ; Bool_t cd () override;  Change current directory to ""this"" directory. ;  ; Bool_t cd (const char *path) override;  Change current directory the directory described by the path if given one. ;  ; TObject * CloneObject (const TObject *obj, Bool_t autoadd=kTRUE) override;  Make a clone of an object using the Streamer facility. ;  ; void Close (Option_t *option="""") override;  Delete all objects from memory and directory structure itsel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWorkspace_1_1WSDir.html:75,Guid,Guide,75,doc/master/classRooWorkspace_1_1WSDir.html,https://root.cern,https://root.cern/doc/master/classRooWorkspace_1_1WSDir.html,1,['Guid'],['Guide']
Usability,". ROOT: RooWrapperPdf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; RooWrapperPdf Class Referencefinal. ; The RooWrapperPdf is a class that can be used to convert a function into a PDF. ; During construction, a RooAbsReal has to be passed. When this function is evaluated, the wrapper pdf will in addition evaluate its integral, and normalise the returned value. It will further ensure that negative return values are clipped at zero.; Functions calls such as analytical integral requests or plot sampling hints are simply forwarded to the RooAbsReal that was passed in the constructor. ; Definition at line 24 of file RooWrapperPdf.h. Public Member Functions;  RooWrapperPdf ();  ;  RooWrapperPdf (const char *name, const char *title, RooAbsReal &inputFunction, bool selfNormalized=false);  Construct a new RooWrapperPdf. ;  ;  RooWrapperPdf (const RooWrapperPdf &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; TObject * clone (const char *newname) const override;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &numVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWrapperPdf.html:69,Guid,Guide,69,doc/master/classRooWrapperPdf.html,https://root.cern,https://root.cern/doc/master/classRooWrapperPdf.html,2,"['Guid', 'simpl']","['Guide', 'simply']"
Usability,". ROOT: SMatrix Package. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; SMatrix PackageMath. ; SMatrix is a C++ package for high performance vector and matrix computations. It can be used only in problems when the size of the matrices is known at compile time, like in the tracking reconstruction of HEP experiments. It is based on a C++ technique, called expression templates, to achieve an high level optimization. The C++ templates can be used to implement vector and matrix expressions such that these expressions can be transformed at compile time to code which is equivalent to hand optimized code in a low-level language like FORTRAN or C (see for example ref. 1); The SMatrix has been developed initially by T. Glebe of the Max-Planck-Institut, Heidelberg, as part of the HeraB analysis framework. A subset of the original package has been now incorporated in the ROOT distribution, with the aim to provide to the LHC experiments a stand-alone and high performant matrix package for reconstruction. The API of the current package differs from the original one, in order to be compliant to the ROOT coding conventions.; SMatrix contains generic Matrix and Vector classes to describe matrix and vector of arbitrary dimensions and of arbitrary type. The classes are templated on the scalar type and on the size of the matrix (number of rows and columns) or the vector. Therefore, the size has to be known at compile time. Since the release 5.10, SMatrix supports symmetric matrices using a storage class (ROOT::Math::MatRepSym) which contains only the N*(N+1)/2 independent element of a NxN symmetric matrix. It is not in the mandate of this package to provide a complete linear algebra functionality for these classes. What is provided are basic Matrix Template Functions and Vector Template Functions, such as the matrix-matrix, matrix-vector, vector-vector operations, plus some extra functionality for square matrices, like inversion, which is base",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__SMatrixGroup.html:55,Guid,Guide,55,doc/master/group__SMatrixGroup.html,https://root.cern,https://root.cern/doc/master/group__SMatrixGroup.html,1,['Guid'],['Guide']
Usability,. ROOT: SQL tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; SQL tutorialsTutorials. ; Examples showing the SQL classes. . Files; file  sqlcanvas.C;  This is slight modification of ntuple1.C example. ;  ; file  sqlcreatedb.C;  Create a runcatalog table in a MySQL test database. ;  ; file  sqlcreatedb.py;   Create a runcatalog table in a MySQL test database. ;  ; file  sqlfilldb.C;  Fill run catalog with nfiles entries. ;  ; file  sqlfilldb.py;   Fill run catalog with nfiles entries ;  ; file  SQLiteIPLocation.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLitePlatformDistribution.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLiteTimeVersionOfRoot.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLiteVersionsOfRoot.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  sqlselect.C;  Query example to MySQL test database. ;  ; file  sqlselect.py;  Query example to MySQL test database. ;  ; file  sqltables.C;  This is an example illustrating how the TSQLFile class can be used. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__sql.html:53,Guid,Guide,53,doc/master/group__tutorial__sql.html,https://root.cern,https://root.cern/doc/master/group__tutorial__sql.html,2,['Guid'],['Guide']
Usability,". ROOT: SetWindowAttributes_t Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; SetWindowAttributes_t Struct Reference. ; Attributes that can be used when creating or changing a window. ; Definition at line 93 of file GuiTypes.h. Public Attributes; ULong_t fBackgroundPixel;  background pixel ;  ; Pixmap_t fBackgroundPixmap;  background or kNone or kParentRelative ;  ; ULong_t fBackingPixel;  value to use in restoring planes ;  ; ULong_t fBackingPlanes;  planes to be preserved if possible ;  ; Int_t fBackingStore;  kNotUseful, kWhenMapped, kAlways ;  ; Int_t fBitGravity;  one of bit gravity values ;  ; ULong_t fBorderPixel;  border pixel value ;  ; Pixmap_t fBorderPixmap;  border of the window ;  ; UInt_t fBorderWidth;  border width in pixels ;  ; Colormap_t fColormap;  color map to be associated with window ;  ; Cursor_t fCursor;  cursor to be displayed (or kNone) ;  ; Long_t fDoNotPropagateMask;  set of events that should not propagate ;  ; Long_t fEventMask;  set of events that should be saved ;  ; Mask_t fMask;  bit mask specifying which fields are valid ;  ; Bool_t fOverrideRedirect;  boolean value for override-redirect ;  ; Bool_t fSaveUnder;  should bits under be saved (popups)? ;  ; Int_t fWinGravity;  one of the window gravity values ;  . #include <GuiTypes.h>; Member Data Documentation. ◆ fBackgroundPixel. ULong_t SetWindowAttributes_t::fBackgroundPixel. background pixel ; Definition at line 95 of file GuiTypes.h. ◆ fBackgroundPixmap. Pixmap_t SetWindowAttributes_t::fBackgroundPixmap. background or kNone or kParentRelative ; Definition at line 94 of file GuiTypes.h. ◆ fBackingPixel. ULong_t SetWindowAttributes_t::fBackingPixel. value to use in restoring planes ; Definition at line 103 of file GuiTypes.h. ◆ fBackingPlanes. ULong_t SetWindowAttributes_t::fBackingPlanes. planes to be preserved if possible ; Definition at line 102 of file GuiTypes.h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structSetWindowAttributes__t.html:78,Guid,Guide,78,doc/master/structSetWindowAttributes__t.html,https://root.cern,https://root.cern/doc/master/structSetWindowAttributes__t.html,1,['Guid'],['Guide']
Usability,". ROOT: Shapes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Classes ; ShapesThe Geometry Package. ; Shapes are geometrical objects that provide the basic modeling functionality. . Primitive Shapes; Navigation Methods Performed By Shapes; Creating Shapes; Dividing Shapes; Parametric Shapes. The ""shapes"" provide the definition of the local coordinate system of the volume. Any volume must have a shape. Any shape recognized by the modeller has to derive from the base **TGeoShape** class, providing methods for:. Finding out if a point defined in their local frame is contained or not by the shape;; Computing the distance to enter/exit the shape from a local point, given a known direction;; Computing the maximum distance in any direction from a local point that does NOT result in a boundary crossing of the shape (safe distance);; Computing the cosines of the normal vector to the crossed shape surface, given a starting local point and an ongoing direction. All the features above are globally managed by the modeller in order to provide navigation functionality. In addition to those, shapes have also to implement additional specific abstract methods:. Computation of the minimal box bounding the shape, given that this box have to be aligned with the local coordinates;; Algorithms for dividing the shape along a given axis. The modeller currently provides a set of 20 basic shapes, which we will call primitives. It also provides a special class allowing the creation of shapes as a result of Boolean operations between primitives. These are called composite shapes and the composition operation can be recursive (combined composites). This allows the creation of a quite large number of different shape topologies and combinations. You can have a look and run the tutorial: geodemo.C. Primitive Shapes - the general inheritance scheme; Shapes are named objects and all primitives have constructors like:; TGeoXXX(const char *name,<type> param1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Shapes__classes.html:46,Guid,Guide,46,doc/master/group__Shapes__classes.html,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html,1,['Guid'],['Guide']
Usability,". ROOT: Special functions. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Special functionsMath » MathCore | Math » MathMore. ; Special mathematical functions. ; The naming and numbering of the functions is taken from Matt Austern, (Draft) Technical Report on Standard Library Extensions, N1687=04-0127, September 10, 2004; AuthorCreated by Andras Zsenei on Mon Nov 8 2004 . Special Functions from MathCore; double ROOT::Math::erf (double x);  Error function encountered in integrating the normal distribution. ;  ; double ROOT::Math::erfc (double x);  Complementary error function. ;  ; double ROOT::Math::tgamma (double x);  The gamma function is defined to be the extension of the factorial to real numbers. ;  ; double ROOT::Math::lgamma (double x);  Calculates the logarithm of the gamma function. ;  ; double ROOT::Math::inc_gamma (double a, double x);  Calculates the normalized (regularized) lower incomplete gamma function (lower integral) ;  ; double ROOT::Math::inc_gamma_c (double a, double x);  Calculates the normalized (regularized) upper incomplete gamma function (upper integral) ;  ; double ROOT::Math::beta (double x, double y);  Calculates the beta function. ;  ; double ROOT::Math::inc_beta (double x, double a, double b);  Calculates the normalized (regularized) incomplete beta function. ;  ; double ROOT::Math::sinint (double x);  Calculates the sine integral. ;  ; double ROOT::Math::cosint (double x);  Calculates the real part of the cosine integral Re(Ci). ;  . Special Functions from MathMore; double ROOT::Math::assoc_laguerre (unsigned n, double m, double x);  Computes the generalized Laguerre polynomials for \( n \geq 0, m > -1 \). ;  ; double ROOT::Math::assoc_legendre (unsigned l, unsigned m, double x);  Computes the associated Legendre polynomials. ;  ; double ROOT::Math::comp_ellint_1 (double k);  Calculates the complete elliptic integral of the first kind. ;  ; double ROOT::Math::comp_ellint_2 (double k);  Calculates the c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__SpecFunc.html:57,Guid,Guide,57,doc/master/group__SpecFunc.html,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html,1,['Guid'],['Guide']
Usability,. ROOT: Spectrum tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Spectrum tutorialsTutorials. ; Examples showing the TSpectrum and TSpectrumPainter usage. . Files; file  Background_compton.C;   Example to illustrate the background estimator (class TSpectrum) including Compton edges. ;  ; file  Background_decr.C;   Example to illustrate the background estimator (class TSpectrum). ;  ; file  Background_gamma256.C;   Example to illustrate the background estimator (class TSpectrum2). ;  ; file  Background_gamma64.C;   Example to illustrate the background estimator (class TSpectrum2). ;  ; file  Background_incr.C;   Example to illustrate the background estimator (class TSpectrum). ;  ; file  Background_order.C;   Example to illustrate the influence of the clipping filter difference order on the estimated background. ;  ; file  Background_smooth.C;   Example to illustrate the background estimator (class TSpectrum) including Compton edges. ;  ; file  Background_synt256.C;   Example to illustrate the background estimator (class TSpectrum2). ;  ; file  Background_width.C;   Example to illustrate the influence of the clipping window width on the estimated background. ;  ; file  Background_width2.C;   Example to illustrate the influence of the clipping window width on the estimated background. ;  ; file  Deconvolution.C;   Example to illustrate deconvolution function (class TSpectrum). ;  ; file  Deconvolution2_1.C;   Example to illustrate the Gold deconvolution (class TSpectrum2). ;  ; file  Deconvolution2_2.C;   Example to illustrate the Gold deconvolution (class TSpectrum2). ;  ; file  Deconvolution2_HR.C;   Example to illustrate boosted Gold deconvolution (class TSpectrum2). ;  ; file  Deconvolution_wide.C;   Example to illustrate deconvolution function (class TSpectrum). ;  ; file  Deconvolution_wide_boost.C;   Example to illustrate deconvolution function (class TSpectrum). ;  ; file  DeconvolutionRL_wide.C;   Example to ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__spectrum.html:58,Guid,Guide,58,doc/master/group__tutorial__spectrum.html,https://root.cern,https://root.cern/doc/master/group__tutorial__spectrum.html,1,['Guid'],['Guide']
Usability,". ROOT: Statistical functions from truncated distributions. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; Statistical functions from truncated distributionsMath » MathCore | Math » MathMore » Statistical functions. ; Statistical functions for the truncated distributions. ; Examples of such functions are the first or the second momentum of the truncated distribution. In the case of the Landau, first and second momentum functions are provided for the Landau distribution truncated only on the right side. These functions are defined in the header file Math/ProbFunc.h or in the global one including all statistical functions Math/StatFunc.h . Functions; double ROOT::Math::landau_xm1 (double x, double xi=1, double x0=0);  First moment (mean) of the truncated Landau distribution. ;  ; double ROOT::Math::landau_xm2 (double x, double xi=1, double x0=0);  Second moment of the truncated Landau distribution. ;  . Function Documentation. ◆ landau_xm1(). double ROOT::Math::landau_xm1 ; (; double ; x, . double ; xi = 1, . double ; x0 = 0 . ). First moment (mean) of the truncated Landau distribution. . \[ \frac{1}{D (x)} \int_{-\infty}^{x} t\, p(t) d t \]. where \(p(x)\) is the Landau distribution and \(D(x)\) its cumulative distribution function.; For detailed description see K.S. Kölbig and B. Schorr, A program package for the Landau distribution, Computer Phys. Comm. 31 (1984) 97-111 [Erratum-ibid. 178 (2008) 972]. The same algorithms as in CERNLIB (XM1LAN) is used; Parameters. xThe argument \(x\) ; xiThe width parameter \(\xi\) ; x0The location parameter \(x_0\) . Definition at line 409 of file ProbFuncMathCore.cxx. ◆ landau_xm2(). double ROOT::Math::landau_xm2 ; (; double ; x, . double ; xi = 1, . double ; x0 = 0 . ). Second moment of the truncated Landau distribution. . \[ \frac{1}{D (x)} \int_{-\infty}^{x} t^2\, p(t) d t \]. where \(p(x)\) is the Landau distribution and \(D(x)\) its cumulative distribution function.; For detailed ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__TruncFunc.html:90,Guid,Guide,90,doc/master/group__TruncFunc.html,https://root.cern,https://root.cern/doc/master/group__TruncFunc.html,1,['Guid'],['Guide']
Usability,". ROOT: Statistical functions. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Namespaces |; Classes ; Statistical functionsMath » MathCore | Math » MathMore. ; Probability density functions, cumulative distribution functions and their inverses (quantiles) for various statistical distributions (continuous and discrete). ; Whenever possible the conventions followed are those of the CRC Concise Encyclopedia of Mathematics, Second Edition (or Mathworld). By convention the distributions are centered around 0, so for example in the case of a Gaussian there is no parameter mu. The user must calculate the shift themselves if they wish.; MathCore provides the majority of the probability density functions, of the cumulative distributions and of the quantiles (inverses of the cumulatives). Additional distributions are also provided by the MathMore library. . Modules;  Probability Density Functions (PDF);  Probability density functions of various statistical distributions (continuous and discrete). ;  ;  Cumulative Distribution Functions (CDF);  Cumulative distribution functions of various distributions. ;  ;  Statistical functions from truncated distributions;  Statistical functions for the truncated distributions. ;  ;  Quantile Functions;  Inverse functions of the cumulative distribution functions and the inverse of the complement of the cumulative distribution functions for various distributions. ;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  . Classes; class  ROOT::Math::Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  ROOT::Math::VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  ROOT::Math::VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  ROOT::Math::VavilovAccuratePdf;  Class describing the Vavilov pdf. M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__StatFunc.html:61,Guid,Guide,61,doc/master/group__StatFunc.html,https://root.cern,https://root.cern/doc/master/group__StatFunc.html,1,['Guid'],['Guide']
Usability,". ROOT: Statistical functions. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Namespaces |; Classes ; Statistical functionsMath » MathCore | Math » MathMore. ; Probability density functions, cumulative distribution functions and their inverses (quantiles) for various statistical distributions (continuous and discrete). ; Whenever possible the conventions followed are those of the CRC Concise Encyclopedia of Mathematics, Second Edition (or Mathworld). By convention the distributions are centered around 0, so for example in the case of a Gaussian there is no parameter mu. The user must calculate the shift themselves if they wish.; MathCore provides the majority of the probability density functions, of the cumulative distributions and of the quantiles (inverses of the cumulatives). Additional distributions are also provided by the MathMore library. . Modules;  Probability Density Functions (PDF);  Probability density functions of various statistical distributions (continuous and discrete). ;  ;  Cumulative Distribution Functions (CDF);  Cumulative distribution functions of various distributions. ;  ;  Statistical functions from truncated distributions;  Statistical functions for the truncated distributions. ;  ;  Quantile Functions;  Inverse functions of the cumulative distribution functions and the inverse of the complement of the cumulative distribution functions for various distributions. ;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  . Classes; class  ROOT::Math::Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  ROOT::Math::VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  ROOT::Math::VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  ROOT::Math::VavilovAccuratePdf;  Class describing the Vavilov pdf. Mo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/group__StatFunc.html:60,Guid,Guide,60,doc/v632/group__StatFunc.html,https://root.cern,https://root.cern/doc/v632/group__StatFunc.html,1,['Guid'],['Guide']
Usability,. ROOT: SysInfo_t Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; SysInfo_t Struct Reference. . Definition at line 148 of file TSystem.h. Public Member Functions;  SysInfo_t ();  ; virtual ~SysInfo_t ();  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Public Attributes; Int_t fBusSpeed;  ; Int_t fCpus;  ; Int_t fCpuSpeed;  ; TString fCpuType;  ; Int_t fL2Cache;  ; TString fModel;  ; TString fOS;  ; Int_t fPhysRam;  . #include <TSystem.h>; Constructor & Destructor Documentation. ◆ SysInfo_t(). SysInfo_t::SysInfo_t ; (; ). inline . Definition at line 157 of file TSystem.h. ◆ ~SysInfo_t(). virtual SysInfo_t::~SysInfo_t ; (; ). inlinevirtual . Definition at line 159 of file TSystem.h. Member Function Documentation. ◆ Class(). static TClass * SysInfo_t::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * SysInfo_t::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t SysInfo_t::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 160 of file TSystem.h. ◆ DeclFileName(). static const char * SysInfo_t::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 160 of file TSystem.h. ◆ IsA(). virtual TClass * SysInfo_t::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 160 of file TSystem.h. ◆ Streamer(). virtual void SysInfo_t::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structSysInfo__t.html:66,Guid,Guide,66,doc/master/structSysInfo__t.html,https://root.cern,https://root.cern/doc/master/structSysInfo__t.html,1,['Guid'],['Guide']
Usability,". ROOT: TARInterruptHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TARInterruptHandler Class Reference. . Definition at line 123 of file TApplicationRemote.h. Public Member Functions;  TARInterruptHandler (TApplicationRemote *r);  ; Bool_t Notify () override;  TApplicationRemote interrupt handler. ;  ;  Public Member Functions inherited from TSignalHandler;  TSignalHandler (ESignals sig, Bool_t sync=kTRUE);  Create signal event handler. ;  ; virtual ~TSignalHandler ();  ; void Add () override;  Add signal handler to system signal handler list. ;  ; void Delay ();  ; ESignals GetSignal () const;  ; void HandleDelayedSignal ();  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when signal occurs. ;  ; void Remove () override;  Remove signal handler from system signal handler list. ;  ; void SetSignal (ESignals sig);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTARInterruptHandler.html:75,Guid,Guide,75,doc/master/classTARInterruptHandler.html,https://root.cern,https://root.cern/doc/master/classTARInterruptHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TASImage Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Types |; Private Member Functions |; List of all members ; TASImage Class ReferenceGraphics » 2D Graphics » libAfterImage interface. ; Image class. ; TASImage is the concrete interface to the image processing library libAfterImage.; It allows reading and writing of images in different formats, several image manipulations (scaling, tiling, merging, etc.) and displaying in pads. The size of the image on the screen does not depend on the original size of the image but on the size of the pad. Therefore it is very easy to resize the image on the screen by resizing the pad.; Besides reading an image from a file an image can be defined by a two dimensional array of values. A palette defines the color of each value.; The image can be zoomed by defining a rectangle with the mouse. The color palette can be modified with a GUI, just select StartPaletteEditor() from the context menu.; Several examples showing how to use this class are available in the ROOT tutorials: $ROOTSYS/tutorials/image/ ; Definition at line 31 of file TASImage.h. Public Member Functions;  TASImage ();  Default image constructor. ;  ;  TASImage (const char *file, EImageFileTypes type=kUnknown);  Create an image object and read from specified file. ;  ;  TASImage (const char *name, const Double_t *imageData, UInt_t width, UInt_t height, TImagePalette *palette=nullptr);  Create an image depending on the values of imageData. ;  ;  TASImage (const char *name, const TArrayD &imageData, UInt_t width, TImagePalette *palette=nullptr);  Create an image depending on the values of imageData. ;  ;  TASImage (const char *name, const TVectorD &imageData, UInt_t width, TImagePalette *palette=nullptr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASImage.html:64,Guid,Guide,64,doc/master/classTASImage.html,https://root.cern,https://root.cern/doc/master/classTASImage.html,1,['Guid'],['Guide']
Usability,". ROOT: TASImagePlugin Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TASImagePlugin Class Reference. . Definition at line 26 of file TASImagePlugin.h. Public Member Functions;  TASImagePlugin (const char *ext);  ;  ~TASImagePlugin () override;  ; virtual Bool_t ASImage2File (ASImage *);  ; virtual ASImage * File2ASImage (const char *);  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; unsigned char * ReadFile (const char *, UInt_t &, UInt_t &) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t WriteFile (const char *, unsigned char *, UInt_t, UInt_t) override;  ;  Public Member Functions inherited from TImagePlugin;  TImagePlugin (const char *ext);  ;  ~TImagePlugin () override;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASImagePlugin.html:70,Guid,Guide,70,doc/master/classTASImagePlugin.html,https://root.cern,https://root.cern/doc/master/classTASImagePlugin.html,1,['Guid'],['Guide']
Usability,". ROOT: TASInputHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TASInputHandler Class Reference. . Definition at line 115 of file TApplicationServer.cxx. Public Member Functions;  TASInputHandler (TApplicationServer *s, Int_t fd);  ; Bool_t Notify () override;  Handle this input. ;  ; Bool_t ReadNotify () override;  Notify when something can be read from the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TFileHandler;  TFileHandler (int fd, int mask);  Create a file descriptor event handler. ;  ; virtual ~TFileHandler ();  ; void Add () override;  Add file event handler to system file handler list. ;  ; int GetFd () const;  ; virtual Bool_t HasReadInterest ();  True if handler is interested in read events. ;  ; virtual Bool_t HasWriteInterest ();  True if handler is interested in write events. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsReadReady () const;  ; virtual Bool_t IsWriteReady () const;  ; Bool_t Notify () override;  Notify when event occurred on descriptor associated with this handler. ;  ; void Remove () override;  Remove file event handler from system file handler list. ;  ; virtual void ResetReadyMask ();  ; void SetFd (int fd);  ; virtual void SetInterest (Int_t mask);  Set interest mask to 'mask'. ;  ; virtual void SetReadReady ();  ; virtual void SetWriteReady ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Bool_t WriteNotify ();  Notify when something can be written to the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASInputHandler.html:71,Guid,Guide,71,doc/master/classTASInputHandler.html,https://root.cern,https://root.cern/doc/master/classTASInputHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TASInterruptHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TASInterruptHandler Class Reference. . Definition at line 72 of file TApplicationServer.cxx. Public Member Functions;  TASInterruptHandler (TApplicationServer *s);  ; Bool_t Notify () override;  Handle this interrupt. ;  ;  Public Member Functions inherited from TSignalHandler;  TSignalHandler (ESignals sig, Bool_t sync=kTRUE);  Create signal event handler. ;  ; virtual ~TSignalHandler ();  ; void Add () override;  Add signal handler to system signal handler list. ;  ; void Delay ();  ; ESignals GetSignal () const;  ; void HandleDelayedSignal ();  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when signal occurs. ;  ; void Remove () override;  Remove signal handler from system signal handler list. ;  ; void SetSignal (ESignals sig);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *metho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASInterruptHandler.html:75,Guid,Guide,75,doc/master/classTASInterruptHandler.html,https://root.cern,https://root.cern/doc/master/classTASInterruptHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TASLogHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TASLogHandler Class Reference. . Definition at line 101 of file TApplicationServer.h. Public Types; enum  EStatusBits { kFileIsPipe = (1ULL << ( 23 )); };  ;  Public Types inherited from TFileHandler; enum  { kRead = 1; , kWrite = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TASLogHandler (const char *cmd, TSocket *s, const char *pfx="""");  Execute 'cmd' in a pipe and handle output messages from the related file. ;  ;  TASLogHandler (FILE *f, TSocket *s, const char *pfx="""");  Handle available message from the open file 'f'. ;  ; virtual ~TASLogHandler ();  Handle available message in the open file. ;  ; Bool_t IsValid ();  ; Bool_t Notify () override;  Handle available message in the open file. ;  ; Bool_t ReadNotify () override;  Notify when something can be read from the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TFileHandler;  TFileHandler (int fd, int mask);  Create a file descriptor event handler. ;  ; virtual ~TFileHandler ();  ; void Add () override;  Add file event handler to system file handler list. ;  ; int GetF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASLogHandler.html:69,Guid,Guide,69,doc/master/classTASLogHandler.html,https://root.cern,https://root.cern/doc/master/classTASLogHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TASPaletteEditor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TASPaletteEditor Class ReferenceGraphics » 2D Graphics » libAfterImage interface. ; This is a GUI window to edit a color palette. ; It is called by a pull down menu item of TASImage. ; Definition at line 39 of file TASPaletteEditor.h. Classes; class  LimitLine;  ; class  PaintPalette;  . Public Member Functions;  TASPaletteEditor (TAttImage *attImage, UInt_t w, UInt_t h);  Palette editor constructor. ;  ;  ~TASPaletteEditor () override;  Palette editor destructor. Deletes all frames and their layout hints. ;  ; void CloseWindow () override;  Close editor. ;  ; TClass * IsA () const override;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t param1, Longptr_t param2) override;  Process all editor mouse events. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateRange ();  Updates the range of the palette. ;  ;  Public Member Functions inherited from TPaletteEditor;  TPaletteEditor (TAttImage *attImage, UInt_t w, UInt_t h);  Constructor. ;  ; virtual ~TPaletteEditor ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMainFrame () override;  TGMainFrame destructor. ;  ; virtual Bool_t BindKey (const TGWindow *w, Int_t keycode, Int_t modifier) const;  Bind key to a window. ;  ; void DontCallClose ();  Typically call this method in the slot connected to the CloseWindow() signal to prevent the calling of the default or any derived CloseWindow() methods to prevent premature or double deletion of this window. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPaletteEditor.html:72,Guid,Guide,72,doc/master/classTASPaletteEditor.html,https://root.cern,https://root.cern/doc/master/classTASPaletteEditor.html,1,['Guid'],['Guide']
Usability,". ROOT: TASPaletteEditor::LimitLine Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TASPaletteEditor::LimitLine Class Reference. . Definition at line 52 of file TASPaletteEditor.h. Public Member Functions;  LimitLine (Coord_t x, Coord_t y1, Coord_t y2, TASPaletteEditor *gui);  The blue limit line in the pixel value histogram. ;  ; void Paint (Option_t *option="""") override;  Paint the limit lines. ;  ;  Public Member Functions inherited from TLine;  TLine ();  ;  TLine (const TLine &line);  Line copy constructor. ;  ;  TLine (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Line normal constructor. ;  ;  ~TLine () override=default;  ; void Copy (TObject &line) const override;  Copy this line to line. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual TLine * DrawLine (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Draw this line with new coordinates. ;  ; virtual TLine * DrawLineNDC (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Draw this line with new coordinates in NDC. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; Rectangle_t GetBBox () override;  Return the bounding Box of the Line. ;  ; TPoint GetBBoxCenter () override;  Return the center of the BoundingBox as TPoint in pixels. ;  ; Double_t GetX1 () const;  ; Double_t GetX2 () const;  ; Double_t GetY1 () const;  ; Double_t GetY2 () const;  ; TClass * IsA () const override;  ; Bool_t IsHorizontal ();  Check whether this line is to be drawn horizontally. ;  ; Bool_t IsVertical ();  Check whether this line is to be drawn vertically. ;  ; void ls (Option_t *option="""") const override;  List this line with its attributes. ;  ; TLine & operator= (const TLine &src);  Assignment operator. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPaletteEditor_1_1LimitLine.html:83,Guid,Guide,83,doc/master/classTASPaletteEditor_1_1LimitLine.html,https://root.cern,https://root.cern/doc/master/classTASPaletteEditor_1_1LimitLine.html,1,['Guid'],['Guide']
Usability,". ROOT: TASPaletteEditor::PaintPalette Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; List of all members ; TASPaletteEditor::PaintPalette Class Reference. . Definition at line 42 of file TASPaletteEditor.h. Public Member Functions;  PaintPalette (TImagePalette **palette, TAttImage *attImage);  ; void Paint (Option_t *option="""") override;  Actually paint the paletter. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPaletteEditor_1_1PaintPalette.html:86,Guid,Guide,86,doc/master/classTASPaletteEditor_1_1PaintPalette.html,https://root.cern,https://root.cern/doc/master/classTASPaletteEditor_1_1PaintPalette.html,1,['Guid'],['Guide']
Usability,". ROOT: TASPluginGS Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TASPluginGS Class ReferenceGraphics » 2D Graphics » libAfterImage interface. ; Allows to read PS/EPS/PDF files via GhostScript. ; Definition at line 25 of file TASPluginGS.h. Public Member Functions;  TASPluginGS (const char *ext);  ctor ;  ;  ~TASPluginGS () override;  dtor ;  ; ASImage * File2ASImage (const char *filename) override;  read PS/EPS/PDF file and convert it to ASImage ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TASImagePlugin;  TASImagePlugin (const char *ext);  ;  ~TASImagePlugin () override;  ; virtual Bool_t ASImage2File (ASImage *);  ; unsigned char * ReadFile (const char *, UInt_t &, UInt_t &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t WriteFile (const char *, unsigned char *, UInt_t, UInt_t) override;  ;  Public Member Functions inherited from TImagePlugin;  TImagePlugin (const char *ext);  ;  ~TImagePlugin () override;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPluginGS.html:67,Guid,Guide,67,doc/master/classTASPluginGS.html,https://root.cern,https://root.cern/doc/master/classTASPluginGS.html,1,['Guid'],['Guide']
Usability,". ROOT: TASSigPipeHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TASSigPipeHandler Class Reference. . Definition at line 95 of file TApplicationServer.cxx. Public Member Functions;  TASSigPipeHandler (TApplicationServer *s);  ; Bool_t Notify () override;  Handle this signal. ;  ;  Public Member Functions inherited from TSignalHandler;  TSignalHandler (ESignals sig, Bool_t sync=kTRUE);  Create signal event handler. ;  ; virtual ~TSignalHandler ();  ; void Add () override;  Add signal handler to system signal handler list. ;  ; void Delay ();  ; ESignals GetSignal () const;  ; void HandleDelayedSignal ();  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when signal occurs. ;  ; void Remove () override;  Remove signal handler from system signal handler list. ;  ; void SetSignal (ESignals sig);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASSigPipeHandler.html:73,Guid,Guide,73,doc/master/classTASSigPipeHandler.html,https://root.cern,https://root.cern/doc/master/classTASSigPipeHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TAdvancedGraphicsDialog Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TAdvancedGraphicsDialog Class ReferenceGUI » ROOT Fit Panel. ; Allows to create advanced graphics from the last fit made in the fitpanel. ; This includes the scan graphics, the contour and the confidence levels. ; Definition at line 38 of file TAdvancedGraphicsDialog.h. Public Member Functions;  TAdvancedGraphicsDialog (const TGWindow *p, const TGWindow *main);  ;  ~TAdvancedGraphicsDialog () override;  Cleanup dialog. ;  ; void DoChangedScanPar (Int_t selected);  Changes the Min and Max default values of the scan method, depending on the selected parameter. ;  ; void DoDraw ();  Calls the corresponding method, depending on the selected tab. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a transient frame widget as a C++ statement(s) on output stream out. ;  ; void SaveSource (const char *filename=""Rootdlog.C"", Option_t *option="""") override;  Save the GUI transient frame widget in a C++ macro file. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Publ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAdvancedGraphicsDialog.html:79,Guid,Guide,79,doc/master/classTAdvancedGraphicsDialog.html,https://root.cern,https://root.cern/doc/master/classTAdvancedGraphicsDialog.html,1,['Guid'],['Guide']
Usability,". ROOT: TAnnotation Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TAnnotation Class ReferenceGraphics » 2D Graphics » Graphics pad. ; An annotation is a TLatex which can be drawn in a 2D or 3D space. ; Example:; {; auto hsurf1 = new TH2F(""hsurf1"",""3D text example "",30,-4,4,30,-20,20);; float px, py;; for (Int_t i = 0; i < 25000; i++) {; gRandom->Rannor(px,py);; hsurf1->Fill(px-1,5*py);; hsurf1->Fill(2+0.5*px,2*py-10.,0.1);; }; hsurf1->Draw(""SURF1"");; int binx,biny,binz;; int bmax = hsurf1->GetMaximumBin(binx,biny,binz);; double xm = hsurf1->GetXaxis()->GetBinCenter(binx);; double ym = hsurf1->GetYaxis()->GetBinCenter(biny);; double zm = hsurf1->GetMaximum();; auto t = new TAnnotation(xm,ym,zm,Form(""Maximum = %g"",zm));; t->SetTextFont(42);; t->SetTextSize(0.03);; t->Draw();; }; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; TAnnotation::TAnnotationTAnnotation()Definition TAnnotation.h:25; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; int. Another example:; ; void annotation3d(); {; auto c = new TCanvas(""c"", ""c"", 600, 600);; c->SetTheta(30);; c->SetPhi(50);; gStyle->SetOptStat(0);; gStyle->SetHistTopMargin(0);; gStyle->SetOptTitle(kFALSE);; ; // Define and draw a surface; auto f = new TF2(""f"", ""[0]*cos(x)*cos(y)"", -1, 1, -1, 1);; f->SetParameter(0, 1);; double s = 1./f->Integral(-1, 1, -1, 1);; f->SetParameter(0, s);; f->SetNpx(50);; f->SetNpy(50);; ; f->GetXaxis()->SetTitle(""x"");; f->GetXaxis()->SetTitleOffset(1.4);; f->GetXaxis()->SetTitleSize(0.04);; f->GetXaxis()->",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAnnotation.html:67,Guid,Guide,67,doc/master/classTAnnotation.html,https://root.cern,https://root.cern/doc/master/classTAnnotation.html,1,['Guid'],['Guide']
Usability,". ROOT: TApplication Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TApplication Class ReferenceCore ROOT classes » Base ROOT classes. ; This class creates the ROOT Application Environment that interfaces to the windowing system eventloop and eventhandlers. ; This class must be instantiated exactly once in any given application. Normally the specific application class inherits from TApplication (see TRint). ; Definition at line 39 of file TApplication.h. Public Types; enum  EExitOnException { kDontExit; , kExit; , kAbort; };  ; enum  EFileBits { kExpression = (1ULL << ( 14 )); };  ; enum  EStatusBits { kProcessRemotely = (1ULL << ( 15 )); , kDefaultApplication = (1ULL << ( 16 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TApplication (const char *appClassName, Int_t *argc, char **argv, void *options=nullptr, Int_t numOptions=0);  Create an application environment. ;  ; virtual ~TApplication ();  TApplication dtor. ;  ; virtual const char * ApplicationName () const;  ; Int_t Argc () co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplication.html:68,Guid,Guide,68,doc/master/classTApplication.html,https://root.cern,https://root.cern/doc/master/classTApplication.html,1,['Guid'],['Guide']
Usability,". ROOT: TApplicationImp Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TApplicationImp Class ReferenceCore ROOT classes » Base ROOT classes. ; ABC describing GUI independent application implementation protocol. ; Definition at line 29 of file TApplicationImp.h. Public Member Functions;  TApplicationImp ();  ;  TApplicationImp (const char *appClassName, int *argc, char **argv);  ; virtual ~TApplicationImp ();  ; virtual const char * ApplicationName () const;  ; virtual Int_t ExecCommand (TGWin32Command *code, Bool_t synch);  ; virtual void Hide ();  ; virtual void Iconify ();  ; virtual void Init ();  ; virtual TClass * IsA () const;  ; virtual Bool_t IsCmdThread ();  ; virtual void Lower ();  ; virtual void Open ();  ; virtual void Raise ();  ; virtual void Show ();  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TString fApplicationName;  . #include <TApplicationImp.h>. Inheritance diagram for TApplicationImp:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TApplicationImp() [1/2]. TApplicationImp::TApplicationImp ; (; ). inline . Definition at line 35 of file TApplicationImp.h. ◆ TApplicationImp() [2/2]. TApplicationImp::TApplicationImp ; (; const char * ; appClassName, . int * ; argc, . char ** ; argv . ). inline . Definition at line 36 of file TApplicationImp.h. ◆ ~TApplicationImp(). virtual TApplicationImp::~TApplicationImp ; (; ). inlinevirtual . Definition at line 37 of file TApplicationImp.h. Member Function Documentation. ◆ Appli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationImp.html:71,Guid,Guide,71,doc/master/classTApplicationImp.html,https://root.cern,https://root.cern/doc/master/classTApplicationImp.html,1,['Guid'],['Guide']
Usability,". ROOT: TApplicationRemote Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TApplicationRemote Class Reference. . Definition at line 43 of file TApplicationRemote.h. Classes; class  TARFileStat;  . Public Types; enum  ESendFileOpt { kAscii = 0x0; , kBinary = 0x1; , kForce = 0x2; };  ; enum  EStatusBits { kCollecting = (1ULL << ( 17 )); };  ;  Public Types inherited from TApplication; enum  EExitOnException { kDontExit; , kExit; , kAbort; };  ; enum  EFileBits { kExpression = (1ULL << ( 14 )); };  ; enum  EStatusBits { kProcessRemotely = (1ULL << ( 15 )); , kDefaultApplication = (1ULL << ( 16 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TApplicationRemote (const char *url, Int_t debug=0, const char *script=nullptr);  Main constructor: start a remote session at 'url' accepting callbacks on local port 'port'; if port is already in use scan up to 'scan - 1' ports starting from port + 1, i.e. ;  ; virtual ~TApplicationRemote ();  Destructor. ;  ; const char * ApplicationName () const override;  ; void Browse (TBrowser *b) override;  Browse remote application (working directory and ROOT files). ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationRemote.html:74,Guid,Guide,74,doc/master/classTApplicationRemote.html,https://root.cern,https://root.cern/doc/master/classTApplicationRemote.html,1,['Guid'],['Guide']
Usability,". ROOT: TApplicationRemote::TARFileStat Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TApplicationRemote::TARFileStat Class Reference. . Definition at line 57 of file TApplicationRemote.h. Public Member Functions;  TARFileStat (const char *fn, TMD5 *md5, Long_t mt);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationRemote_1_1TARFileStat.html:87,Guid,Guide,87,doc/master/classTApplicationRemote_1_1TARFileStat.html,https://root.cern,https://root.cern/doc/master/classTApplicationRemote_1_1TARFileStat.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TApplicationServer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TApplicationServer Class Reference. . Definition at line 34 of file TApplicationServer.h. Public Member Functions;  TApplicationServer (Int_t *argc, char **argv, FILE *flog, const char *logfile);  Main constructor. ;  ; virtual ~TApplicationServer ();  Cleanup. ;  ; Int_t BrowseDirectory (const char *dirname);  Browse directory and send back its content to client. ;  ; Int_t BrowseFile (const char *fname);  Browse root file and send back its content; if fname is null, send the full list of files. ;  ; Int_t BrowseKey (const char *keyname);  Read key object and send it back to client. ;  ; const char * GetHost () const;  ; void GetOptions (Int_t *argc, char **argv) override;  Get and handle command line options. ;  ; Int_t GetPort () const;  ; Int_t GetProtocol () const;  ; TSocket * GetSocket () const;  ; const char * GetUser () const;  ; void HandleSigPipe ();  Called when the client is not alive anymore (i.e. ;  ; void HandleSocketInput ();  Handle input coming from the client or from the master server. ;  ; void HandleUrgentData ();  Handle Out-Of-Band data sent by the master or client. ;  ; void Interrupt ();  ; TClass * IsA () const override;  ; Bool_t IsValid () const;  ; Longptr_t ProcessLine (const char *line, Bool_t=kFALSE, Int_t *err=nullptr) override;  Parse a command line received from the client, making sure that the files needed for the execution, if any, are available. ;  ; Int_t ReceiveFile (const char *file, Bool_t bin, Long64_t size);  Receive a file, either sent by a client or a master server. ;  ; void Reset (const char *dir);  Reset environment to be ready for execution of next command. ;  ; void Run (Boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationServer.html:74,Guid,Guide,74,doc/master/classTApplicationServer.html,https://root.cern,https://root.cern/doc/master/classTApplicationServer.html,1,['Guid'],['Guide']
Usability,". ROOT: TArc Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TArc Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Create an Arc. ; An arc is specified with the position of its centre, its radius a minimum and maximum angle. The attributes of the outline line are given via TAttLine. The attributes of the fill area are given via TAttFill ; Definition at line 26 of file TArc.h. Public Member Functions;  TArc ();  Arc default constructor. ;  ;  TArc (const TArc &arc);  Copy constructor. ;  ;  TArc (Double_t x1, Double_t y1, Double_t radius, Double_t phimin=0, Double_t phimax=360);  Arc normal constructor. ;  ;  ~TArc () override;  Arc default destructor. ;  ; void Copy (TObject &arc) const override;  Copy this arc to arc. ;  ; virtual TArc * DrawArc (Double_t x1, Double_t y1, Double_t radius, Double_t phimin=0, Double_t phimax=360, Option_t *option="""");  Draw this arc with new coordinates. ;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEllipse;  TEllipse ();  Ellipse default constructor. ;  ;  TEllipse (const TEllipse &ellipse);  Copy constructor. ;  ;  TEllipse (Double_t x1, Double_t y1, Double_t r1, Double_t r2=0, Double_t phimin=0, Double_t phimax=360, Double_t theta=0);  Ellipse normal constructor. ;  ;  ~TEllipse () override;  Ellipse default destructor. ;  ; void Copy (TObject &ellipse) const override;  Copy this ellipse to ellipse. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to an ellipse. ;  ; void Draw (Option_t *option="""") override;  Draw th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArc.html:60,Guid,Guide,60,doc/master/classTArc.html,https://root.cern,https://root.cern/doc/master/classTArc.html,1,['Guid'],['Guide']
Usability,". ROOT: TArchiveFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TArchiveFile Class ReferenceabstractInput/Output Library. ; Class describing an archive file containing multiple sub-files, like a ZIP or TAR archive. ; Definition at line 24 of file TArchiveFile.h. Public Member Functions;  TArchiveFile ();  ;  TArchiveFile (const char *archive, const char *member, TFile *file);  Specify the archive name and member name. ;  ;  ~TArchiveFile () override;  Dtor. ;  ; const char * GetArchiveName () const;  ; TArchiveMember * GetMember () const;  ; Long64_t GetMemberFilePosition () const;  Return position in archive of current member. ;  ; Int_t GetMemberIndex () const;  ; const char * GetMemberName () const;  ; TObjArray * GetMembers () const;  ; Int_t GetNumberOfMembers () const;  Returns number of members in archive. ;  ; TClass * IsA () const override;  ; virtual Int_t OpenArchive ()=0;  ; virtual Int_t SetCurrentMember ()=0;  ; virtual Int_t SetMember (const char *member);  Explicitely make the specified member the current member. ;  ; virtual Int_t SetMember (Int_t idx);  Explicitely make the member with the specified index the current member. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArchiveFile.html:68,Guid,Guide,68,doc/master/classTArchiveFile.html,https://root.cern,https://root.cern/doc/master/classTArchiveFile.html,1,['Guid'],['Guide']
Usability,". ROOT: TArchiveMember Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Friends |; List of all members ; TArchiveMember Class Reference. . Definition at line 65 of file TArchiveFile.h. Public Member Functions;  TArchiveMember ();  Default ctor. ;  ;  TArchiveMember (const char *name);  Create an archive member file. ;  ;  TArchiveMember (const TArchiveMember &member);  Copy ctor. ;  ;  ~TArchiveMember () override;  ; const char * GetComment () const;  ; Long64_t GetCompressedSize () const;  ; Long64_t GetDecompressedSize () const;  ; Long64_t GetFilePosition () const;  ; TDatime GetModTime () const;  ; const char * GetName () const override;  Returns name of object. ;  ; Long64_t GetPosition () const;  ; TClass * IsA () const override;  ; Bool_t IsDirectory () const;  ; TArchiveMember & operator= (const TArchiveMember &rhs);  Assignment operator. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *=""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArchiveMember.html:70,Guid,Guide,70,doc/master/classTArchiveMember.html,https://root.cern,https://root.cern/doc/master/classTArchiveMember.html,1,['Guid'],['Guide']
Usability,". ROOT: TArray Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; Friends |; List of all members ; TArray Class ReferenceabstractCore ROOT classes » Containers. ; Abstract array base class. ; Used by TArrayC, TArrayS, TArrayI, TArrayL, TArrayF and TArrayD. Data member is public for historical reasons. PyROOT; When used from Python, the subclasses of TArray (TArrayC, TArrayS, TArrayI, TArrayL, TArrayF and TArrayD) benefit from the following extra features:. Their size can be obtained with len, which is equivalent to TArray::GetSize(): import ROOT; ; a = ROOT.TArrayD(2); print(len(a)) # prints '2'; lenOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t UChar_t lenDefinition TGWin32VirtualXProxy.cxx:249. Their elements can be read and written with the getitem and setitem operators, respectively: a[0] = 0.2; a[1] = 1.7; print(a[0]) # prints '0.2'. They are iterable: for elem in a:; print(elem). Definition at line 31 of file TArray.h. Public Member Functions;  TArray ();  ;  TArray (const TArray &a);  ;  TArray (Int_t n);  ; virtual ~TArray ();  ; virtual Double_t GetAt (Int_t i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArray.html:62,Guid,Guide,62,doc/master/classTArray.html,https://root.cern,https://root.cern/doc/master/classTArray.html,1,['Guid'],['Guide']
Usability,". ROOT: TArrayC Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TArrayC Class ReferenceCore ROOT classes » Containers. ; Array of chars or bytes (8 bits per element). ; Definition at line 27 of file TArrayC.h. Public Member Functions;  TArrayC ();  Default TArrayC ctor. ;  ;  TArrayC (const TArrayC &array);  Copy constructor. ;  ;  TArrayC (Int_t n);  Create TArrayC object and set array size to n chars. ;  ;  TArrayC (Int_t n, const Char_t *array);  Create TArrayC object and initialize it with values of array. ;  ; virtual ~TArrayC ();  Delete TArrayC object. ;  ; void AddAt (Char_t c, Int_t i);  Add char c at position i. Check for out of bounds. ;  ; void Adopt (Int_t n, Char_t *array);  Adopt array arr into TArrayC, i.e. ;  ; Char_t At (Int_t i) const;  ; void Copy (TArrayC &array) const;  ; Char_t * GetArray ();  ; const Char_t * GetArray () const;  ; Double_t GetAt (Int_t i) const override;  ; Stat_t GetSum () const;  ; TClass * IsA () const override;  ; TArrayC & operator= (const TArrayC &rhs);  TArrayC assignment operator. ;  ; Char_t & operator[] (Int_t i);  ; Char_t operator[] (Int_t i) const;  ; void Reset (Char_t val=0);  ; void Set (Int_t n) override;  Set size of this array to n chars. ;  ; void Set (Int_t n, const Char_t *array);  Set size of this array to n chars and set the contents. ;  ; void SetAt (Double_t v, Int_t i) override;  ; void Streamer (TBuffer &) override;  Stream a TArrayC object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArray;  TArray ();  ;  TArray (const TArray &a);  ;  TArray (Int_t n);  ; virtual ~TArray ();  ; Int_t GetSize () const;  ; TArray & operator= (const TArray &rhs);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArrayC.html:63,Guid,Guide,63,doc/master/classTArrayC.html,https://root.cern,https://root.cern/doc/master/classTArrayC.html,1,['Guid'],['Guide']
Usability,". ROOT: TArrayD Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TArrayD Class ReferenceCore ROOT classes » Containers. ; Array of doubles (64 bits per element). ; Definition at line 27 of file TArrayD.h. Public Member Functions;  TArrayD ();  Default TArrayD ctor. ;  ;  TArrayD (const TArrayD &array);  Copy constructor. ;  ;  TArrayD (Int_t n);  Create TArrayD object and set array size to n doubles. ;  ;  TArrayD (Int_t n, const Double_t *array);  Create TArrayD object and initialize it with values of array. ;  ; virtual ~TArrayD ();  Delete TArrayD object. ;  ; void AddAt (Double_t c, Int_t i);  Set the double c value at position i in the array. ;  ; void Adopt (Int_t n, Double_t *array);  Adopt array arr into TArrayD, i.e. ;  ; Double_t At (Int_t i) const;  ; void Copy (TArrayD &array) const;  ; Double_t * GetArray ();  ; const Double_t * GetArray () const;  ; Double_t GetAt (Int_t i) const override;  ; Stat_t GetSum () const;  ; TClass * IsA () const override;  ; TArrayD & operator= (const TArrayD &rhs);  TArrayD assignment operator. ;  ; Double_t & operator[] (Int_t i);  ; Double_t operator[] (Int_t i) const;  ; void Reset ();  ; void Reset (Double_t val);  ; void Set (Int_t n) override;  Set size of this array to n doubles. ;  ; void Set (Int_t n, const Double_t *array);  Set size of this array to n doubles and set the contents This function should not be called if the array was declared via Adopt. ;  ; void SetAt (Double_t v, Int_t i) override;  ; void Streamer (TBuffer &) override;  Stream a TArrayD object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArray;  TArray ();  ;  TArray (const TArray &a);  ;  TArray (Int_t n);  ; virtual ~TArray ();  ; Int_t GetSize () const;  ; TArray & operator= (const TArray &rhs);  ; void S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArrayD.html:63,Guid,Guide,63,doc/master/classTArrayD.html,https://root.cern,https://root.cern/doc/master/classTArrayD.html,1,['Guid'],['Guide']
Usability,". ROOT: TArrayF Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TArrayF Class ReferenceCore ROOT classes » Containers. ; Array of floats (32 bits per element). ; Definition at line 27 of file TArrayF.h. Public Member Functions;  TArrayF ();  Default TArrayF ctor. ;  ;  TArrayF (const TArrayF &array);  Copy constructor. ;  ;  TArrayF (Int_t n);  Create TArrayF object and set array size to n floats. ;  ;  TArrayF (Int_t n, const Float_t *array);  Create TArrayF object and initialize it with values of array. ;  ; virtual ~TArrayF ();  Delete TArrayF object. ;  ; void AddAt (Float_t c, Int_t i);  Add float c at position i. Check for out of bounds. ;  ; void Adopt (Int_t n, Float_t *array);  Adopt array arr into TArrayF, i.e. ;  ; Float_t At (Int_t i) const;  ; void Copy (TArrayF &array) const;  ; Float_t * GetArray ();  ; const Float_t * GetArray () const;  ; Double_t GetAt (Int_t i) const override;  ; Stat_t GetSum () const;  ; TClass * IsA () const override;  ; TArrayF & operator= (const TArrayF &rhs);  TArrayF assignment operator. ;  ; Float_t & operator[] (Int_t i);  ; Float_t operator[] (Int_t i) const;  ; void Reset ();  ; void Reset (Float_t val);  ; void Set (Int_t n) override;  Set size of this array to n floats. ;  ; void Set (Int_t n, const Float_t *array);  Set size of this array to n floats and set the contents. ;  ; void SetAt (Double_t v, Int_t i) override;  ; void Streamer (TBuffer &) override;  Stream a TArrayF object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArray;  TArray ();  ;  TArray (const TArray &a);  ;  TArray (Int_t n);  ; virtual ~TArray ();  ; Int_t GetSize () const;  ; TArray & operator= (const TArray &rhs);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Func",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArrayF.html:63,Guid,Guide,63,doc/master/classTArrayF.html,https://root.cern,https://root.cern/doc/master/classTArrayF.html,1,['Guid'],['Guide']
Usability,". ROOT: TArrayI Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TArrayI Class ReferenceCore ROOT classes » Containers. ; Array of integers (32 bits per element). ; Definition at line 27 of file TArrayI.h. Public Member Functions;  TArrayI ();  Default TArrayI ctor. ;  ;  TArrayI (const TArrayI &array);  Copy constructor. ;  ;  TArrayI (Int_t n);  Create TArrayI object and set array size to n integers. ;  ;  TArrayI (Int_t n, const Int_t *array);  Create TArrayI object and initialize it with values of array. ;  ; virtual ~TArrayI ();  Delete TArrayI object. ;  ; void AddAt (Int_t c, Int_t i);  Add Int_t c at position i. Check for out of bounds. ;  ; void Adopt (Int_t n, Int_t *array);  Adopt array arr into TArrayI, i.e. ;  ; Int_t At (Int_t i) const;  ; void Copy (TArrayI &array) const;  ; Int_t * GetArray ();  ; const Int_t * GetArray () const;  ; Double_t GetAt (Int_t i) const override;  ; Stat_t GetSum () const;  ; TClass * IsA () const override;  ; TArrayI & operator= (const TArrayI &rhs);  TArrayI assignment operator. ;  ; Int_t & operator[] (Int_t i);  ; Int_t operator[] (Int_t i) const;  ; void Reset ();  ; void Reset (Int_t val);  ; void Set (Int_t n) override;  Set size of this array to n ints. ;  ; void Set (Int_t n, const Int_t *array);  Set size of this array to n ints and set the contents. ;  ; void SetAt (Double_t v, Int_t i) override;  ; void Streamer (TBuffer &) override;  Stream a TArrayI object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArray;  TArray ();  ;  TArray (const TArray &a);  ;  TArray (Int_t n);  ; virtual ~TArray ();  ; Int_t GetSize () const;  ; TArray & operator= (const TArray &rhs);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArrayI.html:63,Guid,Guide,63,doc/master/classTArrayI.html,https://root.cern,https://root.cern/doc/master/classTArrayI.html,1,['Guid'],['Guide']
Usability,". ROOT: TArrow Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TArrow Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Draw all kinds of Arrows. ; The different arrow's formats are explained in TArrow::TArrow. The picture below gives some examples.; Once an arrow is drawn on the screen:. One can click on one of the edges and move this edge.; One can click on any other arrow part to move the entire arrow. ; void arrows(){; auto c1 = new TCanvas(""c1"");; c1->Range(0,0,1,1);; ; auto par = new TPaveLabel(0.1,0.8,0.9,0.95,""Examples of various arrows formats"");; par->SetFillColor(42);; par->Draw();; ; auto ar1 = new TArrow(0.1,0.1,0.1,0.7);; ar1->Draw();; auto ar2 = new TArrow(0.2,0.1,0.2,0.7,0.05,""|>"");; ar2->SetAngle(40);; ar2->SetLineWidth(2);; ar2->Draw();; auto ar3 = new TArrow(0.3,0.1,0.3,0.7,0.05,""<|>"");; ar3->SetAngle(40);; ar3->SetLineWidth(2);; ar3->Draw();; auto ar4 = new TArrow(0.46,0.7,0.82,0.42,0.07,""|>"");; ar4->SetAngle(60);; ar4->SetLineWidth(2);; ar4->SetFillColor(2);; ar4->Draw();; auto ar5 = new TArrow(0.4,0.25,0.95,0.25,0.15,""<|>"");; ar5->SetAngle(60);; ar5->SetLineWidth(4);; ar5->SetLineColor(4);; ar5->SetFillStyle(3008);; ar5->SetFillColor(2);; ar5->Draw();; }; TArrow::TArrowTArrow()Arrow default constructor.Definition TArrow.cxx:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; c1return c1Definition legend1.C:41; . Definition at line 29 of file TArrow.h. Public Member Functions;  TArrow ();  Arrow default constructor. ;  ;  TArrow (const TArrow &arrow);  Copy constructor. ;  ;  TArrow (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Float_t arrowsize=0.05, Option_t *option="">"");  Arrow normal constructor. ;  ;  ~TArrow () override;  Arrow d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArrow.html:62,Guid,Guide,62,doc/master/classTArrow.html,https://root.cern,https://root.cern/doc/master/classTArrow.html,1,['Guid'],['Guide']
Usability,". ROOT: TAtt3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TAtt3D Class ReferenceCore ROOT classes » Base ROOT classes | Graphics » Graphics attributes. ; Use this attribute class when an object should have 3D capabilities. ; Definition at line 19 of file TAtt3D.h. Public Member Functions;  TAtt3D ();  ; virtual ~TAtt3D ();  ; virtual TClass * IsA () const;  ; virtual void Sizeof3D () const;  Set total size of this 3D object (used by X3D interface). ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . #include <TAtt3D.h>. Inheritance diagram for TAtt3D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TAtt3D(). TAtt3D::TAtt3D ; (; ). inline . Definition at line 22 of file TAtt3D.h. ◆ ~TAtt3D(). virtual TAtt3D::~TAtt3D ; (; ). inlinevirtual . Definition at line 23 of file TAtt3D.h. Member Function Documentation. ◆ Class(). static TClass * TAtt3D::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TAtt3D::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TAtt3D::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 27 of file TAtt3D.h. ◆ DeclFileName(). static const char * TAtt3D::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 27 of file TAtt3D.h. ◆ IsA(). virtual TClass * TAtt3D::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented in Jet, TGeoV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAtt3D.html:62,Guid,Guide,62,doc/master/classTAtt3D.html,https://root.cern,https://root.cern/doc/master/classTAtt3D.html,1,['Guid'],['Guide']
Usability,". ROOT: TAttAxis Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TAttAxis Class ReferenceCore ROOT classes » Base ROOT classes | Graphics » Graphics attributes. ; Manages histogram axis attributes. ; They are:. The number of divisions: TAttAxis::SetNdivisions.; The line axis' color: TAttAxis::SetAxisColor.; The axis labels' color: TAttAxis::SetLabelColor.; The axis labels' font: TAttAxis::SetLabelFont.; The axis labels' offset: TAttAxis::SetLabelOffset.; The axis labels' size: TAttAxis::SetLabelSize.; The tick marks's length: TAttAxis::SetTickLength or TAttAxis::SetTickSize .; The axis title's offset: TAttAxis::SetTitleOffset.; The axis title's size: TAttAxis::SetTitleSize.; The axis title's color: TAttAxis::SetTitleColor.; The axis title's font: TAttAxis::SetTitleFont. . Definition at line 18 of file TAttAxis.h. Public Member Functions;  TAttAxis ();  ; virtual ~TAttAxis ();  Destructor. ;  ; void Copy (TAttAxis &attaxis) const;  Copy of the object. ;  ; virtual Color_t GetAxisColor () const;  ; virtual Color_t GetLabelColor () const;  ; virtual Style_t GetLabelFont () const;  ; virtual Float_t GetLabelOffset () const;  ; virtual Float_t GetLabelSize () const;  ; virtual Int_t GetMaxDigits () const;  ; virtual Int_t GetNdivisions () const;  ; virtual Float_t GetTickLength () const;  ; virtual Color_t GetTitleColor () const;  ; virtual Style_t GetTitleFont () const;  ; virtual Float_t GetTitleOffset () const;  ; virtual Float_t GetTitleSize () const;  ; virtual TClass * IsA () const;  ; virtual void ResetAttAxis (Option_t *option="""");  Reset axis attributes. ;  ; virtual void SaveAttributes (std::ostream &out, const char *name, const char *subname);  Save axis attributes as C++ statement(s) on output stream out. ;  ; virtual void SetAxisColor (Color_t color=1, Float_t alpha=1.);  Set color ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttAxis.html:64,Guid,Guide,64,doc/master/classTAttAxis.html,https://root.cern,https://root.cern/doc/master/classTAttAxis.html,1,['Guid'],['Guide']
Usability,". ROOT: TAttBBox2D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TAttBBox2D Class ReferenceabstractCore ROOT classes » Base ROOT classes | Graphics » Graphics attributes. ; Abstract base class for elements drawn in the editor. ; Classes inheriting from TAttBBox2D implementing the TAttBBox2D virtual classes, and using TPad::ShowGuideLines in ExecuteEvent will automatically get the guide lines drawn when moved in the pad. All methods work with pixel coordinates. ; Definition at line 19 of file TAttBBox2D.h. Public Member Functions; virtual ~TAttBBox2D ();  ; virtual Rectangle_t GetBBox ()=0;  ; virtual TPoint GetBBoxCenter ()=0;  ; virtual TClass * IsA () const;  ; virtual void SetBBoxCenter (const TPoint &p)=0;  ; virtual void SetBBoxCenterX (const Int_t x)=0;  ; virtual void SetBBoxCenterY (const Int_t y)=0;  ; virtual void SetBBoxX1 (const Int_t x)=0;  ; virtual void SetBBoxX2 (const Int_t x)=0;  ; virtual void SetBBoxY1 (const Int_t y)=0;  ; virtual void SetBBoxY2 (const Int_t y)=0;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . #include <TAttBBox2D.h>. Inheritance diagram for TAttBBox2D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~TAttBBox2D(). TAttBBox2D::~TAttBBox2D ; (; ). virtual . Definition at line 30 of file TAttBBox2D.cxx. Member Function Documentation. ◆ Class(). static TClass * TAttBBox2D::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TAttBBox2D::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Vers",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttBBox2D.html:66,Guid,Guide,66,doc/master/classTAttBBox2D.html,https://root.cern,https://root.cern/doc/master/classTAttBBox2D.html,2,"['Guid', 'guid']","['Guide', 'guide']"
Usability,". ROOT: TAttCanvas Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TAttCanvas Class ReferenceGraphics » 2D Graphics » Graphics pad | Graphics » Graphics attributes. ; Manages canvas attributes. ; Referenced by TStyle. ; Definition at line 17 of file TAttCanvas.h. Public Member Functions;  TAttCanvas ();  Default constructor. ;  ; virtual ~TAttCanvas ();  Destructor. ;  ; virtual void Copy (TAttCanvas &attcanvas) const;  Copy constructor. ;  ; Float_t GetAdate () const;  ; Float_t GetTitleFromTop () const;  ; Float_t GetXBetween () const;  ; Float_t GetXdate () const;  ; Float_t GetYBetween () const;  ; Float_t GetYdate () const;  ; virtual TClass * IsA () const;  ; virtual void Print (Option_t *option="""") const;  Print canvas attributes. ;  ; virtual void ResetAttCanvas (Option_t *option="""");  Print canvas attributes. ;  ; virtual void SetAdate (Float_t adate);  ; virtual void SetTitleFromTop (Float_t titlefromtop);  ; virtual void SetXBetween (Float_t xbetween);  ; virtual void SetXdate (Float_t xdate);  ; virtual void SetYBetween (Float_t ybetween);  ; virtual void SetYdate (Float_t ydate);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; Float_t fAdate;  Alignment for the date. ;  ; Float_t fTitleFromTop;  Y distance of Global Title from top. ;  ; Float_t fXBetween;  X distance between pads. ;  ; Float_t fXdate;  X position where to draw the date. ;  ; Float_t fYBetween;  Y distance between pads. ;  ; Float_t fYdate;  X position where to draw the date. ;  . #include <TAttCanvas.h>; Constructor & Destructor Documentation. ◆ TAttCan",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttCanvas.html:66,Guid,Guide,66,doc/master/classTAttCanvas.html,https://root.cern,https://root.cern/doc/master/classTAttCanvas.html,1,['Guid'],['Guide']
Usability,". ROOT: TAttFill Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TAttFill Class ReferenceCore ROOT classes » Base ROOT classes | Graphics » Graphics attributes. ; Fill Area Attributes class. ; This class is used (in general by secondary inheritance) by many other classes (graphics, histograms). It holds all the fill area attributes. Fill Area attributes; Fill Area attributes are:. Fill Area color; Fill Area style. Fill Area color; The fill area color is a color index (integer) pointing in the ROOT color table. The fill area color of any class inheriting from TAttFill can be changed using the method SetFillColor and retrieved using the method GetFillColor. The following table shows the first 50 default colors. Color transparency; SetFillColorAlpha(), allows to set a transparent color. In the following example the fill color of the histogram histo is set to blue with an opacity of 35% (i.e. a transparency of 65%). (The color kBlue itself is internally stored as fully opaque.); histo->SetFillColorAlpha(kBlue, 0.35);; kBlue@ kBlueDefinition Rtypes.h:66; The transparency is available on all platforms when the flag OpenGL.CanvasPreferGL is set to 1 in $ROOTSYS/etc/system.rootrc, or on Mac with the Cocoa backend. On the file output it is visible with PDF, PNG, Gif, JPEG, SVG, TeX... but not PostScript.; Alternatively, you can call at the top of your script gSytle->SetCanvasPreferGL();. Or if you prefer to activate GL for a single canvas c, then use c->SetSupportGL(true);. The ROOT Color Wheel.; The wheel contains the recommended 216 colors to be used in web applications. The colors in the Color Wheel are created by TColor::CreateColorWheel.; Using this color set for your text, background or graphics will give your application a consistent appearance across different platforms and browsers.; Colors",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttFill.html:64,Guid,Guide,64,doc/master/classTAttFill.html,https://root.cern,https://root.cern/doc/master/classTAttFill.html,1,['Guid'],['Guide']
Usability,". ROOT: TAttImage Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TAttImage Class ReferenceGraphics » 2D Graphics » Basic graphics | Graphics » Graphics attributes. ; TImage attributes. ; Image attributes are:. Image Quality (see EImageQuality for the list of qualities); Compression defines the compression rate of the color data in the internal image structure. Speed and memory depends on this rate, but not the image display itself 0: no compression; 100: max compression; Radio Flag: kTRUE the x/y radio of the displayed image is always identical to the original image kFALSE the x and y size of the displayed image depends on the size of the pad; Palette: Defines the conversion from a pixel value to the screen color. This class is used (in general by secondary inheritance) by some other classes (image display). ; Definition at line 59 of file TAttImage.h. Public Types; enum  EImageQuality { ;   kImgDefault = -1; , kImgPoor = 0; , kImgFast = 1; , kImgGood = 2; , ;   kImgBest = 3. };  . Public Member Functions;  TAttImage ();  TAttImage default constructor. ;  ;  TAttImage (EImageQuality lquality, UInt_t lcompression, Bool_t constRatio);  TAttImage normal constructor. ;  ; virtual ~TAttImage ();  TAttImage destructor. ;  ; void Copy (TAttImage &attline) const;  Copy this image attributes to a new attimage. ;  ; virtual void EditorClosed ();  ; Bool_t GetConstRatio () const;  ; UInt_t GetImageCompression () const;  ; EImageQuality GetImageQuality () const;  ; virtual const TImagePalette & GetPalette () const;  ; virtual TClass * IsA () const;  ; Bool_t IsPaletteEnabled () const;  ; virtual void ResetAttImage (Option_t *option="""");  Reset this image attributes to default values. ;  ; virtual void SaveImageAttributes (std::ostream &out, const char *name, EImageQuality qualdef=kImgD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttImage.html:65,Guid,Guide,65,doc/master/classTAttImage.html,https://root.cern,https://root.cern/doc/master/classTAttImage.html,1,['Guid'],['Guide']
Usability,". ROOT: TAttLine Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TAttLine Class ReferenceCore ROOT classes » Base ROOT classes | Graphics » Graphics attributes. ; Line Attributes class. ; This class is used (in general by secondary inheritance) by many other classes (graphics, histograms). It holds all the line attributes. Line attributes; Line attributes are:. Line Color; Line Width; Line Style. Line Color; The line color is a color index (integer) pointing in the ROOT color table. The line color of any class inheriting from TAttLine can be changed using the method SetLineColor and retrieved using the method GetLineColor. The following table shows the first 50 default colors. Color transparency; SetLineColorAlpha(), allows to set a transparent color. In the following example the line color of the histogram histo is set to blue with an opacity of 35% (i.e. a transparency of 65%). (The color kBlue itself is internally stored as fully opaque.); histo->SetLineColorAlpha(kBlue, 0.35);; kBlue@ kBlueDefinition Rtypes.h:66; The transparency is available on all platforms when the flag OpenGL.CanvasPreferGL is set to 1 in $ROOTSYS/etc/system.rootrc, or on Mac with the Cocoa backend. On the file output it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript.; Alternatively, you can call at the top of your script gSytle->SetCanvasPreferGL();. Or if you prefer to activate GL for a single canvas c, then use c->SetSupportGL(true);. Line Width; The line width is expressed in pixel units. The line width of any class inheriting from TAttLine can be changed using the method SetLineWidth and retrieved using the method GetLineWidth. The following picture shows the line widths from 1 to 10 pixels. Line Style; Line styles are identified via integer numbers. The line style of any class inheriting ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttLine.html:64,Guid,Guide,64,doc/master/classTAttLine.html,https://root.cern,https://root.cern/doc/master/classTAttLine.html,1,['Guid'],['Guide']
Usability,". ROOT: TAttMarker Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TAttMarker Class ReferenceCore ROOT classes » Base ROOT classes | Graphics » Graphics attributes. ; Marker Attributes class. ; This class is used (in general by secondary inheritance) by many other classes (graphics, histograms). It holds all the markers attributes. Marker attributes; The marker attributes are:. Marker color; Marker style; Marker line width. Marker size. Marker color; The marker color is a color index (integer) pointing in the ROOT color table. The marker color of any class inheriting from TAttMarker can be changed using the method SetMarkerColor and retrieved using the method GetMarkerColor. The following table shows the first 50 default colors. Color transparency; SetMarkerColorAlpha(), allows to set a transparent color. In the following example the marker color of the histogram histo is set to blue with an opacity of 35% (i.e. a transparency of 65%). (The color kBlue itself is internally stored as fully opaque.); histo->SetMarkerColorAlpha(kBlue, 0.35);; kBlue@ kBlueDefinition Rtypes.h:66; The transparency is available on all platforms when the flag OpenGL.CanvasPreferGL is set to 1 in $ROOTSYS/etc/system.rootrc, or on Mac with the Cocoa backend. On the file output it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript.; Alternatively, you can call at the top of your script gSytle->SetCanvasPreferGL();. Or if you prefer to activate GL for a single canvas c, then use c->SetSupportGL(true);. Marker style; The Marker style defines the markers' shape. The marker style of any class inheriting from TAttMarker can be changed using the method SetMarkerStyle and retrieved using the method GetMarkerStyle.; The following list gives the currently supported markers (screen and PostScript) style. Each ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttMarker.html:66,Guid,Guide,66,doc/master/classTAttMarker.html,https://root.cern,https://root.cern/doc/master/classTAttMarker.html,1,['Guid'],['Guide']
Usability,". ROOT: TAttPad Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TAttPad Class ReferenceCore ROOT classes » Base ROOT classes | Graphics » Graphics attributes. ; Manages default Pad attributes. ; Referenced by TStyle. ; Definition at line 19 of file TAttPad.h. Public Member Functions;  TAttPad ();  Constructor. ;  ; virtual ~TAttPad ();  Destructor. ;  ; virtual void Copy (TAttPad &attpad) const;  copy function ;  ; Float_t GetAfile () const;  ; Float_t GetAstat () const;  ; Float_t GetBottomMargin () const;  ; Int_t GetFrameBorderMode () const;  ; Width_t GetFrameBorderSize () const;  ; Color_t GetFrameFillColor () const;  ; Style_t GetFrameFillStyle () const;  ; Color_t GetFrameLineColor () const;  ; Style_t GetFrameLineStyle () const;  ; Width_t GetFrameLineWidth () const;  ; Float_t GetLeftMargin () const;  ; Float_t GetRightMargin () const;  ; Float_t GetTopMargin () const;  ; Float_t GetXfile () const;  ; Float_t GetXstat () const;  ; Float_t GetYfile () const;  ; Float_t GetYstat () const;  ; virtual TClass * IsA () const;  ; virtual void Print (Option_t *option="""") const;  Print function. ;  ; virtual void ResetAttPad (Option_t *option="""");  Reset pad attributes. ;  ; virtual void SetAfile (Float_t afile);  ; virtual void SetAstat (Float_t astat);  ; virtual void SetBottomMargin (Float_t bottommargin);  Set Pad bottom margin in fraction of the pad height. ;  ; void SetFrameBorderMode (Int_t mode=1);  ; void SetFrameBorderSize (Width_t size=1);  ; void SetFrameFillColor (Color_t color=1);  ; void SetFrameFillStyle (Style_t styl=0);  ; void SetFrameLineColor (Color_t color=1);  ; void SetFrameLineStyle (Style_t styl=0);  ; void SetFrameLineWidth (Width_t width=1);  ; virtual void SetLeftMargin (Float_t leftmargin);  Set Pad left margin in fraction of the pad width. ;  ; virtual void Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttPad.html:63,Guid,Guide,63,doc/master/classTAttPad.html,https://root.cern,https://root.cern/doc/master/classTAttPad.html,1,['Guid'],['Guide']
Usability,". ROOT: TAttParticle Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Private Attributes |; List of all members ; TAttParticle Class ReferenceMonte Carlo » EG. ; Particle definition, partly based on GEANT3 particle definition. ; Definition at line 30 of file TAttParticle.h. Public Member Functions;  TAttParticle ();  Particle definition default constructor. ;  ;  TAttParticle (const char *name, const char *title, Double_t Mass, Bool_t Stable, Double_t DecayWidth, Double_t Charge, const char *Type, Int_t MCnumber, Int_t granularity=90, Double_t LowerCutOff=1.e-5, Double_t HighCutOff=1.e4);  Particle definition normal constructor. ;  ;  ~TAttParticle () override;  Particle destructor. ;  ; virtual Double_t GetCharge () const;  ; virtual Double_t GetDecayWidth () const;  ; virtual Double_t GetEnergyCut () const;  ; virtual Double_t GetEnergyLimit () const;  ; virtual Double_t GetGranularity () const;  ; virtual Double_t GetMass () const;  ; virtual Int_t GetMCNumber () const;  ; virtual const char * GetParticleType () const;  ; virtual Bool_t GetStable () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print the entire information of this kind of particle. ;  ; virtual Double_t SampleMass () const;  Samples a mass according to the Breit-Wigner resonance distribution. ;  ; virtual Double_t SampleMass (Double_t widthcut) const;  Samples a mass in the interval: ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttParticle.html:68,Guid,Guide,68,doc/master/classTAttParticle.html,https://root.cern,https://root.cern/doc/master/classTAttParticle.html,1,['Guid'],['Guide']
Usability,". ROOT: TAttText Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TAttText Class ReferenceCore ROOT classes » Base ROOT classes | Graphics » Graphics attributes. ; Text Attributes class. ; This class is used (in general by secondary inheritance) by many other classes (graphics, histograms). It holds all the text attributes. Text attributes; Text attributes are:. Text Alignment; Text Angle; Text Color; Text Size; Text Font and Precision; Font quality and speed; How to use True Type Fonts; List of the currently supported fonts. Text Alignment; The text alignment is an integer number (align) allowing to control the horizontal and vertical position of the text string with respect to the text position. The text alignment of any class inheriting from TAttText can be changed using the method SetTextAlign and retrieved using the method GetTextAlign.; align = 10*HorizontalAlign + VerticalAlign; For horizontal alignment the following convention applies:; 1=left adjusted, 2=centered, 3=right adjusted; For vertical alignment the following convention applies:; 1=bottom adjusted, 2=centered, 3=top adjusted; For example:; align = 11 = left adjusted and bottom adjusted; align = 32 = right adjusted and vertically centered; {; auto *Ta = new TCanvas(""Ta"",""Ta"",0,0,500,200);; Ta->Range(0,0,1,1);; ; TLine lv;; lv.SetLineStyle(3);; lv.SetLineColor(kBlue);; lv.DrawLine(0.33,0.0,0.33,1.0);; lv.DrawLine(0.6,0.165,1.,0.165);; lv.DrawLine(0.6,0.493,1.,0.493);; lv.DrawLine(0.6,0.823,1.,0.823);; ; // Horizontal alignment.; auto *th1 = new TText(0.33,0.165,""Left adjusted"");; th1->SetTextAlign(11); th1->SetTextSize(0.12);; th1->Draw();; ; auto *th2 = new TText(0.33,0.493,""Center adjusted"");; th2->SetTextAlign(21); th2->SetTextSize(0.12);; th2->Draw();; ; auto *th3 = new TText(0.33,0.823,""Right adjusted"");; th3->SetTextAli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttText.html:64,Guid,Guide,64,doc/master/classTAttText.html,https://root.cern,https://root.cern/doc/master/classTAttText.html,1,['Guid'],['Guide']
Usability,". ROOT: TAuthenticate Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TAuthenticate Class Reference. . Definition at line 53 of file TAuthenticate.h. Public Types; enum  ESecurity { ;   kClear; , kUnsupported; , kKrb5; , kGlobus; , ;   kSSH; , kRfio. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TAuthenticate (TSocket *sock, const char *remote, const char *proto, const char *user="""");  Create authentication object. ;  ; virtual ~TAuthenticate ();  ; Bool_t Authenticate ();  Authenticate to remote rootd or proofd server. ;  ; Int_t AuthExists (TString User, Int_t method, const char *Options, Int_t *Message, Int_t *Rflag, CheckSecCtx_t funcheck);  Check if we have a valid established sec context in memory Retrieves relevant info and negotiates with server. ;  ; void CatchTimeOut ();  Called in connection with a timer timeout. ;  ; Bool_t CheckNetrc (TString &user, TString &passwd);  Try to get user name and passwd from the ~/.rootnetrc or ~/.netrc files. ;  ; Bool_t CheckNetrc (TString &user, TString &passwd, Bool_t &pwhash, Bool_t srppwd);  Try to get user name and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAuthenticate.html:69,Guid,Guide,69,doc/master/classTAuthenticate.html,https://root.cern,https://root.cern/doc/master/classTAuthenticate.html,1,['Guid'],['Guide']
Usability,". ROOT: TAutoBinVal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TAutoBinVal Class Reference. . Definition at line 86 of file TProofPlayer.cxx. Public Member Functions;  TAutoBinVal (const char *name, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax);  ; void GetAll (Double_t &xmin, Double_t &xmax, Double_t &ymin, Double_t &ymax, Double_t &zmin, Double_t &zmax);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAutoBinVal.html:67,Guid,Guide,67,doc/master/classTAutoBinVal.html,https://root.cern,https://root.cern/doc/master/classTAutoBinVal.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TAxis Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TAxis Class ReferenceHistogram Library » Histogram classes. ; Class to manage histogram axis. ; This class manages histogram axis. It is referenced by TH1 and TGraph. To make a graphical representation of an histogram axis, this class references the TGaxis class. TAxis supports axis with fixed or variable bin sizes. Labels may be associated to individual bins. See examples of various axis representations drawn by class TGaxis. ; Definition at line 31 of file TAxis.h. Public Types; enum  EStatusBits { ;   kDecimals = (1ULL << ( 7 )); , kTickPlus = (1ULL << ( 9 )); , kTickMinus = (1ULL << ( 10 )); , kAxisRange = (1ULL << ( 11 )); , ;   kCenterTitle = (1ULL << ( 12 )); , kCenterLabels = (1ULL << ( 14 )); , kRotateTitle = (1ULL << ( 15 )); , kPalette = (1ULL << ( 16 )); , ;   kNoExponent = (1ULL << ( 17 )); , kLabelsHori = (1ULL << ( 18 )); , kLabelsVert = (1ULL << ( 19 )); , kLabelsDown = (1ULL << ( 20 )); , ;   kLabelsUp = (1ULL << ( 21 )); , kIsInteger = (1ULL << ( 22 )); , kMoreLogLabels = (1ULL << ( 23 )). };  TAxis status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Publ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAxis.html:61,Guid,Guide,61,doc/master/classTAxis.html,https://root.cern,https://root.cern/doc/master/classTAxis.html,1,['Guid'],['Guide']
Usability,". ROOT: TAxis3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TAxis3D Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; The 3D axis painter class. ; This class provide up to 3 axes to any 3D ROOT plot and ""ZOOM"" service. ExecuteEvent() method does provide zooming and moving a projection 3D object within TPad client area. With Zoom mode on the user can access TAxis3D context menu and set /change the attributes of axes all together or separately.; To add the 3D rulers to any 3D view one has to create an instance of this class and Draw it.; TAxis3D rulers;; rulers.Draw();; TAxis3DThe 3D axis painter class.Definition TAxis3D.h:31; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; One can use a static method to create ruler and attach it to the current gPad; TAxis3D::ToggleRulers(); // Brings the 3D axes up; TAxis3D::ToggleRulers(); // next calls remove the rulers from the TPad etc; TAxis3D::ToggleRulersstatic TAxis3D * ToggleRulers(TVirtualPad *pad=nullptr)Turn ON / OFF the ""Ruler"", TAxis3D object attached to the current pad.Definition TAxis3D.cxx:738; To activate Zoomer one may call; TAxis3D::ToggleZoom();; TAxis3D::ToggleZoomstatic TAxis3D * ToggleZoom(TVirtualPad *pad=nullptr)Turn ON / OFF the ""Ruler"" and ""zoom mode"" of the TAxis3D object attached to the current pad (if pad =...Definition TAxis3D.cxx:766; each time one needs move or zoom the image. Then the user can:. move: . zoom: . its 3D view with <left-mouse button> press / move. The ""Zoom"" deactivates itself just the user release the <left-mouse button>; To change attributes of the rulers attached to the current Pad, one may query its pointer first:; TAxis3D *axis = TAxis3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAxis3D.html:63,Guid,Guide,63,doc/master/classTAxis3D.html,https://root.cern,https://root.cern/doc/master/classTAxis3D.html,1,['Guid'],['Guide']
Usability,". ROOT: TAxisModLab Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TAxisModLab Class ReferenceGraphics » 2D Graphics » Basic graphics. ; TAxis helper class used to store the modified labels. ; Definition at line 21 of file TAxisModLab.h. Public Member Functions;  TAxisModLab ();  TAxisModLab default constructor. ;  ; Int_t GetAlign () const;  ; Double_t GetAngle () const;  ; Int_t GetColor () const;  ; Int_t GetFont () const;  ; Int_t GetLabNum () const;  ; Double_t GetLabValue () const;  ; Double_t GetSize () const;  ; const TString & GetText () const;  ; TClass * IsA () const override;  ; void SetAlign (Int_t a=-1);  Set modified label alignment. ;  ; void SetAngle (Double_t a=-1.);  Set modified label angle. ;  ; void SetColor (Int_t c=-1);  Set modified label color. ;  ; void SetFont (Int_t f=-1);  Set modified label font. ;  ; void SetLabNum (Int_t n=0);  Set modified label number. ;  ; void SetLabValue (Double_t v=0.);  Set modified label value. ;  ; void SetSize (Double_t s=-1.);  Set modified label size. ;  ; void SetText (TString t="""");  Set modified label text. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAxisModLab.html:67,Guid,Guide,67,doc/master/classTAxisModLab.html,https://root.cern,https://root.cern/doc/master/classTAxisModLab.html,1,['Guid'],['Guide']
Usability,". ROOT: TBRIK Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TBRIK Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A box with faces perpendicular to the axes. . It has 6 parameters:. name: name of the shape; title: shape's title; material: (see TMaterial); dx: half-length of the box along the x-axis; dy: half-length of the box along the y-axis; dz: half-length of the box along the z-axis . Definition at line 26 of file TBRIK.h. Public Member Functions;  TBRIK ();  BRIK shape default constructor. ;  ;  TBRIK (const char *name, const char *title, const char *material, Float_t dx, Float_t dy, Float_t dz);  BRIK shape normal constructor. ;  ;  ~TBRIK () override;  BRIK shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a BRIK. ;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3D. ;  ; Float_t GetDx () const;  ; Float_t GetDy () const;  ; Float_t GetDz () const;  ; TClass * IsA () const override;  ; void Sizeof3D () const override;  Return total X3D needed by TNode::ls (when called with option ""x"") ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TShape;  TShape ();  Shape default constructor. ;  ;  TShape (const char *name, const char *title, const char *material);  Shape normal constructor. ;  ;  TShape (const TShape &);  copy constructor ;  ;  ~TShape () override;  Shape default destructor. ;  ; TMaterial * GetMaterial () const;  ; virtual Int_t GetNumber () const;  ; Int_t GetVisibility () const;  ; TClass * IsA () const override;  ; TShape & operator= (const TShape &);  assignment operator ;  ; void Paint ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBRIK.html:61,Guid,Guide,61,doc/master/classTBRIK.html,https://root.cern,https://root.cern/doc/master/classTBRIK.html,1,['Guid'],['Guide']
Usability,". ROOT: TBackCompFitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TBackCompFitter Class ReferenceHistogram Library. ; Backward compatible implementation of TVirtualFitter. ; Backward compatible implementation of TVirtualFitter using the class ROOT::Fit::Fitter. This class is created after fitting an histogram (TH1), TGraph or TTree and provides in addition to the methods of the TVirtualFitter hooks to access the fit result class (ROOT::Fit::FitResult), the fit configuration (ROOT::Fit::FitConfig) or the fit data (ROOT::Fit::FitData) using; TBackCompFitter * fitter = (TBackCompFitter *) TVirtualFitter::GetFitter();; ROOT::Fit::FitResult & result = fitter->GetFitResult();; result.Print(std::cout);; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; TBackCompFitterBackward compatible implementation of TVirtualFitter.Definition TBackCompFitter.h:37; TBackCompFitter::GetFitResultconst ROOT::Fit::FitResult & GetFitResult() constGet reference to Fit Result object (NOTE: it will be invalid when class is deleted)Definition TBackCompFitter.h:94; TVirtualFitter::GetFitterstatic TVirtualFitter * GetFitter()static: return the current FitterDefinition TVirtualFitter.cxx:209; Methods for getting the confidence level or contours are also provided. Note that after a new calls to TH1::Fit (or similar) the class will be deleted and all reference to the FitR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBackCompFitter.html:71,Guid,Guide,71,doc/master/classTBackCompFitter.html,https://root.cern,https://root.cern/doc/master/classTBackCompFitter.html,1,['Guid'],['Guide']
Usability,". ROOT: TBaseClass Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TBaseClass Class Reference. ; Each class (see TClass) has a linked list of its base class(es). ; This class describes one single base class. The base class info is obtained via the CINT api. see class TCling.; The base class information is used a.o. in to find all inherited methods. ; Definition at line 33 of file TBaseClass.h. Public Member Functions;  TBaseClass (BaseClassInfo_t *info=nullptr, TClass *cl=nullptr);  Default TBaseClass ctor. ;  ; virtual ~TBaseClass ();  TBaseClass dtor deletes adopted CINT BaseClassInfo object. ;  ; void Browse (TBrowser *b) override;  Called by the browser, to browse a baseclass. ;  ; TClass * GetClassPointer (Bool_t load=kTRUE);  Get pointer to the base class TClass. ;  ; Int_t GetDelta ();  Get offset from ""this"" to part of base class. ;  ; const char * GetTitle () const override;  Get base class description (comment). ;  ; TClass * IsA () const override;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; ROOT::ESTLType IsSTLContainer ();  Return which type (if any) of STL container the data member is. ;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; void SetClass (TClass *cl);  ; void Streamer (TBuffer &) override;  Stream an object of TBaseClass. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TClass * IsA () con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBaseClass.html:66,Guid,Guide,66,doc/master/classTBaseClass.html,https://root.cern,https://root.cern/doc/master/classTBaseClass.html,1,['Guid'],['Guide']
Usability,". ROOT: TBasket Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TBasket Class ReferenceTree Library. ; Manages buffers for branches of a Tree. ; See picture in TTree. ; Definition at line 34 of file TBasket.h. Public Types; enum class  EIOBits : Char_t { kGenerateOffsetMap = (1ULL << ( 0 )); , kSupported = kGenerateOffsetMap; };  ; enum class  EUnsupportedIOBits : Char_t { kUnsupported = 0; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TBasket ();  Default constructor. ;  ;  TBasket (const char *name, const char *title, TBranch *branch);  Basket normal constructor, used during writing. ;  ;  TBasket (TDirectory *motherDir);  Constructor used during reading. ;  ;  ~TBasket () override;  Basket destructor. ;  ; virtual void AdjustSize (Int_t newsize);  Increase the size of the current fBuffer up to newsize. ;  ; Long64_t CopyTo (TFile *to);  Copy the basket of this branch onto the file to. ;  ; virtual void DeleteEntryOffset ();  Delete fEntryOffset array. ;  ; virtual Int_t DropBuffers ();  Drop buffers of this basket if it is not the current basket. ;  ; TBranch * Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBasket.html:63,Guid,Guide,63,doc/master/classTBasket.html,https://root.cern,https://root.cern/doc/master/classTBasket.html,1,['Guid'],['Guide']
Usability,". ROOT: TBasketSQL Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TBasketSQL Class ReferenceTree Library. ; Implement TBasket for a SQL backend. ; Definition at line 30 of file TBasketSQL.h. Public Member Functions;  TBasketSQL ();  Default constructor. ;  ;  TBasketSQL (const char *name, const char *title, TBranch *branch, TSQLResult **rs, TString *insert_query, std::vector< Int_t > *vc, TSQLRow **row);  Regular constructor. ;  ;  ~TBasketSQL () override;  Destructor. ;  ; void CreateBuffer (const char *name, TString title, std::vector< Int_t > *vc, TBranch *branch, TSQLResult **rs);  Create a TSQLBuffer for this basket. ;  ; TSQLResult * GetResultSet ();  ; TClass * IsA () const override;  ; void PrepareBasket (Long64_t entry) override;  Prepare the basket for the next entry. ;  ; virtual Int_t ReadBasketBuffers (Long64_t pos, Int_t len, TFile *file);  See TBasket::ReadBasketBuffers. This is not implemented in TBasketSQL. ;  ; virtual Int_t ReadBasketBytes (Long64_t pos, TFile *file);  See TBasket::ReadBasketBytes. This is not implemented in TBasketSQL. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update (Int_t offset, Int_t skipped) override;  See TBasket::Update. ;  ;  Public Member Functions inherited from TBasket;  TBasket ();  Default constructor. ;  ;  TBasket (const char *name, const char *title, TBranch *branch);  Basket normal constructor, used during writing. ;  ;  TBasket (TDirectory *motherDir);  Constructor used during reading. ;  ;  ~TBasket () override;  Basket destructor. ;  ; virtual void AdjustSize (Int_t newsize);  Increase the size of the current fBuffer up to newsize. ;  ; Long64_t CopyTo (TFile *to);  Copy the basket of this branch onto the file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBasketSQL.html:66,Guid,Guide,66,doc/master/classTBasketSQL.html,https://root.cern,https://root.cern/doc/master/classTBasketSQL.html,1,['Guid'],['Guide']
Usability,". ROOT: TBenchmark Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TBenchmark Class ReferenceCore ROOT classes » Base ROOT classes. ; This class is a ROOT utility to help benchmarking applications. ; Definition at line 29 of file TBenchmark.h. Public Member Functions;  TBenchmark ();  Benchmark default constructor. ;  ; virtual ~TBenchmark ();  Benchmark destructor. ;  ; Int_t GetBench (const char *name) const;  Returns index of Benchmark name. ;  ; Float_t GetCpuTime (const char *name);  Returns Cpu time used by Benchmark name. ;  ; Float_t GetRealTime (const char *name);  Returns Realtime used by Benchmark name. ;  ; TClass * IsA () const override;  ; void Print (Option_t *name="""") const override;  Prints parameters of Benchmark name. ;  ; virtual void Reset ();  Reset all Benchmarks. ;  ; virtual void Show (const char *name);  Stops Benchmark name and Prints results. ;  ; virtual void Start (const char *name);  Starts Benchmark with the specified name. ;  ; virtual void Stop (const char *name);  Terminates Benchmark with specified name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Summary (Float_t &rt, Float_t &cp);  Prints a summary of all benchmarks. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBenchmark.html:66,Guid,Guide,66,doc/master/classTBenchmark.html,https://root.cern,https://root.cern/doc/master/classTBenchmark.html,1,['Guid'],['Guide']
Usability,". ROOT: TBinomialEfficiencyFitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TBinomialEfficiencyFitter Class ReferenceHistogram Library. ; Binomial fitter for the division of two histograms. ; Use when you need to calculate a selection's efficiency from two histograms, one containing all entries, and one containing the subset of these entries that pass the selection, and when you have a parametrization available for the efficiency as a function of the variable(s) under consideration.; A very common problem when estimating efficiencies is that of error estimation: when no other information is available than the total number of events N and the selected number n, the best estimate for the selection efficiency p is n/N. Standard binomial statistics dictates that the uncertainty (this presupposes sufficiently high statistics that an approximation by a normal distribution is reasonable) on p, given N, is ; \[; \sqrt{\frac{p(1-p)}{N}}; \]. However, when p is estimated as n/N, fluctuations from the true p to its estimate become important, especially for low numbers of events, and giving rise to biased results.; When fitting a parametrized efficiency, these problems can largely be overcome, as a hypothesized true efficiency is available by construction. Even so, simply using the corresponding uncertainty still presupposes that Gaussian errors yields a reasonable approximation. When using, instead of binned efficiency histograms, the original numerator and denominator histograms, a binned maximum likelihood can be constructed as the product of bin-by-bin binomial probabilities to select n out of N events. Assuming that a correct parametrization of the efficiency is provided, this construction in general yields less biased results (and is much less sensitive to binnin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBinomialEfficiencyFitter.html:81,Guid,Guide,81,doc/master/classTBinomialEfficiencyFitter.html,https://root.cern,https://root.cern/doc/master/classTBinomialEfficiencyFitter.html,1,['Guid'],['Guide']
Usability,". ROOT: TBits Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TBits Class ReferenceCore ROOT classes » Containers. ; Container of bits. ; This class provides a simple container of bits. Each bit can be set and tested via the functions SetBitNumber and TestBitNumber.; The default value of all bits is kFALSE. The size of the container is automatically extended when a bit number is either set or tested. To reduce the memory size of the container use the Compact function, this will discard the memory occupied by the upper bits that are 0. ; Definition at line 26 of file TBits.h. Classes; class  TReference;  . Public Member Functions;  TBits (const TBits &);  TBits copy constructor. ;  ;  TBits (UInt_t nbits=8);  TBits constructor. All bits set to 0. ;  ; virtual ~TBits ();  TBits destructor. ;  ; void Clear (Option_t *option="""") override;  Clear the value. ;  ; void Compact ();  Reduce the storage used by the object to a minimun. ;  ; UInt_t CountBits (UInt_t startBit=0) const;  Return number of bits set to 1 starting at bit startBit. ;  ; UInt_t FirstNullBit (UInt_t startBit=0) const;  Return position of first null bit (starting from position 0 and up) ;  ; UInt_t FirstSetBit (UInt_t startBit=0) const;  Return position of first non null bit (starting from position 0 and up) ;  ; void Get (Char_t *array) const;  Copy all the byes. ;  ; void Get (Int_t *array) const;  ; void Get (Long64_t *array) const;  ; void Get (Short_t *array) const;  ; void Get (UChar_t *array) const;  ; void Get (UInt_t *array) const;  ; void Get (ULong64_t *array) const;  ; void Get (UShort_t *array) const;  ; UInt_t GetNbits () const;  ; UInt_t GetNbytes () const;  ; TClass * IsA () const override;  ; UInt_t LastNullBit (UInt_t startBit=999999999) const;  Return position of first",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBits.html:61,Guid,Guide,61,doc/master/classTBits.html,https://root.cern,https://root.cern/doc/master/classTBits.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TBlinkTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TBlinkTimer Class Reference. . Definition at line 222 of file TGTextEntry.cxx. Public Member Functions;  TBlinkTimer (TGTextEntry *t, Long_t ms);  ; Bool_t Notify () override;  Notify when timer times out and reset the timer. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBlinkTimer.html:67,Guid,Guide,67,doc/master/classTBlinkTimer.html,https://root.cern,https://root.cern/doc/master/classTBlinkTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: TBox Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; TBox Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Create a Box. ; A box is defined by :. Its bottom left coordinates x1,y1; Its top right coordinates x2,y2. A box has line attributes (see TAttLine) and fill area attributes (see TAttFill). ; Definition at line 22 of file TBox.h. Public Types; enum  { kCannotMove = (1ULL << ( 12 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TBox ();  Box default constructor. ;  ;  TBox (const TBox &box);  Box copy constructor. ;  ;  TBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Box standard constructor. ;  ;  ~TBox () override;  Box destructor. ;  ; void Copy (TObject &box) const override;  Copy a Box. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a box. ;  ; void Draw (Option_t *option="""") override;  Draw this box with its current attributes. ;  ; virtual TBox * DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Draw this box with new coordinates. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one even",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBox.html:60,Guid,Guide,60,doc/master/classTBox.html,https://root.cern,https://root.cern/doc/master/classTBox.html,1,['Guid'],['Guide']
Usability,". ROOT: TBranch Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Types |; Private Member Functions |; Friends |; List of all members ; TBranch Class ReferenceTree Library. ; A TTree is a list of TBranches. ; A TBranch supports:; The list of TLeaf describing this branch.; The list of TBasket (branch buffers). See TBranch structure in TTree.; See also specialized branches:; TBranchObject in case the branch is one object; TBranchClones in case the branch is an array of clone objects . Definition at line 93 of file TBranch.h. Public Member Functions;  TBranch ();  Default constructor. Used for I/O by default. ;  ;  TBranch (TBranch *parent, const char *name, void *address, const char *leaflist, Int_t basketsize=32000, Int_t compress=ROOT::RCompressionSetting::EAlgorithm::kInherit);  Create a Branch as a child of another Branch. ;  ;  TBranch (TTree *tree, const char *name, void *address, const char *leaflist, Int_t basketsize=32000, Int_t compress=ROOT::RCompressionSetting::EAlgorithm::kInherit);  Create a Branch as a child of a Tree. ;  ;  ~TBranch () override;  Destructor. ;  ; virtual void AddBasket (TBasket &b, bool ondisk, Long64_t startEntry);  Add the basket to this branch. ;  ; virtual void AddLastBasket (Long64_t startEntry);  Add the start entry of the write basket (not yet created) ;  ; Int_t BackFill ();  Loop on all leaves of this branch to back fill Basket buffer. ;  ; void Browse (TBrowser *b) override;  Browser interface. ;  ; virtual void DeleteBaskets (Option_t *option="""");  Loop on all branch baskets. ;  ; virtual void DropBaskets (Option_t *option="""");  Loop on all branch baskets. ;  ; void ExpandBasketArrays ();  Increase BasketEntry buffer of a minimum of 10 locations and a maximum of 50 per cent of current s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranch.html:63,Guid,Guide,63,doc/master/classTBranch.html,https://root.cern,https://root.cern/doc/master/classTBranch.html,1,['Guid'],['Guide']
Usability,". ROOT: TBranchClones Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TBranchClones Class ReferenceTree Library. ; A Branch for the case of an array of clone objects. ; See TTree. ; Definition at line 29 of file TBranchClones.h. Public Member Functions;  TBranchClones ();  Default and i/o constructor. ;  ;  TBranchClones (TBranch *parent, const char *name, void *clonesaddress, Int_t basketsize=32000, Int_t compress=-1, Int_t splitlevel=1);  Constructor. ;  ;  TBranchClones (TTree *tree, const char *name, void *clonesaddress, Int_t basketsize=32000, Int_t compress=-1, Int_t splitlevel=1);  Constructor. ;  ;  ~TBranchClones () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  Browse this branch. ;  ; const char * GetClassName () const override;  Return the name of the user class whose content is stored in this branch, if any. ;  ; Int_t GetEntry (Long64_t entry=0, Int_t getall=0) override;  Read all branches and return total number of bytes read. ;  ; TClonesArray * GetList () const;  ; virtual Int_t GetN () const;  ; TClass * IsA () const override;  ; bool IsFolder () const override;  Return true if more than one leaf or browsables, false otherwise. ;  ; void Print (Option_t *option="""") const override;  Print branch parameters. ;  ; void Reset (Option_t *option="""") override;  Reset branch. ;  ; void ResetAfterMerge (TFileMergeInfo *) override;  Reset branch after a merge. ;  ; void SetAddress (void *add) override;  Set address of this branch. ;  ; void SetBasketSize (Int_t buffsize) override;  Reset basket size for all sub-branches. ;  ; void SetTree (TTree *tree) override;  ; void Streamer (TBuffer &) override;  Serialize/Deserialize from a buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateFile ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchClones.html:69,Guid,Guide,69,doc/master/classTBranchClones.html,https://root.cern,https://root.cern/doc/master/classTBranchClones.html,1,['Guid'],['Guide']
Usability,". ROOT: TBranchElement Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Friends |; List of all members ; TBranchElement Class ReferenceTree Library. ; A Branch for the case of an object. ; Definition at line 39 of file TBranchElement.h. Public Types; enum  EBranchElementType { ;   kLeafNode = 0; , kBaseClassNode = 1; , kObjectNode = 2; , kClonesNode = 3; , ;   kSTLNode = 4; , kClonesMemberNode = 31; , kSTLMemberNode = 41. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TBranchElement ();  Default and I/O constructor. ;  ;  TBranchElement (TBranch *parent, const char *name, TClonesArray *clones, Int_t basketsize=32000, Int_t splitlevel=0, Int_t compress=ROOT::RCompressionSetting::EAlgorithm::kInherit);  Constructor when the branch object is a TClonesArray. ;  ;  TBranchElement (TBranch *parent, const char *name, TStreamerInfo *sinfo, Int_t id, char *pointer, Int_t basketsize=32000, Int_t splitlevel=0, Int_t btype=0);  Constructor when the branch object is not a TClonesArray nor an STL container. ;  ;  TBranchElement (TBranch *parent, const char *name, TVirtualCollectionProxy *co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchElement.html:70,Guid,Guide,70,doc/master/classTBranchElement.html,https://root.cern,https://root.cern/doc/master/classTBranchElement.html,1,['Guid'],['Guide']
Usability,". ROOT: TBranchObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TBranchObject Class ReferenceTree Library. ; A Branch for the case of an object. ; Definition at line 26 of file TBranchObject.h. Public Member Functions;  TBranchObject ();  Default constructor for BranchObject. ;  ;  TBranchObject (TBranch *parent, const char *name, const char *classname, void *addobj, Int_t basketsize=32000, Int_t splitlevel=0, Int_t compress=ROOT::RCompressionSetting::EAlgorithm::kInherit, bool isptrptr=true);  Create a BranchObject. ;  ;  TBranchObject (TTree *tree, const char *name, const char *classname, void *addobj, Int_t basketsize=32000, Int_t splitlevel=0, Int_t compress=ROOT::RCompressionSetting::EAlgorithm::kInherit, bool isptrptr=true);  Create a BranchObject. ;  ;  ~TBranchObject () override;  Destructor for a BranchObject. ;  ; void Browse (TBrowser *b) override;  Browse the branch content. ;  ; const char * GetClassName () const override;  Return the name of the user class whose content is stored in this branch, if any. ;  ; Int_t GetEntry (Long64_t entry=0, Int_t getall=0) override;  Read all branches of a BranchObject and return total number of bytes. ;  ; Int_t GetExpectedType (TClass *&clptr, EDataType &type) override;  Fill expectedClass and expectedType with information on the data type of the object/values contained in this branch (and thus the type of pointers expected to be passed to Set[Branch]Address return 0 in case of success and > 0 in case of failure. ;  ; virtual const char * GetObjClassName ();  ; TClass * IsA () const override;  ; bool IsFolder () const override;  Return TRUE if more than one leaf or if fBrowsables, FALSE otherwise. ;  ; void Print (Option_t *option="""") const override;  Print T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchObject.html:69,Guid,Guide,69,doc/master/classTBranchObject.html,https://root.cern,https://root.cern/doc/master/classTBranchObject.html,1,['Guid'],['Guide']
Usability,". ROOT: TBranchRef Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TBranchRef Class ReferenceTree Library. ; A branch containing and managing a TRefTable for TRef autoloading. ; It loads the TBranch containing a referenced object when requested by TRef::GetObject(), so the reference can be resolved. The information which branch to load is stored by TRefTable. Once a TBranch has read the TBranchRef's current entry it will not be told to re-read, in case the use has changed objects read from the branch. LIMITATION :; Note that this does NOT allow for autoloading of references spanning different entries. The TBranchRef's current entry has to correspond to the entry of the TBranch containing the referenced object.; The TRef cannot be stored in a top-level branch which is a TBranchObject for the auto-loading to work. E.g. you cannot store the TRefs in TObjArray, and create a top-level branch storing this TObjArray. ; Definition at line 34 of file TBranchRef.h. Public Member Functions;  TBranchRef ();  Default constructor. ;  ;  TBranchRef (TTree *tree);  Main constructor called by TTree::BranchRef. ;  ;  ~TBranchRef () override;  Typical destructor. ;  ; void Clear (Option_t *option="""") override;  Clear entries in the TRefTable. ;  ; TRefTable * GetRefTable () const;  ; TClass * IsA () const override;  ; bool Notify () override;  This function is called by TRefTable::Notify, itself called by TRef::GetObject. ;  ; void Print (Option_t *option="""") const override;  Print the TRefTable branch. ;  ; void Reset (Option_t *option="""") override;  ; void ResetAfterMerge (TFileMergeInfo *) override;  Reset a Branch after a Merge operation (drop data but keep customizations) TRefTable is cleared. ;  ; virtual Int_t SetParent (co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchRef.html:66,Guid,Guide,66,doc/master/classTBranchRef.html,https://root.cern,https://root.cern/doc/master/classTBranchRef.html,1,['Guid'],['Guide']
Usability,". ROOT: TBranchSTL Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TBranchSTL Class ReferenceTree Library. ; A Branch handling STL collection of pointers (vectors, lists, queues, sets and multisets) while storing them in split mode. ; Definition at line 22 of file TBranchSTL.h. Classes; struct  ElementBranchHelper_t;  . Public Member Functions;  TBranchSTL ();  Default constructor. ;  ;  TBranchSTL (TBranch *parent, const char *name, TVirtualCollectionProxy *collProxy, Int_t buffsize, Int_t splitlevel, TStreamerInfo *info, Int_t id);  Normal constructor, called from another branch. ;  ;  TBranchSTL (TTree *tree, const char *name, TVirtualCollectionProxy *collProxy, Int_t buffsize, Int_t splitlevel);  Normal constructor, called from TTree. ;  ;  ~TBranchSTL () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  Browse an STL branch. ;  ; const char * GetClassName () const override;  Return the name of the user class whose content is stored in this branch, if any. ;  ; Int_t GetEntry (Long64_t entry=0, Int_t getall=0) override;  Get entry. ;  ; Int_t GetExpectedType (TClass *&clptr, EDataType &type) override;  Fill expectedClass and expectedType with information on the data type of the object/values contained in this branch (and thus the type of pointers expected to be passed to Set[Branch]Address return 0 in case of success and > 0 in case of failure. ;  ; virtual TStreamerInfo * GetInfo () const;  Get streamer info. ;  ; TClass * IsA () const override;  ; bool IsFolder () const override;  Branch declared folder if at least one entry. ;  ; void Print (Option_t *="""") const override;  Print the branch parameters. ;  ; void SetAddress (void *addr) override;  Set Address. ;  ; void Streamer (TBuffer &) override;  Stream a class o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchSTL.html:66,Guid,Guide,66,doc/master/classTBranchSTL.html,https://root.cern,https://root.cern/doc/master/classTBranchSTL.html,1,['Guid'],['Guide']
Usability,". ROOT: TBreakLineCom Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TBreakLineCom Class Reference. . Definition at line 136 of file TGTextEdit.cxx. Public Member Functions;  TBreakLineCom (TGTextEdit *te);  ; Bool_t Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ;  Public Member Functions inherited from TGTextEditCommand;  TGTextEditCommand (TGTextEdit *te);  ; void SetPos (TGLongPosition pos);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBreakLineCom.html:69,Guid,Guide,69,doc/master/classTBreakLineCom.html,https://root.cern,https://root.cern/doc/master/classTBreakLineCom.html,1,['Guid'],['Guide']
Usability,". ROOT: TBrowser Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TBrowser Class ReferenceCore ROOT classes » Base ROOT classes. ; Using a TBrowser one can browse all ROOT objects. ; It shows in a list on the left side of the window all browsable ROOT classes. Selecting one of the classes displays, in the icon-box on the right side, all objects in the class. Selecting one of the objects in the icon-box, will place all browsable objects in a new list and draws the contents of the selected class in the icon-box. And so on.... SinceROOT version 6.24/00; TBrowser invokes by default the Web-based ROOT file browser [RBrowser](ROOT::RBrowser) To change this behaviour, and invoke the standard TBrowser, one should put the following directive in the .rootrc file: Browser.Name: TRootBrowser; TRootBrowserThis class creates a ROOT object browser, constituted by three main tabs.Definition TRootBrowser.h:54. Definition at line 37 of file TBrowser.h. Public Types; enum  EStatusBits { kNoHidden = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TBrowser (const char *name, const char *titl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBrowser.html:64,Guid,Guide,64,doc/master/classTBrowser.html,https://root.cern,https://root.cern/doc/master/classTBrowser.html,1,['Guid'],['Guide']
Usability,". ROOT: TBrowserImp Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TBrowserImp Class ReferenceCore ROOT classes » Base ROOT classes. ; ABC describing GUI independent browser implementation protocol. ; Definition at line 29 of file TBrowserImp.h. Public Member Functions;  TBrowserImp (TBrowser *b, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with browser x, y, width and height. ;  ;  TBrowserImp (TBrowser *b, const char *title, UInt_t width, UInt_t height, Option_t *opt="""");  Constructor with browser width and height. ;  ;  TBrowserImp (TBrowser *b=nullptr);  Default constructor. ;  ; virtual ~TBrowserImp ()=default;  ; virtual void Add (TObject *, const char *, Int_t);  ; virtual void AddCheckBox (TObject *, Bool_t=kFALSE);  ; virtual void BrowseObj (TObject *);  ; TBrowser * Browser () const;  ; virtual void CheckObjectItem (TObject *, Bool_t=kFALSE);  ; virtual void CloseTabs ();  ; virtual Longptr_t ExecPlugin (const char *, const char *, const char *, Int_t, Int_t);  ; virtual void ExecuteDefaultAction (TObject *);  ; virtual TBrowser * GetBrowser () const;  ; virtual Option_t * GetDrawOption () const;  ; virtual TGMainFrame * GetMainFrame () const;  ; virtual void Iconify ();  ; virtual TClass * IsA () const;  ; virtual Bool_t IsWeb () const;  ; virtual void RecursiveRemove (TObject *);  ; virtual void Refresh (Bool_t=kFALSE);  ; virtual void RemoveCheckBox (TObject *);  ; virtual void SetBrowser (TBrowser *b);  ; virtual void SetDrawOption (Option_t *="""");  ; virtual void SetStatusText (const char *, Int_t);  ; virtual void Show ();  ; virtual void StartEmbedding (Int_t, Int_t);  ; virtual void StopEmbedding (const char *);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBrowserImp.html:67,Guid,Guide,67,doc/master/classTBrowserImp.html,https://root.cern,https://root.cern/doc/master/classTBrowserImp.html,1,['Guid'],['Guide']
Usability,". ROOT: TBrowserObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TBrowserObject Class Reference. ; This class is designed to wrap a Foreign object in order to inject it into the Browse sub-system. ; Definition at line 80 of file TBrowser.cxx. Public Member Functions;  TBrowserObject (void *obj, TClass *cl, const char *brname);  ;  ~TBrowserObject ();  ; void Browse (TBrowser *b) override;  Browse object. May be overridden for another default action. ;  ; TClass * IsA () const override;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBrowserObject.html:70,Guid,Guide,70,doc/master/classTBrowserObject.html,https://root.cern,https://root.cern/doc/master/classTBrowserObject.html,1,['Guid'],['Guide']
Usability,". ROOT: TBrowserPlugin Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TBrowserPlugin Class ReferenceGUI » Low level GUI widgets. ; Helper class used to manage plugins (command or macro to be executed). ; Definition at line 35 of file TRootBrowser.h. Public Member Functions;  TBrowserPlugin (const char *name, const char *cmd="""", Int_t tab=1, Int_t sub=-1);  ;  ~TBrowserPlugin () override;  ; TClass * IsA () const override;  ; void SetCommand (const char *cmd);  ; void SetSubTab (Int_t sub);  ; void SetTab (Int_t tab);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBrowserPlugin.html:70,Guid,Guide,70,doc/master/classTBrowserPlugin.html,https://root.cern,https://root.cern/doc/master/classTBrowserPlugin.html,1,['Guid'],['Guide']
Usability,". ROOT: TBrowserTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; List of all members ; TBrowserTimer Class Reference. ; Called whenever timer times out. ; Definition at line 51 of file TBrowser.cxx. Public Member Functions;  TBrowserTimer (TBrowser *b, Long_t ms=1000);  ; Bool_t Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBrowserTimer.html:69,Guid,Guide,69,doc/master/classTBrowserTimer.html,https://root.cern,https://root.cern/doc/master/classTBrowserTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: TBtree Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TBtree Class ReferenceCore ROOT classes » Containers. ; B-tree class. ; TBtree inherits from the TSeqCollection ABC. B-tree Implementation notes; This implements B-trees with several refinements. Most of them can be found in Knuth Vol 3, but some were developed to adapt to restrictions imposed by C++. First, a restatement of Knuth's properties that a B-tree must satisfy, assuming we make the enhancement he suggests in the paragraph at the bottom of page 476. Instead of storing null pointers to non-existent nodes (which Knuth calls the leaves) we utilize the space to store keys. Therefore, what Knuth calls level (l-1) is the bottom of our tree, and we call the nodes at this level LeafNodes. Other nodes are called InnerNodes. The other enhancement we have adopted is in the paragraph at the bottom of page 477: overflow control.; The following are modifications of Knuth's properties on page 478:. Every InnerNode has at most Order keys, and at most Order+1 sub-trees.; Every LeafNode has at most 2*(Order+1) keys.; An InnerNode with k keys has k+1 sub-trees.; Every InnerNode that is not the root has at least InnerLowWaterMark keys.; Every LeafNode that is not the root has at least LeafLowWaterMark keys.; If the root is a LeafNode, it has at least one key.; If the root is an InnerNode, it has at least one key and two sub-trees.; All LeafNodes are the same distance from the root as all the other LeafNodes.; For InnerNode n with key n[i].key, then sub-tree n[i-1].tree contains all keys < n[i].key, and sub-tree n[i].tree contains all keys >= n[i].key.; Order is at least 3. The values of InnerLowWaterMark and LeafLowWaterMark may actually be set by the user w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBtree.html:62,Guid,Guide,62,doc/master/classTBtree.html,https://root.cern,https://root.cern/doc/master/classTBtree.html,1,['Guid'],['Guide']
Usability,". ROOT: TBuffer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; List of all members ; TBuffer Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; Buffer base class used for serializing objects. ; Definition at line 43 of file TBuffer.h. Public Types; enum  { kInitialSize = 1024; , kMinimalSize = 128; };  ; enum  EMode { kRead = 0; , kWrite = 1; };  ; enum  EStatusBits { kIsOwner = (1ULL << ( 16 )); , kCannotHandleMemberWiseStreaming = (1ULL << ( 17 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TBuffer (EMode mode);  Create an I/O buffer object. ;  ;  TBuffer (EMode mode, Int_t bufsiz);  Create an I/O buffer object. ;  ;  TBuffer (EMode mode, Int_t bufsiz, void *buf, Bool_t adopt=kTRUE, ReAllocCharFun_t reallocfunc=nullptr);  Create an I/O buffer object. ;  ; virtual ~TBuffer ();  Delete an I/O buffer object. ;  ; virtual Int_t ApplySequence (const TStreamerInfoActions::TActionSequence &sequence, void *object)=0;  ; virtual Int_t ApplySequence (const TStreamerInfoActions::TActionSequence &sequence, void *start_collection, void *end_collection)=0;  ; virtual Int_t ApplySequenceVecPtr (const TStreamerInfoActions::TActionSeq",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBuffer.html:63,Guid,Guide,63,doc/master/classTBuffer.html,https://root.cern,https://root.cern/doc/master/classTBuffer.html,1,['Guid'],['Guide']
Usability,". ROOT: TBuffer3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TBuffer3D Class ReferenceCore ROOT classes » Base ROOT classes. ; Generic 3D primitive description class. ; See TBuffer3DTypes for producer classes. Filling TBuffer3D and Adding to Viewer; The viewers behind the TVirtualViewer3D interface differ greatly in their capabilities e.g. Some know how to draw certain shapes natively (e.g. spheres/tubes in OpenGL); others always require a raw tessellation description of points/lines/segments.; Some need the 3D object positions in the global frame, others can cope with local frames + a translation matrix - which can give considerable performance benefits. To cope with these situations the object buffer is filled out in negotiation with the viewer. TBuffer3D classes are conceptually divided into enumerated sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details). The SectionsValid() / SetSectionsValid / ClearSectionsValid() methods of TBuffer3D are used to test/set/clear these section valid flags.; The sections found in TBuffer3D (Core/BoundingBox/Raw Sizes/Raw) are sufficient to describe any tessellated shape in a generic fashion. An additional ShapeSpecific section in derived shape specific classes allows a more abstract shape description (""a sphere of inner radius x, outer radius y""). This enables a viewer which knows how to draw (tessellate) the shape itself to do so, which can bring considerable performance and quality benefits, while providing a generic fallback suitable for all viewers.; The rules for client negotiation with the viewer are:. If suitable specialized TBuffer3D class exists, use it, otherwise use TBuffer3D.; Complete the mandatory Core section.; Complete the Sha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBuffer3D.html:65,Guid,Guide,65,doc/master/classTBuffer3D.html,https://root.cern,https://root.cern/doc/master/classTBuffer3D.html,1,['Guid'],['Guide']
Usability,". ROOT: TBufferFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; List of all members ; TBufferFile Class ReferenceInput/Output Library. ; The concrete implementation of TBuffer for writing/reading to/from a ROOT file or socket. ; Definition at line 47 of file TBufferFile.h. Public Types; enum  { kStreamedMemberWise = (1ULL << ( 14 )); };  ;  Public Types inherited from TBufferIO; enum  { kMapSize = 503; };  ; enum  EStatusBits { ;   kNotDecompressed = (1ULL << ( 15 )); , kTextBasedStreaming = (1ULL << ( 18 )); , kUser1 = (1ULL << ( 21 )); , kUser2 = (1ULL << ( 22 )); , ;   kUser3 = (1ULL << ( 23 )). };  ;  Public Types inherited from TBuffer; enum  { kInitialSize = 1024; , kMinimalSize = 128; };  ; enum  EMode { kRead = 0; , kWrite = 1; };  ; enum  EStatusBits { kIsOwner = (1ULL << ( 16 )); , kCannotHandleMemberWiseStreaming = (1ULL << ( 17 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TBufferFile (TBuffer::EMode mode);  Create an I/O buffer object. ;  ;  TBufferFile (TBuffer::EMode mode, Int_t bufsiz);  Create an I/O buffer object. ;  ;  TBufferFile (TBuffer::EMode mode, Int_t bufsiz, void *buf, Bool_t adopt=kTRUE, ReAllocCharFu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferFile.html:67,Guid,Guide,67,doc/master/classTBufferFile.html,https://root.cern,https://root.cern/doc/master/classTBufferFile.html,1,['Guid'],['Guide']
Usability,". ROOT: TBufferIO Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TBufferIO Class ReferenceabstractInput/Output Library. ; Direct subclass of TBuffer, implements common methods for TBufferFile and TBufferText classes. ; Definition at line 30 of file TBufferIO.h. Public Types; enum  { kMapSize = 503; };  ; enum  EStatusBits { ;   kNotDecompressed = (1ULL << ( 15 )); , kTextBasedStreaming = (1ULL << ( 18 )); , kUser1 = (1ULL << ( 21 )); , kUser2 = (1ULL << ( 22 )); , ;   kUser3 = (1ULL << ( 23 )). };  ;  Public Types inherited from TBuffer; enum  { kInitialSize = 1024; , kMinimalSize = 128; };  ; enum  EMode { kRead = 0; , kWrite = 1; };  ; enum  EStatusBits { kIsOwner = (1ULL << ( 16 )); , kCannotHandleMemberWiseStreaming = (1ULL << ( 17 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  ~TBufferIO () override;  destructor ;  ; Bool_t CheckObject (const TObject *obj) override;  Check if the specified object is already in the buffer. ;  ; Bool_t CheckObject (const void *obj, const TClass *ptrClass) override;  Check if the specified object of the speci",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferIO.html:65,Guid,Guide,65,doc/master/classTBufferIO.html,https://root.cern,https://root.cern/doc/master/classTBufferIO.html,1,['Guid'],['Guide']
Usability,". ROOT: TBufferJSON Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; TBufferJSON Class ReferencefinalInput/Output Library. ; Class for serializing object to and from JavaScript Object Notation (JSON) format. ; It creates such object representation, which can be directly used in JavaScript ROOT (JSROOT) for drawing.; TBufferJSON implements TBuffer interface, therefore most of ROOT and user classes can be converted into JSON. There are certain limitations for classes with custom streamers, which should be equipped specially for this purposes (see TCanvas::Streamer() as example).; To perform conversion into JSON, one should use TBufferJSON::ToJSON method: TH1 *h1 = new TH1I(""h1"", ""title"", 100, 0, 10);; h1->FillRandom(""gaus"",10000);; TString json = TBufferJSON::ToJSON(h1);; jsonnlohmann::json jsonDefinition ProcessTimer.h:23; TBufferJSON::ToJSONstatic TString ToJSON(const T *obj, Int_t compact=0, const char *member_name=nullptr)Definition TBufferJSON.h:75; TH1I1-D histogram with an int per channel (see TH1 documentation)Definition TH1.h:540; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TStringBasic string class.Definition TString.h:139; h1TH1F * h1Definition legend1.C:5; To reconstruct object from the JSON string, one should do: TH1 *hnew = nullptr;; TBufferJSON::FromJSON(hnew, json);; if (hnew) hnew->Draw(""hist"");; TBufferJSON::FromJSONstatic Bool_t FromJSON(T *&obj, const char *json)Definition TBufferJSON.h:81; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferJSON.html:67,Guid,Guide,67,doc/master/classTBufferJSON.html,https://root.cern,https://root.cern/doc/master/classTBufferJSON.html,1,['Guid'],['Guide']
Usability,". ROOT: TBufferSQL Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TBufferSQL Class ReferencefinalTree Library. ; Implement TBuffer for a SQL backend. ; Definition at line 30 of file TBufferSQL.h. Public Member Functions;  TBufferSQL ();  Constructor. ;  ;  TBufferSQL (TBuffer::EMode mode, Int_t bufsiz, std::vector< Int_t > *vc, TString *insert_query, TSQLRow **rowPtr);  Constructor. ;  ;  TBufferSQL (TBuffer::EMode mode, Int_t bufsiz, std::vector< Int_t > *vc, TString *insert_query, TSQLRow **rowPtr, void *buf, bool adopt=true);  Constructor. ;  ;  TBufferSQL (TBuffer::EMode mode, std::vector< Int_t > *vc, TString *insert_query, TSQLRow **rowPtr);  Constructor. ;  ;  ~TBufferSQL () override;  Destructor. ;  ; TClass * IsA () const override;  ; void ReadBool (bool &b) final;  Operator>> ;  ; void ReadChar (Char_t &c) final;  Operator>> ;  ; void ReadCharP (Char_t *c) final;  Operator>> ;  ; void ReadCharStar (char *&s) final;  Read a char* string. ;  ; void ReadDouble (Double_t &d) final;  Operator>> ;  ; void ReadFastArray (bool *, Int_t) final;  ReadFastArray SQL implementation. ;  ; void ReadFastArray (Char_t *, Int_t) final;  ReadFastArray SQL implementation. ;  ; void ReadFastArray (Double_t *, Int_t) final;  ReadFastArray SQL implementation. ;  ; void ReadFastArray (Float_t *, Int_t) final;  ReadFastArray SQL implementation. ;  ; void ReadFastArray (Int_t *, Int_t) final;  ReadFastArray SQL implementation. ;  ; void ReadFastArray (Long64_t *, Int_t) final;  ReadFastArray SQL implementation. ;  ; void ReadFastArray (Long_t *, Int_t) final;  ReadFastArray SQL implementation. ;  ; void ReadFastArray (Short_t *, Int_t) final;  ReadFastArray SQL implementation. ;  ; void ReadFastArray (UChar_t *, Int_t) final;  ReadFastArray SQL implementation. ;  ; void ReadFastA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferSQL.html:66,Guid,Guide,66,doc/master/classTBufferSQL.html,https://root.cern,https://root.cern/doc/master/classTBufferSQL.html,1,['Guid'],['Guide']
Usability,". ROOT: TBufferSQL2 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TBufferSQL2 Class ReferencefinalInput/Output Library. ; Converts data to SQL statements or read data from SQL tables. ; Class for serializing/deserializing object to/from SQL data base. It redefines most of TBuffer class function to convert simple types, array of simple types and objects to/from TSQLStructure objects. TBufferSQL2 class uses streaming mechanism, provided by ROOT system, therefore most of ROOT and user classes can be stored. There are limitations for complex objects like TTree, TClonesArray, TDirectory and few other, which can not be converted to SQL (yet). ; Definition at line 27 of file TBufferSQL2.h. Public Member Functions;  TBufferSQL2 (TBuffer::EMode mode, TSQLFile *file=nullptr);  Creates buffer object to serialize/deserialize data to/from sql. ;  ;  ~TBufferSQL2 () override;  Destroy sql buffer. ;  ; void ClassBegin (const TClass *, Version_t=-1) final;  This method inform buffer data of which class now will be streamed. ;  ; void ClassEnd (const TClass *) final;  Method indicates end of streaming of classdata in custom streamer. ;  ; void ClassMember (const char *name, const char *typeName=nullptr, Int_t arrsize1=-1, Int_t arrsize2=-1) final;  Method indicates name and typename of class memeber, which should be now streamed in custom streamer Following combinations are supported: see TBufferXML::ClassMember for the details. ;  ; void DecrementLevel (TVirtualStreamerInfo *) final;  Function is called from TStreamerInfo WriteBuffer and Readbuffer functions and decrease level in sql structure. ;  ; Int_t GetErrorFlag () const;  ; TVirtualStreamerInfo * GetInfo () final;  Return current streamer info element. ;  ; TSQLStructure * GetStructure () const;  ; void Inc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferSQL2.html:67,Guid,Guide,67,doc/master/classTBufferSQL2.html,https://root.cern,https://root.cern/doc/master/classTBufferSQL2.html,3,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TBufferText Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Attributes |; List of all members ; TBufferText Class ReferenceInput/Output Library. ; Base class for text-based streamers like TBufferJSON or TBufferXML Special actions list will use methods, introduced in this class. ; Idea to have equivalent methods names in TBufferFile and TBufferText, that actions list for both are the same. ; Definition at line 20 of file TBufferText.h. Public Member Functions;  ~TBufferText () override;  destructor ;  ; Int_t ApplySequence (const TStreamerInfoActions::TActionSequence &sequence, void *object) final;  Read one collection of objects from the buffer using the StreamerInfoLoopAction. ;  ; Int_t ApplySequence (const TStreamerInfoActions::TActionSequence &sequence, void *start_collection, void *end_collection) final;  Read one collection of objects from the buffer using the StreamerInfoLoopAction. ;  ; Int_t ApplySequenceVecPtr (const TStreamerInfoActions::TActionSequence &sequence, void *start_collection, void *end_collection) final;  Read one collection of objects from the buffer using the StreamerInfoLoopAction. ;  ; Int_t CheckByteCount (UInt_t, UInt_t, const char *) final;  ; Int_t CheckByteCount (UInt_t, UInt_t, const TClass *) final;  ; TClass * IsA () const override;  ; Int_t ReadArrayDouble32 (Double_t *&d, TStreamerElement *ele=nullptr) override;  Read array of Double32_t from buffer. ;  ; Int_t ReadArrayFloat16 (Float_t *&f, TStreamerElement *ele=nullptr) override;  Read array of Float16_t from buffer. ;  ; virtual void ReadBaseClass (void *start, TStreamerBase *elem);  Read data of base class. ;  ; Int_t ReadBuf (void *, Int_t) final;  ; Int_t ReadClassBuffer (const TClass *, void *, const TClass *=nullptr) override;  Deserialize information from a buffer into an object. ;  ; I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferText.html:67,Guid,Guide,67,doc/master/classTBufferText.html,https://root.cern,https://root.cern/doc/master/classTBufferText.html,1,['Guid'],['Guide']
Usability,". ROOT: TBufferXML Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TBufferXML Class ReferencefinalInput/Output Library. ; Class for serializing/deserializing object to/from xml. ; The simple way to create XML representation is: TNamed *obj = new TNamed(""name"", ""title"");; TString xml = TBufferXML::ToXML(obj);; TBufferXML::ToXMLstatic TString ToXML(const T *obj, Bool_t GenericLayout=kFALSE, Bool_t UseNamespaces=kFALSE)Definition TBufferXML.h:47; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TStringBasic string class.Definition TString.h:139; Produced xml can be decoded into new object: TNamed *obj2 = nullptr;; TBufferXML::FromXML(obj2, xml);; TBufferXML::FromXMLstatic Bool_t FromXML(T *&obj, const char *xml, Bool_t GenericLayout=kFALSE, Bool_t UseNamespaces=kFALSE)Definition TBufferXML.h:57; TBufferXML class uses streaming mechanism, provided by ROOT system, therefore most of ROOT and user classes can be stored to xml. There are limitations for complex objects like TTree, which can not be converted to xml. ; Definition at line 33 of file TBufferXML.h. Public Member Functions;  TBufferXML (TBuffer::EMode mode);  Creates buffer object to serialize/deserialize data to/from xml. ;  ;  TBufferXML (TBuffer::EMode mode, TXMLFile *file);  Creates buffer object to serialize/deserialize data to/from xml. ;  ;  ~TBufferXML () override;  Destroy xml buffer. ;  ; void ClassBegin (const TClass *, Version_t=-1) final;  Should be called at the beginning of custom class streamer. ;  ; void ClassEnd (const TClass *) final;  Should be called at the end of custom streamer See TBufferXML::ClassBegin for more details. ;  ; void ClassMember (const char *name, const char *typeName=nullptr, Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferXML.html:66,Guid,Guide,66,doc/master/classTBufferXML.html,https://root.cern,https://root.cern/doc/master/classTBufferXML.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TButton Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TButton Class ReferenceGraphics » 2D Graphics » Graphics pad. ; A TButton object is a user interface object. ; A TButton has a name and an associated action. When the button is clicked with the left mouse button, the corresponding action is executed.; A TButton can be created by direct invocation of the constructors or via the graphics editor.; The action can be set via TButton::SetMethod. The action can be any command. Examples of actions:; ""34+78"" When the button is clicked, the result of addition is printed.; "".x macro.C"" . Clicking the button executes the macro macro.C The action can be modified at any time via TButton::SetMethod. To modify the layout/size/contents of one or several buttons in a canvas, you must set the canvas editable via TCanvas::SetEditable. By default a TCanvas is editable. By default a TDialogCanvas is not editable. TButtons are in general placed in a TDialogCanvas.; A TButton being a TPad, one can draw graphics primitives in it when the TCanvas/TDialogCanvas is editable.; Example of a macro creating a dialog canvas with buttons: void but() {; // example of a dialog canvas with a few buttons; ; TDialogCanvas *dialog = new TDialogCanvas(""dialog"","""",200,300);; ; // Create first button. Clicking on this button will execute 34+56; TButton *but1 = new TButton(""button1"",""34+56"",.05,.8,.45,.88);; but1->Draw();; ; // Create second button. Clicking on this button will create a new canvas; TButton *but2 = new TButton(""canvas"",""c2 = new TCanvas(\""c2\"")"",.55,.8,.95,.88);; but2->Draw();; ; // Create third button. Clicking on this button will invoke the browser; but3 = new TButton(""Browser"",""br = new TBrowser(\""br\"")"",0.25,0.54,0.75,0.64);; but3->SetFillColor(42);; b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTButton.html:63,Guid,Guide,63,doc/master/classTButton.html,https://root.cern,https://root.cern/doc/master/classTButton.html,1,['Guid'],['Guide']
Usability,". ROOT: TCONE Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TCONE Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A conical tube. . It has 8 parameters:. name: name of the shape; title: shape's title; material: (see TMaterial); dz: half-length in z; rmin1: inside radius at -DZ in z; rmax1: outside radius at -DZ in z; rmin2: inside radius at +DZ in z; rmax2: outside radius at +DZ in z . Definition at line 28 of file TCONE.h. Public Member Functions;  TCONE ();  CONE shape default constructor. ;  ;  TCONE (const char *name, const char *title, const char *material, Float_t dz, Float_t rmax1, Float_t rmax2=0);  CONE shape ""simplified"" constructor. ;  ;  TCONE (const char *name, const char *title, const char *material, Float_t dz, Float_t rmin1, Float_t rmax1, Float_t rmin2, Float_t rmax2);  CONE shape normal constructor. ;  ;  ~TCONE () override;  CONE shape default destructor. ;  ; Float_t GetRmax2 () const;  ; Float_t GetRmin2 () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTUBE;  TTUBE ();  TUBE shape default constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmax, Float_t dz);  TUBE shape ""simplified"" constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t aspect=1);  TUBE shape normal constructor. ;  ;  ~TTUBE () override;  TUBE shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a TUBE. ;  ; virtual Float_t GetAspectRatio () const;  ; const TBuffer3D & GetBuffer3D (Int_t reqS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCONE.html:61,Guid,Guide,61,doc/master/classTCONE.html,https://root.cern,https://root.cern/doc/master/classTCONE.html,2,"['Guid', 'simpl']","['Guide', 'simplified']"
Usability,". ROOT: TCONS Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TCONS Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A segment of a conical tube. . It has 10 parameters:. name: name of the shape; title: shape's title; material: (see TMaterial); dz: half-length in z; rmin1: inside radius at -DZ in z; rmax1: outside radius at -DZ in z; rmin2: inside radius at +DZ in z; rmax2: outside radius at +DZ in z; phi1: starting angle of the segment; phi2: ending angle of the segment. NOTE: phi1 should be smaller than phi2. If this is not the case, the system adds 360 degrees to phi2. ; Definition at line 27 of file TCONS.h. Public Member Functions;  TCONS ();  CONS shape default constructor. ;  ;  TCONS (const char *name, const char *title, const char *material, Float_t dz, Float_t rmin1, Float_t rmax1, Float_t rmin2, Float_t rmax2, Float_t phi1, Float_t phi2);  CONS shape normal constructor. ;  ;  TCONS (const char *name, const char *title, const char *material, Float_t rmax1, Float_t dz, Float_t phi1, Float_t phi2, Float_t rmax2=0);  CONS shape normal constructor. ;  ;  ~TCONS () override;  CONS shape default destructor. ;  ; virtual Float_t GetRmax2 () const;  ; virtual Float_t GetRmin2 () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTUBS;  TTUBS ();  TUBS shape default constructor. ;  ;  TTUBS (const char *name, const char *title, const char *material, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2);  TUBS shape ""simplified"" constructor. ;  ;  TTUBS (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t ph",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCONS.html:61,Guid,Guide,61,doc/master/classTCONS.html,https://root.cern,https://root.cern/doc/master/classTCONS.html,1,['Guid'],['Guide']
Usability,". ROOT: TCTUB Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TCTUB Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A cut tube with 11 parameters. . The first 5 parameters are the same as for the TUBS. The remaining 6 parameters are the director cosines of the surfaces cutting the tube respectively at the low and high Z values. name: name of the shape; title: shape's title; material: (see TMaterial); rmin: inside radius; rmax: outside radius; dz: half length in z; phi1: starting angle of the segment; phi2: ending angle of the segment; coslx: x dir cosinus at low z face; cosly: y dir cosinus at low z face; coslz: z dir cosinus at low z face; coshx: x dir cosinus at high z face; coshy: y dir cosinus at high z face; coshz: z dir cosinus at high z face . Definition at line 29 of file TCTUB.h. Public Member Functions;  TCTUB ();  CTUB shape default constructor. ;  ;  TCTUB (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2, Float_t *lowNormal, Float_t *highNormal);  CTUB shape normal constructor. ;  ;  TCTUB (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2, Float_t coslx, Float_t cosly, Float_t coslz, Float_t coshx, Float_t coshy, Float_t coshz);  CTUB shape normal constructor. ;  ;  ~TCTUB () override;  CTUB shape default destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TCTUB. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTUBS;  TTUBS ();  TUBS shape default constructor. ;  ;  TTUBS (const char *name, const char *title, const char *material, Float_t rmax, Float_t dz, Float",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCTUB.html:61,Guid,Guide,61,doc/master/classTCTUB.html,https://root.cern,https://root.cern/doc/master/classTCTUB.html,1,['Guid'],['Guide']
Usability,". ROOT: TCandle Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TCandle Class ReferenceGraphics » 2D Graphics » Basic graphics. ; The candle plot painter class. ; Instances of this class are generated by the histograms painting classes (THistPainter and THStack) when an candle plot (box plot) is drawn. TCandle is the ""painter class"" of the box plots. Therefore it is never used directly to draw a candle. ; Definition at line 27 of file TCandle.h. Public Types; enum  CandleOption : long { ;   kNoOption = 0; , kBox = 1; , kMedianLine = 10; , kMedianNotched = 20; , ;   kMedianCircle = 30; , kMeanLine = 100; , kMeanCircle = 300; , kWhiskerAll = 1000; , ;   kWhisker15 = 2000; , kAnchor = 10000; , kPointsOutliers = 100000; , kPointsAll = 200000; , ;   kPointsAllScat = 300000; , kHistoLeft = 1000000; , kHistoRight = 2000000; , kHistoViolin = 3000000; , ;   kHistoZeroIndicator = 10000000; , kHorizontal = 100000000. };  . Public Member Functions;  TCandle ();  TCandle default constructor. ;  ;  TCandle (const char *opt);  TCandle constructor passing a draw-option. ;  ;  TCandle (const Double_t candlePos, const Double_t candleWidth, Long64_t n, Double_t *points);  TCandle constructor for raw-data candles. ;  ;  TCandle (const Double_t candlePos, const Double_t candleWidth, TH1D *proj);  TCandle TH1 data constructor. ;  ;  TCandle (const TCandle &candle);  ;  ~TCandle () override;  TCandle default destructor. ;  ; void ConvertToPadCoords (Double_t minAxis, Double_t maxAxis, Double_t axisMinCoord, Double_t axisMaxCoord);  The coordinates in the TParallelCoordVar-class are in Pad-Coordinates, so we need to convert them. ;  ; const char * GetDrawOption () const;  ; Double_t GetMean () const;  ; Double_t GetMedian () const;  ; long GetOption () const;  ; Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCandle.html:63,Guid,Guide,63,doc/master/classTCandle.html,https://root.cern,https://root.cern/doc/master/classTCandle.html,1,['Guid'],['Guide']
Usability,". ROOT: TCanvas Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TCanvas Class ReferenceGraphics » 2D Graphics » Graphics pad. ; The Canvas class. ; A Canvas is an area mapped to a window directly under the control of the display manager. A ROOT session may have several canvases open at any given time.; A Canvas may be subdivided into independent graphical areas: the Pads. A canvas has a default pad which has the name of the canvas itself. An example of a Canvas layout is sketched in the picture below. This canvas contains two pads named P1 and P2. Both Canvas, P1 and P2 can be moved, grown, shrunk using the normal rules of the Display manager.; Once objects have been drawn in a canvas, they can be edited/moved by pointing directly to them. The cursor shape is changed to suggest the type of action that one can do on this object. Clicking with the right mouse button on an object pops-up a contextmenu with a complete list of actions possible on this object.; A graphical editor may be started from the canvas ""View"" menu under the menu entry ""Toolbar"".; An interactive HELP is available by clicking on the HELP button at the top right of the canvas. It gives a short explanation about the canvas' menus.; A canvas may be automatically divided into pads via TPad::Divide.; At creation time, no matter if in interactive or batch mode, the constructor defines the size of the canvas window (including the size of the window manager's decoration). To define precisely the graphics area size of a canvas in the interactive mode, the following four lines of code should be used: {; Double_t w = 600;; Double_t h = 600;; auto c = new TCanvas(""c"", ""c"", w, h);; c->SetWindowSize(w + (w - c->GetWw()), h ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCanvas.html:63,Guid,Guide,63,doc/master/classTCanvas.html,https://root.cern,https://root.cern/doc/master/classTCanvas.html,1,['Guid'],['Guide']
Usability,". ROOT: TCanvas Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TCanvas Class ReferenceGraphics » 2D Graphics » Graphics pad. ; The Canvas class. ; A Canvas is an area mapped to a window directly under the control of the display manager. A ROOT session may have several canvases open at any given time.; A Canvas may be subdivided into independent graphical areas: the Pads. A canvas has a default pad which has the name of the canvas itself. An example of a Canvas layout is sketched in the picture below. This canvas contains two pads named P1 and P2. Both Canvas, P1 and P2 can be moved, grown, shrunk using the normal rules of the Display manager.; Once objects have been drawn in a canvas, they can be edited/moved by pointing directly to them. The cursor shape is changed to suggest the type of action that one can do on this object. Clicking with the right mouse button on an object pops-up a contextmenu with a complete list of actions possible on this object.; A graphical editor may be started from the canvas ""View"" menu under the menu entry ""Toolbar"".; An interactive HELP is available by clicking on the HELP button at the top right of the canvas. It gives a short explanation about the canvas' menus.; A canvas may be automatically divided into pads via TPad::Divide.; At creation time, no matter if in interactive or batch mode, the constructor defines the size of the canvas window (including the size of the window manager's decoration). To define precisely the graphics area size of a canvas in the interactive mode, the following four lines of code should be used: {; Double_t w = 600;; Double_t h = 600;; auto c = new TCanvas(""c"", ""c"", w, h);; c->SetWindowSize(w + (w - c->GetWw()), h +",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCanvas.html:62,Guid,Guide,62,doc/v632/classTCanvas.html,https://root.cern,https://root.cern/doc/v632/classTCanvas.html,1,['Guid'],['Guide']
Usability,". ROOT: TCanvasImp Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TCanvasImp Class ReferenceCore ROOT classes » Base ROOT classes. ; ABC describing GUI independent main window (with menubar, scrollbars and a drawing area). ; Definition at line 30 of file TCanvasImp.h. Public Member Functions;  TCanvasImp (TCanvas *c, const char *name, Int_t x, Int_t y, UInt_t width, UInt_t height);  ;  TCanvasImp (TCanvas *c, const char *name, UInt_t width, UInt_t height);  ;  TCanvasImp (TCanvas *c=nullptr);  ; virtual ~TCanvasImp ();  ; TCanvas * Canvas () const;  ; virtual void Close ();  ; virtual void ForceUpdate ();  ; virtual UInt_t GetWindowGeometry (Int_t &x, Int_t &y, UInt_t &w, UInt_t &h);  ; virtual Bool_t HasEditor () const;  ; virtual Bool_t HasMenuBar () const;  ; virtual Bool_t HasStatusBar () const;  ; virtual Bool_t HasToolBar () const;  ; virtual Bool_t HasToolTips () const;  ; virtual void Iconify ();  ; virtual Int_t InitWindow ();  ; virtual TClass * IsA () const;  ; virtual void RaiseWindow ();  ; virtual void ReallyDelete ();  ; virtual void SetCanvasSize (UInt_t w, UInt_t h);  ; virtual void SetStatusText (const char *text=nullptr, Int_t partidx=0);  ; virtual void SetWindowPosition (Int_t x, Int_t y);  ; virtual void SetWindowSize (UInt_t width, UInt_t height);  ; virtual void SetWindowTitle (const char *newTitle);  ; virtual void Show ();  ; virtual void ShowEditor (Bool_t show=kTRUE);  ; virtual void ShowMenuBar (Bool_t show=kTRUE);  ; virtual void ShowStatusBar (Bool_t show=kTRUE);  ; virtual void ShowToolBar (Bool_t show=kTRUE);  ; virtual void ShowToolTips (Bool_t show=kTRUE);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCanvasImp.html:66,Guid,Guide,66,doc/master/classTCanvasImp.html,https://root.cern,https://root.cern/doc/master/classTCanvasImp.html,1,['Guid'],['Guide']
Usability,". ROOT: TCanvasWebSnapshot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TCanvasWebSnapshot Class Reference. . Definition at line 102 of file TWebSnapshot.h. Public Member Functions;  TCanvasWebSnapshot (bool readonly=true, bool setids=true, bool batchmode=false);  ; bool GetHighlightConnect () const;  ; const std::string & GetScripts () const;  ; TClass * IsA () const override;  ; bool IsFixedSize () const;  ; void SetFixedSize (bool on=true);  ; void SetHighlightConnect (bool on=true);  ; void SetScripts (const std::string &src);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TPadWebSnapshot;  TPadWebSnapshot (bool readonly=true, bool setids=true, bool batchmode=false);  ; TClass * IsA () const override;  ; bool IsBatchMode () const;  ; bool IsReadOnly () const;  ; bool IsSetObjectIds () const;  ; TWebSnapshot & NewPrimitive (TObject *obj=nullptr, const std::string &opt="""", const std::string &suffix="""");  Create new entry in list of primitives. ;  ; TWebSnapshot & NewSpecials ();  Create new entry in list of primitives in the front. ;  ; TPadWebSnapshot & NewSubPad ();  Create new entry for subpad. ;  ; void SetActive (bool on=true);  ; void SetHasExecs (bool on=true);  ; void SetWithoutPrimitives (bool on=true);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TWebSnapshot;  ~TWebSnapshot () override;  destructor ;  ; Int_t GetKind () const;  ; const char * GetObjectID () const;  ; TObject * GetSnapshot () const;  ; TClass * IsA () const override;  ; void SetObjectID (const std::string &id);  ; void SetObjectIDAsPtr ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCanvasWebSnapshot.html:74,Guid,Guide,74,doc/master/classTCanvasWebSnapshot.html,https://root.cern,https://root.cern/doc/master/classTCanvasWebSnapshot.html,1,['Guid'],['Guide']
Usability,". ROOT: TCefTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TCefTimer Class Reference. . Definition at line 33 of file RCefWebDisplayHandle.cxx. Public Member Functions;  TCefTimer (Long_t milliSec, Bool_t mode);  ; void Timeout () override;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec ti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCefTimer.html:65,Guid,Guide,65,doc/master/classTCefTimer.html,https://root.cern,https://root.cern/doc/master/classTCefTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: TChain Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TChain Class ReferenceTree Library. ; A chain is a collection of files containing TTree objects. ; When the chain is created, the first parameter is the default name for the Tree to be processed later on.; Enter a new element in the chain via the TChain::Add function. Once a chain is defined, one can use the normal TTree functions to Draw,Scan,etc.; Use TChain::SetBranchStatus to activate one or more branches for all the trees in the chain. ; Definition at line 33 of file TChain.h. Public Types; enum  EStatusBits { kGlobalWeight = (1ULL << ( 15 )); , kAutoDelete = (1ULL << ( 16 )); , kProofUptodate = (1ULL << ( 17 )); , kProofLite = (1ULL << ( 18 )); };  ; enum  Mode { kWithoutGlobalRegistration; , kWithGlobalRegistration; };  ;  Public Types inherited from TTree; enum  { kSplitCollectionOfPointers = 100; };  ; enum  ESetBranchAddressStatus { ;   kMissingBranch = -5; , kInternalError = -4; , kMissingCompiledCollectionProxy = -3; , kMismatch = -2; , ;   kClassMismatch = -1; , kMatch = 0; , kMatchConversion = 1; , kMatchConversionCollection = 2; , ;   kMakeClass = 3; , kVoidPtr = 4; , kNoCheck = 5; , kNeedEnableDecomposedObj = (1ULL << ( 29 )); , ;   kNeedDisableDecomposedObj = (1ULL << ( 30 )); , kDecomposedObjMask = kNeedEnableDecomposedObj | kNeedDisableDecomposedObj. };  ; enum  EStatusBits { kForceRead = (1ULL << ( 11 )); , kCircular = (1ULL << ( 12 )); , kOnlyFlushAtCluster = (1ULL << ( 14 )); , kEntriesReshuffled = (1ULL << ( 19 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. }; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTChain.html:62,Guid,Guide,62,doc/master/classTChain.html,https://root.cern,https://root.cern/doc/master/classTChain.html,1,['Guid'],['Guide']
Usability,". ROOT: TChain Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TChain Class ReferenceTree Library. ; A chain is a collection of files containing TTree objects. ; When the chain is created, the first parameter is the default name for the Tree to be processed later on.; Enter a new element in the chain via the TChain::Add function. Once a chain is defined, one can use the normal TTree functions to Draw,Scan,etc.; Use TChain::SetBranchStatus to activate one or more branches for all the trees in the chain. ; Definition at line 33 of file TChain.h. Public Types; enum  EStatusBits { kGlobalWeight = (1ULL << ( 15 )); , kAutoDelete = (1ULL << ( 16 )); , kProofUptodate = (1ULL << ( 17 )); , kProofLite = (1ULL << ( 18 )); };  ; enum  Mode { kWithoutGlobalRegistration; , kWithGlobalRegistration; };  ;  Public Types inherited from TTree; enum  { kSplitCollectionOfPointers = 100; };  ; enum  ESetBranchAddressStatus { ;   kMissingBranch = -5; , kInternalError = -4; , kMissingCompiledCollectionProxy = -3; , kMismatch = -2; , ;   kClassMismatch = -1; , kMatch = 0; , kMatchConversion = 1; , kMatchConversionCollection = 2; , ;   kMakeClass = 3; , kVoidPtr = 4; , kNoCheck = 5; , kNeedEnableDecomposedObj = (1ULL << ( 29 )); , ;   kNeedDisableDecomposedObj = (1ULL << ( 30 )); , kDecomposedObjMask = kNeedEnableDecomposedObj | kNeedDisableDecomposedObj. };  ; enum  EStatusBits { kForceRead = (1ULL << ( 11 )); , kCircular = (1ULL << ( 12 )); , kOnlyFlushAtCluster = (1ULL << ( 14 )); , kEntriesReshuffled = (1ULL << ( 19 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTChain.html:61,Guid,Guide,61,doc/v632/classTChain.html,https://root.cern,https://root.cern/doc/v632/classTChain.html,1,['Guid'],['Guide']
Usability,". ROOT: TChainElement Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Types |; List of all members ; TChainElement Class ReferenceTree Library. ; A TChainElement describes a component of a TChain. ; Definition at line 28 of file TChainElement.h. Public Member Functions;  TChainElement ();  Default constructor for a chain element. ;  ;  TChainElement (const char *title, const char *filename);  Create a chain element. ;  ;  ~TChainElement () override;  Default destructor for a chain element. ;  ; virtual void CreatePackets ();  Initialize the packet descriptor string. ;  ; virtual void * GetBaddress () const;  ; virtual const char * GetBaddressClassName () const;  ; virtual bool GetBaddressIsPtr () const;  ; virtual UInt_t GetBaddressType () const;  ; virtual TBranch ** GetBranchPtr () const;  ; bool GetCheckedType () const;  ; bool GetDecomposedObj () const;  ; virtual Long64_t GetEntries () const;  ; Int_t GetLoadResult () const;  ; virtual char * GetPackets () const;  ; virtual Int_t GetPacketSize () const;  ; virtual Int_t GetStatus () const;  ; virtual bool HasBeenLookedUp ();  ; TClass * IsA () const override;  ; void ls (Option_t *option="""") const override;  List files in the chain. ;  ; virtual void SetBaddress (void *add);  ; virtual void SetBaddressClassName (const char *clname);  ; virtual void SetBaddressIsPtr (bool isptr);  ; virtual void SetBaddressType (UInt_t type);  ; virtual void SetBranchPtr (TBranch **ptr);  ; void SetCheckedType (bool m);  ; void SetDecomposedObj (bool m);  ; void SetLoadResult (Int_t result);  ; virtual void SetLookedUp (bool y=true);  Set/Reset the looked-up bit. ;  ; virtual void SetNumberEntries (Long64_t n);  ; virtual void SetPacketSize (Int_t size=100);  Set number of entries per packet for parallel root. ;  ; virtual void SetStatus (Int_t status);  ; void Strea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTChainElement.html:69,Guid,Guide,69,doc/master/classTChainElement.html,https://root.cern,https://root.cern/doc/master/classTChainElement.html,1,['Guid'],['Guide']
Usability,". ROOT: TChainIndex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TChainIndex Class Reference. ; A Chain Index. ; A Chain Index with majorname and minorname. It uses tree indices of all the trees in the chain instead of building a new index. The index values from the first tree should be less then all the index values from the second tree, and so on. If a tree in the chain doesn't have an index the index will be created and kept inside this chain index. ; Definition at line 40 of file TChainIndex.h. Classes; class  TChainIndexEntry;  Holds a description of indices of trees in the chain. More...;  . Public Member Functions;  TChainIndex ();  Default constructor for TChainIndex. ;  ;  TChainIndex (const TTree *T, const char *majorname, const char *minorname);  Normal constructor for TChainIndex. ;  ;  ~TChainIndex () override;  The destructor. ;  ; void Append (const TVirtualIndex *, bool delaySort=false) override;  Add an index to this chain. ;  ; TObject * Clone (const char *newname="""") const override;  Create a deep copy of the TChainIndex. ;  ; Long64_t GetEntryNumberFriend (const TTree *parent) override;  See TTreeIndex::GetEntryNumberFriend for description. ;  ; Long64_t GetEntryNumberWithBestIndex (Long64_t major, Long64_t minor) const override;  See TTreeIndex::GetEntryNumberWithBestIndex for details. ;  ; Long64_t GetEntryNumberWithIndex (Long64_t major, Long64_t minor) const override;  Returns the entry number with given index values. ;  ; const char * GetMajorName () const override;  ; const char * GetMinorName () const override;  ; Long64_t GetN () const override;  ; TClass * IsA () const override;  ; bool IsValidFor (const TTree *parent) override;  Return true if index can be applied to the TTree. ;  ; void SetTree (TTree *T) override;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTChainIndex.html:67,Guid,Guide,67,doc/master/classTChainIndex.html,https://root.cern,https://root.cern/doc/master/classTChainIndex.html,1,['Guid'],['Guide']
Usability,". ROOT: TClass Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Types |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TClass Class Reference. ; TClass instances represent classes, structs and namespaces in the ROOT type system. ; TClass instances are created starting from different sources of information:; TStreamerInfo instances saved in a ROOT file which is opened. This is called in jargon an emulated TClass.; From TProtoClass instances saved in a ROOT pcm file created by the dictionary generator and the dictionary itself.; From a lookup in the AST built by cling. If a TClass instance is built through the mechanisms 1. and 2., it does not contain information about methods of the class/struct/namespace it represents. Conversely, if built through 3. or 1., it does not carry the information which is necessary to ROOT to perform I/O of instances of the class/struct it represents. The mechanisms 1., 2. and 3. are not mutually exclusive: it can happen that during the execution of the program, all the three are triggered, modifying the state of the TClass instance.; In order to retrieve a TClass instance from the type system, a query can be executed as follows through the static TClass::GetClass method:; auto myClassTClass_0 = TClass::GetClass(""myClass"");; auto myClassTClass_1 = TClass::GetClass<myClass>();; auto myClassTClass_2 = TClass::GetClass(myClassTypeInfo);; TClass::GetClassstatic TClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE)Static method returning pointer to TClass of the specified class name.Definition TClass.cxx:3035; The name of classes is crucial for ROOT. A careful procedure of name normalization is carried out for each and every cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass.html:62,Guid,Guide,62,doc/master/classTClass.html,https://root.cern,https://root.cern/doc/master/classTClass.html,1,['Guid'],['Guide']
Usability,". ROOT: TClass Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Types |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TClass Class Reference. ; TClass instances represent classes, structs and namespaces in the ROOT type system. ; TClass instances are created starting from different sources of information:; TStreamerInfo instances saved in a ROOT file which is opened. This is called in jargon an emulated TClass.; From TProtoClass instances saved in a ROOT pcm file created by the dictionary generator and the dictionary itself.; From a lookup in the AST built by cling. If a TClass instance is built through the mechanisms 1. and 2., it does not contain information about methods of the class/struct/namespace it represents. Conversely, if built through 3. or 1., it does not carry the information which is necessary to ROOT to perform I/O of instances of the class/struct it represents. The mechanisms 1., 2. and 3. are not mutually exclusive: it can happen that during the execution of the program, all the three are triggered, modifying the state of the TClass instance.; In order to retrieve a TClass instance from the type system, a query can be executed as follows through the static TClass::GetClass method:; auto myClassTClass_0 = TClass::GetClass(""myClass"");; auto myClassTClass_1 = TClass::GetClass<myClass>();; auto myClassTClass_2 = TClass::GetClass(myClassTypeInfo);; TClass::GetClassstatic TClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE)Static method returning pointer to TClass of the specified class name.Definition TClass.cxx:2968; The name of classes is crucial for ROOT. A careful procedure of name normalization is carried out for each and every clas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:61,Guid,Guide,61,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,1,['Guid'],['Guide']
Usability,". ROOT: TClass::InsertTClassInRegistryRAII Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TClass::InsertTClassInRegistryRAII Class Reference. . Definition at line 173 of file TClass.h. Public Member Functions;  InsertTClassInRegistryRAII (TClass::EState &state, const char *name, TDeclNameRegistry &emuRegistry);  ;  ~InsertTClassInRegistryRAII ();  . Private Attributes; const char * fName;  ; TDeclNameRegistry & fNoInfoOrEmuOrFwdDeclNameRegistry;  ; TClass::EState & fState;  . Constructor & Destructor Documentation. ◆ InsertTClassInRegistryRAII(). TClass::InsertTClassInRegistryRAII::InsertTClassInRegistryRAII ; (; TClass::EState & ; state, . const char * ; name, . TDeclNameRegistry & ; emuRegistry . ). Definition at line 248 of file TClass.cxx. ◆ ~InsertTClassInRegistryRAII(). TClass::InsertTClassInRegistryRAII::~InsertTClassInRegistryRAII ; (; ). Definition at line 254 of file TClass.cxx. Member Data Documentation. ◆ fName. const char* TClass::InsertTClassInRegistryRAII::fName. private . Definition at line 176 of file TClass.h. ◆ fNoInfoOrEmuOrFwdDeclNameRegistry. TDeclNameRegistry& TClass::InsertTClassInRegistryRAII::fNoInfoOrEmuOrFwdDeclNameRegistry. private . Definition at line 177 of file TClass.h. ◆ fState. TClass::EState& TClass::InsertTClassInRegistryRAII::fState. private . Definition at line 175 of file TClass.h. Libraries for TClass::InsertTClassInRegistryRAII:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TClass.h; core/meta/src/TClass.cxx. TClassInsertTClassInRegistryRAII. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass_1_1InsertTClassInRegistryRAII.html:90,Guid,Guide,90,doc/master/classTClass_1_1InsertTClassInRegistryRAII.html,https://root.cern,https://root.cern/doc/master/classTClass_1_1InsertTClassInRegistryRAII.html,2,['Guid'],['Guide']
Usability,". ROOT: TClass::ObjectPtr Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TClass::ObjectPtr Struct Reference. . Definition at line 139 of file TClass.h. Public Member Functions;  ObjectPtr (void *ptr=nullptr, TVirtualStreamerInfo *allocator=nullptr);  ; TVirtualStreamerInfo * GetAllocator () const;  ; void * GetPtr () const;  ;  operator bool () const;  . Public Attributes; TVirtualStreamerInfo * fAllocator = nullptr;  ; void * fPtr = nullptr;  . #include <TClass.h>; Constructor & Destructor Documentation. ◆ ObjectPtr(). TClass::ObjectPtr::ObjectPtr ; (; void * ; ptr = nullptr, . TVirtualStreamerInfo * ; allocator = nullptr . ). inline . Definition at line 145 of file TClass.h. Member Function Documentation. ◆ GetAllocator(). TVirtualStreamerInfo * TClass::ObjectPtr::GetAllocator ; (; ); const. inline . Definition at line 149 of file TClass.h. ◆ GetPtr(). void * TClass::ObjectPtr::GetPtr ; (; ); const. inline . Definition at line 147 of file TClass.h. ◆ operator bool(). TClass::ObjectPtr::operator bool ; (; ); const. inline . Definition at line 151 of file TClass.h. Member Data Documentation. ◆ fAllocator. TVirtualStreamerInfo* TClass::ObjectPtr::fAllocator = nullptr. Definition at line 143 of file TClass.h. ◆ fPtr. void* TClass::ObjectPtr::fPtr = nullptr. Definition at line 141 of file TClass.h. Collaboration diagram for TClass::ObjectPtr:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; core/meta/inc/TClass.h. TClassObjectPtr. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTClass_1_1ObjectPtr.html:74,Guid,Guide,74,doc/master/structTClass_1_1ObjectPtr.html,https://root.cern,https://root.cern/doc/master/structTClass_1_1ObjectPtr.html,2,['Guid'],['Guide']
Usability,". ROOT: TClass::TDeclNameRegistry Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TClass::TDeclNameRegistry Class Reference. . Definition at line 158 of file TClass.h. Public Member Functions;  TDeclNameRegistry (Int_t verbLevel=0);  TDeclNameRegistry class constructor. ;  ;  ~TDeclNameRegistry ();  ; void AddQualifiedName (const char *name);  Extract this part of the name. ;  ; Bool_t HasDeclName (const char *name) const;  . Private Attributes; std::unordered_set< std::string > fClassNamesSet;  ; std::atomic_flag fSpinLock;  ; Int_t fVerbLevel =0;  . Constructor & Destructor Documentation. ◆ TDeclNameRegistry(). TClass::TDeclNameRegistry::TDeclNameRegistry ; (; Int_t ; verbLevel = 0). TDeclNameRegistry class constructor. ; Definition at line 185 of file TClass.cxx. ◆ ~TDeclNameRegistry(). TClass::TDeclNameRegistry::~TDeclNameRegistry ; (; ). Definition at line 235 of file TClass.cxx. Member Function Documentation. ◆ AddQualifiedName(). void TClass::TDeclNameRegistry::AddQualifiedName ; (; const char * ; name). Extract this part of the name. . Templates ns::ns2::,,,::THISPART<...; Namespaces,classes ns::ns2::,,,::THISPART . Definition at line 196 of file TClass.cxx. ◆ HasDeclName(). Bool_t TClass::TDeclNameRegistry::HasDeclName ; (; const char * ; name); const. Definition at line 223 of file TClass.cxx. Member Data Documentation. ◆ fClassNamesSet. std::unordered_set<std::string> TClass::TDeclNameRegistry::fClassNamesSet. private . Definition at line 169 of file TClass.h. ◆ fSpinLock. std::atomic_flag TClass::TDeclNameRegistry::fSpinLock. mutableprivate . Definition at line 170 of file TClass.h. ◆ fVerbLevel. Int_t TClass::TDeclNameRegistry::fVerbLevel =0. private . Definition at line 168 of file TClass.h. Libraries for TClass::TDeclNameRegistry:. [legend]; The documentation for this class was generated from the following file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass_1_1TDeclNameRegistry.html:81,Guid,Guide,81,doc/master/classTClass_1_1TDeclNameRegistry.html,https://root.cern,https://root.cern/doc/master/classTClass_1_1TDeclNameRegistry.html,1,['Guid'],['Guide']
Usability,". ROOT: TClassDocInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TClassDocInfo Class Reference. . Definition at line 29 of file TDocInfo.h. Public Member Functions;  TClassDocInfo (TClass *cl, const char *htmlfilename="""", const char *fsdecl="""", const char *fsimpl="""", const char *decl=0, const char *impl=0);  ;  TClassDocInfo (TDictionary *cl, const char *htmlfilename="""", const char *fsdecl="""", const char *fsimpl="""", const char *decl=0, const char *impl=0);  ;  ~TClassDocInfo () override;  ; Int_t Compare (const TObject *obj) const override;  Compare abstract method. ;  ; TDictionary * GetClass () const;  ; const char * GetDeclFileName () const;  ; const char * GetDeclFileSysName () const;  ; const char * GetHtmlFileName () const;  ; const char * GetImplFileName () const;  ; const char * GetImplFileSysName () const;  ; TList & GetListOfTypedefs ();  ; TModuleDocInfo * GetModule () const;  ; const char * GetName () const override;  Returns name of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t HaveSource () const;  ; TClass * IsA () const override;  ; Bool_t IsSelected () const;  ; Bool_t IsSortable () const override;  ; void SetDeclFileName (const char *name);  ; void SetDeclFileSysName (const char *fsname);  ; void SetHtmlFileName (const char *name);  ; void SetImplFileName (const char *name);  ; void SetImplFileSysName (const char *fsname);  ; void SetModule (TModuleDocInfo *module);  ; void SetSelected (Bool_t sel=kTRUE);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassDocInfo.html:69,Guid,Guide,69,doc/master/classTClassDocInfo.html,https://root.cern,https://root.cern/doc/master/classTClassDocInfo.html,1,['Guid'],['Guide']
Usability,". ROOT: TClassDocOutput Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TClassDocOutput Class Reference. . Definition at line 21 of file TClassDocOutput.h. Public Member Functions;  TClassDocOutput (THtml &html, TClass *cl, TList *typedefs);  Create an object given the invoking THtml object, and the TClass object that we will generate output for. ;  ;  ~TClassDocOutput () override;  Destructor, deletes fParser. ;  ; void Class2Html (Bool_t force=kFALSE);  Create HTML files for a single class. ;  ; Bool_t ClassDotCharts (std::ostream &out);  This function builds the class charts for one class in GraphViz/Dot format, i.e. ;  ; void CreateClassHierarchy (std::ostream &out, const char *docFileName);  Create the hierarchical class list part for the current class's base classes. ;  ; TClass * IsA () const override;  ; void MakeTree (Bool_t force=kFALSE);  Create an output file with a graphical representation of the class inheritance. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TDocOutput;  TDocOutput (THtml &html);  ;  ~TDocOutput () override;  ; virtual void AdjustSourcePath (TString &line, const char *relpath=""../"");  adjust the path of links for source files, which are in src/, but need to point to relpath (usually ""../""). ;  ; void Convert (std::istream &in, const char *infilename, const char *outfilename, const char *title, const char *relpath=""../"", Int_t includeOutput=0, const char *context="""", TGClient *gclient=0);  Convert a text file into a html file. ;  ; Bool_t CopyHtmlFile (const char *sourceName, const char *destName="""");  Copy file to HTML directory. ;  ; virtual void CreateClassInd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassDocOutput.html:71,Guid,Guide,71,doc/master/classTClassDocOutput.html,https://root.cern,https://root.cern/doc/master/classTClassDocOutput.html,1,['Guid'],['Guide']
Usability,". ROOT: TClassEdit Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Enumerations |; Functions ; TClassEdit Namespace Reference. Classes; struct  FunctionSplitInfo;  Result of splitting a function declaration into fReturnType fScopeName::fFunctionName<fFunctionTemplateArguments>(fFunctionParameters) More...;  ; class  TInterpreterLookupHelper;  ; struct  TSplitType;  . Enumerations; enum class  EComplexType : short { ;   kNone; , kDouble; , kFloat; , kInt; , ;   kLong. };  ; enum  EModType { ;   kNone = 0; , kDropTrailStar = 1<<0; , kDropDefaultAlloc = 1<<1; , kDropAlloc = 1<<2; , ;   kInnerClass = 1<<3; , kInnedMostClass = 1<<4; , kDropStlDefault = 1<<5; , kDropComparator = 1<<6; , ;   kDropAllDefault = 1<<7; , kLong64 = 1<<8; , kDropStd = 1<<9; , kKeepOuterConst = 1<<10; , ;   kResolveTypedef = 1<<11; , kDropPredicate = 1<<12; , kDropHash = 1<<13. };  ; enum  ESTLType { ;   kNotSTL = ROOT::kNotSTL; , kVector = ROOT::kSTLvector; , kList = ROOT::kSTLlist; , kForwardlist = ROOT::kSTLforwardlist; , ;   kDeque = ROOT::kSTLdeque; , kMap = ROOT::kSTLmap; , kMultiMap = ROOT::kSTLmultimap; , kSet = ROOT::kSTLset; , ;   kMultiSet = ROOT::kSTLmultiset; , kUnorderedSet = ROOT::kSTLunorderedset; , kUnorderedMultiSet = ROOT::kSTLunorderedmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultiMap = ROOT::kSTLunorderedmultimap; , kBitSet = ROOT::kSTLbitset; , kEnd = ROOT::kSTLend. };  . Functions; std::string CleanType (const char *typeDesc, int mode=0, const char **tail=nullptr);  Cleanup type description, redundant blanks removed and redundant tail ignored return *tail = pointer to last used character if (mode==0) keep keywords if (mode==1) remove keywords outside the template params if (mode>=2) remove the keywords everywhere. ;  ; char * DemangleName (const char *mangled_name, int &errorCode);  ; char * DemangleTypeIdName (const std::type_info &ti, int &errorCode);  Demangle in a portable way the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTClassEdit.html:70,Guid,Guide,70,doc/master/namespaceTClassEdit.html,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html,1,['Guid'],['Guide']
Usability,". ROOT: TClassGenerator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TClassGenerator Class Referenceabstract. ; Objects following this interface can be passed onto the TROOT object to implement a user customized way to create the TClass objects. ; Use TROOT::AddClassGenerator to register a concrete instance. ; Definition at line 28 of file TClassGenerator.h. Public Member Functions; virtual TClass * GetClass (const char *classname, Bool_t load)=0;  ; virtual TClass * GetClass (const char *classname, Bool_t load, Bool_t silent);  ; virtual TClass * GetClass (const std::type_info &typeinfo, Bool_t load)=0;  ; virtual TClass * GetClass (const std::type_info &typeinfo, Bool_t load, Bool_t silent);  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassGenerator.html:71,Guid,Guide,71,doc/master/classTClassGenerator.html,https://root.cern,https://root.cern/doc/master/classTClassGenerator.html,1,['Guid'],['Guide']
Usability,". ROOT: TClassMenuItem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TClassMenuItem Class Reference. ; Describes one element of the context menu associated to a class The menu item may describe. . a separator,; standard list of methods i.e. the methods defined in the described class by a MENU in the comment field of the header,; a method of an external class or a global function All the standard methods of the class are described by only one item. Since a complete context menu is described by a TList of TClassMenuItem elements, it is possible to customize the context menu of a class by removing the element ""standard methods"" and replacing it by whatever one wants. . Definition at line 31 of file TClassMenuItem.h. Public Types; enum  { kIsExternal; , kIsSelf; };  ; enum  EClassMenuItemType { kPopupUserFunction; , kPopupSeparator; , kPopupStandardList; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TClassMenuItem ();  Default TClassMenuItem ctor. ;  ;  TClassMenuItem (Int_t type, TClass *parent, const char *title="""", const char *functionname="""", TObject *obj=nullptr, const char *args="""", Int_t selfobjposition=-1, Bool_t self=kFALSE);  T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassMenuItem.html:70,Guid,Guide,70,doc/master/classTClassMenuItem.html,https://root.cern,https://root.cern/doc/master/classTClassMenuItem.html,1,['Guid'],['Guide']
Usability,". ROOT: TClassRef Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TClassRef Class Reference. ; TClassRef is used to implement a permanent reference to a TClass object. ; In particular this reference will change if and when the TClass object is regenerated. This regeneration usually happens when a library containing the described class is loaded after a file containing an instance of this class has been opened.; The references kept track of using an intrusive double linked list. The intrusive list is maintained by TClass::AddRef and TClass::RemoveRef. The 'start' of the list is held in TClass::fRefStart. ; Definition at line 28 of file TClassRef.h. Public Member Functions;  TClassRef ();  ;  TClassRef (const char *classname);  Create reference to specified class name, but don't set referenced class object. ;  ;  TClassRef (const TClassRef &);  Copy ctor, increases reference count to original TClass object. ;  ;  TClassRef (TClass *cl);  Add reference to specified class object. ;  ;  ~TClassRef ();  ; TClass * GetClass () const;  ; const char * GetClassName ();  ;  operator TClass * () const;  ; TClass * operator-> () const;  ; TClassRef & operator= (const TClassRef &rhs);  ; TClassRef & operator= (TClass *rhs);  ; void Reset ();  ; void SetName (const char *new_name);  . Private Member Functions; void Assign (const TClassRef &);  Assignment operator implementation, increases reference count to original class object. ;  ; void Assign (TClass *);  Assignment operator, increases reference count to original class object. ;  ; TClass * InternalGetClass () const;  Return the current TClass object corresponding to fClassName. ;  . Private Attributes; std::string fClassName;  ; TClass *const * fClassPtr;  . Friends; class TClass;  Ptr to the permanent TClass ptr/reference. ;  . #include <TClassRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassRef.html:65,Guid,Guide,65,doc/master/classTClassRef.html,https://root.cern,https://root.cern/doc/master/classTClassRef.html,1,['Guid'],['Guide']
Usability,". ROOT: TClassStreamer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; TClassStreamer Class Reference. . Definition at line 26 of file TClassStreamer.h. Public Member Functions;  TClassStreamer (ClassStreamerFunc_t pointer);  ; virtual ~TClassStreamer ();  ; virtual TClassStreamer * Generate () const;  ; virtual const TClass * GetOnFileClass () const;  ; virtual void operator() (TBuffer &b, void *objp);  ; virtual void SetOnFileClass (const TClass *cl);  ; virtual void Stream (TBuffer &b, void *objp, const TClass *onfileClass);  . Protected Member Functions;  TClassStreamer ();  ;  TClassStreamer (const TClassStreamer &rhs);  ; TClassStreamer & operator= (const TClassStreamer &rhs);  . Protected Attributes; TClassRef fOnFileClass;  . Private Attributes; ClassStreamerFunc_t fStreamer;  . #include <TClassStreamer.h>. Inheritance diagram for TClassStreamer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TClassStreamer() [1/3]. TClassStreamer::TClassStreamer ; (; ). inlineprotected . Definition at line 28 of file TClassStreamer.h. ◆ TClassStreamer() [2/3]. TClassStreamer::TClassStreamer ; (; const TClassStreamer & ; rhs). inlineprotected . Definition at line 29 of file TClassStreamer.h. ◆ TClassStreamer() [3/3]. TClassStreamer::TClassStreamer ; (; ClassStreamerFunc_t ; pointer). inline . Definition at line 33 of file TClassStreamer.h. ◆ ~TClassStreamer(). virtual TClassStreamer::~TClassStreamer ; (; ). inlinevirtual . Definition at line 43 of file TClassStreamer.h. Member Function Documentation. ◆ Generate(). virtual TClassStreamer * TClassStreamer::Generate ; (; ); const. inlinevirtual . Reimplemented in TCollectionClassStreamer.; Definition at line 38 of file TClassStreamer.h. ◆ GetOn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassStreamer.html:70,Guid,Guide,70,doc/master/classTClassStreamer.html,https://root.cern,https://root.cern/doc/master/classTClassStreamer.html,1,['Guid'],['Guide']
Usability,". ROOT: TClassTable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Static Private Member Functions |; Static Private Attributes |; Friends |; List of all members ; TClassTable Class ReferenceCore ROOT classes » Containers. ; This class registers for all classes their name, id and dictionary function in a hash table. ; Classes are automatically added by the ctor of a special init class when a global of this init class is initialized when the program starts (see the ClassImp macro).; All functions in TClassTable are thread-safe. ; Definition at line 37 of file TClassTable.h. Classes; class  NormalizeThenLock;  . Public Types; enum  { ;   kNoStreamer = 0x01; , kNoInputOperator = 0x02; , kAutoStreamer = 0x04; , kHasVersion = 0x08; , ;   kHasCustomStreamerMember = 0x10; , kNtplForceNativeMode = 0x20; , kNtplForceStreamerMode = 0x40. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  ~TClassTable ();  TClassTable singleton is deleted in Terminate(). ;  ; int Classes ();  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print the class table. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassTable.html:67,Guid,Guide,67,doc/master/classTClassTable.html,https://root.cern,https://root.cern/doc/master/classTClassTable.html,1,['Guid'],['Guide']
Usability,". ROOT: TClassTree Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TClassTree Class ReferenceGraphics » 2D Graphics » Graphics pad. ; Draw inheritance tree and their relations for a list of classes. ; The following options are supported; Direct inheritance (default); Multiple inheritance; Composition; References by data members and member functions; References from Code. The list of classes is specified:; either in the TClassTree constructor as a second argument; or the parameter to TClassTree::Draw. Note that the ClassTree viewer can also be started from the canvas pull down menu ""Classes"".; In the list of classes, class names are separated by a "":"" wildcarding is supported. The following formats are supported, eg in TClassTree::Draw; Draw(""ClassA""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA. Draw(""*ClassB""); Draw inheritance tree for ClassB and all the classes deriving from ClassB. Draw("">ClassC""); Draw inheritance tree for ClassC; Show classes referencing ClassC. Draw(""ClassD<""); Draw inheritance tree for ClassD; Show classes referenced by ClassD; Show all classes referencing ClassD. Draw(""Cla*""); Draw inheritance tree for all classes with name starting with ""Cla""; Show classes referenced by these classes. Draw(""ClassA:ClassB<""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; Draw inheritance tree for ClassB; Show classes referenced by ClassB; Show all classes referencing ClassB. Example: Draw(""TTree<""); Draw inheritance tree for the Root class TTree; Show all classes referenced by TTree; Show all classes using TTree. By default, only direct inheritance is drawn. Use TClassTree::ShowLinks(option) to show additional references; option = ""H"" to show links to embedded classes; option = ""M"" to show multiple",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassTree.html:66,Guid,Guide,66,doc/master/classTClassTree.html,https://root.cern,https://root.cern/doc/master/classTClassTree.html,1,['Guid'],['Guide']
Usability,". ROOT: TCling Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Types |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TCling Class Referencefinal. ; This class defines an interface to the cling C++ interpreter. ; Cling is a full ANSI compliant C++-11 interpreter based on clang/LLVM technology. ; Definition at line 102 of file TCling.h. Classes; struct  CharPtrCmp_t;  ; struct  MutexStateAndRecurseCount;  ; struct  MutexStateAndRecurseCountDelta;  ; class  SuspendAutoLoadingRAII;  ; class  TUniqueString;  . Public Member Functions;  TCling (const char *name, const char *title, const char *const argv[], void *interpLibHandle);  Initialize the cling interpreter interface. ;  ; virtual ~TCling ();  Destroy the interpreter interface. ;  ; virtual void AddAvailableIndentifiers (TSeqCollection &Idents) final;  ; void AddIncludePath (const char *path) final;  Add a directory to the list of directories in which the interpreter looks for include files. ;  ; void ApplyToInterpreterMutex (void *delta);  Re-apply the lock count delta that TCling__ResetInterpreterMutex() caused. ;  ; Int_t AutoLoad (const char *classname, Bool_t knowDictNotLoaded=kFALSE) final;  Load library containing the specified class. ;  ; Int_t AutoLoad (const std::type_info &typeinfo, Bool_t knowDictNotLoaded=kFALSE) final;  Load library containing the specified class. ;  ; Int_t AutoParse (const char *cls) final;  Parse the headers relative to the class Returns 1 in case of success, 0 in case of failure. ;  ; ClassInfo_t * BaseClassInfo_ClassInfo (BaseClassInfo_t *) const final;  ; void BaseClassInfo_Delete (BaseClassInfo_t *bcinfo) const final;  ; BaseClassInfo_t * BaseClassInfo_Factory (ClassInfo_t *derived, ClassInfo_t *base",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:62,Guid,Guide,62,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['Guid'],['Guide']
Usability,". ROOT: TCling::CharPtrCmp_t Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TCling::CharPtrCmp_t Struct Reference. . Definition at line 140 of file TCling.h. Public Member Functions; bool operator() (const char *a, const char *b) const;  . Member Function Documentation. ◆ operator()(). bool TCling::CharPtrCmp_t::operator() ; (; const char * ; a, . const char * ; b . ); const. inline . Definition at line 141 of file TCling.h. The documentation for this struct was generated from the following file:; core/metacling/src/TCling.h. TClingCharPtrCmp_t. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTCling_1_1CharPtrCmp__t.html:77,Guid,Guide,77,doc/master/structTCling_1_1CharPtrCmp__t.html,https://root.cern,https://root.cern/doc/master/structTCling_1_1CharPtrCmp__t.html,2,['Guid'],['Guide']
Usability,". ROOT: TCling::MutexStateAndRecurseCount Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TCling::MutexStateAndRecurseCount Struct Reference. . Definition at line 155 of file TCling.h. Public Member Functions;  operator bool () const;  . Public Attributes; Int_t fRecurseCount = 0;  Interpreter-related functions will push the ""entry"" lock state to *this. ;  ; std::unique_ptr< ROOT::TVirtualRWMutex::State > fState;  State of gCoreMutex when the first interpreter-related function was invoked. ;  . Member Function Documentation. ◆ operator bool(). TCling::MutexStateAndRecurseCount::operator bool ; (; ); const. inline . Definition at line 164 of file TCling.h. Member Data Documentation. ◆ fRecurseCount. Int_t TCling::MutexStateAndRecurseCount::fRecurseCount = 0. Interpreter-related functions will push the ""entry"" lock state to *this. ; Recursive calls will do that, too - but we must only forget about the lock state once this recursion count went to 0. ; Definition at line 162 of file TCling.h. ◆ fState. std::unique_ptr<ROOT::TVirtualRWMutex::State> TCling::MutexStateAndRecurseCount::fState. State of gCoreMutex when the first interpreter-related function was invoked. ; Definition at line 157 of file TCling.h. Collaboration diagram for TCling::MutexStateAndRecurseCount:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; core/metacling/src/TCling.h. TClingMutexStateAndRecurseCount. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTCling_1_1MutexStateAndRecurseCount.html:90,Guid,Guide,90,doc/master/structTCling_1_1MutexStateAndRecurseCount.html,https://root.cern,https://root.cern/doc/master/structTCling_1_1MutexStateAndRecurseCount.html,2,['Guid'],['Guide']
Usability,". ROOT: TCling::MutexStateAndRecurseCountDelta Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Attributes |; List of all members ; TCling::MutexStateAndRecurseCountDelta Struct Reference. . Definition at line 167 of file TCling.h. Public Types; using StateDelta = ROOT::TVirtualRWMutex::StateDelta;  . Public Attributes; std::unique_ptr< StateDelta > fDelta;  ; MutexStateAndRecurseCount fInitialState;  . Member Typedef Documentation. ◆ StateDelta. using TCling::MutexStateAndRecurseCountDelta::StateDelta = ROOT::TVirtualRWMutex::StateDelta. Definition at line 168 of file TCling.h. Member Data Documentation. ◆ fDelta. std::unique_ptr<StateDelta> TCling::MutexStateAndRecurseCountDelta::fDelta. Definition at line 171 of file TCling.h. ◆ fInitialState. MutexStateAndRecurseCount TCling::MutexStateAndRecurseCountDelta::fInitialState. Definition at line 170 of file TCling.h. Collaboration diagram for TCling::MutexStateAndRecurseCountDelta:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; core/metacling/src/TCling.h. TClingMutexStateAndRecurseCountDelta. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTCling_1_1MutexStateAndRecurseCountDelta.html:95,Guid,Guide,95,doc/master/structTCling_1_1MutexStateAndRecurseCountDelta.html,https://root.cern,https://root.cern/doc/master/structTCling_1_1MutexStateAndRecurseCountDelta.html,2,['Guid'],['Guide']
Usability,. ROOT: TCling::SuspendAutoLoadingRAII Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TCling::SuspendAutoLoadingRAII Class Reference. . Definition at line 602 of file TCling.h. Public Member Functions;  SuspendAutoLoadingRAII (TCling *tcling);  ;  ~SuspendAutoLoadingRAII ();  . Private Attributes; bool fOldValue;  ; TCling * fTCling = nullptr;  . Constructor & Destructor Documentation. ◆ SuspendAutoLoadingRAII(). TCling::SuspendAutoLoadingRAII::SuspendAutoLoadingRAII ; (; TCling * ; tcling). inline . Definition at line 607 of file TCling.h. ◆ ~SuspendAutoLoadingRAII(). TCling::SuspendAutoLoadingRAII::~SuspendAutoLoadingRAII ; (; ). inline . Definition at line 608 of file TCling.h. Member Data Documentation. ◆ fOldValue. bool TCling::SuspendAutoLoadingRAII::fOldValue. private . Definition at line 604 of file TCling.h. ◆ fTCling. TCling* TCling::SuspendAutoLoadingRAII::fTCling = nullptr. private . Definition at line 603 of file TCling.h. core/metacling/src/TCling.h. TClingSuspendAutoLoadingRAII. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:24 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling_1_1SuspendAutoLoadingRAII.html:86,Guid,Guide,86,doc/master/classTCling_1_1SuspendAutoLoadingRAII.html,https://root.cern,https://root.cern/doc/master/classTCling_1_1SuspendAutoLoadingRAII.html,2,['Guid'],['Guide']
Usability,. ROOT: TCling::TUniqueString Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TCling::TUniqueString Class Reference. . Definition at line 611 of file TCling.h. Public Member Functions;  TUniqueString ()=delete;  ;  TUniqueString (const TUniqueString &)=delete;  ;  TUniqueString (Long64_t size);  ; bool Append (const std::string &str);  Append string to the storage if not added already. ;  ; const char * Data ();  . Private Attributes; std::string fContent;  ; std::hash< std::string > fHashFunc;  ; std::set< size_t > fLinesHashSet;  . Constructor & Destructor Documentation. ◆ TUniqueString() [1/3]. TCling::TUniqueString::TUniqueString ; (; ). delete . ◆ TUniqueString() [2/3]. TCling::TUniqueString::TUniqueString ; (; const TUniqueString & ; ). delete . ◆ TUniqueString() [3/3]. TCling::TUniqueString::TUniqueString ; (; Long64_t ; size). Definition at line 999 of file TCling.cxx. Member Function Documentation. ◆ Append(). bool TCling::TUniqueString::Append ; (; const std::string & ; str). inline . Append string to the storage if not added already. ; Definition at line 1014 of file TCling.cxx. ◆ Data(). const char * TCling::TUniqueString::Data ; (; ). inline . Definition at line 1006 of file TCling.cxx. Member Data Documentation. ◆ fContent. std::string TCling::TUniqueString::fContent. private . Definition at line 619 of file TCling.h. ◆ fHashFunc. std::hash<std::string> TCling::TUniqueString::fHashFunc. private . Definition at line 621 of file TCling.h. ◆ fLinesHashSet. std::set<size_t> TCling::TUniqueString::fLinesHashSet. private . Definition at line 620 of file TCling.h. core/metacling/src/TCling.h; core/metacling/src/TCling.cxx. TClingTUniqueString. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:24 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling_1_1TUniqueString.html:77,Guid,Guide,77,doc/master/classTCling_1_1TUniqueString.html,https://root.cern,https://root.cern/doc/master/classTCling_1_1TUniqueString.html,2,['Guid'],['Guide']
Usability,". ROOT: TClingCallbacks Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TClingCallbacks Class Reference. . Definition at line 41 of file TClingCallbacks.h. Public Member Functions;  TClingCallbacks (cling::Interpreter *interp, bool hasCodeGen);  ;  ~TClingCallbacks ();  ; void DefinitionShadowed (const clang::NamedDecl *D) override;  A previous definition has been shadowed; invalidate TCling' stored data about the old (global) decl. ;  ; void * EnteringUserCode () override;  ; bool FileNotFound (llvm::StringRef FileName) override;  ; void InclusionDirective (clang::SourceLocation, const clang::Token &, llvm::StringRef FileName, bool, clang::CharSourceRange, clang::OptionalFileEntryRef, llvm::StringRef, llvm::StringRef, const clang::Module *, clang::SrcMgr::CharacteristicKind) override;  ; void Initialize ();  ; bool IsAutoLoadingEnabled () const;  ; bool IsAutoParsingSuspended ();  ; void LibraryLoaded (const void *dyLibHandle, llvm::StringRef canonicalName) override;  ; bool LibraryLoadingFailed (const std::string &, const std::string &, bool, bool) override;  ; void LibraryUnloaded (const void *dyLibHandle, llvm::StringRef canonicalName) override;  ; void * LockCompilationDuringUserCodeExecution () override;  ; bool LookupObject (clang::LookupResult &R, clang::Scope *S) override;  ; bool LookupObject (clang::TagDecl *Tag) override;  ; bool LookupObject (const clang::DeclContext *DC, clang::DeclarationName Name) override;  ; void PrintStackTrace () override;  ; void ReturnedFromUserCode (void *stateInfo) override;  ; void SetAutoLoadingEnabled (bool val=true);  ; void SetAutoParsingSuspended (bool val=true);  ; void TransactionCodeGenFinished (const cling::Transaction &T) override;  ; void TransactionCodeGenStarted (const cling::Transaction &T) override;  ; void TransactionCommitted (const cling::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClingCallbacks.html:71,Guid,Guide,71,doc/master/classTClingCallbacks.html,https://root.cern,https://root.cern/doc/master/classTClingCallbacks.html,1,['Guid'],['Guide']
Usability,". ROOT: TClingClassInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TClingClassInfo Class Referencefinal. ; Emulation of the CINT ClassInfo class. ; The CINT C++ interpreter provides an interface to metadata about a class through the ClassInfo class. This class provides the same functionality, using an interface as close as possible to ClassInfo but the class metadata comes from the Clang C++ compiler, not CINT. ; Definition at line 59 of file TClingClassInfo.h. Public Types; enum  EInheritanceMode { kInThisScope = 0; , kWithInheritance = 1; };  . Public Member Functions;  TClingClassInfo ();  ;  TClingClassInfo (cling::Interpreter *, Bool_t all=kTRUE);  ;  TClingClassInfo (cling::Interpreter *, const char *classname, bool intantiateTemplate=kTRUE);  ;  TClingClassInfo (cling::Interpreter *interp, const clang::Decl *D);  ;  TClingClassInfo (cling::Interpreter *interp, const clang::Type &tag);  ;  TClingClassInfo (const TClingClassInfo &rhs);  ; void AddBaseOffsetFunction (const clang::Decl *decl, OffsetPtrFunc_t func);  ; void AddBaseOffsetValue (const clang::Decl *decl, ptrdiff_t offset);  ; long ClassProperty () const;  ; void Delete (void *arena, const ROOT::TMetaUtils::TNormalizedCtxt &normCtxt) const;  ; void DeleteArray (void *arena, bool dtorOnly, const ROOT::TMetaUtils::TNormalizedCtxt &normCtxt) const;  ; void Destruct (void *arena, const ROOT::TMetaUtils::TNormalizedCtxt &normCtxt) const;  ; const char * FileName ();  ; void FullName (std::string &output, const ROOT::TMetaUtils::TNormalizedCtxt &normCtxt) const;  ; ptrdiff_t GetBaseOffset (TClingClassInfo *toBase, void *address, bool isDerivedObject);  ; const clang::ValueDecl * GetDataMember (const char *name) const;  ; TDictionary::DeclId_t GetDeclId () const;  ; const clang::FunctionTemplateDecl * GetFunctionT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClingClassInfo.html:71,Guid,Guide,71,doc/master/classTClingClassInfo.html,https://root.cern,https://root.cern/doc/master/classTClingClassInfo.html,1,['Guid'],['Guide']
Usability,". ROOT: TClonesArray Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TClonesArray Class ReferenceCore ROOT classes » Containers. ; An array of clone (identical) objects. ; Memory for the objects stored in the array is allocated only once in the lifetime of the clones array. All objects must be of the same class. For the rest this class has the same properties as TObjArray.; To reduce the very large number of new and delete calls in large loops like this (O(100000) x O(10000) times new/delete): TObjArray a(10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; a[i] = new TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete();; }; a#define a(i)Definition RSha256.hxx:99; TObjArrayAn array of TObjects.Definition TObjArray.h:31; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; One better uses a TClonesArray which reduces the number of new/delete calls to only O(10000): TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete(); // or a.Clear() or a.Clear(""C""); }; TClonesArrayAn array of clone (identical) objects.Definition TClonesArray.h:29; To reduce the number of call to the constructor (especially useful if the user class requires memory allocation), the object can be added (and constructed when needed) using ConstructedAt which only calls the constructor once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:68,Guid,Guide,68,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,1,['Guid'],['Guide']
Usability,". ROOT: TCollection Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Static Private Attributes |; List of all members ; TCollection Class ReferenceabstractCore ROOT classes » Containers. ; Collection abstract base class. ; This class describes the base protocol all collection classes have to implement. The ROOT collection classes always store pointers to objects that inherit from TObject. They never adopt the objects. Therefore, it is the user's responsibility to take care of deleting the actual objects once they are not needed anymore. In exceptional cases, when the user is 100% sure nothing else is referencing the objects in the collection, one can delete all objects and the collection at the same time using the Delete() function.; Collections can be iterated using an iterator object (see TIterator). Depending on the concrete collection class there may be some additional methods of iterating. See the respective classes.; TCollection inherits from TObject since we want to be able to have collections of collections.; In a later release the collections may become templatized. ; Definition at line 65 of file TCollection.h. Public Types; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCann",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCollection.html:67,Guid,Guide,67,doc/master/classTCollection.html,https://root.cern,https://root.cern/doc/master/classTCollection.html,1,['Guid'],['Guide']
Usability,". ROOT: TCollection Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Static Private Attributes |; List of all members ; TCollection Class ReferenceabstractCore ROOT classes » Containers. ; Collection abstract base class. ; This class describes the base protocol all collection classes have to implement. The ROOT collection classes always store pointers to objects that inherit from TObject. They never adopt the objects. Therefore, it is the user's responsibility to take care of deleting the actual objects once they are not needed anymore. In exceptional cases, when the user is 100% sure nothing else is referencing the objects in the collection, one can delete all objects and the collection at the same time using the Delete() function.; Collections can be iterated using an iterator object (see TIterator). Depending on the concrete collection class there may be some additional methods of iterating. See the respective classes.; TCollection inherits from TObject since we want to be able to have collections of collections.; In a later release the collections may become templatized. ; Definition at line 65 of file TCollection.h. Public Types; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCanno",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCollection.html:66,Guid,Guide,66,doc/v632/classTCollection.html,https://root.cern,https://root.cern/doc/v632/classTCollection.html,1,['Guid'],['Guide']
Usability,". ROOT: TCollectionMethodBrowsable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TCollectionMethodBrowsable Class ReferenceTree Library. ; TCollectionMethodBrowsable extends TCollectionPropertyBrowsable by showing all methods of the collection itself. ; If none are available - e.g. for STL classes like std::list, a TVirtualBranchBrowsable object is created instead. The methods' names will have a ""@"" prepended, to distinguish them from the contained elements' methods.; This browser helper object is not part of the default list of registered generators (see TVirtualBranchBrowsable::RegisterDefaultGenerators()). If you want to use it, you should call TCollectionMethodBrowsable::Register(); As it extends the functionality of TVirtualBranchBrowsable, one might want to unregister the generator of the ""@size()"" method by calling TCollectionPropertyBrowsable::Unregister(); ; Definition at line 178 of file TBranchBrowsable.h. Public Member Functions;  ~TCollectionMethodBrowsable () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMethodBrowsable;  ~TMethodBrowsable () override;  ; const char * GetIconName () const override;  return our special icons ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TVirtualBranchBrowsable;  ~TVirtualBranchBrowsable () override;  Destructor. Delete our leaves. ;  ; void Browse (TBrowser *b) override;  Calls TTree::Draw on the method if return type is not a class; otherwise expands returned object's ""folder"". ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCollectionMethodBrowsable.html:82,Guid,Guide,82,doc/master/classTCollectionMethodBrowsable.html,https://root.cern,https://root.cern/doc/master/classTCollectionMethodBrowsable.html,1,['Guid'],['Guide']
Usability,". ROOT: TCollectionPropertyBrowsable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TCollectionPropertyBrowsable Class ReferenceTree Library. ; A tiny browser helper object (and its generator) for adding a virtual (as in ""not actually part of the class"", not in C++ virtual) ""@size()"" method to a collection. ; For all collections that derive from TCollection, or have a TVirtualCollectionProxy associated with them, a leaf is created that allows access to the number of elements in the collection. For TClonesArrays and types with an associated TVirtualCollectionProxy, this forwards to TTreeFormula's ""@branch.size()"" functionality. For all other collections, a method call to the appropriate collection's member function is executed when drawing.; These objects are of course only created for elements containing a collection; the generator has no effect on any other elements. ; Definition at line 150 of file TBranchBrowsable.h. Public Member Functions;  ~TCollectionPropertyBrowsable () override;  ; void Browse (TBrowser *b) override;  Browses a TCollectionPropertyBrowsable. ;  ; const char * GetDraw () const;  return the string passed to TTree::Draw ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TVirtualBranchBrowsable;  ~TVirtualBranchBrowsable () override;  Destructor. Delete our leaves. ;  ; void Browse (TBrowser *b) override;  Calls TTree::Draw on the method if return type is not a class; otherwise expands returned object's ""folder"". ;  ; const TBranch * GetBranch () const;  return the parent branch (might be many levels up) ;  ; TClass * GetClassType () const;  return the type of this browsabl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCollectionPropertyBrowsable.html:84,Guid,Guide,84,doc/master/classTCollectionPropertyBrowsable.html,https://root.cern,https://root.cern/doc/master/classTCollectionPropertyBrowsable.html,1,['Guid'],['Guide']
Usability,". ROOT: TColor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; TColor Class ReferenceCore ROOT classes » Base ROOT classes | Graphics » Graphics attributes. ; The color creation and management class. . Introduction; Basic colors; The color wheel; Bright and dark colors; Accessible Color Schemes; Gray scale view of of canvas with colors; Color palettes; High quality predefined palettes; Colour Vision Deficiency (CVD) friendly palettes; Non Colour Vision Deficiency (CVD) friendly palettes. Palette inversion; Color transparency. Introduction; Colors are defined by their red, green and blue components, simply called the RGB components. The colors are also known by the hue, light and saturation components also known as the HLS components. When a new color is created the components of both color systems are computed.; At initialization time, a table of colors is generated. An existing color can be retrieved by its index:; TColor *color = gROOT->GetColor(10);; gROOT#define gROOTDefinition TROOT.h:406; TColorThe color creation and management class.Definition TColor.h:21; TColor::GetColorstatic Int_t GetColor(const char *hexcolor)Static method returning color number for color specified by hex color string of form: ""#rrggbb"",...Definition TColor.cxx:1920; Then it can be manipulated. For example its RGB components can be modified:; color->SetRGB(0.1, 0.2, 0.3);; TColor::SetRGBvirtual void SetRGB(Float_t r, Float_t g, Float_t b)Initialize this color and its ""dark"" and ""bright"" associated colors.Definition TColor.cxx:1850; A new color can be created the following way:; Int_t ci = 1756; // color index; auto color = new TColor(ci, 0.1, 0.2, 0.3);; TColor::TColorTColor()Default constructor.Definition TColor.cxx:1061; int; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTColor.html:62,Guid,Guide,62,doc/master/classTColor.html,https://root.cern,https://root.cern/doc/master/classTColor.html,2,"['Guid', 'simpl']","['Guide', 'simply']"
Usability,". ROOT: TColorGradient Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TColorGradient Class ReferenceCore ROOT classes » Base ROOT classes | Graphics » Graphics attributes. ; TColorGradient extends basic TColor. ; Actually, this is not a simple color, but linear gradient + shadow for filled area. By inheriting from TColor, gradients can be placed inside gROOT's list of colors and use it in all TAttXXX descendants without modifying any existing code.; Shadow, of course, is not a property of any color, and gradient is not, but this is the best way to add new attributes to filled area without re-writing all the graphics code. ; Definition at line 32 of file TColorGradient.h. Classes; struct  Point;  . Public Types; enum  ECoordinateMode { kPadMode; , kObjectBoundingMode; };  ; typedef std::vector< Color_t >::size_type SizeType_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TColorGradient ();  ;  TColorGradient (Color_t newColor, UInt_t nPoints, const Double_t *points, const Color_t *colorIndices, ECoordinateMode mode=kObjectBoundingMode);  There is no way to validate parameters here, so it's up to user to pass correct arguments. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTColorGradient.html:70,Guid,Guide,70,doc/master/classTColorGradient.html,https://root.cern,https://root.cern/doc/master/classTColorGradient.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TColorWheel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TColorWheel Class ReferenceGraphics » 2D Graphics » Graphics pad. ; Draw the ROOT Color Wheel. ; The wheel contains the recommended 216 colors to be used in web applications. The colors in the Color Wheel are created by TColor::CreateColorWheel.; Using this color set for your text, background or graphics will give your application a consistent appearance across different platforms and browsers.; Colors are grouped by hue, the aspect most important in human perception. Touching color chips have the same hue, but with different brightness and vividness.; Colors of slightly different hues clash. If you intend to display colors of the same hue together, you should pick them from the same group.; Each color chip is identified by a mnemonic (e.g. kYellow) and a number. The keywords, kRed, kBlue, kYellow, kPink, etc are defined in the header file Rtypes.h that is included in all ROOT other header files. We strongly recommend to use these keywords in your code instead of hardcoded color numbers, e.g.: myObject.SetFillColor(kRed);; myObject.SetFillColor(kYellow-10);; myLine.SetLineColor(kMagenta+2);; kRed@ kRedDefinition Rtypes.h:66; kMagenta@ kMagentaDefinition Rtypes.h:66; kYellow@ kYellowDefinition Rtypes.h:66. Definition at line 23 of file TColorWheel.h. Public Member Functions;  TColorWheel ();  constructor ;  ;  ~TColorWheel () override;  destructor ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  always return the color wheel ;  ; void Draw (Option_t *option="""") override;  Paint the color wheel. ;  ; TCanvas * GetCanvas () const;  ; virtual Int_t GetColor (Int_t px, Int_t py) const;  Return the color number pointed by the mouse. ;  ; char * GetObjectInfo (I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTColorWheel.html:67,Guid,Guide,67,doc/master/classTColorWheel.html,https://root.cern,https://root.cern/doc/master/classTColorWheel.html,1,['Guid'],['Guide']
Usability,". ROOT: TComplex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Friends |; List of all members ; TComplex Class Reference. . Definition at line 29 of file TComplex.h. Public Types; template<class T > ; using enable_if_arithmetic = typename std::enable_if< std::is_arithmetic< T >::value, bool >::type;  . Public Member Functions;  TComplex ();  ;  TComplex (Double_t re, Double_t im=0, Bool_t polar=kFALSE);  Standard constructor. ;  ; virtual ~TComplex ();  ; Double_t Im () const;  ; virtual TClass * IsA () const;  ;  operator Double_t () const;  ;  operator Float_t () const;  ;  operator Int_t () const;  ; TComplex operator() (Double_t x, Double_t y, Bool_t polar=kFALSE);  ; TComplex operator* (const TComplex &c) const;  ; template<class T , enable_if_arithmetic< T > = true> ; TComplex operator* (T c) const;  ; TComplex operator*= (const TComplex &c);  ; TComplex operator+ ();  ; TComplex operator+ (const TComplex &c) const;  ; template<class T , enable_if_arithmetic< T > = true> ; TComplex operator+ (T c) const;  ; TComplex operator+= (const TComplex &c);  ; TComplex operator- ();  ; TComplex operator- (const TComplex &c) const;  ; template<class T , enable_if_arithmetic< T > = true> ; TComplex operator- (T c) const;  ; TComplex operator-= (const TComplex &c);  ; TComplex operator/ (const TComplex &c) const;  ; template<class T , enable_if_arithmetic< T > = true> ; TComplex operator/ (T c) const;  ; TComplex operator/= (const TComplex &c);  ; Double_t Re () const;  ; Double_t Rho () const;  ; Double_t Rho2 () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Double_t Theta () const;  . Static Public Member Functions; static Double_t Abs (const TComplex &c);  ; static TComplex ACos (const TComplex &c);  ; static TComplex ACosH (const T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTComplex.html:64,Guid,Guide,64,doc/master/classTComplex.html,https://root.cern,https://root.cern/doc/master/classTComplex.html,1,['Guid'],['Guide']
Usability,". ROOT: TCondition Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TCondition Class Reference. . Definition at line 32 of file TCondition.h. Public Member Functions;  TCondition (TMutex *m=nullptr);  Create a condition variable. ;  ; virtual ~TCondition ();  Clean up condition variable. ;  ; Int_t Broadcast ();  ; TMutex * GetMutex () const;  Get internally created mutex. ;  ; TClass * IsA () const override;  ; Int_t Signal ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TimedWait (ULong_t secs, ULong_t nanoSecs);  Wait to be signaled or till the timer times out. ;  ; Int_t TimedWaitRelative (ULong_t ms);  Wait to be signaled or till the timer times out. ;  ; Int_t Wait ();  Wait to be signaled. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCondition.html:66,Guid,Guide,66,doc/master/classTCondition.html,https://root.cern,https://root.cern/doc/master/classTCondition.html,1,['Guid'],['Guide']
Usability,". ROOT: TConditionImp Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TConditionImp Class Referenceabstract. . Definition at line 26 of file TConditionImp.h. Public Member Functions;  TConditionImp ();  ; virtual ~TConditionImp ();  ; virtual Int_t Broadcast ()=0;  ; TClass * IsA () const override;  ; virtual Int_t Signal ()=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t TimedWait (ULong_t secs, ULong_t nanoSecs=0)=0;  ; virtual Int_t Wait ()=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTConditionImp.html:69,Guid,Guide,69,doc/master/classTConditionImp.html,https://root.cern,https://root.cern/doc/master/classTConditionImp.html,1,['Guid'],['Guide']
Usability,". ROOT: TCondor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TCondor Class Reference. . Definition at line 52 of file TCondor.h. Public Types; enum  EState { kFree; , kSuspended; , kActive; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TCondor (const char *pool="""");  Create Condor interface object. ;  ;  ~TCondor () override;  Cleanup Condor interface. ;  ; TCondorSlave * Claim (const char *vmname, const char *cmd);  Claim virtual machine with name vmname This function does not figure out the image and performance index before returning the condor slave. ;  ; TList * Claim (Int_t n, const char *cmd);  Claim n virtual machines This function figures out the image and performance index before returning the list of condor slaves. ;  ; TString GetImage (const char *host) const;  Get image of the worker. ;  ; EState GetState () const;  ; TList * GetVirtualMachines () const;  Get the names of the virtual machines in the pool. ;  ; Bool_t GetVmInfo (const char *vm, TString &image, Int_t &perfidx) const;  Get info about worker status. ;  ; TClass * IsA () const override;  ; Bool_t IsValid () const;  ; void Print (Option_t *option="""") const o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCondor.html:63,Guid,Guide,63,doc/master/classTCondor.html,https://root.cern,https://root.cern/doc/master/classTCondor.html,1,['Guid'],['Guide']
Usability,". ROOT: TCondorSlave Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TCondorSlave Class Reference. . Definition at line 34 of file TCondor.h. Public Member Functions; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print worker status. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCondorSlave.html:68,Guid,Guide,68,doc/master/classTCondorSlave.html,https://root.cern,https://root.cern/doc/master/classTCondorSlave.html,1,['Guid'],['Guide']
Usability,". ROOT: TConfidenceLevel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TConfidenceLevel Class ReferenceHistogram Library. ; Class to compute 95% CL limits. ; Definition at line 20 of file TConfidenceLevel.h. Public Member Functions;  TConfidenceLevel ();  Default constructor. ;  ;  TConfidenceLevel (Int_t mc, bool onesided=kTRUE);  Constructor that fix some conventions. ;  ;  ~TConfidenceLevel () override;  The destructor. ;  ; Double_t CLb (bool use_sMC=kFALSE) const;  Get the Confidence Level for the background only. ;  ; Double_t CLs (bool use_sMC=kFALSE) const;  Get the Confidence Level defined by CLs = CLsb/CLb. ;  ; Double_t CLsb (bool use_sMC=kFALSE) const;  Get the Confidence Level for the signal plus background hypothesis. ;  ; void Draw (const Option_t *option="""") override;  Display sort of a ""canonical"" -2lnQ plot. ;  ; Double_t Get3sProbability () const;  Get 3s probability. ;  ; Double_t Get5sProbability () const;  Get 5s probability. ;  ; Double_t GetAverageCLs () const;  Get average CLs. ;  ; Double_t GetAverageCLsb () const;  Get average CLsb. ;  ; Double_t GetBtot () const;  ; Int_t GetDtot () const;  ; Double_t GetExpectedCLb_b (Int_t sigma=0) const;  Get the expected Confidence Level for the background only if there is only background. ;  ; Double_t GetExpectedCLb_sb (Int_t sigma=0) const;  Get the expected Confidence Level for the background only if there is signal and background. ;  ; Double_t GetExpectedCLs_b (Int_t sigma=0) const;  ; Double_t GetExpectedCLsb_b (Int_t sigma=0) const;  Get the expected Confidence Level for the signal plus background hypothesis if there is only background. ;  ; Double_t GetExpectedStatistic_b (Int_t sigma=0) const;  Get the expected statistic value in the background only hypothesis. ;  ; Double_t GetExpectedS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTConfidenceLevel.html:72,Guid,Guide,72,doc/master/classTConfidenceLevel.html,https://root.cern,https://root.cern/doc/master/classTConfidenceLevel.html,1,['Guid'],['Guide']
Usability,". ROOT: TContextMenu Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TContextMenu Class ReferenceCore ROOT classes » Base ROOT classes. ; This class provides an interface to context sensitive popup menus. ; These menus pop up when the user hits the right mouse button, and are destroyed when the menu pops downs.; Context Menus are automatically generated by ROOT using the following convention: if the string // *MENU* is found in the comment field of a member function. This function will be added to the list of items in the menu.; The picture below shows a canvas with a pop-up menu. The picture below shows a canvas with a pop-up menu and a dialog box. Definition at line 44 of file TContextMenu.h. Public Member Functions;  TContextMenu (const char *name, const char *title=""Context sensitive popup menu"");  Create a context menu. ;  ; virtual ~TContextMenu ();  Destroy a context menu. ;  ; virtual void Action (TClassMenuItem *classmenuitem);  Action to be performed when this menu item is selected. ;  ; void Action (TMethod *method);  ; virtual void Action (TObject *object, TMethod *method);  Action to be performed when this menu item is selected. ;  ; virtual void Action (TObject *object, TToggle *toggle);  Action to be performed when this toggle menu item is selected. ;  ; void Action (TToggle *toggle);  ; virtual const char * CreateArgumentTitle (TMethodArg *argument);  Create string describing argument (for use in dialog box). ;  ; virtual const char * CreateDialogTitle (TObject *object, TFunction *method);  Create title for dialog box retrieving argument values. ;  ; virtual const char * CreatePopupTitle (TObject *object);  Create title for popup menu. ;  ; void Execute (const char *method, const char *params, Int_t *error=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTContextMenu.html:68,Guid,Guide,68,doc/master/classTContextMenu.html,https://root.cern,https://root.cern/doc/master/classTContextMenu.html,1,['Guid'],['Guide']
Usability,". ROOT: TControlBar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TControlBar Class ReferenceGraphics » 2D Graphics » Graphics pad. ; A Control Bar is a fully user configurable tool which provides fast access to frequently used operations. ; The user can choose between buttons and drawn buttons (let's say icons) and assign to them their own actions (let's say ROOT or C++ commands).; The macro below shows an example of control bar. To execute an item, click with the left mouse button. To see the HELP of a button, click on the right mouse button.; You have access to the last clicked button via the method GetClicked(). For example, bar->GetClicked()->GetName() will return the name of the last clicked button.; {; // run macro from tutorials directory of ROOT!; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x graphics/framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hist/hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x graphics/canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x graphics/formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x hist/fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit/fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""draw2dopt"", "".x hist/draw2dopt.C"",; ""Drawing Options for 2D Histograms"");; bar.AddButton(""graph"", "".x graphs/graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x graphics/tornado.C"",; ""Examples of 3-D PolyMarkers""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTControlBar.html:67,Guid,Guide,67,doc/master/classTControlBar.html,https://root.cern,https://root.cern/doc/master/classTControlBar.html,1,['Guid'],['Guide']
Usability,". ROOT: TControlBarButton Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TControlBarButton Class ReferenceGraphics » 2D Graphics » Graphics pad. ; This class defines the control bar buttons. ; Created by the TControlBar. Not for general consumption. ; Definition at line 17 of file TControlBarButton.h. Public Types; enum  { kButton = 1; , kDrawnButton; , kSeparator; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TControlBarButton ();  Default control bar button ctor. ;  ;  TControlBarButton (const char *label, const char *action="""", const char *hint="""", const char *type=""button"");  Create control bar button. ;  ;  ~TControlBarButton () override;  ; virtual void Action ();  Execute control bar button command. ;  ; virtual void Create ();  ; virtual const char * GetAction () const;  ; virtual Int_t GetType () const;  ; TClass * IsA () const override;  ; virtual void SetAction (const char *action);  Set action to be executed by this button. ;  ; virtual void SetType (const char *type);  Set button type. ;  ; virtual void SetType (Int_t type);  Set button type. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTControlBarButton.html:73,Guid,Guide,73,doc/master/classTControlBarButton.html,https://root.cern,https://root.cern/doc/master/classTControlBarButton.html,1,['Guid'],['Guide']
Usability,". ROOT: TCrown Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TCrown Class ReferenceGraphics » 2D Graphics » Basic graphics. ; To draw a Crown. ; A crown is specified with the position of its centre, its inner/outer radius a minimum and maximum angle. The attributes of the outline line are given via TAttLine. The attributes of the fill area are given via TAttFill.; Example:; {; TCanvas *c1 = new TCanvas(""c1"",""c1"",400,400);; TCrown cr1(.5,.5,.3,.4);; cr1.SetLineStyle(2);; cr1.SetLineWidth(4);; cr1.Draw();; TCrown cr2(.5,.5,.2,.3,45,315);; cr2.SetFillColor(38);; cr2.SetFillStyle(3010);; cr2.Draw();; TCrown cr3(.5,.5,.2,.3,-45,45);; cr3.SetFillColor(50);; cr3.SetFillStyle(3025);; cr3.Draw();; TCrown cr4(.5,.5,.0,.2);; cr4.SetFillColor(4);; cr4.SetFillStyle(3008);; cr4.Draw();; return c1;; }; TCanvasThe Canvas class.Definition TCanvas.h:23; TCrownTo draw a Crown.Definition TCrown.h:19; c1return c1Definition legend1.C:41. Definition at line 19 of file TCrown.h. Public Member Functions;  TCrown ();  Crown default constructor. ;  ;  TCrown (const TCrown &crown);  Crown copy constructor. ;  ;  TCrown (Double_t x1, Double_t y1, Double_t radin, Double_t radout, Double_t phimin=0, Double_t phimax=360);  Crown normal constructor. ;  ;  ~TCrown () override;  Crown default destructor. ;  ; void Copy (TObject &crown) const override;  Copy this crown to crown. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a crown. ;  ; virtual TCrown * DrawCrown (Double_t x1, Double_t y1, Double_t radin, Double_t radout, Double_t phimin=0, Double_t phimax=360, Option_t *option="""");  Draw this crown with new coordinates. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; TClass * IsA () const override;  ; Int_t IsInside (Double_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCrown.html:62,Guid,Guide,62,doc/master/classTCrown.html,https://root.cern,https://root.cern/doc/master/classTCrown.html,1,['Guid'],['Guide']
Usability,". ROOT: TCurlyArc Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TCurlyArc Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Implements curly or wavy arcs used to draw Feynman diagrams. ; Amplitudes and wavelengths may be specified in the constructors, via commands or interactively from popup menus. The class make use of TCurlyLine by inheritance, ExecuteEvent methods are highly inspired from the methods used in TPolyLine and TArc. The picture below has been generated by the tutorial feynman.; ; void feynman(); {; TCanvas *c1 = new TCanvas(""c1"", ""A canvas"", 10,10, 600, 300);; c1->Range(0, 0, 140, 60);; Int_t linsav = gStyle->GetLineWidth();; gStyle->SetLineWidth(3);; TLatex t;; t.SetTextAlign(22);; t.SetTextSize(0.1);; TLine * l;; l = new TLine(10, 10, 30, 30); l->Draw();; l = new TLine(10, 50, 30, 30); l->Draw();; TCurlyArc *ginit = new TCurlyArc(30, 30, 12.5*sqrt(2), 135, 225);; ginit->SetWavy();; ginit->Draw();; t.DrawLatex(7,6,""e^{-}"");; t.DrawLatex(7,55,""e^{+}"");; t.DrawLatex(7,30,""#gamma"");; ; TCurlyLine *Gamma = new TCurlyLine(30, 30, 55, 30);; Gamma->SetWavy();; Gamma->Draw();; t.DrawLatex(42.5,37.7,""#gamma"");; ; TArc *a = new TArc(70, 30, 15);; a->Draw();; t.DrawLatex(55, 45,""#bar{q}"");; t.DrawLatex(85, 15,""q"");; TCurlyLine *gluon = new TCurlyLine(70, 45, 70, 15);; gluon->Draw();; t.DrawLatex(77.5,30,""g"");; ; TCurlyLine *z0 = new TCurlyLine(85, 30, 110, 30);; z0->SetWavy();; z0->Draw();; t.DrawLatex(100, 37.5,""Z^{0}"");; ; l = new TLine(110, 30, 130, 10); l->Draw();; l = new TLine(110, 30, 130, 50); l->Draw();; ; TCurlyArc *gluon1 = new TCurlyArc(110, 30, 12.5*sqrt(2), 315, 45);; gluon1->Draw();; ; t.DrawLatex(135,6,""#bar{q}"");; t.DrawLatex(135,55,""q"");; t.DrawLatex(135,30,""g"");; c1->Update();; gStyle->SetLineWidth(linsav);; }; a#define a(i)Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCurlyArc.html:65,Guid,Guide,65,doc/master/classTCurlyArc.html,https://root.cern,https://root.cern/doc/master/classTCurlyArc.html,1,['Guid'],['Guide']
Usability,". ROOT: TCurlyLine Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TCurlyLine Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Implements curly or wavy polylines used to draw Feynman diagrams. ; Amplitudes and wavelengths may be specified in the constructors, via commands or interactively from popup menus. The class make use of TPolyLine by inheritance, ExecuteEvent methods are highly inspired from the methods used in TPolyLine and TArc. The picture below has been generated by the tutorial feynman.; ; void feynman(); {; TCanvas *c1 = new TCanvas(""c1"", ""A canvas"", 10,10, 600, 300);; c1->Range(0, 0, 140, 60);; Int_t linsav = gStyle->GetLineWidth();; gStyle->SetLineWidth(3);; TLatex t;; t.SetTextAlign(22);; t.SetTextSize(0.1);; TLine * l;; l = new TLine(10, 10, 30, 30); l->Draw();; l = new TLine(10, 50, 30, 30); l->Draw();; TCurlyArc *ginit = new TCurlyArc(30, 30, 12.5*sqrt(2), 135, 225);; ginit->SetWavy();; ginit->Draw();; t.DrawLatex(7,6,""e^{-}"");; t.DrawLatex(7,55,""e^{+}"");; t.DrawLatex(7,30,""#gamma"");; ; TCurlyLine *Gamma = new TCurlyLine(30, 30, 55, 30);; Gamma->SetWavy();; Gamma->Draw();; t.DrawLatex(42.5,37.7,""#gamma"");; ; TArc *a = new TArc(70, 30, 15);; a->Draw();; t.DrawLatex(55, 45,""#bar{q}"");; t.DrawLatex(85, 15,""q"");; TCurlyLine *gluon = new TCurlyLine(70, 45, 70, 15);; gluon->Draw();; t.DrawLatex(77.5,30,""g"");; ; TCurlyLine *z0 = new TCurlyLine(85, 30, 110, 30);; z0->SetWavy();; z0->Draw();; t.DrawLatex(100, 37.5,""Z^{0}"");; ; l = new TLine(110, 30, 130, 10); l->Draw();; l = new TLine(110, 30, 130, 50); l->Draw();; ; TCurlyArc *gluon1 = new TCurlyArc(110, 30, 12.5*sqrt(2), 315, 45);; gluon1->Draw();; ; t.DrawLatex(135,6,""#bar{q}"");; t.DrawLatex(135,55,""q"");; t.DrawLatex(135,30,""g"");; c1->Update();; gStyle->SetLineWidth(linsav);; }; a#define ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCurlyLine.html:66,Guid,Guide,66,doc/master/classTCurlyLine.html,https://root.cern,https://root.cern/doc/master/classTCurlyLine.html,1,['Guid'],['Guide']
Usability,". ROOT: TCut Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Friends |; List of all members ; TCut Class ReferenceTree Library. ; A specialized string object used for TTree selections. ; A TCut object has a name and a title. It does not add any data members compared to a TNamed. It only add a set of operators to facilitate logical string concatenation. For example, assume cut1 = ""x<1"" and cut2 = ""y>2""; then cut1 && cut2 will be the string ""(x<1)&&(y>2)""; Operators =, +=, +, *, !, &&, || overloaded.; Examples of use: Root > TCut c1 = ""x<1""; Root > TCut c2 = ""y<0""; Root > TCut c3 = c1&&c2; Root > ntuple.Draw(""x"", c1); Root > ntuple.Draw(""x"", c1||""x>0""); Root > ntuple.Draw(""x"", c1&&c2); Root > ntuple.Draw(""x"", ""(x+y)""*(c1&&c2)); TCutA specialized string object used for TTree selections.Definition TCut.h:25; c1return c1Definition legend1.C:41; c2return c2Definition legend2.C:14; c3return c3Definition legend3.C:15. Definition at line 25 of file TCut.h. Public Member Functions;  TCut ();  Constructor. ;  ;  TCut (const char *name, const char *title);  Constructor. ;  ;  TCut (const char *title);  Constructor. ;  ;  TCut (const TCut &cut);  Copy Constructor. ;  ;  ~TCut () override;  Typical destructor. ;  ; TClass * IsA () const override;  ;  operator const char * () const;  ; bool operator!= (const char *rhs) const;  Comparison. ;  ; bool operator!= (const TCut &rhs) const;  Comparison. ;  ; TCut & operator*= (const char *rhs);  Multiplication. ;  ; TCut & operator*= (const TCut &rhs);  Multiplication. ;  ; TCut & operator+= (const char *rhs);  Addition. ;  ; TCut & operator+= (const TCut &rhs);  Addition. ;  ; TCut & operator= (const char *rhs);  Assignment. ;  ; TCut & operator= (const TCut &rhs);  Assignment. ;  ; bool operator== (const char *rhs) const;  Comparison. ;  ; bool operator== (const TCut &rhs) cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCut.html:60,Guid,Guide,60,doc/master/classTCut.html,https://root.cern,https://root.cern/doc/master/classTCut.html,1,['Guid'],['Guide']
Usability,". ROOT: TCutG Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TCutG Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Graphical cut class. ; A TCutG object is a closed polygon defining a closed region in a x,y plot. It can be created via the graphics editor option ""CutG"" or directly by invoking its constructor. The first and last points should be the same.; To create a TCutG via the graphics editor, use the left button to select the points building the contour of the cut. Click on the right button to close the TCutG. When it is created via the graphics editor, the TCutG object is named ""CUTG"". It is recommended to immediately change the name by using the context menu item ""SetName"". When the graphics editor is used, the names of the variables X,Y are automatically taken from the current pad title.; Example:; Assume a TTree object T and: Root > T.Draw(""abs(fMomemtum):fEtot""); the TCutG members fVarX, fVary will be set to: fVarx = fEtot; fVary = abs(fMomemtum); A graphical cut can be used in a TTree selection expression: Root > T.Draw(""fEtot"",""cutg1""); where ""cutg1"" is the name of an existing graphical cut.; Note that, as shown in the example above, a graphical cut may be used in a selection expression when drawing TTrees expressions of 1-d, 2-d or 3-dimensions. The expressions used in TTree::Draw can reference the variables in the fVarX, fVarY of the graphical cut plus other variables.; When the TCutG object is created by TTree::Draw, it is added to the list of special objects in the main TROOT object pointed by gROOT. To retrieve a pointer to this object from the code or command line, do: TCutG *mycutg;; mycutg = (TCutG*)gROOT->GetListOfSpecials()->FindObject(""CUTG""); mycutg->SetName(""mycutg"");; gROOT#define gROOTDefinition TROOT.h:406; TCutGGraphical cut class.Definition TCutG.h:20",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCutG.html:61,Guid,Guide,61,doc/master/classTCutG.html,https://root.cern,https://root.cern/doc/master/classTCutG.html,1,['Guid'],['Guide']
Usability,". ROOT: TDCacheFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TDCacheFile Class ReferenceInput/Output Library. ; A TDCacheFile is like a normal TFile except that it may read and write its data via a dCache server (for more on the dCache daemon see http://www-dcache.desy.de/. ; Given a path which doesn't belong to the dCache managed filesystem, it falls back to the ordinary TFile behaviour. ; Definition at line 25 of file TDCacheFile.h. Public Types; enum  EOnErrorAction { kOnErrorRetry = 1; , kOnErrorFail = 0; , kOnErrorDefault = -1; };  Note: This must be kept in sync with values #defined in dcap.h. More...;  ;  Public Types inherited from TFile; enum  { kStartBigFile = 2000000000; };  ; enum  EAsyncOpenStatus { kAOSNotAsync = -1; , kAOSFailure = 0; , kAOSInProgress = 1; , kAOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDCacheFile.html:67,Guid,Guide,67,doc/master/classTDCacheFile.html,https://root.cern,https://root.cern/doc/master/classTDCacheFile.html,1,['Guid'],['Guide']
Usability,". ROOT: TDCacheSystem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TDCacheSystem Class Reference. . Definition at line 79 of file TDCacheFile.h. Public Member Functions;  TDCacheSystem ();  Create helper class that allows directory access via dCache. ;  ;  ~TDCacheSystem () override;  ; Bool_t AccessPathName (const char *path, EAccessMode mode) override;  Returns FALSE if one can access a file using the specified access mode. ;  ; void FreeDirectory (void *dirp) override;  Close a directory. ;  ; const char * GetDirEntry (void *dirp) override;  Get a directory entry. ;  ; Int_t GetPathInfo (const char *path, FileStat_t &buf) override;  Get info about a file. ;  ; TClass * IsA () const override;  ; Int_t MakeDirectory (const char *name) override;  Create a directory. ;  ; void * OpenDirectory (const char *name) override;  Open a directory. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSystem;  TSystem (const char *name=""Generic"", const char *title=""Generic System"");  Create a new OS interface. ;  ; virtual ~TSystem ();  Delete the OS interface. ;  ; virtual void Abort (int code=0);  Abort the application. ;  ; virtual int AcceptConnection (int sock);  Accept a connection. ;  ; virtual void AddDynamicPath (const char *pathname);  Add a new directory to the dynamic path. ;  ; virtual void AddFileHandler (TFileHandler *fh);  Add a file handler to the list of system file handlers. ;  ; virtual void AddIncludePath (const char *includePath);  Add a directory to the already set include path. ;  ; virtual void AddLinkedLibs (const char *linkedLib);  Add linkedLib to already set linked libs. ;  ; virtual void AddSignalHandler (TSign",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDCacheSystem.html:69,Guid,Guide,69,doc/master/classTDCacheSystem.html,https://root.cern,https://root.cern/doc/master/classTDCacheSystem.html,1,['Guid'],['Guide']
Usability,". ROOT: TDNDData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; TDNDData Class ReferenceGUI » Low level GUI widgets. ; Drag and drop data container. ; Definition at line 64 of file TGDNDManager.h. Public Member Functions;  TDNDData (Atom_t dt=kNone, void *d=nullptr, Int_t len=0, Atom_t act=kNone);  ;  ~TDNDData () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDNDData.html:64,Guid,Guide,64,doc/master/classTDNDData.html,https://root.cern,https://root.cern/doc/master/classTDNDData.html,1,['Guid'],['Guide']
Usability,". ROOT: TDOMParser Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TDOMParser Class Reference. . Definition at line 20 of file TDOMParser.h. Public Member Functions;  TDOMParser ();  TDOMParser constructor. ;  ;  ~TDOMParser () override;  TDOMParser destructor, it calls ReleaseUnderlying(). ;  ; virtual TXMLDocument * GetXMLDocument () const;  Returns the TXMLDocument. ;  ; TClass * IsA () const override;  ; Int_t ParseBuffer (const char *buffer, Int_t len) override;  It parses a buffer, much like ParseFile(). ;  ; Int_t ParseFile (const char *filename) override;  Parse the XML file where filename is the XML file name. ;  ; void ReleaseUnderlying () override;  Release any existing document. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TXMLParser;  TXMLParser ();  Initializes parser variables. ;  ;  ~TXMLParser () override;  Cleanup. ;  ; Int_t GetParseCode () const;  ; const char * GetParseCodeMessage (Int_t parseCode) const;  Returns the parse code message. ;  ; Bool_t GetReplaceEntities () const;  ; Bool_t GetStopOnError () const;  ; Bool_t GetValidate () const;  ; const char * GetValidateError () const;  ; const char * GetValidateWarning () const;  ; TClass * IsA () const override;  ; void SetReplaceEntities (Bool_t val=kTRUE);  The parser will replace/expand entities. ;  ; void SetStopOnError (Bool_t stop=kTRUE);  Set parser stops in case of error: ;  ; void SetValidate (Bool_t val=kTRUE);  The parser will validate the xml file if val = true. ;  ; virtual void StopParser ();  Stops parsing. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDOMParser.html:66,Guid,Guide,66,doc/master/classTDOMParser.html,https://root.cern,https://root.cern/doc/master/classTDOMParser.html,1,['Guid'],['Guide']
Usability,". ROOT: TDSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TDSet Class ReferencePROOF » PROOF kernel Libraries. ; This class implements a data set to be used for PROOF processing. ; The TDSet defines the class of which objects will be processed, the directory in the file where the objects of that type can be found and the list of files to be processed. The files can be specified as logical file names (LFN's) or as physical file names (PFN's). In case of LFN's the resolution to PFN's will be done according to the currently active GRID interface. Examples: TDSet treeset(""TTree"", ""AOD""); treeset.Add(""lfn:/alien.cern.ch/alice/prod2002/file1""); ... treeset.AddFriend(friendset);; or; TDSet objset(""MyEvent"", ""*"", ""/events""); objset.Add(""root://cms.cern.ch/user/prod2002/hprod_1.root""); ... objset.Add(set2003);; Validity of file names will only be checked at processing time (typically on the PROOF master server), not at creation time. ; Definition at line 153 of file TDSet.h. Public Types; enum  EStatusBits { ;   kWriteV3 = (1ULL << ( 16 )); , kEmpty = (1ULL << ( 17 )); , kValidityChecked = (1ULL << ( 18 )); , kSomeInvalid = (1ULL << ( 19 )); , ;   kMultiDSet = (1ULL << ( 20 )); , kIsLocal = (1ULL << ( 21 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDSet.html:61,Guid,Guide,61,doc/master/classTDSet.html,https://root.cern,https://root.cern/doc/master/classTDSet.html,1,['Guid'],['Guide']
Usability,". ROOT: TDSetElement Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TDSetElement Class ReferencePROOF » PROOF kernel Libraries. ; Manages an element of a TDSet. ; See TDSet. ; Definition at line 66 of file TDSet.h. Public Types; enum  EStatusBits { ;   kHasBeenLookedUp = (1ULL << ( 15 )); , kWriteV3 = (1ULL << ( 16 )); , kEmpty = (1ULL << ( 17 )); , kCorrupted = (1ULL << ( 18 )); , ;   kNewRun = (1ULL << ( 19 )); , kNewPacket = (1ULL << ( 20 )). };  ; typedef std::list< std::pair< TDSetElement *, TString > > FriendsList_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TDSetElement ();  Default constructor. ;  ;  TDSetElement (const char *file, const char *objname=0, const char *dir=0, Long64_t first=0, Long64_t num=-1, const char *msd=0, const char *dataset=0);  Create a TDSet element. ;  ;  TDSetElement (const TDSetElement &elem);  copy constructor ;  ;  ~TDSetElement () override;  Clean up the element. ;  ; void AddAssocObj (TObject *assocobj);  Add an associated object to the list. ;  ; virtual void AddFriend (TDSetElement *friendElement, const char *alias);  Add friend TDSetElement to this set. The friend element will be copied to this",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDSetElement.html:68,Guid,Guide,68,doc/master/classTDSetElement.html,https://root.cern,https://root.cern/doc/master/classTDSetElement.html,1,['Guid'],['Guide']
Usability,". ROOT: TDSetProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TDSetProxy Class Reference. . Definition at line 29 of file TDSetProxy.h. Public Member Functions;  TDSetProxy ();  Constructor. ;  ;  TDSetProxy (const char *type, const char *objname=""*"", const char *dir=""/"");  Constructor. ;  ; TClass * IsA () const override;  ; TDSetElement * Next (Long64_t totalEntries=-1) override;  Get the next packet. ;  ; void Reset () override;  Reset this instance. ;  ; void SetProofServ (TProofServ *serv);  Set the reference TProofServ instance. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TDSet. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TDSet;  TDSet ();  iterator on fSrvMaps ;  ;  TDSet (const char *name, const char *objname=""*"", const char *dir=""/"", const char *type=0);  Create a named TDSet object. ;  ;  TDSet (const TChain &chain, Bool_t withfriends=kTRUE);  Create a named TDSet object from existing TChain 'chain'. ;  ;  ~TDSet () override;  Cleanup. ;  ; virtual Bool_t Add (const char *file, const char *objname=0, const char *dir=0, Long64_t first=0, Long64_t num=-1, const char *msd=0);  Add file to list of files to be analyzed. ;  ; virtual Bool_t Add (TCollection *fileinfo, const char *meta=0, Bool_t availableOnly=kFALSE, TCollection *badlist=0);  Add files passed as list of TFileInfo, TUrl or TObjString objects . ;  ; virtual Bool_t Add (TDSet *set);  Add specified data set to the this set. ;  ; virtual Bool_t Add (TFileInfo *fileinfo, const char *meta=0);  Add file described by 'fi' to list of files to be analyzed. ;  ; virtual void AddFriend (TDSet *friendset, const char *alias);  Add friend dataset to this set. ;  ; void AddInput (TObject *obj);  Add objects that might be needed during the process",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDSetProxy.html:66,Guid,Guide,66,doc/master/classTDSetProxy.html,https://root.cern,https://root.cern/doc/master/classTDSetProxy.html,1,['Guid'],['Guide']
Usability,". ROOT: TDataMember Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TDataMember Class Reference. ; All ROOT classes may have RTTI (run time type identification) support added. ; The data is stored in so called DICTIONARY (look at TDictionary). Information about a class is stored in TClass. This information may be obtained via the cling api - see class TCling. TClass has a list of TDataMember objects providing information about all data members of described class. TDataMember provides information about name of data member, its type, and comment field string. It also tries to find the TMethodCall objects responsible for getting/setting a value of it, and gives you pointers to these methods. This gives you a unique possibility to access protected and private (!) data members if only methods for doing that are defined.; These methods could either be specified in a comment field, or found out automatically by ROOT: here's an example: suppose you have a class definition: class MyClass{; private:; Float_t fX1;; ...; public:; void SetX1(Float_t x) {fX1 = x;};; Float_t GetX1() {return fX1;};; ...; }; Float_tfloat Float_tDefinition RtypesCore.h:57; xDouble_t x[n]Definition legend1.C:17; Look at the data member name and method names: a data member name has a prefix letter (f) and has a base name X1 . The methods for getting and setting this value have names which consist of string Get/Set and the same base name. This convention of naming data fields and methods which access them allows TDataMember find this methods by itself completely automatically. To make this description complete, one should know, that names that are automatically recognized may be also: for data fields: either fXXX or fIsXXX; and for getter function GetXXX()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataMember.html:67,Guid,Guide,67,doc/master/classTDataMember.html,https://root.cern,https://root.cern/doc/master/classTDataMember.html,1,['Guid'],['Guide']
Usability,". ROOT: TDataSetManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TDataSetManager Class Reference. . Definition at line 38 of file TDataSetManager.h. Public Types; enum  EDataSetStatusBits { ;   kCheckQuota = (1ULL << ( 15 )); , kAllowRegister = (1ULL << ( 16 )); , kAllowVerify = (1ULL << ( 17 )); , kTrustInfo = (1ULL << ( 18 )); , ;   kIsSandbox = (1ULL << ( 19 )); , kUseCache = (1ULL << ( 20 )); , kDoNotUseCache = (1ULL << ( 21 )). };  ; enum  EDataSetWorkOpts { ;   kDebug = 0x1; , kShowDefault = 0x2; , kPrint = 0x4; , kExport = 0x8; , ;   kQuotaUpdate = 0x10; , kSetDefaultTree = 0x20; , kForceScan = 0x40; , kNoHeaderPrint = 0x80; , ;   kReopen = 0x100; , kTouch = 0x200; , kMaxFiles = 0x400; , kReadShort = 0x800; , ;   kFileMustExist = 0x1000; , kNoAction = 0x2000; , kLocateOnly = 0x4000; , kStageOnly = 0x8000; , ;   kNoCacheUpdate = 0x10000; , kRefreshLs = 0x20000; , kList = 0x40000; , kAllFiles = 0x80000; , ;   kStagedFiles = 0x100000; , kNoStagedCheck = 0x200000. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TDataSetManager (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataSetManager.html:71,Guid,Guide,71,doc/master/classTDataSetManager.html,https://root.cern,https://root.cern/doc/master/classTDataSetManager.html,1,['Guid'],['Guide']
Usability,". ROOT: TDataSetManagerFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TDataSetManagerFile Class Reference. . Definition at line 30 of file TDataSetManagerFile.h. Public Member Functions;  TDataSetManagerFile ();  ;  TDataSetManagerFile (const char *group, const char *user, const char *ins);  Main constructor. ;  ;  TDataSetManagerFile (const char *ins);  Main constructor. ;  ;  ~TDataSetManagerFile () override;  ; Int_t ClearCache (const char *uri=0) override;  Clear cached information matching uri. ;  ; Bool_t ExistsDataSet (const char *uri) override;  Checks if the indicated dataset exits. ;  ; TFileCollection * GetDataSet (const char *group, const char *user, const char *dsName, UInt_t option=0, TMD5 **checksum=0);  Returns the dataset <dsName> of user <user> in group <group>. ;  ; TFileCollection * GetDataSet (const char *uri, const char *srv=0) override;  Utility function used in various methods for user dataset upload. ;  ; TMap * GetDataSets (const char *group, const char *user, const char *dsName=0, UInt_t option=0);  General purpose call to go through the existing datasets. ;  ; TMap * GetDataSets (const char *uri, UInt_t option=TDataSetManager::kExport) override;  Returns all datasets for the <group> and <user> specified by <uri>. ;  ; Long_t GetModTime (const char *uri);  Gets last dataset modification time. ;  ; const char * GetMSSUrl () const;  ; const char * GetStageOpts () const;  ; TClass * IsA () const override;  ; Int_t NotifyUpdate (const char *group, const char *user, const char *dspath, Long_t mtime, const char *checksum=0) override;  Save into the <datasetdir>/kDataSet_DataSetList file the name of the updated or created or modified dataset. ;  ; void ParseInitOpts (const char *opts) override;  Parse the inpu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataSetManagerFile.html:75,Guid,Guide,75,doc/master/classTDataSetManagerFile.html,https://root.cern,https://root.cern/doc/master/classTDataSetManagerFile.html,3,"['Clear', 'Guid']","['Clear', 'ClearCache', 'Guide']"
Usability,". ROOT: TDataType Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TDataType Class Reference. ; Basic data type descriptor (datatype information is obtained from CINT). ; This class describes the attributes of type definitions (typedef's). The TROOT class contains a list of all currently defined types (accessible via TROOT::GetListOfTypes()). ; Definition at line 44 of file TDataType.h. Public Member Functions;  TDataType (const char *typenam);  Constructor for basic data types, like ""char"", ""unsigned char"", etc. ;  ;  TDataType (TypedefInfo_t *info=nullptr);  Default TDataType ctor. ;  ; virtual ~TDataType ();  TDataType dtor deletes adopted CINT TypedefInfo object. ;  ; const char * AsString (void *buf) const;  Return string containing value in buffer formatted according to the basic data type. ;  ; const char * GetFullTypeName () const;  Get full type description of typedef, e,g.: ""class TDirectory*"". ;  ; Int_t GetType () const;  ; TString GetTypeName ();  Get basic type of typedef, e,g.: ""class TDirectory*"" -> ""TDirectory"". ;  ; TClass * IsA () const override;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; Int_t Size () const;  Get size of basic typedef'ed type. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TClass * IsA () const override;  ; TDictionary & operator= (const TDictionary &ot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataType.html:65,Guid,Guide,65,doc/master/classTDataType.html,https://root.cern,https://root.cern/doc/master/classTDataType.html,1,['Guid'],['Guide']
Usability,". ROOT: TDatabasePDG Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TDatabasePDG Class ReferenceMonte Carlo » EG. ; Particle database manager class. ; This manager creates a list of particles which by default is initialised from with the constants used by PYTHIA6 (plus some other particles added). See definition and the format of the default particle list in $ROOTSYS/etc/pdg_table.txt; There are 2 ways of redefining the name of the file containing the particle properties. One can define the name in .rootrc file:. Root.DatabasePDG: /home/sftnight/my_pdg_table.txt. One can use TDatabasePDG::ReadPDGTable method explicitly:; TDatabasePDG *pdg = new TDatabasePDG();; pdg->ReadPDGtable(filename). See TParticlePDG for the description of a static particle properties. See TParticle for the description of a dynamic particle particle.; The current default pdg_table file displays lifetime 0 for some unstable particles. ; Definition at line 21 of file TDatabasePDG.h. Public Member Functions;  TDatabasePDG ();  Create PDG database. ;  ;  ~TDatabasePDG () override;  Cleanup the PDG database. ;  ; virtual TParticlePDG * AddAntiParticle (const char *Name, Int_t PdgCode);  assuming particle has already been defined ;  ; virtual TParticlePDG * AddParticle (const char *Name, const char *Title, Double_t Mass, Bool_t Stable, Double_t DecayWidth, Double_t Charge, const char *ParticleClass, Int_t PdgCode, Int_t Anti=-1, Int_t TrackingCode=0);  Particle definition normal constructor. ;  ; void Browse (TBrowser *b) override;  browse data base ;  ; virtual Int_t ConvertGeant3ToPdg (Int_t Geant3Number) const;  Converts Geant3 particle codes to PDG convention. ;  ; virtual Int_t ConvertIsajetToPdg (Int_t isaNumber) const;  Converts the ISAJET Particle number into the PDG MC number. ;  ; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDatabasePDG.html:68,Guid,Guide,68,doc/master/classTDatabasePDG.html,https://root.cern,https://root.cern/doc/master/classTDatabasePDG.html,1,['Guid'],['Guide']
Usability,". ROOT: TDatime Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Friends |; List of all members ; TDatime Class ReferenceCore ROOT classes » Base ROOT classes. ; This class stores the date and time with a precision of one second in an unsigned 32 bit word (950130 124559). ; The date is stored with the origin being the 1st January 1995.; This class has no support for time zones. The time is assumed to be in the local time of the machine where the object was created. As a result, TDatime objects are not portable between machines operating in different time zones and unsuitable for storing the date/time of data taking events and the like. If absolute time is required, use TTimeStamp. ; Definition at line 37 of file TDatime.h. Public Member Functions;  TDatime ();  Create a TDatime and set it to the current time. ;  ;  TDatime (const char *sqlDateTime);  Expects as input a string in SQL date/time compatible format, like: yyyy-mm-dd hh:mm:ss. ;  ;  TDatime (const TDatime &d);  ;  TDatime (Int_t date, Int_t time);  Create a TDatime and set it to the specified date and time. ;  ;  TDatime (Int_t year, Int_t month, Int_t day, Int_t hour, Int_t min, Int_t sec);  Create a TDatime and set it to the specified year, month, day, time, hour, minute and second. ;  ;  TDatime (UInt_t tloc, Bool_t dosDate=kFALSE);  ; virtual ~TDatime ();  ; const char * AsSQLString () const;  Return the date & time in SQL compatible string format, like: 1997-01-15 20:16:28. ;  ; const char * AsString () const;  Return the date & time as a string (ctime() format). ;  ; const char * AsString (char *out) const;  Return the date & time as a string (ctime() format). ;  ; UInt_t Convert (Bool_t toGMT=kFALSE) const;  Convert fDatime from TDatime format to the standard time_t format. ;  ; void Copy (TDatime &datime) const;  Copy this to datime. ;  ; void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDatime.html:63,Guid,Guide,63,doc/master/classTDatime.html,https://root.cern,https://root.cern/doc/master/classTDatime.html,1,['Guid'],['Guide']
Usability,". ROOT: TDavixFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TDavixFile Class Reference. . Definition at line 70 of file TDavixFile.h. Public Member Functions;  TDavixFile (const char *url, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Open function for TDavixFile. ;  ;  ~TDavixFile ();  ; std::string DiscoverToken ();  ; void enableGridMode ();  Enable the grid mode The grid Mode configure automatically all grid-CA path, VOMS authentication and grid related extension for a grid analysis usage. ;  ; virtual TString GetNewUrl ();  ; virtual Long64_t GetSize () const;  Returns the current file size. ;  ; virtual TClass * IsA () const;  ; virtual Bool_t ReadBuffer (char *buf, Int_t len);  Read specified byte range from remote file via HTTP. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Set position from where to start reading. ;  ; void setCACheck (Bool_t check);  Enable or disable certificate authority check. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Bool_t WriteBuffer (const char *buffer, Int_t bufferLength);  Write a buffer to the file. ;  ;  Public Member Functions inherited from TFile;  TFile ();  File default Constructor. ;  ;  TFile (const char *fname, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompression",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDavixFile.html:66,Guid,Guide,66,doc/master/classTDavixFile.html,https://root.cern,https://root.cern/doc/master/classTDavixFile.html,1,['Guid'],['Guide']
Usability,". ROOT: TDavixSystem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TDavixSystem Class Reference. . Definition at line 36 of file TDavixSystem.h. Public Member Functions;  TDavixSystem ();  ;  TDavixSystem (const char *url);  ; virtual ~TDavixSystem ();  ; virtual Bool_t ConsistentWith (const char *path, void *dirptr);  Check consistency of this helper with the one required by 'path' or 'dirptr'. ;  ; virtual void FreeDirectory (void *dirp);  Free a directory. ;  ; virtual const char * GetDirEntry (void *dirp);  Get a directory entry. Returns 0 if no more entries. ;  ; virtual Int_t GetPathInfo (const char *path, FileStat_t &buf);  Get info about a file. ;  ; virtual TClass * IsA () const;  ; virtual Bool_t IsPathLocal (const char *path);  Returns TRUE if the url in 'path' points to the local file system. ;  ; virtual Int_t Locate (const char *path, TString &endurl);  ; virtual Int_t MakeDirectory (const char *dir);  Make a directory. ;  ; virtual void * OpenDirectory (const char *dir);  Open a directory. Returns 0 if directory does not exist. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual int Unlink (const char *path);  Unlink, i.e. ;  ;  Public Member Functions inherited from TSystem;  TSystem (const char *name=""Generic"", const char *title=""Generic System"");  Create a new OS interface. ;  ; virtual ~TSystem ();  Delete the OS interface. ;  ; virtual void Abort (int code=0);  Abort the application. ;  ; virtual int AcceptConnection (int sock);  Accept a connection. ;  ; virtual Bool_t AccessPathName (const char *path, EAccessMode mode=kFileExists);  Returns FALSE if one can access a file using the specified access mode. ;  ; virtual void AddDynamicPath (const char *pathname);  Add a ne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDavixSystem.html:68,Guid,Guide,68,doc/master/classTDavixSystem.html,https://root.cern,https://root.cern/doc/master/classTDavixSystem.html,1,['Guid'],['Guide']
Usability,". ROOT: TDecayChannel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TDecayChannel Class ReferenceMonte Carlo » EG. ; Description of the decay channel. ; Feb 16 2001 P.Murat ; Definition at line 24 of file TDecayChannel.h. Public Member Functions;  TDecayChannel ();  default constructor ;  ;  TDecayChannel (Int_t Number, Int_t MatrixElementCode, Double_t BranchingRatio, Int_t NDaughters, Int_t *DaughterPdgCode);  constructor ;  ;  ~TDecayChannel () override;  destructor ;  ; Double_t BranchingRatio ();  ; Int_t DaughterPdgCode (Int_t i);  ; TClass * IsA () const override;  ; Int_t MatrixElementCode ();  ; Int_t NDaughters ();  ; Int_t Number ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecayChannel.html:69,Guid,Guide,69,doc/master/classTDecayChannel.html,https://root.cern,https://root.cern/doc/master/classTDecayChannel.html,1,['Guid'],['Guide']
Usability,". ROOT: TDecompBK Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TDecompBK Class ReferenceMath » Matrix Linear Algebra. ; The Bunch-Kaufman diagonal pivoting method decomposes a real symmetric matrix A using. ; A = U*D*U^T; where U is a product of permutation and unit upper triangular matrices, U^T is the transpose of U, and D is symmetric and block diagonal with 1-by-1 and 2-by-2 diagonal blocks.; U = P(n-1)*U(n-1)* ... P(k)U(k) ..., i.e., U is a product of terms P(k)*U(k), where k decreases from n-1 to 0 in steps of 1 or 2, and D is a block diagonal matrix with 1-by-1 and 2-by-2 diagonal blocks D(k). P(k) is a permutation matrix as defined by IPIV(k), and U(k) is a unit upper triangular matrix, such that if the diagonal block D(k) is of order s (s = 1 or 2), then; ( I v 0 ) k-s; U(k) = ( 0 I 0 ) s; ( 0 0 I ) n-k; k-s s n-k; nconst Int_t nDefinition legend1.C:16; I#define I(x, y, z); v@ vDefinition rootcling_impl.cxx:3699; If s = 1, D(k) overwrites A(k,k), and v overwrites A(0:k-1,k). If s = 2, the upper triangle of D(k) overwrites A(k-1,k-1), A(k-1,k), and A(k,k), and v overwrites A(0:k-2,k-1:k).; fU contains on entry the symmetric matrix A of which only the upper triangular part is referenced . On exit fU contains the block diagonal matrix D and the multipliers used to obtain the factor U, see above .; fIpiv if dimension n contains details of the interchanges and the the block structure of D . If (fIPiv(k) > 0, then rows and columns k and fIPiv(k) were interchanged and D(k,k) is a 1-by-1 diagonal block. If IPiv(k) = fIPiv(k-1) < 0, rows and columns k-1 and -IPiv(k) were interchanged and D(k-1:k,k-1:k) is a 2-by-2 diagonal block. ; Definition at line 26 of file TDecompBK.h. Public Member Functions;  TDecompBK ();  Default constructor. ;  ;  TDecompBK (const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompBK.html:65,Guid,Guide,65,doc/master/classTDecompBK.html,https://root.cern,https://root.cern/doc/master/classTDecompBK.html,1,['Guid'],['Guide']
Usability,". ROOT: TDecompBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; TDecompBase Class ReferenceabstractMath » Matrix Linear Algebra. ; Decomposition Base class. ; This class forms the base for all the decompositions methods in the linear algebra package . It or its derived classes have installed the methods to solve equations,invert matrices and calculate determinants while monitoring the accuracy.; Each derived class has always the following methods available:; Condition() :; In an iterative scheme the condition number for matrix inversion is calculated . This number is of interest for estimating the accuracy of x in the equation Ax=b For example: A is a (10x10) Hilbert matrix which looks deceivingly innocent and simple, A(i,j) = 1/(i+j+1) b(i) = Sum_j A(i,j), so a sum of a row in A; the solution is x(i) = 1. i=0,.,9; However, TMatrixD m....; TVectorD b.....; TDecompLU lu(m); lu.SetTol(1.0e-12); lu.Solve(b); b.Print(); b#define b(i)Definition RSha256.hxx:100; TMatrixT< Double_t >; TVectorT< Double_t >; mTMarker mDefinition textangle.C:8; gives,; {1.000,1.000,1.000,1.000,0.998,1.000,0.993,1.001,0.996,1.000}; Looking at the condition number, this is in line with expected the accuracy . The condition number is 3.957e+12 . As a simple rule of thumb, a condition number of 1.0e+n means that you lose up to n digits of accuracy in a solution . Since doubles are stored with 15 digits, we can expect the accuracy to be as small as 3 digits .; Det(Double_t &d1,Double_t &d2); The determinant is d1*TMath::Power(2.,d2) Expressing the determinant this way makes under/over-flow very unlikely .; Decompose(); Here the actually decomposition is performed . One can change the matrix A after the decomposition constructor has b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompBase.html:67,Guid,Guide,67,doc/master/classTDecompBase.html,https://root.cern,https://root.cern/doc/master/classTDecompBase.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TDecompChol Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TDecompChol Class ReferenceMath » Matrix Linear Algebra. ; Cholesky Decomposition class. ; Decompose a symmetric, positive definite matrix A = U^T * U; where U is a upper triangular matrix; The decomposition fails if a diagonal element of fU is <= 0, the matrix is not positive negative . The matrix fU is made invalid .; fU has the same index range as A . ; Definition at line 24 of file TDecompChol.h. Public Member Functions;  TDecompChol ();  ;  TDecompChol (const TDecompChol &another);  Copy constructor. ;  ;  TDecompChol (const TMatrixD &a, Double_t tol=0.0);  Constructor for general matrix A . Matrix should be symmetric positive definite. ;  ;  TDecompChol (const TMatrixDSym &a, Double_t tol=0.0);  Constructor for symmetric matrix A . Matrix should be positive definite. ;  ;  TDecompChol (Int_t nrows);  Constructor for (nrows x nrows) matrix. ;  ;  TDecompChol (Int_t row_lwb, Int_t row_upb);  Constructor for ([row_lwb..row_upb] x [row_lwb..row_upb]) matrix. ;  ;  ~TDecompChol () override;  ; Bool_t Decompose () override;  Matrix A is decomposed in component U so that A = U^T * U If the decomposition succeeds, bit kDecomposed is set , otherwise kSingular. ;  ; void Det (Double_t &d1, Double_t &d2) override;  Matrix determinant det = d1*TMath::Power(2.,d2) is square of diagProd of cholesky factor. ;  ; const TMatrixDSym GetMatrix ();  Reconstruct the original matrix using the decomposition parts. ;  ; Int_t GetNcols () const override;  ; Int_t GetNrows () const override;  ; const TMatrixD & GetU () const;  ; TMatrixDSym Invert ();  ; TMatrixDSym Invert (Bool_t &status);  For a symmetric matrix A(m,m), its inverse A_inv(m,m) is returned . ;  ; Bool_t Invert (TMatrixDSym &inv);  For a symmetric ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompChol.html:67,Guid,Guide,67,doc/master/classTDecompChol.html,https://root.cern,https://root.cern/doc/master/classTDecompChol.html,1,['Guid'],['Guide']
Usability,". ROOT: TDecompLU Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; TDecompLU Class ReferenceMath » Matrix Linear Algebra. ; LU Decomposition class. ; Decompose a general n x n matrix A into P A = L U; where P is a permutation matrix, L is unit lower triangular and U is upper triangular. L is stored in the strict lower triangular part of the matrix fLU. The diagonal elements of L are unity and are not stored. U is stored in the diagonal and upper triangular part of the matrix fU. P is stored in the index array fIndex : j = fIndex[i] indicates that row j and row i should be swapped .; fSign gives the sign of the permutation, (-1)^n, where n is the number of interchanges in the permutation.; fLU has the same indexing range as matrix A .; The decomposition fails if a diagonal element of abs(fLU) is == 0, The matrix fUL is made invalid . ; Definition at line 23 of file TDecompLU.h. Public Member Functions;  TDecompLU ();  Default constructor. ;  ;  TDecompLU (const TDecompLU &another);  Copy constructor. ;  ;  TDecompLU (const TMatrixD &m, Double_t tol=0.0, Int_t implicit=1);  Constructor for matrix a. ;  ;  TDecompLU (Int_t nrows);  Constructor for (nrows x nrows) matrix. ;  ;  TDecompLU (Int_t row_lwb, Int_t row_upb);  Constructor for ([row_lwb..row_upb] x [row_lwb..row_upb]) matrix. ;  ;  ~TDecompLU () override;  ; Bool_t Decompose () override;  Matrix A is decomposed in components U and L so that P * A = U * L If the decomposition succeeds, bit kDecomposed is set , otherwise kSingular. ;  ; void Det (Double_t &d1, Double_t &d2) override;  Calculate determinant det = d1*TMath::Power(2.,d2) ;  ; const TMatrixD & GetLU ();  ; const TMatrixD GetMatrix ();  Reconstruct the original matrix using the decomposition parts. ;  ; Int_t G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompLU.html:65,Guid,Guide,65,doc/master/classTDecompLU.html,https://root.cern,https://root.cern/doc/master/classTDecompLU.html,1,['Guid'],['Guide']
Usability,". ROOT: TDecompQRH Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; TDecompQRH Class ReferenceMath » Matrix Linear Algebra. ; QR Decomposition class. ; Decompose a general (m x n) matrix A into A = fQ' fR H where; fQ : (m x n) - internal Q' matrix (not orthoginal); fR : (n x n) - upper triangular matrix; H : HouseHolder matrix which is stored through; fUp: (n) - vector with Householder up's; fW : (n) - vector with Householder beta's; TDecompQRH::fQTMatrixD fQDefinition TDecompQRH.h:30; TDecompQRH::fWTVectorD fWDefinition TDecompQRH.h:33; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; mTMarker mDefinition textangle.C:8; If row/column index of A starts at (rowLwb,colLwb) then the decomposed matrices start from : fQ' : (rowLwb,0); fR : (0,colLwb); and the decomposed vectors start from :; fUp : (0); fW : (0); In order to get the QR dcomposition of A (i.e. A = QR ) The orthoginal matrix Q needs to be computed from the internal Q' and the up's and beta's vector defining the Householder transformation; The orthogonal Q matrix is returned to the user by calling the function TDecompQRH::GetOrthogonalMatrix(); Errors arise from formation of reflectors i.e. singularity . Note it attempts to handle the cases where the nRow <= nCol . ; Definition at line 25 of file TDecompQRH.h. Public Types; enum  { kWorkMax = 100; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  ES",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompQRH.html:66,Guid,Guide,66,doc/master/classTDecompQRH.html,https://root.cern,https://root.cern/doc/master/classTDecompQRH.html,1,['Guid'],['Guide']
Usability,". ROOT: TDecompSVD Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; TDecompSVD Class ReferenceMath » Matrix Linear Algebra. ; Single Value Decomposition class. ; For an (m x n) matrix A with m >= n, the singular value decomposition is an (m x m) orthogonal matrix fU, an (m x n) diagonal matrix fS, and an (n x n) orthogonal matrix fV so that A = U*S*V'.; If the row/column index of A starts at (rowLwb,colLwb) then the decomposed matrices/vectors start at : fU : (rowLwb,colLwb); fV : (colLwb,colLwb); fSig : (colLwb); TDecompSVD::fSigTVectorD fSigDefinition TDecompSVD.h:30; TDecompSVD::fVTMatrixD fVDefinition TDecompSVD.h:29; TDecompSVD::fUTMatrixD fUDefinition TDecompSVD.h:28; The diagonal matrix fS is stored in the singular values vector fSig . The singular values, fSig[k] = S[k][k], are ordered so that fSig[0] >= fSig[1] >= ... >= fSig[n-1].; The singular value decomposition always exists, so the decomposition will (as long as m >=n) never fail. If m < n, the user should add sufficient zero rows to A , so that m == n; Here fTol is used to set the threshold on the minimum allowed value of the singular values: min_singular = fTol*max(fSig[i]) ; Definition at line 23 of file TDecompSVD.h. Public Types; enum  { kWorkMax = 100; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 ));",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompSVD.html:66,Guid,Guide,66,doc/master/classTDecompSVD.html,https://root.cern,https://root.cern/doc/master/classTDecompSVD.html,1,['Guid'],['Guide']
Usability,". ROOT: TDecompSparse Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; TDecompSparse Class ReferenceMath » Matrix Linear Algebra. ; Sparse Symmetric Decomposition class. ; Solve a sparse symmetric system of linear equations using a method based on Gaussian elimination as discussed in Duff and Reid, ACM Trans. Math. Software 9 (1983), 302-325. ; Definition at line 43 of file TDecompSparse.h. Public Member Functions;  TDecompSparse ();  Default constructor. ;  ;  TDecompSparse (const TDecompSparse &another);  Copy constructor. ;  ;  TDecompSparse (const TMatrixDSparse &a, Int_t verbose);  Constructor for matrix A . ;  ;  TDecompSparse (Int_t nRows, Int_t nr_nonZeros, Int_t verbose);  Constructor for a matrix with nrows and unspecified number of columns . ;  ;  TDecompSparse (Int_t row_lwb, Int_t row_upb, Int_t nr_nonZeros, Int_t verbose);  Constructor for a matrix with row range, [row_lwb..row_upb] and unspecified column range . ;  ;  ~TDecompSparse () override;  ; Bool_t Decompose () override;  Decomposition engine . ;  ; void Det (Double_t &, Double_t &) override;  Matrix determinant det = d1*TMath::Power(2.,d2) ;  ; Int_t GetNcols () const override;  ; Int_t GetNrows () const override;  ; TClass * IsA () const override;  ; TDecompSparse & operator= (const TDecompSparse &source);  Assignment operator. ;  ; void Print (Option_t *opt="""") const override;  Print class members. ;  ; virtual void SetMatrix (const TMatrixDSparse &a);  Set matrix to be decomposed . ;  ; void SetVerbose (Int_t v);  ; TVectorD Solve (const TVectorD &b, Bool_t &ok) override;  ; Bool_t Solve (TMatrixDColumn &) override;  ; Bool_t Solve (TVectorD &b) override;  Solve Ax=b . Solution returned in b. ;  ; void Streamer (TBuffer &) override;  Stream an object",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompSparse.html:69,Guid,Guide,69,doc/master/classTDecompSparse.html,https://root.cern,https://root.cern/doc/master/classTDecompSparse.html,1,['Guid'],['Guide']
Usability,". ROOT: TDelCharCom Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TDelCharCom Class Reference. . Definition at line 111 of file TGTextEdit.cxx. Public Member Functions;  TDelCharCom (TGTextEdit *te);  ; Bool_t Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ;  Public Member Functions inherited from TGTextEditCommand;  TGTextEditCommand (TGTextEdit *te);  ; void SetPos (TGLongPosition pos);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDelCharCom.html:67,Guid,Guide,67,doc/master/classTDelCharCom.html,https://root.cern,https://root.cern/doc/master/classTDelCharCom.html,1,['Guid'],['Guide']
Usability,". ROOT: TDelTextCom Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TDelTextCom Class Reference. . Definition at line 184 of file TGTextEdit.cxx. Public Member Functions;  TDelTextCom (const TDelTextCom &dtc);  ;  TDelTextCom (TGTextEdit *te, TGText *txt);  ;  ~TDelTextCom () override;  ; Bool_t Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; TDelTextCom & operator= (const TDelTextCom &dtc);  ; void SetBreakLine (Bool_t on);  ; void SetEndPos (TGLongPosition end);  ;  Public Member Functions inherited from TGTextEditCommand;  TGTextEditCommand (TGTextEdit *te);  ; void SetPos (TGLongPosition pos);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDelTextCom.html:67,Guid,Guide,67,doc/master/classTDelTextCom.html,https://root.cern,https://root.cern/doc/master/classTDelTextCom.html,1,['Guid'],['Guide']
Usability,". ROOT: TDialogCanvas Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TDialogCanvas Class ReferenceGraphics » 2D Graphics » Graphics pad. ; A canvas specialized to set attributes. ; It contains, in general, TGroupButton objects. When the APPLY button is executed, the actions corresponding to the active buttons are executed via the Interpreter.; See examples in TAttLineCanvas, TAttFillCanvas, TAttTextCanvas, TAttMarkerCanvas ; Definition at line 19 of file TDialogCanvas.h. Public Member Functions;  TDialogCanvas ();  DialogCanvas default constructor. ;  ;  TDialogCanvas (const char *name, const char *title, Int_t wtopx, Int_t wtopy, UInt_t ww, UInt_t wh);  DialogCanvas constructor. ;  ;  TDialogCanvas (const char *name, const char *title, Int_t ww, Int_t wh);  DialogCanvas constructor. ;  ;  ~TDialogCanvas () override;  DialogCanvas default destructor. ;  ; virtual void Apply (const char *action="""");  Called when the APPLY button is executed. ;  ; virtual void BuildStandardButtons ();  Create APPLY, gStyle and CLOSE buttons. ;  ; void Divide (Int_t nx=1, Int_t ny=1, Float_t xmargin=0.01, Float_t ymargin=0.01, Int_t color=0) override;  ; TObject * GetRefObject () const;  ; TPad * GetRefPad () const;  ; TClass * IsA () const override;  ; void Range (Double_t x1, Double_t y1, Double_t x2, Double_t y2) override;  Set world coordinate system for the pad. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from a pad and its sub-pads. ;  ; void SetBorderMode (Short_t bordermode) override;  ; void SetGrid (Int_t valuex=1, Int_t valuey=1) override;  ; void SetLogx (Int_t value=1) override;  ; void SetLogy (Int_t value=1) override;  ; void SetName (const char *name) override;  Set canvas name. ;  ; virtual void SetRefObject (TObject *obj);  ; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDialogCanvas.html:69,Guid,Guide,69,doc/master/classTDialogCanvas.html,https://root.cern,https://root.cern/doc/master/classTDialogCanvas.html,1,['Guid'],['Guide']
Usability,". ROOT: TDiamond Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TDiamond Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Draw a Diamond. ; A diamond is defined by:. Its central left coordinates x1,y1; Its top central coordinates x2,y2. A diamond has line attributes (see TAttLine) and fill area attributes (see TAttFill).; Like for the class TPaveText, a TDiamond may have one or more line(s) of text inside.; ; void diamond(){; auto d = new TDiamond(.05,.1,.95,.8);; d->AddText(""A TDiamond can contain any text."");; d->Draw();; }; d#define d(i)Definition RSha256.hxx:102; TDiamond::TDiamondTDiamond()Diamond default constructor.Definition TDiamond.cxx:46; . Definition at line 17 of file TDiamond.h. Public Member Functions;  TDiamond ();  Diamond default constructor. ;  ;  TDiamond (const TDiamond &diamond);  Copy constructor. ;  ;  TDiamond (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Diamond standard constructor. ;  ;  ~TDiamond () override;  Diamond destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a diamond. ;  ; void Draw (Option_t *option="""") override;  Draw this diamond with its current attributes. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; TClass * IsA () const override;  ; Int_t IsInside (Double_t x, Double_t y) const override;  Return 1 if the point (x,y) is inside the polygon defined by the diamond 0 otherwise. ;  ; void Paint (Option_t *option="""") override;  Paint this diamond with its current attributes. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TBox. ;  ; void StreamerNVirtual (TBuffer &ClassDef_S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDiamond.html:64,Guid,Guide,64,doc/master/classTDiamond.html,https://root.cern,https://root.cern/doc/master/classTDiamond.html,1,['Guid'],['Guide']
Usability,". ROOT: TDictAttributeMap Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TDictAttributeMap Class Reference. ; The ROOT object has a list of properties which are stored and retrieved using TDictAttributeMap. ; TDictAttributeMap maps the property keys of the object to their values. ; Definition at line 29 of file TDictAttributeMap.h. Public Member Functions;  TDictAttributeMap ();  Default constructor. ;  ; virtual ~TDictAttributeMap ();  Default destructor. ;  ; void AddProperty (const char *key, const char *value);  Add a property with a String value to the TDictAttributeMap. ;  ; void Clear (Option_t *option="""") override;  Deletes all the properties of the class. ;  ; const char * GetPropertyAsString (const char *key) const;  Access the value of a String property using the key. ;  ; Int_t GetPropertySize () const;  ; Bool_t HasKey (const char *key) const;  ; TClass * IsA () const override;  ; Bool_t RemoveProperty (const char *key);  ; TString RemovePropertyString (const char *key);  Remove a String property from the attribute map specified by the key. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDictAttributeMap.html:73,Guid,Guide,73,doc/master/classTDictAttributeMap.html,https://root.cern,https://root.cern/doc/master/classTDictAttributeMap.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TDictionary Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TDictionary Class Referenceabstract. ; This class defines an abstract interface that must be implemented by all classes that contain dictionary information. ; The dictionary is defined by the following classes: TDataType (typedef definitions); TGlobal (global variables); TGlobalFunc (global functions); TClass (classes); TBaseClass (base classes); TDataMember (class datamembers); TMethod (class methods); TMethodArg (method arguments); TBaseClassEach class (see TClass) has a linked list of its base class(es).Definition TBaseClass.h:33; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TDataMemberAll ROOT classes may have RTTI (run time type identification) support added.Definition TDataMember.h:31; TDataTypeBasic data type descriptor (datatype information is obtained from CINT).Definition TDataType.h:44; TGlobalGlobal variables class (global variables are obtained from CINT).Definition TGlobal.h:28; TMethodArgEach ROOT method (see TMethod) has a linked list of its arguments.Definition TMethodArg.h:36; TMethodEach ROOT class (see TClass) has a linked list of methods.Definition TMethod.h:38; All the above classes implement the TDictionary abstract interface. Note: the indentation shows aggregation not inheritance. TMethodCall (method call environment); TMethodCallMethod or function calling interface.Definition TMethodCall.h:37; . Definition at line 168 of file TDictionary.h. Public Types; typedef const void * DeclId_t;  ; enum class  EMemberSelection { kNoUsingDecls; , kOnlyUsingDecls; , kAlsoUsingDecls; };  Kinds of members to include in lists. More...;  ; enum  ESTLType { ;   kNone = ROOT::kNotSTL; , kVector = ROOT::kSTL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDictionary.html:67,Guid,Guide,67,doc/master/classTDictionary.html,https://root.cern,https://root.cern/doc/master/classTDictionary.html,1,['Guid'],['Guide']
Usability,". ROOT: TDimensionInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TDimensionInfo Class Reference. ; A small helper class to help in keeping track of the array dimensions encountered in the analysis of the expression. ; Definition at line 111 of file TTreeFormula.cxx. Public Member Functions;  TDimensionInfo (Int_t code, Int_t oper, Int_t size, TFormLeafInfoMultiVarDim *multiDim);  ;  ~TDimensionInfo () override;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDimensionInfo.html:70,Guid,Guide,70,doc/master/classTDimensionInfo.html,https://root.cern,https://root.cern/doc/master/classTDimensionInfo.html,1,['Guid'],['Guide']
Usability,". ROOT: TDirectory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Friends |; List of all members ; TDirectory Class ReferenceCore ROOT classes » Base ROOT classes. ; Describe directory structure in memory. . PyROOT; It is possible to retrieve the content of a TDirectory object just like getting items from a Python dictionary. Moreover, once a subdirectory or object is accessed for the first time, it is cached for later use. For example, assuming d is a TDirectory instance: # Access a subdirectory; d[""subdir""]; ; # We can go further down in the hierarchy of directories; d[""subdir""][""subsubdir""]; ; # Access an object (e.g. a histogram) in the directory; d[""obj""]; ; # ... or in a subdirectory; d[""subdir""][""obj""]; ; # Wrong key: raises KeyError; d[""wrongAttr""]; Furthermore, TDirectory implements a WriteObject Python method which relies on TDirectory::WriteObjectAny. This method is a no-op for TDirectory objects, but it is useful for objects of TDirectory subclasses such as TDirectoryFile and TFile, which inherit it. Please refer to the documentation of those classes for more information. . Definition at line 45 of file TDirectory.h. Classes; class  TContext;  TDirectory::TContext keeps track and restore the current directory. More...;  . Public Member Functions;  TDirectory ();  Directory default constructor. ;  ;  TDirectory (const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr);  Create a new Directory. ;  ; virtual ~TDirectory ();  Destructor. ;  ; virtual void Add (TObject *obj, Bool_t replace=kFALSE);  ; virtual void Append (TObject *obj, Bool_t replace=kFALSE);  Append object to this directory. ;  ; virtual Int_t AppendKey (TKey *);  ; void Browse (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDirectory.html:66,Guid,Guide,66,doc/master/classTDirectory.html,https://root.cern,https://root.cern/doc/master/classTDirectory.html,1,['Guid'],['Guide']
Usability,". ROOT: TDirectory Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Friends |; List of all members ; TDirectory Class ReferenceCore ROOT classes » Base ROOT classes. ; Describe directory structure in memory. . PyROOT; It is possible to retrieve the content of a TDirectory object just like getting items from a Python dictionary. Moreover, once a subdirectory or object is accessed for the first time, it is cached for later use. For example, assuming d is a TDirectory instance: # Access a subdirectory; d[""subdir""]; ; # We can go further down in the hierarchy of directories; d[""subdir""][""subsubdir""]; ; # Access an object (e.g. a histogram) in the directory; d[""obj""]; ; # ... or in a subdirectory; d[""subdir""][""obj""]; ; # Wrong key: raises KeyError; d[""wrongAttr""]; Furthermore, TDirectory implements a WriteObject Python method which relies on TDirectory::WriteObjectAny. This method is a no-op for TDirectory objects, but it is useful for objects of TDirectory subclasses such as TDirectoryFile and TFile, which inherit it. Please refer to the documentation of those classes for more information. . Definition at line 45 of file TDirectory.h. Classes; class  TContext;  TDirectory::TContext keeps track and restore the current directory. More...;  . Public Member Functions;  TDirectory ();  Directory default constructor. ;  ;  TDirectory (const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr);  Create a new Directory. ;  ; virtual ~TDirectory ();  Destructor. ;  ; virtual void Add (TObject *obj, Bool_t replace=kFALSE);  ; virtual void Append (TObject *obj, Bool_t replace=kFALSE);  Append object to this directory. ;  ; virtual Int_t AppendKey (TKey *);  ; void Browse (T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTDirectory.html:65,Guid,Guide,65,doc/v632/classTDirectory.html,https://root.cern,https://root.cern/doc/v632/classTDirectory.html,1,['Guid'],['Guide']
Usability,". ROOT: TDirectory::TContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TDirectory::TContext Class ReferenceCore ROOT classes » Base ROOT classes. ; TDirectory::TContext keeps track and restore the current directory. ; With this tool C++ exceptions will be guaranteed to properly restore the current directory pointer.; For example code like:; TDirectory *sav = gDirectory;; mydirectory->cd();; if (...) {; ....; sav->cd();; return;; } else if (...) {; ....; sav->cd();; return;; }; sav->cd;; return;; gDirectory#define gDirectoryDefinition TDirectory.h:384; TDirectoryDescribe directory structure in memory.Definition TDirectory.h:45; TDirectory::cdvirtual Bool_t cd()Change current directory to ""this"" directory.Definition TDirectory.cxx:538; can be replaced with the simpler and exception safe:; TDirectory::TContext context(gDirectory, mydirectory);; if (...) {; ....; return;; } else if (...) {; ....; return;; }; return;; TDirectory::TContextTDirectory::TContext keeps track and restore the current directory.Definition TDirectory.h:89. PyROOT; The functionality offered by TContext can be used in PyROOT with a context manager. Here are a few examples: import ROOT; from ROOT import TDirectory; ; with TDirectory.TContext():; # Open some file here; file = ROOT.TFile(...); # Retrieve contents from the file; histo = file.Get(""myhisto""); ; # After the 'with' statement, the current directory is restored to ROOT.gROOT; ; import ROOT; from ROOT import TDirectory; ; file1 = ROOT.TFile(""file1.root"", ""recreate""); #...; file2 = ROOT.TFile(""file2.root"", ""recreate""); #...; file3 = ROOT.TFile(""file3.root"", ""recreate""); ; # Before the 'with' statement, the current directory is file3 (the last file opened); with TDirectory.TContext(file1):; # Inside the statement, the current directory is file1; histo = ROOT.T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDirectory_1_1TContext.html:76,Guid,Guide,76,doc/master/classTDirectory_1_1TContext.html,https://root.cern,https://root.cern/doc/master/classTDirectory_1_1TContext.html,2,"['Guid', 'simpl']","['Guide', 'simpler']"
Usability,". ROOT: TDirectoryFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TDirectoryFile Class ReferenceInput/Output Library. ; A ROOT file is structured in Directories (like a file system). ; Each Directory has a list of Keys (see TKeys) and a list of objects in memory. A Key is a small object that describes the type and location of a persistent object in a file. The persistent object may be a directory. The structure of a file is shown in TFile::TFile. PyROOT; In the same way as for TDirectory, it is possible to inspect the content of a TDirectoryFile object from Python as if the subdirectories and objects it contains were its attributes. For more information, please refer to the TDirectory documentation.; In addition to the attribute syntax, one can inspect a TDirectoryFile in Python via the Get method. In this case, the subdirectory/object name is specified as a string: # Access a subdirectory; d.Get('subdir'); ; # We can go further down in the hierarchy of directories; d.Get('subdir/subsubdir'); ; # Access an object (e.g. a histogram) in the directory; d.Get('obj'); ; # ... or in a subdirectory; d.Get('subdir/obj'); ; # Wrong attribute: returns null; x = d.Get('wrongAttr') # x points to null; Furthermore, TDirectoryFile inherits a WriteObject Python method from TDirectory. Such method allows to write an object into a TDirectoryFile with the following syntax: # Write object obj with identifier 'keyName'; d.WriteObject(obj, 'keyName'). Definition at line 32 of file TDirectoryFile.h. Public Types; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDirectoryFile.html:70,Guid,Guide,70,doc/master/classTDirectoryFile.html,https://root.cern,https://root.cern/doc/master/classTDirectoryFile.html,1,['Guid'],['Guide']
Usability,". ROOT: TDispatchTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TDispatchTimer Class Reference. . Definition at line 112 of file TProofPlayer.cxx. Public Member Functions;  TDispatchTimer (TProofPlayer *p);  ; Bool_t Notify () override;  Handle expiration of the timer associated with dispatching pending events while processing. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDispatchTimer.html:70,Guid,Guide,70,doc/master/classTDispatchTimer.html,https://root.cern,https://root.cern/doc/master/classTDispatchTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: TDocDirective Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TDocDirective Class Referenceabstract. . Definition at line 34 of file TDocDirective.h. Public Member Functions; virtual void AddLine (const TSubString &line)=0;  ; virtual void DeleteOutput () const;  ; virtual const char * GetEndTag () const =0;  ; virtual Bool_t GetResult (TString &result)=0;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocDirective.html:69,Guid,Guide,69,doc/master/classTDocDirective.html,https://root.cern,https://root.cern/doc/master/classTDocDirective.html,1,['Guid'],['Guide']
Usability,". ROOT: TDocHtmlDirective Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TDocHtmlDirective Class Reference. . Definition at line 80 of file TDocDirective.h. Public Member Functions;  TDocHtmlDirective ();  ;  ~TDocHtmlDirective () override;  ; void AddLine (const TSubString &line) override;  Add a line of HTML. ;  ; const char * GetEndTag () const override;  ; Bool_t GetResult (TString &result) override;  Set result to the HTML code that was passed in via AddLine(). ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TDocDirective; virtual void DeleteOutput () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocHtmlDirective.html:73,Guid,Guide,73,doc/master/classTDocHtmlDirective.html,https://root.cern,https://root.cern/doc/master/classTDocHtmlDirective.html,1,['Guid'],['Guide']
Usability,". ROOT: TDocLatexDirective Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TDocLatexDirective Class Reference. . Definition at line 122 of file TDocDirective.h. Public Member Functions;  TDocLatexDirective ();  ;  ~TDocLatexDirective () override;  Destructor. ;  ; void AddLine (const TSubString &line) override;  Add a latex line. ;  ; void DeleteOutput () const override;  ; const char * GetAlignment () const;  ; const char * GetEndTag () const override;  ; Int_t GetFontSize () const;  ; TList * GetListOfLines () const;  Get the list of lines as TObjStrings. ;  ; Bool_t GetResult (TString &result) override;  convert fLatex to a gif by creating a TLatex, drawing it on a temporary canvas, and saving that to a filename in the output directory. ;  ; const char * GetSeparator () const;  ; TClass * IsA () const override;  ; Bool_t SeparatorIsRegexp () const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TDocDirective; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocLatexDirective.html:74,Guid,Guide,74,doc/master/classTDocLatexDirective.html,https://root.cern,https://root.cern/doc/master/classTDocLatexDirective.html,1,['Guid'],['Guide']
Usability,". ROOT: TDocMacroDirective Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TDocMacroDirective Class Reference. . Definition at line 95 of file TDocDirective.h. Public Member Functions;  TDocMacroDirective ();  ;  ~TDocMacroDirective () override;  Destructor. ;  ; void AddLine (const TSubString &line) override;  Add a macro line. ;  ; void DeleteOutput () const override;  ; const char * GetEndTag () const override;  ; Bool_t GetResult (TString &result) override;  Get the result (i.e. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TDocDirective; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocMacroDirective.html:74,Guid,Guide,74,doc/master/classTDocMacroDirective.html,https://root.cern,https://root.cern/doc/master/classTDocMacroDirective.html,1,['Guid'],['Guide']
Usability,". ROOT: TDocMethodWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; TDocMethodWrapper Class Referenceabstract. . Definition at line 37 of file TDocParser.h. Public Types; enum  { kDocumented = 14; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions; virtual TMethod * GetMethod () const =0;  ; virtual Int_t GetOverloadIdx () const =0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocMethodWrapper.html:73,Guid,Guide,73,doc/master/classTDocMethodWrapper.html,https://root.cern,https://root.cern/doc/master/classTDocMethodWrapper.html,1,['Guid'],['Guide']
Usability,". ROOT: TDocOutput Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; List of all members ; TDocOutput Class Reference. . Definition at line 37 of file TDocOutput.h. Public Types; enum  EFileType { kSource; , kInclude; , kTree; , kDoc; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TDocOutput (THtml &html);  ;  ~TDocOutput () override;  ; virtual void AdjustSourcePath (TString &line, const char *relpath=""../"");  adjust the path of links for source files, which are in src/, but need to point to relpath (usually ""../""). ;  ; void Convert (std::istream &in, const char *infilename, const char *outfilename, const char *title, const char *relpath=""../"", Int_t includeOutput=0, const char *context="""", TGClient *gclient=0);  Convert a text file into a html file. ;  ; Bool_t CopyHtmlFile (const char *sourceName, const char *destName="""");  Copy file to HTML directory. ;  ; virtual void CreateClassIndex ();  Create index of all classes. ;  ; virtual void CreateClassTypeDefs ();  Create a forwarding page for each typedef pointing to a class. ;  ; virtual void CreateHierarchy ();  Create a hierarchical class list The algorithm descends from the base clas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocOutput.html:66,Guid,Guide,66,doc/master/classTDocOutput.html,https://root.cern,https://root.cern/doc/master/classTDocOutput.html,1,['Guid'],['Guide']
Usability,". ROOT: TDocParser Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TDocParser Class Reference. . Definition at line 44 of file TDocParser.h. Public Types; enum  EAccess { kPrivate; , kProtected; , kPublic; };  ; enum  EParseContext { ;   kNoContext; , kCode; , kComment; , kDirective; , ;   kString; , kKeyword; , kCPP; , kVerbatim; , ;   kNumParseContexts; , kParseContextMask = (1ULL << ( 4 )) - 1. };  ; enum  EParseContextFlag { kCXXComment = (1ULL << ( 4 )); , kParseContextFlagMask = (UInt_t)(~((1ULL << ( 4 )) - 1)); };  ; enum  ESourceInfo { ;   kInfoLastUpdate; , kInfoAuthor; , kInfoCopyright; , kInfoLastChanged; , ;   kInfoLastGenerated; , kNumSourceInfos. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TDocParser (TClassDocOutput &docOutput, TClass *cl);  Constructor called for parsing class sources. ;  ;  TDocParser (TDocOutput &docOutput);  constructor called for parsing text files with Convert() ;  ;  ~TDocParser () override;  destructor, checking whether all methods have been found for gDebug > 3 ;  ; void Convert (std::ostream &out, std::istream &in, const char *relpath, Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocParser.html:66,Guid,Guide,66,doc/master/classTDocParser.html,https://root.cern,https://root.cern/doc/master/classTDocParser.html,1,['Guid'],['Guide']
Usability,". ROOT: TDrawFeedback Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; TDrawFeedback Class ReferencePROOF » PROOF kernel Libraries. ; Utility class to draw objects in the feedback list during queries. ; Draws histograms in separated canvases and user-defined objects via Draw(). Users requiring advanced treatment should implement their own version following this example. See also TStatsFeedback. ; Definition at line 35 of file TDrawFeedback.h. Public Member Functions;  TDrawFeedback (TProof *proof=0, TSeqCollection *names=0);  Constructor. ;  ;  ~TDrawFeedback () override;  Destructor. ;  ; void Feedback (TList *objs);  Display feedback. ;  ; const char * GetName () const override;  Returns name of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; void SetOption (Option_t *option);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDrawFeedback.html:69,Guid,Guide,69,doc/master/classTDrawFeedback.html,https://root.cern,https://root.cern/doc/master/classTDrawFeedback.html,4,"['Feedback', 'Guid', 'feedback']","['Feedback', 'Guide', 'feedback']"
Usability,". ROOT: TELTU Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TELTU Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A cylinder with an elliptical section. ; It has three parameters: the ellipse semi-axis in X, the ellipse semi-axis in Y and the half length in Z. The equation of the conical curve is: X**2/fRx**2 + Y**2/fRy**2 = 1; ELTU is not divisible. name: name of the shape; title: shape's title; material: (see TMaterial); rx: the ellipse semi-axis in X; ry: the ellipse semi-axis in Y; dz: half-length in z . Definition at line 31 of file TELTU.h. Public Member Functions;  TELTU ();  ELTU shape default constructor. ;  ;  TELTU (const char *name, const char *title, const char *material, Float_t rx, Float_t ry, Float_t dz);  ;  ~TELTU () override;  ELTU shape default destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTUBE;  TTUBE ();  TUBE shape default constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmax, Float_t dz);  TUBE shape ""simplified"" constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t aspect=1);  TUBE shape normal constructor. ;  ;  ~TTUBE () override;  TUBE shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a TUBE. ;  ; virtual Float_t GetAspectRatio () const;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3d. ;  ; virtual Float_t GetDz () const;  ; virtual Int_t GetNdiv () const;  ; virtual Int_t GetNumberOfDivisions () const;  ; virtual Float_t GetRmax () const;  ; virtual Float",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTELTU.html:61,Guid,Guide,61,doc/master/classTELTU.html,https://root.cern,https://root.cern/doc/master/classTELTU.html,1,['Guid'],['Guide']
Usability,". ROOT: TEditQueryFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TEditQueryFrame Class Reference. . Definition at line 335 of file TSessionViewer.h. Public Member Functions;  TEditQueryFrame (TGWindow *p, Int_t w, Int_t h);  Create a new Query dialog, used by the Session Viewer, to Edit a Query if the editmode flag is set, or to create a new one if not set. ;  ;  ~TEditQueryFrame () override;  Delete query dialog. ;  ; void Build (TSessionViewer *gui);  Build the ""new query"" dialog. ;  ; TClass * IsA () const override;  ; void OnBrowseChain ();  Call new chain dialog. ;  ; void OnBrowseEventList ();  Browse event list. ;  ; void OnBrowseSelector ();  Open file browser to choose selector macro. ;  ; void OnBtnSave ();  Save current settings in main session viewer. ;  ; void OnElementSelected (TObject *obj);  Handle OnElementSelected signal coming from new chain dialog. ;  ; void OnNewQueryMore ();  Show/hide options frame and update button text accordingly. ;  ; void SettingsChanged ();  Settings have changed, update GUI accordingly. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateFields (TQueryDescription *desc);  Update entry fields with query description values. ;  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEditQueryFrame.html:71,Guid,Guide,71,doc/master/classTEditQueryFrame.html,https://root.cern,https://root.cern/doc/master/classTEditQueryFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TEfficiency Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; List of all members ; TEfficiency Class ReferenceHistogram Library. ; Class to handle efficiency histograms. . I. Overview; II. Creating a TEfficiency object; Example 1; Example 2. III. Filling with events; IV. Statistic options; Frequentist methods; Bayesian methods; IV.1 Coverage probabilities for different methods. V. Merging and combining TEfficiency objects; Example; V.1 When should I use merging?; Example. V.2 When should I use combining?; Example. VI. Further operations; VI.1 Information about the internal histograms; VI.2 Fitting; VI.3 Draw a TEfficiency object; VI.4 TEfficiency object's axis customisation. I. Overview; This class handles the calculation of efficiencies and their uncertainties. It provides several statistical methods for calculating frequentist and Bayesian confidence intervals as well as a function for combining several efficiencies.; Efficiencies have a lot of applications and meanings but in principle, they can be described by the fraction of good/passed events k out of sample containing N events. One is usually interested in the dependency of the efficiency on other (binned) variables. The number of passed and total events is therefore stored internally in two histograms (TEfficiency::fTotalHistogram and TEfficiency::fPassedHistogram). Then the efficiency, as well as its upper and lower error, can be calculated for each bin individually.; As the efficiency can be regarded as a parameter of a binomial distribution, the number of passed and total events must always be integer numbers. Therefore a filling with weights is not possible. However, you can assign a global weight to each TEfficiency object (TEfficiency::SetWeight). It is necessary to create one ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEfficiency.html:67,Guid,Guide,67,doc/master/classTEfficiency.html,https://root.cern,https://root.cern/doc/master/classTEfficiency.html,1,['Guid'],['Guide']
Usability,". ROOT: TEllipse Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TEllipse Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Draw Ellipses. ; The ellipse can be truncated and rotated. It is defined by its center (x1,y1) and two radius r1 and r2.; A minimum and maximum angle may be specified (phimin, phimax). The ellipse may be rotated with an angle theta. All these angles are in degrees. The attributes of the outline line are given via TAttLine. The attributes of the fill area are given via TAttFill. The picture below illustrates different types of ellipses.; When an ellipse sector only is drawn, the lines connecting the center of the ellipse to the edges are drawn by default. One can specify the drawing option ""only"" to not draw these lines or alternatively call the function SetNoEdges(). To remove completely the ellipse outline it is enough to specify 0 as line style.; ; void ellipse(){; auto c1 = new TCanvas(""c1"");; c1->Range(0,0,1,1);; auto pel = new TPaveLabel(0.1,0.8,0.9,0.95,""Examples of Ellipses"");; pel->SetFillColor(42);; pel->Draw();; auto el1 = new TEllipse(0.25,0.25,.1,.2);; el1->Draw();; auto el2 = new TEllipse(0.25,0.6,.2,.1);; el2->SetFillColor(6);; el2->SetFillStyle(3008);; el2->Draw();; auto el3 = new TEllipse(0.75,0.6,.2,.1,45,315);; el3->SetFillColor(2);; el3->SetFillStyle(1001);; el3->SetLineColor(4);; el3->Draw();; auto el4 = new TEllipse(0.75,0.25,.2,.15,45,315,62);; el4->SetFillColor(5);; el4->SetFillStyle(1001);; el4->SetLineColor(4);; el4->SetLineWidth(6);; el4->Draw();; }; TCanvasThe Canvas class.Definition TCanvas.h:23; TEllipse::TEllipseTEllipse()Ellipse default constructor.Definition TEllipse.cxx:57; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; c1return c1Definition legend1.C:41; . Definition at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEllipse.html:64,Guid,Guide,64,doc/master/classTEllipse.html,https://root.cern,https://root.cern/doc/master/classTEllipse.html,1,['Guid'],['Guide']
Usability,". ROOT: TEmulatedCollectionProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Friends |; List of all members ; TEmulatedCollectionProxy Class ReferenceInput/Output Library. ; Streamer around an arbitrary STL like container, which implements basic container functionality. . Note:; Although this class contains all the setup necessary to deal with maps, the map-like functionality is NOT supported. For optimization reasons this functionality is put into the class TEmulatedMapProxy. ; Definition at line 18 of file TEmulatedCollectionProxy.h. Public Types; typedef std::vector< char > Cont_t;  ; typedef Cont_t * PCont_t;  ;  Public Types inherited from TGenCollectionProxy; enum  { kBIT_ISSTRING = 0x20000000; , kBIT_ISTSTRING = 0x40000000; };  ; typedef const std::type_info & Info_t;  ;  Public Types inherited from TVirtualCollectionProxy; typedef void *(* CopyIterator_t) (void *dest, const void *source);  Copy the iterator source into dest. ;  ; typedef void(* CreateIterators_t) (void *collection, void **begin_arena, void **end_arena, TVirtualCollectionProxy *proxy);  *begin_arena and *end_arena should contain the location of a memory arena of size fgIteratorArenaSize. ;  ; typedef void(* DeleteIterator_t) (void *iter);  If the size of the iterator is greater than fgIteratorArenaSize, call delete on the addresses; otherwise, just call the iterator's destructor. ;  ; typedef void(* DeleteTwoIterators_t) (void *begin, void *end);  ; enum  EProperty { kIsAssociative = (1ULL << ( 2 )); , kIsEmulated = (1ULL << ( 3 )); , kNeedDelete = (1ULL << ( 4 )); , kCustomAlloc = (1ULL << ( 5 )); };  ; typedef void *(* Next_t) (void *iter, const void *end);  iter and end should be pointers to an iterator to be incremented and an iterator that points to the end of the collection, respectively. ;  . Public Member Funct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEmulatedCollectionProxy.html:80,Guid,Guide,80,doc/master/classTEmulatedCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTEmulatedCollectionProxy.html,1,['Guid'],['Guide']
Usability,". ROOT: TEmulatedMapProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; List of all members ; TEmulatedMapProxy Class ReferenceInput/Output Library. ; Streamer around a map container. ; For optimization reasons this functionality is separated from the TEmulatedProxy. ; Definition at line 16 of file TEmulatedMapProxy.h. Public Member Functions;  TEmulatedMapProxy (const char *cl_name, Bool_t silent);  ;  TEmulatedMapProxy (const TEmulatedMapProxy &copy);  ;  ~TEmulatedMapProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index idx ;  ; TVirtualCollectionProxy * Generate () const override;  Returns a clean object of the actual class that derives from TVirtualCollectionProxy. ;  ; void ReadBuffer (TBuffer &buff, void *pObj) override;  ; void ReadBuffer (TBuffer &buff, void *pObj, const TClass *onfile) override;  ; UInt_t Size () const override;  Return the current number of elements in the container. ;  ; void Streamer (TBuffer &buff, void *pObj, int siz) override;  Streamer I/O overload. ;  ; void Streamer (TBuffer &refBuffer) override;  Streamer Function. ;  ;  Public Member Functions inherited from TEmulatedCollectionProxy;  TEmulatedCollectionProxy (const char *cl_name, Bool_t silent);  ;  TEmulatedCollectionProxy (const TEmulatedCollectionProxy &copy);  ;  ~TEmulatedCollectionProxy () override;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocates space for storing at least n elements. ;  ; void Clear (const char *opt="""") override;  Clear the container. ;  ; void Commit (void *env) override;  Commits pending elements in a staging area (see Allocate() for more information). ;  ; void DeleteArray (void *p, Bool_t dtorOnly=kFALSE) const override;  Execute the container array destructor. ;  ; void Destructor (void *p, Bool_t dtorOnly=kFALSE) const override",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEmulatedMapProxy.html:73,Guid,Guide,73,doc/master/classTEmulatedMapProxy.html,https://root.cern,https://root.cern/doc/master/classTEmulatedMapProxy.html,1,['Guid'],['Guide']
Usability,". ROOT: TEntryList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEntryList Class ReferenceTree Library. ; A List of entry numbers in a TTree or TChain. ; Note: It is recommended to use approaches such as TTreeReader::SetEntryRange or ROOT::RDataFrame instead of TEntryList if possible. Operations on entry lists. Add() - if the lists are for the same tree, adds all the entries of the second list to the first list. If the lists are for different trees, creates a TEntryList with 2 sublists for each TTree. If the lists are for TChains, merges the ones for the same trees and adds new sublists for the TTrees that were not included in the first TEntryList; Subtract() - if the lists are for the same TTree, removes the entries of the second list from the first list. If the lists are for TChains, loops over all sub-lists; GetEntry(n) - returns the n-th entry number; Next() - returns next entry number. Note, that this function is much faster than GetEntry, and it's called when GetEntry() is called for 2 or more indices in a row. TTree::Draw() and TChain::Draw(); Use option entrylist to write the results of TTree::Draw and TChain::Draw into an entry list. Example: tree->Draw("">>elist"", ""x<0 && y>0"", ""entrylist"");; TEntryList *elist = (TEntryList*)gDirectory->Get(""elist"");; gDirectory#define gDirectoryDefinition TDirectory.h:384; TEntryListA List of entry numbers in a TTree or TChain.Definition TEntryList.h:26; ; Example of Loop on TEntryList with a TChain; void loopChain() {; TFile *fe = TFile::Open(""myelist.root"");; TEntryList *myelist = (TEntryList*)fe->Get(""myelist"");; TChain *chain = new TChain(""ntuple"");; chain->Add(""hsimple.root"");; chain->Add(""hsimple2.root"");; Long64_t listEntries = myelist->GetN();; Long64_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEntryList.html:66,Guid,Guide,66,doc/master/classTEntryList.html,https://root.cern,https://root.cern/doc/master/classTEntryList.html,1,['Guid'],['Guide']
Usability,". ROOT: TEntryListArray Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEntryListArray Class ReferenceTree Library. ; A list of entries and subentries in a TTree or TChain. ; TEntryListArray is an extension of TEntryList, used to hold selected entries and subentries (sublists) for when the user has a TTree with containers (vectors, arrays, ...). Usage with TTree::Draw to select entries and subentries. To fill a list elist; tree->Draw("">> elist"", ""x > 0"", ""entrylistarray"");`; ; To use a list to select entries and subentries; tree->SetEntryList(elist);; tree->Draw(""y"");; tree->Draw(""z"");; Its main purpose is to improve the performance of a code that needs to apply complex cuts on TTree::Draw multiple times. After the first call above to TTree::Draw, a TEntryListArray is created and filled with the entries and the indices of the arrays that satisfied the selection cut (x > 0). In the subsequent calls to TTree::Draw, only these entries / subentries are used to fill histograms. About the class; The class derives from TEntryList and can be used basically in the same way. This same class is used to keep entries and subentries, so there are two types of TEntryListArray's:. The ones that only hold subentries; fEntry is set to the entry# for which the subentries correspond; fSubLists must be 0. The ones that hold entries and eventually lists with subentries in fSubLists.; fEntry = -1 for those; If there are no sublists for a given entry, all the subentries will be used in the selection. Additions with respect to TEntryList. Data members:; fSubLists: a container to hold the sublists; fEntry: the entry number if the list is used to hold subentries; fLastSubListQueried and fSubListIter: a pointer to the last sublist queried and an iterator to re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEntryListArray.html:71,Guid,Guide,71,doc/master/classTEntryListArray.html,https://root.cern,https://root.cern/doc/master/classTEntryListArray.html,1,['Guid'],['Guide']
Usability,". ROOT: TEntryListBlock Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TEntryListBlock Class ReferenceTree Library. ; Used by TEntryList to store the entry numbers. ; There are 2 ways to represent entry numbers in a TEntryListBlock:. as bits, where passing entry numbers are assigned 1, not passing - 0; as a simple array of entry numbers; storing the numbers of entries that pass; storing the numbers of entries that don't pass. In both cases, a UShort_t* is used. The second option is better in case less than 1/16 or more than 15/16 of entries pass the selection, and the representation can be changed by calling OptimizeStorage() function. When the block is being filled, it's always stored as bits, and the OptimizeStorage() function is called by TEntryList when it starts filling the next block. If Enter() or Remove() is called after OptimizeStorage(), representation is again changed to 1). Operations on blocks (see also function comments). Merge() - adds all entries from one block to the other. If the first block uses array representation, it's changed to bits representation only if the total number of passing entries is still less than kBlockSize; GetEntry(n) - returns n-th non-zero entry.; Next() - return next non-zero entry. In case of representation 1), Next() is faster than GetEntry() . Definition at line 43 of file TEntryListBlock.h. Public Types; enum  { kBlockSize = 4000; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEntryListBlock.html:71,Guid,Guide,71,doc/master/classTEntryListBlock.html,https://root.cern,https://root.cern/doc/master/classTEntryListBlock.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TEntryListFromFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TEntryListFromFile Class ReferenceTree Library. ; Manages entry lists from different files, when they are not loaded in memory at the same time. ; This entry list should only be used when processing a TChain (see TChain::SetEntryList() function). File naming convention:; by default, filename_elist.root is used, where filename is the name of the chain element.; xxx$xxx.root - $ sign is replaced by the name of the chain element If the list name is not specified (by passing filename_elist.root/listname to the TChain::SetEntryList() function, the first object of class TEntryList in the file is taken. It is assumed that there are as many lists, as there are chain elements, and they are in the same order. If one of the list files can't be opened, or there is an error reading a list from the file, this list is skipped and the entry loop continues on the next list. ; Definition at line 40 of file TEntryListFromFile.h. Public Member Functions;  TEntryListFromFile ();  ;  TEntryListFromFile (const char *filename, const char *listname, Int_t nfiles);  File naming convention: ;  ;  ~TEntryListFromFile () override;  d-tor ;  ; void Add (const TEntryList *) override;  Add 2 entry lists. ;  ; Int_t Contains (Long64_t, TTree *) override;  ; bool Enter (Long64_t, const char *, const char *) override;  ; bool Enter (Long64_t, TTree *) override;  Add entry #entry to the list. ;  ; TEntryList * GetCurrentList () const override;  ; virtual Long64_t GetEntries ();  Returns the total number of entries in the list. ;  ; virtual Long64_t GetEntriesFast () const;  ; Long64_t GetEntry (Long64_t index) override;  Returns entry #index See also Next() for a faster alternative. ;  ; Long64",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEntryListFromFile.html:74,Guid,Guide,74,doc/master/classTEntryListFromFile.html,https://root.cern,https://root.cern/doc/master/classTEntryListFromFile.html,1,['Guid'],['Guide']
Usability,". ROOT: TEnum Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Attributes |; List of all members ; TEnum Class Reference. ; The TEnum class implements the enum type. ; Definition at line 33 of file TEnum.h. Public Types; enum  ESearchAction { kNone = 0; , kAutoload = 1; , kInterpLookup = 2; , kALoadAndInterpLookup = 3; };  ;  Public Types inherited from TDictionary; typedef const void * DeclId_t;  ; enum class  EMemberSelection { kNoUsingDecls; , kOnlyUsingDecls; , kAlsoUsingDecls; };  Kinds of members to include in lists. More...;  ; enum  ESTLType { ;   kNone = ROOT::kNotSTL; , kVector = ROOT::kSTLvector; , kList = ROOT::kSTLlist; , kForwardlist = ROOT::kSTLforwardlist; , ;   kDeque = ROOT::kSTLdeque; , kMap = ROOT::kSTLmap; , kMultimap = ROOT::kSTLmultimap; , kSet = ROOT::kSTLset; , ;   kMultiset = ROOT::kSTLmultiset; , kUnorderedSet = ROOT::kSTLunorderedset; , kUnorderedMultiset = ROOT::kSTLunorderedmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TEnum ();  ;  TEnum (const char *name, DeclId_t declid, TClass *cls);  Constructor for TEnum class. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEnum.html:61,Guid,Guide,61,doc/master/classTEnum.html,https://root.cern,https://root.cern/doc/master/classTEnum.html,1,['Guid'],['Guide']
Usability,". ROOT: TEnum Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Attributes |; List of all members ; TEnum Class Reference. ; The TEnum class implements the enum type. ; Definition at line 33 of file TEnum.h. Public Types; enum  ESearchAction { kNone = 0; , kAutoload = 1; , kInterpLookup = 2; , kALoadAndInterpLookup = 3; };  ;  Public Types inherited from TDictionary; typedef const void * DeclId_t;  ; enum class  EMemberSelection { kNoUsingDecls; , kOnlyUsingDecls; , kAlsoUsingDecls; };  Kinds of members to include in lists. More...;  ; enum  ESTLType { ;   kNone = ROOT::kNotSTL; , kVector = ROOT::kSTLvector; , kList = ROOT::kSTLlist; , kForwardlist = ROOT::kSTLforwardlist; , ;   kDeque = ROOT::kSTLdeque; , kMap = ROOT::kSTLmap; , kMultimap = ROOT::kSTLmultimap; , kSet = ROOT::kSTLset; , ;   kMultiset = ROOT::kSTLmultiset; , kUnorderedSet = ROOT::kSTLunorderedset; , kUnorderedMultiset = ROOT::kSTLunorderedmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TEnum ();  ;  TEnum (const char *name, DeclId_t declid, TClass *cls);  Constructor for TEnum class. ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTEnum.html:60,Guid,Guide,60,doc/v632/classTEnum.html,https://root.cern,https://root.cern/doc/v632/classTEnum.html,1,['Guid'],['Guide']
Usability,". ROOT: TEnumConstant Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TEnumConstant Class Reference. ; The TEnumConstant class implements the constants of the enum type. ; Definition at line 29 of file TEnumConstant.h. Public Member Functions;  TEnumConstant ();  ;  TEnumConstant (DataMemberInfo_t *info, const char *name, Long64_t value, TEnum *type);  Constructor of the TEnumConstant. ;  ; virtual ~TEnumConstant ();  Destructor. ;  ; void * GetAddress () const override;  Return address of global. ;  ; const char * GetFullTypeName () const override;  Get full type description of global variable, e,g.: ""class TDirectory*"". ;  ; const TEnum * GetType () const;  ; const char * GetTypeName () const override;  Get type of global variable, e,g.: ""class TDirectory*"" -> ""TDirectory"". ;  ; Long64_t GetValue () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGlobal;  TGlobal (const TGlobal &);  Copy constructor. ;  ;  TGlobal (DataMemberInfo_t *info=nullptr);  pointer to CINT data member info ;  ; virtual ~TGlobal ();  TGlobal dtor deletes adopted CINT DataMemberInfo object. ;  ; virtual Int_t GetArrayDim () const;  Return number of array dimensions. ;  ; virtual DeclId_t GetDeclId () const;  ; virtual Int_t GetMaxIndex (Int_t dim) const;  Return maximum index for array dimension ""dim"". ;  ; TClass * IsA () const override;  ; virtual Bool_t IsValid ();  Return true if this global object is pointing to a currently loaded global. ;  ; TGlobal & operator= (const TGlobal &);  Assignment operator. ;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; void Streamer (TBuffer ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEnumConstant.html:69,Guid,Guide,69,doc/master/classTEnumConstant.html,https://root.cern,https://root.cern/doc/master/classTEnumConstant.html,1,['Guid'],['Guide']
Usability,". ROOT: TEnv Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TEnv Class ReferenceCore ROOT classes » Base ROOT classes. ; The TEnv class reads config files, by default named .rootrc. ; Three types of config files are read: global, user and local files. The global file is $ROOTSYS/etc/system<name> (or ROOTETCDIR/system<name>) the user file is $HOME/<name> and the local file is ./<name>. By setting the shell variable ROOTENV_NO_HOME=1 the reading of the $HOME/<name> resource file will be skipped. This might be useful in case the home directory resides on an auto-mounted remote file system and one wants to avoid this file system from being mounted.; The format of the .rootrc file is similar to the .Xdefaults format: [+]<SystemName>.<RootName|ProgName>.<name>[(type)]: <value>; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGW",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEnv.html:60,Guid,Guide,60,doc/master/classTEnv.html,https://root.cern,https://root.cern/doc/master/classTEnv.html,1,['Guid'],['Guide']
Usability,". ROOT: TEnvRec Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TEnvRec Class Reference. . Definition at line 86 of file TEnv.h. Public Member Functions;  TEnvRec ();  ;  ~TEnvRec ();  TNamed destructor. ;  ; EEnvLevel GetLevel () const;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetType () const;  ; const char * GetValue () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEnvRec.html:63,Guid,Guide,63,doc/master/classTEnvRec.html,https://root.cern,https://root.cern/doc/master/classTEnvRec.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveArrow Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveArrow Class ReferenceGraphics » 3D Graphics » Event Display. ; Class used for display of a thick arrow. ; Definition at line 21 of file TEveArrow.h. Public Member Functions;  TEveArrow (Float_t xVec=0, Float_t yVec=0, Float_t zVec=1, Float_t xOrg=0, Float_t yOrg=0, Float_t zOrg=0);  ;  ~TEveArrow () override;  ; void ComputeBBox () override;  Compute bounding-box of the arrow. ;  ; Float_t GetConeL () const;  ; Float_t GetConeR () const;  ; Int_t GetDrawQuality () const;  ; TObject * GetObject (const TEveException &) const override;  Get a TObject associated with this render-element. ;  ; TEveVector GetOrigin ();  ; Float_t GetTubeR () const;  ; TEveVector GetVector ();  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint object. ;  ; TEveVector & RefOrigin ();  ; TEveVector & RefVector ();  ; void SetConeL (Float_t x);  ; void SetConeR (Float_t x);  ; void SetDrawQuality (Int_t q);  ; void SetOrigin (const TEveVector &o);  ; void SetOrigin (Float_t x, Float_t y, Float_t z);  ; void SetTubeR (Float_t x);  ; void SetVector (const TEveVector &v);  ; void SetVector (Float_t x, Float_t y, Float_t z);  ; void StampGeom ();  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElement;  TEveElement ();  Default constructor. ;  ;  TEveElement (Color_t &main_color);  Constructor. ;  ;  TEveElement (const TEveElement &e);  Copy constructor. ;  ; virtual ~TEveElement ();  Destructor. ;  ; virtual Bool_t AcceptElement (TEveElement *el);  Check if el can be added to this element. ;  ; virtual void AddElement (TEveElement *el);  Add el to the list of children. ;  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveArrow.html:65,Guid,Guide,65,doc/master/classTEveArrow.html,https://root.cern,https://root.cern/doc/master/classTEveArrow.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveBox Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveBox Class ReferenceGraphics » 3D Graphics » Event Display. ; 3D box with arbitrary vertices (cuboid). ; Vertices 0-3 specify the ""bottom"" rectangle in clockwise direction and vertices 4-7 the ""top"" rectangle so that 4 is above 0, 5 above 1 and so on.; If vertices are provided some local coordinates the transformation matrix of the element should also be set (but then the memory usage is increased by the size of the TEveTrans object).; Currently only supports 3D -> 2D projections. ; Definition at line 21 of file TEveBox.h. Public Member Functions;  TEveBox (const char *n=""TEveBox"", const char *t="""");  Constructor. ;  ;  ~TEveBox () override;  Destructor. ;  ; void ComputeBBox () override;  Compute bounding-box of the data. ;  ; const Float_t * GetVertex (Int_t i) const;  ; TClass * IsA () const override;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, return TEveBoxProjected class. ;  ; void SetVertex (Int_t i, const Float_t *v);  Set vertex 'i'. ;  ; void SetVertex (Int_t i, Float_t x, Float_t y, Float_t z);  Set vertex 'i'. ;  ; void SetVertices (const Float_t *vs);  Set vertices. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveShape;  TEveShape (const char *n=""TEveShape"", const char *t="""");  Constructor. ;  ;  ~TEveShape () override;  Destructor. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; virtual Bool_t GetDrawFrame () const;  ; virtual Color_t GetFillColor () const;  ; virtual Bool_t GetHighlightFrame () const;  ; virtual Color_t GetLineColor () const;  ; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveBox.html:63,Guid,Guide,63,doc/master/classTEveBox.html,https://root.cern,https://root.cern/doc/master/classTEveBox.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveBoxProjected Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveBoxProjected Class ReferenceGraphics » 3D Graphics » Event Display. ; Projection of TEveBox. ; Definition at line 56 of file TEveBox.h. Public Member Functions;  TEveBoxProjected (const char *n=""TEveBoxProjected"", const char *t="""");  Constructor. ;  ;  ~TEveBoxProjected () override;  Destructor. ;  ; void ComputeBBox () override;  Compute bounding-box, virtual from TAttBBox. ;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void SetProjection (TEveProjectionManager *mng, TEveProjectable *model) override;  This is virtual method from base-class TEveProjected. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  Re-project the box. ;  ;  Public Member Functions inherited from TEveShape;  TEveShape (const char *n=""TEveShape"", const char *t="""");  Constructor. ;  ;  ~TEveShape () override;  Destructor. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; virtual Bool_t GetDrawFrame () const;  ; virtual Color_t GetFillColor () const;  ; virtual Bool_t GetHighlightFrame () const;  ; virtual Color_t GetLineColor () const;  ; virtual Float_t GetLineWidth () const;  ; virtual Bool_t GetMiniFrame () const;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint this object. Only direct rendering is supported. ;  ; virtual void SetDrawFrame (Bool_t f);  ; virtual void SetFillColor (Color_t c);  ; virtual void SetHighlightFrame (Bool_t f);  ; virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveBoxProjected.html:72,Guid,Guide,72,doc/master/classTEveBoxProjected.html,https://root.cern,https://root.cern/doc/master/classTEveBoxProjected.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveBoxSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveBoxSet Class ReferenceGraphics » 3D Graphics » Event Display. ; Collection of 3D primitives (fixed-size boxes, boxes of different sizes, or arbitrary sexto-epipeds, cones). ; Each primitive can be assigned a signal value and a TRef.; A collection of 3D-markers. The way how they are defined depends on the fBoxType data-member.; kBT_FreeBox arbitrary box: specify 8*(x,y,z) box corners; kBT_AABox axis-aligned box: specify (x,y,z) and (w, h, d); kBT_AABoxFixedDim axis-aligned box w/ fixed dimensions: specify (x,y,z) also set fDefWidth, fDefHeight and fDefDepth; kBT_Cone cone defined with position, axis-vector and radius; EllipticCone cone with elliptic base (specify another radius and angle in deg). Each primitive can be assigned:. Color or signal value. Thresholds and signal-to-color mapping can then be set dynamically via the TEveRGBAPalette class.; External TObject* (stored as TRef). See also base-class TEveDigitSet for more information. Tutorial: tutorials/eve/boxset_test.C ; Definition at line 21 of file TEveBoxSet.h. Classes; struct  BAABox_t;  ; struct  BAABoxFixedDim_t;  ; struct  BCone_t;  ; struct  BEllipticCone_t;  ; struct  BFreeBox_t;  ; struct  BHex_t;  ; struct  BOrigin_t;  . Public Types; enum  EBoxType_e { ;   kBT_Undef; , kBT_FreeBox; , kBT_AABox; , kBT_AABoxFixedDim; , ;   kBT_Cone; , kBT_EllipticCone; , kBT_Hex. };  ;  Public Types inherited from TEveDigitSet; typedef void(* Callback_foo) (TEveDigitSet *, Int_t, TObject *);  ; enum  ERenderMode_e { kRM_AsIs; , kRM_Line; , kRM_Fill; };  ; typedef TString(* TooltipCB_foo) (TEveDigitSet *, Int_t);  ;  Public Types inherited from TEveElement; enum  EChangeBi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveBoxSet.html:66,Guid,Guide,66,doc/master/classTEveBoxSet.html,https://root.cern,https://root.cern/doc/master/classTEveBoxSet.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveBrowser Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveBrowser Class ReferenceGraphics » 3D Graphics » Event Display. ; Specialization of TRootBrowser for Eve. ; Definition at line 129 of file TEveBrowser.h. Public Member Functions;  TEveBrowser (UInt_t w, UInt_t h);  Constructor. ;  ;  ~TEveBrowser () override;  ; void CloseTab (Int_t id) override;  Virtual from TRootBrowser. Need to intercept closing of Eve tabs. ;  ; void CloseWindow () override;  Virtual from TGMainFrame. Calls TEveManager::Terminate(). ;  ; void EveMenu (Int_t id);  Handle events from Eve menu. ;  ; TGFileBrowser * GetFileBrowser () const;  Returns the default file-browser. ;  ; TGMenuBar * GetMenuBar () const;  ; TGHorizontalFrame * GetTopMenuFrame () const;  ; void HideBottomTab ();  Hide the bottom tab (usually holding command-line widget). ;  ; void InitPlugins (Option_t *opt=""FI"");  Initialize standard plugins. ;  ; TClass * IsA () const override;  ; TGFileBrowser * MakeFileBrowser (Bool_t make_default=kFALSE);  Create a file-browser. ;  ; void ReallyDelete () override;  Override from TRootBrowser. ;  ; void SanitizeTabCounts ();  TRootBrowser keeps (somewhat unnecessarily) counters for number ob tabs on each position. ;  ; void SetFileBrowser (TGFileBrowser *b);  Set the default file browser. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TRootBrowser;  TRootBrowser (TBrowser *b, const char *name, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""", Bool_t initshow=kTRUE);  Create browser with a specified width and height and at position x, y. ;  ;  TRootBrowser (TBrowser *b=nullptr, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveBrowser.html:67,Guid,Guide,67,doc/master/classTEveBrowser.html,https://root.cern,https://root.cern/doc/master/classTEveBrowser.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveCalo2D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TEveCalo2D Class ReferenceGraphics » 3D Graphics » Event Display. ; Visualization of a calorimeter event data in 2D. ; Definition at line 200 of file TEveCalo.h. Public Types; typedef std::vector< TEveCaloData::vCellId_t * >::iterator vBinCells_i;  ; typedef std::vector< TEveCaloData::vCellId_t * > vBinCells_t;  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCalo2D.html:66,Guid,Guide,66,doc/master/classTEveCalo2D.html,https://root.cern,https://root.cern/doc/master/classTEveCalo2D.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveCalo3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveCalo3D Class ReferenceGraphics » 3D Graphics » Event Display. ; Visualization of a calorimeter event data in 3D. ; Definition at line 157 of file TEveCalo.h. Public Member Functions;  TEveCalo3D (TEveCaloData *d=nullptr, const char *n=""TEveCalo3D"", const char *t=""xx"");  Constructor. ;  ;  ~TEveCalo3D () override;  ; void ComputeBBox () override;  Fill bounding-box information of the base-class TAttBBox (virtual method). ;  ; Char_t GetFrameTransparency () const;  ; Float_t GetFrameWidth () const;  ; Bool_t GetRnrBarrelFrame () const;  ; Bool_t GetRnrEndCapFrame () const;  ; void GetRnrFrame (Bool_t &e, Bool_t &b) const;  ; TClass * IsA () const override;  ; void SetFrameTransparency (Char_t x);  ; void SetFrameWidth (Float_t w);  ; void SetRnrBarrelFrame (Bool_t r);  ; void SetRnrEndCapFrame (Bool_t r);  ; void SetRnrFrame (Bool_t e, Bool_t b);  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveCaloViz;  TEveCaloViz (TEveCaloData *data=nullptr, const char *n=""TEveCaloViz"", const char *t="""");  ;  ~TEveCaloViz () override;  Destructor. ;  ; Bool_t AssertCellIdCache () const;  Assert cell id cache is ok. ;  ; TEveRGBAPalette * AssertPalette ();  Make sure the TEveRGBAPalette pointer is not null. ;  ; Bool_t CellInEtaPhiRng (TEveCaloData::CellData_t &) const;  Returns true if given cell is in the ceta phi range. ;  ; virtual void CellSelectionChanged ();  ; void DataChanged ();  Update setting and cache on data changed. ;  ; TEveElement * ForwardEdit () override;  Management of selection state and ownership of selected cell list is done in TEveCaloData. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCalo3D.html:66,Guid,Guide,66,doc/master/classTEveCalo3D.html,https://root.cern,https://root.cern/doc/master/classTEveCalo3D.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveCaloData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveCaloData Class ReferenceabstractGraphics » 3D Graphics » Event Display. ; A central manager for calorimeter event data. ; It provides a list of cells within requested phi and eta range. ; Definition at line 26 of file TEveCaloData.h. Classes; class  CellData_t;  Cell data inner structure. More...;  ; class  CellGeom_t;  Cell geometry inner structure. More...;  ; struct  CellId_t;  ; struct  RebinData_t;  ; struct  SliceInfo_t;  . Public Types; typedef std::vector< CellGeom_t >::const_iterator vCellGeom_ci;  ; typedef std::vector< CellGeom_t >::iterator vCellGeom_i;  ; typedef std::vector< CellGeom_t > vCellGeom_t;  ; typedef std::vector< CellId_t >::iterator vCellId_i;  ; typedef std::vector< CellId_t > vCellId_t;  ; typedef std::vector< SliceInfo_t >::iterator vSliceInfo_i;  ; typedef std::vector< SliceInfo_t > vSliceInfo_t;  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCaloData.html:68,Guid,Guide,68,doc/master/classTEveCaloData.html,https://root.cern,https://root.cern/doc/master/classTEveCaloData.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveCaloDataHist Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveCaloDataHist Class ReferenceGraphics » 3D Graphics » Event Display. ; A central manager for calorimeter data of an event written in TH2F. ; X axis is used for eta and Y axis for phi. ; Definition at line 297 of file TEveCaloData.h. Public Member Functions;  TEveCaloDataHist ();  Constructor. ;  ;  ~TEveCaloDataHist () override;  Destructor. ;  ; Int_t AddHistogram (TH2F *hist);  Add new slice to calo tower. ;  ; void DataChanged () override;  Update limits and notify data users. ;  ; void GetCellData (const TEveCaloData::CellId_t &id, TEveCaloData::CellData_t &data) const override;  Get cell geometry and value from cell ID. ;  ; void GetCellList (Float_t etaMin, Float_t etaMax, Float_t phi, Float_t phiRng, vCellId_t &out) const override;  Get list of cell IDs in given eta and phi range. ;  ; void GetEtaLimits (Double_t &min, Double_t &max) const override;  Get eta limits. ;  ; TH2F * GetHist (Int_t slice) const;  Get histogram in given slice. ;  ; void GetPhiLimits (Double_t &min, Double_t &max) const override;  Get phi limits. ;  ; THStack * GetStack ();  ; TClass * IsA () const override;  ; void Rebin (TAxis *ax, TAxis *ay, vCellId_t &in, Bool_t et, RebinData_t &out) const override;  Rebin. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveCaloData;  TEveCaloData (const char *n=""TEveCalData"", const char *t="""");  ;  ~TEveCaloData () override;  ; virtual void CellSelectionChanged ();  Tell users (TEveCaloViz instances using this data) that cell selection has changed and they should update selection cache if necessary. ;  ; Bool_t Empty () const;  ; void FillImpliedSelectedSet (Set_t &im",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCaloDataHist.html:72,Guid,Guide,72,doc/master/classTEveCaloDataHist.html,https://root.cern,https://root.cern/doc/master/classTEveCaloDataHist.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveCaloDataVec Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Attributes |; Private Member Functions |; List of all members ; TEveCaloDataVec Class ReferenceGraphics » 3D Graphics » Event Display. ; Calo data for universal cell geometry. ; Definition at line 239 of file TEveCaloData.h. Public Member Functions;  TEveCaloDataVec (Int_t nslices);  ;  ~TEveCaloDataVec () override;  Destructor. ;  ; Int_t AddSlice ();  Add new slice. ;  ; Int_t AddTower (Float_t etaMin, Float_t etaMax, Float_t phiMin, Float_t phiMax);  Add tower within eta/phi range. ;  ; void DataChanged () override;  Update limits and notify data users. ;  ; void FillSlice (Int_t slice, Float_t value);  Fill given slice in the current tower. ;  ; void FillSlice (Int_t slice, Int_t tower, Float_t value);  Fill given slice in a given tower. ;  ; void GetCellData (const TEveCaloData::CellId_t &id, TEveCaloData::CellData_t &data) const override;  Get cell geometry and value from cell ID. ;  ; std::vector< TEveCaloData::CellGeom_t > & GetCellGeom ();  ; void GetCellList (Float_t etaMin, Float_t etaMax, Float_t phi, Float_t phiRng, vCellId_t &out) const override;  Get list of cell-ids for given eta/phi range. ;  ; void GetEtaLimits (Double_t &min, Double_t &max) const override;  ; Int_t GetNCells ();  ; void GetPhiLimits (Double_t &min, Double_t &max) const override;  ; std::vector< Float_t > & GetSliceVals (Int_t slice);  ; TClass * IsA () const override;  ; void Rebin (TAxis *ax, TAxis *ay, vCellId_t &in, Bool_t et, RebinData_t &out) const override;  Rebin cells. ;  ; void SetAxisFromBins (Double_t epsX=0.001, Double_t epsY=0.001);  Set XY axis from cells geometry. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveCaloData;  TEveCaloDat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCaloDataVec.html:71,Guid,Guide,71,doc/master/classTEveCaloDataVec.html,https://root.cern,https://root.cern/doc/master/classTEveCaloDataVec.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveCaloLego Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveCaloLego Class ReferenceGraphics » 3D Graphics » Event Display. ; Visualization of calorimeter data as eta/phi histogram. ; Definition at line 250 of file TEveCalo.h. Public Types; enum  E2DMode_e { kValColor; , kValSize; , kValSizeOutline; };  ; enum  EBoxMode_e { kNone; , kFrontBack; , kBack; };  ; enum  EProjection_e { kAuto; , k3D; , k2D; };  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCaloLego.html:68,Guid,Guide,68,doc/master/classTEveCaloLego.html,https://root.cern,https://root.cern/doc/master/classTEveCaloLego.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveCaloViz Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveCaloViz Class ReferenceabstractGraphics » 3D Graphics » Event Display. ; Base class for calorimeter data visualization. ; See TEveCalo2D and TEveCalo3D for concrete implementations. ; Definition at line 27 of file TEveCalo.h. Public Member Functions;  TEveCaloViz (TEveCaloData *data=nullptr, const char *n=""TEveCaloViz"", const char *t="""");  ;  ~TEveCaloViz () override;  Destructor. ;  ; Bool_t AssertCellIdCache () const;  Assert cell id cache is ok. ;  ; TEveRGBAPalette * AssertPalette ();  Make sure the TEveRGBAPalette pointer is not null. ;  ; Bool_t CellInEtaPhiRng (TEveCaloData::CellData_t &) const;  Returns true if given cell is in the ceta phi range. ;  ; virtual void CellSelectionChanged ();  ; void DataChanged ();  Update setting and cache on data changed. ;  ; TEveElement * ForwardEdit () override;  Management of selection state and ownership of selected cell list is done in TEveCaloData. ;  ; TEveElement * ForwardSelection () override;  Management of selection state and ownership of selected cell list is done in TEveCaloData. ;  ; Bool_t GetAutoRange () const;  ; Float_t GetBackwardEndCapPos () const;  ; Float_t GetBarrelRadius () const;  ; TEveCaloData * GetData () const;  ; Color_t GetDataSliceColor (Int_t slice) const;  Get slice color from data. ;  ; Float_t GetDataSliceThreshold (Int_t slice) const;  Get threshold for given slice. ;  ; Float_t GetEndCapPos () const;  ; Float_t GetEta () const;  ; Float_t GetEtaMax () const;  ; Float_t GetEtaMin () const;  ; Float_t GetEtaRng () const;  ; Float_t GetForwardEndCapPos () const;  ; Float_t GetMaxTowerH () const;  ; Float_t GetMaxVal () const;  ; Float_t GetMaxValAbs () const;  ; TEveRGBAPalet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCaloViz.html:67,Guid,Guide,67,doc/master/classTEveCaloViz.html,https://root.cern,https://root.cern/doc/master/classTEveCaloViz.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveCluster Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TEveCluster Class Reference. . Definition at line 105 of file TEveVSDStructs.h. Public Member Functions;  TEveCluster ();  ;  ~TEveCluster () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCluster.html:67,Guid,Guide,67,doc/master/classTEveCluster.html,https://root.cern,https://root.cern/doc/master/classTEveCluster.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveCompositeFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Static Private Attributes |; Friends |; List of all members ; TEveCompositeFrame Class ReferenceabstractGraphics » 3D Graphics » Event Display. ; Abstract base-class for frame-slots that encompass EVE-windows (sub-classes of TEveWindow). ; The EVE-frame classes are managed by their embedded EVE-windows and mostly serve as an interface to particular ROOT widgets (sub-classes of TGCompositeFrame) they are embedded into.; This base-class, a sub-class of a vertical composite-frame, creates also the title-bar which can be used to interact with the embedded window. Optionally, the title-bar can be replaced with a mini-bar (a 4-pixel thin bar at the top). By clicking on the mini-bar, the title-bar is restored.; Sub-classes provide for specific behaviour and expectations of individual ROOT GUI container frames.; POSSIBLE EXTENSIONS; No frame is drawn around this composite-frame - frame style could be available as a (static) member.; Menus of embedded windows could also be managed - hidden or transposed to a top-level menubar. ; Definition at line 39 of file TEveWindow.h. Public Types; typedef TGFrame *(* IconBarCreator_foo) (TEveCompositeFrame *, TGCompositeFrame *, Int_t);  ;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCompositeFrame.html:74,Guid,Guide,74,doc/master/classTEveCompositeFrame.html,https://root.cern,https://root.cern/doc/master/classTEveCompositeFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveCompositeFrameInMainFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveCompositeFrameInMainFrame Class ReferenceGraphics » 3D Graphics » Event Display. ; An EVE window-slot contained within a TGMainFrame. ; Definition at line 111 of file TEveWindow.h. Public Member Functions;  TEveCompositeFrameInMainFrame (TGCompositeFrame *parent, TEveWindow *eve_parent, TGMainFrame *mf);  Constructor. ;  ;  ~TEveCompositeFrameInMainFrame () override;  Destructor. ;  ; void Destroy () override;  Virtual function called from eve side when the frame should be destroyed. ;  ; TEveWindow * GetOriginalContainer () const;  ; TEveWindow * GetOriginalSlot () const;  ; TClass * IsA () const override;  ; void MainFrameClosed ();  Slot for main-frame's ""CloseWindow()"" signal. ;  ; void SetOriginalSlotAndContainer (TEveWindow *slot, TEveWindow *container);  Set the container where to return the contained window on destruction. ;  ; void SomeWindowClosed (TEveWindow *w);  Slot called when a window is closed ... we check that this was not our original container. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WindowNameChanged (const TString &name) override;  Update widgets using window's name or title. ;  ;  Public Member Functions inherited from TEveCompositeFrame;  TEveCompositeFrame (TGCompositeFrame *gui_parent, TEveWindow *eve_parent);  Constructor. ;  ;  ~TEveCompositeFrame () override;  If fEveWindow != 0 we are being deleted from the ROOT GUI side. ;  ; virtual void AcquireEveWindow (TEveWindow *ew);  Accept window and increase its deny-destroy count. ;  ; void ActionPressed ();  The action-button of the title-bar was pressed. ;  ; void FlipTitleBarState ();  Ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCompositeFrameInMainFrame.html:85,Guid,Guide,85,doc/master/classTEveCompositeFrameInMainFrame.html,https://root.cern,https://root.cern/doc/master/classTEveCompositeFrameInMainFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveCompositeFrameInPack Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveCompositeFrameInPack Class ReferenceGraphics » 3D Graphics » Event Display. ; An EVE window-slot contained within one frame of a TGPack. ; Definition at line 147 of file TEveWindow.h. Public Member Functions;  TEveCompositeFrameInPack (TGCompositeFrame *parent, TEveWindow *eve_parent, TGPack *pack);  Constructor. ;  ;  ~TEveCompositeFrameInPack () override;  Destructor. ;  ; void Destroy () override;  Virtual function called from eve side when the frame should be destroyed. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveCompositeFrame;  TEveCompositeFrame (TGCompositeFrame *gui_parent, TEveWindow *eve_parent);  Constructor. ;  ;  ~TEveCompositeFrame () override;  If fEveWindow != 0 we are being deleted from the ROOT GUI side. ;  ; virtual void AcquireEveWindow (TEveWindow *ew);  Accept window and increase its deny-destroy count. ;  ; void ActionPressed ();  The action-button of the title-bar was pressed. ;  ; void FlipTitleBarState ();  Change display-state of the title-bar / mini-bar. ;  ; TEveWindow * GetEveParentAsWindow () const;  Returns eve-parent dynamic-casted to TEveWindow. ;  ; TEveWindow * GetEveWindow () const;  ; virtual void HideAllDecorations ();  Hide title-bar and mini-bar. ;  ; virtual TEveWindow * RelinquishEveWindow (Bool_t reparent=kTRUE);  Remove window and decrease its deny-destroy count. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this frame. ;  ; virtual void SetShowTitleBar (Bool_t show);  Set state of title-bar. ;  ; virtual void ShowNormalDecorations (); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCompositeFrameInPack.html:80,Guid,Guide,80,doc/master/classTEveCompositeFrameInPack.html,https://root.cern,https://root.cern/doc/master/classTEveCompositeFrameInPack.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveCompositeFrameInTab Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveCompositeFrameInTab Class ReferenceGraphics » 3D Graphics » Event Display. ; An EVE window-slot contained within one tab of a TGTab. ; Definition at line 171 of file TEveWindow.h. Public Member Functions;  TEveCompositeFrameInTab (TGCompositeFrame *parent, TEveWindow *eve_parent, TGTab *tab);  Constructor. ;  ;  ~TEveCompositeFrameInTab () override;  Destructor. ;  ; void Destroy () override;  Virtual function called from eve side when the frame should be destroyed. ;  ; TClass * IsA () const override;  ; void SetCurrent (Bool_t curr) override;  Set current state of this frame. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WindowNameChanged (const TString &name) override;  Update widgets using window's name or title. ;  ;  Public Member Functions inherited from TEveCompositeFrame;  TEveCompositeFrame (TGCompositeFrame *gui_parent, TEveWindow *eve_parent);  Constructor. ;  ;  ~TEveCompositeFrame () override;  If fEveWindow != 0 we are being deleted from the ROOT GUI side. ;  ; virtual void AcquireEveWindow (TEveWindow *ew);  Accept window and increase its deny-destroy count. ;  ; void ActionPressed ();  The action-button of the title-bar was pressed. ;  ; void FlipTitleBarState ();  Change display-state of the title-bar / mini-bar. ;  ; TEveWindow * GetEveParentAsWindow () const;  Returns eve-parent dynamic-casted to TEveWindow. ;  ; TEveWindow * GetEveWindow () const;  ; virtual void HideAllDecorations ();  Hide title-bar and mini-bar. ;  ; virtual TEveWindow * RelinquishEveWindow (Bool_t reparent=kTRUE);  Remove window and decrease its deny-destr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCompositeFrameInTab.html:79,Guid,Guide,79,doc/master/classTEveCompositeFrameInTab.html,https://root.cern,https://root.cern/doc/master/classTEveCompositeFrameInTab.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveCompound Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveCompound Class ReferenceGraphics » 3D Graphics » Event Display. ; Description of TEveCompound. ; Definition at line 23 of file TEveCompound.h. Public Member Functions;  TEveCompound (const char *n=""TEveCompound"", const char *t="""", Bool_t doColor=kTRUE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  ~TEveCompound () override;  ; void AddElement (TEveElement *el) override;  Call base-class implementation. ;  ; void CloseCompound ();  ; void FillImpliedSelectedSet (Set_t &impSelSet) override;  Recurse on all children that are in this compound and call the base-class version. ;  ; TClass * IsA () const override;  ; Bool_t IsCompoundOpen () const;  ; void OpenCompound ();  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void RemoveElementLocal (TEveElement *el) override;  Decompoundofy el, call base-class version. ;  ; void RemoveElementsLocal () override;  Decompoundofy children, call base-class version. ;  ; void SetMainColor (Color_t color) override;  SetMainColor for the compound. ;  ; void SetMainTransparency (Char_t t) override;  SetMainTransparency for the compound. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCompound.html:68,Guid,Guide,68,doc/master/classTEveCompound.html,https://root.cern,https://root.cern/doc/master/classTEveCompound.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveCompoundProjected Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; TEveCompoundProjected Class ReferenceGraphics » 3D Graphics » Event Display. ; Description of TEveCompoundProjected. ; Definition at line 60 of file TEveCompound.h. Public Member Functions;  TEveCompoundProjected ();  Constructor. ;  ;  ~TEveCompoundProjected () override;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void SetMainColor (Color_t color) override;  Revert back to the behaviour of TEveElement as color is propagated: ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  ;  Public Member Functions inherited from TEveCompound;  TEveCompound (const char *n=""TEveCompound"", const char *t="""", Bool_t doColor=kTRUE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  ~TEveCompound () override;  ; void AddElement (TEveElement *el) override;  Call base-class implementation. ;  ; void CloseCompound ();  ; void FillImpliedSelectedSet (Set_t &impSelSet) override;  Recurse on all children that are in this compound and call the base-class version. ;  ; Bool_t IsCompoundOpen () const;  ; void OpenCompound ();  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void RemoveElementLocal (TEveElement *el) override;  Decompoundofy el, call base-class version. ;  ; void RemoveElementsLocal () override;  Decompoundofy children, call base-class version. ;  ; void SetMainTransparency (Char_t t) override;  SetMainTransparency for the compound. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCompoundProjected.html:77,Guid,Guide,77,doc/master/classTEveCompoundProjected.html,https://root.cern,https://root.cern/doc/master/classTEveCompoundProjected.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveContextMenu Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TEveContextMenu Class ReferenceGraphics » 3D Graphics » Event Display. ; Specialization of TContext menu. ; Provide a window manager hint that ensures proper placement of popup on Cocoa. ; Definition at line 430 of file TEveWindow.h. Public Member Functions;  TEveContextMenu (const char *name, const char *title=""Eve context menu"");  Constructor. ;  ; TClass * IsA () const override;  ; void SetupAndPopup (TGWindow *button, TObject *obj);  Position the popup below given button and show context menu for object obj. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TContextMenu;  TContextMenu (const char *name, const char *title=""Context sensitive popup menu"");  Create a context menu. ;  ; virtual ~TContextMenu ();  Destroy a context menu. ;  ; virtual void Action (TClassMenuItem *classmenuitem);  Action to be performed when this menu item is selected. ;  ; void Action (TMethod *method);  ; virtual void Action (TObject *object, TMethod *method);  Action to be performed when this menu item is selected. ;  ; virtual void Action (TObject *object, TToggle *toggle);  Action to be performed when this toggle menu item is selected. ;  ; void Action (TToggle *toggle);  ; virtual const char * CreateArgumentTitle (TMethodArg *argument);  Create string describing argument (for use in dialog box). ;  ; virtual const char * CreateDialogTitle (TObject *object, TFunction *method);  Create title for dialog box retrieving argument values. ;  ; virtual const char * CreatePopupTitle (TObject *object);  Create title for popup menu. ;  ; void Execute (const char *method, const char *params, Int_t *error=nullptr) override;  Execute met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveContextMenu.html:71,Guid,Guide,71,doc/master/classTEveContextMenu.html,https://root.cern,https://root.cern/doc/master/classTEveContextMenu.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveDigitSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveDigitSet Class ReferenceGraphics » 3D Graphics » Event Display. ; Base-class for storage of digit collections; provides transformation matrix (TEveTrans), signal to color mapping (TEveRGBAPalette) and visual grouping (TEveFrameBox). ; Base-class for displaying a digit collection. Provides common services for:; specifying signal / color per digit;; specifying object reference per digit;; controlling palette and thresholds (external object TEveRGBAPalette);; showing a frame around the digits (external object TEveFrameBox);; specifying transformation matrix for the whole collection; by data-member of class TEveTrans. Use method DigitId(TObject* id) to assign additional identification to the last created digit. By calling SetOwnIds(kTRUE) tje digit-set becomes the owner of the assigned objects and deletes them on destruction. Note that TRef is used for referencing the objects and if you instantiate the objects just to pass them to digit-set you should also call TProcessID::Get/SetObjectCount() at the beginning / end of processing of an event. See documentation for class TRef, in particular section 'ObjectNumber'.; If you use value-is-color mode and want to use transparency, set the transparency to non-zero value so that GL-renderer will be properly informed.; If you want to use single color for all elements call: UseSingleColor(); TEveDigitSet::UseSingleColorvoid UseSingleColor()Instruct digit-set to use single color for its digits.Definition TEveDigitSet.cxx:162; Palette controls will not work in this case.; A pointer to a rectangle / box of class TEveFrameBox can be set via void SetFrame(TEveFrameBox* b);; b#define b(i)Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveDigitSet.html:68,Guid,Guide,68,doc/master/classTEveDigitSet.html,https://root.cern,https://root.cern/doc/master/classTEveDigitSet.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveElementList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveElementList Class ReferenceGraphics » 3D Graphics » Event Display. ; A list of TEveElements. ; Class of acceptable children can be limited by setting the fChildClass member.; !!! should have two ctors (like in TEveElement), one with Color_t& and set fDoColor automatically, based on which ctor is called. ; Definition at line 430 of file TEveElement.h. Public Member Functions;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * IsA () const override;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TClass *c);  ; void SetElementName (const char *name) override;  Virtual function for setting of name of an element. ;  ; void SetElementNameTitle (const char *name, const char *title) override;  Virtual function for setting of name and title of render element. ;  ; void SetElementTitle (c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveElementList.html:71,Guid,Guide,71,doc/master/classTEveElementList.html,https://root.cern,https://root.cern/doc/master/classTEveElementList.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveElementListProjected Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; TEveElementListProjected Class ReferenceGraphics » 3D Graphics » Event Display. ; A projected element list – required for proper propagation of render state to projected views. ; Definition at line 479 of file TEveElement.h. Public Member Functions;  TEveElementListProjected ();  Constructor. ;  ;  ~TEveElementListProjected () override;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  This is abstract method from base-class TEveProjected. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveElementListProjected.html:80,Guid,Guide,80,doc/master/classTEveElementListProjected.html,https://root.cern,https://root.cern/doc/master/classTEveElementListProjected.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveEventManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TEveEventManager Class ReferenceGraphics » 3D Graphics » Event Display. ; Base class for event management and navigation. ; Definition at line 19 of file TEveEventManager.h. Public Member Functions;  TEveEventManager (const char *n=""TEveEventManager"", const char *t="""");  Constructor. ;  ;  ~TEveEventManager () override;  ; virtual void AddNewEventCommand (const TString &cmd);  Register a command to be executed on each new event. ;  ; virtual void AfterNewEventLoaded ();  Virtual function to be called after a new event is loaded. ;  ; virtual void ClearNewEventCommands ();  Clear the list of commands to be executed on each new event. ;  ; virtual void Close ();  ; std::vector< TString > & GetNewEventCommands ();  ; virtual void GotoEvent (Int_t);  ; TClass * IsA () const override;  ; virtual void NextEvent ();  ; virtual void Open ();  ; virtual void PrevEvent ();  ; virtual void RemoveNewEventCommand (const TString &cmd);  Remove the first command equal to cmd. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveEventManager.html:72,Guid,Guide,72,doc/master/classTEveEventManager.html,https://root.cern,https://root.cern/doc/master/classTEveEventManager.html,3,"['Clear', 'Guid']","['Clear', 'ClearNewEventCommands', 'Guide']"
Usability,". ROOT: TEveFrameBox Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveFrameBox Class ReferenceGraphics » 3D Graphics » Event Display. ; Description of a 2D or 3D frame that can be used to visually group a set of objects. ; Definition at line 18 of file TEveFrameBox.h. Public Types; enum  EFrameType_e { kFT_None; , kFT_Quad; , kFT_Box; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TEveFrameBox ();  ;  ~TEveFrameBox () override;  Destructor. ;  ; Color_t GetBackColor () const;  ; UChar_t * GetBackRGBA ();  ; Bool_t GetDrawBack () const;  ; Color_t GetFrameColor () const;  ; Bool_t GetFrameFill () const;  ; Float_t * GetFramePoints () const;  ; UChar_t * GetFrameRGBA ();  ; Int_t GetFrameSize () const;  ; EFrameType_e GetFrameType () const;  ; Float_t GetFrameWidth () const;  ; TClass * IsA () const override;  ; void OnZeroRefCount () override;  ; Color_t * PtrBackColor ();  ; Color_t * PtrFrameColor ();  ; void SetAABox (Float_t x, Float_t y, Float_t z, Float_t dx, Float_t dy, Float_t dz);  Setup for axis-aligned box with one corner at x, y, z and given sizes in x (dx), y (dy) and z (dz). ;  ; void SetAABoxCenterHalfSize (F",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveFrameBox.html:68,Guid,Guide,68,doc/master/classTEveFrameBox.html,https://root.cern,https://root.cern/doc/master/classTEveFrameBox.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveGListTreeEditorFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveGListTreeEditorFrame Class ReferenceGraphics » 3D Graphics » Event Display. ; Composite GUI frame for parallel display of a TGListTree and TEveGedEditor. ; Definition at line 82 of file TEveBrowser.h. Public Member Functions;  TEveGListTreeEditorFrame (const TGWindow *p=nullptr, Int_t width=250, Int_t height=700);  Constructor. ;  ;  ~TEveGListTreeEditorFrame () override;  Destructor. ;  ; void ConnectSignals ();  Connect list-tree signals. ;  ; void DisconnectSignals ();  Disconnect list-tree signals. ;  ; TEveGedEditor * GetEditor () const;  ; TGListTree * GetListTree () const;  ; TClass * IsA () const override;  ; void ItemBelowMouse (TGListTreeItem *entry, UInt_t mask);  Different item is below mouse. ;  ; void ItemClicked (TGListTreeItem *entry, Int_t btn, UInt_t mask, Int_t x, Int_t y);  Item has been clicked, based on mouse button do: ;  ; void ItemDblClicked (TGListTreeItem *item, Int_t btn);  Item has been double-clicked, potentially expand the children. ;  ; void ItemKeyPress (TGListTreeItem *entry, UInt_t keysym, UInt_t mask);  A key has been pressed for an item. ;  ; void ReconfToHorizontal ();  Reconfigure to horizontal layout, list-tree and editor side by side. ;  ; void ReconfToVertical ();  Reconfigure to vertical layout, list-tree above the editor. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMainFrame () override;  TGMainFrame destru",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGListTreeEditorFrame.html:80,Guid,Guide,80,doc/master/classTEveGListTreeEditorFrame.html,https://root.cern,https://root.cern/doc/master/classTEveGListTreeEditorFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveGeoNode Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveGeoNode Class ReferenceGraphics » 3D Graphics » Event Display. ; Wrapper for TGeoNode that allows it to be shown in GUI and controlled as a TEveElement. ; Definition at line 28 of file TEveGeoNode.h. Public Member Functions;  TEveGeoNode (TGeoNode *node);  Constructor. ;  ; void AddStamp (UChar_t bits) override;  Override from TEveElement. ;  ; Bool_t CanEditElement () const override;  ; Bool_t CanEditMainColor () const override;  Can edit main-color – not available for assemblies. ;  ; Bool_t CanEditMainTransparency () const override;  Can edit main transparency – not available for assemblies. ;  ; void Draw (Option_t *option="""") override;  Draw the object. ;  ; void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent) override;  Checks if child-nodes have been imported ... imports them if not. ;  ; virtual void ExpandIntoListTrees ();  Expand children into all list-trees. ;  ; virtual void ExpandIntoListTreesRecursively ();  Expand children into all list-trees recursively. ;  ; const char * GetElementName () const override;  Return name, taken from geo-node. Used via TEveElement. ;  ; const char * GetElementTitle () const override;  Return title, taken from geo-node. Used via TEveElement. ;  ; Char_t GetMainTransparency () const override;  Get transparency – it is taken from the geo node. ;  ; const char * GetName () const override;  Return name, taken from geo-node. Used via TObject. ;  ; TGeoNode * GetNode () const;  ; TObject * GetObject (const TEveException &) const override;  Get a TObject associated with this render-element. ;  ; const char * GetTitle () const override;  Return title, taken from geo-node",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGeoNode.html:67,Guid,Guide,67,doc/master/classTEveGeoNode.html,https://root.cern,https://root.cern/doc/master/classTEveGeoNode.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveGeoShape Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TEveGeoShape Class ReferenceGraphics » 3D Graphics » Event Display. ; Wrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for non-linear projections). ; TGeoCompositeShapes and TGeoAssemblies are supported.; If fNSegments data-member is < 2 (0 by default), the default number of segments is used for tesselation and special GL objects are instantiated for selected shapes (spheres, tubes). If fNSegments is > 2, it gets forwarded to geo-manager and this tesselation detail is used when creating the buffer passed to GL. ; Definition at line 23 of file TEveGeoShape.h. Public Member Functions;  TEveGeoShape (const char *name=""TEveGeoShape"", const char *title=nullptr);  Constructor. ;  ;  ~TEveGeoShape () override;  Destructor. ;  ; void ComputeBBox () override;  Compute bounding-box. ;  ; Int_t GetNSegments () const;  ; TObject * GetObject (const TEveException &) const override;  Get a TObject associated with this render-element. ;  ; TGeoShape * GetShape () const;  ; TClass * IsA () const override;  ; virtual TBuffer3D * MakeBuffer3D ();  Create a TBuffer3D suitable for presentation of the shape. ;  ; void Paint (Option_t *option="""") override;  Paint object. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Return class for projected objects: ;  ; void Save (const char *file, const char *name=""Extract"");  Save the shape tree as TEveGeoShapeExtract. ;  ; void SaveExtract (const char *file, const char *name);  Save the shape tree as TEveGeoShapeExtract. ;  ; void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGeoShape.html:68,Guid,Guide,68,doc/master/classTEveGeoShape.html,https://root.cern,https://root.cern/doc/master/classTEveGeoShape.html,2,"['Guid', 'simpl']","['Guide', 'simplified']"
Usability,". ROOT: TEveGeoShapeExtract Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveGeoShapeExtract Class ReferenceGraphics » 3D Graphics » Event Display. ; Globally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts. ; Vessel to carry hand-picked geometry from gled to reve. This class exists in both frameworks. ; Definition at line 20 of file TEveGeoShapeExtract.h. Public Member Functions;  TEveGeoShapeExtract (const char *n=""TEveGeoShapeExtract"", const char *t=nullptr);  Constructor. ;  ;  ~TEveGeoShapeExtract () override;  Destructor. Delete shape and elements. ;  ; void AddElement (TEveGeoShapeExtract *gse);  Add a child element. ;  ; TList * GetElements ();  ; Bool_t GetMiniFrame ();  ; Float_t * GetRGBA ();  ; Float_t * GetRGBALine ();  ; Bool_t GetRnrElements ();  ; Bool_t GetRnrFrame ();  ; Bool_t GetRnrSelf ();  ; TGeoShape * GetShape ();  ; Double_t * GetTrans ();  ; Bool_t HasElements ();  True if has at least one element. ;  ; TClass * IsA () const override;  ; void SetElements (TList *e);  ; void SetMiniFrame (Bool_t r);  ; void SetRGBA (const Float_t arr[4]);  Set RGBA color. ;  ; void SetRGBALine (const Float_t arr[4]);  Set RGBA color for line. ;  ; void SetRnrElements (Bool_t r);  ; void SetRnrFrame (Bool_t r);  ; void SetRnrSelf (Bool_t r);  ; void SetShape (TGeoShape *s);  ; void SetTrans (const Double_t arr[16]);  Set transformation matrix. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGeoShapeExtract.html:75,Guid,Guide,75,doc/master/classTEveGeoShapeExtract.html,https://root.cern,https://root.cern/doc/master/classTEveGeoShapeExtract.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveGeoShapeProjected Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveGeoShapeProjected Class ReferenceGraphics » 3D Graphics » Event Display. ; A 3D projected TEveGeoShape. ; Definition at line 74 of file TEveGeoShape.h. Public Member Functions;  TEveGeoShapeProjected ();  Constructor. ;  ;  ~TEveGeoShapeProjected () override;  Destructor. ;  ; void ComputeBBox () override;  Override of virtual method from TAttBBox. ;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void SetProjection (TEveProjectionManager *proj, TEveProjectable *model) override;  This is virtual method from base-class TEveProjected. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  This is virtual method from base-class TEveProjected. ;  ;  Public Member Functions inherited from TEveShape;  TEveShape (const char *n=""TEveShape"", const char *t="""");  Constructor. ;  ;  ~TEveShape () override;  Destructor. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; virtual Bool_t GetDrawFrame () const;  ; virtual Color_t GetFillColor () const;  ; virtual Bool_t GetHighlightFrame () const;  ; virtual Color_t GetLineColor () const;  ; virtual Float_t GetLineWidth () const;  ; virtual Bool_t GetMiniFrame () const;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint this object. Only direct rendering is supported. ;  ; virtual void SetDrawFrame (Bool_t f);  ; virtual void SetFillColor (Color_t c);  ; virtual void SetHighlightFrame (Bool_t f);  ; virtual void SetLineColor (Color_t c);  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGeoShapeProjected.html:77,Guid,Guide,77,doc/master/classTEveGeoShapeProjected.html,https://root.cern,https://root.cern/doc/master/classTEveGeoShapeProjected.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveGeoTopNode Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveGeoTopNode Class ReferenceGraphics » 3D Graphics » Event Display. ; A wrapper over a TGeoNode, possibly displaced with a global trasformation stored in TEveElement. ; It holds a pointer to TGeoManager and controls for steering of TGeoPainter, fVisOption, fVisLevel and fMaxVisNodes. They have the same meaning as in TGeoManager/TGeoPainter. ; Definition at line 89 of file TEveGeoNode.h. Public Member Functions;  TEveGeoTopNode (TGeoManager *manager, TGeoNode *node, Int_t visopt=1, Int_t vislvl=3, Int_t maxvisnds=10000);  Constructor. ;  ;  ~TEveGeoTopNode () override;  ; void AddStamp (UChar_t bits) override;  Revert from TEveGeoNode back to standard behaviour, that is, do not pass visibility changes to fNode as they are honoured in Paint() method. ;  ; Bool_t CanEditElement () const override;  ; void Draw (Option_t *option="""") override;  Draw the top-node. ;  ; TGeoManager * GetGeoManager () const;  ; Int_t GetMaxVisNodes () const;  ; Int_t GetVisLevel () const;  ; Int_t GetVisOption () const;  ; TClass * IsA () const override;  ; void NodeVisChanged (TGeoNode *node);  Callback for propagating node visibility changes. ;  ; void Paint (Option_t *option="""") override;  Paint the enclosed TGeo hierarchy with visibility level and option given in data-members. ;  ; void SetMaxVisNodes (Int_t mvn);  ; void SetVisLevel (Int_t vl);  ; void SetVisOption (Int_t vo);  ; Bool_t SingleRnrState () const override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UseNodeTrans ();  Use transformation matrix from the TGeoNode. ;  ; void VolumeColChanged (TGeoVolume *volume);  Callback for propagating volume parameter changes. ;  ; void VolumeVisCh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGeoTopNode.html:70,Guid,Guide,70,doc/master/classTEveGeoTopNode.html,https://root.cern,https://root.cern/doc/master/classTEveGeoTopNode.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveGridStepper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TEveGridStepper Class ReferenceGraphics » 3D Graphics » Event Display. ; Provide discrete position coordinates for placement of objects on regular grids. ; Definition at line 21 of file TEveGridStepper.h. Public Types; enum  EStepMode_e { kSM_XYZ; , kSM_YXZ; , kSM_XZY; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TEveGridStepper (Int_t sm=kSM_XYZ);  Constructor. ;  ;  ~TEveGridStepper () override;  ; Int_t GetCx () const;  ; Int_t GetCy () const;  ; Int_t GetCz () const;  ; Float_t GetDx () const;  ; Float_t GetDy () const;  ; Float_t GetDz () const;  ; Int_t GetNx () const;  ; Int_t GetNy () const;  ; Int_t GetNz () const;  ; Float_t GetOx () const;  ; Float_t GetOy () const;  ; Float_t GetOz () const;  ; void GetPosition (Float_t *p);  Get current position. ;  ; TClass * IsA () const override;  ; void Reset ();  Reset position to origin. ;  ; void SetDs (Float_t dx, Float_t dy, Float_t dz=0);  ; void SetNs (Int_t nx, Int_t ny, Int_t nz=1);  ; void SetOs (Float_t ox, Float_t oy, Float_t oz=0);  ; void SetTrans (TEveTrans *mx);  Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGridStepper.html:71,Guid,Guide,71,doc/master/classTEveGridStepper.html,https://root.cern,https://root.cern/doc/master/classTEveGridStepper.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveHit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TEveHit Class Reference. . Definition at line 79 of file TEveVSDStructs.h. Public Member Functions;  TEveHit ();  ;  ~TEveHit () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveHit.html:63,Guid,Guide,63,doc/master/classTEveHit.html,https://root.cern,https://root.cern/doc/master/classTEveHit.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveJetCone Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveJetCone Class ReferenceGraphics » 3D Graphics » Event Display. ; Draws a jet cone with leading particle is specified in (eta,phi) and cone radius is given. ; If Apex is not set, default is (0.,0.,0.) In case of cylinder was set, cone is cut at the cylinder edges.; Example : Float_t coneEta = r.Uniform(-0.9, 0.9);; Float_t conePhi = r.Uniform(0.0, TwoPi() );; Float_t coneRadius = 0.4;; ; TEveJetCone* jetCone = new TEveJetCone(""JetCone"");; jetCone->SetCylinder(250, 250);; if (jetCone->AddCone(coneEta, conePhi, coneRadius) != -1); gEve->AddElement(jetCone);; Float_tfloat Float_tDefinition RtypesCore.h:57; gEveR__EXTERN TEveManager * gEveDefinition TEveManager.h:243; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TEveJetConeDraws a jet cone with leading particle is specified in (eta,phi) and cone radius is given.Definition TEveJetCone.h:24; TEveJetCone::SetCylindervoid SetCylinder(Float_t r, Float_t z)Definition TEveJetCone.h:55; TEveJetCone::AddConeInt_t AddCone(Float_t eta, Float_t phi, Float_t cone_r, Float_t length=0)Add jet cone.Definition TEveJetCone.cxx:92; TEveManager::AddElementvoid AddElement(TEveElement *element, TEveElement *parent=nullptr)Add an element.Definition TEveManager.cxx:527; Implementation notes; TEveVector fLimits encodes the following information:; fY, fZ: barrel radius and endcap z-position; if both are 0, fX encodes the spherical radius; fX : scaling for length of the cone . Definition at line 23 of file TEveJetCone.h. Public Me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveJetCone.html:67,Guid,Guide,67,doc/master/classTEveJetCone.html,https://root.cern,https://root.cern/doc/master/classTEveJetCone.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveJetConeProjected Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Friends |; List of all members ; TEveJetConeProjected Class ReferenceGraphics » 3D Graphics » Event Display. ; Projection of TEveJetCone. ; Definition at line 72 of file TEveJetCone.h. Public Member Functions;  TEveJetConeProjected (const char *n=""TEveJetConeProjected"", const char *t="""");  Constructor. ;  ;  ~TEveJetConeProjected () override;  Destructor. ;  ; void ComputeBBox () override;  Compute bounding-box, virtual from TAttBBox. ;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void SetProjection (TEveProjectionManager *mng, TEveProjectable *model) override;  This is virtual method from base-class TEveProjected. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  Re-project the jet-cone. ;  ;  Public Member Functions inherited from TEveShape;  TEveShape (const char *n=""TEveShape"", const char *t="""");  Constructor. ;  ;  ~TEveShape () override;  Destructor. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; virtual Bool_t GetDrawFrame () const;  ; virtual Color_t GetFillColor () const;  ; virtual Bool_t GetHighlightFrame () const;  ; virtual Color_t GetLineColor () const;  ; virtual Float_t GetLineWidth () const;  ; virtual Bool_t GetMiniFrame () const;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint this object. Only direct rendering is supported. ;  ; virtual void SetDrawFrame (Bool_t f);  ; virtual void SetFillColor (Color_t c);  ; virtual void SetHighlightFrame (Bool_t f);  ; virtual void SetLineColor (Color_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveJetConeProjected.html:76,Guid,Guide,76,doc/master/classTEveJetConeProjected.html,https://root.cern,https://root.cern/doc/master/classTEveJetConeProjected.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveLine Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveLine Class ReferenceGraphics » 3D Graphics » Event Display. ; An arbitrary polyline with fixed line and marker attributes. ; Definition at line 24 of file TEveLine.h. Public Member Functions;  TEveLine (const char *name, Int_t n_points=0, ETreeVarType_e tv_type=kTVT_XYZ);  Constructor. ;  ;  TEveLine (Int_t n_points=0, ETreeVarType_e tv_type=kTVT_XYZ);  Constructor. ;  ;  ~TEveLine () override;  ; Float_t CalculateLineLength () const;  Sum-up lengths of individual segments. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; TEveVector GetLineEnd () const;  Return the last point of the line. ;  ; TEveVector GetLineStart () const;  Return the first point of the line. ;  ; const TGPicture * GetListTreeIcon (Bool_t open=kFALSE) override;  Returns list-tree icon for TEveLine. ;  ; Bool_t GetRnrLine () const;  ; Bool_t GetRnrPoints () const;  ; Bool_t GetSmooth () const;  ; TClass * IsA () const override;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEvePointSetProjected class. ;  ; void ReduceSegmentLengths (Float_t max);  Make sure that no segment is longer than max. ;  ; void SetLineColor (Color_t col) override;  Set the line color. ;  ; void SetLineStyle (Style_t lstyle) override;  Set line-style of the line. ;  ; void SetLineWidth (Width_t lwidth) override;  Set line-style of the line. ;  ; void SetMarkerColor (Color_t col) override;  Set marker color. Propagate to projected lines. ;  ; void SetRnrLine (Bool_t r);  Set rendering of line. Propagate to projected lines. ;  ; void SetRnrPoints (Bool_t r);  Set rendering of points. Propaga",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveLine.html:64,Guid,Guide,64,doc/master/classTEveLine.html,https://root.cern,https://root.cern/doc/master/classTEveLine.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveLineProjected Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; List of all members ; TEveLineProjected Class ReferenceGraphics » 3D Graphics » Event Display. ; Projected copy of a TEveLine. ; Definition at line 83 of file TEveLine.h. Public Member Functions;  TEveLineProjected ();  Default constructor. ;  ;  ~TEveLineProjected () override;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void SetProjection (TEveProjectionManager *mng, TEveProjectable *model) override;  Set projection manager and projection model. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  Re-apply the projection. ;  ;  Public Member Functions inherited from TEveLine;  TEveLine (const char *name, Int_t n_points=0, ETreeVarType_e tv_type=kTVT_XYZ);  Constructor. ;  ;  TEveLine (Int_t n_points=0, ETreeVarType_e tv_type=kTVT_XYZ);  Constructor. ;  ;  ~TEveLine () override;  ; Float_t CalculateLineLength () const;  Sum-up lengths of individual segments. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; TEveVector GetLineEnd () const;  Return the last point of the line. ;  ; TEveVector GetLineStart () const;  Return the first point of the line. ;  ; const TGPicture * GetListTreeIcon (Bool_t open=kFALSE) override;  Returns list-tree icon for TEveLine. ;  ; Bool_t GetRnrLine () const;  ; Bool_t GetRnrPoints () const;  ; Bool_t GetSmooth () const;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEvePointSetProjected class. ;  ; void ReduceSegmentLengths (Float_t max);  Make sure that no segment ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveLineProjected.html:73,Guid,Guide,73,doc/master/classTEveLineProjected.html,https://root.cern,https://root.cern/doc/master/classTEveLineProjected.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveMCRecCrossRef Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TEveMCRecCrossRef Class Reference. . Definition at line 257 of file TEveVSDStructs.h. Public Member Functions;  TEveMCRecCrossRef ();  ;  ~TEveMCRecCrossRef () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveMCRecCrossRef.html:73,Guid,Guide,73,doc/master/classTEveMCRecCrossRef.html,https://root.cern,https://root.cern/doc/master/classTEveMCRecCrossRef.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveMCTrack Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TEveMCTrack Class Reference. . Definition at line 42 of file TEveVSDStructs.h. Public Member Functions;  TEveMCTrack ();  ;  ~TEveMCTrack () override;  ; TClass * IsA () const override;  ; TEveMCTrack & operator= (const TParticle &p);  ; void ResetPdgCode ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TParticle;  TParticle ();  reference to the particle record in PDG database ;  ;  TParticle (const TParticle &part);  copy constructor ;  ;  TParticle (Int_t pdg, Int_t status, Int_t mother1, Int_t mother2, Int_t daughter1, Int_t daughter2, const TLorentzVector &p, const TLorentzVector &v);  constructor ;  ;  TParticle (Int_t pdg, Int_t status, Int_t mother1, Int_t mother2, Int_t daughter1, Int_t daughter2, Double_t px, Double_t py, Double_t pz, Double_t etot, Double_t vx, Double_t vy, Double_t vz, Double_t time);  constructor ;  ;  ~TParticle () override;  destructor ;  ; Int_t Beauty () const;  Return beauty quantum number. ;  ; Int_t Charm () const;  Return charm quantum number. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a primary track. ;  ; Double_t Ek () const;  ; Double_t Energy () const;  ; Double_t Eta () const;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; Double_t GetCalcMass () const;  ; Int_t GetDaughter (Int_t i) const;  ; Int_t GetFirstDaughter () const;  ; Int_t GetFirstMother () const;  ; Int_t GetLastDaughter () const;  ; Double_t GetMass () const;  Return nominal particle mass from PDG table. ;  ; Int_t GetMother (Int_t i) const;  ; const char * Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveMCTrack.html:67,Guid,Guide,67,doc/master/classTEveMCTrack.html,https://root.cern,https://root.cern/doc/master/classTEveMCTrack.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveMacro Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TEveMacro Class ReferenceGraphics » 3D Graphics » Event Display. ; Sub-class of TMacro, overriding Exec to unload the previous version and cleanup after the execution. ; Definition at line 19 of file TEveMacro.h. Public Member Functions;  TEveMacro ();  Default constructor. ;  ;  TEveMacro (const char *name);  ;  TEveMacro (const TEveMacro &);  ;  ~TEveMacro () override;  ; Longptr_t Exec (const char *params=""0"", Int_t *error=nullptr) override;  Execute the macro. ;  ; TClass * IsA () const override;  ; void ResetRoot ();  Call gROOT->Reset() via interpreter. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMacro;  TMacro ();  Create an empty macro, use AddLine() or ReadFile() to fill this macro. ;  ;  TMacro (const char *name, const char *title="""");  Create a macro with a name and a title. ;  ;  TMacro (const TMacro &);  Copy constructor. ;  ; virtual ~TMacro ();  Delete this macro. ;  ; virtual TObjString * AddLine (const char *text);  Add line with text in the list of lines of this macro. ;  ; void Browse (TBrowser *b) override;  When clicking in the browser, the following action is performed on this macro, depending the content of the variable TMacro.Browse. ;  ; virtual TMD5 * Checksum ();  Returns checksum of the current content. ;  ; virtual TObjString * GetLineWith (const char *text) const;  Search the first line containing text. ;  ; TList * GetListOfLines () const;  ; TClass * IsA () const override;  ; virtual Bool_t Load () const;  Load the macro into the interpreter. ;  ; TMacro & operator= (const TMacro &);  Copy constructor. ;  ; void Paint (Option_t *option="""") override;  Execute this macro (called",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveMacro.html:65,Guid,Guide,65,doc/master/classTEveMacro.html,https://root.cern,https://root.cern/doc/master/classTEveMacro.html,1,['Guid'],['Guide']
Usability,. ROOT: TEveManager::TExceptionHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TEveManager::TExceptionHandler Class ReferenceGraphics » 3D Graphics » Event Display. ; Exception handler for Eve exceptions. ; Definition at line 71 of file TEveManager.h. Public Member Functions;  TExceptionHandler ();  ;  ~TExceptionHandler () override;  ; EStatus Handle (std::exception &exc) override;  Handle exceptions deriving from TEveException. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TStdExceptionHandler;  TStdExceptionHandler ();  Handle standard C++ exceptions intercepted by the TSystem::Run(). ;  ; virtual ~TStdExceptionHandler ();  ; void Add () override;  Add std::exception handler to system handler list. ;  ; TClass * IsA () const override;  ; Bool_t Notify () override;  Notify when signal occurs. ;  ; void Remove () override;  Remove std::exception handler from system handler list. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveManager_1_1TExceptionHandler.html:86,Guid,Guide,86,doc/master/classTEveManager_1_1TExceptionHandler.html,https://root.cern,https://root.cern/doc/master/classTEveManager_1_1TExceptionHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveParamList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveParamList Class ReferenceGraphics » 3D Graphics » Event Display. ; Collection of named parameters. ; Definition at line 24 of file TEveParamList.h. Classes; struct  BoolConfig_t;  ; struct  FloatConfig_t;  ; struct  IntConfig_t;  . Public Types; typedef BoolConfigVec_t::const_iterator BoolConfigVec_ci;  ; typedef BoolConfigVec_t::iterator BoolConfigVec_i;  ; typedef std::vector< BoolConfig_t > BoolConfigVec_t;  ; typedef FloatConfigVec_t::const_iterator FloatConfigVec_ci;  ; typedef FloatConfigVec_t::iterator FloatConfigVec_i;  ; typedef std::vector< FloatConfig_t > FloatConfigVec_t;  ; typedef IntConfigVec_t::const_iterator IntConfigVec_ci;  ; typedef IntConfigVec_t::iterator IntConfigVec_i;  ; typedef std::vector< IntConfig_t > IntConfigVec_t;  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveParamList.html:69,Guid,Guide,69,doc/master/classTEveParamList.html,https://root.cern,https://root.cern/doc/master/classTEveParamList.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveParamListEditor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveParamListEditor Class ReferenceGraphics » 3D Graphics » Event Display. ; GUI editor for TEveParamList. ; Slot methods from this object do not call Update, instead they call their model's ParamChanged(const char* name) function which emits a corresponding signal.; This helps in handling of parameter changes as they are probably related to displayed objects in a more complicated way. Further, the TGCheckButton::HandleButton() emits more signal after the Clicked() signal and if model is reset in the editor, its contents is removed. This results in a crash. ; Definition at line 122 of file TEveParamList.h. Public Member Functions;  TEveParamListEditor (const TGWindow *p=nullptr, Int_t width=170, Int_t height=30, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Constructor. ;  ;  ~TEveParamListEditor () override;  ; void DoBoolUpdate ();  Slot for bool parameter update. ;  ; void DoFloatUpdate ();  Slot for float parameter update. ;  ; void DoIntUpdate ();  Slot for integer parameter update. ;  ; TClass * IsA () const override;  ; void SetModel (TObject *obj) override;  Set model object. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGedFrame;  TGedFrame (const TGWindow *p=nullptr, Int_t width=140, Int_t height=30, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Constructor of the base GUI attribute frame. ;  ;  ~TGedFrame () override;  Destructor of the base GUI attribute frame. ;  ; virtual Bool_t AcceptModel (TObject *);  ; virtual void ActivateBaseClassEditors (TClass *cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveParamListEditor.html:75,Guid,Guide,75,doc/master/classTEveParamListEditor.html,https://root.cern,https://root.cern/doc/master/classTEveParamListEditor.html,1,['Guid'],['Guide']
Usability,". ROOT: TEvePlot3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEvePlot3D Class ReferenceGraphics » 3D Graphics » Event Display. ; Description of TEvePlot3D. ; Definition at line 18 of file TEvePlot3D.h. Public Member Functions;  TEvePlot3D (const char *n=""TEvePlot3D"", const char *t="""");  Constructor. ;  ;  ~TEvePlot3D () override;  ; Bool_t GetLogX () const;  ; Bool_t GetLogY () const;  ; Bool_t GetLogZ () const;  ; TObject * GetPlot () const;  ; TString GetPlotOption () const;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint this object. Only direct rendering is supported. ;  ; void SetLogX (Bool_t l);  ; void SetLogXYZ (Bool_t lx, Bool_t ly, Bool_t lz);  ; void SetLogY (Bool_t l);  ; void SetLogZ (Bool_t l);  ; void SetPlot (TObject *obj, const TString &opt);  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePlot3D.html:66,Guid,Guide,66,doc/master/classTEvePlot3D.html,https://root.cern,https://root.cern/doc/master/classTEvePlot3D.html,1,['Guid'],['Guide']
Usability,". ROOT: TEvePointSelector Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEvePointSelector Class ReferenceGraphics » 3D Graphics » Event Display. ; TEvePointSelector is a sub-class of TSelectorDraw for direct extraction of point-like data from a Tree. ; Definition at line 66 of file TEveTreeTools.h. Public Member Functions;  TEvePointSelector (TTree *t=nullptr, TEvePointSelectorConsumer *c=nullptr, const char *vexp="""", const char *sel="""");  Constructor. ;  ;  ~TEvePointSelector () override;  ; TEvePointSelectorConsumer * GetConsumer () const;  ; const char * GetSelection () const;  ; const char * GetSubIdExp () const;  ; Int_t GetSubIdNum () const;  ; TTree * GetTree () const;  ; const char * GetVarexp () const;  ; TClass * IsA () const override;  ; virtual Long64_t Select (const char *selection=nullptr);  Process the tree, select points matching 'selection'. ;  ; virtual Long64_t Select (TTree *t, const char *selection=nullptr);  Process tree 't', select points matching 'selection'. ;  ; void SetConsumer (TEvePointSelectorConsumer *c);  ; void SetSelection (const char *s);  ; void SetSubIdExp (const char *s);  ; void SetTree (TTree *t);  ; void SetVarexp (const char *v);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TakeAction () override;  Callback from tree-player after a chunk of data has been processed. ;  ;  Public Member Functions inherited from TSelectorDraw;  TSelectorDraw ();  Default selector constructor. ;  ;  ~TSelectorDraw () override;  Selector destructor. ;  ; void Begin (TTree *tree) override;  Called every time a loop on the tree(s) starts. ;  ; virtual Int_t GetAction () const;  ; virtual bool GetCleanElist () const;  ; virtual Int_t GetDime",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePointSelector.html:73,Guid,Guide,73,doc/master/classTEvePointSelector.html,https://root.cern,https://root.cern/doc/master/classTEvePointSelector.html,1,['Guid'],['Guide']
Usability,". ROOT: TEvePointSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEvePointSet Class ReferenceGraphics » 3D Graphics » Event Display. ; TEvePointSet is a render-element holding a collection of 3D points with optional per-point TRef and an arbitrary number of integer ids (to be used for signal, volume-id, track-id, etc). ; 3D point representation is implemented in base-class TPolyMarker3D. Per-point TRef is implemented in base-class TPointSet3D.; By using the TEvePointSelector the points and integer ids can be filled directly from a TTree holding the source data. Setting of per-point TRef's is not supported.; TEvePointSet is a TEveProjectable: it can be projected by using the TEveProjectionManager class. ; Definition at line 31 of file TEvePointSet.h. Public Member Functions;  TEvePointSet (const char *name, Int_t n_points=0, ETreeVarType_e tv_type=kTVT_XYZ);  Constructor. ;  ;  TEvePointSet (const TEvePointSet &e);  Copy constructor. ;  ;  TEvePointSet (Int_t n_points=0, ETreeVarType_e tv_type=kTVT_XYZ);  Constructor. ;  ;  ~TEvePointSet () override;  Destructor. ;  ; TEvePointSet * CloneElement () const override;  Clone the element via copy constructor. ;  ; virtual void ClonePoints (const TEvePointSet &e);  Clone points and all point-related information from point-set 'e'. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; Int_t GetIntIdsPerPoint () const;  ; const TGPicture * GetListTreeIcon (Bool_t open=kFALSE) override;  Return pointset ic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePointSet.html:68,Guid,Guide,68,doc/master/classTEvePointSet.html,https://root.cern,https://root.cern/doc/master/classTEvePointSet.html,1,['Guid'],['Guide']
Usability,". ROOT: TEvePointSetArray Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEvePointSetArray Class ReferenceGraphics » 3D Graphics » Event Display. ; An array of point-sets with each point-set playing a role of a bin in a histogram. ; When a new point is added to a TEvePointSetArray, an additional separating quantity needs to be specified: it determines into which TEvePointSet (bin) the point will actually be stored. Underflow and overflow bins are automatically created but they are not drawn by default.; By using the TEvePointSelector the points and the separating quantities can be filled directly from a TTree holding the source data. Setting of per-point TRef's is not supported.; After the filling, the range of separating variable can be controlled with a slider to choose a sub-set of PointSets that are actually shown. ; Definition at line 107 of file TEvePointSet.h. Public Member Functions;  TEvePointSetArray (const char *name=""TEvePointSetArray"", const char *title="""");  Constructor. ;  ;  ~TEvePointSetArray () override;  Destructor: deletes the fBins array. ;  ; void CloseBins ();  Call this after all the points have been filled. ;  ; Bool_t Fill (Double_t x, Double_t y, Double_t z, Double_t quant);  Add a new point. ;  ; TEvePointSet * GetBin (Int_t bin) const;  ; Double_t GetCurMax () const;  ; Double_t GetCurMin () const;  ; Int_t GetDefPointSetCapacity () const;  ; Double_t GetMax () const;  ; Double_t GetMin () const;  ; Int_t GetNBins () const;  ; void InitBins (const char *quant_name, Int_t nbins, Double_t min, Double_t max);  Initialize internal point-sets with given binning parameters. ;  ; TClass * IsA () const override;  ; void RemoveElementLocal (TEveElement *el) override;  Virtual from TEveElement, provide bin management. ;  ; void Remo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePointSetArray.html:73,Guid,Guide,73,doc/master/classTEvePointSetArray.html,https://root.cern,https://root.cern/doc/master/classTEvePointSetArray.html,1,['Guid'],['Guide']
Usability,". ROOT: TEvePointSetProjected Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; List of all members ; TEvePointSetProjected Class ReferenceGraphics » 3D Graphics » Event Display. ; Projected copy of a TEvePointSet. ; Definition at line 170 of file TEvePointSet.h. Public Member Functions;  TEvePointSetProjected ();  Default contructor. ;  ;  ~TEvePointSetProjected () override;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void PointSelected (Int_t id) override;  Virtual method of base class TPointSet3D. ;  ; void SetProjection (TEveProjectionManager *proj, TEveProjectable *model) override;  Set projection manager and projection model. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  Re-apply the projection. ;  ;  Public Member Functions inherited from TEvePointSet;  TEvePointSet (const char *name, Int_t n_points=0, ETreeVarType_e tv_type=kTVT_XYZ);  Constructor. ;  ;  TEvePointSet (const TEvePointSet &e);  Copy constructor. ;  ;  TEvePointSet (Int_t n_points=0, ETreeVarType_e tv_type=kTVT_XYZ);  Constructor. ;  ;  ~TEvePointSet () override;  Destructor. ;  ; TEvePointSet * CloneElement () const override;  Clone the element via copy constructor. ;  ; virtual void ClonePoints (const TEvePointSet &e);  Clone points and all point-related information from point-set 'e'. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePointSetProjected.html:77,Guid,Guide,77,doc/master/classTEvePointSetProjected.html,https://root.cern,https://root.cern/doc/master/classTEvePointSetProjected.html,1,['Guid'],['Guide']
Usability,". ROOT: TEvePolygonSetProjected Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TEvePolygonSetProjected Class ReferenceGraphics » 3D Graphics » Event Display. ; A set of projected polygons. ; Used for storage of projected geometrical shapes.; Internal struct Polygon_t holds only indices into the master vertex array in TEvePolygonSetProjected. ; Definition at line 21 of file TEvePolygonSetProjected.h. Classes; struct  Polygon_t;  . Public Member Functions;  TEvePolygonSetProjected (const char *n=""TEvePolygonSetProjected"", const char *t="""");  Constructor. ;  ;  ~TEvePolygonSetProjected () override;  Destructor. ;  ; void ComputeBBox () override;  Override of virtual method from TAttBBox. ;  ; void DumpBuffer3D ();  Dump information about currently projected buffer. ;  ; virtual void DumpPolys () const;  Dump information about built polygons. ;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void ProjectBuffer3D ();  Project current buffer. ;  ; void SetProjection (TEveProjectionManager *mng, TEveProjectable *model) override;  This is virtual method from base-class TEveProjected. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  This is virtual method from base-class TEveProjected. ;  ;  Public Member Functions inherited from TEveShape;  TEveShape (const char *n=""TEveShape"", const char *t="""");  Constructor. ;  ;  ~TEveShape () override;  Destructor. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; virtual Bool_t GetDrawFram",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePolygonSetProjected.html:79,Guid,Guide,79,doc/master/classTEvePolygonSetProjected.html,https://root.cern,https://root.cern/doc/master/classTEvePolygonSetProjected.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveProjectionAxes Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveProjectionAxes Class ReferenceGraphics » 3D Graphics » Event Display. ; Axes for non-linear projections. ; Show scale of TEveProjectionManager children. With different step mode tick-marks can positioned equidistant or placed with value monotonically increasing from lower left corner of bounding box. ; Definition at line 24 of file TEveProjectionAxes.h. Public Types; enum  EAxesMode { kHorizontal; , kVertical; , kAll; };  ; enum  ELabMode { kPosition; , kValue; };  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveProjectionAxes.html:74,Guid,Guide,74,doc/master/classTEveProjectionAxes.html,https://root.cern,https://root.cern/doc/master/classTEveProjectionAxes.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveProjectionManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveProjectionManager Class ReferenceGraphics » 3D Graphics » Event Display. ; Manager class for steering of projections and managing projected objects. ; Recursively projects TEveElement's and draws axis in the projected scene. It enables to interactively set TEveProjection parameters and updates projected scene accordingly. ; Definition at line 20 of file TEveProjectionManager.h. Public Member Functions;  TEveProjectionManager (TEveProjection::EPType_e type=TEveProjection::kPT_Unknown);  Constructor. ;  ;  ~TEveProjectionManager () override;  Destructor. ;  ; void AddDependent (TEveElement *el);  Add el as dependent element. ;  ; void ComputeBBox () override;  Virtual from TAttBBox; fill bounding-box information. ;  ; TEveVector & GetCenter ();  ; Float_t GetCurrentDepth () const;  ; Bool_t GetImportEmpty () const;  ; TEveProjection * GetProjection ();  ; Bool_t HandleElementPaste (TEveElement *el) override;  React to element being pasted or dnd-ed. ;  ; virtual TEveElement * ImportElements (TEveElement *el, TEveElement *ext_list=nullptr);  Recursively import elements and apply projection to the newly imported objects. ;  ; virtual TEveElement * ImportElementsRecurse (TEveElement *el, TEveElement *parent);  If el is TEveProjectable add projected instance else add plain TEveElementList to parent. ;  ; TClass * IsA () const override;  ; virtual void ProjectChildren ();  Project all children recursively, update bounding-box and notify TEveManger about the scenes that have been changed. ;  ; virtual void ProjectChildrenRecurse (TEveElement *el);  Project el (via TEveProjected::UpdateProjection()) and recurse through el's children. ;  ; void RemoveDependent (T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveProjectionManager.html:77,Guid,Guide,77,doc/master/classTEveProjectionManager.html,https://root.cern,https://root.cern/doc/master/classTEveProjectionManager.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveQuadSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveQuadSet Class ReferenceGraphics » 3D Graphics » Event Display. ; Supports various internal formats that result in rendering of a set of planar (lines, rectangles, hexagons with shared normal) objects. ; Names of internal structures and their variables use A, B and C as names for coordinate value-holders. Typical assignment is A->X, B->Y, C->Z but each render mode can override this convention and impose y or x as a fixed (third or C) coordinate. Alphabetic order is obeyed in this correspondence.; For quad modes the deltas are expected to be positive. For line modes negative deltas are ok. ; Definition at line 19 of file TEveQuadSet.h. Classes; struct  QFreeQuad_t;  ; struct  QHex_t;  ; struct  QLineFixC_t;  ; struct  QOrigin_t;  ; struct  QRect_t;  ; struct  QRectFixC_t;  ; struct  QRectFixDim_t;  ; struct  QRectFixDimC_t;  . Public Types; enum  EQuadType_e { ;   kQT_Undef; , kQT_FreeQuad; , kQT_RectangleXY; , kQT_RectangleXZ; , ;   kQT_RectangleYZ; , kQT_RectangleXYFixedDim; , kQT_RectangleXYFixedZ; , kQT_RectangleXZFixedY; , ;   kQT_RectangleYZFixedX; , kQT_RectangleXYFixedDimZ; , kQT_RectangleXZFixedDimY; , kQT_RectangleYZFixedDimX; , ;   kQT_Rectangle_End; , kQT_LineXYFixedZ; , kQT_LineXZFixedY; , kQT_Line_End; , ;   kQT_HexagonXY; , kQT_HexagonYX; , kQT_Hexagon_End. };  ;  Public Types inherited from TEveDigitSet; typedef void(* Callback_foo) (TEveDigitSet *, Int_t, TObject *);  ; enum  ERenderMode_e { kRM_AsIs; , kRM_Line; , kRM_Fill; };  ; typedef TString(* TooltipCB_foo) (TEveDigitSet *, Int_t);  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveQuadSet.html:67,Guid,Guide,67,doc/master/classTEveQuadSet.html,https://root.cern,https://root.cern/doc/master/classTEveQuadSet.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveRGBAPalette Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveRGBAPalette Class ReferenceGraphics » 3D Graphics » Event Display. ; A generic, speed-optimised mapping from value to RGBA color supporting different wrapping and range truncation modes. ; Flag fFixColorRange: specifies how the palette is mapped to signal values:; true - LowLimit -> HighLimit; false - MinValue -> MaxValue . Definition at line 22 of file TEveRGBAPalette.h. Public Types; enum  ELimitAction_e { kLA_Cut; , kLA_Mark; , kLA_Clip; , kLA_Wrap; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TEveRGBAPalette ();  Constructor. ;  ;  TEveRGBAPalette (Int_t min, Int_t max, Bool_t interp=kTRUE, Bool_t showdef=kTRUE, Bool_t fixcolrng=kFALSE);  Constructor. ;  ;  ~TEveRGBAPalette () override;  Destructor. ;  ; void ClearColorArray ();  Clear internal color array. ;  ; const UChar_t * ColorFromValue (Int_t val) const;  ; Bool_t ColorFromValue (Int_t val, Int_t defVal, UChar_t *pix, Bool_t alpha=kTRUE) const;  ; void ColorFromValue (Int_t val, UChar_t *pix, Bool_t alpha=kTRUE) const;  ; Color_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveRGBAPalette.html:71,Guid,Guide,71,doc/master/classTEveRGBAPalette.html,https://root.cern,https://root.cern/doc/master/classTEveRGBAPalette.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveRecCascade Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TEveRecCascade Class Reference. . Definition at line 228 of file TEveVSDStructs.h. Public Member Functions;  TEveRecCascade ();  ;  ~TEveRecCascade () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveRecCascade.html:70,Guid,Guide,70,doc/master/classTEveRecCascade.html,https://root.cern,https://root.cern/doc/master/classTEveRecCascade.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveRecKink Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TEveRecKink Class Reference. . Definition at line 162 of file TEveVSDStructs.h. Public Member Functions;  TEveRecKink ();  ;  ~TEveRecKink () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveRecKink.html:67,Guid,Guide,67,doc/master/classTEveRecKink.html,https://root.cern,https://root.cern/doc/master/classTEveRecKink.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveRecTrackT< TT > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TEveRecTrackT< TT > Class Template Reference. ; template<typename TT>; class TEveRecTrackT< TT >; Definition at line 129 of file TEveVSDStructs.h. Public Member Functions;  TEveRecTrackT ();  ;  ~TEveRecTrackT () override;  ; TClass * IsA () const override;  ; Float_t Pt ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveRecTrackT.html:84,Guid,Guide,84,doc/master/classTEveRecTrackT.html,https://root.cern,https://root.cern/doc/master/classTEveRecTrackT.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveRecV0 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TEveRecV0 Class Reference. . Definition at line 197 of file TEveVSDStructs.h. Public Member Functions;  TEveRecV0 ();  ;  ~TEveRecV0 () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritanc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveRecV0.html:65,Guid,Guide,65,doc/master/classTEveRecV0.html,https://root.cern,https://root.cern/doc/master/classTEveRecV0.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveScalableStraightLineSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveScalableStraightLineSet Class ReferenceGraphics » 3D Graphics » Event Display. ; Straight-line-set with extra scaling, useful for projectables that need to be scaled in accordance with an external object. ; Definition at line 17 of file TEveScalableStraightLineSet.h. Public Member Functions;  TEveScalableStraightLineSet (const char *n=""ScalableStraightLineSet"", const char *t="""");  Constructor. ;  ;  ~TEveScalableStraightLineSet () override;  ; Double_t GetScale () const;  Return current scale. ;  ; TClass * IsA () const override;  ; void SetScale (Double_t scale);  Loop over line parameters and scale coordinates. ;  ; void SetScaleCenter (Float_t x, Float_t y, Float_t z);  Set scale center. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveStraightLineSet;  TEveStraightLineSet (const char *n=""StraightLineSet"", const char *t="""");  Constructor. ;  ;  ~TEveStraightLineSet () override;  ; Line_t * AddLine (const TEveVector &p1, const TEveVector &p2);  Add a line. ;  ; Line_t * AddLine (Float_t x1, Float_t y1, Float_t z1, Float_t x2, Float_t y2, Float_t z2);  Add a line. ;  ; Marker_t * AddMarker (const TEveVector &p, Int_t line_id=-1);  Add a marker with given position. ;  ; Marker_t * AddMarker (Float_t x, Float_t y, Float_t z, Int_t line_id=-1);  Add a marker with given position. ;  ; Marker_t * AddMarker (Int_t line_id, Float_t pos);  Add a marker for line with given index on relative position pos. ;  ; void ComputeBBox () override;  Compute bounding-box. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; virtual Bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveScalableStraightLineSet.html:83,Guid,Guide,83,doc/master/classTEveScalableStraightLineSet.html,https://root.cern,https://root.cern/doc/master/classTEveScalableStraightLineSet.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveScene Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveScene Class ReferenceGraphics » 3D Graphics » Event Display. ; Eve representation of TGLScene. ; The GLScene is owned by this class - it is created on construction time and deleted at destruction.; Normally all objects are positioned directly in global scene-space. By setting the fHierarchical flag, positions of children get calculated by multiplying the transformation matrices of all parents. ; Definition at line 26 of file TEveScene.h. Public Member Functions;  TEveScene (const char *n=""TEveScene"", const char *t="""");  Constructor. ;  ;  TEveScene (TGLScenePad *gl_scene, const char *n=""TEveScene"", const char *t="""");  Constructor. ;  ;  ~TEveScene () override;  Destructor. ;  ; void Changed ();  ; void CollectSceneParents (List_t &scenes) override;  Virtual from TEveElement; here we simply append this scene to the list. ;  ; void DestroyElementRenderers (TEveElement *element);  Remove element from the scene. ;  ; void DestroyElementRenderers (TObject *rnrObj);  Remove element represented by object rnrObj from the scene. ;  ; TGLScenePad * GetGLScene () const;  ; Bool_t GetHierarchical () const;  ; const TGPicture * GetListTreeIcon (Bool_t open=kFALSE) override;  Return icon for scene. ;  ; TClass * IsA () const override;  ; Bool_t IsChanged () const;  ; void Paint (Option_t *option="""") override;  Paint the scene. Iterate over children and calls PadPaint(). ;  ; void Repaint (Bool_t dropLogicals=kFALSE);  Repaint the scene. ;  ; void RetransHierarchically ();  Entry point for hierarchical transformation update. ;  ; void SetGLScene (TGLScenePad *s);  ; void SetHierarchical (Bool_t h);  ; void SetName (const char *n) override;  Set scene's name. ;  ; Bool_t SingleRnr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveScene.html:65,Guid,Guide,65,doc/master/classTEveScene.html,https://root.cern,https://root.cern/doc/master/classTEveScene.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveSceneInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveSceneInfo Class ReferenceGraphics » 3D Graphics » Event Display. ; TEveUtil representation of TGLSceneInfo. ; Definition at line 23 of file TEveSceneInfo.h. Public Member Functions;  TEveSceneInfo (TEveViewer *viewer, TEveScene *scene, TGLSceneInfo *sinfo);  Constructor. ;  ;  ~TEveSceneInfo () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Virtual from TEveElement. ;  ; void AddStamp (UChar_t bits) override;  Override from TEveElement. ;  ; TGLSceneBase * GetGLScene () const;  Return the TGLSceneBase represented by this SceneInfo object. ;  ; TGLSceneInfo * GetGLSceneInfo () const;  ; TEveScene * GetScene () const;  ; TEveViewer * GetViewer () const;  ; Bool_t HandleElementPaste (TEveElement *el) override;  Virtual from TEveElement. ;  ; TClass * IsA () const override;  ; Bool_t SingleRnrState () const override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElement;  TEveElement ();  Default constructor. ;  ;  TEveElement (Color_t &main_color);  Constructor. ;  ;  TEveElement (const TEveElement &e);  Copy constructor. ;  ; virtual ~TEveElement ();  Destructor. ;  ; virtual void AddElement (TEveElement *el);  Add el to the list of children. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TEveElement *parent);  Add this render element into ltree to all items belonging to parent. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Add this element into ltree to an already existing item parent_lti. ;  ; virtual TGListTreeItem * AddIntoListTrees (TEveElement *parent);  Add this render element into all list-trees an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveSceneInfo.html:69,Guid,Guide,69,doc/master/classTEveSceneInfo.html,https://root.cern,https://root.cern/doc/master/classTEveSceneInfo.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveSceneList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; TEveSceneList Class ReferenceGraphics » 3D Graphics » Event Display. ; List of Scenes providing common operations on TEveScene collections. ; Definition at line 79 of file TEveScene.h. Public Member Functions;  TEveSceneList (const char *n=""TEveSceneList"", const char *t="""");  Constructor. ;  ;  ~TEveSceneList () override;  ; void DestroyElementRenderers (TEveElement *element);  Loop over all scenes and remove all instances of element from them. ;  ; void DestroyScenes ();  Destroy all scenes and their contents. ;  ; TClass * IsA () const override;  ; void ProcessSceneChanges (Bool_t dropLogicals, TExMap *stampMap);  Loop over all scenes and update them accordingly: ;  ; void RepaintAllScenes (Bool_t dropLogicals);  Repaint all scenes. ;  ; void RepaintChangedScenes (Bool_t dropLogicals);  Repaint scenes that are tagged as changed. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveSceneList.html:69,Guid,Guide,69,doc/master/classTEveSceneList.html,https://root.cern,https://root.cern/doc/master/classTEveSceneList.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveSelection Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveSelection Class ReferenceGraphics » 3D Graphics » Event Display. ; Make sure there is a SINGLE running TEveSelection for each selection type (select/highlight). ; Definition at line 21 of file TEveSelection.h. Public Types; enum  EPickToSelect { ;   kPS_Ignore; , kPS_Element; , kPS_Projectable; , kPS_Compound; , ;   kPS_PableCompound; , kPS_Master. };  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveSelection.html:69,Guid,Guide,69,doc/master/classTEveSelection.html,https://root.cern,https://root.cern/doc/master/classTEveSelection.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveSelectorToEventList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveSelectorToEventList Class ReferenceGraphics » 3D Graphics » Event Display. ; TSelector that stores entry numbers of matching TTree entries into an event-list. ; Definition at line 22 of file TEveTreeTools.h. Public Member Functions;  TEveSelectorToEventList (TEventList *evl, const char *sel);  Constructor. ;  ; TClass * IsA () const override;  ; Bool_t Process (Long64_t entry) override;  Process entry. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Version () const override;  ;  Public Member Functions inherited from TSelectorDraw;  TSelectorDraw ();  Default selector constructor. ;  ;  ~TSelectorDraw () override;  Selector destructor. ;  ; void Begin (TTree *tree) override;  Called every time a loop on the tree(s) starts. ;  ; virtual Int_t GetAction () const;  ; virtual bool GetCleanElist () const;  ; virtual Int_t GetDimension () const;  ; virtual Long64_t GetDrawFlag () const;  ; Int_t GetMultiplicity () const;  ; virtual Int_t GetNfill () const;  ; TObject * GetObject () const;  ; TH1 * GetOldHistogram () const;  ; TTreeFormula * GetSelect () const;  ; virtual Long64_t GetSelectedRows () const;  ; TTree * GetTree () const;  ; virtual Double_t * GetV1 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetV2 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetV3 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetV4 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetVal (Int_t i) const;  Return the last values corresponding to the i-th component of the formula being processed (where the component are ':' separated). ;  ; TT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveSelectorToEventList.html:79,Guid,Guide,79,doc/master/classTEveSelectorToEventList.html,https://root.cern,https://root.cern/doc/master/classTEveSelectorToEventList.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveShape Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveShape Class ReferenceGraphics » 3D Graphics » Event Display. ; Abstract base-class for 2D/3D shapes. ; It provides:; fill color / transparency, accessible via Get/SetMainColor/Transparency;; frame line color / width;; flag if frame should be drawn;; flag specifying whether frame or whole shape should be emphasised for highlight. . Definition at line 23 of file TEveShape.h. Public Types; typedef std::vector< TEveVector2 >::iterator vVector2_i;  ; typedef std::vector< TEveVector2 > vVector2_t;  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveShape.html:65,Guid,Guide,65,doc/master/classTEveShape.html,https://root.cern,https://root.cern/doc/master/classTEveShape.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveStraightLineSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveStraightLineSet Class ReferenceGraphics » 3D Graphics » Event Display. ; Set of straight lines with optional markers along the lines. ; Definition at line 31 of file TEveStraightLineSet.h. Classes; struct  Line_t;  ; struct  Marker_t;  . Public Member Functions;  TEveStraightLineSet (const char *n=""StraightLineSet"", const char *t="""");  Constructor. ;  ;  ~TEveStraightLineSet () override;  ; Line_t * AddLine (const TEveVector &p1, const TEveVector &p2);  Add a line. ;  ; Line_t * AddLine (Float_t x1, Float_t y1, Float_t z1, Float_t x2, Float_t y2, Float_t z2);  Add a line. ;  ; Marker_t * AddMarker (const TEveVector &p, Int_t line_id=-1);  Add a marker with given position. ;  ; Marker_t * AddMarker (Float_t x, Float_t y, Float_t z, Int_t line_id=-1);  Add a marker with given position. ;  ; Marker_t * AddMarker (Int_t line_id, Float_t pos);  Add a marker for line with given index on relative position pos. ;  ; void ComputeBBox () override;  Compute bounding-box. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; virtual Bool_t GetDepthTest ();  ; TEveChunkManager & GetLinePlex ();  ; TEveChunkManager & GetMarkerPlex ();  ; virtual Bool_t GetRnrLines ();  ; virtual Bool_t GetRnrMarkers ();  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint the line-set. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Return class of projected object. ;  ; virtual void SetDepthTest (Bool_t x);  ; void SetLine (int idx, const TEveVector &p1, const TEveVector &p2);  Set line vertices with given index. ;  ; void SetLine (int idx, Float_t x1, Float_t y1, Float_t z1, Float_t x2, F",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveStraightLineSet.html:75,Guid,Guide,75,doc/master/classTEveStraightLineSet.html,https://root.cern,https://root.cern/doc/master/classTEveStraightLineSet.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveStraightLineSetProjected Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; List of all members ; TEveStraightLineSetProjected Class ReferenceGraphics » 3D Graphics » Event Display. ; Projected replica of a TEveStraightLineSet. ; Definition at line 126 of file TEveStraightLineSet.h. Public Member Functions;  TEveStraightLineSetProjected ();  Constructor. ;  ;  ~TEveStraightLineSetProjected () override;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void SetProjection (TEveProjectionManager *mng, TEveProjectable *model) override;  Set projection manager and model object. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  Callback that actually performs the projection. ;  ;  Public Member Functions inherited from TEveStraightLineSet;  TEveStraightLineSet (const char *n=""StraightLineSet"", const char *t="""");  Constructor. ;  ;  ~TEveStraightLineSet () override;  ; Line_t * AddLine (const TEveVector &p1, const TEveVector &p2);  Add a line. ;  ; Line_t * AddLine (Float_t x1, Float_t y1, Float_t z1, Float_t x2, Float_t y2, Float_t z2);  Add a line. ;  ; Marker_t * AddMarker (const TEveVector &p, Int_t line_id=-1);  Add a marker with given position. ;  ; Marker_t * AddMarker (Float_t x, Float_t y, Float_t z, Int_t line_id=-1);  Add a marker with given position. ;  ; Marker_t * AddMarker (Int_t line_id, Float_t pos);  Add a marker for line with given index on relative position pos. ;  ; void ComputeBBox () override;  Compute bounding-box. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; virtual Bool_t GetDepthTest ();  ; TEveCh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveStraightLineSetProjected.html:84,Guid,Guide,84,doc/master/classTEveStraightLineSetProjected.html,https://root.cern,https://root.cern/doc/master/classTEveStraightLineSetProjected.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveText Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveText Class ReferenceGraphics » 3D Graphics » Event Display. ; TEveElement class used for displaying FreeType GL fonts. ; Holds a set of parameters to define FTGL font and its rendering style. ; Definition at line 21 of file TEveText.h. Public Member Functions;  TEveText (const char *txt="""");  Constructor. ;  ;  ~TEveText () override;  ; void ComputeBBox () override;  Fill bounding-box information. ;  ; Bool_t GetAutoLighting () const;  ; Float_t GetExtrude () const;  ; Int_t GetFontFile () const;  ; Int_t GetFontMode () const;  ; Int_t GetFontSize () const;  ; Bool_t GetLighting () const;  ; const TGPicture * GetListTreeIcon (Bool_t open=kFALSE) override;  Return TEveText icon. ;  ; Float_t GetPolygonOffset (Int_t i) const;  ; const char * GetText () const;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint this object. Only direct rendering is supported. ;  ; void SetAutoLighting (Bool_t isOn);  ; void SetExtrude (Float_t x);  ; void SetFontFile (const char *name);  Set font file regarding to static TGLFontManager fgFontFileArray. ;  ; void SetFontFile (Int_t file);  ; void SetFontMode (Int_t mode);  Set FTFont class ID. ;  ; void SetFontSize (Int_t size, Bool_t validate=kTRUE);  Set valid font size. ;  ; void SetLighting (Bool_t isOn);  ; void SetPolygonOffset (Float_t factor, Float_t units);  Set the scale and units used to calculate depth values. ;  ; void SetText (const char *t);  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElement;  TEveElement ();  Default constructor. ;  ;  TEveElement (Color_t &main_color);  Constructor. ;  ;  TEveElement (const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveText.html:64,Guid,Guide,64,doc/master/classTEveText.html,https://root.cern,https://root.cern/doc/master/classTEveText.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveTrack Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveTrack Class ReferenceGraphics » 3D Graphics » Event Display. ; Visual representation of a track. ; If member fDpDs is set, the momentum is reduced on all path-marks that do not fix the momentum according to the distance travelled from the previous pathmark. ; Definition at line 32 of file TEveTrack.h. Public Types; enum  EBreakProjectedTracks_e { kBPTDefault; , kBPTAlways; , kBPTNever; };  ; typedef vPathMark_t::const_iterator vPathMark_ci;  ; typedef vPathMark_t::iterator vPathMark_i;  ; typedef std::vector< TEvePathMarkD > vPathMark_t;  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrack.html:65,Guid,Guide,65,doc/master/classTEveTrack.html,https://root.cern,https://root.cern/doc/master/classTEveTrack.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveTrackList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveTrackList Class ReferenceGraphics » 3D Graphics » Event Display. ; A list of tracks supporting change of common attributes and selection based on track parameters. ; Definition at line 137 of file TEveTrack.h. Public Member Functions;  TEveTrackList (const char *name, TEveTrackPropagator *prop=nullptr);  Constructor. ;  ;  TEveTrackList (TEveTrackPropagator *prop=nullptr);  Constructor. ;  ;  ~TEveTrackList () override;  Destructor. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; void FindMomentumLimits (Bool_t recurse=kTRUE);  Loop over children and find highest pT and p of contained TEveTracks. ;  ; TEveTrack * FindTrackByIndex (Int_t index);  Find track by index, select it and display it in the editor. ;  ; TEveTrack * FindTrackByLabel (Int_t label);  Find track by label, select it and display it in the editor. ;  ; Double_t GetLimP () const;  ; Double_t GetLimPt () const;  ; Double_t GetMaxP () const;  ; Double_t GetMaxPt () const;  ; Double_t GetMinP () const;  ; Double_t GetMinPt () const;  ; TEveTrackPropagator * GetPropagator ();  ; Bool_t GetRecurse () const;  ; Bool_t GetRnrLine () const;  ; Bool_t GetRnrPoints () const;  ; TClass * IsA () const override;  ; void MakeTracks (Bool_t recurse=kTRUE);  Regenerate the visual representations of tracks. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveTrackListProjected class. ;  ; void SelectByP (Double_t min_p, Double_t max_p);  Select visibility of tracks by momentum. ;  ; void SelectByP (Double_t min_p, Double_t max_p, TEveElement *el);  Select visibility of el's chil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrackList.html:69,Guid,Guide,69,doc/master/classTEveTrackList.html,https://root.cern,https://root.cern/doc/master/classTEveTrackList.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveTrackListProjected Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; List of all members ; TEveTrackListProjected Class ReferenceGraphics » 3D Graphics » Event Display. ; Specialization of TEveTrackList for holding TEveTrackProjected objects. ; Definition at line 60 of file TEveTrackProjected.h. Public Member Functions;  TEveTrackListProjected ();  Default constructor. ;  ;  ~TEveTrackListProjected () override;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void SetDepth (Float_t d) override;  Set depth of all children inheriting from TEveTrackProjected. ;  ; virtual void SetDepth (Float_t d, TEveElement *el);  Set depth of all children of el inheriting from TEveTrackProjected. ;  ; void SetProjection (TEveProjectionManager *proj, TEveProjectable *model) override;  This is virtual method from base-class TEveProjected. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  ;  Public Member Functions inherited from TEveTrackList;  TEveTrackList (const char *name, TEveTrackPropagator *prop=nullptr);  Constructor. ;  ;  TEveTrackList (TEveTrackPropagator *prop=nullptr);  Constructor. ;  ;  ~TEveTrackList () override;  Destructor. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; void FindMomentumLimits (Bool_t recurse=kTRUE);  Loop over children and find highest pT and p of contained TEveTracks. ;  ; TEveTrack * FindTrackByIndex (Int_t index);  Find track by index, select it and display it in the editor. ;  ; TEveTrack * FindTrackByLabel (Int_t label);  Find track by label, select it and display it in the editor. ;  ; Double_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrackListProjected.html:78,Guid,Guide,78,doc/master/classTEveTrackListProjected.html,https://root.cern,https://root.cern/doc/master/classTEveTrackListProjected.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveTrackProjected Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TEveTrackProjected Class ReferenceGraphics » 3D Graphics » Event Display. ; Projected copy of a TEveTrack. ; Definition at line 19 of file TEveTrackProjected.h. Public Member Functions;  TEveTrackProjected ();  Default constructor. ;  ;  ~TEveTrackProjected () override;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void MakeTrack (Bool_t recurse=kTRUE) override;  Calculate the points of the track for drawing. ;  ; void PrintLineSegments ();  Print line segments info. ;  ; void SecSelected (TEveTrack *) override;  Virtual method from from base-class TEveTrack. ;  ; void SetProjection (TEveProjectionManager *mng, TEveProjectable *model) override;  This is virtual method from base-class TEveProjected. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  Virtual method from base-class TEveProjected. ;  ;  Public Member Functions inherited from TEveTrack;  TEveTrack ();  Default constructor. ;  ;  TEveTrack (const TEveTrack &t);  Copy constructor. ;  ;  TEveTrack (TEveMCTrack *t, TEveTrackPropagator *prop=nullptr);  ;  TEveTrack (TEveRecTrack *t, TEveTrackPropagator *prop=nullptr);  Constructor from TEveRecTrack<float> reconstructed track. ;  ;  TEveTrack (TEveRecTrackD *t, TEveTrackPropagator *prop=nullptr);  Constructor from TEveRecTrack<double> reconstructed track. ;  ;  TEveTrack (TParticle *t, Int_t label, TEveTrackPropagator *prop=nullptr);  Constructor from TParticle. ;  ;  ~TEveTrack () override;  Destructor. ;  ; void AddPathMark (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrackProjected.html:74,Guid,Guide,74,doc/master/classTEveTrackProjected.html,https://root.cern,https://root.cern/doc/master/classTEveTrackProjected.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveTrackPropagator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveTrackPropagator Class ReferenceGraphics » 3D Graphics » Event Display. ; Holding structure for a number of track rendering parameters. ; Calculates path taking into account the parameters.; NOTE: Magnetic field direction convention is inverted.; This is decoupled from TEveTrack/TEveTrackList to allow sharing of the Propagator among several instances. Back references are kept so the tracks can be recreated when the parameters change.; TEveTrackList has Get/Set methods for RnrStlye. TEveTrackEditor and TEveTrackListEditor provide editor access.; Enum EProjTrackBreaking_e and member fProjTrackBreaking specify whether 2D projected tracks get broken into several segments when the projected space consists of separate domains (like Rho-Z). The track-breaking is enabled by default. ; Definition at line 121 of file TEveTrackPropagator.h. Classes; struct  Helix_t;  . Public Types; enum  EProjTrackBreaking_e { kPTB_Break; , kPTB_UseFirstPointPos; , kPTB_UseLastPointPos; };  ; enum  EStepper_e { kHelix; , kRungeKutta; };  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrackPropagator.html:75,Guid,Guide,75,doc/master/classTEveTrackPropagator.html,https://root.cern,https://root.cern/doc/master/classTEveTrackPropagator.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveTrans Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TEveTrans Class ReferenceGraphics » 3D Graphics » Event Display. ; TEveTrans is a 4x4 transformation matrix for homogeneous coordinates stored internally in a column-major order to allow direct usage by GL. ; The element type is Double32_t as statically the floats would be precise enough but continuous operations on the matrix must retain precision of column vectors.; Cartan angles are stored in fA[1-3] (+z, -y, +x). They are recalculated on demand.; Direct element access (first two should be used with care):; operator[i] direct access to elements, i:0->15; CM(i,j) element 4*j + i; i,j:0->3 { CM ~ c-matrix }; operator(i,j) element 4*(j-1) + i - 1 i,j:1->4. Column-vector access: USet Get/SetBaseVec(), Get/SetPos() and Arr[XYZT]() methods.; For all methods taking the matrix indices: 1->X, 2->Y, 3->Z; 4->Position (if applicable). 0 reserved for time.; Shorthands in method-names: LF ~ LocalFrame; PF ~ ParentFrame; IP ~ InPlace ; Definition at line 26 of file TEveTrans.h. Public Member Functions;  TEveTrans ();  Default constructor. ;  ;  TEveTrans (const Double_t arr[16]);  Constructor. ;  ;  TEveTrans (const Float_t arr[16]);  Constructor. ;  ;  TEveTrans (const TEveTrans &t);  Constructor. ;  ;  ~TEveTrans () override;  ; Double_t * Array ();  ; const Double_t * Array () const;  ; Double_t * ArrT ();  ; const Double_t * ArrT () const;  ; Double_t * ArrX ();  ; const Double_t * ArrX () const;  ; Double_t * ArrY ();  ; const Double_t * ArrY () const;  ; Double_t * ArrZ ();  ; const Double_t * ArrZ () const;  ; Double_t & CM (Int_t i, Int_t j);  ; Double_t CM (Int_t i, Int_t j) const;  ; TVector3 GetBaseVec (Int_t b) const;  Get base-vector with index b. ;  ; void GetBaseVec (Int_t b, TVect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrans.html:65,Guid,Guide,65,doc/master/classTEveTrans.html,https://root.cern,https://root.cern/doc/master/classTEveTrans.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveTriangleSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveTriangleSet Class ReferenceGraphics » 3D Graphics » Event Display. ; Made from a list of vertices and a list of triangles (triplets of vertex indices). ; If input is composed from triangles with direct vertex coordinates one should consider finding all occurrences of the same vertex and specifying it only once. ; Definition at line 23 of file TEveTriangleSet.h. Public Member Functions;  TEveTriangleSet (Int_t nv, Int_t nt, Bool_t norms=kFALSE, Bool_t cols=kFALSE);  Constructor. ;  ;  ~TEveTriangleSet () override;  Destructor. ;  ; Bool_t CanEditMainTransparency () const override;  ; void ComputeBBox () override;  Compute bounding box. ;  ; void GenerateRandomColors ();  Assign random colors to all triangles. ;  ; void GenerateTriangleNormals ();  Generate triangle normals via cross product of triangle edges. ;  ; void GenerateZNormalColors (Float_t fac=20, Int_t min=-20, Int_t max=20, Bool_t interp=kFALSE, Bool_t wrap=kFALSE);  Generate triangle colors by the z-component of the normal. ;  ; Int_t GetNTrings () const;  ; Int_t GetNVerts () const;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint this object. Only direct rendering is supported. ;  ; void SetTransparency (Char_t tr);  ; void SetTriangle (Int_t i, Int_t v0, Int_t v1, Int_t v2);  ; void SetTriangleColor (Int_t i, UChar_t r, UChar_t g, UChar_t b, UChar_t a=255);  ; void SetVertex (Int_t i, Float_t x, Float_t y, Float_t z);  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t * Triangle (Int_t i);  ; UChar_t * TriangleColor (Int_t i);  ; Float_t * TriangleNormal (Int_t i);  ; Float_t * Vertex (Int_t i);  ;  Public Member ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTriangleSet.html:71,Guid,Guide,71,doc/master/classTEveTriangleSet.html,https://root.cern,https://root.cern/doc/master/classTEveTriangleSet.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveVSD Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Attributes |; Private Member Functions |; List of all members ; TEveVSD Class ReferenceGraphics » 3D Graphics » Event Display. ; Visualization Summary Data - a collection of trees holding standard event data in experiment independent format. ; Definition at line 19 of file TEveVSD.h. Public Member Functions;  TEveVSD (const char *name=""TEveVSD"", const char *title="""");  Constructor. ;  ;  ~TEveVSD () override;  Destructor. ;  ; virtual void CreateBranches ();  Create internal VSD branches. ;  ; virtual void CreateTrees ();  Create internal trees. ;  ; virtual void DeleteTrees ();  Delete internal trees. ;  ; TClass * IsA () const override;  ; virtual void LoadTrees ();  Load internal trees from directory. ;  ; virtual void SetBranchAddresses ();  Set branche addresses of internal trees. ;  ; virtual void SetDirectory (TDirectory *dir);  Set directory in which the trees are (or will be) created. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void WriteTrees ();  Does nothing here ... reimplemented in sub-classes. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveVSD.html:63,Guid,Guide,63,doc/master/classTEveVSD.html,https://root.cern,https://root.cern/doc/master/classTEveVSD.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveViewer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TEveViewer Class ReferenceGraphics » 3D Graphics » Event Display. ; Eve representation of TGLViewer. ; The gl-viewer is owned by this class and is deleted in destructor.; The frame is not deleted, it is expected that the gl-viewer implementation will delete that. TGLSAViewer and TGEmbeddedViewer both do so. This could be an optional argument to SetGLViewer. A frame could be passed as well.; When stand-alone viewer is requested, it will come up with menu-hiding enabled by default. If you dislike this, add the following line to rootrc file (or set corresponding gEnv entry in application initialization): Eve.Viewer.HideMenus: off. Definition at line 30 of file TEveViewer.h. Public Member Functions;  TEveViewer (const char *n=""TEveViewer"", const char *t="""");  Constructor. ;  ;  ~TEveViewer () override;  Destructor. ;  ; virtual void AddScene (TEveScene *scene);  Add 'scene' to the list of scenes. ;  ; TObject * GetEditorObject (const TEveException &eh=""TEveViewer::GetEditorObject "") const override;  Object to be edited when this is selected, returns the TGLViewer. ;  ; TGLViewer * GetGLViewer () const;  ; const TGPicture * GetListTreeIcon (Bool_t open=kFALSE) override;  Return TEveViewer icon. ;  ; Bool_t HandleElementPaste (TEveElement *el) override;  Receive a pasted object. ;  ; TClass * IsA () const override;  ; void PostDock () override;  Virtual function called after a window is docked. ;  ; void PreUndock () override;  Virtual function called before a window is undocked. ;  ; void Redraw (Bool_t resetCameras=kFALSE);  Redraw viewer immediately. ;  ; void RemoveElementLocal (TEveElement *el) override;  Remove element 'el' from t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveViewer.html:66,Guid,Guide,66,doc/master/classTEveViewer.html,https://root.cern,https://root.cern/doc/master/classTEveViewer.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveViewerList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveViewerList Class ReferenceGraphics » 3D Graphics » Event Display. ; List of Viewers providing common operations on TEveViewer collections. ; Definition at line 79 of file TEveViewer.h. Public Member Functions;  TEveViewerList (const char *n=""TEveViewerList"", const char *t="""");  ;  ~TEveViewerList () override;  Destructor. ;  ; void AddElement (TEveElement *el) override;  Call base-class implementation. ;  ; virtual void Connect ();  Connect to TGLViewer class-signals. ;  ; void DeleteAnnotations ();  Delete annotations from all viewers. ;  ; virtual void Disconnect ();  Disconnect from TGLViewer class-signals. ;  ; Float_t GetColorBrightness () const;  ; Bool_t GetShowTooltip () const;  ; TClass * IsA () const override;  ; void OnClicked (TObject *obj, UInt_t button, UInt_t state);  Slot for global TGLViewer::Clicked(). ;  ; void OnMouseOver (TObject *obj, UInt_t state);  Slot for global TGLViewer::MouseOver() signal. ;  ; void OnReClicked (TObject *obj, UInt_t button, UInt_t state);  Slot for global TGLViewer::ReClicked(). ;  ; void OnReMouseOver (TObject *obj, UInt_t state);  Slot for global TGLViewer::ReMouseOver(). ;  ; void OnUnClicked (TObject *obj, UInt_t button, UInt_t state);  Slot for global TGLViewer::UnClicked(). ;  ; void OnUnMouseOver (TObject *obj, UInt_t state);  Slot for global TGLViewer::UnMouseOver(). ;  ; void RemoveElementLocal (TEveElement *el) override;  Decompoundofy el, call base-class version. ;  ; void RemoveElementsLocal () override;  Decompoundofy children, call base-class version. ;  ; void RepaintAllViewers (Bool_t resetCameras, Bool_t dropLogicals);  Repaint all viewers. ;  ; void RepaintChangedViewers (Bool_t resetCameras, Bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveViewerList.html:70,Guid,Guide,70,doc/master/classTEveViewerList.html,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveWindow Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveWindow Class ReferenceabstractGraphics » 3D Graphics » Event Display. ; Abstract base-class for representing eve-windows. ; Sub-classes define a particular GUI frame that gets showin the window. ; Definition at line 209 of file TEveWindow.h. Public Member Functions;  TEveWindow (const char *n=""TEveWindow"", const char *t="""");  ;  ~TEveWindow () override;  Destructor. ;  ; virtual Bool_t CanMakeNewSlots () const;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; virtual TGFrame * GetGUIFrame ()=0;  ; Bool_t GetShowTitleBar () const;  ; TClass * IsA () const override;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; virtual TEveWindowSlot * NewSlot ();  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindow.html:66,Guid,Guide,66,doc/master/classTEveWindow.html,https://root.cern,https://root.cern/doc/master/classTEveWindow.html,3,"['Clear', 'Guid']","['ClearEveFrame', 'Clears', 'Guide']"
Usability,". ROOT: TEveWindowFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveWindowFrame Class ReferenceGraphics » 3D Graphics » Event Display. ; Encapsulates TGFrame into an eve-window. ; The frame is owned by the eve-window. ; Definition at line 335 of file TEveWindow.h. Public Member Functions;  TEveWindowFrame (TGFrame *frame, const char *n=""TEveWindowFrame"", const char *t="""");  Constructor. ;  ;  ~TEveWindowFrame () override;  Destructor. ;  ; TGCompositeFrame * GetGUICompositeFrame ();  Returns the registered top-frame of this eve-window dynamic-casted to composite-frame. ;  ; TGFrame * GetGUIFrame () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveWindow;  TEveWindow (const char *n=""TEveWindow"", const char *t="""");  ;  ~TEveWindow () override;  Destructor. ;  ; virtual Bool_t CanMakeNewSlots () const;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; virtual TEveWindowSlot * NewSlot ();  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial pop",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowFrame.html:71,Guid,Guide,71,doc/master/classTEveWindowFrame.html,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveWindowManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveWindowManager Class ReferenceGraphics » 3D Graphics » Event Display. ; Manager for EVE windows. ; Provides the concept of the current window and takes care for proper destruction of the windows.; It is also the EVE-parent of windows that are not attached into the hierarchy of EVE-windows.; Window-manager is created by the EVE-manager and can be retrieved via: gEve->GetWindowManager.; gEveR__EXTERN TEveManager * gEveDefinition TEveManager.h:243; TEveManager::GetWindowManagerTEveWindowManager * GetWindowManager() constDefinition TEveManager.h:142. Definition at line 21 of file TEveWindowManager.h. Public Member Functions;  TEveWindowManager (const char *n=""TEveWindowManager"", const char *t="""");  Constructor. ;  ;  ~TEveWindowManager () override;  Destructor. ;  ; void DeleteWindow (TEveWindow *w);  Called by a window before it gets deleted. ;  ; void DestroyWindows ();  Wait for all windows to shut-down. ;  ; TEveWindow * GetCurrentWindow () const;  ; TEveWindowSlot * GetCurrentWindowAsSlot () const;  Return current window dynamic-casted to TEveWindowSlot. ;  ; TEveWindow * GetDefaultContainer () const;  ; Bool_t HasDefaultContainer () const;  ; void HideAllEveDecorations ();  Hide all eve decorations (title-bar and mini-bar) on all frames. ;  ; TClass * IsA () const override;  ; Bool_t IsCurrentWindow (const TEveWindow *w) const;  ; void SelectWindow (TEveWindow *w);  Entry-point for communicating the fact that a window was acted upon in such a way that it should become the current window. ;  ; void SetDefaultContainer (TEveWindow *w);  ; void SetShowTitleBars (Bool_t state);  Set show title-bar state on all frames. ;  ; void ShowNormalEveDecorations ();  Sh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowManager.html:73,Guid,Guide,73,doc/master/classTEveWindowManager.html,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveWindowPack Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveWindowPack Class ReferenceGraphics » 3D Graphics » Event Display. ; Encapsulates TGPack into an eve-window. ; The pack is owned by the eve-window. ; Definition at line 360 of file TEveWindow.h. Public Member Functions;  TEveWindowPack (TGPack *p, const char *n=""TEveWindowPack"", const char *t="""");  Constructor. ;  ;  ~TEveWindowPack () override;  Destructor. ;  ; Bool_t CanMakeNewSlots () const override;  ; void EqualizeFrames ();  Refit existing frames so that their lengths are equal. ;  ; void FlipOrientation ();  Flip orientation of the pack (vertical / horizontal). ;  ; TGFrame * GetGUIFrame () override;  Return top-frame of this eve-window - the pack. ;  ; TGPack * GetPack () const;  ; TClass * IsA () const override;  ; TEveWindowSlot * NewSlot () override;  Create a new frame-slot at the last position of the pack. ;  ; virtual TEveWindowSlot * NewSlotWithWeight (Float_t w);  Create a new weighted frame-slot at the last position of the pack. ;  ; void SetHorizontal ();  ; void SetVertical (Bool_t x=kTRUE);  Set orientation of the pack (vertical / horizontal). ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveWindow;  TEveWindow (const char *n=""TEveWindow"", const char *t="""");  ;  ~TEveWindow () override;  Destructor. ;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAnc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowPack.html:70,Guid,Guide,70,doc/master/classTEveWindowPack.html,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveWindowSlot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveWindowSlot Class ReferenceGraphics » 3D Graphics » Event Display. ; Description of TEveWindowSlot. ; Definition at line 301 of file TEveWindow.h. Public Member Functions;  TEveWindowSlot (const char *n=""TEveWindowSlot"", const char *t="""");  Constructor. ;  ;  ~TEveWindowSlot () override;  Destructor. ;  ; TGFrame * GetGUIFrame () override;  Return top-frame of this eve-window - the big button to make slot current. ;  ; TClass * IsA () const override;  ; TEveWindowFrame * MakeFrame (TGFrame *frame=nullptr);  An eve-window-frame is created and frame is passed into it. ;  ; TEveWindowPack * MakePack ();  A pack is created in place of this window-slot. ;  ; TEveWindowTab * MakeTab ();  A tab is created in place of this window-slot. ;  ; TGCompositeFrame * StartEmbedding ();  Start embedding a window that will replace the current slot. ;  ; TEveWindowFrame * StopEmbedding (const char *name=nullptr);  An embedded window is created in place of this window-slot. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveWindow;  TEveWindow (const char *n=""TEveWindow"", const char *t="""");  ;  ~TEveWindow () override;  Destructor. ;  ; virtual Bool_t CanMakeNewSlots () const;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns tr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowSlot.html:70,Guid,Guide,70,doc/master/classTEveWindowSlot.html,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html,1,['Guid'],['Guide']
Usability,". ROOT: TEveWindowTab Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveWindowTab Class ReferenceGraphics » 3D Graphics » Event Display. ; Encapsulates TGTab into an eve-window. ; The tab is owned by the eve-window. ; Definition at line 395 of file TEveWindow.h. Public Member Functions;  TEveWindowTab (TGTab *tab, const char *n=""TEveWindowTab"", const char *t="""");  Constructor. ;  ;  ~TEveWindowTab () override;  Destructor. ;  ; Bool_t CanMakeNewSlots () const override;  ; TGFrame * GetGUIFrame () override;  Return top-frame of this eve-window - the tab. ;  ; TGTab * GetTab () const;  ; TClass * IsA () const override;  ; TEveWindowSlot * NewSlot () override;  Create new frame-slot - a new tab. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveWindow;  TEveWindow (const char *n=""TEveWindow"", const char *t="""");  ;  ~TEveWindow () override;  Destructor. ;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowTab.html:69,Guid,Guide,69,doc/master/classTEveWindowTab.html,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html,1,['Guid'],['Guide']
Usability,". ROOT: TEventIter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TEventIter Class ReferenceabstractPROOF » PROOF kernel Libraries. ; Special iterator class used in TProofPlayer to iterate over events or objects in the packets. ; Definition at line 42 of file TEventIter.h. Public Types; enum  EIterType { kData = 15; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TEventIter ();  Default constructor. ;  ;  TEventIter (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIter () override;  Destructor. ;  ; virtual Long64_t GetCacheSize ()=0;  ; virtual Long64_t GetEntryNumber (Long64_t);  ; virtual Int_t GetLearnEntries ()=0;  ; virtual Long64_t GetNextEvent ()=0;  ; virtual Int_t GetNextPacket (Long64_t &first, Long64_t &num)=0;  ; TList * GetPackets ();  ; virtual void InvalidatePacket ();  Invalidated the current packet (if any) by setting the TDSetElement::kCorrupted bit. ;  ; TClass * IsA () const override;  ; virtual void StopProcess (Bool_t abort);  Set flag to stop the process. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &Class",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEventIter.html:66,Guid,Guide,66,doc/master/classTEventIter.html,https://root.cern,https://root.cern/doc/master/classTEventIter.html,1,['Guid'],['Guide']
Usability,". ROOT: TEventIterObj Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TEventIterObj Class Reference. . Definition at line 122 of file TEventIter.h. Public Member Functions;  TEventIterObj ();  Default ctor. ;  ;  TEventIterObj (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIterObj () override;  Destructor. ;  ; Long64_t GetCacheSize () override;  ; Int_t GetLearnEntries () override;  ; Long64_t GetNextEvent () override;  Get next event. ;  ; Int_t GetNextPacket (Long64_t &first, Long64_t &num) override;  Get loop range. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEventIter;  TEventIter ();  Default constructor. ;  ;  TEventIter (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIter () override;  Destructor. ;  ; virtual Long64_t GetEntryNumber (Long64_t);  ; TList * GetPackets ();  ; virtual void InvalidatePacket ();  Invalidated the current packet (if any) by setting the TDSetElement::kCorrupted bit. ;  ; virtual void StopProcess (Bool_t abort);  Set flag to stop the process. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEventIterObj.html:69,Guid,Guide,69,doc/master/classTEventIterObj.html,https://root.cern,https://root.cern/doc/master/classTEventIterObj.html,1,['Guid'],['Guide']
Usability,". ROOT: TEventIterTree Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TEventIterTree Class Reference. . Definition at line 148 of file TEventIter.h. Classes; class  TFileTree;  . Public Member Functions;  TEventIterTree ();  Default ctor. ;  ;  TEventIterTree (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIterTree () override;  Destructor. ;  ; Long64_t GetCacheSize () override;  Return the size in bytes of the cache, if any Return -1 if not used. ;  ; Int_t GetLearnEntries () override;  Return the number of entries in the learning phase. ;  ; Long64_t GetNextEvent () override;  Get next event. ;  ; Int_t GetNextPacket (Long64_t &first, Long64_t &num) override;  Get loop range. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEventIter;  TEventIter ();  Default constructor. ;  ;  TEventIter (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIter () override;  Destructor. ;  ; virtual Long64_t GetEntryNumber (Long64_t);  ; TList * GetPackets ();  ; virtual void InvalidatePacket ();  Invalidated the current packet (if any) by setting the TDSetElement::kCorrupted bit. ;  ; virtual void StopProcess (Bool_t abort);  Set flag to stop the process. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEventIterTree.html:70,Guid,Guide,70,doc/master/classTEventIterTree.html,https://root.cern,https://root.cern/doc/master/classTEventIterTree.html,2,"['Guid', 'learn']","['Guide', 'learning']"
Usability,". ROOT: TEventIterTree::TFileTree Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TEventIterTree::TFileTree Class Reference. . Definition at line 162 of file TEventIter.h. Public Member Functions;  TFileTree (const char *name, TFile *f, Bool_t islocal);  Default ctor. ;  ;  ~TFileTree () override;  Default dtor. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEventIterTree_1_1TFileTree.html:81,Guid,Guide,81,doc/master/classTEventIterTree_1_1TFileTree.html,https://root.cern,https://root.cern/doc/master/classTEventIterTree_1_1TFileTree.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TEventIterUnit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TEventIterUnit Class Reference. . Definition at line 99 of file TEventIter.h. Public Member Functions;  TEventIterUnit ();  Default constructor. ;  ;  TEventIterUnit (TDSet *dset, TSelector *sel, Long64_t num);  Main constructor. ;  ;  ~TEventIterUnit () override;  ; Long64_t GetCacheSize () override;  ; Int_t GetLearnEntries () override;  ; Long64_t GetNextEvent () override;  Get next event. ;  ; Int_t GetNextPacket (Long64_t &first, Long64_t &num) override;  Get loop range. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEventIter;  TEventIter ();  Default constructor. ;  ;  TEventIter (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIter () override;  Destructor. ;  ; virtual Long64_t GetEntryNumber (Long64_t);  ; TList * GetPackets ();  ; virtual void InvalidatePacket ();  Invalidated the current packet (if any) by setting the TDSetElement::kCorrupted bit. ;  ; virtual void StopProcess (Bool_t abort);  Set flag to stop the process. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEventIterUnit.html:70,Guid,Guide,70,doc/master/classTEventIterUnit.html,https://root.cern,https://root.cern/doc/master/classTEventIterUnit.html,1,['Guid'],['Guide']
Usability,". ROOT: TEventList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Friends |; List of all members ; TEventList Class ReferenceTree Library. ; Legacy Code TEventList is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TEventList might still be a valid solution. ; A TEventList object is a list of selected events (entries) in a TTree.; A TEventList is automatically generated by TTree::Draw: example tree->Draw("">>elist1"",""x<0 && y> 0"");; In this example, a TEventList object named ""elist1"" will be generated. (Previous contents are overwritten). tree->Draw("">>+elist1"",""x<0 && y> 0"");; In this example, selected entries are added to the list.; The TEventList object is added to the list of objects in the current directory.; Use TTree:SetEventList(TEventList *list) to inform TTree that you want to use the list as input. The following code gets a pointer to the TEventList object created in the above commands: TEventList *list = (TEventList*)gDirectory->Get(""elist1"");; gDirectory#define gDirectoryDefinition TDirectory.h:384; TEventList<div class=""legacybox""><h2>Legacy Code</h2> TEventList is a legacy interface: there will be no bug fi...Definition TEventList.h:31. Use function Enter to enter an element in the list; The function Add may be used to merge two lists.; The function Subtract may be used to subtract two lists.; The function Reset may be used to reset a list.; Use TEventList::Print(option) to print the contents. (option ""all"" prints all the list entries).; Operators + and - correspond to functions Add and Subtract.; A TEventList object can be saved on a file via the Write function. . Definition at line 31 of file TEventList.h. Public Member Functions;  TEventList ();  Default construc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEventList.html:66,Guid,Guide,66,doc/master/classTEventList.html,https://root.cern,https://root.cern/doc/master/classTEventList.html,1,['Guid'],['Guide']
Usability,". ROOT: TExMap Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TExMap Class Reference. ; This class stores a (key,value) pair using an external hash. ; The (key,value) are Long64_t's and therefore can contain object pointers or any longs. The map uses an open addressing hashing method (linear probing). ; Definition at line 33 of file TExMap.h. Classes; struct  Assoc_t;  . Public Member Functions;  TExMap (const TExMap &map);  Copy constructor. ;  ;  TExMap (Int_t mapSize=100);  Create a TExMap. ;  ;  ~TExMap ();  Delete TExMap. ;  ; void Add (Long64_t key, Long64_t value);  ; void Add (ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. The key should be unique. ;  ; void AddAt (UInt_t slot, ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. ;  ; Int_t Capacity () const;  ; void Delete (Option_t *opt="""") override;  Delete all entries stored in the TExMap. ;  ; void Expand (Int_t newsize);  Expand the TExMap. ;  ; Int_t GetSize () const;  ; Long64_t GetValue (Long64_t key);  ; Long64_t GetValue (ULong64_t hash, Long64_t key);  Return the value belonging to specified key and hash value. ;  ; Long64_t GetValue (ULong64_t hash, Long64_t key, UInt_t &slot);  Return the value belonging to specified key and hash value. ;  ; TClass * IsA () const override;  ; Long64_t & operator() (Long64_t key);  ; Long64_t & operator() (ULong64_t hash, Long64_t key);  Return a reference to the value belonging to the key with the specified hash value. ;  ; TExMap & operator= (const TExMap &);  Assignment operator. ;  ; void Remove (Long64_t key);  ; void Remove (ULong64_t hash, Long64_t key);  Remove entry with specified key from the TExMap. ;  ; void Streamer (TBuffer &) override;  Stream all objec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTExMap.html:62,Guid,Guide,62,doc/master/classTExMap.html,https://root.cern,https://root.cern/doc/master/classTExMap.html,1,['Guid'],['Guide']
Usability,". ROOT: TExec Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TExec Class ReferenceCore ROOT classes » Base ROOT classes. ; TExec is a utility class that can be used to execute a C++ command when some event happens in a pad. ; The command in turn can invoke a C++ macro to paint graphics objects at positions depending on the histogram or graph contents. Case 1:; The TExec object is in the list of pad primitives (after exec.Draw()). When the pad is drawn, the TExec::Paint function is called. This function will execute the specified command. The following example uses the services of the class Aclock created in $ROOTSYS/test/Aclock.cxx. This examples uses a TTimer to redraw a pad at regular intervals (clock). When the clock is updated, a string with the current date&time is drawn. {; gSystem->Load(""$ROOTSYS/test/Aclock"");; Aclock ck(400);; gPad->SetFillColor(5);; TDatime dt;; TText t(.5,.3,""t"");; t.SetTextAlign(22);; t.SetTextSize(.07);; t.SetTextColor(4);; t.Draw();; TExec ex(""ex"",""dt.Set();t.SetTitle(dt.AsString())"");; ex.Draw();; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; gPad#define gPadDefinition TVirtualPad.h:308; TDatimeThis class stores the date and time with a precision of one second in an unsigned 32 bit word (950130...Definition TDatime.h:37; TExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad.Definition TExec.h:26; TSystem::Loadvirtual int Load(const char *module, const char *entry="""", Bool_t system=kFALSE)Load a shared library.Definition TSystem.cxx:1857; TTextBase class for several text objects.Definition TText.h:22; exDouble_t ex[n]Definition legend1.C:17. Case 2:; The TExec object may be added to the list of functions of a TH1 or TGraph object via hist->GetListOfFunctions()->Add(exec). When the histogram (or graph) is drawn, the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTExec.html:61,Guid,Guide,61,doc/master/classTExec.html,https://root.cern,https://root.cern/doc/master/classTExec.html,1,['Guid'],['Guide']
Usability,". ROOT: TF1 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TF1 Class ReferenceHistogram Library » Function classes. ; 1-Dim function class . TF1: 1-Dim function class; A TF1 object is a 1-Dim function defined between a lower and upper limit. The function may be a simple function based on a TFormula expression or a precompiled user function. The function may have associated parameters. TF1 graphics function is via the TH1 and TGraph drawing functions.; The following types of functions can be created:. Expression using variable x and no parameters; Expression using variable x with parameters; Lambda Expression with variable x and parameters; A general C function with parameters; A general C++ function object (functor) with parameters; A member function with parameters of a general C++ class. 1 - Expression using variable x and no parameters; Case 1: inline expression using standard C++ functions/operators; {; auto fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; fa1->Draw();; }; TF1::TF1TF1()TF1 default constructor.Definition TF1.cxx:489. Case 2: inline expression using a ROOT function (e.g. from TMath) without parameters; {; auto fa2 = new TF1(""fa2"",""TMath::DiLog(x)"",0,10);; fa2->Draw();; }. Case 3: inline expression using a user defined CLING function by name; Double_t myFunc(double x) { return x+sin(x); }; ....; auto fa3 = new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();; myFuncDouble_t myFunc(Double_t x)Definition ROOTR.C:4; double; xDouble_t x[n]Definition legend1.C:17. 2 - Expression using variable x with parameters; Case 1: inline expression using standard C++ functions/operators; Example a:; auto fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);; This create",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:59,Guid,Guide,59,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TF12 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TF12 Class ReferenceHistogram Library » Function classes. ; A projection of a TF2 along X or Y. ; It has the same behaviour as a TF1; Example of a function; {; auto f2 = new TF2(""f2"",""sin(x)*sin(y)/(x*y)"",0,5,0,5);; auto f12 = new TF12(""f12"",f2,0.1,""y"");; f12->Draw();; }; TF12::TF12TF12()TF12 default constructor.Definition TF12.cxx:39; TF2A 2-Dim function with parameters.Definition TF2.h:29. Definition at line 25 of file TF12.h. Public Member Functions;  TF12 ();  TF12 default constructor. ;  ;  TF12 (const char *name, TF2 *f2, Double_t xy, Option_t *option=""x"");  TF12 normal constructor. ;  ;  TF12 (const TF12 &f12);  Copy constructor. ;  ;  ~TF12 () override;  F2 default destructor. ;  ; void Copy (TObject &f12) const override;  Copy this F2 to a new F2. ;  ; TF1 * DrawCopy (Option_t *option="""") const override;  Draw a copy of this function with its current attributes. ;  ; Double_t Eval (Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) const override;  Evaluate this formula. ;  ; Double_t EvalPar (const Double_t *x, const Double_t *params=nullptr) override;  Evaluate this function at point x[0]. ;  ; virtual Double_t GetXY () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetXY (Double_t xy);  Set the value of the constant for the TF2. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TF1;  TF1 ();  TF1 default constructor. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin, Double_t xmax, Option_t *option);  Same constructor as above (for TFor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF12.html:60,Guid,Guide,60,doc/master/classTF12.html,https://root.cern,https://root.cern/doc/master/classTF12.html,1,['Guid'],['Guide']
Usability,". ROOT: TF1::TF1FunctorPointer Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TF1::TF1FunctorPointer Struct Referenceabstract. . Definition at line 247 of file TF1.h. Public Member Functions; virtual ~TF1FunctorPointer ();  ; virtual TF1FunctorPointer * Clone () const =0;  . #include <TF1.h>. Inheritance diagram for TF1::TF1FunctorPointer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~TF1FunctorPointer(). virtual TF1::TF1FunctorPointer::~TF1FunctorPointer ; (; ). inlinevirtual . Definition at line 248 of file TF1.h. Member Function Documentation. ◆ Clone(). virtual TF1FunctorPointer * TF1::TF1FunctorPointer::Clone ; (; ); const. pure virtual . Implemented in TF1::TF1FunctorPointerImpl< T >. The documentation for this struct was generated from the following file:; hist/hist/inc/TF1.h. TF1TF1FunctorPointer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTF1_1_1TF1FunctorPointer.html:79,Guid,Guide,79,doc/master/structTF1_1_1TF1FunctorPointer.html,https://root.cern,https://root.cern/doc/master/structTF1_1_1TF1FunctorPointer.html,2,['Guid'],['Guide']
Usability,". ROOT: TF1::TF1FunctorPointerImpl< T > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TF1::TF1FunctorPointerImpl< T > Struct Template Reference. ; template<class T>; struct TF1::TF1FunctorPointerImpl< T >; Definition at line 313 of file TF1.h. Public Member Functions;  TF1FunctorPointerImpl (const ROOT::Math::ParamFunctorTempl< T > &func);  ;  TF1FunctorPointerImpl (const std::function< T(const T *f, const Double_t *param)> &func);  ;  ~TF1FunctorPointerImpl () override;  ; TF1FunctorPointer * Clone () const override;  ;  Public Member Functions inherited from TF1::TF1FunctorPointer; virtual ~TF1FunctorPointer ();  . Public Attributes; ROOT::Math::ParamFunctorTempl< T > fImpl;  . #include <TF1.h>. Inheritance diagram for TF1::TF1FunctorPointerImpl< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TF1FunctorPointerImpl() [1/2]. template<class T > . TF1::TF1FunctorPointerImpl< T >::TF1FunctorPointerImpl ; (; const ROOT::Math::ParamFunctorTempl< T > & ; func). inline . Definition at line 314 of file TF1.h. ◆ TF1FunctorPointerImpl() [2/2]. template<class T > . TF1::TF1FunctorPointerImpl< T >::TF1FunctorPointerImpl ; (; const std::function< T(const T *f, const Double_t *param)> & ; func). inline . Definition at line 315 of file TF1.h. ◆ ~TF1FunctorPointerImpl(). template<class T > . TF1::TF1FunctorPointerImpl< T >::~TF1FunctorPointerImpl ; (; ). inlineoverride . Definition at line 316 of file TF1.h. Member Function Documentation. ◆ Clone(). template<class T > . TF1FunctorPointer * TF1::TF1FunctorPointerImpl< T >::Clone ; (; ); const. inlineoverridevirtual . Implements TF1::TF1FunctorPointer.; Definition at line 317 of file TF1.h. Member Data Documentation. ◆ fImpl. template<class T > . ROOT::Math::ParamFunctorTempl<T> TF1::TF1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTF1_1_1TF1FunctorPointerImpl.html:97,Guid,Guide,97,doc/master/structTF1_1_1TF1FunctorPointerImpl.html,https://root.cern,https://root.cern/doc/master/structTF1_1_1TF1FunctorPointerImpl.html,1,['Guid'],['Guide']
Usability,". ROOT: TF1AbsComposition Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TF1AbsComposition Class Referenceabstract. . Definition at line 16 of file TF1AbsComposition.h. Public Member Functions;  ~TF1AbsComposition () override;  ; void Copy (TObject &obj) const override=0;  Copy this to obj. ;  ; TClass * IsA () const override;  ; virtual double operator() (const Double_t *x, const Double_t *p)=0;  ; virtual void SetParameters (const Double_t *params)=0;  ; virtual void SetRange (Double_t a, Double_t b)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Update ()=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1AbsComposition.html:73,Guid,Guide,73,doc/master/classTF1AbsComposition.html,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html,1,['Guid'],['Guide']
Usability,". ROOT: TF1Convolution Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TF1Convolution Class ReferenceHistogram Library » Function classes. ; Class wrapping convolution of two functions. ; Class wrapping convolution of two functions: evaluation of \(\int f(x)g(x-t)dx\); The convolution is performed by default using FFTW if it is available . One can pass optionally the range of the convolution (by default the first function range is used). Note that when using Discrete Fourier Transform (as FFTW), it is a circular transform, so the functions should be approximately zero at the end of the range. If they are significantly different than zero on one side (e.g. the left side) a spill over will occur on the other side (e.g right side). If no function range is given by default the function1 range + 10% is used One should use also a not too small number of points for the DFT (a minimum of 1000). By default 10000 points are used. ; Definition at line 20 of file TF1Convolution.h. Public Member Functions;  TF1Convolution ();  constructor without arguments. ;  ;  TF1Convolution (const TF1Convolution &conv);  Copy constructor (necessary to hold unique_ptr as member variable). ;  ;  TF1Convolution (TF1 *function1, TF1 *function2, Bool_t useFFT=true);  constructor from the two function pointer and a flag is using FFT. ;  ;  TF1Convolution (TF1 *function1, TF1 *function2, Double_t xmin, Double_t xmax, Bool_t useFFT=true);  Constructor from the two function pointer and the convolution range. ;  ;  TF1Convolution (TString formula, Double_t xmin=1., Double_t xmax=0., Bool_t useFFT=true);  Constructor from a formula expression as f1 * f2 where f1 and f2 are two functions known to ROOT. ;  ;  TF1Convolution (TString formula1, TString formula2, Double_t xmin=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1Convolution.html:70,Guid,Guide,70,doc/master/classTF1Convolution.html,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html,1,['Guid'],['Guide']
Usability,". ROOT: TF1NormSum Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TF1NormSum Class ReferenceHistogram Library » Function classes. ; Class adding two functions: c1*f1+c2*f2. ; Definition at line 19 of file TF1NormSum.h. Public Member Functions;  TF1NormSum ();  ;  TF1NormSum (const std::vector< TF1 * > &functions, const std::vector< Double_t > &coeffs, Double_t scale=1.);  ;  TF1NormSum (const TF1NormSum &nsum);  Copy constructor (necessary to hold unique_ptr as member variable) ;  ;  TF1NormSum (const TString &formula, Double_t xmin, Double_t xmax);  TF1NormSum constructor taking any addition of formulas with coefficient or not. ;  ;  TF1NormSum (TF1 *function1, TF1 *function2, Double_t coeff1=1., Double_t coeff2=1., Double_t scale=1.);  TF1NormSum constructor taking 2 functions, and 2 coefficients (if not equal to 1) ;  ;  TF1NormSum (TF1 *function1, TF1 *function2, TF1 *function3, Double_t coeff1=1., Double_t coeff2=1., Double_t coeff3=1., Double_t scale=1.);  TF1NormSum constructor taking 3 functions, and 3 coefficients (if not equal to 1) ;  ;  ~TF1NormSum () override;  ; void Copy (TObject &obj) const override;  Copy this to obj. ;  ; Int_t GetNpar () const;  Return the number of (non constant) parameters including the coefficients: for 2 functions: c1,c2,p0,p1,p2,p3... ;  ; std::vector< double > GetParameters () const;  Return array of parameters. ;  ; const char * GetParName (Int_t ipar) const;  ; void GetRange (Double_t &a, Double_t &b) const;  ; Double_t GetScale () const;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; TClass * IsA () const override;  ; double operator() (const Double_t *x, const Double_t *p) override;  Overload the parenthesis to add the functions. ;  ; TF1NormSum & operator= (const TF1NormSum &rhs);  Operator =. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1NormSum.html:66,Guid,Guide,66,doc/master/classTF1NormSum.html,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html,1,['Guid'],['Guide']
Usability,". ROOT: TF1Parameters Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TF1Parameters Class Reference. ; TF1 Parameters class. ; Definition at line 53 of file TF1.h. Public Member Functions;  TF1Parameters ();  ;  TF1Parameters (const TF1Parameters &rhs);  ;  TF1Parameters (Int_t npar);  ; virtual ~TF1Parameters ();  ; Double_t GetParameter (const char *name) const;  ; Double_t GetParameter (Int_t iparam) const;  ; const Double_t * GetParameters () const;  ; const char * GetParName (Int_t iparam) const;  ; Int_t GetParNumber (const char *name) const;  Returns the parameter number given a name not very efficient but list of parameters is typically small could use a map if needed. ;  ; virtual TClass * IsA () const;  ; TF1Parameters & operator= (const TF1Parameters &rhs);  ; const std::vector< double > & ParamsVec () const;  ; void SetParameter (const char *name, Double_t value);  ; void SetParameter (Int_t iparam, Double_t value);  ; void SetParameters (const Double_t *params);  ; template<typename... Args> ; void SetParameters (Double_t arg1, Args &&... args);  Set parameter values. ;  ; void SetParName (Int_t iparam, const char *name);  ; template<typename... Args> ; void SetParNames (Args &&... args);  Set parameter names. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; bool CheckIndex (Int_t i) const;  . Private Attributes; std::vector< Double_t > fParameters;  ; std::vector< std::string > fParNames;  . #include <TF1.h>; Constructor & Destructor Documentation. ◆ TF1Parameters() [1/3]. TF1Paramete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1Parameters.html:69,Guid,Guide,69,doc/master/classTF1Parameters.html,https://root.cern,https://root.cern/doc/master/classTF1Parameters.html,1,['Guid'],['Guide']
Usability,". ROOT: TF2 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TF2 Class ReferenceHistogram Library » Function classes. ; A 2-Dim function with parameters. ; The following types of functions can be created:. Expression using variables x and y; Expression using a user defined function; Lambda Expression with x and y variables and parameters. Expression using variables x and y; {; auto f2 = new TF2(""f2"",""sin(x)*sin(y)/(x*y)"",0,5,0,5);; f2->Draw();; }; TF2::TF2TF2()TF2 default constructor.Definition TF2.cxx:83. Expression using a user defined function; Double_t func(Double_t *val, Double_t *par); {; Float_t x = val[0];; Float_t y = val[1];; Double_t f = x*x-y*y;; return f;; }; ; void fplot(); {; auto f = new TF2(""f"",func,-1,1,-1,1);; f->Draw(""surf1"");; }; f#define f(i)Definition RSha256.hxx:104; Float_tfloat Float_tDefinition RtypesCore.h:57; double; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17. Lambda Expression with x and y variables and parameters; root [0] TF2 f2(""f2"", [](double* x, double*p) { return x[0] + x[1] * p[0]; }, 0., 1., 0., 1., 1); (TF2 &) Name: f2 Title: f2; root [1] f2.SetParameter(0, 1.); root [2] f2.Eval(1., 2.); (double) 3.0000000; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; TF2A 2-Dim function with parameters.Definition TF2.h:29; See TF1 class for the list of functions formats ; Definition at line 29 of file TF2.h. Public Member Functions;  TF2 ();  TF2 default constructor. ;  ;  TF2 (const char *name, const char *formula, Double_t xmin=0, Double_t xmax=1, Double_t ymin=0, Double_t ymax=1, Option_t *opt=nullptr);  F2 constructor using a formula definition. ;  ; template<class PtrObj , typename MemFn > ;  TF2 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF2.html:59,Guid,Guide,59,doc/master/classTF2.html,https://root.cern,https://root.cern/doc/master/classTF2.html,1,['Guid'],['Guide']
Usability,". ROOT: TF3 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TF3 Class ReferenceHistogram Library » Function classes. ; A 3-Dim function with parameters. ; Definition at line 28 of file TF3.h. Public Member Functions;  TF3 ();  F3 default constructor. ;  ;  TF3 (const char *name, const char *formula, Double_t xmin=0, Double_t xmax=1, Double_t ymin=0, Double_t ymax=1, Double_t zmin=0, Double_t zmax=1, Option_t *opt=nullptr);  F3 constructor using a formula definition. ;  ; template<class PtrObj , typename MemFn > ;  TF3 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax, Int_t npar, const char *, const char *);  Backward compatible ctor. ;  ; template<class PtrObj , typename MemFn > ;  TF3 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax, Int_t npar, Int_t ndim=3);  Template constructors from a pointer to any C++ class of type PtrObj with a specific member function of type MemFn. ;  ;  TF3 (const char *name, Double_t(*fcn)(const Double_t *, const Double_t *), Double_t xmin=0, Double_t xmax=1, Double_t ymin=0, Double_t ymax=1, Double_t zmin=0, Double_t zmax=1, Int_t npar=0, Int_t ndim=3);  F3 constructor using a pointer to real function—. ;  ;  TF3 (const char *name, Double_t(*fcn)(Double_t *, Double_t *), Double_t xmin=0, Double_t xmax=1, Double_t ymin=0, Double_t ymax=1, Double_t zmin=0, Double_t zmax=1, Int_t npar=0, Int_t ndim=3);  F3 constructor using a pointer to real function. ;  ; template<typename Func > ;  TF3 (const char *name, Func f, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax, Int_t npar, const char *);  Backward compatible ctor. ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF3.html:59,Guid,Guide,59,doc/master/classTF3.html,https://root.cern,https://root.cern/doc/master/classTF3.html,1,['Guid'],['Guide']
Usability,". ROOT: TFFTComplex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTComplex Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented. Computes complex input/output discrete Fourier transforms (DFT) in one or more dimensions. For the detailed information on the computed transforms please refer to the FFTW manual, chapter ""What FFTW really computes"".; How to use it:. Create an instance of TFFTComplex - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings; Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); Run the Transform() function; Get the output (via GetPoints(), GetPoint() or GetPointComplex() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but with different flags or sign, rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size . Definition at line 20 of file TFFTComplex.h. Public Member Functions;  TFFTComplex ();  default ;  ;  TFFTComplex (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTComplex (Int_t ndim, Int_t *n, Bool_t inPlace=kFALSE);  For multidim. ;  ;  ~TFFTComplex () override;  Destroys the data arrays and the plan. ;  ; Int_t * GetN () const override;  ; Int_t GetNdim () const override;  ; void GetPointComplex (const Int_t *ipoint, Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFFTComplex.html:67,Guid,Guide,67,doc/master/classTFFTComplex.html,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html,1,['Guid'],['Guide']
Usability,". ROOT: TFFTComplexReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTComplexReal Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes the inverse of the real-to-complex transforms (class TFFTRealComplex) taking complex input (storing the non-redundant half of a logically Hermitian array) to real output (see FFTW manual for more details); How to use it:; Create an instance of TFFTComplexReal - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings; Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); Run the Transform() function; Get the output (via GetPoints(), GetPoint() or GetPointReal() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but with different flags, rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size; In Complex to Real transform the input array is destroyed. It cannot then be retrieved when using the Get's methods. . Definition at line 21 of file TFFTComplexReal.h. Public Member Functions;  TFFTComplexReal ();  default ;  ;  TFFTComplexReal (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTComplexReal (Int_t ndim, Int_t *n, Bool_t inPlace);  For ndim-dimensional transforms Second argument contains sizes of the transform in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFFTComplexReal.html:71,Guid,Guide,71,doc/master/classTFFTComplexReal.html,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html,1,['Guid'],['Guide']
Usability,". ROOT: TFFTReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTReal Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes transforms called r2r in FFTW manual:; transforms of real input and output in ""halfcomplex"" format i.e. real and imaginary parts for a transform of size n stored as (r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1); discrete Hartley transform; sine and cosine transforms (DCT-I,II,III,IV and DST-I,II,III,IV) For the detailed information on the computed transforms please refer to the FFTW manual, chapter ""What FFTW really computes"". How to use it:; Create an instance of TFFTReal - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings (see function comments for possible kind parameters); Set the data (via SetPoints()or SetPoint() functions); Run the Transform() function; Get the output (via GetPoints() or GetPoint() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but of different kind (or with different flags), rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function!; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled BY:; transform size (N) for R2HC, HC2R, DHT transforms; 2*(N-1) for DCT-I (REDFT00); 2*(N+1) for DST-I (RODFT00); 2*N for the remaining transforms. Transform inverses:; R2HC<-->HC2R; DHT<-->DHT; DCT-I<-->DCT-I; DCT-II<-->DCT-III; DCT-IV<-->DCT-IV; DST-I<-->DST-I; DST-II<-->DST-III; DST-IV<-->DST-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFFTReal.html:64,Guid,Guide,64,doc/master/classTFFTReal.html,https://root.cern,https://root.cern/doc/master/classTFFTReal.html,1,['Guid'],['Guide']
Usability,". ROOT: TFFTRealComplex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTRealComplex Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes a real input/complex output discrete Fourier transform in 1 or more dimensions. However, only out-of-place transforms are now supported for transforms in more than 1 dimension. For detailed information about the computed transforms, please refer to the FFTW manual; How to use it:; Create an instance of TFFTRealComplex - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings (see function comments for possible kind parameters); Set the data (via SetPoints()or SetPoint() functions); Run the Transform() function; Get the output (via GetPoints() or GetPoint() functions); Repeat steps 3)-5) as needed For a transform of the same size, but with different flags, rerun the Init() function and continue with steps 3)-5). NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size . Definition at line 20 of file TFFTRealComplex.h. Public Member Functions;  TFFTRealComplex ();  default ;  ;  TFFTRealComplex (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTRealComplex (Int_t ndim, Int_t *n, Bool_t inPlace);  For ndim-dimensional transforms Second argument contains sizes of the transform in each dimension. ;  ;  ~TFFTRealComplex ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFFTRealComplex.html:71,Guid,Guide,71,doc/master/classTFFTRealComplex.html,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html,1,['Guid'],['Guide']
Usability,". ROOT: TFITSHDU Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFITSHDU Class ReferenceGraphics » 2D Graphics » FITS file. ; FITS file interface class. ; TFITSHDU is a class that allows extracting images and data from FITS files and contains several methods to manage them. ; Definition at line 35 of file TFITS.h. Classes; union  Cell;  ; struct  Column;  ; struct  HDURecord;  . Public Types; enum  EColumnTypes { kString; , kRealNumber; , kRealArray; , kRealVector; };  ; enum  EHDUTypes { kImageHDU; , kTableHDU; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFITSHDU (const char *filepath, const char *extension_name);  TFITSHDU constructor from filepath and extension name. ;  ;  TFITSHDU (const char *filepath, Int_t extension_number);  TFITSHDU constructor from filepath and extension number. ;  ;  TFITSHDU (const char *filepath_with_filter);  TFITSHDU constructor from file path with HDU selection filter. ;  ;  ~TFITSHDU () override;  TFITSHDU destructor. ;  ; Bool_t Change (const char *filter);  Change to another HDU given by ""filter"". ;  ; Bool_t Change (Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFITSHDU.html:64,Guid,Guide,64,doc/master/classTFITSHDU.html,https://root.cern,https://root.cern/doc/master/classTFITSHDU.html,1,['Guid'],['Guide']
Usability,". ROOT: TFPBlock Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TFPBlock Class ReferenceInput/Output Library. ; This class represents the encapsulation of a block request. ; It contains the chunks to be prefetched and also serves as a container for the information read. These blocks are prefetch in a special reader thread by the TFilePrefetch class. ; Definition at line 22 of file TFPBlock.h. Public Member Functions;  TFPBlock (Long64_t *, Int_t *, Int_t);  Constructor. ;  ;  ~TFPBlock () override;  Destructor. ;  ; char * GetBuffer () const;  Get block buffer. ;  ; Long64_t GetCapacity () const;  Return capacity of the block. ;  ; Long64_t GetDataSize () const;  Return size of the data in the block. ;  ; Int_t * GetLen () const;  Get pointer to the array of lengths. ;  ; Int_t GetLen (Int_t) const;  Get length of the element at index i. ;  ; Int_t GetNoElem () const;  Return number of elements in the block. ;  ; Long64_t * GetPos () const;  Get pointer to the array of postions. ;  ; Long64_t GetPos (Int_t) const;  Get position of the element at index i. ;  ; char * GetPtrToPiece (Int_t index) const;  Get block buffer. ;  ; TClass * IsA () const override;  ; void ReallocBlock (Long64_t *, Int_t *, Int_t);  Reallocate the block's buffer based on the length of the elements it will contain. ;  ; void SetBuffer (char *);  Set block buffer. ;  ; void SetPos (Int_t, Long64_t);  Set pos value for index idx. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFPBlock.html:64,Guid,Guide,64,doc/master/classTFPBlock.html,https://root.cern,https://root.cern/doc/master/classTFPBlock.html,1,['Guid'],['Guide']
Usability,". ROOT: TFTP Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TFTP Class Reference. . Definition at line 34 of file TFTP.h. Public Types; enum  { kDfltBlockSize = 0x80000; , kDfltWindowSize = 65535; , kBinary = 0; , kAscii = 1; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFTP (const char *url, Int_t parallel=1, Int_t wsize=kDfltWindowSize, TSocket *sock=nullptr);  Open connection to host specified by the url using par parallel sockets. ;  ; virtual ~TFTP ();  TFTP dtor. Send close message and close socket. ;  ; Bool_t AccessPathName (const char *path, EAccessMode mode=kFileExists, Bool_t print=kFALSE);  Returns kFALSE if one can access a file using the specified access mode. ;  ; void Ascii ();  ; void ascii ();  ; void bin ();  ; void Binary ();  ; void bye ();  ; void cd (const char *dir) const;  ; Int_t ChangeDirectory (const char *dir) const;  Change the remote directory. ;  ; Int_t ChangePermission (const char *file, Int_t mode) const;  Change permissions of a remote file. ;  ; void chmod (const char *file, Int_t mode) const;  ; Int_t Close ();  Close ftp connection. ;  ; Int_t DeleteDirectory (const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFTP.html:60,Guid,Guide,60,doc/master/classTFTP.html,https://root.cern,https://root.cern/doc/master/classTFTP.html,1,['Guid'],['Guide']
Usability,. ROOT: TFdSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TFdSet Class Reference. . Definition at line 90 of file TMacOSXSystem.mm. Public Member Functions;  TFdSet ();  ;  TFdSet ();  ;  TFdSet ();  ;  TFdSet (const TFdSet &fd);  ;  TFdSet (const TFdSet &org);  ;  TFdSet (const TFdSet &org);  ; virtual ~TFdSet ();  ; void Clr (Int_t fd);  ; void Clr (Int_t n);  ; void Clr (Int_t n);  ; void Copy (TFdSet &fd) const;  ; ULong_t * GetBits ();  ; ULong_t * GetBits ();  ; Int_t * GetBits ();  ; UInt_t GetCount ();  ; Int_t GetFd (Int_t i);  ; Int_t IsSet (Int_t fd);  ; Int_t IsSet (Int_t n);  ; Int_t IsSet (Int_t n);  ; TFdSet & operator= (const TFdSet &fd);  ; TFdSet & operator= (const TFdSet &rhs);  ; TFdSet & operator= (const TFdSet &rhs);  ; void Set (Int_t fd);  ; void Set (Int_t n);  ; void Set (Int_t n);  ; void Zero ();  ; void Zero ();  ; void Zero ();  . Private Attributes; ULong_t fds_bits [(((kFDSETSIZE)+((kNFDBITS) -1))/(kNFDBITS))];  ; fd_set * fds_bits;  . Constructor & Destructor Documentation. ◆ TFdSet() [1/6]. TFdSet::TFdSet ; (; ). inline . Definition at line 94 of file TMacOSXSystem.mm. ◆ TFdSet() [2/6]. TFdSet::TFdSet ; (; const TFdSet & ; org). inline . Definition at line 95 of file TMacOSXSystem.mm. ◆ TFdSet() [3/6]. TFdSet::TFdSet ; (; ). inline . Definition at line 372 of file TUnixSystem.cxx. ◆ TFdSet() [4/6]. TFdSet::TFdSet ; (; const TFdSet & ; org). inline . Definition at line 373 of file TUnixSystem.cxx. ◆ TFdSet() [5/6]. TFdSet::TFdSet ; (; ). inline . Definition at line 118 of file TWinNTSystem.cxx. ◆ ~TFdSet(). virtual TFdSet::~TFdSet ; (; ). inlinevirtual . Definition at line 119 of file TWinNTSystem.cxx. ◆ TFdSet() [6/6]. TFdSet::TFdSet ; (; const TFdSet & ; fd). inline . Definition at line 121 of file TWinNTSystem.cxx. Member Function Documentation. ◆ Clr() [1/3]. void TFdSet::Clr ; (; Int,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFdSet.html:62,Guid,Guide,62,doc/master/classTFdSet.html,https://root.cern,https://root.cern/doc/master/classTFdSet.html,1,['Guid'],['Guide']
Usability,". ROOT: TFeldmanCousins Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFeldmanCousins Class ReferenceMath » Legacy Physics Classes. ; Legacy Code TFeldmanCousins is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TFeldmanCousins might still be a valid solution. Consider switching to RooStats for non-trivial cases. ; Class to calculate the CL upper limit using the Feldman-Cousins method as described in PRD V57 #7, p3873-3889; The default confidence interval calculated using this method is 90% This is set either by having a default the constructor, or using the appropriate fraction when instantiating an object of this class (e.g. 0.9); The simple extension to a gaussian resolution function bounded at zero has not been addressed as yet -> ‘time is of the essence’ as they write on the wall of the maze in that classic game ...; VARIABLES THAT CAN BE ALTERED; => depending on your desired precision: The initial values of fMuMin, fMuMax, fMuStep and fNMax are those used in the PRD: fMuMin = 0.0; fMuMax = 50.0; fMuStep= 0.005; TFeldmanCousins::fMuMaxDouble_t fMuMaxDefinition TFeldmanCousins.h:55; TFeldmanCousins::fMuStepDouble_t fMuStepDefinition TFeldmanCousins.h:56; TFeldmanCousins::fMuMinDouble_t fMuMinDefinition TFeldmanCousins.h:54; but there is total flexibility in changing this should you desire.; see example of use in $ROOTSYS/tutorials/math/FeldmanCousins.C; see note about: ""Should I use TRolke, TFeldmanCousins, TLimit?"" in the TRolke class description.; Author: Adrian Bevan, Liverpool University; Copyright Liverpool University 2001 bevan.nosp@m.@sla.nosp@m.c.sta.nosp@m.nfor.nosp@m.d.edu ; Definition at line 47 of file TFeldman",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFeldmanCousins.html:71,Guid,Guide,71,doc/master/classTFeldmanCousins.html,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html,1,['Guid'],['Guide']
Usability,". ROOT: TFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Friends |; List of all members ; TFile Class ReferenceInput/Output Library. ; A ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-like logical structure, possibly including subdirectory hierarchies. ; See alsoInput/Output Library . ROOT files layout (or io/doc/TFile folder in your codebase). ROOT file data format specification. A ROOT file is composed of a header, followed by consecutive data records (TKey instances) with a well defined format.; The first data record starts at byte fBEGIN (currently set to kBEGIN). Bytes 1->kBEGIN contain the file description, when fVersion >= 1000000 it is a large file (> 2 GB) and the offsets will be 8 bytes long and fUnits will be set to 8:. Byte Range Record Name Description . 1->4 ""root"" Root file identifier . 5->8 fVersion File format version . 9->12 fBEGIN Pointer to first data record . 13->16 [13->20] fEND Pointer to first free word at the EOF . 17->20 [21->28] fSeekFree Pointer to FREE data record . 21->24 [29->32] fNbytesFree Number of bytes in FREE data record . 25->28 [33->36] nfree Number of free data records . 29->32 [37->40] fNbytesName Number of bytes in TNamed at creation time . 33->33 [41->41] fUnits Number of bytes for file pointers . 34->37 [42->45] fCompress Compression level and algorithm . 38->41 [46->53] fSeekInfo Pointer to TStreamerInfo record . 42->45 [54->57] fNbytesInfo Number of bytes in TStreamerInfo record . 46->63 [58->75] fUUID Universal Unique ID . For the purpose of magic bytes in the context of ROOT files' MIME definition, the following additional requirements are introduced:; The value ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFile.html:61,Guid,Guide,61,doc/master/classTFile.html,https://root.cern,https://root.cern/doc/master/classTFile.html,1,['Guid'],['Guide']
Usability,". ROOT: TFile Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Friends |; List of all members ; TFile Class ReferenceInput/Output Library. ; A ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-like logical structure, possibly including subdirectory hierarchies. ; See alsoInput/Output Library . ROOT files layout (or io/doc/TFile folder in your codebase). ROOT file data format specification. A ROOT file is composed of a header, followed by consecutive data records (TKey instances) with a well defined format.; The first data record starts at byte fBEGIN (currently set to kBEGIN). Bytes 1->kBEGIN contain the file description, when fVersion >= 1000000 it is a large file (> 2 GB) and the offsets will be 8 bytes long and fUnits will be set to 8:. Byte Range Record Name Description . 1->4 ""root"" Root file identifier . 5->8 fVersion File format version . 9->12 fBEGIN Pointer to first data record . 13->16 [13->20] fEND Pointer to first free word at the EOF . 17->20 [21->28] fSeekFree Pointer to FREE data record . 21->24 [29->32] fNbytesFree Number of bytes in FREE data record . 25->28 [33->36] nfree Number of free data records . 29->32 [37->40] fNbytesName Number of bytes in TNamed at creation time . 33->33 [41->41] fUnits Number of bytes for file pointers . 34->37 [42->45] fCompress Compression level and algorithm . 38->41 [46->53] fSeekInfo Pointer to TStreamerInfo record . 42->45 [54->57] fNbytesInfo Number of bytes in TStreamerInfo record . 46->63 [58->75] fUUID Universal Unique ID . For the purpose of magic bytes in the context of ROOT files' MIME definition, the following additional requirements are introduced:; The value o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:60,Guid,Guide,60,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,1,['Guid'],['Guide']
Usability,". ROOT: TFile::InfoListRet Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; TFile::InfoListRet Struct Reference. ; Simple struct of the return value of GetStreamerInfoListImpl. ; Definition at line 145 of file TFile.h. Public Attributes; ROOT::Internal::RConcurrentHashColl::HashValue fHash;  ; TList * fList;  ; Int_t fReturnCode;  . #include <TFile.h>; Member Data Documentation. ◆ fHash. ROOT::Internal::RConcurrentHashColl::HashValue TFile::InfoListRet::fHash. Definition at line 148 of file TFile.h. ◆ fList. TList* TFile::InfoListRet::fList. Definition at line 146 of file TFile.h. ◆ fReturnCode. Int_t TFile::InfoListRet::fReturnCode. Definition at line 147 of file TFile.h. Collaboration diagram for TFile::InfoListRet:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; io/io/inc/TFile.h. TFileInfoListRet. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTFile_1_1InfoListRet.html:75,Guid,Guide,75,doc/master/structTFile_1_1InfoListRet.html,https://root.cern,https://root.cern/doc/master/structTFile_1_1InfoListRet.html,3,"['Guid', 'Simpl']","['Guide', 'Simple']"
Usability,". ROOT: TFileCacheRead Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFileCacheRead Class ReferenceInput/Output Library. ; A cache when reading files over the network. ; A caching system to speed up network I/O, i.e. when there is no operating system caching support (like the buffer cache for local disk I/O). The cache makes sure that every I/O is done with a (large) fixed length buffer thereby avoiding many small I/O's. Currently the read cache system is used by the classes TNetFile, TNetXNGFile and TWebFile (via TFile::ReadBuffers()). When processing TTree, TChain, a specialized class TTreeCache that derives from this class is automatically created. ; Definition at line 22 of file TFileCacheRead.h. Public Member Functions;  TFileCacheRead ();  Default Constructor. ;  ;  TFileCacheRead (TFile *file, Int_t buffersize, TObject *tree=nullptr);  Creates a TFileCacheRead data structure. ;  ;  ~TFileCacheRead () override;  Destructor. ;  ; virtual Int_t AddBranch (const char *, Bool_t=kFALSE);  ; virtual Int_t AddBranch (TBranch *, Bool_t=kFALSE);  ; virtual void AddNoCacheBytesRead (Long64_t len);  ; virtual void AddNoCacheReadCalls (Int_t reads);  ; virtual void Close (Option_t *option="""");  Close out any threads or asynchronous fetches used by the underlying implementation. ;  ; virtual Int_t GetBufferSize () const;  ; virtual Long64_t GetBytesRead () const;  ; virtual Long64_t GetBytesReadExtra () const;  ; TFile * GetFile () const;  ; virtual Long64_t GetNoCacheBytesRead () const;  ; virtual Int_t GetNoCacheReadCalls () const;  ; Int_t GetNseek () const;  ; Int_t GetNtot () const;  ; Long64_t GetPrefetchedBlocks () const;  ; virtual TFilePrefetch * GetPrefetchObj ();  ; virtual Int_t GetReadCalls () const;  ; virtual Int_t GetUnzip",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileCacheRead.html:70,Guid,Guide,70,doc/master/classTFileCacheRead.html,https://root.cern,https://root.cern/doc/master/classTFileCacheRead.html,1,['Guid'],['Guide']
Usability,". ROOT: TFileCacheWrite Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFileCacheWrite Class ReferenceInput/Output Library. ; A cache when writing files over the network. ; A caching system to speed up network I/O, i.e. when there is no operating system caching support (like the buffer cache for local disk I/O). The cache makes sure that every I/O is done with a (large) fixed length buffer thereby avoiding many small I/O's. Currently the write cache system is used by the classes TNetFile, TNetXNGFile and TWebFile (via TFile::WriteBuffers()).; The write cache is automatically created when writing a remote file (created in TFile::Open()). ; Definition at line 19 of file TFileCacheWrite.h. Public Member Functions;  TFileCacheWrite ();  Default Constructor. ;  ;  TFileCacheWrite (TFile *file, Int_t buffersize);  Creates a TFileCacheWrite data structure. ;  ;  ~TFileCacheWrite () override;  Destructor. ;  ; virtual Bool_t Flush ();  Flush the current write buffer to the file. ;  ; virtual Int_t GetBytesInCache () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print class internal structure. ;  ; virtual Int_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Called by the read cache to check if the requested data is not in the write cache buffer. ;  ; virtual void SetFile (TFile *file);  Set the file using this cache. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t WriteBuffer (const char *buf, Long64_t pos, Int_t len);  Write buffer at position pos in the write buffer. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileCacheWrite.html:71,Guid,Guide,71,doc/master/classTFileCacheWrite.html,https://root.cern,https://root.cern/doc/master/classTFileCacheWrite.html,1,['Guid'],['Guide']
Usability,". ROOT: TFileCollection Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TFileCollection Class ReferenceCore ROOT classes » Base ROOT classes. ; Class that contains a list of TFileInfo's and accumulated meta data information about its entries. ; This class is used to describe file sets as stored by Grid file catalogs, by PROOF or any other collection of TFile names. ; Definition at line 39 of file TFileCollection.h. Public Types; enum  EStatusBits { kRemoteCollection = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFileCollection (const char *name=nullptr, const char *title=nullptr, const char *file=nullptr, Int_t nfiles=-1, Int_t firstfile=1);  TFileCollection constructor. ;  ; virtual ~TFileCollection ();  Cleanup. ;  ; Int_t Add (const char *path);  Add all files matching the specified pattern to the collection. ;  ; Int_t Add (TFileCollection *coll);  Add content of the TFileCollection to this collection. ;  ; Int_t Add (TFileInfo *info);  Add TFileInfo to the collection. ;  ; Int_t AddFromFile (const char *file, Int_t nfiles=-1, Int_t firstfile=1);  Add file names contained in the specified text file. ;  ; Bool_t Ad",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileCollection.html:71,Guid,Guide,71,doc/master/classTFileCollection.html,https://root.cern,https://root.cern/doc/master/classTFileCollection.html,1,['Guid'],['Guide']
Usability,". ROOT: TFileDrawMap Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFileDrawMap Class Reference. ; This class is automatically called by TFile::DrawMap. ; It draws a canvas showing the internal structure of a ROOT file. Each key or basket in a file is shown with a fill area drawn at the byte position of the key/basket in the file. The Y axis of the canvas shows the number of Kbytes/Mbytes. The X axis shows the bytes between y(i) and y(i+1). A color corresponding to the class in the key/basket is automatically selected using the class unique identifier.; When moving the mouse in the canvas, the ""Event Status"" panels shows the object corresponding to the mouse position. if the object is a key, it shows the class and object name as well as the file directory name if the file has sub-directories.; if the object is a basket, it shows:; the name of the Tree; the name of the branch; the basket number; the entry number in the basket. Special keys like the StreamerInfo record, the Keys List Record and the Free Blocks Record are also shown.; When clicking the right mouse button, a pop-up menu is shown with its title identifying the picked object and with the items:; DrawObject: in case of a key, the Draw function of the object is called in case of a basket, the branch is drawn for all entries; DumpObject: in case of a key, the Dump function of the object is called in case of a basket, tree->Show(entry) is called; InspectObject: the Inspect function is called for the object. The normal axis zoom functionality can be used to zoom or unzoom One can also use the TCanvas context menu SetCanvasSize to make a larger canvas and use the canvas scroll bars.; When the class is built, it is possible to identify a subset of the objects to be shown. For example, to view only the key",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileDrawMap.html:68,Guid,Guide,68,doc/master/classTFileDrawMap.html,https://root.cern,https://root.cern/doc/master/classTFileDrawMap.html,1,['Guid'],['Guide']
Usability,". ROOT: TFileHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFileHandler Class Reference. . Definition at line 65 of file TSysEvtHandler.h. Public Types; enum  { kRead = 1; , kWrite = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFileHandler (int fd, int mask);  Create a file descriptor event handler. ;  ; virtual ~TFileHandler ();  ; void Add () override;  Add file event handler to system file handler list. ;  ; int GetFd () const;  ; virtual Bool_t HasReadInterest ();  True if handler is interested in read events. ;  ; virtual Bool_t HasWriteInterest ();  True if handler is interested in write events. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsReadReady () const;  ; virtual Bool_t IsWriteReady () const;  ; Bool_t Notify () override;  Notify when event occurred on descriptor associated with this handler. ;  ; virtual Bool_t ReadNotify ();  Notify when something can be read from the descriptor associated with this handler. ;  ; void Remove () override;  Remove file event handler from system file handler list. ;  ; virtual void ResetReadyMask ();  ; void SetFd (int fd);  ; virtual void SetInterest (Int_t mas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileHandler.html:68,Guid,Guide,68,doc/master/classTFileHandler.html,https://root.cern,https://root.cern/doc/master/classTFileHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TFileInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TFileInfo Class ReferenceCore ROOT classes » Base ROOT classes. ; Class describing a generic file including meta information. ; Definition at line 39 of file TFileInfo.h. Public Types; enum  EStatusBits { kStaged = (1ULL << ( 15 )); , kCorrupted = (1ULL << ( 16 )); , kSortWithIndex = (1ULL << ( 17 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFileInfo (const char *url=nullptr, Long64_t size=-1, const char *uuid=nullptr, const char *md5=nullptr, TObject *meta=nullptr);  Constructor. ;  ;  TFileInfo (const TFileInfo &);  Copy constructor. ;  ; virtual ~TFileInfo ();  Destructor. ;  ; Bool_t AddMetaData (TObject *meta);  Add's a meta data object to the file info object. ;  ; Bool_t AddUrl (const char *url, Bool_t infront=kFALSE);  Add a new URL. ;  ; Int_t Compare (const TObject *obj) const override;  Compare TFileInfo object by their first urls. ;  ; TUrl * FindByUrl (const char *url, Bool_t withDeflt=kFALSE);  Find an element from a URL. Returns 0 if not found. ;  ; TUrl * GetCurrentUrl () const;  Return the current url. ;  ; TUrl * GetFirstUrl () const;  ; Int_t GetIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileInfo.html:65,Guid,Guide,65,doc/master/classTFileInfo.html,https://root.cern,https://root.cern/doc/master/classTFileInfo.html,1,['Guid'],['Guide']
Usability,". ROOT: TFileInfoMeta Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TFileInfoMeta Class Reference. . Definition at line 108 of file TFileInfo.h. Public Types; enum  EStatusBits { kExternal = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFileInfoMeta ();  ;  TFileInfoMeta (const char *objPath, const char *objClass=""TTree"", Long64_t entries=-1, Long64_t first=0, Long64_t last=-1, Long64_t totbytes=-1, Long64_t zipbytes=-1);  Create file meta data object. ;  ;  TFileInfoMeta (const char *objPath, const char *objDir, const char *objClass, Long64_t entries=-1, Long64_t first=0, Long64_t last=-1, Long64_t totbytes=-1, Long64_t zipbytes=-1);  Create file meta data object. ;  ;  TFileInfoMeta (const TFileInfoMeta &m);  Copy constructor. ;  ; virtual ~TFileInfoMeta ();  ; const char * GetClass () const;  ; const char * GetDirectory () const;  Get the object's directory in the ROOT file. ;  ; Long64_t GetEntries () const;  ; Long64_t GetFirst () const;  ; Long64_t GetLast () const;  ; const char * GetObject () const;  Get the object name, with path stripped off. ;  ; Long64_t GetTotBytes () const;  ; Long64_t GetZipBytes () co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileInfoMeta.html:69,Guid,Guide,69,doc/master/classTFileInfoMeta.html,https://root.cern,https://root.cern/doc/master/classTFileInfoMeta.html,1,['Guid'],['Guide']
Usability,. ROOT: TFileMergeInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Types |; Private Member Functions |; List of all members ; TFileMergeInfo Class Reference. . Definition at line 42 of file TFileMergeInfo.h. Public Member Functions;  TFileMergeInfo (TDirectory *outputfile);  ; virtual ~TFileMergeInfo ();  ; virtual TClass * IsA () const;  ; void Reset ();  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Public Attributes; TIOFeatures * fIOFeatures {nullptr};  ; Bool_t fIsFirst {kTRUE};  ; TString fOptions;  ; TDirectory * fOutputDirectory {nullptr};  ; TObject * fUserData {nullptr};  . Private Types; using TIOFeatures = ROOT::TIOFeatures;  . Private Member Functions;  TFileMergeInfo ()=delete;  ;  TFileMergeInfo (const TFileMergeInfo &)=delete;  ; TFileMergeInfo & operator= (const TFileMergeInfo &)=delete;  . #include <TFileMergeInfo.h>; Member Typedef Documentation. ◆ TIOFeatures. using TFileMergeInfo::TIOFeatures = ROOT::TIOFeatures. private . Definition at line 44 of file TFileMergeInfo.h. Constructor & Destructor Documentation. ◆ TFileMergeInfo() [1/3]. TFileMergeInfo::TFileMergeInfo ; (; ). privatedelete . ◆ TFileMergeInfo() [2/3]. TFileMergeInfo::TFileMergeInfo ; (; const TFileMergeInfo & ; ). privatedelete . ◆ TFileMergeInfo() [3/3]. TFileMergeInfo::TFileMergeInfo ; (; TDirectory * ; outputfile). inline . Definition at line 57 of file TFileMergeInfo.h. ◆ ~TFileMergeInfo(). virtual TFileMergeInfo::~TFileMergeInfo ; (; ). inlinevirtual . Definition at line 58 of file TFileMergeInfo.h. Member Function Documentation. ◆ Class(). static TClass * TFileMergeInfo::C,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileMergeInfo.html:70,Guid,Guide,70,doc/master/classTFileMergeInfo.html,https://root.cern,https://root.cern/doc/master/classTFileMergeInfo.html,1,['Guid'],['Guide']
Usability,. ROOT: TFileMergeInfo Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Types |; Private Member Functions |; List of all members ; TFileMergeInfo Class Reference. . Definition at line 42 of file TFileMergeInfo.h. Public Member Functions;  TFileMergeInfo (TDirectory *outputfile);  ; virtual ~TFileMergeInfo ();  ; virtual TClass * IsA () const;  ; void Reset ();  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Public Attributes; TIOFeatures * fIOFeatures {nullptr};  ; Bool_t fIsFirst {kTRUE};  ; TString fOptions;  ; TDirectory * fOutputDirectory {nullptr};  ; TObject * fUserData {nullptr};  . Private Types; using TIOFeatures = ROOT::TIOFeatures;  . Private Member Functions;  TFileMergeInfo ()=delete;  ;  TFileMergeInfo (const TFileMergeInfo &)=delete;  ; TFileMergeInfo & operator= (const TFileMergeInfo &)=delete;  . #include <TFileMergeInfo.h>; Member Typedef Documentation. ◆ TIOFeatures. using TFileMergeInfo::TIOFeatures = ROOT::TIOFeatures. private . Definition at line 44 of file TFileMergeInfo.h. Constructor & Destructor Documentation. ◆ TFileMergeInfo() [1/3]. TFileMergeInfo::TFileMergeInfo ; (; ). privatedelete . ◆ TFileMergeInfo() [2/3]. TFileMergeInfo::TFileMergeInfo ; (; const TFileMergeInfo & ; ). privatedelete . ◆ TFileMergeInfo() [3/3]. TFileMergeInfo::TFileMergeInfo ; (; TDirectory * ; outputfile). inline . Definition at line 57 of file TFileMergeInfo.h. ◆ ~TFileMergeInfo(). virtual TFileMergeInfo::~TFileMergeInfo ; (; ). inlinevirtual . Definition at line 58 of file TFileMergeInfo.h. Member Function Documentation. ◆ Class(). static TClass * TFileMergeInfo::Cl,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFileMergeInfo.html:69,Guid,Guide,69,doc/v632/classTFileMergeInfo.html,https://root.cern,https://root.cern/doc/v632/classTFileMergeInfo.html,1,['Guid'],['Guide']
Usability,". ROOT: TFileMerger Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; List of all members ; TFileMerger Class ReferenceInput/Output Library. ; This class provides file copy and merging services. ; It can be used to copy files (not only ROOT files), using TFile or any of its remote file access plugins. It is therefore useful in a Grid environment where the files might be accessible only remotely. The merging interface allows files containing histograms and trees to be merged, like the standalone hadd program. ; Definition at line 30 of file TFileMerger.h. Public Types; enum  EPartialMergeType { ;   kRegular = 0; , kIncremental = (1ULL << ( 1 )); , kResetable = (1ULL << ( 2 )); , kNonResetable = (1ULL << ( 3 )); , ;   kDelayWrite = (1ULL << ( 4 )); , kAll = (1ULL << ( 2 ))|(1ULL << ( 3 )); , kAllIncremental = kIncremental | kAll; , kOnlyListed = (1ULL << ( 5 )); , ;   kSkipListed = (1ULL << ( 6 )); , kKeepCompression = (1ULL << ( 7 )). };  Type of the partial merge. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFileMerger (Bool_t isLocal=kTRUE, Bool_t histoOneGo=kTRUE);  Create file merger object. ;  ;  ~TFi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileMerger.html:67,Guid,Guide,67,doc/master/classTFileMerger.html,https://root.cern,https://root.cern/doc/master/classTFileMerger.html,1,['Guid'],['Guide']
Usability,". ROOT: TFileOpenHandle Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TFileOpenHandle Class ReferenceInput/Output Library. ; Class holding info about the file being opened. ; Definition at line 354 of file TFile.h. Public Member Functions;  ~TFileOpenHandle () override;  ; Int_t GetCompress () const;  ; Int_t GetNetOpt () const;  ; const char * GetOpt () const;  ; Bool_t Matches (const char *name);  Return kTRUE if this async request matches the open request specified by 'url'. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileOpenHandle.html:71,Guid,Guide,71,doc/master/classTFileOpenHandle.html,https://root.cern,https://root.cern/doc/master/classTFileOpenHandle.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TFilePrefetch Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; TFilePrefetch Class ReferenceInput/Output Library. ; The prefetching mechanism uses two classes (TFilePrefetch and TFPBlock) to prefetch in advance a block of tree entries. ; There is a thread which takes care of actually transferring the blocks and making them available to the main requesting thread. Therefore, the time spent by the main thread waiting for the data before processing considerably decreases. Besides the prefetching mechanisms there is also a local caching option which can be enabled by the user. Both capabilities are disabled by default and must be explicitly enabled by the user. ; Definition at line 33 of file TFilePrefetch.h. Public Member Functions;  TFilePrefetch (TFile *);  Constructor. ;  ;  ~TFilePrefetch () override;  Destructor. ;  ; void AddPendingBlock (TFPBlock *);  Safe method to add a block to the pendingList. ;  ; void AddReadBlock (TFPBlock *);  Safe method to add a block to the readList. ;  ; Bool_t BinarySearchReadList (TFPBlock *, Long64_t, Int_t, Int_t *);  Search for a requested element in a block and return the index. ;  ; Bool_t CheckBlockInCache (char *&, TFPBlock *);  Test if the block is in cache. ;  ; TFPBlock * CreateBlockObj (Long64_t *, Int_t *, Int_t);  Create a new block or recycle an old one. ;  ; char * GetBlockFromCache (const char *, Int_t);  Return a buffer from cache. ;  ; std::condition_variable & GetCondNewBlock ();  ; TFPBlock * GetPendingBlock ();  Safe method to remove a block from the pendingList. ;  ; TThread * GetThread () const;  Return reference to the consumer thread. ;  ; Long64_t GetWaitTime ();  Return the time spent wating for buffer to be read in microseconds. ;  ; TClass * IsA () const override;  ; Bool_t IsPrefetchFini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFilePrefetch.html:69,Guid,Guide,69,doc/master/classTFilePrefetch.html,https://root.cern,https://root.cern/doc/master/classTFilePrefetch.html,1,['Guid'],['Guide']
Usability,". ROOT: TFileStager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TFileStager Class Reference. . Definition at line 36 of file TFileStager.h. Public Member Functions;  TFileStager (const char *stager);  ; virtual ~TFileStager ();  ; virtual TList * GetStaged (TCollection *pathlist);  Retrieves the staging (online) status for a list of path names. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsStaged (const char *);  Just check if the file exists locally. ;  ; virtual Bool_t IsValid () const;  ; virtual Int_t Locate (const char *u, TString &f);  Just check if the file exists locally. ;  ; virtual Int_t LocateCollection (TFileCollection *fc, Bool_t addDummyUrl=kFALSE);  Massive location of files. ;  ; virtual Bool_t Matches (const char *s);  ; virtual Bool_t Stage (const char *, Option_t *=nullptr);  ; virtual Bool_t Stage (TCollection *pathlist, Option_t *opt=nullptr);  Issue a stage request for a list of files. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileStager.html:67,Guid,Guide,67,doc/master/classTFileStager.html,https://root.cern,https://root.cern/doc/master/classTFileStager.html,1,['Guid'],['Guide']
Usability,". ROOT: TFitEditor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TFitEditor Class ReferenceGUI » ROOT Fit Panel. ; Allows to perform, explore and compare various fits. ; To display the new Fit panel interface right click on a histogram or a graph to pop up the context menu and then select the menu entry 'Fit Panel'.; ""General"" Tab; The first set of GUI elements is related to the function choice and settings. The status bar on the bottom provides information about the current minimization settings using the following abbreviations: LIB - shows the current choice between Minuit/Minuit2/Fumili MIGRAD or FUMILI points to the current minimization method in use. Itr: - shows the maximum number of iterations nnnn set for the fit. Prn: - can be DEF/VER/QT and shows the current print option in use.; ""Predefined"" combo box - contains a list of predefined functions in ROOT. The default one is Gaussian.; ""Operation"" radio button group defines selected operational mode between functions: NOP - no operation (default); ADD - addition CONV - convolution (will be implemented in the future).; Users can enter the function expression in a text entry field. The entered string is checked after Enter key was pressed. An error message shows up if the string is not accepted. The current prototype is limited and users have no freedom to enter file/user function names in this field.; ""Set Parameters"" button opens a dialog for parameters settings.; ""Fit Settings"" provides user interface elements related to the fitter. Currently there are two method choices: Chi-square and Binned Likelihood.; ""Linear Fit"" check button sets the use of Linear fitter is it is selected. Otherwise the option 'F' i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFitEditor.html:66,Guid,Guide,66,doc/master/classTFitEditor.html,https://root.cern,https://root.cern/doc/master/classTFitEditor.html,1,['Guid'],['Guide']
Usability,". ROOT: TFitResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TFitResult Class ReferenceHistogram Library. ; Extends the ROOT::Fit::Result class with a TNamed inheritance providing easy possibility for I/O. ; Definition at line 34 of file TFitResult.h. Public Member Functions;  TFitResult (const char *name, const char *title);  ;  TFitResult (const ROOT::Fit::FitResult &f);  Constructor from a ROOT::Fit::FitResult copy the contained TF1 pointer function if it is. ;  ;  TFitResult (int status=0);  ;  ~TFitResult () override;  ; bool Contour (unsigned int ipar, unsigned int jpar, TGraph *gr, double confLevel=0.683);  Create a 2D contour around the minimum for the parameter ipar and jpar if a minimum does not exist or is invalid it will return false on exit a TGraph is filled with the contour points the number of contour points is determined by the size of the TGraph. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; double Error (unsigned int i) const;  ; TMatrixDSym GetCorrelationMatrix () const;  Return the correlation matrix from fit. ;  ; TMatrixDSym GetCovarianceMatrix () const;  Return the covariance matrix from fit. ;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print result of the fit, by default chi2, parameter values and errors. ;  ; bool Scan (unsigned int ipar, TGraph *gr, double xmin=0, double xmax=0);  Scan parameter ipar between value of xmin and xmax A graph must be given which will be on return filled with the scan resul If the graph size is zero, a default size n = 40 will be used. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFitResult.html:66,Guid,Guide,66,doc/master/classTFitResult.html,https://root.cern,https://root.cern/doc/master/classTFitResult.html,1,['Guid'],['Guide']
Usability,". ROOT: TFitResultPtr Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TFitResultPtr Class Reference. ; Provides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointer, i.e. ; it is like a smart pointer to a TFitResult. In addition it provides an automatic conversion to an integer. In this way it can be returned from the TH1::Fit method and the change in TH1::Fit be backward compatible. ; Definition at line 32 of file TFitResultPtr.h. Public Member Functions;  TFitResultPtr (const std::shared_ptr< TFitResult > &p);  Constructor from a TFitResult pointer. ;  ;  TFitResultPtr (const TFitResultPtr &rhs);  ;  TFitResultPtr (int status=-1);  ;  TFitResultPtr (TFitResult *p);  Constructor from a TFitResult pointer. ;  ; virtual ~TFitResultPtr ();  Destructor. ;  ; TFitResult * Get () const;  Return contained pointer. ;  ; virtual TClass * IsA () const;  ;  operator int () const;  ; TFitResult & operator* () const;  Implement the de-reference operator to make the class acts as a pointer to a TFitResult assert in case the class does not contain a pointer to TFitResult. ;  ; TFitResult * operator-> () const;  Implement the -> operator to make the class acts as a pointer to a TFitResult. ;  ; TFitResultPtr & operator= (const TFitResultPtr &rhs);  Assignment operator. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; std::shared_ptr< TFitResult > fPointer;  ! Smart Pointer to TFitResult class ;  ; int fStatus;  fit status code ;  . #include <TFitResultPtr.h>; Constructor & Destructor Documentation. ◆ TFitR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFitResultPtr.html:69,Guid,Guide,69,doc/master/classTFitResultPtr.html,https://root.cern,https://root.cern/doc/master/classTFitResultPtr.html,1,['Guid'],['Guide']
Usability,". ROOT: TFitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TFitter Class Reference. ; Legacy Code TFitter is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TFitter might still be a valid solution. Consider switching to ROOT::Fit::Fitter. ; The ROOT standard fitter based on TMinuit ; Definition at line 19 of file TFitter.h. Public Member Functions;  TFitter (Int_t maxpar=25);  Default constructor. ;  ;  ~TFitter () override;  Default destructor. ;  ; Double_t Chisquare (Int_t npar, Double_t *params) const override;  ; void Clear (Option_t *option="""") override;  reset the fitter environment ;  ; Int_t ExecuteCommand (const char *command, Double_t *args, Int_t nargs) override;  Execute a fitter command; command : command string args : list of nargs command arguments. ;  ; void FixParameter (Int_t ipar) override;  Fix parameter ipar. ;  ; void GetConfidenceIntervals (Int_t n, Int_t ndim, const Double_t *x, Double_t *ci, Double_t cl=0.95) override;  Computes point-by-point confidence intervals for the fitted function. ;  ; void GetConfidenceIntervals (TObject *obj, Double_t cl=0.95) override;  Computes confidence intervals at level cl. ;  ; Double_t * GetCovarianceMatrix () const override;  return a pointer to the covariance matrix ;  ; Double_t GetCovarianceMatrixElement (Int_t i, Int_t j) const override;  return element i,j from the covariance matrix ;  ; Int_t GetErrors (Int_t ipar, Double_t &eplus, Double_t &eminus, Double_t &eparab, Double_t &globcc) const override;  return current errors for a parameter ipar : parameter number eplus : upper error eminus : lower error eparab : parabolic error globcc : global correlation coeffic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFitter.html:63,Guid,Guide,63,doc/master/classTFitter.html,https://root.cern,https://root.cern/doc/master/classTFitter.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TFoam Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFoam Class Reference. ; TFoam is the main class of the multi-dimensional general purpose Monte Carlo event generator (integrator) FOAM. . FOAM Version 1.02M; AuthorsS. Jadach and P.Sawicki Institute of Nuclear Physics, Cracow, Poland Stanislaw. Jadac.nosp@m.h@if.nosp@m.j.edu.nosp@m..pl, Pawel.nosp@m..Saw.nosp@m.icki@.nosp@m.ifj..nosp@m.edu.p.nosp@m.l. What is FOAM for?. Suppose you want to generate randomly points (vectors) according to an arbitrary probability distribution in n dimensions, for which you supply your own method. FOAM can do it for you! Even if your distributions has quite strong peaks and is discontinuous!; FOAM generates random points with weight one or with variable weight.; FOAM is capable to integrate using efficient ""adaptive"" MC method. (The distribution does not need to be normalized to one.). How does it work?; FOAM is the simplified version of the multi-dimensional general purpose Monte Carlo event generator (integrator) FOAM. It creates hyper-rectangular ""foam of cells"", which is more dense around its peaks. See the following 2-dim. example of the map of 1000 cells for doubly peaked distribution:. FOAM is now fully integrated with the ROOT package. The important bonus of the ROOT use is persistency of the FOAM objects!; For more sophisticated problems full version of FOAM may be more appropriate: See full version of FOAM. Simple example of the use of FOAM:; ; #include ""Riostream.h""; #include ""TFoam.h""; #include ""TCanvas.h""; #include ""TH2.h""; #include ""TMath.h""; #include ""TFoamIntegrand.h""; #include ""TRandom3.h""; ; //_____________________________________________________________________________; Double_t sqr(Double_t x){; return x*x;; }; //______________________________________",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFoam.html:61,Guid,Guide,61,doc/master/classTFoam.html,https://root.cern,https://root.cern/doc/master/classTFoam.html,1,['Guid'],['Guide']
Usability,". ROOT: TFoamCell Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TFoamCell Class Reference. ; Used by TFoam. ; Objects of this class are hyper-rectangular cells organized in the binary tree. Special algorithm for encoding relative positioning of the cells allow to save total memory allocation needed for the system of cells. ; Definition at line 12 of file TFoamCell.h. Public Member Functions;  TFoamCell ();  Default constructor for streamer. ;  ;  TFoamCell (Int_t);  User constructor allocating single empty Cell. ;  ;  TFoamCell (TFoamCell &&)=delete;  ;  TFoamCell (TFoamCell const &)=delete;  ;  ~TFoamCell () override;  Destructor. ;  ; void CalcVolume ();  Calculates volume of the cell using size params which are calculated. ;  ; void Fill (Int_t, TFoamCell *, TFoamCell *, TFoamCell *);  Fills in certain data into newly allocated cell. ;  ; Int_t GetBest () const;  ; TFoamCell ** GetCells () const;  ; TFoamCell * GetDau0 () const;  ; TFoamCell * GetDau1 () const;  ; Double_t GetDriv () const;  ; void GetHcub (TFoamVect &, TFoamVect &) const;  Provides size and position of the cell These parameter are calculated by analyzing information in all parents cells up to the root cell. ;  ; void GetHSize (TFoamVect &) const;  Provides size of the cell Size parameters are calculated by analyzing information in all parents cells up to the root cell. ;  ; Double_t GetIntg () const;  ; TFoamCell * GetPare () const;  ; Double_t GetPrim () const;  ; Int_t GetSerial () const;  ; Int_t GetStat () const;  ; Double_t GetVolume () const;  ; Double_t GetXdiv () const;  ; TClass * IsA () const override;  ; TFoamCell & operator= (const TFoamCell &)=delete;  ; TFoamCell & operator= (TFoamCell &&)=delete;  ; void Print (Option_t *option) const override;  Printout of the cell geometry parameters for the debug purpo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFoamCell.html:65,Guid,Guide,65,doc/master/classTFoamCell.html,https://root.cern,https://root.cern/doc/master/classTFoamCell.html,1,['Guid'],['Guide']
Usability,". ROOT: TFoamIntegrand Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TFoamIntegrand Class Referenceabstract. ; Abstract class representing n-dimensional real positive integrand function. ; Definition at line 9 of file TFoamIntegrand.h. Public Member Functions;  TFoamIntegrand ();  ;  ~TFoamIntegrand () override;  ; virtual Double_t Density (Int_t ndim, Double_t *)=0;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFoamIntegrand.html:70,Guid,Guide,70,doc/master/classTFoamIntegrand.html,https://root.cern,https://root.cern/doc/master/classTFoamIntegrand.html,1,['Guid'],['Guide']
Usability,". ROOT: TFoamMaxwt Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Attributes |; List of all members ; TFoamMaxwt Class Reference. ; Small auxiliary class for controlling MC weight. ; It provides certain measure of the ""maximum weight"" depending on small user-parameter ""epsilon"". It creates and uses 2 histograms of the TH1D class. User defines no. of bins nBin, nBin=1000 is recommended wmax defines weight range (1,wmax), it is adjusted ""manually"" ; Definition at line 12 of file TFoamMaxwt.h. Public Member Functions;  TFoamMaxwt ();  Constructor for streamer. ;  ;  TFoamMaxwt (Double_t, Int_t);  Principal user constructor. ;  ;  TFoamMaxwt (TFoamMaxwt &From);  Explicit COPY CONSTRUCTOR (unused, so far) ;  ;  ~TFoamMaxwt () override;  Destructor. ;  ; void Fill (Double_t);  Filling analyzed weight. ;  ; void GetMCeff (Double_t, Double_t &, Double_t &);  Calculates Efficiency= aveWt/wtLim for a given tolerance level epsilon<<1 using information stored in two histograms. ;  ; TClass * IsA () const override;  ; void Make (Double_t, Double_t &);  Calculates Efficiency= aveWt/wtLim for a given tolerance level epsilon<<1 To be called at the end of the MC run. ;  ; TFoamMaxwt & operator= (const TFoamMaxwt &);  substitution = ;  ; void Reset ();  Resetting weight analysis. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFoamMaxwt.html:66,Guid,Guide,66,doc/master/classTFoamMaxwt.html,https://root.cern,https://root.cern/doc/master/classTFoamMaxwt.html,1,['Guid'],['Guide']
Usability,". ROOT: TFoamVect Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TFoamVect Class Reference. ; Auxiliary class TFoamVect of n-dimensional vector, with dynamic allocation used for the cartesian geometry of the TFoam cells. ; Definition at line 10 of file TFoamVect.h. Public Member Functions;  TFoamVect ();  Default constructor for streamer. ;  ;  TFoamVect (const TFoamVect &);  Copy constructor. ;  ;  TFoamVect (Int_t);  User constructor creating n-dimensional vector and allocating dynamically array of components. ;  ;  ~TFoamVect () override;  Destructor. ;  ; Double_t GetCoord (Int_t i) const;  ; Int_t GetDim () const;  ; TClass * IsA () const override;  ; TFoamVect & operator*= (const Double_t &);  unary multiplication operator *= ;  ; TFoamVect operator+ (const TFoamVect &);  addition operator +; sum of 2 vectors: c=a+b, a=a+b, NEVER USE IT, VERY SLOW!!! ;  ; TFoamVect & operator+= (const TFoamVect &);  unary addition operator +=; adding vector c*=x, ;  ; TFoamVect operator- (const TFoamVect &);  subtraction operator -; difference of 2 vectors; c=a-b, a=a-b, NEVER USE IT, VERY SLOW!!! ;  ; TFoamVect & operator-= (const TFoamVect &);  unary subtraction operator -= ;  ; TFoamVect & operator= (const TFoamVect &);  substitution operator ;  ; TFoamVect & operator= (Double_t);  Loading in double prec. number, sometimes can be useful. ;  ; TFoamVect & operator= (Double_t[]);  Loading in ordinary double prec. vector, sometimes can be useful. ;  ; Double_t & operator[] (Int_t);  [] is for access to elements as in ordinary matrix like a[j]=b[j] (Perhaps against some strict rules but rather practical.) Range protection is built in, consequently for substitution one should use rather use a=b than explicit loop! ;  ; void Print (Option_t *option) const override;  Printout of all vector components on ""s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFoamVect.html:65,Guid,Guide,65,doc/master/classTFoamVect.html,https://root.cern,https://root.cern/doc/master/classTFoamVect.html,1,['Guid'],['Guide']
Usability,". ROOT: TFolder Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFolder Class ReferenceCore ROOT classes » Base ROOT classes. ; Legacy Code TFolder is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TFolder might still be a valid solution. ; A TFolder object is a collection of objects and folders. Folders have a name and a title and are identified in the folder hierarchy by a ""Unix-like"" naming mechanism. The root of all folders is //root. New folders can be dynamically added or removed to/from a folder. The folder hierarchy can be visualized via the TBrowser. The Root folders hierarchy can be seen as a whiteboard where objects are posted. Other classes/tasks can access these objects by specifying only a string pathname. This whiteboard facility greatly improves the modularity of an application, minimizing the class relationship problem that penalizes large applications.; Pointers are efficient to communicate between classes. However, one has interest to minimize direct coupling between classes in the form of direct pointers. One better uses the naming and search service provided by the Root folders hierarchy. This makes the classes loosely coupled and also greatly facilitates I/O operations. In a client/server environment, this mechanism facilitates the access to any kind of object in //root stores running on different processes.; A TFolder is created by invoking the TFolder constructor. It is placed inside an existing folder via the TFolder::AddFolder method. One can search for a folder or an object in a folder using the FindObject method. FindObject analyses the string passed as its argument and searches in the hierarchy until i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFolder.html:63,Guid,Guide,63,doc/master/classTFolder.html,https://root.cern,https://root.cern/doc/master/classTFolder.html,1,['Guid'],['Guide']
Usability,". ROOT: TFormLeafInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Public Attributes |; Protected Attributes |; List of all members ; TFormLeafInfo Class Reference. ; This class is a small helper class to implement reading a data member on an object stored in a TTree. ; TTreeFormula now relies on a variety of TFormLeafInfo classes to handle the reading of the information. Here is the list of theses classes:; TFormLeafInfo; TFormLeafInfoDirect; TFormLeafInfoNumerical; TFormLeafInfoClones; TFormLeafInfoCollection; TFormLeafInfoPointer; TFormLeafInfoMethod; TFormLeafInfoMultiVarDim; TFormLeafInfoMultiVarDimDirect; TFormLeafInfoCast. The following method are available from the TFormLeafInfo interface:. AddOffset(Int_t offset, TStreamerElement* element); GetCounterValue(TLeaf* leaf) : return the size of the array pointed to.; GetObjectAddress(TLeafElement* leaf) : Returns the location of the object pointed to.; GetMultiplicity() : Returns info on the variability of the number of elements; GetNdata(TLeaf* leaf) : Returns the number of elements; GetNdata() : Used by GetNdata(TLeaf* leaf); GetValue(TLeaf *leaf, Int_t instance = 0) : Return the value; GetValuePointer(TLeaf *leaf, Int_t instance = 0) : Returns the address of the value; GetLocalValuePointer(TLeaf *leaf, Int_t instance = 0) : Returns the address of the value of 'this' LeafInfo; IsString(); ReadValue(char *where, Int_t instance = 0) : Internal function to interpret the location 'where'; Update() : react to the possible loading of a shared library. . Definition at line 47 of file TFormLeafInfo.h. Classes; struct  GetValueHelper;  ; struct  GetValueHelper< Long64_t >;  ; struct  GetValueHelper< LongDouble_t >;  ; struct  GetValueHelper< ULong64_t >;  ; struct  ReadValueHelper;  ; struct  ReadValueHelper< Long64_t >;  ; struct  ReadValueHelper< LongDouble_t >;  ; struct  ReadValueHelper< ULong64_t >;  . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFormLeafInfo.html:69,Guid,Guide,69,doc/master/classTFormLeafInfo.html,https://root.cern,https://root.cern/doc/master/classTFormLeafInfo.html,1,['Guid'],['Guide']
Usability,". ROOT: TFormula Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TFormula Class ReferenceHistogram Library. ; The Formula class. ; This is a new version of the TFormula class based on Cling. This class is not 100% backward compatible with the old TFormula class, which is still available in ROOT as ROOT::v5::TFormula. Some of the TFormula member functions available in version 5, such as Analyze and AnalyzeFunction are not available in the new TFormula. On the other hand formula expressions which were valid in version 5 are still valid in TFormula version 6; This class has been implemented during Google Summer of Code 2013 by Maciej Zimnoch. Example of valid expressions:. sin(x)/x; [0]*sin(x) + [1]*exp(-[2]*x); x + y**2; x^2 + y^2; [0]*pow([1],4); 2*pi*sqrt(x/y); gaus(0)*expo(3) + ypol3(5)*x; gausn(0)*expo(3) + ypol3(5)*x; gaus(x, [0..2]) + expo(y, [3..4]). In the last examples above:. gaus(0) is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2) and (0) means start numbering parameters at 0; gausn(0) is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2)/(sqrt(2*pi)*[2])) and (0) means start numbering parameters at 0; expo(3) is a substitute for exp([3]+[4]*x); pol3(5) is a substitute for par[5]+par[6]*x+par[7]*x**2+par[8]*x**3 (PolN stands for Polynomial of degree N); gaus(x, [0..2]) is a more explicit way of writing gaus(0); expo(y, [3..4]) is a substitute for exp([3]+[4]*y). See below the full list of predefined functions which can be used as shortcuts in TFormula.; TMath functions can be part of the expression, eg:. TMath::Landau(x)*sin(x); TMath::Erf(x). Formula may contain constants",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFormula.html:64,Guid,Guide,64,doc/master/classTFormula.html,https://root.cern,https://root.cern/doc/master/classTFormula.html,1,['Guid'],['Guide']
Usability,". ROOT: TFormulaFunction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TFormulaFunction Class Reference. ; Helper class for TFormula. ; Definition at line 31 of file TFormula.h. Public Member Functions;  TFormulaFunction ();  ;  TFormulaFunction (const TString &name);  ;  TFormulaFunction (const TString &name, const TString &body, int numArgs);  ; const char * GetBody () const;  ; const char * GetName () const;  ; Int_t GetNargs () const;  ; Bool_t IsFuncCall () const;  ; Bool_t operator< (const TFormulaFunction &rhv) const;  ; Bool_t operator== (const TFormulaFunction &rhv) const;  . Public Attributes; TString fBody;  ; Bool_t fFound;  ; Bool_t fFuncCall;  ; TString fName;  ; Int_t fNargs;  . #include <v5/TFormula.h>; Constructor & Destructor Documentation. ◆ TFormulaFunction() [1/3]. TFormulaFunction::TFormulaFunction ; (; ). inline . Definition at line 43 of file TFormula.h. ◆ TFormulaFunction() [2/3]. TFormulaFunction::TFormulaFunction ; (; const TString & ; name, . const TString & ; body, . int ; numArgs . ). inline . Definition at line 44 of file TFormula.h. ◆ TFormulaFunction() [3/3]. TFormulaFunction::TFormulaFunction ; (; const TString & ; name). inline . Definition at line 46 of file TFormula.h. Member Function Documentation. ◆ GetBody(). const char * TFormulaFunction::GetBody ; (; ); const. inline . Definition at line 40 of file TFormula.h. ◆ GetName(). const char * TFormulaFunction::GetName ; (; ); const. inline . Definition at line 39 of file TFormula.h. ◆ GetNargs(). Int_t TFormulaFunction::GetNargs ; (; ); const. inline . Definition at line 41 of file TFormula.h. ◆ IsFuncCall(). Bool_t TFormulaFunction::IsFuncCall ; (; ); const. inline . Definition at line 42 of file TFormula.h. ◆ operator<(). Bool_t TFormulaFunction::operator< ; (; const TFormulaFunction & ; rhv); const. inline . Definition at line 48 of file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFormulaFunction.html:72,Guid,Guide,72,doc/master/classTFormulaFunction.html,https://root.cern,https://root.cern/doc/master/classTFormulaFunction.html,1,['Guid'],['Guide']
Usability,". ROOT: TFormulaParamOrder Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TFormulaParamOrder Class Reference. ; Functor defining the parameter order. ; Definition at line 83 of file TFormula.h. Public Member Functions; bool operator() (const TString &a, const TString &b) const;  . #include <v5/TFormula.h>; Member Function Documentation. ◆ operator()(). bool TFormulaParamOrder::operator() ; (; const TString & ; a, . const TString & ; b . ); const. Definition at line 375 of file TFormula.cxx. The documentation for this class was generated from the following files:; hist/hist/inc/v5/TFormula.h; hist/hist/src/TFormula.cxx. TFormulaParamOrder. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTFormulaParamOrder.html:74,Guid,Guide,74,doc/master/structTFormulaParamOrder.html,https://root.cern,https://root.cern/doc/master/structTFormulaParamOrder.html,2,['Guid'],['Guide']
Usability,". ROOT: TFormulaVariable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TFormulaVariable Class Reference. ; Another helper class for TFormula. ; Definition at line 64 of file TFormula.h. Public Member Functions;  TFormulaVariable ();  ;  TFormulaVariable (const TString &name, Double_t value, Int_t pos);  ; Int_t GetArrayPos () const;  ; Double_t GetInitialValue () const;  ; const char * GetName () const;  ; Bool_t operator< (const TFormulaVariable &rhv) const;  . Public Attributes; Int_t fArrayPos;  ; Bool_t fFound;  ; TString fName;  ; Double_t fValue;  . #include <v5/TFormula.h>; Constructor & Destructor Documentation. ◆ TFormulaVariable() [1/2]. TFormulaVariable::TFormulaVariable ; (; ). inline . Definition at line 74 of file TFormula.h. ◆ TFormulaVariable() [2/2]. TFormulaVariable::TFormulaVariable ; (; const TString & ; name, . Double_t ; value, . Int_t ; pos . ). inline . Definition at line 75 of file TFormula.h. Member Function Documentation. ◆ GetArrayPos(). Int_t TFormulaVariable::GetArrayPos ; (; ); const. inline . Definition at line 73 of file TFormula.h. ◆ GetInitialValue(). Double_t TFormulaVariable::GetInitialValue ; (; ); const. inline . Definition at line 72 of file TFormula.h. ◆ GetName(). const char * TFormulaVariable::GetName ; (; ); const. inline . Definition at line 71 of file TFormula.h. ◆ operator<(). Bool_t TFormulaVariable::operator< ; (; const TFormulaVariable & ; rhv); const. inline . Definition at line 77 of file TFormula.h. Member Data Documentation. ◆ fArrayPos. Int_t TFormulaVariable::fArrayPos. Definition at line 69 of file TFormula.h. ◆ fFound. Bool_t TFormulaVariable::fFound. Definition at line 70 of file TFormula.h. ◆ fName. TString TFormulaVariable::fName. Definition at line 67 of file TFormula.h. ◆ fValue. Double_t TFormulaVariable::fValue. Definition at line 68 of file TFormula.h. Librari",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFormulaVariable.html:72,Guid,Guide,72,doc/master/classTFormulaVariable.html,https://root.cern,https://root.cern/doc/master/classTFormulaVariable.html,1,['Guid'],['Guide']
Usability,". ROOT: TFractionFitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFractionFitter Class Reference. ; Fits MC fractions to data histogram. ; A la HMCMLL, see R. Barlow and C. Beeston, Comp. Phys. Comm. 77 (1993) 219-228, and http://www.hep.man.ac.uk/~roger/hfrac.f; The virtue of this fit is that it takes into account both data and Monte Carlo statistical uncertainties. The way in which this is done is through a standard likelihood fit using Poisson statistics; however, the template (MC) predictions are also varied within statistics, leading to additional contributions to the overall likelihood. This leads to many more fit parameters (one per bin per template), but the minimisation with respect to these additional parameters is done analytically rather than introducing them as formal fit parameters. Some special care needs to be taken in the case of bins with zero content. For more details please see the original publication cited above.; An example application of this fit is given below. For a TH1* histogram (""data"") fitted as the sum of three Monte Carlo sources (""mc""):; {; TH1F *data; //data histogram; TH1F *mc0; // first MC histogram; TH1F *mc1; // second MC histogram; TH1F *mc2; // third MC histogram; .... // retrieve histograms; TObjArray *mc = new TObjArray(3); // MC histograms are put in this array; mc->Add(mc0);; mc->Add(mc1);; mc->Add(mc2);; TFractionFitter* fit = new TFractionFitter(data, mc); // initialise; fit->Constrain(1,0.0,1.0); // constrain fraction 1 to be between 0 and 1; fit->SetRangeX(1,15); // use only the first 15 bins in the fit; Int_t status = fit->Fit(); // perform the fit; std::cout << ""fit status: "" << status << std::endl;; if (status == 0) { // check on fit status; TH1F* result = (TH1F*) fit->GetPlot();; data->Draw(""Ep"");; result",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFractionFitter.html:71,Guid,Guide,71,doc/master/classTFractionFitter.html,https://root.cern,https://root.cern/doc/master/classTFractionFitter.html,1,['Guid'],['Guide']
Usability,". ROOT: TFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TFrame Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Define a Frame. ; A TFrame is a TWbox for drawing histogram frames. ; Definition at line 19 of file TFrame.h. Public Member Functions;  TFrame ();  Frame default constructor. ;  ;  TFrame (const TFrame &frame);  Frame copy constructor. ;  ;  TFrame (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Frame normal constructor. ;  ;  ~TFrame () override;  Frame default destructor. ;  ; void Copy (TObject &frame) const override;  Copy this frame to frame. ;  ; void Draw (Option_t *option="""") override;  Draw this frame with its current attributes. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint this wbox with its current attributes. ;  ; void Pop () override;  Do not pop frame's, if allowed they would cover the picture they frame. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TBox. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UseCurrentStyle () override;  Replace current frame attributes by current style. ;  ;  Public Member Functions inherited from TWbox;  TWbox ();  ;  TWbox (const TWbox &wbox);  wbox copy constructor. ;  ;  TWbox (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color=18, Short_t bordersize=5, Short_t bordermode=1);  wbox normal constructor. ;  ;  ~TWbox () override=default;  ; void Copy (TObject &wbox) const override;  Copy this wbox to wbox. ;  ; void Draw (Option_t *option="""") override;  Draw this wbox with its current attr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFrame.html:62,Guid,Guide,62,doc/master/classTFrame.html,https://root.cern,https://root.cern/doc/master/classTFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TFree Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TFree Class ReferenceInput/Output Library. ; Service class for TFile. ; Each file has a linked list of free segments. Each free segment is described by its firts and last address. When an object is written to a file, a new Key (see TKey) is created. The first free segment big enough to accomodate the object is used. If the object size has a length corresponding to the size of the free segment, the free segment is deleted from the list of free segments. When an object is deleted from a file, a new TFree object is generated. If the deleted object is contiguous to an already deleted object, the free segments are merged in one single segment. ; Definition at line 27 of file TFree.h. Public Member Functions;  TFree ();  Default constructor. ;  ;  TFree (TList *lfree, Long64_t first, Long64_t last);  Constructor for a free segment. ;  ;  ~TFree () override;  Destructor. ;  ; TFree * AddFree (TList *lfree, Long64_t first, Long64_t last);  Add a new free segment to the list of free segments. ;  ; virtual void FillBuffer (char *&buffer);  Encode fre structure into output buffer. ;  ; TFree * GetBestFree (TList *lfree, Int_t nbytes);  Return the best free segment where to store nbytes. ;  ; Long64_t GetFirst () const;  ; Long64_t GetLast () const;  ; TClass * IsA () const override;  ; void ls (Option_t *="""") const override;  List free segment contents. ;  ; virtual void ReadBuffer (char *&buffer);  Decode one free structure from input buffer. ;  ; void SetFirst (Long64_t first);  ; void SetLast (Long64_t last);  ; Int_t Sizeof () const;  return number of bytes occupied by this TFree on permanent storage ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFree.html:61,Guid,Guide,61,doc/master/classTFree.html,https://root.cern,https://root.cern/doc/master/classTFree.html,1,['Guid'],['Guide']
Usability,". ROOT: TFriendElement Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TFriendElement Class ReferenceTree Library. ; A TFriendElement TF describes a TTree object TF in a file. ; When a TFriendElement TF is added to the list of friends of an existing TTree T, any variable from TF can be referenced in a query to T.; To add a TFriendElement to an existing TTree T, do: T.AddFriend(""friendTreename"",""friendTreeFile"");; See TTree::AddFriend for more information. ; Definition at line 33 of file TFriendElement.h. Public Types; enum  EStatusBits { kFromChain = (1ULL << ( 9 )); , kUpdated = (1ULL << ( 10 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFriendElement ();  Default constructor for a friend element. ;  ;  TFriendElement (TTree *tree, const char *treename, const char *filename);  Create a friend element. ;  ;  TFriendElement (TTree *tree, const char *treename, TFile *file);  Create a friend element. ;  ;  TFriendElement (TTree *tree, TTree *friendtree, const char *alias);  Create a friend element. ;  ;  ~TFriendElement () override;  Destructor. Disconnect from the owning tree if needed. ;  ; virtual TTree * Connect (); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFriendElement.html:70,Guid,Guide,70,doc/master/classTFriendElement.html,https://root.cern,https://root.cern/doc/master/classTFriendElement.html,1,['Guid'],['Guide']
Usability,". ROOT: TFumili Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TFumili Class Reference. . FUMILI minimization package; FUMILI is based on ideas, proposed by I.N. Silin [See NIM A440, 2000 (p431)]. It was converted from FORTRAN to C by Sergey Yaschenko s.yas.nosp@m.chen.nosp@m.ko@fz.nosp@m.-jue.nosp@m.lich..nosp@m.de; FUMILI is used to minimize Chi-square function or to search maximum of likelihood function.; Experimentally measured values \(F_i\) are fitted with theoretical functions \(f_i({\vec x}_i,\vec\theta\,\,)\), where \({\vec x}_i\) are coordinates, and \(\vec\theta\) – vector of parameters.; For better convergence Chi-square function has to be the following form. \[; {\chi^2\over2}={1\over2}\sum^n_{i=1}\left(f_i(\vec; x_i,\vec\theta\,\,)-F_i\over\sigma_i\right)^2 \tag{1}; \]. where \(\sigma_i\) are errors of measured function.; The minimum condition is. \[; {\partial\chi^2\over\partial\theta_i}=\sum^n_{j=1}{1\over\sigma^2_j}\cdot; {\partial f_j\over\partial\theta_i}\left[f_j(\vec; x_j,\vec\theta\,\,)-F_j\right]=0,\qquad i=1\ldots m\tag{2}; \]. where m is the quantity of parameters.; Expanding left part of (2) over parameter increments and retaining only linear terms one gets. \[; \left(\partial\chi^2\over\theta_i\right)_{\vec\theta={\vec\theta}^0}; +\sum_k\left(\partial^2\chi^2\over\partial\theta_i\partial\theta_k\right)_{; \vec\theta={\vec\theta}^0}\cdot(\theta_k-\theta_k^0); = 0\tag{3}; \]. Here \({\vec\theta}_0\) is some initial value of parameters. In general case:. \[; {\partial^2\chi^2\over\partial\theta_i\partial\theta_k}=; \sum^n_{j=1}{1\over\sigma^2_j}{\partial f_j\over\theta_i}; {\partial f_j\over\theta_k} +; \sum^n_{j=1}{(f_j - F_j)\over\sigma^2_j}\cdot; {\partial^2f_j\over\partial\theta_i\partial\theta_k}\tag{4}; \]. In FUMILI algorithm for second derivatives of Chi-squar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumili.html:63,Guid,Guide,63,doc/master/classTFumili.html,https://root.cern,https://root.cern/doc/master/classTFumili.html,1,['Guid'],['Guide']
Usability,". ROOT: TFumiliMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TFumiliMinimizer Class Reference. ; TFumiliMinimizer class: minimizer implementation based on TFumili. ; Definition at line 43 of file TFumiliMinimizer.h. Public Member Functions;  TFumiliMinimizer (int dummy=0);  Default constructor (an argument is needed by plug-in manager) ;  ;  ~TFumiliMinimizer () override;  Destructor (no operations) ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; virtual TClass * IsA () const;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; bool ProvidesError () const override;  minimizer provides error and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumiliMinimizer.html:72,Guid,Guide,72,doc/master/classTFumiliMinimizer.html,https://root.cern,https://root.cern/doc/master/classTFumiliMinimizer.html,1,['Guid'],['Guide']
Usability,". ROOT: TFunction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TFunction Class Reference. ; Global functions class (global functions are obtained from CINT). ; This class describes one single global function. The TROOT class contains a list of all currently defined global functions (accessible via TROOT::GetListOfGlobalFunctions()). ; Definition at line 30 of file TFunction.h. Public Member Functions;  TFunction (const TFunction &orig);  Copy operator. ;  ;  TFunction (MethodInfo_t *info=nullptr);  Default TFunction ctor. ;  ; virtual ~TFunction ();  TFunction dtor deletes adopted CINT MethodInfo. ;  ; TObject * Clone (const char *newname="""") const override;  Clone method. ;  ; Long_t ExtraProperty () const;  Get property description word. For meaning of bits see EProperty. ;  ; DeclId_t GetDeclId () const;  ; TList * GetListOfMethodArgs ();  Return list containing the TMethodArgs of a TFunction. ;  ; virtual const char * GetMangledName () const;  Returns the mangled name as defined by CINT, or 0 in case of error. ;  ; Int_t GetNargs () const;  Number of function arguments. ;  ; Int_t GetNargsOpt () const;  Number of function optional (default) arguments. ;  ; virtual const char * GetPrototype () const;  Returns the prototype of a function as defined by CINT, or 0 in case of error. ;  ; const char * GetReturnTypeName () const;  Get full type description of function return type, e,g.: ""class TDirectory*"". ;  ; std::string GetReturnTypeNormalizedName () const;  Get the normalized name of the return type. ;  ; const char * GetSignature ();  Return signature of function. ;  ; void * InterfaceMethod () const;  Return pointer to the interface method. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsValid ();  Return true if this function object ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFunction.html:65,Guid,Guide,65,doc/master/classTFunction.html,https://root.cern,https://root.cern/doc/master/classTFunction.html,1,['Guid'],['Guide']
Usability,". ROOT: TFunctionTemplate Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TFunctionTemplate Class Reference. ; Dictionary for function template This class describes one single function template. ; Definition at line 26 of file TFunctionTemplate.h. Public Member Functions;  TFunctionTemplate (const TFunctionTemplate &orig);  Copy operator. ;  ;  TFunctionTemplate (FuncTempInfo_t *info, TClass *cl);  Default TFunctionTemplate ctor. ;  ; virtual ~TFunctionTemplate ();  TFunctionTemplate dtor deletes adopted CINT FuncTempInfo. ;  ; TObject * Clone (const char *newname="""") const override;  Clone method. ;  ; Long_t ExtraProperty () const;  Get the properties not already defined in Property.See TDictionary's EFunctionProperty. ;  ; DeclId_t GetDeclId () const;  ; UInt_t GetTemplateMinReqArgs () const;  Number of function optional (default) arguments. ;  ; UInt_t GetTemplateNargs () const;  Number of function arguments. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsValid ();  Return true if this function template object is pointing to a currently loaded function. ;  ; TFunctionTemplate & operator= (const TFunctionTemplate &rhs);  Assignment operator. ;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool Update (FuncTempInfo_t *info);  Update the TFunctionTemplate to reflect the new info. ;  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TDictionary & operator= (const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFunctionTemplate.html:73,Guid,Guide,73,doc/master/classTFunctionTemplate.html,https://root.cern,https://root.cern/doc/master/classTFunctionTemplate.html,1,['Guid'],['Guide']
Usability,". ROOT: TG16ColorSelector Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TG16ColorSelector Class ReferenceGUI » Low level GUI widgets. ; A composite frame with 16 TGColorFrames. ; Definition at line 50 of file TGColorSelect.h. Public Member Functions;  TG16ColorSelector (const TGWindow *p=nullptr);  TG16ColorSelector constructor. ;  ;  ~TG16ColorSelector () override;  TG16ColorSelector destructor. ;  ; Int_t GetActive ();  ; TClass * IsA () const override;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages for TG16ColorSelector. ;  ; void SetActive (Int_t newat);  Set active color frame. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (Pixel_t back);  Change background color for this frame and all subframes. ;  ; virtual void Cleanup ();  Cleanup and delete all objects contained in this composite frame. ;  ; virtual TGFrameElement * FindFrameElement (TGFrame *f) const;  Find frame-element holding frame f. ;  ; UI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTG16ColorSelector.html:73,Guid,Guide,73,doc/master/classTG16ColorSelector.html,https://root.cern,https://root.cern/doc/master/classTG16ColorSelector.html,1,['Guid'],['Guide']
Usability,". ROOT: TGApplication Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TGApplication Class ReferenceGUI » Low level GUI widgets. ; This class initialize the ROOT GUI toolkit. ; This class must be instantiated exactly once in any given application. ; Definition at line 21 of file TGApplication.h. Public Member Functions;  TGApplication (const char *appClassName, Int_t *argc, char **argv, void *options=nullptr, Int_t numOptions=0);  Create a GUI application environment. ;  ;  ~TGApplication () override;  TGApplication dtor. ;  ; void GetOptions (Int_t *argc, char **argv) override;  Handle command line arguments. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TApplication;  TApplication (const char *appClassName, Int_t *argc, char **argv, void *options=nullptr, Int_t numOptions=0);  Create an application environment. ;  ; virtual ~TApplication ();  TApplication dtor. ;  ; virtual const char * ApplicationName () const;  ; Int_t Argc () const;  ; char ** Argv () const;  ; char * Argv (Int_t index) const;  Return specified argument. ;  ; void ClearInputFiles ();  Clear list containing macro files passed as program arguments. ;  ; EExitOnException ExitOnException (EExitOnException opt=kExit);  Set the exit on exception option. ;  ; virtual TApplicationImp * GetApplicationImp ();  ; TApplication * GetAppRemote () const;  ; const char * GetIdleCommand () const;  ; TString GetSetup ();  It gets the ROOT installation setup as TString. ;  ; TSignalHandler * GetSignalHandler () const;  ; virtual void HandleException (Int_t sig);  Handle exceptions (kSigBus, kSigSegmentationViolation, kSigIllegalInstructio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGApplication.html:69,Guid,Guide,69,doc/master/classTGApplication.html,https://root.cern,https://root.cern/doc/master/classTGApplication.html,1,['Guid'],['Guide']
Usability,". ROOT: TGButton Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TGButton Class ReferenceGUI » Low level GUI widgets. ; A button abstract base class. ; It defines general button behaviour. ; Definition at line 68 of file TGButton.h. Public Member Functions;  TGButton (const TGWindow *p=nullptr, Int_t id=-1, GContext_t norm=GetDefaultGC()(), UInt_t option=kRaisedFrame|kDoubleBorder);  Create button base class part. ;  ;  ~TGButton () override;  Delete button. ;  ; virtual void AllowStayDown (Bool_t a);  ; virtual void Clicked ();  ; TGButtonGroup * GetGroup () const;  ; GContext_t GetNormGC () const;  ; virtual EButtonState GetState () const;  ; virtual UInt_t GetStyle () const;  ; virtual TGToolTip * GetToolTip () const;  ; virtual void * GetUserData () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event. ;  ; Bool_t HandleCrossing (Event_t *event) override;  Handle mouse crossing event. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsDown () const;  ; virtual Bool_t IsExclusiveToggle () const;  ; virtual Bool_t IsOn () const;  ; virtual Bool_t IsToggleButton () const;  ; virtual void Pressed ();  ; virtual void Released ();  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a button widget as a C++ statement(s) on output stream out. ;  ; virtual void SetDown (Bool_t on=kTRUE, Bool_t emit=kFALSE);  ; virtual void SetEnabled (Bool_t e=kTRUE);  Set enabled or disabled state of button. ;  ; virtual void SetGroup (TGButtonGroup *gr);  Sets new button-group for this button. ;  ; virtual void SetOn (Bool_t on=kTRUE, Bool_t emit=kFALSE);  ; virtual void SetState (EButtonState state, Bool_t emit=kFALSE);  Set button state. ;  ; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGButton.html:64,Guid,Guide,64,doc/master/classTGButton.html,https://root.cern,https://root.cern/doc/master/classTGButton.html,1,['Guid'],['Guide']
Usability,". ROOT: TGButtonGroup Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TGButtonGroup Class ReferenceGUI » Low level GUI widgets. ; Organizes TGButton widgets in a group. ; A button group widget makes it easier to deal with groups of buttons. A button in a button group is associated with a unique identifier. The button group emits a Clicked() signal with this identifier when the button is clicked. Thus, a button group is an ideal solution when you have several similar buttons and want to connect all their Clicked() signals, for example, to one slot.; An exclusive button group switches off all toggle buttons except the one that was clicked. A button group is by default non-exclusive. All radio buttons that are inserted, will be mutually exclusive even if the button group is non-exclusive.; There are two ways of using a button group:; The button group is a parent widget of a number of buttons, i.e. the button group is the parent argument in the button constructor. The buttons are assigned identifiers 1, 2, 3 etc. in the order they are created or you can specify button id in the button constructor. A TGButtonGroup can display a frame and a title because it inherits from TGGroupFrame.; Example:; // vertical frame without border and title; TGVButtonGroup *bg = new TGVButtonGroup(main_frame);; ; // create text button with id=1; TGTextButton *button1 = new TGTextButton(bg,""some text"");; ; // create another text button with id=2; TGTextButton *button2 = new TGTextButton(bg,""another text"");; ; // map all buttons; bg->Show();; TGButtonGroup::Showvirtual void Show()Show group of buttons.Definition TGButtonGroup.cxx:549; TGTextButtonYield an action as soon as it is clicked.Definition TGButton.h:142; TGVButtonGroupOrganizes TGButton widg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGButtonGroup.html:69,Guid,Guide,69,doc/master/classTGButtonGroup.html,https://root.cern,https://root.cern/doc/master/classTGButtonGroup.html,1,['Guid'],['Guide']
Usability,". ROOT: TGCanvas Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGCanvas Class ReferenceGUI » Low level GUI widgets. ; A frame containing two scrollbars (a horizontal and a vertical) and a viewport. ; The viewport acts as the window through which we look at the contents of the container frame. ; Definition at line 192 of file TGCanvas.h. Public Types; enum  { kCanvasNoScroll = 0; , kCanvasScrollHorizontal = (1ULL << ( 0 )); , kCanvasScrollVertical = (1ULL << ( 1 )); , kCanvasScrollBoth = (kCanvasScrollHorizontal | kCanvasScrollVertical); };  ;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGCanvas (const TGWindow *p=nullptr, UInt_t w=1, UInt_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCanvas.html:64,Guid,Guide,64,doc/master/classTGCanvas.html,https://root.cern,https://root.cern/doc/master/classTGCanvas.html,1,['Guid'],['Guide']
Usability,". ROOT: TGCheckButton Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGCheckButton Class ReferenceGUI » Low level GUI widgets. ; Selects different options. ; Like text buttons, they have text or hot string as a label.; Selecting a check button will generate the event:; kC_COMMAND, kCM_CHECKBUTTON, button id, user data. If a command string has been specified (via SetCommand()) then this command string will be executed via the interpreter whenever a button is selected. A command string can contain the macros:. $MSG – kC_COMMAND, kCMCHECKBUTTON packed message (use GET_MSG() and GET_SUBMSG() to unpack); $PARM1 – button id; $PARM2 – user data pointer. Before executing these macros are expanded into the respective Long_t's ; Definition at line 264 of file TGButton.h. Public Member Functions;  TGCheckButton (const TGWindow *p, const char *s, const char *cmd, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  Create a check button widget. ;  ;  TGCheckButton (const TGWindow *p, TGHotString *s, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  Create a check button widget. ;  ;  TGCheckButton (const TGWindow *p=nullptr, const char *s=nullptr, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  Create a check button widget. ;  ;  ~TGCheckButton () override;  Delete a check button. ;  ; TGDimension GetDefaultSize () const override;  default size ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event. ;  ; Bool_t HandleCrossing (Event_t *event) override;  Handle mouse crossing event. ;  ; Bool_t HandleKey (Event_t *event) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCheckButton.html:69,Guid,Guide,69,doc/master/classTGCheckButton.html,https://root.cern,https://root.cern/doc/master/classTGCheckButton.html,1,['Guid'],['Guide']
Usability,". ROOT: TGClient Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TGClient Class ReferenceGUI » Low level GUI widgets. ; Window client. ; In client server windowing systems, like X11 this class is used to make the initial connection to the window server. ; Definition at line 37 of file TGClient.h. Public Member Functions;  TGClient (const char *dpyName=nullptr);  Create a connection with the display sever on host dpyName and setup the complete GUI system, i.e., graphics contexts, fonts, etc. ;  ;  ~TGClient () override;  Closing down client: cleanup and close X connection. ;  ; void AddIdleHandler (TGIdleHandler *h);  Add handler for idle events. ;  ; void AddUnknownWindowHandler (TGUnknownWindowHandler *h);  Add handler for unknown (i.e. unregistered) windows. ;  ; void CancelRedraw (TGWindow *w);  ; void ForceRedraw ();  ; void FreeColor (Pixel_t color) const;  Free color. ;  ; void FreeFont (const TGFont *font);  Free a font. ;  ; void FreeGC (const TGGC *gc);  Free a graphics context. ;  ; void FreeGC (GContext_t gc);  Free a graphics context. ;  ; void FreePicture (const TGPicture *pic);  Free picture resource. ;  ; Bool_t GetColorByName (const char *name, Pixel_t &pixel) const;  Get a color by name. ;  ; Colormap_t GetDefaultColormap () const;  ; const TGWindow * GetDefaultRoot () const;  Returns the root (i.e. ;  ; UInt_t GetDisplayHeight () const;  Get display height. ;  ; UInt_t GetDisplayWidth () const;  Get display width. ;  ; TGFont * GetFont (const char *font, Bool_t fixedDefault=kTRUE);  Get a font from the font pool. ;  ; TGFont * GetFont (const TGFont *font);  Get again specified font. Will increase its usage count. ;  ; FontStruct_t GetFontByName (const char *name, Bool_t fixedDefault=kTRUE) const;  Get a font by name. ;  ; TGFontPool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGClient.html:64,Guid,Guide,64,doc/master/classTGClient.html,https://root.cern,https://root.cern/doc/master/classTGClient.html,1,['Guid'],['Guide']
Usability,". ROOT: TGCocoa Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TGCocoa Class ReferenceGraphics » Graphics' Backends » Cocoa backend. ; This class implements TVirtualX interface for MacOS X, using Cocoa and Quartz 2D. ; TVirtualX is a typical fat interface, it's a ""C++ wrapper"" for X11 library. It's a union of several orthogonal interfaces like: color management, window management, pixmap management, cursors, events, images, drag and drop, font management, gui-rendering, non-gui graphics, etc. etc. ; Definition at line 58 of file TGCocoa.h. Public Member Functions;  TGCocoa ();  ;  TGCocoa (const char *name, const char *title);  ;  ~TGCocoa () override;  ; Int_t AddPixmap (ULong_t pixid, UInt_t w, UInt_t h) override;  Registers a pixmap created by TGLManager as a ROOT pixmap. ;  ; Int_t AddWindow (ULong_t qwid, UInt_t w, UInt_t h) override;  Registers a window created by Qt as a ROOT window. ;  ; Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color) override;  Allocates a read-only colormap entry corresponding to the closest RGB value supported by the hardware. ;  ; void Bell (Int_t percent) override;  Sets the sound bell. Percent is loudness from -100% to 100%. ;  ; void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t) override;  Changes the specified dynamic parameters if the pointer is actively grabbed by the client and if the specified time is no earlier than the last-pointer-grab time and no later than the current X server time. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) override;  Changes the components specified by the mask in gval for the specified GC. ;  ; void ChangeProperties (Window_t wid, Atom_t property, Atom_t type, Int_t format, UChar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:63,Guid,Guide,63,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,1,['Guid'],['Guide']
Usability,". ROOT: TGColorDialog Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGColorDialog Class ReferenceGUI » Low level GUI widgets. ; A full featured color selection dialog. ; It uses 2 TGColorPalette's and the TGColorPick widgets. ; Definition at line 136 of file TGColorDialog.h. Public Member Functions;  TGColorDialog (const TGWindow *p=nullptr, const TGWindow *m=nullptr, Int_t *retc=nullptr, Pixel_t *color=nullptr, Bool_t wait=kTRUE);  Color selection dialog constructor. ;  ;  ~TGColorDialog () override;  TGColorDialog destructor. ;  ; virtual void AlphaColorSelected (ULongptr_t);  Emit signal about selected alpha and color. ;  ; virtual void ColorSelected (Pixel_t);  Emit signal about selected color. ;  ; void DoPreview ();  Slot method called when Preview button is clicked. ;  ; TGColorPalette * GetCustomPalette () const;  ; TGColorPalette * GetPalette () const;  ; TClass * IsA () const override;  ; void SetColorInfo (Int_t event, Int_t px, Int_t py, TObject *selected);  Set the color info in RGB and HLS parts. ;  ; virtual void SetCurrentColor (Pixel_t col);  Change current color. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGColorDialog.html:69,Guid,Guide,69,doc/master/classTGColorDialog.html,https://root.cern,https://root.cern/doc/master/classTGColorDialog.html,1,['Guid'],['Guide']
Usability,". ROOT: TGColorFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGColorFrame Class ReferenceGUI » Low level GUI widgets. ; A small frame with border showing a specific color. ; Definition at line 22 of file TGColorSelect.h. Public Member Functions;  TGColorFrame (const TGWindow *p=nullptr, Pixel_t c=0, Int_t n=1);  TGColorFrame constructor. ;  ;  ~TGColorFrame () override;  ; void DrawBorder () override;  Draw TGColorFrame border. ;  ; Pixel_t GetColor () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle button events in TGColorFrame. ;  ; TClass * IsA () const override;  ; void SetActive (Bool_t in);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_t);  ; void AddInput (UInt_t emask);  Add events specified in the emask to the events the frame should handle. ;  ; virtual void ChangeBackground (Pixel_t back);  Change frame background color. ;  ; virtual void ChangeOptions (UInt_t options);  Change frame options. Options is an OR of the EFrameTypes. ;  ; Bool_t Contains (Int_t x, Int_t y) const;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; virtual void DeleteWindow ();  Delete window. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGColorFrame.html:68,Guid,Guide,68,doc/master/classTGColorFrame.html,https://root.cern,https://root.cern/doc/master/classTGColorFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TGColorPalette Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGColorPalette Class ReferenceGUI » Low level GUI widgets. ; A widget showing an matrix of color cells. ; The colors can be set and selected. ; Definition at line 32 of file TGColorDialog.h. Public Member Functions;  TGColorPalette (const TGWindow *p=nullptr, Int_t cols=8, Int_t rows=8, Int_t id=-1);  TGColorPalette widget: this is just a grid of color cells of the specified size. ;  ;  ~TGColorPalette () override;  Destructor. ;  ; virtual void ColorSelected (Pixel_t col=0);  ; Pixel_t GetColorByIndex (Int_t ix) const;  ; Pixel_t GetCurrentColor () const;  Return currently selected color value. ;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; Bool_t HandleButton (Event_t *event) override;  Handle button events in color palette. ;  ; Bool_t HandleKey (Event_t *event) override;  Handle keyboard events in color palette. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion events in color palette. ;  ; TClass * IsA () const override;  ; void SetCellSize (Int_t w=20, Int_t h=17);  Set color cell size. ;  ; void SetColor (Int_t ix, Pixel_t color);  Set color at index ix of color entries. ;  ; void SetColors (Pixel_t colors[]);  Set color entries in color samples. ;  ; void SetCurrentCellColor (Pixel_t color);  Set current cell color. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGColorPalette.html:70,Guid,Guide,70,doc/master/classTGColorPalette.html,https://root.cern,https://root.cern/doc/master/classTGColorPalette.html,1,['Guid'],['Guide']
Usability,". ROOT: TGColorPick Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; TGColorPick Class ReferenceGUI » Low level GUI widgets. ; A widget which allows a color to be picked from HLS color space. ; It consists of two elements: a color map window from where the user can select the hue and saturation level of a color, and a slider to select color's lightness.; Selecting a color in these two widgets will generate the event:; kC_COLORSEL, kCOL_CLICK, widget id, 0. and the signal:; ColorSelected(Pixel_t color) . Definition at line 83 of file TGColorDialog.h. Public Member Functions;  TGColorPick (const TGWindow *p=nullptr, Int_t w=1, Int_t h=1, Int_t id=-1);  TGColorPick constructor. ;  ;  ~TGColorPick () override;  TGColorPick destructor. ;  ; virtual void ColorSelected (Pixel_t col=0);  ; Pixel_t GetCurrentColor () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button events in color pick widget. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion events in color pick widget. ;  ; TClass * IsA () const override;  ; void SetColor (Pixel_t color);  Position the slider cursor on right color position. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_t);  ; void AddInput (UInt_t emask);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGColorPick.html:67,Guid,Guide,67,doc/master/classTGColorPick.html,https://root.cern,https://root.cern/doc/master/classTGColorPick.html,1,['Guid'],['Guide']
Usability,". ROOT: TGColorPopup Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGColorPopup Class ReferenceGUI » Low level GUI widgets. ; A popup containing a TG16ColorSelector and a ""More..."" button which popups up a TGColorDialog allowing custom color selection. ; Definition at line 75 of file TGColorSelect.h. Public Member Functions;  TGColorPopup (const TGWindow *p=nullptr, const TGWindow *m=nullptr, Pixel_t color=0);  TGColorPopup constructor. ;  ;  ~TGColorPopup () override;  TGColorPopup destructor. ;  ; void EndPopup ();  Ungrab pointer and unmap window. ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button events for TGColorPopup. ;  ; TClass * IsA () const override;  ; void PlacePopup (Int_t x, Int_t y, UInt_t w, UInt_t h);  Popup TGColorPopup at x,y position. ;  ; void PreviewAlphaColor (ULongptr_t color);  Emit a signal to see preview. ;  ; void PreviewColor (Pixel_t color);  Emit a signal to see preview. ;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages for TGColorPopup. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGColorPopup.html:68,Guid,Guide,68,doc/master/classTGColorPopup.html,https://root.cern,https://root.cern/doc/master/classTGColorPopup.html,1,['Guid'],['Guide']
Usability,". ROOT: TGColorSelect Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGColorSelect Class ReferenceGUI » Low level GUI widgets. ; Like a checkbutton but instead of the check mark there is color area with a little down arrow. ; When clicked on the arrow the TGColorPopup pops up.; Selecting a color in this widget will generate the event:; kC_COLORSEL, kCOL_SELCHANGED, widget id, pixel. and the signal:. ColorSelected(Pixel_t color) . Definition at line 104 of file TGColorSelect.h. Public Member Functions;  TGColorSelect (const TGWindow *p=nullptr, Pixel_t color=0, Int_t id=-1);  TGColorSelect constructor. ;  ;  ~TGColorSelect () override;  TGColorSelect destructor. ;  ; virtual void AlphaColorSelected (ULong_t colptr=0);  ; virtual void ColorSelected (Pixel_t color=0);  ; void Disable ();  Set state of widget as disabled. ;  ; void Enable (Bool_t on=kTRUE);  Set state of widget as enabled. ;  ; Pixel_t GetColor () const;  ; TGDimension GetDefaultSize () const override;  default size ;  ; Bool_t HandleButton (Event_t *event) override;  Handle button events for TGColorSelect. ;  ; TClass * IsA () const override;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages for TGColorSelect. ;  ; void Rename (const char *title);  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save a color select widget as a C++ statement(s) on output stream out. ;  ; void SetAlphaColor (ULong_t color, Bool_t emit=kTRUE);  Set color. ;  ; void SetColor (Pixel_t color, Bool_t emit=kTRUE);  Set color. ;  ; void SetDown (Bool_t on=kTRUE, Bool_t emit=kFALSE) override;  ; void SetEnabled (Bool_t e=kTRUE) override;  Set enabled or disabled state of button. ;  ; void Streamer (TBuffer &) override;  Stre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGColorSelect.html:69,Guid,Guide,69,doc/master/classTGColorSelect.html,https://root.cern,https://root.cern/doc/master/classTGColorSelect.html,1,['Guid'],['Guide']
Usability,". ROOT: TGColumnLayout Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGColumnLayout Class ReferenceGUI » Low level GUI widgets. ; The following layout manager do not make use of TGLayoutHints. ; Definition at line 229 of file TGLayout.h. Public Member Functions;  TGColumnLayout (TGCompositeFrame *main, Int_t s=0);  ; TGDimension GetDefaultSize () const override;  Return default dimension of the column layout. ;  ; TClass * IsA () const override;  ; void Layout () override;  Make a column layout of all frames in the list. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save column layout manager as a C++ statement(s) on output stream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGRowLayout;  TGRowLayout (TGCompositeFrame *main, Int_t s=0);  ; TGDimension GetDefaultSize () const override;  Return default dimension of the row layout. ;  ; TClass * IsA () const override;  ; void Layout () override;  Make a row layout of all frames in the list. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save row layout manager as a C++ statement(s) on output stream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGVerticalLayout;  TGVerticalLayout (TGCompositeFrame *main);  Create vertical layout manager. ;  ; TGDimension GetDefaultSize () const override;  Return default dimension of the vertical layout. ;  ; TClass * IsA () const override;  ; void Layout () override;  Make a vertical layout of all frames in the list. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save vertical layout ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGColumnLayout.html:70,Guid,Guide,70,doc/master/classTGColumnLayout.html,https://root.cern,https://root.cern/doc/master/classTGColumnLayout.html,1,['Guid'],['Guide']
Usability,". ROOT: TGComboBox Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGComboBox Class ReferenceGUI » Low level GUI widgets. ; A combobox (also known as a drop down listbox) allows the selection of one item out of a list of items. ; The selected item is visible in a little window. To view the list of possible items one has to click on a button on the right of the little window. This will drop down a listbox. After selecting an item from the listbox the box will disappear and the newly selected item will be shown in the little window.; The TGComboBox is user callable. ; Definition at line 47 of file TGComboBox.h. Public Member Functions;  TGComboBox (const TGWindow *p, const char *text, Int_t id=-1, UInt_t options=kHorizontalFrame|kSunkenFrame|kDoubleBorder, Pixel_t back=GetWhitePixel());  Create an editable combo box widget. ;  ;  TGComboBox (const TGWindow *p=nullptr, Int_t id=-1, UInt_t options=kHorizontalFrame|kSunkenFrame|kDoubleBorder, Pixel_t back=GetWhitePixel());  Create a combo box widget. ;  ;  ~TGComboBox () override;  Delete a combo box widget. ;  ; virtual void AddEntry (const char *s, Int_t id);  ; virtual void AddEntry (TGLBEntry *lbe, TGLayoutHints *lhints);  ; virtual void AddEntry (TGString *s, Int_t id);  ; virtual void Changed ();  ; void DrawBorder () override;  Draw border of combo box widget. ;  ; virtual void EnableTextInput (Bool_t on);  Switch text input or readonly mode of combobox (not perfect yet). ;  ; virtual TGLBEntry * FindEntry (const char *s) const;  Find entry by name. ;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; virtual TGListBox * GetListBox () const;  ; virtual Int_t GetNumberOfEntries () const;  ; virtual Int_t GetSelected () const;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGComboBox.html:66,Guid,Guide,66,doc/master/classTGComboBox.html,https://root.cern,https://root.cern/doc/master/classTGComboBox.html,1,['Guid'],['Guide']
Usability,". ROOT: TGComboBoxPopup Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGComboBoxPopup Class ReferenceGUI » Low level GUI widgets. ; A service class of the combobox. ; Selecting an item in the combobox will generate the event:; kC_COMMAND, kCM_COMBOBOX, combobox id, item id. . Definition at line 21 of file TGComboBox.h. Public Member Functions;  TGComboBoxPopup (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame, Pixel_t back=GetWhitePixel());  Create a combo box popup frame. ;  ; void EndPopup ();  Ungrab pointer and unmap popup window. ;  ; Bool_t HandleButton (Event_t *) override;  Handle mouse button event in combo box popup. ;  ; TClass * IsA () const override;  ; void KeyPressed (TGFrame *, UInt_t, UInt_t);  Slot handling the key press events. ;  ; void PlacePopup (Int_t x, Int_t y, UInt_t w, UInt_t h);  Popup combo box popup window at the specified place. ;  ; void SetListBox (TGListBox *lb);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGComboBoxPopup.html:71,Guid,Guide,71,doc/master/classTGComboBoxPopup.html,https://root.cern,https://root.cern/doc/master/classTGComboBoxPopup.html,1,['Guid'],['Guide']
Usability,". ROOT: TGCommandPlugin Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGCommandPlugin Class ReferenceGUI » Low level GUI widgets. ; Class used to redirect the command line input/output. ; Definition at line 25 of file TGCommandPlugin.h. Public Member Functions;  TGCommandPlugin (const TGWindow *p, UInt_t w, UInt_t h);  TGCommandPlugin Constructor. ;  ;  ~TGCommandPlugin () override;  Destructor. ;  ; void CheckRemote (const char *);  Check if actual ROOT session is a remote one or a local one. ;  ; Bool_t GetHistAdd ();  ; void HandleArrows (Int_t keysym);  Handle the 'up' and 'down' arrow key events. ;  ; void HandleCommand ();  Handle command line from the ""command"" combo box. ;  ; void HandleTab ();  Handle the 'TAB' key events. ;  ; void HandleTextChanged (const char *);  Handle the text changed events. ;  ; Bool_t HandleTimer (TTimer *t) override;  Handle timer event. ;  ; TClass * IsA () const override;  ; void SetHistAdd (Bool_t add=kTRUE);  The function SetHistAdd() is needed for a standalone TApplication to log the TGCommandPlugin commands into a ROOT history file. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void ToggleTimer (Bool_t on);  Let user stop the internal timer when there is no need to check for remote. ;  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMainFrame () override;  TGMainFrame destructor. ;  ; virtual Bool_t BindKey (const TGWindow *w, Int_t keycode, Int_t modifier) const;  Bind key to a window. ;  ; virtual void CloseWindow ();  Close and delete main frame. ;  ; void DontCallClose ();  Typically call this method i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCommandPlugin.html:71,Guid,Guide,71,doc/master/classTGCommandPlugin.html,https://root.cern,https://root.cern/doc/master/classTGCommandPlugin.html,1,['Guid'],['Guide']
Usability,". ROOT: TGCompositeFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGCompositeFrame Class ReferenceGUI » Low level GUI widgets. ; The base class for composite widgets (menu bars, list boxes, etc.). ; It provides:; a layout manager; a frame container (TList *) . Definition at line 287 of file TGFrame.h. Public Member Functions;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (Pixel_t back);  Change background color for this frame and all subframes. ;  ; virtual void Cleanup ();  Cleanup and delete all objects contained in this composite frame. ;  ; virtual TGFrameElement * FindFrameElement (TGFrame *f) const;  Find frame-element holding frame f. ;  ; UInt_t GetDefaultHeight () const override;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; UInt_t GetDefaultWidth () const override;  ; TGFrame * GetFrameFromPoint (Int_t x, Int_t y) override;  Get frame located at specified point. ;  ; virtual TGLayoutManager * GetLayoutManager () const;  ; virtual TList * GetList () const;  ; Int_t GetState (TGFrame *f) const;  Get state of sub frame. ;  ; Bool_t HandleButton (Event_t *) ove",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCompositeFrame.html:72,Guid,Guide,72,doc/master/classTGCompositeFrame.html,https://root.cern,https://root.cern/doc/master/classTGCompositeFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TGContainer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TGContainer Class ReferenceGUI » Low level GUI widgets. ; Manages a content area. ; It can display and control a hierarchy of multi-column items, and provides the ability to add new items at any time. By default it doesn't map subwindows which are items of the container. In this case subwindow must provide DrawCopy method, see for example TGLVEntry class. It is also possible to use option which allow to map subwindows. This option has much slower drawing speed in case of more than 1000 items placed in container. To activate this option the fMapSubwindows data member must be set to kTRUE (for example TTVLVContainer class); The TGContainer class can handle the keys:. F7, Ctnrl-F - activate search dialog; F3, Ctnrl-G - continue search; End - go to the last item in container; Home - go to the first item in container; PageUp,PageDown,arrow keys - navigate inside container; Return/Enter - equivalent to double click of the mouse button; Ctnrl-A - select/activate all items.; Space - invert selection. . Definition at line 31 of file TGCanvas.h. Public Member Functions;  TGContainer (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kSunkenFrame, Pixel_t back=GetDefaultFrameBackground());  Create a canvas container. ;  ;  TGContainer (TGCanvas *p, UInt_t options=kSunkenFrame, Pixel_t back=GetDefaultFrameBackground());  Create a canvas container. ;  ;  ~TGContainer () override;  Delete canvas container. ;  ; virtual void AdjustPosition ();  Move content to position of highlighted/activated frame. ;  ; virtual void Associate (const TGWindow *w);  ; virtual void ClearViewPort ();  Clear",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGContainer.html:67,Guid,Guide,67,doc/master/classTGContainer.html,https://root.cern,https://root.cern/doc/master/classTGContainer.html,1,['Guid'],['Guide']
Usability,". ROOT: TGContainerKeyboardTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TGContainerKeyboardTimer Class Reference. . Definition at line 93 of file TGCanvas.cxx. Public Member Functions;  TGContainerKeyboardTimer (TGContainer *t);  ; Bool_t Notify () override;  single shot timer ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGContainerKeyboardTimer.html:80,Guid,Guide,80,doc/master/classTGContainerKeyboardTimer.html,https://root.cern,https://root.cern/doc/master/classTGContainerKeyboardTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: TGContainerScrollTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TGContainerScrollTimer Class Reference. . Definition at line 114 of file TGCanvas.cxx. Public Member Functions;  TGContainerScrollTimer (TGContainer *t);  ; Bool_t Notify () override;  on-timeout ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGContainerScrollTimer.html:78,Guid,Guide,78,doc/master/classTGContainerScrollTimer.html,https://root.cern,https://root.cern/doc/master/classTGContainerScrollTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: TGDMLMatrix Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TGDMLMatrix Class ReferenceThe Geometry Package » GDML tools. ; This class is used in the process of reading and writing the GDML ""matrix"" tag. ; It represents a matrix with arbitrary number of rows and columns, storing elements in double precision. ; Definition at line 33 of file TGDMLMatrix.h. Public Member Functions;  TGDMLMatrix ();  ;  TGDMLMatrix (const char *name, size_t rows, size_t cols);  ;  TGDMLMatrix (const TGDMLMatrix &rhs);  ;  ~TGDMLMatrix () override;  ; Double_t Get (size_t r, size_t c) const;  ; size_t GetCols () const;  ; const char * GetMatrixAsString () const;  ; size_t GetRows () const;  ; TClass * IsA () const override;  ; TGDMLMatrix & operator= (const TGDMLMatrix &rhs);  ; void Print (Option_t *option="""") const override;  This method must be overridden when a class wants to print itself. ;  ; void Set (size_t r, size_t c, Double_t a);  ; void SetMatrixAsString (const char *mat);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDMLMatrix.html:67,Guid,Guide,67,doc/master/classTGDMLMatrix.html,https://root.cern,https://root.cern/doc/master/classTGDMLMatrix.html,1,['Guid'],['Guide']
Usability,". ROOT: TGDMLParse Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TGDMLParse Class ReferenceThe Geometry Package » GDML tools. ; This class contains the implementation of the GDML parser associated to all the supported GDML elements. ; User should never need to explicitly instaciate this class. It is internally used by the TGeoManager.; Each element process has a 'Binding' to ROOT. The 'binding' is specific mapping of GDML elements (materials, solids, etc) to specific objects which should be instanciated by the converted. In the present case (ROOT) the binding is implemented at the near the end of each process function. Most bindings follow similar format, dependent on what is being added to the geometry.; This file also contains the implementation of the TGDMLRefl class. This is just a small helper class used internally by the 'reflection' method (for reflected solids).; The presently supported list of TGeo classes is the following:; Materials:. TGeoElement; TGeoMaterial; TGeoMixture. Solids:. TGeoBBox; TGeoArb8; TGeoTubeSeg; TGeoConeSeg; TGeoCtub; TGeoPcon; TGeoTrap; TGeoGtra; TGeoTrd2; TGeoSphere; TGeoPara; TGeoTorus; TGeoHype; TGeoPgon; TGeoXtru; TGeoEltu; TGeoParaboloid; TGeoCompositeShape (subtraction, union, intersection). Approximated Solids:. Ellipsoid (approximated to a TGeoBBox); Elliptical cone (approximated to a TGeoCone). Geometry:. TGeoVolume; TGeoVolumeAssembly; divisions; reflection. When most solids or volumes are added to the geometry they; Whenever a new element is added to GDML schema, this class needs to be extended. The appropriate method (process) needs to be implemented, as well as the new element process then needs to be linked thru the function TGDMLParse; For any question or remarks concerning this ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDMLParse.html:66,Guid,Guide,66,doc/master/classTGDMLParse.html,https://root.cern,https://root.cern/doc/master/classTGDMLParse.html,1,['Guid'],['Guide']
Usability,". ROOT: TGDMLRefl Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TGDMLRefl Class ReferenceThe Geometry Package » GDML tools. ; This class is a helper class for TGDMLParse. ; It assists in the reflection process. This process takes a previously defined solid and can reflect the matrix of it. This class stores the name of the reflected solid, along with the name of the solid that is being reflected, and finally the reflected solid's matrix. This is then recalled when the volume is used in the structure part of the gdml file. ; Definition at line 30 of file TGDMLParse.h. Public Member Functions;  TGDMLRefl ();  ;  TGDMLRefl (const char *name, const char *solid, TGeoMatrix *matrix);  This constructor method stores the values brought in as params. ;  ;  ~TGDMLRefl () override;  ; TGeoMatrix * GetMatrix ();  This accessor method returns the matrix. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDMLRefl.html:65,Guid,Guide,65,doc/master/classTGDMLRefl.html,https://root.cern,https://root.cern/doc/master/classTGDMLRefl.html,1,['Guid'],['Guide']
Usability,". ROOT: TGDMLWrite Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TGDMLWrite Class ReferenceThe Geometry Package » GDML tools. ; This class contains implementation of converting ROOT's gGeoManager geometry to GDML file. ; gGeoManager is the instance of TGeoManager class containing tree of geometries creating resulting geometry. GDML is xml based format of file mirroring the tree of geometries according to GDML schema rules. For more information about GDML see http://gdml.web.cern.ch. Each object in ROOT is represented by xml tag (=xml node/element) in GDML.; This class is not needed to be instanciated. It should always be called by gGeoManager->Export(""xyz.gdml"") method. Export is driven by extenstion that is why "".gdml"" is important in resulting name.; Whenever a new ROOT geometry object is implemented or there is a change in GDML schema this class is needed to be updated to ensure proper mapping between ROOT objects and GDML elements.; Current status of mapping ROOT -> GDML is implemented in method called TGDMLWrite::ChooseObject and it contains following ""map"":; Solids:; TGeoBBox -> <box ... >; TGeoParaboloid -> <paraboloid ...>; TGeoSphere -> <sphere ...>; TGeoArb8 -> <arb8 ...>; TGeoConeSeg -> <cone ...>; TGeoCone -> <cone ...>; TGeoPara -> <para ...>; TGeoTrap -> <trap ...> or; - -> <arb8 ...>; TGeoGtra -> <twistedtrap ...> or; - -> <trap ...> or; - -> <arb8 ...>; TGeoTrd1 -> <trd ...>; TGeoTrd2 -> <trd ...>; TGeoTubeSeg -> <tube ...>; TGeoCtub -> <cutTube ...>; TGeoTube -> <tube ...>; TGeoPcon -> <polycone ...>; TGeoTorus -> <torus ...>; TGeoPgon -> <polyhedra ...>; TGeoEltu -> <eltube ...>; TGeoHype -> <hype ...>; TGeoXtru -> <xtru ...>; TGeoTessellated -> <tessellated ...>; TGeoCompo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDMLWrite.html:66,Guid,Guide,66,doc/master/classTGDMLWrite.html,https://root.cern,https://root.cern/doc/master/classTGDMLWrite.html,1,['Guid'],['Guide']
Usability,". ROOT: TGDNDManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGDNDManager Class Reference. . Definition at line 83 of file TGDNDManager.h. Public Member Functions;  TGDNDManager (TGFrame *toplevel, Atom_t *typelist);  TGDNDManager constructor. ;  ;  ~TGDNDManager () override;  TGDNDManager destructor. ;  ; Bool_t Drag (Int_t x_root, Int_t y_root, Atom_t action, Time_t timestamp);  Process drag event. ;  ; Bool_t Drop ();  Drop. ;  ; Bool_t EndDrag ();  End dragging. ;  ; TGFrame * GetMainFrame () const;  ; Window_t GetSource () const;  ; Window_t GetTarget () const;  ; Atom_t * GetTypeList () const;  ; Bool_t HandleClientMessage (Event_t *event);  Handle DND related client messages. ;  ; Bool_t HandleSelection (Event_t *event);  Handle selection event. ;  ; Bool_t HandleSelectionRequest (Event_t *event);  Handle selection request event. ;  ; Bool_t HandleTimer (TTimer *t) override;  Handle Drop timeout. ;  ; TClass * IsA () const override;  ; Bool_t IsDragging () const;  ; Bool_t RemoveRootProxy ();  Remove root window proxy. ;  ; void SetDragPixmap (Pixmap_t pic, Pixmap_t mask, Int_t hot_x, Int_t hot_y);  Set drag window pixmaps and hotpoint. ;  ; void SetMainFrame (TGFrame *main);  ; Bool_t SetRootProxy ();  Set root window proxy. ;  ; Bool_t StartDrag (TGFrame *src, Int_t x_root, Int_t y_root, Window_t grabWin=kNone);  Start dragging. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDNDManager.html:68,Guid,Guide,68,doc/master/classTGDNDManager.html,https://root.cern,https://root.cern/doc/master/classTGDNDManager.html,1,['Guid'],['Guide']
Usability,". ROOT: TGDimension Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TGDimension Class ReferenceGUI » Low level GUI widgets » GUI Geometry. . Definition at line 18 of file TGDimension.h. Public Member Functions;  TGDimension ();  ;  TGDimension (UInt_t width, UInt_t height);  ;  ~TGDimension ()=default;  ; TGDimension operator+ (const TGDimension &b) const;  ; TGDimension operator- (const TGDimension &b) const;  ; Bool_t operator== (const TGDimension &b) const;  . Public Attributes; UInt_t fHeight;  ; UInt_t fWidth;  . #include <TGDimension.h>; Constructor & Destructor Documentation. ◆ TGDimension() [1/2]. TGDimension::TGDimension ; (; ). inline . Definition at line 23 of file TGDimension.h. ◆ TGDimension() [2/2]. TGDimension::TGDimension ; (; UInt_t ; width, . UInt_t ; height . ). inline . Definition at line 24 of file TGDimension.h. ◆ ~TGDimension(). TGDimension::~TGDimension ; (; ). default . Member Function Documentation. ◆ operator+(). TGDimension TGDimension::operator+ ; (; const TGDimension & ; b); const. inline . Definition at line 31 of file TGDimension.h. ◆ operator-(). TGDimension TGDimension::operator- ; (; const TGDimension & ; b); const. inline . Definition at line 29 of file TGDimension.h. ◆ operator==(). Bool_t TGDimension::operator== ; (; const TGDimension & ; b); const. inline . Definition at line 27 of file TGDimension.h. Member Data Documentation. ◆ fHeight. UInt_t TGDimension::fHeight. Definition at line 21 of file TGDimension.h. ◆ fWidth. UInt_t TGDimension::fWidth. Definition at line 20 of file TGDimension.h. Libraries for TGDimension:. [legend]; The documentation for this class was generated from the following file:; gui/gui/inc/TGDimension.h. TGDimension. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDimension.html:67,Guid,Guide,67,doc/master/classTGDimension.html,https://root.cern,https://root.cern/doc/master/classTGDimension.html,2,['Guid'],['Guide']
Usability,". ROOT: TGDockButton Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGDockButton Class Reference. . Definition at line 28 of file TGDockableFrame.h. Public Member Functions;  TGDockButton (const TGCompositeFrame *p=nullptr, Int_t id=1);  Create a dock button (i.e. button with two vertical bars). ;  ;  ~TGDockButton () override;  Delete dock button. ;  ; Bool_t HandleCrossing (Event_t *event) override;  Handle dock button crossing events. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGButton;  TGButton (const TGWindow *p=nullptr, Int_t id=-1, GContext_t norm=GetDefaultGC()(), UInt_t option=kRaisedFrame|kDoubleBorder);  Create button base class part. ;  ;  ~TGButton () override;  Delete button. ;  ; virtual void AllowStayDown (Bool_t a);  ; virtual void Clicked ();  ; TGButtonGroup * GetGroup () const;  ; GContext_t GetNormGC () const;  ; virtual EButtonState GetState () const;  ; virtual UInt_t GetStyle () const;  ; virtual TGToolTip * GetToolTip () const;  ; virtual void * GetUserData () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event. ;  ; virtual Bool_t IsDown () const;  ; virtual Bool_t IsExclusiveToggle () const;  ; virtual Bool_t IsOn () const;  ; virtual Bool_t IsToggleButton () const;  ; virtual void Pressed ();  ; virtual void Released ();  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a button widget as a C++ statement(s) on output stream out. ;  ; virtual void SetDown (Bool_t on=kTRUE, Bool_t emit=kFALSE);  ; virtual void SetEnabled (Bool_t e=kTRUE);  Set enabled or disabled state of button. ;  ; virtual void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDockButton.html:68,Guid,Guide,68,doc/master/classTGDockButton.html,https://root.cern,https://root.cern/doc/master/classTGDockButton.html,1,['Guid'],['Guide']
Usability,". ROOT: TGDockHideButton Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGDockHideButton Class Reference. . Definition at line 47 of file TGDockableFrame.h. Public Member Functions;  TGDockHideButton (const TGCompositeFrame *p=nullptr);  Create a dock hide button (i.e. button with small triangle). ;  ; TClass * IsA () const override;  ; void SetAspectRatio (Int_t a);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGDockButton;  TGDockButton (const TGCompositeFrame *p=nullptr, Int_t id=1);  Create a dock button (i.e. button with two vertical bars). ;  ;  ~TGDockButton () override;  Delete dock button. ;  ; Bool_t HandleCrossing (Event_t *event) override;  Handle dock button crossing events. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGButton;  TGButton (const TGWindow *p=nullptr, Int_t id=-1, GContext_t norm=GetDefaultGC()(), UInt_t option=kRaisedFrame|kDoubleBorder);  Create button base class part. ;  ;  ~TGButton () override;  Delete button. ;  ; virtual void AllowStayDown (Bool_t a);  ; virtual void Clicked ();  ; TGButtonGroup * GetGroup () const;  ; GContext_t GetNormGC () const;  ; virtual EButtonState GetState () const;  ; virtual UInt_t GetStyle () const;  ; virtual TGToolTip * GetToolTip () const;  ; virtual void * GetUserData () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event. ;  ; virtual Bool_t IsDown () const;  ; virtual Bool_t IsExclusiveToggle () const;  ; virtual Bool_t IsOn () const;  ; virtual Bool_t IsToggleButton () const;  ; virtual void Pressed ();  ; virtual void Released ();  ; void SavePrimitive (std",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDockHideButton.html:72,Guid,Guide,72,doc/master/classTGDockHideButton.html,https://root.cern,https://root.cern/doc/master/classTGDockHideButton.html,1,['Guid'],['Guide']
Usability,". ROOT: TGDockableFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TGDockableFrame Class ReferenceGUI » Low level GUI widgets. ; A frame with handles that allow it to be undocked (i.e. ; put in a transient frame of its own) and to be docked again or hidden and shown again. It uses the TGDockButton, which is a button with two vertical bars (||) and TGDockHideButton, which is a button with a small triangle. The TGUndockedFrame is a transient frame that on closure will put the frame back in the dock. ; Definition at line 82 of file TGDockableFrame.h. Public Member Functions;  TGDockableFrame (const TGWindow *p=nullptr, Int_t id=-1, UInt_t options=kHorizontalFrame);  Create a dockable frame widget. ;  ;  ~TGDockableFrame () override;  Cleanup dockable frame. ;  ; void AddFrame (TGFrame *f, TGLayoutHints *hints) override;  Add frame to dockable frame container. Frame and hints are NOT adopted. ;  ; void DockContainer (Int_t del=kTRUE);  Dock container back to TGDockableFrame. ;  ; virtual void Docked ();  ; Bool_t EnableHide () const;  ; void EnableHide (Bool_t onoff);  Enable hiding. ;  ; Bool_t EnableUndock () const;  ; void EnableUndock (Bool_t onoff);  Enable undocking. ;  ; TGCompositeFrame * GetContainer () const;  ; TGUndockedFrame * GetUndocked () const;  ; void HideContainer ();  Hide dock container. ;  ; TClass * IsA () const override;  ; Bool_t IsFixedSize () const;  ; Bool_t IsHidden () const;  ; Bool_t IsUndocked () const;  ; Bool_t ProcessMessage (Longptr_t, Longptr_t, Longptr_t) override;  Process dockable frame messages. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a dockable frame widget as a C++ statement(s) on output stream out. ;  ; void SetFixedSize (Bool_t fixed);  ; void SetWindowName (const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDockableFrame.html:71,Guid,Guide,71,doc/master/classTGDockableFrame.html,https://root.cern,https://root.cern/doc/master/classTGDockableFrame.html,2,"['Guid', 'undo']","['Guide', 'undocked']"
Usability,". ROOT: TGDoubleHSlider Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGDoubleHSlider Class ReferenceGUI » Low level GUI widgets. ; Dragging the slider will generate the event: . kC_HSLIDER, kSL_POS, slider id, 0. Pressing the mouse will generate the event:; kC_HSLIDER, kSL_PRESS, slider id, 0. Releasing the mouse will generate the event:; kC_HSLIDER, kSL_RELEASE, slider id, 0. Use the functions GetMinPosition(), GetMaxPosition() and GetPosition() to retrieve the position of the slider. ; Definition at line 196 of file TGDoubleSlider.h. Public Member Functions;  TGDoubleHSlider (const TGWindow *p=nullptr, UInt_t w=1, UInt_t type=1, Int_t id=-1, UInt_t options=kHorizontalFrame, Pixel_t back=GetDefaultFrameBackground(), Bool_t reversed=kFALSE, Bool_t mark_ends=kFALSE);  Create horizontal slider widget. ;  ;  ~TGDoubleHSlider () override;  Delete a horizontal slider widget. ;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event in horizontal slider widget. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion event in horizontal slide widget. ;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save an horizontal slider as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGDoubleSlider;  TGDoubleSlider (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t type=1, Int_t id=-1, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground(), Bool_t reversed=kFALSE, Bool_t mark_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDoubleHSlider.html:71,Guid,Guide,71,doc/master/classTGDoubleHSlider.html,https://root.cern,https://root.cern/doc/master/classTGDoubleHSlider.html,1,['Guid'],['Guide']
Usability,". ROOT: TGDoubleSlider Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGDoubleSlider Class ReferenceabstractGUI » Low level GUI widgets. ; DoubleSlider widgets allow easy selection of a min and a max value out of a range. ; DoubleSliders can be either horizontal or vertical oriented and there is a choice of three different types of tick marks.; To change the min value press the mouse near to the left / bottom edge of the slider. To change the max value press the mouse near to the right / top edge of the slider. To change both values simultaneously press the mouse near to the center of the slider.; TGDoubleSlider is an abstract base class. Use the concrete TGDoubleVSlider and TGDoubleHSlider. ; Definition at line 36 of file TGDoubleSlider.h. Public Member Functions;  TGDoubleSlider (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t type=1, Int_t id=-1, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground(), Bool_t reversed=kFALSE, Bool_t mark_ends=kFALSE);  Slider constructor. ;  ;  ~TGDoubleSlider () override;  ; virtual Float_t GetMaxPosition () const;  ; virtual Double_t GetMaxPositionD () const;  ; virtual Long64_t GetMaxPositionL () const;  ; virtual Float_t GetMinPosition () const;  ; virtual Double_t GetMinPositionD () const;  ; virtual Long64_t GetMinPositionL () const;  ; virtual void GetPosition (Double_t &min, Double_t &max) const;  ; virtual void GetPosition (Double_t *min, Double_t *max) const;  ; virtual void GetPosition (Float_t &min, Float_t &max) const;  ; virtual void GetPosition (Float_t *min, Float_t *max) const;  ; virtual void GetPosition (Long64_t &min, Long64_t &max) const;  ; virtual void GetPosition (Long64_t *min, Long64_t *max) const;  ; Bool_t Han",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDoubleSlider.html:70,Guid,Guide,70,doc/master/classTGDoubleSlider.html,https://root.cern,https://root.cern/doc/master/classTGDoubleSlider.html,1,['Guid'],['Guide']
Usability,". ROOT: TGDoubleVSlider Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGDoubleVSlider Class ReferenceGUI » Low level GUI widgets. ; Dragging the slider will generate the event: . kC_VSLIDER, kSL_POS, slider id, 0. Pressing the mouse will generate the event:; kC_VSLIDER, kSL_PRESS, slider id, 0. Releasing the mouse will generate the event:; kC_VSLIDER, kSL_RELEASE, slider id, 0. Use the functions GetMinPosition(), GetMaxPosition() and GetPosition() to retrieve the position of the slider. ; Definition at line 170 of file TGDoubleSlider.h. Public Member Functions;  TGDoubleVSlider (const TGWindow *p=nullptr, UInt_t h=1, UInt_t type=1, Int_t id=-1, UInt_t options=kVerticalFrame, Pixel_t back=GetDefaultFrameBackground(), Bool_t reversed=kFALSE, Bool_t mark_ends=kFALSE);  Create a vertical slider widget. ;  ;  ~TGDoubleVSlider () override;  Delete vertical slider widget. ;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event in vertical slider. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion event in vertical slider. ;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save an horizontal slider as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGDoubleSlider;  TGDoubleSlider (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t type=1, Int_t id=-1, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground(), Bool_t reversed=kFALSE, Bool_t mark_ends=kFALSE);  Slider c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDoubleVSlider.html:71,Guid,Guide,71,doc/master/classTGDoubleVSlider.html,https://root.cern,https://root.cern/doc/master/classTGDoubleVSlider.html,1,['Guid'],['Guide']
Usability,". ROOT: TGDragWindow Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TGDragWindow Class ReferenceGUI » Low level GUI widgets. ; Window used as drag icon during drag and drop operations. ; Definition at line 22 of file TGDNDManager.h. Public Member Functions;  TGDragWindow (const TGWindow *p, Pixmap_t pic, Pixmap_t mask, UInt_t options=kChildFrame, Pixel_t back=GetWhitePixel());  TGDragWindow constructor. ;  ;  ~TGDragWindow () override;  TGDragWindow destructor. ;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; Window_t GetInputId () const;  ; Bool_t HasWindow (Window_t w) const;  ; TClass * IsA () const override;  ; void Layout () override;  Layout TGDragWindow. ;  ; void LowerWindow () override;  Lower TGDragWindow. ;  ; void MapRaised () override;  Map and Raise TGDragWindow. ;  ; void MapWindow () override;  Map TGDragWindow. ;  ; void RaiseWindow () override;  Raise TGDragWindow. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UnmapWindow () override;  Unmap TGDragWindow. ;  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_t);  ; void AddInput (UInt_t emask);  Add events specified in the emask to the events the frame should handle. ;  ; virtual void ChangeBackground (Pixel_t back);  Cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDragWindow.html:68,Guid,Guide,68,doc/master/classTGDragWindow.html,https://root.cern,https://root.cern/doc/master/classTGDragWindow.html,1,['Guid'],['Guide']
Usability,". ROOT: TGEventHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGEventHandler Class ReferenceGUI » Low level GUI widgets. . Definition at line 22 of file TGEventHandler.h. Public Member Functions;  TGEventHandler (const char *name, TGWindow *w, TObject *obj, const char *title="""");  ;  ~TGEventHandler () override;  ; void Activate ();  ; void DeActivate ();  ; virtual Bool_t HandleButton (Event_t *);  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleConfigureNotify (Event_t *);  ; virtual Bool_t HandleCrossing (Event_t *);  ; virtual Bool_t HandleDoubleClick (Event_t *);  ; virtual Bool_t HandleEvent (Event_t *ev);  Handle the event. ;  ; virtual Bool_t HandleFocusChange (Event_t *);  ; virtual Bool_t HandleKey (Event_t *);  ; virtual Bool_t HandleMotion (Event_t *);  ; virtual Bool_t HandleSelection (Event_t *);  ; virtual Bool_t HandleSelectionClear (Event_t *);  ; virtual Bool_t HandleSelectionRequest (Event_t *);  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void ProcessedEvent (Event_t *event);  ; virtual Bool_t ProcessMessage (Longptr_t, Longptr_t, Longptr_t);  ; virtual void Repaint ();  ; virtual void SendMessage (const TGWindow *w, Longptr_t msg, Longptr_t parm1, Longptr_t parm2);  Send message (i.e. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGEventHandler.html:70,Guid,Guide,70,doc/master/classTGEventHandler.html,https://root.cern,https://root.cern/doc/master/classTGEventHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TGFSComboBox Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TGFSComboBox Class ReferenceGUI » Low level GUI widgets. ; This is a combo box that is used in the File Selection dialog box. ; It will allow the file path selection. ; Definition at line 67 of file TGFSComboBox.h. Classes; struct  Lbc_t;  . Public Member Functions;  TGFSComboBox (const TGWindow *p=nullptr, Int_t id=-1, UInt_t options=kHorizontalFrame|kSunkenFrame|kDoubleBorder, Pixel_t back=GetWhitePixel());  Create a file system combobox showing system directories. ;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a file system combo box as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Update (const char *path);  Update file system combo box. ;  ;  Public Member Functions inherited from TGComboBox;  TGComboBox (const TGWindow *p, const char *text, Int_t id=-1, UInt_t options=kHorizontalFrame|kSunkenFrame|kDoubleBorder, Pixel_t back=GetWhitePixel());  Create an editable combo box widget. ;  ;  TGComboBox (const TGWindow *p=nullptr, Int_t id=-1, UInt_t options=kHorizontalFrame|kSunkenFrame|kDoubleBorder, Pixel_t back=GetWhitePixel());  Create a combo box widget. ;  ;  ~TGComboBox () override;  Delete a combo box widget. ;  ; virtual void AddEntry (const char *s, Int_t id);  ; virtual void AddEntry (TGLBEntry *lbe, TGLayoutHints *lhints);  ; virtual void AddEntry (TGString *s, Int_t id);  ; virtual void Changed ();  ; void DrawBorder () override;  Draw border of combo box widget. ;  ; virtual void EnableTextInput (Bool_t on);  Switch text input or readonly mode of combobox (not perfect yet). ;  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFSComboBox.html:68,Guid,Guide,68,doc/master/classTGFSComboBox.html,https://root.cern,https://root.cern/doc/master/classTGFSComboBox.html,1,['Guid'],['Guide']
Usability,". ROOT: TGFSFrameElement Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TGFSFrameElement Class Reference. . Definition at line 95 of file TGFSContainer.cxx. Public Member Functions; Int_t Compare (const TObject *obj) const override;  Sort frame elements in file selection list view container. ;  ; Bool_t IsSortable () const override;  ;  Public Member Functions inherited from TGFrameElement;  TGFrameElement ();  ;  TGFrameElement (TGFrame *f, TGLayoutHints *l);  Constructor. ;  ;  ~TGFrameElement () override;  Destructor. Decrease ref. count of fLayout. ;  ; TClass * IsA () const override;  ; void ls (Option_t *option="""") const override;  The ls function lists the contents of a class on stdout. ;  ; void Print (Option_t *option="""") const override;  Print this frame element. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an objec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFSFrameElement.html:72,Guid,Guide,72,doc/master/classTGFSFrameElement.html,https://root.cern,https://root.cern/doc/master/classTGFSFrameElement.html,1,['Guid'],['Guide']
Usability,". ROOT: TGFileBrowser Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGFileBrowser Class ReferenceGUI » Low level GUI widgets. ; System file browser, used as TRootBrowser plug-in. ; This class is the real core of the ROOT browser. ; Definition at line 36 of file TGFileBrowser.h. Public Types; typedef std::map< TGListTreeItem *, std::string > mFiltered_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::list< TGListTreeItem * > sLTI_t;  ;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGFileBrowser (const TGWindow *p, TBrowser *b=nullptr, UInt_t w=200, UInt_t h=400);  TGFileBrowser constructor. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFileBrowser.html:69,Guid,Guide,69,doc/master/classTGFileBrowser.html,https://root.cern,https://root.cern/doc/master/classTGFileBrowser.html,1,['Guid'],['Guide']
Usability,". ROOT: TGFileContainer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TGFileContainer Class Reference. . Definition at line 115 of file TGFSContainer.h. Public Member Functions;  TGFileContainer (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kSunkenFrame, Pixel_t back=GetDefaultFrameBackground());  Create a list view container which will hold the contents of the current directory. ;  ;  TGFileContainer (TGCanvas *p, UInt_t options=kSunkenFrame, Pixel_t back=GetDefaultFrameBackground());  Create a list view container which will hold the contents of the current directory. ;  ;  ~TGFileContainer () override;  Delete list view file container. ;  ; virtual TGFileItem * AddFile (const char *name, const TGPicture *pic=nullptr, const TGPicture *lpic=nullptr);  Add file in container. ;  ; void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr) override;  Add frame to the composite frame. ;  ; virtual TGFileItem * AddRemoteFile (TObject *obj, const TGPicture *ipic=nullptr, const TGPicture *ilpic=nullptr);  Add remote file in container. ;  ; virtual void ChangeDirectory (const char *path);  Change current directory. ;  ; virtual void DisplayDirectory ();  Display the contents of the current directory in the container. ;  ; const char * GetDirectory () const;  ; Bool_t GetDisplayStat ();  ; virtual void GetFilePictures (const TGPicture **pic, const TGPicture **lpic, Int_t file_type, Bool_t is_link, const char *ext, Bool_t small);  Determine the file picture for the given file type. ;  ; Bool_t HandleTimer (TTimer *t) override;  Refresh container contents. ;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a file container widget as a C++ statement(s) on output stream out. ;  ; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFileContainer.html:71,Guid,Guide,71,doc/master/classTGFileContainer.html,https://root.cern,https://root.cern/doc/master/classTGFileContainer.html,1,['Guid'],['Guide']
Usability,". ROOT: TGFileDialog Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGFileDialog Class ReferenceGUI » Low level GUI widgets. ; This class creates a file selection dialog. ; It contains a combo box to select the desired directory. A listview with the different files in the current directory and a combo box with which you can select a filter (on file extensions). When creating a file dialog one passes a pointer to a TGFileInfo object. In this object you can set the fFileTypes and fIniDir to specify the list of file types for the filter combo box and the initial directory. When the TGFileDialog ctor returns the selected file name can be found in the TGFileInfo::fFilename field and the selected directory in TGFileInfo::fIniDir. The fFilename and fIniDir are deleted by the TGFileInfo dtor. ; Definition at line 65 of file TGFileDialog.h. Public Member Functions;  TGFileDialog (const TGWindow *p=nullptr, const TGWindow *main=nullptr, EFileDialogMode dlg_type=kFDOpen, TGFileInfo *file_info=nullptr);  Create a file selection dialog. ;  ;  ~TGFileDialog () override;  Delete file dialog. ;  ; void CloseWindow () override;  Close file dialog. ;  ; TClass * IsA () const override;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages generated by the user input in the file dialog. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFileDialog.html:68,Guid,Guide,68,doc/master/classTGFileDialog.html,https://root.cern,https://root.cern/doc/master/classTGFileDialog.html,1,['Guid'],['Guide']
Usability,". ROOT: TGFileItem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGFileItem Class Reference. . Definition at line 42 of file TGFSContainer.h. Public Member Functions;  TGFileItem (const TGWindow *p, const TGPicture *bpic, const TGPicture *blpic, const TGPicture *spic, const TGPicture *slpic, TGString *name, FileStat_t &stat, EListViewMode viewMode=kLVList, UInt_t options=kVerticalFrame, Pixel_t back=GetWhitePixel());  Create a list view item. ;  ;  TGFileItem (const TGWindow *p=nullptr, const TGPicture *bpic=nullptr, const TGPicture *blpic=nullptr, const TGPicture *spic=nullptr, const TGPicture *slpic=nullptr, TGString *name=nullptr, Int_t type=0, Long64_t size=1, Int_t uid=0, Int_t gid=0, Long_t modtime=0, EListViewMode viewMode=kLVList, UInt_t options=kVerticalFrame, Pixel_t back=GetWhitePixel());  Create a list view item. ;  ;  ~TGFileItem () override;  Destructor. ;  ; virtual TDNDData * GetDNDdata (Atom_t);  ; Int_t GetGid () const;  ; Long_t GetModTime () const;  ; Long64_t GetSize () const;  ; Int_t GetType () const;  ; Int_t GetUid () const;  ; Atom_t HandleDNDEnter (Atom_t *) override;  Handle drag and drop enter. ;  ; Bool_t HandleDNDFinished () override;  ; Bool_t HandleDNDLeave () override;  ; Atom_t HandleDNDPosition (int, int, Atom_t action, int, int) override;  ; TClass * IsA () const override;  ; Bool_t IsActive () const override;  ; Bool_t IsSymLink () const;  ; void SetDNDData (TDNDData *data);  Set drag and drop data. ;  ; void SetDNDObject (TObject *obj);  Set drag and drop object. ;  ; void SetViewMode (EListViewMode viewMode) override;  Set container item view mode. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFileItem.html:66,Guid,Guide,66,doc/master/classTGFileItem.html,https://root.cern,https://root.cern/doc/master/classTGFileItem.html,1,['Guid'],['Guide']
Usability,". ROOT: TGFont Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; Friends |; List of all members ; TGFont Class ReferenceGUI » Low level GUI widgets. ; Encapsulate fonts used in the GUI system. ; Definition at line 140 of file TGFont.h. Public Member Functions;  ~TGFont () override;  Delete font. ;  ; TGTextLayout * ComputeTextLayout (const char *string, Int_t numChars, Int_t wrapLength, Int_t justify, Int_t flags, UInt_t *width, UInt_t *height) const;  Computes the amount of screen space needed to display a multi-line, justified string of text. ;  ; void DrawChars (Drawable_t dst, GContext_t gc, const char *source, Int_t numChars, Int_t x, Int_t y) const;  Perform a quick sanity check to ensure we won't overflow the X coordinate space. ;  ; void DrawCharsExp (Drawable_t dst, GContext_t gc, const char *source, Int_t numChars, Int_t x, Int_t y) const;  Draw a string of characters on the screen. ;  ; FontAttributes_t GetFontAttributes () const;  ; FontH_t GetFontHandle () const;  ; void GetFontMetrics (FontMetrics_t *m) const;  Get font metrics. ;  ; FontStruct_t GetFontStruct () const;  ; TClass * IsA () const override;  ; Int_t MeasureChars (const char *source, Int_t numChars, Int_t maxLength, Int_t flags, Int_t *length) const;  Determine the number of characters from the string that will fit in the given horizontal span. ;  ; FontStruct_t operator() () const;  Not inline due to a bug in g++ 2.96 20000731 (Red Hat Linux 7.0) ;  ; Int_t PostscriptFontName (TString *dst) const;  Return the name of the corresponding Postscript font for this TGFont. ;  ; void Print (Option_t *option="""") const override;  Print font info. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save the used font as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFont.html:62,Guid,Guide,62,doc/master/classTGFont.html,https://root.cern,https://root.cern/doc/master/classTGFont.html,1,['Guid'],['Guide']
Usability,". ROOT: TGFontDialog Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGFontDialog Class ReferenceGUI » Low level GUI widgets. ; Font selection dialog, allowing to select one in the list of available fonts in the system. ; Definition at line 24 of file TGFontDialog.h. Classes; struct  FontProp_t;  . Public Member Functions;  TGFontDialog (const TGWindow *parent=nullptr, const TGWindow *t=nullptr, FontProp_t *fontProp=nullptr, const TString &sample="""", char **fontList=nullptr, Bool_t wait=kTRUE);  Create font dialog. ;  ;  ~TGFontDialog () override;  Delete all widgets. ;  ; virtual void AlignSelected (Int_t a);  ; virtual void ColorSelected (Pixel_t c);  ; virtual void EnableAlign (Bool_t on=kTRUE);  Enable/disable align combobox. ;  ; virtual void FontSelected (char *font);  ; TClass * IsA () const override;  ; virtual void SetAlign (Int_t align);  Set align. ;  ; virtual void SetColor (Pixel_t color);  Set color. ;  ; virtual void SetFont (TGFont *font);  Set font. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UpdateStyleSize (const char *family);  Build font style and size list boxes. ;  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a transient frame widget as a C++ stateme",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFontDialog.html:68,Guid,Guide,68,doc/master/classTGFontDialog.html,https://root.cern,https://root.cern/doc/master/classTGFontDialog.html,1,['Guid'],['Guide']
Usability,". ROOT: TGFontPool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGFontPool Class ReferenceGUI » Low level GUI widgets. ; Provides a pool of fonts. ; Definition at line 217 of file TGFont.h. Public Member Functions;  TGFontPool (TGClient *client);  Create a font pool. ;  ;  ~TGFontPool () override;  Cleanup font pool. ;  ; TGFont * FindFont (FontStruct_t font) const;  Find font based on its font struct. Returns 0 if font is not found. ;  ; TGFont * FindFontByHandle (FontH_t font) const;  Find font based on its font handle. Returns 0 if font is not found. ;  ; void FreeAttributeInfo (char **info);  Free attributes info. ;  ; void FreeFont (const TGFont *font);  Free font. If ref count is 0 delete font. ;  ; void FreeFontFamilies (char **f);  Delete an array of families allocated GetFontFamilies() method. ;  ; char ** GetAttributeInfo (const FontAttributes_t *fa);  Return information about the font attributes as an array of strings. ;  ; TGFont * GetFont (const char *family, Int_t ptsize, Int_t weight, Int_t slant);  Returns font specified bay family, pixel/point size, weight and slant negative value of ptsize means size in pixels positive value of ptsize means size in points. ;  ; TGFont * GetFont (const char *font, Bool_t fixedDefault=kTRUE);  Get the specified font. ;  ; TGFont * GetFont (const TGFont *font);  Use font, i.e. ;  ; TGFont * GetFont (FontStruct_t font);  Use font, i.e. increases ref count of specified font. ;  ; char ** GetFontFamilies ();  Return information about the font families that are available on the current display. ;  ; TClass * IsA () const override;  ; const char * NameOfFont (TGFont *font);  Given a font, return a textual string identifying it. ;  ; Bool_t ParseFontName (const char *string, FontAttributes_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFontPool.html:66,Guid,Guide,66,doc/master/classTGFontPool.html,https://root.cern,https://root.cern/doc/master/classTGFontPool.html,1,['Guid'],['Guide']
Usability,". ROOT: TGFontTypeComboBox Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGFontTypeComboBox Class Reference. ; The TGFontTypeComboBox is user callable and it creates a combobox for selecting the font. ; Definition at line 178 of file TGComboBox.h. Public Member Functions;  TGFontTypeComboBox (const TGWindow *p=nullptr, Int_t id=-1, UInt_t options=kHorizontalFrame|kSunkenFrame|kDoubleBorder, Pixel_t bask=GetWhitePixel());  Create a text font combo box. ;  ;  ~TGFontTypeComboBox () override;  Text font combo box dtor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGComboBox;  TGComboBox (const TGWindow *p, const char *text, Int_t id=-1, UInt_t options=kHorizontalFrame|kSunkenFrame|kDoubleBorder, Pixel_t back=GetWhitePixel());  Create an editable combo box widget. ;  ;  TGComboBox (const TGWindow *p=nullptr, Int_t id=-1, UInt_t options=kHorizontalFrame|kSunkenFrame|kDoubleBorder, Pixel_t back=GetWhitePixel());  Create a combo box widget. ;  ;  ~TGComboBox () override;  Delete a combo box widget. ;  ; virtual void AddEntry (const char *s, Int_t id);  ; virtual void AddEntry (TGLBEntry *lbe, TGLayoutHints *lhints);  ; virtual void AddEntry (TGString *s, Int_t id);  ; virtual void Changed ();  ; void DrawBorder () override;  Draw border of combo box widget. ;  ; virtual void EnableTextInput (Bool_t on);  Switch text input or readonly mode of combobox (not perfect yet). ;  ; virtual TGLBEntry * FindEntry (const char *s) const;  Find entry by name. ;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; virtual TGListBox * GetListBox () const;  ; virtual Int_t GetNumberOf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFontTypeComboBox.html:74,Guid,Guide,74,doc/master/classTGFontTypeComboBox.html,https://root.cern,https://root.cern/doc/master/classTGFontTypeComboBox.html,1,['Guid'],['Guide']
Usability,". ROOT: TGFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGFrame Class ReferenceGUI » Low level GUI widgets. ; A subclasses of TGWindow, and is used as base class for some simple widgets (buttons, labels, etc.). ; It provides:; position & dimension fields; an 'options' attribute (see constant above); a generic event handler; a generic layout mechanism; a generic border . Definition at line 80 of file TGFrame.h. Public Member Functions;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_t);  ; void AddInput (UInt_t emask);  Add events specified in the emask to the events the frame should handle. ;  ; virtual void ChangeBackground (Pixel_t back);  Change frame background color. ;  ; virtual void ChangeOptions (UInt_t options);  Change frame options. Options is an OR of the EFrameTypes. ;  ; Bool_t Contains (Int_t x, Int_t y) const;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; virtual void DeleteWindow ();  Delete window. ;  ; virtual void DrawBorder ();  Draw frame border. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFrame.html:63,Guid,Guide,63,doc/master/classTGFrame.html,https://root.cern,https://root.cern/doc/master/classTGFrame.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TGFrameElement Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; TGFrameElement Class Reference. . Definition at line 105 of file TGLayout.h. Public Member Functions;  TGFrameElement ();  ;  TGFrameElement (TGFrame *f, TGLayoutHints *l);  Constructor. ;  ;  ~TGFrameElement () override;  Destructor. Decrease ref. count of fLayout. ;  ; TClass * IsA () const override;  ; void ls (Option_t *option="""") const override;  The ls function lists the contents of a class on stdout. ;  ; void Print (Option_t *option="""") const override;  Print this frame element. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFrameElement.html:70,Guid,Guide,70,doc/master/classTGFrameElement.html,https://root.cern,https://root.cern/doc/master/classTGFrameElement.html,1,['Guid'],['Guide']
Usability,". ROOT: TGFrameElementPack Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; TGFrameElementPack Class Reference. . Definition at line 21 of file TGPack.h. Public Member Functions;  TGFrameElementPack (TGFrame *frame, TGLayoutHints *lh=nullptr, Float_t weight=1);  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGFrameElement;  TGFrameElement ();  ;  TGFrameElement (TGFrame *f, TGLayoutHints *l);  Constructor. ;  ;  ~TGFrameElement () override;  Destructor. Decrease ref. count of fLayout. ;  ; void ls (Option_t *option="""") const override;  The ls function lists the contents of a class on stdout. ;  ; void Print (Option_t *option="""") const override;  Print this frame element. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFrameElementPack.html:74,Guid,Guide,74,doc/master/classTGFrameElementPack.html,https://root.cern,https://root.cern/doc/master/classTGFrameElementPack.html,1,['Guid'],['Guide']
Usability,". ROOT: TGGC Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TGGC Class ReferenceGUI » Low level GUI widgets. ; Encapsulate a graphics context used in the low level graphics. ; TGGCPool provides a pool of graphics contexts. ; Definition at line 22 of file TGGC.h. Public Member Functions;  TGGC (const TGGC &g);  Copy a graphics context. ;  ;  TGGC (GCValues_t *values=nullptr);  Create a graphics context, registers GC in GCPool. ;  ;  ~TGGC () override;  Delete graphics context. ;  ; Int_t GetArcMode () const;  ; const GCValues_t * GetAttributes () const;  ; Pixel_t GetBackground () const;  ; Int_t GetCapStyle () const;  ; Pixmap_t GetClipMask () const;  ; Int_t GetClipXOrigin () const;  ; Int_t GetClipYOrigin () const;  ; const char * GetDashes () const;  ; Int_t GetDashLen () const;  ; Int_t GetDashOffset () const;  ; Int_t GetFillRule () const;  ; Int_t GetFillStyle () const;  ; FontH_t GetFont () const;  ; Pixel_t GetForeground () const;  ; EGraphicsFunction GetFunction () const;  ; GContext_t GetGC () const;  ; Bool_t GetGraphicsExposures () const;  ; Int_t GetJoinStyle () const;  ; Int_t GetLineStyle () const;  ; Int_t GetLineWidth () const;  ; Mask_t GetMask () const;  ; ULong_t GetPlaneMask () const;  ; Pixmap_t GetStipple () const;  ; Int_t GetSubwindowMode () const;  ; Pixmap_t GetTile () const;  ; Int_t GetTileStipXOrigin () const;  ; Int_t GetTileStipYOrigin () const;  ; TClass * IsA () const override;  ; GContext_t operator() () const;  Not inline due to a bug in g++ 2.96 20000731 (Red Hat Linux 7.0). ;  ; TGGC & operator= (const TGGC &rhs);  Graphics context assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print graphics contexts info. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGGC.html:60,Guid,Guide,60,doc/master/classTGGC.html,https://root.cern,https://root.cern/doc/master/classTGGC.html,1,['Guid'],['Guide']
Usability,". ROOT: TGGCPool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TGGCPool Class Reference. . Definition at line 103 of file TGGC.h. Public Member Functions;  TGGCPool (TGClient *client);  Create graphics context pool. ;  ;  ~TGGCPool () override;  Delete graphics context pool. ;  ; TGGC * FindGC (const TGGC *gc);  Find graphics context. Returns 0 in case gc is not found. ;  ; TGGC * FindGC (GContext_t gc);  Find graphics context based on its GContext_t handle. ;  ; void FreeGC (const TGGC *gc);  Delete graphics context if it is not used anymore. ;  ; void FreeGC (GContext_t gc);  Delete graphics context if it is not used anymore. ;  ; TGGC * GetGC (GContext_t gct);  returns graphics context based on its GContext_t handle. ;  ; TGGC * GetGC (GCValues_t *values, Bool_t rw=kFALSE);  Get the best matching graphics context depending on values. ;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  List all graphics contexts in the pool. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TIma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGGCPool.html:64,Guid,Guide,64,doc/master/classTGGCPool.html,https://root.cern,https://root.cern/doc/master/classTGGCPool.html,1,['Guid'],['Guide']
Usability,". ROOT: TGGotoDialog Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGGotoDialog Class Reference. . Definition at line 109 of file TGTextEditDialogs.h. Public Member Functions;  TGGotoDialog (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, Long_t *ret_code=nullptr, UInt_t options=kVerticalFrame);  Create a dialog to GoTo a specific line number. ;  ;  ~TGGotoDialog () override;  Clean up goto dialog. ;  ; void CloseWindow () override;  Close the dialog. ;  ; TClass * IsA () const override;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process goto dialog widget messages. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a transient frame widget as a C++ statement(s) on output stream out. ;  ; void SaveSource (const char *filename=""Rootdlog.C"", Option_t *option="""") override;  Save the GUI transient frame widget in a C++ macro file. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGGotoDialog.html:68,Guid,Guide,68,doc/master/classTGGotoDialog.html,https://root.cern,https://root.cern/doc/master/classTGGotoDialog.html,1,['Guid'],['Guide']
Usability,". ROOT: TGGroupFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGGroupFrame Class ReferenceGUI » Low level GUI widgets. ; A composite frame with a border and a title. ; It is typically used to group a number of logically related widgets visually together. ; Definition at line 522 of file TGFrame.h. Public Types; enum  ETitlePos { kLeft = -1; , kCenter = 0; , kRight = 1; };  ;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGGroupFrame (const TGWindow *p, TGString *title, UInt_t options=kVerticalFrame, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), Pix",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGGroupFrame.html:68,Guid,Guide,68,doc/master/classTGGroupFrame.html,https://root.cern,https://root.cern/doc/master/classTGGroupFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TGHButtonGroup Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGHButtonGroup Class ReferenceGUI » Low level GUI widgets. ; Organizes TGButton widgets in a group with one horizontal row. ; TGHButtonGroup is a convenience class that offers a thin layer on top of TGButtonGroup. It inherits from TGButtonGroup. ; Definition at line 112 of file TGButtonGroup.h. Public Member Functions;  TGHButtonGroup (const TGWindow *parent, const TString &title="""", GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), Pixel_t back=GetDefaultFrameBackground());  ;  ~TGHButtonGroup () override;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a button group widget as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGButtonGroup;  TGButtonGroup (const TGWindow *parent, UInt_t r, UInt_t c, Int_t s=0, Int_t h=0, const TString &title="""", GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), Pixel_t back=GetDefaultFrameBackground());  Constructor. ;  ;  TGButtonGroup (const TGWindow *parent=nullptr, const TString &title="""", UInt_t options=kChildFrame|kVerticalFrame, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), Pixel_t back=GetDefaultFrameBackground());  Constructor. Layout 1 row or 1 column. ;  ;  ~TGButtonGroup () override;  Destructor, we do not delete the buttons. ;  ; virtual void ButtonClicked ();  This slot is activated when one of the buttons in the group emits the Clicked() signal. ;  ; virtual void ButtonPressed ();  This slot is activated when one of the buttons in the group emits the Pressed() signal. ;  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHButtonGroup.html:70,Guid,Guide,70,doc/master/classTGHButtonGroup.html,https://root.cern,https://root.cern/doc/master/classTGHButtonGroup.html,1,['Guid'],['Guide']
Usability,". ROOT: TGHProgressBar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TGHProgressBar Class Reference. . Definition at line 94 of file TGProgressBar.h. Public Member Functions;  TGHProgressBar (const TGWindow *p, EBarType type, UInt_t w);  Simple constructor allow you to create either a standard progress bar, or a more fancy progress bar (fancy means: double sized border, white background and a bit wider to allow for text to be printed in the bar. ;  ;  TGHProgressBar (const TGWindow *p=nullptr, UInt_t w=4, UInt_t h=kProgressBarTextWidth, Pixel_t back=GetWhitePixel(), Pixel_t barcolor=GetDefaultSelectedBackground(), GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t options=kDoubleBorder|kSunkenFrame);  Horizontal progress bar constructor. ;  ;  ~TGHProgressBar () override;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a horizontal progress bar as a C++ statement(s) on output stream out. ;  ; void ShowPosition (Bool_t set=kTRUE, Bool_t percent=kTRUE, const char *format=""%.2f"");  Show postion text, either in percent or formatted according format. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGProgressBar;  TGProgressBar (const TGWindow *p, UInt_t w, UInt_t h, Pixel_t back=GetWhitePixel(), Pixel_t barcolor=GetDefaultSelectedBackground(), GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t options=kDoubleBorder|kSunkenFrame);  Create progress bar. ;  ;  ~TGProgressBar () override;  ; virtual void Format (const char *f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHProgressBar.html:70,Guid,Guide,70,doc/master/classTGHProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGHProgressBar.html,5,"['Guid', 'Simpl', 'progress bar']","['Guide', 'Simple', 'progress bar']"
Usability,". ROOT: TGHScrollBar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGHScrollBar Class ReferenceGUI » Low level GUI widgets. ; The TGHScrollBar will generate the following event messages: kC_HSCROLL, kSB_SLIDERPOS, position, 0 kC_HSCROLL, kSB_SLIDERTRACK, position, 0. ; Definition at line 142 of file TGScrollBar.h. Public Member Functions;  TGHScrollBar (const TGWindow *p=nullptr, UInt_t w=4, UInt_t h=2, UInt_t options=kHorizontalFrame, Pixel_t back=GetDefaultFrameBackground());  Create a horizontal scrollbar widget. ;  ;  ~TGHScrollBar () override;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; Bool_t HandleButton (Event_t *event) override;  Handle a mouse button event in a horizontal scrolbar. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion event in a horizontal scrollbar. ;  ; TClass * IsA () const override;  ; void Layout () override;  Layout and move horizontal scrollbar components. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save an horizontal scrollbar as a C++ statement(s) on output stream out. ;  ; void SetPosition (Int_t pos) override;  Set logical slider position of horizontal scrollbar. ;  ; void SetRange (Int_t range, Int_t page_size) override;  Set range of horizontal scrollbar. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGScrollBar;  TGScrollBar (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Constructor. ;  ;  ~TGScrollBar () override;  Delete a scrollbar (either horizontal or vertical). ;  ; void ChangeBackground (Pixel_t back) override;  Change background color. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHScrollBar.html:68,Guid,Guide,68,doc/master/classTGHScrollBar.html,https://root.cern,https://root.cern/doc/master/classTGHScrollBar.html,1,['Guid'],['Guide']
Usability,". ROOT: TGHSlider Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGHSlider Class ReferenceGUI » Low level GUI widgets. ; Concrete class for horizontal slider. ; Dragging the slider will generate the event:; kC_HSLIDER, kSL_POS, slider id, position (for horizontal slider). Pressing the mouse will generate the event:; kC_HSLIDER, kSL_PRESS, slider id, 0 (for horizontal slider). Releasing the mouse will generate the event:; kC_HSLIDER, kSL_RELEASE, slider id, 0 (for horizontal slider) . Definition at line 119 of file TGSlider.h. Public Member Functions;  TGHSlider (const TGWindow *p=nullptr, UInt_t w=40, UInt_t type=kSlider1|kScaleBoth, Int_t id=-1, UInt_t options=kHorizontalFrame, Pixel_t back=GetDefaultFrameBackground());  Create horizontal slider widget. ;  ;  ~TGHSlider () override;  Delete a horizontal slider widget. ;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event in horizontal slider widget. ;  ; Bool_t HandleConfigureNotify (Event_t *event) override;  Handles resize events for this widget. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion event in horizontal slide widget. ;  ; TClass * IsA () const override;  ; void Resize (TGDimension size) override;  Resize the frame. ;  ; void Resize (UInt_t w, UInt_t h) override;  Resize the frame. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save an horizontal slider as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGSlider;  TGSlider (const TGWindow *p=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHSlider.html:65,Guid,Guide,65,doc/master/classTGHSlider.html,https://root.cern,https://root.cern/doc/master/classTGHSlider.html,1,['Guid'],['Guide']
Usability,". ROOT: TGHSplitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGHSplitter Class Reference. . Definition at line 90 of file TGSplitter.h. Public Member Functions;  TGHSplitter (const TGWindow *p, UInt_t w, UInt_t h, Bool_t external);  Create a horizontal splitter. ;  ;  TGHSplitter (const TGWindow *p=nullptr, UInt_t w=4, UInt_t h=4, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Create a horizontal splitter. ;  ;  ~TGHSplitter () override;  Delete horizontal splitter widget. ;  ; void DrawBorder () override;  Draw horizontal splitter. ;  ; Bool_t GetAbove () const;  ; const TGFrame * GetFrame () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event in horizontal splitter. ;  ; Bool_t HandleCrossing (Event_t *event) override;  Handle mouse motion event in horizontal splitter. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion event in horizontal splitter. ;  ; TClass * IsA () const override;  ; Bool_t IsAbove () const;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a splitter widget as a C++ statement(s) on output stream out. ;  ; void SetFrame (TGFrame *frame, Bool_t above) override;  Set frame to be resized. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGSplitter;  TGSplitter (const TGWindow *p=nullptr, UInt_t w=2, UInt_t h=4, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Create a splitter. ;  ;  ~TGSplitter () override;  ; void DragStarted ();  Emit DragStarted signal. ;  ; Bool_t GetExternalHandler () const;  ; TClass * IsA () const override;  ; void Moved (Int_t delta);  Emit Moved ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHSplitter.html:67,Guid,Guide,67,doc/master/classTGHSplitter.html,https://root.cern,https://root.cern/doc/master/classTGHSplitter.html,1,['Guid'],['Guide']
Usability,". ROOT: TGHeaderFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGHeaderFrame Class ReferenceGUI » Low level GUI widgets. ; Horizontal Frame used to contain header buttons and splitters in a list view. ; Used to have resizable column headers. ; Definition at line 580 of file TGFrame.h. Public Member Functions;  TGHeaderFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Header Frame constructor. ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event in header frame. ;  ; Bool_t HandleDoubleClick (Event_t *event) override;  Handle double click mouse event in header frame. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion events in header frame. ;  ; TClass * IsA () const override;  ; void SetColumnsInfo (Int_t nColumns, TGTextButton **colHeader, TGVFileSplitter **splitHeader);  Set columns information in the header frame. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGHorizontalFrame;  TGHorizontalFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a horizontal frame widget as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHeaderFrame.html:69,Guid,Guide,69,doc/master/classTGHeaderFrame.html,https://root.cern,https://root.cern/doc/master/classTGHeaderFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TGHorizontal3DLine Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGHorizontal3DLine Class ReferenceGUI » Low level GUI widgets. ; A horizontal 3D line is a line that typically separates a toolbar from the menubar. ; Definition at line 18 of file TG3DLine.h. Public Member Functions;  TGHorizontal3DLine (const TGWindow *p=nullptr, UInt_t w=4, UInt_t h=2, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  constructor ;  ; void DrawBorder () override;  draw border ;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save an vertical 3D line as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_t);  ; void AddInput (UInt_t emask);  Add events specified in the emask to the events the frame should handle. ;  ; virtual void ChangeBackground (Pixel_t back);  Change frame background color. ;  ; virtual void ChangeOptions (UInt_t options);  Change frame options. Options is an OR of the EFrameTypes. ;  ; Bool_t Contains (Int_t x, Int_t y) const;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; virtual void DeleteWindow ();  Delete window. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHorizontal3DLine.html:74,Guid,Guide,74,doc/master/classTGHorizontal3DLine.html,https://root.cern,https://root.cern/doc/master/classTGHorizontal3DLine.html,1,['Guid'],['Guide']
Usability,". ROOT: TGHorizontalFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGHorizontalFrame Class ReferenceGUI » Low level GUI widgets. ; A composite frame that layout their children in horizontal way. ; Definition at line 385 of file TGFrame.h. Public Member Functions;  TGHorizontalFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a horizontal frame widget as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (Pixel_t back);  Change background color for this frame and all subframes. ;  ; virtual void Cleanup ();  Cleanup and delete all objects contained in this composite frame. ;  ; virtual TGFrameElement * FindFrameElement (TGFrame *f) const;  Find frame-element holding frame f. ;  ; UInt_t GetDefaultHeight () const override;  ; TGDimension GetDefaultSize () const override;  std::cout <<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHorizontalFrame.html:73,Guid,Guide,73,doc/master/classTGHorizontalFrame.html,https://root.cern,https://root.cern/doc/master/classTGHorizontalFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TGHorizontalLayout Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGHorizontalLayout Class ReferenceGUI » Low level GUI widgets. . Definition at line 187 of file TGLayout.h. Public Member Functions;  TGHorizontalLayout (TGCompositeFrame *main);  ; TGDimension GetDefaultSize () const override;  Return default dimension of the horizontal layout. ;  ; TClass * IsA () const override;  ; void Layout () override;  Make a horizontal layout of all frames in the list. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save horizontal layout manager as a C++ statement(s) on output stream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGVerticalLayout;  TGVerticalLayout (TGCompositeFrame *main);  Create vertical layout manager. ;  ; TGDimension GetDefaultSize () const override;  Return default dimension of the vertical layout. ;  ; TClass * IsA () const override;  ; void Layout () override;  Make a vertical layout of all frames in the list. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save vertical layout manager as a C++ statement(s) on output stream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLayoutManager;  TGLayoutManager ();  ; virtual Bool_t IsModified () const;  ; virtual void SetDefaultHeight (UInt_t);  ; virtual void SetDefaultWidth (UInt_t);  ; virtual void SetModified (Bool_t flag=kTRUE);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHorizontalLayout.html:74,Guid,Guide,74,doc/master/classTGHorizontalLayout.html,https://root.cern,https://root.cern/doc/master/classTGHorizontalLayout.html,1,['Guid'],['Guide']
Usability,". ROOT: TGHtml Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; List of all members ; TGHtml Class ReferenceGUI » HTML visualizer. ; The ROOT HTML widget. ; A derivate of TGView. ; Definition at line 873 of file TGHtml.h. Public Member Functions;  TGHtml (const TGWindow *p, int w, int h, int id=-1);  HTML Widget constructor. ;  ;  ~TGHtml () override;  HTML widget destructor. ;  ; void AppendArglist (TGString *str, TGHtmlMarkupElement *pElem);  Append all the arguments of the given markup to the given TGString. ;  ; virtual void ButtonClicked (const char *name, const char *val);  Emit ButtonClicked() signal. ;  ; int CellSpacing (TGHtmlElement *pTable);  Return the appropriate cell spacing for the given table. ;  ; virtual void CheckToggled (const char *name, Bool_t on, const char *val);  Emit CheckToggled() signal. ;  ; void Clear (Option_t *="""") override;  Erase all HTML from this widget and clear the screen. ;  ; void DrawRegion (Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Draw region defined by [x,y] [w,h]. ;  ; char * DumpToken (TGHtmlElement *p);  For debugging purposes, print information about a token. ;  ; int ElementCoords (TGHtmlElement *p, int i, int pct, int *coords);  Return coordinates of item. ;  ; void EncodeText (TGString *str, const char *z);  Append to the given TString an encoded version of the given text. ;  ; TGHtmlElement * FindEndNest (TGHtmlElement *sp, int en, TGHtmlElement *lp);  Find End tag en, but ignore intervening begin/end tag pairs. ;  ; virtual int FormAction (TGHtmlForm *, int);  ; virtual int FormCreate (TGHtmlForm *, const char *, const char *);  ; const char * GetBaseUri () const;  ; virtual TGFont * GetFont (int iFont);  The rendering and layout routines should call this routine in order to get a font structure. ;  ; virtual char * GetFontName ();  ; con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtml.html:62,Guid,Guide,62,doc/master/classTGHtml.html,https://root.cern,https://root.cern/doc/master/classTGHtml.html,1,['Guid'],['Guide']
Usability,". ROOT: TGHtmlElement Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TGHtmlElement Class Reference. . Definition at line 250 of file TGHtml.h. Public Member Functions;  TGHtmlElement (int etype=0);  HTML element constructor. ;  ; virtual int GetAlignment (int dflt);  ; virtual int GetOrderedListType (int dflt);  ; virtual int GetUnorderedListType (int dflt);  ; virtual int GetVerticalAlignment (int dflt);  ; virtual int IsMarkup () const;  ; virtual const char * MarkupArg (const char *, const char *);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlElement.html:69,Guid,Guide,69,doc/master/classTGHtmlElement.html,https://root.cern,https://root.cern/doc/master/classTGHtmlElement.html,1,['Guid'],['Guide']
Usability,". ROOT: TGHtmlImage Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; TGHtmlImage Class Reference. . Definition at line 507 of file TGHtml.h. Public Member Functions;  TGHtmlImage (TGHtml *htm, const char *url, const char *width, const char *height);  ctor. ;  ;  ~TGHtmlImage () override;  dtor. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlImage.html:67,Guid,Guide,67,doc/master/classTGHtmlImage.html,https://root.cern,https://root.cern/doc/master/classTGHtmlImage.html,1,['Guid'],['Guide']
Usability,". ROOT: TGHtmlLayoutContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Protected Member Functions |; List of all members ; TGHtmlLayoutContext Class Reference. . Definition at line 761 of file TGHtml.h. Public Member Functions;  TGHtmlLayoutContext ();  Html Layout Context constructor. ;  ; void LayoutBlock ();  Do as much layout as possible on the block of text defined by the HtmlLayoutContext. ;  ; void PopIndent ();  Adjust (pop) ident. ;  ; void PushIndent ();  Adjust (push) ident. ;  ; void Reset ();  Reset the layout context. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""")",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlLayoutContext.html:75,Guid,Guide,75,doc/master/classTGHtmlLayoutContext.html,https://root.cern,https://root.cern/doc/master/classTGHtmlLayoutContext.html,1,['Guid'],['Guide']
Usability,". ROOT: TGHtmlUri Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; TGHtmlUri Class Reference. . Definition at line 55 of file TGHtmlUri.h. Public Member Functions;  TGHtmlUri (const char *zUri=nullptr);  Parse a text URI into an HtmlUri structure. ;  ;  TGHtmlUri (const TGHtmlUri *uri);  Html uri copy constructor. ;  ;  ~TGHtmlUri () override;  Html uri destructor. ;  ; char * BuildUri ();  Create a string to hold the given URI. ;  ; int ComponentLength (const char *z, const char *zInit, const char *zTerm);  Return the length of the next component of the URL in z[] given that the component starts at z[0]. ;  ; int EqualsUri (const TGHtmlUri *uri, int field_mask=((1<< 0)|(1<< 1)|(1<< 2)|(1<< 3)|(1<< 4)));  Compare another uri with given field mask. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlUri.html:65,Guid,Guide,65,doc/master/classTGHtmlUri.html,https://root.cern,https://root.cern/doc/master/classTGHtmlUri.html,1,['Guid'],['Guide']
Usability,". ROOT: TGIcon Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGIcon Class ReferenceGUI » Low level GUI widgets. ; This class handles GUI icons. ; Definition at line 22 of file TGIcon.h. Public Member Functions;  TGIcon (const TGWindow *p, const TGPicture *pic, UInt_t w, UInt_t h, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  ;  TGIcon (const TGWindow *p=nullptr, const char *image=nullptr);  Create icon. ;  ;  ~TGIcon () override;  Delete icon and free picture. ;  ; virtual void ChangeBackgroundColor ();  ; TGDimension GetDefaultSize () const override;  Return size of icon. ;  ; TImage * GetImage () const;  ; const TGPicture * GetPicture () const;  ; TClass * IsA () const override;  ; void MoveResize (Int_t x, Int_t y, UInt_t w=0, UInt_t h=0) override;  Move icon to (x,y) and resize it to (w,h). ;  ; virtual void Reset ();  Reset icon to original image. It can be used only via context menu. ;  ; void Resize (TGDimension size) override;  Resize the frame. ;  ; void Resize (UInt_t w=0, UInt_t h=0) override;  Resize. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save an icon widget as a C++ statement(s) on output stream out. ;  ; virtual void SetImage (const char *img);  Set icon image. ;  ; virtual void SetImage (TImage *img);  Change icon image. ;  ; virtual void SetImagePath (const char *path);  Set directory where image is located. ;  ; virtual void SetPicture (const TGPicture *pic);  Set icon picture. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGIcon.html:62,Guid,Guide,62,doc/master/classTGIcon.html,https://root.cern,https://root.cern/doc/master/classTGIcon.html,1,['Guid'],['Guide']
Usability,". ROOT: TGIconLBEntry Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGIconLBEntry Class ReferenceGUI » Low level GUI widgets. ; Icon + text listbox entry. ; Definition at line 132 of file TGListBox.h. Public Member Functions;  TGIconLBEntry (const TGWindow *p=nullptr, Int_t id=-1, const char *str=nullptr, const TGPicture *pic=nullptr, UInt_t w=0, Style_t s=0, UInt_t options=kHorizontalFrame, Pixel_t back=GetWhitePixel());  Create the icon & text listbox entry. ;  ;  ~TGIconLBEntry () override;  Delete icon & text listbox entry. ;  ; void DrawCopy (Handle_t id, Int_t x, Int_t y) override;  Draw copy on window/pixmap. ;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; const TGPicture * GetPicture () const;  ; TClass * IsA () const override;  ; virtual void SetPicture (const TGPicture *pic=nullptr);  Change the icon of listbox entry containing icon & text. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update (TGLBEntry *e) override;  Update icon & text listbox entry. ;  ;  Public Member Functions inherited from TGTextLBEntry;  TGTextLBEntry (const TGWindow *p=nullptr, TGString *s=nullptr, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t options=kHorizontalFrame, Pixel_t back=GetWhitePixel());  Create a text listbox entry. The TGString is adopted. ;  ;  ~TGTextLBEntry () override;  Delete text listbox entry. ;  ; void DrawCopy (Handle_t id, Int_t x, Int_t y) override;  Draw text listbox entry on window/pixmap. ;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; FontStruct_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGIconLBEntry.html:69,Guid,Guide,69,doc/master/classTGIconLBEntry.html,https://root.cern,https://root.cern/doc/master/classTGIconLBEntry.html,1,['Guid'],['Guide']
Usability,". ROOT: TGIdleHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TGIdleHandler Class ReferenceGUI » Low level GUI widgets. ; Handle idle events, i.e. ; process GUI actions when there is nothing else anymore to do. ; Definition at line 19 of file TGIdleHandler.h. Public Member Functions;  TGIdleHandler (TGWindow *w);  Create idle handler. ;  ;  ~TGIdleHandler () override;  Delete idle handler. ;  ; virtual Bool_t HandleEvent ();  Handle the idle event. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGIdleHandler.html:69,Guid,Guide,69,doc/master/classTGIdleHandler.html,https://root.cern,https://root.cern/doc/master/classTGIdleHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TGImageMap Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGImageMap Class ReferenceGUI » Low level GUI widgets. ; (with TGRegion and TGRegionWithId help classes) ; A TGImageMap provides the functionality like a clickable image in a web browser with sensitive regions (MAP HTML tag). ; Definition at line 107 of file TGImageMap.h. Public Types; enum  ENavMode { kNavRegions; , kNavGrid; };  ;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGImageMap (const TGWindow *p, const TString &pic);  Create an image map widget. ;  ;  TGImageMap (const TGWindow *p=nullptr, const TGPicture *pic=nullptr);  Create an image map widget. ;  ;  ~TGImageMap ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGImageMap.html:66,Guid,Guide,66,doc/master/classTGImageMap.html,https://root.cern,https://root.cern/doc/master/classTGImageMap.html,1,['Guid'],['Guide']
Usability,". ROOT: TGInputDialog Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGInputDialog Class ReferenceGUI » Low level GUI widgets. ; Input Dialog Widget. ; An Input dialog box ; Definition at line 22 of file TGInputDialog.h. Public Member Functions;  TGInputDialog (const TGWindow *p=nullptr, const TGWindow *main=nullptr, const char *prompt=nullptr, const char *defval=nullptr, char *retstr=nullptr, UInt_t options=kVerticalFrame);  Create simple input dialog. ;  ;  ~TGInputDialog () override;  Cleanup dialog. ;  ; TClass * IsA () const override;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t) override;  Handle button and text enter events. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a transient frame widget as a C++ statement(s) on output stream out. ;  ; void SaveSource (const char *filename=""Rootdlog.C"", Option_t *option="""") override;  Save the GUI transient frame widget in a C++ macro file. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGInputDialog.html:69,Guid,Guide,69,doc/master/classTGInputDialog.html,https://root.cern,https://root.cern/doc/master/classTGInputDialog.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TGInputHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TGInputHandler Class Reference. . Definition at line 103 of file TGClient.cxx. Public Member Functions;  TGInputHandler (TGClient *c, Int_t fd);  ; Bool_t Notify () override;  Notify input from the display server. ;  ;  Public Member Functions inherited from TFileHandler;  TFileHandler (int fd, int mask);  Create a file descriptor event handler. ;  ; virtual ~TFileHandler ();  ; void Add () override;  Add file event handler to system file handler list. ;  ; int GetFd () const;  ; virtual Bool_t HasReadInterest ();  True if handler is interested in read events. ;  ; virtual Bool_t HasWriteInterest ();  True if handler is interested in write events. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsReadReady () const;  ; virtual Bool_t IsWriteReady () const;  ; virtual Bool_t ReadNotify ();  Notify when something can be read from the descriptor associated with this handler. ;  ; void Remove () override;  Remove file event handler from system file handler list. ;  ; virtual void ResetReadyMask ();  ; void SetFd (int fd);  ; virtual void SetInterest (Int_t mask);  Set interest mask to 'mask'. ;  ; virtual void SetReadReady ();  ; virtual void SetWriteReady ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Bool_t WriteNotify ();  Notify when something can be written to the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGInputHandler.html:70,Guid,Guide,70,doc/master/classTGInputHandler.html,https://root.cern,https://root.cern/doc/master/classTGInputHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TGItemContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; List of all members ; TGItemContext Class Reference. ; Empty object used as context menu support for TGLVTreeEntries. ; Definition at line 36 of file TTVLVContainer.h. Public Member Functions;  TGItemContext ();  Constructor. ;  ;  ~TGItemContext () override;  ; void Associate (TTVLVEntry *item);  ; void Delete (Option_t *) override;  Delete this object. ;  ; void Draw (Option_t *option="""") override;  Draw item. ;  ; void EditExpression ();  Edit expression. ;  ; void Empty ();  Empty item. ;  ; void RemoveItem ();  Remove item. ;  ; void Scan ();  Scan item. ;  ; void SetExpression (const char *name="""", const char *alias=""-empty-"", bool cut=false);  Set item expression. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGItemContext.html:69,Guid,Guide,69,doc/master/classTGItemContext.html,https://root.cern,https://root.cern/doc/master/classTGItemContext.html,1,['Guid'],['Guide']
Usability,". ROOT: TGL5DDataSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TGL5DDataSet Class ReferenceGraphics » 3D Graphics » OpenGL rendering. . Definition at line 28 of file TGL5D.h. Public Member Functions;  TGL5DDataSet (TTree *inputData);  Constructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Check, if the object is under cursor. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Action. ;  ; char * GetObjectInfo (Int_t px, Int_t py) const override;  Info for status bar. ;  ; TGL5DPainter * GetRealPainter () const;  Get access to painter (for GUI-editor). ;  ; const Rgl::Range_t & GetV4Range () const;  V4 range. ;  ; TAxis * GetXAxis () const;  X axis for plot. ;  ; const Rgl::Range_t & GetXRange () const;  V1 range (X). ;  ; TAxis * GetYAxis () const;  Y axis for plot. ;  ; const Rgl::Range_t & GetYRange () const;  V2 range (Y). ;  ; TAxis * GetZAxis () const;  Z axis for plot. ;  ; const Rgl::Range_t & GetZRange () const;  V3 range (Z). ;  ; TClass * IsA () const override;  ; void Paint (Option_t *option) override;  Paint. ;  ; UInt_t SelectedSize () const;  Size of selected sub-range. ;  ; void SelectPoints (Double_t v4Level, Double_t range);  ""Select"" sub-range from source data ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Double_t V1 (UInt_t ind) const;  V1 from sub-range, converted to unit cube. ;  ; Double_t V2 (UInt_t ind) const;  V2 from sub-range, converted to unit cube. ;  ; Double_t V3 (UInt_t ind) const;  V3 from sub-range, converted to unit cube. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGL5DDataSet.html:68,Guid,Guide,68,doc/master/classTGL5DDataSet.html,https://root.cern,https://root.cern/doc/master/classTGL5DDataSet.html,1,['Guid'],['Guide']
Usability,". ROOT: TGL5DDataSetEditor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGL5DDataSetEditor Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; GUI editor for OpenGL 5D Painter. ; Exception safety and ROOT's GUI are two mutually exclusive things. So, only ROOT's GUI here. ; Definition at line 30 of file TGL5DDataSetEditor.h. Classes; class  TGL5DEditorPrivate;  . Public Member Functions;  TGL5DDataSetEditor (const TGWindow *p=nullptr, Int_t width=140, Int_t height=30, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  ;  ~TGL5DDataSetEditor () override;  ; void AddNewSurface ();  Add new iso-surface. ;  ; void AlphaChanged ();  Slot connected to the Alpha entry. ;  ; void AlphaChanged (Int_t alpha);  Change transparency of selected surface. ;  ; void ApplyAlpha ();  Slot connected to the ""Apply"" button for alpha value. ;  ; void ApplyGridParameters ();  ""Apply"" button was pressed in a ""Grid"" tab. ;  ; void ApplyPlanes ();  Slot connected to the Apply Planes button. ;  ; void BoxCutToggled ();  Slot connected to the Show BoxCut check button. ;  ; void ColorChanged (Pixel_t pixelColor);  Change the color of the selected surface. ;  ; void GridParametersChanged ();  Some of controls in a ""Grid"" tab was modified. ;  ; void HighlightClicked ();  Check, if selected surface must be highlighted. ;  ; TClass * IsA () const override;  ; void NContoursChanged ();  Slot connected to the Number of Planes value-entry. ;  ; void RemoveSurface ();  Remove selected surface. ;  ; void RollbackGridParameters ();  ""Cancel"" button was pressed in a ""Grid"" tab. ;  ; void SetModel (TObject *obj) override;  Set model or disables/hides viewer. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGL5DDataSetEditor.html:74,Guid,Guide,74,doc/master/classTGL5DDataSetEditor.html,https://root.cern,https://root.cern/doc/master/classTGL5DDataSetEditor.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLAutoRotator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGLAutoRotator Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; Automatically rotates GL camera. ; W's are angular velocities.; ATheta – Theta amplitude in units of Pi/2.; ADolly – In/out amplitude in units of initial distance. Can also save images automatically.; fGUIOutMode is used internally between TGLAutoRotator and TGLViewerEditor, allowed values are:; animated gif; a series of png images . Definition at line 23 of file TGLAutoRotator.h. Public Member Functions;  TGLAutoRotator (TGLViewer *v);  Constructor. ;  ;  ~TGLAutoRotator () override;  Destructor. ;  ; Double_t GetADolly () const;  ; Double_t GetATheta () const;  ; TGLCamera * GetCamera () const;  ; Double_t GetDeltaPhi () const;  ; Double_t GetDt () const;  ; Bool_t GetImageAutoSave () const;  ; Int_t GetImageCount () const;  ; TString GetImageGUIBaseName () const;  ; Int_t GetImageGUIOutMode () const;  ; TString GetImageName () const;  ; Bool_t GetRotateScene () const;  ; TGLViewer * GetViewer () const;  ; Double_t GetWDolly () const;  ; Double_t GetWPhi () const;  ; Double_t GetWTheta () const;  ; TClass * IsA () const override;  ; Bool_t IsRunning () const;  ; void RotateScene ();  ""Scene rotation"": either find a special object, which will be an axis of rotation (it's Z actually) or use a ""global"" Z axis. ;  ; void SetADolly (Double_t a);  Set relative amplitude of forward/backward oscillation. ;  ; void SetATheta (Double_t a);  Set relative amplitude of theta oscillation. ;  ; void SetDeltaPhi (Double_t dPhi);  ; void SetDt (Double_t dt);  Set time between two redraws in seconds. ;  ; void SetImageAutoSave (Bool_t s);  ; void SetImageCount (Int_t ic);  ; void SetImageGUIBaseName (const TString &gname);  ; void SetI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLAutoRotator.html:70,Guid,Guide,70,doc/master/classTGLAutoRotator.html,https://root.cern,https://root.cern/doc/master/classTGLAutoRotator.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLAxis Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGLAxis Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; GL Axis. ; To draw a 3D axis in a GL window. The labels are drawn using FTGL. ; Definition at line 22 of file TGLAxis.h. Public Member Functions;  TGLAxis ();  Constructor. ;  ;  ~TGLAxis () override;  Destructor. ;  ; void DoLabels ();  Do labels. ;  ; void Init ();  Default initialization. ;  ; TClass * IsA () const override;  ; void PaintGLAxis (const Double_t p1[3], const Double_t p2[3], Double_t wmin, Double_t wmax, Int_t ndiv, Option_t *opt="""");  Paint GL Axis. ;  ; void PaintGLAxisBody ();  Paint horizontal axis body at position (0,0,0) ;  ; void PaintGLAxisLabels ();  Paint axis labels on the main tick marks. ;  ; void PaintGLAxisTickMarks ();  Paint axis tick marks. ;  ; void SetGridLength (Double_t grid);  ; void SetLabelsAngles (Double_t a1, Double_t a2, Double_t a3);  Set labels' angles. ;  ; void SetLabelsOffset (Double_t offset);  ; void SetLabelsSize (Double_t size);  ; void SetTickMarksLength (Double_t length);  ; void SetTickMarksOrientation (Int_t tmo);  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TicksPositions (Option_t *opt="""");  Compute ticks positions. ;  ; void TicksPositionsNoOpt ();  Compute ticks positions. Linear and not optimized. ;  ; void TicksPositionsOpt ();  Compute ticks positions. Linear and optimized. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLAxis.html:63,Guid,Guide,63,doc/master/classTGLAxis.html,https://root.cern,https://root.cern/doc/master/classTGLAxis.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLBContainer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TGLBContainer Class ReferenceGUI » Low level GUI widgets. ; A Composite frame that contains a list of TGLBEnties. ; A TGLBContainer is for TGListBox internal use. ; Definition at line 163 of file TGListBox.h. Public Member Functions;  TGLBContainer (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kSunkenFrame, Pixel_t back=GetDefaultFrameBackground());  Create a listbox container. ;  ;  ~TGLBContainer () override;  Delete the listbox container. ;  ; void ActivateItem (TGFrameElement *el) override;  Activate item. ;  ; virtual void AddEntry (TGLBEntry *lbe, TGLayoutHints *lhints);  Add listbox entry with hints to container. ;  ; virtual void AddEntrySort (TGLBEntry *lbe, TGLayoutHints *lhints);  Insert listbox entry before the list box entry with a higher id. ;  ; void Associate (const TGWindow *w) override;  ; UInt_t GetDefaultWidth () const override;  ; TGListBox * GetListBox () const;  ; virtual Bool_t GetMultipleSelections () const;  ; virtual Int_t GetPos (Int_t id);  Returns the position in the list box of the entry id. ;  ; virtual Int_t GetSelected () const;  Returns id of selected entry. ;  ; virtual void GetSelectedEntries (TList *selected);  Adds all selected entries (TGLBEntry) of the list box into the list selected. ;  ; TGLBEntry * GetSelectedEntry () const;  ; virtual Bool_t GetSelection (Int_t id);  Returns kTrue if entry id is selected. ;  ; TGVScrollBar * GetVScrollbar () const override;  Return a pointer to vertical scroll bar. ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event in the listbox container. ;  ; Bool_t HandleDoubleClick (Event_t *event) override;  Handle double click mouse event",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLBContainer.html:69,Guid,Guide,69,doc/master/classTGLBContainer.html,https://root.cern,https://root.cern/doc/master/classTGLBContainer.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLBEntry Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGLBEntry Class ReferenceGUI » Low level GUI widgets. ; Basic listbox entries. ; Listbox entries are created by a TGListBox and not by the user. ; Definition at line 24 of file TGListBox.h. Public Member Functions;  TGLBEntry (const TGWindow *p=nullptr, Int_t id=-1, UInt_t options=kHorizontalFrame, Pixel_t back=GetWhitePixel());  Base class entry constructor. ;  ; void Activate (Bool_t a) override;  Toggle active state of listbox entry. ;  ; Int_t EntryId () const;  ; TClass * IsA () const override;  ; Bool_t IsActive () const override;  ; void SetBackgroundColor (Pixel_t col) override;  Set background color (override from TGWindow base class). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Toggle ();  Toggle active state of listbox entry. ;  ; virtual void Update (TGLBEntry *);  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; void AddInput (UInt_t emask);  Add events specified in the emask to the events the frame should handle. ;  ; virtual void ChangeBackground (Pixel_t back);  Change frame background color. ;  ; virtual void ChangeOptions (UInt_t options);  Change frame options. Options is an OR of the EFrameTypes. ;  ; Bool_t Contains (Int_t x, Int_t y) const;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLBEntry.html:65,Guid,Guide,65,doc/master/classTGLBEntry.html,https://root.cern,https://root.cern/doc/master/classTGLBEntry.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLBFrameElement Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TGLBFrameElement Class Reference. . Definition at line 455 of file TGListBox.cxx. Public Member Functions;  TGLBFrameElement (TGFrame *f, TGLayoutHints *l);  ;  ~TGLBFrameElement () override;  ; Int_t Compare (const TObject *obj) const override;  Compare abstract method. ;  ; Bool_t IsSortable () const override;  ;  Public Member Functions inherited from TGFrameElement;  TGFrameElement ();  ;  TGFrameElement (TGFrame *f, TGLayoutHints *l);  Constructor. ;  ;  ~TGFrameElement () override;  Destructor. Decrease ref. count of fLayout. ;  ; TClass * IsA () const override;  ; void ls (Option_t *option="""") const override;  The ls function lists the contents of a class on stdout. ;  ; void Print (Option_t *option="""") const override;  Print this frame element. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLBFrameElement.html:72,Guid,Guide,72,doc/master/classTGLBFrameElement.html,https://root.cern,https://root.cern/doc/master/classTGLBFrameElement.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLCamera Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TGLCamera Class ReferenceabstractGraphics » 3D Graphics » OpenGL rendering. ; Abstract base camera class - concrete classes for orthographic and perspective cameras derive from it. ; This class maintains values for the current:; Viewport; Projection, modelview and clip matrices - extracted from GL; The 6 frustum planes; Expanded frustum interest box. It provides methods for various projection, overlap and intersection tests for viewport and world locations, against the true frustum and expanded interest box, and for extracting eye position and direction.; It also defines the pure virtual manipulation interface methods the concrete ortho and perspective classes must implement. ; Definition at line 43 of file TGLCamera.h. Public Types; enum  EFrustumPlane { ;   kNear = 0; , kLeft = 1; , kRight = 2; , kTop = 3; , ;   kBottom = 4; , kFar = 5; , kPlanesPerFrustum = 6. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGLCamera ();  Default base camera constructor. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLCamera.html:65,Guid,Guide,65,doc/master/classTGLCamera.html,https://root.cern,https://root.cern/doc/master/classTGLCamera.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLClipSetEditor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGLClipSetEditor Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; GUI editor for TGLClipSet. ; Definition at line 68 of file TGLClipSetEditor.h. Public Member Functions;  TGLClipSetEditor (const TGWindow *p=nullptr, Int_t width=170, Int_t height=30, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Constructor. ;  ;  ~TGLClipSetEditor () override;  ; TClass * IsA () const override;  ; void SetModel (TObject *obj) override;  Set model object. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGedFrame;  TGedFrame (const TGWindow *p=nullptr, Int_t width=140, Int_t height=30, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Constructor of the base GUI attribute frame. ;  ;  ~TGedFrame () override;  Destructor of the base GUI attribute frame. ;  ; virtual Bool_t AcceptModel (TObject *);  ; virtual void ActivateBaseClassEditors (TClass *cl);  Provide list of editors for base-classes. ;  ; virtual void AddExtraTab (TGedSubFrame *sf);  Adds tab container to list of extra tabs. ;  ;  ClassDefOverride (TGedFrame, 0);  ; virtual TGVerticalFrame * CreateEditorTabSubFrame (const char *name);  Create a vertical frame to be used by 'owner' in extra tab 'name'. ;  ; Option_t * GetDrawOption () const override;  Get draw options of the selected object. ;  ; TList * GetExtraTabs ();  ; TGedEditor * GetGedEditor ();  ; TClass * GetModelClass ();  ; Int_t GetPriority ();  ; virtual void Refresh (TObject *model);  Refresh the GUI info about the object attributes. ;  ; void SetDrawOption (Option_t *option="""") override;  Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLClipSetEditor.html:72,Guid,Guide,72,doc/master/classTGLClipSetEditor.html,https://root.cern,https://root.cern/doc/master/classTGLClipSetEditor.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLClipSetSubEditor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGLClipSetSubEditor Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; GUI sub-editor for TGLClipSet. ; Definition at line 26 of file TGLClipSetEditor.h. Public Member Functions;  TGLClipSetSubEditor (const TGWindow *p);  Constructor. ;  ;  ~TGLClipSetSubEditor () override;  ; void Changed ();  Emit Changed signal. ;  ; void ClipTypeChanged (Int_t);  Clip type radio button changed - update viewer. ;  ; void ClipValueChanged ();  One of number entries was changed. ;  ; TClass * IsA () const override;  ; void ResetViewerClip ();  Reset transformation of the current clip. ;  ; void SetModel (TGLClipSet *m);  Set model object. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateViewerClip ();  Change clipping volume. ;  ;  Public Member Functions inherited from TGVerticalFrame;  TGVerticalFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a vertical frame widget as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created windo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLClipSetSubEditor.html:75,Guid,Guide,75,doc/master/classTGLClipSetSubEditor.html,https://root.cern,https://root.cern/doc/master/classTGLClipSetSubEditor.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLEmbeddedViewer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGLEmbeddedViewer Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; Minimal GL-viewer that can be embedded in a standard ROOT frames. ; Definition at line 23 of file TGLEmbeddedViewer.h. Public Member Functions;  TGLEmbeddedViewer (const TGWindow *parent, TVirtualPad *pad, TGedEditor *ged, Int_t border=2);  Constructor allowing to also specify an GED editor to use. ;  ;  TGLEmbeddedViewer (const TGWindow *parent, TVirtualPad *pad=nullptr, Int_t border=2);  Constructor. ;  ;  ~TGLEmbeddedViewer () override;  Destroy standalone viewer object. ;  ; void CreateGLWidget () override;  Create a GLwidget, it is an error if it is already created. ;  ; void DestroyGLWidget () override;  Destroy the GLwidget, it is an error if it does not exist. ;  ; TGCompositeFrame * GetFrame () const;  ; const char * GetName () const override;  Returns name of object. ;  ; TGLOrthoCamera * GetOrthoXOYCamera ();  ; TGLOrthoCamera * GetOrthoXOZCamera ();  ; TGLOrthoCamera * GetOrthoZOXCamera ();  ; TGLOrthoCamera * GetOrthoZOYCamera ();  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLViewer;  TGLViewer (TVirtualPad *pad);  ;  TGLViewer (TVirtualPad *pad, Int_t x, Int_t y, Int_t width, Int_t height);  ;  ~TGLViewer () override;  Destroy viewer object. ;  ; virtual void Activated ();  ; void AddCompositeOp (UInt_t) override;  ; Int_t AddObject (const TBuffer3D &, Bool_t *=nullptr) override;  ; Int_t AddObject (UInt_t, const TBuffer3D &, Bool_t *=nullptr) override;  ; void ApplySelection ();  Process result from last selection (in fSelRec) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLEmbeddedViewer.html:73,Guid,Guide,73,doc/master/classTGLEmbeddedViewer.html,https://root.cern,https://root.cern/doc/master/classTGLEmbeddedViewer.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLEventHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGLEventHandler Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; Base-class and default implementation of event-handler for TGLViewer. ; This allows for complete disentanglement of GL-viewer from GUI event handling. Further, alternative event-handlers can easily be designed and set at run-time.; The signals about object being selected or hovered above are emitted via the TGLViewer itself.; The following rootrc settings influence the behaviour: OpenGL.EventHandler.ViewerCentricControls: 1; OpenGL.EventHandler.ArrowKeyFactor: -1.0; OpenGL.EventHandler.MouseDragFactor: -1.0; OpenGL.EventHandler.MouseWheelFactor: -1.0; ROOT::MacOSX::OpenGLDefinition ROOTOpenGLView.h:74. Definition at line 29 of file TGLEventHandler.h. Public Member Functions;  TGLEventHandler (TGWindow *w, TObject *obj);  Constructor. ;  ;  ~TGLEventHandler () override;  Destructor. ;  ;  ClassDefOverride (TGLEventHandler, 0);  ; virtual void ClearMouseOver ();  Clear mouse-over state and emit mouse-over signals. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Process event of type 'event' - one of EEventType types, occurring at window location px, py This is provided for use when embedding GL viewer into pad. ;  ; Bool_t GetArcBall () const;  ; Bool_t GetDoInternalSelection () const;  ; Int_t GetSecSelType () const;  ; Int_t GetTooltipPixelTolerance () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button 'event'. ;  ; Bool_t HandleConfigureNotify (Event_t *event) override;  Handle configure notify 'event' - a window resize/movement. ;  ; Bool_t HandleCrossing (Event_t *event) override;  Handle generic Event_t type 'event' - provided to catch focus changes and terminate any interaction in viewer. ;  ; Bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLEventHandler.html:71,Guid,Guide,71,doc/master/classTGLEventHandler.html,https://root.cern,https://root.cern/doc/master/classTGLEventHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLHistPainter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGLHistPainter Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; The histogram painter class using OpenGL. ; Histograms are, by default, drawn via the THistPainter class. TGLHistPainter allows to paint them using the OpenGL 3D graphics library. The plotting options provided by TGLHistPainter start with GL keyword. General information: plot types and supported options; The following types of plots are provided:; Lego - (TGLLegoPainter); The supported options are:. ""GLLEGO"" : Draw a lego plot.; ""GLLEGO2"" : Bins with color levels.; ""GLLEGO3"" : Cylindrical bars. Lego painter in cartesian supports logarithmic scales for X, Y, Z. In polar only Z axis can be logarithmic, in cylindrical only Y (if you see what it means).; Surfaces (TF2 and TH2 with ""GLSURF"" options) - (TGLSurfacePainter); The supported options are:. ""GLSURF"" : Draw a surface.; ""GLSURF1"" : Surface with color levels; ""GLSURF2"" : The same as ""GLSURF1"" but without polygon outlines.; ""GLSURF3"" : Color level projection on top of plot (works only in cartesian coordinate system).; ""GLSURF4"" : Same as ""GLSURF"" but without polygon outlines. The surface painting in cartesian coordinates supports logarithmic scales along X, Y, Z axis. In polar coordinates only the Z axis can be logarithmic, in cylindrical coordinates only the Y axis.; Additional options to SURF and LEGO - Coordinate systems:; The supported options are:. "" "" : Default, cartesian coordinates system.; ""POL"" : Polar coordinates system.; ""CYL"" : Cylindrical coordinates system.; ""SPH"" : Spherical coordinates system. TH3 as boxes (spheres) - (TGLBoxPainter); The supported options are:. ""GLBOX"" : TH3 as a set of boxes, size of box is proportional to bin content.; ""GLBO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLHistPainter.html:70,Guid,Guide,70,doc/master/classTGLHistPainter.html,https://root.cern,https://root.cern/doc/master/classTGLHistPainter.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLLightSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGLLightSet Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; Encapsulates a set of lights for OpenGL. ; Definition at line 21 of file TGLLightSet.h. Public Types; enum  ELight { ;   kLightFront = 0x0001; , kLightTop = 0x0002; , kLightBottom = 0x0004; , kLightLeft = 0x0008; , ;   kLightRight = 0x0010; , kLightMask = 0x001f; , kLightSpecular = 0x0100. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGLLightSet ();  power of specular lamp ;  ;  ~TGLLightSet () override;  ; Float_t GetFrontPower () const;  ; UInt_t GetLightState ();  ; Float_t GetSidePower () const;  ; Float_t GetSpecularPower () const;  ; Bool_t GetUseSpecular () const;  ; TClass * IsA () const override;  ; void SetFrontPower (Float_t p);  ; void SetLight (ELight light, Bool_t on);  Set a light on/off. ;  ; void SetSidePower (Float_t p);  ; void SetSpecularPower (Float_t p);  ; void SetUseSpecular (Bool_t s);  ; void StdSetupLights (const TGLBoundingBox &bbox, const TGLCamera &camera, Bool_t debug=kFALSE);  Setup lights for current given bounding box and camera. ;  ; void Streamer (TBuffer &) ove",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLLightSet.html:67,Guid,Guide,67,doc/master/classTGLLightSet.html,https://root.cern,https://root.cern/doc/master/classTGLLightSet.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGLManager Class Referenceabstract. . Definition at line 70 of file TVirtualGL.h. Public Member Functions;  TGLManager ();  ;  TGLManager (const TGLManager &)=delete;  ; virtual Bool_t AttachOffScreenDevice (Int_t ctxInd, Int_t x, Int_t y, UInt_t w, UInt_t h)=0;  ; virtual Int_t CreateGLContext (Int_t winInd)=0;  ; virtual void DeleteGLContext (Int_t ctxInd)=0;  ; virtual void ExtractViewport (Int_t ctxInd, Int_t *vp)=0;  ; virtual void Flush (Int_t ctxInd)=0;  ; virtual char * GetPlotInfo (TVirtualGLPainter *plot, Int_t px, Int_t py)=0;  ; virtual Int_t GetVirtualXInd (Int_t ctxInd)=0;  ; virtual Bool_t HighColorFormat (Int_t ctxInd)=0;  ; virtual Int_t InitGLWindow (Window_t winID)=0;  ; TClass * IsA () const override;  ; virtual Bool_t MakeCurrent (Int_t ctxInd)=0;  ; virtual void MarkForDirectCopy (Int_t ctxInd, Bool_t)=0;  ; TGLManager & operator= (const TGLManager &)=delete;  ; virtual void PaintSingleObject (TVirtualGLPainter *)=0;  ; virtual void PanObject (TVirtualGLPainter *o, Int_t x, Int_t y)=0;  ; virtual Bool_t PlotSelected (TVirtualGLPainter *plot, Int_t px, Int_t py)=0;  ; virtual void PrintViewer (TVirtualViewer3D *vv)=0;  ; virtual void ReadGLBuffer (Int_t ctxInd)=0;  ; virtual Bool_t ResizeOffScreenDevice (Int_t ctxInd, Int_t x, Int_t y, UInt_t w, UInt_t h)=0;  ; virtual Bool_t SelectManip (TVirtualGLManip *manip, const TGLCamera *camera, const TGLRect *rect, const TGLBoundingBox *sceneBox)=0;  ; virtual void SelectOffScreenDevice (Int_t ctxInd)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLManager.html:66,Guid,Guide,66,doc/master/classTGLManager.html,https://root.cern,https://root.cern/doc/master/classTGLManager.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLOrthoCamera Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TGLOrthoCamera Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; Orthographic projection camera. ; Currently limited to three types defined at construction time - kXOY, kXOZ, kZOY - where this refers to the viewport plane axis - e.g. kXOY has X axis horizontal, Y vertical - i.e. looking down Z axis with Y vertical.; The plane types restriction could easily be removed to supported arbitrary ortho projections along any axis/orientation with free rotations about them. ; Definition at line 35 of file TGLOrthoCamera.h. Public Types; enum  EType { ;   kZOY; , kXOZ; , kXOY; , kZnOY; , ;   kXnOZ; , kXnOY; , kZOX; , kZnOX. };  ;  Public Types inherited from TGLCamera; enum  EFrustumPlane { ;   kNear = 0; , kLeft = 1; , kRight = 2; , kTop = 3; , ;   kBottom = 4; , kFar = 5; , kPlanesPerFrustum = 6. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGLOrthoCamera ();  Construct kXOY orthographic camera. ;  ;  TGLOrthoCamera (EType type, const TGLVector3 &hAxis, const TGLVector3 &vAxis);  Construct orthographic camera. ;  ;  ~TGLOrthoCamera () override;  Destroy orthograph",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLOrthoCamera.html:70,Guid,Guide,70,doc/master/classTGLOrthoCamera.html,https://root.cern,https://root.cern/doc/master/classTGLOrthoCamera.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLOverlayButton Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGLOverlayButton Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; GL-overlay button. ; Definition at line 22 of file TGLOverlayButton.h. Public Member Functions;  TGLOverlayButton (TGLViewerBase *parent, const char *text, Float_t posx, Float_t posy, Float_t width, Float_t height);  Constructor. ;  ;  ~TGLOverlayButton () override;  ; virtual void Clicked (TGLViewerBase *viewer);  Emits ""Clicked(TGLViewerBase*)"" signal. ;  ; virtual Pixel_t GetBackColor () const;  ; virtual const char * GetText () const;  ; virtual Pixel_t GetTextColor () const;  ; Bool_t Handle (TGLRnrCtx &rnrCtx, TGLOvlSelectRecord &selRec, Event_t *event) override;  Handle overlay event. ;  ; TClass * IsA () const override;  ; Bool_t MouseEnter (TGLOvlSelectRecord &selRec) override;  Mouse has entered overlay area. ;  ; void MouseLeave () override;  Mouse has left overlay area. ;  ; void Render (TGLRnrCtx &rnrCtx) override;  Render the overlay elements. ;  ; virtual void ResetState ();  ; virtual void SetAlphaValues (Float_t norm, Float_t high);  ; virtual void SetBackColor (Pixel_t col);  ; virtual void SetPosition (Float_t x, Float_t y);  ; virtual void SetSize (Float_t w, Float_t h);  ; virtual void SetText (const char *text);  ; virtual void SetTextColor (Pixel_t col);  ; void Streamer (TBuffer &) override;  Stream an object of class TQObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLOverlayElement;  TGLOverlayElement (ERole r=kUser, EState s=kActive);  ; virtual ~TGLOverlayElement ();  ; ERole GetRole () const;  ; EState GetState () const;  ; virtual Bool_t MouseStillInside (TGLOvlSelectRecord &selRec);  ; void SetBinaryState (Bool_t s)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLOverlayButton.html:72,Guid,Guide,72,doc/master/classTGLOverlayButton.html,https://root.cern,https://root.cern/doc/master/classTGLOverlayButton.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLPShapeObj Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; TGLPShapeObj Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; Wrap TGLPysicalShape into TObject so that it can be edited using GED. ; Definition at line 20 of file TGLPShapeObj.h. Public Member Functions;  TGLPShapeObj ();  ;  TGLPShapeObj (TGLPhysicalShape *sh, TGLViewer *v);  ;  ~TGLPShapeObj () override;  ; const char * GetName () const override;  Returns name of object. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Del",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLPShapeObj.html:68,Guid,Guide,68,doc/master/classTGLPShapeObj.html,https://root.cern,https://root.cern/doc/master/classTGLPShapeObj.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLPShapeObjEditor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TGLPShapeObjEditor Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; GUI editor for TGLPShapeObj. ; Definition at line 30 of file TGLPShapeObjEditor.h. Public Member Functions;  TGLPShapeObjEditor (const TGWindow *p=nullptr, Int_t width=140, Int_t height=30, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Constructor of TGLPhysicalShape editor GUI. ;  ;  ~TGLPShapeObjEditor () override;  Destroy color editor GUI component. ;  ; void CreateColorRadioButtons ();  Create Diffuse/Ambient/Specular/Emissive radio buttons and sub-frames. ;  ; void CreateColorSliders ();  Create GUI for setting light color. ;  ; void DoColorButton ();  Process button action. ;  ; void DoColorSlider (Int_t val);  Process slider movement. ;  ; void DoGeoButton ();  Process 'Apply' - update the viewer object from GUI. ;  ; void DrawSphere () const;  Draw local sphere reflecting current color options. ;  ; void GeoValueSet (Long_t unusedVal);  Process setting of value in edit box - activate 'Apply' button. ;  ; void GetObjectData (Double_t *shift, Double_t *scale);  Extract the GUI object data, return center in 3 component 'center' scale in 3 component 'scale'. ;  ; const Float_t * GetRGBA () const;  ; TClass * IsA () const override;  ; void PShapeModified () override;  Shape has been modified. ;  ; void SetCenter (const Double_t *center);  Set internal center data from 3 component 'c'. ;  ; void SetColorSlidersPos ();  Update GUI sliders from internal data. ;  ; void SetModel (TObject *obj) override;  Sets model or disables/hides viewer. ;  ; void SetPShape (TGLPhysicalShape *shape) override;  Shape has changed. ;  ; void SetRGBA (const Float_t *rgba);  Set color slide",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLPShapeObjEditor.html:74,Guid,Guide,74,doc/master/classTGLPShapeObjEditor.html,https://root.cern,https://root.cern/doc/master/classTGLPShapeObjEditor.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLParametricEquation Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TGLParametricEquation Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; A parametric surface is a surface defined by a parametric equation, involving two parameters (u, v): ; S(u, v) = (x(u, v), y(u, v), z(u, v)).; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; v@ vDefinition rootcling_impl.cxx:3699; For example, ""limpet torus"" surface can be defined as:; x = cos(u) / (sqrt(2) + sin(v)); y = sin(u) / (sqrt(2) + sin(v)); z = 1 / (sqrt(2) + cos(v)),; where -pi <= u <= pi, -pi <= v <= pi.; TGLParametricEquation * eq =; new TGLParametricEquation(""Limpet_torus"", ""cos(u) / (sqrt(2.) + sin(v))"",; ""sin(u) / (sqrt(2.) + sin(v))"",; ""1 / (sqrt(2) + cos(v))"");; TGLParametricEquationA parametric surface is a surface defined by a parametric equation, involving two parameters (u,...Definition TGLParametric.h:35; $ROOTSYS/tutorials/gl/glparametric.C contains more examples.; Parametric equations can be specified:; 1. by string expressions, as with TF2, but with 'u' instead of 'x' and 'v' instead of 'y'.; 2. by function - see ParametricEquation_t declaration. . Definition at line 35 of file TGLParametric.h. Public Member Functions;  TGLParametricEquation (const TString &name, const TString &xEquation, const TString &yEquation, const TString &zEquation, Double_t uMin, Double_t uMax, Double_t vMin, Double_t vMax);  Surface is defined by three strings. ;  ;  TGLParametricEquation (const TString &name, ParametricEquation_t equation, Double_t uMin, Double_t uMax, Double_t vMin, Double_t vMax);  Surface defined by user's function (see ParametricEquation_t declaration in TGLParametricEquation.h) ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLParametricEquation.html:77,Guid,Guide,77,doc/master/classTGLParametricEquation.html,https://root.cern,https://root.cern/doc/master/classTGLParametricEquation.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLPerspectiveCamera Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TGLPerspectiveCamera Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; Perspective projection camera - with characteristic foreshortening. ; Definition at line 25 of file TGLPerspectiveCamera.h. Public Member Functions;  TGLPerspectiveCamera ();  Construct default XOZ perspective camera. ;  ;  TGLPerspectiveCamera (const TGLVector3 &hAxis, const TGLVector3 &vAxis);  Construct perspective camera. ;  ;  ~TGLPerspectiveCamera () override;  Destroy perspective camera. ;  ; void Apply (const TGLBoundingBox &box, const TGLRect *pickRect=nullptr) const override;  Apply the camera to the current GL context, setting the viewport, projection and modelview matrices. ;  ; void Configure (Double_t fov, Double_t dolly, Double_t center[3], Double_t hRotate, Double_t vRotate) override;  Configure the camera state. ;  ; Double_t GetFOV () const;  ; TClass * IsA () const override;  ; Bool_t IsPerspective () const override;  ; void Reset () override;  Reset the camera to defaults - reframe the world volume established in Setup() in default state. ;  ; void SetFOV (Double_t fov);  ; void Setup (const TGLBoundingBox &box, Bool_t reset=kTRUE) override;  Setup camera limits suitable to view the world volume defined by 'box' and call Reset() to initialise camera. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Bool_t Truck (Double_t xDelta, Double_t yDelta);  Truck the camera - 'move camera parallel to film plane'. ;  ; Bool_t Truck (Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2) override;  Truck the camera - 'move camera parallel to film plane'. ;  ; virtual Bool_t Truck (Int_t xDelta, Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLPerspectiveCamera.html:76,Guid,Guide,76,doc/master/classTGLPerspectiveCamera.html,https://root.cern,https://root.cern/doc/master/classTGLPerspectiveCamera.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLRedrawTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TGLRedrawTimer Class Reference. . Definition at line 401 of file TGLViewer.h. Public Member Functions;  TGLRedrawTimer (TGLViewer &viewer);  ;  ~TGLRedrawTimer () override;  ; Bool_t IsPending () const;  ; Bool_t Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; void RequestDraw (Int_t milliSec, Short_t redrawLOD);  ; void Stop () override;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLRedrawTimer.html:70,Guid,Guide,70,doc/master/classTGLRedrawTimer.html,https://root.cern,https://root.cern/doc/master/classTGLRedrawTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLSAFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGLSAFrame Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; Standalone GL Viewer GUI main frame. ; Is aggregated in TGLSAViewer - top level standalone viewer object. ; Definition at line 28 of file TGLSAFrame.h. Public Member Functions;  TGLSAFrame (const TGWindow *parent, TGLSAViewer &viewer);  Construct GUI frame, bound to passed 'viewer'. ;  ;  TGLSAFrame (TGLSAViewer &viewer);  Construct GUI frame, bound to passed 'viewer'. ;  ;  ~TGLSAFrame () override;  Destroy the GUI frame. ;  ; void CloseWindow () override;  Close the GUI frame. ;  ; TClass * IsA () const override;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process GUI message - deferred back up to TGLSAViewer::ProcessFrameMessage() ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMainFrame () override;  TGMainFrame destructor. ;  ; virtual Bool_t BindKey (const TGWindow *w, Int_t keycode, Int_t modifier) const;  Bind key to a window. ;  ; void DontCallClose ();  Typically call this method in the slot connected to the CloseWindow() signal to prevent the calling of the default or any derived CloseWindow() methods to prevent premature or double deletion of this window. ;  ; TList * GetBindList () const;  ; void GetClassHints (const char *&className, const char *&resourceName) const;  ; const char * GetIconName () const override;  Returns mime type name of object. ;  ; const char * GetIconPixmap () const;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLSAFrame.html:66,Guid,Guide,66,doc/master/classTGLSAFrame.html,https://root.cern,https://root.cern/doc/master/classTGLSAFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLSAViewer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TGLSAViewer Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; The top level standalone GL-viewer - created via plugin manager. ; Definition at line 37 of file TGLSAViewer.h. Public Types; enum  EGLSACommands { ;   kGLHelpAbout; , kGLHelpViewer; , kGLPerspYOZ; , kGLPerspXOZ; , ;   kGLPerspXOY; , kGLXOY; , kGLXOZ; , kGLZOY; , ;   kGLZOX; , kGLXnOY; , kGLXnOZ; , kGLZnOY; , ;   kGLZnOX; , kGLOrthoRotate; , kGLOrthoDolly; , kGLSaveEPS; , ;   kGLSavePDF; , kGLSavePNG; , kGLSaveGIF; , kGLSaveAnimGIF; , ;   kGLSaveJPG; , kGLSaveAS; , kGLCloseViewer; , kGLQuitROOT; , ;   kGLEditObject; , kGLHideMenus. };  ;  Public Types inherited from TGLViewer; enum  ECameraType { ;   kCameraPerspXOZ; , kCameraPerspYOZ; , kCameraPerspXOY; , kCameraOrthoXOY; , ;   kCameraOrthoXOZ; , kCameraOrthoZOY; , kCameraOrthoZOX; , kCameraOrthoXnOY; , ;   kCameraOrthoXnOZ; , kCameraOrthoZnOY; , kCameraOrthoZnOX. };  ; enum  EDragAction { ;   kDragNone; , kDragCameraRotate; , kDragCameraTruck; , kDragCameraDolly; , ;   kDragOverlay. };  ; enum  EPushAction { kPushStd; , kPushCamCenter; , kPushAnnotate; };  ; enum  ESecSelType { kOnRequest; , kOnKeyMod1; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCan",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLSAViewer.html:67,Guid,Guide,67,doc/master/classTGLSAViewer.html,https://root.cern,https://root.cern/doc/master/classTGLSAViewer.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLScenePad Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGLScenePad Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; Implements VirtualViewer3D interface and fills the base-class visualization structures from pad contents. ; Definition at line 26 of file TGLScenePad.h. Public Member Functions;  TGLScenePad (TVirtualPad *pad);  cache logicals during scene rebuilds ;  ;  ~TGLScenePad () override;  ; void AddCompositeOp (UInt_t operation) override;  Add composite operation used to combine objects added via AddObject TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx for description of viewer architecture. ;  ; void AddHistoPhysical (TGLLogicalShape *log, const Float_t *histColor=nullptr);  Scale and rotate a histo object to mimic placement in canvas. ;  ; Int_t AddObject (const TBuffer3D &buffer, Bool_t *addChildren=nullptr) override;  Add an object to the viewer, using internal physical IDs TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx for description of viewer architecture. ;  ; Int_t AddObject (UInt_t physicalID, const TBuffer3D &buffer, Bool_t *addChildren=nullptr) override;  Add an object to the scene, using an external physical ID TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx for description of viewer architecture. ;  ; void BeginScene () override;  Start building of the scene. ;  ; Bool_t BuildingScene () const override;  ; Bool_t CanLoopOnPrimitives () const override;  ; void CloseComposite () override;  Close composite container TVirtualViewer3D interface overload - see base/src/TVirtualViewer3D.cxx for description of viewer architecture. ;  ; Int_t DistancetoPrimitive (Int_t, Int_t) override;  Computes distance fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLScenePad.html:67,Guid,Guide,67,doc/master/classTGLScenePad.html,https://root.cern,https://root.cern/doc/master/classTGLScenePad.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLTH3Composition Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TGLTH3Composition Class ReferenceGraphics » 3D Graphics » OpenGL rendering. . Definition at line 27 of file TGLTH3Composition.h. Public Types; enum  ETH3BinShape { kBox; , kSphere; };  ;  Public Types inherited from TH1; enum  { ;   kNoAxis = 0; , kXaxis = (1ULL << ( 0 )); , kYaxis = (1ULL << ( 1 )); , kZaxis = (1ULL << ( 2 )); , ;   kAllAxes = kXaxis | kYaxis | kZaxis. };  Enumeration specifying which axes can be extended. More...;  ; enum  { kNstat = 13; };  Size of statistics data (size of array used in GetStats()/ PutStats ) More...;  ; enum  EBinErrorOpt { kNormal = 0; , kPoisson = 1; , kPoisson2 = 2; };  Enumeration specifying type of statistics for bin errors. More...;  ; enum  EStatOverflows { kIgnore = 0; , kConsider = 1; , kNeutral = 2; };  Enumeration specifying the way to treat statoverflow. More...;  ; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kUserContour = (1ULL << ( 10 )); , kLogX = (1ULL << ( 15 )); , kIsZoomed = (1ULL << ( 16 )); , ;   kNoTitle = (1ULL << ( 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLTH3Composition.html:73,Guid,Guide,73,doc/master/classTGLTH3Composition.html,https://root.cern,https://root.cern/doc/master/classTGLTH3Composition.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLTH3Slice Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGLTH3Slice Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; A slice of a TH3. ; Definition at line 99 of file TGLPlotPainter.h. Public Types; enum  ESliceAxis { kXOZ; , kYOZ; , kXOY; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGLTH3Slice (const TString &sliceName, const TH3 *hist, const TF3 *fun, const TGLPlotCoordinates *coord, const TGLPlotBox *box, ESliceAxis axis);  Constructor. ;  ;  TGLTH3Slice (const TString &sliceName, const TH3 *hist, const TGLPlotCoordinates *coord, const TGLPlotBox *box, ESliceAxis axis);  Constructor. ;  ; void DrawSlice (Double_t pos) const;  Draw slice. ;  ; const TGLLevelPalette & GetPalette () const;  ; TClass * IsA () const override;  ; void SetMinMax (const Rgl::Range_t &newRange);  ; void SetSliceWidth (Int_t width=1);  Set Slice width. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLTH3Slice.html:67,Guid,Guide,67,doc/master/classTGLTH3Slice.html,https://root.cern,https://root.cern/doc/master/classTGLTH3Slice.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLText Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGLText Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; GL Text. ; To draw a 3D text in a GL window. This class uses uses FTGL to render text. FTGL is a package making the interface between the Free Type fonts and GL. ; Definition at line 19 of file TGLText.h. Public Member Functions;  TGLText ();  ;  TGLText (Double_t x, Double_t y, Double_t z, const char *text);  TGLext normal constructor. ;  ;  ~TGLText () override;  ; void BBox (const char *string, float &llx, float &lly, float &llz, float &urx, float &ury, float &urz);  Calculate bounding-box for given string. ;  ; FTFont * GetFont ();  ; TClass * IsA () const override;  ; void PaintBBox (const char *text);  ; void PaintGLText (Double_t x, Double_t y, Double_t z, const char *text);  Draw text. ;  ; void SetGLTextAngles (Double_t a1, Double_t a2, Double_t a3);  Set the text rotation angles. ;  ; void SetGLTextFont (Font_t fontnumber);  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttText;  TAttText ();  AttText default constructor. ;  ;  TAttText (Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize);  AttText normal constructor. ;  ; virtual ~TAttText ();  AttText destructor. ;  ; void Copy (TAttText &atttext) const;  Copy this text attributes to a new TAttText. ;  ; virtual Short_t GetTextAlign () const;  Return the text alignment. ;  ; virtual Float_t GetTextAngle () const;  Return the text angle. ;  ; virtual Color_t GetTextColor () const;  Return the text color. ;  ; virtual Font_t GetTextFont () const;  Return the text font. ;  ; virtual Float_t GetTextSize () const;  Return the text size. ;  ; virtual Float_t Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLText.html:63,Guid,Guide,63,doc/master/classTGLText.html,https://root.cern,https://root.cern/doc/master/classTGLText.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLVContainer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGLVContainer Class Reference. . Definition at line 178 of file TGListView.h. Public Member Functions;  TGLVContainer (const TGWindow *p, UInt_t w, UInt_t h, UInt_t options=kSunkenFrame, Pixel_t back=GetDefaultFrameBackground());  Create a list view container. ;  ;  TGLVContainer (TGCanvas *p, UInt_t options=kSunkenFrame, Pixel_t back=GetDefaultFrameBackground());  Create a list view container. ;  ;  ~TGLVContainer () override;  Delete list view container. ;  ; virtual void AddItem (TGLVEntry *item);  ; const char * GetHeader (Int_t idx) const;  ; TGListView * GetListView () const;  ; virtual TGDimension GetMaxItemSize () const;  Get size of largest item in container. ;  ; virtual Int_t GetMaxSubnameWidth (Int_t idx) const;  Get width of largest subname in container. ;  ; Bool_t GetMultipleSelection () const;  ; TGDimension GetPageDimension () const override;  Returns page dimension. ;  ; TList * GetSelectedEntries ();  Get list of selected items in container. ;  ; TList * GetSelectedItems ();  Get list of selected items in container. ;  ; EListViewMode GetViewMode () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event in container. ;  ; TClass * IsA () const override;  ; void LineDown (Bool_t select=kFALSE) override;  Move one line down. ;  ; void LineLeft (Bool_t select=kFALSE) override;  Move current position one column left. ;  ; void LineRight (Bool_t select=kFALSE) override;  Move current position one column right. ;  ; void LineUp (Bool_t select=kFALSE) override;  Make current position first line in window by scrolling up. ;  ; virtual void RemoveItemWithData (void *userData);  Remove item with fUserData == userData from conta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLVContainer.html:69,Guid,Guide,69,doc/master/classTGLVContainer.html,https://root.cern,https://root.cern/doc/master/classTGLVContainer.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLVEntry Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGLVEntry Class Reference. . Definition at line 36 of file TGListView.h. Public Member Functions;  TGLVEntry (const TGLVContainer *p, const TString &name, const TString &cname, TGString **subnames=nullptr, UInt_t options=kChildFrame, Pixel_t back=GetWhitePixel());  Create a list view item. ;  ;  TGLVEntry (const TGWindow *p=nullptr, const TGPicture *bigpic=nullptr, const TGPicture *smallpic=nullptr, TGString *name=nullptr, TGString **subnames=nullptr, EListViewMode ViewMode=kLVDetails, UInt_t options=kChildFrame, Pixel_t back=GetWhitePixel());  Create a list view item. ;  ;  ~TGLVEntry () override;  Delete a list view item. ;  ; void Activate (Bool_t a) override;  Make list view item active. ;  ; void DrawCopy (Handle_t id, Int_t x, Int_t y) override;  Draw list view item in other window. ;  ; TGDimension GetDefaultSize () const override;  Get default size of list item. ;  ; TGString * GetItemName () const;  ; const TGPicture * GetPicture () const;  ; virtual TGString * GetSubname (Int_t idx) const;  ; virtual TGString ** GetSubnames () const;  ; virtual Int_t GetSubnameWidth (Int_t idx) const;  ; const char * GetTitle () const override;  Returns title of object. ;  ; void * GetUserData () const;  ; EListViewMode GetViewMode () const;  ; TClass * IsA () const override;  ; Bool_t IsActive () const override;  ; virtual void SetCheckedEntry (Bool_t check=kTRUE);  ; virtual void SetColumns (Int_t *cpos, Int_t *jmode);  ; void SetItemName (const char *name);  ; virtual void SetPictures (const TGPicture *bigpic=nullptr, const TGPicture *smallpic=nullptr);  change pictures ;  ; virtual void SetSubnames (const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLVEntry.html:65,Guid,Guide,65,doc/master/classTGLVEntry.html,https://root.cern,https://root.cern/doc/master/classTGLVEntry.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLViewer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TGLViewer Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; Base GL viewer object - used by both standalone and embedded (in pad) GL. ; Contains core viewer objects :; GL scene - collection of main drawn objects - see TGLStdScene Cameras (fXyzzCamera) - ortho and perspective cameras - see TGLCamera Clipping (fClipXyzz) - collection of clip objects - see TGLClip Manipulators (fXyzzManip) - collection of manipulators - see TGLManip; It maintains the current active draw styles, clipping object, manipulator, camera etc.; TGLViewer is 'GUI free' in that it does not derive from any ROOT GUI TGFrame etc - see TGLSAViewer for this. However it contains GUI GUI style methods HandleButton() etc to which GUI events can be directed from standalone frame or embedding pad to perform interaction.; Also, the TGLWidget needs to be created externally. It is not owned by the viewer.; For embedded (pad) GL this viewer is created directly by plugin manager. For standalone the derived TGLSAViewer is. ; Definition at line 51 of file TGLViewer.h. Public Types; enum  ECameraType { ;   kCameraPerspXOZ; , kCameraPerspYOZ; , kCameraPerspXOY; , kCameraOrthoXOY; , ;   kCameraOrthoXOZ; , kCameraOrthoZOY; , kCameraOrthoZOX; , kCameraOrthoXnOY; , ;   kCameraOrthoXnOZ; , kCameraOrthoZnOY; , kCameraOrthoZnOX. };  ; enum  EDragAction { ;   kDragNone; , kDragCameraRotate; , kDragCameraTruck; , kDragCameraDolly; , ;   kDragOverlay. };  ; enum  EPushAction { kPushStd; , kPushCamCenter; , kPushAnnotate; };  ; enum  ESecSelType { kOnRequest; , kOnKeyMod1; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLViewer.html:65,Guid,Guide,65,doc/master/classTGLViewer.html,https://root.cern,https://root.cern/doc/master/classTGLViewer.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLViewerEditor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGLViewerEditor Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; GUI editor for TGLViewer. ; Definition at line 36 of file TGLViewerEditor.h. Public Member Functions;  TGLViewerEditor (const TGWindow *p=nullptr, Int_t width=140, Int_t height=30, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  ;  ~TGLViewerEditor () override;  ; void DetachFromPad ();  ; void DoAnnotation ();  Create annotation via picking. ;  ; void DoASavImageGUIBaseName (const char *t);  Update base-name. ;  ; void DoASavImageGUIOutMode (Int_t m);  Update output mode. ;  ; void DoASavImageStart ();  Start auto-rotator image auto-save. ;  ; void DoASavImageStop ();  Stop auto-rotator image auto-save. ;  ; void DoCameraCenterExt ();  Set external camera center. ;  ; void DoCameraHome ();  CameraHome was clicked. ;  ; void DoCameraOverlay ();  Update viewer with GUI state. ;  ; void DoCaptureCenter ();  Capture camera-center via picking. ;  ; void DoClearColor (Pixel_t color);  Clear-color was changed. ;  ; void DoDrawCameraCenter ();  Draw camera center. ;  ; void DoIgnoreSizesOnUpdate ();  ResetCamerasOnUpdate was toggled. ;  ; void DoResetCamerasOnUpdate ();  ResetCamerasOnUpdate was toggled. ;  ; void DoRotatorStart ();  Start auto-rotator. ;  ; void DoRotatorStop ();  Stop auto-rotator. ;  ; void DoUpdateScene ();  UpdateScene was clicked. ;  ; TClass * IsA () const override;  ; void SetGuides ();  Configuration of guides GUI called from SetModel(). ;  ; void SetModel (TObject *obj) override;  Sets model or disables/hides viewer. ;  ; void SetRotatorMode ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLViewerEditor.html:71,Guid,Guide,71,doc/master/classTGLViewerEditor.html,https://root.cern,https://root.cern/doc/master/classTGLViewerEditor.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLWidget Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TGLWidget Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; GL window with context. ; Must have a parent window (the 'parent' parameter of ctors). The current version inherits TGCanvas (I'm not sure about future versions), probably, in future multiple inheritance will be added - the second base class will be TGLPaintDevice or something like this.; Usage:; Simply create TGLWidget as an embedded widget, and connect your slots to signals you need: HandleExpose, HandleConfigureNotify, etc. In your slots you can use gl API directly - under Win32 TGLWidget switches between threads internally (look TGLPShapeObjEditor for such usage).; You can write your own class, derived from TGLWidget, with PaintGL and InitGL overriden. Resources (and invariants):; fContainer (TGLWidgetContainer) - controlled by std::auto_ptr; fWindowIndex - controlled manually (see CreateWidget and dtor); fGLContext - controlled manually (see CreateWidget and dtor); visual info for X11 version, controlled manually (see CreateGLContainer and dtor). Exceptions:; can be thrown only during construction.; under win32 class does not throw itself (but some internal operations can throw); under X11 can throw std::runtime_error (from CreateGLContext).; In case of exceptions resources will be freed. TGLWidget object is immutable as far as it was created.; Boolean parameter defines, if you want to grab user's input or not. By default you want, but for example when not - see TGLPShapeObjEditor.; Non-copyable. ; Definition at line 27 of file TGLWidget.h. Public Member Functions;  ~TGLWidget () override;  Destructor. Deletes window ???? and XVisualInfo. ;  ; Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLWidget.html:65,Guid,Guide,65,doc/master/classTGLWidget.html,https://root.cern,https://root.cern/doc/master/classTGLWidget.html,2,"['Guid', 'Simpl']","['Guide', 'Simply']"
Usability,". ROOT: TGLabel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGLabel Class ReferenceGUI » Low level GUI widgets. ; This class handles GUI labels. ; Definition at line 24 of file TGLabel.h. Public Member Functions;  TGLabel (const TGWindow *p, TGString *text, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Create a label GUI object. ;  ;  TGLabel (const TGWindow *p=nullptr, const char *text=nullptr, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Create a label GUI object. ;  ;  ~TGLabel () override;  Delete label. ;  ; virtual void ChangeText (const char *newText);  ; virtual void Disable (Bool_t on=kTRUE);  ; virtual void Enable ();  ; Int_t Get3DStyle () const;  ; Int_t GetBottomMargin () const;  ; TGDimension GetDefaultSize () const override;  Return default size. ;  ; TGFont * GetFont () const;  ; FontStruct_t GetFontStruct () const;  ; Int_t GetLeftMargin () const;  ; GContext_t GetNormGC () const;  ; Int_t GetRightMargin () const;  ; const TGString * GetText () const;  ; Int_t GetTextJustify () const;  ; const char * GetTitle () const override;  Returns title of object. ;  ; Int_t GetTopMargin () const;  ; Int_t GetWrapLength () const;  ; Bool_t HasOwnFont () const;  Returns kTRUE if text attributes are unique. ;  ; TClass * IsA () const override;  ; Bool_t IsDisabled () const;  ; void Layout () override;  Layout label. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a label widget as a C++ statement(s) on output stream out. ;  ; void Set3DStyle (Int_t style);  ; vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLabel.html:63,Guid,Guide,63,doc/master/classTGLabel.html,https://root.cern,https://root.cern/doc/master/classTGLabel.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLayoutHints Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TGLayoutHints Class ReferenceGUI » Low level GUI widgets. ; This class describes layout hints used by the layout classes. ; Definition at line 50 of file TGLayout.h. Public Member Functions;  TGLayoutHints (const TGLayoutHints &lh);  Constructor. ;  ;  TGLayoutHints (ULong_t hints=kLHintsNormal, Int_t padleft=0, Int_t padright=0, Int_t padtop=0, Int_t padbottom=0);  ;  ~TGLayoutHints () override;  Destructor. ;  ; ULong_t GetLayoutHints () const;  ; Int_t GetPadBottom () const;  ; Int_t GetPadLeft () const;  ; Int_t GetPadRight () const;  ; Int_t GetPadTop () const;  ; TClass * IsA () const override;  ; void ls (Option_t *option="""") const override;  The ls function lists the contents of a class on stdout. ;  ; void Print (Option_t *option="""") const override;  Printing. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save layout hints as a C++ statement(s) on output stream out. ;  ; virtual void SetLayoutHints (ULong_t lh);  ; virtual void SetPadBottom (Int_t v);  ; virtual void SetPadLeft (Int_t v);  ; virtual void SetPadRight (Int_t v);  ; virtual void SetPadTop (Int_t v);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Appe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLayoutHints.html:69,Guid,Guide,69,doc/master/classTGLayoutHints.html,https://root.cern,https://root.cern/doc/master/classTGLayoutHints.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLayoutManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGLayoutManager Class ReferenceabstractGUI » Low level GUI widgets. ; Frame layout manager. ; This is an abstract class. ; Definition at line 135 of file TGLayout.h. Public Member Functions;  TGLayoutManager ();  ; virtual TGDimension GetDefaultSize () const =0;  ; TClass * IsA () const override;  ; virtual Bool_t IsModified () const;  ; virtual void Layout ()=0;  ; virtual void SetDefaultHeight (UInt_t);  ; virtual void SetDefaultWidth (UInt_t);  ; virtual void SetModified (Bool_t flag=kTRUE);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLayoutManager.html:71,Guid,Guide,71,doc/master/classTGLayoutManager.html,https://root.cern,https://root.cern/doc/master/classTGLayoutManager.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLineLBEntry Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGLineLBEntry Class ReferenceGUI » Low level GUI widgets. ; Line style and width listbox entries. ; Line example and width number ; Definition at line 97 of file TGListBox.h. Public Member Functions;  TGLineLBEntry (const TGWindow *p=nullptr, Int_t id=-1, const char *str=nullptr, UInt_t w=0, Style_t s=0, UInt_t options=kHorizontalFrame, Pixel_t back=GetWhitePixel());  Create the line style listbox entry. ;  ;  ~TGLineLBEntry () override;  Delete line style listbox entry. ;  ; void DrawCopy (Handle_t id, Int_t x, Int_t y) override;  Draw copy on window/pixmap. ;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; TGGC * GetLineGC () const;  ; Style_t GetLineStyle () const;  ; virtual Int_t GetLineWidth () const;  ; TClass * IsA () const override;  ; virtual void SetLineStyle (Style_t style);  Set the line style corresponding to the TPad line styles. ;  ; virtual void SetLineWidth (Int_t width);  Set or change line width in an entry. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update (TGLBEntry *e) override;  Update line style listbox entry. ;  ;  Public Member Functions inherited from TGTextLBEntry;  TGTextLBEntry (const TGWindow *p=nullptr, TGString *s=nullptr, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t options=kHorizontalFrame, Pixel_t back=GetWhitePixel());  Create a text listbox entry. The TGString is adopted. ;  ;  ~TGTextLBEntry () override;  Delete text listbox entry. ;  ; void DrawCopy (Handle_t id, Int_t x, Int_t y) override;  Draw text listbox ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLineLBEntry.html:69,Guid,Guide,69,doc/master/classTGLineLBEntry.html,https://root.cern,https://root.cern/doc/master/classTGLineLBEntry.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLineStyleComboBox Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGLineStyleComboBox Class Reference. ; The TGLineStyleComboBox user callable and it creates a combobox for selecting the line style. ; Definition at line 140 of file TGComboBox.h. Public Member Functions;  TGLineStyleComboBox (const TGWindow *p=nullptr, Int_t id=-1, UInt_t options=kHorizontalFrame|kSunkenFrame|kDoubleBorder, Pixel_t back=GetWhitePixel());  Create a line style combo box. ;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a line style combo box widget as a C++ statement(s). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGComboBox;  TGComboBox (const TGWindow *p, const char *text, Int_t id=-1, UInt_t options=kHorizontalFrame|kSunkenFrame|kDoubleBorder, Pixel_t back=GetWhitePixel());  Create an editable combo box widget. ;  ;  TGComboBox (const TGWindow *p=nullptr, Int_t id=-1, UInt_t options=kHorizontalFrame|kSunkenFrame|kDoubleBorder, Pixel_t back=GetWhitePixel());  Create a combo box widget. ;  ;  ~TGComboBox () override;  Delete a combo box widget. ;  ; virtual void AddEntry (const char *s, Int_t id);  ; virtual void AddEntry (TGLBEntry *lbe, TGLayoutHints *lhints);  ; virtual void AddEntry (TGString *s, Int_t id);  ; virtual void Changed ();  ; void DrawBorder () override;  Draw border of combo box widget. ;  ; virtual void EnableTextInput (Bool_t on);  Switch text input or readonly mode of combobox (not perfect yet). ;  ; virtual TGLBEntry * FindEntry (const char *s) const;  Find entry by name. ;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; virtual TGListBox",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLineStyleComboBox.html:75,Guid,Guide,75,doc/master/classTGLineStyleComboBox.html,https://root.cern,https://root.cern/doc/master/classTGLineStyleComboBox.html,1,['Guid'],['Guide']
Usability,". ROOT: TGLineWidthComboBox Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGLineWidthComboBox Class Reference. ; The TGLineWidthComboBox user callable and it creates a combobox for selecting the line width. ; Definition at line 158 of file TGComboBox.h. Public Member Functions;  TGLineWidthComboBox (const TGWindow *p=nullptr, Int_t id=-1, UInt_t options=kHorizontalFrame|kSunkenFrame|kDoubleBorder, Pixel_t back=GetWhitePixel(), Bool_t none=kFALSE);  Create a line width combo box. ;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a line width combo box widget as a C++ statement(s). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGComboBox;  TGComboBox (const TGWindow *p, const char *text, Int_t id=-1, UInt_t options=kHorizontalFrame|kSunkenFrame|kDoubleBorder, Pixel_t back=GetWhitePixel());  Create an editable combo box widget. ;  ;  TGComboBox (const TGWindow *p=nullptr, Int_t id=-1, UInt_t options=kHorizontalFrame|kSunkenFrame|kDoubleBorder, Pixel_t back=GetWhitePixel());  Create a combo box widget. ;  ;  ~TGComboBox () override;  Delete a combo box widget. ;  ; virtual void AddEntry (const char *s, Int_t id);  ; virtual void AddEntry (TGLBEntry *lbe, TGLayoutHints *lhints);  ; virtual void AddEntry (TGString *s, Int_t id);  ; virtual void Changed ();  ; void DrawBorder () override;  Draw border of combo box widget. ;  ; virtual void EnableTextInput (Bool_t on);  Switch text input or readonly mode of combobox (not perfect yet). ;  ; virtual TGLBEntry * FindEntry (const char *s) const;  Find entry by name. ;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLineWidthComboBox.html:75,Guid,Guide,75,doc/master/classTGLineWidthComboBox.html,https://root.cern,https://root.cern/doc/master/classTGLineWidthComboBox.html,1,['Guid'],['Guide']
Usability,". ROOT: TGListBox Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGListBox Class ReferenceGUI » Low level GUI widgets. ; A listbox is a box, possibly with scrollbar, containing entries. ; Currently entries are simple text strings (TGTextLBEntry). A TGListBox looks a lot like a TGCanvas. It has a TGViewPort containing a TGLBContainer which contains the entries and it also has a vertical scrollbar which becomes visible if there are more items than fit in the visible part of the container.; The TGListBox is user callable. The other classes are service classes of the listbox.; A listbox contains a container frame which is viewed through a viewport. If the container is larger than the viewport than a vertical scrollbar is added.; Selecting an item in the listbox will generate the event:; kC_COMMAND, kCM_LISTBOX, listbox id, item id. . Definition at line 221 of file TGListBox.h. Public Member Functions;  TGListBox (const TGWindow *p=nullptr, Int_t id=-1, UInt_t options=kSunkenFrame|kDoubleBorder, Pixel_t back=GetWhitePixel());  Create a listbox. ;  ;  ~TGListBox () override;  Delete a listbox widget. ;  ; virtual void AddEntry (const char *s, Int_t id);  Add entry with specified string and id to listbox. ;  ; virtual void AddEntry (TGLBEntry *lbe, TGLayoutHints *lhints);  Add specified TGLBEntry and TGLayoutHints to listbox. ;  ; virtual void AddEntry (TGString *s, Int_t id);  Add entry with specified string and id to listbox. ;  ; virtual void AddEntrySort (const char *s, Int_t id);  Add entry with specified string and id to listbox sorted by increasing id. ;  ; virtual void AddEntrySort (TGLBEntry *lbe, TGLayoutHints *lhints);  Add specified TGLBEntry and TGLayoutHints to listbox sorted by increasing id. ;  ; virtual void AddEntrySort (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListBox.html:65,Guid,Guide,65,doc/master/classTGListBox.html,https://root.cern,https://root.cern/doc/master/classTGListBox.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TGListDetailsLayout Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TGListDetailsLayout Class ReferenceGUI » Low level GUI widgets. ; This is a layout manager for the TGListView widget. ; Definition at line 355 of file TGLayout.h. Public Member Functions;  TGListDetailsLayout (TGCompositeFrame *main, Int_t sep=0, UInt_t w=0);  ; TGDimension GetDefaultSize () const override;  Return default dimension of the list details layout. ;  ; TClass * IsA () const override;  ; void Layout () override;  Make a list details layout of all frames in the list. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save list details layout manager as a C++ statement(s) on out stream. ;  ; void SetDefaultWidth (UInt_t w) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGTileLayout;  TGTileLayout (TGCompositeFrame *main, Int_t sep=0);  Create a tile layout manager. ;  ; TGDimension GetDefaultSize () const override;  Return default dimension of the tile layout. ;  ; TClass * IsA () const override;  ; Bool_t IsModified () const override;  ; void Layout () override;  Make a tile layout of all frames in the list. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save tile layout manager as a C++ statement(s) on output stream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLayoutManager;  TGLayoutManager ();  ; virtual void SetDefaultHeight (UInt_t);  ; virtual void SetModified (Bool_t flag=kTRUE);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListDetailsLayout.html:75,Guid,Guide,75,doc/master/classTGListDetailsLayout.html,https://root.cern,https://root.cern/doc/master/classTGListDetailsLayout.html,1,['Guid'],['Guide']
Usability,". ROOT: TGListLayout Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGListLayout Class ReferenceGUI » Low level GUI widgets. ; This is a layout manager for the TGListView widget. ; Definition at line 335 of file TGLayout.h. Public Member Functions;  TGListLayout (TGCompositeFrame *main, Int_t sep=0);  ; TGDimension GetDefaultSize () const override;  Return default dimension of the list layout. ;  ; TClass * IsA () const override;  ; void Layout () override;  Make a tile layout of all frames in the list. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save list layout manager as a C++ statement(s) on output stream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGTileLayout;  TGTileLayout (TGCompositeFrame *main, Int_t sep=0);  Create a tile layout manager. ;  ; TGDimension GetDefaultSize () const override;  Return default dimension of the tile layout. ;  ; TClass * IsA () const override;  ; Bool_t IsModified () const override;  ; void Layout () override;  Make a tile layout of all frames in the list. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save tile layout manager as a C++ statement(s) on output stream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLayoutManager;  TGLayoutManager ();  ; virtual void SetDefaultHeight (UInt_t);  ; virtual void SetDefaultWidth (UInt_t);  ; virtual void SetModified (Bool_t flag=kTRUE);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListLayout.html:68,Guid,Guide,68,doc/master/classTGListLayout.html,https://root.cern,https://root.cern/doc/master/classTGListLayout.html,1,['Guid'],['Guide']
Usability,". ROOT: TGListTree Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGListTree Class ReferenceGUI » Low level GUI widgets. ; A list tree is a widget that can contain a number of items arranged in a tree structure. ; The items are represented by small folder icons that can be either open or closed.; The TGListTree is user callable. The TGListTreeItem is a service class of the list tree.; A list tree can generate the following events:; kC_LISTTREE, kCT_ITEMCLICK, which button, location (y<<16|x).; kC_LISTTREE, kCT_ITEMDBLCLICK, which button, location (y<<16|x). . Definition at line 195 of file TGListTree.h. Public Types; enum  ECheckMode { kSimple = (1ULL << ( 2 )); , kRecursive = (1ULL << ( 3 )); };  ; enum  EColorMarkupMode { kDefault = 0; , kColorUnderline = (1ULL << ( 0 )); , kColorBox = (1ULL << ( 1 )); };  ;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListTree.html:66,Guid,Guide,66,doc/master/classTGListTree.html,https://root.cern,https://root.cern/doc/master/classTGListTree.html,1,['Guid'],['Guide']
Usability,". ROOT: TGListTreeItem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TGListTreeItem Class Referenceabstract. . Definition at line 26 of file TGListTree.h. Public Member Functions;  TGListTreeItem (TGClient *client=(TGClient::Instance()));  Constructor. ;  ; virtual ~TGListTreeItem ();  ; virtual void CheckAllChildren (Bool_t=kTRUE);  ; virtual void CheckChildren (TGListTreeItem *, Bool_t);  ; virtual void CheckItem (Bool_t=kTRUE)=0;  ; virtual void ClearColor ();  ; virtual Pixel_t GetActiveColor () const =0;  ; virtual const TGPicture * GetCheckBoxPicture () const =0;  ; virtual Color_t GetColor () const =0;  ; TGListTreeItem * GetFirstChild () const;  ; TGListTreeItem * GetLastChild () const;  ; TGListTreeItem * GetNextSibling () const;  ; TGListTreeItem * GetParent () const;  ; virtual const TGPicture * GetPicture () const =0;  ; virtual UInt_t GetPicWidth () const;  Return width of item's icon. ;  ; TGListTreeItem * GetPrevSibling () const;  ; virtual const char * GetText () const =0;  ; virtual Int_t GetTextLength () const =0;  ; virtual const char * GetTipText () const =0;  ; virtual Int_t GetTipTextLength () const =0;  ; virtual void * GetUserData () const =0;  ; virtual void HandleDrag ();  ; virtual void HandleDrop ();  ; virtual Bool_t HandlesDragAndDrop () const;  ; virtual Bool_t HasCheckBox () const =0;  ; virtual Bool_t HasCheckedChild (Bool_t=kFALSE);  ; virtual Bool_t HasColor () const =0;  ; virtual Bool_t HasUnCheckedChild (Bool_t=kFALSE);  ; virtual TClass * IsA () const;  ; virtual Bool_t IsActive () const =0;  ; virtual Bool_t IsChecked () const =0;  ; Bool_t IsDNDSource () const;  ; Bool_t IsDNDTarget () const;  ; virtual Bool_t IsOpen () const;  ; void Rename (const char *new_name);  ; virtual void SavePrimitive (std::ostream &",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListTreeItem.html:70,Guid,Guide,70,doc/master/classTGListTreeItem.html,https://root.cern,https://root.cern/doc/master/classTGListTreeItem.html,2,"['Clear', 'Guid']","['ClearColor', 'Guide']"
Usability,". ROOT: TGListView Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGListView Class ReferenceGUI » Low level GUI widgets. ; A list view is a widget that can contain a number of items arranged in a grid or list. ; The items can be represented either by a string or by an icon.; The TGListView is user callable. The other classes are service classes of the list view.; A list view can generate the following events:; kC_CONTAINER, kCT_SELCHANGED, total items, selected items.; kC_CONTAINER, kCT_ITEMCLICK, which button, location (y<<16|x).; kC_CONTAINER, kCT_ITEMDBLCLICK, which button, location (y<<16|x). . Definition at line 115 of file TGListView.h. Public Member Functions;  TGListView (const TGWindow *p, UInt_t w, UInt_t h, UInt_t options=kSunkenFrame|kDoubleBorder, Pixel_t back=GetDefaultFrameBackground());  Create a list view widget. ;  ;  ~TGListView () override;  Delete a list view widget. ;  ; virtual void AdjustHeaders ();  ; virtual void Clicked (TGLVEntry *entry, Int_t btn);  Emit Clicked() signal. ;  ; virtual void Clicked (TGLVEntry *entry, Int_t btn, Int_t x, Int_t y);  Emit Clicked() signal. ;  ; virtual void DoubleClicked (TGLVEntry *entry, Int_t btn);  Emit DoubleClicked() signal. ;  ; virtual void DoubleClicked (TGLVEntry *entry, Int_t btn, Int_t x, Int_t y);  Emit DoubleClicked() signal. ;  ; virtual const char * GetHeader (Int_t idx) const;  Returns name of header idx. ;  ; TGTextButton ** GetHeaderButtons ();  ; TGDimension GetMaxItemSize () const;  ; UInt_t GetNumColumns ();  ; EListViewMode GetViewMode () const;  ; TClass * IsA () const override;  ; void Layout () override;  Layout list view components (container and contents of container). ;  ; virtual void LayoutHeader (TGFrame *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListView.html:66,Guid,Guide,66,doc/master/classTGListView.html,https://root.cern,https://root.cern/doc/master/classTGListView.html,1,['Guid'],['Guide']
Usability,". ROOT: TGMainFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGMainFrame Class ReferenceGUI » Low level GUI widgets. ; Defines top level windows that interact with the system Window Manager. ; Definition at line 397 of file TGFrame.h. Classes; class  TGMapKey;  . Public Member Functions;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMainFrame () override;  TGMainFrame destructor. ;  ; virtual Bool_t BindKey (const TGWindow *w, Int_t keycode, Int_t modifier) const;  Bind key to a window. ;  ; virtual void CloseWindow ();  Close and delete main frame. ;  ; void DontCallClose ();  Typically call this method in the slot connected to the CloseWindow() signal to prevent the calling of the default or any derived CloseWindow() methods to prevent premature or double deletion of this window. ;  ; TList * GetBindList () const;  ; void GetClassHints (const char *&className, const char *&resourceName) const;  ; const char * GetIconName () const override;  Returns mime type name of object. ;  ; const char * GetIconPixmap () const;  ; void GetMWMHints (UInt_t &value, UInt_t &funcs, UInt_t &input) const;  ; const char * GetWindowName () const;  ; void GetWMPosition (Int_t &x, Int_t &y) const;  ; void GetWMSize (UInt_t &w, UInt_t &h) const;  ; void GetWMSizeHints (UInt_t &wmin, UInt_t &hmin, UInt_t &wmax, UInt_t &hmax, UInt_t &winc, UInt_t &hinc) const;  ; EInitialState GetWMState () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button events. ;  ; Bool_t HandleClientMessage (Event_t *event) override;  Handle client messages sent to this frame. ;  ; Bool_t HandleKey (Event_t *event) override;  Handl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMainFrame.html:67,Guid,Guide,67,doc/master/classTGMainFrame.html,https://root.cern,https://root.cern/doc/master/classTGMainFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TGMainFrame::TGMapKey Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; TGMainFrame::TGMapKey Class Reference. . Definition at line 403 of file TGFrame.h. Public Member Functions;  TGMapKey (UInt_t keycode, TGWindow *w);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMainFrame_1_1TGMapKey.html:77,Guid,Guide,77,doc/master/classTGMainFrame_1_1TGMapKey.html,https://root.cern,https://root.cern/doc/master/classTGMainFrame_1_1TGMapKey.html,1,['Guid'],['Guide']
Usability,". ROOT: TGMatrixLayout Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Attributes |; Private Member Functions |; List of all members ; TGMatrixLayout Class ReferenceGUI » Low level GUI widgets. ; This layout managers does not make use of TGLayoutHints. ; It arranges frames in a matrix-like way. This manager provides :; a column number (0 means unlimited); a row number (0 means unlimited); horizontal & vertical separators. Notes : If both column and row are fixed values, any remaining frames outside the count won't be managed. Unlimited rows means the frame can expand downward (the default behaviour in most UI). Both unlimited rows and columns is undefined (read: will crash the algorithm ;-). With fixed dimensions, frames are always arranged in rows. That is: 1st frame is at position (0,0), next one is at row(0), column(1) and so on... When specifying one dimension as unlimited (i.e. row=0 or column=0) the frames are arranged according to the direction of the fixed dimension. This layout manager does not make use of TGLayoutHints. ; Definition at line 269 of file TGLayout.h. Public Member Functions;  TGMatrixLayout (TGCompositeFrame *main, UInt_t r, UInt_t c, Int_t s=0, Int_t h=0);  TGMatrixLayout constructor. ;  ; TGDimension GetDefaultSize () const override;  Return default dimension of the matrix layout. ;  ; TClass * IsA () const override;  ; void Layout () override;  Make a matrix layout of all frames in the list. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save matrix layout manager as a C++ statement(s) on output stream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLayoutManager;  TGLayoutManager ();  ; virtual Bool_t IsModified () ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMatrixLayout.html:70,Guid,Guide,70,doc/master/classTGMatrixLayout.html,https://root.cern,https://root.cern/doc/master/classTGMatrixLayout.html,1,['Guid'],['Guide']
Usability,". ROOT: TGMdiButtons Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Friends |; List of all members ; TGMdiButtons Class Reference. . Definition at line 129 of file TGMdiDecorFrame.h. Public Member Functions;  TGMdiButtons (const TGWindow *p, const TGWindow *titlebar);  TGMdiButtons constructor. ;  ;  ~TGMdiButtons () override;  TGMdiButtons destructor. ;  ; TGPictureButton * GetButton (Int_t no) const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (Pixel_t back);  Change background color for this frame and all subframes. ;  ; virtual void Cleanup ();  Cleanup and delete all objects contained in this composite frame. ;  ; virtual TGFrameElement * FindFrameElement (TGFrame *f) const;  Find frame-element holding frame f. ;  ; UInt_t GetDefaultHeight () const override;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; UInt_t GetDefaultWidth () const override;  ; TGFrame * GetFrameFromPoint (Int_t x, Int_t y) override;  Get fra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiButtons.html:68,Guid,Guide,68,doc/master/classTGMdiButtons.html,https://root.cern,https://root.cern/doc/master/classTGMdiButtons.html,1,['Guid'],['Guide']
Usability,". ROOT: TGMdiContainer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGMdiContainer Class Reference. . Definition at line 235 of file TGMdiMainFrame.h. Public Member Functions;  TGMdiContainer (const TGMdiMainFrame *p, Int_t w, Int_t h, UInt_t options=0, ULong_t back=GetDefaultFrameBackground());  TGMdiContainer constructor. ;  ; TGDimension GetDefaultSize () const override;  Return dimension of MDI container. ;  ; Bool_t HandleConfigureNotify (Event_t *event) override;  Handle configure notify events for MDI container. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_t);  ; void AddInput (UInt_t emask);  Add events specified in the emask to the events the frame should handle. ;  ; virtual void ChangeBackground (Pixel_t back);  Change frame background color. ;  ; virtual void ChangeOptions (UInt_t options);  Change frame options. Options is an OR of the EFrameTypes. ;  ; Bool_t Contains (Int_t x, Int_t y) const;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; virtual void DeleteWindow ();  Delete window. ;  ; virtual void DrawBorder ();  Draw frame border. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const ov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiContainer.html:70,Guid,Guide,70,doc/master/classTGMdiContainer.html,https://root.cern,https://root.cern/doc/master/classTGMdiContainer.html,1,['Guid'],['Guide']
Usability,". ROOT: TGMdiCornerWinResizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGMdiCornerWinResizer Class Reference. . Definition at line 112 of file TGMdiDecorFrame.h. Public Member Functions;  TGMdiCornerWinResizer (const TGWindow *p, const TGWindow *mdiwin, Int_t pos, const TGGC *boxGC, Int_t linew, Int_t mdioptions=kMdiDefaultResizeMode, Int_t w=20, Int_t h=20);  TGMdiCornerWinResizer constructor. ;  ; void DrawBorder () override;  Draw corner resizer frame border. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle motion events in resizer (resize associated MDI window). ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGMdiWinResizer;  TGMdiWinResizer (const TGWindow *p, const TGWindow *mdiwin, Int_t pos, const TGGC *boxGC, Int_t linew, Int_t mdioptions=kMdiDefaultResizeMode, Int_t w=1, Int_t h=1, UInt_t options=kOwnBackground);  TGMdiWinResizer constructor. ;  ; void DrawBorder () override;  Draw frame border. ;  ; Bool_t HandleButton (Event_t *event) override;  Handle button events in resizer (grab button and resize). ;  ; TClass * IsA () const override;  ; void SetMinSize (Int_t w=50, Int_t h=20);  ; void SetResizeMode (Int_t mode);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiCornerWinResizer.html:77,Guid,Guide,77,doc/master/classTGMdiCornerWinResizer.html,https://root.cern,https://root.cern/doc/master/classTGMdiCornerWinResizer.html,1,['Guid'],['Guide']
Usability,". ROOT: TGMdiDecorFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Friends |; List of all members ; TGMdiDecorFrame Class ReferenceGUI » Low level GUI widgets. ; This file contains all different MDI frame decoration classes. ; Definition at line 229 of file TGMdiDecorFrame.h. Public Types; enum  { kMdiBorderWidth = 5; };  ;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGMdiDecorFrame (TGMdiMainFrame *main, TGMdiFrame *frame, Int_t w, Int_t h, const TGGC *boxGC, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  TGMdiDecorFrame constructor. ;  ;  ~TGMdiDecorFrame () override;  TGMdiDecorFrame destructor. ;  ; virtual Int_t CloseWindow ();  ; TGMdiHorizontalWinResizer * GetLeftV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiDecorFrame.html:71,Guid,Guide,71,doc/master/classTGMdiDecorFrame.html,https://root.cern,https://root.cern/doc/master/classTGMdiDecorFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TGMdiFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TGMdiFrame Class ReferenceGUI » Low level GUI widgets. ; This file contains the TGMdiFrame class. ; Definition at line 42 of file TGMdiFrame.h. Public Member Functions;  TGMdiFrame (TGMdiMainFrame *main, Int_t w, Int_t h, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  TGMdiFrame constructor. ;  ;  ~TGMdiFrame () override;  TGMdiFrame destructor. ;  ; virtual Bool_t CloseWindow ();  Close MDI frame window. ;  ; void DontCallClose ();  Typically call this method in the slot connected to the CloseWindow() signal to prevent the calling of the default or any derived CloseWindow() methods to prevent premature or double deletion of this window. ;  ; ULong_t GetMdiHints () const;  ; const TGPicture * GetWindowIcon ();  Return pointer to picture used as MDI window icon (on titlebar). ;  ; const char * GetWindowName ();  Return MDI window name. ;  ; virtual Bool_t Help ();  ; TClass * IsA () const override;  ; void Move (Int_t x, Int_t y) override;  Move MDI window at position x, y. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a MDIframe as a C++ statement(s) on output stream out. ;  ; virtual void SetMdiHints (ULong_t mdihints);  Set MDI hints, also used to identify titlebar buttons. ;  ; void SetWindowIcon (const TGPicture *pic);  Set MDI window icon (titlebar icon). ;  ; void SetWindowName (const char *name) override;  Set MDI window name (set titlebar title). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiFrame.html:66,Guid,Guide,66,doc/master/classTGMdiFrame.html,https://root.cern,https://root.cern/doc/master/classTGMdiFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TGMdiHorizontalWinResizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGMdiHorizontalWinResizer Class Reference. . Definition at line 97 of file TGMdiDecorFrame.h. Public Member Functions;  TGMdiHorizontalWinResizer (const TGWindow *p, const TGWindow *mdiwin, Int_t pos, const TGGC *boxGC, Int_t linew, Int_t mdioptions=kMdiDefaultResizeMode, Int_t w=5, Int_t h=4);  TGMdiHorizontalWinResizer constructor. ;  ; void DrawBorder () override;  Draw horizontal resizer frame border. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle motion events in resizer (resize associated MDI window). ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGMdiWinResizer;  TGMdiWinResizer (const TGWindow *p, const TGWindow *mdiwin, Int_t pos, const TGGC *boxGC, Int_t linew, Int_t mdioptions=kMdiDefaultResizeMode, Int_t w=1, Int_t h=1, UInt_t options=kOwnBackground);  TGMdiWinResizer constructor. ;  ; void DrawBorder () override;  Draw frame border. ;  ; Bool_t HandleButton (Event_t *event) override;  Handle button events in resizer (grab button and resize). ;  ; TClass * IsA () const override;  ; void SetMinSize (Int_t w=50, Int_t h=20);  ; void SetResizeMode (Int_t mode);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externall",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiHorizontalWinResizer.html:81,Guid,Guide,81,doc/master/classTGMdiHorizontalWinResizer.html,https://root.cern,https://root.cern/doc/master/classTGMdiHorizontalWinResizer.html,1,['Guid'],['Guide']
Usability,". ROOT: TGMdiMainFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TGMdiMainFrame Class ReferenceGUI » Low level GUI widgets. ; This file contains the TGMdiMainFrame class. ; Definition at line 131 of file TGMdiMainFrame.h. Public Member Functions;  TGMdiMainFrame (const TGWindow *p, TGMdiMenuBar *menu, Int_t w, Int_t h, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a MDI main frame. ;  ;  ~TGMdiMainFrame () override;  MDI main frame destructor. ;  ; virtual void ArrangeFrames (Int_t mode);  Automatic repositioning and resizing of every MDI child window. ;  ; virtual void ArrangeMinimized ();  This is an attempt to an ""smart"" minimized window re-arrangement. ;  ; virtual void Cascade ();  ; virtual void CirculateDown ();  Send the highest window to the bottom. ;  ; virtual void CirculateUp ();  Bring the lowest window to the top. ;  ; virtual Int_t Close (TGMdiFrame *frame);  Close MDI child window mdiframe. ;  ; virtual void CloseAll ();  Close all MDI child windows. ;  ; void ConfigureWindow (TGMdiFrame *f, TGMdiGeometry &geom);  Set MDI geometry for MDI child window f. ;  ; virtual Int_t ContextHelp (TGMdiFrame *frame);  Calls Help() method of MDI child window mdiframe. ;  ; virtual void FrameClosed (Int_t id);  ; virtual void FrameCreated (Int_t id);  ; virtual void FrameMaximized (Int_t id);  ; virtual void FrameMinimized (Int_t id);  ; virtual void FrameRestored (Int_t id);  ; virtual void FramesArranged (Int_t mode);  ; virtual void FreeMove (TGMdiFrame *frame);  Allow to move MDI child window mdiframe. ;  ; virtual void FreeSize (TGMdiFrame *frame);  Allow to resize MDI child window mdiframe. ;  ; TGRectangle GetBBox () const;  Return resizing box (rectangle) for current MDI child. ;  ; TGFrame * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiMainFrame.html:70,Guid,Guide,70,doc/master/classTGMdiMainFrame.html,https://root.cern,https://root.cern/doc/master/classTGMdiMainFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TGMdiMenuBar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TGMdiMenuBar Class Reference. . Definition at line 46 of file TGMdiMenu.h. Public Member Functions;  TGMdiMenuBar (const TGWindow *p, Int_t w=1, Int_t h=20);  TGMdiMenuBar constructor. ;  ;  ~TGMdiMenuBar () override;  TGMdiMenuBar destructor. ;  ; void AddPopup (TGHotString *s, TGPopupMenu *menu, TGLayoutHints *l);  Add popup menu to the MDI menu bar with layout hints l. ;  ; TGMenuBar * GetMenuBar () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a MDI menu as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (Pixel_t back);  Change background color for this frame and all subframes. ;  ; virtual void Cleanup ();  Cleanup and delete all objects contained in this composite frame. ;  ; virtual TGFrameElement * FindFrameElement (TGFrame *f) const;  Find frame-element holding ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiMenuBar.html:68,Guid,Guide,68,doc/master/classTGMdiMenuBar.html,https://root.cern,https://root.cern/doc/master/classTGMdiMenuBar.html,1,['Guid'],['Guide']
Usability,". ROOT: TGMdiTitleBar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TGMdiTitleBar Class Reference. . Definition at line 176 of file TGMdiDecorFrame.h. Public Member Functions;  ~TGMdiTitleBar () override;  TGMdiTitleBar destructor. ;  ; TGMdiButtons * GetButtons () const;  ; TGMdiTitleIcon * GetWinIcon () const;  ; TGLabel * GetWinName () const;  ; Int_t GetX0 ();  ; Int_t GetY0 ();  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse click on title bar. ;  ; Bool_t HandleDoubleClick (Event_t *event) override;  Handle double click in title bar (maximize window) ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion events in title bar (used to move MDI window). ;  ; TClass * IsA () const override;  ; Bool_t IsLeftButPressed ();  ; Bool_t IsMidButPressed ();  ; Bool_t IsRightButPressed ();  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages for title bar. ;  ; void SetLeftButPressed (Bool_t press=kTRUE);  ; void SetMidButPressed (Bool_t press=kTRUE);  ; void SetRightButPressed (Bool_t press=kTRUE);  ; void SetTitleBarColors (UInt_t fore, UInt_t back, TGFont *f);  Set title bar color (blue or grey, depends on active state). ;  ; void SetX0 (Int_t x0);  ; void SetY0 (Int_t y0);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiTitleBar.html:69,Guid,Guide,69,doc/master/classTGMdiTitleBar.html,https://root.cern,https://root.cern/doc/master/classTGMdiTitleBar.html,1,['Guid'],['Guide']
Usability,". ROOT: TGMdiTitleIcon Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TGMdiTitleIcon Class Reference. . Definition at line 150 of file TGMdiDecorFrame.h. Public Member Functions;  TGMdiTitleIcon (const TGWindow *p, const TGWindow *titlebar, const TGPicture *pic, Int_t w, Int_t h);  TGMdiTitleIcon constructor. ;  ;  ~TGMdiTitleIcon () override;  TGMdiTitleIcon destructor. ;  ; TGPopupMenu * GetPopup () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle button event on MDI icon (popup menu) ;  ; Bool_t HandleDoubleClick (Event_t *event) override;  Handle double click event on MDI icon (close the window) ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGIcon;  TGIcon (const TGWindow *p, const TGPicture *pic, UInt_t w, UInt_t h, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  ;  TGIcon (const TGWindow *p=nullptr, const char *image=nullptr);  Create icon. ;  ;  ~TGIcon () override;  Delete icon and free picture. ;  ; virtual void ChangeBackgroundColor ();  ; TGDimension GetDefaultSize () const override;  Return size of icon. ;  ; TImage * GetImage () const;  ; const TGPicture * GetPicture () const;  ; void MoveResize (Int_t x, Int_t y, UInt_t w=0, UInt_t h=0) override;  Move icon to (x,y) and resize it to (w,h). ;  ; virtual void Reset ();  Reset icon to original image. It can be used only via context menu. ;  ; void Resize (TGDimension size) override;  Resize the frame. ;  ; void Resize (UInt_t w=0, UInt_t h=0) override;  Resize. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save an icon widget as a C++ statement(s)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiTitleIcon.html:70,Guid,Guide,70,doc/master/classTGMdiTitleIcon.html,https://root.cern,https://root.cern/doc/master/classTGMdiTitleIcon.html,1,['Guid'],['Guide']
Usability,". ROOT: TGMdiVerticalWinResizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGMdiVerticalWinResizer Class Reference. . Definition at line 82 of file TGMdiDecorFrame.h. Public Member Functions;  TGMdiVerticalWinResizer (const TGWindow *p, const TGWindow *mdiwin, Int_t pos, const TGGC *boxGC, Int_t linew, Int_t mdioptions=kMdiDefaultResizeMode, Int_t w=4, Int_t h=5);  TGMdiVerticalWinResizer constructor. ;  ; void DrawBorder () override;  Draw vertical resizer frame border. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle motion events in resizer (resize associated MDI window). ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGMdiWinResizer;  TGMdiWinResizer (const TGWindow *p, const TGWindow *mdiwin, Int_t pos, const TGGC *boxGC, Int_t linew, Int_t mdioptions=kMdiDefaultResizeMode, Int_t w=1, Int_t h=1, UInt_t options=kOwnBackground);  TGMdiWinResizer constructor. ;  ; void DrawBorder () override;  Draw frame border. ;  ; Bool_t HandleButton (Event_t *event) override;  Handle button events in resizer (grab button and resize). ;  ; TClass * IsA () const override;  ; void SetMinSize (Int_t w=50, Int_t h=20);  ; void SetResizeMode (Int_t mode);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiVerticalWinResizer.html:79,Guid,Guide,79,doc/master/classTGMdiVerticalWinResizer.html,https://root.cern,https://root.cern/doc/master/classTGMdiVerticalWinResizer.html,1,['Guid'],['Guide']
Usability,". ROOT: TGMdiWinResizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TGMdiWinResizer Class Reference. . Definition at line 45 of file TGMdiDecorFrame.h. Public Member Functions;  TGMdiWinResizer (const TGWindow *p, const TGWindow *mdiwin, Int_t pos, const TGGC *boxGC, Int_t linew, Int_t mdioptions=kMdiDefaultResizeMode, Int_t w=1, Int_t h=1, UInt_t options=kOwnBackground);  TGMdiWinResizer constructor. ;  ; void DrawBorder () override;  Draw frame border. ;  ; Bool_t HandleButton (Event_t *event) override;  Handle button events in resizer (grab button and resize). ;  ; TClass * IsA () const override;  ; void SetMinSize (Int_t w=50, Int_t h=20);  ; void SetResizeMode (Int_t mode);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_t);  ; void AddInput (UInt_t emask);  Add events specified in the emask to the events the frame should handle. ;  ; virtual void ChangeBackground (Pixel_t back);  Change frame background color. ;  ; virtual void ChangeOptions (UInt_t options);  Change frame options. Options is an OR of the EFrameTypes. ;  ; Bool_t Contains (Int_t x, Int_t y) const;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; virtual void DeleteWindow ();  Delete window. ;  ; void DrawClass () const override;  Draw ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiWinResizer.html:71,Guid,Guide,71,doc/master/classTGMdiWinResizer.html,https://root.cern,https://root.cern/doc/master/classTGMdiWinResizer.html,1,['Guid'],['Guide']
Usability,". ROOT: TGMenuBar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TGMenuBar Class ReferenceGUI » Low level GUI widgets. ; The TGMenu.h header contains all different menu classes. ; The TGMenuBar class implements a menu bar widget. It is used to specify and provide access to common and frequently used application actions grouped under menu titles (TGMenuTitle class). The menu bar takes the highest-level of the menu system and it is a starting point for many interactions. It is always visible and allows using the keyboard equivalents. The geometry of the menu bar is automatically set to the parent widget, i.e. the menu bar automatically resizes itself so that it has the same width as its parent (typically TGMainFrame). A menu bar contains one or more popup menus and usually is placed along the top of the application window. Any popup menu is invisible until the user invokes it by using the mouse pointer or the keyboard.; Popup menus implemented by TGPopupMenu class are unique in that, by convention, they are not placed with the other GUI components in the user interfaces. Instead, a popup menu usually appears either in a menu bar or as a context menu on the TOP of the GUI. For that reason it needs gClient->GetDefaultRoot() as a parent to get the pointer to the root (i.e. desktop) window. This way a popup menu will never be embedded. NOTE: Using gClient->GetRoot() as a parent of TGPopupMenu will not avoid the possibility of embedding the corresponding popup menu because the current window hierarchy can be changed by using gClient->SetRoot() method.; As a context menus TGPopupMenu shows up after pressing the right mouse button, over a popup-enabled component. The popup menu then appears under the mouse pointer.; Selecting a me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMenuBar.html:65,Guid,Guide,65,doc/master/classTGMenuBar.html,https://root.cern,https://root.cern/doc/master/classTGMenuBar.html,1,['Guid'],['Guide']
Usability,". ROOT: TGMenuEntry Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TGMenuEntry Class Reference. ; This class contains all information about a menu entry. ; It is a fully protected class used internally by TGPopupMenu. ; Definition at line 57 of file TGMenu.h. Public Member Functions;  TGMenuEntry ();  ;  ~TGMenuEntry () override;  ; UInt_t GetEh () const;  ; Int_t GetEntryId () const;  ; UInt_t GetEw () const;  ; Int_t GetEx () const;  ; Int_t GetEy () const;  ; TGHotString * GetLabel () const;  ; const char * GetName () const override;  Returns name of object. ;  ; const TGPicture * GetPic () const;  ; TGPopupMenu * GetPopup () const;  ; TGString * GetShortcut () const;  ; const char * GetShortcutText () const;  ; virtual Int_t GetStatus () const;  ; EMenuEntryType GetType () const;  ; void * GetUserData () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMenuEntry.html:67,Guid,Guide,67,doc/master/classTGMenuEntry.html,https://root.cern,https://root.cern/doc/master/classTGMenuEntry.html,1,['Guid'],['Guide']
Usability,". ROOT: TGMenuTitle Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGMenuTitle Class Reference. ; This class creates a menu title. ; A menu title is a frame to which a popup menu can be attached. Menu titles are automatically created when adding a popup menu to a menubar. ; Definition at line 234 of file TGMenu.h. Public Member Functions;  TGMenuTitle (const TGWindow *p=nullptr, TGHotString *s=nullptr, TGPopupMenu *menu=nullptr, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t options=0);  Create a menu title. ;  ;  ~TGMenuTitle () override;  ; virtual void DoSendMessage ();  Send final selected menu item to be processed. ;  ; Int_t GetHotKeyCode () const;  ; TGPopupMenu * GetMenu () const;  ; const char * GetName () const override;  Returns name of object. ;  ; Bool_t GetState () const;  ; Pixel_t GetTextColor () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a title menu widget as a C++ statement(s) on output stream out. ;  ; virtual void SetState (Bool_t state);  Set state of menu title. ;  ; void SetTextColor (Pixel_t col);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMenuTitle.html:67,Guid,Guide,67,doc/master/classTGMenuTitle.html,https://root.cern,https://root.cern/doc/master/classTGMenuTitle.html,1,['Guid'],['Guide']
Usability,". ROOT: TGMime Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; Friends |; List of all members ; TGMime Class ReferenceGUI » Low level GUI widgets. ; TGMime is internally used by TGMimeTypes. ; Definition at line 29 of file TGMimeTypes.h. Public Member Functions;  TGMime ();  ;  ~TGMime () override;  Delete mime object. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMime.html:62,Guid,Guide,62,doc/master/classTGMime.html,https://root.cern,https://root.cern/doc/master/classTGMime.html,1,['Guid'],['Guide']
Usability,". ROOT: TGMimeTypes Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGMimeTypes Class ReferenceGUI » Low level GUI widgets. ; This class handles mime types, used by browsers to map file types to applications and icons. ; Definition at line 47 of file TGMimeTypes.h. Public Member Functions;  TGMimeTypes (TGClient *client, const char *file);  Create a mime type cache. ;  ;  ~TGMimeTypes () override;  Delete mime type pool. ;  ; void AddType (const char *type, const char *pat, const char *icon, const char *sicon, const char *action);  Add a mime type to the list of mime types. ;  ; Bool_t GetAction (const char *filename, char *action);  Return in action the mime action string belonging to filename. ;  ; const TGPicture * GetIcon (const char *filename, Bool_t small_icon);  Return icon belonging to mime type of filename. ;  ; Bool_t GetType (const char *filename, char *type);  Return in type the mime type belonging to filename. ;  ; Bool_t HasChanged () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print list of mime types. ;  ; void SaveMimes ();  Save mime types in user's mime type file. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMimeTypes.html:67,Guid,Guide,67,doc/master/classTGMimeTypes.html,https://root.cern,https://root.cern/doc/master/classTGMimeTypes.html,1,['Guid'],['Guide']
Usability,". ROOT: TGMsgBox Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGMsgBox Class Reference. . Definition at line 52 of file TGMsgBox.h. Public Member Functions;  TGMsgBox (const TGWindow *p, const TGWindow *main, const char *title, const char *msg, EMsgBoxIcon icon, Int_t buttons=kMBDismiss, Int_t *ret_code=nullptr, UInt_t options=kVerticalFrame, Int_t text_align=kTextCenterX|kTextCenterY);  Create a message dialog box with the following parameters:. ;  ;  TGMsgBox (const TGWindow *p=nullptr, const TGWindow *main=nullptr, const char *title=nullptr, const char *msg=nullptr, const TGPicture *icon=nullptr, Int_t buttons=kMBDismiss, Int_t *ret_code=nullptr, UInt_t options=kVerticalFrame, Int_t text_align=kTextCenterX|kTextCenterY);  Create a message dialog box. ;  ;  ~TGMsgBox () override;  Destroy message dialog box. ;  ; void CloseWindow () override;  Close dialog box. ;  ; Bool_t HandleKey (Event_t *event) override;  Handle enter and escape keys (used as Ok and Cancel for now). ;  ; TClass * IsA () const override;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process message dialog box event. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ost",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMsgBox.html:64,Guid,Guide,64,doc/master/classTGMsgBox.html,https://root.cern,https://root.cern/doc/master/classTGMsgBox.html,1,['Guid'],['Guide']
Usability,". ROOT: TGNumberEntry Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TGNumberEntry Class ReferenceGUI » Low level GUI widgets. ; TGNumberEntry is a number entry input widget with up/down buttons. ; TGNumberEntryField is a number entry input widget. TGNumberFormat contains enum types to specify the numeric format.; The number entry widget is based on TGTextEntry but allows only numerical input. The widget support numerous formats including integers, hex numbers, real numbers, fixed fraction reals and time/date formats. The widget also allows to restrict input values to non-negative or positive numbers and to specify explicit limits.; The following styles are supported:; kNESInteger: integer number; kNESRealOne: real number with one digit (no exponent); kNESRealTwo: real number with two digits (no exponent); kNESRealThree: real number with three digits (no exponent); kNESRealFour: real number with four digits (no exponent); kNESReal: arbitrary real number; kNESDegree: angle in degree:minutes:seconds format; kNESMinSec: time in minutes:seconds format; kNESMinSecCent: time in minutes:seconds.centiseconds format; kNESHourMin: time in hour:minutes format; kNESHourMinSec: time in hour:minutes:seconds format; kNESDayMYear: date in day/month/year format; kNESMDayYear: date in month/day/year format; kNESHex: hex number. The following attributes can be specified:; kNEAAnyNumber: any number is allowed; kNEANonNegative: only non-negative numbers are allowed; kNEAPositive: only positive numbers are allowed. Explicit limits can be specified individually:; kNELNoLimits: no limits; kNELLimitMin: lower limit only; kNELLimitMax upper limit only; kNELLimitMinMax both lower and upper limits. TGNumberEntryField is a plain vanilla entry field, whereas TGNumberEnt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGNumberEntry.html:69,Guid,Guide,69,doc/master/classTGNumberEntry.html,https://root.cern,https://root.cern/doc/master/classTGNumberEntry.html,1,['Guid'],['Guide']
Usability,". ROOT: TGNumberEntryField Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGNumberEntryField Class Reference. . Definition at line 66 of file TGNumberEntry.h. Public Member Functions;  TGNumberEntryField (const TGWindow *p, Int_t id, Double_t val, GContext_t norm, FontStruct_t font=GetDefaultFontStruct(), UInt_t option=kSunkenFrame|kDoubleBorder, Pixel_t back=GetWhitePixel());  Constructs a number entry field. ;  ;  TGNumberEntryField (const TGWindow *parent=nullptr, Int_t id=-1, Double_t val=0, EStyle style=kNESReal, EAttribute attr=kNEAAnyNumber, ELimit limits=kNELNoLimits, Double_t min=0, Double_t max=1);  Constructs a number entry field. ;  ; virtual Int_t GetCharWidth (const char *text=""0"") const;  Get the text width in pixels. ;  ; virtual void GetDate (Int_t &year, Int_t &month, Int_t &day) const;  Get the numeric value (date format). ;  ; virtual ULong_t GetHexNumber () const;  Get the numeric value (hex format). ;  ; virtual Long_t GetIntNumber () const;  Get the numeric value (integer representation). ;  ; virtual EAttribute GetNumAttr () const;  Get the numerical attribute. ;  ; virtual Double_t GetNumber () const;  Get the numeric value (floating point representation). ;  ; virtual ELimit GetNumLimits () const;  Get the numerical limit attribute. ;  ; virtual Double_t GetNumMax () const;  Get the upper limit. ;  ; virtual Double_t GetNumMin () const;  Get the lower limit. ;  ; virtual EStyle GetNumStyle () const;  Get the numerical style. ;  ; virtual void GetTime (Int_t &hour, Int_t &min, Int_t &sec) const;  Get the numeric value (time format). ;  ; Bool_t HandleFocusChange (Event_t *event) override;  Handle focus change. ;  ; Bool_t HandleKey (Event_t *event) override;  Handle keys. ;  ; virtual void IncreaseNumber (EStepSize step=kNSSSmall, Int_t sign=1, Bool_t logstep=kFALS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGNumberEntryField.html:74,Guid,Guide,74,doc/master/classTGNumberEntryField.html,https://root.cern,https://root.cern/doc/master/classTGNumberEntryField.html,1,['Guid'],['Guide']
Usability,". ROOT: TGNumberEntryLayout Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGNumberEntryLayout Class Reference. . Definition at line 277 of file TGNumberEntry.h. Public Member Functions;  TGNumberEntryLayout (TGNumberEntry *box);  ; TGDimension GetDefaultSize () const override;  Return the default size of the numeric control box. ;  ; TClass * IsA () const override;  ; void Layout () override;  Layout the internal GUI elements in use. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLayoutManager;  TGLayoutManager ();  ; virtual Bool_t IsModified () const;  ; virtual void SetDefaultHeight (UInt_t);  ; virtual void SetDefaultWidth (UInt_t);  ; virtual void SetModified (Bool_t flag=kTRUE);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newna",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGNumberEntryLayout.html:75,Guid,Guide,75,doc/master/classTGNumberEntryLayout.html,https://root.cern,https://root.cern/doc/master/classTGNumberEntryLayout.html,1,['Guid'],['Guide']
Usability,". ROOT: TGOSXGLManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TGOSXGLManager Class Reference. . Definition at line 15 of file TGOSXGL.h. Public Member Functions;  TGOSXGLManager ();  ;  ~TGOSXGLManager () override;  ; Bool_t AttachOffScreenDevice (Int_t ctxInd, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  ; Int_t CreateGLContext (Int_t winInd) override;  ; void DeleteGLContext (Int_t devInd) override;  ; void ExtractViewport (Int_t devInd, Int_t *vp) override;  ; void Flush (Int_t ctxInd) override;  ; char * GetPlotInfo (TVirtualGLPainter *plot, Int_t px, Int_t py) override;  ; Int_t GetVirtualXInd (Int_t devInd) override;  ; Bool_t HighColorFormat (Int_t) override;  ; Int_t InitGLWindow (Window_t winID) override;  ; TClass * IsA () const override;  ; Bool_t MakeCurrent (Int_t devInd) override;  ; void MarkForDirectCopy (Int_t devInd, Bool_t) override;  ; void PaintSingleObject (TVirtualGLPainter *) override;  ; void PanObject (TVirtualGLPainter *o, Int_t x, Int_t y) override;  ; Bool_t PlotSelected (TVirtualGLPainter *plot, Int_t px, Int_t py) override;  ; void PrintViewer (TVirtualViewer3D *vv) override;  ; void ReadGLBuffer (Int_t devInd) override;  ; Bool_t ResizeOffScreenDevice (Int_t devInd, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  ; Bool_t SelectManip (TVirtualGLManip *manip, const TGLCamera *camera, const TGLRect *rect, const TGLBoundingBox *sceneBox) override;  ; void SelectOffScreenDevice (Int_t devInd) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLManager;  TGLManager ();  ;  TGLManager (const TGLManager &)=delete;  ; TGLManager & operator= (const TGLManager &)=delete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGOSXGLManager.html:70,Guid,Guide,70,doc/master/classTGOSXGLManager.html,https://root.cern,https://root.cern/doc/master/classTGOSXGLManager.html,1,['Guid'],['Guide']
Usability,". ROOT: TGObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGObject Class ReferenceGUI » Low level GUI widgets. ; This class is the baseclass for all ROOT GUI widgets. ; The ROOT GUI components emulate the Win95 look and feel and the code is based on the XClass'95 code (see Copyleft in source). ; Definition at line 21 of file TGObject.h. Public Member Functions;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGObject.html:64,Guid,Guide,64,doc/master/classTGObject.html,https://root.cern,https://root.cern/doc/master/classTGObject.html,1,['Guid'],['Guide']
Usability,". ROOT: TGPack Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGPack Class ReferenceGUI » Low level GUI widgets. ; Stack of frames in horizontal (default) or vertical stack. ; The splitters are placed between the neighbouring frames so that they can be resized by the user. When the whole pack is resized, frames are scaled proportionally to their previous size.; When frames are left in pack at destruction time, they will be deleted via local-cleanup. ; Definition at line 39 of file TGPack.h. Public Member Functions;  TGPack (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Constructor. ;  ;  TGPack (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Constructor. ;  ;  ~TGPack () override;  Destructor. ;  ; void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr) override;  Add frame f at the end with default weight. ;  ; virtual void AddFrameWithWeight (TGFrame *f, TGLayoutHints *l, Float_t w);  Add frame f at the end with given weight. ;  ; virtual void DeleteFrame (TGFrame *f);  Remove frame f and refit existing frames to pack size. ;  ; void Dump () const override;  Print sub frame info. ;  ; void EqualizeFrames ();  Refit existing frames so that their lengths are equal. ;  ; Bool_t GetUseSplitters () const;  ; Bool_t GetVertical () const;  ; void HandleSplitterResize (Int_t delta);  Handle resize events from splitters. ;  ; void HandleSplitterStart ();  Called when splitter drag starts. ;  ; void HideFrame (TGFrame *f) override;  Hide sub frame. ;  ; TClass * IsA () const override;  ; void Layout () override;  Reposition the frames so that they fit correctly. ;  ; void MapSubwindows () override;  Map all sub windows that are part of the composite frame. ;  ; voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGPack.html:62,Guid,Guide,62,doc/master/classTGPack.html,https://root.cern,https://root.cern/doc/master/classTGPack.html,1,['Guid'],['Guide']
Usability,". ROOT: TGPicture Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TGPicture Class ReferenceGUI » Low level GUI widgets. ; The TGPicture class implements pictures and icons used in the different GUI elements and widgets. ; The TGPicturePool class implements a TGPicture cache. TGPictures are created, managed and destroyed by the TGPicturePool. ; Definition at line 25 of file TGPicture.h. Public Member Functions;  ~TGPicture () override;  Delete picture object. ;  ; virtual void Draw (Handle_t id, GContext_t gc, Int_t x, Int_t y) const;  Draw a picture. ;  ; UInt_t GetHeight () const;  ; Pixmap_t GetMask () const;  ; const char * GetName () const override;  Returns name of object. ;  ; Pixmap_t GetPicture () const;  ; UInt_t GetWidth () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsScaled () const;  ; void Print (Option_t *option="""") const override;  Print picture info. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGPicture.html:65,Guid,Guide,65,doc/master/classTGPicture.html,https://root.cern,https://root.cern/doc/master/classTGPicture.html,1,['Guid'],['Guide']
Usability,". ROOT: TGPictureButton Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGPictureButton Class ReferenceGUI » Low level GUI widgets. ; Yield an action as soon as it is clicked. ; This buttons usually provides fast access to frequently used or critical commands. It may appear alone or placed in a group.; The action it performs can be inscribed with a meaningful tooltip set by `SetToolTipText(const char* text, Long_t delayms=400).; The text button has a label indicating the action to be taken when the button is pressed. The text can be a hot string (""&Exit"") that defines the label ""Exit"" and keyboard mnemonics Alt+E for button selection. A button label can be changed by SetText(new_label).; Selecting a text or picture button will generate the event:; kC_COMMAND, kCM_BUTTON, button id, user data. . Definition at line 228 of file TGButton.h. Public Member Functions;  TGPictureButton (const TGWindow *p, const TGPicture *pic, const char *cmd, Int_t id=-1, GContext_t norm=GetDefaultGC()(), UInt_t option=kRaisedFrame|kDoubleBorder);  Create a picture button widget and set action command. ;  ;  TGPictureButton (const TGWindow *p, const TGPicture *pic, Int_t id=-1, GContext_t norm=GetDefaultGC()(), UInt_t option=kRaisedFrame|kDoubleBorder);  Create a picture button widget. ;  ;  TGPictureButton (const TGWindow *p=nullptr, const char *pic=nullptr, Int_t id=-1, GContext_t norm=GetDefaultGC()(), UInt_t option=kRaisedFrame|kDoubleBorder);  Create a picture button. Where pic is the file name of the picture. ;  ;  ~TGPictureButton () override;  Destructor. ;  ; const TGPicture * GetDisabledPicture () const;  ; const TGPicture * GetPicture () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") overr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGPictureButton.html:71,Guid,Guide,71,doc/master/classTGPictureButton.html,https://root.cern,https://root.cern/doc/master/classTGPictureButton.html,1,['Guid'],['Guide']
Usability,". ROOT: TGPicturePool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGPicturePool Class Reference. . Definition at line 89 of file TGPicture.h. Public Member Functions;  TGPicturePool (const TGClient *client, const char *path);  ;  ~TGPicturePool () override;  Delete picture cache. ;  ; void FreePicture (const TGPicture *pic);  Remove picture from cache if nobody is using it anymore. ;  ; const char * GetPath () const;  ; const TGPicture * GetPicture (const char *name);  Get a picture from the picture pool. ;  ; const TGPicture * GetPicture (const char *name, char **xpm);  Create picture from XPM data. ;  ; const TGPicture * GetPicture (const char *name, Pixmap_t pxmap, Pixmap_t mask=0);  Get picture with specified pixmap and mask from pool. ;  ; const TGPicture * GetPicture (const char *name, UInt_t new_width, UInt_t new_height);  Get picture with specified size from pool (picture will be scaled if necessary). ;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  List all pictures in the pool. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGPicturePool.html:69,Guid,Guide,69,doc/master/classTGPicturePool.html,https://root.cern,https://root.cern/doc/master/classTGPicturePool.html,1,['Guid'],['Guide']
Usability,". ROOT: TGPopupMenu Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TGPopupMenu Class Reference. ; This class creates a popup menu object. ; Popup menu's are attached to TGMenuBar objects. ; Definition at line 110 of file TGMenu.h. Public Member Functions;  TGPopupMenu (const TGWindow *p=nullptr, UInt_t w=10, UInt_t h=10, UInt_t options=0);  Create a popup menu. ;  ;  ~TGPopupMenu () override;  Delete a popup menu. ;  ; void Activate (Bool_t) override;  ; virtual void Activate (TGMenuEntry *entry);  Activate a menu entry in a popup menu. ;  ; virtual void Activated (Int_t id);  ; virtual void AddEntry (const char *s, Int_t id, void *ud=nullptr, const TGPicture *p=nullptr, TGMenuEntry *before=nullptr);  Add a menu entry. ;  ; virtual void AddEntry (TGHotString *s, Int_t id, void *ud=nullptr, const TGPicture *p=nullptr, TGMenuEntry *before=nullptr);  Add a menu entry. ;  ; virtual void AddLabel (const char *s, const TGPicture *p=nullptr, TGMenuEntry *before=nullptr);  Add a menu label to the menu. ;  ; virtual void AddLabel (TGHotString *s, const TGPicture *p=nullptr, TGMenuEntry *before=nullptr);  Add a menu label to the menu. ;  ; virtual void AddPopup (const char *s, TGPopupMenu *popup, TGMenuEntry *before=nullptr, const TGPicture *p=nullptr);  Add a (cascading) popup menu to a popup menu. ;  ; virtual void AddPopup (TGHotString *s, TGPopupMenu *popup, TGMenuEntry *before=nullptr, const TGPicture *p=nullptr);  Add a (cascading) popup menu to a popup menu. ;  ; virtual void AddSeparator (TGMenuEntry *before=nullptr);  Add a menu separator to the menu. ;  ; virtual void Associate (const TGWindow *w);  ; virtual void CheckEntry (Int_t id);  Check a menu entr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGPopupMenu.html:67,Guid,Guide,67,doc/master/classTGPopupMenu.html,https://root.cern,https://root.cern/doc/master/classTGPopupMenu.html,1,['Guid'],['Guide']
Usability,". ROOT: TGPrintDialog Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGPrintDialog Class Reference. . Definition at line 78 of file TGTextEditDialogs.h. Public Member Functions;  TGPrintDialog (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, char **printerName=nullptr, char **printProg=nullptr, Int_t *ret_code=nullptr, UInt_t options=kVerticalFrame);  Create the printer dialog box. ;  ;  ~TGPrintDialog () override;  Clean up print dialog. ;  ; void CloseWindow () override;  Close the dialog. ;  ; virtual void GetPrinters ();  Ask the system fo the list of available printers and populate the combo box. ;  ; TClass * IsA () const override;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process print dialog widget messages. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a transient frame widget as a C++ statement(s) on output stream out. ;  ; void SaveSource (const char *filename=""Rootdlog.C"", Option_t *option="""") override;  Save the GUI transient frame widget in a C++ macro file. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGPrintDialog.html:69,Guid,Guide,69,doc/master/classTGPrintDialog.html,https://root.cern,https://root.cern/doc/master/classTGPrintDialog.html,1,['Guid'],['Guide']
Usability,". ROOT: TGProgressBar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TGProgressBar Class ReferenceabstractGUI » Low level GUI widgets. ; The classes in this file implement progress bars. ; Progress bars can be used to show progress of tasks taking more then a few seconds. TGProgressBar is an abstract base class, use either TGHProgressBar or TGVProgressBar. TGHProgressBar can in addition show the position as text in the bar. ; Definition at line 19 of file TGProgressBar.h. Public Types; enum  { kProgressBarStandardWidth = 16; , kProgressBarTextWidth = 24; , kBlockSize = 8; , kBlockSpace = 2; };  ; enum  EBarType { kStandard; , kFancy; };  ; enum  EFillType { kSolidFill; , kBlockFill; };  ;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGProgressBar.html:69,Guid,Guide,69,doc/master/classTGProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGProgressBar.html,3,"['Guid', 'Progress bar', 'progress bar']","['Guide', 'Progress bars', 'progress bars']"
Usability,". ROOT: TGQuartz Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TGQuartz Class ReferenceGraphics » Graphics' Backends » Cocoa backend. ; This is non-GUI part of TVirtualX interface, implemented for MacOS X, using CoreGraphics (Quartz). ; Definition at line 28 of file TGQuartz.h. Public Member Functions;  TGQuartz ();  ;  TGQuartz (const char *name, const char *title);  ; void DrawBox (Int_t x1, Int_t y1, Int_t x2, Int_t y2, EBoxMode mode) override;  Draws a box between [x1,y1] and [x2,y2] according to the ""mode"". ;  ; void DrawCellArray (Int_t x1, Int_t y1, Int_t x2, Int_t y2, Int_t nx, Int_t ny, Int_t *ic) override;  Draws a cell array. ;  ; void DrawFillArea (Int_t n, TPoint *xy) override;  Fills area described by the polygon. ;  ; void DrawLine (Drawable_t wid, GContext_t gc, Int_t x1, Int_t y1, Int_t x2, Int_t y2) override;  Uses the components of the specified GC to draw a line between the specified set of points (x1, y1) and (x2, y2). ;  ; void DrawLine (Int_t x1, Int_t y1, Int_t x2, Int_t y2) override;  Draws a line. ;  ; void DrawPolyLine (Int_t n, TPoint *xy) override;  Draws a line through all points in the list. ;  ; void DrawPolyMarker (Int_t n, TPoint *xy) override;  Draws ""n"" markers with the current attributes at position [x,y]. ;  ; void DrawText (Int_t x, Int_t y, Float_t angle, Float_t mgn, const char *text, ETextMode mode) override;  Draws a text string using current font. ;  ; void DrawText (Int_t x, Int_t y, Float_t angle, Float_t mgn, const wchar_t *text, ETextMode mode) override;  Draws a text string using current font. ;  ; Int_t GetFontAscent () const override;  Returns the ascent of the current font (in pixels). ;  ; Int_t GetFontAscent (const char *text) const override;  Default version is noop, but in principle what ROO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGQuartz.html:64,Guid,Guide,64,doc/master/classTGQuartz.html,https://root.cern,https://root.cern/doc/master/classTGQuartz.html,1,['Guid'],['Guide']
Usability,". ROOT: TGRadioButton Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGRadioButton Class ReferenceGUI » Low level GUI widgets. ; Selects different options. ; Like text buttons, they have text or hot string as a label.; Radio buttons are grouped usually in logical sets of two or more buttons to present mutually exclusive choices.; Selecting a radio button will generate the event:; kC_COMMAND, kCM_RADIOBUTTON, button id, user data. If a command string has been specified (via SetCommand()) then this command string will be executed via the interpreter whenever a button is selected. A command string can contain the macros:. $MSG – kC_COMMAND, kCMRADIOBUTTON packed message (use GET_MSG() and GET_SUBMSG() to unpack); $PARM1 – button id; $PARM2 – user data pointer. Before executing these macros are expanded into the respective Long_t's ; Definition at line 321 of file TGButton.h. Public Member Functions;  TGRadioButton (const TGWindow *p, const char *s, const char *cmd, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  Create a radio button widget. ;  ;  TGRadioButton (const TGWindow *p, TGHotString *s, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  Create a radio button widget. ;  ;  TGRadioButton (const TGWindow *p=nullptr, const char *s=nullptr, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  Create a radio button widget. ;  ;  ~TGRadioButton () override;  Delete a radio button. ;  ; TGDimension GetDefaultSize () const override;  default size ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event. ;  ; Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGRadioButton.html:69,Guid,Guide,69,doc/master/classTGRadioButton.html,https://root.cern,https://root.cern/doc/master/classTGRadioButton.html,1,['Guid'],['Guide']
Usability,". ROOT: TGRecorder Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TGRecorder Class ReferenceGUI » Events recorder. ; Provides GUI for TRecorder class. ; Definition at line 630 of file TRecorder.h. Public Member Functions;  TGRecorder (const TGWindow *p=nullptr, UInt_t w=230, UInt_t h=150);  The GUI for the recorder. ;  ;  ~TGRecorder () override;  Destructor. Cleanup the GUI. ;  ; TClass * IsA () const override;  ; void Replay ();  Handles push of fReplay button according to the current recorder state. ;  ; void StartStop ();  Handles push of the fStartStop button according to the current recorder state. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update ();  Called when fTimer timeouts (every 0.025 second) Updates GUI of recorder. ;  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMainFrame () override;  TGMainFrame destructor. ;  ; virtual Bool_t BindKey (const TGWindow *w, Int_t keycode, Int_t modifier) const;  Bind key to a window. ;  ; virtual void CloseWindow ();  Close and delete main frame. ;  ; void DontCallClose ();  Typically call this method in the slot connected to the CloseWindow() signal to prevent the calling of the default or any derived CloseWindow() methods to prevent premature or double deletion of this window. ;  ; TList * GetBindList () const;  ; void GetClassHints (const char *&className, const char *&resourceName) const;  ; const char * GetIconName () const override;  Returns mime type name of object. ;  ; const char * GetIconPixmap () const;  ; void GetMWMHints (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGRecorder.html:66,Guid,Guide,66,doc/master/classTGRecorder.html,https://root.cern,https://root.cern/doc/master/classTGRecorder.html,1,['Guid'],['Guide']
Usability,". ROOT: TGRectMap Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; TGRectMap Class Reference. . Definition at line 22 of file TGSplitFrame.h. Public Member Functions;  TGRectMap (Int_t rx, Int_t ry, UInt_t rw, UInt_t rh);  ;  ~TGRectMap () override;  ; Bool_t Contains (Int_t px, Int_t py) const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGRectMap.html:65,Guid,Guide,65,doc/master/classTGRectMap.html,https://root.cern,https://root.cern/doc/master/classTGRectMap.html,1,['Guid'],['Guide']
Usability,". ROOT: TGRegion Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGRegion Class Reference. . Definition at line 27 of file TGImageMap.h. Public Types; enum  ERegionType { kRectangle; , kEllipse; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGRegion ();  Create a region object. ;  ;  TGRegion (const TArrayS &x, const TArrayS &y, Bool_t winding=kFALSE);  Create and initialize a region with an X and a Y array of points. ;  ;  TGRegion (const TGRegion &reg);  Region copy constructor. ;  ;  TGRegion (Int_t n, Int_t *x, Int_t *y, Bool_t winding=kFALSE);  Create and initialize a region with an X and Y array of points. ;  ;  TGRegion (Int_t n, TPoint *points, Bool_t winding=kFALSE);  Create and intialize a region with a polygon. ;  ;  TGRegion (Int_t x, Int_t y, UInt_t w, UInt_t h, ERegionType=kRectangle);  Create and initialize a region with a rectangle. ;  ;  ~TGRegion () override;  Delete a region. ;  ; Bool_t Contains (const TPoint &p) const;  Return true if point p is contained in the region. ;  ; Bool_t Contains (Int_t x, Int_t y) const;  Return true if point (x,y) is contained in the region. ;  ; TGRegion Eor (const TGRegion &r) cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGRegion.html:64,Guid,Guide,64,doc/master/classTGRegion.html,https://root.cern,https://root.cern/doc/master/classTGRegion.html,1,['Guid'],['Guide']
Usability,". ROOT: TGRegionWithId Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGRegionWithId Class Reference. . Definition at line 75 of file TGImageMap.h. Public Member Functions;  TGRegionWithId ();  Create GUI region (with id and possible tooltip). ;  ;  TGRegionWithId (const TGRegion &reg, Int_t id);  Copy ctor which allows setting of new id. ;  ;  TGRegionWithId (const TGRegionWithId &reg);  Copy constructor. ;  ;  TGRegionWithId (Int_t id, Int_t n, TPoint *points, Bool_t winding=kFALSE);  Create GUI region (with id and possible tooltip). ;  ;  TGRegionWithId (Int_t id, Int_t x, Int_t y, UInt_t w, UInt_t h, ERegionType=kRectangle);  Create GUI region (with id and possible tooltip). ;  ;  ~TGRegionWithId () override;  Cleanup. ;  ; void DisplayPopup ();  Display popup menu associated with this region. ;  ; Int_t GetId () const;  ; TGPopupMenu * GetPopup () const;  ; TGToolTip * GetToolTipText () const;  ; TClass * IsA () const override;  ; void SetPopup (TGPopupMenu *popup);  ; void SetToolTipText (const char *text, Long_t delayms, const TGFrame *frame);  Set tool tip text associated with this region. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGRegion;  TGRegion ();  Create a region object. ;  ;  TGRegion (const TArrayS &x, const TArrayS &y, Bool_t winding=kFALSE);  Create and initialize a region with an X and a Y array of points. ;  ;  TGRegion (const TGRegion &reg);  Region copy constructor. ;  ;  TGRegion (Int_t n, Int_t *x, Int_t *y, Bool_t winding=kFALSE);  Create and initialize a region with an X and Y array of points. ;  ;  TGRegion (Int_t n, TPoint *points, Bool_t winding=kFALSE);  Create and intialize a region with",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGRegionWithId.html:70,Guid,Guide,70,doc/master/classTGRegionWithId.html,https://root.cern,https://root.cern/doc/master/classTGRegionWithId.html,1,['Guid'],['Guide']
Usability,". ROOT: TGResourcePool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TGResourcePool Class ReferenceGUI » Low level GUI widgets. ; This class implements a pool for the default GUI resource set, like GC's, colors, fonts, etc. ; Definition at line 28 of file TGResourcePool.h. Public Member Functions;  TGResourcePool (TGClient *client);  Create the global GUI resource pool manager. ;  ;  ~TGResourcePool () override;  Cleanup the resource pool... ;  ; Pixel_t GetBlackColor () const;  ; const TGGC * GetBlackGC () const;  ; Pixmap_t GetCheckeredBitmap () const;  ; Pixmap_t GetCheckeredPixmap () const;  ; Atom_t GetClipboard () const;  ; Colormap_t GetDefaultColormap () const;  ; Cursor_t GetDefaultCursor () const;  ; const TGFont * GetDefaultFont () const;  ; const TGGC * GetDocumentBckgndGC () const;  ; const TGPicture * GetDocumentBckgndPicture () const;  ; Pixel_t GetDocumentBgndColor () const;  ; Pixel_t GetDocumentFgndColor () const;  ; const TGFont * GetDocumentFixedFont () const;  ; const TGGC * GetDocumentGC () const;  ; const TGFont * GetDocumentPropFont () const;  ; const TGGC * GetFocusHiliteGC () const;  ; TGFontPool * GetFontPool () const;  ; const TGGC * GetFrameBckgndGC () const;  ; const TGPicture * GetFrameBckgndPicture () const;  ; Pixel_t GetFrameBgndColor () const;  ; Pixel_t GetFrameFgndColor () const;  ; const TGGC * GetFrameGC () const;  ; Pixel_t GetFrameHiliteColor () const;  ; const TGGC * GetFrameHiliteGC () const;  ; Pixel_t GetFrameShadowColor () const;  ; const TGGC * GetFrameShadowGC () const;  ; TGGCPool * GetGCPool () const;  ; Cursor_t GetGrabCursor () const;  ; Pixel_t GetHighLightColor () const;  ; const TGFont * GetIconFont () const;  ; const TGFont * GetMenuFont () const;  ; const TGFont * GetMenuHiliteFont () const;  ; TGMimeTypes * GetMimeTypes () const;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGResourcePool.html:70,Guid,Guide,70,doc/master/classTGResourcePool.html,https://root.cern,https://root.cern/doc/master/classTGResourcePool.html,1,['Guid'],['Guide']
Usability,". ROOT: TGRowLayout Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TGRowLayout Class ReferenceGUI » Low level GUI widgets. ; The following two layout managers do not make use of TGLayoutHints. ; Definition at line 207 of file TGLayout.h. Public Member Functions;  TGRowLayout (TGCompositeFrame *main, Int_t s=0);  ; TGDimension GetDefaultSize () const override;  Return default dimension of the row layout. ;  ; TClass * IsA () const override;  ; void Layout () override;  Make a row layout of all frames in the list. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save row layout manager as a C++ statement(s) on output stream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGVerticalLayout;  TGVerticalLayout (TGCompositeFrame *main);  Create vertical layout manager. ;  ; TGDimension GetDefaultSize () const override;  Return default dimension of the vertical layout. ;  ; TClass * IsA () const override;  ; void Layout () override;  Make a vertical layout of all frames in the list. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save vertical layout manager as a C++ statement(s) on output stream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLayoutManager;  TGLayoutManager ();  ; virtual Bool_t IsModified () const;  ; virtual void SetDefaultHeight (UInt_t);  ; virtual void SetDefaultWidth (UInt_t);  ; virtual void SetModified (Bool_t flag=kTRUE);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGRowLayout.html:67,Guid,Guide,67,doc/master/classTGRowLayout.html,https://root.cern,https://root.cern/doc/master/classTGRowLayout.html,1,['Guid'],['Guide']
Usability,". ROOT: TGScrollBar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGScrollBar Class ReferenceabstractGUI » Low level GUI widgets. ; The classes in this file implement scrollbars. ; Scrollbars can be either placed horizontal or vertical. A scrollbar contains three ; Definition at line 61 of file TGScrollBar.h. Public Member Functions;  TGScrollBar (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Constructor. ;  ;  ~TGScrollBar () override;  Delete a scrollbar (either horizontal or vertical). ;  ; void ChangeBackground (Pixel_t back) override;  Change background color. ;  ; void DrawBorder () override;  Draw frame border. ;  ; TGScrollBarElement * GetHead () const;  ; virtual Int_t GetPageSize () const;  ; virtual Int_t GetPosition () const;  ; virtual Int_t GetRange () const;  ; TGScrollBarElement * GetSlider () const;  ; virtual Int_t GetSmallIncrement ();  ; TGScrollBarElement * GetTail () const;  ; void GrabPointer (Bool_t grab);  ; Bool_t HandleButton (Event_t *event) override=0;  ; Bool_t HandleCrossing (Event_t *event) override;  Handle mouse crossing event. ;  ; Bool_t HandleMotion (Event_t *event) override=0;  ; Bool_t HandleTimer (TTimer *t) override;  Handle repeat timer for horizontal or vertical scrollbar. ;  ; TClass * IsA () const override;  ; Bool_t IsAccelerated () const;  ; void Layout () override=0;  ; void MapSubwindows () override;  map sub windows ;  ; void MoveResize (Int_t x, Int_t y, UInt_t w=0, UInt_t h=0) override;  Move and/or resize the frame. ;  ; virtual void PageSizeChanged (Int_t range);  ; virtual void PositionChanged (Int_t pos);  ; virtual void RangeChanged (Int_t range);  ; void Resize (TGDimension size) override;  Resize ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGScrollBar.html:67,Guid,Guide,67,doc/master/classTGScrollBar.html,https://root.cern,https://root.cern/doc/master/classTGScrollBar.html,1,['Guid'],['Guide']
Usability,". ROOT: TGScrollBarElement Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGScrollBarElement Class Reference. . Definition at line 29 of file TGScrollBar.h. Public Member Functions;  TGScrollBarElement (const TGWindow *p=nullptr, const TGPicture *pic=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kRaisedFrame|kDoubleBorder, Pixel_t back=GetDefaultFrameBackground());  Constructor. ;  ;  ~TGScrollBarElement () override;  destructor ;  ; void DrawBorder () override;  Draw border around scollbar element. ;  ; Bool_t HandleCrossing (Event_t *event) override;  Handle mouse crossing event. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsEnabled () const;  ; virtual void SetEnabled (Bool_t on=kTRUE);  Enable/Disable scroll bar button chaging the state. ;  ; virtual void SetState (Int_t state);  Change state of scrollbar element (either up or down). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_t);  ; void AddInput (UInt_t emask);  Add events specified in the emask to the events the frame should handle. ;  ; virtual void ChangeBackground (Pixel_t back);  Change frame background color. ;  ; virtual void ChangeOptions (UInt_t options);  Change frame options. Options is an OR of the EFrameTypes. ;  ; Bool_t Contains (Int_t x, Int_t y) cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGScrollBarElement.html:74,Guid,Guide,74,doc/master/classTGScrollBarElement.html,https://root.cern,https://root.cern/doc/master/classTGScrollBarElement.html,1,['Guid'],['Guide']
Usability,". ROOT: TGSearchDialog Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TGSearchDialog Class Reference. . Definition at line 38 of file TGTextEditDialogs.h. Public Member Functions;  TGSearchDialog (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, TGSearchType *sstruct=nullptr, Int_t *ret_code=nullptr, UInt_t options=kVerticalFrame);  Create a search dialog box. ;  ;  ~TGSearchDialog () override;  Clean up search dialog. ;  ; void CloseWindow () override;  Close the dialog. ;  ; virtual TGSearchType * GetType () const;  ; TClass * IsA () const override;  ; virtual Bool_t IsClose () const;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process search dialog widget messages. ;  ; virtual void SetClose (Bool_t on);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TextEntered (const char *text);  emit signal when search text entered ;  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a transient frame widget as a C++ statement(s) on output stream out. ;  ; void SaveSource (const char *filename=""Rootdlog.C"", Option_t *option="""") override;  Save the GUI transient frame widget in a C++ macro file. ;  ; void Streamer (TBuffer &) ove",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSearchDialog.html:70,Guid,Guide,70,doc/master/classTGSearchDialog.html,https://root.cern,https://root.cern/doc/master/classTGSearchDialog.html,1,['Guid'],['Guide']
Usability,". ROOT: TGSelectBox Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Attributes |; Private Attributes |; List of all members ; TGSelectBox Class Reference. ; This class represent a specialized expression editor for TTVLVEntry 'true name' and 'alias' data members. ; It is a singleton in order to be able to use it for several expressions. ; Definition at line 157 of file TTVLVContainer.h. Public Member Functions;  TGSelectBox (const TGWindow *p, const TGWindow *main, UInt_t w=10, UInt_t h=10);  TGSelectBox constructor. ;  ;  ~TGSelectBox () override;  TGSelectBox destructor. ;  ; void CloseWindow () override;  Close the select box. ;  ; TTVLVEntry * EditedEntry ();  ; void GrabPointer ();  Just focus the cursor inside. ;  ; void InsertText (const char *text);  Insert text in text entry. ;  ; bool ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Message interpreter. ;  ; void SaveText ();  Save the edited entry true name and alias. ;  ; void SetEntry (TTVLVEntry *entry);  Connect one entry. ;  ; void SetLabel (const char *title);  Set label of selection box. ;  ; bool ValidateAlias ();  Return true if edited alias is not a leading string of other expression aliases. ;  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a transient frame widget as a C++ statement(s) on output stream out. ;  ; void SaveSource (const char *filename=""Rootdlog",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSelectBox.html:67,Guid,Guide,67,doc/master/classTGSelectBox.html,https://root.cern,https://root.cern/doc/master/classTGSelectBox.html,1,['Guid'],['Guide']
Usability,". ROOT: TGSelectedPicture Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TGSelectedPicture Class Reference. . Definition at line 67 of file TGPicture.h. Public Member Functions;  TGSelectedPicture (const TGClient *client, const TGPicture *p);  Create a ""selected"" looking picture based on the original TGPicture. ;  ;  ~TGSelectedPicture () override;  Delete selected picture. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGPicture;  ~TGPicture () override;  Delete picture object. ;  ; virtual void Draw (Handle_t id, GContext_t gc, Int_t x, Int_t y) const;  Draw a picture. ;  ; UInt_t GetHeight () const;  ; Pixmap_t GetMask () const;  ; const char * GetName () const override;  Returns name of object. ;  ; Pixmap_t GetPicture () const;  ; UInt_t GetWidth () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsScaled () const;  ; void Print (Option_t *option="""") const override;  Print picture info. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default actio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSelectedPicture.html:73,Guid,Guide,73,doc/master/classTGSelectedPicture.html,https://root.cern,https://root.cern/doc/master/classTGSelectedPicture.html,1,['Guid'],['Guide']
Usability,". ROOT: TGShapedFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGShapedFrame Class ReferenceGUI » Low level GUI widgets. ; A Shaped window. ; Definition at line 21 of file TGShapedFrame.h. Public Member Functions;  TGShapedFrame (const char *fname=nullptr, const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0);  Shaped window default constructor. ;  ;  ~TGShapedFrame () override;  Destructor. ;  ; TImage GetImage () const;  ; const TGPicture GetPicture () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a shaped frame as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (Pixel_t back);  Change background color for this frame and all subframes. ;  ; virtual void Cleanup ();  Cleanup and delete all objects contained in this composite frame. ;  ; virtual TGFrameElement * FindFrameElement (TGFrame *f) const;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGShapedFrame.html:69,Guid,Guide,69,doc/master/classTGShapedFrame.html,https://root.cern,https://root.cern/doc/master/classTGShapedFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TGShutter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGShutter Class ReferenceGUI » Low level GUI widgets. ; A shutter widget contains a set of shutter items that can be open and closed like a shutter. ; This widget is usefull to group a large number of options in a number of categories. ; Definition at line 55 of file TGShutter.h. Public Member Functions;  TGShutter (const TGWindow *p=nullptr, UInt_t options=kSunkenFrame);  Create shutter frame. ;  ;  ~TGShutter () override;  Cleanup shutter widget. ;  ; virtual void AddItem (TGShutterItem *item);  Add shutter item to shutter frame. ;  ; virtual TGShutterItem * AddPage (const char *item=""Page"");  Add new page (shutter item) ;  ; virtual void EnableItem (const char *name, Bool_t on=kTRUE);  Disable/enbale shutter item. ;  ; TGDimension GetDefaultSize () const override;  Return the default / minimal size of the widget. ;  ; TGShutterItem * GetItem (const char *name);  returns a shutter item by name (name is hot string of shutter item) ;  ; TGShutterItem * GetSelectedItem () const;  ; Bool_t HandleTimer (TTimer *t) override;  Shutter item animation. ;  ; TClass * IsA () const override;  ; void Layout () override;  Layout shutter items. ;  ; Bool_t ProcessMessage (Longptr_t cmd, Longptr_t parm1, Longptr_t parm2) override;  Handle shutter messages. ;  ; virtual void RemoveItem (const char *name);  Remove item from shutter. ;  ; virtual void RemovePage ();  Remove selected page. ;  ; virtual void RenamePage (const char *name);  Rename selected page. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a shutter widget as a C++ statement(s) on output stream out. ;  ; virtual void Selected (TGShutterItem *item);  ; virtual void SetDefaultSize (UInt_t w, UInt_t h);  Set the defaul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGShutter.html:65,Guid,Guide,65,doc/master/classTGShutter.html,https://root.cern,https://root.cern/doc/master/classTGShutter.html,1,['Guid'],['Guide']
Usability,". ROOT: TGShutterItem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TGShutterItem Class Reference. . Definition at line 25 of file TGShutter.h. Public Member Functions;  TGShutterItem (const TGWindow *p=nullptr, TGHotString *s=nullptr, Int_t id=-1, UInt_t options=0);  Create a shutter item. ;  ;  ~TGShutterItem () override;  Clan up shutter item. ;  ; TGButton * GetButton () const;  ; TGFrame * GetContainer () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a shutter item widget as a C++ statement(s) on output stream out. ;  ; virtual void Selected ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGVerticalFrame;  TGVerticalFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a vertical frame widget as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGShutterItem.html:69,Guid,Guide,69,doc/master/classTGShutterItem.html,https://root.cern,https://root.cern/doc/master/classTGShutterItem.html,1,['Guid'],['Guide']
Usability,". ROOT: TGSimpleTable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGSimpleTable Class ReferenceGUI » Low level GUI widgets. ; To provide a simple class to visualize an array of doubles, the class TGSimpleTable is provided. ; TGSimpleTable creates it's own TGSimpleTableInterface. For more information, see the documentation of TGTable; The interface is accesible through the GetInterface() method. ; Definition at line 16 of file TGSimpleTable.h. Public Member Functions;  TGSimpleTable (TGWindow *p, Int_t id, Double_t **data, UInt_t nrows, UInt_t ncolumns);  TGSimpleTable constructor. ;  ;  ~TGSimpleTable () override;  TGSimpleTable destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGTable;  TGTable (const TGWindow *p=nullptr, Int_t id=0, TVirtualTableInterface *interface=nullptr, UInt_t nrows=50, UInt_t ncolumns=20);  TGTable constuctor. ;  ;  ~TGTable () override;  TGTable destructor. ;  ; virtual TGTableCell * FindCell (TGString label);  Find the TGTableCell with label. ;  ; virtual const TGTableCell * FindCell (TGString label) const;  Const version of FindCell(). ;  ; virtual TGCanvas * GetCanvas ();  ; virtual TGTableCell * GetCell (UInt_t i, UInt_t j);  Return a pointer to the TGTableCell at position i,j. ;  ; virtual const TGTableCell * GetCell (UInt_t i, UInt_t j) const;  Const version of GetCell(). ;  ; virtual const TGTableHeaderFrame * GetCHdrFrame ();  ; virtual TObjArray * GetColumn (UInt_t columns);  Return a pointer to a TObjArray that contains pointers to all the cells in column. ;  ; virtual TGTableHeader * GetColumnHeader (const UInt_t column);  Return a pointer to the header of column. ;  ; virtual const TGTableHea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSimpleTable.html:69,Guid,Guide,69,doc/master/classTGSimpleTable.html,https://root.cern,https://root.cern/doc/master/classTGSimpleTable.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TGSlider Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGSlider Class ReferenceabstractGUI » Low level GUI widgets. ; Slider widgets allow easy selection of a range. ; Sliders can be either horizontal or vertical oriented and there is a choice of two different slider types and three different types of tick marks.; TGSlider is an abstract base class. Use the concrete TGVSlider and TGHSlider. ; Definition at line 40 of file TGSlider.h. Public Member Functions;  TGSlider (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t type=kSlider1|kScaleBoth, Int_t id=-1, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Slider constructor. ;  ;  ~TGSlider () override;  ; virtual void ChangeSliderPic (const char *name);  Change slider picture. ;  ; virtual Int_t GetMaxPosition () const;  ; virtual Int_t GetMinPosition () const;  ; virtual Int_t GetPosition () const;  ; virtual Int_t GetScale () const;  ; Bool_t HandleButton (Event_t *event) override=0;  ; Bool_t HandleConfigureNotify (Event_t *event) override=0;  This event is generated when the frame is resized. ;  ; Bool_t HandleMotion (Event_t *event) override=0;  ; TClass * IsA () const override;  ; void MapSubwindows () override;  map sub windows ;  ; virtual void PositionChanged (Int_t pos);  ; virtual void Pressed ();  ; virtual void Released ();  ; virtual void SetEnabled (Bool_t flag=kTRUE);  ; virtual void SetPosition (Int_t pos);  Set slider position. ;  ; virtual void SetRange (Int_t min, Int_t max);  Set slider range. ;  ; virtual void SetScale (Int_t scale);  ; virtual void SetState (Bool_t state);  Set state of widget. If kTRUE=enabled, kFALSE=disabled. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void Stream",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSlider.html:64,Guid,Guide,64,doc/master/classTGSlider.html,https://root.cern,https://root.cern/doc/master/classTGSlider.html,1,['Guid'],['Guide']
Usability,". ROOT: TGSpeedo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGSpeedo Class ReferenceGUI » Low level GUI widgets. ; TGSpeedo is a widget looking like a speedometer, with a needle, a counter and a small odometer window. ; Three thresholds are configurable, with their glowing color A peak mark can be enabled, allowing to keep track of the highest value displayed. The mark can be reset by right-clicking on the widget.; Two signals are available:; OdoClicked(): when user click on the small odometer window; LedClicked(): when user click on the small led near the counter . Definition at line 22 of file TGSpeedo.h. Public Types; enum  EGlowColor { kNoglow; , kGreen; , kOrange; , kRed; };  ;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContext",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSpeedo.html:64,Guid,Guide,64,doc/master/classTGSpeedo.html,https://root.cern,https://root.cern/doc/master/classTGSpeedo.html,1,['Guid'],['Guide']
Usability,". ROOT: TGSplitButton Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Private Member Functions |; Friends |; List of all members ; TGSplitButton Class ReferenceGUI » Low level GUI widgets. ; Implements a button with added menu functionality. ; There are 2 modes of operation available.; If the button is split, a menu will popup when the menu area of the button is clicked. Activating a menu item changes the functionality of the button by having it emit a additional signal when it is clicked. The signal emitted when the button is clicked, is the ItemClicked(Int_t) signal with a different fixed value for the Int_t that corresponds to the id of the activated menu entry.; If the button is not split, clicking it will popup the menu and the ItemClicked(Int_t) signal will be emitted when a menu entry is activated. The value of the Int_t is again equal to the value of the id of the activated menu entry.; The mode of operation of a SplitButton can be changed on the fly by calling the SetSplit(Bool_t) method. ; Definition at line 378 of file TGButton.h. Private Member Functions;  TGSplitButton (const TGSplitButton &)=delete;  ; void CalcSize ();  Calculate the size of the button. ;  ; void DrawTriangle (const GContext_t gc, Int_t x, Int_t y);  Draw triangle (arrow) on which user can click to open Popup. ;  ; Bool_t HandleSButton (Event_t *event);  Handle mouse button event in case the button is split. ;  ; Bool_t HandleSCrossing (Event_t *event);  Handle mouse crossing event in case of split menu. ;  ; Bool_t HandleSKey (Event_t *event);  Handle key event. This function will be called when the hotkey is hit. ;  ; TGSplitButton & operator= (const TGSplitButton &)=delete;  ; void SetMenuState (Bool_t state);  Popup the attached menu. ;  . Friends; class TGPopupMenu;  . Data members for menu functionality; Bool_t fSplit;  kTRUE if menu is in split mode ;  ; EButtonState fMBState;  state for menu button in spli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSplitButton.html:69,Guid,Guide,69,doc/master/classTGSplitButton.html,https://root.cern,https://root.cern/doc/master/classTGSplitButton.html,1,['Guid'],['Guide']
Usability,". ROOT: TGSplitFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGSplitFrame Class ReferenceGUI » Low level GUI widgets. ; A split frame. ; Definition at line 77 of file TGSplitFrame.h. Public Member Functions;  TGSplitFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0);  Default constructor. ;  ;  ~TGSplitFrame () override;  Destructor. Make cleanup. ;  ; void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr) override;  Add a frame in the split frame using layout hints l. ;  ; void Cleanup () override;  Recursively cleanup child frames. ;  ; void Close ();  Close (unmap and remove from the list of frames) the frame contained in this split frame. ;  ; void CloseAndCollapse ();  Close (unmap, remove from the list of frames and destroy) the frame contained in this split frame. ;  ; void Docked (TGFrame *frame);  Emit Undocked() signal. ;  ; void ExtractFrame ();  Extract the frame contained in this split frame an reparent it in a transient frame. ;  ; TGSplitFrame * GetFirst () const;  ; TGFrame * GetFrame () const;  ; Float_t GetHRatio () const;  ; TGSplitFrame * GetSecond () const;  ; TGSplitter * GetSplitter () const;  ; TGSplitTool * GetSplitTool () const;  ; TGSplitFrame * GetTopFrame ();  Return the top level split frame. ;  ; TGFrame * GetUndocked () const;  ; Float_t GetWRatio () const;  ; Bool_t HandleConfigureNotify (Event_t *) override;  Handles resize events for this frame. ;  ; virtual void HSplit (UInt_t h=0);  Horizontally split the frame. ;  ; TClass * IsA () const override;  ; void MapToSPlitTool (TGSplitFrame *top);  Map this split frame in the small overview tooltip. ;  ; void OnSplitterClicked (Event_t *event);  Handle mouse click events on the splitter. ;  ; void RemoveFrame (TGFrame *f) override;  Add a frame in the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSplitFrame.html:68,Guid,Guide,68,doc/master/classTGSplitFrame.html,https://root.cern,https://root.cern/doc/master/classTGSplitFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TGSplitTool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGSplitTool Class ReferenceGUI » Low level GUI widgets. ; A split frame tool tip. ; Definition at line 47 of file TGSplitFrame.h. Public Member Functions;  TGSplitTool (const TGWindow *p=nullptr, const TGFrame *f=nullptr);  Create a split frame tool tip. ;  ;  ~TGSplitTool () override;  TGSplitTool destructor. ;  ; void AddRectangle (TGFrame *frm, Int_t x, Int_t y, Int_t w, Int_t h);  Add a rectangle representation of a split frame in the map, together with the frame itself. ;  ; void DoRedraw () override;  Redraw split frame tool. ;  ; void DrawBorder () override;  Draw border of tool window. ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse click events in the tool. ;  ; Bool_t HandleMotion (Event_t *event) override;  handle mouse motion events ;  ; void Hide ();  Hide tool window. Use this method to hide the tool in a client class. ;  ; TClass * IsA () const override;  ; void Reset ();  Reset tool tip popup delay timer. ;  ; void SetPosition (Int_t x, Int_t y);  Set popup position within specified frame (as specified in the ctor). ;  ; void Show (Int_t x, Int_t y);  Show tool window. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLay",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSplitTool.html:67,Guid,Guide,67,doc/master/classTGSplitTool.html,https://root.cern,https://root.cern/doc/master/classTGSplitTool.html,1,['Guid'],['Guide']
Usability,". ROOT: TGSplitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGSplitter Class ReferenceabstractGUI » Low level GUI widgets. ; A splitter allows the frames left and right or above and below of it to be resized. ; The frame to be resized must have the kFixedWidth or kFixedHeight property set. ; Definition at line 19 of file TGSplitter.h. Public Member Functions;  TGSplitter (const TGWindow *p=nullptr, UInt_t w=2, UInt_t h=4, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Create a splitter. ;  ;  ~TGSplitter () override;  ; void DragStarted ();  Emit DragStarted signal. ;  ; Bool_t GetExternalHandler () const;  ; Bool_t HandleButton (Event_t *event) override=0;  ; Bool_t HandleCrossing (Event_t *event) override=0;  ; Bool_t HandleMotion (Event_t *event) override=0;  ; TClass * IsA () const override;  ; void Moved (Int_t delta);  Emit Moved signal. ;  ; void SetExternalHandler (Bool_t x);  ; virtual void SetFrame (TGFrame *frame, Bool_t prev)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_t);  ; void AddInput (UInt_t emask);  Add events specified in the emask to the events the frame should handle. ;  ; virtual void ChangeBackground (Pixel_t back);  Change frame background color. ;  ; virtual void ChangeOptions (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSplitter.html:66,Guid,Guide,66,doc/master/classTGSplitter.html,https://root.cern,https://root.cern/doc/master/classTGSplitter.html,1,['Guid'],['Guide']
Usability,". ROOT: TGStatusBar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TGStatusBar Class ReferenceGUI » Low level GUI widgets. ; Provides a StatusBar widget. ; Definition at line 21 of file TGStatusBar.h. Public Member Functions;  TGStatusBar (const TGWindow *p=nullptr, UInt_t w=4, UInt_t h=2, UInt_t options=kSunkenFrame|kHorizontalFrame, Pixel_t back=GetDefaultFrameBackground());  Create a status bar widget. ;  ;  ~TGStatusBar () override;  Delete status bar widget. ;  ; void AddText (const char *text, Int_t partidx=0);  ; void Draw3DCorner (Bool_t corner);  ; void DrawBorder () override;  Draw the status bar border (including cute 3d corner). ;  ; TGCompositeFrame * GetBarPart (Int_t npart) const;  Returns bar part. ;  ; TGDimension GetDefaultSize () const override;  Return default size. ;  ; const char * GetText (Int_t partidx=0) const;  return text in the part partidx ;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a status bar widget as a C++ statement(s) on output stream out. ;  ; virtual void SetParts (Int_t *parts, Int_t npart);  Divide the status bar in nparts. ;  ; virtual void SetParts (Int_t npart);  Divide the status bar in npart equal sized parts. ;  ; virtual void SetText (const char *text, Int_t partidx=0);  Set text in partion partidx in status bar. ;  ; virtual void SetText (TGString *text, Int_t partidx=0);  Set text in partition partidx in status bar. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGHorizontalFrame;  TGHorizontalFrame ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGStatusBar.html:67,Guid,Guide,67,doc/master/classTGStatusBar.html,https://root.cern,https://root.cern/doc/master/classTGStatusBar.html,1,['Guid'],['Guide']
Usability,". ROOT: TGTRA Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGTRA Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A general twisted trapezoid. . The faces perpendicular to z are trapezia and their centres are not necessarily on a line parallel to the z axis as the TRAP; additionally, the faces may be twisted so that none of their edges are parallel. It is a TRAP shape, except that it is twisted in the x-y plane as a function of z. The parallel sides perpendicular to the z axis are rotated with respect to the x axis by an angle TWIST, which is one of the parameters. The shape is defined by the eight corners and is assumed to be constructed of straight lines joining points on the boundary of the trapezoidal face at z=-DZ to the corresponding points on the face at z=DZ. Divisions are not allowed. It has 15 parameters:. name: name of the shape; title: shape's title; material: (see TMaterial); dZ: half-length along the z axis; theta: polar angle of the line joining the centre of the face at -DZ to the centre of the one at +DZ; phi: azimuthal angle of the line joining the centre of the face at -DZ to the centre of the one at +DZ; twist: twist angle of the faces parallel to the x-y plane at z = +/- DZ around an axis parallel to z passing through their centre; h1: half-length along y of the face at -DZ; bl1: half-length along x of the side at -H1 in y of the face at -DZ in z; tl1: half-length along x of the side at +H1 in y of the face at -DZ in z; alpha1: angle with respect to the y axis from the centre of the side at -H1 in y to the centre of the side at +H1 in y of the face at -DZ in z; h2: half-length along y of the face at +DZ; bL2: half-length along x of the side at -H2 in y of the face at +DZ in z; tl2: half-length along x of the side at +H2 in y ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTRA.html:61,Guid,Guide,61,doc/master/classTGTRA.html,https://root.cern,https://root.cern/doc/master/classTGTRA.html,1,['Guid'],['Guide']
Usability,". ROOT: TGTab Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGTab Class ReferenceGUI » Low level GUI widgets. ; A tab widget contains a set of composite frames each with a little tab with a name (like a set of folders with tabs). ; Clicking on a tab will bring the associated composite frame to the front and generate the following event: kC_COMMAND, kCM_TAB, tab id, 0. ; Definition at line 46 of file TGTab.h. Public Member Functions;  TGTab (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Create tab widget. ;  ;  ~TGTab () override;  Delete tab widget. ;  ; virtual TGCompositeFrame * AddTab (const char *text);  Add a tab to the tab widget. ;  ; virtual void AddTab (const char *text, TGCompositeFrame *cf);  Add a tab to the tab widget and fill it with given TGCompositeFrame. ;  ; virtual TGCompositeFrame * AddTab (TGString *text);  Add a tab to the tab widget. ;  ; virtual void AddTab (TGString *text, TGCompositeFrame *cf);  Add a tab to the tab widget and fill it with given TGCompositeFrame. ;  ; virtual void CloseTab (Int_t id);  ; void DrawBorder () override;  Draw frame border. ;  ; TGCompositeFrame * GetContainer () const;  ; Int_t GetCurrent () const;  ; TGCompositeFrame * GetCurrentContainer () const;  ; TGTabElement * GetCurrentTab () const;  ; TGLayoutManager * GetLayoutManager () const override;  Return layout manager. ;  ; Int_t GetNumberOfTabs () const;  Return number of tabs. ;  ; TGCompositeFrame * GetTabContainer (const char *name) const;  Return the tab container of tab with string name. ;  ; TGCompositeFrame * GetTabContainer (Int_t tabIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTab.html:61,Guid,Guide,61,doc/master/classTGTab.html,https://root.cern,https://root.cern/doc/master/classTGTab.html,1,['Guid'],['Guide']
Usability,". ROOT: TGTabElement Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGTabElement Class ReferenceGUI » Low level GUI widgets. ; Service classes of the tab widget. ; Definition at line 117 of file TGTab.h. Public Member Functions;  TGTabElement (const TGWindow *p=nullptr, TGString *text=nullptr, UInt_t w=1, UInt_t h=1, GContext_t norm=TGTab::GetDefaultGC()(), FontStruct_t font=TGTab::GetDefaultFontStruct(), UInt_t options=kRaisedFrame, Pixel_t back=GetDefaultFrameBackground());  Create a tab element. Text is adopted by tab element. ;  ;  ~TGTabElement () override;  Delete tab element. ;  ; void DrawBorder () override;  Draw little tab element. ;  ; TGDimension GetDefaultSize () const override;  Return default size of tab element. ;  ; const char * GetString () const;  ; const TGString * GetText () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle button event in the tab widget. ;  ; TClass * IsA () const override;  ; Bool_t IsActive () const override;  ; Bool_t IsCloseShown () const;  ; Bool_t IsEnabled () const;  ; virtual void SetActive (Bool_t on=kTRUE);  ; void SetEditDisabled (UInt_t) override;  ; virtual void SetEnabled (Bool_t on=kTRUE);  ; void SetText (TGString *text);  Set new tab text. ;  ; virtual void ShowClose (Bool_t on=kTRUE);  Show/hide close icon on the tab element, then apply layout to compute correct elements size. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTabElement.html:68,Guid,Guide,68,doc/master/classTGTabElement.html,https://root.cern,https://root.cern/doc/master/classTGTabElement.html,1,['Guid'],['Guide']
Usability,". ROOT: TGTabLayout Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGTabLayout Class ReferenceGUI » Low level GUI widgets. ; Service classes of the tab widget. ; Definition at line 24 of file TGTab.h. Public Member Functions;  TGTabLayout (TGTab *main);  Create a tab layout manager. ;  ; TGDimension GetDefaultSize () const override;  Get default size of tab widget. ;  ; TClass * IsA () const override;  ; void Layout () override;  Layout the tab widget. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLayoutManager;  TGLayoutManager ();  ; virtual Bool_t IsModified () const;  ; virtual void SetDefaultHeight (UInt_t);  ; virtual void SetDefaultWidth (UInt_t);  ; virtual void SetModified (Bool_t flag=kTRUE);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTabLayout.html:67,Guid,Guide,67,doc/master/classTGTabLayout.html,https://root.cern,https://root.cern/doc/master/classTGTabLayout.html,1,['Guid'],['Guide']
Usability,". ROOT: TGTable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGTable Class ReferenceGUI » Low level GUI widgets. ; Create an array to hold a bunch of numbers. ; TGTable implements a table widget to display data in rows and columns. The data is supplied by a TVirtualTableInterface.; The table is a TGCanvas to make use of already available viewport functionality and drawing optimizations.; The top left cell in a table has coordinates (0,0); A TObjArray is used internally to ensure little overhead and fast acces to cells.; If the data source has more rows than the default 50 rows of cells in memory, buttons at the bottom of the table can be used to load the next or previous chunk of data.; At the top of the table, a frame is visible that shows the coordinates of the top left cell currently in memmory in row,column. The amount of rows and columns is also shown in rows x columns. These values can be edited to move to a different area of the data source or to resize the table. Tab will switch between the enties, return will move to the currently entered range and resize the table if needed. Clicking the goto button has the same effect.; A TGTable is created by first creating an appropriate TVirtualTableInterface from the data that needs visualization and then creating the TGTable using this interface.; A simple macro to use a TGTable with a TGSimpleTableInterface:; {; Int_t i = 0, j = 0;; UInt_t nrows = 6, ncolumns = 5;; Double_t** data = new Double_t*[nrows];; for (i = 0; i < nrows; i++) {; data[i] = new Double_t[ncolumns];; for (j = 0; j < ncolumns; j++) {; data[i][j] = 10 * i + j;; }; }; ; // Create a main frame to contain the table; TGMainFrame* mainframe = new TGMainFrame(0, 400, 200);; mainframe->SetCleanup(kDeepCleanup) ;; ; // Create an interface; TGSimple",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTable.html:63,Guid,Guide,63,doc/master/classTGTable.html,https://root.cern,https://root.cern/doc/master/classTGTable.html,1,['Guid'],['Guide']
Usability,". ROOT: TGTableCell Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Friends |; List of all members ; TGTableCell Class ReferenceGUI » Low level GUI widgets. ; TGTableCell is the class that represents a single cell in a TGTable. ; This class is for internal use in TGTable only. ; Definition at line 24 of file TGTableCell.h. Public Member Functions;  TGTableCell (const TGWindow *p, TGTable *table, const char *label, UInt_t row=0, UInt_t column=0, UInt_t width=80, UInt_t height=25, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0, Bool_t resize=kTRUE);  TGTableCell constructor. ;  ;  TGTableCell (const TGWindow *p=nullptr, TGTable *table=nullptr, TGString *label=nullptr, UInt_t row=0, UInt_t column=0, UInt_t width=80, UInt_t height=25, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0, Bool_t resize=kTRUE);  TGTableCell constructor. ;  ;  ~TGTableCell () override;  TGTableCell destructor. ;  ; void DrawCopy (Handle_t id, Int_t x, Int_t y) override;  Draw list view item in other window. ;  ; virtual UInt_t GetColumn () const;  ; virtual UInt_t GetHeight () const;  ; virtual TGPicture * GetImage () const;  ; virtual TGString * GetLabel () const;  ; virtual UInt_t GetRow () const;  ; virtual TGDimension GetSize () const;  ; virtual Int_t GetTextJustify () const;  ; virtual UInt_t GetWidth () const;  ; TClass * IsA () const override;  ; virtual void Select ();  Select this TGTableCell. ;  ; virtual void SelectColumn ();  Select the column that this TGTableCell belongs to. ;  ; virtual void SelectRow ();  Select the row that this TGTableCell belongs to. ;  ; virtual void SetFont (const char *fontName);  Changes text font specified by name. ;  ; virtual void SetFont (FontStruct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTableCell.html:67,Guid,Guide,67,doc/master/classTGTableCell.html,https://root.cern,https://root.cern/doc/master/classTGTableCell.html,1,['Guid'],['Guide']
Usability,". ROOT: TGTableFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGTableFrame Class ReferenceGUI » Low level GUI widgets. ; TGTableFrame contains a composite frame that uses a TGMatrixLayout to Layout the frames it contains. ; Internal use in TGTable only. ; Definition at line 17 of file TGTableContainer.h. Public Member Functions;  TGTableFrame (const TGWindow *p, UInt_t nrows, UInt_t ncolumns);  Create the container used to view TGTableCells. p. ;  ;  ~TGTableFrame () override;  ; virtual void DrawRegion (Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw a region of container in viewport. ;  ; TGFrame * GetFrame () const;  ; void HandleMouseWheel (Event_t *event);  Handle mouse wheel to scroll. ;  ; TClass * IsA () const override;  ; void SetCanvas (TGCanvas *canvas);  ; void Streamer (TBuffer &) override;  Stream an object of class TQObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class signal lists from class cls and all its base-classes. ;  ; Bool_t Connect (const char *signal, const char *receiver_class, void *receiver, const char *slot);  Non-static method is used to connect from the signal of this object to the receiver slot. ;  ; virtual void Connected (const char *);  ; virtual void Destroyed ();  ; Bool_t Disconnect (const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal of this object from slot of receiver. ;  ; virtual void Disconnected (const char *);  ; void Emit (const char *signal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTableFrame.html:68,Guid,Guide,68,doc/master/classTGTableFrame.html,https://root.cern,https://root.cern/doc/master/classTGTableFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TGTableHeader Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGTableHeader Class ReferenceGUI » Low level GUI widgets. ; TGTableHeader is the class that implements a header for a row or column. ; Interactivity on a per column or row basis is implemented using this header.; TGTableHeader is for internal use in TGTable only. ; Definition at line 24 of file TGTableHeader.h. Public Member Functions;  TGTableHeader (const TGWindow *p, TGTable *table, const char *label, UInt_t position, EHeaderType type=kColumnHeader, UInt_t width=80, UInt_t height=25, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  TGTableHeader constructor. ;  ;  TGTableHeader (const TGWindow *p=nullptr, TGTable *table=nullptr, TGString *label=nullptr, UInt_t position=0, EHeaderType type=kColumnHeader, UInt_t width=80, UInt_t height=25, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  TGTableHeader constructor. ;  ;  ~TGTableHeader () override;  TGTableHeader destructor. ;  ; virtual EHeaderType GetType ();  ; TClass * IsA () const override;  ; void Resize (TGDimension newsize) override;  Resize the TGTableHeader. ;  ; void Resize (UInt_t width, UInt_t height) override;  Resize the TGTableHeader. ;  ; virtual void SetDefaultLabel ();  Set the label of the TGTableHeader to the default label, ""Row #"" or ""Col #"". ;  ; void SetHeight (UInt_t height) override;  Resize the TGTableHeader. ;  ; void SetLabel (const char *label) override;  Set the label of the TGTableHeader to label. ;  ; virtual void SetPosition (UInt_t pos);  Set the position of the TGTableHeader to pos. ;  ; void SetWidth (UInt_t width) override;  Resize the TGTableHeader. ;  ; virtual void Sort (Bool_t order=kSortAscending);  Sort the c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTableHeader.html:69,Guid,Guide,69,doc/master/classTGTableHeader.html,https://root.cern,https://root.cern/doc/master/classTGTableHeader.html,1,['Guid'],['Guide']
Usability,". ROOT: TGTableHeaderFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGTableHeaderFrame Class ReferenceGUI » Low level GUI widgets. ; TGTableHeaderFrame implements a frame used to display TGTableHeaders in a TGTable. ; Internal use in TGTable only. ; Definition at line 36 of file TGTableContainer.h. Public Member Functions;  TGTableHeaderFrame (const TGWindow *p, TGTable *table=nullptr, UInt_t w=1, UInt_t h=1, EHeaderType type=kColumnHeader, UInt_t option=0);  TGTableHeaderFrame constructor. ;  ;  ~TGTableHeaderFrame () override;  ; virtual void DrawRegion (Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw a region of container in viewport. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (Pixel_t back);  Change background color for this frame and all subframes. ;  ; virtual void Cleanup ();  Cleanup and delete all objects contained in this composite frame. ;  ; virtual TGFrameElement * FindFrameElement (TGFrame *f) const;  Find frame-element holding frame f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTableHeaderFrame.html:74,Guid,Guide,74,doc/master/classTGTableHeaderFrame.html,https://root.cern,https://root.cern/doc/master/classTGTableHeaderFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TGTableLayout Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGTableLayout Class ReferenceGUI » Low level GUI widgets. ; A layout manager, which places child frames in a table arranged in rows and columns, making it easy to align many widgets next each to other horizontally and vertically. ; It uses TGTableLayoutHints (not TGLayoutHints!!!) and works like TGMatrixLayout with the addition that:; Child frames can span more than one column/row.; Child frames can resize with the frame.; Column and row sizes are not fixed nor (optionally) homogeneous.; The number of columns and rows must be fully specified in the constructor. The gaps between all rows or columns can be specified by 'sep' parameter in the constructor. All rows and columns will have the same size (set by widest and the highest child frame) if the parameter 'homogeneous' is set to kTRUE. . Definition at line 61 of file TGTableLayout.h. Classes; struct  TableData_t;  . Public Member Functions;  TGTableLayout (TGCompositeFrame *main, UInt_t nrows, UInt_t ncols, Bool_t homogeneous=kFALSE, Int_t sep=0, Int_t hints=0);  TGTableLayout constructor. ;  ;  ~TGTableLayout () override;  TGTableLayout constructor. ;  ; TGDimension GetDefaultSize () const override;  Return default dimension of the table layout. ;  ; TClass * IsA () const override;  ; void Layout () override;  Make a table layout of all frames in the list. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTableLayout.html:69,Guid,Guide,69,doc/master/classTGTableLayout.html,https://root.cern,https://root.cern/doc/master/classTGTableLayout.html,1,['Guid'],['Guide']
Usability,". ROOT: TGTableLayoutHints Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGTableLayoutHints Class ReferenceGUI » Low level GUI widgets. ; This class describes layout hints used by the TGTableLayout class. ; It specifies the column/row division number on which to attach the child frame. This number starts from 0 and goes to #_columns/#_rows respectively (0 indicates the first row/column).; Below are described all parameters of TGTableLayoutHints constructor; attach_left - the column to the left of the widget;; attach_right - the column to the right of the widget;; attach_top - the row above the widget;; attach_bottom - the row below the widget;; hints - layout hints (combination of ELayoutHints). The next parameters determine the extra padding added around the child frame. By default these are 0.; padleft - determines the extra padding added on the left; padright - determines the extra padding added on the right; padtop - determines the extra padding added on the top; padbottom - determines the extra padding added on the bottom . Definition at line 26 of file TGTableLayout.h. Public Member Functions;  TGTableLayoutHints (UInt_t attach_left, UInt_t attach_right, UInt_t attach_top, UInt_t attach_bottom, ULong_t hints=kLHintsNormal, UInt_t padleft=0, UInt_t padright=0, UInt_t padtop=0, UInt_t padbottom=0);  ;  ~TGTableLayoutHints () override;  ; UInt_t GetAttachBottom () const;  ; UInt_t GetAttachLeft () const;  ; UInt_t GetAttachRight () const;  ; UInt_t GetAttachTop () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save layout hints as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_Stre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTableLayoutHints.html:74,Guid,Guide,74,doc/master/classTGTableLayoutHints.html,https://root.cern,https://root.cern/doc/master/classTGTableLayoutHints.html,1,['Guid'],['Guide']
Usability,". ROOT: TGTextButton Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGTextButton Class ReferenceGUI » Low level GUI widgets. ; Yield an action as soon as it is clicked. ; This buttons usually provides fast access to frequently used or critical commands. It may appear alone or placed in a group.; The action it performs can be inscribed with a meaningful tooltip set by `SetToolTipText(const char* text, Long_t delayms=400).; The text button has a label indicating the action to be taken when the button is pressed. The text can be a hot string (""&Exit"") that defines the label ""Exit"" and keyboard mnemonics Alt+E for button selection. A button label can be changed by SetText(new_label).; Selecting a text or picture button will generate the event:; kC_COMMAND, kCM_BUTTON, button id, user data. . Definition at line 142 of file TGButton.h. Public Member Functions;  TGTextButton (const TGWindow *p, const char *s, const char *cmd, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=kRaisedFrame|kDoubleBorder);  Create a text button widget and set cmd string at same time. ;  ;  TGTextButton (const TGWindow *p, TGHotString *s, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=kRaisedFrame|kDoubleBorder);  Create a text button widget. ;  ;  TGTextButton (const TGWindow *p=nullptr, const char *s=nullptr, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=kRaisedFrame|kDoubleBorder);  Create a text button widget. ;  ;  ~TGTextButton () override;  Delete a text button widget. ;  ; void ChangeText (const char *title);  ; Int_t GetBottomMargin () const;  ; TGDimension ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextButton.html:68,Guid,Guide,68,doc/master/classTGTextButton.html,https://root.cern,https://root.cern/doc/master/classTGTextButton.html,1,['Guid'],['Guide']
Usability,". ROOT: TGTextEdit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGTextEdit Class ReferenceGUI » Low level GUI widgets. ; A TGTextEdit is a specialization of TGTextView. ; It provides the text edit functionality to the static text viewing widget. For the messages supported by this widget see the TGView class. ; Definition at line 22 of file TGTextEdit.h. Public Types; enum  { ;   kM_FILE_NEW; , kM_FILE_OPEN; , kM_FILE_CLOSE; , kM_FILE_SAVE; , ;   kM_FILE_SAVEAS; , kM_FILE_PRINT; , kM_EDIT_CUT; , kM_EDIT_COPY; , ;   kM_EDIT_PASTE; , kM_EDIT_SELECTALL; , kM_SEARCH_FIND; , kM_SEARCH_FINDAGAIN; , ;   kM_SEARCH_GOTO. };  ; enum  EInsertMode { kInsert; , kReplace; };  ;  Public Types inherited from TGView; enum  { kNoHSB = (1ULL << ( 0 )); , kNoVSB = (1ULL << ( 1 )); };  ; enum  { kHorizontal = 0; , kVertical = 1; };  ;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEdit.html:66,Guid,Guide,66,doc/master/classTGTextEdit.html,https://root.cern,https://root.cern/doc/master/classTGTextEdit.html,1,['Guid'],['Guide']
Usability,". ROOT: TGTextEditCommand Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; List of all members ; TGTextEditCommand Class Reference. . Definition at line 81 of file TGTextEdit.cxx. Public Member Functions;  TGTextEditCommand (TGTextEdit *te);  ; void SetPos (TGLongPosition pos);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEditCommand.html:73,Guid,Guide,73,doc/master/classTGTextEditCommand.html,https://root.cern,https://root.cern/doc/master/classTGTextEditCommand.html,1,['Guid'],['Guide']
Usability,". ROOT: TGTextEditHist Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TGTextEditHist Class Reference. . Definition at line 62 of file TGTextEdit.cxx. Public Member Functions;  TGTextEditHist ();  ;  ~TGTextEditHist () override;  ; Bool_t Notify () override;  'Notify' all objects in this collection. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; virtual void AddAfter (TObjLink *after, TObject *obj);  Insert object after the specified ObjLink object. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Insert object at position idx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; virtual void AddBefore (TObjLink *before, TObject *obj);  Insert object before the specified ObjLink object. ;  ; void AddFirst (TObject *obj) override;  Add object at the beginning of the list. ;  ; virtual void AddFirst (TObject *obj, Option_t *opt);  Add object at the beginning of the list and also store option. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; virtual void AddLast (TObject *obj, Option_t *opt);  Add object at the end of the list and also store option. ;  ; TObject * After (const TObject *obj) const override;  Returns the object after object obj. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * Before (const TObject *obj) const override;  Returns the object before object obj. ;  ; void Clear",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEditHist.html:70,Guid,Guide,70,doc/master/classTGTextEditHist.html,https://root.cern,https://root.cern/doc/master/classTGTextEditHist.html,1,['Guid'],['Guide']
Usability,". ROOT: TGTextEditor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGTextEditor Class ReferenceGUI » Low level GUI widgets. ; A simple text editor that uses the TGTextEdit widget. ; It provides all functionalities of TGTextEdit as copy, paste, cut, search, go to a given line number. In addition, it provides the possibilities for compiling, executing or interrupting a running macro.; This class can be used in following ways:; with file name as argument: new TGTextEditor(""hsimple.C"");; with a TMacro* as argument: TMacro *macro = new TMacro(""hsimple.C""); new TGTextEditor(macro);. Basic Features:; New Document; To create a new blank document, select File menu / New, or click the New toolbar button. It will create a new instance of TGTextEditor.; Open/Save File; To open a file, select File menu / Open or click on the Open toolbar button. This will bring up the standard File Dialog for opening files. If the current document has not been saved yet, you will be asked either to save or abandon the changes. To save the file using the same name, select File menu / Save or the toolbar Save button. To change the file name use File menu / Save As... or corresponding SaveAs button on the toolbar.; Text Selection; You can move the cursor by simply clicking on the desired location with the left mouse button. To highlight some text, press the mouse and drag the mouse while holding the left button pressed. To select a word, double-click on it; to select the text line - triple-click on it; to select all do quadruple-click.; Cut, Copy, Paste; After selecting some text, you can cut or copy it to the clipboard. A subsequent paste operation will insert the contents of the clipboard at the current cursor location.; Text Search; The editor uses a standard Search dialog. You can specif",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEditor.html:68,Guid,Guide,68,doc/master/classTGTextEditor.html,https://root.cern,https://root.cern/doc/master/classTGTextEditor.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TGTextEntry Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGTextEntry Class ReferenceGUI » Low level GUI widgets. ; A TGTextEntry is a one line text input widget. ; Changing text in the text entry widget will generate the event: kC_TEXTENTRY, kTE_TEXTCHANGED, widget id, 0. Hitting the enter key will generate: kC_TEXTENTRY, kTE_ENTER, widget id, 0. Hitting the tab key will generate: kC_TEXTENTRY, kTE_TAB, widget id, 0.; This widget has the behaviour e.g. of the ""Location"" field in web browsers. That includes handling Control/Shift key modifiers and scrolling the text.; enum TGTextEntry::EEchoMode; This enum type describes the ways in which TGTextEntry can display its contents. The currently defined values are:. kNormal - display characters as they are entered. This is the default. . kNoEcho - do not display anything. . kPassword - display asterisks instead of the characters actually entered. . See also SetEchoMode(), GetEchoMode().; enum TGTextEntry::EInsertMode; This enum type describes the way how typed characters are inserted in the text entry. This mode is switched by ""Insert"" key. kInsert - typed character are inserted (cursor has shape of short line). . kReplace - typed characters substitute already typed ones (cursor has the shape of filled rectangle). . enum TGWidget::ETextJustification; This enum type (defined in TGWidget.h) describes the text alignment modes. These modes are valid until text fits the frame width. kTextLeft - left-side text alignment . kTextRight - right-side text alignment . kTextCenterX - center text alignment . The key press event handler converts a key press to some line editor action. Here are the default key bi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEntry.html:67,Guid,Guide,67,doc/master/classTGTextEntry.html,https://root.cern,https://root.cern/doc/master/classTGTextEntry.html,1,['Guid'],['Guide']
Usability,". ROOT: TGTextLBEntry Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGTextLBEntry Class ReferenceGUI » Low level GUI widgets. ; Text string listbox entries. ; A TGTextLBEntry is for TGListBox internal use. ; Definition at line 48 of file TGListBox.h. Public Member Functions;  TGTextLBEntry (const TGWindow *p=nullptr, TGString *s=nullptr, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t options=kHorizontalFrame, Pixel_t back=GetWhitePixel());  Create a text listbox entry. The TGString is adopted. ;  ;  ~TGTextLBEntry () override;  Delete text listbox entry. ;  ; void DrawCopy (Handle_t id, Int_t x, Int_t y) override;  Draw text listbox entry on window/pixmap. ;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; FontStruct_t GetFontStruct () const;  ; GContext_t GetNormGC () const;  ; const TGString * GetText () const;  ; const char * GetTitle () const override;  Returns title of object. ;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save a list box entry widget as a C++ statement(s) on output stream out. ;  ; void SetText (TGString *new_text);  Set or change text in text entry. ;  ; virtual void SetTitle (const char *text);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update (TGLBEntry *e) override;  ;  Public Member Functions inherited from TGLBEntry;  TGLBEntry (const TGWindow *p=nullptr, Int_t id=-1, UInt_t options=kHorizontalFrame, Pixel_t back=GetWhitePixel());  Base class entry constructor. ;  ; void Activate (Bool_t a) override;  Togg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextLBEntry.html:69,Guid,Guide,69,doc/master/classTGTextLBEntry.html,https://root.cern,https://root.cern/doc/master/classTGTextLBEntry.html,1,['Guid'],['Guide']
Usability,". ROOT: TGTextLayout Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TGTextLayout Class ReferenceGUI » Low level GUI widgets. ; Is used to keep track of string measurement information when using the text layout facilities. ; It can be displayed with respect to any origin. ; Definition at line 106 of file TGFont.h. Public Member Functions;  TGTextLayout ();  ;  ~TGTextLayout () override;  destructor ;  ; Int_t CharBbox (Int_t index, Int_t *x, Int_t *y, Int_t *w, Int_t *h) const;  Use the information in the TGTextLayout token to return the bounding box for the character specified by index. ;  ; Int_t DistanceToText (Int_t x, Int_t y) const;  Computes the distance in pixels from the given point to the given text layout. ;  ; void DrawText (Drawable_t dst, GContext_t gc, Int_t x, Int_t y, Int_t firstChar, Int_t lastChar) const;  Use the information in the TGTextLayout object to display a multi-line, justified string of text. ;  ; Int_t IntersectText (Int_t x, Int_t y, Int_t w, Int_t h) const;  Determines whether a text layout lies entirely inside, entirely outside, or overlaps a given rectangle. ;  ; TClass * IsA () const override;  ; Int_t PointToChar (Int_t x, Int_t y) const;  Use the information in the TGTextLayout token to determine the character closest to the given point. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void ToPostscript (TString *dst) const;  Outputs the contents of a text layout in Postscript format. ;  ; void UnderlineChar (Drawable_t dst, GContext_t gc, Int_t x, Int_t y, Int_t underline) const;  Use the information in the TGTextLayout object to display an underline below an individual character. ;  ;  Public Member Functions inheri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextLayout.html:68,Guid,Guide,68,doc/master/classTGTextLayout.html,https://root.cern,https://root.cern/doc/master/classTGTextLayout.html,1,['Guid'],['Guide']
Usability,". ROOT: TGTextView Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGTextView Class ReferenceGUI » Low level GUI widgets. ; A TGTextView is a text viewer widget. ; It is a specialization of TGView. It uses the TGText class (which contains all text manipulation code, i.e. loading a file in memory, changing, removing lines, etc.). Use a TGTextView to view non-editable text. For supported messages see TGView. ; Definition at line 22 of file TGTextView.h. Public Member Functions;  TGTextView (const TGWindow *parent, UInt_t w, UInt_t h, const char *string, Int_t id=-1, UInt_t sboptions=0, Pixel_t back=GetWhitePixel());  Create a text view widget. ;  ;  TGTextView (const TGWindow *parent, UInt_t w, UInt_t h, TGText *text, Int_t id=-1, UInt_t sboptions=0, Pixel_t back=GetWhitePixel());  Create a text view widget. ;  ;  TGTextView (const TGWindow *parent=nullptr, UInt_t w=1, UInt_t h=1, Int_t id=-1, UInt_t sboptions=0, Pixel_t back=GetWhitePixel());  Create a text view widget. ;  ;  ~TGTextView () override;  Cleanup text view widget. ;  ; virtual void AddLine (const char *string);  Add a line of text to the view widget. ;  ; virtual void AddLineFast (const char *string);  Add a line of text to the view widget. ;  ; virtual void AddText (TGText *text);  Add text to the view widget. ;  ; virtual void AdjustWidth ();  Adjust widget width to longest line. ;  ; void Clear (Option_t *="""") override;  Clear text view widget. ;  ; virtual void Clicked (const char *word);  ; virtual Bool_t Copy ();  Copy selected text to clipboard. ;  ; virtual void DataChanged ();  ; virtual void DataDropped (const char *fname);  ; virtual void DoubleClicked (const char *word);  ; TGText * GetText ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextView.html:66,Guid,Guide,66,doc/master/classTGTextView.html,https://root.cern,https://root.cern/doc/master/classTGTextView.html,1,['Guid'],['Guide']
Usability,". ROOT: TGTextViewostream Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGTextViewostream Class Reference. . Definition at line 43 of file TGTextViewStream.h. Public Member Functions;  TGTextViewostream (const TGWindow *parent, UInt_t w, UInt_t h, const char *string, Int_t id, UInt_t sboptions, ULong_t back);  TGTextViewostream constructor. ;  ;  TGTextViewostream (const TGWindow *parent, UInt_t w, UInt_t h, TGText *text, Int_t id, UInt_t sboptions, ULong_t back);  TGTextViewostream constructor. ;  ;  TGTextViewostream (const TGWindow *parent=nullptr, UInt_t w=1, UInt_t h=1, Int_t id=-1, UInt_t sboptions=0, Pixel_t back=TGTextView::GetWhitePixel());  TGTextViewostream constructor. ;  ;  ~TGTextViewostream () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGTextView;  TGTextView (const TGWindow *parent, UInt_t w, UInt_t h, const char *string, Int_t id=-1, UInt_t sboptions=0, Pixel_t back=GetWhitePixel());  Create a text view widget. ;  ;  TGTextView (const TGWindow *parent, UInt_t w, UInt_t h, TGText *text, Int_t id=-1, UInt_t sboptions=0, Pixel_t back=GetWhitePixel());  Create a text view widget. ;  ;  TGTextView (const TGWindow *parent=nullptr, UInt_t w=1, UInt_t h=1, Int_t id=-1, UInt_t sboptions=0, Pixel_t back=GetWhitePixel());  Create a text view widget. ;  ;  ~TGTextView () override;  Cleanup text view widget. ;  ; virtual void AddLine (const char *string);  Add a line of text to the view widget. ;  ; virtual void AddLineFast (const char *string);  Add a line of text to the view widget. ;  ; virtual void AddText (TGText *text);  Add text to the view widget. ;  ; virtual void AdjustWidth ();  Adjust widg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextViewostream.html:73,Guid,Guide,73,doc/master/classTGTextViewostream.html,https://root.cern,https://root.cern/doc/master/classTGTextViewostream.html,1,['Guid'],['Guide']
Usability,". ROOT: TGTileLayout Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGTileLayout Class ReferenceGUI » Low level GUI widgets. ; This is a layout manager for the TGListView widget. ; Definition at line 303 of file TGLayout.h. Public Member Functions;  TGTileLayout (TGCompositeFrame *main, Int_t sep=0);  Create a tile layout manager. ;  ; TGDimension GetDefaultSize () const override;  Return default dimension of the tile layout. ;  ; TClass * IsA () const override;  ; Bool_t IsModified () const override;  ; void Layout () override;  Make a tile layout of all frames in the list. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save tile layout manager as a C++ statement(s) on output stream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLayoutManager;  TGLayoutManager ();  ; virtual void SetDefaultHeight (UInt_t);  ; virtual void SetDefaultWidth (UInt_t);  ; virtual void SetModified (Bool_t flag=kTRUE);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTileLayout.html:68,Guid,Guide,68,doc/master/classTGTileLayout.html,https://root.cern,https://root.cern/doc/master/classTGTileLayout.html,1,['Guid'],['Guide']
Usability,". ROOT: TGToolBar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGToolBar Class ReferenceGUI » Low level GUI widgets. ; A toolbar is a composite frame that contains TGPictureButtons. ; Often used in combination with a TGHorizontal3DLine. ; Definition at line 33 of file TGToolBar.h. Public Member Functions;  TGToolBar (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kHorizontalFrame, Pixel_t back=GetDefaultFrameBackground());  ;  ~TGToolBar () override;  Delete toolbar and its buttons and layout hints. ;  ; virtual TGButton * AddButton (const TGWindow *w, TGPictureButton *button, Int_t spacing=0);  Add button to toolbar. ;  ; virtual TGButton * AddButton (const TGWindow *w, ToolBarData_t *button, Int_t spacing=0);  Add button to toolbar. ;  ; virtual void ButtonClicked ();  This slot is activated when one of the buttons in the group emits the Clicked() signal. ;  ; virtual void ButtonPressed ();  This slot is activated when one of the buttons in the group emits the Pressed() signal. ;  ; virtual void ButtonReleased ();  This slot is activated when one of the buttons in the group emits the Released() signal. ;  ; virtual void ChangeIcon (ToolBarData_t *button, const char *new_icon);  Change the icon of a toolbar button. ;  ; void Cleanup () override;  Cleanup and delete all objects contained in this composite frame. ;  ; virtual void Clicked (Int_t id);  ; virtual TGButton * GetButton (Int_t id) const;  Finds and returns a pointer to the button with the specified identifier id. ;  ; virtual Longptr_t GetId (TGButton *button) const;  Finds and returns the id of the button. ;  ; TClass * IsA () const override;  ; virtual void Pressed (Int_t id);  ; virtual void Released (Int_t id);  ; void SavePrimitive (std::ostream &out, Option_t *option="""") ove",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGToolBar.html:65,Guid,Guide,65,doc/master/classTGToolBar.html,https://root.cern,https://root.cern/doc/master/classTGToolBar.html,1,['Guid'],['Guide']
Usability,". ROOT: TGToolTip Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGToolTip Class ReferenceGUI » Low level GUI widgets. ; A tooltip can be a one or multiple lines help text that is displayed in a window when the mouse cursor overs a widget, without clicking it. ; A small box appears with supplementary information regarding the item being hovered over.; A multiline tooltip can be created by inserting a new-line character \n in the tooltip string. For example:; fButton->SetToolTipText(""Go to the ROOT page\n (http://root.cern.ch). Definition at line 24 of file TGToolTip.h. Public Member Functions;  TGToolTip (const TBox *b, const char *text, Long_t delayms);  Create a tool tip in the parent window gClient->GetRoot(), box is the area to which the tool tip is associated, text is the tool tip one-liner and delayms is the delay in ms before the tool tip is shown. ;  ;  TGToolTip (const TGWindow *p, const TBox *b, const char *text, Long_t delayms);  Create a tool tip. ;  ;  TGToolTip (const TGWindow *p=nullptr, const TGFrame *f=nullptr, const char *text=nullptr, Long_t delayms=350);  Create a tool tip. ;  ;  TGToolTip (Int_t x, Int_t y, const char *text, Long_t delayms);  Create a tool tip on global coordinates x, y. ;  ;  ~TGToolTip () override;  Delete a tool tip object. ;  ; void DrawBorder () override;  Draw border of tool tip window. ;  ; const TGString * GetText () const;  Get the tool tip text. ;  ; Bool_t HandleTimer (TTimer *t) override;  If tool tip delay timer times out show tool tip window. ;  ; void Hide ();  Hide tool tip window. ;  ; TClass * IsA () const override;  ; void Reset ();  Reset tool tip popup delay timer. ;  ; void Reset (const TVirtualPad *parent);  Reset tool tip popup delay timer. ;  ; void SetDelay (Long_t delayms);  Set delay in milliseconds",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGToolTip.html:65,Guid,Guide,65,doc/master/classTGToolTip.html,https://root.cern,https://root.cern/doc/master/classTGToolTip.html,1,['Guid'],['Guide']
Usability,". ROOT: TGTransientFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGTransientFrame Class ReferenceGUI » Low level GUI widgets. ; Defines transient windows that typically are used for dialogs windows. ; Definition at line 498 of file TGFrame.h. Public Types; enum  EPlacement { ;   kCenter; , kLeft; , kRight; , kTop; , ;   kBottom; , kTopLeft; , kTopRight; , kBottomLeft; , ;   kBottomRight. };  ;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTransientFrame.html:72,Guid,Guide,72,doc/master/classTGTransientFrame.html,https://root.cern,https://root.cern/doc/master/classTGTransientFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TGTreeLBEntry Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TGTreeLBEntry Class Reference. . Definition at line 25 of file TGFSComboBox.h. Public Member Functions;  TGTreeLBEntry (const TGWindow *p=nullptr, TGString *text=nullptr, const TGPicture *pic=nullptr, Int_t id=-1, TGString *path=nullptr, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t options=kHorizontalFrame, Pixel_t back=GetWhitePixel());  Create a tree (i.e. ;  ;  ~TGTreeLBEntry () override;  Delete tree listbox entry. ;  ; void Activate (Bool_t a) override;  Make entry active (highlight picture). ;  ; void DrawCopy (Handle_t id, Int_t x, Int_t y) override;  Redraw the tree listbox entry on pixmap/window. ;  ; TGDimension GetDefaultSize () const override;  Return default size of tree listbox entry. ;  ; const TGString * GetPath () const;  ; const TGPicture * GetPicture () const;  ; const TGString * GetText () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update (TGLBEntry *e) override;  Update text and picture of a listbox entry. ;  ;  Public Member Functions inherited from TGLBEntry;  TGLBEntry (const TGWindow *p=nullptr, Int_t id=-1, UInt_t options=kHorizontalFrame, Pixel_t back=GetWhitePixel());  Base class entry constructor. ;  ; Int_t EntryId () const;  ; Bool_t IsActive () const override;  ; void SetBackgroundColor (Pixel_t col) override;  Set background color (override from TGWindow base class). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Toggle ();  Toggle active state of listbox entry. ;  ;  Public Member Functions inherited from TGFr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTreeLBEntry.html:69,Guid,Guide,69,doc/master/classTGTreeLBEntry.html,https://root.cern,https://root.cern/doc/master/classTGTreeLBEntry.html,1,['Guid'],['Guide']
Usability,". ROOT: TGTripleHSlider Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGTripleHSlider Class ReferenceGUI » Low level GUI widgets. ; TripleSlider inherit from DoubleSlider widgets and allow easy selection of a min, max and pointer value out of a range. ; The pointer position can be constrained to edges of slider and / or can be relative to the slider position.; To change the min value press the mouse near to the left / bottom edge of the slider. To change the max value press the mouse near to the right / top edge of the slider. To change both values simultaneously press the mouse near to the center of the slider. To change pointer value press the mouse on the pointer and drag it to the desired position; Dragging the slider will generate the event:; kC_HSLIDER, kSL_POS, slider id, 0. Pressing the mouse will generate the event:; kC_HSLIDER, kSL_PRESS, slider id, 0. Releasing the mouse will generate the event:; kC_HSLIDER, kSL_RELEASE, slider id, 0. Moving the pointer will generate the event:; kC_HSLIDER, kSL_POINTER, slider id, 0. Use the functions GetMinPosition(), GetMaxPosition() and GetPosition() to retrieve the position of the slider. Use the function GetPointerPosition() to retrieve the position of the pointer ; Definition at line 73 of file TGTripleSlider.h. Public Member Functions;  TGTripleHSlider (const TGWindow *p=nullptr, UInt_t w=1, UInt_t type=1, Int_t id=-1, UInt_t options=kHorizontalFrame, Pixel_t back=GetDefaultFrameBackground(), Bool_t reversed=kFALSE, Bool_t mark_ends=kFALSE, Bool_t constrained=kTRUE, Bool_t relative=kFALSE);  Create horizontal slider widget. ;  ;  ~TGTripleHSlider () override;  Delete a horizontal slider widget. ;  ; virtual void DrawPointer ();  Draw slider pointer. ;  ; virtual Float_t GetPointerPosition () const;  ; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTripleHSlider.html:71,Guid,Guide,71,doc/master/classTGTripleHSlider.html,https://root.cern,https://root.cern/doc/master/classTGTripleHSlider.html,1,['Guid'],['Guide']
Usability,". ROOT: TGTripleVSlider Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGTripleVSlider Class ReferenceGUI » Low level GUI widgets. ; TripleSlider inherit from DoubleSlider widgets and allow easy selection of a min, max and pointer value out of a range. ; The pointer position can be constrained to edges of slider and / or can be relative to the slider position.; To change the min value press the mouse near to the left / bottom edge of the slider. To change the max value press the mouse near to the right / top edge of the slider. To change both values simultaneously press the mouse near to the center of the slider. To change pointer value press the mouse on the pointer and drag it to the desired position; Dragging the slider will generate the event:; kC_VSLIDER, kSL_POS, slider id, 0. Pressing the mouse will generate the event:; kC_VSLIDER, kSL_PRESS, slider id, 0. Releasing the mouse will generate the event:; kC_VSLIDER, kSL_RELEASE, slider id, 0. Moving the pointer will generate the event:; kC_VSLIDER, kSL_POINTER, slider id, 0. Use the functions GetMinPosition(), GetMaxPosition() and GetPosition() to retrieve the position of the slider. Use the function GetPointerPosition() to retrieve the position of the pointer ; Definition at line 20 of file TGTripleSlider.h. Public Member Functions;  TGTripleVSlider (const TGWindow *p=nullptr, UInt_t h=1, UInt_t type=1, Int_t id=-1, UInt_t options=kVerticalFrame, Pixel_t back=GetDefaultFrameBackground(), Bool_t reversed=kFALSE, Bool_t mark_ends=kFALSE, Bool_t constrained=kTRUE, Bool_t relative=kFALSE);  Create a vertical slider widget. ;  ;  ~TGTripleVSlider () override;  Delete vertical slider widget. ;  ; virtual void DrawPointer ();  Draw slider pointer. ;  ; virtual Float_t GetPointerPosition () const;  ; virtual Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTripleVSlider.html:71,Guid,Guide,71,doc/master/classTGTripleVSlider.html,https://root.cern,https://root.cern/doc/master/classTGTripleVSlider.html,1,['Guid'],['Guide']
Usability,". ROOT: TGUndockedFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGUndockedFrame Class Reference. . Definition at line 62 of file TGDockableFrame.h. Public Member Functions;  TGUndockedFrame (const TGWindow *p=nullptr, TGDockableFrame *dockable=nullptr);  Create the undocked (transient) frame. ;  ;  ~TGUndockedFrame () override;  Delete undocked frame. Puts back dockable frame in its original container. ;  ; void CloseWindow () override;  Close undocked frame (called via WM close button). ;  ; void FixSize ();  Fix the size of the undocked frame so it cannot be changed via the WM. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a transient frame widget as a C++ statement(s) on output stream out. ;  ; void SaveSource (const char *filename=""Rootdlog.C"", Option_t *option="""") override;  Save the GUI transient frame widget in a C++ macro file. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMainFrame () override;  TGMainFrame destructor. ;  ; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGUndockedFrame.html:71,Guid,Guide,71,doc/master/classTGUndockedFrame.html,https://root.cern,https://root.cern/doc/master/classTGUndockedFrame.html,5,"['Guid', 'undo']","['Guide', 'undocked']"
Usability,". ROOT: TGUnknownWindowHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGUnknownWindowHandler Class ReferenceabstractGUI » Low level GUI widgets. ; Handle events for windows that are not part of the native ROOT GUI. ; Typically windows created by Xt or Motif. ; Definition at line 141 of file TGWindow.h. Public Member Functions;  TGUnknownWindowHandler ();  ;  ~TGUnknownWindowHandler () override;  ; virtual Bool_t HandleEvent (Event_t *)=0;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGUnknownWindowHandler.html:78,Guid,Guide,78,doc/master/classTGUnknownWindowHandler.html,https://root.cern,https://root.cern/doc/master/classTGUnknownWindowHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TGVButtonGroup Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGVButtonGroup Class ReferenceGUI » Low level GUI widgets. ; Organizes TGButton widgets in a group with one vertical column. ; TGVButtonGroup is a convenience class that offers a thin layer on top of TGButtonGroup. It inherits from TGButtonGroup. ; Definition at line 94 of file TGButtonGroup.h. Public Member Functions;  TGVButtonGroup (const TGWindow *parent, const TString &title="""", GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), Pixel_t back=GetDefaultFrameBackground());  ;  ~TGVButtonGroup () override;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a button group widget as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGButtonGroup;  TGButtonGroup (const TGWindow *parent, UInt_t r, UInt_t c, Int_t s=0, Int_t h=0, const TString &title="""", GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), Pixel_t back=GetDefaultFrameBackground());  Constructor. ;  ;  TGButtonGroup (const TGWindow *parent=nullptr, const TString &title="""", UInt_t options=kChildFrame|kVerticalFrame, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), Pixel_t back=GetDefaultFrameBackground());  Constructor. Layout 1 row or 1 column. ;  ;  ~TGButtonGroup () override;  Destructor, we do not delete the buttons. ;  ; virtual void ButtonClicked ();  This slot is activated when one of the buttons in the group emits the Clicked() signal. ;  ; virtual void ButtonPressed ();  This slot is activated when one of the buttons in the group emits the Pressed() signal. ;  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGVButtonGroup.html:70,Guid,Guide,70,doc/master/classTGVButtonGroup.html,https://root.cern,https://root.cern/doc/master/classTGVButtonGroup.html,1,['Guid'],['Guide']
Usability,". ROOT: TGVFileSplitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; TGVFileSplitter Class Reference. . Definition at line 126 of file TGSplitter.h. Public Member Functions;  TGVFileSplitter (const TGWindow *p=nullptr, UInt_t w=4, UInt_t h=4, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  fSplitterPic = fClient->GetPicture(""filesplitterv.xpm""); ;  ;  ~TGVFileSplitter () override;  if (fSplitterPic) fClient->FreePicture(fSplitterPic); ;  ; void ButtonPressed ();  Emit ButtonPressed() signal. ;  ; void ButtonReleased ();  Emit ButtonReleased() signal. ;  ; void DoubleClicked (TGVFileSplitter *frame);  Emit DoubleClicked() signal. ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event in vertical splitter. ;  ; Bool_t HandleDoubleClick (Event_t *) override;  Handle double click mouse event in splitter. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion event in vertical splitter. ;  ; TClass * IsA () const override;  ; void LayoutHeader (TGFrame *f);  Emit LayoutFeader() signal. ;  ; void LayoutListView ();  Emit LayoutListView() signal. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a splitter widget as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGVSplitter;  TGVSplitter (const TGWindow *p, UInt_t w, UInt_t h, Bool_t external);  Create a vertical splitter. ;  ;  TGVSplitter (const TGWindow *p=nullptr, UInt_t w=4, UInt_t h=4, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Create a vertical splitter. ;  ;  ~TGVSplitter () override;  Delete vertical splitter widget. ;  ; void Dra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGVFileSplitter.html:71,Guid,Guide,71,doc/master/classTGVFileSplitter.html,https://root.cern,https://root.cern/doc/master/classTGVFileSplitter.html,1,['Guid'],['Guide']
Usability,". ROOT: TGVProgressBar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TGVProgressBar Class Reference. . Definition at line 122 of file TGProgressBar.h. Public Member Functions;  TGVProgressBar (const TGWindow *p, EBarType type, UInt_t h);  Simple constructor allow you to create either a standard progress bar, or a more fancy progress bar (fancy means: double sized border, white background and a bit wider to allow for text to be printed in the bar. ;  ;  TGVProgressBar (const TGWindow *p=nullptr, UInt_t w=kProgressBarTextWidth, UInt_t h=4, Pixel_t back=GetWhitePixel(), Pixel_t barcolor=GetDefaultSelectedBackground(), GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t options=kDoubleBorder|kSunkenFrame);  Constructor. ;  ;  ~TGVProgressBar () override;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; TClass * IsA () const override;  ; void Percent (Bool_t) override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a vertical progress bar as a C++ statement(s) on output stream out. ;  ; void ShowPos (Bool_t) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGProgressBar;  TGProgressBar (const TGWindow *p, UInt_t w, UInt_t h, Pixel_t back=GetWhitePixel(), Pixel_t barcolor=GetDefaultSelectedBackground(), GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t options=kDoubleBorder|kSunkenFrame);  Create progress bar. ;  ;  ~TGProgressBar () override;  ; virtual void Format (const char *format=""%.2f"");  Set format for displaying a value. ;  ; Pixel_t GetBarColor () const;  ; EBarType GetBarType () cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGVProgressBar.html:70,Guid,Guide,70,doc/master/classTGVProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGVProgressBar.html,4,"['Guid', 'Simpl', 'progress bar']","['Guide', 'Simple', 'progress bar']"
Usability,". ROOT: TGVScrollBar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGVScrollBar Class ReferenceGUI » Low level GUI widgets. ; The TGVScrollBar will generate the following event messages: kC_VSCROLL, kSB_SLIDERPOS, position, 0 kC_VSCROLL, kSB_SLIDERTRACK, position, 0. ; Definition at line 165 of file TGScrollBar.h. Public Member Functions;  TGVScrollBar (const TGWindow *p=nullptr, UInt_t w=2, UInt_t h=4, UInt_t options=kVerticalFrame, Pixel_t back=GetDefaultFrameBackground());  Create a vertical scrollbar. ;  ;  ~TGVScrollBar () override;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event in vertical scrollbar. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion in a vertical scrollbar. ;  ; TClass * IsA () const override;  ; void Layout () override;  Layout and move vertical scrollbar components. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save an vertical scrollbar as a C++ statement(s) on output stream out. ;  ; void SetPosition (Int_t pos) override;  Set logical slider position of vertical scrollbar. ;  ; void SetRange (Int_t range, Int_t page_size) override;  Set range of vertical scrollbar. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGScrollBar;  TGScrollBar (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Constructor. ;  ;  ~TGScrollBar () override;  Delete a scrollbar (either horizontal or vertical). ;  ; void ChangeBackground (Pixel_t back) override;  Change background color. ;  ; void DrawBorder () override; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGVScrollBar.html:68,Guid,Guide,68,doc/master/classTGVScrollBar.html,https://root.cern,https://root.cern/doc/master/classTGVScrollBar.html,1,['Guid'],['Guide']
Usability,". ROOT: TGVSlider Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGVSlider Class ReferenceGUI » Low level GUI widgets. ; Concrete class for vertical slider. ; Dragging the slider will generate the event:; kC_VSLIDER, kSL_POS, slider id, position (for vertical slider). Pressing the mouse will generate the event:; kC_VSLIDER, kSL_PRESS, slider id, 0 (for vertical slider). Releasing the mouse will generate the event:; kC_VSLIDER, kSL_RELEASE, slider id, 0 (for vertical slider) . Definition at line 92 of file TGSlider.h. Public Member Functions;  TGVSlider (const TGWindow *p=nullptr, UInt_t h=40, UInt_t type=kSlider1|kScaleBoth, Int_t id=-1, UInt_t options=kVerticalFrame, Pixel_t back=GetDefaultFrameBackground());  Create a vertical slider widget. ;  ;  ~TGVSlider () override;  Delete vertical slider widget. ;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event in vertical slider. ;  ; Bool_t HandleConfigureNotify (Event_t *event) override;  Handles resize events for this widget. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion event in vertical slider. ;  ; TClass * IsA () const override;  ; void Resize (TGDimension size) override;  Resize the frame. ;  ; void Resize (UInt_t w, UInt_t h) override;  Resize the frame. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save an horizontal slider as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGSlider;  TGSlider (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGVSlider.html:65,Guid,Guide,65,doc/master/classTGVSlider.html,https://root.cern,https://root.cern/doc/master/classTGVSlider.html,1,['Guid'],['Guide']
Usability,". ROOT: TGVSplitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGVSplitter Class Reference. . Definition at line 53 of file TGSplitter.h. Public Member Functions;  TGVSplitter (const TGWindow *p, UInt_t w, UInt_t h, Bool_t external);  Create a vertical splitter. ;  ;  TGVSplitter (const TGWindow *p=nullptr, UInt_t w=4, UInt_t h=4, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Create a vertical splitter. ;  ;  ~TGVSplitter () override;  Delete vertical splitter widget. ;  ; void DrawBorder () override;  Draw vertical splitter. ;  ; const TGFrame * GetFrame () const;  ; Bool_t GetLeft () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event in vertical splitter. ;  ; Bool_t HandleCrossing (Event_t *event) override;  Handle mouse motion event in vertical splitter. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion event in vertical splitter. ;  ; TClass * IsA () const override;  ; Bool_t IsLeft () const;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a splitter widget as a C++ statement(s) on output stream out. ;  ; void SetFrame (TGFrame *frame, Bool_t left) override;  Set frame to be resized. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGSplitter;  TGSplitter (const TGWindow *p=nullptr, UInt_t w=2, UInt_t h=4, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Create a splitter. ;  ;  ~TGSplitter () override;  ; void DragStarted ();  Emit DragStarted signal. ;  ; Bool_t GetExternalHandler () const;  ; void Moved (Int_t delta);  Emit Moved signal. ;  ; void SetExternalHandler (Bool_t x);  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGVSplitter.html:67,Guid,Guide,67,doc/master/classTGVSplitter.html,https://root.cern,https://root.cern/doc/master/classTGVSplitter.html,1,['Guid'],['Guide']
Usability,". ROOT: TGVertical3DLine Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGVertical3DLine Class ReferenceGUI » Low level GUI widgets. ; A vertical 3D line is a line that can be used to separate groups of widgets. ; Definition at line 33 of file TG3DLine.h. Public Member Functions;  TGVertical3DLine (const TGWindow *p=nullptr, UInt_t w=2, UInt_t h=4, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  constructor ;  ; void DrawBorder () override;  draw border ;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save an vertical 3D line as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_t);  ; void AddInput (UInt_t emask);  Add events specified in the emask to the events the frame should handle. ;  ; virtual void ChangeBackground (Pixel_t back);  Change frame background color. ;  ; virtual void ChangeOptions (UInt_t options);  Change frame options. Options is an OR of the EFrameTypes. ;  ; Bool_t Contains (Int_t x, Int_t y) const;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; virtual void DeleteWindow ();  Delete window. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGVertical3DLine.html:72,Guid,Guide,72,doc/master/classTGVertical3DLine.html,https://root.cern,https://root.cern/doc/master/classTGVertical3DLine.html,1,['Guid'],['Guide']
Usability,". ROOT: TGVerticalFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGVerticalFrame Class ReferenceGUI » Low level GUI widgets. ; A composite frame that layout their children in vertical way. ; Definition at line 374 of file TGFrame.h. Public Member Functions;  TGVerticalFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a vertical frame widget as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (Pixel_t back);  Change background color for this frame and all subframes. ;  ; virtual void Cleanup ();  Cleanup and delete all objects contained in this composite frame. ;  ; virtual TGFrameElement * FindFrameElement (TGFrame *f) const;  Find frame-element holding frame f. ;  ; UInt_t GetDefaultHeight () const override;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth <<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGVerticalFrame.html:71,Guid,Guide,71,doc/master/classTGVerticalFrame.html,https://root.cern,https://root.cern/doc/master/classTGVerticalFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TGVerticalLayout Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGVerticalLayout Class ReferenceGUI » Low level GUI widgets. . Definition at line 159 of file TGLayout.h. Public Member Functions;  TGVerticalLayout (TGCompositeFrame *main);  Create vertical layout manager. ;  ; TGDimension GetDefaultSize () const override;  Return default dimension of the vertical layout. ;  ; TClass * IsA () const override;  ; void Layout () override;  Make a vertical layout of all frames in the list. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save vertical layout manager as a C++ statement(s) on output stream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLayoutManager;  TGLayoutManager ();  ; virtual Bool_t IsModified () const;  ; virtual void SetDefaultHeight (UInt_t);  ; virtual void SetDefaultWidth (UInt_t);  ; virtual void SetModified (Bool_t flag=kTRUE);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGVerticalLayout.html:72,Guid,Guide,72,doc/master/classTGVerticalLayout.html,https://root.cern,https://root.cern/doc/master/classTGVerticalLayout.html,1,['Guid'],['Guide']
Usability,". ROOT: TGView Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TGView Class ReferenceGUI » Low level GUI widgets. ; A TGView provides the infrastructure for text viewer and editor widgets. ; It provides a canvas (TGViewFrame) and (optionally) a vertical and horizontal scrollbar and methods for marking and scrolling.; The TGView (and derivatives) will generate the following event messages:. kC_TEXTVIEW, kTXT_ISMARKED, widget id, [true|false]; kC_TEXTVIEW, kTXT_DATACHANGE, widget id, 0; kC_TEXTVIEW, kTXT_CLICK2, widget id, position (y << 16) | x); kC_TEXTVIEW, kTXT_CLICK3, widget id, position (y << 16) | x); kC_TEXTVIEW, kTXT_F3, widget id, true; kC_TEXTVIEW, kTXT_OPEN, widget id, 0; kC_TEXTVIEW, kTXT_CLOSE, widget id, 0; kC_TEXTVIEW, kTXT_SAVE, widget id, 0 . Definition at line 23 of file TGView.h. Public Types; enum  { kNoHSB = (1ULL << ( 0 )); , kNoVSB = (1ULL << ( 1 )); };  ; enum  { kHorizontal = 0; , kVertical = 1; };  ;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGView.html:62,Guid,Guide,62,doc/master/classTGView.html,https://root.cern,https://root.cern/doc/master/classTGView.html,1,['Guid'],['Guide']
Usability,". ROOT: TGViewFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGViewFrame Class Reference. . Definition at line 109 of file TGView.h. Public Member Functions;  TGViewFrame (TGView *v, UInt_t w, UInt_t h, UInt_t options=0, Pixel_t back=GetWhitePixel());  Create a editor frame. ;  ; Bool_t HandleButton (Event_t *event) override;  ; Bool_t HandleCrossing (Event_t *event) override;  ; Bool_t HandleDoubleClick (Event_t *event) override;  ; Bool_t HandleExpose (Event_t *event) override;  ; Bool_t HandleKey (Event_t *event) override;  ; Bool_t HandleMotion (Event_t *event) override;  ; Bool_t HandleSelection (Event_t *event) override;  ; Bool_t HandleSelectionClear (Event_t *event) override;  ; Bool_t HandleSelectionRequest (Event_t *event) override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (Pixel_t back);  Change background color for this frame and all subframes. ;  ; virtual void Cleanup ();  Cleanup and delete all objects con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGViewFrame.html:67,Guid,Guide,67,doc/master/classTGViewFrame.html,https://root.cern,https://root.cern/doc/master/classTGViewFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TGViewPort Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGViewPort Class Reference. . Definition at line 158 of file TGCanvas.h. Public Member Functions;  TGViewPort (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Create a viewport object. ;  ; void DrawBorder () override;  Draw frame border. ;  ; TGFrame * GetContainer () const;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; Int_t GetHPos () const;  ; Int_t GetVPos () const;  ; Bool_t HandleConfigureNotify (Event_t *event) override;  Handle resize events. ;  ; TClass * IsA () const override;  ; void Layout () override;  Layout the elements of the composite frame. ;  ; void SetContainer (TGFrame *f);  Add container frame to the viewport. ;  ; virtual void SetHPos (Int_t xpos);  Moves content of container frame in horizontal direction. ;  ; void SetPos (Int_t xpos, Int_t ypos);  Goto new position. ;  ; virtual void SetVPos (Int_t ypos);  Moves content of container frame in vertical direction. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGViewPort.html:66,Guid,Guide,66,doc/master/classTGViewPort.html,https://root.cern,https://root.cern/doc/master/classTGViewPort.html,1,['Guid'],['Guide']
Usability,". ROOT: TGWin32 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TGWin32 Class ReferenceGraphics » Graphics' Backends » Win32 backend. ; This class is the basic interface to the Win32 graphics system. ; It is an implementation of the abstract TVirtualX class.; This code was initially developed in the context of HIGZ and PAW by Olivier Couet (package X11INT). ; Definition at line 64 of file TGWin32.h. Public Member Functions;  TGWin32 ();  Default constructor. ;  ;  TGWin32 (const char *name, const char *title);  Normal Constructor. ;  ; virtual ~TGWin32 ();  destructor. ;  ; Int_t AddPixmap (ULongptr_t pix, UInt_t w, UInt_t h) override;  register pixmap created by TGWin32GLManager ;  ; Int_t AddWindow (ULongptr_t qwid, UInt_t w, UInt_t h) override;  Register a window created by Qt as a ROOT window (like InitWindow()). ;  ; Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color) override;  Find and allocate a color cell according to the color values specified in the ColorStruct_t. ;  ; void Bell (Int_t percent) override;  Sets the sound bell. Percent is loudness from -100% to 100%. ;  ; void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t) override;  Changes the active cursor of the specified window. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) override;  Change entries in an existing graphics context, gc, by values from gval. ;  ; void ChangeProperties (Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t *data, Int_t len) override;  Put data into Clipboard. ;  ; void ChangeProperty (Window_t id, Atom_t property, Atom_t type, UChar_t *data, Int_t len) override;  This function alters the property for the specified window and causes the X server to generate a PropertyNotif",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32.html:63,Guid,Guide,63,doc/master/classTGWin32.html,https://root.cern,https://root.cern/doc/master/classTGWin32.html,1,['Guid'],['Guide']
Usability,". ROOT: TGWin32CallBackObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TGWin32CallBackObject Class Reference. . Definition at line 90 of file TGWin32ProxyBase.cxx. Public Member Functions;  TGWin32CallBackObject (TGWin32CallBack cb, void *p);  ;  ~TGWin32CallBackObject ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32CallBackObject.html:77,Guid,Guide,77,doc/master/classTGWin32CallBackObject.html,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html,1,['Guid'],['Guide']
Usability,". ROOT: TGWin32GLManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGWin32GLManager Class Reference. . Definition at line 20 of file TGWin32GL.h. Classes; struct  TGLContext;  ; class  TGWin32GLImpl;  . Public Member Functions;  TGWin32GLManager ();  ;  ~TGWin32GLManager () override;  ; Bool_t AttachOffScreenDevice (Int_t ctxInd, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  ; Int_t CreateGLContext (Int_t winInd) override;  winInd is TGWin32 index, returned by previous call gGLManager->InitGLWindow returns descripto (index) of gl context or -1 if failed ;  ; void DeleteGLContext (Int_t devInd) override;  ; void ExtractViewport (Int_t devInd, Int_t *vp) override;  ; void Flush (Int_t ctxInd) override;  ; char * GetPlotInfo (TVirtualGLPainter *plot, Int_t px, Int_t py) override;  ; Int_t GetVirtualXInd (Int_t devInd) override;  ; Bool_t HighColorFormat (Int_t ctx) override;  ; Int_t InitGLWindow (Window_t winID) override;  ; TClass * IsA () const override;  ; Bool_t MakeCurrent (Int_t devInd) override;  ; void MarkForDirectCopy (Int_t devInd, Bool_t) override;  ; void PaintSingleObject (TVirtualGLPainter *) override;  ; void PanObject (TVirtualGLPainter *o, Int_t x, Int_t y) override;  ; Bool_t PlotSelected (TVirtualGLPainter *plot, Int_t px, Int_t py) override;  ; void PrintViewer (TVirtualViewer3D *vv) override;  ; void ReadGLBuffer (Int_t devInd) override;  ; Bool_t ResizeOffScreenDevice (Int_t devInd, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Create new DIB if needed. ;  ; Bool_t SelectManip (TVirtualGLManip *manip, const TGLCamera *camera, const TGLRect *rect, const TGLBoundingBox *sceneBox) override;  ; void SelectOffScreenDevice (Int_t devInd) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32GLManager.html:72,Guid,Guide,72,doc/master/classTGWin32GLManager.html,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html,1,['Guid'],['Guide']
Usability,". ROOT: TGWin32VirtualXProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Attributes |; Friends |; List of all members ; TGWin32VirtualXProxy Class Reference. . Definition at line 30 of file TGWin32VirtualXProxy.h. Public Member Functions;  TGWin32VirtualXProxy ();  ;  TGWin32VirtualXProxy (const char *name, const char *title);  ;  ~TGWin32VirtualXProxy () override;  ; Int_t AddWindow (ULongptr_t qwid, UInt_t w, UInt_t h) override;  Registers a window created by Qt as a ROOT window. ;  ; Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color) override;  Allocates a read-only colormap entry corresponding to the closest RGB value supported by the hardware. ;  ; void Bell (Int_t percent) override;  Sets the sound bell. Percent is loudness from -100% to 100%. ;  ; void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t) override;  Changes the specified dynamic parameters if the pointer is actively grabbed by the client and if the specified time is no earlier than the last-pointer-grab time and no later than the current X server time. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) override;  Changes the components specified by the mask in gval for the specified GC. ;  ; void ChangeProperties (Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t *data, Int_t len) override;  Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeProperty (Window_t id, Atom_t property, Atom_t type, UChar_t *data, Int_t len) override;  Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeWindowAttributes (Window_t id, SetWindowAttributes_t *attr) override;  Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ;  ; Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:76,Guid,Guide,76,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['Guid'],['Guide']
Usability,". ROOT: TGWindow Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Friends |; List of all members ; TGWindow Class ReferenceGUI » Low level GUI widgets. ; ROOT GUI Window base class. ; Definition at line 23 of file TGWindow.h. Public Types; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGWindow (const TGWindow *p=nullptr, Int_t x=0, Int_t y=0, UInt_t w=0, UInt_t h=0, UInt_t border=0, Int_t depth=0, UInt_t clss=0, void *visual=nullptr, SetWindowAttributes_t *attr=nullptr, UInt_t wtype=0);  Create a new window. ;  ;  TGWindow (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a copy of a window. ;  ;  ~TGWindow () override;  Window destructor. Unregisters the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWindow.html:64,Guid,Guide,64,doc/master/classTGWindow.html,https://root.cern,https://root.cern/doc/master/classTGWindow.html,1,['Guid'],['Guide']
Usability,". ROOT: TGX11 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TGX11 Class ReferenceGraphics » Graphics' Backends » X11 backend. ; This class is the basic interface to the X11 (Xlib) graphics system. ; It is an implementation of the abstract TVirtualX class.; This class gives access to basic X11 graphics, pixmap, text and font handling routines.; The companion class for Win32 is TGWin32.; The file G11Gui.cxx contains the implementation of the GUI methods of the TGX11 class. Most of the methods are used by the machine independent GUI classes (libGUI.so).; This code was initially developed in the context of HIGZ and PAW by Olivier Couet (package X11INT). ; Definition at line 80 of file TGX11.h. Public Member Functions;  TGX11 ();  Default constructor. ;  ;  TGX11 (const char *name, const char *title);  Normal Constructor. ;  ;  TGX11 (const TGX11 &org);  Copy constructor. Currently only used by TGX11TTF. ;  ;  ~TGX11 () override;  Destructor. ;  ; Int_t AddPixmap (ULong_t pixid, UInt_t w, UInt_t h) override;  Register pixmap created by gVirtualGL. ;  ; Int_t AddWindow (ULong_t qwid, UInt_t w, UInt_t h) override;  Register a window created by Qt as a ROOT window (like InitWindow()). ;  ; Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color) override;  Find and allocate a color cell according to the color values specified in the ColorStruct_t. ;  ; void Bell (Int_t percent) override;  Sound bell. Percent is loudness from -100% .. 100%. ;  ; void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t) override;  Changes the specified dynamic parameters if the pointer is actively grabbed by the client. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) override;  Change entries in an existing graphics context, gc, b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11.html:61,Guid,Guide,61,doc/master/classTGX11.html,https://root.cern,https://root.cern/doc/master/classTGX11.html,1,['Guid'],['Guide']
Usability,". ROOT: TGX11TTF Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TGX11TTF Class ReferenceGraphics » Graphics' Backends » X11 backend. ; Interface to low level X11 (Xlib). ; This class gives access to basic X11 graphics via the parent class TGX11. However, all text and font handling is done via the Freetype TrueType library. When the shared library containing this class is loaded the global gVirtualX is redirected to point to this class. ; Definition at line 27 of file TGX11TTF.h. Public Member Functions;  TGX11TTF (const TGX11 &org);  Create copy of TGX11 but now use TrueType fonts. ;  ;  ~TGX11TTF () override;  ; void DrawText (Int_t x, Int_t y, Float_t angle, Float_t mgn, const char *text, ETextMode mode) override;  Draw text using TrueType fonts. ;  ; void DrawText (Int_t x, Int_t y, Float_t angle, Float_t mgn, const wchar_t *text, ETextMode mode) override;  Draw text using TrueType fonts. ;  ; Bool_t Init (void *display) override;  Initialize X11 system. Returns kFALSE in case of failure. ;  ; TClass * IsA () const override;  ; Int_t SetTextFont (char *fontname, ETextSetMode mode) override;  Set text font to specified name. ;  ; void SetTextFont (Font_t fontnumber) override;  Set specified font. ;  ; void SetTextSize (Float_t textsize) override;  Set current text size. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGX11;  TGX11 ();  Default constructor. ;  ;  TGX11 (const char *name, const char *title);  Normal Constructor. ;  ;  TGX11 (const TGX11 &org);  Copy constructor. Currently only used by TGX11TTF. ;  ;  ~TGX11 () override;  Destructor. ;  ; Int_t AddPixmap (ULong_t pixid, UInt_t w, UInt_t h) overr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11TTF.html:64,Guid,Guide,64,doc/master/classTGX11TTF.html,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html,1,['Guid'],['Guide']
Usability,". ROOT: TGXYLayout Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGXYLayout Class ReferenceGUI » Low level GUI widgets. ; Is a layout manager where the position and the size of each widget in the frame are defined by X / Y - coordinates. ; The coordinates for each widget are defined by the TGXYLayoutHints. Therefore it is not possible to share a layout hint for several widgets.; The coordinates (X, Y) and the size (W, H) are defined in units of the size of a typical character. Also the size of the TGCompositeFrame for which a TGXYLayout manager is used has to be defined in its constructor in units of the size of a character!; It is not possible to use any other layout hint than the TGXYLayoutHints for this layout manager!; The rubberFlag in the constructor of the TGLXYLayoutHins defines how the position and the size of a widget is recalculated if the size of the frame is increased:. kLRubberX: The X - position (left edge) is increased by the same factor as the width of the frame increases.; kLRubberY: The Y - position (upper edge) is increased by the same factor as the height of the frame increases.; kLRubberW: The width of the widget is increased by the same factor as the width of the frame increases.; kLRubberH: The height of the widget is increased by the same factor as the height of the frame increases. But the size never becomes smaller than defined by the TGXYLayoutHints and the X and Y coordinates becomes never smaller than defined by the layout hints. ; Definition at line 58 of file TGXYLayout.h. Public Member Functions;  TGXYLayout (TGCompositeFrame *main);  Constructor. The main is the frame for which this layout manager works. ;  ; TGDimension GetDefaultSize () const override;  Returns the original size of the frame. ;  ; TClass * IsA () const over",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGXYLayout.html:66,Guid,Guide,66,doc/master/classTGXYLayout.html,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html,1,['Guid'],['Guide']
Usability,". ROOT: TGXYLayoutHints Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGXYLayoutHints Class ReferenceGUI » Low level GUI widgets. ; This layout hint must be used for the TGXYLayout manager! ; Example how to use this layout manager:; TGMyFrame::TGMyFrame(); : TGMainFrame(gClient->GetRoot(), 30, 12); // frame is 30 character long and 12 character heigh; {; SetLayoutManager(new TGXYLayout(this));; ; // create a button of size 8 X 1.8 at position 20 / 1; TGTextButton * button;; button = new TGTextButton(this, ""&Apply"", 1);; AddFrame(button, new TGXYLayoutHints(20, 1, 8, 1.8));; ; // create a listbox of size 18 X 10 at position 1 / 1.; // The height will increase if the frame height increases; TGListBox * listBox;; listBox = new TGListBox(this, 2);; AddFrame(listBox, new TGXYLayoutHints(1, 1, 18, 10,; TGXYLayoutHints::kLRubberX |; TGXYLayoutHints::kLRubberY |; TGXYLayoutHints::kLRubberH ));; .; .; .; }; gClient#define gClientDefinition TGClient.h:156; buttonOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t buttonDefinition TGWin32VirtualXProxy.cxx:160; TGListBoxA listbox is a box, possibly with scrollbar, containing entries.Definition TGListBox.h:221; TGMainFrameDefines top level windows that interact with the system Window Manager.Definition TGFrame.h:397; TGTextButtonYield an action as soon as it is clicked.Definition TGButton.h:142; TGXYLayoutHintsThis layout hint must be used for the TGXYLayout manager!Definition TGXYLayout.h:19; TGXYLayoutHints::kLRubberX@ kLRubberXDefinition TGXYLayout.h:31; TGXYLayoutHints::kLRubberH@ kLRubberHDefinition TGXYLayout.h:34; TGXYLayoutHints::kLRubberY@ kLRubberYDefinition TGXYLayout.h:32; TGXYLayoutIs a layout m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGXYLayoutHints.html:71,Guid,Guide,71,doc/master/classTGXYLayoutHints.html,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html,1,['Guid'],['Guide']
Usability,". ROOT: TGaxis Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGaxis Class ReferenceGraphics » 2D Graphics » Basic graphics. ; The axis painter class. ; Instances of this class are generated by the histograms and graphs painting classes when TAxis are drawn. TGaxis is the ""painter class"" of TAxis. Therefore it is mainly used via TAxis, even if is some occasion it can be used directly to draw an axis which is not part of a graph or an instance. For instance to draw an extra scale on a plot. Basic definition; Definition with a function; Logarithmic axis; Blank axis; Arrow on axis; Tick marks' orientation; Tick marks' size; Labels' positioning; Labels' orientation; Labels' position on tick marks; Labels' format; Alphanumeric labels; Changing axis labels; Number of divisions optimisation; Maximum Number of Digits for the axis labels; Optional grid; Time axis. Basic definition; A TGaxis is defined the following way: TGaxis::TGaxis(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax,; Double_t wmin, Double_t wmax, Int_t ndiv, Option_t *chopt,; Double_t gridlength); Option_tconst char Option_tDefinition RtypesCore.h:66; wminOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t wminDefinition TGWin32VirtualXProxy.cxx:162; wmaxOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t wmaxDefinition TGWin32VirtualXProxy.cxx:162; xminfloat xminDefinition THbookFile.cxx:95; yminfloat yminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; ymaxfloat ymaxDefinition THbookFile.cxx:95; TGaxis::TGaxis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGaxis.html:62,Guid,Guide,62,doc/master/classTGaxis.html,https://root.cern,https://root.cern/doc/master/classTGaxis.html,1,['Guid'],['Guide']
Usability,". ROOT: TGedEditor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGedEditor Class Reference. . Definition at line 30 of file TGedEditor.h. Public Member Functions;  TGedEditor (TCanvas *canvas=nullptr, UInt_t width=175, UInt_t height=20);  Constructor of graphics editor. ;  ;  ~TGedEditor () override;  Editor destructor. ;  ; void ActivateEditor (TClass *cl, Bool_t recurse);  Searches for GedFrames for given class. ;  ; void ActivateEditors (TList *bcl, Bool_t recurse);  Searches GedFrames for classes in the given list. ;  ; void CloseWindow () override;  Called when closed via WM close button. Calls Hide(). ;  ; virtual void ConnectToCanvas (TCanvas *c);  Connect this editor to the Selected signal of canvas 'c'. ;  ; virtual void DisconnectFromCanvas ();  Disconnect this editor from the Selected signal of fCanvas. ;  ; void ExcludeClassEditor (TClass *cl, Bool_t recurse=kFALSE);  Exclude editor for class cl from current construction. ;  ; TCanvas * GetCanvas () const override;  ; virtual TGCompositeFrame * GetEditorTab (const char *name);  Find or create tab with name. ;  ; virtual TGedTabInfo * GetEditorTabInfo (const char *name);  Find or create tab with name. ;  ; virtual TObject * GetModel () const;  ; virtual TVirtualPad * GetPad () const;  ; TGTab * GetTab () const;  ; TGCanvas * GetTGCanvas () const;  ; virtual void GlobalClosed ();  Delete global editor if no canvas exists. ;  ; virtual void GlobalSetModel (TVirtualPad *, TObject *, Int_t);  Set canvas to global editor. ;  ; void Hide () override;  Hide editor. The editor is put into non-active state. ;  ; void InsertGedFrame (TGedFrame *f);  Insert GedFrame in fGedFrames list according to priorities. ;  ; TClass * IsA () const override;  ; B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGedEditor.html:66,Guid,Guide,66,doc/master/classTGedEditor.html,https://root.cern,https://root.cern/doc/master/classTGedEditor.html,1,['Guid'],['Guide']
Usability,". ROOT: TGedFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGedFrame Class ReferenceabstractGUI » ROOT Graphics Editor. ; Base frame for implementing GUI - a service class. ; Definition at line 27 of file TGedFrame.h. Classes; class  TGedSubFrame;  . Public Member Functions;  TGedFrame (const TGWindow *p=nullptr, Int_t width=140, Int_t height=30, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Constructor of the base GUI attribute frame. ;  ;  ~TGedFrame () override;  Destructor of the base GUI attribute frame. ;  ; virtual Bool_t AcceptModel (TObject *);  ; virtual void ActivateBaseClassEditors (TClass *cl);  Provide list of editors for base-classes. ;  ; virtual void AddExtraTab (TGedSubFrame *sf);  Adds tab container to list of extra tabs. ;  ;  ClassDefOverride (TGedFrame, 0);  ; virtual TGVerticalFrame * CreateEditorTabSubFrame (const char *name);  Create a vertical frame to be used by 'owner' in extra tab 'name'. ;  ; Option_t * GetDrawOption () const override;  Get draw options of the selected object. ;  ; TList * GetExtraTabs ();  ; TGedEditor * GetGedEditor ();  ; TClass * GetModelClass ();  ; Int_t GetPriority ();  ; virtual void Refresh (TObject *model);  Refresh the GUI info about the object attributes. ;  ; void SetDrawOption (Option_t *option="""") override;  Set drawing option for object. ;  ; virtual void SetGedEditor (TGedEditor *ed);  ; virtual void SetModel (TObject *obj)=0;  ; void SetModelClass (TClass *mcl);  ; virtual void Update ();  Update the current pad when an attribute is changed via GUI. ;  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGedFrame.html:65,Guid,Guide,65,doc/master/classTGedFrame.html,https://root.cern,https://root.cern/doc/master/classTGedFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TGedFrame::TGedSubFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; TGedFrame::TGedSubFrame Class Reference. . Definition at line 31 of file TGedFrame.h. Public Member Functions;  TGedSubFrame (TString n, TGCompositeFrame *f);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGedFrame_1_1TGedSubFrame.html:79,Guid,Guide,79,doc/master/classTGedFrame_1_1TGedSubFrame.html,https://root.cern,https://root.cern/doc/master/classTGedFrame_1_1TGedSubFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TGedMarkerSelect Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGedMarkerSelect Class ReferenceGUI » ROOT Graphics Editor. ; The TGedMarkerSelect widget is a button showing selected marker and a little down arrow. ; When clicked on the arrow the TGedMarkerPopup pops up.; Selecting a marker in this widget will generate the event: kC_MARKERSEL, kMAR_SELCHANGED, widget id, style.; and the signal: MarkerSelected(Style_t marker) ; Definition at line 37 of file TGedMarkerSelect.h. Public Member Functions;  TGedMarkerSelect (const TGWindow *p, Style_t markerStyle, Int_t id);  Create and show marker popup window. ;  ;  ~TGedMarkerSelect () override;  ; TGDimension GetDefaultSize () const override;  default size ;  ; Style_t GetMarkerStyle () const;  ; virtual void MarkerSelected (Style_t marker=0);  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages according to the user input. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save the pattern select widget as a C++ statement(s) on output stream out. ;  ; void SetMarkerStyle (Style_t pattern);  Set marker. ;  ;  Public Member Functions inherited from TGedSelect;  TGedSelect (const TGWindow *p, Int_t id);  Create pattern select button. ;  ;  ~TGedSelect () override;  Destructor of pattern select button. ;  ; virtual void Disable ();  Clear widget state flag. ;  ; virtual void Enable ();  Set widget state flag (kTRUE=enabled, kFALSE=disabled). ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button events in pattern select button. ;  ; virtual void SetPopup (TGedPopup *p);  ;  Public Member Functions inherited from TGCheckButton;  TGCheckButton (const TGWindow *p, const char *s, const char *cmd, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t fon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGedMarkerSelect.html:72,Guid,Guide,72,doc/master/classTGedMarkerSelect.html,https://root.cern,https://root.cern/doc/master/classTGedMarkerSelect.html,1,['Guid'],['Guide']
Usability,". ROOT: TGedPatternSelect Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGedPatternSelect Class ReferenceGUI » ROOT Graphics Editor. ; is a button with pattern area with a little down arrow. ; When clicked on the arrow the TGedPatternPopup pops up.; Selecting a pattern in this widget will generate the event: kC_PATTERNSEL, kPAT_SELCHANGED, widget id, style.; and the signal: PatternSelected(Style_t pattern) ; Definition at line 120 of file TGedPatternSelect.h. Public Member Functions;  TGedPatternSelect (const TGWindow *p, Style_t pattern, Int_t id);  Create and pop up pattern select window. ;  ;  ~TGedPatternSelect () override;  ; TGDimension GetDefaultSize () const override;  default size ;  ; Style_t GetPattern () const;  ; virtual void PatternSelected (Style_t pattern=0);  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process message according to the user input. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save the pattern select widget as a C++ statement(s) on output stream out. ;  ; void SetPattern (Style_t pattern, Bool_t emit=kTRUE);  Set pattern. ;  ;  Public Member Functions inherited from TGedSelect;  TGedSelect (const TGWindow *p, Int_t id);  Create pattern select button. ;  ;  ~TGedSelect () override;  Destructor of pattern select button. ;  ; virtual void Disable ();  Clear widget state flag. ;  ; virtual void Enable ();  Set widget state flag (kTRUE=enabled, kFALSE=disabled). ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button events in pattern select button. ;  ; virtual void SetPopup (TGedPopup *p);  ;  Public Member Functions inherited from TGCheckButton;  TGCheckButton (const TGWindow *p, const char *s, const char *cmd, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGedPatternSelect.html:73,Guid,Guide,73,doc/master/classTGedPatternSelect.html,https://root.cern,https://root.cern/doc/master/classTGedPatternSelect.html,1,['Guid'],['Guide']
Usability,". ROOT: TGedTabInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TGedTabInfo Class Reference. . Definition at line 63 of file TGedEditor.cxx. Public Member Functions;  TGedTabInfo (TGTabElement *el, TGCompositeFrame *f);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGedTabInfo.html:67,Guid,Guide,67,doc/master/classTGedTabInfo.html,https://root.cern,https://root.cern/doc/master/classTGedTabInfo.html,1,['Guid'],['Guide']
Usability,". ROOT: TGenBitsetProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TGenBitsetProxy Class Reference. . Definition at line 135 of file TGenCollectionProxy.cxx. Public Member Functions;  TGenBitsetProxy (const TGenCollectionProxy &c);  ;  ~TGenBitsetProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index idx ;  ; void DeleteItem (Bool_t force, void *ptr) const override;  Call to delete/destruct individual item. ;  ;  Public Member Functions inherited from TGenCollectionProxy;  TGenCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  TGenCollectionProxy (const TGenCollectionProxy &copy);  Build a proxy for an emulated container. ;  ;  TGenCollectionProxy (Info_t typ, size_t iter_size);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  ~TGenCollectionProxy () override;  Standard destructor. ;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocate the needed space. ;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ; void Clear (const char *opt="""") override;  Clear the emulated collection. ;  ; void Commit (void *env) override;  Commit the change. ;  ; TVirtualCollectionProxy * Generate () const override;  Virtual copy constructor. ;  ; TClass * GetCollectionClass () const override;  Return a pointer to the TClass representing the container. ;  ; Int_t GetCollectionType () const override;  Return the type of collection see TClassEdit::ESTLType. ;  ; TStreamerInfoActions::TActionSequence * GetConversionReadMemberWiseActions (TClass *oldClass, Int_t version) override;  Return the set of action necessary to stream in this collection member-wise coming from the old value class layout refered to by 'version'. ;  ; CopyI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenBitsetProxy.html:71,Guid,Guide,71,doc/master/classTGenBitsetProxy.html,https://root.cern,https://root.cern/doc/master/classTGenBitsetProxy.html,1,['Guid'],['Guide']
Usability,". ROOT: TGenCollectionProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TGenCollectionProxy Class ReferenceInput/Output Library. ; Proxy around an arbitrary container, which implements basic functionality and iteration. ; The purpose of this implementation is to shield any generated dictionary implementation from the underlying streamer/proxy implementation and only expose the creation functions.; In particular this is used to implement splitting and abstract element access of any container. Access to compiled code is necessary to implement the abstract iteration sequence and functionality like size(), clear(), resize(). resize() may be a void operation. ; Definition at line 29 of file TGenCollectionProxy.h. Classes; class  Method;  Small helper to execute (compiler) generated function for the access to STL or other containers. More...;  ; class  Method0;  ; class  StreamHelper;  Helper class to facilitate I/O. More...;  ; class  TStaging;  Small helper to stage the content of an associative container when reading and before inserting it in the actual collection. More...;  ; class  Value;  Small helper to describe the Value_type or the key_type of an STL container. More...;  . Public Types; enum  { kBIT_ISSTRING = 0x20000000; , kBIT_ISTSTRING = 0x40000000; };  ; typedef const std::type_info & Info_t;  ;  Public Types inherited from TVirtualCollectionProxy; typedef void *(* CopyIterator_t) (void *dest, const void *source);  Copy the iterator source into dest. ;  ; typedef void(* CreateIterators_t) (void *collection, void **begin_arena, void **end_arena, TVirtualCollectionProxy *proxy);  *begin_arena and *end_arena should contain the location of a memory arena of size fgIteratorArenaSize. ;  ; typedef void(* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenCollectionProxy.html:75,Guid,Guide,75,doc/master/classTGenCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTGenCollectionProxy.html,2,"['Guid', 'clear']","['Guide', 'clear']"
Usability,. ROOT: TGenCollectionProxy::Method Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Public Attributes |; List of all members ; TGenCollectionProxy::Method Class Reference. ; Small helper to execute (compiler) generated function for the access to STL or other containers. ; AuthorM.Frank ; Version1.0 ; Date10/10/2004 ; Definition at line 193 of file TGenCollectionProxy.h. Public Types; typedef void *(* Call_t) (void *);  . Public Member Functions;  Method ();  ;  Method (Call_t c);  ;  Method (const Method &m);  ; void * invoke (void *obj) const;  ; Method & operator= (const Method &m);  . Public Attributes; Call_t call;  . #include <TGenCollectionProxy.h>; Member Typedef Documentation. ◆ Call_t. typedef void *(* TGenCollectionProxy::Method::Call_t) (void *). Definition at line 195 of file TGenCollectionProxy.h. Constructor & Destructor Documentation. ◆ Method() [1/3]. TGenCollectionProxy::Method::Method ; (; ). inline . Definition at line 197 of file TGenCollectionProxy.h. ◆ Method() [2/3]. TGenCollectionProxy::Method::Method ; (; Call_t ; c). inline . Definition at line 198 of file TGenCollectionProxy.h. ◆ Method() [3/3]. TGenCollectionProxy::Method::Method ; (; const Method & ; m). inline . Definition at line 199 of file TGenCollectionProxy.h. Member Function Documentation. ◆ invoke(). void * TGenCollectionProxy::Method::invoke ; (; void * ; obj); const. inline . Definition at line 201 of file TGenCollectionProxy.h. ◆ operator=(). Method & TGenCollectionProxy::Method::operator= ; (; const Method & ; m). inline . Definition at line 200 of file TGenCollectionProxy.h. Member Data Documentation. ◆ call. Call_t TGenCollectionProxy::Method::call. Definition at line 196 of file TGenCollectionProxy.h. Libraries for TGenCollectionProxy::Method:. [legend]; The documentation for this class was generated from the following file:; io/io/inc/TGenCollectionProxy.h. T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenCollectionProxy_1_1Method.html:83,Guid,Guide,83,doc/master/classTGenCollectionProxy_1_1Method.html,https://root.cern,https://root.cern/doc/master/classTGenCollectionProxy_1_1Method.html,1,['Guid'],['Guide']
Usability,. ROOT: TGenCollectionProxy::Method0 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Public Attributes |; List of all members ; TGenCollectionProxy::Method0 Class Reference. . Definition at line 213 of file TGenCollectionProxy.h. Public Types; typedef void *(* Call_t) ();  . Public Member Functions;  Method0 ();  ;  Method0 (Call_t c);  ;  Method0 (const Method0 &m);  ; void * invoke () const;  ; Method0 & operator= (const Method0 &m);  . Public Attributes; Call_t call;  . #include <TGenCollectionProxy.h>; Member Typedef Documentation. ◆ Call_t. typedef void *(* TGenCollectionProxy::Method0::Call_t) (). Definition at line 215 of file TGenCollectionProxy.h. Constructor & Destructor Documentation. ◆ Method0() [1/3]. TGenCollectionProxy::Method0::Method0 ; (; ). inline . Definition at line 217 of file TGenCollectionProxy.h. ◆ Method0() [2/3]. TGenCollectionProxy::Method0::Method0 ; (; Call_t ; c). inline . Definition at line 218 of file TGenCollectionProxy.h. ◆ Method0() [3/3]. TGenCollectionProxy::Method0::Method0 ; (; const Method0 & ; m). inline . Definition at line 219 of file TGenCollectionProxy.h. Member Function Documentation. ◆ invoke(). void * TGenCollectionProxy::Method0::invoke ; (; ); const. inline . Definition at line 221 of file TGenCollectionProxy.h. ◆ operator=(). Method0 & TGenCollectionProxy::Method0::operator= ; (; const Method0 & ; m). inline . Definition at line 220 of file TGenCollectionProxy.h. Member Data Documentation. ◆ call. Call_t TGenCollectionProxy::Method0::call. Definition at line 216 of file TGenCollectionProxy.h. Libraries for TGenCollectionProxy::Method0:. [legend]; The documentation for this class was generated from the following file:; io/io/inc/TGenCollectionProxy.h. TGenCollectionProxyMethod0. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:00 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenCollectionProxy_1_1Method0.html:84,Guid,Guide,84,doc/master/classTGenCollectionProxy_1_1Method0.html,https://root.cern,https://root.cern/doc/master/classTGenCollectionProxy_1_1Method0.html,2,['Guid'],['Guide']
Usability,". ROOT: TGenCollectionProxy::TStaging Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGenCollectionProxy::TStaging Class Reference. ; Small helper to stage the content of an associative container when reading and before inserting it in the actual collection. ; AuthorPh.Canal ; Version1.0 ; Date20/08/2010 ; Definition at line 234 of file TGenCollectionProxy.h. Public Member Functions;  TStaging (size_t size, size_t size_of);  ;  ~TStaging ();  ; void * GetContent ();  ; void * GetEnd ();  ; size_t GetSize ();  ; void * GetTarget ();  ; void Resize (size_t nelement);  ; void SetTarget (void *target);  . Private Member Functions;  TStaging (const TStaging &);  Not implemented. ;  ; TStaging & operator= (const TStaging &);  Not implemented. ;  . Private Attributes; void * fContent;  Pointer to the content. ;  ; size_t fReserved;  Amount of space already reserved. ;  ; size_t fSize;  Number of elements. ;  ; size_t fSizeOf;  size of each elements ;  ; void * fTarget;  Pointer to the collection we are staging for. ;  . #include <TGenCollectionProxy.h>; Constructor & Destructor Documentation. ◆ TStaging() [1/2]. TGenCollectionProxy::TStaging::TStaging ; (; const TStaging & ; ). private . Not implemented. . ◆ TStaging() [2/2]. TGenCollectionProxy::TStaging::TStaging ; (; size_t ; size, . size_t ; size_of . ). inline . Definition at line 245 of file TGenCollectionProxy.h. ◆ ~TStaging(). TGenCollectionProxy::TStaging::~TStaging ; (; ). inline . Definition at line 252 of file TGenCollectionProxy.h. Member Function Documentation. ◆ GetContent(). void * TGenCollectionProxy::TStaging::GetContent ; (; ). inline . Definition at line 257 of file TGenCollectionProxy.h. ◆ GetEnd(). void * TGenCollectionProxy::TStaging::GetEnd ; (; ). inline . Definition at line 261 of file TGenCollectionProxy.h. ◆ GetSize(). size_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenCollectionProxy_1_1TStaging.html:85,Guid,Guide,85,doc/master/classTGenCollectionProxy_1_1TStaging.html,https://root.cern,https://root.cern/doc/master/classTGenCollectionProxy_1_1TStaging.html,1,['Guid'],['Guide']
Usability,". ROOT: TGenCollectionProxy::Value Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TGenCollectionProxy::Value Class Reference. ; Small helper to describe the Value_type or the key_type of an STL container. ; AuthorM.Frank ; Version1.0 ; Date10/10/2004 ; Definition at line 60 of file TGenCollectionProxy.h. Public Member Functions;  Value (const std::string &info, Bool_t silent, size_t hint_pair_offset=0, size_t hint_pair_size=0);  Constructor. ;  ; void DeleteItem (void *ptr);  ; Bool_t IsValid ();  Return true if the Value has been properly initialized. ;  . Public Attributes; UInt_t fCase;  type of data of Value_type ;  ; ROOT::NewFunc_t fCtor;  Method cache for containee constructor. ;  ; ROOT::DelFunc_t fDelete;  Method cache for containee delete. ;  ; ROOT::DesFunc_t fDtor;  Method cache for containee destructor. ;  ; EDataType fKind;  kind of ROOT-fundamental type ;  ; UInt_t fProperties;  Additional properties of the value type (kNeedDelete) ;  ; size_t fSize;  fSize of the contained object ;  ; TClassRef fType;  TClass reference of Value_type in collection. ;  . #include <TGenCollectionProxy.h>; Constructor & Destructor Documentation. ◆ Value(). TGenCollectionProxy::Value::Value ; (; const std::string & ; info, . Bool_t ; silent, . size_t ; hint_pair_offset = 0, . size_t ; hint_pair_size = 0 . ). Constructor. ; Definition at line 316 of file TGenCollectionProxy.cxx. Member Function Documentation. ◆ DeleteItem(). void TGenCollectionProxy::Value::DeleteItem ; (; void * ; ptr). Definition at line 518 of file TGenCollectionProxy.cxx. ◆ IsValid(). Bool_t TGenCollectionProxy::Value::IsValid ; (; ). Return true if the Value has been properly initialized. ; Definition at line 511 of file TGenCollectionProxy.cxx. Member Data Documentation. ◆ fCase. UInt_t TGenCollectionProxy::Value::fCase. type of data of Value_type ; Definition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTGenCollectionProxy_1_1Value.html:82,Guid,Guide,82,doc/master/structTGenCollectionProxy_1_1Value.html,https://root.cern,https://root.cern/doc/master/structTGenCollectionProxy_1_1Value.html,1,['Guid'],['Guide']
Usability,". ROOT: TGenCollectionStreamer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGenCollectionStreamer Class Reference. . Definition at line 17 of file TGenCollectionStreamer.h. Public Member Functions;  TGenCollectionStreamer (const ROOT::TCollectionProxyInfo &info, TClass *cl);  ;  TGenCollectionStreamer (const TGenCollectionStreamer &copy);  ;  TGenCollectionStreamer (Info_t typ, size_t iter_size);  ;  ~TGenCollectionStreamer () override;  ; TVirtualCollectionProxy * Generate () const override;  Virtual copy constructor. ;  ; void ReadBuffer (TBuffer &b, void *obj) override;  ; void ReadBuffer (TBuffer &b, void *obj, const TClass *onfileClass) override;  ; void Streamer (TBuffer &buff, void *pObj, int siz) override;  Streamer I/O overload. ;  ; void Streamer (TBuffer &refBuffer) override;  Streamer Function. ;  ; virtual void StreamerAsMap (TBuffer &refBuffer);  ;  Public Member Functions inherited from TGenCollectionProxy;  TGenCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  TGenCollectionProxy (const TGenCollectionProxy &copy);  Build a proxy for an emulated container. ;  ;  TGenCollectionProxy (Info_t typ, size_t iter_size);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  ~TGenCollectionProxy () override;  Standard destructor. ;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocate the needed space. ;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ; void Clear (const char *opt="""") override;  Clear the emulated collection. ;  ; void Commit (void *env) override;  Commit the change. ;  ; TClass * GetCollectionClass () const override;  Return a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenCollectionStreamer.html:78,Guid,Guide,78,doc/master/classTGenCollectionStreamer.html,https://root.cern,https://root.cern/doc/master/classTGenCollectionStreamer.html,1,['Guid'],['Guide']
Usability,". ROOT: TGenListProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TGenListProxy Class Reference. . Definition at line 190 of file TGenCollectionProxy.cxx. Public Member Functions;  TGenListProxy (const TGenCollectionProxy &c);  ;  ~TGenListProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ;  Public Member Functions inherited from TGenVectorProxy;  TGenVectorProxy (const TGenCollectionProxy &c);  ;  ~TGenVectorProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ; void DeleteItem (Bool_t force, void *ptr) const override;  Call to delete/destruct individual item. ;  ;  Public Member Functions inherited from TGenCollectionProxy;  TGenCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  TGenCollectionProxy (const TGenCollectionProxy &copy);  Build a proxy for an emulated container. ;  ;  TGenCollectionProxy (Info_t typ, size_t iter_size);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  ~TGenCollectionProxy () override;  Standard destructor. ;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocate the needed space. ;  ; void Clear (const char *opt="""") override;  Clear the emulated collection. ;  ; void Commit (void *env) override;  Commit the change. ;  ; TVirtualCollectionProxy * Generate () const override;  Virtual copy constructor. ;  ; TClass * GetCollectionClass () const override;  Return a pointer to the TClass representing the container. ;  ; Int_t GetCollectionType () const override;  Return the type of collection see TClassEdit::ESTLType. ;  ; TStreamerInfoActions::TActionSequence * GetConversionReadMemberWiseActions (TClass *oldClass, Int_t version) override;  Return the s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenListProxy.html:69,Guid,Guide,69,doc/master/classTGenListProxy.html,https://root.cern,https://root.cern/doc/master/classTGenListProxy.html,1,['Guid'],['Guide']
Usability,". ROOT: TGenMapProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TGenMapProxy Class ReferenceInput/Output Library. ; Localoptimization class. ; Collection proxies get copied. On copy we switch the type of the proxy to the concrete STL type. The concrete types are optimized for element access. ; Definition at line 277 of file TGenCollectionProxy.cxx. Public Member Functions;  TGenMapProxy (const TGenCollectionProxy &c);  ;  ~TGenMapProxy () override;  ; void DeleteItem (Bool_t force, void *ptr) const override;  Call to delete/destruct individual item. ;  ;  Public Member Functions inherited from TGenSetProxy;  TGenSetProxy (const TGenCollectionProxy &c);  ;  ~TGenSetProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ;  Public Member Functions inherited from TGenVectorProxy;  TGenVectorProxy (const TGenCollectionProxy &c);  ;  ~TGenVectorProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ; void DeleteItem (Bool_t force, void *ptr) const override;  Call to delete/destruct individual item. ;  ;  Public Member Functions inherited from TGenCollectionProxy;  TGenCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  TGenCollectionProxy (const TGenCollectionProxy &copy);  Build a proxy for an emulated container. ;  ;  TGenCollectionProxy (Info_t typ, size_t iter_size);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  ~TGenCollectionProxy () override;  Standard destructor. ;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocate the needed space. ;  ; void Clear (const char *opt="""") override;  Clear the emulated collection. ;  ; void Commit (void *env) override;  Commit the change. ;  ; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenMapProxy.html:68,Guid,Guide,68,doc/master/classTGenMapProxy.html,https://root.cern,https://root.cern/doc/master/classTGenMapProxy.html,1,['Guid'],['Guide']
Usability,". ROOT: TGenPhaseSpace Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGenPhaseSpace Class ReferenceMath » Legacy Physics Classes. ; Legacy Code TGenPhaseSpace is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TGenPhaseSpace might still be a valid solution. No alternative classes are currently available. ; Utility class to generate n-body event, with constant cross-section (default) or with Fermi energy dependence (opt=""Fermi""). The event is generated in the center-of-mass frame, but the decay products are finally boosted using the betas of the original particle.; The code is based on the GENBOD function (W515 from CERNLIB) using the Raubold and Lynch method F. James, Monte Carlo Phase Space, CERN 68-15 (1968); see example of use in PhaseSpace.C; Note that Momentum, Energy units are Gev/C, GeV ; Definition at line 15 of file TGenPhaseSpace.h. Public Member Functions;  TGenPhaseSpace ();  ;  TGenPhaseSpace (const TGenPhaseSpace &gen);  Copy constructor. ;  ;  ~TGenPhaseSpace () override;  ; Double_t Generate ();  Generate a random final state. ;  ; TLorentzVector * GetDecay (Int_t n);  Return Lorentz vector corresponding to decay n. ;  ; Int_t GetNt () const;  ; Double_t GetWtMax () const;  ; TClass * IsA () const override;  ; TGenPhaseSpace & operator= (const TGenPhaseSpace &gen);  Assignment operator. ;  ; Bool_t SetDecay (TLorentzVector &P, Int_t nt, const Double_t *mass, Option_t *opt="""");  Input: ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenPhaseSpace.html:70,Guid,Guide,70,doc/master/classTGenPhaseSpace.html,https://root.cern,https://root.cern/doc/master/classTGenPhaseSpace.html,1,['Guid'],['Guide']
Usability,". ROOT: TGenSetProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TGenSetProxy Class ReferenceInput/Output Library. ; Localoptimization class. ; Collection proxies get copied. On copy we switch the type of the proxy to the concrete STL type. The concrete types are optimized for element access. ; Definition at line 232 of file TGenCollectionProxy.cxx. Public Member Functions;  TGenSetProxy (const TGenCollectionProxy &c);  ;  ~TGenSetProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ;  Public Member Functions inherited from TGenVectorProxy;  TGenVectorProxy (const TGenCollectionProxy &c);  ;  ~TGenVectorProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ; void DeleteItem (Bool_t force, void *ptr) const override;  Call to delete/destruct individual item. ;  ;  Public Member Functions inherited from TGenCollectionProxy;  TGenCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  TGenCollectionProxy (const TGenCollectionProxy &copy);  Build a proxy for an emulated container. ;  ;  TGenCollectionProxy (Info_t typ, size_t iter_size);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  ~TGenCollectionProxy () override;  Standard destructor. ;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocate the needed space. ;  ; void Clear (const char *opt="""") override;  Clear the emulated collection. ;  ; void Commit (void *env) override;  Commit the change. ;  ; TVirtualCollectionProxy * Generate () const override;  Virtual copy constructor. ;  ; TClass * GetCollectionClass () const override;  Return a pointer to the TClass representing the container. ;  ; Int_t GetCollectionType () const override;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenSetProxy.html:68,Guid,Guide,68,doc/master/classTGenSetProxy.html,https://root.cern,https://root.cern/doc/master/classTGenSetProxy.html,1,['Guid'],['Guide']
Usability,". ROOT: TGenVectorBoolProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TGenVectorBoolProxy Class ReferenceInput/Output Library. ; Local optimization class. ; Collection proxies get copied. On copy we switch the type of the proxy to the concrete STL type. The concrete types are optimized for element access. ; Definition at line 88 of file TGenCollectionProxy.cxx. Public Member Functions;  TGenVectorBoolProxy (const TGenCollectionProxy &c);  ;  ~TGenVectorBoolProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ; void DeleteItem (Bool_t force, void *ptr) const override;  Call to delete/destruct individual item. ;  ;  Public Member Functions inherited from TGenCollectionProxy;  TGenCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  TGenCollectionProxy (const TGenCollectionProxy &copy);  Build a proxy for an emulated container. ;  ;  TGenCollectionProxy (Info_t typ, size_t iter_size);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  ~TGenCollectionProxy () override;  Standard destructor. ;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocate the needed space. ;  ; void Clear (const char *opt="""") override;  Clear the emulated collection. ;  ; void Commit (void *env) override;  Commit the change. ;  ; TVirtualCollectionProxy * Generate () const override;  Virtual copy constructor. ;  ; TClass * GetCollectionClass () const override;  Return a pointer to the TClass representing the container. ;  ; Int_t GetCollectionType () const override;  Return the type of collection see TClassEdit::ESTLType. ;  ; TStreamerInfoActions::TActionSequence * GetConversionReadMemberWiseActions (TClass *oldClass, Int_t version) override",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenVectorBoolProxy.html:75,Guid,Guide,75,doc/master/classTGenVectorBoolProxy.html,https://root.cern,https://root.cern/doc/master/classTGenVectorBoolProxy.html,1,['Guid'],['Guide']
Usability,". ROOT: TGenVectorProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TGenVectorProxy Class ReferenceInput/Output Library. ; Local optimization class. ; Collection proxies get copied. On copy we switch the type of the proxy to the concrete STL type. The concrete types are optimized for element access. ; Definition at line 39 of file TGenCollectionProxy.cxx. Public Member Functions;  TGenVectorProxy (const TGenCollectionProxy &c);  ;  ~TGenVectorProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ; void DeleteItem (Bool_t force, void *ptr) const override;  Call to delete/destruct individual item. ;  ;  Public Member Functions inherited from TGenCollectionProxy;  TGenCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  TGenCollectionProxy (const TGenCollectionProxy &copy);  Build a proxy for an emulated container. ;  ;  TGenCollectionProxy (Info_t typ, size_t iter_size);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  ~TGenCollectionProxy () override;  Standard destructor. ;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocate the needed space. ;  ; void Clear (const char *opt="""") override;  Clear the emulated collection. ;  ; void Commit (void *env) override;  Commit the change. ;  ; TVirtualCollectionProxy * Generate () const override;  Virtual copy constructor. ;  ; TClass * GetCollectionClass () const override;  Return a pointer to the TClass representing the container. ;  ; Int_t GetCollectionType () const override;  Return the type of collection see TClassEdit::ESTLType. ;  ; TStreamerInfoActions::TActionSequence * GetConversionReadMemberWiseActions (TClass *oldClass, Int_t version) override;  Return the set of action necessary ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenVectorProxy.html:71,Guid,Guide,71,doc/master/classTGenVectorProxy.html,https://root.cern,https://root.cern/doc/master/classTGenVectorProxy.html,1,['Guid'],['Guide']
Usability,". ROOT: TGenerator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGenerator Class ReferenceMonte Carlo » EG. ; The interface to various event generators. ; Is an base class, that defines the interface of ROOT to various ; event generators. Every event generator should inherit from ; TGenerator or its subclasses. . Derived class can overload the member function GenerateEvent ; to do the actual event generation (e.g., call PYEVNT or similar). . The derived class should overload the member function ; ImportParticles (both types) to read the internal storage of the ; generated event into either the internal TObjArray or the passed ; TClonesArray of TParticles. . If the generator code stores event data in the /HEPEVT/ common block Then the default implementation of ImportParticles should suffice. ; The common block /HEPEVT/ is structed like . // C ; typedef struct { ; Int_t nevhep; // Event number ; Int_t nhep; // # of particles ; Int_t isthep[4000]; // Status flag of i'th particle ; Int_t idhep[4000]; // PDG # of particle ; Int_t jmohep[4000][2]; // 1st & 2nd mother particle # ; Int_t jdahep[4000][2]; // 1st & 2nd daughter particle # ; Double_t phep[4000][5]; // 4-momentum and 1 word ; Double_t vhep[4000][4]; // 4-position of production ; } HEPEVT_DEF; ; ; ; C Fortran ; COMMON/HEPEVT/NEVHEP,NHEP,ISTHEP(4000),IDHEP(4000), ; + JMOHEP(2,4000),JDAHEP(2,4000),PHEP(5,4000),VHEP(4,4000) ; INTEGER NEVHEP,NHEP,ISTHEP,IDHEP,JMOHEP,JDAHEP ; DOUBLE PRECISION PHEP,VHEP ; The generic member functions SetParameter and GetParameter can be overloaded to set and get parameters of the event generator.; Note, if the derived class interfaces a (set of) Fortran common blocks (like TPythia, TVenus does), one better make the derived class a singleton. That is, something like; class MyGe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenerator.html:66,Guid,Guide,66,doc/master/classTGenerator.html,https://root.cern,https://root.cern/doc/master/classTGenerator.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoArb8 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoArb8 Class Reference. . Definition at line 17 of file TGeoArb8.h. Public Member Functions;  TGeoArb8 ();  ;  TGeoArb8 (const char *name, Double_t dz, Double_t *vertices=nullptr);  ;  TGeoArb8 (Double_t dz, Double_t *vertices=nullptr);  ;  ~TGeoArb8 () override;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; void ComputeTwist ();  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistToPlane (const Double_t *point, const Double_t *dir, Int_t ipl, Bool_t in) const;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ; void GetBoundingCylinder (Double_t *param) const override;  ; Int_t GetByteCount",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoArb8.html:64,Guid,Guide,64,doc/master/classTGeoArb8.html,https://root.cern,https://root.cern/doc/master/classTGeoArb8.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoAtt Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGeoAtt Class ReferenceThe Geometry Package » Geometry classes. ; Visualization and tracking attributes for volumes and nodes. ; The TGeoAtt class is an utility for volume/node visibility and tracking activity. By default the attributes are set to visible/active ; Definition at line 17 of file TGeoAtt.h. Public Types; enum  { kBitMask = 0x00ffffff; };  ; enum  EGeoActivityAtt { kActOverride = (1ULL << ( 8 )); , kActNone = (1ULL << ( 9 )); , kActThis = (1ULL << ( 10 )); , kActDaughters = (1ULL << ( 11 )); };  ; enum  EGeoOptimizationAtt { kUseBoundingBox = (1ULL << ( 16 )); , kUseVoxels = (1ULL << ( 17 )); , kUseGsord = (1ULL << ( 18 )); };  ; enum  EGeoSavePrimitiveAtt { kSavePrimitiveAtt = (1ULL << ( 19 )); , kSaveNodesAtt = (1ULL << ( 20 )); };  ; enum  EGeoVisibilityAtt { ;   kVisOverride = (1ULL << ( 0 )); , kVisNone = (1ULL << ( 1 )); , kVisThis = (1ULL << ( 2 )); , kVisDaughters = (1ULL << ( 3 )); , ;   kVisOneLevel = (1ULL << ( 4 )); , kVisStreamed = (1ULL << ( 5 )); , kVisTouched = (1ULL << ( 6 )); , kVisOnScreen = (1ULL << ( 7 )); , ;   kVisContainers = (1ULL << ( 12 )); , kVisOnly = (1ULL << ( 13 )); , kVisBranch = (1ULL << ( 14 )); , kVisRaytrace = (1ULL << ( 15 )). };  . Public Member Functions;  TGeoAtt ();  Default constructor. ;  ;  TGeoAtt (Option_t *vis_opt, Option_t *activity_opt="""", Option_t *optimization_opt="""");  Constructor. ;  ; virtual ~TGeoAtt ();  Destructor. ;  ; virtual TClass * IsA () const;  ; Bool_t IsActive () const;  ; Bool_t IsActiveDaughters () const;  ; Bool_t IsVisBranch () const;  ; Bool_t IsVisContainers () const;  ; Bool_t IsVisDaughters () const;  ; Bool_t IsVisible () const;  ; Bool_t IsVisLeaves () const;  ; Bool_t IsVisOnly () const;  ; Bool_t IsVisRaytrace () const;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoAtt.html:63,Guid,Guide,63,doc/master/classTGeoAtt.html,https://root.cern,https://root.cern/doc/master/classTGeoAtt.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoBBox Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoBBox Class Reference. . Definition at line 17 of file TGeoBBox.h. Public Member Functions;  TGeoBBox ();  ;  TGeoBBox (const char *name, Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ;  TGeoBBox (Double_t *param);  ;  TGeoBBox (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ;  ~TGeoBBox () override;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Bool_t CouldBeCrossed (const Double_t *point, const Double_t *dir) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoBBox.html:64,Guid,Guide,64,doc/master/classTGeoBBox.html,https://root.cern,https://root.cern/doc/master/classTGeoBBox.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoBatemanSol Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TGeoBatemanSol Class Reference. . Definition at line 286 of file TGeoElement.h. Classes; struct  BtCoef_t;  . Public Member Functions;  TGeoBatemanSol ();  ;  TGeoBatemanSol (const TGeoBatemanSol &other);  Copy constructor. ;  ;  TGeoBatemanSol (const TObjArray *chain);  Default ctor. ;  ;  TGeoBatemanSol (TGeoElementRN *elem);  Default ctor. ;  ;  ~TGeoBatemanSol () override;  Destructor. ;  ; Double_t Concentration (Double_t time) const;  Find concentration of the element at a given time. ;  ; void Draw (Option_t *option="""") override;  Draw the solution of Bateman equation versus time. ;  ; void FindSolution (const TObjArray *array);  Find the solution for the Bateman equations corresponding to the decay chain described by an array ending with element X. ;  ; void GetCoeff (Int_t i, Double_t &cn, Double_t &lambda) const;  ; TGeoElementRN * GetElement () const;  ; Int_t GetNcoeff () const;  ; void GetRange (Double_t &tmin, Double_t &tmax) const;  ; TGeoElementRN * GetTopElement () const;  ; TClass * IsA () const override;  ; void Normalize (Double_t factor);  Normalize all coefficients with a given factor. ;  ; TGeoBatemanSol & operator+= (const TGeoBatemanSol &other);  Addition of other solution. ;  ; TGeoBatemanSol & operator= (const TGeoBatemanSol &other);  Assignment. ;  ; void Print (Option_t *option="""") const override;  Print concentration evolution. ;  ; void SetFactor (Double_t factor);  ; void SetRange (Double_t tmin=0., Double_t tmax=0.);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoBatemanSol.html:70,Guid,Guide,70,doc/master/classTGeoBatemanSol.html,https://root.cern,https://root.cern/doc/master/classTGeoBatemanSol.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoBoolNode Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGeoBoolNode Class ReferenceabstractThe Geometry Package » Geometry classes. ; Base class for Boolean operations between two shapes. ; A Boolean node describes a Boolean operation between 'left' and 'right' shapes positioned with respect to an ARBITRARY reference frame. The boolean node is referenced by a mother composite shape and its shape components may be primitive but also composite shapes. The later situation leads to a binary tree hierarchy. When the parent composite shape is used to create a volume, the reference frame of the volume is chosen to match the frame in which node shape components were defined.; The positioned shape components may or may not be disjoint. The specific implementations for Boolean nodes are:. TGeoUnion - representing the Boolean union of two positioned shapes; TGeoSubtraction - representing the Boolean subtraction of two positioned shapes; TGeoIntersection - representing the Boolean intersection of two positioned shapes . Definition at line 25 of file TGeoBoolNode.h. Classes; struct  ThreadData_t;  . Public Types; enum  EGeoBoolType { kGeoUnion; , kGeoIntersection; , kGeoSubtraction; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoBoolNode.html:68,Guid,Guide,68,doc/master/classTGeoBoolNode.html,https://root.cern,https://root.cern/doc/master/classTGeoBoolNode.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoBorderSurface Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TGeoBorderSurface Class Reference. . Definition at line 206 of file TGeoOpticalSurface.h. Public Member Functions;  TGeoBorderSurface ();  ;  TGeoBorderSurface (const char *name, const char *ref, TGeoOpticalSurface const *surf, TGeoNode const *node1, TGeoNode const *node2);  ;  ~TGeoBorderSurface () override;  ; TGeoNode const * GetNode1 () const;  ; TGeoNode const * GetNode2 () const;  ; TGeoOpticalSurface const * GetSurface () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  This method must be overridden when a class wants to print itself. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoBorderSurface.html:73,Guid,Guide,73,doc/master/classTGeoBorderSurface.html,https://root.cern,https://root.cern/doc/master/classTGeoBorderSurface.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoBranchArray Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGeoBranchArray Class ReferenceThe Geometry Package » Geometry classes. ; An array of daughter indices making a geometry path. ; Can be used to backup/restore a state. Allocated contiguously in memory.; To setup an object of this type, one should use:; TGeoBranchArray *array = new TGeoBranchArray(level);; array->InitFromNavigator(nav); // To initialize from current navigator state; TGeoBranchArrayAn array of daughter indices making a geometry path.Definition TGeoBranchArray.h:22; TGeoBranchArray::InitFromNavigatorvoid InitFromNavigator(TGeoNavigator *nav)Init the branch array from current navigator state.Definition TGeoBranchArray.cxx:343; The navigator can be updated to reflect this path array: array->UpdateNavigator(); ; Definition at line 22 of file TGeoBranchArray.h. Public Types; enum  EGeoBATypes { kBASelfAlloc = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoBranchArray (TRootIOCtor *);  ;  ~TGeoBranchArray () override;  ; void AddLevel (Int_t dindex);  Add and extra daughter to the current path array. No validity check performed ! ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoBranchArray.html:71,Guid,Guide,71,doc/master/classTGeoBranchArray.html,https://root.cern,https://root.cern/doc/master/classTGeoBranchArray.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoBuilder Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TGeoBuilder Class ReferenceThe Geometry Package » Geometry classes. ; Utility class for creating geometry objects.These will be associated with the current selected geometry manager object: ; TGeoBuilder::Instance()->SetGeometry(gGeoManager);; The geometry builder is a singleton that may be used to build one or more geometries. ; Definition at line 26 of file TGeoBuilder.h. Public Member Functions;  ~TGeoBuilder () override;  Destructor. ;  ; Int_t AddMaterial (TGeoMaterial *material);  Add a material to the list. Returns index of the material in list. ;  ; Int_t AddShape (TGeoShape *shape);  Add a shape to the list. Returns index of the shape in list. ;  ; Int_t AddTransformation (TGeoMatrix *matrix);  Add a matrix to the list. Returns index of the matrix in list. ;  ; TGeoVolume * Division (const char *name, const char *mother, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step, Int_t numed=0, Option_t *option="""");  Create a new volume by dividing an existing one (GEANT3 like) ;  ; TClass * IsA () const override;  ; TGeoVolume * MakeArb8 (const char *name, TGeoMedium *medium, Double_t dz, Double_t *vertices=nullptr);  Make an TGeoArb8 volume. ;  ; TGeoVolume * MakeBox (const char *name, TGeoMedium *medium, Double_t dx, Double_t dy, Double_t dz);  Make in one step a volume pointing to a box shape with given medium. ;  ; TGeoVolume * MakeCone (const char *name, TGeoMedium *medium, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2);  Make in one step a volume pointing to a cone shape with given medium. ;  ; TGeoVolume * MakeCons (const char *name, TGeoMedium *medium, Double_t dz, Double_t rmin1, Double_t rmax1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoBuilder.html:67,Guid,Guide,67,doc/master/classTGeoBuilder.html,https://root.cern,https://root.cern/doc/master/classTGeoBuilder.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoCacheState Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoCacheState Class ReferenceThe Geometry Package » Geometry classes. ; Class storing the state of the cache at a given moment. ; Definition at line 28 of file TGeoCache.h. Public Member Functions;  TGeoCacheState ();  Default ctor. ;  ;  TGeoCacheState (Int_t capacity);  Ctor. ;  ;  ~TGeoCacheState () override;  Dtor. ;  ; Bool_t GetState (Int_t &level, Int_t &nmany, Double_t *point) const;  Restore a modeler state. ;  ; TClass * IsA () const override;  ; void SetState (Int_t level, Int_t startlevel, Int_t nmany, Bool_t ovlp, Double_t *point=nullptr);  Fill current modeller state. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCacheState.html:70,Guid,Guide,70,doc/master/classTGeoCacheState.html,https://root.cern,https://root.cern/doc/master/classTGeoCacheState.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoChecker Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGeoChecker Class ReferenceThe Geometry Package » Geometry painter. ; Geometry checking package. ; TGeoChecker class provides several geometry checking methods. There are two types of tests that can be performed. One is based on random sampling or ray-tracing and provides a visual check on how navigation methods work for a given geometry. The second actually checks the validity of the geometry definition in terms of overlapping/extruding objects. Both types of checks can be done for a given branch (starting with a given volume) as well as for the geometry as a whole.; TGeoChecker::CheckPoint(Double_t x, Double_t y, Double_t z); This method can be called directly from the TGeoManager class and print a report on how a given point is classified by the modeller: which is the full path to the deepest node containing it, and the (under)estimation of the distance to the closest boundary (safety).; TGeoChecker::RandomPoints(Int_t npoints); Can be called from TGeoVolume class. It first draws the volume and its content with the current visualization settings. Then randomly samples points in its bounding box, plotting in the geometry display only the points classified as belonging to visible volumes.; TGeoChecker::RandomRays(Int_t nrays, Double_t startx, starty, startz); Can be called and acts in the same way as the previous, but instead of points, rays having random isotropic directions are generated from the given point. A raytracing algorithm propagates all rays until they exit geometry, plotting all segments crossing visible nodes in the same color as these.; TGeoChecker::Test(Int_t npoints); Implementation of TGeoManager::Test(). Computes the time for the modeller to find out ""Where am I?"" for a given nu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoChecker.html:67,Guid,Guide,67,doc/master/classTGeoChecker.html,https://root.cern,https://root.cern/doc/master/classTGeoChecker.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoCombiTrans Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGeoCombiTrans Class ReferenceThe Geometry Package » Geometry classes. ; Class describing rotation + translation. ; Most frequently used in the description of TGeoNode 's ; Definition at line 317 of file TGeoMatrix.h. Public Member Functions;  TGeoCombiTrans ();  dummy ctor ;  ;  TGeoCombiTrans (const char *name);  Named ctor. ;  ;  TGeoCombiTrans (const char *name, Double_t dx, Double_t dy, Double_t dz, TGeoRotation *rot);  Named ctor. ;  ;  TGeoCombiTrans (const TGeoCombiTrans &other);  ;  TGeoCombiTrans (const TGeoMatrix &other);  Copy ctor from generic matrix. ;  ;  TGeoCombiTrans (const TGeoTranslation &tr, const TGeoRotation &rot);  Constructor from a translation and a rotation. ;  ;  TGeoCombiTrans (Double_t dx, Double_t dy, Double_t dz, TGeoRotation *rot);  Constructor from a translation specified by X,Y,Z and a pointer to a rotation. ;  ;  ~TGeoCombiTrans () override;  destructor ;  ; void Clear (Option_t *option="""") override;  Reset translation/rotation to identity. ;  ; TGeoRotation * GetRotation () const;  ; const Double_t * GetRotationMatrix () const override;  get the rotation array ;  ; const Double_t * GetScale () const override;  ; const Double_t * GetTranslation () const override;  ; TGeoHMatrix Inverse () const override;  Return a temporary inverse of this. ;  ; TClass * IsA () const override;  ; TGeoMatrix * MakeClone () const override;  Make a clone of this matrix. ;  ; void Multiply (const TGeoMatrix *right);  multiply to the right with an other transformation if right is identity matrix, just return ;  ; TGeoCombiTrans operator* (const TGeoMatrix &other) const;  ; TGeoCombiTrans & operator*= (const TGeoMatrix &other);  Composition. ;  ; TGeoCombiTrans & operator= (const TGeoCombiTrans &other);  ; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCombiTrans.html:70,Guid,Guide,70,doc/master/classTGeoCombiTrans.html,https://root.cern,https://root.cern/doc/master/classTGeoCombiTrans.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoCompositeShape Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TGeoCompositeShape Class ReferenceThe Geometry Package » Shapes. ; Composite shapes are Boolean combinations of two or more shape components. ; The supported Boolean operations are union (+), intersection (*) and subtraction(-). Composite shapes derive from the base TGeoShape** class, therefore providing all shape features: computation of bounding box, finding if a given point is inside or outside the combination, as well as computing the distance to entering/exiting. They can be directly used for creating volumes or used in the definition of other composite shapes.; Composite shapes are provided in order to complement and extend the set of basic shape primitives. They have a binary tree internal structure, therefore all shape-related geometry queries are signals propagated from top level down to the final leaves, while the provided answers are assembled and interpreted back at top. This CSG (composite solid geometry) hierarchy is effective for small number of components, while performance drops dramatically for large structures. Building a complete geometry in this style is virtually possible but highly not recommended.; The Structure of Composite Shapes; A composite shape can always be looked as the result of a Boolean operation between only two shape components. All information identifying these two components as well as their positions with respect to the frame of the composite is represented by an object called Boolean node. A composite shape has a pointer to such a Boolean node. Since the shape components may also be composites, they will also contain binary Boolean nodes branching out other two shapes in the hierarchy. Any such branch ends-up when the final leaves are no longer comp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCompositeShape.html:74,Guid,Guide,74,doc/master/classTGeoCompositeShape.html,https://root.cern,https://root.cern/doc/master/classTGeoCompositeShape.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoCone Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoCone Class Reference. . Definition at line 17 of file TGeoCone.h. Public Member Functions;  TGeoCone ();  ;  TGeoCone (const char *name, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2);  ;  TGeoCone (Double_t *params);  ;  TGeoCone (Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2);  ;  ~TGeoCone () override;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; const char * GetAxisName (Int_t iaxis) const override;  ; Double_t GetAxisRange (Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCone.html:64,Guid,Guide,64,doc/master/classTGeoCone.html,https://root.cern,https://root.cern/doc/master/classTGeoCone.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoConeSeg Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoConeSeg Class Reference. . Definition at line 99 of file TGeoCone.h. Public Member Functions;  TGeoConeSeg ();  ;  TGeoConeSeg (const char *name, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2);  ;  TGeoConeSeg (Double_t *params);  ;  TGeoConeSeg (Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2);  ;  ~TGeoConeSeg () override;  ; void AfterStreamer () override;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoConeSeg.html:67,Guid,Guide,67,doc/master/classTGeoConeSeg.html,https://root.cern,https://root.cern/doc/master/classTGeoConeSeg.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoCtub Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGeoCtub Class Reference. . Definition at line 173 of file TGeoTube.h. Public Member Functions;  TGeoCtub ();  ;  TGeoCtub (const char *name, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Double_t lx, Double_t ly, Double_t lz, Double_t tx, Double_t ty, Double_t tz);  ;  TGeoCtub (Double_t *params);  ;  TGeoCtub (Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Double_t lx, Double_t ly, Double_t lz, Double_t tx, Double_t ty, Double_t tz);  ;  ~TGeoCtub () override;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCtub.html:64,Guid,Guide,64,doc/master/classTGeoCtub.html,https://root.cern,https://root.cern/doc/master/classTGeoCtub.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoDecayChannel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TGeoDecayChannel Class ReferenceThe Geometry Package » Geometry classes. ; A decay channel for a radionuclide. ; Definition at line 207 of file TGeoElement.h. Public Types; enum  ENuclearDecayMode { ;   kBitMask32 = 0xffffffff; , k2BetaMinus = (1ULL << ( 0 )); , kBetaMinus = (1ULL << ( 1 )); , kNeutronEm = (1ULL << ( 2 )); , ;   kProtonEm = (1ULL << ( 3 )); , kAlpha = (1ULL << ( 4 )); , kECF = (1ULL << ( 5 )); , kElecCapt = (1ULL << ( 6 )); , ;   kIsoTrans = (1ULL << ( 7 )); , kI = (1ULL << ( 8 )); , kSpontFiss = (1ULL << ( 9 )); , k2P = (1ULL << ( 10 )); , ;   k2N = (1ULL << ( 11 )); , k2A = (1ULL << ( 12 )); , kCarbon12 = (1ULL << ( 13 )); , kCarbon14 = (1ULL << ( 14 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoDecayChannel ();  ;  TGeoDecayChannel (const TGeoDecayChannel &dc);  ;  TGeoDecayChannel (Int_t decay, Int_t diso, Double_t branchingRatio, Double_t qValue);  ;  ~TGeoDecayChannel () override;  ; Double_t BranchingRatio () const;  ; TGeoElementRN * Daughter () const;  ; UInt_t Decay () const;  ; virtual void DecayShift (Int_t &dA, Int_t &dZ, Int_t &dI) const;  Returns variati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoDecayChannel.html:72,Guid,Guide,72,doc/master/classTGeoDecayChannel.html,https://root.cern,https://root.cern/doc/master/classTGeoDecayChannel.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoElement Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Attributes |; Private Member Functions |; List of all members ; TGeoElement Class ReferenceThe Geometry Package » Materials. ; Base class for chemical elements. ; Definition at line 36 of file TGeoElement.h. Public Member Functions;  TGeoElement ();  Default constructor. ;  ;  TGeoElement (const char *name, const char *title, Int_t nisotopes);  Element having isotopes. ;  ;  TGeoElement (const char *name, const char *title, Int_t z, Double_t a);  Obsolete constructor. ;  ;  TGeoElement (const char *name, const char *title, Int_t z, Int_t n, Double_t a);  Constructor. ;  ;  ~TGeoElement () override;  destructor ;  ; Double_t A () const;  ; void AddIsotope (TGeoIsotope *isotope, Double_t relativeAbundance);  Add an isotope for this element. All isotopes have to be isotopes of the same element. ;  ; void ComputeDerivedQuantities ();  Calculate properties for an atomic number. ;  ; virtual Int_t ENDFCode () const;  ; Double_t GetfCoulomb () const;  ; Double_t GetfRadTsai () const;  ; TGeoIsotope * GetIsotope (Int_t i) const;  Return i-th isotope in the element. ;  ; Int_t GetNisotopes () const;  ; Double_t GetRelativeAbundance (Int_t i) const;  Return relative abundance of i-th isotope in this element. ;  ; virtual Double_t GetSpecificActivity () const;  ; Bool_t HasIsotopes () const;  ; TClass * IsA () const override;  ; Bool_t IsDefined () const;  ; virtual Bool_t IsRadioNuclide () const;  ; Bool_t IsUsed () const;  ; Int_t N () const;  ; Double_t Neff () const;  Returns effective number of nucleons. ;  ; void Print (Option_t *option="""") const override;  Print this isotope. ;  ; void SetDefined (Bool_t flag=kTRUE);  ; void SetUsed (Bool_t flag=kTRUE);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void Streame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoElement.html:67,Guid,Guide,67,doc/master/classTGeoElement.html,https://root.cern,https://root.cern/doc/master/classTGeoElement.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoElementRN Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGeoElementRN Class ReferenceThe Geometry Package » Geometry classes. ; Class representing a radionuclidevoid TGeoManager::SetDefaultRootUnits() { if ( fgDefaultUnits == kRootUnits ) { return; } else if ( gGeometryLocked ) { TError::Fatal(""TGeoManager"",""The system of units may only be changed once BEFORE any elements and materials are; created!""); } fgDefaultUnits = kRootUnits; }. ; Definition at line 132 of file TGeoElement.h. Public Member Functions;  TGeoElementRN ();  Default constructor. ;  ;  TGeoElementRN (Int_t A, Int_t Z, Int_t iso, Double_t level, Double_t deltaM, Double_t halfLife, const char *JP, Double_t natAbun, Double_t th_f, Double_t tg_f, Double_t th_s, Double_t tg_s, Int_t status);  Constructor. ;  ;  ~TGeoElementRN () override;  Destructor. ;  ; void AddDecay (Int_t decay, Int_t diso, Double_t branchingRatio, Double_t qValue);  Adds a decay mode for this element. ;  ; void AddDecay (TGeoDecayChannel *dc);  Adds a decay channel to the list of decays. ;  ; void AddRatio (TGeoBatemanSol &ratio);  Adds a proportion ratio to the existing one. ;  ; Int_t AtomicNo () const;  ; Bool_t CheckDecays () const;  Check if all decay chain of the element is OK. ;  ; Int_t DecayResult (TGeoDecayChannel *dc) const;  Returns ENDF code of decay result. ;  ; TObjArray * Decays () const;  ; Int_t ENDFCode () const override;  ; void FillPopulation (TObjArray *population, Double_t precision=0.001, Double_t factor=1.);  Fills the input array with the set of RN elements resulting from the decay of this one. ;  ; Int_t GetNdecays () const;  Get number of decay channels of this element. ;  ; Double_t GetSpecificActivity () const override;  Get the activity in Bq of a gram o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoElementRN.html:69,Guid,Guide,69,doc/master/classTGeoElementRN.html,https://root.cern,https://root.cern/doc/master/classTGeoElementRN.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoElementTable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Types |; Private Attributes |; List of all members ; TGeoElementTable Class ReferenceThe Geometry Package » Geometry classes. ; Table of elements. ; Definition at line 398 of file TGeoElement.h. Public Types; enum  EGeoETStatus { kETDefaultElements = (1ULL << ( 14 )); , kETRNElements = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoElementTable ();  default constructor ;  ;  TGeoElementTable (Int_t nelements);  constructor ;  ;  ~TGeoElementTable () override;  destructor ;  ; void AddElement (const char *name, const char *title, Int_t z, Double_t a);  Add an element to the table. Obsolete. ;  ; void AddElement (const char *name, const char *title, Int_t z, Int_t n, Double_t a);  Add an element to the table. ;  ; void AddElement (TGeoElement *elem);  Add a custom element to the table. ;  ; void AddElementRN (TGeoElementRN *elem);  Add a radionuclide to the table and map it. ;  ; void AddIsotope (TGeoIsotope *isotope);  Add isotope to the table. ;  ; void BuildDefaultElements ();  Creates the default element table. ;  ; Bool_t CheckTable () const;  Checks status of element table. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoElementTable.html:72,Guid,Guide,72,doc/master/classTGeoElementTable.html,https://root.cern,https://root.cern/doc/master/classTGeoElementTable.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoEltu Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; TGeoEltu Class Reference. . Definition at line 17 of file TGeoEltu.h. Public Member Functions;  TGeoEltu ();  ;  TGeoEltu (const char *name, Double_t a, Double_t b, Double_t dz);  ;  TGeoEltu (Double_t *params);  ;  TGeoEltu (Double_t a, Double_t b, Double_t dz);  ;  ~TGeoEltu () override;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; virtual Double_t GetA () const;  ; virtual Double_t GetB () const;  ; void GetBoundingCylinder (Double_t *param) const override;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections, Bool_t loca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoEltu.html:64,Guid,Guide,64,doc/master/classTGeoEltu.html,https://root.cern,https://root.cern/doc/master/classTGeoEltu.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoExtension Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TGeoExtension Class ReferenceabstractThe Geometry Package » Geometry classes. ; ABC for user objects attached to TGeoVolume or TGeoNode. ; Provides interface for getting a reference (grab) and releasing the extension object (release), allowing for derived classes to implement reference counted sharing. The user who should attach extensions to logical volumes or nodes BEFORE applying misalignment information so that these will be available to all copies. ; Definition at line 17 of file TGeoExtension.h. Public Member Functions; virtual TGeoExtension * Grab ()=0;  ; TClass * IsA () const override;  ; virtual void Release () const =0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoExtension.html:69,Guid,Guide,69,doc/master/classTGeoExtension.html,https://root.cern,https://root.cern/doc/master/classTGeoExtension.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoGenTrans Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGeoGenTrans Class ReferenceThe Geometry Package » Geometry classes. ; Most general transformation, holding a translation, a rotation and a scale. ; Definition at line 375 of file TGeoMatrix.h. Public Member Functions;  TGeoGenTrans ();  dummy ctor ;  ;  TGeoGenTrans (const char *name);  constructor ;  ;  TGeoGenTrans (const char *name, Double_t dx, Double_t dy, Double_t dz, Double_t sx, Double_t sy, Double_t sz, TGeoRotation *rot);  constructor ;  ;  TGeoGenTrans (Double_t dx, Double_t dy, Double_t dz, Double_t sx, Double_t sy, Double_t sz, TGeoRotation *rot);  constructor ;  ;  ~TGeoGenTrans () override;  destructor ;  ; void Clear (Option_t *option="""") override;  clear the fields of this transformation ;  ; const Double_t * GetScale () const override;  ; TGeoHMatrix Inverse () const override;  Return a temporary inverse of this. ;  ; TClass * IsA () const override;  ; TGeoMatrix * MakeClone () const override;  Make a clone of this matrix. ;  ; Bool_t Normalize ();  A scale transformation should be normalized by sx*sy*sz factor. ;  ; void SetScale (Double_t *scale);  ; void SetScale (Double_t sx, Double_t sy, Double_t sz);  set the scale ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoCombiTrans;  TGeoCombiTrans ();  dummy ctor ;  ;  TGeoCombiTrans (const char *name);  Named ctor. ;  ;  TGeoCombiTrans (const char *name, Double_t dx, Double_t dy, Double_t dz, TGeoRotation *rot);  Named ctor. ;  ;  TGeoCombiTrans (const TGeoCombiTrans &other);  ;  TGeoCombiTrans (const TGeoMatrix &other);  Copy ctor from generic matrix. ;  ;  TGeoCombiTrans (const TGeoTranslation &tr, const TGeoRota",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoGenTrans.html:68,Guid,Guide,68,doc/master/classTGeoGenTrans.html,https://root.cern,https://root.cern/doc/master/classTGeoGenTrans.html,3,"['Clear', 'Guid', 'clear']","['Clear', 'Guide', 'clear']"
Usability,". ROOT: TGeoGlobalMagField Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TGeoGlobalMagField Class ReferenceThe Geometry Package » Geometry classes. ; Global magnetic field manager. ; Provides access to and owns the actual magnetic field set via SetField(). The field is deleted upon destruction of the field manager at the end of ROOT session or by calling:; TGeoGlobalMagField::Instance()->SetField(0).; TGeoGlobalMagField::SetFieldvoid SetField(TVirtualMagField *field)Field setter. Deletes previous field if any. Acts only if fLock=kFALSE.Definition TGeoGlobalMagField.cxx:86; TGeoGlobalMagField::Instancestatic TGeoGlobalMagField * Instance()Returns always a valid static pointer to the field manager.Definition TGeoGlobalMagField.cxx:118; The previous global field is deleted upon replacement with notification.; The global field manager provides access to the global field via:; TGeoGlobalMagField::Instance()->GetField(); TGeoGlobalMagField::GetFieldTVirtualMagField * GetField() constDefinition TGeoGlobalMagField.h:34; One can directly call the Field() method of a field via the global field manager:; TGeoGlobalMagField::Instance()->Field(x,B); TGeoGlobalMagField::Fieldvoid Field(const Double_t *x, Double_t *B)Definition TGeoGlobalMagField.h:44; xDouble_t x[n]Definition legend1.C:17. Definition at line 18 of file TGeoGlobalMagField.h. Public Member Functions;  TGeoGlobalMagField ();  Global field default constructor. ;  ;  ~TGeoGlobalMagField () override;  Global field destructor. ;  ; void Field (const Double_t *x, Double_t *B);  ; TVirtualMagField * GetField () const;  ; TClass * IsA () const override;  ; Bool_t IsLocked ();  ; void Lock ();  Locks the global magnetic field if this is set. Cannot be unlocked. ;  ; void SetField (TVirtualM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoGlobalMagField.html:74,Guid,Guide,74,doc/master/classTGeoGlobalMagField.html,https://root.cern,https://root.cern/doc/master/classTGeoGlobalMagField.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoGtra Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGeoGtra Class Reference. . Definition at line 149 of file TGeoArb8.h. Public Member Functions;  TGeoGtra ();  ;  TGeoGtra (const char *name, Double_t dz, Double_t theta, Double_t phi, Double_t twist, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2);  ;  TGeoGtra (Double_t dz, Double_t theta, Double_t phi, Double_t twist, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2);  ;  ~TGeoGtra () override;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; TGeoShape * GetMakeRuntimeShape (TGeoShape *mother, TGeoMatrix *mat) const override;  ; Double_t GetTwistAngle () const;  ; TClass * IsA () const override;  ; Double_t Safety (const Double_t *point, Bool_t in=kTRUE) const override;  ; void Safety_v (const Double_t *points, const Bool_t *inside, Double_t *safe, Int_t vecsize) const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetDimensions (Double_t *param) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoGtra.html:64,Guid,Guide,64,doc/master/classTGeoGtra.html,https://root.cern,https://root.cern/doc/master/classTGeoGtra.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoHMatrix Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TGeoHMatrix Class ReferenceThe Geometry Package » Geometry classes. ; Matrix class used for computing global transformations Should NOT be used for node definition. ; An instance of this class is generally used to pile-up local transformations starting from the top level physical node, down to the current node. ; Definition at line 458 of file TGeoMatrix.h. Public Member Functions;  TGeoHMatrix ();  dummy ctor ;  ;  TGeoHMatrix (const char *name);  constructor ;  ;  TGeoHMatrix (const TGeoHMatrix &other);  ;  TGeoHMatrix (const TGeoMatrix &matrix);  assignment ;  ;  ~TGeoHMatrix () override;  destructor ;  ; void Clear (Option_t *option="""") override;  clear the data for this matrix ;  ; void CopyFrom (const TGeoMatrix *other);  Fast copy method. ;  ; Double_t Determinant () const;  computes determinant of the rotation matrix ;  ; void FastRotZ (const Double_t *sincos);  Perform a rotation about Z having the sine/cosine of the rotation angle. ;  ; virtual Double_t * GetRotationMatrix ();  ; const Double_t * GetRotationMatrix () const override;  ; virtual Double_t * GetScale ();  ; const Double_t * GetScale () const override;  ; virtual Double_t * GetTranslation ();  ; const Double_t * GetTranslation () const override;  ; TGeoHMatrix Inverse () const override;  Return a temporary inverse of this. ;  ; TClass * IsA () const override;  ; TGeoMatrix * MakeClone () const override;  Make a clone of this matrix. ;  ; void Multiply (const TGeoMatrix &right);  ; void Multiply (const TGeoMatrix *right);  multiply to the right with an other transformation if right is identity matrix, just return ;  ; void MultiplyLeft (const TGeoMatrix &left);  ; void MultiplyLeft (const TGeoMatrix *left);  multiply to the left with an other transformati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoHMatrix.html:67,Guid,Guide,67,doc/master/classTGeoHMatrix.html,https://root.cern,https://root.cern/doc/master/classTGeoHMatrix.html,3,"['Clear', 'Guid', 'clear']","['Clear', 'Guide', 'clear']"
Usability,". ROOT: TGeoHalfSpace Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGeoHalfSpace Class ReferenceThe Geometry Package » Shapes. ; A half space is limited just by a plane, defined by a point and the normal direction. ; The point lies on the plane and the normal vector points outside the half space. The half space is the only shape which is infinite and can be used only in Boolean operations that result in non-infinite composite shapes (see also TGeoCompositeShape). A half space has to be defined using the constructor:; TGeoHalfSpace (const char *name, Double_t *point[3],; Double_t *norm[3]);; namechar name[80]Definition TGX11.cxx:110; TGeoHalfSpace::TGeoHalfSpaceTGeoHalfSpace()Dummy constructor.Definition TGeoHalfSpace.cxx:38; double. Definition at line 17 of file TGeoHalfSpace.h. Public Member Functions;  TGeoHalfSpace ();  Dummy constructor. ;  ;  TGeoHalfSpace (const char *name, Double_t *p, Double_t *n);  Constructor with name, point on the plane and normal. ;  ;  TGeoHalfSpace (Double_t *params);  Default constructor specifying minimum and maximum radius. ;  ;  ~TGeoHalfSpace () override;  destructor ;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  Compute normal to closest surface from POINT. ;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  Compute the normal for an array o points so that norm.dot.dir is positive Input: Arrays of point coordinates and directions + vector size Output: Array of normal directions. ;  ; Bool_t Contains (const Double_t *point) const override;  test if point is inside the half-space ;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoHalfSpace.html:69,Guid,Guide,69,doc/master/classTGeoHalfSpace.html,https://root.cern,https://root.cern/doc/master/classTGeoHalfSpace.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoHelix Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGeoHelix Class ReferenceThe Geometry Package » Shapes. ; Class representing a helix curve. ; A helix is a curve defined by the following equations:; x = (1/c) * COS(q*phi); y = (1/c) * SIN(q*phi); z = s * alfa; c#define c(i)Definition RSha256.hxx:101; qfloat * qDefinition THbookFile.cxx:89; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; where:; c = 1/Rxy - curvature in XY plane; phi - phi angle; S = 2*PI*s - vertical separation between helix loops; q = +/- 1 - (+)=left-handed, (-)=right-handed; PI#define PIDefinition SpecFuncMathCore.cxx:23; angleOption_t Option_t TPoint TPoint angleDefinition TGWin32VirtualXProxy.cxx:68; In particular, a helix describes the trajectory of a charged particle in magnetic field. In such case, the helix is right-handed for negative particle charge. To define a helix, one must define:; the curvature - positive defined; the Z step made after one full turn of the helix; the particle charge sign; the initial particle position and direction (force normalization to unit); the magnetic field direction. A helix provides:; propagation to a given Z position (in global frame) Double_t *point = TGeoHelix::PropagateToZ(Double_t z);; propagation to an arbitrary plane, returning also the new point; propagation in a geometry until the next crossed surface; computation of the total track length along a helix . Definition at line 19 of file TGeoHelix.h. Public Types; enum  EGeoHelixTypes { kHelixNeedUpdate = (1ULL << ( 16 )); , kHelixStraight = (1ULL << ( 17 )); , kHelixCircle = (1ULL << ( 18 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoHelix.html:65,Guid,Guide,65,doc/master/classTGeoHelix.html,https://root.cern,https://root.cern/doc/master/classTGeoHelix.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoHype Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TGeoHype Class Reference. . Definition at line 17 of file TGeoHype.h. Public Member Functions;  TGeoHype ();  ;  TGeoHype (const char *name, Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz);  ;  TGeoHype (Double_t *params);  ;  TGeoHype (Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz);  ;  ~TGeoHype () override;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Int_t DistToHype (const Double_t *point, const Double_t *dir, Double_t *s, Bool_t inner, Bool_t in) const;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoHype.html:64,Guid,Guide,64,doc/master/classTGeoHype.html,https://root.cern,https://root.cern/doc/master/classTGeoHype.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoIdentity Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGeoIdentity Class ReferenceThe Geometry Package » Geometry classes. ; An identity transformation. ; It holds no data member and returns pointers to static null translation and identity transformations for rotation and scale ; Definition at line 406 of file TGeoMatrix.h. Public Member Functions;  TGeoIdentity ();  dummy ctor ;  ;  TGeoIdentity (const char *name);  constructor ;  ;  ~TGeoIdentity () override;  ; const Double_t * GetRotationMatrix () const override;  ; const Double_t * GetScale () const override;  ; const Double_t * GetTranslation () const override;  ; TGeoHMatrix Inverse () const override;  Return a temporary inverse of this. ;  ; TClass * IsA () const override;  ; void LocalToMaster (const Double_t *local, Double_t *master) const override;  convert a point by multiplying its column vector (x, y, z, 1) to matrix inverse ;  ; void LocalToMasterBomb (const Double_t *local, Double_t *master) const override;  convert a point by multiplying its column vector (x, y, z, 1) to matrix inverse ;  ; void LocalToMasterVect (const Double_t *local, Double_t *master) const override;  convert a vector by multiplying its column vector (x, y, z, 1) to matrix inverse ;  ; TGeoMatrix * MakeClone () const override;  ; void MasterToLocal (const Double_t *master, Double_t *local) const override;  convert a point by multiplying its column vector (x, y, z, 1) to matrix ;  ; void MasterToLocalBomb (const Double_t *master, Double_t *local) const override;  convert a point by multiplying its column vector (x, y, z, 1) to matrix ;  ; void MasterToLocalVect (const Double_t *master, Double_t *local) const override;  convert a point by multiplying its column vector (x, y, z, 1) to matrix ;  ; void SavePrimitive (std::ostream &, Option_t *="""") override;  Save a p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoIdentity.html:68,Guid,Guide,68,doc/master/classTGeoIdentity.html,https://root.cern,https://root.cern/doc/master/classTGeoIdentity.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoIntersection Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGeoIntersection Class Reference. . Definition at line 138 of file TGeoBoolNode.h. Public Member Functions;  TGeoIntersection ();  Default constructor. ;  ;  TGeoIntersection (const char *expr1, const char *expr2);  Constructor. ;  ;  TGeoIntersection (TGeoShape *left, TGeoShape *right, TGeoMatrix *lmat=nullptr, TGeoMatrix *rmat=nullptr);  Constructor providing pointers to components. ;  ;  ~TGeoIntersection () override;  Destructor — deletion of components handled by TGeoManager class. ;  ; void ComputeBBox (Double_t &dx, Double_t &dy, Double_t &dz, Double_t *origin) override;  Compute bounding box corresponding to a intersection of two shapes. ;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  Normal computation in POINT. The orientation is chosen so that DIR.dot.NORM>0. ;  ; Bool_t Contains (const Double_t *point) const override;  Find if a intersection of two shapes contains a given point. ;  ; Int_t DistanceToPrimitive (Int_t px, Int_t py) override;  Compute minimum distance to shape vertices. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=0, Double_t *safe=nullptr) const override;  Compute distance from a given point inside to the shape boundary. ;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=0, Double_t *safe=nullptr) const override;  Compute distance from a given point outside to the shape. ;  ; EGeoBoolType GetBooleanOperator () const override;  ; Int_t GetNpoints () override;  Returns number of vertices for the composite shape described by this intersection. ;  ; TClass * IsA () const override;  ; TGeoBoolNode * MakeClone () const override;  Make a clone of this. Pointers are pre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoIntersection.html:72,Guid,Guide,72,doc/master/classTGeoIntersection.html,https://root.cern,https://root.cern/doc/master/classTGeoIntersection.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoIsotope Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGeoIsotope Class Reference. . Definition at line 103 of file TGeoElement.h. Public Member Functions;  TGeoIsotope ();  Dummy I/O constructor. ;  ;  TGeoIsotope (const char *name, Int_t z, Int_t n, Double_t a);  Constructor. ;  ;  ~TGeoIsotope () override;  ; Double_t GetA () const;  ; Int_t GetN () const;  ; Int_t GetZ () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print this isotope. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoIsotope.html:67,Guid,Guide,67,doc/master/classTGeoIsotope.html,https://root.cern,https://root.cern/doc/master/classTGeoIsotope.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoIteratorPlugin Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGeoIteratorPlugin Class ReferenceabstractThe Geometry Package » Geometry classes. . Definition at line 224 of file TGeoNode.h. Public Member Functions;  TGeoIteratorPlugin ();  ;  ~TGeoIteratorPlugin () override;  ; TClass * IsA () const override;  ; virtual void ProcessNode ()=0;  ; void SetIterator (const TGeoIterator *iter);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Comput",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoIteratorPlugin.html:74,Guid,Guide,74,doc/master/classTGeoIteratorPlugin.html,https://root.cern,https://root.cern/doc/master/classTGeoIteratorPlugin.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Attributes |; Private Types |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TGeoManager Class ReferenceThe Geometry Package » Geometry classes. ; The manager class for any TGeo geometry. ; Provides user interface for geometry creation, navigation, state querying, visualization, IO, geometry checking and other utilities. General architecture; The ROOT geometry package is a tool designed for building, browsing, tracking and visualizing a detector geometry. The code is independent from other external MC for simulation, therefore it does not contain any constraints related to physics. However, the package defines a number of hooks for tracking, such as media, materials, magnetic field or track state flags, in order to allow interfacing to tracking MC's. The final goal is to be able to use the same geometry for several purposes, such as tracking, reconstruction or visualization, taking advantage of the ROOT features related to bookkeeping, I/O, histogramming, browsing and GUI's.; The geometrical modeler is the most important component of the package and it provides answers to the basic questions like ""Where am I ?"" or ""How far; from the next boundary ?"", but also to more complex ones like ""How far from; the closest surface ?"" or ""Which is the next crossing along a helix ?"".; The architecture of the modeler is a combination between a GEANT-like containment scheme and a normal CSG binary tree at the level of shapes. An important common feature of all detector geometry descriptions is the mother-daughter concept. This is the most natural approach when tracking is concerned and imposes a set of constraints to the way geometry is defined. Constructive solid geom",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:67,Guid,Guide,67,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoManagerEditor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoManagerEditor Class ReferenceThe Geometry Package » Geometry builder. ; Editor for TGeoManager class. ; Provides also builder functionality for the main TGeo objects: TGeoVolume, TGeoShape - derived classes, TGeoMaterial, TGeoMatrix - derived transformations and TGeoMedium. The GUI represents the main entry point for editing geometry classes. It can be started either by:. TGeoManager::Edit(). The method must be used when starting from a new geometry.; Left-click on the 40x40 pixels top-right corner of a pad containing a drawn volume. The region is always accesible when drawing geometry elements and allows also restoring the manager editor in the ""Style"" tab of the GED editor anytime. The TGeoManager editor is vertically split by a TGShutter widget into the following categories:. General. This allows changing the name/title of the geometry, setting the top volume, closing the geometry and saving the geometry in a file. The name of the geometry file is formed by geometry_name.C/.root depending if the geometry need to be saved as a C macro or a .root file.; Shapes. The category provide buttons for creation of all supported shapes. The new shape name is chosen by the interface, but can be changed from the shape editor GUI. Existing shapes can be browsed and edited from the same category.; Volumes. The category allows the creation of a new volume having a given name, shape and medium. For creating a volume assembly only the name is relevant. Existing volumes can be browsed or edited from this category.; Materials. Allows creation of new materials/mixtures or editing existing ones.; Media. The same for creation/editing of tracking media (materials having a set of properties related to track",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManagerEditor.html:73,Guid,Guide,73,doc/master/classTGeoManagerEditor.html,https://root.cern,https://root.cern/doc/master/classTGeoManagerEditor.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoMaterial Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoMaterial Class ReferenceThe Geometry Package » Materials. ; Base class describing materials. . Important note about units; Since v6-17-02 the geometry package adopted a system of units, upon the request to support an in-memory material representation consistent with the one in Geant4. The adoption was done gradually and starting with v6-19-02 (back-ported to v6-18-02) the package supports changing the default units to either ROOT (CGS) or Geant4 ones. In the same version the Geant4 units were set to be the default ones, changing the previous behavior and making material properties such as radiation and interaction lengths having in memory values an order of magnitude lower. This behavior affected versions up to v6-25-01, after which the default units were restored to be the ROOT ones.; For users needing to restore the CGS behavior for material properties, the following sequence needs to be called before creating the TGeoManager instance: From v6-18-02 to v6-22-06: TGeoUnit::setUnitType(TGeoUnit::kTGeoUnits);; From v6-22-08 to v6-25-01: TGeoManager::LockDefaultUnits(false);; TGeoManager::SetDefaultUnits(kRootUnits);; TGeoManager::LockDefaultUnits(true);; TGeoManager::SetDefaultUnitsstatic void SetDefaultUnits(EDefaultUnits new_value)Definition TGeoManager.cxx:4319; TGeoManager::LockDefaultUnitsstatic Bool_t LockDefaultUnits(Bool_t new_value)Definition TGeoManager.cxx:4307. Definition at line 34 of file TGeoMaterial.h. Public Types; enum  EGeoMaterial { kMatUsed = (1ULL << ( 17 )); , kMatSavePrimitive = (1ULL << ( 18 )); };  ; enum  EGeoMaterialState { kMatStateUndefined; , kMatStateSolid; , kMatStateLiquid; , kMatStateGas; };  ;  Public Types inherited from TObject; enum  { ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoMaterial.html:68,Guid,Guide,68,doc/master/classTGeoMaterial.html,https://root.cern,https://root.cern/doc/master/classTGeoMaterial.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoMatrix Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TGeoMatrix Class ReferenceabstractThe Geometry Package » Geometry classes. ; Geometrical transformation package. ; All geometrical transformations handled by the modeller are provided as a built-in package. This was designed to minimize memory requirements and optimize performance of point/vector master-to-local and local-to-master computation. We need to have in mind that a transformation in TGeo has 2 major use-cases. The first one is for defining the placement of a volume with respect to its container reference frame. This frame will be called 'master' and the frame of the positioned volume - 'local'. If T is a transformation used for positioning volume daughters, then:; MASTER = T * LOCAL; Therefore a local-to-master conversion will be performed by using T, while a master-to-local by using its inverse. The second use case is the computation of the global transformation of a given object in the geometry. Since the geometry is built as 'volumes-inside-volumes', this global transformation represent the pile-up of all local transformations in the corresponding branch. The conversion from the global reference frame and the given object is also called master-to-local, but it is handled by the manager class. A general homogenous transformation is defined as a 4x4 matrix embedding a rotation, a translation and a scale. The advantage of this description is that each basic transformation can be represented as a homogenous matrix, composition being performed as simple matrix multiplication.; Rotation: Inverse rotation:; r11 r12 r13 0 r11 r21 r31 0; r21 r22 r23 0 r12 r22 r32 0; r31 r32 r33 0 r13 r23 r33 0; 0 0 0 1 0 0 0 1; Translation: Inverse translation:; 1 0 0 tx 1 0 0 -tx; 0 1 0 ty 0 1 0 -ty; 0 0 1 tz 0 0 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoMatrix.html:66,Guid,Guide,66,doc/master/classTGeoMatrix.html,https://root.cern,https://root.cern/doc/master/classTGeoMatrix.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoMedium Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoMedium Class ReferenceThe Geometry Package » Materials. ; Media are used to store properties related to tracking and which are useful only when using geometry with a particle transport MC package (via VMC). ; One may define several tracking media for a given material. The media ID are user defined values that are not used by the geometry package. In case geometry is used via VMC (in GEANT) these numbers are overwritten, so one can only rely on these values after gMC->FinishGeometry() is called. The media parameters are inspired from GEANT3 and the values defined make sense in context of GEANT (3 but also 4) or FLUKA interfaces. ; Definition at line 23 of file TGeoMedium.h. Public Types; enum  EGeoMedium { kMedSavePrimitive = (1ULL << ( 18 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoMedium ();  Default constructor. ;  ;  TGeoMedium (const char *name, Int_t numed, const TGeoMaterial *mat, Double_t *params=nullptr);  constructor ;  ;  TGeoMedium (const char *name, Int_t numed, Int_t imat, Int_t isvol, Int_t ifield, Double_t fieldm, Double_t tmaxfd, Double_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoMedium.html:66,Guid,Guide,66,doc/master/classTGeoMedium.html,https://root.cern,https://root.cern/doc/master/classTGeoMedium.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoMixture Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoMixture Class ReferenceThe Geometry Package » Materials. ; Mixtures of elements. ; Definition at line 159 of file TGeoMaterial.h. Public Member Functions;  TGeoMixture ();  Default constructor. ;  ;  TGeoMixture (const char *name, Int_t nel, Double_t rho=-1);  constructor ;  ;  ~TGeoMixture () override;  Destructor. ;  ; void AddElement (Double_t a, Double_t z, Double_t weight);  add an element to the mixture using fraction by weight Check if the element is already defined ;  ; void AddElement (TGeoElement *elem, Double_t weight);  add an element to the mixture using fraction by weight ;  ; void AddElement (TGeoElement *elem, Int_t natoms);  Add a mixture element by number of atoms in the chemical formula. ;  ; void AddElement (TGeoMaterial *mat, Double_t weight);  Define one component of the mixture as an existing material/mixture. ;  ; void ComputeDerivedQuantities ();  Compute Derived Quantities as in Geant4. ;  ; void ComputeNuclearInterLength ();  Compute Nuclear Interaction Length based on Geant4 formula. ;  ; void ComputeRadiationLength ();  Compute Radiation Length based on Geant4 formula. ;  ; TGeoMaterial * DecayMaterial (Double_t time, Double_t precision=0.001) override;  Create the mixture representing the decay product of this material at a given time. ;  ; void DefineElement (Int_t iel, Double_t a, Double_t z, Double_t weight);  ; void DefineElement (Int_t iel, Int_t z, Int_t natoms);  Define the mixture element at index iel by number of atoms in the chemical formula. ;  ; void DefineElement (Int_t iel, TGeoElement *elem, Double_t weight);  ; void FillMaterialEvolution (TObjArray *population, Double_t precision=0.001) override;  Fills a user array with all the elements derivin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoMixture.html:67,Guid,Guide,67,doc/master/classTGeoMixture.html,https://root.cern,https://root.cern/doc/master/classTGeoMixture.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoNavigator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TGeoNavigator Class ReferenceThe Geometry Package » Geometry classes. ; Class providing navigation API for TGeo geometries. ; Several instances are allowed for a single geometry. A default navigator is provided for any geometry but one may add several others for parallel navigation:; TGeoNavigator *navig = new TGeoNavigator(gGeoManager);; Int_t inav = gGeoManager->AddNavigator(navig);; gGeoManager->SetCurrentNavigator(inav);; gGeoManagerR__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; TGeoManager::AddNavigatorTGeoNavigator * AddNavigator()Add a navigator in the list of navigators.Definition TGeoManager.cxx:789; TGeoManager::SetCurrentNavigatorBool_t SetCurrentNavigator(Int_t index)Switch to another existing navigator for the calling thread.Definition TGeoManager.cxx:849; TGeoNavigatorClass providing navigation API for TGeo geometries.Definition TGeoNavigator.h:32; TGeoNavigator::TGeoNavigatorTGeoNavigator()global mode is caching enabled for parallel world safety callsDefinition TGeoNavigator.cxx:57; int; .... and then switch back to the default navigator:; gGeoManager->SetCurrentNavigator(0);. Definition at line 32 of file TGeoNavigator.h. Public Member Functions;  TGeoNavigator ();  global mode is caching enabled for parallel world safety calls ;  ;  TGeoNavigator (TGeoManager *geom);  Constructor. ;  ;  ~TGeoNavigator () override;  Destructor. ;  ; void BuildCache (Bool_t dummy=kFALSE, Bool_t nodeid=kFALSE);  Builds the cache for physical nodes and global matrices. ;  ; Bool_t cd (const char *path="""");  Browse the tree of nodes starting from top node according to pathname. ;  ; void CdDown (Int_t index);  Make a daughter of current node current. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNavigator.html:69,Guid,Guide,69,doc/master/classTGeoNavigator.html,https://root.cern,https://root.cern/doc/master/classTGeoNavigator.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoNavigatorArray Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGeoNavigatorArray Class Reference. . Definition at line 294 of file TGeoNavigator.h. Public Member Functions;  TGeoNavigatorArray ();  ;  TGeoNavigatorArray (TGeoManager *mgr);  ;  ~TGeoNavigatorArray () override;  ; TGeoNavigator * AddNavigator ();  Add a new navigator to the array. ;  ; TGeoNavigator * GetCurrentNavigator () const;  ; TClass * IsA () const override;  ; TGeoNavigator * SetCurrentNavigator (Int_t inav);  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObjArray;  TObjArray (const TObjArray &a);  Create a copy of TObjArray a. Note, does not copy the kIsOwner flag. ;  ;  TObjArray (Int_t s=TCollection::kInitCapacity, Int_t lowerBound=0);  Create an object array. ;  ; virtual ~TObjArray ();  Delete an array. ;  ; void Add (TObject *obj) override;  ; void AddAfter (const TObject *after, TObject *obj) override;  Add object in the slot after object after. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Add object at position ids. ;  ; virtual void AddAtAndExpand (TObject *obj, Int_t idx);  Add object at position idx. ;  ; virtual Int_t AddAtFree (TObject *obj);  Return the position of the new object. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Add object in the slot before object before. ;  ; void AddFirst (TObject *obj) override;  Add object in the first slot of the array. ;  ; void AddLast (TObject *obj) override;  Add object in the next empty slot in the array. ;  ; TObject * After (const TObject *obj) const override;  Return the object after obj. Returns 0 if obj is last object. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNavigatorArray.html:74,Guid,Guide,74,doc/master/classTGeoNavigatorArray.html,https://root.cern,https://root.cern/doc/master/classTGeoNavigatorArray.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoNode Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGeoNode Class ReferenceabstractThe Geometry Package » Geometry classes. ; A node represent a volume positioned inside another.They store links to both volumes and to the TGeoMatrix representing the relative positioning. ; Node are never instantiated directly by users, but created as a result of volume operations. Adding a volume named A with a given user ID inside a volume B will create a node node named A_ID. This will be added to the list of nodes stored by B. Also, when applying a division operation in N slices to a volume A, a list of nodes B_1, B_2, ..., B_N is also created. A node B_i does not represent a unique object in the geometry because its container A might be at its turn positioned as node inside several other volumes. Only when a complete branch of nodes is fully defined up to the top node in the geometry, a given path like:; /TOP_1/.../A_3/B_7 will represent an unique object.; Its global transformation matrix can be computed as the pile-up of all local transformations in its branch. We will therefore call ""logical graph"" the hierarchy defined by nodes and volumes. The expansion of the logical graph by all possible paths defines a tree structure where all nodes are unique ""touchable"" objects. We will call this the ""physical tree"". Unlike the logical graph, the physical tree can become a huge structure with several milions of nodes in case of complex geometries, therefore it is not always a good idea to keep it transient in memory. Since a the logical and physical structures are correlated, the modeller rather keeps track only of the current branch, updating the current global matrix at each change of the level in geometry. The current phy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNode.html:64,Guid,Guide,64,doc/master/classTGeoNode.html,https://root.cern,https://root.cern/doc/master/classTGeoNode.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoNodeCache Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGeoNodeCache Class ReferenceThe Geometry Package » Geometry classes. ; Special pool of reusable nodes. ; Definition at line 56 of file TGeoCache.h. Public Member Functions;  TGeoNodeCache ();  Dummy constructor. ;  ;  TGeoNodeCache (TGeoNode *top, Bool_t nodeid=kFALSE, Int_t capacity=30);  Default constructor. ;  ;  ~TGeoNodeCache () override;  Destructor. ;  ; void BuildIdArray ();  Builds node id array. ;  ; void BuildInfoBranch ();  Builds info branch. Navigation is possible only after this step. ;  ; Bool_t CdDown (Int_t index);  Make daughter INDEX of current node the active state. Compute global matrix. ;  ; Bool_t CdDown (TGeoNode *node);  Make daughter INDEX of current node the active state. Compute global matrix. ;  ; void CdNode (Int_t nodeid);  Change current path to point to the node having this id. ;  ; void CdTop ();  ; void CdUp ();  Make mother of current node the active state. ;  ; void FillIdBranch (const Int_t *br, Int_t startlevel=0);  ; void * GetBranch () const;  ; void GetBranchNames (Int_t *names) const;  Fill names with current branch volume names (4 char - used by GEANT3 interface). ;  ; void GetBranchNumbers (Int_t *copyNumbers, Int_t *volumeNumbers) const;  Fill copy numbers of current branch nodes. ;  ; void GetBranchOnlys (Int_t *isonly) const;  Fill copy numbers of current branch nodes. ;  ; TGeoHMatrix * GetCurrentMatrix () const;  ; Int_t GetCurrentNodeId () const;  Returns a fixed ID for current physical node. ;  ; const Int_t * GetIdBranch () const;  ; TGeoStateInfo * GetInfo ();  Get next state info pointer. ;  ; Int_t GetLevel () const;  ; TGeoStateInfo * GetMakePWInfo (Int_t nd);  Get the PW info, if none create one. ;  ; void * GetMatrices () const;  ; TGeo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNodeCache.html:69,Guid,Guide,69,doc/master/classTGeoNodeCache.html,https://root.cern,https://root.cern/doc/master/classTGeoNodeCache.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoNodeMatrix Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGeoNodeMatrix Class ReferenceThe Geometry Package » Geometry classes. ; A node containing local transformation. ; Definition at line 154 of file TGeoNode.h. Public Member Functions;  TGeoNodeMatrix ();  Default constructor. ;  ;  TGeoNodeMatrix (const TGeoVolume *vol, const TGeoMatrix *matrix);  Constructor. ;  ;  ~TGeoNodeMatrix () override;  Destructor. ;  ; Int_t GetByteCount () const override;  return the total size in bytes of this node ;  ; TGeoMatrix * GetMatrix () const override;  ; Int_t GetOptimalVoxels () const override;  Returns type of optimal voxelization for this node. ;  ; TClass * IsA () const override;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; TGeoNode * MakeCopyNode () const override;  Make a copy of this node. ;  ; void SetMatrix (const TGeoMatrix *matrix);  Matrix setter. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoNode;  TGeoNode ();  Default constructor. ;  ;  TGeoNode (const TGeoVolume *vol);  Constructor. ;  ;  ~TGeoNode () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  How-to-browse for a node. ;  ; virtual void cd () const;  ; void CheckOverlaps (Double_t ovlp=0.1, Option_t *option="""");  Check overlaps bigger than OVLP hierarchically, starting with this node. ;  ; void CheckShapes ();  check for wrong parameters in shapes ;  ; Int_t CountDaughters (Bool_t unique_volumes=kFALSE);  Returns the number of daughters. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  compute the closest distance of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNodeMatrix.html:70,Guid,Guide,70,doc/master/classTGeoNodeMatrix.html,https://root.cern,https://root.cern/doc/master/classTGeoNodeMatrix.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoNodeOffset Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGeoNodeOffset Class ReferenceThe Geometry Package » Geometry classes. ; Node containing an offset. ; Definition at line 184 of file TGeoNode.h. Public Member Functions;  TGeoNodeOffset ();  Default constructor. ;  ;  TGeoNodeOffset (const TGeoVolume *vol, Int_t index, Double_t offset);  Constructor. Null pointer to matrix means identity transformation. ;  ;  ~TGeoNodeOffset () override;  Destructor. ;  ; void cd () const override;  ; TGeoPatternFinder * GetFinder () const override;  ; Int_t GetIndex () const override;  Get the index of this offset. ;  ; TGeoMatrix * GetMatrix () const override;  ; Double_t GetOffset () const;  ; TClass * IsA () const override;  ; TGeoNode * MakeCopyNode () const override;  Make a copy of this node. ;  ; void SetFinder (TGeoPatternFinder *finder);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoNode;  TGeoNode ();  Default constructor. ;  ;  TGeoNode (const TGeoVolume *vol);  Constructor. ;  ;  ~TGeoNode () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  How-to-browse for a node. ;  ; void CheckOverlaps (Double_t ovlp=0.1, Option_t *option="""");  Check overlaps bigger than OVLP hierarchically, starting with this node. ;  ; void CheckShapes ();  check for wrong parameters in shapes ;  ; Int_t CountDaughters (Bool_t unique_volumes=kFALSE);  Returns the number of daughters. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  compute the closest distance of approach from point px,py to this node ;  ; void Draw (Option_t *option="""") override;  draw current node according to option ;  ; void DrawOnly (O",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNodeOffset.html:70,Guid,Guide,70,doc/master/classTGeoNodeOffset.html,https://root.cern,https://root.cern/doc/master/classTGeoNodeOffset.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoOpticalSurface Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGeoOpticalSurface Class ReferenceThe Geometry Package » Geometry classes. ; This is a wrapper class to G4OpticalSurface. ; Definition at line 27 of file TGeoOpticalSurface.h. Public Types; enum  ESurfaceFinish { ;   kFpolished; , kFpolishedfrontpainted; , kFpolishedbackpainted; , kFground; , ;   kFgroundfrontpainted; , kFgroundbackpainted; , kFpolishedlumirrorair; , kFpolishedlumirrorglue; , ;   kFpolishedair; , kFpolishedteflonair; , kFpolishedtioair; , kFpolishedtyvekair; , ;   kFpolishedvm2000air; , kFpolishedvm2000glue; , kFetchedlumirrorair; , kFetchedlumirrorglue; , ;   kFetchedair; , kFetchedteflonair; , kFetchedtioair; , kFetchedtyvekair; , ;   kFetchedvm2000air; , kFetchedvm2000glue; , kFgroundlumirrorair; , kFgroundlumirrorglue; , ;   kFgroundair; , kFgroundteflonair; , kFgroundtioair; , kFgroundtyvekair; , ;   kFgroundvm2000air; , kFgroundvm2000glue; , kFRough_LUT; , kFRoughTeflon_LUT; , ;   kFRoughESR_LUT; , kFRoughESRGrease_LUT; , kFPolished_LUT; , kFPolishedTeflon_LUT; , ;   kFPolishedESR_LUT; , kFPolishedESRGrease_LUT; , kFDetector_LUT. };  ; enum  ESurfaceModel { ;   kMglisur; , kMunified; , kMLUT; , kMDAVIS; , ;   kMdichroic. };  ; enum  ESurfaceType { ;   kTdielectric_metal; , kTdielectric_dielectric; , kTdielectric_LUT; , kTdielectric_LUTDAVIS; , ;   kTdielectric_dichroic; , kTfirsov; , kTx_ray. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 ))",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoOpticalSurface.html:74,Guid,Guide,74,doc/master/classTGeoOpticalSurface.html,https://root.cern,https://root.cern/doc/master/classTGeoOpticalSurface.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoOverlap Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGeoOverlap Class ReferenceThe Geometry Package » Geometry painter. ; Base class describing geometry overlaps. ; Overlaps apply to the nodes contained inside a volume. These should not overlap to each other nor extrude the shape of their mother volume. ; Definition at line 37 of file TGeoOverlap.h. Public Types; enum  EOverlapType { kGeoOverlap = (1ULL << ( 14 )); , kGeoExtrusion = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoOverlap ();  Default ctor. ;  ;  TGeoOverlap (const char *name, TGeoVolume *vol1, TGeoVolume *vol2, const TGeoMatrix *matrix1, const TGeoMatrix *matrix2, Bool_t isovlp=kTRUE, Double_t ovlp=0.01);  Creates a named overlap belonging to volume VOL and having the size OVLP. ;  ;  ~TGeoOverlap () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  Define double-click action. ;  ; Int_t Compare (const TObject *obj) const override;  Method to compare this overlap with another. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Distance to primitive for an overlap. ;  ; void Draw (Option_t *option="""") overri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoOverlap.html:67,Guid,Guide,67,doc/master/classTGeoOverlap.html,https://root.cern,https://root.cern/doc/master/classTGeoOverlap.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoPNEntry Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Types |; Private Attributes |; List of all members ; TGeoPNEntry Class ReferenceThe Geometry Package » Geometry classes. ; The knowledge of the path to the objects that need to be misaligned is essential since there is no other way of identifying them. ; One can however create 'symbolic links' to any complex path to make it more representable for the object it designates:; TGeoPNEntry *pne = new TGeoPNEntry(""TPC_SECTOR_2"", ""path_to_tpc_sect2"");; pne->SetPhysicalNode(pn); TGeoPNEntryThe knowledge of the path to the objects that need to be misaligned is essential since there is no ot...Definition TGeoPhysicalNode.h:100; TGeoPNEntry::SetPhysicalNodevoid SetPhysicalNode(TGeoPhysicalNode *node)Setter for the corresponding physical node.Definition TGeoPhysicalNode.cxx:618; TGeoPNEntry::TGeoPNEntryTGeoPNEntry()Default constructor.Definition TGeoPhysicalNode.cxx:578; Such a symbolic link hides the complexity of the path to the align object and replaces it with a more meaningful name. In addition, TGeoPNEntry objects are faster to search by name and they may optionally store an additional user matrix.; For more details please read the misalignment section. ; Definition at line 100 of file TGeoPhysicalNode.h. Public Member Functions;  TGeoPNEntry ();  Default constructor. ;  ;  TGeoPNEntry (const char *unique_name, const char *path);  Default constructor. ;  ;  ~TGeoPNEntry () override;  Destructor. ;  ; TGeoHMatrix * GetGlobalOrig () const;  ; const TGeoHMatrix * GetMatrix () const;  ; TGeoHMatrix * GetMatrixOrig () const;  ; const char * GetPath () const;  ; TGeoPhysicalNode * GetPhysicalNode () const;  ; TClass * IsA () const override;  ; void SetMatrix (const TGeoHMatrix *matrix);  Set the additional matrix for this node entry. ;  ; void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPNEntry.html:67,Guid,Guide,67,doc/master/classTGeoPNEntry.html,https://root.cern,https://root.cern/doc/master/classTGeoPNEntry.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoPainter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGeoPainter Class ReferenceThe Geometry Package » Geometry painter. ; Class implementing all draw interfaces for a generic 3D viewer using TBuffer3D mechanism. ; Definition at line 39 of file TGeoPainter.h. Public Member Functions;  TGeoPainter (TGeoManager *manager);  Default constructor. ;  ;  ~TGeoPainter () override;  Default destructor. ;  ; void AddSize3D (Int_t numpoints, Int_t numsegs, Int_t numpolys) override;  Add numpoints, numsegs, numpolys to the global 3D size. ;  ; TVirtualGeoTrack * AddTrack (Int_t id, Int_t pdgcode, TObject *part) override;  Create a primary TGeoTrack. ;  ; void AddTrackPoint (Double_t *point, Double_t *box, Bool_t reset=kFALSE) override;  Average center of view of all painted tracklets and compute view box. ;  ; void BombTranslation (const Double_t *tr, Double_t *bombtr) override;  Get the new 'bombed' translation vector according current exploded view mode. ;  ; void CheckBoundaryErrors (Int_t ntracks=1000000, Double_t radius=-1.) override;  Check pushes and pulls needed to cross the next boundary with respect to the position given by FindNextBoundary. ;  ; void CheckBoundaryReference (Int_t icheck=-1) override;  Check the boundary errors reference file created by CheckBoundaryErrors method. ;  ; void CheckEdit ();  Check if Ged library is loaded and load geometry editor classe. ;  ; void CheckGeometry (Int_t nrays, Double_t startx, Double_t starty, Double_t startz) const override;  Geometry checking method (see TGeoChecker). ;  ; void CheckGeometryFull (Bool_t checkoverlaps=kTRUE, Bool_t checkcrossings=kTRUE, Int_t nrays=10000, const Double_t *vertex=nullptr) override;  Geometry checking method (see: TGeoManager::CheckGeometry()) ;  ; void CheckOverlaps (const TGeoV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPainter.html:67,Guid,Guide,67,doc/master/classTGeoPainter.html,https://root.cern,https://root.cern/doc/master/classTGeoPainter.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoPara Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoPara Class Reference. . Definition at line 17 of file TGeoPara.h. Public Member Functions;  TGeoPara ();  ;  TGeoPara (const char *name, Double_t dx, Double_t dy, Double_t dz, Double_t alpha, Double_t theta, Double_t phi);  ;  TGeoPara (Double_t *param);  ;  TGeoPara (Double_t dx, Double_t dy, Double_t dz, Double_t alpha, Double_t theta, Double_t phi);  ;  ~TGeoPara () override;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; Double_t GetAlpha () const;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ; void GetBoundingCylinder (Double_t *param) const override;  ; Int_t Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPara.html:64,Guid,Guide,64,doc/master/classTGeoPara.html,https://root.cern,https://root.cern/doc/master/classTGeoPara.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoParaboloid Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGeoParaboloid Class Reference. . Definition at line 17 of file TGeoParaboloid.h. Public Member Functions;  TGeoParaboloid ();  ;  TGeoParaboloid (const char *name, Double_t rlo, Double_t rhi, Double_t dz);  ;  TGeoParaboloid (Double_t *params);  ;  TGeoParaboloid (Double_t rlo, Double_t rhi, Double_t dz);  ;  ~TGeoParaboloid () override;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistToParaboloid (const Double_t *point, const Double_t *dir, Bool_t in) const;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; void GetBoundingCylinde",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoParaboloid.html:70,Guid,Guide,70,doc/master/classTGeoParaboloid.html,https://root.cern,https://root.cern/doc/master/classTGeoParaboloid.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoParallelWorld Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGeoParallelWorld Class ReferenceThe Geometry Package » Geometry classes. ; Base class for a flat parallel geometry. ; The parallel geometry can be composed by both normal volumes added using the AddNode interface (not implemented yet) or by physical nodes which will use as position their actual global matrix with respect to the top volume of the main geometry.; All these nodes are added as daughters to the ""top"" volume of the parallel world which acts as a navigation helper in this parallel world. The parallel world has to be closed before calling any navigation method. ; Definition at line 23 of file TGeoParallelWorld.h. Classes; struct  SafetyVoxelInfo;  . Public Types; enum class  AccelerationMode { kVoxelFinder; , kBVH; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoParallelWorld ();  ;  TGeoParallelWorld (const char *name, TGeoManager *mgr);  Default constructor. ;  ;  ~TGeoParallelWorld () override;  Destructor. ;  ; void AddNode (const char *path);  Add a node normally to this world. Overlapping nodes not allowe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoParallelWorld.html:73,Guid,Guide,73,doc/master/classTGeoParallelWorld.html,https://root.cern,https://root.cern/doc/master/classTGeoParallelWorld.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoPatternCylPhi Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TGeoPatternCylPhi Class Reference. . Definition at line 381 of file TGeoPatternFinder.h. Public Member Functions;  TGeoPatternCylPhi ();  Default constructor. ;  ;  TGeoPatternCylPhi (TGeoVolume *vol, Int_t ndivisions);  constructor compute step, start, end ;  ;  TGeoPatternCylPhi (TGeoVolume *vol, Int_t ndivisions, Double_t start, Double_t end);  constructor ;  ;  TGeoPatternCylPhi (TGeoVolume *vol, Int_t ndivisions, Double_t step);  constructor ;  ;  ~TGeoPatternCylPhi () override;  Destructor. ;  ; void cd (Int_t idiv) override;  Update current division index and global matrix to point to a given slice. ;  ; TGeoMatrix * CreateMatrix () const override;  Return new matrix of type used by this finder. ;  ; TGeoNode * FindNode (Double_t *point, const Double_t *dir=nullptr) override;  find the node containing the query point ;  ; Int_t GetDivAxis () override;  ; TClass * IsA () const override;  ; Bool_t IsOnBoundary (const Double_t *point) const override;  Checks if the current point is on division boundary. ;  ; TGeoPatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGeoVolume. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inherited from TGeoPatternFinder;  TGeoPatternFinder ();  Default constructor. ;  ;  TGeoPatternFinde",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternCylPhi.html:73,Guid,Guide,73,doc/master/classTGeoPatternCylPhi.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternCylPhi.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoPatternCylR Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGeoPatternCylR Class Reference. . Definition at line 350 of file TGeoPatternFinder.h. Public Member Functions;  TGeoPatternCylR ();  Default constructor. ;  ;  TGeoPatternCylR (const TGeoPatternCylR &pf);  copy constructor ;  ;  TGeoPatternCylR (TGeoVolume *vol, Int_t ndivisions);  constructor ;  ;  TGeoPatternCylR (TGeoVolume *vol, Int_t ndivisions, Double_t start, Double_t end);  constructor ;  ;  TGeoPatternCylR (TGeoVolume *vol, Int_t ndivisions, Double_t step);  constructor ;  ;  ~TGeoPatternCylR () override;  Destructor. ;  ; void cd (Int_t idiv) override;  Update current division index and global matrix to point to a given slice. ;  ; TGeoMatrix * CreateMatrix () const override;  Return new matrix of type used by this finder. ;  ; TGeoNode * FindNode (Double_t *point, const Double_t *dir=nullptr) override;  find the node containing the query point ;  ; Int_t GetDivAxis () override;  ; TClass * IsA () const override;  ; Bool_t IsOnBoundary (const Double_t *point) const override;  Checks if the current point is on division boundary. ;  ; TGeoPatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; TGeoPatternCylR & operator= (const TGeoPatternCylR &);  assignment operator ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inherited from TGeoPatternFinder;  TGeoPatter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternCylR.html:71,Guid,Guide,71,doc/master/classTGeoPatternCylR.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternCylR.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoPatternFinder Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoPatternFinder Class ReferenceabstractThe Geometry Package » Geometry classes. ; Base finder class for patterns. ; A pattern is specifying a division type which applies only to a given shape type. The implemented patterns are for the moment equidistant slices on different axis. Implemented patterns are:. TGeoPatternX - a X axis divison pattern; TGeoPatternY - a Y axis divison pattern; TGeoPatternZ - a Z axis divison pattern; TGeoPatternParaX - a X axis divison pattern for PARA shape; TGeoPatternParaY - a Y axis divison pattern for PARA shape; TGeoPatternParaZ - a Z axis divison pattern for PARA shape; TGeoPatternTrapZ - a Z axis divison pattern for TRAP or GTRA shapes; TGeoPatternCylR - a cylindrical R divison pattern; TGeoPatternCylPhi - a cylindrical phi divison pattern; TGeoPatternSphR - a spherical R divison pattern; TGeoPatternSphTheta - a spherical theta divison pattern; TGeoPatternSphPhi - a spherical phi divison pattern; TGeoPatternHoneycomb - a divison pattern specialized for honeycombs . Definition at line 31 of file TGeoPatternFinder.h. Classes; struct  ThreadData_t;  . Public Member Functions;  TGeoPatternFinder ();  Default constructor. ;  ;  TGeoPatternFinder (TGeoVolume *vol, Int_t ndiv);  Default constructor. ;  ;  ~TGeoPatternFinder () override;  Destructor. ;  ; virtual void cd (Int_t);  ; virtual TGeoNode * CdNext ();  Make next node (if any) current. ;  ; void ClearThreadData () const;  ; virtual TGeoMatrix * CreateMatrix () const =0;  ; void CreateThreadData (Int_t nthreads);  Create thread data for n threads max. ;  ; virtual TGeoNode * FindNode (Double_t *, const Double_t *=nullptr);  ; virtual Int_t GetByteCount () const;  ; Int_t G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternFinder.html:73,Guid,Guide,73,doc/master/classTGeoPatternFinder.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternFinder.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoPatternHoneycomb Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TGeoPatternHoneycomb Class Reference. . Definition at line 526 of file TGeoPatternFinder.h. Public Member Functions;  TGeoPatternHoneycomb ();  Default constructor. ;  ;  TGeoPatternHoneycomb (TGeoVolume *vol, Int_t nrows);  Default constructor. ;  ;  ~TGeoPatternHoneycomb () override;  destructor ;  ; void cd (Int_t idiv) override;  Update current division index and global matrix to point to a given slice. ;  ; TGeoMatrix * CreateMatrix () const override;  Return new matrix of type used by this finder. ;  ; TGeoNode * FindNode (Double_t *point, const Double_t *dir=nullptr) override;  find the node containing the query point ;  ; TClass * IsA () const override;  ; TGeoPatternFinder * MakeCopy (Bool_t) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inherited from TGeoPatternFinder;  TGeoPatternFinder ();  Default constructor. ;  ;  TGeoPatternFinder (TGeoVolume *vol, Int_t ndiv);  Default constructor. ;  ;  ~TGeoPatternFinder () override;  Destructor. ;  ; virtual TGeoNode * CdNext ();  Make next node (if any) current. ;  ; void ClearThreadData () const;  ; void CreateThreadData (Int_t nthreads);  Create thread data for n threads max. ;  ; virtual Int_t GetByteCount () const;  ; Int_t GetCurrent ();  Return current index. ;  ; virtual Int_t GetDivAxis ();  ; Int_t GetDivIndex ();  ; Double_t GetEnd () const;  ; virtual TGeoMatrix * GetMatrix ();  Return current matrix. ;  ; Int_t GetNdiv () const;  ; In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternHoneycomb.html:76,Guid,Guide,76,doc/master/classTGeoPatternHoneycomb.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternHoneycomb.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoPatternParaX Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGeoPatternParaX Class Reference. . Definition at line 209 of file TGeoPatternFinder.h. Public Member Functions;  TGeoPatternParaX ();  Default constructor. ;  ;  TGeoPatternParaX (const TGeoPatternParaX &pf);  copy constructor ;  ;  TGeoPatternParaX (TGeoVolume *vol, Int_t ndivisions);  constructor ;  ;  TGeoPatternParaX (TGeoVolume *vol, Int_t ndivisions, Double_t start, Double_t end);  constructor ;  ;  TGeoPatternParaX (TGeoVolume *vol, Int_t ndivisions, Double_t step);  constructor ;  ;  ~TGeoPatternParaX () override;  Destructor. ;  ; void cd (Int_t idiv) override;  Update current division index and global matrix to point to a given slice. ;  ; TGeoMatrix * CreateMatrix () const override;  Return new matrix of type used by this finder. ;  ; TGeoNode * FindNode (Double_t *point, const Double_t *dir=nullptr) override;  get the node division containing the query point ;  ; Int_t GetDivAxis () override;  ; TClass * IsA () const override;  ; Bool_t IsOnBoundary (const Double_t *point) const override;  Checks if the current point is on division boundary. ;  ; TGeoPatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; TGeoPatternParaX & operator= (const TGeoPatternParaX &);  assignment operator ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inherited from TGeoPattern",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternParaX.html:72,Guid,Guide,72,doc/master/classTGeoPatternParaX.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternParaX.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoPatternParaY Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TGeoPatternParaY Class Reference. . Definition at line 241 of file TGeoPatternFinder.h. Public Member Functions;  TGeoPatternParaY ();  Default constructor. ;  ;  TGeoPatternParaY (const TGeoPatternParaY &pf);  copy constructor ;  ;  TGeoPatternParaY (TGeoVolume *vol, Int_t ndivisions);  constructor ;  ;  TGeoPatternParaY (TGeoVolume *vol, Int_t ndivisions, Double_t start, Double_t end);  constructor ;  ;  TGeoPatternParaY (TGeoVolume *vol, Int_t ndivisions, Double_t step);  constructor ;  ;  ~TGeoPatternParaY () override;  Destructor. ;  ; void cd (Int_t idiv) override;  Update current division index and global matrix to point to a given slice. ;  ; TGeoMatrix * CreateMatrix () const override;  Return new matrix of type used by this finder. ;  ; TGeoNode * FindNode (Double_t *point, const Double_t *dir=nullptr) override;  get the node division containing the query point ;  ; Int_t GetDivAxis () override;  ; TClass * IsA () const override;  ; Bool_t IsOnBoundary (const Double_t *point) const override;  Checks if the current point is on division boundary. ;  ; TGeoPatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; TGeoPatternParaY & operator= (const TGeoPatternParaY &);  assignment operator ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inhe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternParaY.html:72,Guid,Guide,72,doc/master/classTGeoPatternParaY.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternParaY.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoPatternParaZ Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TGeoPatternParaZ Class Reference. . Definition at line 276 of file TGeoPatternFinder.h. Public Member Functions;  TGeoPatternParaZ ();  Default constructor. ;  ;  TGeoPatternParaZ (const TGeoPatternParaZ &pf);  copy constructor ;  ;  TGeoPatternParaZ (TGeoVolume *vol, Int_t ndivisions);  constructor ;  ;  TGeoPatternParaZ (TGeoVolume *vol, Int_t ndivisions, Double_t start, Double_t end);  constructor ;  ;  TGeoPatternParaZ (TGeoVolume *vol, Int_t ndivisions, Double_t step);  constructor ;  ;  ~TGeoPatternParaZ () override;  Destructor. ;  ; void cd (Int_t idiv) override;  Update current division index and global matrix to point to a given slice. ;  ; TGeoMatrix * CreateMatrix () const override;  Return new matrix of type used by this finder. ;  ; TGeoNode * FindNode (Double_t *point, const Double_t *dir=nullptr) override;  get the node division containing the query point ;  ; Int_t GetDivAxis () override;  ; TClass * IsA () const override;  ; Bool_t IsOnBoundary (const Double_t *point) const override;  Checks if the current point is on division boundary. ;  ; TGeoPatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; TGeoPatternParaZ & operator= (const TGeoPatternParaZ &);  assignment operator ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inhe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternParaZ.html:72,Guid,Guide,72,doc/master/classTGeoPatternParaZ.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternParaZ.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoPatternSphPhi Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TGeoPatternSphPhi Class Reference. . Definition at line 489 of file TGeoPatternFinder.h. Public Member Functions;  TGeoPatternSphPhi ();  Default constructor. ;  ;  TGeoPatternSphPhi (TGeoVolume *vol, Int_t ndivisions);  constructor compute step, start, end ;  ;  TGeoPatternSphPhi (TGeoVolume *vol, Int_t ndivisions, Double_t start, Double_t end);  constructor compute step ;  ;  TGeoPatternSphPhi (TGeoVolume *vol, Int_t ndivisions, Double_t step);  constructor compute start, end ;  ;  ~TGeoPatternSphPhi () override;  Destructor. ;  ; void cd (Int_t idiv) override;  Update current division index and global matrix to point to a given slice. ;  ; TGeoMatrix * CreateMatrix () const override;  Return new matrix of type used by this finder. ;  ; TGeoNode * FindNode (Double_t *point, const Double_t *dir=nullptr) override;  find the node containing the query point ;  ; Int_t GetDivAxis () override;  ; TClass * IsA () const override;  ; Bool_t IsOnBoundary (const Double_t *point) const override;  Checks if the current point is on division boundary. ;  ; TGeoPatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inherited from TGeoPatternFinder;  TGeoPatternFinder ();  Default constr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternSphPhi.html:73,Guid,Guide,73,doc/master/classTGeoPatternSphPhi.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternSphPhi.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoPatternSphR Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGeoPatternSphR Class Reference. . Definition at line 429 of file TGeoPatternFinder.h. Public Member Functions;  TGeoPatternSphR ();  Default constructor. ;  ;  TGeoPatternSphR (const TGeoPatternSphR &pf);  copy constructor ;  ;  TGeoPatternSphR (TGeoVolume *vol, Int_t ndivisions);  constructor compute step, start, end ;  ;  TGeoPatternSphR (TGeoVolume *vol, Int_t ndivisions, Double_t start, Double_t end);  constructor ;  ;  TGeoPatternSphR (TGeoVolume *vol, Int_t ndivisions, Double_t step);  constructor ;  ;  ~TGeoPatternSphR () override;  Destructor. ;  ; void cd (Int_t idiv) override;  Update current division index and global matrix to point to a given slice. ;  ; TGeoMatrix * CreateMatrix () const override;  Return new matrix of type used by this finder. ;  ; TGeoNode * FindNode (Double_t *point, const Double_t *dir=nullptr) override;  find the node containing the query point ;  ; Int_t GetDivAxis () override;  ; TClass * IsA () const override;  ; TGeoPatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; TGeoPatternSphR & operator= (const TGeoPatternSphR &);  assignment operator ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inherited from TGeoPatternFinder;  TGeoPatternFinder ();  Default constructor. ;  ;  TGeoPatternFinder (TGeoVolume *vol, Int_t ndiv);  Defa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternSphR.html:71,Guid,Guide,71,doc/master/classTGeoPatternSphR.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternSphR.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoPatternSphTheta Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGeoPatternSphTheta Class Reference. . Definition at line 459 of file TGeoPatternFinder.h. Public Member Functions;  TGeoPatternSphTheta ();  Default constructor. ;  ;  TGeoPatternSphTheta (const TGeoPatternSphTheta &pf);  copy constructor ;  ;  TGeoPatternSphTheta (TGeoVolume *vol, Int_t ndivisions);  constructor compute step, start, end ;  ;  TGeoPatternSphTheta (TGeoVolume *vol, Int_t ndivisions, Double_t start, Double_t end);  constructor ;  ;  TGeoPatternSphTheta (TGeoVolume *vol, Int_t ndivisions, Double_t step);  constructor ;  ;  ~TGeoPatternSphTheta () override;  Destructor. ;  ; void cd (Int_t idiv) override;  Update current division index and global matrix to point to a given slice. ;  ; TGeoMatrix * CreateMatrix () const override;  Return new matrix of type used by this finder. ;  ; TGeoNode * FindNode (Double_t *point, const Double_t *dir=nullptr) override;  find the node containing the query point ;  ; Int_t GetDivAxis () override;  ; TClass * IsA () const override;  ; TGeoPatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; TGeoPatternSphTheta & operator= (const TGeoPatternSphTheta &);  assignment operator ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inherited from TGeoPatternFinder;  TGeoPatternFinder ();  Default constructor. ;  ;  TGeoPatter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternSphTheta.html:75,Guid,Guide,75,doc/master/classTGeoPatternSphTheta.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternSphTheta.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoPatternTrapZ Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TGeoPatternTrapZ Class Reference. . Definition at line 312 of file TGeoPatternFinder.h. Public Member Functions;  TGeoPatternTrapZ ();  Default constructor. ;  ;  TGeoPatternTrapZ (const TGeoPatternTrapZ &pf);  copy constructor ;  ;  TGeoPatternTrapZ (TGeoVolume *vol, Int_t ndivisions);  constructor ;  ;  TGeoPatternTrapZ (TGeoVolume *vol, Int_t ndivisions, Double_t start, Double_t end);  constructor ;  ;  TGeoPatternTrapZ (TGeoVolume *vol, Int_t ndivisions, Double_t step);  constructor ;  ;  ~TGeoPatternTrapZ () override;  Destructor. ;  ; void cd (Int_t idiv) override;  Update current division index and global matrix to point to a given slice. ;  ; TGeoMatrix * CreateMatrix () const override;  Return new matrix of type used by this finder. ;  ; TGeoNode * FindNode (Double_t *point, const Double_t *dir=nullptr) override;  get the node division containing the query point ;  ; Int_t GetDivAxis () override;  ; Double_t GetTxz () const;  ; Double_t GetTyz () const;  ; TClass * IsA () const override;  ; Bool_t IsOnBoundary (const Double_t *point) const override;  Checks if the current point is on division boundary. ;  ; TGeoPatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; TGeoPatternTrapZ & operator= (const TGeoPatternTrapZ &);  assignment operator ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternTrapZ.html:72,Guid,Guide,72,doc/master/classTGeoPatternTrapZ.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternTrapZ.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoPatternX Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGeoPatternX Class Reference. . Definition at line 112 of file TGeoPatternFinder.h. Public Member Functions;  TGeoPatternX ();  Default constructor. ;  ;  TGeoPatternX (const TGeoPatternX &pf);  copy constructor ;  ;  TGeoPatternX (TGeoVolume *vol, Int_t ndivisions);  constructor ;  ;  TGeoPatternX (TGeoVolume *vol, Int_t ndivisions, Double_t start, Double_t end);  constructor ;  ;  TGeoPatternX (TGeoVolume *vol, Int_t ndivisions, Double_t step);  constructor ;  ;  ~TGeoPatternX () override;  Destructor. ;  ; void cd (Int_t idiv) override;  Update current division index and global matrix to point to a given slice. ;  ; TGeoMatrix * CreateMatrix () const override;  Return new matrix of type used by this finder. ;  ; virtual Double_t FindNextBoundary (Double_t *point, Double_t *dir, Int_t &indnext);  Compute distance to next division layer returning the index of next section. ;  ; TGeoNode * FindNode (Double_t *point, const Double_t *dir=nullptr) override;  Find the cell corresponding to point and next cell along dir (if asked) ;  ; Int_t GetDivAxis () override;  ; TClass * IsA () const override;  ; Bool_t IsOnBoundary (const Double_t *point) const override;  Checks if the current point is on division boundary. ;  ; TGeoPatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; TGeoPatternX & operator= (const TGeoPatternX &);  assignment operator ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const overr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternX.html:68,Guid,Guide,68,doc/master/classTGeoPatternX.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternX.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoPatternY Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGeoPatternY Class Reference. . Definition at line 145 of file TGeoPatternFinder.h. Public Member Functions;  TGeoPatternY ();  Default constructor. ;  ;  TGeoPatternY (const TGeoPatternY &pf);  copy constructor ;  ;  TGeoPatternY (TGeoVolume *vol, Int_t ndivisions);  constructor ;  ;  TGeoPatternY (TGeoVolume *vol, Int_t ndivisions, Double_t start, Double_t end);  constructor ;  ;  TGeoPatternY (TGeoVolume *vol, Int_t ndivisions, Double_t step);  constructor ;  ;  ~TGeoPatternY () override;  Destructor. ;  ; void cd (Int_t idiv) override;  Update current division index and global matrix to point to a given slice. ;  ; TGeoMatrix * CreateMatrix () const override;  Return new matrix of type used by this finder. ;  ; virtual Double_t FindNextBoundary (Double_t *point, Double_t *dir, Int_t &indnext);  Compute distance to next division layer returning the index of next section. ;  ; TGeoNode * FindNode (Double_t *point, const Double_t *dir=nullptr) override;  Find the cell corresponding to point and next cell along dir (if asked) ;  ; Int_t GetDivAxis () override;  ; TClass * IsA () const override;  ; Bool_t IsOnBoundary (const Double_t *point) const override;  Checks if the current point is on division boundary. ;  ; TGeoPatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; TGeoPatternY & operator= (const TGeoPatternY &);  assignment operator ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const overr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternY.html:68,Guid,Guide,68,doc/master/classTGeoPatternY.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternY.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoPatternZ Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGeoPatternZ Class Reference. . Definition at line 177 of file TGeoPatternFinder.h. Public Member Functions;  TGeoPatternZ ();  Default constructor. ;  ;  TGeoPatternZ (const TGeoPatternZ &pf);  copy constructor ;  ;  TGeoPatternZ (TGeoVolume *vol, Int_t ndivisions);  constructor ;  ;  TGeoPatternZ (TGeoVolume *vol, Int_t ndivisions, Double_t start, Double_t end);  constructor ;  ;  TGeoPatternZ (TGeoVolume *vol, Int_t ndivisions, Double_t step);  constructor ;  ;  ~TGeoPatternZ () override;  Destructor. ;  ; void cd (Int_t idiv) override;  Update current division index and global matrix to point to a given slice. ;  ; TGeoMatrix * CreateMatrix () const override;  Return new matrix of type used by this finder. ;  ; virtual Double_t FindNextBoundary (Double_t *point, Double_t *dir, Int_t &indnext);  Compute distance to next division layer returning the index of next section. ;  ; TGeoNode * FindNode (Double_t *point, const Double_t *dir=nullptr) override;  Find the cell corresponding to point and next cell along dir (if asked) ;  ; Int_t GetDivAxis () override;  ; TClass * IsA () const override;  ; Bool_t IsOnBoundary (const Double_t *point) const override;  Checks if the current point is on division boundary. ;  ; TGeoPatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; TGeoPatternZ & operator= (const TGeoPatternZ &);  assignment operator ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const overr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternZ.html:68,Guid,Guide,68,doc/master/classTGeoPatternZ.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternZ.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoPcon Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoPcon Class Reference. . Definition at line 17 of file TGeoPcon.h. Public Member Functions;  TGeoPcon ();  ;  TGeoPcon (const char *name);  ;  TGeoPcon (const char *name, Double_t phi, Double_t dphi, Int_t nz);  ;  TGeoPcon (Double_t *params);  ;  TGeoPcon (Double_t phi, Double_t dphi, Int_t nz);  ;  ~TGeoPcon () override;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; virtual void DefineSection (Int_t snum, Double_t z, Double_t rmin, Double_t rmax);  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistToSegZ (const Double_t *point, const Double_t *dir, Int_t &iz) const;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPcon.html:64,Guid,Guide,64,doc/master/classTGeoPcon.html,https://root.cern,https://root.cern/doc/master/classTGeoPcon.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoPgon Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoPgon Class Reference. . Definition at line 20 of file TGeoPgon.h. Classes; struct  ThreadData_t;  . Public Member Functions;  TGeoPgon ();  ;  TGeoPgon (const char *name, Double_t phi, Double_t dphi, Int_t nedges, Int_t nz);  ;  TGeoPgon (Double_t *params);  ;  TGeoPgon (Double_t phi, Double_t dphi, Int_t nedges, Int_t nz);  ;  ~TGeoPgon () override;  ; Double_t Capacity () const override;  ; void ClearThreadData () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; void CreateThreadData (Int_t nthreads) override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPgon.html:64,Guid,Guide,64,doc/master/classTGeoPgon.html,https://root.cern,https://root.cern/doc/master/classTGeoPgon.html,2,"['Clear', 'Guid']","['ClearThreadData', 'Guide']"
Usability,". ROOT: TGeoPhysicalNode Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoPhysicalNode Class ReferenceThe Geometry Package » Geometry classes. ; Physical nodes are the actual 'touchable' objects in the geometry, representing a path of positioned volumes starting with the top node: path=/TOP/A_1/B_4/C_3 , where A, B, C represent names of volumes. ; The number of physical nodes is given by the total number of possible of branches in the geometry hierarchy. In case of detector geometries and specially for calorimeters this number can be of the order 1e6-1e9, therefore it is impossible to create all physical nodes as objects in memory. In TGeo, physical nodes are represented by the class TGeoPhysicalNode and can be created on demand for alignment purposes:; TGeoPhysicalNode *pn = new TGeoPhysicalNode(""path_to_object""); TGeoPhysicalNodePhysical nodes are the actual 'touchable' objects in the geometry, representing a path of positioned ...Definition TGeoPhysicalNode.h:35; TGeoPhysicalNode::TGeoPhysicalNodeTGeoPhysicalNode()Default constructor.Definition TGeoPhysicalNode.cxx:77; Once created, a physical node can be misaligned, meaning that its position or even shape can be changed:; pn->Align(TGeoMatrix* newmat, TGeoShape* newshape, Bool_t check=kFALSE); kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; TGeoMatrixGeometrical transformation package.Definition TGeoMatrix.h:38; TGeoPhysicalNode::AlignBool_t Align(TGeoMatrix *newmat=nullptr, TGeoShape *newshape=nullptr, Bool_t check=kFALSE, Double_t ovlp=0.001)Align a physical node with a new relative matrix/shape.Definition TGeoPhysicalNode.cxx:135; TGeoShapeBase abstract class for all shapes.Definition TGeoShape.h:25; bool. Definition at line 35 of file TGeoPhysicalNode.h. Public Types; enum  {",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPhysicalNode.html:72,Guid,Guide,72,doc/master/classTGeoPhysicalNode.html,https://root.cern,https://root.cern/doc/master/classTGeoPhysicalNode.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoPolygon Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGeoPolygon Class ReferenceThe Geometry Package » Shapes. ; An arbitrary polygon defined by vertices. ; The vertices have to be defined CLOCKWISE in the XY plane, making either a convex or concave polygon. No test for malformed polygons is performed.; A polygon is a 2D shape defined by vertices in the XY plane. It is used by TGeoXtru class for computing Contains() and Safety(). Only the pointers to the actual lists of XY values are used - these are not owned by the class.; To check if a point in XY plane is contained by a polygon, this is split into an outscribed convex polygon and the remaining polygons of its subtraction from the outscribed one. A point is INSIDE if it is contained by the outscribed polygon but NOT by the remaining ones. Since these can also be arbitrary polygons at their turn, a tree structure is formed:; P = Pconvex - (Pconvex-P) where (-) means 'subtraction'; Pconvex-P = P1 + P2 + ... where (+) means 'union'; Note that P1, P2, ... do not intersect each other and they are defined by subsets of the list of vertices of P. They can be split in the same way as P*; Therefore, if C(P) represents the Boolean : 'does P contains a given point?', then:; C(P) = C(Pconvex) .and. not(C(P1) | C(P2) | ...); For creating a polygon without TGeoXtru class, one has to call the constructor TGeoPolygon(nvert) and then SetXY(Double_t *x, Double_t *y) providing the arrays of X and Y vertex positions (defined clockwise) that have to 'live' longer than the polygon they will describe. This complication is due to efficiency reasons. At the end one has to call the FinishPolygon() method. ; Definition at line 19 of file TGeoPolygon.h. Public Types; enum  { kGeoConvex = (1ULL << ( 9 )); , ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPolygon.html:67,Guid,Guide,67,doc/master/classTGeoPolygon.html,https://root.cern,https://root.cern/doc/master/classTGeoPolygon.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoRCExtension Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGeoRCExtension Class ReferenceThe Geometry Package » Geometry classes. ; Reference counted extension which has a pointer to and owns a user defined TObject. ; This class can be used as model for a reference counted derivation from TGeoExtension.; Note: Creating a TGeoRCExtension with new() automatically grabs it, but the creator has to Release it before the pointer gets out of scope. The following sequence is valid:; // producer:; TGeoRCExtension *ext = new TGeoRCExtension();; some_TGeoVolume->SetUserExtension(ext);; ext->Release();; // user:; TGeoRCExtension *ext = dynamic_cast<TGeoRCExtension*>(some_TGeoVolume->GrabUserExtension());; // ... use extension; ext->Release();; TGeoRCExtensionReference counted extension which has a pointer to and owns a user defined TObject.Definition TGeoExtension.h:33; TGeoRCExtension::TGeoRCExtensionTGeoRCExtension()Definition TGeoExtension.h:38; TGeoRCExtension::Releasevoid Release() const overrideDefinition TGeoExtension.cxx:68; The extension is going to be released by the TGeoVolume holder at the destruction or when calling SetUserExtension(0).; The following usage is not correct:; some_TGeoVolume->SetUserExtension(new TGeoRCExtension()); since the producer code does not release the extension. One cannot call directly ""delete ext"" nor allocate an extension on the stack, since the destructor is protected. Use Release instead. ; Definition at line 33 of file TGeoExtension.h. Public Member Functions;  TGeoRCExtension ();  ;  TGeoRCExtension (TObject *obj);  ; TObject * GetUserObject () const;  ; TGeoExtension * Grab () override;  ; TClass * IsA () const override;  ; void Release () const override;  ; void SetUserObject (TObject *ob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoRCExtension.html:71,Guid,Guide,71,doc/master/classTGeoRCExtension.html,https://root.cern,https://root.cern/doc/master/classTGeoRCExtension.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoRegion Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGeoRegion Class ReferenceThe Geometry Package » Geometry classes. ; Regions are groups of volumes having a common set of user tracking cuts. ; Class wrapper for regions used by Monte Carlo packages A region is composed by a list of logical volumes and defines a set of cuts. Used mainly to transport region information stored in GDML format to the clients requiring it from the transient geometry. ; Definition at line 36 of file TGeoRegion.h. Public Member Functions;  TGeoRegion ();  ;  TGeoRegion (const char *name, const char *title="""");  ;  TGeoRegion (const TGeoRegion &other);  Region copy constructor. ;  ;  ~TGeoRegion () override;  Region destructor. ;  ; void AddCut (const char *name, Double_t cut);  Add cut to the region. ;  ; void AddCut (const TGeoRegionCut &regioncut);  Add an identical cut to the region. ;  ; bool AddVolume (const char *name);  Add an existing volume to the region. ;  ; void AddVolume (TGeoVolume *vol);  ; TGeoRegionCut * GetCut (int i) const;  ; int GetNcuts () const;  ; int GetNvolumes () const;  ; TGeoVolume * GetVolume (int i) const;  ; TClass * IsA () const override;  ; TGeoRegion & operator= (const TGeoRegion &other);  Assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print region info. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoRegion.html:66,Guid,Guide,66,doc/master/classTGeoRegion.html,https://root.cern,https://root.cern/doc/master/classTGeoRegion.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoRegionCut Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGeoRegionCut Class Reference. . Definition at line 20 of file TGeoRegion.h. Public Member Functions;  TGeoRegionCut ();  ;  TGeoRegionCut (const char *name, Double_t cut);  ;  ~TGeoRegionCut () override;  ; Double_t GetCut () const;  ; TClass * IsA () const override;  ; void SetCut (Double_t cut);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TName",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoRegionCut.html:69,Guid,Guide,69,doc/master/classTGeoRegionCut.html,https://root.cern,https://root.cern/doc/master/classTGeoRegionCut.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoRotation Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoRotation Class ReferenceThe Geometry Package » Geometry classes. ; Class describing rotations. ; A rotation is a 3*3 array Column vectors has to be orthogonal unit vectors. ; Definition at line 168 of file TGeoMatrix.h. Public Member Functions;  TGeoRotation ();  Default constructor. ;  ;  TGeoRotation (const char *name);  Named rotation constructor. ;  ;  TGeoRotation (const char *name, Double_t phi, Double_t theta, Double_t psi);  Default rotation constructor with Euler angles. ;  ;  TGeoRotation (const char *name, Double_t theta1, Double_t phi1, Double_t theta2, Double_t phi2, Double_t theta3, Double_t phi3);  Rotation constructor a la GEANT3. ;  ;  TGeoRotation (const TGeoMatrix &other);  Copy ctor. ;  ;  TGeoRotation (const TGeoRotation &other);  Copy ctor. ;  ;  ~TGeoRotation () override;  ; void Clear (Option_t *option="""") override;  reset data members ;  ; Double_t Determinant () const;  computes determinant of the rotation matrix ;  ; void FastRotZ (const Double_t *sincos);  Perform a rotation about Z having the sine/cosine of the rotation angle. ;  ; void GetAngles (Double_t &phi, Double_t &theta, Double_t &psi) const;  Retrieve Euler angles. ;  ; void GetAngles (Double_t &theta1, Double_t &phi1, Double_t &theta2, Double_t &phi2, Double_t &theta3, Double_t &phi3) const;  Retrieve rotation angles. ;  ; void GetInverse (Double_t *invmat) const;  Get the inverse rotation matrix (which is simply the transpose) ;  ; Double_t GetPhiRotation (Bool_t fixX=kFALSE) const;  Returns rotation angle about Z axis in degrees. ;  ; const Double_t * GetRotationMatrix () const override;  ; const Double_t * GetScale () const override;  ; const Double_t * GetTranslation () const override;  ; TGeoHMat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoRotation.html:68,Guid,Guide,68,doc/master/classTGeoRotation.html,https://root.cern,https://root.cern/doc/master/classTGeoRotation.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoScale Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGeoScale Class ReferenceThe Geometry Package » Geometry classes. ; Class describing scale transformations. ; A scale is an array of 3 doubles (sx, sy, sz) multiplying elements 0, 5 and 10 of the homogenous matrix. A scale is normalized : sx*sy*sz = 1 ; Definition at line 253 of file TGeoMatrix.h. Public Member Functions;  TGeoScale ();  default constructor ;  ;  TGeoScale (const char *name, Double_t sx, Double_t sy, Double_t sz);  default constructor ;  ;  TGeoScale (const TGeoMatrix &other);  Ctor. based on a general matrix. ;  ;  TGeoScale (const TGeoScale &other);  Copy constructor. ;  ;  TGeoScale (Double_t sx, Double_t sy, Double_t sz);  default constructor ;  ;  ~TGeoScale () override;  destructor ;  ; const Double_t * GetRotationMatrix () const override;  ; const Double_t * GetScale () const override;  ; const Double_t * GetTranslation () const override;  ; TGeoHMatrix Inverse () const override;  Return a temporary inverse of this. ;  ; TClass * IsA () const override;  ; void LocalToMaster (const Double_t *local, Double_t *master) const override;  Convert a local point to the master frame. ;  ; Double_t LocalToMaster (Double_t dist, const Double_t *dir=nullptr) const;  Convert the local distance along unit vector DIR to master frame. ;  ; void LocalToMasterVect (const Double_t *local, Double_t *master) const override;  convert a vector by multiplying its column vector (x, y, z, 1) to matrix inverse ;  ; TGeoMatrix * MakeClone () const override;  Make a clone of this matrix. ;  ; void MasterToLocal (const Double_t *master, Double_t *local) const override;  Convert a global point to local frame. ;  ; Double_t MasterToLocal (Double_t dist, const Double_t *dir=nullptr) const;  Convert the distance along unit vector DIR to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoScale.html:65,Guid,Guide,65,doc/master/classTGeoScale.html,https://root.cern,https://root.cern/doc/master/classTGeoScale.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoScaledShape Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGeoScaledShape Class ReferenceThe Geometry Package » Geometry classes. ; A shape scaled by a TGeoScale transformation. . Definition at line 20 of file TGeoScaledShape.h. Public Member Functions;  TGeoScaledShape ();  Default constructor. ;  ;  TGeoScaledShape (const char *name, TGeoShape *shape, TGeoScale *scale);  Constructor. ;  ;  TGeoScaledShape (TGeoShape *shape, TGeoScale *scale);  Constructor. ;  ;  ~TGeoScaledShape () override;  destructor ;  ; Double_t Capacity () const override;  Computes capacity of this shape [length^3]. ;  ; void ComputeBBox () override;  Compute bounding box of the scaled shape. ;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  Compute normal to closest surface from POINT. ;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  Compute the normal for an array o points so that norm.dot.dir is positive Input: Arrays of point coordinates and directions + vector size Output: Array of normal directions. ;  ; Bool_t Contains (const Double_t *point) const override;  Test if point is inside the scaled shape. ;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  Check the inside status for each of the points in the array. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  compute closest distance from point px,py to each vertex. Should not be called. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  Compute distance from inside point to surface of the scaled shape. ;  ; void DistFromInside_v (const Double_t *points, const Double_t *d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoScaledShape.html:71,Guid,Guide,71,doc/master/classTGeoScaledShape.html,https://root.cern,https://root.cern/doc/master/classTGeoScaledShape.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoShape Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Private Attributes |; List of all members ; TGeoShape Class ReferenceabstractThe Geometry Package » Shapes. ; Base abstract class for all shapes. ; Shapes are geometrical objects that provide the basic modelling functionality. They provide the definition of the LOCAL frame of coordinates, with respect to which they are defined. Any implementation of a shape deriving from the base TGeoShape class has to provide methods for :. finding out if a point defined in their local frame is or not contained inside;; computing the distance from a local point to getting outside/entering the shape, given a known direction;; computing the maximum distance in any direction from a local point that does NOT result in a boundary crossing of the shape (safe distance);; computing the cosines of the normal vector to the crossed shape surface, given a starting local point and an ongoing direction. All the features above are globally managed by the modeller in order to provide navigation functionality. In addition to those, shapes have also to implement additional specific abstract methods :; computation of the minimal box bounding the shape, given that this box have to be aligned with the local coordinates;; algorithms for dividing the shape along a given axis and producing resulting divisions volumes. The modeler currently provides a set of 16 basic shapes, which we will call primitives. It also provides a special class allowing the creation of shapes made as a result of boolean operations between primitives. These are called composite shapes and the composition operation can be recursive (composition of composites). This allows the creation of a quite large number of different shape topologies and combinations.; Name",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoShape.html:65,Guid,Guide,65,doc/master/classTGeoShape.html,https://root.cern,https://root.cern/doc/master/classTGeoShape.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoShapeAssembly Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGeoShapeAssembly Class ReferenceThe Geometry Package » Shapes. ; The shape encapsulating an assembly (union) of volumes. ; Automatically created by TGeoVolumeAssembly class ; Definition at line 19 of file TGeoShapeAssembly.h. Public Member Functions;  TGeoShapeAssembly ();  Default constructor. ;  ;  TGeoShapeAssembly (TGeoVolumeAssembly *vol);  Constructor specifying hyperboloid parameters. ;  ;  ~TGeoShapeAssembly () override;  destructor ;  ; void ComputeBBox () override;  Compute bounding box of the assembly. ;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  Compute normal to closest surface from POINT. Should not be called. ;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  Compute the normal for an array o points so that norm.dot.dir is positive Input: Arrays of point coordinates and directions + vector size Output: Array of normal directions. ;  ; Bool_t Contains (const Double_t *point) const override;  Test if point is inside the assembly. ;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  Check the inside status for each of the points in the array. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  compute closest distance from point px,py to each vertex. Should not be called. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  Compute distance from inside point to surface of the hyperboloid. ;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  Compute d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoShapeAssembly.html:73,Guid,Guide,73,doc/master/classTGeoShapeAssembly.html,https://root.cern,https://root.cern/doc/master/classTGeoShapeAssembly.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoSkinSurface Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TGeoSkinSurface Class Reference. . Definition at line 177 of file TGeoOpticalSurface.h. Public Member Functions;  TGeoSkinSurface ();  ;  TGeoSkinSurface (const char *name, const char *ref, TGeoOpticalSurface const *surf, TGeoVolume const *vol);  ;  ~TGeoSkinSurface () override;  ; TGeoOpticalSurface const * GetSurface () const;  ; TGeoVolume const * GetVolume () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  This method must be overridden when a class wants to print itself. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoSkinSurface.html:71,Guid,Guide,71,doc/master/classTGeoSkinSurface.html,https://root.cern,https://root.cern/doc/master/classTGeoSkinSurface.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoSphere Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoSphere Class Reference. . Definition at line 17 of file TGeoSphere.h. Public Member Functions;  TGeoSphere ();  ;  TGeoSphere (const char *name, Double_t rmin, Double_t rmax, Double_t theta1=0, Double_t theta2=180, Double_t phi1=0, Double_t phi2=360);  ;  TGeoSphere (Double_t *param, Int_t nparam=6);  ;  TGeoSphere (Double_t rmin, Double_t rmax, Double_t theta1=0, Double_t theta2=180, Double_t phi1=0, Double_t phi2=360);  ;  ~TGeoSphere () override;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistToSphere (const Double_t *point, const Double_t *dir, Double_t rsph, Bool_t check=kTRUE, Bool_t firstcross=kTRUE) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoSphere.html:66,Guid,Guide,66,doc/master/classTGeoSphere.html,https://root.cern,https://root.cern/doc/master/classTGeoSphere.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoSubtraction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGeoSubtraction Class Reference. . Definition at line 175 of file TGeoBoolNode.h. Public Member Functions;  TGeoSubtraction ();  Default constructor. ;  ;  TGeoSubtraction (const char *expr1, const char *expr2);  Constructor. ;  ;  TGeoSubtraction (TGeoShape *left, TGeoShape *right, TGeoMatrix *lmat=nullptr, TGeoMatrix *rmat=nullptr);  Constructor providing pointers to components. ;  ;  ~TGeoSubtraction () override;  Destructor — deletion of components handled by TGeoManager class. ;  ; void ComputeBBox (Double_t &dx, Double_t &dy, Double_t &dz, Double_t *origin) override;  Compute bounding box corresponding to a subtraction of two shapes. ;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  Normal computation in POINT. The orientation is chosen so that DIR.dot.NORM>0. ;  ; Bool_t Contains (const Double_t *point) const override;  Find if a subtraction of two shapes contains a given point. ;  ; Int_t DistanceToPrimitive (Int_t px, Int_t py) override;  Compute minimum distance to shape vertices. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=0, Double_t *safe=nullptr) const override;  Compute distance from a given point inside to the shape boundary. ;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=0, Double_t *safe=nullptr) const override;  Compute distance from a given point outside to the shape. ;  ; EGeoBoolType GetBooleanOperator () const override;  ; Int_t GetNpoints () override;  Returns number of vertices for the composite shape described by this subtraction. ;  ; TClass * IsA () const override;  ; TGeoBoolNode * MakeClone () const override;  Make a clone of this. Pointers are preserved. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoSubtraction.html:71,Guid,Guide,71,doc/master/classTGeoSubtraction.html,https://root.cern,https://root.cern/doc/master/classTGeoSubtraction.html,1,['Guid'],['Guide']
Usability,. ROOT: TGeoTabManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TGeoTabManager Class ReferenceThe Geometry Package » Geometry builder. ; Manager for all editor tabs. ; TGeoTreeDialog - Base class for dialog frames for selecting objects with a tree hierarchy. Specific implementations are:. TGeoVolumeDialog - Special tree dialog class for selecting volumes.; TGeoShapeDialog - Special tree dialog class for selecting shapes.; TGeoMediumDialog - Special tree dialog class for selecting media.; TGeoMaterialDialog - Special tree dialog class for selecting materials.; TGeoMatrixDialog - Special tree dialog class for selecting matrices.; TGeoTransientPanel - Special transient tab holding TGeo editors. . Definition at line 42 of file TGeoTabManager.h. Public Member Functions;  TGeoTabManager (TGedEditor *ged);  Ctor. ;  ;  ~TGeoTabManager () override;  Dtor. ;  ; void GetMaterialEditor (TGeoMaterial *material);  Get editor for a material. ;  ; void GetMatrixEditor (TGeoMatrix *matrix);  Get editor for a matrix. ;  ; void GetMediumEditor (TGeoMedium *medium);  Get editor for a medium. ;  ; TVirtualPad * GetPad () const;  ; void GetShapeEditor (TGeoShape *shape);  Get editor for a shape. ;  ; TGTab * GetTab () const;  ; Int_t GetTabIndex () const;  Get index for a given tab element. ;  ; TGeoVolume * GetVolume () const;  ; void GetVolumeEditor (TGeoVolume *vol);  Get editor for a volume. ;  ; TGCompositeFrame * GetVolumeTab () const;  ; void SetModel (TObject *model);  Send the SetModel signal to all editors in the tab TYPE. ;  ; void SetTab ();  Set a given tab element as active one. ;  ; void SetVolTabEnabled (Bool_t flag=kTRUE);  Enable/disable tabs. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject con,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTabManager.html:70,Guid,Guide,70,doc/master/classTGeoTabManager.html,https://root.cern,https://root.cern/doc/master/classTGeoTabManager.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoTessellated Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGeoTessellated Class ReferenceThe Geometry Package » Geometry classes. ; Tessellated solid class. ; It is composed by a set of planar faces having triangular or quadrilateral shape. The class does not provide navigation functionality, it just wraps the data for the composing faces. ; Definition at line 56 of file TGeoTessellated.h. Public Types; using Vertex_t = Tessellated::Vertex_t;  ;  Public Types inherited from TGeoShape; enum  EShapeType { ;   kBitMask32 = 0xffffffff; , kGeoNoShape = 0; , kGeoBad = (1ULL << ( 0 )); , kGeoRSeg = (1ULL << ( 1 )); , ;   kGeoPhiSeg = (1ULL << ( 2 )); , kGeoThetaSeg = (1ULL << ( 3 )); , kGeoVisX = (1ULL << ( 4 )); , kGeoVisY = (1ULL << ( 5 )); , ;   kGeoVisZ = (1ULL << ( 6 )); , kGeoRunTimeShape = (1ULL << ( 7 )); , kGeoInvalidShape = (1ULL << ( 8 )); , kGeoTorus = (1ULL << ( 9 )); , ;   kGeoBox = (1ULL << ( 10 )); , kGeoPara = (1ULL << ( 11 )); , kGeoSph = (1ULL << ( 12 )); , kGeoTube = (1ULL << ( 13 )); , ;   kGeoTubeSeg = (1ULL << ( 14 )); , kGeoCone = (1ULL << ( 15 )); , kGeoConeSeg = (1ULL << ( 16 )); , kGeoPcon = (1ULL << ( 17 )); , ;   kGeoPgon = (1ULL << ( 18 )); , kGeoArb8 = (1ULL << ( 19 )); , kGeoEltu = (1ULL << ( 20 )); , kGeoTrap = (1ULL << ( 21 )); , ;   kGeoCtub = (1ULL << ( 22 )); , kGeoTrd1 = (1ULL << ( 23 )); , kGeoTrd2 = (1ULL << ( 24 )); , kGeoComb = (1ULL << ( 25 )); , ;   kGeoClosedShape = (1ULL << ( 26 )); , kGeoXtru = (1ULL << ( 27 )); , kGeoParaboloid = (1ULL << ( 28 )); , kGeoHalfSpace = (1ULL << ( 29 )); , ;   kGeoHype = (1ULL << ( 30 )); , kGeoSavePrimitive = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kIncons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTessellated.html:71,Guid,Guide,71,doc/master/classTGeoTessellated.html,https://root.cern,https://root.cern/doc/master/classTGeoTessellated.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoTorus Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoTorus Class Reference. . Definition at line 17 of file TGeoTorus.h. Public Member Functions;  TGeoTorus ();  ;  TGeoTorus (const char *name, Double_t r, Double_t rmin, Double_t rmax, Double_t phi1=0, Double_t dphi=360);  ;  TGeoTorus (Double_t *params);  ;  TGeoTorus (Double_t r, Double_t rmin, Double_t rmax, Double_t phi1=0, Double_t dphi=360);  ;  ~TGeoTorus () override;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Double_t Daxis (const Double_t *pt, const Double_t *dir, Double_t t) const;  ; Double_t DDaxis (const Double_t *pt, const Double_t *dir, Double_t t) const;  ; Double_t DDDaxis (const Double_t *pt, const Double_t *dir, Double_t t) const;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTorus.html:65,Guid,Guide,65,doc/master/classTGeoTorus.html,https://root.cern,https://root.cern/doc/master/classTGeoTorus.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoTrack Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TGeoTrack Class ReferenceThe Geometry Package » Geometry painter. ; Deprecated:Use of TGeoTrack is deprecated. For the event display please switch to TEve (using TEveTracks or TEvePointSet to display tracks specifically) or to REve.; Class for user-defined tracks attached to a geometry. Tracks are 3D objects made of points and they store a pointer to a TParticle. The geometry manager holds a list of all tracks that will be deleted on destruction of gGeoManager. ; Definition at line 26 of file TGeoTrack.h. Public Types; enum  EGeoParticleActions { ;   kGeoPDefault = BIT(7); , kGeoPOnelevel = BIT(8); , kGeoPAllDaughters = BIT(9); , kGeoPType = BIT(10); , ;   kGeoPDrawn = BIT(11). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TGeoAtt; enum  { kBitMask = 0x00ffffff; };  ; enum  EGeoActivityAtt { kActOverride = (1ULL << ( 8 )); , kActNone = (1ULL << ( 9 )); , kActThis = (1ULL << ( 10 )); , kActDaughters = (1ULL << ( 11 )); };  ; enum  EGeoOptimizationAtt { kUseBoundingBox = (1ULL << ( 16 )); , kUseVoxels = (1ULL << ( 17 )); , kUseGsord = (1ULL << ( 18 )); };  ; enum  EGeoSavePrimitiveAtt { kSavePrimitiveAt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTrack.html:65,Guid,Guide,65,doc/master/classTGeoTrack.html,https://root.cern,https://root.cern/doc/master/classTGeoTrack.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoTranslation Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGeoTranslation Class ReferenceThe Geometry Package » Geometry classes. ; Class describing translations. ; A translation is basically an array of 3 doubles matching the positions 12, 13 and 14 in the homogenous matrix description. ; Definition at line 116 of file TGeoMatrix.h. Public Member Functions;  TGeoTranslation ();  Default constructor. ;  ;  TGeoTranslation (const char *name, Double_t dx, Double_t dy, Double_t dz);  Default constructor defining the translation. ;  ;  TGeoTranslation (const TGeoMatrix &other);  Ctor. based on a general matrix. ;  ;  TGeoTranslation (const TGeoTranslation &other);  Copy ctor. ;  ;  TGeoTranslation (Double_t dx, Double_t dy, Double_t dz);  Default constructor defining the translation. ;  ;  ~TGeoTranslation () override;  ; void Add (const TGeoTranslation *other);  Adding a translation to this one. ;  ; const Double_t * GetRotationMatrix () const override;  ; const Double_t * GetScale () const override;  ; const Double_t * GetTranslation () const override;  ; TGeoHMatrix Inverse () const override;  Return a temporary inverse of this. ;  ; TClass * IsA () const override;  ; void LocalToMaster (const Double_t *local, Double_t *master) const override;  convert a point by multiplying its column vector (x, y, z, 1) to matrix inverse ;  ; void LocalToMasterBomb (const Double_t *local, Double_t *master) const override;  convert a point by multiplying its column vector (x, y, z, 1) to matrix inverse ;  ; void LocalToMasterVect (const Double_t *local, Double_t *master) const override;  convert a vector to MARS ;  ; TGeoMatrix * MakeClone () const override;  Make a clone of this matrix. ;  ; void MasterToLocal (const Double_t *master, Double_t *local) const override;  convert a point by multi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTranslation.html:71,Guid,Guide,71,doc/master/classTGeoTranslation.html,https://root.cern,https://root.cern/doc/master/classTGeoTranslation.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoTrap Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGeoTrap Class Reference. . Definition at line 96 of file TGeoArb8.h. Public Member Functions;  TGeoTrap ();  ;  TGeoTrap (const char *name, Double_t dz, Double_t theta, Double_t phi, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2);  ;  TGeoTrap (Double_t dz, Double_t theta, Double_t phi);  ;  TGeoTrap (Double_t dz, Double_t theta, Double_t phi, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2);  ;  ~TGeoTrap () override;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; Double_t GetAlpha1 () const;  ; Double_t GetAlpha2 () const;  ; Double_t GetBl1 () const;  ; Double_t GetBl2 () const;  ; Double_t GetH1 () const;  ; Double_t GetH2 () const;  ; TGeoShape * GetMakeRuntimeShape (TGeoShape *mother, TGeoMatrix *mat) const override;  ; Double_t GetPhi () const;  ; Double_t GetTheta () const;  ; Double_t GetTl1 () const;  ; Double_t GetTl2 () const;  ; TClass * IsA () const override;  ; Double_t Safety (const Double_t *point, Bool_t in=kTR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTrap.html:64,Guid,Guide,64,doc/master/classTGeoTrap.html,https://root.cern,https://root.cern/doc/master/classTGeoTrap.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoTrd1 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoTrd1 Class Reference. . Definition at line 17 of file TGeoTrd1.h. Public Member Functions;  TGeoTrd1 ();  ;  TGeoTrd1 (const char *name, Double_t dx1, Double_t dx2, Double_t dy, Double_t dz);  ;  TGeoTrd1 (Double_t *params);  ;  TGeoTrd1 (Double_t dx1, Double_t dx2, Double_t dy, Double_t dz);  ;  ~TGeoTrd1 () override;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ; void GetBoundingCylinder (Double_t *param) const override;  ; Int_t GetByteCount () const override;  ; Double_t GetDx1 () const;  ; Double_t GetDx2 () const;  ; Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTrd1.html:64,Guid,Guide,64,doc/master/classTGeoTrd1.html,https://root.cern,https://root.cern/doc/master/classTGeoTrd1.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoTrd2 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoTrd2 Class Reference. . Definition at line 17 of file TGeoTrd2.h. Public Member Functions;  TGeoTrd2 ();  ;  TGeoTrd2 (const char *name, Double_t dx1, Double_t dx2, Double_t dy1, Double_t dy2, Double_t dz);  ;  TGeoTrd2 (Double_t *params);  ;  TGeoTrd2 (Double_t dx1, Double_t dx2, Double_t dy1, Double_t dy2, Double_t dz);  ;  ~TGeoTrd2 () override;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ; void GetBoundingCylinder (Double_t *param) const override;  ; Int_t GetByteCount () const override;  ; Double_t GetDx1 () const;  ; D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTrd2.html:64,Guid,Guide,64,doc/master/classTGeoTrd2.html,https://root.cern,https://root.cern/doc/master/classTGeoTrd2.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoTube Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoTube Class Reference. . Definition at line 17 of file TGeoTube.h. Public Member Functions;  TGeoTube ();  ;  TGeoTube (const char *name, Double_t rmin, Double_t rmax, Double_t dz);  ;  TGeoTube (Double_t *params);  ;  TGeoTube (Double_t rmin, Double_t rmax, Double_t dz);  ;  ~TGeoTube () override;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; const char * GetAxisName (Int_t iaxis) const override;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ; void GetBoun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTube.html:64,Guid,Guide,64,doc/master/classTGeoTube.html,https://root.cern,https://root.cern/doc/master/classTGeoTube.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoTubeSeg Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoTubeSeg Class Reference. . Definition at line 94 of file TGeoTube.h. Public Member Functions;  TGeoTubeSeg ();  ;  TGeoTubeSeg (const char *name, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2);  ;  TGeoTubeSeg (Double_t *params);  ;  TGeoTubeSeg (Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2);  ;  ~TGeoTubeSeg () override;  ; void AfterStreamer () override;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; Double_t GetAxisRange (Int_t iaxis, Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTubeSeg.html:67,Guid,Guide,67,doc/master/classTGeoTubeSeg.html,https://root.cern,https://root.cern/doc/master/classTGeoTubeSeg.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoUniformMagField Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TGeoUniformMagField Class ReferenceThe Geometry Package » Geometry classes. ; Implementation for uniform magnetic field. ; Definition at line 33 of file TVirtualMagField.h. Public Member Functions;  TGeoUniformMagField ();  Default constructor;. ;  ;  TGeoUniformMagField (Double_t Bx, Double_t By, Double_t Bz);  Default constructor;. ;  ;  ~TGeoUniformMagField () override;  ; void Field (const Double_t *, Double_t *B) override;  ; const Double_t * GetFieldValue () const;  ; TClass * IsA () const override;  ; void SetFieldValue (Double_t Bx, Double_t By, Double_t Bz);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TVirtualMagField;  TVirtualMagField ();  ;  TVirtualMagField (const char *name);  ;  ~TVirtualMagField () override;  Destructor. Unregisters the field. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoUniformMagField.html:75,Guid,Guide,75,doc/master/classTGeoUniformMagField.html,https://root.cern,https://root.cern/doc/master/classTGeoUniformMagField.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoUnion Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGeoUnion Class Reference. . Definition at line 100 of file TGeoBoolNode.h. Public Member Functions;  TGeoUnion ();  Default constructor. ;  ;  TGeoUnion (const char *expr1, const char *expr2);  Constructor. ;  ;  TGeoUnion (TGeoShape *left, TGeoShape *right, TGeoMatrix *lmat=nullptr, TGeoMatrix *rmat=nullptr);  Constructor providing pointers to components. ;  ;  ~TGeoUnion () override;  Destructor — deletion of components handled by TGeoManager class. ;  ; void ComputeBBox (Double_t &dx, Double_t &dy, Double_t &dz, Double_t *origin) override;  Compute bounding box corresponding to a union of two shapes. ;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  Normal computation in POINT. The orientation is chosen so that DIR.dot.NORM>0. ;  ; Bool_t Contains (const Double_t *point) const override;  Find if a union of two shapes contains a given point. ;  ; Int_t DistanceToPrimitive (Int_t px, Int_t py) override;  Compute minimum distance to shape vertices. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=0, Double_t *safe=nullptr) const override;  Computes distance from a given point inside the shape to its boundary. ;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=0, Double_t *safe=nullptr) const override;  Compute distance from a given outside point to the shape. ;  ; EGeoBoolType GetBooleanOperator () const override;  ; Int_t GetNpoints () override;  Returns number of vertices for the composite shape described by this union. ;  ; TClass * IsA () const override;  ; TGeoBoolNode * MakeClone () const override;  Make a clone of this. Pointers are preserved. ;  ; void Paint (Option_t *option) override;  Pain",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoUnion.html:65,Guid,Guide,65,doc/master/classTGeoUnion.html,https://root.cern,https://root.cern/doc/master/classTGeoUnion.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoVGShape Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; TGeoVGShape Class ReferenceThe Geometry Package » Geometry classes. ; Bridge class for using a VecGeom solid as TGeoShape. ; Definition at line 30 of file TGeoVGShape.h. Public Member Functions;  TGeoVGShape ();  ;  ~TGeoVGShape () override;  Destructor. ;  ; Double_t Capacity () const override;  Returns analytic capacity of the solid. ;  ; void ComputeBBox () override;  Compute bounding box. ;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  Normal computation. ;  ; Bool_t Contains (const Double_t *point) const override;  Test if point is inside this shape. ;  ; Bool_t CouldBeCrossed (const Double_t *point, const Double_t *dir) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; TGeoVolume * Divide (TGeoVolume *, const char *, Int_t, Int_t, Double_t, Double_t) override;  ; void Draw (Option_t *option="""") override;  Draw this shape. ;  ; const char * GetAxisName (Int_t iaxis) const override;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ; void GetBoundingCylinder (Double_t *param) const override;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections, Bool_t localFrame) const override;  Stub implementation to avoid forcing implementation at this stage. ;  ; Int_t GetByteCount () const overrid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVGShape.html:67,Guid,Guide,67,doc/master/classTGeoVGShape.html,https://root.cern,https://root.cern/doc/master/classTGeoVGShape.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoVolume Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGeoVolume Class ReferenceThe Geometry Package » Shapes. ; TGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes. ; Volumes are the basic objects used in building the geometrical hierarchy. They represent unpositioned objects but store all information about the placement of the other volumes they may contain. Therefore a volume can be replicated several times in the geometry. In order to create a volume, one has to put together a shape and a medium which are already defined. Volumes have to be named by users at creation time. Every different name may represent a an unique volume object, but may also represent more general a family (class) of volume objects having the same shape type and medium, but possibly different shape parameters. It is the user's task to provide different names for different volume families in order to avoid ambiguities at tracking time. A generic family rather than a single volume is created only in two cases : when a generic shape is provided to the volume constructor or when a division operation is applied. Each volume in the geometry stores an unique ID corresponding to its family. In order to ease-up their creation, the manager class is providing an API that allows making a shape and a volume in a single step.; Volumes are objects that can be visualized, therefore having visibility, colour, line and fill attributes that can be defined or modified any time after the volume creation. It is advisable however to define these properties just after the first creation of a volume namespace, since in case of volume families any new member created by the modeler inherits these properties.; In order to provide navigat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolume.html:66,Guid,Guide,66,doc/master/classTGeoVolume.html,https://root.cern,https://root.cern/doc/master/classTGeoVolume.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoVolumeAssembly Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGeoVolumeAssembly Class ReferenceThe Geometry Package » Geometry classes. ; Volume assemblies. ; Assemblies a volumes that have neither a shape or a material/medium. Assemblies behave exactly like normal volumes grouping several daughters together, but the daughters can never extrude the assembly since this has no shape. However, a bounding box and a voxelization structure are built for assemblies as for normal volumes, so that navigation is still optimized. Assemblies are useful for grouping hierarchically volumes which are otherwise defined in a flat manner, but also to avoid clashes between container shapes. To define an assembly one should just input a name, then start adding other volumes (or volume assemblies) as content. ; Definition at line 316 of file TGeoVolume.h. Classes; struct  ThreadData_t;  . Public Member Functions;  TGeoVolumeAssembly ();  Default constructor. ;  ;  TGeoVolumeAssembly (const char *name);  Constructor. ;  ;  ~TGeoVolumeAssembly () override;  Destructor. The assembly is owner of its ""shape"". ;  ; TGeoNode * AddNode (TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat=nullptr, Option_t *option="""") override;  Add a component to the assembly. ;  ; void AddNodeOverlap (TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat, Option_t *option) override;  Add an overlapping node - not allowed for assemblies. ;  ; void ClearThreadData () const override;  ; TGeoVolume * CloneVolume () const override;  Clone this volume. ;  ; void CreateThreadData (Int_t nthreads) override;  ; TGeoVolume * Divide (const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step, Int_t numed=0, Option_t *option="""") override;  Division makes no sense for assemblies. ;  ; TGe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolumeAssembly.html:74,Guid,Guide,74,doc/master/classTGeoVolumeAssembly.html,https://root.cern,https://root.cern/doc/master/classTGeoVolumeAssembly.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoVolumeMulti Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGeoVolumeMulti Class ReferenceThe Geometry Package » Geometry classes. ; Volume families. ; A volume family is represented by the class TGeoVolumeMulti. It represents a class of volumes having the same shape type and each member will be identified by the same name and volume ID. Any operation applied to a TGeoVolume equally affects all volumes in that family. The creation of a family is generally not a user task, but can be forced in particular cases:; TGeoManager::Volume(const char *vname, const char *shape, Int_t nmed);; TGeoManager::VolumeTGeoVolume * Volume(const char *name, const char *shape, Int_t nmed, Float_t *upar, Int_t npar=0)Create a volume in GEANT3 style.Definition TGeoManager.cxx:1388; int; where VNAME is the family name, NMED is the medium number and SHAPE is the shape type that can be:; box - for TGeoBBox; trd1 - for TGeoTrd1; trd2 - for TGeoTrd2; trap - for TGeoTrap; gtra - for TGeoGtra; para - for TGeoPara; tube, tubs - for TGeoTube, TGeoTubeSeg; cone, cons - for TGeoCone, TgeoCons; eltu - for TGeoEltu; ctub - for TGeoCtub; pcon - for TGeoPcon; pgon - for TGeoPgon; TGeoBBoxDefinition TGeoBBox.h:17; TGeoConeDefinition TGeoCone.h:17; TGeoCtubDefinition TGeoTube.h:173; TGeoEltuDefinition TGeoEltu.h:17; TGeoGtraDefinition TGeoArb8.h:149; TGeoParaDefinition TGeoPara.h:17; TGeoPconDefinition TGeoPcon.h:17; TGeoPgonDefinition TGeoPgon.h:20; TGeoTrapDefinition TGeoArb8.h:96; TGeoTrd1Definition TGeoTrd1.h:17; TGeoTrd2Definition TGeoTrd2.h:17; TGeoTubeSegDefinition TGeoTube.h:94; TGeoTubeDefinition TGeoTube.h:17; boxvoid box(Int_t pat, Double_t x1, Double_t y1, Double_t x2, Double_t y2)Definition fillpatterns.C:1; Volumes are then added to a given family upon adding the generic name a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolumeMulti.html:71,Guid,Guide,71,doc/master/classTGeoVolumeMulti.html,https://root.cern,https://root.cern/doc/master/classTGeoVolumeMulti.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoVoxelFinder Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGeoVoxelFinder Class ReferenceThe Geometry Package » Geometry classes. ; Finder class handling voxels. ; Full description with examples and pictures. Definition at line 20 of file TGeoVoxelFinder.h. Public Types; enum  EVoxelsType { kGeoInvalidVoxels = (1ULL << ( 15 )); , kGeoRebuildVoxels = (1ULL << ( 16 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoVoxelFinder ();  Default constructor. ;  ;  TGeoVoxelFinder (TGeoVolume *vol);  Default constructor. ;  ;  ~TGeoVoxelFinder () override;  Destructor. ;  ; void DaughterToMother (Int_t id, const Double_t *local, Double_t *master) const;  convert a point from the local reference system of node id to reference system of mother volume ;  ; virtual Double_t Efficiency ();  Compute voxelization efficiency. ;  ; virtual void FindOverlaps (Int_t inode) const;  create the list of nodes for which the bboxes overlap with inode's bbox ;  ; Double_t * GetBoxes () const;  ; virtual Int_t * GetCheckList (const Double_t *point, Int_t &nelem, TGeoStateInfo &td);  get the list of daughter indices f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVoxelFinder.html:71,Guid,Guide,71,doc/master/classTGeoVoxelFinder.html,https://root.cern,https://root.cern/doc/master/classTGeoVoxelFinder.html,1,['Guid'],['Guide']
Usability,". ROOT: TGeoXtru Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoXtru Class Reference. . Definition at line 22 of file TGeoXtru.h. Classes; struct  ThreadData_t;  . Public Member Functions;  TGeoXtru ();  ;  TGeoXtru (Double_t *param);  ;  TGeoXtru (Int_t nz);  ;  ~TGeoXtru () override;  ; Double_t Capacity () const override;  ; void ClearThreadData () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; void CreateThreadData (Int_t nthreads) override;  ; Bool_t DefinePolygon (Int_t nvert, const Double_t *xv, const Double_t *yv);  ; virtual void DefineSection (Int_t snum, Double_t z, Double_t x0=0., Double_t y0=0., Double_t scale=1.);  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; void DrawPolygon (Option_t *option="""");  ; const TBuffer3D & GetBuffer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoXtru.html:64,Guid,Guide,64,doc/master/classTGeoXtru.html,https://root.cern,https://root.cern/doc/master/classTGeoXtru.html,2,"['Clear', 'Guid']","['ClearThreadData', 'Guide']"
Usability,". ROOT: TGeometry Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TGeometry Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; TGeometry description. ; The Geometry class describes the geometry of a detector. The current implementation supports the GEANT3 style description. A special program provided in the ROOT utilities (toroot) can be used to automatically translate a GEANT detector geometry into a ROOT geometry.; a Geometry object is entered into the list of geometries into the ROOT main object (see TROOT description) when the TGeometry constructor is invoked. Several geometries may coexist in memory. / A Geometry object consist of the following linked lists:. the TMaterial list (material definition only).; the TRotmatrix list (Rotation matrices definition only).; the TShape list (volume definition only).; the TNode list assembling all detector elements. Only the Build and Draw functions for a geometry are currently supported.; The conversion program from Geant to Root has been added in the list of utilities in utils directory.(see g2root) The executable module of g2root can be found in $ROOTSYS/bin/g2root.; To use this conversion program, type the shell command:; g2root geant_rzfile macro_name; for example; g2root na49.geom na49.C; will convert the GEANT RZ file na49.geom into a ROOT macro na49.C; To generate the Geometry structure within Root, do:; Root > .x na49.C; Root > na49.Draw(); Root > wh.x3d() (this invokes the 3-d Root viewer); Root > TFile gna49(""na49.root"",""NEW"") //open a new root file; Root > na49.Write() //Write the na49 geometry structure; Root > gna49.Write() //Write all keys (in this case only one); d#define d(i)Definition RSha256.hxx:102; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeometry.html:65,Guid,Guide,65,doc/master/classTGeometry.html,https://root.cern,https://root.cern/doc/master/classTGeometry.html,1,['Guid'],['Guide']
Usability,". ROOT: TGlobal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TGlobal Class Reference. ; Global variables class (global variables are obtained from CINT). ; This class describes the attributes of a global variable. The TROOT class contains a list of all currently defined global variables (accessible via TROOT::GetListOfGlobals()). ; Definition at line 28 of file TGlobal.h. Public Member Functions;  TGlobal (const TGlobal &);  Copy constructor. ;  ;  TGlobal (DataMemberInfo_t *info=nullptr);  pointer to CINT data member info ;  ; virtual ~TGlobal ();  TGlobal dtor deletes adopted CINT DataMemberInfo object. ;  ; virtual void * GetAddress () const;  Return address of global. ;  ; virtual Int_t GetArrayDim () const;  Return number of array dimensions. ;  ; virtual DeclId_t GetDeclId () const;  ; virtual const char * GetFullTypeName () const;  Get full type description of global variable, e,g.: ""class TDirectory*"". ;  ; virtual Int_t GetMaxIndex (Int_t dim) const;  Return maximum index for array dimension ""dim"". ;  ; virtual const char * GetTypeName () const;  Get type of global variable, e,g.: ""class TDirectory*"" -> ""TDirectory"". ;  ; TClass * IsA () const override;  ; virtual Bool_t IsValid ();  Return true if this global object is pointing to a currently loaded global. ;  ; TGlobal & operator= (const TGlobal &);  Assignment operator. ;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool Update (DataMemberInfo_t *info);  Update the TFunction to reflect the new info. ;  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGlobal.html:63,Guid,Guide,63,doc/master/classTGlobal.html,https://root.cern,https://root.cern/doc/master/classTGlobal.html,1,['Guid'],['Guide']
Usability,". ROOT: TGondzioSolver Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGondzioSolver Class Reference. ; Derived class of TQpSolverBase implementing Gondzio-correction version of Mehrotra's original predictor-corrector algorithm. ; Definition at line 56 of file TGondzioSolver.h. Public Member Functions;  TGondzioSolver ();  Default constructor. ;  ;  TGondzioSolver (const TGondzioSolver &another);  Copy constructor. ;  ;  TGondzioSolver (TQpProbBase *of, TQpDataBase *prob, Int_t verbose=0);  Constructor. ;  ;  ~TGondzioSolver () override;  Deconstructor. ;  ; void DefMonitor (TQpDataBase *data, TQpVar *vars, TQpResidual *resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t status_code, Int_t level) override;  Print information about the optimization process and monitor the convergence status of thye algorithm. ;  ; TClass * IsA () const override;  ; TGondzioSolver & operator= (const TGondzioSolver &source);  Assignment operator. ;  ; virtual void Reset_parameters ();  ; Int_t Solve (TQpDataBase *prob, TQpVar *iterate, TQpResidual *resid) override;  Solve the quadratic programming problem as formulated through prob, store the final solution in iterate->fX . ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TQpSolverBase;  TQpSolverBase ();  Default constructor. ;  ;  TQpSolverBase (const TQpSolverBase &another);  Copy constructor. ;  ;  ~TQpSolverBase () override;  Deconstructor. ;  ; Double_t DataNorm ();  ; virtual void DefStart (TQpProbBase *formulation, TQpVar *iterate, TQpDataBase *prob, TQpResidual *resid, TQpVar *step);  Default starting point. ;  ; virtual Int_t DefStatus (TQpDataBase *data, TQpVar *vars, TQpResidual *resids, Int_t i,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGondzioSolver.html:70,Guid,Guide,70,doc/master/classTGondzioSolver.html,https://root.cern,https://root.cern/doc/master/classTGondzioSolver.html,1,['Guid'],['Guide']
Usability,". ROOT: TGraph Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; TGraph Class ReferenceHistogram Library » Graph classes. ; A TGraph is an object made of two arrays X and Y with npoints each. ; The TGraph painting is performed thanks to the TGraphPainter class. All details about the various painting options are given in this class.; Notes. Unlike histogram or tree (or even TGraph2D), TGraph objects are not automatically attached to the current TFile, in order to keep the management and size of the TGraph as small as possible.; The TGraph constructors do not have the TGraph title and name as parameters. A TGraph has the default title and name ""Graph"". To change the default title and name SetTitle and SetName should be called on the TGraph after its creation. TGraph was a light weight object to start with, like TPolyline or TPolyMarker. That’s why it did not have any title and name parameters in the constructors. Example; The picture below gives an example:; {; double x[100], y[100];; int n = 20;; for (int i=0;i<n;i++) {; x[i] = i*0.1;; y[i] = 10*sin(x[i]+0.2);; }; auto g = new TGraph(n,x,y);; g->SetTitle(""Graph title;X title;Y title"");; g->Draw(""AC*"");; }; g#define g(i)Definition RSha256.hxx:105; TGraph::TGraphTGraph()Graph default constructor.Definition TGraph.cxx:108; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16. Default X-Points; If one doesn't specify the points in the x-axis, they will get the default values 0, 1, 2, 3, (etc. depending on the length of the y-points):; {; double y[6] = {3, 8, 1, 10, 5, 7};; auto g = new TGraph(6,y);; g->SetTitle(""A Graph with default X points"");; g->Draw();; }. Definition at line 41 of file TGraph.h. Publ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph.html:62,Guid,Guide,62,doc/master/classTGraph.html,https://root.cern,https://root.cern/doc/master/classTGraph.html,1,['Guid'],['Guide']
Usability,". ROOT: TGraph2D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TGraph2D Class ReferenceHistogram Library » Graph classes. ; Graphics object made of three arrays X, Y and Z with the same number of points each. . Creating a TGraph2D; Drawing options; Examples; SURF1 Example; Fitting Example; PCOL Example. Definition of the Delaunay triangulation (After B. Delaunay). Creating a TGraph2D; This class has different constructors:; With an array's dimension and three arrays x, y, and z: auto g = new TGraph2D(n, x, y, z);; g#define g(i)Definition RSha256.hxx:105; TGraph2D::TGraph2DTGraph2D()Graph2D default constructor.Definition TGraph2D.cxx:238; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; x, y, z arrays can be doubles, floats, or ints.; With an array's dimension only: auto g = new TGraph2D(n);; The internal arrays are then filled with SetPoint(). The following line fills the internal arrays at the position i with the values x, y, z. g->SetPoint(i, x, y, z);. Without parameters: auto g = new TGraph2D();; again SetPoint() must be used to fill the internal arrays.; From a file: auto g = new TGraph2D(""graph.dat"");; Arrays are read from the ASCII file ""graph.dat"" according to a specifies format. The default format is %lg %lg %lg. Note that in any of these three cases, SetPoint() can be used to change a data point or add a new one. If the data point index (i) is greater than the current size of the internal arrays, they are automatically extended.; Like TGraph some TGraph2D constructors do not have the TGraph2D title and name as parameters. For these constructors TGraph2D has the default title and name ""Graph2D"". To change the default ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2D.html:64,Guid,Guide,64,doc/master/classTGraph2D.html,https://root.cern,https://root.cern/doc/master/classTGraph2D.html,1,['Guid'],['Guide']
Usability,". ROOT: TGraph2DAsymmErrors Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGraph2DAsymmErrors Class ReferenceHistogram Library » Graph classes. ; Graph 2D class with errors. ; A TGraph2DAsymmErrors is a TGraph2D with asymmetric errors. It behaves like a TGraph2D and has the same drawing options.; The **""ERR""** drawing option allows to display the error bars. The following example shows how to use it:; {; auto c = new TCanvas(""c"",""TGraph2DAsymmErrors example"",0,0,600,600);; Double_t P = 6.;; Int_t np = 200;; ; Double_t *rx=0, *ry=0, *rz=0;; Double_t *exl=0, *exh=0, *eyl=0, *eyh=0, *ezl=0, *ezh=0;; ; rx = new Double_t[np];; ry = new Double_t[np];; rz = new Double_t[np];; exl = new Double_t[np];; exh = new Double_t[np];; eyl = new Double_t[np];; eyh = new Double_t[np];; ezl = new Double_t[np];; ezh = new Double_t[np];; ; auto r = new TRandom();; ; for (Int_t N=0; N<np;N++) {; rx[N] = 2*P*(r->Rndm(N))-P;; ry[N] = 2*P*(r->Rndm(N))-P;; rz[N] = rx[N]*rx[N]-ry[N]*ry[N];; rx[N] = 10.+rx[N];; ry[N] = 10.+ry[N];; rz[N] = 40.+rz[N];; exl[N] = r->Rndm(N);; exh[N] = r->Rndm(N);; eyl[N] = r->Rndm(N);; eyh[N] = r->Rndm(N);; ezl[N] = 10*r->Rndm(N);; ezh[N] = 10*r->Rndm(N);; }; ; auto g = new TGraph2DAsymmErrors(np, rx, ry, rz, exl, exh, eyl, eyh, ezl, ezh);; g->SetTitle(""TGraph2D with asymmetric error bars: option \""ERR\"""");; g->SetFillColor(29);; g->SetMarkerSize(0.8);; g->SetMarkerStyle(20);; g->SetMarkerColor(kRed);; g->SetLineColor(kBlue-3);; g->SetLineWidth(2);; gPad->SetLogy(1);; g->Draw(""err p0"");; }; c#define c(i)Definition RSha256.hxx:101; g#define g(i)Definition RSha256.hxx:105; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; N#define N; npOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DAsymmErrors.html:75,Guid,Guide,75,doc/master/classTGraph2DAsymmErrors.html,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html,1,['Guid'],['Guide']
Usability,". ROOT: TGraph2DErrors Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGraph2DErrors Class ReferenceHistogram Library » Graph classes. ; Graph 2D class with errors. ; A TGraph2DErrors is a TGraph2D with errors. It behaves like a TGraph2D and has the same drawing options.; The **""ERR""** drawing option allows to display the error bars. The following example shows how to use it:; {; auto c = new TCanvas(""c"",""TGraph2DErrors example"",0,0,600,600);; Double_t P = 6.;; Int_t np = 200;; ; Double_t *rx=0, *ry=0, *rz=0;; Double_t *ex=0, *ey=0, *ez=0;; ; rx = new Double_t[np];; ry = new Double_t[np];; rz = new Double_t[np];; ex = new Double_t[np];; ey = new Double_t[np];; ez = new Double_t[np];; ; auto r = new TRandom();; ; for (Int_t N=0; N<np;N++) {; rx[N] = 2*P*(r->Rndm(N))-P;; ry[N] = 2*P*(r->Rndm(N))-P;; rz[N] = rx[N]*rx[N]-ry[N]*ry[N];; rx[N] = 10.+rx[N];; ry[N] = 10.+ry[N];; rz[N] = 40.+rz[N];; ex[N] = r->Rndm(N);; ey[N] = r->Rndm(N);; ez[N] = 10*r->Rndm(N);; }; ; auto g = new TGraph2DErrors(np, rx, ry, rz, ex, ey, ez);; g->SetTitle(""TGraph2D with error bars: option \""ERR\"""");; g->SetFillColor(29);; g->SetMarkerSize(0.8);; g->SetMarkerStyle(20);; g->SetMarkerColor(kRed);; g->SetLineColor(kBlue-3);; g->SetLineWidth(2);; gPad->SetLogy(1);; g->Draw(""err p0"");; }; c#define c(i)Definition RSha256.hxx:101; g#define g(i)Definition RSha256.hxx:105; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; N#define N; npOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DErrors.html:70,Guid,Guide,70,doc/master/classTGraph2DErrors.html,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html,1,['Guid'],['Guide']
Usability,". ROOT: TGraph2DPainter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGraph2DPainter Class ReferenceHistogram Library » Painting classes » Histograms and graphs painting classes. ; The TGraphDelaunay painting class. ; TGraph2DPainter paints a TGraphDelaunay using triangles or clouds of points.; See documentation of TGraph2D, TGraph2DErrors and TGraph2DAsymmErrors to get the list of drawing options for these classes. ; Definition at line 31 of file TGraph2DPainter.h. Public Member Functions;  TGraph2DPainter ();  TGraph2DPainter default constructor. ;  ;  TGraph2DPainter (TGraphDelaunay *gd);  TGraph2DPainter constructor using the old Delaunay algorithm. ;  ;  TGraph2DPainter (TGraphDelaunay2D *gd);  TGraph2DPainter constructor using the new Delaunay algorithm. ;  ;  ~TGraph2DPainter () override;  TGraph2DPainter destructor. ;  ; TList * GetContourList (Double_t contour);  Returns the X and Y graphs building a contour. ;  ; TClass * IsA () const override;  ; void Paint (Option_t *option) override;  Paint a TGraphDelaunay according to the value of ""option"": ;  ; void PaintContour (Option_t *option);  Paints the 2D graph as a contour plot. ;  ; void PaintErrors (Option_t *option);  Paints the 2D graph as error bars. ;  ; void PaintPolyLine (Option_t *option);  Paints the 2D graph as PaintPolyLine. ;  ; void PaintPolyMarker (Option_t *option);  Paints the 2D graph as PaintPolyMarker. ;  ; void PaintTriangles (Option_t *option);  Paints the 2D graph as triangles. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DPainter.html:71,Guid,Guide,71,doc/master/classTGraph2DPainter.html,https://root.cern,https://root.cern/doc/master/classTGraph2DPainter.html,1,['Guid'],['Guide']
Usability,". ROOT: TGraphAsymmErrors Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGraphAsymmErrors Class ReferenceHistogram Library » Graph classes. ; TGraph with asymmetric error bars. ; The TGraphAsymmErrors painting is performed thanks to the TGraphPainter class. All details about the various painting options are given in this class.; The picture below gives an example:; {; auto c1 = new TCanvas(""c1"",""A Simple Graph with asymmetric error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; auto gr = new TGraphAsymmErrors(n,x,y,exl,exh,eyl,eyh);; gr->SetTitle(""TGraphAsymmErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphAsymmErrors::TGraphAsymmErrorsTGraphAsymmErrors()TGraphAsymmErrors default constructor.Definition TGraphAsymmErrors.cxx:72; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphAsymmErrors.html:73,Guid,Guide,73,doc/master/classTGraphAsymmErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html,2,"['Guid', 'Simpl']","['Guide', 'Simple']"
Usability,". ROOT: TGraphBentErrors Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGraphBentErrors Class ReferenceHistogram Library » Graph classes. ; A TGraphBentErrors is a TGraph with bent, asymmetric error bars. ; The TGraphBentErrors painting is performed thanks to the TGraphPainter class. All details about the various painting options are given in this class.; The picture below gives an example:; {; auto c1 = new TCanvas(""c1"",""A Simple Graph with bent error bars"",200,10,700,500);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; auto gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""TGraphBentErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphBentErrors::TGraphBentErrorsTGraphBentErrors()TGraphBentErrors default constructor.Definition TGraphBentErrors.cxx:62; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this grap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphBentErrors.html:72,Guid,Guide,72,doc/master/classTGraphBentErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html,2,"['Guid', 'Simpl']","['Guide', 'Simple']"
Usability,". ROOT: TGraphDelaunay Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGraphDelaunay Class ReferenceHistogram Library » Graph classes. ; TGraphDelaunay generates a Delaunay triangulation of a TGraph2D. ; This triangulation code derives from an implementation done by Luke Jones (Royal Holloway, University of London) in April 2002 in the PAW context.; This software cannot be guaranteed to work under all circumstances. They were originally written to work with a few hundred points in an XY space with similar X and Y ranges.; Definition of Delaunay triangulation (After B. Delaunay): For a set S of points in the Euclidean plane, the unique triangulation DT(S) of S such that no point in S is inside the circumcircle of any triangle in DT(S). DT(S) is the dual of the Voronoi diagram of S. If n is the number of points in S, the Voronoi diagram of S is the partitioning of the plane containing S points into n convex polygons such that each polygon contains exactly one point and every point in a given polygon is closer to its central point than to any other. A Voronoi diagram is sometimes also known as a Dirichlet tessellation. This applet gives a nice practical view of Delaunay triangulation and Voronoi diagram. ; Definition at line 30 of file TGraphDelaunay.h. Public Member Functions;  TGraphDelaunay ();  TGraphDelaunay default constructor. ;  ;  TGraphDelaunay (TGraph2D *g);  TGraphDelaunay normal constructor. ;  ;  ~TGraphDelaunay () override;  TGraphDelaunay destructor. ;  ; Double_t ComputeZ (Double_t x, Double_t y);  Return the z value corresponding to the (x,y) point in fGraph2D. ;  ; void FindAllTriangles ();  Attempt to find all the Delaunay triangles of the point set. ;  ; TGraph2D * GetGraph2D () const;  ; Double_t GetMarginBinsCont",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphDelaunay.html:70,Guid,Guide,70,doc/master/classTGraphDelaunay.html,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html,1,['Guid'],['Guide']
Usability,". ROOT: TGraphDelaunay2D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGraphDelaunay2D Class ReferenceHistogram Library » Graph classes. ; TGraphDelaunay2D generates a Delaunay triangulation of a TGraph2D. ; The algorithm used for finding the triangles is based on CDT, a C++ library for generating constraint or conforming Delaunay triangulations.; The ROOT::Math::Delaunay2D class provides a wrapper for using the CDT library.; This implementation provides large improvements in terms of computational performances compared to the legacy one available in TGraphDelaunay, and it is by default used in TGraph2D. The old, legacy implementation can be still used when calling TGraph2D::GetHistogram and TGraph2D::Draw with the old option.; Definition of Delaunay triangulation (After B. Delaunay): For a set S of points in the Euclidean plane, the unique triangulation DT(S) of S such that no point in S is inside the circumcircle of any triangle in DT(S). DT(S) is the dual of the Voronoi diagram of S. If n is the number of points in S, the Voronoi diagram of S is the partitioning of the plane containing S points into n convex polygons such that each polygon contains exactly one point and every point in a given polygon is closer to its central point than to any other. A Voronoi diagram is sometimes also known as a Dirichlet tessellation. This applet gives a nice practical view of Delaunay triangulation and Voronoi diagram. ; Definition at line 32 of file TGraphDelaunay2D.h. Public Types; typedef ROOT::Math::Delaunay2D::Triangles Triangles;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphDelaunay2D.html:72,Guid,Guide,72,doc/master/classTGraphDelaunay2D.html,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html,1,['Guid'],['Guide']
Usability,". ROOT: TGraphEdge Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGraphEdge Class ReferenceGraphics » 2D Graphics » graphviz interface. ; An edge object connecting two nodes which can be added in a TGraphStruct. ; Definition at line 25 of file TGraphEdge.h. Public Member Functions;  TGraphEdge ();  Graph Edge default constructor. ;  ;  TGraphEdge (TGraphNode *n1, TGraphNode *n2);  Graph Edge normal constructor. ;  ;  ~TGraphEdge () override;  Graph Edge default destructor. ;  ; void CreateGVEdge (GVizAgraph_t *gv);  Create the GraphViz edge into the GraphViz data structure gv. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to an edge. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; GVizAgedge_t * GetGVEdge ();  ; TGraphNode * GetNode1 ();  ; TGraphNode * GetNode2 ();  ; TClass * IsA () const override;  ; void Layout ();  Layout this edge in the GraphViz space. ;  ; void Paint (Option_t *option="""") override;  Paint this edge with its current attributes. ;  ; void SaveAttributes (std::ostream &, const char *);  Save attributes as a C++ statement(s) on output stream out called by TGraphStruct::SavePrimitive. ;  ; void SavePrimitive (std::ostream &, Option_t *) override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void SetGVEdge (GVizAgedge_t *gve);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphEdge.html:66,Guid,Guide,66,doc/master/classTGraphEdge.html,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html,1,['Guid'],['Guide']
Usability,". ROOT: TGraphErrors Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGraphErrors Class ReferenceHistogram Library » Graph classes. ; A TGraphErrors is a TGraph with error bars. ; The TGraphErrors painting is performed thanks to the TGraphPainter class. All details about the various painting options are given in this class.; The picture below gives an example:; {; auto c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t ex[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t ey[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; auto gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetTitle(""TGraphErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphErrors::TGraphErrorsTGraphErrors()TGraphErrors default constructor.Definition TGraphErrors.cxx:69; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definition TGraph.cxx:2397; double; int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; eyDouble_t ey[n]Definition legen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphErrors.html:68,Guid,Guide,68,doc/master/classTGraphErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html,2,"['Guid', 'Simpl']","['Guide', 'Simple']"
Usability,". ROOT: TGraphMultiErrors Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGraphMultiErrors Class ReferenceHistogram Library » Graph classes. ; TGraph with asymmetric error bars and multiple y error dimensions. ; The TGraphMultiErrors painting is performed thanks to the TGraphPainter class. All details about the various painting options are given in this class.; The picture below gives an example:; {; auto c1 = new TCanvas(""c1"", ""A Simple Graph with multiple y-errors"", 200, 10, 700, 500);; c1->SetGrid();; c1->GetFrame()->SetBorderSize(12);; const Int_t np = 5;; Double_t x[np] = {0, 1, 2, 3, 4};; Double_t y[np] = {0, 2, 4, 1, 3};; Double_t exl[np] = {0.3, 0.3, 0.3, 0.3, 0.3};; Double_t exh[np] = {0.3, 0.3, 0.3, 0.3, 0.3};; Double_t eylstat[np] = {1, 0.5, 1, 0.5, 1};; Double_t eyhstat[np] = {0.5, 1, 0.5, 1, 2};; Double_t eylsys[np] = {0.5, 0.4, 0.8, 0.3, 1.2};; Double_t eyhsys[np] = {0.6, 0.7, 0.6, 0.4, 0.8};; auto gme = new TGraphMultiErrors(""gme"", ""TGraphMultiErrors Example"", np, x, y, exl, exh, eylstat, eyhstat);; gme->AddYError(np, eylsys, eyhsys);; gme->SetMarkerStyle(20);; gme->SetLineColor(kRed);; gme->GetAttLine(0)->SetLineColor(kRed);; gme->GetAttLine(1)->SetLineColor(kBlue);; gme->GetAttFill(1)->SetFillStyle(0);; gme->Draw(""APS ; Z ; 5 s=0.5"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; npOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:73,Guid,Guide,73,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,2,"['Guid', 'Simpl']","['Guide', 'Simple']"
Usability,". ROOT: TGraphNode Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGraphNode Class ReferenceGraphics » 2D Graphics » graphviz interface. ; A graph node object which can be added in a TGraphStruct. ; Definition at line 27 of file TGraphNode.h. Public Member Functions;  TGraphNode ();  Graph node default constructor. ;  ;  TGraphNode (const char *name, const char *title="""");  Graph node normal constructor. ;  ;  ~TGraphNode () override;  Graph Node default destructor. ;  ; void CreateGVNode (GVizAgraph_t *gv);  Create the GraphViz node into the GraphViz data structure gv. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a node. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; GVizAgnode_t * GetGVNode ();  ; TClass * IsA () const override;  ; void Layout ();  Layout this node in the GraphViz space. ;  ; void Paint (Option_t *option="""") override;  Paint this node with its current attributes. ;  ; void SaveAttributes (std::ostream &);  Save attributes as a C++ statement(s) on output stream out called by TGraphStruct::SavePrimitive. ;  ; void SavePrimitive (std::ostream &, Option_t *) override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void SetGVNode (GVizAgnode_t *gvn);  ; void SetTextAngle (Float_t) override;  Set the text angle. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Optio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphNode.html:66,Guid,Guide,66,doc/master/classTGraphNode.html,https://root.cern,https://root.cern/doc/master/classTGraphNode.html,1,['Guid'],['Guide']
Usability,". ROOT: TGraphPainter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TGraphPainter Class ReferenceHistogram Library » Painting classes » Histograms and graphs painting classes. ; The graph painter class. ; Implements all graphs' drawing's options. Introduction; Graphs' plotting options; Exclusion graphs; Graphs with error bars; TGraphErrors; TGraphAsymmErrors; TGraphBentErrors; TGraphMultiErrors. TGraphPolar options; Colors automatically picked in palette; Reverse graphs' axis; Graphs in logarithmic scale; Highlight mode for graph. Introduction; Graphs are drawn via the painter TGraphPainter class. This class implements techniques needed to display the various kind of graphs i.e.: TGraph, TGraphErrors, TGraphBentErrors and TGraphAsymmErrors.; To draw a graph graph it's enough to do: graph->Draw(""AL"");; The option AL in the Draw() method means:. The axis should be drawn (option A),; The graph should be drawn as a simple line (option L).; By default a graph is drawn in the current pad in the current coordinate system. To define a suitable coordinate system and draw the axis the option A must be specified. TGraphPainter offers many options to paint the various kind of graphs.; It is separated from the graph classes so that one can have graphs without the graphics overhead, for example in a batch program.; When a displayed graph is modified, there is no need to call Draw() again; the image will be refreshed the next time the pad will be updated. A pad is updated after one of these three actions:. a carriage return on the ROOT command line,; a click inside the pad,; a call to TPad::Update. Graphs' plotting options; Graphs can be drawn with the following options:. Option Description . ""A"" Produce a new plot with Axis around the graph . ""I"" Combine with option 'A' i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:69,Guid,Guide,69,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,1,['Guid'],['Guide']
Usability,". ROOT: TGraphPolar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; TGraphPolar Class ReferenceGraphics » 2D Graphics » Basic graphics. ; To draw a polar graph. ; TGraphPolar creates a polar graph (including error bars). A TGraphPolar is a TGraphErrors represented in polar coordinates. It uses the class TGraphPolargram to draw the polar axis.; Example:; {; TCanvas * CPol = new TCanvas(""CPol"",""TGraphPolar Example"",500,500);; ; Double_t theta[8];; Double_t radius[8];; Double_t etheta[8];; Double_t eradius[8];; ; for (int i=0; i<8; i++) {; theta[i] = (i+1)*(TMath::Pi()/4.);; radius[i] = (i+1)*0.05;; etheta[i] = TMath::Pi()/8.;; eradius[i] = 0.05;; }; ; TGraphPolar * grP1 = new TGraphPolar(8, theta, radius, etheta, eradius);; grP1->SetTitle(""TGraphPolar Example"");; ; grP1->SetMarkerStyle(20);; grP1->SetMarkerSize(2.);; grP1->SetMarkerColor(4);; grP1->SetLineColor(2);; grP1->SetLineWidth(3);; grP1->Draw(""PE"");; ; // Update, otherwise GetPolargram returns 0; CPol->Update();; grP1->GetPolargram()->SetToRadian();; ; return CPol;; }; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TAttMarker::SetMarkerSizevirtual void SetMarkerSize(Size_t msize=1)Set the marker size.Definition TAttMarker.h:45; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::Updatevoid Update() overrideUpdate canvas pad buffers.Definition TCanvas.cxx:2489; TGraphPolarTo draw a polar graph.Definition TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPolar.html:67,Guid,Guide,67,doc/master/classTGraphPolar.html,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html,1,['Guid'],['Guide']
Usability,". ROOT: TGraphPolargram Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGraphPolargram Class ReferenceGraphics » 2D Graphics » Basic graphics. ; To draw polar axis. ; TGraphPolargram draw the polar axis of the TGraphPolar.; Example:; {; TCanvas * CPol = new TCanvas(""CPol"",""TGraphPolar Examples"",500,500);; ; Double_t rmin=0;; Double_t rmax=TMath::Pi()*2;; Double_t r[1000];; Double_t theta[1000];; ; TF1 * fp1 = new TF1(""fplot"",""cos(x)"",rmin,rmax);; for (Int_t ipt = 0; ipt < 1000; ipt++) {; r[ipt] = ipt*(rmax-rmin)/1000+rmin;; theta[ipt] = fp1->Eval(r[ipt]);; }; TGraphPolar * grP1 = new TGraphPolar(1000,r,theta);; grP1->SetTitle("""");; grP1->SetLineColor(2);; grP1->Draw(""AOL"");; }; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TF1::Evalvirtual Double_t Eval(Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) constEvaluate this function.Definition TF1.cxx:1439; TGraphPolarTo draw a polar graph.Definition TGraphPolar.h:23; TGraphPolar::Drawvoid Draw(Option_t *options="""") overrideDraw TGraphPolar.Definition TGraphPolar.cxx:100; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definition TGraph.cxx:2397; double; int; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37. Definition at line 20 of file TGraphPolargram.h. Public Types; enum  { kLabelOrtho = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPolargram.html:71,Guid,Guide,71,doc/master/classTGraphPolargram.html,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html,1,['Guid'],['Guide']
Usability,". ROOT: TGraphQQ Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGraphQQ Class ReferenceGraphics » 2D Graphics » Basic graphics. ; This class allows to draw quantile-quantile plots. ; Plots can be drawn for 2 datasets or for a dataset and a theoretical distribution function. 2 datasets:; Quantile-quantile plots are used to determine whether 2 samples come from the same distribution. A qq-plot draws the quantiles of one dataset against the quantile of the the other. The quantiles of the dataset with fewer entries are on Y axis, with more entries - on X axis. A straight line, going through 0.25 and 0.75 quantiles is also plotted for reference. It represents a robust linear fit, not sensitive to the extremes of the datasets. If the datasets come from the same distribution, points of the plot should fall approximately on the 45 degrees line. If they have the same distribution function, but location or scale different parameters, they should still fall on the straight line, but not the 45 degrees one. The greater their departure from the straight line, the more evidence there is, that the datasets come from different distributions. The advantage of qq-plot is that it not only shows that the underlying distributions are different, but, unlike the analytical methods, it also gives information on the nature of this difference: heavier tails, different location/scale, different shape, etc.; Some examples of qqplots of 2 datasets:. 1 dataset:; Quantile-quantile plots are used to determine if the dataset comes from the specified theoretical distribution, such as normal. A qq-plot draws quantiles of the dataset against quantiles of the specified theoretical distribution. (NOTE, that density, not CDF should be specified) A straight line, going through 0.25 and 0.75 quantil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphQQ.html:64,Guid,Guide,64,doc/master/classTGraphQQ.html,https://root.cern,https://root.cern/doc/master/classTGraphQQ.html,1,['Guid'],['Guide']
Usability,". ROOT: TGraphSmooth Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGraphSmooth Class ReferenceHistogram Library » Graph classes. ; A helper class to smooth TGraph. ; see examples in $ROOTSYS/tutorials/graphs/motorcycle.C and approx.C ; Definition at line 34 of file TGraphSmooth.h. Public Member Functions;  TGraphSmooth ();  ;  TGraphSmooth (const char *name);  GraphSmooth constructor. ;  ;  ~TGraphSmooth () override;  GraphSmooth destructor. ;  ; TGraph * Approx (TGraph *grin, Option_t *option=""linear"", Int_t nout=50, Double_t *xout=nullptr, Double_t yleft=0, Double_t yright=0, Int_t rule=0, Double_t f=0, Option_t *ties=""mean"");  Approximate data points. ;  ; void Approxin (TGraph *grin, Int_t iKind, Double_t &Ylow, Double_t &Yhigh, Int_t rule, Int_t iTies);  Sort data points and eliminate double x values. ;  ; TClass * IsA () const override;  ; void Lowess (Double_t *x, Double_t *y, Int_t n, Double_t *ys, Double_t span, Int_t iter, Double_t delta);  Lowess regression smoother. ;  ; void Smoothin (TGraph *grin);  Sort input data points. ;  ; TGraph * SmoothKern (TGraph *grin, Option_t *option=""normal"", Double_t bandwidth=0.5, Int_t nout=100, Double_t *xout=nullptr);  Smooth data with Kernel smoother. ;  ; TGraph * SmoothLowess (TGraph *grin, Option_t *option="""", Double_t span=0.67, Int_t iter=3, Double_t delta=0);  Smooth data with Lowess smoother. ;  ; TGraph * SmoothSuper (TGraph *grin, Option_t *option="""", Double_t bass=0, Double_t span=0, Bool_t isPeriodic=kFALSE, Double_t *w=nullptr);  Smooth data with Super smoother. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphSmooth.html:68,Guid,Guide,68,doc/master/classTGraphSmooth.html,https://root.cern,https://root.cern/doc/master/classTGraphSmooth.html,1,['Guid'],['Guide']
Usability,". ROOT: TGraphStruct Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGraphStruct Class ReferenceGraphics » 2D Graphics » graphviz interface. ; The Graph Structure is an interface to the graphviz package. ; The graphviz package is a graph visualization system. This interface consists in three classes:. TGraphStruct: holds the graph structure. It uses the graphviz library to layout the graphs and the ROOT graphics to paint them.; TGraphNode: Is a graph node object which can be added in a TGraphStruct.; TGraphEdge: Is an edge object connecting two nodes which can be added in a TGraphStruct. ; TCanvas* graphstruct(); {; #if __has_include(""TGraphStruct.h"") // handy check on whether gviz was installed; TGraphStruct *gs = new TGraphStruct();; ; // create some nodes and put them in the graph in one go ...; TGraphNode *n0 = gs->AddNode(""n0"",""Node 0"");; TGraphNode *n1 = gs->AddNode(""n1"",""First node"");; TGraphNode *n2 = gs->AddNode(""n2"",""Second node"");; TGraphNode *n3 = gs->AddNode(""n3"",""Third node"");; TGraphNode *n4 = gs->AddNode(""n4"",""Fourth node"");; TGraphNode *n5 = gs->AddNode(""n5"",""5th node"");; TGraphNode *n6 = gs->AddNode(""n6"",""Node number six"");; TGraphNode *n7 = gs->AddNode(""n7"",""Node 7"");; TGraphNode *n8 = gs->AddNode(""n8"",""Node 8"");; TGraphNode *n9 = gs->AddNode(""n9"",""Node 9"");; ; n4->SetTextSize(0.03);; n6->SetTextSize(0.03);; n2->SetTextSize(0.04);; ; n3->SetTextFont(132);; ; n0->SetTextColor(kRed);; ; n9->SetFillColor(kRed-10);; n0->SetFillColor(kYellow-9);; n7->SetFillColor(kViolet-9);; ; // some edges ...; gs->AddEdge(n0,n1)->SetLineColor(kRed);; TGraphEdge *e06 = gs->AddEdge(n0,n6);; e06->SetLineColor(kRed-3);; e06->SetLineWidth(4);; gs->AddEdge(n1,n7);; gs->AddEdge(n4,n6);; gs->AddEdge(n3,n9);; gs->AddEdge(n6,n8);; gs->AddEdge(n7,n2);; gs->AddEdge(n8,n3);; gs->AddEdge(n2,n3);; gs->Ad",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphStruct.html:68,Guid,Guide,68,doc/master/classTGraphStruct.html,https://root.cern,https://root.cern/doc/master/classTGraphStruct.html,1,['Guid'],['Guide']
Usability,". ROOT: TGraphTime Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGraphTime Class ReferenceHistogram Library » Graph classes. ; TGraphTime is used to draw a set of objects evolving with nsteps in time between tmin and tmax. ; Each time step has a new list of objects. This list can be identical to the list of objects in the previous steps, but with different attributes. see example of use in $ROOTSYS/tutorials/graphs/gtime.C ; Definition at line 30 of file TGraphTime.h. Public Member Functions;  TGraphTime ();  default constructor. ;  ;  TGraphTime (const TGraphTime &gr);  copy constructor. ;  ;  TGraphTime (Int_t nsteps, Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax);  Create a TGraphTime with nsteps in range [xmin,xmax][ymin,ymax]. ;  ;  ~TGraphTime () override;  GraphTime default destructor. ;  ; virtual Int_t Add (const TObject *obj, Int_t slot, Option_t *option="""");  Add one object to a time slot. ;  ; void Animate (Bool_t enable=kTRUE);  Start animation of TGraphTime. ;  ; void Draw (Option_t *chopt="""") override;  Draw this TGraphTime. ;  ; TObjArray * GetSteps () const;  ; Bool_t HandleTimer (TTimer *) override;  Method used for implementing animation of TGraphTime. ;  ; TClass * IsA () const override;  ; void Paint (Option_t *chopt="""") override;  Paint all objects added to each time step. ;  ; virtual void SaveAnimatedGif (const char *filename="""") const;  Save this object to filename as an animated gif file if filename is specified it must be of the form xxx.gif otherwise a file yyy.gif is produced where yyy is the object name. ;  ; virtual void SetSleepTime (Int_t stime=0);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphTime.html:66,Guid,Guide,66,doc/master/classTGraphTime.html,https://root.cern,https://root.cern/doc/master/classTGraphTime.html,1,['Guid'],['Guide']
Usability,". ROOT: TGrid Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGrid Class Reference. . Definition at line 44 of file TGrid.h. Public Member Functions;  TGrid ();  ; virtual ~TGrid ();  ; virtual Bool_t Cd (const char *="""", Bool_t=kFALSE);  ; virtual TGridResult * Command (const char *, Bool_t=kFALSE, UInt_t=2);  ; const char * GetGrid () const;  ; virtual const char * GetHomeDirectory ();  ; const char * GetHost () const;  ; virtual TGridJDL * GetJDLGenerator ();  ; const char * GetOptions () const;  ; Int_t GetPort () const;  ; const char * GetPw () const;  ; const char * GetUser () const;  ; const char * GridUrl () const;  ; TClass * IsA () const override;  ; virtual Bool_t IsConnected () const;  ; virtual Bool_t Kill (TGridJob *gridjob);  ; virtual Bool_t KillById (TString);  ; virtual TGridResult * LocateSites ();  ; virtual TGridResult * Ls (const char *="""", Option_t *="""", Bool_t=kFALSE);  ; virtual Int_t Mkdir (const char *="""", Option_t *="""", Bool_t=kFALSE);  ; virtual TGridCollection * OpenCollection (const char *, UInt_t=1000000);  ; virtual TGridCollection * OpenCollectionQuery (TGridResult *, Bool_t=kFALSE);  ; virtual TGridJobStatusList * Ps (const char *, Bool_t=kTRUE);  ; virtual const char * Pwd (Bool_t=kFALSE);  ; virtual TGridResult * Query (const char *, const char *, const char *="""", const char *="""");  ; virtual Bool_t Register (const char *, const char *, Long_t=-1, const char *=nullptr, const char *=nullptr, Bool_t=kFALSE);  ; virtual Bool_t Resubmit (TGridJob *gridjob);  ; virtual Bool_t ResubmitById (TString);  ; virtual Bool_t Rm (const char *, Option_t *="""", Bool_t=kFALSE);  ; virtual Bool_t Rmdir (const char *="""", Option_t *="""", Bool_t=kFALSE);  ; virtual void Shell ();  ; virtual void Stderr ();  ; virtual void Stdout ();  ; void Streamer (TBuffer &) override;  Str",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGrid.html:61,Guid,Guide,61,doc/master/classTGrid.html,https://root.cern,https://root.cern/doc/master/classTGrid.html,1,['Guid'],['Guide']
Usability,". ROOT: TGridCollection Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGridCollection Class Reference. . Definition at line 34 of file TGridCollection.h. Public Member Functions;  TGridCollection ();  ; virtual ~TGridCollection ();  ; virtual void Add (TGridCollection *);  ; virtual Bool_t CheckIfOnline (Bool_t=kFALSE);  ; virtual Bool_t DeselectFile (const char *, Int_t=-1, Int_t=-1);  ; virtual Bool_t DownscaleSelection (UInt_t=2);  ; virtual Bool_t ExportXML (const char *, Bool_t=kTRUE, Bool_t=kTRUE, const char *=""ROOT xml"", const char *=""Exported XML"");  ; virtual const char * GetCollectionName () const;  ; virtual TDSet * GetDataset (const char *, const char *, const char *);  ; virtual TEntryList * GetEntryList (const char *);  ; virtual const char * GetExportUrl ();  ; virtual TFileCollection * GetFileCollection (const char *="""", const char *="""") const;  ; virtual TList * GetFileGroupList () const;  ; virtual TGridResult * GetGridResult (const char *="""", Bool_t=kTRUE, Bool_t=kFALSE);  ; virtual const char * GetInfoComment () const;  ; virtual const char * GetLFN (const char *="""");  ; virtual UInt_t GetNofGroupfiles () const;  ; virtual UInt_t GetNofGroups () const;  ; virtual Long64_t GetSize (const char *="""");  ; virtual const char * GetSURL (const char *="""");  ; virtual TList * GetTagFilterList () const;  ; virtual const char * GetTURL (const char *="""");  ; virtual Bool_t InvertSelection ();  ; TClass * IsA () const override;  ; virtual Bool_t IsOnline (const char *="""");  ; virtual Bool_t IsSelected (const char *="""");  ; virtual Bool_t LookupSUrls (Bool_t=kTRUE);  ; virtual TMap * Next ();  ; virtual TFile * OpenFile (const char *);  ; virtual Bool_t OverlapCollection (TGridCollection *);  ; virtual Bool_t Prepare (Bool_t=kFALSE);  ; virtual void Print (Option_t *="""") const override;  This method must b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGridCollection.html:71,Guid,Guide,71,doc/master/classTGridCollection.html,https://root.cern,https://root.cern/doc/master/classTGridCollection.html,1,['Guid'],['Guide']
Usability,". ROOT: TGridJDL Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGridJDL Class Referenceabstract. . Definition at line 32 of file TGridJDL.h. Public Member Functions;  TGridJDL ();  ; virtual ~TGridJDL ();  Cleanup. ;  ; TString AddQuotes (const char *value);  Adds quotes to the provided string. ;  ; virtual void AddToInputData (const char *value=nullptr, const char *description=nullptr)=0;  ; virtual void AddToInputDataCollection (const char *value=nullptr, const char *description=nullptr)=0;  ; virtual void AddToInputSandbox (const char *value=nullptr, const char *description=nullptr)=0;  ; virtual void AddToOutputArchive (const char *value=nullptr, const char *description=nullptr)=0;  ; virtual void AddToOutputSandbox (const char *value=nullptr, const char *description=nullptr)=0;  ; virtual void AddToPackages (const char *name=""AliRoot"", const char *version=""default"", const char *type=""VO_ALICE"", const char *description=nullptr)=0;  ; virtual void AddToRequirements (const char *value=nullptr, const char *description=nullptr)=0;  ; void AddToSet (const char *key, const char *value);  Adds a value to a key value which hosts a set of values. ;  ; void AddToSetDescription (const char *key, const char *description);  Adds a value to a key value which hosts a set of values. ;  ; void Clear (const Option_t *="""") override;  Clears the JDL information. ;  ; virtual TString Generate ();  Generates the JDL snippet. ;  ; const char * GetDescription (const char *key);  Returns the value corresponding to the provided key. ;  ; const char * GetValue (const char *key);  Returns the value corresponding to the provided key. ;  ; TClass * IsA () const override;  ; virtual void SetArguments (const char *value=nullptr, const char *description=nullptr)=0;  ; void SetDescription (const char *key, const char ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGridJDL.html:64,Guid,Guide,64,doc/master/classTGridJDL.html,https://root.cern,https://root.cern/doc/master/classTGridJDL.html,1,['Guid'],['Guide']
Usability,". ROOT: TGridJob Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGridJob Class Referenceabstract. . Definition at line 31 of file TGridJob.h. Public Member Functions;  TGridJob (TString jobID);  ; virtual ~TGridJob ();  ; virtual Bool_t Cancel ()=0;  ; virtual TString GetJobID ();  ; virtual TGridJobStatus * GetJobStatus () const =0;  ; virtual Int_t GetOutputSandbox (const char *localpath, Option_t *opt=nullptr);  Must be implemented by actual GRID job implementation. ;  ; TClass * IsA () const override;  ; virtual Bool_t Resubmit ()=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGridJob.html:64,Guid,Guide,64,doc/master/classTGridJob.html,https://root.cern,https://root.cern/doc/master/classTGridJob.html,1,['Guid'],['Guide']
Usability,". ROOT: TGridJobStatus Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGridJobStatus Class Referenceabstract. . Definition at line 26 of file TGridJobStatus.h. Public Types; enum  EGridJobStatus { ;   kUNKNOWN; , kWAITING; , kRUNNING; , kABORTED; , ;   kFAIL; , kDONE. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGridJobStatus ();  ; virtual ~TGridJobStatus ();  ; virtual EGridJobStatus GetStatus () const =0;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Cop",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGridJobStatus.html:70,Guid,Guide,70,doc/master/classTGridJobStatus.html,https://root.cern,https://root.cern/doc/master/classTGridJobStatus.html,1,['Guid'],['Guide']
Usability,". ROOT: TGridJobStatusList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGridJobStatusList Class Reference. . Definition at line 30 of file TGridJobStatusList.h. Public Member Functions;  TGridJobStatusList ();  ; virtual ~TGridJobStatusList ();  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; virtual void AddAfter (TObjLink *after, TObject *obj);  Insert object after the specified ObjLink object. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Insert object at position idx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; virtual void AddBefore (TObjLink *before, TObject *obj);  Insert object before the specified ObjLink object. ;  ; void AddFirst (TObject *obj) override;  Add object at the beginning of the list. ;  ; virtual void AddFirst (TObject *obj, Option_t *opt);  Add object at the beginning of the list and also store option. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; virtual void AddLast (TObject *obj, Option_t *opt);  Add object at the end of the list and also store option. ;  ; TObject * After (const TObject *obj) const override;  Returns the object after object obj. ;  ; TObject * At (I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGridJobStatusList.html:74,Guid,Guide,74,doc/master/classTGridJobStatusList.html,https://root.cern,https://root.cern/doc/master/classTGridJobStatusList.html,1,['Guid'],['Guide']
Usability,". ROOT: TGroupButton Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; TGroupButton Class ReferenceGraphics » 2D Graphics » Graphics pad. ; A specialized TButton used in a group of Buttons. ; When a button from a group of TGroupButtons is selected, all other buttons from the group with the same name are disabled.; For examples of use of TGroupButton objects, see: AttFillCanvas, TAttLineCanvas, TAttTextCanvas and TAttMarkerCanvas.; A TGroupButton object is a specialized TPad including possible list of primitives used to build selections and options menus in a canvas. ; Definition at line 17 of file TGroupButton.h. Public Member Functions;  TGroupButton ();  GroupButton default constructor. ;  ;  TGroupButton (const char *groupname, const char *title, const char *method, Double_t x1, Double_t y1, Double_t x2, Double_t y2);  GroupButton normal constructor. ;  ;  ~TGroupButton () override;  GroupButton default destructor. ;  ; virtual void DisplayColorTable (const char *action, Double_t x0, Double_t y0, Double_t wc, Double_t hc);  Display Color Table in an attribute canvas. ;  ; virtual void ExecuteAction ();  Execute action of this button. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TButton;  TButton ();  Button default constructor. ;  ;  TButton (const char *title, const char *method, Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Button normal constructor. ;  ;  ~TBu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGroupButton.html:68,Guid,Guide,68,doc/master/classTGroupButton.html,https://root.cern,https://root.cern/doc/master/classTGroupButton.html,1,['Guid'],['Guide']
Usability,". ROOT: TGuiBldAction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TGuiBldAction Class Reference. . Definition at line 25 of file TGuiBuilder.h. Public Member Functions;  TGuiBldAction (const char *name=nullptr, const char *title=nullptr, Int_t type=kGuiBldCtor, TGLayoutHints *hints=nullptr);  constructor ;  ;  ~TGuiBldAction () override;  destructor ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGuiBldAction.html:69,Guid,Guide,69,doc/master/classTGuiBldAction.html,https://root.cern,https://root.cern/doc/master/classTGuiBldAction.html,1,['Guid'],['Guide']
Usability,. ROOT: TGuiBldDragManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TGuiBldDragManager Class ReferenceGUI » GUI Builder. ; Drag and drop manager used by the ROOT GUI Builder. ; Definition at line 58 of file TGuiBldDragManager.h. Public Member Functions;  TGuiBldDragManager ();  ;  ~TGuiBldDragManager () override;  Destructor. ;  ; void ChangeBackgroundColor (TGCanvas *);  Change background color via context menu. ;  ; void ChangeBackgroundColor (TGComboBox *);  Change background color for list box entries. ;  ; void ChangeBackgroundColor (TGCompositeFrame *);  Change background color via context menu for this frame and all subframes. ;  ; void ChangeBackgroundColor (TGFrame *);  Change background color via context menu. ;  ; void ChangeBackgroundColor (TGListBox *);  Set background color for list box entries. ;  ; void ChangeBarColor (TGProgressBar *);  Set progress bar color via TGColorDialog. ;  ; void ChangeImage (TGIcon *);  Invoke file dialog to assign a new image. ;  ; void ChangePicture (TGPictureButton *);  Invoke file dialog to assign a new picture. ;  ; void ChangeProperties (TGLabel *);  Edit properties via font selection dialog. ;  ; void ChangeProperties (TGTextButton *);  Edit properties via font selection dialog. ;  ; void ChangeTextColor (TGGroupFrame *);  Change text color via color selection dialog. ;  ; void ChangeTextColor (TGLabel *);  Change text color via color selection dialog. ;  ; void ChangeTextColor (TGProgressBar *);  Change text color which displays position. ;  ; void ChangeTextColor (TGTextButton *);  Change text color via color selection dialog. ;  ; void ChangeTextColor (TGTextEntry *);  Set text color. ;  ; void ChangeTextFont (TGGroupFrame *);  Chan,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGuiBldDragManager.html:74,Guid,Guide,74,doc/master/classTGuiBldDragManager.html,https://root.cern,https://root.cern/doc/master/classTGuiBldDragManager.html,1,['Guid'],['Guide']
Usability,". ROOT: TGuiBldDragManagerRepeatTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TGuiBldDragManagerRepeatTimer Class Reference. . Definition at line 669 of file TGuiBldDragManager.cxx. Public Member Functions;  TGuiBldDragManagerRepeatTimer (TGuiBldDragManager *m, Long_t ms);  ; Bool_t Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGuiBldDragManagerRepeatTimer.html:85,Guid,Guide,85,doc/master/classTGuiBldDragManagerRepeatTimer.html,https://root.cern,https://root.cern/doc/master/classTGuiBldDragManagerRepeatTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: TGuiFactory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGuiFactory Class ReferenceCore ROOT classes » Base ROOT classes. ; This ABC is a factory for GUI components. ; Depending on which factory is active one gets either ROOT native (X11 based with Win95 look and feel), Win32 or Mac components.; In case there is no platform dependent implementation on can run in batch mode directly using an instance of this base class. ; Definition at line 42 of file TGuiFactory.h. Public Member Functions;  TGuiFactory (const char *name=""Batch"", const char *title=""Batch GUI Factory"");  TGuiFactory ctor only called by derived classes. ;  ; virtual ~TGuiFactory ();  ; virtual TApplicationImp * CreateApplicationImp (const char *classname, int *argc, char **argv);  Create a batch version of TApplicationImp. ;  ; virtual TBrowserImp * CreateBrowserImp (TBrowser *b, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t *opt="""");  Create a batch version of TBrowserImp. ;  ; virtual TBrowserImp * CreateBrowserImp (TBrowser *b, const char *title, UInt_t width, UInt_t height, Option_t *opt="""");  Create a batch version of TBrowserImp. ;  ; virtual TCanvasImp * CreateCanvasImp (TCanvas *c, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height);  Create a batch version of TCanvasImp. ;  ; virtual TCanvasImp * CreateCanvasImp (TCanvas *c, const char *title, UInt_t width, UInt_t height);  Create a batch version of TCanvasImp. ;  ; virtual TContextMenuImp * CreateContextMenuImp (TContextMenu *c, const char *name, const char *title);  Create a batch version of TContextMenuImp. ;  ; virtual TControlBarImp * CreateControlBarImp (TControlBar *c, const char *title);  Create a batch version of TControlBarImp. ;  ; virtual TControlBarImp * CreateControlBarImp (TControlBar *c, const char *title, Int_t x, Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGuiFactory.html:67,Guid,Guide,67,doc/master/classTGuiFactory.html,https://root.cern,https://root.cern/doc/master/classTGuiFactory.html,1,['Guid'],['Guide']
Usability,". ROOT: TH1 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TH1 Class ReferenceHistogram Library » Histogram classes. ; TH1 is the base class of all histogram classes in ROOT. ; It provides the common interface for operations such as binning, filling, drawing, which will be detailed below. Creating histograms; Labelling axes. Binning; Fix or variable bin size; Convention for numbering bins; Alphanumeric Bin Labels; Histograms with automatic bins; Rebinning. Filling histograms; Associated errors; Associated functions; Projections of histograms; Random Numbers and histograms; Making a copy of a histogram; Normalizing histograms. Drawing histograms; Setting Drawing histogram contour levels (2-D hists only); Setting histogram graphics attributes; Customising how axes are drawn. Fitting histograms; Saving/reading histograms to/from a ROOT file; Operations on histograms; Miscellaneous operations. ROOT supports the following histogram types:. 1-D histograms:; TH1C : histograms with one byte per channel. Maximum bin content = 127; TH1S : histograms with one short per channel. Maximum bin content = 32767; TH1I : histograms with one int per channel. Maximum bin content = INT_MAX (*); TH1L : histograms with one long64 per channel. Maximum bin content = LLONG_MAX (**); TH1F : histograms with one float per channel. Maximum precision 7 digits, maximum integer bin content = +/-16777216 (***); TH1D : histograms with one double per channel. Maximum precision 14 digits, maximum integer bin content = +/-9007199254740992 (****). 2-D histograms:; TH2C : histograms with one byte per channel. Maximum bin content = 127; TH2S : histograms with one short per channel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:59,Guid,Guide,59,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['Guid'],['Guide']
Usability,". ROOT: TH1C Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH1C Class ReferenceHistogram Library » Histogram classes. ; 1-D histogram with a byte per channel (see TH1 documentation) ; Definition at line 458 of file TH1.h. Public Member Functions;  TH1C ();  Constructor. ;  ;  TH1C (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Create a 1-Dim histogram with variable bins of type char (one byte per channel) (see TH1::TH1 for explanation of parameters) ;  ;  TH1C (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Create a 1-Dim histogram with variable bins of type char (one byte per channel) (see TH1::TH1 for explanation of parameters) ;  ;  TH1C (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Create a 1-Dim histogram with fix bins of type char (one byte per channel) (see TH1::TH1 for explanation of parameters) ;  ;  TH1C (const TH1C &h1c);  Copy constructor. ;  ;  ~TH1C () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1C & operator= (const TH1C &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1C.html:60,Guid,Guide,60,doc/master/classTH1C.html,https://root.cern,https://root.cern/doc/master/classTH1C.html,1,['Guid'],['Guide']
Usability,". ROOT: TH1D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH1D Class ReferenceHistogram Library » Histogram classes. ; 1-D histogram with a double per channel (see TH1 documentation) ; Definition at line 670 of file TH1.h. Public Member Functions;  TH1D ();  Constructor. ;  ;  TH1D (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Create a 1-Dim histogram with variable bins of type double (see TH1::TH1 for explanation of parameters) ;  ;  TH1D (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Create a 1-Dim histogram with variable bins of type double (see TH1::TH1 for explanation of parameters) ;  ;  TH1D (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Create a 1-Dim histogram with fix bins of type double (see TH1::TH1 for explanation of parameters) ;  ;  TH1D (const TH1D &h1d);  Constructor. ;  ;  TH1D (const TVectorD &v);  Create a histogram from a TVectorD by default the histogram name is ""TVectorD"" and title = """". ;  ;  ~TH1D () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w Passing an out-of-range bin leads to undefined behavior. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1D & operator= (const TH1D &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1D.html:60,Guid,Guide,60,doc/master/classTH1D.html,https://root.cern,https://root.cern/doc/master/classTH1D.html,1,['Guid'],['Guide']
Usability,". ROOT: TH1Editor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TH1Editor Class ReferenceGUI » ROOT Graphics Editor. ; Editor for changing TH1 histogram attributes, rebinning & fitting. ; For all possible draw options (there are a few which are not implementable in graphical user interface) see THistPainter::Paint; These changes can be made via the TH1Editor: Style Tab: 'Line' : change Line attributes (color, thickness) see TAttLineEditor 'Fill' : change Fill attributes (color, pattern) see TAttFillEditor 'Title' : TextEntry: set the title of the histogram 'Histogram': change the draw options of the histogram 'Plot' : Radiobutton: draw a 2D or 3D plot of the histogram according to the Plot dimension there will be different drawing possibilities (ComboBoxes/ CheckBoxes) 2d Plot: 'Error' : ComboBox: add different error bars to the histogram (no errors, simple, ..., see THistPainter::Paint 'Add' : ComboBox: further things which can be added to the histogram (None, simple/smooth line, fill area 'Simple Drawing': CheckBox: draw a simple histogram without errors (= ""HIST"" drawoption). In combination with some other draw options an outer line is drawn on top of the histogram 'Show markers': CheckBox: draw a marker on to of each bin (=""P"" drawoption) 'Draw bar chart': CheckBox: draw a bar chart (=""B"" drawoption) change the Fill Color with Fill in the Style Tab => will show Bar menue in the Style Tab 'Bar option': CheckBox: draw a bar chart (=""BAR"" drawoption) => will show Bar menue in the Style Tab 3d Plot: 'Type' : ComboBox: set histogram type Lego-Plot or Surface draw(Lego, Lego1.2, Surf, Surf1..5) see THistPainter::Paint 'Coords' : ComboBox: set the coordinate system (Cartesian, .. Spheric) see THistPainter::Pai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1Editor.html:65,Guid,Guide,65,doc/master/classTH1Editor.html,https://root.cern,https://root.cern/doc/master/classTH1Editor.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TH1F Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH1F Class ReferenceHistogram Library » Histogram classes. ; 1-D histogram with a float per channel (see TH1 documentation) ; Definition at line 622 of file TH1.h. Public Member Functions;  TH1F ();  Constructor. ;  ;  TH1F (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Create a 1-Dim histogram with variable bins of type float (see TH1::TH1 for explanation of parameters) ;  ;  TH1F (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Create a 1-Dim histogram with variable bins of type float (see TH1::TH1 for explanation of parameters) ;  ;  TH1F (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Create a 1-Dim histogram with fix bins of type float (see TH1::TH1 for explanation of parameters) ;  ;  TH1F (const TH1F &h1f);  Copy Constructor. ;  ;  TH1F (const TVectorF &v);  Create a histogram from a TVectorF by default the histogram name is ""TVectorF"" and title = """". ;  ;  ~TH1F () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1F & operator= (const TH1F &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1F.html:60,Guid,Guide,60,doc/master/classTH1F.html,https://root.cern,https://root.cern/doc/master/classTH1F.html,1,['Guid'],['Guide']
Usability,". ROOT: TH1I Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH1I Class ReferenceHistogram Library » Histogram classes. ; 1-D histogram with an int per channel (see TH1 documentation) ; Definition at line 540 of file TH1.h. Public Member Functions;  TH1I ();  Constructor. ;  ;  TH1I (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Create a 1-Dim histogram with variable bins of type integer (see TH1::TH1 for explanation of parameters) ;  ;  TH1I (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Create a 1-Dim histogram with variable bins of type integer (see TH1::TH1 for explanation of parameters) ;  ;  TH1I (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Create a 1-Dim histogram with fix bins of type integer (see TH1::TH1 for explanation of parameters) ;  ;  TH1I (const TH1I &h1i);  Copy constructor. ;  ;  ~TH1I () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1I & operator= (const TH1I &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the add",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1I.html:60,Guid,Guide,60,doc/master/classTH1I.html,https://root.cern,https://root.cern/doc/master/classTH1I.html,1,['Guid'],['Guide']
Usability,". ROOT: TH1K Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TH1K Class Reference. ; TH1K class supports the nearest K Neighbours method, widely used in cluster analysis. ; This method is especially useful for small statistics. In this method : DensityOfProbability ~ 1/DistanceToNearestKthNeighbour; Ctr TH1K::TH1K(name,title,nbins,xlow,xup,K=0); differs from TH1F only by ""K""; K - is the order of K Neighbours method, usually >=3; K = 0, means default, where K is selected by TH1K in such a way; that DistanceToNearestKthNeighbour > BinWidth and K >=3; This class has been implemented by Victor Perevoztchikov perev.nosp@m.@bnl.nosp@m..gov ; Definition at line 26 of file TH1K.h. Public Member Functions;  TH1K ();  Constructor. ;  ;  TH1K (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t k=0);  Create a 1-Dim histogram with fix bins of type float (see TH1K::TH1 for explanation of parameters) ;  ;  ~TH1K () override;  Destructor. ;  ; void Copy (TObject &obj) const override;  Copy this histogram structure to newth1. ;  ; Int_t Fill (const char *name, Double_t w) override;  Increment bin with namex with a weight w. ;  ; Int_t Fill (Double_t x) override;  Increment bin with abscissa X by 1. ;  ; Int_t Fill (Double_t x, Double_t w) override;  Increment bin with abscissa X with a weight w. ;  ; Double_t GetBinContent (Int_t bin) const override;  Return content of global bin number bin. ;  ; Double_t GetBinContent (Int_t bin, Int_t) const override;  ; Double_t GetBinContent (Int_t bin, Int_t, Int_t) const override;  ; Double_t GetBinError (Int_t bin) const override;  Return content of global bin error. ;  ; Double_t GetBinError (Int_t bin, Int_t) const override;  ; Double_t GetBinError (Int_t bin, Int_t, Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1K.html:60,Guid,Guide,60,doc/master/classTH1K.html,https://root.cern,https://root.cern/doc/master/classTH1K.html,1,['Guid'],['Guide']
Usability,". ROOT: TH1L Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH1L Class ReferenceHistogram Library » Histogram classes. ; 1-D histogram with a long64 per channel (see TH1 documentation) ; Definition at line 581 of file TH1.h. Public Member Functions;  TH1L ();  Constructor. ;  ;  TH1L (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Create a 1-Dim histogram with variable bins of type long64 (see TH1::TH1 for explanation of parameters) ;  ;  TH1L (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Create a 1-Dim histogram with variable bins of type long64 (see TH1::TH1 for explanation of parameters) ;  ;  TH1L (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Create a 1-Dim histogram with fix bins of type long64 (see TH1::TH1 for explanation of parameters) ;  ;  TH1L (const TH1L &h1l);  Copy constructor. ;  ;  ~TH1L () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1L & operator= (const TH1L &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1L.html:60,Guid,Guide,60,doc/master/classTH1L.html,https://root.cern,https://root.cern/doc/master/classTH1L.html,1,['Guid'],['Guide']
Usability,". ROOT: TH1Merger Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TH1Merger Class Reference. . Definition at line 20 of file TH1Merger.h. Public Types; enum  EMergerType { ;   kNotCompatible = -1; , kAllSameAxes = 0; , kAllNoLimits = 1; , kHasNewLimits = 2; , ;   kAllLabel = 3; , kLabelAndNewLimits = 4; , kAutoP2HaveLimits = 5; , kAutoP2NeedLimits = 6. };  . Public Member Functions;  TH1Merger (TH1 &h, TCollection &l, Option_t *opt="""");  ;  ~TH1Merger ();  ; Bool_t operator() ();  Function performing the actual merge. ;  . Static Public Member Functions; static Bool_t AxesHaveLimits (const TH1 *h);  ; static Int_t CheckForDuplicateLabels (const TH1 *hist);  Check if histogram has duplicate labels Return an integer with bit set correponding on the axis that has duplicate labels e.g. ;  ; static Int_t FindBinNumber (Int_t ibin, const TAxis &inAxis, TAxis &outAxis);  ; static Int_t FindFixBinNumber (Int_t ibin, const TAxis &inAxis, const TAxis &outAxis);  ; static Bool_t HasDuplicateLabels (const THashList *labels);  Find a duplicate labels in an axis label list. ;  ; static Bool_t IsBinEmpty (const TH1 *hist, Int_t bin);  helper function for merging ;  . Private Member Functions; Bool_t AutoP2BufferMerge ();  ; Bool_t AutoP2BuildAxes (TH1 *);  Determine final boundaries and number of bins for histograms created in power-of-2 autobin mode. ;  ; Bool_t AutoP2Merge ();  ; Bool_t BufferMerge ();  ; void CopyBuffer (TH1 *hsrc, TH1 *hdes);  ; void DefineNewAxes ();  Function to define new histogram axis when merging It is call only in case of merging with different axis or with the buffer (kHasNewLimits) ;  ; Bool_t DifferentAxesMerge ();  Merged histogram when axis can be different. ;  ; EMergerType ExamineHistograms ();  Examine the list of histograms to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1Merger.html:65,Guid,Guide,65,doc/master/classTH1Merger.html,https://root.cern,https://root.cern/doc/master/classTH1Merger.html,1,['Guid'],['Guide']
Usability,". ROOT: TH1S Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH1S Class ReferenceHistogram Library » Histogram classes. ; 1-D histogram with a short per channel (see TH1 documentation) ; Definition at line 499 of file TH1.h. Public Member Functions;  TH1S ();  Constructor. ;  ;  TH1S (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Create a 1-Dim histogram with variable bins of type short (see TH1::TH1 for explanation of parameters) ;  ;  TH1S (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Create a 1-Dim histogram with variable bins of type short (see TH1::TH1 for explanation of parameters) ;  ;  TH1S (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Create a 1-Dim histogram with fix bins of type short (see TH1::TH1 for explanation of parameters) ;  ;  TH1S (const TH1S &h1s);  Copy constructor. ;  ;  ~TH1S () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1S & operator= (const TH1S &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1S.html:60,Guid,Guide,60,doc/master/classTH1S.html,https://root.cern,https://root.cern/doc/master/classTH1S.html,1,['Guid'],['Guide']
Usability,". ROOT: TH2 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TH2 Class Reference. ; Service class for 2-D histogram classes. . TH2C a 2-D histogram with one byte per cell (char). Maximum bin content = 127; TH2S a 2-D histogram with two bytes per cell (short integer). Maximum bin content = 32767; TH2I a 2-D histogram with four bytes per cell (32 bit integer). Maximum bin content = INT_MAX (*); TH2L a 2-D histogram with eight bytes per cell (64 bit integer). Maximum bin content = LLONG_MAX (**); TH2F a 2-D histogram with four bytes per cell (float). Maximum precision 7 digits, maximum integer bin content = +/-16777216 (***); TH2D a 2-D histogram with eight bytes per cell (double). Maximum precision 14 digits, maximum integer bin content = +/-9007199254740992 (****). (*) INT_MAX = 2147483647 is the maximum value for a variable of type int.; (**) LLONG_MAX = 9223372036854775807 is the maximum value for a variable of type long64.; (***) 2^24 = 16777216 is the maximum integer that can be properly represented by a float32 with 23-bit mantissa.; (****) 2^53 = 9007199254740992 is the maximum integer that can be properly represented by a double64 with 52-bit mantissa. ; Definition at line 30 of file TH2.h. Public Member Functions;  ~TH2 () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w. ;  ; virtual void AddBinContent (Int_t binx, Int_t biny);  Increment 2D bin content by 1. ;  ; virtual void AddBinContent (Int_t binx, Int_t biny, Double_t w);  Increment 2D bin content by a weight w. ;  ; Int_t BufferEmpty (Int_t action=0) override;  Fill histogram with all entries in the buffer. ;  ; void Copy (TObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:59,Guid,Guide,59,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,1,['Guid'],['Guide']
Usability,". ROOT: TH2C Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH2C Class ReferenceHistogram Library » Histogram classes. ; 2-D histogram with a byte per channel (see TH1 documentation) ; Definition at line 139 of file TH2.h. Public Member Functions;  TH2C ();  Constructor. ;  ;  TH2C (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2C (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2C (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2C (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2C (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2C (const TH2C &h2c);  Copy constructor. ;  ;  ~TH2C () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void AddBinContent (Int_t binx, Int_t biny) override;  Increment 2D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Double_t w) override;  Increment 2D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy. ;  ; TClass * IsA () const override;  ; TH2C & operator= (const TH2C &h1);  Operator =. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2C.html:60,Guid,Guide,60,doc/master/classTH2C.html,https://root.cern,https://root.cern/doc/master/classTH2C.html,1,['Guid'],['Guide']
